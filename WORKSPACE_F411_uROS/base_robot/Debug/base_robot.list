
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001db1c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe0  0801dcc0  0801dcc0  0002dcc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801eca0  0801eca0  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  0801eca0  0801eca0  0002eca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801eca8  0801eca8  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801eca8  0801eca8  0002eca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ecac  0801ecac  0002ecac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  0801ecb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e7e0  20000258  0801ef04  00030258  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000ea38  0801ef04  0003ea38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 12 .debug_info   000e64e0  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00017ed6  00000000  00000000  00116764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004380  00000000  00000000  0012e640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000b738  00000000  00000000  001329c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246c7  00000000  00000000  0013e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0006fd8f  00000000  00000000  001627bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b80df  00000000  00000000  001d254e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a9  00000000  00000000  0028a62d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000115c8  00000000  00000000  0028a6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00057bbf  00000000  00000000  0029bca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801dca4 	.word	0x0801dca4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	0801dca4 	.word	0x0801dca4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cd6:	f000 b9f5 	b.w	80010c4 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d6c:	f000 b9aa 	b.w	80010c4 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468e      	mov	lr, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d14d      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	4694      	mov	ip, r2
 8000e06:	d969      	bls.n	8000edc <__udivmoddi4+0xe8>
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	b152      	cbz	r2, 8000e24 <__udivmoddi4+0x30>
 8000e0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000e12:	f1c2 0120 	rsb	r1, r2, #32
 8000e16:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1e:	ea41 0e03 	orr.w	lr, r1, r3
 8000e22:	4094      	lsls	r4, r2
 8000e24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e28:	0c21      	lsrs	r1, r4, #16
 8000e2a:	fbbe f6f8 	udiv	r6, lr, r8
 8000e2e:	fa1f f78c 	uxth.w	r7, ip
 8000e32:	fb08 e316 	mls	r3, r8, r6, lr
 8000e36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e3a:	fb06 f107 	mul.w	r1, r6, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e4a:	f080 811f 	bcs.w	800108c <__udivmoddi4+0x298>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 811c 	bls.w	800108c <__udivmoddi4+0x298>
 8000e54:	3e02      	subs	r6, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e68:	fb00 f707 	mul.w	r7, r0, r7
 8000e6c:	42a7      	cmp	r7, r4
 8000e6e:	d90a      	bls.n	8000e86 <__udivmoddi4+0x92>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e78:	f080 810a 	bcs.w	8001090 <__udivmoddi4+0x29c>
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	f240 8107 	bls.w	8001090 <__udivmoddi4+0x29c>
 8000e82:	4464      	add	r4, ip
 8000e84:	3802      	subs	r0, #2
 8000e86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e8a:	1be4      	subs	r4, r4, r7
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	b11d      	cbz	r5, 8000e98 <__udivmoddi4+0xa4>
 8000e90:	40d4      	lsrs	r4, r2
 8000e92:	2300      	movs	r3, #0
 8000e94:	e9c5 4300 	strd	r4, r3, [r5]
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0xc2>
 8000ea2:	2d00      	cmp	r5, #0
 8000ea4:	f000 80ef 	beq.w	8001086 <__udivmoddi4+0x292>
 8000ea8:	2600      	movs	r6, #0
 8000eaa:	e9c5 0100 	strd	r0, r1, [r5]
 8000eae:	4630      	mov	r0, r6
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	fab3 f683 	clz	r6, r3
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	d14a      	bne.n	8000f54 <__udivmoddi4+0x160>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d302      	bcc.n	8000ec8 <__udivmoddi4+0xd4>
 8000ec2:	4282      	cmp	r2, r0
 8000ec4:	f200 80f9 	bhi.w	80010ba <__udivmoddi4+0x2c6>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb61 0303 	sbc.w	r3, r1, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	469e      	mov	lr, r3
 8000ed2:	2d00      	cmp	r5, #0
 8000ed4:	d0e0      	beq.n	8000e98 <__udivmoddi4+0xa4>
 8000ed6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000eda:	e7dd      	b.n	8000e98 <__udivmoddi4+0xa4>
 8000edc:	b902      	cbnz	r2, 8000ee0 <__udivmoddi4+0xec>
 8000ede:	deff      	udf	#255	; 0xff
 8000ee0:	fab2 f282 	clz	r2, r2
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	f040 8092 	bne.w	800100e <__udivmoddi4+0x21a>
 8000eea:	eba1 010c 	sub.w	r1, r1, ip
 8000eee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef2:	fa1f fe8c 	uxth.w	lr, ip
 8000ef6:	2601      	movs	r6, #1
 8000ef8:	0c20      	lsrs	r0, r4, #16
 8000efa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000efe:	fb07 1113 	mls	r1, r7, r3, r1
 8000f02:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f06:	fb0e f003 	mul.w	r0, lr, r3
 8000f0a:	4288      	cmp	r0, r1
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x12c>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000f16:	d202      	bcs.n	8000f1e <__udivmoddi4+0x12a>
 8000f18:	4288      	cmp	r0, r1
 8000f1a:	f200 80cb 	bhi.w	80010b4 <__udivmoddi4+0x2c0>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	1a09      	subs	r1, r1, r0
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1110 	mls	r1, r7, r0, r1
 8000f2c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f30:	fb0e fe00 	mul.w	lr, lr, r0
 8000f34:	45a6      	cmp	lr, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x156>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f40:	d202      	bcs.n	8000f48 <__udivmoddi4+0x154>
 8000f42:	45a6      	cmp	lr, r4
 8000f44:	f200 80bb 	bhi.w	80010be <__udivmoddi4+0x2ca>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	eba4 040e 	sub.w	r4, r4, lr
 8000f4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f52:	e79c      	b.n	8000e8e <__udivmoddi4+0x9a>
 8000f54:	f1c6 0720 	rsb	r7, r6, #32
 8000f58:	40b3      	lsls	r3, r6
 8000f5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f62:	fa20 f407 	lsr.w	r4, r0, r7
 8000f66:	fa01 f306 	lsl.w	r3, r1, r6
 8000f6a:	431c      	orrs	r4, r3
 8000f6c:	40f9      	lsrs	r1, r7
 8000f6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f72:	fa00 f306 	lsl.w	r3, r0, r6
 8000f76:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f7a:	0c20      	lsrs	r0, r4, #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fb09 1118 	mls	r1, r9, r8, r1
 8000f84:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f88:	fb08 f00e 	mul.w	r0, r8, lr
 8000f8c:	4288      	cmp	r0, r1
 8000f8e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f92:	d90b      	bls.n	8000fac <__udivmoddi4+0x1b8>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f9c:	f080 8088 	bcs.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	f240 8085 	bls.w	80010b0 <__udivmoddi4+0x2bc>
 8000fa6:	f1a8 0802 	sub.w	r8, r8, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1a09      	subs	r1, r1, r0
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fb4:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fbc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc0:	458e      	cmp	lr, r1
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x1e2>
 8000fc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000fcc:	d26c      	bcs.n	80010a8 <__udivmoddi4+0x2b4>
 8000fce:	458e      	cmp	lr, r1
 8000fd0:	d96a      	bls.n	80010a8 <__udivmoddi4+0x2b4>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4461      	add	r1, ip
 8000fd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fda:	fba0 9402 	umull	r9, r4, r0, r2
 8000fde:	eba1 010e 	sub.w	r1, r1, lr
 8000fe2:	42a1      	cmp	r1, r4
 8000fe4:	46c8      	mov	r8, r9
 8000fe6:	46a6      	mov	lr, r4
 8000fe8:	d356      	bcc.n	8001098 <__udivmoddi4+0x2a4>
 8000fea:	d053      	beq.n	8001094 <__udivmoddi4+0x2a0>
 8000fec:	b15d      	cbz	r5, 8001006 <__udivmoddi4+0x212>
 8000fee:	ebb3 0208 	subs.w	r2, r3, r8
 8000ff2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ff6:	fa01 f707 	lsl.w	r7, r1, r7
 8000ffa:	fa22 f306 	lsr.w	r3, r2, r6
 8000ffe:	40f1      	lsrs	r1, r6
 8001000:	431f      	orrs	r7, r3
 8001002:	e9c5 7100 	strd	r7, r1, [r5]
 8001006:	2600      	movs	r6, #0
 8001008:	4631      	mov	r1, r6
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	f1c2 0320 	rsb	r3, r2, #32
 8001012:	40d8      	lsrs	r0, r3
 8001014:	fa0c fc02 	lsl.w	ip, ip, r2
 8001018:	fa21 f303 	lsr.w	r3, r1, r3
 800101c:	4091      	lsls	r1, r2
 800101e:	4301      	orrs	r1, r0
 8001020:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001024:	fa1f fe8c 	uxth.w	lr, ip
 8001028:	fbb3 f0f7 	udiv	r0, r3, r7
 800102c:	fb07 3610 	mls	r6, r7, r0, r3
 8001030:	0c0b      	lsrs	r3, r1, #16
 8001032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001036:	fb00 f60e 	mul.w	r6, r0, lr
 800103a:	429e      	cmp	r6, r3
 800103c:	fa04 f402 	lsl.w	r4, r4, r2
 8001040:	d908      	bls.n	8001054 <__udivmoddi4+0x260>
 8001042:	eb1c 0303 	adds.w	r3, ip, r3
 8001046:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800104a:	d22f      	bcs.n	80010ac <__udivmoddi4+0x2b8>
 800104c:	429e      	cmp	r6, r3
 800104e:	d92d      	bls.n	80010ac <__udivmoddi4+0x2b8>
 8001050:	3802      	subs	r0, #2
 8001052:	4463      	add	r3, ip
 8001054:	1b9b      	subs	r3, r3, r6
 8001056:	b289      	uxth	r1, r1
 8001058:	fbb3 f6f7 	udiv	r6, r3, r7
 800105c:	fb07 3316 	mls	r3, r7, r6, r3
 8001060:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001064:	fb06 f30e 	mul.w	r3, r6, lr
 8001068:	428b      	cmp	r3, r1
 800106a:	d908      	bls.n	800107e <__udivmoddi4+0x28a>
 800106c:	eb1c 0101 	adds.w	r1, ip, r1
 8001070:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001074:	d216      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001076:	428b      	cmp	r3, r1
 8001078:	d914      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 800107a:	3e02      	subs	r6, #2
 800107c:	4461      	add	r1, ip
 800107e:	1ac9      	subs	r1, r1, r3
 8001080:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001084:	e738      	b.n	8000ef8 <__udivmoddi4+0x104>
 8001086:	462e      	mov	r6, r5
 8001088:	4628      	mov	r0, r5
 800108a:	e705      	b.n	8000e98 <__udivmoddi4+0xa4>
 800108c:	4606      	mov	r6, r0
 800108e:	e6e3      	b.n	8000e58 <__udivmoddi4+0x64>
 8001090:	4618      	mov	r0, r3
 8001092:	e6f8      	b.n	8000e86 <__udivmoddi4+0x92>
 8001094:	454b      	cmp	r3, r9
 8001096:	d2a9      	bcs.n	8000fec <__udivmoddi4+0x1f8>
 8001098:	ebb9 0802 	subs.w	r8, r9, r2
 800109c:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010a0:	3801      	subs	r0, #1
 80010a2:	e7a3      	b.n	8000fec <__udivmoddi4+0x1f8>
 80010a4:	4646      	mov	r6, r8
 80010a6:	e7ea      	b.n	800107e <__udivmoddi4+0x28a>
 80010a8:	4620      	mov	r0, r4
 80010aa:	e794      	b.n	8000fd6 <__udivmoddi4+0x1e2>
 80010ac:	4640      	mov	r0, r8
 80010ae:	e7d1      	b.n	8001054 <__udivmoddi4+0x260>
 80010b0:	46d0      	mov	r8, sl
 80010b2:	e77b      	b.n	8000fac <__udivmoddi4+0x1b8>
 80010b4:	3b02      	subs	r3, #2
 80010b6:	4461      	add	r1, ip
 80010b8:	e732      	b.n	8000f20 <__udivmoddi4+0x12c>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e709      	b.n	8000ed2 <__udivmoddi4+0xde>
 80010be:	4464      	add	r4, ip
 80010c0:	3802      	subs	r0, #2
 80010c2:	e742      	b.n	8000f4a <__udivmoddi4+0x156>

080010c4 <__aeabi_idiv0>:
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop

080010c8 <millis>:
// Locally used functions (private)
//---------------------------------------------------------
uint8_t VL53L0X_performSingleRefCalibration(uint8_t vhv_init_byte);

uint8_t millis()
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

return 0;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	71bb      	strb	r3, [r7, #6]
	i2c1_WriteRegBuffer(0x53,reg,&value,1);
 80010e8:	1dba      	adds	r2, r7, #6
 80010ea:	79f9      	ldrb	r1, [r7, #7]
 80010ec:	2301      	movs	r3, #1
 80010ee:	2053      	movs	r0, #83	; 0x53
 80010f0:	f001 f826 	bl	8002140 <i2c1_WriteRegBuffer>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <writeReg16Bit>:
// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	460a      	mov	r2, r1
 8001106:	71fb      	strb	r3, [r7, #7]
 8001108:	4613      	mov	r3, r2
 800110a:	80bb      	strh	r3, [r7, #4]
	uint8_t tab[2];
	tab[0]= ((value >> 8));
 800110c:	88bb      	ldrh	r3, [r7, #4]
 800110e:	0a1b      	lsrs	r3, r3, #8
 8001110:	b29b      	uxth	r3, r3
 8001112:	b2db      	uxtb	r3, r3
 8001114:	733b      	strb	r3, [r7, #12]
	tab[1] = ((value ) & 0xFF);
 8001116:	88bb      	ldrh	r3, [r7, #4]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	737b      	strb	r3, [r7, #13]
	i2c1_WriteRegBuffer(0x53,reg,tab,2);
 800111c:	f107 020c 	add.w	r2, r7, #12
 8001120:	79f9      	ldrb	r1, [r7, #7]
 8001122:	2302      	movs	r3, #2
 8001124:	2053      	movs	r0, #83	; 0x53
 8001126:	f001 f80b 	bl	8002140 <i2c1_WriteRegBuffer>
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <writeReg32Bit>:
// Write a 32-bit register
void writeReg32Bit(uint8_t reg, uint32_t value){
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	6039      	str	r1, [r7, #0]
 800113c:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[4];
		tab[3]= ((value >> 24) & 0xFF);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	0e1b      	lsrs	r3, r3, #24
 8001142:	b2db      	uxtb	r3, r3
 8001144:	73fb      	strb	r3, [r7, #15]
		tab[2]= ((value >> 16) & 0xFF);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	0c1b      	lsrs	r3, r3, #16
 800114a:	b2db      	uxtb	r3, r3
 800114c:	73bb      	strb	r3, [r7, #14]
		tab[1]= ((value >> 8) & 0xFF);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	b2db      	uxtb	r3, r3
 8001154:	737b      	strb	r3, [r7, #13]
		tab[0] = ((value ) & 0xFF);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	733b      	strb	r3, [r7, #12]
		i2c1_WriteRegBuffer(0x53,reg,tab,4);
 800115c:	f107 020c 	add.w	r2, r7, #12
 8001160:	79f9      	ldrb	r1, [r7, #7]
 8001162:	2304      	movs	r3, #4
 8001164:	2053      	movs	r0, #83	; 0x53
 8001166:	f000 ffeb 	bl	8002140 <i2c1_WriteRegBuffer>
}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <readReg>:
// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	71fb      	strb	r3, [r7, #7]
  	uint8_t value=0;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]
  	i2c1_ReadRegBuffer(0x53,reg,&value,1);
 8001180:	f107 020f 	add.w	r2, r7, #15
 8001184:	79f9      	ldrb	r1, [r7, #7]
 8001186:	2301      	movs	r3, #1
 8001188:	2053      	movs	r0, #83	; 0x53
 800118a:	f000 ffa7 	bl	80020dc <i2c1_ReadRegBuffer>
  	return value;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <readReg16Bit>:
// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[2];
	i2c1_ReadRegBuffer(0x53,reg,tab,2);
 80011a2:	f107 020c 	add.w	r2, r7, #12
 80011a6:	79f9      	ldrb	r1, [r7, #7]
 80011a8:	2302      	movs	r3, #2
 80011aa:	2053      	movs	r0, #83	; 0x53
 80011ac:	f000 ff96 	bl	80020dc <i2c1_ReadRegBuffer>
  	uint16_t value= ((uint16_t)tab[0] << 8) | (uint16_t)tab[1];
 80011b0:	7b3b      	ldrb	r3, [r7, #12]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	7b7b      	ldrb	r3, [r7, #13]
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b21b      	sxth	r3, r3
 80011be:	81fb      	strh	r3, [r7, #14]
  	return value;
 80011c0:	89fb      	ldrh	r3, [r7, #14]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <readMulti>:


// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	6039      	str	r1, [r7, #0]
 80011d4:	71fb      	strb	r3, [r7, #7]
 80011d6:	4613      	mov	r3, r2
 80011d8:	71bb      	strb	r3, [r7, #6]
	uint8_t value=0;
 80011da:	2300      	movs	r3, #0
 80011dc:	73fb      	strb	r3, [r7, #15]

  while (count-- > 0)
 80011de:	e00b      	b.n	80011f8 <readMulti+0x2e>
  {
	  i2c1_ReadRegBuffer(0x53,reg,&value,1);
 80011e0:	f107 020f 	add.w	r2, r7, #15
 80011e4:	79f9      	ldrb	r1, [r7, #7]
 80011e6:	2301      	movs	r3, #1
 80011e8:	2053      	movs	r0, #83	; 0x53
 80011ea:	f000 ff77 	bl	80020dc <i2c1_ReadRegBuffer>
    *(dst++) = value;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	603a      	str	r2, [r7, #0]
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	701a      	strb	r2, [r3, #0]
  while (count-- > 0)
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	1e5a      	subs	r2, r3, #1
 80011fc:	71ba      	strb	r2, [r7, #6]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1ee      	bne.n	80011e0 <readMulti+0x16>
  }
}
 8001202:	bf00      	nop
 8001204:	bf00      	nop
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <VL53L0X_validateInterface>:
uint8_t VL53L0X_getAddress() {
  return g_i2cAddr;
}
//===========================================================================
uint8_t VL53L0X_validateInterface()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	uint16_t var=0;
 8001212:	2300      	movs	r3, #0
 8001214:	80fb      	strh	r3, [r7, #6]
	var = readReg(0xC0);
 8001216:	20c0      	movs	r0, #192	; 0xc0
 8001218:	f7ff ffab 	bl	8001172 <readReg>
 800121c:	4603      	mov	r3, r0
 800121e:	80fb      	strh	r3, [r7, #6]
	if ( var == 0xEE)
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	2bee      	cmp	r3, #238	; 0xee
 8001224:	d121      	bne.n	800126a <VL53L0X_validateInterface+0x5e>
	{
		var =readReg(0xC1);
 8001226:	20c1      	movs	r0, #193	; 0xc1
 8001228:	f7ff ffa3 	bl	8001172 <readReg>
 800122c:	4603      	mov	r3, r0
 800122e:	80fb      	strh	r3, [r7, #6]
		if ( var == 0xAA)
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	2baa      	cmp	r3, #170	; 0xaa
 8001234:	d119      	bne.n	800126a <VL53L0X_validateInterface+0x5e>
		{
			var =readReg(0xC2);
 8001236:	20c2      	movs	r0, #194	; 0xc2
 8001238:	f7ff ff9b 	bl	8001172 <readReg>
 800123c:	4603      	mov	r3, r0
 800123e:	80fb      	strh	r3, [r7, #6]
			if ( var == 0x10)
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	2b10      	cmp	r3, #16
 8001244:	d111      	bne.n	800126a <VL53L0X_validateInterface+0x5e>
			{
				var =readReg16Bit(0x51);
 8001246:	2051      	movs	r0, #81	; 0x51
 8001248:	f7ff ffa6 	bl	8001198 <readReg16Bit>
 800124c:	4603      	mov	r3, r0
 800124e:	80fb      	strh	r3, [r7, #6]
				if ( var == 0x0096) // doc 0x0099 ??
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	2b96      	cmp	r3, #150	; 0x96
 8001254:	d109      	bne.n	800126a <VL53L0X_validateInterface+0x5e>
				{
					var =readReg16Bit(0x61);
 8001256:	2061      	movs	r0, #97	; 0x61
 8001258:	f7ff ff9e 	bl	8001198 <readReg16Bit>
 800125c:	4603      	mov	r3, r0
 800125e:	80fb      	strh	r3, [r7, #6]
					if ( var == 0x0000)
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <VL53L0X_validateInterface+0x5e>
					{
						return 0;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <VL53L0X_validateInterface+0x60>
					}
				}
			}
		}
	}
	return -1;
 800126a:	23ff      	movs	r3, #255	; 0xff
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <VL53L0X_init>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
uint8_t VL53L0X_init( ){
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  //****************************************************************************
  // DATA INIT
  // "Set I2C standard mode"
  writeReg(I2C_MODE, 0x00);
 800127a:	2100      	movs	r1, #0
 800127c:	2088      	movs	r0, #136	; 0x88
 800127e:	f7ff ff2b 	bl	80010d8 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 8001282:	2101      	movs	r1, #1
 8001284:	2080      	movs	r0, #128	; 0x80
 8001286:	f7ff ff27 	bl	80010d8 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x01);
 800128a:	2101      	movs	r1, #1
 800128c:	20ff      	movs	r0, #255	; 0xff
 800128e:	f7ff ff23 	bl	80010d8 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 8001292:	2100      	movs	r1, #0
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff ff1f 	bl	80010d8 <writeReg>
  g_stopVariable = readReg(0x91);
 800129a:	2091      	movs	r0, #145	; 0x91
 800129c:	f7ff ff69 	bl	8001172 <readReg>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4bde      	ldr	r3, [pc, #888]	; (8001620 <VL53L0X_init+0x3ac>)
 80012a6:	701a      	strb	r2, [r3, #0]
  writeReg(SYSRANGE_START, 0x01);
 80012a8:	2101      	movs	r1, #1
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7ff ff14 	bl	80010d8 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 80012b0:	2100      	movs	r1, #0
 80012b2:	20ff      	movs	r0, #255	; 0xff
 80012b4:	f7ff ff10 	bl	80010d8 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 80012b8:	2100      	movs	r1, #0
 80012ba:	2080      	movs	r0, #128	; 0x80
 80012bc:	f7ff ff0c 	bl	80010d8 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80012c0:	2060      	movs	r0, #96	; 0x60
 80012c2:	f7ff ff56 	bl	8001172 <readReg>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f043 0312 	orr.w	r3, r3, #18
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4619      	mov	r1, r3
 80012d0:	2060      	movs	r0, #96	; 0x60
 80012d2:	f7ff ff01 	bl	80010d8 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  VL53L0X_setSignalRateLimit(0.25);
 80012d6:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80012da:	f000 f9a5 	bl	8001628 <VL53L0X_setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80012de:	21ff      	movs	r1, #255	; 0xff
 80012e0:	2001      	movs	r0, #1
 80012e2:	f7ff fef9 	bl	80010d8 <writeReg>
  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!VL53L0X_getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80012e6:	1dba      	adds	r2, r7, #6
 80012e8:	1dfb      	adds	r3, r7, #7
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f9eb 	bl	80016c8 <VL53L0X_getSpadInfo>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d101      	bne.n	80012fc <VL53L0X_init+0x88>
 80012f8:	2300      	movs	r3, #0
 80012fa:	e18d      	b.n	8001618 <VL53L0X_init+0x3a4>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80012fc:	463b      	mov	r3, r7
 80012fe:	2206      	movs	r2, #6
 8001300:	4619      	mov	r1, r3
 8001302:	20b0      	movs	r0, #176	; 0xb0
 8001304:	f7ff ff61 	bl	80011ca <readMulti>
  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)
  writeReg(INTERNAL_TUNING_2, 0x01);
 8001308:	2101      	movs	r1, #1
 800130a:	20ff      	movs	r0, #255	; 0xff
 800130c:	f7ff fee4 	bl	80010d8 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8001310:	2100      	movs	r1, #0
 8001312:	204f      	movs	r0, #79	; 0x4f
 8001314:	f7ff fee0 	bl	80010d8 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8001318:	212c      	movs	r1, #44	; 0x2c
 800131a:	204e      	movs	r0, #78	; 0x4e
 800131c:	f7ff fedc 	bl	80010d8 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 8001320:	2100      	movs	r1, #0
 8001322:	20ff      	movs	r0, #255	; 0xff
 8001324:	f7ff fed8 	bl	80010d8 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001328:	21b4      	movs	r1, #180	; 0xb4
 800132a:	20b6      	movs	r0, #182	; 0xb6
 800132c:	f7ff fed4 	bl	80010d8 <writeReg>
  // -- VL53L0X_set_reference_spads() end
  //****************************************************************************
  // LOAD TUNING SETTINGS
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001330:	2101      	movs	r1, #1
 8001332:	20ff      	movs	r0, #255	; 0xff
 8001334:	f7ff fed0 	bl	80010d8 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 8001338:	2100      	movs	r1, #0
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff fecc 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001340:	2100      	movs	r1, #0
 8001342:	20ff      	movs	r0, #255	; 0xff
 8001344:	f7ff fec8 	bl	80010d8 <writeReg>
  writeReg(SYSTEM_RANGE_CONFIG, 0x00);
 8001348:	2100      	movs	r1, #0
 800134a:	2009      	movs	r0, #9
 800134c:	f7ff fec4 	bl	80010d8 <writeReg>
  writeReg(0x10, 0x00);
 8001350:	2100      	movs	r1, #0
 8001352:	2010      	movs	r0, #16
 8001354:	f7ff fec0 	bl	80010d8 <writeReg>
  writeReg(0x11, 0x00);
 8001358:	2100      	movs	r1, #0
 800135a:	2011      	movs	r0, #17
 800135c:	f7ff febc 	bl	80010d8 <writeReg>

  writeReg(0x24, 0x01);
 8001360:	2101      	movs	r1, #1
 8001362:	2024      	movs	r0, #36	; 0x24
 8001364:	f7ff feb8 	bl	80010d8 <writeReg>
  writeReg(0x25, 0xFF);
 8001368:	21ff      	movs	r1, #255	; 0xff
 800136a:	2025      	movs	r0, #37	; 0x25
 800136c:	f7ff feb4 	bl	80010d8 <writeReg>
  writeReg(0x75, 0x00);
 8001370:	2100      	movs	r1, #0
 8001372:	2075      	movs	r0, #117	; 0x75
 8001374:	f7ff feb0 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001378:	2101      	movs	r1, #1
 800137a:	20ff      	movs	r0, #255	; 0xff
 800137c:	f7ff feac 	bl	80010d8 <writeReg>
  writeReg(0x4E, 0x2C);
 8001380:	212c      	movs	r1, #44	; 0x2c
 8001382:	204e      	movs	r0, #78	; 0x4e
 8001384:	f7ff fea8 	bl	80010d8 <writeReg>
  writeReg(0x48, 0x00);
 8001388:	2100      	movs	r1, #0
 800138a:	2048      	movs	r0, #72	; 0x48
 800138c:	f7ff fea4 	bl	80010d8 <writeReg>
  writeReg(0x30, 0x20);
 8001390:	2120      	movs	r1, #32
 8001392:	2030      	movs	r0, #48	; 0x30
 8001394:	f7ff fea0 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001398:	2100      	movs	r1, #0
 800139a:	20ff      	movs	r0, #255	; 0xff
 800139c:	f7ff fe9c 	bl	80010d8 <writeReg>
  writeReg(0x30, 0x09);
 80013a0:	2109      	movs	r1, #9
 80013a2:	2030      	movs	r0, #48	; 0x30
 80013a4:	f7ff fe98 	bl	80010d8 <writeReg>
  writeReg(0x54, 0x00);
 80013a8:	2100      	movs	r1, #0
 80013aa:	2054      	movs	r0, #84	; 0x54
 80013ac:	f7ff fe94 	bl	80010d8 <writeReg>
  writeReg(0x31, 0x04);
 80013b0:	2104      	movs	r1, #4
 80013b2:	2031      	movs	r0, #49	; 0x31
 80013b4:	f7ff fe90 	bl	80010d8 <writeReg>
  writeReg(0x32, 0x03);
 80013b8:	2103      	movs	r1, #3
 80013ba:	2032      	movs	r0, #50	; 0x32
 80013bc:	f7ff fe8c 	bl	80010d8 <writeReg>
  writeReg(0x40, 0x83);
 80013c0:	2183      	movs	r1, #131	; 0x83
 80013c2:	2040      	movs	r0, #64	; 0x40
 80013c4:	f7ff fe88 	bl	80010d8 <writeReg>
  writeReg(0x46, 0x25);
 80013c8:	2125      	movs	r1, #37	; 0x25
 80013ca:	2046      	movs	r0, #70	; 0x46
 80013cc:	f7ff fe84 	bl	80010d8 <writeReg>
  writeReg(0x60, 0x00);
 80013d0:	2100      	movs	r1, #0
 80013d2:	2060      	movs	r0, #96	; 0x60
 80013d4:	f7ff fe80 	bl	80010d8 <writeReg>
  writeReg(0x27, 0x00);
 80013d8:	2100      	movs	r1, #0
 80013da:	2027      	movs	r0, #39	; 0x27
 80013dc:	f7ff fe7c 	bl	80010d8 <writeReg>
  writeReg(0x50, 0x06);
 80013e0:	2106      	movs	r1, #6
 80013e2:	2050      	movs	r0, #80	; 0x50
 80013e4:	f7ff fe78 	bl	80010d8 <writeReg>
  writeReg(0x51, 0x00);
 80013e8:	2100      	movs	r1, #0
 80013ea:	2051      	movs	r0, #81	; 0x51
 80013ec:	f7ff fe74 	bl	80010d8 <writeReg>
  writeReg(0x52, 0x96);
 80013f0:	2196      	movs	r1, #150	; 0x96
 80013f2:	2052      	movs	r0, #82	; 0x52
 80013f4:	f7ff fe70 	bl	80010d8 <writeReg>
  writeReg(0x56, 0x08);
 80013f8:	2108      	movs	r1, #8
 80013fa:	2056      	movs	r0, #86	; 0x56
 80013fc:	f7ff fe6c 	bl	80010d8 <writeReg>
  writeReg(0x57, 0x30);
 8001400:	2130      	movs	r1, #48	; 0x30
 8001402:	2057      	movs	r0, #87	; 0x57
 8001404:	f7ff fe68 	bl	80010d8 <writeReg>
  writeReg(0x61, 0x00);
 8001408:	2100      	movs	r1, #0
 800140a:	2061      	movs	r0, #97	; 0x61
 800140c:	f7ff fe64 	bl	80010d8 <writeReg>
  writeReg(0x62, 0x00);
 8001410:	2100      	movs	r1, #0
 8001412:	2062      	movs	r0, #98	; 0x62
 8001414:	f7ff fe60 	bl	80010d8 <writeReg>
  writeReg(0x64, 0x00);
 8001418:	2100      	movs	r1, #0
 800141a:	2064      	movs	r0, #100	; 0x64
 800141c:	f7ff fe5c 	bl	80010d8 <writeReg>
  writeReg(0x65, 0x00);
 8001420:	2100      	movs	r1, #0
 8001422:	2065      	movs	r0, #101	; 0x65
 8001424:	f7ff fe58 	bl	80010d8 <writeReg>
  writeReg(0x66, 0xA0);
 8001428:	21a0      	movs	r1, #160	; 0xa0
 800142a:	2066      	movs	r0, #102	; 0x66
 800142c:	f7ff fe54 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001430:	2101      	movs	r1, #1
 8001432:	20ff      	movs	r0, #255	; 0xff
 8001434:	f7ff fe50 	bl	80010d8 <writeReg>
  writeReg(0x22, 0x32);
 8001438:	2132      	movs	r1, #50	; 0x32
 800143a:	2022      	movs	r0, #34	; 0x22
 800143c:	f7ff fe4c 	bl	80010d8 <writeReg>
  writeReg(0x47, 0x14);
 8001440:	2114      	movs	r1, #20
 8001442:	2047      	movs	r0, #71	; 0x47
 8001444:	f7ff fe48 	bl	80010d8 <writeReg>
  writeReg(0x49, 0xFF);
 8001448:	21ff      	movs	r1, #255	; 0xff
 800144a:	2049      	movs	r0, #73	; 0x49
 800144c:	f7ff fe44 	bl	80010d8 <writeReg>
  writeReg(0x4A, 0x00);
 8001450:	2100      	movs	r1, #0
 8001452:	204a      	movs	r0, #74	; 0x4a
 8001454:	f7ff fe40 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001458:	2100      	movs	r1, #0
 800145a:	20ff      	movs	r0, #255	; 0xff
 800145c:	f7ff fe3c 	bl	80010d8 <writeReg>
  writeReg(0x7A, 0x0A);
 8001460:	210a      	movs	r1, #10
 8001462:	207a      	movs	r0, #122	; 0x7a
 8001464:	f7ff fe38 	bl	80010d8 <writeReg>
  writeReg(0x7B, 0x00);
 8001468:	2100      	movs	r1, #0
 800146a:	207b      	movs	r0, #123	; 0x7b
 800146c:	f7ff fe34 	bl	80010d8 <writeReg>
  writeReg(0x78, 0x21);
 8001470:	2121      	movs	r1, #33	; 0x21
 8001472:	2078      	movs	r0, #120	; 0x78
 8001474:	f7ff fe30 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001478:	2101      	movs	r1, #1
 800147a:	20ff      	movs	r0, #255	; 0xff
 800147c:	f7ff fe2c 	bl	80010d8 <writeReg>
  writeReg(0x23, 0x34);
 8001480:	2134      	movs	r1, #52	; 0x34
 8001482:	2023      	movs	r0, #35	; 0x23
 8001484:	f7ff fe28 	bl	80010d8 <writeReg>
  writeReg(0x42, 0x00);
 8001488:	2100      	movs	r1, #0
 800148a:	2042      	movs	r0, #66	; 0x42
 800148c:	f7ff fe24 	bl	80010d8 <writeReg>
  writeReg(0x44, 0xFF);
 8001490:	21ff      	movs	r1, #255	; 0xff
 8001492:	2044      	movs	r0, #68	; 0x44
 8001494:	f7ff fe20 	bl	80010d8 <writeReg>
  writeReg(0x45, 0x26);
 8001498:	2126      	movs	r1, #38	; 0x26
 800149a:	2045      	movs	r0, #69	; 0x45
 800149c:	f7ff fe1c 	bl	80010d8 <writeReg>
  writeReg(0x46, 0x05);
 80014a0:	2105      	movs	r1, #5
 80014a2:	2046      	movs	r0, #70	; 0x46
 80014a4:	f7ff fe18 	bl	80010d8 <writeReg>
  writeReg(0x40, 0x40);
 80014a8:	2140      	movs	r1, #64	; 0x40
 80014aa:	2040      	movs	r0, #64	; 0x40
 80014ac:	f7ff fe14 	bl	80010d8 <writeReg>
  writeReg(0x0E, 0x06);
 80014b0:	2106      	movs	r1, #6
 80014b2:	200e      	movs	r0, #14
 80014b4:	f7ff fe10 	bl	80010d8 <writeReg>
  writeReg(0x20, 0x1A);
 80014b8:	211a      	movs	r1, #26
 80014ba:	2020      	movs	r0, #32
 80014bc:	f7ff fe0c 	bl	80010d8 <writeReg>
  writeReg(0x43, 0x40);
 80014c0:	2140      	movs	r1, #64	; 0x40
 80014c2:	2043      	movs	r0, #67	; 0x43
 80014c4:	f7ff fe08 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 80014c8:	2100      	movs	r1, #0
 80014ca:	20ff      	movs	r0, #255	; 0xff
 80014cc:	f7ff fe04 	bl	80010d8 <writeReg>
  writeReg(0x34, 0x03);
 80014d0:	2103      	movs	r1, #3
 80014d2:	2034      	movs	r0, #52	; 0x34
 80014d4:	f7ff fe00 	bl	80010d8 <writeReg>
  writeReg(0x35, 0x44);
 80014d8:	2144      	movs	r1, #68	; 0x44
 80014da:	2035      	movs	r0, #53	; 0x35
 80014dc:	f7ff fdfc 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 80014e0:	2101      	movs	r1, #1
 80014e2:	20ff      	movs	r0, #255	; 0xff
 80014e4:	f7ff fdf8 	bl	80010d8 <writeReg>
  writeReg(0x31, 0x04);
 80014e8:	2104      	movs	r1, #4
 80014ea:	2031      	movs	r0, #49	; 0x31
 80014ec:	f7ff fdf4 	bl	80010d8 <writeReg>
  writeReg(0x4B, 0x09);
 80014f0:	2109      	movs	r1, #9
 80014f2:	204b      	movs	r0, #75	; 0x4b
 80014f4:	f7ff fdf0 	bl	80010d8 <writeReg>
  writeReg(0x4C, 0x05);
 80014f8:	2105      	movs	r1, #5
 80014fa:	204c      	movs	r0, #76	; 0x4c
 80014fc:	f7ff fdec 	bl	80010d8 <writeReg>
  writeReg(0x4D, 0x04);
 8001500:	2104      	movs	r1, #4
 8001502:	204d      	movs	r0, #77	; 0x4d
 8001504:	f7ff fde8 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001508:	2100      	movs	r1, #0
 800150a:	20ff      	movs	r0, #255	; 0xff
 800150c:	f7ff fde4 	bl	80010d8 <writeReg>
  writeReg(0x44, 0x00);
 8001510:	2100      	movs	r1, #0
 8001512:	2044      	movs	r0, #68	; 0x44
 8001514:	f7ff fde0 	bl	80010d8 <writeReg>
  writeReg(0x45, 0x20);
 8001518:	2120      	movs	r1, #32
 800151a:	2045      	movs	r0, #69	; 0x45
 800151c:	f7ff fddc 	bl	80010d8 <writeReg>
  writeReg(0x47, 0x08);
 8001520:	2108      	movs	r1, #8
 8001522:	2047      	movs	r0, #71	; 0x47
 8001524:	f7ff fdd8 	bl	80010d8 <writeReg>
  writeReg(0x48, 0x28);
 8001528:	2128      	movs	r1, #40	; 0x28
 800152a:	2048      	movs	r0, #72	; 0x48
 800152c:	f7ff fdd4 	bl	80010d8 <writeReg>
  writeReg(0x67, 0x00);
 8001530:	2100      	movs	r1, #0
 8001532:	2067      	movs	r0, #103	; 0x67
 8001534:	f7ff fdd0 	bl	80010d8 <writeReg>
  writeReg(0x70, 0x04);
 8001538:	2104      	movs	r1, #4
 800153a:	2070      	movs	r0, #112	; 0x70
 800153c:	f7ff fdcc 	bl	80010d8 <writeReg>
  writeReg(0x71, 0x01);
 8001540:	2101      	movs	r1, #1
 8001542:	2071      	movs	r0, #113	; 0x71
 8001544:	f7ff fdc8 	bl	80010d8 <writeReg>
  writeReg(0x72, 0xFE);
 8001548:	21fe      	movs	r1, #254	; 0xfe
 800154a:	2072      	movs	r0, #114	; 0x72
 800154c:	f7ff fdc4 	bl	80010d8 <writeReg>
  writeReg(0x76, 0x00);
 8001550:	2100      	movs	r1, #0
 8001552:	2076      	movs	r0, #118	; 0x76
 8001554:	f7ff fdc0 	bl	80010d8 <writeReg>
  writeReg(0x77, 0x00);
 8001558:	2100      	movs	r1, #0
 800155a:	2077      	movs	r0, #119	; 0x77
 800155c:	f7ff fdbc 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001560:	2101      	movs	r1, #1
 8001562:	20ff      	movs	r0, #255	; 0xff
 8001564:	f7ff fdb8 	bl	80010d8 <writeReg>
  writeReg(0x0D, 0x01);
 8001568:	2101      	movs	r1, #1
 800156a:	200d      	movs	r0, #13
 800156c:	f7ff fdb4 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001570:	2100      	movs	r1, #0
 8001572:	20ff      	movs	r0, #255	; 0xff
 8001574:	f7ff fdb0 	bl	80010d8 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 8001578:	2101      	movs	r1, #1
 800157a:	2080      	movs	r0, #128	; 0x80
 800157c:	f7ff fdac 	bl	80010d8 <writeReg>
  writeReg(0x01, 0xF8);
 8001580:	21f8      	movs	r1, #248	; 0xf8
 8001582:	2001      	movs	r0, #1
 8001584:	f7ff fda8 	bl	80010d8 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001588:	2101      	movs	r1, #1
 800158a:	20ff      	movs	r0, #255	; 0xff
 800158c:	f7ff fda4 	bl	80010d8 <writeReg>
  writeReg(0x8E, 0x01);
 8001590:	2101      	movs	r1, #1
 8001592:	208e      	movs	r0, #142	; 0x8e
 8001594:	f7ff fda0 	bl	80010d8 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 8001598:	2101      	movs	r1, #1
 800159a:	2000      	movs	r0, #0
 800159c:	f7ff fd9c 	bl	80010d8 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 80015a0:	2100      	movs	r1, #0
 80015a2:	20ff      	movs	r0, #255	; 0xff
 80015a4:	f7ff fd98 	bl	80010d8 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 80015a8:	2100      	movs	r1, #0
 80015aa:	2080      	movs	r0, #128	; 0x80
 80015ac:	f7ff fd94 	bl	80010d8 <writeReg>
  //***************************************************************************
  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80015b0:	2104      	movs	r1, #4
 80015b2:	200a      	movs	r0, #10
 80015b4:	f7ff fd90 	bl	80010d8 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80015b8:	2084      	movs	r0, #132	; 0x84
 80015ba:	f7ff fdda 	bl	8001172 <readReg>
 80015be:	4603      	mov	r3, r0
 80015c0:	f023 0310 	bic.w	r3, r3, #16
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4619      	mov	r1, r3
 80015c8:	2084      	movs	r0, #132	; 0x84
 80015ca:	f7ff fd85 	bl	80010d8 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80015ce:	2101      	movs	r1, #1
 80015d0:	200b      	movs	r0, #11
 80015d2:	f7ff fd81 	bl	80010d8 <writeReg>
  //***************************************************************************
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80015d6:	21e8      	movs	r1, #232	; 0xe8
 80015d8:	2001      	movs	r0, #1
 80015da:	f7ff fd7d 	bl	80010d8 <writeReg>
  //***************************************************************************
  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())
  // -- VL53L0X_perform_vhv_calibration() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80015de:	2101      	movs	r1, #1
 80015e0:	2001      	movs	r0, #1
 80015e2:	f7ff fd79 	bl	80010d8 <writeReg>
  if (!VL53L0X_performSingleRefCalibration(0x40)) { return false; }
 80015e6:	2040      	movs	r0, #64	; 0x40
 80015e8:	f000 f854 	bl	8001694 <VL53L0X_performSingleRefCalibration>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <VL53L0X_init+0x382>
 80015f2:	2300      	movs	r3, #0
 80015f4:	e010      	b.n	8001618 <VL53L0X_init+0x3a4>
  //***************************************************************************
  // -- VL53L0X_perform_phase_calibration() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80015f6:	2102      	movs	r1, #2
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff fd6d 	bl	80010d8 <writeReg>
  if (!VL53L0X_performSingleRefCalibration(0x00)) { return false; }
 80015fe:	2000      	movs	r0, #0
 8001600:	f000 f848 	bl	8001694 <VL53L0X_performSingleRefCalibration>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <VL53L0X_init+0x39a>
 800160a:	2300      	movs	r3, #0
 800160c:	e004      	b.n	8001618 <VL53L0X_init+0x3a4>
  //***************************************************************************
  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800160e:	21e8      	movs	r1, #232	; 0xe8
 8001610:	2001      	movs	r0, #1
 8001612:	f7ff fd61 	bl	80010d8 <writeReg>
  //***************************************************************************
  return true;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000274 	.word	0x20000274
 8001624:	00000000 	.word	0x00000000

08001628 <VL53L0X_setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
uint8_t VL53L0X_setSignalRateLimit(float limit_Mcps)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8001632:	edd7 7a01 	vldr	s15, [r7, #4]
 8001636:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800163a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163e:	d40a      	bmi.n	8001656 <VL53L0X_setSignalRateLimit+0x2e>
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7fe ff99 	bl	8000578 <__aeabi_f2d>
 8001646:	a311      	add	r3, pc, #68	; (adr r3, 800168c <VL53L0X_setSignalRateLimit+0x64>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7ff fa7c 	bl	8000b48 <__aeabi_dcmpgt>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <VL53L0X_setSignalRateLimit+0x32>
 8001656:	2300      	movs	r3, #0
 8001658:	e00f      	b.n	800167a <VL53L0X_setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 800165a:	edd7 7a01 	vldr	s15, [r7, #4]
 800165e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001688 <VL53L0X_setSignalRateLimit+0x60>
 8001662:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800166a:	ee17 3a90 	vmov	r3, s15
 800166e:	b29b      	uxth	r3, r3
 8001670:	4619      	mov	r1, r3
 8001672:	2044      	movs	r0, #68	; 0x44
 8001674:	f7ff fd42 	bl	80010fc <writeReg16Bit>
  return true;
 8001678:	2301      	movs	r3, #1
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	f3af 8000 	nop.w
 8001688:	43000000 	.word	0x43000000
 800168c:	0a3d70a4 	.word	0x0a3d70a4
 8001690:	407fffd7 	.word	0x407fffd7

08001694 <VL53L0X_performSingleRefCalibration>:
  return temp;
}
//=============================================================================
// based on VL53L0X_perform_single_ref_calibration()
uint8_t VL53L0X_performSingleRefCalibration(uint8_t vhv_init_byte)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4619      	mov	r1, r3
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fd15 	bl	80010d8 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80016ae:	2101      	movs	r1, #1
 80016b0:	200b      	movs	r0, #11
 80016b2:	f7ff fd11 	bl	80010d8 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 80016b6:	2100      	movs	r1, #0
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff fd0d 	bl	80010d8 <writeReg>
  return true;
 80016be:	2301      	movs	r3, #1
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <VL53L0X_getSpadInfo>:
//=============================================================================
// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
uint8_t VL53L0X_getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80016d2:	2101      	movs	r1, #1
 80016d4:	2080      	movs	r0, #128	; 0x80
 80016d6:	f7ff fcff 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x01);
 80016da:	2101      	movs	r1, #1
 80016dc:	20ff      	movs	r0, #255	; 0xff
 80016de:	f7ff fcfb 	bl	80010d8 <writeReg>
  writeReg(0x00, 0x00);
 80016e2:	2100      	movs	r1, #0
 80016e4:	2000      	movs	r0, #0
 80016e6:	f7ff fcf7 	bl	80010d8 <writeReg>

  writeReg(0xFF, 0x06);
 80016ea:	2106      	movs	r1, #6
 80016ec:	20ff      	movs	r0, #255	; 0xff
 80016ee:	f7ff fcf3 	bl	80010d8 <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 80016f2:	2083      	movs	r0, #131	; 0x83
 80016f4:	f7ff fd3d 	bl	8001172 <readReg>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	4619      	mov	r1, r3
 8001702:	2083      	movs	r0, #131	; 0x83
 8001704:	f7ff fce8 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x07);
 8001708:	2107      	movs	r1, #7
 800170a:	20ff      	movs	r0, #255	; 0xff
 800170c:	f7ff fce4 	bl	80010d8 <writeReg>
  writeReg(0x81, 0x01);
 8001710:	2101      	movs	r1, #1
 8001712:	2081      	movs	r0, #129	; 0x81
 8001714:	f7ff fce0 	bl	80010d8 <writeReg>

  writeReg(0x80, 0x01);
 8001718:	2101      	movs	r1, #1
 800171a:	2080      	movs	r0, #128	; 0x80
 800171c:	f7ff fcdc 	bl	80010d8 <writeReg>

  writeReg(0x94, 0x6b);
 8001720:	216b      	movs	r1, #107	; 0x6b
 8001722:	2094      	movs	r0, #148	; 0x94
 8001724:	f7ff fcd8 	bl	80010d8 <writeReg>
  writeReg(0x83, 0x00);
 8001728:	2100      	movs	r1, #0
 800172a:	2083      	movs	r0, #131	; 0x83
 800172c:	f7ff fcd4 	bl	80010d8 <writeReg>
  startTimeout();
 8001730:	f7ff fcca 	bl	80010c8 <millis>
 8001734:	4603      	mov	r3, r0
 8001736:	b29a      	uxth	r2, r3
 8001738:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <VL53L0X_getSpadInfo+0x12c>)
 800173a:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83) == 0x00)
 800173c:	e010      	b.n	8001760 <VL53L0X_getSpadInfo+0x98>
  {
    if (checkTimeoutExpired()) { return false; }
 800173e:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <VL53L0X_getSpadInfo+0x130>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <VL53L0X_getSpadInfo+0x98>
 8001746:	f7ff fcbf 	bl	80010c8 <millis>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <VL53L0X_getSpadInfo+0x12c>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <VL53L0X_getSpadInfo+0x130>)
 8001756:	8812      	ldrh	r2, [r2, #0]
 8001758:	4293      	cmp	r3, r2
 800175a:	dd01      	ble.n	8001760 <VL53L0X_getSpadInfo+0x98>
 800175c:	2300      	movs	r3, #0
 800175e:	e044      	b.n	80017ea <VL53L0X_getSpadInfo+0x122>
  while (readReg(0x83) == 0x00)
 8001760:	2083      	movs	r0, #131	; 0x83
 8001762:	f7ff fd06 	bl	8001172 <readReg>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0e8      	beq.n	800173e <VL53L0X_getSpadInfo+0x76>
  }
  writeReg(0x83, 0x01);
 800176c:	2101      	movs	r1, #1
 800176e:	2083      	movs	r0, #131	; 0x83
 8001770:	f7ff fcb2 	bl	80010d8 <writeReg>
  tmp = readReg(0x92);
 8001774:	2092      	movs	r0, #146	; 0x92
 8001776:	f7ff fcfc 	bl	8001172 <readReg>
 800177a:	4603      	mov	r3, r0
 800177c:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001784:	b2da      	uxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	09db      	lsrs	r3, r3, #7
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	2b00      	cmp	r3, #0
 8001796:	bf14      	ite	ne
 8001798:	2301      	movne	r3, #1
 800179a:	2300      	moveq	r3, #0
 800179c:	b2da      	uxtb	r2, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 80017a2:	2100      	movs	r1, #0
 80017a4:	2081      	movs	r0, #129	; 0x81
 80017a6:	f7ff fc97 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x06);
 80017aa:	2106      	movs	r1, #6
 80017ac:	20ff      	movs	r0, #255	; 0xff
 80017ae:	f7ff fc93 	bl	80010d8 <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 80017b2:	2083      	movs	r0, #131	; 0x83
 80017b4:	f7ff fcdd 	bl	8001172 <readReg>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f023 0304 	bic.w	r3, r3, #4
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	4619      	mov	r1, r3
 80017c2:	2083      	movs	r0, #131	; 0x83
 80017c4:	f7ff fc88 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x01);
 80017c8:	2101      	movs	r1, #1
 80017ca:	20ff      	movs	r0, #255	; 0xff
 80017cc:	f7ff fc84 	bl	80010d8 <writeReg>
  writeReg(0x00, 0x01);
 80017d0:	2101      	movs	r1, #1
 80017d2:	2000      	movs	r0, #0
 80017d4:	f7ff fc80 	bl	80010d8 <writeReg>

  writeReg(0xFF, 0x00);
 80017d8:	2100      	movs	r1, #0
 80017da:	20ff      	movs	r0, #255	; 0xff
 80017dc:	f7ff fc7c 	bl	80010d8 <writeReg>
  writeReg(0x80, 0x00);
 80017e0:	2100      	movs	r1, #0
 80017e2:	2080      	movs	r0, #128	; 0x80
 80017e4:	f7ff fc78 	bl	80010d8 <writeReg>

  return true;
 80017e8:	2301      	movs	r3, #1
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000276 	.word	0x20000276
 80017f8:	20000278 	.word	0x20000278

080017fc <VL53L0X_startContinuous>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X_startContinuous(uint32_t period_ms)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  writeReg(0x80, 0x01);
 8001804:	2101      	movs	r1, #1
 8001806:	2080      	movs	r0, #128	; 0x80
 8001808:	f7ff fc66 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x01);
 800180c:	2101      	movs	r1, #1
 800180e:	20ff      	movs	r0, #255	; 0xff
 8001810:	f7ff fc62 	bl	80010d8 <writeReg>
  writeReg(0x00, 0x00);
 8001814:	2100      	movs	r1, #0
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff fc5e 	bl	80010d8 <writeReg>
  writeReg(0x91, g_stopVariable);
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <VL53L0X_startContinuous+0x88>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	2091      	movs	r0, #145	; 0x91
 8001824:	f7ff fc58 	bl	80010d8 <writeReg>
  writeReg(0x00, 0x01);
 8001828:	2101      	movs	r1, #1
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff fc54 	bl	80010d8 <writeReg>
  writeReg(0xFF, 0x00);
 8001830:	2100      	movs	r1, #0
 8001832:	20ff      	movs	r0, #255	; 0xff
 8001834:	f7ff fc50 	bl	80010d8 <writeReg>
  writeReg(0x80, 0x00);
 8001838:	2100      	movs	r1, #0
 800183a:	2080      	movs	r0, #128	; 0x80
 800183c:	f7ff fc4c 	bl	80010d8 <writeReg>

  if (period_ms != 0)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d015      	beq.n	8001872 <VL53L0X_startContinuous+0x76>
  {
    // continuous timed mode
    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 8001846:	20f8      	movs	r0, #248	; 0xf8
 8001848:	f7ff fca6 	bl	8001198 <readReg16Bit>
 800184c:	4603      	mov	r3, r0
 800184e:	81fb      	strh	r3, [r7, #14]

    if (osc_calibrate_val != 0)
 8001850:	89fb      	ldrh	r3, [r7, #14]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d004      	beq.n	8001860 <VL53L0X_startContinuous+0x64>
    {
      period_ms *= osc_calibrate_val;
 8001856:	89fa      	ldrh	r2, [r7, #14]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	607b      	str	r3, [r7, #4]
    }
    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	2004      	movs	r0, #4
 8001864:	f7ff fc65 	bl	8001132 <writeReg32Bit>
    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 8001868:	2104      	movs	r1, #4
 800186a:	2000      	movs	r0, #0
 800186c:	f7ff fc34 	bl	80010d8 <writeReg>
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
  }
}
 8001870:	e003      	b.n	800187a <VL53L0X_startContinuous+0x7e>
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 8001872:	2102      	movs	r1, #2
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff fc2f 	bl	80010d8 <writeReg>
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000274 	.word	0x20000274

08001888 <VL53L0X_readRangeContinuousMillimeters>:
  writeReg(0x00, 0x01);
  writeReg(0xFF, 0x00);
}
//=============================================================================
uint16_t VL53L0X_readRangeContinuousMillimeters()
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
    }
  }
*/
  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(RESULT_RANGE_STATUS + 10);
 800188e:	201e      	movs	r0, #30
 8001890:	f7ff fc82 	bl	8001198 <readReg16Bit>
 8001894:	4603      	mov	r3, r0
 8001896:	80fb      	strh	r3, [r7, #6]

  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001898:	2101      	movs	r1, #1
 800189a:	200b      	movs	r0, #11
 800189c:	f7ff fc1c 	bl	80010d8 <writeReg>

  return range;
 80018a0:	88fb      	ldrh	r3, [r7, #6]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 80018b0:	4b15      	ldr	r3, [pc, #84]	; (8001908 <captDistIR_Init+0x5c>)
 80018b2:	4a16      	ldr	r2, [pc, #88]	; (800190c <captDistIR_Init+0x60>)
 80018b4:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 80018b6:	4b14      	ldr	r3, [pc, #80]	; (8001908 <captDistIR_Init+0x5c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <captDistIR_Init+0x5c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <captDistIR_Init+0x5c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <captDistIR_Init+0x5c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <captDistIR_Init+0x5c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <captDistIR_Init+0x5c>)
 80018d6:	2202      	movs	r2, #2
 80018d8:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <captDistIR_Init+0x5c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	625a      	str	r2, [r3, #36]	; 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <captDistIR_Init+0x5c>)
 80018e2:	2202      	movs	r2, #2
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <captDistIR_Init+0x5c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <captDistIR_Init+0x5c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	631a      	str	r2, [r3, #48]	; 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <captDistIR_Init+0x5c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <captDistIR_Init+0x5c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 80018fe:	4802      	ldr	r0, [pc, #8]	; (8001908 <captDistIR_Init+0x5c>)
 8001900:	f002 fd74 	bl	80043ec <HAL_ADC_Init>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	2000027c 	.word	0x2000027c
 800190c:	40012000 	.word	0x40012000

08001910 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800191c:	f00a fb70 	bl	800c000 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001920:	4b58      	ldr	r3, [pc, #352]	; (8001a84 <pvPortMallocMicroROS+0x174>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001928:	f000 f98c 	bl	8001c44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800192c:	4b56      	ldr	r3, [pc, #344]	; (8001a88 <pvPortMallocMicroROS+0x178>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	f040 808e 	bne.w	8001a56 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d01d      	beq.n	800197c <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8001940:	2208      	movs	r2, #8
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	2b00      	cmp	r3, #0
 8001950:	d014      	beq.n	800197c <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f023 0307 	bic.w	r3, r3, #7
 8001958:	3308      	adds	r3, #8
 800195a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	2b00      	cmp	r3, #0
 8001964:	d00a      	beq.n	800197c <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800196a:	f383 8811 	msr	BASEPRI, r3
 800196e:	f3bf 8f6f 	isb	sy
 8001972:	f3bf 8f4f 	dsb	sy
 8001976:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001978:	bf00      	nop
 800197a:	e7fe      	b.n	800197a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d069      	beq.n	8001a56 <pvPortMallocMicroROS+0x146>
 8001982:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <pvPortMallocMicroROS+0x17c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	d864      	bhi.n	8001a56 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800198c:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <pvPortMallocMicroROS+0x180>)
 800198e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001990:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <pvPortMallocMicroROS+0x180>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001996:	e004      	b.n	80019a2 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d903      	bls.n	80019b4 <pvPortMallocMicroROS+0xa4>
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f1      	bne.n	8001998 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80019b4:	4b33      	ldr	r3, [pc, #204]	; (8001a84 <pvPortMallocMicroROS+0x174>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d04b      	beq.n	8001a56 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2208      	movs	r2, #8
 80019c4:	4413      	add	r3, r2
 80019c6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	1ad2      	subs	r2, r2, r3
 80019d8:	2308      	movs	r3, #8
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	429a      	cmp	r2, r3
 80019de:	d91f      	bls.n	8001a20 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80019e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00a      	beq.n	8001a08 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 80019f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f6:	f383 8811 	msr	BASEPRI, r3
 80019fa:	f3bf 8f6f 	isb	sy
 80019fe:	f3bf 8f4f 	dsb	sy
 8001a02:	613b      	str	r3, [r7, #16]
}
 8001a04:	bf00      	nop
 8001a06:	e7fe      	b.n	8001a06 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	1ad2      	subs	r2, r2, r3
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001a1a:	69b8      	ldr	r0, [r7, #24]
 8001a1c:	f000 f974 	bl	8001d08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <pvPortMallocMicroROS+0x17c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	4a18      	ldr	r2, [pc, #96]	; (8001a8c <pvPortMallocMicroROS+0x17c>)
 8001a2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <pvPortMallocMicroROS+0x17c>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <pvPortMallocMicroROS+0x184>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d203      	bcs.n	8001a42 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <pvPortMallocMicroROS+0x17c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a15      	ldr	r2, [pc, #84]	; (8001a94 <pvPortMallocMicroROS+0x184>)
 8001a40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <pvPortMallocMicroROS+0x178>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001a56:	f00a fae1 	bl	800c01c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00a      	beq.n	8001a7a <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8001a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a68:	f383 8811 	msr	BASEPRI, r3
 8001a6c:	f3bf 8f6f 	isb	sy
 8001a70:	f3bf 8f4f 	dsb	sy
 8001a74:	60fb      	str	r3, [r7, #12]
}
 8001a76:	bf00      	nop
 8001a78:	e7fe      	b.n	8001a78 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200042c8 	.word	0x200042c8
 8001a88:	200042d4 	.word	0x200042d4
 8001a8c:	200042cc 	.word	0x200042cc
 8001a90:	200042c0 	.word	0x200042c0
 8001a94:	200042d0 	.word	0x200042d0

08001a98 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d048      	beq.n	8001b3c <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001aaa:	2308      	movs	r3, #8
 8001aac:	425b      	negs	r3, r3
 8001aae:	697a      	ldr	r2, [r7, #20]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <vPortFreeMicroROS+0xac>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10a      	bne.n	8001adc <vPortFreeMicroROS+0x44>
	__asm volatile
 8001ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aca:	f383 8811 	msr	BASEPRI, r3
 8001ace:	f3bf 8f6f 	isb	sy
 8001ad2:	f3bf 8f4f 	dsb	sy
 8001ad6:	60fb      	str	r3, [r7, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	e7fe      	b.n	8001ada <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00a      	beq.n	8001afa <vPortFreeMicroROS+0x62>
	__asm volatile
 8001ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ae8:	f383 8811 	msr	BASEPRI, r3
 8001aec:	f3bf 8f6f 	isb	sy
 8001af0:	f3bf 8f4f 	dsb	sy
 8001af4:	60bb      	str	r3, [r7, #8]
}
 8001af6:	bf00      	nop
 8001af8:	e7fe      	b.n	8001af8 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <vPortFreeMicroROS+0xac>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d019      	beq.n	8001b3c <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d115      	bne.n	8001b3c <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <vPortFreeMicroROS+0xac>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001b20:	f00a fa6e 	bl	800c000 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <vPortFreeMicroROS+0xb0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <vPortFreeMicroROS+0xb0>)
 8001b30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001b32:	6938      	ldr	r0, [r7, #16]
 8001b34:	f000 f8e8 	bl	8001d08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001b38:	f00a fa70 	bl	800c01c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001b3c:	bf00      	nop
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200042d4 	.word	0x200042d4
 8001b48:	200042cc 	.word	0x200042cc

08001b4c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001b58:	2308      	movs	r3, #8
 8001b5a:	425b      	negs	r3, r3
 8001b5c:	697a      	ldr	r2, [r7, #20]
 8001b5e:	4413      	add	r3, r2
 8001b60:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <getBlockSize+0x38>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

	return count;
 8001b74:	68fb      	ldr	r3, [r7, #12]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	371c      	adds	r7, #28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	200042d4 	.word	0x200042d4

08001b88 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001b92:	f00a fa35 	bl	800c000 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001b96:	6838      	ldr	r0, [r7, #0]
 8001b98:	f7ff feba 	bl	8001910 <pvPortMallocMicroROS>
 8001b9c:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	425b      	negs	r3, r3
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4413      	add	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <pvPortReallocMicroROS+0x70>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	617b      	str	r3, [r7, #20]

  	while(count--)
 8001bc6:	e007      	b.n	8001bd8 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	1c53      	adds	r3, r2, #1
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	1c59      	adds	r1, r3, #1
 8001bd2:	61b9      	str	r1, [r7, #24]
 8001bd4:	7812      	ldrb	r2, [r2, #0]
 8001bd6:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	1e5a      	subs	r2, r3, #1
 8001bdc:	617a      	str	r2, [r7, #20]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f2      	bne.n	8001bc8 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ff58 	bl	8001a98 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8001be8:	f00a fa18 	bl	800c01c <xTaskResumeAll>

	return newmem;
 8001bec:	693b      	ldr	r3, [r7, #16]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200042d4 	.word	0x200042d4

08001bfc <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001c06:	f00a f9fb 	bl	800c000 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001c14:	6978      	ldr	r0, [r7, #20]
 8001c16:	f7ff fe7b 	bl	8001910 <pvPortMallocMicroROS>
 8001c1a:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001c20:	e004      	b.n	8001c2c <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	613a      	str	r2, [r7, #16]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	1e5a      	subs	r2, r3, #1
 8001c30:	617a      	str	r2, [r7, #20]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f5      	bne.n	8001c22 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001c36:	f00a f9f1 	bl	800c01c <xTaskResumeAll>
  	return mem;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001c4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001c50:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <prvHeapInit+0xac>)
 8001c52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00c      	beq.n	8001c78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3307      	adds	r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f023 0307 	bic.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <prvHeapInit+0xac>)
 8001c74:	4413      	add	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001c7c:	4a1d      	ldr	r2, [pc, #116]	; (8001cf4 <prvHeapInit+0xb0>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001c82:	4b1c      	ldr	r3, [pc, #112]	; (8001cf4 <prvHeapInit+0xb0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001c90:	2208      	movs	r2, #8
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1a9b      	subs	r3, r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f023 0307 	bic.w	r3, r3, #7
 8001c9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <prvHeapInit+0xb4>)
 8001ca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <prvHeapInit+0xb4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2200      	movs	r2, #0
 8001cac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001cae:	4b12      	ldr	r3, [pc, #72]	; (8001cf8 <prvHeapInit+0xb4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	1ad2      	subs	r2, r2, r3
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <prvHeapInit+0xb4>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <prvHeapInit+0xb8>)
 8001cd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <prvHeapInit+0xbc>)
 8001cda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <prvHeapInit+0xc0>)
 8001cde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ce2:	601a      	str	r2, [r3, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	200002c0 	.word	0x200002c0
 8001cf4:	200042c0 	.word	0x200042c0
 8001cf8:	200042c8 	.word	0x200042c8
 8001cfc:	200042d0 	.word	0x200042d0
 8001d00:	200042cc 	.word	0x200042cc
 8001d04:	200042d4 	.word	0x200042d4

08001d08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001d10:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <prvInsertBlockIntoFreeList+0xac>)
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	e002      	b.n	8001d1c <prvInsertBlockIntoFreeList+0x14>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d8f7      	bhi.n	8001d16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	4413      	add	r3, r2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d108      	bne.n	8001d4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	441a      	add	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	441a      	add	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d118      	bne.n	8001d90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <prvInsertBlockIntoFreeList+0xb0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d00d      	beq.n	8001d86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	441a      	add	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	e008      	b.n	8001d98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001d86:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <prvInsertBlockIntoFreeList+0xb0>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e003      	b.n	8001d98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d002      	beq.n	8001da6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	200042c0 	.word	0x200042c0
 8001db8:	200042c8 	.word	0x200042c8

08001dbc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001dca:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dd0:	4904      	ldr	r1, [pc, #16]	; (8001de4 <cubemx_transport_open+0x28>)
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f007 fc3e 	bl	8009654 <HAL_UART_Receive_DMA>
    return true;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200042d8 	.word	0x200042d8

08001de8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001df6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f007 fc5b 	bl	80096b4 <HAL_UART_DMAStop>
    return true;
 8001dfe:	2301      	movs	r3, #1
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001e1c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	d11c      	bne.n	8001e64 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	461a      	mov	r2, r3
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f007 fb90 	bl	8009558 <HAL_UART_Transmit_DMA>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001e3c:	e002      	b.n	8001e44 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f008 fea8 	bl	800ab94 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001e44:	7cfb      	ldrb	r3, [r7, #19]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d105      	bne.n	8001e56 <cubemx_transport_write+0x4e>
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	d1f3      	bne.n	8001e3e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001e56:	7cfb      	ldrb	r3, [r7, #19]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <cubemx_transport_write+0x58>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	e002      	b.n	8001e66 <cubemx_transport_write+0x5e>
 8001e60:	2300      	movs	r3, #0
 8001e62:	e000      	b.n	8001e66 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001e64:	2300      	movs	r3, #0
    }
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001e84:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e8a:	b672      	cpsid	i
}
 8001e8c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001e9a:	4a1c      	ldr	r2, [pc, #112]	; (8001f0c <cubemx_transport_read+0x9c>)
 8001e9c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e9e:	b662      	cpsie	i
}
 8001ea0:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f008 fe73 	bl	800ab94 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001eae:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <cubemx_transport_read+0xa0>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <cubemx_transport_read+0x9c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d103      	bne.n	8001ec2 <cubemx_transport_read+0x52>
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	dbe3      	blt.n	8001e8a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001ec6:	e011      	b.n	8001eec <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <cubemx_transport_read+0xa0>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	440b      	add	r3, r1
 8001ed2:	4910      	ldr	r1, [pc, #64]	; (8001f14 <cubemx_transport_read+0xa4>)
 8001ed4:	5c8a      	ldrb	r2, [r1, r2]
 8001ed6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <cubemx_transport_read+0xa0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	3301      	adds	r3, #1
 8001ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <cubemx_transport_read+0xa0>)
 8001ee4:	6013      	str	r3, [r2, #0]
        wrote++;
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <cubemx_transport_read+0xa0>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <cubemx_transport_read+0x9c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d003      	beq.n	8001f00 <cubemx_transport_read+0x90>
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d3e3      	bcc.n	8001ec8 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001f00:	69bb      	ldr	r3, [r7, #24]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3720      	adds	r7, #32
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20004adc 	.word	0x20004adc
 8001f10:	20004ad8 	.word	0x20004ad8
 8001f14:	200042d8 	.word	0x200042d8

08001f18 <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	4b2d      	ldr	r3, [pc, #180]	; (8001fe8 <MX_GPIO_Init+0xd0>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a2c      	ldr	r2, [pc, #176]	; (8001fe8 <MX_GPIO_Init+0xd0>)
 8001f38:	f043 0304 	orr.w	r3, r3, #4
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <MX_GPIO_Init+0xd0>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b26      	ldr	r3, [pc, #152]	; (8001fe8 <MX_GPIO_Init+0xd0>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a25      	ldr	r2, [pc, #148]	; (8001fe8 <MX_GPIO_Init+0xd0>)
 8001f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <MX_GPIO_Init+0xd0>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <MX_GPIO_Init+0xd0>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	4a1e      	ldr	r2, [pc, #120]	; (8001fe8 <MX_GPIO_Init+0xd0>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6313      	str	r3, [r2, #48]	; 0x30
 8001f76:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <MX_GPIO_Init+0xd0>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <MX_GPIO_Init+0xd0>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <MX_GPIO_Init+0xd0>)
 8001f8c:	f043 0302 	orr.w	r3, r3, #2
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <MX_GPIO_Init+0xd0>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2120      	movs	r1, #32
 8001fa2:	4812      	ldr	r0, [pc, #72]	; (8001fec <MX_GPIO_Init+0xd4>)
 8001fa4:	f003 f9ac 	bl	8005300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <MX_GPIO_Init+0xd8>)
 8001fc0:	f003 f81a 	bl	8004ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001fc4:	2320      	movs	r3, #32
 8001fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4804      	ldr	r0, [pc, #16]	; (8001fec <MX_GPIO_Init+0xd4>)
 8001fdc:	f003 f80c 	bl	8004ff8 <HAL_GPIO_Init>

}
 8001fe0:	bf00      	nop
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020000 	.word	0x40020000
 8001ff0:	40020800 	.word	0x40020800

08001ff4 <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002004:	d017      	beq.n	8002036 <HAL_GPIO_EXTI_Callback+0x42>
 8002006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800200a:	dc16      	bgt.n	800203a <HAL_GPIO_EXTI_Callback+0x46>
 800200c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002010:	d00e      	beq.n	8002030 <HAL_GPIO_EXTI_Callback+0x3c>
 8002012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002016:	dc10      	bgt.n	800203a <HAL_GPIO_EXTI_Callback+0x46>
 8002018:	2b08      	cmp	r3, #8
 800201a:	d010      	beq.n	800203e <HAL_GPIO_EXTI_Callback+0x4a>
 800201c:	2b08      	cmp	r3, #8
 800201e:	dc0c      	bgt.n	800203a <HAL_GPIO_EXTI_Callback+0x46>
 8002020:	2b01      	cmp	r3, #1
 8002022:	d002      	beq.n	800202a <HAL_GPIO_EXTI_Callback+0x36>
 8002024:	2b02      	cmp	r3, #2
 8002026:	d00c      	beq.n	8002042 <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 8002028:	e007      	b.n	800203a <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 800202a:	f001 f9c7 	bl	80033bc <quadEncoder_CallbackIndexR>
					break;
 800202e:	e009      	b.n	8002044 <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 8002030:	f001 f998 	bl	8003364 <quadEncoder_CallbackIndexL>
					break;
 8002034:	e006      	b.n	8002044 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8002036:	bf00      	nop
 8002038:	e004      	b.n	8002044 <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 800203a:	bf00      	nop
 800203c:	e002      	b.n	8002044 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 800203e:	bf00      	nop
 8002040:	e000      	b.n	8002044 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8002042:	bf00      	nop


	}
}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <MX_I2C1_Init+0x50>)
 8002052:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <MX_I2C1_Init+0x54>)
 8002054:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_I2C1_Init+0x50>)
 8002058:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <MX_I2C1_Init+0x58>)
 800205a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <MX_I2C1_Init+0x50>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <MX_I2C1_Init+0x50>)
 8002064:	2200      	movs	r2, #0
 8002066:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_I2C1_Init+0x50>)
 800206a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800206e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002070:	4b0a      	ldr	r3, [pc, #40]	; (800209c <MX_I2C1_Init+0x50>)
 8002072:	2200      	movs	r2, #0
 8002074:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_I2C1_Init+0x50>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <MX_I2C1_Init+0x50>)
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <MX_I2C1_Init+0x50>)
 8002084:	2200      	movs	r2, #0
 8002086:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002088:	4804      	ldr	r0, [pc, #16]	; (800209c <MX_I2C1_Init+0x50>)
 800208a:	f003 f96b 	bl	8005364 <HAL_I2C_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002094:	f000 fe96 	bl	8002dc4 <Error_Handler>
  }

}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20004ae0 	.word	0x20004ae0
 80020a0:	40005400 	.word	0x40005400
 80020a4:	00061a80 	.word	0x00061a80

080020a8 <i2c1_WriteBuffer>:

//======================================================================
// Transmit n_data bytes to i2c slave
//======================================================================
int i2c1_WriteBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	4603      	mov	r3, r0
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, data, n_data , 100);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	89f9      	ldrh	r1, [r7, #14]
 80020bc:	2264      	movs	r2, #100	; 0x64
 80020be:	9200      	str	r2, [sp, #0]
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <i2c1_WriteBuffer+0x30>)
 80020c4:	f003 fa92 	bl	80055ec <HAL_I2C_Master_Transmit>
 80020c8:	4603      	mov	r3, r0
 80020ca:	617b      	str	r3, [r7, #20]
	return status;
 80020cc:	697b      	ldr	r3, [r7, #20]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20004ae0 	.word	0x20004ae0

080020dc <i2c1_ReadRegBuffer>:
}
//======================================================================
// Receive n_data bytes - located at regAddr - from i2c slave
//======================================================================
int i2c1_ReadRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	60ba      	str	r2, [r7, #8]
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	4603      	mov	r3, r0
 80020e8:	81fb      	strh	r3, [r7, #14]
 80020ea:	460b      	mov	r3, r1
 80020ec:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr;
    RegAddr=regAddr;
 80020ee:	7b7b      	ldrb	r3, [r7, #13]
 80020f0:	74fb      	strb	r3, [r7, #19]
    do{
        status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, &RegAddr, 1, 100);
 80020f2:	f107 0213 	add.w	r2, r7, #19
 80020f6:	89f9      	ldrh	r1, [r7, #14]
 80020f8:	2364      	movs	r3, #100	; 0x64
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2301      	movs	r3, #1
 80020fe:	480f      	ldr	r0, [pc, #60]	; (800213c <i2c1_ReadRegBuffer+0x60>)
 8002100:	f003 fa74 	bl	80055ec <HAL_I2C_Master_Transmit>
 8002104:	4603      	mov	r3, r0
 8002106:	617b      	str	r3, [r7, #20]
        if( status )
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10f      	bne.n	800212e <i2c1_ReadRegBuffer+0x52>
            break;
        status =HAL_I2C_Master_Receive(&hi2c1, addrSlave, data, n_data, n_data*100);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	b29a      	uxth	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2164      	movs	r1, #100	; 0x64
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	89f9      	ldrh	r1, [r7, #14]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	4613      	mov	r3, r2
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	4806      	ldr	r0, [pc, #24]	; (800213c <i2c1_ReadRegBuffer+0x60>)
 8002124:	f003 fb60 	bl	80057e8 <HAL_I2C_Master_Receive>
 8002128:	4603      	mov	r3, r0
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	e000      	b.n	8002130 <i2c1_ReadRegBuffer+0x54>
            break;
 800212e:	bf00      	nop
    }while(0);
    return status;
 8002130:	697b      	ldr	r3, [r7, #20]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20004ae0 	.word	0x20004ae0

08002140 <i2c1_WriteRegBuffer>:

//======================================================================
// Write n_data bytes - have to be written at regAddr - to i2c slave
//======================================================================
int i2c1_WriteRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08c      	sub	sp, #48	; 0x30
 8002144:	af02      	add	r7, sp, #8
 8002146:	60ba      	str	r2, [r7, #8]
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4603      	mov	r3, r0
 800214c:	81fb      	strh	r3, [r7, #14]
 800214e:	460b      	mov	r3, r1
 8002150:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0]=regAddr;
 8002152:	7b7b      	ldrb	r3, [r7, #13]
 8002154:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr+1, data, n_data);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	3301      	adds	r3, #1
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68b9      	ldr	r1, [r7, #8]
 8002160:	4618      	mov	r0, r3
 8002162:	f016 ff9b 	bl	801909c <memcpy>
   status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, RegAddr, n_data+1, 100);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	b29b      	uxth	r3, r3
 800216a:	3301      	adds	r3, #1
 800216c:	b29b      	uxth	r3, r3
 800216e:	f107 0214 	add.w	r2, r7, #20
 8002172:	89f9      	ldrh	r1, [r7, #14]
 8002174:	2064      	movs	r0, #100	; 0x64
 8002176:	9000      	str	r0, [sp, #0]
 8002178:	4804      	ldr	r0, [pc, #16]	; (800218c <i2c1_WriteRegBuffer+0x4c>)
 800217a:	f003 fa37 	bl	80055ec <HAL_I2C_Master_Transmit>
 800217e:	4603      	mov	r3, r0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
     return status;
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002184:	4618      	mov	r0, r3
 8002186:	3728      	adds	r7, #40	; 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20004ae0 	.word	0x20004ae0

08002190 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif


PUTCHAR_PROTOTYPE
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002198:	1d39      	adds	r1, r7, #4
 800219a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800219e:	2201      	movs	r2, #1
 80021a0:	4803      	ldr	r0, [pc, #12]	; (80021b0 <__io_putchar+0x20>)
 80021a2:	f007 f947 	bl	8009434 <HAL_UART_Transmit>
  return ch;
 80021a6:	687b      	ldr	r3, [r7, #4]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20004b78 	.word	0x20004b78

080021b4 <MX_USART1_UART_Init>:


void MX_USART1_UART_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MX_USART1_UART_Init+0x4c>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <MX_USART1_UART_Init+0x50>)
 80021bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <MX_USART1_UART_Init+0x4c>)
 80021c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <MX_USART1_UART_Init+0x4c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <MX_USART1_UART_Init+0x4c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <MX_USART1_UART_Init+0x4c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021d8:	4b09      	ldr	r3, [pc, #36]	; (8002200 <MX_USART1_UART_Init+0x4c>)
 80021da:	220c      	movs	r2, #12
 80021dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <MX_USART1_UART_Init+0x4c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <MX_USART1_UART_Init+0x4c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ea:	4805      	ldr	r0, [pc, #20]	; (8002200 <MX_USART1_UART_Init+0x4c>)
 80021ec:	f007 f8d5 	bl	800939a <HAL_UART_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021f6:	f000 fde5 	bl	8002dc4 <Error_Handler>
  }
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20004b34 	.word	0x20004b34
 8002204:	40011000 	.word	0x40011000

08002208 <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 800220c:	4b11      	ldr	r3, [pc, #68]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <MX_USART2_UART_Init+0x50>)
 8002210:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 8002214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002218:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 800222e:	220c      	movs	r2, #12
 8002230:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <MX_USART2_UART_Init+0x4c>)
 8002240:	f007 f8ab 	bl	800939a <HAL_UART_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800224a:	f000 fdbb 	bl	8002dc4 <Error_Handler>
  }
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20004b78 	.word	0x20004b78
 8002258:	40004400 	.word	0x40004400

0800225c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <MX_DMA_Init+0x88>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a1e      	ldr	r2, [pc, #120]	; (80022e4 <MX_DMA_Init+0x88>)
 800226c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <MX_DMA_Init+0x88>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <MX_DMA_Init+0x88>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a17      	ldr	r2, [pc, #92]	; (80022e4 <MX_DMA_Init+0x88>)
 8002288:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <MX_DMA_Init+0x88>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2105      	movs	r1, #5
 800229e:	2010      	movs	r0, #16
 80022a0:	f002 fa70 	bl	8004784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80022a4:	2010      	movs	r0, #16
 80022a6:	f002 fa89 	bl	80047bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2105      	movs	r1, #5
 80022ae:	2011      	movs	r0, #17
 80022b0:	f002 fa68 	bl	8004784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80022b4:	2011      	movs	r0, #17
 80022b6:	f002 fa81 	bl	80047bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2105      	movs	r1, #5
 80022be:	203a      	movs	r0, #58	; 0x3a
 80022c0:	f002 fa60 	bl	8004784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80022c4:	203a      	movs	r0, #58	; 0x3a
 80022c6:	f002 fa79 	bl	80047bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2105      	movs	r1, #5
 80022ce:	2046      	movs	r0, #70	; 0x46
 80022d0:	f002 fa58 	bl	8004784 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80022d4:	2046      	movs	r0, #70	; 0x46
 80022d6:	f002 fa71 	bl	80047bc <HAL_NVIC_EnableIRQ>

}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800

080022e8 <i2c_send_byteS>:
{
	i2c1_WriteBuffer(LCD_ADDRESS, &dta, 1);
}
//=================================================================
void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	70fb      	strb	r3, [r7, #3]
	i2c1_WriteBuffer(LCD_ADDRESS, dta, len);
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	461a      	mov	r2, r3
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	207c      	movs	r0, #124	; 0x7c
 80022fc:	f7ff fed4 	bl	80020a8 <i2c1_WriteBuffer>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <groveLCD_begin>:
//=================================================================
void groveLCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
 8002312:	460b      	mov	r3, r1
 8002314:	71bb      	strb	r3, [r7, #6]
 8002316:	4613      	mov	r3, r2
 8002318:	717b      	strb	r3, [r7, #5]
    if (lines > 1) {
 800231a:	79bb      	ldrb	r3, [r7, #6]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d906      	bls.n	800232e <groveLCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 8002320:	4b33      	ldr	r3, [pc, #204]	; (80023f0 <groveLCD_begin+0xe8>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	f043 0308 	orr.w	r3, r3, #8
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <groveLCD_begin+0xe8>)
 800232c:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 800232e:	4a31      	ldr	r2, [pc, #196]	; (80023f4 <groveLCD_begin+0xec>)
 8002330:	79bb      	ldrb	r3, [r7, #6]
 8002332:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 8002334:	4b30      	ldr	r3, [pc, #192]	; (80023f8 <groveLCD_begin+0xf0>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 800233a:	797b      	ldrb	r3, [r7, #5]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d009      	beq.n	8002354 <groveLCD_begin+0x4c>
 8002340:	79bb      	ldrb	r3, [r7, #6]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d106      	bne.n	8002354 <groveLCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 8002346:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <groveLCD_begin+0xe8>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	b2da      	uxtb	r2, r3
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <groveLCD_begin+0xe8>)
 8002352:	701a      	strb	r2, [r3, #0]
    }

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
    HAL_Delay(50);
 8002354:	2032      	movs	r0, #50	; 0x32
 8002356:	f002 f825 	bl	80043a4 <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800235a:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <groveLCD_begin+0xe8>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	f043 0320 	orr.w	r3, r3, #32
 8002362:	b2db      	uxtb	r3, r3
 8002364:	4618      	mov	r0, r3
 8002366:	f000 f89b 	bl	80024a0 <groveLCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 800236a:	2005      	movs	r0, #5
 800236c:	f002 f81a 	bl	80043a4 <HAL_Delay>

    // second try
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <groveLCD_begin+0xe8>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	f043 0320 	orr.w	r3, r3, #32
 8002378:	b2db      	uxtb	r3, r3
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f890 	bl	80024a0 <groveLCD_command>
    HAL_Delay(5);
 8002380:	2005      	movs	r0, #5
 8002382:	f002 f80f 	bl	80043a4 <HAL_Delay>

    // third go
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <groveLCD_begin+0xe8>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	f043 0320 	orr.w	r3, r3, #32
 800238e:	b2db      	uxtb	r3, r3
 8002390:	4618      	mov	r0, r3
 8002392:	f000 f885 	bl	80024a0 <groveLCD_command>


    // finally, set # lines, font size, etc.
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <groveLCD_begin+0xe8>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	f043 0320 	orr.w	r3, r3, #32
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 f87d 	bl	80024a0 <groveLCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80023a6:	4b15      	ldr	r3, [pc, #84]	; (80023fc <groveLCD_begin+0xf4>)
 80023a8:	2204      	movs	r2, #4
 80023aa:	701a      	strb	r2, [r3, #0]
    groveLCD_display();
 80023ac:	f000 f862 	bl	8002474 <groveLCD_display>

    // clear it off
    groveLCD_clear();
 80023b0:	f000 f831 	bl	8002416 <groveLCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <groveLCD_begin+0xf8>)
 80023b6:	2202      	movs	r2, #2
 80023b8:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    groveLCD_command(LCD_ENTRYMODESET | _displaymode);
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <groveLCD_begin+0xf8>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f86b 	bl	80024a0 <groveLCD_command>


    // backlight init
    groveLCD_setReg(REG_MODE1, 0);
 80023ca:	2100      	movs	r1, #0
 80023cc:	2000      	movs	r0, #0
 80023ce:	f000 f8a4 	bl	800251a <groveLCD_setReg>
    // set LEDs controllable by both PWM and GRPPWM registers
    groveLCD_setReg(REG_OUTPUT, 0xFF);
 80023d2:	21ff      	movs	r1, #255	; 0xff
 80023d4:	2008      	movs	r0, #8
 80023d6:	f000 f8a0 	bl	800251a <groveLCD_setReg>
    // set MODE2 values
    // 0010 0000 -> 0x20  (DMBLNK to 1, ie blinky mode)
    groveLCD_setReg(REG_MODE2, 0x20);
 80023da:	2120      	movs	r1, #32
 80023dc:	2001      	movs	r0, #1
 80023de:	f000 f89c 	bl	800251a <groveLCD_setReg>

    groveLCD_setColorWhite();
 80023e2:	f000 f80f 	bl	8002404 <groveLCD_setColorWhite>

}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20004d3c 	.word	0x20004d3c
 80023f4:	20004d3f 	.word	0x20004d3f
 80023f8:	20004d40 	.word	0x20004d40
 80023fc:	20004d3d 	.word	0x20004d3d
 8002400:	20004d3e 	.word	0x20004d3e

08002404 <groveLCD_setColorWhite>:
//=================================================================
void groveLCD_setColorAll(){groveLCD_setRGB(0, 0, 0);}
void groveLCD_setColorWhite(){groveLCD_setRGB(255, 255, 255);}
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
 8002408:	22ff      	movs	r2, #255	; 0xff
 800240a:	21ff      	movs	r1, #255	; 0xff
 800240c:	20ff      	movs	r0, #255	; 0xff
 800240e:	f000 f896 	bl	800253e <groveLCD_setRGB>
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}

08002416 <groveLCD_clear>:
//=================================================================

/********** high level commands, for the user! */
void groveLCD_clear()
{
 8002416:	b580      	push	{r7, lr}
 8002418:	af00      	add	r7, sp, #0
	groveLCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 800241a:	2001      	movs	r0, #1
 800241c:	f000 f840 	bl	80024a0 <groveLCD_command>
    HAL_Delay(2000);          // this command takes a long time!
 8002420:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002424:	f001 ffbe 	bl	80043a4 <HAL_Delay>
}
 8002428:	bf00      	nop
 800242a:	bd80      	pop	{r7, pc}

0800242c <groveLCD_setCursor>:
	groveLCD_command(LCD_RETURNHOME);        // set cursor position to zero
    HAL_Delay(2000);        // this command takes a long time!
}
//=================================================================
void groveLCD_setCursor(uint8_t col, uint8_t row)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	460a      	mov	r2, r1
 8002436:	71fb      	strb	r3, [r7, #7]
 8002438:	4613      	mov	r3, r2
 800243a:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 800243c:	79bb      	ldrb	r3, [r7, #6]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d104      	bne.n	800244c <groveLCD_setCursor+0x20>
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002448:	b2db      	uxtb	r3, r3
 800244a:	e003      	b.n	8002454 <groveLCD_setCursor+0x28>
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002452:	b2db      	uxtb	r3, r3
 8002454:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	733b      	strb	r3, [r7, #12]
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	2102      	movs	r1, #2
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff3f 	bl	80022e8 <i2c_send_byteS>
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <groveLCD_display>:
{
    _displaycontrol &= ~LCD_DISPLAYON;
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
//=================================================================
void groveLCD_display() {
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <groveLCD_display+0x28>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <groveLCD_display+0x28>)
 8002484:	701a      	strb	r2, [r3, #0]
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 8002486:	4b05      	ldr	r3, [pc, #20]	; (800249c <groveLCD_display+0x28>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	f043 0308 	orr.w	r3, r3, #8
 800248e:	b2db      	uxtb	r3, r3
 8002490:	4618      	mov	r0, r3
 8002492:	f000 f805 	bl	80024a0 <groveLCD_command>
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20004d3d 	.word	0x20004d3d

080024a0 <groveLCD_command>:
//=================================================================
/*********** mid level commands, for sending data/cmds */

// send command
void groveLCD_command(uint8_t value)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	733b      	strb	r3, [r7, #12]
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 80024b2:	f107 030c 	add.w	r3, r7, #12
 80024b6:	2102      	movs	r1, #2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff15 	bl	80022e8 <i2c_send_byteS>
}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <groveLCD_write>:
//=================================================================
// send data
int groveLCD_write(uint8_t value)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 80024d0:	2340      	movs	r3, #64	; 0x40
 80024d2:	733b      	strb	r3, [r7, #12]
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 80024d8:	f107 030c 	add.w	r3, r7, #12
 80024dc:	2102      	movs	r1, #2
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff ff02 	bl	80022e8 <i2c_send_byteS>
    return 1; // assume sucess
 80024e4:	2301      	movs	r3, #1
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <groveLCD_putString>:
//=================================================================
void groveLCD_putString(char* s)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 80024f6:	e007      	b.n	8002508 <groveLCD_putString+0x1a>
	{
		groveLCD_write(*s);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ffe2 	bl	80024c6 <groveLCD_write>
		s++;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3301      	adds	r3, #1
 8002506:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1f3      	bne.n	80024f8 <groveLCD_putString+0xa>
	}
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <groveLCD_setReg>:
//=================================================================
void groveLCD_setReg(unsigned char addr, unsigned char dta)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	460a      	mov	r2, r1
 8002524:	71fb      	strb	r3, [r7, #7]
 8002526:	4613      	mov	r3, r2
 8002528:	71bb      	strb	r3, [r7, #6]
    i2c1_WriteRegBuffer(RGB_ADDRESS, addr,  &dta, 1);
 800252a:	1dba      	adds	r2, r7, #6
 800252c:	79f9      	ldrb	r1, [r7, #7]
 800252e:	2301      	movs	r3, #1
 8002530:	20c4      	movs	r0, #196	; 0xc4
 8002532:	f7ff fe05 	bl	8002140 <i2c1_WriteRegBuffer>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <groveLCD_setRGB>:
//=================================================================
void groveLCD_setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	71fb      	strb	r3, [r7, #7]
 8002548:	460b      	mov	r3, r1
 800254a:	71bb      	strb	r3, [r7, #6]
 800254c:	4613      	mov	r3, r2
 800254e:	717b      	strb	r3, [r7, #5]
	groveLCD_setReg(REG_RED, r);
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	4619      	mov	r1, r3
 8002554:	2004      	movs	r0, #4
 8002556:	f7ff ffe0 	bl	800251a <groveLCD_setReg>
	groveLCD_setReg(REG_GREEN, g);
 800255a:	79bb      	ldrb	r3, [r7, #6]
 800255c:	4619      	mov	r1, r3
 800255e:	2003      	movs	r0, #3
 8002560:	f7ff ffdb 	bl	800251a <groveLCD_setReg>
	groveLCD_setReg(REG_BLUE, b);
 8002564:	797b      	ldrb	r3, [r7, #5]
 8002566:	4619      	mov	r1, r3
 8002568:	2002      	movs	r0, #2
 800256a:	f7ff ffd6 	bl	800251a <groveLCD_setReg>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
	...

08002578 <groveLCD_term_printf>:
    if(color > 3)return ;
    groveLCD_setRGB(color_define[color][0], color_define[color][1], color_define[color][2]);
}
//============================================================
void groveLCD_term_printf(const char* fmt, ...)
{
 8002578:	b40f      	push	{r0, r1, r2, r3}
 800257a:	b5b0      	push	{r4, r5, r7, lr}
 800257c:	b0a4      	sub	sp, #144	; 0x90
 800257e:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 8002580:	2300      	movs	r3, #0
 8002582:	677b      	str	r3, [r7, #116]	; 0x74

	va_start(ap, fmt);
 8002584:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002588:	64bb      	str	r3, [r7, #72]	; 0x48

	while (*fmt != '\0') {
 800258a:	e1cd      	b.n	8002928 <groveLCD_term_printf+0x3b0>
		if (*fmt =='%') {
 800258c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b25      	cmp	r3, #37	; 0x25
 8002594:	f040 81bd 	bne.w	8002912 <groveLCD_term_printf+0x39a>
			size=0; sp=1;
 8002598:	2300      	movs	r3, #0
 800259a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800259c:	2301      	movs	r3, #1
 800259e:	67bb      	str	r3, [r7, #120]	; 0x78
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 80025a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025a4:	3301      	adds	r3, #1
 80025a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b30      	cmp	r3, #48	; 0x30
 80025b2:	d106      	bne.n	80025c2 <groveLCD_term_printf+0x4a>
 80025b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025b8:	3301      	adds	r3, #1
 80025ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025be:	2300      	movs	r3, #0
 80025c0:	67bb      	str	r3, [r7, #120]	; 0x78
			ch=*fmt;
 80025c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 80025cc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80025d0:	2b30      	cmp	r3, #48	; 0x30
 80025d2:	d92c      	bls.n	800262e <groveLCD_term_printf+0xb6>
 80025d4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80025d8:	2b39      	cmp	r3, #57	; 0x39
 80025da:	d828      	bhi.n	800262e <groveLCD_term_printf+0xb6>
				char tmp[10];
				int i=0;
 80025dc:	2300      	movs	r3, #0
 80025de:	673b      	str	r3, [r7, #112]	; 0x70
				while ((ch>='0') && (ch<='9')) {
 80025e0:	e012      	b.n	8002608 <groveLCD_term_printf+0x90>
					tmp[i++]=ch;
 80025e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	673a      	str	r2, [r7, #112]	; 0x70
 80025e8:	3388      	adds	r3, #136	; 0x88
 80025ea:	443b      	add	r3, r7
 80025ec:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80025f0:	f803 2c88 	strb.w	r2, [r3, #-136]
					ch=*++fmt;
 80025f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025f8:	3301      	adds	r3, #1
 80025fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
				while ((ch>='0') && (ch<='9')) {
 8002608:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800260c:	2b2f      	cmp	r3, #47	; 0x2f
 800260e:	d903      	bls.n	8002618 <groveLCD_term_printf+0xa0>
 8002610:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002614:	2b39      	cmp	r3, #57	; 0x39
 8002616:	d9e4      	bls.n	80025e2 <groveLCD_term_printf+0x6a>
				}
				tmp[i]='\0';
 8002618:	463a      	mov	r2, r7
 800261a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800261c:	4413      	add	r3, r2
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 8002622:	463b      	mov	r3, r7
 8002624:	210a      	movs	r1, #10
 8002626:	4618      	mov	r0, r3
 8002628:	f001 fd0a 	bl	8004040 <str2num>
 800262c:	67f8      	str	r0, [r7, #124]	; 0x7c
			}
			switch (ch) {
 800262e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002632:	2b25      	cmp	r3, #37	; 0x25
 8002634:	d03c      	beq.n	80026b0 <groveLCD_term_printf+0x138>
 8002636:	2b25      	cmp	r3, #37	; 0x25
 8002638:	f2c0 8164 	blt.w	8002904 <groveLCD_term_printf+0x38c>
 800263c:	2b78      	cmp	r3, #120	; 0x78
 800263e:	f300 8161 	bgt.w	8002904 <groveLCD_term_printf+0x38c>
 8002642:	2b63      	cmp	r3, #99	; 0x63
 8002644:	f2c0 815e 	blt.w	8002904 <groveLCD_term_printf+0x38c>
 8002648:	3b63      	subs	r3, #99	; 0x63
 800264a:	2b15      	cmp	r3, #21
 800264c:	f200 815a 	bhi.w	8002904 <groveLCD_term_printf+0x38c>
 8002650:	a201      	add	r2, pc, #4	; (adr r2, 8002658 <groveLCD_term_printf+0xe0>)
 8002652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002656:	bf00      	nop
 8002658:	080026b9 	.word	0x080026b9
 800265c:	080026e3 	.word	0x080026e3
 8002660:	08002905 	.word	0x08002905
 8002664:	080027e3 	.word	0x080027e3
 8002668:	08002905 	.word	0x08002905
 800266c:	08002905 	.word	0x08002905
 8002670:	08002905 	.word	0x08002905
 8002674:	08002905 	.word	0x08002905
 8002678:	08002905 	.word	0x08002905
 800267c:	08002905 	.word	0x08002905
 8002680:	08002905 	.word	0x08002905
 8002684:	08002905 	.word	0x08002905
 8002688:	08002753 	.word	0x08002753
 800268c:	0800277f 	.word	0x0800277f
 8002690:	08002905 	.word	0x08002905
 8002694:	08002905 	.word	0x08002905
 8002698:	080026d1 	.word	0x080026d1
 800269c:	08002905 	.word	0x08002905
 80026a0:	08002727 	.word	0x08002727
 80026a4:	08002905 	.word	0x08002905
 80026a8:	08002905 	.word	0x08002905
 80026ac:	080027b7 	.word	0x080027b7
				case '%':
					groveLCD_write('%');
 80026b0:	2025      	movs	r0, #37	; 0x25
 80026b2:	f7ff ff08 	bl	80024c6 <groveLCD_write>
					break;
 80026b6:	e132      	b.n	800291e <groveLCD_term_printf+0x3a6>
				case 'c':
					ch = va_arg(ap, int);
 80026b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ba:	1d1a      	adds	r2, r3, #4
 80026bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
					groveLCD_write(ch);
 80026c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fefc 	bl	80024c6 <groveLCD_write>
					break;
 80026ce:	e126      	b.n	800291e <groveLCD_term_printf+0x3a6>
				case 's':
					p = va_arg(ap, char *);
 80026d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026d2:	1d1a      	adds	r2, r3, #4
 80026d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	66fb      	str	r3, [r7, #108]	; 0x6c
					groveLCD_putString(p);
 80026da:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80026dc:	f7ff ff07 	bl	80024ee <groveLCD_putString>
					break;
 80026e0:	e11d      	b.n	800291e <groveLCD_term_printf+0x3a6>
				case 'd':
					ul = va_arg(ap, long);
 80026e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026e4:	1d1a      	adds	r2, r3, #4
 80026e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					if ((long)ul < 0) {
 80026ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	da07      	bge.n	8002706 <groveLCD_term_printf+0x18e>
						groveLCD_write('-');
 80026f6:	202d      	movs	r0, #45	; 0x2d
 80026f8:	f7ff fee5 	bl	80024c6 <groveLCD_write>
						ul = -(long)ul;
 80026fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002700:	425b      	negs	r3, r3
 8002702:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 8002706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002708:	f107 000c 	add.w	r0, r7, #12
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002710:	220a      	movs	r2, #10
 8002712:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002716:	f001 fc0f 	bl	8003f38 <num2str>
					groveLCD_putString(s);
 800271a:	f107 030c 	add.w	r3, r7, #12
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fee5 	bl	80024ee <groveLCD_putString>
					break;
 8002724:	e0fb      	b.n	800291e <groveLCD_term_printf+0x3a6>
				case 'u':
					ul = va_arg(ap, unsigned int);
 8002726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002728:	1d1a      	adds	r2, r3, #4
 800272a:	64ba      	str	r2, [r7, #72]	; 0x48
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 10, size, sp);
 8002732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002734:	f107 000c 	add.w	r0, r7, #12
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800273c:	220a      	movs	r2, #10
 800273e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002742:	f001 fbf9 	bl	8003f38 <num2str>
					groveLCD_putString(s);
 8002746:	f107 030c 	add.w	r3, r7, #12
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fecf 	bl	80024ee <groveLCD_putString>
					break;
 8002750:	e0e5      	b.n	800291e <groveLCD_term_printf+0x3a6>
				case 'o':
					ul = va_arg(ap, unsigned int);
 8002752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002754:	1d1a      	adds	r2, r3, #4
 8002756:	64ba      	str	r2, [r7, #72]	; 0x48
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 8, size, sp);
 800275e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002760:	f107 000c 	add.w	r0, r7, #12
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002768:	2208      	movs	r2, #8
 800276a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800276e:	f001 fbe3 	bl	8003f38 <num2str>
					groveLCD_putString(s);
 8002772:	f107 030c 	add.w	r3, r7, #12
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff feb9 	bl	80024ee <groveLCD_putString>
					break;
 800277c:	e0cf      	b.n	800291e <groveLCD_term_printf+0x3a6>
				case 'p':
					groveLCD_write('0');
 800277e:	2030      	movs	r0, #48	; 0x30
 8002780:	f7ff fea1 	bl	80024c6 <groveLCD_write>
					groveLCD_write('x');
 8002784:	2078      	movs	r0, #120	; 0x78
 8002786:	f7ff fe9e 	bl	80024c6 <groveLCD_write>
					ul = va_arg(ap, unsigned int);
 800278a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800278c:	1d1a      	adds	r2, r3, #4
 800278e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 8002796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002798:	f107 000c 	add.w	r0, r7, #12
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027a0:	2210      	movs	r2, #16
 80027a2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80027a6:	f001 fbc7 	bl	8003f38 <num2str>
					groveLCD_putString(s);
 80027aa:	f107 030c 	add.w	r3, r7, #12
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fe9d 	bl	80024ee <groveLCD_putString>
					break;
 80027b4:	e0b3      	b.n	800291e <groveLCD_term_printf+0x3a6>
				case 'x':
					ul = va_arg(ap, unsigned int);
 80027b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027b8:	1d1a      	adds	r2, r3, #4
 80027ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
					num2str(s, ul, 16, size, sp);
 80027c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027c4:	f107 000c 	add.w	r0, r7, #12
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027cc:	2210      	movs	r2, #16
 80027ce:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80027d2:	f001 fbb1 	bl	8003f38 <num2str>
					groveLCD_putString(s);
 80027d6:	f107 030c 	add.w	r3, r7, #12
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fe87 	bl	80024ee <groveLCD_putString>
					break;
 80027e0:	e09d      	b.n	800291e <groveLCD_term_printf+0x3a6>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 80027e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10c      	bne.n	8002802 <groveLCD_term_printf+0x28a>
 80027e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027ea:	3307      	adds	r3, #7
 80027ec:	f023 0307 	bic.w	r3, r3, #7
 80027f0:	f103 0208 	add.w	r2, r3, #8
 80027f4:	64ba      	str	r2, [r7, #72]	; 0x48
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 80027fe:	2301      	movs	r3, #1
 8002800:	677b      	str	r3, [r7, #116]	; 0x74
					ull = va_arg(ap, long long unsigned int);
 8002802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002804:	3307      	adds	r3, #7
 8002806:	f023 0307 	bic.w	r3, r3, #7
 800280a:	f103 0208 	add.w	r2, r3, #8
 800280e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002814:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
					int sign = ( ull & 0x80000000 ) >> 31;
 8002818:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	0fc2      	lsrs	r2, r0, #31
 8002826:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800282a:	0fcb      	lsrs	r3, r1, #31
 800282c:	4613      	mov	r3, r2
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	65fb      	str	r3, [r7, #92]	; 0x5c
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 8002834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002836:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800283a:	65bb      	str	r3, [r7, #88]	; 0x58
					float mf = (float)m ;
 800283c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002846:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf / pow(2.0,20.0);
 800284a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800284e:	eddf 6a40 	vldr	s13, [pc, #256]	; 8002950 <groveLCD_term_printf+0x3d8>
 8002852:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002856:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					mf = mf + 1.0;
 800285a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800285e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002862:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002866:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 800286a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	0dc2      	lsrs	r2, r0, #23
 8002878:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800287c:	0dcb      	lsrs	r3, r1, #23
 800287e:	4613      	mov	r3, r2
 8002880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002884:	653b      	str	r3, [r7, #80]	; 0x50
					e = e | (( ull & 0x000F00000 ) >> 20);
 8002886:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	0d02      	lsrs	r2, r0, #20
 8002894:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002898:	0d0b      	lsrs	r3, r1, #20
 800289a:	4613      	mov	r3, r2
 800289c:	f003 020f 	and.w	r2, r3, #15
 80028a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028a2:	4313      	orrs	r3, r2
 80028a4:	653b      	str	r3, [r7, #80]	; 0x50
					e = e - 127;
 80028a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028a8:	3b7f      	subs	r3, #127	; 0x7f
 80028aa:	653b      	str	r3, [r7, #80]	; 0x50
					float f = mf*myPow(2.0,e);
 80028ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80028ae:	f7fd fe63 	bl	8000578 <__aeabi_f2d>
 80028b2:	4604      	mov	r4, r0
 80028b4:	460d      	mov	r5, r1
 80028b6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80028b8:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8002948 <groveLCD_term_printf+0x3d0>
 80028bc:	f001 fcd0 	bl	8004260 <myPow>
 80028c0:	ec53 2b10 	vmov	r2, r3, d0
 80028c4:	4620      	mov	r0, r4
 80028c6:	4629      	mov	r1, r5
 80028c8:	f7fd feae 	bl	8000628 <__aeabi_dmul>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	f7fe f9a0 	bl	8000c18 <__aeabi_d2f>
 80028d8:	4603      	mov	r3, r0
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
					if(sign==1){ groveLCD_write('-'); }
 80028dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d102      	bne.n	80028e8 <groveLCD_term_printf+0x370>
 80028e2:	202d      	movs	r0, #45	; 0x2d
 80028e4:	f7ff fdef 	bl	80024c6 <groveLCD_write>
					float2str((char*)s, f, 5);
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	2105      	movs	r1, #5
 80028ee:	ed97 0a13 	vldr	s0, [r7, #76]	; 0x4c
 80028f2:	4618      	mov	r0, r3
 80028f4:	f001 fc64 	bl	80041c0 <float2str>
					groveLCD_putString((char*)s);
 80028f8:	f107 030c 	add.w	r3, r7, #12
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fdf6 	bl	80024ee <groveLCD_putString>
					break;
 8002902:	e00c      	b.n	800291e <groveLCD_term_printf+0x3a6>

				default:
					groveLCD_write(*fmt);
 8002904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fddb 	bl	80024c6 <groveLCD_write>
 8002910:	e005      	b.n	800291e <groveLCD_term_printf+0x3a6>
			}
		} else groveLCD_write(*fmt);
 8002912:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fdd4 	bl	80024c6 <groveLCD_write>
		fmt++;
 800291e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002922:	3301      	adds	r3, #1
 8002924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	while (*fmt != '\0') {
 8002928:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f47f ae2c 	bne.w	800258c <groveLCD_term_printf+0x14>
	}
	va_end(ap);
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3788      	adds	r7, #136	; 0x88
 800293a:	46bd      	mov	sp, r7
 800293c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002940:	b004      	add	sp, #16
 8002942:	4770      	bx	lr
 8002944:	f3af 8000 	nop.w
 8002948:	00000000 	.word	0x00000000
 800294c:	40000000 	.word	0x40000000
 8002950:	49800000 	.word	0x49800000

08002954 <task_A>:
#if SYNCHRO_EX == EX1

int tab_speed[100];

static void task_A(void *pvParameters)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
int speed=0;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
static int i = 0;

	for (;;)
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8002960:	2201      	movs	r2, #1
 8002962:	2110      	movs	r1, #16
 8002964:	4817      	ldr	r0, [pc, #92]	; (80029c4 <task_A+0x70>)
 8002966:	f002 fccb 	bl	8005300 <HAL_GPIO_WritePin>

		mes_vl53 = VL53L0X_readRangeContinuousMillimeters();
 800296a:	f7fe ff8d 	bl	8001888 <VL53L0X_readRangeContinuousMillimeters>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <task_A+0x74>)
 8002974:	801a      	strh	r2, [r3, #0]

		motorLeft_SetDuty(150);
 8002976:	2096      	movs	r0, #150	; 0x96
 8002978:	f000 fbea 	bl	8003150 <motorLeft_SetDuty>
		speed = quadEncoder_GetSpeedL();
 800297c:	f000 fca0 	bl	80032c0 <quadEncoder_GetSpeedL>
 8002980:	4603      	mov	r3, r0
 8002982:	60fb      	str	r3, [r7, #12]

		motorRight_SetDuty(150);
 8002984:	2096      	movs	r0, #150	; 0x96
 8002986:	f000 fbf3 	bl	8003170 <motorRight_SetDuty>
		speed = quadEncoder_GetSpeedL();
 800298a:	f000 fc99 	bl	80032c0 <quadEncoder_GetSpeedL>
 800298e:	4603      	mov	r3, r0
 8002990:	60fb      	str	r3, [r7, #12]

		if (i < 100)
 8002992:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <task_A+0x78>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b63      	cmp	r3, #99	; 0x63
 8002998:	dc0a      	bgt.n	80029b0 <task_A+0x5c>
		{
		tab_speed[i]= speed;
 800299a:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <task_A+0x78>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	490c      	ldr	r1, [pc, #48]	; (80029d0 <task_A+0x7c>)
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		i++;
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <task_A+0x78>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3301      	adds	r3, #1
 80029ac:	4a07      	ldr	r2, [pc, #28]	; (80029cc <task_A+0x78>)
 80029ae:	6013      	str	r3, [r2, #0]
		}

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 80029b0:	2200      	movs	r2, #0
 80029b2:	2110      	movs	r1, #16
 80029b4:	4803      	ldr	r0, [pc, #12]	; (80029c4 <task_A+0x70>)
 80029b6:	f002 fca3 	bl	8005300 <HAL_GPIO_WritePin>
		vTaskDelay(5);
 80029ba:	2005      	movs	r0, #5
 80029bc:	f009 fa7c 	bl	800beb8 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80029c0:	e7ce      	b.n	8002960 <task_A+0xc>
 80029c2:	bf00      	nop
 80029c4:	40020400 	.word	0x40020400
 80029c8:	20004d4c 	.word	0x20004d4c
 80029cc:	20004ee8 	.word	0x20004ee8
 80029d0:	20004d58 	.word	0x20004d58

080029d4 <task_B>:
	}
}

static void task_B(void *pvParameters)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
int i=0;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]

for (;;)
	{
		i++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3301      	adds	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
		vTaskDelay(1);
 80029e6:	2001      	movs	r0, #1
 80029e8:	f009 fa66 	bl	800beb8 <vTaskDelay>
		i++;
 80029ec:	e7f8      	b.n	80029e0 <task_B+0xc>
	...

080029f0 <main>:
#endif


//=========================================================================
int main(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af02      	add	r7, sp, #8
  int ret=0;
 80029f6:	2300      	movs	r3, #0
 80029f8:	617b      	str	r3, [r7, #20]
  int tab_dist[2];

  HAL_Init();
 80029fa:	f001 fca5 	bl	8004348 <HAL_Init>
  SystemClock_Config();
 80029fe:	f001 fa31 	bl	8003e64 <SystemClock_Config>
  MX_GPIO_Init();
 8002a02:	f7ff fa89 	bl	8001f18 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a06:	f7ff fc29 	bl	800225c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002a0a:	f7ff fbd3 	bl	80021b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002a0e:	f7ff fbfb 	bl	8002208 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002a12:	f7ff fb1b 	bl	800204c <MX_I2C1_Init>

  motorCommand_Init();
 8002a16:	f000 fb3f 	bl	8003098 <motorCommand_Init>
  quadEncoder_Init();
 8002a1a:	f000 fbb9 	bl	8003190 <quadEncoder_Init>
  captDistIR_Init();
 8002a1e:	f7fe ff45 	bl	80018ac <captDistIR_Init>

  HAL_Delay(500);
 8002a22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a26:	f001 fcbd 	bl	80043a4 <HAL_Delay>

  // Affichage via UART2 sur Terminal série $ minicom -D /dev/ttyACM0
  printf("hello\r\n"); // REM : ne pas oublier le \n
 8002a2a:	483e      	ldr	r0, [pc, #248]	; (8002b24 <main+0x134>)
 8002a2c:	f017 fb5c 	bl	801a0e8 <puts>

  VL53L0X_init();
 8002a30:	f7fe fc20 	bl	8001274 <VL53L0X_init>

  ret = VL53L0X_validateInterface();
 8002a34:	f7fe fbea 	bl	800120c <VL53L0X_validateInterface>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	617b      	str	r3, [r7, #20]
  if(ret ==0)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d103      	bne.n	8002a4a <main+0x5a>
  {
	  printf("VL53L0X OK\r\n");
 8002a42:	4839      	ldr	r0, [pc, #228]	; (8002b28 <main+0x138>)
 8002a44:	f017 fb50 	bl	801a0e8 <puts>
 8002a48:	e002      	b.n	8002a50 <main+0x60>
  }
  else
  {
	  printf("!! PROBLEME VL53L0X !!\r\n");
 8002a4a:	4838      	ldr	r0, [pc, #224]	; (8002b2c <main+0x13c>)
 8002a4c:	f017 fb4c 	bl	801a0e8 <puts>
  }
  VL53L0X_startContinuous(0);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7fe fed3 	bl	80017fc <VL53L0X_startContinuous>

  int a, b;
  groveLCD_begin(16,2,0); // !! cette fonction prend du temps
 8002a56:	2200      	movs	r2, #0
 8002a58:	2102      	movs	r1, #2
 8002a5a:	2010      	movs	r0, #16
 8002a5c:	f7ff fc54 	bl	8002308 <groveLCD_begin>
  HAL_Delay(100);
 8002a60:	2064      	movs	r0, #100	; 0x64
 8002a62:	f001 fc9f 	bl	80043a4 <HAL_Delay>
  groveLCD_display();
 8002a66:	f7ff fd05 	bl	8002474 <groveLCD_display>
  a=5; b=2;
 8002a6a:	2305      	movs	r3, #5
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	2302      	movs	r3, #2
 8002a70:	60fb      	str	r3, [r7, #12]
  groveLCD_term_printf("%d+%d=%d",a,b,a+b);
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	6939      	ldr	r1, [r7, #16]
 8002a7c:	482c      	ldr	r0, [pc, #176]	; (8002b30 <main+0x140>)
 8002a7e:	f7ff fd7b 	bl	8002578 <groveLCD_term_printf>
  groveLCD_setCursor(0,0);
 8002a82:	2100      	movs	r1, #0
 8002a84:	2000      	movs	r0, #0
 8002a86:	f7ff fcd1 	bl	800242c <groveLCD_setCursor>
  groveLCD_term_printf("hello");
 8002a8a:	482a      	ldr	r0, [pc, #168]	; (8002b34 <main+0x144>)
 8002a8c:	f7ff fd74 	bl	8002578 <groveLCD_term_printf>


  HAL_Delay(50);
 8002a90:	2032      	movs	r0, #50	; 0x32
 8002a92:	f001 fc87 	bl	80043a4 <HAL_Delay>

	 speed = quadEncoder_GetSpeedL();
	 speed = quadEncoder_GetSpeedR();
#endif

  osKernelInitialize();
 8002a96:	f008 f833 	bl	800ab00 <osKernelInitialize>

  xTaskCreate( microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	2318      	movs	r3, #24
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002aa8:	4923      	ldr	r1, [pc, #140]	; (8002b38 <main+0x148>)
 8002aaa:	4824      	ldr	r0, [pc, #144]	; (8002b3c <main+0x14c>)
 8002aac:	f009 f8a9 	bl	800bc02 <xTaskCreate>
#if SYNCHRO_EX == EX1
	xTaskCreate( task_A, ( const portCHAR * ) "task A", 128 /* stack size */, NULL, 26, NULL );
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	231a      	movs	r3, #26
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	2280      	movs	r2, #128	; 0x80
 8002abc:	4920      	ldr	r1, [pc, #128]	; (8002b40 <main+0x150>)
 8002abe:	4821      	ldr	r0, [pc, #132]	; (8002b44 <main+0x154>)
 8002ac0:	f009 f89f 	bl	800bc02 <xTaskCreate>
	xTaskCreate( task_B, ( const portCHAR * ) "task B", 128 /* stack size */, NULL, 25, NULL );
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	9301      	str	r3, [sp, #4]
 8002ac8:	2319      	movs	r3, #25
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	2300      	movs	r3, #0
 8002ace:	2280      	movs	r2, #128	; 0x80
 8002ad0:	491d      	ldr	r1, [pc, #116]	; (8002b48 <main+0x158>)
 8002ad2:	481e      	ldr	r0, [pc, #120]	; (8002b4c <main+0x15c>)
 8002ad4:	f009 f895 	bl	800bc02 <xTaskCreate>
#elif SYNCHRO_EX == EX3
	xTaskCreate( task_E, ( signed portCHAR * ) "task E", 128 /* stack size */, NULL, 30, NULL );
	xTaskCreate( task_F, ( signed portCHAR * ) "task F", 128 /* stack size */, NULL, 29, NULL );
#endif

	vSemaphoreCreateBinary(xSemaphore);
 8002ad8:	2203      	movs	r2, #3
 8002ada:	2100      	movs	r1, #0
 8002adc:	2001      	movs	r0, #1
 8002ade:	f008 fa3d 	bl	800af5c <xQueueGenericCreate>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4a1a      	ldr	r2, [pc, #104]	; (8002b50 <main+0x160>)
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <main+0x160>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d006      	beq.n	8002afe <main+0x10e>
 8002af0:	4b17      	ldr	r3, [pc, #92]	; (8002b50 <main+0x160>)
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	2300      	movs	r3, #0
 8002af6:	2200      	movs	r2, #0
 8002af8:	2100      	movs	r1, #0
 8002afa:	f008 fa8d 	bl	800b018 <xQueueGenericSend>
	xSemaphoreTake( xSemaphore, portMAX_DELAY );
 8002afe:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <main+0x160>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b06:	4618      	mov	r0, r3
 8002b08:	f008 fd8c 	bl	800b624 <xQueueSemaphoreTake>

	qh = xQueueCreate( 1, sizeof(struct AMessage ) );
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2108      	movs	r1, #8
 8002b10:	2001      	movs	r0, #1
 8002b12:	f008 fa23 	bl	800af5c <xQueueGenericCreate>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4a0e      	ldr	r2, [pc, #56]	; (8002b54 <main+0x164>)
 8002b1a:	6013      	str	r3, [r2, #0]

  osKernelStart();
 8002b1c:	f008 f814 	bl	800ab48 <osKernelStart>

  while (1)
 8002b20:	e7fe      	b.n	8002b20 <main+0x130>
 8002b22:	bf00      	nop
 8002b24:	0801dccc 	.word	0x0801dccc
 8002b28:	0801dcd4 	.word	0x0801dcd4
 8002b2c:	0801dce0 	.word	0x0801dce0
 8002b30:	0801dcf8 	.word	0x0801dcf8
 8002b34:	0801dd04 	.word	0x0801dd04
 8002b38:	0801dd0c 	.word	0x0801dd0c
 8002b3c:	08002b7d 	.word	0x08002b7d
 8002b40:	0801dd1c 	.word	0x0801dd1c
 8002b44:	08002955 	.word	0x08002955
 8002b48:	0801dd24 	.word	0x0801dd24
 8002b4c:	080029d5 	.word	0x080029d5
 8002b50:	20004d44 	.word	0x20004d44
 8002b54:	20004d48 	.word	0x20004d48

08002b58 <subscription_callback>:
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);


void subscription_callback(const void * msgin)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__String * msg = (const std_msgs__msg__String *)msgin;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	60fb      	str	r3, [r7, #12]

  // Process message
  printf("Received from HOST: %s\n\r", msg->data);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b68:	4803      	ldr	r0, [pc, #12]	; (8002b78 <subscription_callback+0x20>)
 8002b6a:	f017 fa37 	bl	8019fdc <iprintf>
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	0801dd2c 	.word	0x0801dd2c

08002b7c <microros_task>:


void microros_task(void *argument)
{
 8002b7c:	b5b0      	push	{r4, r5, r7, lr}
 8002b7e:	b0d6      	sub	sp, #344	; 0x158
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002b86:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002b8a:	6018      	str	r0, [r3, #0]
  rmw_uros_set_custom_transport( true, (void *) &huart1, cubemx_transport_open,  cubemx_transport_close,  cubemx_transport_write, cubemx_transport_read);
 8002b8c:	4b68      	ldr	r3, [pc, #416]	; (8002d30 <microros_task+0x1b4>)
 8002b8e:	9301      	str	r3, [sp, #4]
 8002b90:	4b68      	ldr	r3, [pc, #416]	; (8002d34 <microros_task+0x1b8>)
 8002b92:	9300      	str	r3, [sp, #0]
 8002b94:	4b68      	ldr	r3, [pc, #416]	; (8002d38 <microros_task+0x1bc>)
 8002b96:	4a69      	ldr	r2, [pc, #420]	; (8002d3c <microros_task+0x1c0>)
 8002b98:	4969      	ldr	r1, [pc, #420]	; (8002d40 <microros_task+0x1c4>)
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	f00c f916 	bl	800edcc <rmw_uros_set_custom_transport>

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002ba0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f00b fe7d 	bl	800e8a4 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8002baa:	4b66      	ldr	r3, [pc, #408]	; (8002d44 <microros_task+0x1c8>)
 8002bac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  freeRTOS_allocator.deallocate = microros_deallocate;
 8002bb0:	4b65      	ldr	r3, [pc, #404]	; (8002d48 <microros_task+0x1cc>)
 8002bb2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  freeRTOS_allocator.reallocate = microros_reallocate;
 8002bb6:	4b65      	ldr	r3, [pc, #404]	; (8002d4c <microros_task+0x1d0>)
 8002bb8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002bbc:	4b64      	ldr	r3, [pc, #400]	; (8002d50 <microros_task+0x1d4>)
 8002bbe:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002bc2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f00b fe7a 	bl	800e8c0 <rcutils_set_default_allocator>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f083 0301 	eor.w	r3, r3, #1
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d004      	beq.n	8002be2 <microros_task+0x66>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8002bd8:	f240 1123 	movw	r1, #291	; 0x123
 8002bdc:	485d      	ldr	r0, [pc, #372]	; (8002d54 <microros_task+0x1d8>)
 8002bde:	f017 f9fd 	bl	8019fdc <iprintf>
  }

  // micro-ROS app
  rclc_support_t support;
  rcl_allocator_t allocator;
  allocator = rcl_get_default_allocator();
 8002be2:	463b      	mov	r3, r7
 8002be4:	4618      	mov	r0, r3
 8002be6:	f00b fe8b 	bl	800e900 <rcutils_get_default_allocator>
 8002bea:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8002bee:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bf2:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8002bf6:	461d      	mov	r5, r3
 8002bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bfc:	682b      	ldr	r3, [r5, #0]
 8002bfe:	6023      	str	r3, [r4, #0]

  // create node
  rcl_node_t node;
  rcl_node_options_t node_ops = rcl_node_get_default_options();
 8002c00:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002c04:	4618      	mov	r0, r3
 8002c06:	f00b f897 	bl	800dd38 <rcl_node_get_default_options>
  rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8002c0a:	f00a ff6f 	bl	800daec <rcl_get_zero_initialized_init_options>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  rcl_init_options_init(&init_options, allocator);
 8002c14:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 8002c18:	466a      	mov	r2, sp
 8002c1a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002c1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c22:	e882 0003 	stmia.w	r2, {r0, r1}
 8002c26:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f00a ff5f 	bl	800daf0 <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, ROS_DOMAIN_ID);
 8002c32:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c36:	2106      	movs	r1, #6
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f00b f875 	bl	800dd28 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8002c3e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002c42:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8002c46:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2100      	movs	r1, #0
 8002c52:	f00b fd3f 	bl	800e6d4 <rclc_support_init_with_options>
  rclc_node_init_default(&node, "STM32_Node","", &support);
 8002c56:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c5a:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 8002c5e:	4a3e      	ldr	r2, [pc, #248]	; (8002d58 <microros_task+0x1dc>)
 8002c60:	493e      	ldr	r1, [pc, #248]	; (8002d5c <microros_task+0x1e0>)
 8002c62:	f00b fd73 	bl	800e74c <rclc_node_init_default>

  // create publisher
  rcl_publisher_t publisher;
  std_msgs__msg__String sensor_dist_back_msg;
  rclc_publisher_init_default(&publisher, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),"/sensor/dist_back");
 8002c66:	f00d fa81 	bl	801016c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8002c70:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8002c74:	4b3a      	ldr	r3, [pc, #232]	; (8002d60 <microros_task+0x1e4>)
 8002c76:	f00b fda5 	bl	800e7c4 <rclc_publisher_init_default>

  // create subscriber
  rcl_subscription_t subscriber;
  std_msgs__msg__String str_msg;
  rclc_subscription_init_default(&subscriber,&node,ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),"/command/move");
 8002c7a:	f00d fa77 	bl	801016c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8002c84:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8002c88:	4b36      	ldr	r3, [pc, #216]	; (8002d64 <microros_task+0x1e8>)
 8002c8a:	f00b fdcf 	bl	800e82c <rclc_subscription_init_default>
  // Add subscription to the executor
  rclc_executor_t executor;
  rclc_executor_init(&executor, &support.context, 1, &allocator); // ! 'NUMBER OF HANDLES' A MODIFIER EN FONCTION DU NOMBRE DE TOPICS
 8002c8e:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 8002c92:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002c96:	1d19      	adds	r1, r3, #4
 8002c98:	f107 0020 	add.w	r0, r7, #32
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f00b faba 	bl	800e218 <rclc_executor_init>
  rclc_executor_add_subscription(&executor, &subscriber, &str_msg, &subscription_callback, ON_NEW_DATA);
 8002ca4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002ca8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8002cac:	f107 0020 	add.w	r0, r7, #32
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	4b2c      	ldr	r3, [pc, #176]	; (8002d68 <microros_task+0x1ec>)
 8002cb6:	f00b fb23 	bl	800e300 <rclc_executor_add_subscription>

  str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8002cba:	2064      	movs	r0, #100	; 0x64
 8002cbc:	f016 f9de 	bl	801907c <malloc>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  str_msg.data.size = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  str_msg.data.capacity = ARRAY_LEN;
 8002ccc:	2364      	movs	r3, #100	; 0x64
 8002cce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  for(;;)
  {
	  sprintf(str_msg.data.data, "from STM32 : mes_vl53 : #%d", (int32_t)mes_vl53);
 8002cd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cd6:	4a25      	ldr	r2, [pc, #148]	; (8002d6c <microros_task+0x1f0>)
 8002cd8:	8812      	ldrh	r2, [r2, #0]
 8002cda:	4925      	ldr	r1, [pc, #148]	; (8002d70 <microros_task+0x1f4>)
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f017 fb33 	bl	801a348 <siprintf>
	  str_msg.data.size = strlen(str_msg.data.data);
 8002ce2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fa84 	bl	80001f4 <strlen>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      rcl_ret_t ret = rcl_publish(&publisher, &str_msg, NULL);
 8002cf2:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8002cf6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f00b f973 	bl	800dfe8 <rcl_publish>
 8002d02:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c

		if (ret != RCL_RET_OK)
 8002d06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d004      	beq.n	8002d18 <microros_task+0x19c>
		{
		  printf("Error publishing (line %d)\n\r", __LINE__);
 8002d0e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8002d12:	4818      	ldr	r0, [pc, #96]	; (8002d74 <microros_task+0x1f8>)
 8002d14:	f017 f962 	bl	8019fdc <iprintf>
		}
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 8002d18:	f107 0120 	add.w	r1, r7, #32
 8002d1c:	4a16      	ldr	r2, [pc, #88]	; (8002d78 <microros_task+0x1fc>)
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	4608      	mov	r0, r1
 8002d24:	f00b fca0 	bl	800e668 <rclc_executor_spin_some>
    osDelay(10);
 8002d28:	200a      	movs	r0, #10
 8002d2a:	f007 ff33 	bl	800ab94 <osDelay>
  {
 8002d2e:	e7d0      	b.n	8002cd2 <microros_task+0x156>
 8002d30:	08001e71 	.word	0x08001e71
 8002d34:	08001e09 	.word	0x08001e09
 8002d38:	08001de9 	.word	0x08001de9
 8002d3c:	08001dbd 	.word	0x08001dbd
 8002d40:	20004b34 	.word	0x20004b34
 8002d44:	08002dd1 	.word	0x08002dd1
 8002d48:	08002e15 	.word	0x08002e15
 8002d4c:	08002e4d 	.word	0x08002e4d
 8002d50:	08002eb9 	.word	0x08002eb9
 8002d54:	0801dd48 	.word	0x0801dd48
 8002d58:	0801dd70 	.word	0x0801dd70
 8002d5c:	0801dd74 	.word	0x0801dd74
 8002d60:	0801dd80 	.word	0x0801dd80
 8002d64:	0801dd94 	.word	0x0801dd94
 8002d68:	08002b59 	.word	0x08002b59
 8002d6c:	20004d4c 	.word	0x20004d4c
 8002d70:	0801dda4 	.word	0x0801dda4
 8002d74:	0801ddc0 	.word	0x0801ddc0
 8002d78:	00989680 	.word	0x00989680

08002d7c <HAL_TIM_PeriodElapsedCallback>:
  {
    HAL_IncTick();
  }
}*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
	static BaseType_t xHigherPriorityTaskWoken;
	xSemaphoreHandle xSemaphore_Fast;
	if (htim->Instance==TIM3)	// Fast Task
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10f      	bne.n	8002dae <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		xSemaphoreGiveFromISR( xSemaphore_Fast,&xHigherPriorityTaskWoken );
 8002d8e:	490b      	ldr	r1, [pc, #44]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f008 fada 	bl	800b34a <xQueueGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002d96:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <HAL_TIM_PeriodElapsedCallback+0x32>
 8002d9e:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	f3bf 8f6f 	isb	sy
	}
}
 8002dae:	bf00      	nop
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40000400 	.word	0x40000400
 8002dbc:	20004eec 	.word	0x20004eec
 8002dc0:	e000ed04 	.word	0xe000ed04

08002dc4 <Error_Handler>:
//=========================================================================
void Error_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc8:	b672      	cpsid	i
}
 8002dca:	bf00      	nop
  __disable_irq();
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <Error_Handler+0x8>
	...

08002dd0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <microros_allocate+0x3c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4413      	add	r3, r2
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b09      	ldr	r3, [pc, #36]	; (8002e0c <microros_allocate+0x3c>)
 8002de8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <microros_allocate+0x40>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <microros_allocate+0x40>)
 8002df8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fe fd88 	bl	8001910 <pvPortMallocMicroROS>
 8002e00:	4603      	mov	r3, r0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20004ef0 	.word	0x20004ef0
 8002e10:	20004ef4 	.word	0x20004ef4

08002e14 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00c      	beq.n	8002e3e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7fe fe91 	bl	8001b4c <getBlockSize>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	4a06      	ldr	r2, [pc, #24]	; (8002e48 <microros_deallocate+0x34>)
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <microros_deallocate+0x34>)
 8002e36:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7fe fe2d 	bl	8001a98 <vPortFreeMicroROS>
  }
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	20004ef4 	.word	0x20004ef4

08002e4c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002e58:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <microros_reallocate+0x64>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4413      	add	r3, r2
 8002e62:	461a      	mov	r2, r3
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <microros_reallocate+0x64>)
 8002e66:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002e68:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <microros_reallocate+0x68>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4413      	add	r3, r2
 8002e72:	461a      	mov	r2, r3
 8002e74:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <microros_reallocate+0x68>)
 8002e76:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d104      	bne.n	8002e88 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002e7e:	68b8      	ldr	r0, [r7, #8]
 8002e80:	f7fe fd46 	bl	8001910 <pvPortMallocMicroROS>
 8002e84:	4603      	mov	r3, r0
 8002e86:	e00e      	b.n	8002ea6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7fe fe5f 	bl	8001b4c <getBlockSize>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4a08      	ldr	r2, [pc, #32]	; (8002eb4 <microros_reallocate+0x68>)
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <microros_reallocate+0x68>)
 8002e9a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7fe fe72 	bl	8001b88 <pvPortReallocMicroROS>
 8002ea4:	4603      	mov	r3, r0
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20004ef0 	.word	0x20004ef0
 8002eb4:	20004ef4 	.word	0x20004ef4

08002eb8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	fb02 f303 	mul.w	r3, r2, r3
 8002ecc:	4a0c      	ldr	r2, [pc, #48]	; (8002f00 <microros_zero_allocate+0x48>)
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <microros_zero_allocate+0x48>)
 8002ed6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	fb02 f303 	mul.w	r3, r2, r3
 8002ee0:	4a08      	ldr	r2, [pc, #32]	; (8002f04 <microros_zero_allocate+0x4c>)
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <microros_zero_allocate+0x4c>)
 8002eea:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f7fe fe84 	bl	8001bfc <pvPortCallocMicroROS>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20004ef0 	.word	0x20004ef0
 8002f04:	20004ef4 	.word	0x20004ef4

08002f08 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002f08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f0c:	b086      	sub	sp, #24
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002f14:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002f1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f1e:	a320      	add	r3, pc, #128	; (adr r3, 8002fa0 <UTILS_NanosecondsToTimespec+0x98>)
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	f7fd fec8 	bl	8000cb8 <__aeabi_ldivmod>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002f32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f36:	a31a      	add	r3, pc, #104	; (adr r3, 8002fa0 <UTILS_NanosecondsToTimespec+0x98>)
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f7fd febc 	bl	8000cb8 <__aeabi_ldivmod>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	da20      	bge.n	8002f8e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a11      	ldr	r2, [pc, #68]	; (8002f98 <UTILS_NanosecondsToTimespec+0x90>)
 8002f52:	fb82 1203 	smull	r1, r2, r2, r3
 8002f56:	1712      	asrs	r2, r2, #28
 8002f58:	17db      	asrs	r3, r3, #31
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f66:	6979      	ldr	r1, [r7, #20]
 8002f68:	17c8      	asrs	r0, r1, #31
 8002f6a:	460c      	mov	r4, r1
 8002f6c:	4605      	mov	r5, r0
 8002f6e:	ebb2 0804 	subs.w	r8, r2, r4
 8002f72:	eb63 0905 	sbc.w	r9, r3, r5
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	4906      	ldr	r1, [pc, #24]	; (8002f9c <UTILS_NanosecondsToTimespec+0x94>)
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	441a      	add	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	609a      	str	r2, [r3, #8]
    }
}
 8002f8e:	bf00      	nop
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f98:	44b82fa1 	.word	0x44b82fa1
 8002f9c:	3b9aca00 	.word	0x3b9aca00
 8002fa0:	3b9aca00 	.word	0x3b9aca00
 8002fa4:	00000000 	.word	0x00000000

08002fa8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fac:	b08e      	sub	sp, #56	; 0x38
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6278      	str	r0, [r7, #36]	; 0x24
 8002fb2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002fb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002fb8:	2300      	movs	r3, #0
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002fca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f009 faa4 	bl	800c51c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd6:	17da      	asrs	r2, r3, #31
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	61fa      	str	r2, [r7, #28]
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	69b9      	ldr	r1, [r7, #24]
 8002fe6:	000b      	movs	r3, r1
 8002fe8:	2200      	movs	r2, #0
 8002fea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	461c      	mov	r4, r3
 8002ff4:	4615      	mov	r5, r2
 8002ff6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ffa:	1911      	adds	r1, r2, r4
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	416b      	adcs	r3, r5
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003006:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800300a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	f04f 0400 	mov.w	r4, #0
 8003016:	f04f 0500 	mov.w	r5, #0
 800301a:	015d      	lsls	r5, r3, #5
 800301c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003020:	0154      	lsls	r4, r2, #5
 8003022:	4622      	mov	r2, r4
 8003024:	462b      	mov	r3, r5
 8003026:	ebb2 0800 	subs.w	r8, r2, r0
 800302a:	eb63 0901 	sbc.w	r9, r3, r1
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800303a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800303e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8003042:	4690      	mov	r8, r2
 8003044:	4699      	mov	r9, r3
 8003046:	eb18 0a00 	adds.w	sl, r8, r0
 800304a:	eb49 0b01 	adc.w	fp, r9, r1
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800305a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800305e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003062:	ebb2 040a 	subs.w	r4, r2, sl
 8003066:	603c      	str	r4, [r7, #0]
 8003068:	eb63 030b 	sbc.w	r3, r3, fp
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003072:	4623      	mov	r3, r4
 8003074:	181b      	adds	r3, r3, r0
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	462b      	mov	r3, r5
 800307a:	eb41 0303 	adc.w	r3, r1, r3
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	6a3a      	ldr	r2, [r7, #32]
 8003082:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003086:	f7ff ff3f 	bl	8002f08 <UTILS_NanosecondsToTimespec>

    return 0;
 800308a:	2300      	movs	r3, #0
 800308c:	4618      	mov	r0, r3
 800308e:	3738      	adds	r7, #56	; 0x38
 8003090:	46bd      	mov	sp, r7
 8003092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003098 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 80030a2:	4b25      	ldr	r3, [pc, #148]	; (8003138 <motorCommand_Init+0xa0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a25      	ldr	r2, [pc, #148]	; (800313c <motorCommand_Init+0xa4>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	0d9b      	lsrs	r3, r3, #22
 80030ae:	3b01      	subs	r3, #1
 80030b0:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 80030b2:	4b23      	ldr	r3, [pc, #140]	; (8003140 <motorCommand_Init+0xa8>)
 80030b4:	4a23      	ldr	r2, [pc, #140]	; (8003144 <motorCommand_Init+0xac>)
 80030b6:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 80030b8:	4b21      	ldr	r3, [pc, #132]	; (8003140 <motorCommand_Init+0xa8>)
 80030ba:	22c7      	movs	r2, #199	; 0xc7
 80030bc:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 80030be:	4a20      	ldr	r2, [pc, #128]	; (8003140 <motorCommand_Init+0xa8>)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 80030c4:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <motorCommand_Init+0xa8>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ca:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <motorCommand_Init+0xa8>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 80030d0:	481b      	ldr	r0, [pc, #108]	; (8003140 <motorCommand_Init+0xa8>)
 80030d2:	f005 fa81 	bl	80085d8 <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030d6:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <motorCommand_Init+0xb0>)
 80030d8:	2260      	movs	r2, #96	; 0x60
 80030da:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 80030dc:	4b1a      	ldr	r3, [pc, #104]	; (8003148 <motorCommand_Init+0xb0>)
 80030de:	2205      	movs	r2, #5
 80030e0:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030e2:	4b19      	ldr	r3, [pc, #100]	; (8003148 <motorCommand_Init+0xb0>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030e8:	4b17      	ldr	r3, [pc, #92]	; (8003148 <motorCommand_Init+0xb0>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 80030ee:	2200      	movs	r2, #0
 80030f0:	4915      	ldr	r1, [pc, #84]	; (8003148 <motorCommand_Init+0xb0>)
 80030f2:	4813      	ldr	r0, [pc, #76]	; (8003140 <motorCommand_Init+0xa8>)
 80030f4:	f005 fe22 	bl	8008d3c <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 80030f8:	2204      	movs	r2, #4
 80030fa:	4913      	ldr	r1, [pc, #76]	; (8003148 <motorCommand_Init+0xb0>)
 80030fc:	4810      	ldr	r0, [pc, #64]	; (8003140 <motorCommand_Init+0xa8>)
 80030fe:	f005 fe1d 	bl	8008d3c <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 8003102:	4b0f      	ldr	r3, [pc, #60]	; (8003140 <motorCommand_Init+0xa8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2264      	movs	r2, #100	; 0x64
 8003108:	635a      	str	r2, [r3, #52]	; 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 800310a:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <motorCommand_Init+0xa8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2264      	movs	r2, #100	; 0x64
 8003110:	639a      	str	r2, [r3, #56]	; 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 8003112:	2100      	movs	r1, #0
 8003114:	480a      	ldr	r0, [pc, #40]	; (8003140 <motorCommand_Init+0xa8>)
 8003116:	f005 fb1b 	bl	8008750 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 800311a:	2104      	movs	r1, #4
 800311c:	4808      	ldr	r0, [pc, #32]	; (8003140 <motorCommand_Init+0xa8>)
 800311e:	f005 fb17 	bl	8008750 <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8003122:	2200      	movs	r2, #0
 8003124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003128:	4808      	ldr	r0, [pc, #32]	; (800314c <motorCommand_Init+0xb4>)
 800312a:	f002 f8e9 	bl	8005300 <HAL_GPIO_WritePin>
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000004 	.word	0x20000004
 800313c:	6b5fca6b 	.word	0x6b5fca6b
 8003140:	20004ef8 	.word	0x20004ef8
 8003144:	40000400 	.word	0x40000400
 8003148:	20004f40 	.word	0x20004f40
 800314c:	40020000 	.word	0x40020000

08003150 <motorLeft_SetDuty>:

//=================================================================
//			SET DUTY CYCLE LEFT
//=================================================================
void motorLeft_SetDuty(int duty)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, duty);
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <motorLeft_SetDuty+0x1c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	20004ef8 	.word	0x20004ef8

08003170 <motorRight_SetDuty>:
//=================================================================
//			SET DUTY CYCLE RIGHT
//=================================================================
void motorRight_SetDuty(int duty)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, duty);
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <motorRight_SetDuty+0x1c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	20004ef8 	.word	0x20004ef8

08003190 <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b08a      	sub	sp, #40	; 0x28
 8003194:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 8003196:	4b35      	ldr	r3, [pc, #212]	; (800326c <quadEncoder_Init+0xdc>)
 8003198:	4a35      	ldr	r2, [pc, #212]	; (8003270 <quadEncoder_Init+0xe0>)
 800319a:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 800319c:	4b33      	ldr	r3, [pc, #204]	; (800326c <quadEncoder_Init+0xdc>)
 800319e:	2200      	movs	r2, #0
 80031a0:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031a2:	4b32      	ldr	r3, [pc, #200]	; (800326c <quadEncoder_Init+0xdc>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 80031a8:	4b30      	ldr	r3, [pc, #192]	; (800326c <quadEncoder_Init+0xdc>)
 80031aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ae:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031b0:	4b2e      	ldr	r3, [pc, #184]	; (800326c <quadEncoder_Init+0xdc>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80031b6:	2303      	movs	r3, #3
 80031b8:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031be:	2301      	movs	r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 80031c2:	2308      	movs	r3, #8
 80031c4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 80031c6:	230f      	movs	r3, #15
 80031c8:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 80031ce:	2301      	movs	r3, #1
 80031d0:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 80031d2:	2308      	movs	r3, #8
 80031d4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 80031d6:	230f      	movs	r3, #15
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 80031da:	1d3b      	adds	r3, r7, #4
 80031dc:	4619      	mov	r1, r3
 80031de:	4823      	ldr	r0, [pc, #140]	; (800326c <quadEncoder_Init+0xdc>)
 80031e0:	f005 fb66 	bl	80088b0 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 80031e4:	4b21      	ldr	r3, [pc, #132]	; (800326c <quadEncoder_Init+0xdc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2200      	movs	r2, #0
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 80031ec:	2100      	movs	r1, #0
 80031ee:	481f      	ldr	r0, [pc, #124]	; (800326c <quadEncoder_Init+0xdc>)
 80031f0:	f005 fc0e 	bl	8008a10 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 80031f4:	2104      	movs	r1, #4
 80031f6:	481d      	ldr	r0, [pc, #116]	; (800326c <quadEncoder_Init+0xdc>)
 80031f8:	f005 fc0a 	bl	8008a10 <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 80031fc:	4b1d      	ldr	r3, [pc, #116]	; (8003274 <quadEncoder_Init+0xe4>)
 80031fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003202:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 8003204:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <quadEncoder_Init+0xe4>)
 8003206:	2200      	movs	r2, #0
 8003208:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 800320a:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <quadEncoder_Init+0xe4>)
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 8003210:	4b18      	ldr	r3, [pc, #96]	; (8003274 <quadEncoder_Init+0xe4>)
 8003212:	f241 3288 	movw	r2, #5000	; 0x1388
 8003216:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003218:	4b16      	ldr	r3, [pc, #88]	; (8003274 <quadEncoder_Init+0xe4>)
 800321a:	2200      	movs	r2, #0
 800321c:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800321e:	2303      	movs	r3, #3
 8003220:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003222:	2300      	movs	r3, #0
 8003224:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003226:	2301      	movs	r3, #1
 8003228:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 800322a:	2308      	movs	r3, #8
 800322c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 800322e:	230f      	movs	r3, #15
 8003230:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003232:	2300      	movs	r3, #0
 8003234:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8003236:	2301      	movs	r3, #1
 8003238:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 800323a:	2308      	movs	r3, #8
 800323c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 800323e:	230f      	movs	r3, #15
 8003240:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	4619      	mov	r1, r3
 8003246:	480b      	ldr	r0, [pc, #44]	; (8003274 <quadEncoder_Init+0xe4>)
 8003248:	f005 fb32 	bl	80088b0 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 800324c:	4b09      	ldr	r3, [pc, #36]	; (8003274 <quadEncoder_Init+0xe4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2200      	movs	r2, #0
 8003252:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8003254:	2100      	movs	r1, #0
 8003256:	4807      	ldr	r0, [pc, #28]	; (8003274 <quadEncoder_Init+0xe4>)
 8003258:	f005 fbda 	bl	8008a10 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 800325c:	2104      	movs	r1, #4
 800325e:	4805      	ldr	r0, [pc, #20]	; (8003274 <quadEncoder_Init+0xe4>)
 8003260:	f005 fbd6 	bl	8008a10 <HAL_TIM_Encoder_Start>
}
 8003264:	bf00      	nop
 8003266:	3728      	adds	r7, #40	; 0x28
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	20004f5c 	.word	0x20004f5c
 8003270:	40010000 	.word	0x40010000
 8003274:	20004fa4 	.word	0x20004fa4

08003278 <quadEncoder_PosCalcL>:
//================================================================
//		POSITION LEFT CALC
//================================================================

void quadEncoder_PosCalcL(int* AngPos)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM1->CNT;
 8003284:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <quadEncoder_PosCalcL+0x40>)
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3304      	adds	r3, #4
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f641 129b 	movw	r2, #6555	; 0x199b
 800329a:	fb02 f303 	mul.w	r3, r2, r3
 800329e:	4a07      	ldr	r2, [pc, #28]	; (80032bc <quadEncoder_PosCalcL+0x44>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	099b      	lsrs	r3, r3, #6
 80032a6:	461a      	mov	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	601a      	str	r2, [r3, #0]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40010000 	.word	0x40010000
 80032bc:	10624dd3 	.word	0x10624dd3

080032c0 <quadEncoder_GetSpeedL>:
//		SPEED LEFT
//--> must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedL(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedL=0;

	quadEncoder_PosCalcL(AngPos);
 80032c4:	4824      	ldr	r0, [pc, #144]	; (8003358 <quadEncoder_GetSpeedL+0x98>)
 80032c6:	f7ff ffd7 	bl	8003278 <quadEncoder_PosCalcL>
	SpeedL = AngPos[0] - AngPos[1];
 80032ca:	4b23      	ldr	r3, [pc, #140]	; (8003358 <quadEncoder_GetSpeedL+0x98>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	4b21      	ldr	r3, [pc, #132]	; (8003358 <quadEncoder_GetSpeedL+0x98>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	b21a      	sxth	r2, r3
 80032dc:	4b1f      	ldr	r3, [pc, #124]	; (800335c <quadEncoder_GetSpeedL+0x9c>)
 80032de:	801a      	strh	r2, [r3, #0]
	if (SpeedL >= 0)
 80032e0:	4b1e      	ldr	r3, [pc, #120]	; (800335c <quadEncoder_GetSpeedL+0x9c>)
 80032e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	db10      	blt.n	800330c <quadEncoder_GetSpeedL+0x4c>
	{
		if (SpeedL >= HALF_MAX_COUNT)
 80032ea:	4b1c      	ldr	r3, [pc, #112]	; (800335c <quadEncoder_GetSpeedL+0x9c>)
 80032ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f4:	db1a      	blt.n	800332c <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL - MAX_COUNT;
 80032f6:	4b19      	ldr	r3, [pc, #100]	; (800335c <quadEncoder_GetSpeedL+0x9c>)
 80032f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003302:	b29b      	uxth	r3, r3
 8003304:	b21a      	sxth	r2, r3
 8003306:	4b15      	ldr	r3, [pc, #84]	; (800335c <quadEncoder_GetSpeedL+0x9c>)
 8003308:	801a      	strh	r2, [r3, #0]
 800330a:	e00f      	b.n	800332c <quadEncoder_GetSpeedL+0x6c>
			}
	}
	else
	{
		if (SpeedL < -HALF_MAX_COUNT)
 800330c:	4b13      	ldr	r3, [pc, #76]	; (800335c <quadEncoder_GetSpeedL+0x9c>)
 800330e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003312:	f513 4f80 	cmn.w	r3, #16384	; 0x4000
 8003316:	da09      	bge.n	800332c <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL + MAX_COUNT;
 8003318:	4b10      	ldr	r3, [pc, #64]	; (800335c <quadEncoder_GetSpeedL+0x9c>)
 800331a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800331e:	b29b      	uxth	r3, r3
 8003320:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8003324:	b29b      	uxth	r3, r3
 8003326:	b21a      	sxth	r2, r3
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <quadEncoder_GetSpeedL+0x9c>)
 800332a:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedL=(SpeedL*60*1000)/(32767*TE_ms);
 800332c:	4b0b      	ldr	r3, [pc, #44]	; (800335c <quadEncoder_GetSpeedL+0x9c>)
 800332e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003332:	461a      	mov	r2, r3
 8003334:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003338:	fb02 f303 	mul.w	r3, r2, r3
 800333c:	4a08      	ldr	r2, [pc, #32]	; (8003360 <quadEncoder_GetSpeedL+0xa0>)
 800333e:	fb82 1203 	smull	r1, r2, r2, r3
 8003342:	1412      	asrs	r2, r2, #16
 8003344:	17db      	asrs	r3, r3, #31
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	b21a      	sxth	r2, r3
 800334a:	4b04      	ldr	r3, [pc, #16]	; (800335c <quadEncoder_GetSpeedL+0x9c>)
 800334c:	801a      	strh	r2, [r3, #0]
	return SpeedL;
 800334e:	4b03      	ldr	r3, [pc, #12]	; (800335c <quadEncoder_GetSpeedL+0x9c>)
 8003350:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003354:	4618      	mov	r0, r3
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20004ff4 	.word	0x20004ff4
 800335c:	20004ffc 	.word	0x20004ffc
 8003360:	66673335 	.word	0x66673335

08003364 <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <quadEncoder_CallbackIndexL+0x4c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b10      	cmp	r3, #16
 8003374:	d105      	bne.n	8003382 <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 8003376:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <quadEncoder_CallbackIndexL+0x50>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3b01      	subs	r3, #1
 800337c:	4a0d      	ldr	r2, [pc, #52]	; (80033b4 <quadEncoder_CallbackIndexL+0x50>)
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	e004      	b.n	800338c <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 8003382:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <quadEncoder_CallbackIndexL+0x50>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3301      	adds	r3, #1
 8003388:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <quadEncoder_CallbackIndexL+0x50>)
 800338a:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 800338c:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <quadEncoder_CallbackIndexL+0x4c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2200      	movs	r2, #0
 8003392:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8003394:	2100      	movs	r1, #0
 8003396:	4806      	ldr	r0, [pc, #24]	; (80033b0 <quadEncoder_CallbackIndexL+0x4c>)
 8003398:	f005 fb3a 	bl	8008a10 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 800339c:	2104      	movs	r1, #4
 800339e:	4804      	ldr	r0, [pc, #16]	; (80033b0 <quadEncoder_CallbackIndexL+0x4c>)
 80033a0:	f005 fb36 	bl	8008a10 <HAL_TIM_Encoder_Start>

				Left_first_index_reached = 1;
 80033a4:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <quadEncoder_CallbackIndexL+0x54>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20004f5c 	.word	0x20004f5c
 80033b4:	20004fec 	.word	0x20004fec
 80033b8:	20004d50 	.word	0x20004d50

080033bc <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <quadEncoder_CallbackIndexR+0x4c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b10      	cmp	r3, #16
 80033cc:	d105      	bne.n	80033da <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 80033ce:	4b0f      	ldr	r3, [pc, #60]	; (800340c <quadEncoder_CallbackIndexR+0x50>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	4a0d      	ldr	r2, [pc, #52]	; (800340c <quadEncoder_CallbackIndexR+0x50>)
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	e004      	b.n	80033e4 <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 80033da:	4b0c      	ldr	r3, [pc, #48]	; (800340c <quadEncoder_CallbackIndexR+0x50>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3301      	adds	r3, #1
 80033e0:	4a0a      	ldr	r2, [pc, #40]	; (800340c <quadEncoder_CallbackIndexR+0x50>)
 80033e2:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <quadEncoder_CallbackIndexR+0x4c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2200      	movs	r2, #0
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 80033ec:	2100      	movs	r1, #0
 80033ee:	4806      	ldr	r0, [pc, #24]	; (8003408 <quadEncoder_CallbackIndexR+0x4c>)
 80033f0:	f005 fb0e 	bl	8008a10 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 80033f4:	2104      	movs	r1, #4
 80033f6:	4804      	ldr	r0, [pc, #16]	; (8003408 <quadEncoder_CallbackIndexR+0x4c>)
 80033f8:	f005 fb0a 	bl	8008a10 <HAL_TIM_Encoder_Start>

				Right_first_index_reached = 1;
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <quadEncoder_CallbackIndexR+0x54>)
 80033fe:	2201      	movs	r2, #1
 8003400:	601a      	str	r2, [r3, #0]

}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20004fa4 	.word	0x20004fa4
 800340c:	20004ff0 	.word	0x20004ff0
 8003410:	20004d54 	.word	0x20004d54

08003414 <HAL_MspInit>:
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);
void HAL_GPIO_MspInit(void);

void HAL_MspInit(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	4b33      	ldr	r3, [pc, #204]	; (80034ec <HAL_MspInit+0xd8>)
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	4a32      	ldr	r2, [pc, #200]	; (80034ec <HAL_MspInit+0xd8>)
 8003424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003428:	6453      	str	r3, [r2, #68]	; 0x44
 800342a:	4b30      	ldr	r3, [pc, #192]	; (80034ec <HAL_MspInit+0xd8>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	4b2c      	ldr	r3, [pc, #176]	; (80034ec <HAL_MspInit+0xd8>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	4a2b      	ldr	r2, [pc, #172]	; (80034ec <HAL_MspInit+0xd8>)
 8003440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003444:	6413      	str	r3, [r2, #64]	; 0x40
 8003446:	4b29      	ldr	r3, [pc, #164]	; (80034ec <HAL_MspInit+0xd8>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	4b25      	ldr	r3, [pc, #148]	; (80034ec <HAL_MspInit+0xd8>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4a24      	ldr	r2, [pc, #144]	; (80034ec <HAL_MspInit+0xd8>)
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
 8003462:	4b22      	ldr	r3, [pc, #136]	; (80034ec <HAL_MspInit+0xd8>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <HAL_MspInit+0xd8>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <HAL_MspInit+0xd8>)
 8003478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800347c:	6313      	str	r3, [r2, #48]	; 0x30
 800347e:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <HAL_MspInit+0xd8>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	4b17      	ldr	r3, [pc, #92]	; (80034ec <HAL_MspInit+0xd8>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	4a16      	ldr	r2, [pc, #88]	; (80034ec <HAL_MspInit+0xd8>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	6313      	str	r3, [r2, #48]	; 0x30
 800349a:	4b14      	ldr	r3, [pc, #80]	; (80034ec <HAL_MspInit+0xd8>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	4b10      	ldr	r3, [pc, #64]	; (80034ec <HAL_MspInit+0xd8>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a0f      	ldr	r2, [pc, #60]	; (80034ec <HAL_MspInit+0xd8>)
 80034b0:	f043 0302 	orr.w	r3, r3, #2
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <HAL_MspInit+0xd8>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80034c2:	2200      	movs	r2, #0
 80034c4:	210f      	movs	r1, #15
 80034c6:	f06f 0001 	mvn.w	r0, #1
 80034ca:	f001 f95b 	bl	8004784 <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 80034ce:	f000 f8a3 	bl	8003618 <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 80034d2:	f000 f823 	bl	800351c <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 80034d6:	f000 f861 	bl	800359c <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 80034da:	f000 f8ff 	bl	80036dc <HAL_adcir_MspInit>
  HAL_GPIO_MspInit();
 80034de:	f000 f807 	bl	80034f0 <HAL_GPIO_MspInit>

}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023800 	.word	0x40023800

080034f0 <HAL_GPIO_MspInit>:
/******************************************************************
			GPIO : contrôle période d'échantillonage
GPIO OUTPUT	-->	PB4
******************************************************************/
void HAL_GPIO_MspInit(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034f6:	2310      	movs	r3, #16
 80034f8:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // hal_gpio.h
 80034fa:	2301      	movs	r3, #1
 80034fc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003502:	2301      	movs	r3, #1
 8003504:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003506:	1d3b      	adds	r3, r7, #4
 8003508:	4619      	mov	r1, r3
 800350a:	4803      	ldr	r0, [pc, #12]	; (8003518 <HAL_GPIO_MspInit+0x28>)
 800350c:	f001 fd74 	bl	8004ff8 <HAL_GPIO_Init>

}
 8003510:	bf00      	nop
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40020400 	.word	0x40020400

0800351c <HAL_Encoder_Timer1_MspInit>:
PWM1/1	-->	PA8		-- Encodeur Voie A
PWM1/2	--> PA9		-- Encodeur Voie B
EXTI1	--> PB10		-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	4a19      	ldr	r2, [pc, #100]	; (8003590 <HAL_Encoder_Timer1_MspInit+0x74>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	6453      	str	r3, [r2, #68]	; 0x44
 8003532:	4b17      	ldr	r3, [pc, #92]	; (8003590 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800353e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003542:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8003544:	2302      	movs	r3, #2
 8003546:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003548:	2301      	movs	r3, #1
 800354a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800354c:	2301      	movs	r3, #1
 800354e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 8003550:	2301      	movs	r3, #1
 8003552:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003554:	1d3b      	adds	r3, r7, #4
 8003556:	4619      	mov	r1, r3
 8003558:	480e      	ldr	r0, [pc, #56]	; (8003594 <HAL_Encoder_Timer1_MspInit+0x78>)
 800355a:	f001 fd4d 	bl	8004ff8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800355e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003562:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003564:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003568:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800356e:	1d3b      	adds	r3, r7, #4
 8003570:	4619      	mov	r1, r3
 8003572:	4809      	ldr	r0, [pc, #36]	; (8003598 <HAL_Encoder_Timer1_MspInit+0x7c>)
 8003574:	f001 fd40 	bl	8004ff8 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 8003578:	2200      	movs	r2, #0
 800357a:	2107      	movs	r1, #7
 800357c:	2028      	movs	r0, #40	; 0x28
 800357e:	f001 f901 	bl	8004784 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003582:	2028      	movs	r0, #40	; 0x28
 8003584:	f001 f91a 	bl	80047bc <HAL_NVIC_EnableIRQ>
}
 8003588:	bf00      	nop
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40023800 	.word	0x40023800
 8003594:	40020000 	.word	0x40020000
 8003598:	40020400 	.word	0x40020400

0800359c <HAL_Encoder_Timer2_MspInit>:
PWM2/1	-->	PA0		-- Encodeur Voie A
PWM2/2	--> PA1		-- Encodeur Voie B
EXTI 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	603b      	str	r3, [r7, #0]
 80035a6:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_Encoder_Timer2_MspInit+0x70>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	4a18      	ldr	r2, [pc, #96]	; (800360c <HAL_Encoder_Timer2_MspInit+0x70>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6413      	str	r3, [r2, #64]	; 0x40
 80035b2:	4b16      	ldr	r3, [pc, #88]	; (800360c <HAL_Encoder_Timer2_MspInit+0x70>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80035be:	2303      	movs	r3, #3
 80035c0:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 80035c2:	2302      	movs	r3, #2
 80035c4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035c6:	2301      	movs	r3, #1
 80035c8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80035ca:	2301      	movs	r3, #1
 80035cc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 80035ce:	2301      	movs	r3, #1
 80035d0:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d2:	1d3b      	adds	r3, r7, #4
 80035d4:	4619      	mov	r1, r3
 80035d6:	480e      	ldr	r0, [pc, #56]	; (8003610 <HAL_Encoder_Timer2_MspInit+0x74>)
 80035d8:	f001 fd0e 	bl	8004ff8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035dc:	2301      	movs	r3, #1
 80035de:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80035e4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ea:	1d3b      	adds	r3, r7, #4
 80035ec:	4619      	mov	r1, r3
 80035ee:	4809      	ldr	r0, [pc, #36]	; (8003614 <HAL_Encoder_Timer2_MspInit+0x78>)
 80035f0:	f001 fd02 	bl	8004ff8 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 80035f4:	2200      	movs	r2, #0
 80035f6:	2106      	movs	r1, #6
 80035f8:	2006      	movs	r0, #6
 80035fa:	f001 f8c3 	bl	8004784 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80035fe:	2006      	movs	r0, #6
 8003600:	f001 f8dc 	bl	80047bc <HAL_NVIC_EnableIRQ>
}
 8003604:	bf00      	nop
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40023800 	.word	0x40023800
 8003610:	40020000 	.word	0x40020000
 8003614:	40020800 	.word	0x40020800

08003618 <HAL_PWM_Timer3_MspInit>:
PA6 --> PWM3/1
PC7 --> PWM3/2
PB3 --> ENABLE MOTEUR (actif état Bas)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	603b      	str	r3, [r7, #0]
 8003622:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <HAL_PWM_Timer3_MspInit+0xb4>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4a29      	ldr	r2, [pc, #164]	; (80036cc <HAL_PWM_Timer3_MspInit+0xb4>)
 8003628:	f043 0302 	orr.w	r3, r3, #2
 800362c:	6413      	str	r3, [r2, #64]	; 0x40
 800362e:	4b27      	ldr	r3, [pc, #156]	; (80036cc <HAL_PWM_Timer3_MspInit+0xb4>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	603b      	str	r3, [r7, #0]
 8003638:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800363a:	2340      	movs	r3, #64	; 0x40
 800363c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363e:	2302      	movs	r3, #2
 8003640:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003642:	2301      	movs	r3, #1
 8003644:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003646:	2301      	movs	r3, #1
 8003648:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 800364a:	2302      	movs	r3, #2
 800364c:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364e:	1d3b      	adds	r3, r7, #4
 8003650:	4619      	mov	r1, r3
 8003652:	481f      	ldr	r0, [pc, #124]	; (80036d0 <HAL_PWM_Timer3_MspInit+0xb8>)
 8003654:	f001 fcd0 	bl	8004ff8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365c:	2302      	movs	r3, #2
 800365e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003660:	2301      	movs	r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003664:	2301      	movs	r3, #1
 8003666:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 8003668:	2302      	movs	r3, #2
 800366a:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800366c:	1d3b      	adds	r3, r7, #4
 800366e:	4619      	mov	r1, r3
 8003670:	4818      	ldr	r0, [pc, #96]	; (80036d4 <HAL_PWM_Timer3_MspInit+0xbc>)
 8003672:	f001 fcc1 	bl	8004ff8 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pull = GPIO_NOPULL;

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);*/

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003676:	2308      	movs	r3, #8
 8003678:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003682:	2302      	movs	r3, #2
 8003684:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003686:	1d3b      	adds	r3, r7, #4
 8003688:	4619      	mov	r1, r3
 800368a:	4813      	ldr	r0, [pc, #76]	; (80036d8 <HAL_PWM_Timer3_MspInit+0xc0>)
 800368c:	f001 fcb4 	bl	8004ff8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8003690:	2201      	movs	r2, #1
 8003692:	2108      	movs	r1, #8
 8003694:	4810      	ldr	r0, [pc, #64]	; (80036d8 <HAL_PWM_Timer3_MspInit+0xc0>)
 8003696:	f001 fe33 	bl	8005300 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800369a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800369e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a0:	2301      	movs	r3, #1
 80036a2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80036a8:	2302      	movs	r3, #2
 80036aa:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ac:	1d3b      	adds	r3, r7, #4
 80036ae:	4619      	mov	r1, r3
 80036b0:	4807      	ldr	r0, [pc, #28]	; (80036d0 <HAL_PWM_Timer3_MspInit+0xb8>)
 80036b2:	f001 fca1 	bl	8004ff8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80036b6:	2201      	movs	r2, #1
 80036b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036bc:	4804      	ldr	r0, [pc, #16]	; (80036d0 <HAL_PWM_Timer3_MspInit+0xb8>)
 80036be:	f001 fe1f 	bl	8005300 <HAL_GPIO_WritePin>




}
 80036c2:	bf00      	nop
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800
 80036d0:	40020000 	.word	0x40020000
 80036d4:	40020800 	.word	0x40020800
 80036d8:	40020400 	.word	0x40020400

080036dc <HAL_adcir_MspInit>:
ADC1_4	--> PA4
ADC1_8	--> PB0
http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 80036e2:	2300      	movs	r3, #0
 80036e4:	603b      	str	r3, [r7, #0]
 80036e6:	4b13      	ldr	r3, [pc, #76]	; (8003734 <HAL_adcir_MspInit+0x58>)
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	4a12      	ldr	r2, [pc, #72]	; (8003734 <HAL_adcir_MspInit+0x58>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f0:	6453      	str	r3, [r2, #68]	; 0x44
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <HAL_adcir_MspInit+0x58>)
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 80036fe:	2310      	movs	r3, #16
 8003700:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003702:	2303      	movs	r3, #3
 8003704:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800370a:	1d3b      	adds	r3, r7, #4
 800370c:	4619      	mov	r1, r3
 800370e:	480a      	ldr	r0, [pc, #40]	; (8003738 <HAL_adcir_MspInit+0x5c>)
 8003710:	f001 fc72 	bl	8004ff8 <HAL_GPIO_Init>


	  GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 8003714:	2301      	movs	r3, #1
 8003716:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003718:	2303      	movs	r3, #3
 800371a:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003720:	1d3b      	adds	r3, r7, #4
 8003722:	4619      	mov	r1, r3
 8003724:	4805      	ldr	r0, [pc, #20]	; (800373c <HAL_adcir_MspInit+0x60>)
 8003726:	f001 fc67 	bl	8004ff8 <HAL_GPIO_Init>

}
 800372a:	bf00      	nop
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800
 8003738:	40020000 	.word	0x40020000
 800373c:	40020400 	.word	0x40020400

08003740 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
******************************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08a      	sub	sp, #40	; 0x28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003748:	f107 0314 	add.w	r3, r7, #20
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	60da      	str	r2, [r3, #12]
 8003756:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <HAL_I2C_MspInit+0xa4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d13c      	bne.n	80037dc <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <HAL_I2C_MspInit+0xa8>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	4a1f      	ldr	r2, [pc, #124]	; (80037e8 <HAL_I2C_MspInit+0xa8>)
 800376c:	f043 0302 	orr.w	r3, r3, #2
 8003770:	6313      	str	r3, [r2, #48]	; 0x30
 8003772:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <HAL_I2C_MspInit+0xa8>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800377e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003784:	2312      	movs	r3, #18
 8003786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003788:	2300      	movs	r3, #0
 800378a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378c:	2303      	movs	r3, #3
 800378e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003790:	2304      	movs	r3, #4
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003794:	f107 0314 	add.w	r3, r7, #20
 8003798:	4619      	mov	r1, r3
 800379a:	4814      	ldr	r0, [pc, #80]	; (80037ec <HAL_I2C_MspInit+0xac>)
 800379c:	f001 fc2c 	bl	8004ff8 <HAL_GPIO_Init>

    __HAL_RCC_I2C1_CLK_ENABLE();
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	4b10      	ldr	r3, [pc, #64]	; (80037e8 <HAL_I2C_MspInit+0xa8>)
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	4a0f      	ldr	r2, [pc, #60]	; (80037e8 <HAL_I2C_MspInit+0xa8>)
 80037aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037ae:	6413      	str	r3, [r2, #64]	; 0x40
 80037b0:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <HAL_I2C_MspInit+0xa8>)
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 80037bc:	2200      	movs	r2, #0
 80037be:	2102      	movs	r1, #2
 80037c0:	2020      	movs	r0, #32
 80037c2:	f000 ffdf 	bl	8004784 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80037c6:	2020      	movs	r0, #32
 80037c8:	f000 fff8 	bl	80047bc <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 80037cc:	2200      	movs	r2, #0
 80037ce:	210b      	movs	r1, #11
 80037d0:	201f      	movs	r0, #31
 80037d2:	f000 ffd7 	bl	8004784 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80037d6:	201f      	movs	r0, #31
 80037d8:	f000 fff0 	bl	80047bc <HAL_NVIC_EnableIRQ>
  }

}
 80037dc:	bf00      	nop
 80037de:	3728      	adds	r7, #40	; 0x28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40005400 	.word	0x40005400
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40020400 	.word	0x40020400

080037f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
******************************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08c      	sub	sp, #48	; 0x30
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f8:	f107 031c 	add.w	r3, r7, #28
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4aa2      	ldr	r2, [pc, #648]	; (8003a98 <HAL_UART_MspInit+0x2a8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	f040 80a5 	bne.w	800395e <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003814:	2300      	movs	r3, #0
 8003816:	61bb      	str	r3, [r7, #24]
 8003818:	4ba0      	ldr	r3, [pc, #640]	; (8003a9c <HAL_UART_MspInit+0x2ac>)
 800381a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381c:	4a9f      	ldr	r2, [pc, #636]	; (8003a9c <HAL_UART_MspInit+0x2ac>)
 800381e:	f043 0310 	orr.w	r3, r3, #16
 8003822:	6453      	str	r3, [r2, #68]	; 0x44
 8003824:	4b9d      	ldr	r3, [pc, #628]	; (8003a9c <HAL_UART_MspInit+0x2ac>)
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	4b99      	ldr	r3, [pc, #612]	; (8003a9c <HAL_UART_MspInit+0x2ac>)
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	4a98      	ldr	r2, [pc, #608]	; (8003a9c <HAL_UART_MspInit+0x2ac>)
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	6313      	str	r3, [r2, #48]	; 0x30
 8003840:	4b96      	ldr	r3, [pc, #600]	; (8003a9c <HAL_UART_MspInit+0x2ac>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800384c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	2302      	movs	r3, #2
 8003854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800385a:	2303      	movs	r3, #3
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800385e:	2307      	movs	r3, #7
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003862:	f107 031c 	add.w	r3, r7, #28
 8003866:	4619      	mov	r1, r3
 8003868:	488d      	ldr	r0, [pc, #564]	; (8003aa0 <HAL_UART_MspInit+0x2b0>)
 800386a:	f001 fbc5 	bl	8004ff8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800386e:	2340      	movs	r3, #64	; 0x40
 8003870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003872:	2302      	movs	r3, #2
 8003874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003876:	2300      	movs	r3, #0
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800387a:	2303      	movs	r3, #3
 800387c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800387e:	2307      	movs	r3, #7
 8003880:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003882:	f107 031c 	add.w	r3, r7, #28
 8003886:	4619      	mov	r1, r3
 8003888:	4886      	ldr	r0, [pc, #536]	; (8003aa4 <HAL_UART_MspInit+0x2b4>)
 800388a:	f001 fbb5 	bl	8004ff8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800388e:	4b86      	ldr	r3, [pc, #536]	; (8003aa8 <HAL_UART_MspInit+0x2b8>)
 8003890:	4a86      	ldr	r2, [pc, #536]	; (8003aac <HAL_UART_MspInit+0x2bc>)
 8003892:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003894:	4b84      	ldr	r3, [pc, #528]	; (8003aa8 <HAL_UART_MspInit+0x2b8>)
 8003896:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800389a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800389c:	4b82      	ldr	r3, [pc, #520]	; (8003aa8 <HAL_UART_MspInit+0x2b8>)
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038a2:	4b81      	ldr	r3, [pc, #516]	; (8003aa8 <HAL_UART_MspInit+0x2b8>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80038a8:	4b7f      	ldr	r3, [pc, #508]	; (8003aa8 <HAL_UART_MspInit+0x2b8>)
 80038aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038b0:	4b7d      	ldr	r3, [pc, #500]	; (8003aa8 <HAL_UART_MspInit+0x2b8>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038b6:	4b7c      	ldr	r3, [pc, #496]	; (8003aa8 <HAL_UART_MspInit+0x2b8>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80038bc:	4b7a      	ldr	r3, [pc, #488]	; (8003aa8 <HAL_UART_MspInit+0x2b8>)
 80038be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038c2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80038c4:	4b78      	ldr	r3, [pc, #480]	; (8003aa8 <HAL_UART_MspInit+0x2b8>)
 80038c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80038ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038cc:	4b76      	ldr	r3, [pc, #472]	; (8003aa8 <HAL_UART_MspInit+0x2b8>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80038d2:	4875      	ldr	r0, [pc, #468]	; (8003aa8 <HAL_UART_MspInit+0x2b8>)
 80038d4:	f000 ff80 	bl	80047d8 <HAL_DMA_Init>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80038de:	f7ff fa71 	bl	8002dc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a70      	ldr	r2, [pc, #448]	; (8003aa8 <HAL_UART_MspInit+0x2b8>)
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38
 80038e8:	4a6f      	ldr	r2, [pc, #444]	; (8003aa8 <HAL_UART_MspInit+0x2b8>)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80038ee:	4b70      	ldr	r3, [pc, #448]	; (8003ab0 <HAL_UART_MspInit+0x2c0>)
 80038f0:	4a70      	ldr	r2, [pc, #448]	; (8003ab4 <HAL_UART_MspInit+0x2c4>)
 80038f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80038f4:	4b6e      	ldr	r3, [pc, #440]	; (8003ab0 <HAL_UART_MspInit+0x2c0>)
 80038f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038fc:	4b6c      	ldr	r3, [pc, #432]	; (8003ab0 <HAL_UART_MspInit+0x2c0>)
 80038fe:	2240      	movs	r2, #64	; 0x40
 8003900:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003902:	4b6b      	ldr	r3, [pc, #428]	; (8003ab0 <HAL_UART_MspInit+0x2c0>)
 8003904:	2200      	movs	r2, #0
 8003906:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003908:	4b69      	ldr	r3, [pc, #420]	; (8003ab0 <HAL_UART_MspInit+0x2c0>)
 800390a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800390e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003910:	4b67      	ldr	r3, [pc, #412]	; (8003ab0 <HAL_UART_MspInit+0x2c0>)
 8003912:	2200      	movs	r2, #0
 8003914:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003916:	4b66      	ldr	r3, [pc, #408]	; (8003ab0 <HAL_UART_MspInit+0x2c0>)
 8003918:	2200      	movs	r2, #0
 800391a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800391c:	4b64      	ldr	r3, [pc, #400]	; (8003ab0 <HAL_UART_MspInit+0x2c0>)
 800391e:	2200      	movs	r2, #0
 8003920:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003922:	4b63      	ldr	r3, [pc, #396]	; (8003ab0 <HAL_UART_MspInit+0x2c0>)
 8003924:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003928:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800392a:	4b61      	ldr	r3, [pc, #388]	; (8003ab0 <HAL_UART_MspInit+0x2c0>)
 800392c:	2200      	movs	r2, #0
 800392e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003930:	485f      	ldr	r0, [pc, #380]	; (8003ab0 <HAL_UART_MspInit+0x2c0>)
 8003932:	f000 ff51 	bl	80047d8 <HAL_DMA_Init>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 800393c:	f7ff fa42 	bl	8002dc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a5b      	ldr	r2, [pc, #364]	; (8003ab0 <HAL_UART_MspInit+0x2c0>)
 8003944:	635a      	str	r2, [r3, #52]	; 0x34
 8003946:	4a5a      	ldr	r2, [pc, #360]	; (8003ab0 <HAL_UART_MspInit+0x2c0>)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800394c:	2200      	movs	r2, #0
 800394e:	2105      	movs	r1, #5
 8003950:	2025      	movs	r0, #37	; 0x25
 8003952:	f000 ff17 	bl	8004784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003956:	2025      	movs	r0, #37	; 0x25
 8003958:	f000 ff30 	bl	80047bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800395c:	e098      	b.n	8003a90 <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a55      	ldr	r2, [pc, #340]	; (8003ab8 <HAL_UART_MspInit+0x2c8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	f040 8093 	bne.w	8003a90 <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	4b4b      	ldr	r3, [pc, #300]	; (8003a9c <HAL_UART_MspInit+0x2ac>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	4a4a      	ldr	r2, [pc, #296]	; (8003a9c <HAL_UART_MspInit+0x2ac>)
 8003974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003978:	6413      	str	r3, [r2, #64]	; 0x40
 800397a:	4b48      	ldr	r3, [pc, #288]	; (8003a9c <HAL_UART_MspInit+0x2ac>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	4b44      	ldr	r3, [pc, #272]	; (8003a9c <HAL_UART_MspInit+0x2ac>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398e:	4a43      	ldr	r2, [pc, #268]	; (8003a9c <HAL_UART_MspInit+0x2ac>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	6313      	str	r3, [r2, #48]	; 0x30
 8003996:	4b41      	ldr	r3, [pc, #260]	; (8003a9c <HAL_UART_MspInit+0x2ac>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80039a2:	230c      	movs	r3, #12
 80039a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a6:	2302      	movs	r3, #2
 80039a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ae:	2303      	movs	r3, #3
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039b2:	2307      	movs	r3, #7
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b6:	f107 031c 	add.w	r3, r7, #28
 80039ba:	4619      	mov	r1, r3
 80039bc:	4838      	ldr	r0, [pc, #224]	; (8003aa0 <HAL_UART_MspInit+0x2b0>)
 80039be:	f001 fb1b 	bl	8004ff8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80039c2:	4b3e      	ldr	r3, [pc, #248]	; (8003abc <HAL_UART_MspInit+0x2cc>)
 80039c4:	4a3e      	ldr	r2, [pc, #248]	; (8003ac0 <HAL_UART_MspInit+0x2d0>)
 80039c6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80039c8:	4b3c      	ldr	r3, [pc, #240]	; (8003abc <HAL_UART_MspInit+0x2cc>)
 80039ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039d0:	4b3a      	ldr	r3, [pc, #232]	; (8003abc <HAL_UART_MspInit+0x2cc>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039d6:	4b39      	ldr	r3, [pc, #228]	; (8003abc <HAL_UART_MspInit+0x2cc>)
 80039d8:	2200      	movs	r2, #0
 80039da:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039dc:	4b37      	ldr	r3, [pc, #220]	; (8003abc <HAL_UART_MspInit+0x2cc>)
 80039de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039e4:	4b35      	ldr	r3, [pc, #212]	; (8003abc <HAL_UART_MspInit+0x2cc>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039ea:	4b34      	ldr	r3, [pc, #208]	; (8003abc <HAL_UART_MspInit+0x2cc>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80039f0:	4b32      	ldr	r3, [pc, #200]	; (8003abc <HAL_UART_MspInit+0x2cc>)
 80039f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039f6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80039f8:	4b30      	ldr	r3, [pc, #192]	; (8003abc <HAL_UART_MspInit+0x2cc>)
 80039fa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80039fe:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a00:	4b2e      	ldr	r3, [pc, #184]	; (8003abc <HAL_UART_MspInit+0x2cc>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003a06:	482d      	ldr	r0, [pc, #180]	; (8003abc <HAL_UART_MspInit+0x2cc>)
 8003a08:	f000 fee6 	bl	80047d8 <HAL_DMA_Init>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8003a12:	f7ff f9d7 	bl	8002dc4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a28      	ldr	r2, [pc, #160]	; (8003abc <HAL_UART_MspInit+0x2cc>)
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
 8003a1c:	4a27      	ldr	r2, [pc, #156]	; (8003abc <HAL_UART_MspInit+0x2cc>)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003a22:	4b28      	ldr	r3, [pc, #160]	; (8003ac4 <HAL_UART_MspInit+0x2d4>)
 8003a24:	4a28      	ldr	r2, [pc, #160]	; (8003ac8 <HAL_UART_MspInit+0x2d8>)
 8003a26:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003a28:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <HAL_UART_MspInit+0x2d4>)
 8003a2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a30:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <HAL_UART_MspInit+0x2d4>)
 8003a32:	2240      	movs	r2, #64	; 0x40
 8003a34:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a36:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <HAL_UART_MspInit+0x2d4>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a3c:	4b21      	ldr	r3, [pc, #132]	; (8003ac4 <HAL_UART_MspInit+0x2d4>)
 8003a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a42:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a44:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <HAL_UART_MspInit+0x2d4>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ac4 <HAL_UART_MspInit+0x2d4>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003a50:	4b1c      	ldr	r3, [pc, #112]	; (8003ac4 <HAL_UART_MspInit+0x2d4>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003a56:	4b1b      	ldr	r3, [pc, #108]	; (8003ac4 <HAL_UART_MspInit+0x2d4>)
 8003a58:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003a5c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a5e:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_UART_MspInit+0x2d4>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003a64:	4817      	ldr	r0, [pc, #92]	; (8003ac4 <HAL_UART_MspInit+0x2d4>)
 8003a66:	f000 feb7 	bl	80047d8 <HAL_DMA_Init>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_UART_MspInit+0x284>
      Error_Handler();
 8003a70:	f7ff f9a8 	bl	8002dc4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a13      	ldr	r2, [pc, #76]	; (8003ac4 <HAL_UART_MspInit+0x2d4>)
 8003a78:	635a      	str	r2, [r3, #52]	; 0x34
 8003a7a:	4a12      	ldr	r2, [pc, #72]	; (8003ac4 <HAL_UART_MspInit+0x2d4>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003a80:	2200      	movs	r2, #0
 8003a82:	2105      	movs	r1, #5
 8003a84:	2026      	movs	r0, #38	; 0x26
 8003a86:	f000 fe7d 	bl	8004784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a8a:	2026      	movs	r0, #38	; 0x26
 8003a8c:	f000 fe96 	bl	80047bc <HAL_NVIC_EnableIRQ>
}
 8003a90:	bf00      	nop
 8003a92:	3730      	adds	r7, #48	; 0x30
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40011000 	.word	0x40011000
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40020000 	.word	0x40020000
 8003aa4:	40020400 	.word	0x40020400
 8003aa8:	20004bbc 	.word	0x20004bbc
 8003aac:	40026440 	.word	0x40026440
 8003ab0:	20004c1c 	.word	0x20004c1c
 8003ab4:	400264b8 	.word	0x400264b8
 8003ab8:	40004400 	.word	0x40004400
 8003abc:	20004c7c 	.word	0x20004c7c
 8003ac0:	40026088 	.word	0x40026088
 8003ac4:	20004cdc 	.word	0x20004cdc
 8003ac8:	400260a0 	.word	0x400260a0

08003acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08c      	sub	sp, #48	; 0x30
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003adc:	2300      	movs	r3, #0
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <HAL_InitTick+0xd4>)
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	4a2e      	ldr	r2, [pc, #184]	; (8003ba0 <HAL_InitTick+0xd4>)
 8003ae6:	f043 0304 	orr.w	r3, r3, #4
 8003aea:	6413      	str	r3, [r2, #64]	; 0x40
 8003aec:	4b2c      	ldr	r3, [pc, #176]	; (8003ba0 <HAL_InitTick+0xd4>)
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	60bb      	str	r3, [r7, #8]
 8003af6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003af8:	f107 020c 	add.w	r2, r7, #12
 8003afc:	f107 0310 	add.w	r3, r7, #16
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f004 fd36 	bl	8008574 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003b08:	f004 fd20 	bl	800854c <HAL_RCC_GetPCLK2Freq>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	4a23      	ldr	r2, [pc, #140]	; (8003ba4 <HAL_InitTick+0xd8>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	0c9b      	lsrs	r3, r3, #18
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 8003b20:	4b21      	ldr	r3, [pc, #132]	; (8003ba8 <HAL_InitTick+0xdc>)
 8003b22:	4a22      	ldr	r2, [pc, #136]	; (8003bac <HAL_InitTick+0xe0>)
 8003b24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003b26:	4b20      	ldr	r3, [pc, #128]	; (8003ba8 <HAL_InitTick+0xdc>)
 8003b28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b2c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003b2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ba8 <HAL_InitTick+0xdc>)
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003b34:	4b1c      	ldr	r3, [pc, #112]	; (8003ba8 <HAL_InitTick+0xdc>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <HAL_InitTick+0xdc>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <HAL_InitTick+0xdc>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003b46:	4818      	ldr	r0, [pc, #96]	; (8003ba8 <HAL_InitTick+0xdc>)
 8003b48:	f004 fd46 	bl	80085d8 <HAL_TIM_Base_Init>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003b52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d11b      	bne.n	8003b92 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003b5a:	4813      	ldr	r0, [pc, #76]	; (8003ba8 <HAL_InitTick+0xdc>)
 8003b5c:	f004 fd96 	bl	800868c <HAL_TIM_Base_Start_IT>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003b66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d111      	bne.n	8003b92 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b6e:	201e      	movs	r0, #30
 8003b70:	f000 fe24 	bl	80047bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b0f      	cmp	r3, #15
 8003b78:	d808      	bhi.n	8003b8c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	201e      	movs	r0, #30
 8003b80:	f000 fe00 	bl	8004784 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b84:	4a0a      	ldr	r2, [pc, #40]	; (8003bb0 <HAL_InitTick+0xe4>)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	e002      	b.n	8003b92 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003b92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3730      	adds	r7, #48	; 0x30
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	431bde83 	.word	0x431bde83
 8003ba8:	20005000 	.word	0x20005000
 8003bac:	40000800 	.word	0x40000800
 8003bb0:	2000001c 	.word	0x2000001c

08003bb4 <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  while (1)
 8003bb8:	e7fe      	b.n	8003bb8 <NMI_Handler+0x4>

08003bba <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	af00      	add	r7, sp, #0

  while (1)
 8003bbe:	e7fe      	b.n	8003bbe <HardFault_Handler+0x4>

08003bc0 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  while (1)
 8003bc4:	e7fe      	b.n	8003bc4 <MemManage_Handler+0x4>

08003bc6 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	af00      	add	r7, sp, #0
  while (1)
 8003bca:	e7fe      	b.n	8003bca <BusFault_Handler+0x4>

08003bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  while (1)
 8003bd0:	e7fe      	b.n	8003bd0 <UsageFault_Handler+0x4>

08003bd2 <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	af00      	add	r7, sp, #0
}
 8003bd6:	bf00      	nop
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003be4:	4802      	ldr	r0, [pc, #8]	; (8003bf0 <DMA1_Stream5_IRQHandler+0x10>)
 8003be6:	f000 ff8f 	bl	8004b08 <HAL_DMA_IRQHandler>
}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20004c7c 	.word	0x20004c7c

08003bf4 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003bf8:	4802      	ldr	r0, [pc, #8]	; (8003c04 <DMA1_Stream6_IRQHandler+0x10>)
 8003bfa:	f000 ff85 	bl	8004b08 <HAL_DMA_IRQHandler>
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20004cdc 	.word	0x20004cdc

08003c08 <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8003c0c:	4802      	ldr	r0, [pc, #8]	; (8003c18 <TIM4_IRQHandler+0x10>)
 8003c0e:	f004 ff8d 	bl	8008b2c <HAL_TIM_IRQHandler>
}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20005000 	.word	0x20005000

08003c1c <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8003c20:	4802      	ldr	r0, [pc, #8]	; (8003c2c <USART1_IRQHandler+0x10>)
 8003c22:	f005 fdc7 	bl	80097b4 <HAL_UART_IRQHandler>
}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20004b34 	.word	0x20004b34

08003c30 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8003c34:	4802      	ldr	r0, [pc, #8]	; (8003c40 <USART2_IRQHandler+0x10>)
 8003c36:	f005 fdbd 	bl	80097b4 <HAL_UART_IRQHandler>
}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	20004b78 	.word	0x20004b78

08003c44 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003c48:	4802      	ldr	r0, [pc, #8]	; (8003c54 <DMA2_Stream2_IRQHandler+0x10>)
 8003c4a:	f000 ff5d 	bl	8004b08 <HAL_DMA_IRQHandler>
}
 8003c4e:	bf00      	nop
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20004bbc 	.word	0x20004bbc

08003c58 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003c5c:	4802      	ldr	r0, [pc, #8]	; (8003c68 <DMA2_Stream7_IRQHandler+0x10>)
 8003c5e:	f000 ff53 	bl	8004b08 <HAL_DMA_IRQHandler>
}
 8003c62:	bf00      	nop
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20004c1c 	.word	0x20004c1c

08003c6c <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003c70:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003c74:	f001 fb5e 	bl	8005334 <HAL_GPIO_EXTI_IRQHandler>
}
 8003c78:	bf00      	nop
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003c80:	2001      	movs	r0, #1
 8003c82:	f001 fb57 	bl	8005334 <HAL_GPIO_EXTI_IRQHandler>
}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
	...

08003c8c <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c90:	4802      	ldr	r0, [pc, #8]	; (8003c9c <I2C1_EV_IRQHandler+0x10>)
 8003c92:	f001 ffcf 	bl	8005c34 <HAL_I2C_EV_IRQHandler>
}
 8003c96:	bf00      	nop
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20004ae0 	.word	0x20004ae0

08003ca0 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003ca4:	4802      	ldr	r0, [pc, #8]	; (8003cb0 <I2C1_ER_IRQHandler+0x10>)
 8003ca6:	f002 f936 	bl	8005f16 <HAL_I2C_ER_IRQHandler>
}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20004ae0 	.word	0x20004ae0

08003cb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
	return 1;
 8003cb8:	2301      	movs	r3, #1
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <_kill>:

int _kill(int pid, int sig)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003cce:	f015 f869 	bl	8018da4 <__errno>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2216      	movs	r2, #22
 8003cd6:	601a      	str	r2, [r3, #0]
	return -1;
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <_exit>:

void _exit (int status)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003cec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff ffe7 	bl	8003cc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003cf6:	e7fe      	b.n	8003cf6 <_exit+0x12>

08003cf8 <_read>:
}

//__attribute__((weak)) int _read(int file, char *ptr, int len)
int _read(int file, char *ptr, int len)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
 8003d08:	e00a      	b.n	8003d20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d0a:	f3af 8000 	nop.w
 8003d0e:	4601      	mov	r1, r0
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	60ba      	str	r2, [r7, #8]
 8003d16:	b2ca      	uxtb	r2, r1
 8003d18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	dbf0      	blt.n	8003d0a <_read+0x12>
	}

return len;
 8003d28:	687b      	ldr	r3, [r7, #4]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3718      	adds	r7, #24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <_write>:

//__attribute__((weak)) int _write(int file, char *ptr, int len)
int _write(int file, char *ptr, int len)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b086      	sub	sp, #24
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	e009      	b.n	8003d58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	60ba      	str	r2, [r7, #8]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fe fa1f 	bl	8002190 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	3301      	adds	r3, #1
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	dbf1      	blt.n	8003d44 <_write+0x12>
	}
	return len;
 8003d60:	687b      	ldr	r3, [r7, #4]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <_close>:

int _close(int file)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
	return -1;
 8003d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d92:	605a      	str	r2, [r3, #4]
	return 0;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <_isatty>:

int _isatty(int file)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
	return 1;
 8003daa:	2301      	movs	r3, #1
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
	return 0;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
	...

08003dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ddc:	4a14      	ldr	r2, [pc, #80]	; (8003e30 <_sbrk+0x5c>)
 8003dde:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <_sbrk+0x60>)
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003de8:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <_sbrk+0x64>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003df0:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <_sbrk+0x64>)
 8003df2:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <_sbrk+0x68>)
 8003df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003df6:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <_sbrk+0x64>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d207      	bcs.n	8003e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e04:	f014 ffce 	bl	8018da4 <__errno>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	220c      	movs	r2, #12
 8003e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e12:	e009      	b.n	8003e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e14:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <_sbrk+0x64>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e1a:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <_sbrk+0x64>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4413      	add	r3, r2
 8003e22:	4a05      	ldr	r2, [pc, #20]	; (8003e38 <_sbrk+0x64>)
 8003e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e26:	68fb      	ldr	r3, [r7, #12]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	20020000 	.word	0x20020000
 8003e34:	00000400 	.word	0x00000400
 8003e38:	2000504c 	.word	0x2000504c
 8003e3c:	2000ea38 	.word	0x2000ea38

08003e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e44:	4b06      	ldr	r3, [pc, #24]	; (8003e60 <SystemInit+0x20>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4a:	4a05      	ldr	r2, [pc, #20]	; (8003e60 <SystemInit+0x20>)
 8003e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e54:	bf00      	nop
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	e000ed00 	.word	0xe000ed00

08003e64 <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b094      	sub	sp, #80	; 0x50
 8003e68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e6a:	f107 0320 	add.w	r3, r7, #32
 8003e6e:	2230      	movs	r2, #48	; 0x30
 8003e70:	2100      	movs	r1, #0
 8003e72:	4618      	mov	r0, r3
 8003e74:	f015 f93a 	bl	80190ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e78:	f107 030c 	add.w	r3, r7, #12
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	605a      	str	r2, [r3, #4]
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	4b28      	ldr	r3, [pc, #160]	; (8003f30 <SystemClock_Config+0xcc>)
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	4a27      	ldr	r2, [pc, #156]	; (8003f30 <SystemClock_Config+0xcc>)
 8003e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e96:	6413      	str	r3, [r2, #64]	; 0x40
 8003e98:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <SystemClock_Config+0xcc>)
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	607b      	str	r3, [r7, #4]
 8003ea8:	4b22      	ldr	r3, [pc, #136]	; (8003f34 <SystemClock_Config+0xd0>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a21      	ldr	r2, [pc, #132]	; (8003f34 <SystemClock_Config+0xd0>)
 8003eae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	4b1f      	ldr	r3, [pc, #124]	; (8003f34 <SystemClock_Config+0xd0>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003ec4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003eca:	2302      	movs	r3, #2
 8003ecc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ece:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003ed4:	2308      	movs	r3, #8
 8003ed6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8003ed8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8003edc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8003ede:	2306      	movs	r3, #6
 8003ee0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003ee2:	2304      	movs	r3, #4
 8003ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ee6:	f107 0320 	add.w	r3, r7, #32
 8003eea:	4618      	mov	r0, r3
 8003eec:	f003 feaa 	bl	8007c44 <HAL_RCC_OscConfig>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003ef6:	f7fe ff65 	bl	8002dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003efa:	230f      	movs	r3, #15
 8003efc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003efe:	2302      	movs	r3, #2
 8003f00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003f06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003f0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003f10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003f12:	f107 030c 	add.w	r3, r7, #12
 8003f16:	2102      	movs	r1, #2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f004 f90b 	bl	8008134 <HAL_RCC_ClockConfig>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003f24:	f7fe ff4e 	bl	8002dc4 <Error_Handler>
  }
}
 8003f28:	bf00      	nop
 8003f2a:	3750      	adds	r7, #80	; 0x50
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40007000 	.word	0x40007000

08003f38 <num2str>:
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b089      	sub	sp, #36	; 0x24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	fb01 f202 	mul.w	r2, r1, r2
 8003f58:	1a9a      	subs	r2, r3, r2
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1c59      	adds	r1, r3, #1
 8003f5e:	60f9      	str	r1, [r7, #12]
 8003f60:	4936      	ldr	r1, [pc, #216]	; (800403c <num2str+0x104>)
 8003f62:	5c8a      	ldrb	r2, [r1, r2]
 8003f64:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e9      	bne.n	8003f4a <num2str+0x12>
        *s='\0';
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 8003f84:	2300      	movs	r3, #0
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	e01a      	b.n	8003fc0 <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	4413      	add	r3, r2
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	76fb      	strb	r3, [r7, #27]
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	441a      	add	r2, r3
 8003fa0:	6979      	ldr	r1, [r7, #20]
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	440b      	add	r3, r1
 8003fa6:	7812      	ldrb	r2, [r2, #0]
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	7efa      	ldrb	r2, [r7, #27]
 8003fb8:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	61fb      	str	r3, [r7, #28]
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	085b      	lsrs	r3, r3, #1
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d3df      	bcc.n	8003f8a <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d22d      	bcs.n	800402e <num2str+0xf6>
                for (i=cnt;i==0;i--)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	e00e      	b.n	8003ff6 <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	441a      	add	r2, r3
 8003fde:	69f9      	ldr	r1, [r7, #28]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4419      	add	r1, r3
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1acb      	subs	r3, r1, r3
 8003fe8:	6979      	ldr	r1, [r7, #20]
 8003fea:	440b      	add	r3, r1
 8003fec:	7812      	ldrb	r2, [r2, #0]
 8003fee:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	61fb      	str	r3, [r7, #28]
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0ed      	beq.n	8003fd8 <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <num2str+0xd0>
 8004002:	2320      	movs	r3, #32
 8004004:	76fb      	strb	r3, [r7, #27]
 8004006:	e001      	b.n	800400c <num2str+0xd4>
 8004008:	2330      	movs	r3, #48	; 0x30
 800400a:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 800400c:	2300      	movs	r3, #0
 800400e:	61fb      	str	r3, [r7, #28]
 8004010:	e007      	b.n	8004022 <num2str+0xea>
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	4413      	add	r3, r2
 8004018:	7efa      	ldrb	r2, [r7, #27]
 800401a:	701a      	strb	r2, [r3, #0]
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	3301      	adds	r3, #1
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	429a      	cmp	r2, r3
 800402c:	d3f1      	bcc.n	8004012 <num2str+0xda>
        }
}
 800402e:	bf00      	nop
 8004030:	3724      	adds	r7, #36	; 0x24
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000008 	.word	0x20000008

08004040 <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8004058:	e02e      	b.n	80040b8 <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	2b2f      	cmp	r3, #47	; 0x2f
 800405e:	d906      	bls.n	800406e <str2num+0x2e>
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	2b39      	cmp	r3, #57	; 0x39
 8004064:	d803      	bhi.n	800406e <str2num+0x2e>
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	3b30      	subs	r3, #48	; 0x30
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	e018      	b.n	80040a0 <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b10      	cmp	r3, #16
 8004072:	d109      	bne.n	8004088 <str2num+0x48>
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	2b40      	cmp	r3, #64	; 0x40
 8004078:	d906      	bls.n	8004088 <str2num+0x48>
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	2b46      	cmp	r3, #70	; 0x46
 800407e:	d803      	bhi.n	8004088 <str2num+0x48>
 8004080:	7bfb      	ldrb	r3, [r7, #15]
 8004082:	3b37      	subs	r3, #55	; 0x37
 8004084:	613b      	str	r3, [r7, #16]
 8004086:	e00b      	b.n	80040a0 <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b10      	cmp	r3, #16
 800408c:	d117      	bne.n	80040be <str2num+0x7e>
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	2b60      	cmp	r3, #96	; 0x60
 8004092:	d914      	bls.n	80040be <str2num+0x7e>
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	2b66      	cmp	r3, #102	; 0x66
 8004098:	d811      	bhi.n	80040be <str2num+0x7e>
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	3b57      	subs	r3, #87	; 0x57
 800409e:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	fb02 f303 	mul.w	r3, r2, r3
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]
		ch=*s++;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 80040b8:	7bfb      	ldrb	r3, [r7, #15]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1cd      	bne.n	800405a <str2num+0x1a>
	}
	return u;
 80040be:	697b      	ldr	r3, [r7, #20]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	3b01      	subs	r3, #1
 80040de:	613b      	str	r3, [r7, #16]
    while (i<j)
 80040e0:	e018      	b.n	8004114 <reverse+0x48>
    {
        temp = str[i];
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	441a      	add	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	440b      	add	r3, r1
 80040f8:	7812      	ldrb	r2, [r2, #0]
 80040fa:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	4413      	add	r3, r2
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	3301      	adds	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	3b01      	subs	r3, #1
 8004112:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	429a      	cmp	r2, r3
 800411a:	dbe2      	blt.n	80040e2 <reverse+0x16>
    }
}
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
	...

0800412c <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b086      	sub	sp, #24
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
    int i = 0;
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
    while (x)
 800413c:	e01d      	b.n	800417a <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <intToStr+0x8c>)
 8004142:	fb83 1302 	smull	r1, r3, r3, r2
 8004146:	1099      	asrs	r1, r3, #2
 8004148:	17d3      	asrs	r3, r2, #31
 800414a:	1ac9      	subs	r1, r1, r3
 800414c:	460b      	mov	r3, r1
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	1ad1      	subs	r1, r2, r3
 8004156:	b2ca      	uxtb	r2, r1
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	1c59      	adds	r1, r3, #1
 800415c:	6179      	str	r1, [r7, #20]
 800415e:	4619      	mov	r1, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	440b      	add	r3, r1
 8004164:	3230      	adds	r2, #48	; 0x30
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]
        x = x/10;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <intToStr+0x8c>)
 800416e:	fb82 1203 	smull	r1, r2, r2, r3
 8004172:	1092      	asrs	r2, r2, #2
 8004174:	17db      	asrs	r3, r3, #31
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	60fb      	str	r3, [r7, #12]
    while (x)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1de      	bne.n	800413e <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8004180:	e007      	b.n	8004192 <intToStr+0x66>
        str[i++] = '0';
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	617a      	str	r2, [r7, #20]
 8004188:	461a      	mov	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4413      	add	r3, r2
 800418e:	2230      	movs	r2, #48	; 0x30
 8004190:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	429a      	cmp	r2, r3
 8004198:	dbf3      	blt.n	8004182 <intToStr+0x56>

    reverse(str, i);
 800419a:	6979      	ldr	r1, [r7, #20]
 800419c:	68b8      	ldr	r0, [r7, #8]
 800419e:	f7ff ff95 	bl	80040cc <reverse>
    str[i] = '\0';
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	4413      	add	r3, r2
 80041a8:	2200      	movs	r2, #0
 80041aa:	701a      	strb	r2, [r3, #0]
    return i;
 80041ac:	697b      	ldr	r3, [r7, #20]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	66666667 	.word	0x66666667
 80041bc:	00000000 	.word	0x00000000

080041c0 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80041cc:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 80041ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80041d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041d6:	ee17 3a90 	vmov	r3, s15
 80041da:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80041ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ee:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 80041f2:	2200      	movs	r2, #0
 80041f4:	68f9      	ldr	r1, [r7, #12]
 80041f6:	69f8      	ldr	r0, [r7, #28]
 80041f8:	f7ff ff98 	bl	800412c <intToStr>
 80041fc:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d025      	beq.n	8004250 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4413      	add	r3, r2
 800420a:	222e      	movs	r2, #46	; 0x2e
 800420c:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8004258 <float2str+0x98>
 8004214:	f000 f824 	bl	8004260 <myPow>
 8004218:	ec53 2b10 	vmov	r2, r3, d0
 800421c:	4610      	mov	r0, r2
 800421e:	4619      	mov	r1, r3
 8004220:	f7fc fcfa 	bl	8000c18 <__aeabi_d2f>
 8004224:	ee07 0a10 	vmov	s14, r0
 8004228:	edd7 7a06 	vldr	s15, [r7, #24]
 800422c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004230:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8004234:	edd7 7a06 	vldr	s15, [r7, #24]
 8004238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	3301      	adds	r3, #1
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4413      	add	r3, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	4619      	mov	r1, r3
 8004248:	ee17 0a90 	vmov	r0, s15
 800424c:	f7ff ff6e 	bl	800412c <intToStr>
    }
}
 8004250:	bf00      	nop
 8004252:	3720      	adds	r7, #32
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	00000000 	.word	0x00000000
 800425c:	40240000 	.word	0x40240000

08004260 <myPow>:
//=================================================================
double myPow(double x, int n) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af00      	add	r7, sp, #0
 8004266:	ed87 0b02 	vstr	d0, [r7, #8]
 800426a:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	bfb8      	it	lt
 8004272:	425b      	neglt	r3, r3
 8004274:	61fb      	str	r3, [r7, #28]
    double result = 1;
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	4b1d      	ldr	r3, [pc, #116]	; (80042f0 <myPow+0x90>)
 800427c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 8004280:	e01b      	b.n	80042ba <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d009      	beq.n	80042a0 <myPow+0x40>
        {
            result = result * x;
 800428c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004290:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004294:	f7fc f9c8 	bl	8000628 <__aeabi_dmul>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	085b      	lsrs	r3, r3, #1
 80042a4:	61fb      	str	r3, [r7, #28]
        x = x * x;
 80042a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042ae:	f7fc f9bb 	bl	8000628 <__aeabi_dmul>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e0      	bne.n	8004282 <myPow+0x22>
    }

    if(n < 0)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	da09      	bge.n	80042da <myPow+0x7a>
    {
        return 1/result;
 80042c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042ca:	f04f 0000 	mov.w	r0, #0
 80042ce:	4908      	ldr	r1, [pc, #32]	; (80042f0 <myPow+0x90>)
 80042d0:	f7fc fad4 	bl	800087c <__aeabi_ddiv>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	e001      	b.n	80042de <myPow+0x7e>
    }
    return result;
 80042da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80042de:	ec43 2b17 	vmov	d7, r2, r3
 80042e2:	eeb0 0a47 	vmov.f32	s0, s14
 80042e6:	eef0 0a67 	vmov.f32	s1, s15
 80042ea:	3720      	adds	r7, #32
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	3ff00000 	.word	0x3ff00000

080042f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80042f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800432c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042f8:	480d      	ldr	r0, [pc, #52]	; (8004330 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80042fa:	490e      	ldr	r1, [pc, #56]	; (8004334 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80042fc:	4a0e      	ldr	r2, [pc, #56]	; (8004338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80042fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004300:	e002      	b.n	8004308 <LoopCopyDataInit>

08004302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004306:	3304      	adds	r3, #4

08004308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800430a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800430c:	d3f9      	bcc.n	8004302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800430e:	4a0b      	ldr	r2, [pc, #44]	; (800433c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004310:	4c0b      	ldr	r4, [pc, #44]	; (8004340 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004314:	e001      	b.n	800431a <LoopFillZerobss>

08004316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004318:	3204      	adds	r2, #4

0800431a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800431a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800431c:	d3fb      	bcc.n	8004316 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800431e:	f7ff fd8f 	bl	8003e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004322:	f014 fe83 	bl	801902c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004326:	f7fe fb63 	bl	80029f0 <main>
  bx  lr    
 800432a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800432c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004334:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8004338:	0801ecb0 	.word	0x0801ecb0
  ldr r2, =_sbss
 800433c:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8004340:	2000ea38 	.word	0x2000ea38

08004344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004344:	e7fe      	b.n	8004344 <ADC_IRQHandler>
	...

08004348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800434c:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <HAL_Init+0x40>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a0d      	ldr	r2, [pc, #52]	; (8004388 <HAL_Init+0x40>)
 8004352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_Init+0x40>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a0a      	ldr	r2, [pc, #40]	; (8004388 <HAL_Init+0x40>)
 800435e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004364:	4b08      	ldr	r3, [pc, #32]	; (8004388 <HAL_Init+0x40>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a07      	ldr	r2, [pc, #28]	; (8004388 <HAL_Init+0x40>)
 800436a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800436e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004370:	2003      	movs	r0, #3
 8004372:	f000 f9fc 	bl	800476e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004376:	200f      	movs	r0, #15
 8004378:	f7ff fba8 	bl	8003acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800437c:	f7ff f84a 	bl	8003414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	40023c00 	.word	0x40023c00

0800438c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
  return uwTick;
 8004390:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <HAL_GetTick+0x14>)
 8004392:	681b      	ldr	r3, [r3, #0]
}
 8004394:	4618      	mov	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20005050 	.word	0x20005050

080043a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043ac:	f7ff ffee 	bl	800438c <HAL_GetTick>
 80043b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043bc:	d005      	beq.n	80043ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043be:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <HAL_Delay+0x44>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043ca:	bf00      	nop
 80043cc:	f7ff ffde 	bl	800438c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d8f7      	bhi.n	80043cc <HAL_Delay+0x28>
  {
  }
}
 80043dc:	bf00      	nop
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	20000020 	.word	0x20000020

080043ec <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e01b      	b.n	8004436 <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f817 	bl	800443e <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f81b 	bl	8004454 <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800445c:	4b6c      	ldr	r3, [pc, #432]	; (8004610 <ADC_Init+0x1bc>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	4a6b      	ldr	r2, [pc, #428]	; (8004610 <ADC_Init+0x1bc>)
 8004462:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004466:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004468:	4b69      	ldr	r3, [pc, #420]	; (8004610 <ADC_Init+0x1bc>)
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4967      	ldr	r1, [pc, #412]	; (8004610 <ADC_Init+0x1bc>)
 8004472:	4313      	orrs	r3, r2
 8004474:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004484:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6859      	ldr	r1, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	021a      	lsls	r2, r3, #8
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80044a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6859      	ldr	r1, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6899      	ldr	r1, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6899      	ldr	r1, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800450e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6899      	ldr	r1, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 0202 	bic.w	r2, r2, #2
 8004530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6899      	ldr	r1, [r3, #8]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	005a      	lsls	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2b00      	cmp	r3, #0
 800454c:	d01b      	beq.n	8004586 <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685a      	ldr	r2, [r3, #4]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800455c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685a      	ldr	r2, [r3, #4]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800456c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	6859      	ldr	r1, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	3b01      	subs	r3, #1
 800457a:	035a      	lsls	r2, r3, #13
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	605a      	str	r2, [r3, #4]
 8004584:	e007      	b.n	8004596 <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004594:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80045a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	051a      	lsls	r2, r3, #20
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6899      	ldr	r1, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	025a      	lsls	r2, r3, #9
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6899      	ldr	r1, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	029a      	lsls	r2, r3, #10
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	430a      	orrs	r2, r1
 8004602:	609a      	str	r2, [r3, #8]
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	40012300 	.word	0x40012300

08004614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004624:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <__NVIC_SetPriorityGrouping+0x44>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004630:	4013      	ands	r3, r2
 8004632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800463c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004646:	4a04      	ldr	r2, [pc, #16]	; (8004658 <__NVIC_SetPriorityGrouping+0x44>)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	60d3      	str	r3, [r2, #12]
}
 800464c:	bf00      	nop
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	e000ed00 	.word	0xe000ed00

0800465c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004660:	4b04      	ldr	r3, [pc, #16]	; (8004674 <__NVIC_GetPriorityGrouping+0x18>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	0a1b      	lsrs	r3, r3, #8
 8004666:	f003 0307 	and.w	r3, r3, #7
}
 800466a:	4618      	mov	r0, r3
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004686:	2b00      	cmp	r3, #0
 8004688:	db0b      	blt.n	80046a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	f003 021f 	and.w	r2, r3, #31
 8004690:	4907      	ldr	r1, [pc, #28]	; (80046b0 <__NVIC_EnableIRQ+0x38>)
 8004692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	2001      	movs	r0, #1
 800469a:	fa00 f202 	lsl.w	r2, r0, r2
 800469e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	e000e100 	.word	0xe000e100

080046b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	6039      	str	r1, [r7, #0]
 80046be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	db0a      	blt.n	80046de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	490c      	ldr	r1, [pc, #48]	; (8004700 <__NVIC_SetPriority+0x4c>)
 80046ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d2:	0112      	lsls	r2, r2, #4
 80046d4:	b2d2      	uxtb	r2, r2
 80046d6:	440b      	add	r3, r1
 80046d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046dc:	e00a      	b.n	80046f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	4908      	ldr	r1, [pc, #32]	; (8004704 <__NVIC_SetPriority+0x50>)
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	3b04      	subs	r3, #4
 80046ec:	0112      	lsls	r2, r2, #4
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	440b      	add	r3, r1
 80046f2:	761a      	strb	r2, [r3, #24]
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	e000e100 	.word	0xe000e100
 8004704:	e000ed00 	.word	0xe000ed00

08004708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004708:	b480      	push	{r7}
 800470a:	b089      	sub	sp, #36	; 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	f1c3 0307 	rsb	r3, r3, #7
 8004722:	2b04      	cmp	r3, #4
 8004724:	bf28      	it	cs
 8004726:	2304      	movcs	r3, #4
 8004728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3304      	adds	r3, #4
 800472e:	2b06      	cmp	r3, #6
 8004730:	d902      	bls.n	8004738 <NVIC_EncodePriority+0x30>
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	3b03      	subs	r3, #3
 8004736:	e000      	b.n	800473a <NVIC_EncodePriority+0x32>
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800473c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	fa02 f303 	lsl.w	r3, r2, r3
 8004746:	43da      	mvns	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	401a      	ands	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004750:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	fa01 f303 	lsl.w	r3, r1, r3
 800475a:	43d9      	mvns	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004760:	4313      	orrs	r3, r2
         );
}
 8004762:	4618      	mov	r0, r3
 8004764:	3724      	adds	r7, #36	; 0x24
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b082      	sub	sp, #8
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7ff ff4c 	bl	8004614 <__NVIC_SetPriorityGrouping>
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
 8004790:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004792:	2300      	movs	r3, #0
 8004794:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004796:	f7ff ff61 	bl	800465c <__NVIC_GetPriorityGrouping>
 800479a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	6978      	ldr	r0, [r7, #20]
 80047a2:	f7ff ffb1 	bl	8004708 <NVIC_EncodePriority>
 80047a6:	4602      	mov	r2, r0
 80047a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ac:	4611      	mov	r1, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff ff80 	bl	80046b4 <__NVIC_SetPriority>
}
 80047b4:	bf00      	nop
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7ff ff54 	bl	8004678 <__NVIC_EnableIRQ>
}
 80047d0:	bf00      	nop
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047e4:	f7ff fdd2 	bl	800438c <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e099      	b.n	8004928 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0201 	bic.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004814:	e00f      	b.n	8004836 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004816:	f7ff fdb9 	bl	800438c <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b05      	cmp	r3, #5
 8004822:	d908      	bls.n	8004836 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2203      	movs	r2, #3
 800482e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e078      	b.n	8004928 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e8      	bne.n	8004816 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4b38      	ldr	r3, [pc, #224]	; (8004930 <HAL_DMA_Init+0x158>)
 8004850:	4013      	ands	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004862:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800486e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800487a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	2b04      	cmp	r3, #4
 800488e:	d107      	bne.n	80048a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	4313      	orrs	r3, r2
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f023 0307 	bic.w	r3, r3, #7
 80048b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d117      	bne.n	80048fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00e      	beq.n	80048fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 fb0f 	bl	8004f00 <DMA_CheckFifoParam>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2240      	movs	r2, #64	; 0x40
 80048ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048f6:	2301      	movs	r3, #1
 80048f8:	e016      	b.n	8004928 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fac6 	bl	8004e94 <DMA_CalcBaseAndBitshift>
 8004908:	4603      	mov	r3, r0
 800490a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004910:	223f      	movs	r2, #63	; 0x3f
 8004912:	409a      	lsls	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	f010803f 	.word	0xf010803f

08004934 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_DMA_Start_IT+0x26>
 8004956:	2302      	movs	r3, #2
 8004958:	e040      	b.n	80049dc <HAL_DMA_Start_IT+0xa8>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b01      	cmp	r3, #1
 800496c:	d12f      	bne.n	80049ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2202      	movs	r2, #2
 8004972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 fa58 	bl	8004e38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498c:	223f      	movs	r2, #63	; 0x3f
 800498e:	409a      	lsls	r2, r3
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0216 	orr.w	r2, r2, #22
 80049a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d007      	beq.n	80049bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0208 	orr.w	r2, r2, #8
 80049ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	e005      	b.n	80049da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049d6:	2302      	movs	r3, #2
 80049d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049da:	7dfb      	ldrb	r3, [r7, #23]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049f2:	f7ff fccb 	bl	800438c <HAL_GetTick>
 80049f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d008      	beq.n	8004a16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2280      	movs	r2, #128	; 0x80
 8004a08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e052      	b.n	8004abc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0216 	bic.w	r2, r2, #22
 8004a24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	695a      	ldr	r2, [r3, #20]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d103      	bne.n	8004a46 <HAL_DMA_Abort+0x62>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d007      	beq.n	8004a56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0208 	bic.w	r2, r2, #8
 8004a54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0201 	bic.w	r2, r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a66:	e013      	b.n	8004a90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a68:	f7ff fc90 	bl	800438c <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b05      	cmp	r3, #5
 8004a74:	d90c      	bls.n	8004a90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2203      	movs	r2, #3
 8004a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e015      	b.n	8004abc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1e4      	bne.n	8004a68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa2:	223f      	movs	r2, #63	; 0x3f
 8004aa4:	409a      	lsls	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2280      	movs	r2, #128	; 0x80
 8004adc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e00c      	b.n	8004afc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2205      	movs	r2, #5
 8004ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b14:	4b8e      	ldr	r3, [pc, #568]	; (8004d50 <HAL_DMA_IRQHandler+0x248>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a8e      	ldr	r2, [pc, #568]	; (8004d54 <HAL_DMA_IRQHandler+0x24c>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	0a9b      	lsrs	r3, r3, #10
 8004b20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b32:	2208      	movs	r2, #8
 8004b34:	409a      	lsls	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d01a      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d013      	beq.n	8004b74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 0204 	bic.w	r2, r2, #4
 8004b5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b60:	2208      	movs	r2, #8
 8004b62:	409a      	lsls	r2, r3
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6c:	f043 0201 	orr.w	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b78:	2201      	movs	r2, #1
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d012      	beq.n	8004baa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00b      	beq.n	8004baa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b96:	2201      	movs	r2, #1
 8004b98:	409a      	lsls	r2, r3
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba2:	f043 0202 	orr.w	r2, r3, #2
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bae:	2204      	movs	r2, #4
 8004bb0:	409a      	lsls	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d012      	beq.n	8004be0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00b      	beq.n	8004be0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bcc:	2204      	movs	r2, #4
 8004bce:	409a      	lsls	r2, r3
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd8:	f043 0204 	orr.w	r2, r3, #4
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be4:	2210      	movs	r2, #16
 8004be6:	409a      	lsls	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4013      	ands	r3, r2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d043      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d03c      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c02:	2210      	movs	r2, #16
 8004c04:	409a      	lsls	r2, r3
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d018      	beq.n	8004c4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d108      	bne.n	8004c38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d024      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	4798      	blx	r3
 8004c36:	e01f      	b.n	8004c78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01b      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	4798      	blx	r3
 8004c48:	e016      	b.n	8004c78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d107      	bne.n	8004c68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0208 	bic.w	r2, r2, #8
 8004c66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4013      	ands	r3, r2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 808f 	beq.w	8004da8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8087 	beq.w	8004da8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	409a      	lsls	r2, r3
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b05      	cmp	r3, #5
 8004cb0:	d136      	bne.n	8004d20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0216 	bic.w	r2, r2, #22
 8004cc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	695a      	ldr	r2, [r3, #20]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d103      	bne.n	8004ce2 <HAL_DMA_IRQHandler+0x1da>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0208 	bic.w	r2, r2, #8
 8004cf0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf6:	223f      	movs	r2, #63	; 0x3f
 8004cf8:	409a      	lsls	r2, r3
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d07e      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
        }
        return;
 8004d1e:	e079      	b.n	8004e14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d01d      	beq.n	8004d6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10d      	bne.n	8004d58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d031      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	4798      	blx	r3
 8004d4c:	e02c      	b.n	8004da8 <HAL_DMA_IRQHandler+0x2a0>
 8004d4e:	bf00      	nop
 8004d50:	20000004 	.word	0x20000004
 8004d54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d023      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	4798      	blx	r3
 8004d68:	e01e      	b.n	8004da8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10f      	bne.n	8004d98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0210 	bic.w	r2, r2, #16
 8004d86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d032      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d022      	beq.n	8004e02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2205      	movs	r2, #5
 8004dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0201 	bic.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d307      	bcc.n	8004df0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f2      	bne.n	8004dd4 <HAL_DMA_IRQHandler+0x2cc>
 8004dee:	e000      	b.n	8004df2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004df0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	4798      	blx	r3
 8004e12:	e000      	b.n	8004e16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e14:	bf00      	nop
    }
  }
}
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e2a:	b2db      	uxtb	r3, r3
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b40      	cmp	r3, #64	; 0x40
 8004e64:	d108      	bne.n	8004e78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e76:	e007      	b.n	8004e88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	60da      	str	r2, [r3, #12]
}
 8004e88:	bf00      	nop
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	3b10      	subs	r3, #16
 8004ea4:	4a14      	ldr	r2, [pc, #80]	; (8004ef8 <DMA_CalcBaseAndBitshift+0x64>)
 8004ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eaa:	091b      	lsrs	r3, r3, #4
 8004eac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004eae:	4a13      	ldr	r2, [pc, #76]	; (8004efc <DMA_CalcBaseAndBitshift+0x68>)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d909      	bls.n	8004ed6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004eca:	f023 0303 	bic.w	r3, r3, #3
 8004ece:	1d1a      	adds	r2, r3, #4
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	659a      	str	r2, [r3, #88]	; 0x58
 8004ed4:	e007      	b.n	8004ee6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ede:	f023 0303 	bic.w	r3, r3, #3
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	aaaaaaab 	.word	0xaaaaaaab
 8004efc:	0801de50 	.word	0x0801de50

08004f00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d11f      	bne.n	8004f5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2b03      	cmp	r3, #3
 8004f1e:	d856      	bhi.n	8004fce <DMA_CheckFifoParam+0xce>
 8004f20:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <DMA_CheckFifoParam+0x28>)
 8004f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f26:	bf00      	nop
 8004f28:	08004f39 	.word	0x08004f39
 8004f2c:	08004f4b 	.word	0x08004f4b
 8004f30:	08004f39 	.word	0x08004f39
 8004f34:	08004fcf 	.word	0x08004fcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d046      	beq.n	8004fd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f48:	e043      	b.n	8004fd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f52:	d140      	bne.n	8004fd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f58:	e03d      	b.n	8004fd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f62:	d121      	bne.n	8004fa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d837      	bhi.n	8004fda <DMA_CheckFifoParam+0xda>
 8004f6a:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <DMA_CheckFifoParam+0x70>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004f81 	.word	0x08004f81
 8004f74:	08004f87 	.word	0x08004f87
 8004f78:	08004f81 	.word	0x08004f81
 8004f7c:	08004f99 	.word	0x08004f99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
      break;
 8004f84:	e030      	b.n	8004fe8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d025      	beq.n	8004fde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f96:	e022      	b.n	8004fde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fa0:	d11f      	bne.n	8004fe2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004fa6:	e01c      	b.n	8004fe2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d903      	bls.n	8004fb6 <DMA_CheckFifoParam+0xb6>
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	d003      	beq.n	8004fbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fb4:	e018      	b.n	8004fe8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8004fba:	e015      	b.n	8004fe8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00e      	beq.n	8004fe6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	73fb      	strb	r3, [r7, #15]
      break;
 8004fcc:	e00b      	b.n	8004fe6 <DMA_CheckFifoParam+0xe6>
      break;
 8004fce:	bf00      	nop
 8004fd0:	e00a      	b.n	8004fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fd2:	bf00      	nop
 8004fd4:	e008      	b.n	8004fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fd6:	bf00      	nop
 8004fd8:	e006      	b.n	8004fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fda:	bf00      	nop
 8004fdc:	e004      	b.n	8004fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e002      	b.n	8004fe8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fe2:	bf00      	nop
 8004fe4:	e000      	b.n	8004fe8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fe6:	bf00      	nop
    }
  } 
  
  return status; 
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop

08004ff8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b089      	sub	sp, #36	; 0x24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005006:	2300      	movs	r3, #0
 8005008:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800500a:	2300      	movs	r3, #0
 800500c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800500e:	2300      	movs	r3, #0
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	e159      	b.n	80052c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005014:	2201      	movs	r2, #1
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4013      	ands	r3, r2
 8005026:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	429a      	cmp	r2, r3
 800502e:	f040 8148 	bne.w	80052c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f003 0303 	and.w	r3, r3, #3
 800503a:	2b01      	cmp	r3, #1
 800503c:	d005      	beq.n	800504a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005046:	2b02      	cmp	r3, #2
 8005048:	d130      	bne.n	80050ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	2203      	movs	r2, #3
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43db      	mvns	r3, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	4013      	ands	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	fa02 f303 	lsl.w	r3, r2, r3
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	4313      	orrs	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005080:	2201      	movs	r2, #1
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	fa02 f303 	lsl.w	r3, r2, r3
 8005088:	43db      	mvns	r3, r3
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	4013      	ands	r3, r2
 800508e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	091b      	lsrs	r3, r3, #4
 8005096:	f003 0201 	and.w	r2, r3, #1
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	2b03      	cmp	r3, #3
 80050b6:	d017      	beq.n	80050e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	2203      	movs	r2, #3
 80050c4:	fa02 f303 	lsl.w	r3, r2, r3
 80050c8:	43db      	mvns	r3, r3
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	4013      	ands	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	fa02 f303 	lsl.w	r3, r2, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4313      	orrs	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f003 0303 	and.w	r3, r3, #3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d123      	bne.n	800513c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	08da      	lsrs	r2, r3, #3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3208      	adds	r2, #8
 80050fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005100:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	220f      	movs	r2, #15
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	43db      	mvns	r3, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4013      	ands	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f003 0307 	and.w	r3, r3, #7
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4313      	orrs	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	08da      	lsrs	r2, r3, #3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3208      	adds	r2, #8
 8005136:	69b9      	ldr	r1, [r7, #24]
 8005138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	2203      	movs	r2, #3
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	43db      	mvns	r3, r3
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	4013      	ands	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f003 0203 	and.w	r2, r3, #3
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4313      	orrs	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 80a2 	beq.w	80052c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	4b57      	ldr	r3, [pc, #348]	; (80052e0 <HAL_GPIO_Init+0x2e8>)
 8005184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005186:	4a56      	ldr	r2, [pc, #344]	; (80052e0 <HAL_GPIO_Init+0x2e8>)
 8005188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800518c:	6453      	str	r3, [r2, #68]	; 0x44
 800518e:	4b54      	ldr	r3, [pc, #336]	; (80052e0 <HAL_GPIO_Init+0x2e8>)
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800519a:	4a52      	ldr	r2, [pc, #328]	; (80052e4 <HAL_GPIO_Init+0x2ec>)
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	089b      	lsrs	r3, r3, #2
 80051a0:	3302      	adds	r3, #2
 80051a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	220f      	movs	r2, #15
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	43db      	mvns	r3, r3
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	4013      	ands	r3, r2
 80051bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a49      	ldr	r2, [pc, #292]	; (80052e8 <HAL_GPIO_Init+0x2f0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d019      	beq.n	80051fa <HAL_GPIO_Init+0x202>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a48      	ldr	r2, [pc, #288]	; (80052ec <HAL_GPIO_Init+0x2f4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d013      	beq.n	80051f6 <HAL_GPIO_Init+0x1fe>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a47      	ldr	r2, [pc, #284]	; (80052f0 <HAL_GPIO_Init+0x2f8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00d      	beq.n	80051f2 <HAL_GPIO_Init+0x1fa>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a46      	ldr	r2, [pc, #280]	; (80052f4 <HAL_GPIO_Init+0x2fc>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d007      	beq.n	80051ee <HAL_GPIO_Init+0x1f6>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a45      	ldr	r2, [pc, #276]	; (80052f8 <HAL_GPIO_Init+0x300>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d101      	bne.n	80051ea <HAL_GPIO_Init+0x1f2>
 80051e6:	2304      	movs	r3, #4
 80051e8:	e008      	b.n	80051fc <HAL_GPIO_Init+0x204>
 80051ea:	2307      	movs	r3, #7
 80051ec:	e006      	b.n	80051fc <HAL_GPIO_Init+0x204>
 80051ee:	2303      	movs	r3, #3
 80051f0:	e004      	b.n	80051fc <HAL_GPIO_Init+0x204>
 80051f2:	2302      	movs	r3, #2
 80051f4:	e002      	b.n	80051fc <HAL_GPIO_Init+0x204>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <HAL_GPIO_Init+0x204>
 80051fa:	2300      	movs	r3, #0
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	f002 0203 	and.w	r2, r2, #3
 8005202:	0092      	lsls	r2, r2, #2
 8005204:	4093      	lsls	r3, r2
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4313      	orrs	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800520c:	4935      	ldr	r1, [pc, #212]	; (80052e4 <HAL_GPIO_Init+0x2ec>)
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	089b      	lsrs	r3, r3, #2
 8005212:	3302      	adds	r3, #2
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800521a:	4b38      	ldr	r3, [pc, #224]	; (80052fc <HAL_GPIO_Init+0x304>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	43db      	mvns	r3, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4013      	ands	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800523e:	4a2f      	ldr	r2, [pc, #188]	; (80052fc <HAL_GPIO_Init+0x304>)
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005244:	4b2d      	ldr	r3, [pc, #180]	; (80052fc <HAL_GPIO_Init+0x304>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	43db      	mvns	r3, r3
 800524e:	69ba      	ldr	r2, [r7, #24]
 8005250:	4013      	ands	r3, r2
 8005252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005268:	4a24      	ldr	r2, [pc, #144]	; (80052fc <HAL_GPIO_Init+0x304>)
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800526e:	4b23      	ldr	r3, [pc, #140]	; (80052fc <HAL_GPIO_Init+0x304>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	43db      	mvns	r3, r3
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	4013      	ands	r3, r2
 800527c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005292:	4a1a      	ldr	r2, [pc, #104]	; (80052fc <HAL_GPIO_Init+0x304>)
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005298:	4b18      	ldr	r3, [pc, #96]	; (80052fc <HAL_GPIO_Init+0x304>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	43db      	mvns	r3, r3
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4013      	ands	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052bc:	4a0f      	ldr	r2, [pc, #60]	; (80052fc <HAL_GPIO_Init+0x304>)
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	3301      	adds	r3, #1
 80052c6:	61fb      	str	r3, [r7, #28]
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	2b0f      	cmp	r3, #15
 80052cc:	f67f aea2 	bls.w	8005014 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052d0:	bf00      	nop
 80052d2:	bf00      	nop
 80052d4:	3724      	adds	r7, #36	; 0x24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40023800 	.word	0x40023800
 80052e4:	40013800 	.word	0x40013800
 80052e8:	40020000 	.word	0x40020000
 80052ec:	40020400 	.word	0x40020400
 80052f0:	40020800 	.word	0x40020800
 80052f4:	40020c00 	.word	0x40020c00
 80052f8:	40021000 	.word	0x40021000
 80052fc:	40013c00 	.word	0x40013c00

08005300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	807b      	strh	r3, [r7, #2]
 800530c:	4613      	mov	r3, r2
 800530e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005310:	787b      	ldrb	r3, [r7, #1]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005316:	887a      	ldrh	r2, [r7, #2]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800531c:	e003      	b.n	8005326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800531e:	887b      	ldrh	r3, [r7, #2]
 8005320:	041a      	lsls	r2, r3, #16
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	619a      	str	r2, [r3, #24]
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
	...

08005334 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800533e:	4b08      	ldr	r3, [pc, #32]	; (8005360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005340:	695a      	ldr	r2, [r3, #20]
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	4013      	ands	r3, r2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d006      	beq.n	8005358 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800534a:	4a05      	ldr	r2, [pc, #20]	; (8005360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800534c:	88fb      	ldrh	r3, [r7, #6]
 800534e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005350:	88fb      	ldrh	r3, [r7, #6]
 8005352:	4618      	mov	r0, r3
 8005354:	f7fc fe4e 	bl	8001ff4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005358:	bf00      	nop
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40013c00 	.word	0x40013c00

08005364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e12b      	b.n	80055ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fe f9d8 	bl	8003740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2224      	movs	r2, #36	; 0x24
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0201 	bic.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053c8:	f003 f8ac 	bl	8008524 <HAL_RCC_GetPCLK1Freq>
 80053cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	4a81      	ldr	r2, [pc, #516]	; (80055d8 <HAL_I2C_Init+0x274>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d807      	bhi.n	80053e8 <HAL_I2C_Init+0x84>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4a80      	ldr	r2, [pc, #512]	; (80055dc <HAL_I2C_Init+0x278>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	bf94      	ite	ls
 80053e0:	2301      	movls	r3, #1
 80053e2:	2300      	movhi	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	e006      	b.n	80053f6 <HAL_I2C_Init+0x92>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4a7d      	ldr	r2, [pc, #500]	; (80055e0 <HAL_I2C_Init+0x27c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	bf94      	ite	ls
 80053f0:	2301      	movls	r3, #1
 80053f2:	2300      	movhi	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e0e7      	b.n	80055ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4a78      	ldr	r2, [pc, #480]	; (80055e4 <HAL_I2C_Init+0x280>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	0c9b      	lsrs	r3, r3, #18
 8005408:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	4a6a      	ldr	r2, [pc, #424]	; (80055d8 <HAL_I2C_Init+0x274>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d802      	bhi.n	8005438 <HAL_I2C_Init+0xd4>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	3301      	adds	r3, #1
 8005436:	e009      	b.n	800544c <HAL_I2C_Init+0xe8>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800543e:	fb02 f303 	mul.w	r3, r2, r3
 8005442:	4a69      	ldr	r2, [pc, #420]	; (80055e8 <HAL_I2C_Init+0x284>)
 8005444:	fba2 2303 	umull	r2, r3, r2, r3
 8005448:	099b      	lsrs	r3, r3, #6
 800544a:	3301      	adds	r3, #1
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6812      	ldr	r2, [r2, #0]
 8005450:	430b      	orrs	r3, r1
 8005452:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800545e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	495c      	ldr	r1, [pc, #368]	; (80055d8 <HAL_I2C_Init+0x274>)
 8005468:	428b      	cmp	r3, r1
 800546a:	d819      	bhi.n	80054a0 <HAL_I2C_Init+0x13c>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	1e59      	subs	r1, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	fbb1 f3f3 	udiv	r3, r1, r3
 800547a:	1c59      	adds	r1, r3, #1
 800547c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005480:	400b      	ands	r3, r1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_I2C_Init+0x138>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1e59      	subs	r1, r3, #1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	fbb1 f3f3 	udiv	r3, r1, r3
 8005494:	3301      	adds	r3, #1
 8005496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800549a:	e051      	b.n	8005540 <HAL_I2C_Init+0x1dc>
 800549c:	2304      	movs	r3, #4
 800549e:	e04f      	b.n	8005540 <HAL_I2C_Init+0x1dc>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d111      	bne.n	80054cc <HAL_I2C_Init+0x168>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	1e58      	subs	r0, r3, #1
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6859      	ldr	r1, [r3, #4]
 80054b0:	460b      	mov	r3, r1
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	440b      	add	r3, r1
 80054b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054ba:	3301      	adds	r3, #1
 80054bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	bf0c      	ite	eq
 80054c4:	2301      	moveq	r3, #1
 80054c6:	2300      	movne	r3, #0
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	e012      	b.n	80054f2 <HAL_I2C_Init+0x18e>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	1e58      	subs	r0, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6859      	ldr	r1, [r3, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	0099      	lsls	r1, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	fbb0 f3f3 	udiv	r3, r0, r3
 80054e2:	3301      	adds	r3, #1
 80054e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bf0c      	ite	eq
 80054ec:	2301      	moveq	r3, #1
 80054ee:	2300      	movne	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_I2C_Init+0x196>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e022      	b.n	8005540 <HAL_I2C_Init+0x1dc>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10e      	bne.n	8005520 <HAL_I2C_Init+0x1bc>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	1e58      	subs	r0, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6859      	ldr	r1, [r3, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	440b      	add	r3, r1
 8005510:	fbb0 f3f3 	udiv	r3, r0, r3
 8005514:	3301      	adds	r3, #1
 8005516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800551a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800551e:	e00f      	b.n	8005540 <HAL_I2C_Init+0x1dc>
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	1e58      	subs	r0, r3, #1
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6859      	ldr	r1, [r3, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	440b      	add	r3, r1
 800552e:	0099      	lsls	r1, r3, #2
 8005530:	440b      	add	r3, r1
 8005532:	fbb0 f3f3 	udiv	r3, r0, r3
 8005536:	3301      	adds	r3, #1
 8005538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	6809      	ldr	r1, [r1, #0]
 8005544:	4313      	orrs	r3, r2
 8005546:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	69da      	ldr	r2, [r3, #28]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	431a      	orrs	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800556e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6911      	ldr	r1, [r2, #16]
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	68d2      	ldr	r2, [r2, #12]
 800557a:	4311      	orrs	r1, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	430b      	orrs	r3, r1
 8005582:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695a      	ldr	r2, [r3, #20]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	431a      	orrs	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	000186a0 	.word	0x000186a0
 80055dc:	001e847f 	.word	0x001e847f
 80055e0:	003d08ff 	.word	0x003d08ff
 80055e4:	431bde83 	.word	0x431bde83
 80055e8:	10624dd3 	.word	0x10624dd3

080055ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	607a      	str	r2, [r7, #4]
 80055f6:	461a      	mov	r2, r3
 80055f8:	460b      	mov	r3, r1
 80055fa:	817b      	strh	r3, [r7, #10]
 80055fc:	4613      	mov	r3, r2
 80055fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005600:	f7fe fec4 	bl	800438c <HAL_GetTick>
 8005604:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b20      	cmp	r3, #32
 8005610:	f040 80e0 	bne.w	80057d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	2319      	movs	r3, #25
 800561a:	2201      	movs	r2, #1
 800561c:	4970      	ldr	r1, [pc, #448]	; (80057e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f002 f8e6 	bl	80077f0 <I2C_WaitOnFlagUntilTimeout>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800562a:	2302      	movs	r3, #2
 800562c:	e0d3      	b.n	80057d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_I2C_Master_Transmit+0x50>
 8005638:	2302      	movs	r3, #2
 800563a:	e0cc      	b.n	80057d6 <HAL_I2C_Master_Transmit+0x1ea>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0301 	and.w	r3, r3, #1
 800564e:	2b01      	cmp	r3, #1
 8005650:	d007      	beq.n	8005662 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0201 	orr.w	r2, r2, #1
 8005660:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005670:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2221      	movs	r2, #33	; 0x21
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2210      	movs	r2, #16
 800567e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	893a      	ldrh	r2, [r7, #8]
 8005692:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4a50      	ldr	r2, [pc, #320]	; (80057e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80056a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80056a4:	8979      	ldrh	r1, [r7, #10]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	6a3a      	ldr	r2, [r7, #32]
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f001 fea8 	bl	8007400 <I2C_MasterRequestWrite>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e08d      	b.n	80057d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ba:	2300      	movs	r3, #0
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	613b      	str	r3, [r7, #16]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	613b      	str	r3, [r7, #16]
 80056ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80056d0:	e066      	b.n	80057a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	6a39      	ldr	r1, [r7, #32]
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f002 f960 	bl	800799c <I2C_WaitOnTXEFlagUntilTimeout>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00d      	beq.n	80056fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d107      	bne.n	80056fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e06b      	b.n	80057d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	781a      	ldrb	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005726:	3b01      	subs	r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	f003 0304 	and.w	r3, r3, #4
 8005738:	2b04      	cmp	r3, #4
 800573a:	d11b      	bne.n	8005774 <HAL_I2C_Master_Transmit+0x188>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005740:	2b00      	cmp	r3, #0
 8005742:	d017      	beq.n	8005774 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	781a      	ldrb	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800575e:	b29b      	uxth	r3, r3
 8005760:	3b01      	subs	r3, #1
 8005762:	b29a      	uxth	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	6a39      	ldr	r1, [r7, #32]
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f002 f950 	bl	8007a1e <I2C_WaitOnBTFFlagUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00d      	beq.n	80057a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	2b04      	cmp	r3, #4
 800578a:	d107      	bne.n	800579c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800579a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e01a      	b.n	80057d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d194      	bne.n	80056d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	e000      	b.n	80057d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80057d4:	2302      	movs	r3, #2
  }
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	00100002 	.word	0x00100002
 80057e4:	ffff0000 	.word	0xffff0000

080057e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b08c      	sub	sp, #48	; 0x30
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	607a      	str	r2, [r7, #4]
 80057f2:	461a      	mov	r2, r3
 80057f4:	460b      	mov	r3, r1
 80057f6:	817b      	strh	r3, [r7, #10]
 80057f8:	4613      	mov	r3, r2
 80057fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057fc:	f7fe fdc6 	bl	800438c <HAL_GetTick>
 8005800:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b20      	cmp	r3, #32
 800580c:	f040 820b 	bne.w	8005c26 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	2319      	movs	r3, #25
 8005816:	2201      	movs	r2, #1
 8005818:	497c      	ldr	r1, [pc, #496]	; (8005a0c <HAL_I2C_Master_Receive+0x224>)
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f001 ffe8 	bl	80077f0 <I2C_WaitOnFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005826:	2302      	movs	r3, #2
 8005828:	e1fe      	b.n	8005c28 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005830:	2b01      	cmp	r3, #1
 8005832:	d101      	bne.n	8005838 <HAL_I2C_Master_Receive+0x50>
 8005834:	2302      	movs	r3, #2
 8005836:	e1f7      	b.n	8005c28 <HAL_I2C_Master_Receive+0x440>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b01      	cmp	r3, #1
 800584c:	d007      	beq.n	800585e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0201 	orr.w	r2, r2, #1
 800585c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800586c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2222      	movs	r2, #34	; 0x22
 8005872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2210      	movs	r2, #16
 800587a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	893a      	ldrh	r2, [r7, #8]
 800588e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005894:	b29a      	uxth	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4a5c      	ldr	r2, [pc, #368]	; (8005a10 <HAL_I2C_Master_Receive+0x228>)
 800589e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80058a0:	8979      	ldrh	r1, [r7, #10]
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f001 fe2c 	bl	8007504 <I2C_MasterRequestRead>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e1b8      	b.n	8005c28 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d113      	bne.n	80058e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058be:	2300      	movs	r3, #0
 80058c0:	623b      	str	r3, [r7, #32]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	623b      	str	r3, [r7, #32]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	623b      	str	r3, [r7, #32]
 80058d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	e18c      	b.n	8005c00 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d11b      	bne.n	8005926 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	61fb      	str	r3, [r7, #28]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	61fb      	str	r3, [r7, #28]
 8005912:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	e16c      	b.n	8005c00 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800592a:	2b02      	cmp	r3, #2
 800592c:	d11b      	bne.n	8005966 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800594c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800594e:	2300      	movs	r3, #0
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	61bb      	str	r3, [r7, #24]
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	e14c      	b.n	8005c00 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005976:	2300      	movs	r3, #0
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	617b      	str	r3, [r7, #20]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800598c:	e138      	b.n	8005c00 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005992:	2b03      	cmp	r3, #3
 8005994:	f200 80f1 	bhi.w	8005b7a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599c:	2b01      	cmp	r3, #1
 800599e:	d123      	bne.n	80059e8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f002 f8ad 	bl	8007b04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d001      	beq.n	80059b4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e139      	b.n	8005c28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691a      	ldr	r2, [r3, #16]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	1c5a      	adds	r2, r3, #1
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059e6:	e10b      	b.n	8005c00 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d14e      	bne.n	8005a8e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	2200      	movs	r2, #0
 80059f8:	4906      	ldr	r1, [pc, #24]	; (8005a14 <HAL_I2C_Master_Receive+0x22c>)
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f001 fef8 	bl	80077f0 <I2C_WaitOnFlagUntilTimeout>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d008      	beq.n	8005a18 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e10e      	b.n	8005c28 <HAL_I2C_Master_Receive+0x440>
 8005a0a:	bf00      	nop
 8005a0c:	00100002 	.word	0x00100002
 8005a10:	ffff0000 	.word	0xffff0000
 8005a14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691a      	ldr	r2, [r3, #16]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a32:	b2d2      	uxtb	r2, r2
 8005a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a8c:	e0b8      	b.n	8005c00 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	2200      	movs	r2, #0
 8005a96:	4966      	ldr	r1, [pc, #408]	; (8005c30 <HAL_I2C_Master_Receive+0x448>)
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f001 fea9 	bl	80077f0 <I2C_WaitOnFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0bf      	b.n	8005c28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b29a      	uxth	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	9300      	str	r3, [sp, #0]
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	2200      	movs	r2, #0
 8005af2:	494f      	ldr	r1, [pc, #316]	; (8005c30 <HAL_I2C_Master_Receive+0x448>)
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f001 fe7b 	bl	80077f0 <I2C_WaitOnFlagUntilTimeout>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e091      	b.n	8005c28 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b30:	3b01      	subs	r3, #1
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691a      	ldr	r2, [r3, #16]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	b2d2      	uxtb	r2, r2
 8005b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b62:	3b01      	subs	r3, #1
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b78:	e042      	b.n	8005c00 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f001 ffc0 	bl	8007b04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e04c      	b.n	8005c28 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f003 0304 	and.w	r3, r3, #4
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d118      	bne.n	8005c00 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	691a      	ldr	r2, [r3, #16]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f47f aec2 	bne.w	800598e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	e000      	b.n	8005c28 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005c26:	2302      	movs	r3, #2
  }
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3728      	adds	r7, #40	; 0x28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	00010004 	.word	0x00010004

08005c34 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b088      	sub	sp, #32
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c54:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	2b10      	cmp	r3, #16
 8005c62:	d003      	beq.n	8005c6c <HAL_I2C_EV_IRQHandler+0x38>
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	2b40      	cmp	r3, #64	; 0x40
 8005c68:	f040 80c1 	bne.w	8005dee <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10d      	bne.n	8005ca2 <HAL_I2C_EV_IRQHandler+0x6e>
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005c8c:	d003      	beq.n	8005c96 <HAL_I2C_EV_IRQHandler+0x62>
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c94:	d101      	bne.n	8005c9a <HAL_I2C_EV_IRQHandler+0x66>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <HAL_I2C_EV_IRQHandler+0x68>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	f000 8132 	beq.w	8005f06 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00c      	beq.n	8005cc6 <HAL_I2C_EV_IRQHandler+0x92>
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	0a5b      	lsrs	r3, r3, #9
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d006      	beq.n	8005cc6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f001 ffa8 	bl	8007c0e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fd83 	bl	80067ca <I2C_Master_SB>
 8005cc4:	e092      	b.n	8005dec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	08db      	lsrs	r3, r3, #3
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d009      	beq.n	8005ce6 <HAL_I2C_EV_IRQHandler+0xb2>
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	0a5b      	lsrs	r3, r3, #9
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fdf9 	bl	80068d6 <I2C_Master_ADD10>
 8005ce4:	e082      	b.n	8005dec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	085b      	lsrs	r3, r3, #1
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <HAL_I2C_EV_IRQHandler+0xd2>
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	0a5b      	lsrs	r3, r3, #9
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fe13 	bl	800692a <I2C_Master_ADDR>
 8005d04:	e072      	b.n	8005dec <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	089b      	lsrs	r3, r3, #2
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d03b      	beq.n	8005d8a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d20:	f000 80f3 	beq.w	8005f0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	09db      	lsrs	r3, r3, #7
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00f      	beq.n	8005d50 <HAL_I2C_EV_IRQHandler+0x11c>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	0a9b      	lsrs	r3, r3, #10
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d009      	beq.n	8005d50 <HAL_I2C_EV_IRQHandler+0x11c>
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	089b      	lsrs	r3, r3, #2
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d103      	bne.n	8005d50 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f9f3 	bl	8006134 <I2C_MasterTransmit_TXE>
 8005d4e:	e04d      	b.n	8005dec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	089b      	lsrs	r3, r3, #2
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 80d6 	beq.w	8005f0a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	0a5b      	lsrs	r3, r3, #9
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 80cf 	beq.w	8005f0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005d6c:	7bbb      	ldrb	r3, [r7, #14]
 8005d6e:	2b21      	cmp	r3, #33	; 0x21
 8005d70:	d103      	bne.n	8005d7a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fa7a 	bl	800626c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d78:	e0c7      	b.n	8005f0a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
 8005d7c:	2b40      	cmp	r3, #64	; 0x40
 8005d7e:	f040 80c4 	bne.w	8005f0a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fae8 	bl	8006358 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d88:	e0bf      	b.n	8005f0a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d98:	f000 80b7 	beq.w	8005f0a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	099b      	lsrs	r3, r3, #6
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00f      	beq.n	8005dc8 <HAL_I2C_EV_IRQHandler+0x194>
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	0a9b      	lsrs	r3, r3, #10
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d009      	beq.n	8005dc8 <HAL_I2C_EV_IRQHandler+0x194>
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	089b      	lsrs	r3, r3, #2
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d103      	bne.n	8005dc8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fb5d 	bl	8006480 <I2C_MasterReceive_RXNE>
 8005dc6:	e011      	b.n	8005dec <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	089b      	lsrs	r3, r3, #2
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 809a 	beq.w	8005f0a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	0a5b      	lsrs	r3, r3, #9
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8093 	beq.w	8005f0a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fc06 	bl	80065f6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005dea:	e08e      	b.n	8005f0a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005dec:	e08d      	b.n	8005f0a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d004      	beq.n	8005e00 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	61fb      	str	r3, [r7, #28]
 8005dfe:	e007      	b.n	8005e10 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	085b      	lsrs	r3, r3, #1
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d012      	beq.n	8005e42 <HAL_I2C_EV_IRQHandler+0x20e>
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	0a5b      	lsrs	r3, r3, #9
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00c      	beq.n	8005e42 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005e38:	69b9      	ldr	r1, [r7, #24]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 ffc4 	bl	8006dc8 <I2C_Slave_ADDR>
 8005e40:	e066      	b.n	8005f10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	091b      	lsrs	r3, r3, #4
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d009      	beq.n	8005e62 <HAL_I2C_EV_IRQHandler+0x22e>
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	0a5b      	lsrs	r3, r3, #9
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fffe 	bl	8006e5c <I2C_Slave_STOPF>
 8005e60:	e056      	b.n	8005f10 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e62:	7bbb      	ldrb	r3, [r7, #14]
 8005e64:	2b21      	cmp	r3, #33	; 0x21
 8005e66:	d002      	beq.n	8005e6e <HAL_I2C_EV_IRQHandler+0x23a>
 8005e68:	7bbb      	ldrb	r3, [r7, #14]
 8005e6a:	2b29      	cmp	r3, #41	; 0x29
 8005e6c:	d125      	bne.n	8005eba <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	09db      	lsrs	r3, r3, #7
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00f      	beq.n	8005e9a <HAL_I2C_EV_IRQHandler+0x266>
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	0a9b      	lsrs	r3, r3, #10
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <HAL_I2C_EV_IRQHandler+0x266>
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	089b      	lsrs	r3, r3, #2
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d103      	bne.n	8005e9a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 feda 	bl	8006c4c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005e98:	e039      	b.n	8005f0e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	089b      	lsrs	r3, r3, #2
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d033      	beq.n	8005f0e <HAL_I2C_EV_IRQHandler+0x2da>
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	0a5b      	lsrs	r3, r3, #9
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d02d      	beq.n	8005f0e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 ff07 	bl	8006cc6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005eb8:	e029      	b.n	8005f0e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	099b      	lsrs	r3, r3, #6
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00f      	beq.n	8005ee6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	0a9b      	lsrs	r3, r3, #10
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d009      	beq.n	8005ee6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	089b      	lsrs	r3, r3, #2
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d103      	bne.n	8005ee6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 ff12 	bl	8006d08 <I2C_SlaveReceive_RXNE>
 8005ee4:	e014      	b.n	8005f10 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	089b      	lsrs	r3, r3, #2
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00e      	beq.n	8005f10 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	0a5b      	lsrs	r3, r3, #9
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d008      	beq.n	8005f10 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 ff40 	bl	8006d84 <I2C_SlaveReceive_BTF>
 8005f04:	e004      	b.n	8005f10 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005f06:	bf00      	nop
 8005f08:	e002      	b.n	8005f10 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005f0a:	bf00      	nop
 8005f0c:	e000      	b.n	8005f10 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005f0e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005f10:	3720      	adds	r7, #32
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b08a      	sub	sp, #40	; 0x28
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f38:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	0a1b      	lsrs	r3, r3, #8
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00e      	beq.n	8005f64 <HAL_I2C_ER_IRQHandler+0x4e>
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	0a1b      	lsrs	r3, r3, #8
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d008      	beq.n	8005f64 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	f043 0301 	orr.w	r3, r3, #1
 8005f58:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f62:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f64:	6a3b      	ldr	r3, [r7, #32]
 8005f66:	0a5b      	lsrs	r3, r3, #9
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00e      	beq.n	8005f8e <HAL_I2C_ER_IRQHandler+0x78>
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	0a1b      	lsrs	r3, r3, #8
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	f043 0302 	orr.w	r3, r3, #2
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005f8c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	0a9b      	lsrs	r3, r3, #10
 8005f92:	f003 0301 	and.w	r3, r3, #1
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d03f      	beq.n	800601a <HAL_I2C_ER_IRQHandler+0x104>
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	0a1b      	lsrs	r3, r3, #8
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d039      	beq.n	800601a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005fa6:	7efb      	ldrb	r3, [r7, #27]
 8005fa8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005fc0:	7ebb      	ldrb	r3, [r7, #26]
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	d112      	bne.n	8005fec <HAL_I2C_ER_IRQHandler+0xd6>
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10f      	bne.n	8005fec <HAL_I2C_ER_IRQHandler+0xd6>
 8005fcc:	7cfb      	ldrb	r3, [r7, #19]
 8005fce:	2b21      	cmp	r3, #33	; 0x21
 8005fd0:	d008      	beq.n	8005fe4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005fd2:	7cfb      	ldrb	r3, [r7, #19]
 8005fd4:	2b29      	cmp	r3, #41	; 0x29
 8005fd6:	d005      	beq.n	8005fe4 <HAL_I2C_ER_IRQHandler+0xce>
 8005fd8:	7cfb      	ldrb	r3, [r7, #19]
 8005fda:	2b28      	cmp	r3, #40	; 0x28
 8005fdc:	d106      	bne.n	8005fec <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2b21      	cmp	r3, #33	; 0x21
 8005fe2:	d103      	bne.n	8005fec <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f001 f869 	bl	80070bc <I2C_Slave_AF>
 8005fea:	e016      	b.n	800601a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ff4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	f043 0304 	orr.w	r3, r3, #4
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005ffe:	7efb      	ldrb	r3, [r7, #27]
 8006000:	2b10      	cmp	r3, #16
 8006002:	d002      	beq.n	800600a <HAL_I2C_ER_IRQHandler+0xf4>
 8006004:	7efb      	ldrb	r3, [r7, #27]
 8006006:	2b40      	cmp	r3, #64	; 0x40
 8006008:	d107      	bne.n	800601a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006018:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	0adb      	lsrs	r3, r3, #11
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00e      	beq.n	8006044 <HAL_I2C_ER_IRQHandler+0x12e>
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	0a1b      	lsrs	r3, r3, #8
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	2b00      	cmp	r3, #0
 8006030:	d008      	beq.n	8006044 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	f043 0308 	orr.w	r3, r3, #8
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006042:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006046:	2b00      	cmp	r3, #0
 8006048:	d008      	beq.n	800605c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006050:	431a      	orrs	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f001 f8a0 	bl	800719c <I2C_ITError>
  }
}
 800605c:	bf00      	nop
 800605e:	3728      	adds	r7, #40	; 0x28
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80060a8:	bf00      	nop
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	70fb      	strb	r3, [r7, #3]
 80060c0:	4613      	mov	r3, r2
 80060c2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80060c4:	bf00      	nop
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006142:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800614a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006156:	2b00      	cmp	r3, #0
 8006158:	d150      	bne.n	80061fc <I2C_MasterTransmit_TXE+0xc8>
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	2b21      	cmp	r3, #33	; 0x21
 800615e:	d14d      	bne.n	80061fc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2b08      	cmp	r3, #8
 8006164:	d01d      	beq.n	80061a2 <I2C_MasterTransmit_TXE+0x6e>
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b20      	cmp	r3, #32
 800616a:	d01a      	beq.n	80061a2 <I2C_MasterTransmit_TXE+0x6e>
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006172:	d016      	beq.n	80061a2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006182:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2211      	movs	r2, #17
 8006188:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7ff ff62 	bl	8006064 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061a0:	e060      	b.n	8006264 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061b0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061c0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	2b40      	cmp	r3, #64	; 0x40
 80061da:	d107      	bne.n	80061ec <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f7ff ff7d 	bl	80060e4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061ea:	e03b      	b.n	8006264 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7ff ff35 	bl	8006064 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80061fa:	e033      	b.n	8006264 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	2b21      	cmp	r3, #33	; 0x21
 8006200:	d005      	beq.n	800620e <I2C_MasterTransmit_TXE+0xda>
 8006202:	7bbb      	ldrb	r3, [r7, #14]
 8006204:	2b40      	cmp	r3, #64	; 0x40
 8006206:	d12d      	bne.n	8006264 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006208:	7bfb      	ldrb	r3, [r7, #15]
 800620a:	2b22      	cmp	r3, #34	; 0x22
 800620c:	d12a      	bne.n	8006264 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006212:	b29b      	uxth	r3, r3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d108      	bne.n	800622a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006226:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006228:	e01c      	b.n	8006264 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b40      	cmp	r3, #64	; 0x40
 8006234:	d103      	bne.n	800623e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f88e 	bl	8006358 <I2C_MemoryTransmit_TXE_BTF>
}
 800623c:	e012      	b.n	8006264 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	781a      	ldrb	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006258:	b29b      	uxth	r3, r3
 800625a:	3b01      	subs	r3, #1
 800625c:	b29a      	uxth	r2, r3
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006262:	e7ff      	b.n	8006264 <I2C_MasterTransmit_TXE+0x130>
 8006264:	bf00      	nop
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006278:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b21      	cmp	r3, #33	; 0x21
 8006284:	d164      	bne.n	8006350 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d012      	beq.n	80062b6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	781a      	ldrb	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	3b01      	subs	r3, #1
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80062b4:	e04c      	b.n	8006350 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d01d      	beq.n	80062f8 <I2C_MasterTransmit_BTF+0x8c>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d01a      	beq.n	80062f8 <I2C_MasterTransmit_BTF+0x8c>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062c8:	d016      	beq.n	80062f8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062d8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2211      	movs	r2, #17
 80062de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff feb7 	bl	8006064 <HAL_I2C_MasterTxCpltCallback>
}
 80062f6:	e02b      	b.n	8006350 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006306:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006316:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b40      	cmp	r3, #64	; 0x40
 8006330:	d107      	bne.n	8006342 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff fed2 	bl	80060e4 <HAL_I2C_MemTxCpltCallback>
}
 8006340:	e006      	b.n	8006350 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff fe8a 	bl	8006064 <HAL_I2C_MasterTxCpltCallback>
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006366:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636c:	2b00      	cmp	r3, #0
 800636e:	d11d      	bne.n	80063ac <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006374:	2b01      	cmp	r3, #1
 8006376:	d10b      	bne.n	8006390 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637c:	b2da      	uxtb	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006388:	1c9a      	adds	r2, r3, #2
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800638e:	e073      	b.n	8006478 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006394:	b29b      	uxth	r3, r3
 8006396:	121b      	asrs	r3, r3, #8
 8006398:	b2da      	uxtb	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80063aa:	e065      	b.n	8006478 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d10b      	bne.n	80063cc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80063ca:	e055      	b.n	8006478 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d151      	bne.n	8006478 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	2b22      	cmp	r3, #34	; 0x22
 80063d8:	d10d      	bne.n	80063f6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063e8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80063f4:	e040      	b.n	8006478 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d015      	beq.n	800642c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	2b21      	cmp	r3, #33	; 0x21
 8006404:	d112      	bne.n	800642c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	781a      	ldrb	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006420:	b29b      	uxth	r3, r3
 8006422:	3b01      	subs	r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800642a:	e025      	b.n	8006478 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006430:	b29b      	uxth	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d120      	bne.n	8006478 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	2b21      	cmp	r3, #33	; 0x21
 800643a:	d11d      	bne.n	8006478 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800644a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800645a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7ff fe36 	bl	80060e4 <HAL_I2C_MemTxCpltCallback>
}
 8006478:	bf00      	nop
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b22      	cmp	r3, #34	; 0x22
 8006492:	f040 80ac 	bne.w	80065ee <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649a:	b29b      	uxth	r3, r3
 800649c:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b03      	cmp	r3, #3
 80064a2:	d921      	bls.n	80064e8 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691a      	ldr	r2, [r3, #16]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	3b01      	subs	r3, #1
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	f040 808c 	bne.w	80065ee <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e4:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80064e6:	e082      	b.n	80065ee <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d075      	beq.n	80065dc <I2C_MasterReceive_RXNE+0x15c>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d002      	beq.n	80064fc <I2C_MasterReceive_RXNE+0x7c>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d16f      	bne.n	80065dc <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 facf 	bl	8007aa0 <I2C_WaitOnSTOPRequestThroughIT>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d142      	bne.n	800658e <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006516:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006526:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	691a      	ldr	r2, [r3, #16]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	1c5a      	adds	r2, r3, #1
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2220      	movs	r2, #32
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b40      	cmp	r3, #64	; 0x40
 8006560:	d10a      	bne.n	8006578 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff fdc1 	bl	80060f8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006576:	e03a      	b.n	80065ee <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2212      	movs	r2, #18
 8006584:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff fd76 	bl	8006078 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800658c:	e02f      	b.n	80065ee <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800659c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691a      	ldr	r2, [r3, #16]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	b2d2      	uxtb	r2, r2
 80065aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7ff fd99 	bl	800610c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80065da:	e008      	b.n	80065ee <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ea:	605a      	str	r2, [r3, #4]
}
 80065ec:	e7ff      	b.n	80065ee <I2C_MasterReceive_RXNE+0x16e>
 80065ee:	bf00      	nop
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006602:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006608:	b29b      	uxth	r3, r3
 800660a:	2b04      	cmp	r3, #4
 800660c:	d11b      	bne.n	8006646 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800661c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	691a      	ldr	r2, [r3, #16]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	b2d2      	uxtb	r2, r2
 800662a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006644:	e0bd      	b.n	80067c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664a:	b29b      	uxth	r3, r3
 800664c:	2b03      	cmp	r3, #3
 800664e:	d129      	bne.n	80066a4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800665e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b04      	cmp	r3, #4
 8006664:	d00a      	beq.n	800667c <I2C_MasterReceive_BTF+0x86>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b02      	cmp	r3, #2
 800666a:	d007      	beq.n	800667c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800667a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	691a      	ldr	r2, [r3, #16]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	1c5a      	adds	r2, r3, #1
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006698:	b29b      	uxth	r3, r3
 800669a:	3b01      	subs	r3, #1
 800669c:	b29a      	uxth	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80066a2:	e08e      	b.n	80067c2 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d176      	bne.n	800679c <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d002      	beq.n	80066ba <I2C_MasterReceive_BTF+0xc4>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b10      	cmp	r3, #16
 80066b8:	d108      	bne.n	80066cc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	e019      	b.n	8006700 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d002      	beq.n	80066d8 <I2C_MasterReceive_BTF+0xe2>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d108      	bne.n	80066ea <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	e00a      	b.n	8006700 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b10      	cmp	r3, #16
 80066ee:	d007      	beq.n	8006700 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	691a      	ldr	r2, [r3, #16]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800671c:	b29b      	uxth	r3, r3
 800671e:	3b01      	subs	r3, #1
 8006720:	b29a      	uxth	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006742:	b29b      	uxth	r3, r3
 8006744:	3b01      	subs	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685a      	ldr	r2, [r3, #4]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800675a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2220      	movs	r2, #32
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b40      	cmp	r3, #64	; 0x40
 800676e:	d10a      	bne.n	8006786 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7ff fcba 	bl	80060f8 <HAL_I2C_MemRxCpltCallback>
}
 8006784:	e01d      	b.n	80067c2 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2212      	movs	r2, #18
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7ff fc6f 	bl	8006078 <HAL_I2C_MasterRxCpltCallback>
}
 800679a:	e012      	b.n	80067c2 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691a      	ldr	r2, [r3, #16]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ae:	1c5a      	adds	r2, r3, #1
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80067c2:	bf00      	nop
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d117      	bne.n	800680e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d109      	bne.n	80067fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	461a      	mov	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80067f8:	e067      	b.n	80068ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	f043 0301 	orr.w	r3, r3, #1
 8006804:	b2da      	uxtb	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	611a      	str	r2, [r3, #16]
}
 800680c:	e05d      	b.n	80068ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006816:	d133      	bne.n	8006880 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b21      	cmp	r3, #33	; 0x21
 8006822:	d109      	bne.n	8006838 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006828:	b2db      	uxtb	r3, r3
 800682a:	461a      	mov	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006834:	611a      	str	r2, [r3, #16]
 8006836:	e008      	b.n	800684a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683c:	b2db      	uxtb	r3, r3
 800683e:	f043 0301 	orr.w	r3, r3, #1
 8006842:	b2da      	uxtb	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800684e:	2b00      	cmp	r3, #0
 8006850:	d004      	beq.n	800685c <I2C_Master_SB+0x92>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d108      	bne.n	800686e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	2b00      	cmp	r3, #0
 8006862:	d032      	beq.n	80068ca <I2C_Master_SB+0x100>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686a:	2b00      	cmp	r3, #0
 800686c:	d02d      	beq.n	80068ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	685a      	ldr	r2, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800687c:	605a      	str	r2, [r3, #4]
}
 800687e:	e024      	b.n	80068ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10e      	bne.n	80068a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688c:	b29b      	uxth	r3, r3
 800688e:	11db      	asrs	r3, r3, #7
 8006890:	b2db      	uxtb	r3, r3
 8006892:	f003 0306 	and.w	r3, r3, #6
 8006896:	b2db      	uxtb	r3, r3
 8006898:	f063 030f 	orn	r3, r3, #15
 800689c:	b2da      	uxtb	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	611a      	str	r2, [r3, #16]
}
 80068a4:	e011      	b.n	80068ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d10d      	bne.n	80068ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	11db      	asrs	r3, r3, #7
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 0306 	and.w	r3, r3, #6
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	f063 030e 	orn	r3, r3, #14
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	611a      	str	r2, [r3, #16]
}
 80068ca:	bf00      	nop
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr

080068d6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80068d6:	b480      	push	{r7}
 80068d8:	b083      	sub	sp, #12
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d004      	beq.n	80068fc <I2C_Master_ADD10+0x26>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d108      	bne.n	800690e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00c      	beq.n	800691e <I2C_Master_ADD10+0x48>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800691c:	605a      	str	r2, [r3, #4]
  }
}
 800691e:	bf00      	nop
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800692a:	b480      	push	{r7}
 800692c:	b091      	sub	sp, #68	; 0x44
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006938:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006940:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b22      	cmp	r3, #34	; 0x22
 8006952:	f040 8169 	bne.w	8006c28 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10f      	bne.n	800697e <I2C_Master_ADDR+0x54>
 800695e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006962:	2b40      	cmp	r3, #64	; 0x40
 8006964:	d10b      	bne.n	800697e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006966:	2300      	movs	r3, #0
 8006968:	633b      	str	r3, [r7, #48]	; 0x30
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	633b      	str	r3, [r7, #48]	; 0x30
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	633b      	str	r3, [r7, #48]	; 0x30
 800697a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697c:	e160      	b.n	8006c40 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006982:	2b00      	cmp	r3, #0
 8006984:	d11d      	bne.n	80069c2 <I2C_Master_ADDR+0x98>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800698e:	d118      	bne.n	80069c2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006990:	2300      	movs	r3, #0
 8006992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069b4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ba:	1c5a      	adds	r2, r3, #1
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	651a      	str	r2, [r3, #80]	; 0x50
 80069c0:	e13e      	b.n	8006c40 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d113      	bne.n	80069f4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069cc:	2300      	movs	r3, #0
 80069ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	62bb      	str	r3, [r7, #40]	; 0x28
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	e115      	b.n	8006c20 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	f040 808a 	bne.w	8006b14 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a06:	d137      	bne.n	8006a78 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a16:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a26:	d113      	bne.n	8006a50 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a36:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a38:	2300      	movs	r3, #0
 8006a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	627b      	str	r3, [r7, #36]	; 0x24
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	e0e7      	b.n	8006c20 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a50:	2300      	movs	r3, #0
 8006a52:	623b      	str	r3, [r7, #32]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	623b      	str	r3, [r7, #32]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	623b      	str	r3, [r7, #32]
 8006a64:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	e0d3      	b.n	8006c20 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	2b08      	cmp	r3, #8
 8006a7c:	d02e      	beq.n	8006adc <I2C_Master_ADDR+0x1b2>
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	2b20      	cmp	r3, #32
 8006a82:	d02b      	beq.n	8006adc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a86:	2b12      	cmp	r3, #18
 8006a88:	d102      	bne.n	8006a90 <I2C_Master_ADDR+0x166>
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d125      	bne.n	8006adc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	d00e      	beq.n	8006ab4 <I2C_Master_ADDR+0x18a>
 8006a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d00b      	beq.n	8006ab4 <I2C_Master_ADDR+0x18a>
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	2b10      	cmp	r3, #16
 8006aa0:	d008      	beq.n	8006ab4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	e007      	b.n	8006ac4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ac2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	61fb      	str	r3, [r7, #28]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	61fb      	str	r3, [r7, #28]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	61fb      	str	r3, [r7, #28]
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	e0a1      	b.n	8006c20 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aec:	2300      	movs	r3, #0
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	61bb      	str	r3, [r7, #24]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	61bb      	str	r3, [r7, #24]
 8006b00:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	e085      	b.n	8006c20 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d14d      	bne.n	8006bba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	d016      	beq.n	8006b52 <I2C_Master_ADDR+0x228>
 8006b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d013      	beq.n	8006b52 <I2C_Master_ADDR+0x228>
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2c:	2b10      	cmp	r3, #16
 8006b2e:	d010      	beq.n	8006b52 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b3e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	e007      	b.n	8006b62 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b60:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b70:	d117      	bne.n	8006ba2 <I2C_Master_ADDR+0x278>
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006b78:	d00b      	beq.n	8006b92 <I2C_Master_ADDR+0x268>
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d008      	beq.n	8006b92 <I2C_Master_ADDR+0x268>
 8006b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b82:	2b08      	cmp	r3, #8
 8006b84:	d005      	beq.n	8006b92 <I2C_Master_ADDR+0x268>
 8006b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b88:	2b10      	cmp	r3, #16
 8006b8a:	d002      	beq.n	8006b92 <I2C_Master_ADDR+0x268>
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d107      	bne.n	8006ba2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685a      	ldr	r2, [r3, #4]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ba0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	617b      	str	r3, [r7, #20]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	e032      	b.n	8006c20 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bc8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bd8:	d117      	bne.n	8006c0a <I2C_Master_ADDR+0x2e0>
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006be0:	d00b      	beq.n	8006bfa <I2C_Master_ADDR+0x2d0>
 8006be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d008      	beq.n	8006bfa <I2C_Master_ADDR+0x2d0>
 8006be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bea:	2b08      	cmp	r3, #8
 8006bec:	d005      	beq.n	8006bfa <I2C_Master_ADDR+0x2d0>
 8006bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf0:	2b10      	cmp	r3, #16
 8006bf2:	d002      	beq.n	8006bfa <I2C_Master_ADDR+0x2d0>
 8006bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	d107      	bne.n	8006c0a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c08:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	613b      	str	r3, [r7, #16]
 8006c1e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006c26:	e00b      	b.n	8006c40 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
}
 8006c3e:	e7ff      	b.n	8006c40 <I2C_Master_ADDR+0x316>
 8006c40:	bf00      	nop
 8006c42:	3744      	adds	r7, #68	; 0x44
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d02b      	beq.n	8006cbe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	781a      	ldrb	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	1c5a      	adds	r2, r3, #1
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d114      	bne.n	8006cbe <I2C_SlaveTransmit_TXE+0x72>
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	2b29      	cmp	r3, #41	; 0x29
 8006c98:	d111      	bne.n	8006cbe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2221      	movs	r2, #33	; 0x21
 8006cae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2228      	movs	r2, #40	; 0x28
 8006cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7ff f9e7 	bl	800608c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006cbe:	bf00      	nop
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b083      	sub	sp, #12
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d011      	beq.n	8006cfc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	781a      	ldrb	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d02c      	beq.n	8006d7c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	691a      	ldr	r2, [r3, #16]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d114      	bne.n	8006d7c <I2C_SlaveReceive_RXNE+0x74>
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	2b2a      	cmp	r3, #42	; 0x2a
 8006d56:	d111      	bne.n	8006d7c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d66:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2222      	movs	r2, #34	; 0x22
 8006d6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2228      	movs	r2, #40	; 0x28
 8006d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff f992 	bl	80060a0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006d7c:	bf00      	nop
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d012      	beq.n	8006dbc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691a      	ldr	r2, [r3, #16]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006de2:	2b28      	cmp	r3, #40	; 0x28
 8006de4:	d127      	bne.n	8006e36 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006df4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	089b      	lsrs	r3, r3, #2
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006e02:	2301      	movs	r3, #1
 8006e04:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	09db      	lsrs	r3, r3, #7
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d103      	bne.n	8006e1a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	81bb      	strh	r3, [r7, #12]
 8006e18:	e002      	b.n	8006e20 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006e28:	89ba      	ldrh	r2, [r7, #12]
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff f940 	bl	80060b4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006e34:	e00e      	b.n	8006e54 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e36:	2300      	movs	r3, #0
 8006e38:	60bb      	str	r3, [r7, #8]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	60bb      	str	r3, [r7, #8]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	60bb      	str	r3, [r7, #8]
 8006e4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006e54:	bf00      	nop
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006e7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60bb      	str	r3, [r7, #8]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	60bb      	str	r3, [r7, #8]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 0201 	orr.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb8:	d172      	bne.n	8006fa0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
 8006ebc:	2b22      	cmp	r3, #34	; 0x22
 8006ebe:	d002      	beq.n	8006ec6 <I2C_Slave_STOPF+0x6a>
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ec4:	d135      	bne.n	8006f32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d005      	beq.n	8006eea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	f043 0204 	orr.w	r2, r3, #4
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ef8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fd ff8c 	bl	8004e1c <HAL_DMA_GetState>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d049      	beq.n	8006f9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f0e:	4a69      	ldr	r2, [pc, #420]	; (80070b4 <I2C_Slave_STOPF+0x258>)
 8006f10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fd fdd4 	bl	8004ac4 <HAL_DMA_Abort_IT>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d03d      	beq.n	8006f9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f30:	e035      	b.n	8006f9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	b29a      	uxth	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d005      	beq.n	8006f56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	f043 0204 	orr.w	r2, r3, #4
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fd ff56 	bl	8004e1c <HAL_DMA_GetState>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d014      	beq.n	8006fa0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7a:	4a4e      	ldr	r2, [pc, #312]	; (80070b4 <I2C_Slave_STOPF+0x258>)
 8006f7c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fd fd9e 	bl	8004ac4 <HAL_DMA_Abort_IT>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d008      	beq.n	8006fa0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f98:	4610      	mov	r0, r2
 8006f9a:	4798      	blx	r3
 8006f9c:	e000      	b.n	8006fa0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d03e      	beq.n	8007028 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	f003 0304 	and.w	r3, r3, #4
 8006fb4:	2b04      	cmp	r3, #4
 8006fb6:	d112      	bne.n	8006fde <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691a      	ldr	r2, [r3, #16]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	b2d2      	uxtb	r2, r2
 8006fc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	d112      	bne.n	8007012 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691a      	ldr	r2, [r3, #16]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	b2d2      	uxtb	r2, r2
 8006ff8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	1c5a      	adds	r2, r3, #1
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007008:	b29b      	uxth	r3, r3
 800700a:	3b01      	subs	r3, #1
 800700c:	b29a      	uxth	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007016:	b29b      	uxth	r3, r3
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007020:	f043 0204 	orr.w	r2, r3, #4
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f8b3 	bl	800719c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007036:	e039      	b.n	80070ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007038:	7bfb      	ldrb	r3, [r7, #15]
 800703a:	2b2a      	cmp	r3, #42	; 0x2a
 800703c:	d109      	bne.n	8007052 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2228      	movs	r2, #40	; 0x28
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7ff f827 	bl	80060a0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b28      	cmp	r3, #40	; 0x28
 800705c:	d111      	bne.n	8007082 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a15      	ldr	r2, [pc, #84]	; (80070b8 <I2C_Slave_STOPF+0x25c>)
 8007062:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2220      	movs	r2, #32
 800706e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7ff f828 	bl	80060d0 <HAL_I2C_ListenCpltCallback>
}
 8007080:	e014      	b.n	80070ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007086:	2b22      	cmp	r3, #34	; 0x22
 8007088:	d002      	beq.n	8007090 <I2C_Slave_STOPF+0x234>
 800708a:	7bfb      	ldrb	r3, [r7, #15]
 800708c:	2b22      	cmp	r3, #34	; 0x22
 800708e:	d10d      	bne.n	80070ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2220      	movs	r2, #32
 800709a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7fe fffa 	bl	80060a0 <HAL_I2C_SlaveRxCpltCallback>
}
 80070ac:	bf00      	nop
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	080076a1 	.word	0x080076a1
 80070b8:	ffff0000 	.word	0xffff0000

080070bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d002      	beq.n	80070de <I2C_Slave_AF+0x22>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2b20      	cmp	r3, #32
 80070dc:	d129      	bne.n	8007132 <I2C_Slave_AF+0x76>
 80070de:	7bfb      	ldrb	r3, [r7, #15]
 80070e0:	2b28      	cmp	r3, #40	; 0x28
 80070e2:	d126      	bne.n	8007132 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a2c      	ldr	r2, [pc, #176]	; (8007198 <I2C_Slave_AF+0xdc>)
 80070e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80070f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007102:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007112:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7fe ffd0 	bl	80060d0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007130:	e02e      	b.n	8007190 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007132:	7bfb      	ldrb	r3, [r7, #15]
 8007134:	2b21      	cmp	r3, #33	; 0x21
 8007136:	d126      	bne.n	8007186 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a17      	ldr	r2, [pc, #92]	; (8007198 <I2C_Slave_AF+0xdc>)
 800713c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2221      	movs	r2, #33	; 0x21
 8007142:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2220      	movs	r2, #32
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007162:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800716c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800717c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fe ff84 	bl	800608c <HAL_I2C_SlaveTxCpltCallback>
}
 8007184:	e004      	b.n	8007190 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800718e:	615a      	str	r2, [r3, #20]
}
 8007190:	bf00      	nop
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	ffff0000 	.word	0xffff0000

0800719c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80071b4:	7bbb      	ldrb	r3, [r7, #14]
 80071b6:	2b10      	cmp	r3, #16
 80071b8:	d002      	beq.n	80071c0 <I2C_ITError+0x24>
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	2b40      	cmp	r3, #64	; 0x40
 80071be:	d10a      	bne.n	80071d6 <I2C_ITError+0x3a>
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
 80071c2:	2b22      	cmp	r3, #34	; 0x22
 80071c4:	d107      	bne.n	80071d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
 80071d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80071dc:	2b28      	cmp	r3, #40	; 0x28
 80071de:	d107      	bne.n	80071f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2228      	movs	r2, #40	; 0x28
 80071ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80071ee:	e015      	b.n	800721c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071fe:	d00a      	beq.n	8007216 <I2C_ITError+0x7a>
 8007200:	7bfb      	ldrb	r3, [r7, #15]
 8007202:	2b60      	cmp	r3, #96	; 0x60
 8007204:	d007      	beq.n	8007216 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2220      	movs	r2, #32
 800720a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800722a:	d162      	bne.n	80072f2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800723a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b01      	cmp	r3, #1
 8007248:	d020      	beq.n	800728c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724e:	4a6a      	ldr	r2, [pc, #424]	; (80073f8 <I2C_ITError+0x25c>)
 8007250:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007256:	4618      	mov	r0, r3
 8007258:	f7fd fc34 	bl	8004ac4 <HAL_DMA_Abort_IT>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	f000 8089 	beq.w	8007376 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0201 	bic.w	r2, r2, #1
 8007272:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2220      	movs	r2, #32
 8007278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007286:	4610      	mov	r0, r2
 8007288:	4798      	blx	r3
 800728a:	e074      	b.n	8007376 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007290:	4a59      	ldr	r2, [pc, #356]	; (80073f8 <I2C_ITError+0x25c>)
 8007292:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007298:	4618      	mov	r0, r3
 800729a:	f7fd fc13 	bl	8004ac4 <HAL_DMA_Abort_IT>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d068      	beq.n	8007376 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ae:	2b40      	cmp	r3, #64	; 0x40
 80072b0:	d10b      	bne.n	80072ca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691a      	ldr	r2, [r3, #16]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	b2d2      	uxtb	r2, r2
 80072be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 0201 	bic.w	r2, r2, #1
 80072d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2220      	movs	r2, #32
 80072de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072ec:	4610      	mov	r0, r2
 80072ee:	4798      	blx	r3
 80072f0:	e041      	b.n	8007376 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b60      	cmp	r3, #96	; 0x60
 80072fc:	d125      	bne.n	800734a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2220      	movs	r2, #32
 8007302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007316:	2b40      	cmp	r3, #64	; 0x40
 8007318:	d10b      	bne.n	8007332 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691a      	ldr	r2, [r3, #16]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	b2d2      	uxtb	r2, r2
 8007326:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	1c5a      	adds	r2, r3, #1
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0201 	bic.w	r2, r2, #1
 8007340:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7fe feec 	bl	8006120 <HAL_I2C_AbortCpltCallback>
 8007348:	e015      	b.n	8007376 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007354:	2b40      	cmp	r3, #64	; 0x40
 8007356:	d10b      	bne.n	8007370 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	691a      	ldr	r2, [r3, #16]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	b2d2      	uxtb	r2, r2
 8007364:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7fe fecb 	bl	800610c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10e      	bne.n	80073a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800738c:	2b00      	cmp	r3, #0
 800738e:	d109      	bne.n	80073a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007396:	2b00      	cmp	r3, #0
 8007398:	d104      	bne.n	80073a4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d007      	beq.n	80073b4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d113      	bne.n	80073f0 <I2C_ITError+0x254>
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	2b28      	cmp	r3, #40	; 0x28
 80073cc:	d110      	bne.n	80073f0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <I2C_ITError+0x260>)
 80073d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2220      	movs	r2, #32
 80073de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fe fe70 	bl	80060d0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80073f0:	bf00      	nop
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	080076a1 	.word	0x080076a1
 80073fc:	ffff0000 	.word	0xffff0000

08007400 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af02      	add	r7, sp, #8
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	607a      	str	r2, [r7, #4]
 800740a:	603b      	str	r3, [r7, #0]
 800740c:	460b      	mov	r3, r1
 800740e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b08      	cmp	r3, #8
 800741a:	d006      	beq.n	800742a <I2C_MasterRequestWrite+0x2a>
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d003      	beq.n	800742a <I2C_MasterRequestWrite+0x2a>
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007428:	d108      	bne.n	800743c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	e00b      	b.n	8007454 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	2b12      	cmp	r3, #18
 8007442:	d107      	bne.n	8007454 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007452:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 f9c5 	bl	80077f0 <I2C_WaitOnFlagUntilTimeout>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00d      	beq.n	8007488 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800747a:	d103      	bne.n	8007484 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007482:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e035      	b.n	80074f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007490:	d108      	bne.n	80074a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007492:	897b      	ldrh	r3, [r7, #10]
 8007494:	b2db      	uxtb	r3, r3
 8007496:	461a      	mov	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80074a0:	611a      	str	r2, [r3, #16]
 80074a2:	e01b      	b.n	80074dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80074a4:	897b      	ldrh	r3, [r7, #10]
 80074a6:	11db      	asrs	r3, r3, #7
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	f003 0306 	and.w	r3, r3, #6
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	f063 030f 	orn	r3, r3, #15
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	490e      	ldr	r1, [pc, #56]	; (80074fc <I2C_MasterRequestWrite+0xfc>)
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 f9eb 	bl	800789e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d001      	beq.n	80074d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e010      	b.n	80074f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80074d2:	897b      	ldrh	r3, [r7, #10]
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	4907      	ldr	r1, [pc, #28]	; (8007500 <I2C_MasterRequestWrite+0x100>)
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 f9db 	bl	800789e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e000      	b.n	80074f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3718      	adds	r7, #24
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	00010008 	.word	0x00010008
 8007500:	00010002 	.word	0x00010002

08007504 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af02      	add	r7, sp, #8
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	607a      	str	r2, [r7, #4]
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	460b      	mov	r3, r1
 8007512:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007518:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007528:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b08      	cmp	r3, #8
 800752e:	d006      	beq.n	800753e <I2C_MasterRequestRead+0x3a>
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d003      	beq.n	800753e <I2C_MasterRequestRead+0x3a>
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800753c:	d108      	bne.n	8007550 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681a      	ldr	r2, [r3, #0]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	e00b      	b.n	8007568 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007554:	2b11      	cmp	r3, #17
 8007556:	d107      	bne.n	8007568 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007566:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 f93b 	bl	80077f0 <I2C_WaitOnFlagUntilTimeout>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00d      	beq.n	800759c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800758e:	d103      	bne.n	8007598 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007596:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e079      	b.n	8007690 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075a4:	d108      	bne.n	80075b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80075a6:	897b      	ldrh	r3, [r7, #10]
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	f043 0301 	orr.w	r3, r3, #1
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	611a      	str	r2, [r3, #16]
 80075b6:	e05f      	b.n	8007678 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80075b8:	897b      	ldrh	r3, [r7, #10]
 80075ba:	11db      	asrs	r3, r3, #7
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	f003 0306 	and.w	r3, r3, #6
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	f063 030f 	orn	r3, r3, #15
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	4930      	ldr	r1, [pc, #192]	; (8007698 <I2C_MasterRequestRead+0x194>)
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 f961 	bl	800789e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d001      	beq.n	80075e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e054      	b.n	8007690 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80075e6:	897b      	ldrh	r3, [r7, #10]
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	4929      	ldr	r1, [pc, #164]	; (800769c <I2C_MasterRequestRead+0x198>)
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 f951 	bl	800789e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e044      	b.n	8007690 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007606:	2300      	movs	r3, #0
 8007608:	613b      	str	r3, [r7, #16]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	613b      	str	r3, [r7, #16]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800762a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 f8d9 	bl	80077f0 <I2C_WaitOnFlagUntilTimeout>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00d      	beq.n	8007660 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800764e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007652:	d103      	bne.n	800765c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800765a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e017      	b.n	8007690 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007660:	897b      	ldrh	r3, [r7, #10]
 8007662:	11db      	asrs	r3, r3, #7
 8007664:	b2db      	uxtb	r3, r3
 8007666:	f003 0306 	and.w	r3, r3, #6
 800766a:	b2db      	uxtb	r3, r3
 800766c:	f063 030e 	orn	r3, r3, #14
 8007670:	b2da      	uxtb	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	4907      	ldr	r1, [pc, #28]	; (800769c <I2C_MasterRequestRead+0x198>)
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 f90d 	bl	800789e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e000      	b.n	8007690 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3718      	adds	r7, #24
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	00010008 	.word	0x00010008
 800769c:	00010002 	.word	0x00010002

080076a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80076ba:	4b4b      	ldr	r3, [pc, #300]	; (80077e8 <I2C_DMAAbort+0x148>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	08db      	lsrs	r3, r3, #3
 80076c0:	4a4a      	ldr	r2, [pc, #296]	; (80077ec <I2C_DMAAbort+0x14c>)
 80076c2:	fba2 2303 	umull	r2, r3, r2, r3
 80076c6:	0a1a      	lsrs	r2, r3, #8
 80076c8:	4613      	mov	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	00da      	lsls	r2, r3, #3
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d106      	bne.n	80076e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076de:	f043 0220 	orr.w	r2, r3, #32
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80076e6:	e00a      	b.n	80076fe <I2C_DMAAbort+0x5e>
    }
    count--;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076fc:	d0ea      	beq.n	80076d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007702:	2b00      	cmp	r3, #0
 8007704:	d003      	beq.n	800770e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770a:	2200      	movs	r2, #0
 800770c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	2200      	movs	r2, #0
 800771c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800772c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2200      	movs	r2, #0
 8007732:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007740:	2200      	movs	r2, #0
 8007742:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007750:	2200      	movs	r2, #0
 8007752:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 0201 	bic.w	r2, r2, #1
 8007762:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b60      	cmp	r3, #96	; 0x60
 800776e:	d10e      	bne.n	800778e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2220      	movs	r2, #32
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	2200      	movs	r2, #0
 8007784:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007786:	6978      	ldr	r0, [r7, #20]
 8007788:	f7fe fcca 	bl	8006120 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800778c:	e027      	b.n	80077de <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800778e:	7cfb      	ldrb	r3, [r7, #19]
 8007790:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007794:	2b28      	cmp	r3, #40	; 0x28
 8007796:	d117      	bne.n	80077c8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0201 	orr.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2200      	movs	r2, #0
 80077bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2228      	movs	r2, #40	; 0x28
 80077c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80077c6:	e007      	b.n	80077d8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2220      	movs	r2, #32
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80077d8:	6978      	ldr	r0, [r7, #20]
 80077da:	f7fe fc97 	bl	800610c <HAL_I2C_ErrorCallback>
}
 80077de:	bf00      	nop
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20000004 	.word	0x20000004
 80077ec:	14f8b589 	.word	0x14f8b589

080077f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	603b      	str	r3, [r7, #0]
 80077fc:	4613      	mov	r3, r2
 80077fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007800:	e025      	b.n	800784e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007808:	d021      	beq.n	800784e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800780a:	f7fc fdbf 	bl	800438c <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d302      	bcc.n	8007820 <I2C_WaitOnFlagUntilTimeout+0x30>
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d116      	bne.n	800784e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2220      	movs	r2, #32
 800782a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783a:	f043 0220 	orr.w	r2, r3, #32
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e023      	b.n	8007896 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	0c1b      	lsrs	r3, r3, #16
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b01      	cmp	r3, #1
 8007856:	d10d      	bne.n	8007874 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	43da      	mvns	r2, r3
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	4013      	ands	r3, r2
 8007864:	b29b      	uxth	r3, r3
 8007866:	2b00      	cmp	r3, #0
 8007868:	bf0c      	ite	eq
 800786a:	2301      	moveq	r3, #1
 800786c:	2300      	movne	r3, #0
 800786e:	b2db      	uxtb	r3, r3
 8007870:	461a      	mov	r2, r3
 8007872:	e00c      	b.n	800788e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	43da      	mvns	r2, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	4013      	ands	r3, r2
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	bf0c      	ite	eq
 8007886:	2301      	moveq	r3, #1
 8007888:	2300      	movne	r3, #0
 800788a:	b2db      	uxtb	r3, r3
 800788c:	461a      	mov	r2, r3
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	429a      	cmp	r2, r3
 8007892:	d0b6      	beq.n	8007802 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b084      	sub	sp, #16
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	60f8      	str	r0, [r7, #12]
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	607a      	str	r2, [r7, #4]
 80078aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80078ac:	e051      	b.n	8007952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078bc:	d123      	bne.n	8007906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80078d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2200      	movs	r2, #0
 80078dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2220      	movs	r2, #32
 80078e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	f043 0204 	orr.w	r2, r3, #4
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e046      	b.n	8007994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800790c:	d021      	beq.n	8007952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800790e:	f7fc fd3d 	bl	800438c <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	429a      	cmp	r2, r3
 800791c:	d302      	bcc.n	8007924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d116      	bne.n	8007952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2200      	movs	r2, #0
 8007928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2220      	movs	r2, #32
 800792e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793e:	f043 0220 	orr.w	r2, r3, #32
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e020      	b.n	8007994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	0c1b      	lsrs	r3, r3, #16
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b01      	cmp	r3, #1
 800795a:	d10c      	bne.n	8007976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	43da      	mvns	r2, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	4013      	ands	r3, r2
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	bf14      	ite	ne
 800796e:	2301      	movne	r3, #1
 8007970:	2300      	moveq	r3, #0
 8007972:	b2db      	uxtb	r3, r3
 8007974:	e00b      	b.n	800798e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	43da      	mvns	r2, r3
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	4013      	ands	r3, r2
 8007982:	b29b      	uxth	r3, r3
 8007984:	2b00      	cmp	r3, #0
 8007986:	bf14      	ite	ne
 8007988:	2301      	movne	r3, #1
 800798a:	2300      	moveq	r3, #0
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b00      	cmp	r3, #0
 8007990:	d18d      	bne.n	80078ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80079a8:	e02d      	b.n	8007a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 f900 	bl	8007bb0 <I2C_IsAcknowledgeFailed>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e02d      	b.n	8007a16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079c0:	d021      	beq.n	8007a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079c2:	f7fc fce3 	bl	800438c <HAL_GetTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d302      	bcc.n	80079d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d116      	bne.n	8007a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f2:	f043 0220 	orr.w	r2, r3, #32
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e007      	b.n	8007a16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a10:	2b80      	cmp	r3, #128	; 0x80
 8007a12:	d1ca      	bne.n	80079aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b084      	sub	sp, #16
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	60f8      	str	r0, [r7, #12]
 8007a26:	60b9      	str	r1, [r7, #8]
 8007a28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a2a:	e02d      	b.n	8007a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f8bf 	bl	8007bb0 <I2C_IsAcknowledgeFailed>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d001      	beq.n	8007a3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e02d      	b.n	8007a98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a42:	d021      	beq.n	8007a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a44:	f7fc fca2 	bl	800438c <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d302      	bcc.n	8007a5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d116      	bne.n	8007a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2220      	movs	r2, #32
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	f043 0220 	orr.w	r2, r3, #32
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e007      	b.n	8007a98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	f003 0304 	and.w	r3, r3, #4
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d1ca      	bne.n	8007a2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3710      	adds	r7, #16
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007aac:	4b13      	ldr	r3, [pc, #76]	; (8007afc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	08db      	lsrs	r3, r3, #3
 8007ab2:	4a13      	ldr	r2, [pc, #76]	; (8007b00 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab8:	0a1a      	lsrs	r2, r3, #8
 8007aba:	4613      	mov	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d107      	bne.n	8007ade <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	f043 0220 	orr.w	r2, r3, #32
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e008      	b.n	8007af0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aec:	d0e9      	beq.n	8007ac2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	20000004 	.word	0x20000004
 8007b00:	14f8b589 	.word	0x14f8b589

08007b04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b10:	e042      	b.n	8007b98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	f003 0310 	and.w	r3, r3, #16
 8007b1c:	2b10      	cmp	r3, #16
 8007b1e:	d119      	bne.n	8007b54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f06f 0210 	mvn.w	r2, #16
 8007b28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2220      	movs	r2, #32
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	e029      	b.n	8007ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b54:	f7fc fc1a 	bl	800438c <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d302      	bcc.n	8007b6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d116      	bne.n	8007b98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2220      	movs	r2, #32
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b84:	f043 0220 	orr.w	r2, r3, #32
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e007      	b.n	8007ba8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba2:	2b40      	cmp	r3, #64	; 0x40
 8007ba4:	d1b5      	bne.n	8007b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bc6:	d11b      	bne.n	8007c00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bec:	f043 0204 	orr.w	r2, r3, #4
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e000      	b.n	8007c02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007c1e:	d103      	bne.n	8007c28 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007c26:	e007      	b.n	8007c38 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007c30:	d102      	bne.n	8007c38 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2208      	movs	r2, #8
 8007c36:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e267      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d075      	beq.n	8007d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c62:	4b88      	ldr	r3, [pc, #544]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f003 030c 	and.w	r3, r3, #12
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d00c      	beq.n	8007c88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c6e:	4b85      	ldr	r3, [pc, #532]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007c76:	2b08      	cmp	r3, #8
 8007c78:	d112      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c7a:	4b82      	ldr	r3, [pc, #520]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c86:	d10b      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c88:	4b7e      	ldr	r3, [pc, #504]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d05b      	beq.n	8007d4c <HAL_RCC_OscConfig+0x108>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d157      	bne.n	8007d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e242      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca8:	d106      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x74>
 8007caa:	4b76      	ldr	r3, [pc, #472]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a75      	ldr	r2, [pc, #468]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cb4:	6013      	str	r3, [r2, #0]
 8007cb6:	e01d      	b.n	8007cf4 <HAL_RCC_OscConfig+0xb0>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007cc0:	d10c      	bne.n	8007cdc <HAL_RCC_OscConfig+0x98>
 8007cc2:	4b70      	ldr	r3, [pc, #448]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a6f      	ldr	r2, [pc, #444]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ccc:	6013      	str	r3, [r2, #0]
 8007cce:	4b6d      	ldr	r3, [pc, #436]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a6c      	ldr	r2, [pc, #432]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cd8:	6013      	str	r3, [r2, #0]
 8007cda:	e00b      	b.n	8007cf4 <HAL_RCC_OscConfig+0xb0>
 8007cdc:	4b69      	ldr	r3, [pc, #420]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a68      	ldr	r2, [pc, #416]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ce6:	6013      	str	r3, [r2, #0]
 8007ce8:	4b66      	ldr	r3, [pc, #408]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a65      	ldr	r2, [pc, #404]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d013      	beq.n	8007d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cfc:	f7fc fb46 	bl	800438c <HAL_GetTick>
 8007d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d02:	e008      	b.n	8007d16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d04:	f7fc fb42 	bl	800438c <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b64      	cmp	r3, #100	; 0x64
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e207      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d16:	4b5b      	ldr	r3, [pc, #364]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0f0      	beq.n	8007d04 <HAL_RCC_OscConfig+0xc0>
 8007d22:	e014      	b.n	8007d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d24:	f7fc fb32 	bl	800438c <HAL_GetTick>
 8007d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d2a:	e008      	b.n	8007d3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007d2c:	f7fc fb2e 	bl	800438c <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	2b64      	cmp	r3, #100	; 0x64
 8007d38:	d901      	bls.n	8007d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e1f3      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007d3e:	4b51      	ldr	r3, [pc, #324]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1f0      	bne.n	8007d2c <HAL_RCC_OscConfig+0xe8>
 8007d4a:	e000      	b.n	8007d4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d063      	beq.n	8007e22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d5a:	4b4a      	ldr	r3, [pc, #296]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f003 030c 	and.w	r3, r3, #12
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00b      	beq.n	8007d7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d66:	4b47      	ldr	r3, [pc, #284]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007d6e:	2b08      	cmp	r3, #8
 8007d70:	d11c      	bne.n	8007dac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d72:	4b44      	ldr	r3, [pc, #272]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d116      	bne.n	8007dac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d7e:	4b41      	ldr	r3, [pc, #260]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0302 	and.w	r3, r3, #2
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d005      	beq.n	8007d96 <HAL_RCC_OscConfig+0x152>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d001      	beq.n	8007d96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007d92:	2301      	movs	r3, #1
 8007d94:	e1c7      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d96:	4b3b      	ldr	r3, [pc, #236]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	4937      	ldr	r1, [pc, #220]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007daa:	e03a      	b.n	8007e22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d020      	beq.n	8007df6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007db4:	4b34      	ldr	r3, [pc, #208]	; (8007e88 <HAL_RCC_OscConfig+0x244>)
 8007db6:	2201      	movs	r2, #1
 8007db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dba:	f7fc fae7 	bl	800438c <HAL_GetTick>
 8007dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dc0:	e008      	b.n	8007dd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dc2:	f7fc fae3 	bl	800438c <HAL_GetTick>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d901      	bls.n	8007dd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e1a8      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dd4:	4b2b      	ldr	r3, [pc, #172]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0302 	and.w	r3, r3, #2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d0f0      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007de0:	4b28      	ldr	r3, [pc, #160]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	4925      	ldr	r1, [pc, #148]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	600b      	str	r3, [r1, #0]
 8007df4:	e015      	b.n	8007e22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007df6:	4b24      	ldr	r3, [pc, #144]	; (8007e88 <HAL_RCC_OscConfig+0x244>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dfc:	f7fc fac6 	bl	800438c <HAL_GetTick>
 8007e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e02:	e008      	b.n	8007e16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007e04:	f7fc fac2 	bl	800438c <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	2b02      	cmp	r3, #2
 8007e10:	d901      	bls.n	8007e16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e187      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007e16:	4b1b      	ldr	r3, [pc, #108]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1f0      	bne.n	8007e04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0308 	and.w	r3, r3, #8
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d036      	beq.n	8007e9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d016      	beq.n	8007e64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e36:	4b15      	ldr	r3, [pc, #84]	; (8007e8c <HAL_RCC_OscConfig+0x248>)
 8007e38:	2201      	movs	r2, #1
 8007e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e3c:	f7fc faa6 	bl	800438c <HAL_GetTick>
 8007e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e42:	e008      	b.n	8007e56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e44:	f7fc faa2 	bl	800438c <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d901      	bls.n	8007e56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007e52:	2303      	movs	r3, #3
 8007e54:	e167      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e56:	4b0b      	ldr	r3, [pc, #44]	; (8007e84 <HAL_RCC_OscConfig+0x240>)
 8007e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d0f0      	beq.n	8007e44 <HAL_RCC_OscConfig+0x200>
 8007e62:	e01b      	b.n	8007e9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e64:	4b09      	ldr	r3, [pc, #36]	; (8007e8c <HAL_RCC_OscConfig+0x248>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e6a:	f7fc fa8f 	bl	800438c <HAL_GetTick>
 8007e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e70:	e00e      	b.n	8007e90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007e72:	f7fc fa8b 	bl	800438c <HAL_GetTick>
 8007e76:	4602      	mov	r2, r0
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d907      	bls.n	8007e90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e150      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
 8007e84:	40023800 	.word	0x40023800
 8007e88:	42470000 	.word	0x42470000
 8007e8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e90:	4b88      	ldr	r3, [pc, #544]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e94:	f003 0302 	and.w	r3, r3, #2
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1ea      	bne.n	8007e72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 8097 	beq.w	8007fd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007eae:	4b81      	ldr	r3, [pc, #516]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10f      	bne.n	8007eda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007eba:	2300      	movs	r3, #0
 8007ebc:	60bb      	str	r3, [r7, #8]
 8007ebe:	4b7d      	ldr	r3, [pc, #500]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	4a7c      	ldr	r2, [pc, #496]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8007eca:	4b7a      	ldr	r3, [pc, #488]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ed2:	60bb      	str	r3, [r7, #8]
 8007ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007eda:	4b77      	ldr	r3, [pc, #476]	; (80080b8 <HAL_RCC_OscConfig+0x474>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d118      	bne.n	8007f18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ee6:	4b74      	ldr	r3, [pc, #464]	; (80080b8 <HAL_RCC_OscConfig+0x474>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a73      	ldr	r2, [pc, #460]	; (80080b8 <HAL_RCC_OscConfig+0x474>)
 8007eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ef2:	f7fc fa4b 	bl	800438c <HAL_GetTick>
 8007ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ef8:	e008      	b.n	8007f0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007efa:	f7fc fa47 	bl	800438c <HAL_GetTick>
 8007efe:	4602      	mov	r2, r0
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	1ad3      	subs	r3, r2, r3
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d901      	bls.n	8007f0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e10c      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f0c:	4b6a      	ldr	r3, [pc, #424]	; (80080b8 <HAL_RCC_OscConfig+0x474>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d0f0      	beq.n	8007efa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d106      	bne.n	8007f2e <HAL_RCC_OscConfig+0x2ea>
 8007f20:	4b64      	ldr	r3, [pc, #400]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f24:	4a63      	ldr	r2, [pc, #396]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f26:	f043 0301 	orr.w	r3, r3, #1
 8007f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f2c:	e01c      	b.n	8007f68 <HAL_RCC_OscConfig+0x324>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	2b05      	cmp	r3, #5
 8007f34:	d10c      	bne.n	8007f50 <HAL_RCC_OscConfig+0x30c>
 8007f36:	4b5f      	ldr	r3, [pc, #380]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f3a:	4a5e      	ldr	r2, [pc, #376]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f3c:	f043 0304 	orr.w	r3, r3, #4
 8007f40:	6713      	str	r3, [r2, #112]	; 0x70
 8007f42:	4b5c      	ldr	r3, [pc, #368]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f46:	4a5b      	ldr	r2, [pc, #364]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f48:	f043 0301 	orr.w	r3, r3, #1
 8007f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8007f4e:	e00b      	b.n	8007f68 <HAL_RCC_OscConfig+0x324>
 8007f50:	4b58      	ldr	r3, [pc, #352]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f54:	4a57      	ldr	r2, [pc, #348]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f56:	f023 0301 	bic.w	r3, r3, #1
 8007f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f5c:	4b55      	ldr	r3, [pc, #340]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f60:	4a54      	ldr	r2, [pc, #336]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f62:	f023 0304 	bic.w	r3, r3, #4
 8007f66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d015      	beq.n	8007f9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f70:	f7fc fa0c 	bl	800438c <HAL_GetTick>
 8007f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f76:	e00a      	b.n	8007f8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f78:	f7fc fa08 	bl	800438c <HAL_GetTick>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	1ad3      	subs	r3, r2, r3
 8007f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d901      	bls.n	8007f8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e0cb      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f8e:	4b49      	ldr	r3, [pc, #292]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f92:	f003 0302 	and.w	r3, r3, #2
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d0ee      	beq.n	8007f78 <HAL_RCC_OscConfig+0x334>
 8007f9a:	e014      	b.n	8007fc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007f9c:	f7fc f9f6 	bl	800438c <HAL_GetTick>
 8007fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fa2:	e00a      	b.n	8007fba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007fa4:	f7fc f9f2 	bl	800438c <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d901      	bls.n	8007fba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e0b5      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fba:	4b3e      	ldr	r3, [pc, #248]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fbe:	f003 0302 	and.w	r3, r3, #2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1ee      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d105      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fcc:	4b39      	ldr	r3, [pc, #228]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	4a38      	ldr	r2, [pc, #224]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 80a1 	beq.w	8008124 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007fe2:	4b34      	ldr	r3, [pc, #208]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f003 030c 	and.w	r3, r3, #12
 8007fea:	2b08      	cmp	r3, #8
 8007fec:	d05c      	beq.n	80080a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d141      	bne.n	800807a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ff6:	4b31      	ldr	r3, [pc, #196]	; (80080bc <HAL_RCC_OscConfig+0x478>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ffc:	f7fc f9c6 	bl	800438c <HAL_GetTick>
 8008000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008002:	e008      	b.n	8008016 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008004:	f7fc f9c2 	bl	800438c <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	2b02      	cmp	r3, #2
 8008010:	d901      	bls.n	8008016 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e087      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008016:	4b27      	ldr	r3, [pc, #156]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1f0      	bne.n	8008004 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	69da      	ldr	r2, [r3, #28]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	431a      	orrs	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	019b      	lsls	r3, r3, #6
 8008032:	431a      	orrs	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008038:	085b      	lsrs	r3, r3, #1
 800803a:	3b01      	subs	r3, #1
 800803c:	041b      	lsls	r3, r3, #16
 800803e:	431a      	orrs	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	061b      	lsls	r3, r3, #24
 8008046:	491b      	ldr	r1, [pc, #108]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 8008048:	4313      	orrs	r3, r2
 800804a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800804c:	4b1b      	ldr	r3, [pc, #108]	; (80080bc <HAL_RCC_OscConfig+0x478>)
 800804e:	2201      	movs	r2, #1
 8008050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008052:	f7fc f99b 	bl	800438c <HAL_GetTick>
 8008056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008058:	e008      	b.n	800806c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800805a:	f7fc f997 	bl	800438c <HAL_GetTick>
 800805e:	4602      	mov	r2, r0
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	2b02      	cmp	r3, #2
 8008066:	d901      	bls.n	800806c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e05c      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800806c:	4b11      	ldr	r3, [pc, #68]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d0f0      	beq.n	800805a <HAL_RCC_OscConfig+0x416>
 8008078:	e054      	b.n	8008124 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800807a:	4b10      	ldr	r3, [pc, #64]	; (80080bc <HAL_RCC_OscConfig+0x478>)
 800807c:	2200      	movs	r2, #0
 800807e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008080:	f7fc f984 	bl	800438c <HAL_GetTick>
 8008084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008086:	e008      	b.n	800809a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008088:	f7fc f980 	bl	800438c <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	2b02      	cmp	r3, #2
 8008094:	d901      	bls.n	800809a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e045      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800809a:	4b06      	ldr	r3, [pc, #24]	; (80080b4 <HAL_RCC_OscConfig+0x470>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1f0      	bne.n	8008088 <HAL_RCC_OscConfig+0x444>
 80080a6:	e03d      	b.n	8008124 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d107      	bne.n	80080c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e038      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
 80080b4:	40023800 	.word	0x40023800
 80080b8:	40007000 	.word	0x40007000
 80080bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80080c0:	4b1b      	ldr	r3, [pc, #108]	; (8008130 <HAL_RCC_OscConfig+0x4ec>)
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d028      	beq.n	8008120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080d8:	429a      	cmp	r2, r3
 80080da:	d121      	bne.n	8008120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d11a      	bne.n	8008120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80080f0:	4013      	ands	r3, r2
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80080f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d111      	bne.n	8008120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008106:	085b      	lsrs	r3, r3, #1
 8008108:	3b01      	subs	r3, #1
 800810a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800810c:	429a      	cmp	r2, r3
 800810e:	d107      	bne.n	8008120 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800811c:	429a      	cmp	r2, r3
 800811e:	d001      	beq.n	8008124 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e000      	b.n	8008126 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	40023800 	.word	0x40023800

08008134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d101      	bne.n	8008148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e0cc      	b.n	80082e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008148:	4b68      	ldr	r3, [pc, #416]	; (80082ec <HAL_RCC_ClockConfig+0x1b8>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 0307 	and.w	r3, r3, #7
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	429a      	cmp	r2, r3
 8008154:	d90c      	bls.n	8008170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008156:	4b65      	ldr	r3, [pc, #404]	; (80082ec <HAL_RCC_ClockConfig+0x1b8>)
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	b2d2      	uxtb	r2, r2
 800815c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800815e:	4b63      	ldr	r3, [pc, #396]	; (80082ec <HAL_RCC_ClockConfig+0x1b8>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0307 	and.w	r3, r3, #7
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	429a      	cmp	r2, r3
 800816a:	d001      	beq.n	8008170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e0b8      	b.n	80082e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0302 	and.w	r3, r3, #2
 8008178:	2b00      	cmp	r3, #0
 800817a:	d020      	beq.n	80081be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0304 	and.w	r3, r3, #4
 8008184:	2b00      	cmp	r3, #0
 8008186:	d005      	beq.n	8008194 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008188:	4b59      	ldr	r3, [pc, #356]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	4a58      	ldr	r2, [pc, #352]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 800818e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008192:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0308 	and.w	r3, r3, #8
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80081a0:	4b53      	ldr	r3, [pc, #332]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	4a52      	ldr	r2, [pc, #328]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80081a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80081aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081ac:	4b50      	ldr	r3, [pc, #320]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	494d      	ldr	r1, [pc, #308]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d044      	beq.n	8008254 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d107      	bne.n	80081e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081d2:	4b47      	ldr	r3, [pc, #284]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d119      	bne.n	8008212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e07f      	b.n	80082e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d003      	beq.n	80081f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80081ee:	2b03      	cmp	r3, #3
 80081f0:	d107      	bne.n	8008202 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081f2:	4b3f      	ldr	r3, [pc, #252]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d109      	bne.n	8008212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e06f      	b.n	80082e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008202:	4b3b      	ldr	r3, [pc, #236]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f003 0302 	and.w	r3, r3, #2
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e067      	b.n	80082e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008212:	4b37      	ldr	r3, [pc, #220]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f023 0203 	bic.w	r2, r3, #3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	4934      	ldr	r1, [pc, #208]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008220:	4313      	orrs	r3, r2
 8008222:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008224:	f7fc f8b2 	bl	800438c <HAL_GetTick>
 8008228:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800822a:	e00a      	b.n	8008242 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800822c:	f7fc f8ae 	bl	800438c <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	f241 3288 	movw	r2, #5000	; 0x1388
 800823a:	4293      	cmp	r3, r2
 800823c:	d901      	bls.n	8008242 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e04f      	b.n	80082e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008242:	4b2b      	ldr	r3, [pc, #172]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f003 020c 	and.w	r2, r3, #12
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	429a      	cmp	r2, r3
 8008252:	d1eb      	bne.n	800822c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008254:	4b25      	ldr	r3, [pc, #148]	; (80082ec <HAL_RCC_ClockConfig+0x1b8>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0307 	and.w	r3, r3, #7
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	429a      	cmp	r2, r3
 8008260:	d20c      	bcs.n	800827c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008262:	4b22      	ldr	r3, [pc, #136]	; (80082ec <HAL_RCC_ClockConfig+0x1b8>)
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	b2d2      	uxtb	r2, r2
 8008268:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800826a:	4b20      	ldr	r3, [pc, #128]	; (80082ec <HAL_RCC_ClockConfig+0x1b8>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	429a      	cmp	r2, r3
 8008276:	d001      	beq.n	800827c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e032      	b.n	80082e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f003 0304 	and.w	r3, r3, #4
 8008284:	2b00      	cmp	r3, #0
 8008286:	d008      	beq.n	800829a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008288:	4b19      	ldr	r3, [pc, #100]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	4916      	ldr	r1, [pc, #88]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 8008296:	4313      	orrs	r3, r2
 8008298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0308 	and.w	r3, r3, #8
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d009      	beq.n	80082ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80082a6:	4b12      	ldr	r3, [pc, #72]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	00db      	lsls	r3, r3, #3
 80082b4:	490e      	ldr	r1, [pc, #56]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80082ba:	f000 f821 	bl	8008300 <HAL_RCC_GetSysClockFreq>
 80082be:	4602      	mov	r2, r0
 80082c0:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <HAL_RCC_ClockConfig+0x1bc>)
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	091b      	lsrs	r3, r3, #4
 80082c6:	f003 030f 	and.w	r3, r3, #15
 80082ca:	490a      	ldr	r1, [pc, #40]	; (80082f4 <HAL_RCC_ClockConfig+0x1c0>)
 80082cc:	5ccb      	ldrb	r3, [r1, r3]
 80082ce:	fa22 f303 	lsr.w	r3, r2, r3
 80082d2:	4a09      	ldr	r2, [pc, #36]	; (80082f8 <HAL_RCC_ClockConfig+0x1c4>)
 80082d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80082d6:	4b09      	ldr	r3, [pc, #36]	; (80082fc <HAL_RCC_ClockConfig+0x1c8>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fb fbf6 	bl	8003acc <HAL_InitTick>

  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	40023c00 	.word	0x40023c00
 80082f0:	40023800 	.word	0x40023800
 80082f4:	0801de38 	.word	0x0801de38
 80082f8:	20000004 	.word	0x20000004
 80082fc:	2000001c 	.word	0x2000001c

08008300 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008304:	b094      	sub	sp, #80	; 0x50
 8008306:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	647b      	str	r3, [r7, #68]	; 0x44
 800830c:	2300      	movs	r3, #0
 800830e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008310:	2300      	movs	r3, #0
 8008312:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008318:	4b79      	ldr	r3, [pc, #484]	; (8008500 <HAL_RCC_GetSysClockFreq+0x200>)
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f003 030c 	and.w	r3, r3, #12
 8008320:	2b08      	cmp	r3, #8
 8008322:	d00d      	beq.n	8008340 <HAL_RCC_GetSysClockFreq+0x40>
 8008324:	2b08      	cmp	r3, #8
 8008326:	f200 80e1 	bhi.w	80084ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <HAL_RCC_GetSysClockFreq+0x34>
 800832e:	2b04      	cmp	r3, #4
 8008330:	d003      	beq.n	800833a <HAL_RCC_GetSysClockFreq+0x3a>
 8008332:	e0db      	b.n	80084ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008334:	4b73      	ldr	r3, [pc, #460]	; (8008504 <HAL_RCC_GetSysClockFreq+0x204>)
 8008336:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008338:	e0db      	b.n	80084f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800833a:	4b73      	ldr	r3, [pc, #460]	; (8008508 <HAL_RCC_GetSysClockFreq+0x208>)
 800833c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800833e:	e0d8      	b.n	80084f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008340:	4b6f      	ldr	r3, [pc, #444]	; (8008500 <HAL_RCC_GetSysClockFreq+0x200>)
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008348:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800834a:	4b6d      	ldr	r3, [pc, #436]	; (8008500 <HAL_RCC_GetSysClockFreq+0x200>)
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008352:	2b00      	cmp	r3, #0
 8008354:	d063      	beq.n	800841e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008356:	4b6a      	ldr	r3, [pc, #424]	; (8008500 <HAL_RCC_GetSysClockFreq+0x200>)
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	099b      	lsrs	r3, r3, #6
 800835c:	2200      	movs	r2, #0
 800835e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008360:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008368:	633b      	str	r3, [r7, #48]	; 0x30
 800836a:	2300      	movs	r3, #0
 800836c:	637b      	str	r3, [r7, #52]	; 0x34
 800836e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008372:	4622      	mov	r2, r4
 8008374:	462b      	mov	r3, r5
 8008376:	f04f 0000 	mov.w	r0, #0
 800837a:	f04f 0100 	mov.w	r1, #0
 800837e:	0159      	lsls	r1, r3, #5
 8008380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008384:	0150      	lsls	r0, r2, #5
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4621      	mov	r1, r4
 800838c:	1a51      	subs	r1, r2, r1
 800838e:	6139      	str	r1, [r7, #16]
 8008390:	4629      	mov	r1, r5
 8008392:	eb63 0301 	sbc.w	r3, r3, r1
 8008396:	617b      	str	r3, [r7, #20]
 8008398:	f04f 0200 	mov.w	r2, #0
 800839c:	f04f 0300 	mov.w	r3, #0
 80083a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80083a4:	4659      	mov	r1, fp
 80083a6:	018b      	lsls	r3, r1, #6
 80083a8:	4651      	mov	r1, sl
 80083aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80083ae:	4651      	mov	r1, sl
 80083b0:	018a      	lsls	r2, r1, #6
 80083b2:	4651      	mov	r1, sl
 80083b4:	ebb2 0801 	subs.w	r8, r2, r1
 80083b8:	4659      	mov	r1, fp
 80083ba:	eb63 0901 	sbc.w	r9, r3, r1
 80083be:	f04f 0200 	mov.w	r2, #0
 80083c2:	f04f 0300 	mov.w	r3, #0
 80083c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80083ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80083ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80083d2:	4690      	mov	r8, r2
 80083d4:	4699      	mov	r9, r3
 80083d6:	4623      	mov	r3, r4
 80083d8:	eb18 0303 	adds.w	r3, r8, r3
 80083dc:	60bb      	str	r3, [r7, #8]
 80083de:	462b      	mov	r3, r5
 80083e0:	eb49 0303 	adc.w	r3, r9, r3
 80083e4:	60fb      	str	r3, [r7, #12]
 80083e6:	f04f 0200 	mov.w	r2, #0
 80083ea:	f04f 0300 	mov.w	r3, #0
 80083ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80083f2:	4629      	mov	r1, r5
 80083f4:	024b      	lsls	r3, r1, #9
 80083f6:	4621      	mov	r1, r4
 80083f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80083fc:	4621      	mov	r1, r4
 80083fe:	024a      	lsls	r2, r1, #9
 8008400:	4610      	mov	r0, r2
 8008402:	4619      	mov	r1, r3
 8008404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008406:	2200      	movs	r2, #0
 8008408:	62bb      	str	r3, [r7, #40]	; 0x28
 800840a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800840c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008410:	f7f8 fca2 	bl	8000d58 <__aeabi_uldivmod>
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4613      	mov	r3, r2
 800841a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800841c:	e058      	b.n	80084d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800841e:	4b38      	ldr	r3, [pc, #224]	; (8008500 <HAL_RCC_GetSysClockFreq+0x200>)
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	099b      	lsrs	r3, r3, #6
 8008424:	2200      	movs	r2, #0
 8008426:	4618      	mov	r0, r3
 8008428:	4611      	mov	r1, r2
 800842a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800842e:	623b      	str	r3, [r7, #32]
 8008430:	2300      	movs	r3, #0
 8008432:	627b      	str	r3, [r7, #36]	; 0x24
 8008434:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008438:	4642      	mov	r2, r8
 800843a:	464b      	mov	r3, r9
 800843c:	f04f 0000 	mov.w	r0, #0
 8008440:	f04f 0100 	mov.w	r1, #0
 8008444:	0159      	lsls	r1, r3, #5
 8008446:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800844a:	0150      	lsls	r0, r2, #5
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4641      	mov	r1, r8
 8008452:	ebb2 0a01 	subs.w	sl, r2, r1
 8008456:	4649      	mov	r1, r9
 8008458:	eb63 0b01 	sbc.w	fp, r3, r1
 800845c:	f04f 0200 	mov.w	r2, #0
 8008460:	f04f 0300 	mov.w	r3, #0
 8008464:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008468:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800846c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008470:	ebb2 040a 	subs.w	r4, r2, sl
 8008474:	eb63 050b 	sbc.w	r5, r3, fp
 8008478:	f04f 0200 	mov.w	r2, #0
 800847c:	f04f 0300 	mov.w	r3, #0
 8008480:	00eb      	lsls	r3, r5, #3
 8008482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008486:	00e2      	lsls	r2, r4, #3
 8008488:	4614      	mov	r4, r2
 800848a:	461d      	mov	r5, r3
 800848c:	4643      	mov	r3, r8
 800848e:	18e3      	adds	r3, r4, r3
 8008490:	603b      	str	r3, [r7, #0]
 8008492:	464b      	mov	r3, r9
 8008494:	eb45 0303 	adc.w	r3, r5, r3
 8008498:	607b      	str	r3, [r7, #4]
 800849a:	f04f 0200 	mov.w	r2, #0
 800849e:	f04f 0300 	mov.w	r3, #0
 80084a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80084a6:	4629      	mov	r1, r5
 80084a8:	028b      	lsls	r3, r1, #10
 80084aa:	4621      	mov	r1, r4
 80084ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80084b0:	4621      	mov	r1, r4
 80084b2:	028a      	lsls	r2, r1, #10
 80084b4:	4610      	mov	r0, r2
 80084b6:	4619      	mov	r1, r3
 80084b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ba:	2200      	movs	r2, #0
 80084bc:	61bb      	str	r3, [r7, #24]
 80084be:	61fa      	str	r2, [r7, #28]
 80084c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084c4:	f7f8 fc48 	bl	8000d58 <__aeabi_uldivmod>
 80084c8:	4602      	mov	r2, r0
 80084ca:	460b      	mov	r3, r1
 80084cc:	4613      	mov	r3, r2
 80084ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80084d0:	4b0b      	ldr	r3, [pc, #44]	; (8008500 <HAL_RCC_GetSysClockFreq+0x200>)
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	0c1b      	lsrs	r3, r3, #16
 80084d6:	f003 0303 	and.w	r3, r3, #3
 80084da:	3301      	adds	r3, #1
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80084e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80084e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80084ea:	e002      	b.n	80084f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80084ec:	4b05      	ldr	r3, [pc, #20]	; (8008504 <HAL_RCC_GetSysClockFreq+0x204>)
 80084ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80084f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80084f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3750      	adds	r7, #80	; 0x50
 80084f8:	46bd      	mov	sp, r7
 80084fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084fe:	bf00      	nop
 8008500:	40023800 	.word	0x40023800
 8008504:	00f42400 	.word	0x00f42400
 8008508:	007a1200 	.word	0x007a1200

0800850c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800850c:	b480      	push	{r7}
 800850e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008510:	4b03      	ldr	r3, [pc, #12]	; (8008520 <HAL_RCC_GetHCLKFreq+0x14>)
 8008512:	681b      	ldr	r3, [r3, #0]
}
 8008514:	4618      	mov	r0, r3
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	20000004 	.word	0x20000004

08008524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008528:	f7ff fff0 	bl	800850c <HAL_RCC_GetHCLKFreq>
 800852c:	4602      	mov	r2, r0
 800852e:	4b05      	ldr	r3, [pc, #20]	; (8008544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	0a9b      	lsrs	r3, r3, #10
 8008534:	f003 0307 	and.w	r3, r3, #7
 8008538:	4903      	ldr	r1, [pc, #12]	; (8008548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800853a:	5ccb      	ldrb	r3, [r1, r3]
 800853c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008540:	4618      	mov	r0, r3
 8008542:	bd80      	pop	{r7, pc}
 8008544:	40023800 	.word	0x40023800
 8008548:	0801de48 	.word	0x0801de48

0800854c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008550:	f7ff ffdc 	bl	800850c <HAL_RCC_GetHCLKFreq>
 8008554:	4602      	mov	r2, r0
 8008556:	4b05      	ldr	r3, [pc, #20]	; (800856c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	0b5b      	lsrs	r3, r3, #13
 800855c:	f003 0307 	and.w	r3, r3, #7
 8008560:	4903      	ldr	r1, [pc, #12]	; (8008570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008562:	5ccb      	ldrb	r3, [r1, r3]
 8008564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008568:	4618      	mov	r0, r3
 800856a:	bd80      	pop	{r7, pc}
 800856c:	40023800 	.word	0x40023800
 8008570:	0801de48 	.word	0x0801de48

08008574 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	220f      	movs	r2, #15
 8008582:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008584:	4b12      	ldr	r3, [pc, #72]	; (80085d0 <HAL_RCC_GetClockConfig+0x5c>)
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f003 0203 	and.w	r2, r3, #3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008590:	4b0f      	ldr	r3, [pc, #60]	; (80085d0 <HAL_RCC_GetClockConfig+0x5c>)
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800859c:	4b0c      	ldr	r3, [pc, #48]	; (80085d0 <HAL_RCC_GetClockConfig+0x5c>)
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80085a8:	4b09      	ldr	r3, [pc, #36]	; (80085d0 <HAL_RCC_GetClockConfig+0x5c>)
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	08db      	lsrs	r3, r3, #3
 80085ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80085b6:	4b07      	ldr	r3, [pc, #28]	; (80085d4 <HAL_RCC_GetClockConfig+0x60>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0207 	and.w	r2, r3, #7
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	601a      	str	r2, [r3, #0]
}
 80085c2:	bf00      	nop
 80085c4:	370c      	adds	r7, #12
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	40023800 	.word	0x40023800
 80085d4:	40023c00 	.word	0x40023c00

080085d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e041      	b.n	800866e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d106      	bne.n	8008604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f839 	bl	8008676 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2202      	movs	r2, #2
 8008608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	3304      	adds	r3, #4
 8008614:	4619      	mov	r1, r3
 8008616:	4610      	mov	r0, r2
 8008618:	f000 fc7a 	bl	8008f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008676:	b480      	push	{r7}
 8008678:	b083      	sub	sp, #12
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800867e:	bf00      	nop
 8008680:	370c      	adds	r7, #12
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
	...

0800868c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b01      	cmp	r3, #1
 800869e:	d001      	beq.n	80086a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e044      	b.n	800872e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68da      	ldr	r2, [r3, #12]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f042 0201 	orr.w	r2, r2, #1
 80086ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a1e      	ldr	r2, [pc, #120]	; (800873c <HAL_TIM_Base_Start_IT+0xb0>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d018      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x6c>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ce:	d013      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x6c>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a1a      	ldr	r2, [pc, #104]	; (8008740 <HAL_TIM_Base_Start_IT+0xb4>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d00e      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x6c>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a19      	ldr	r2, [pc, #100]	; (8008744 <HAL_TIM_Base_Start_IT+0xb8>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d009      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x6c>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a17      	ldr	r2, [pc, #92]	; (8008748 <HAL_TIM_Base_Start_IT+0xbc>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d004      	beq.n	80086f8 <HAL_TIM_Base_Start_IT+0x6c>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a16      	ldr	r2, [pc, #88]	; (800874c <HAL_TIM_Base_Start_IT+0xc0>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d111      	bne.n	800871c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f003 0307 	and.w	r3, r3, #7
 8008702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b06      	cmp	r3, #6
 8008708:	d010      	beq.n	800872c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f042 0201 	orr.w	r2, r2, #1
 8008718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800871a:	e007      	b.n	800872c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f042 0201 	orr.w	r2, r2, #1
 800872a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	40010000 	.word	0x40010000
 8008740:	40000400 	.word	0x40000400
 8008744:	40000800 	.word	0x40000800
 8008748:	40000c00 	.word	0x40000c00
 800874c:	40014000 	.word	0x40014000

08008750 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d109      	bne.n	8008774 <HAL_TIM_PWM_Start+0x24>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008766:	b2db      	uxtb	r3, r3
 8008768:	2b01      	cmp	r3, #1
 800876a:	bf14      	ite	ne
 800876c:	2301      	movne	r3, #1
 800876e:	2300      	moveq	r3, #0
 8008770:	b2db      	uxtb	r3, r3
 8008772:	e022      	b.n	80087ba <HAL_TIM_PWM_Start+0x6a>
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2b04      	cmp	r3, #4
 8008778:	d109      	bne.n	800878e <HAL_TIM_PWM_Start+0x3e>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b01      	cmp	r3, #1
 8008784:	bf14      	ite	ne
 8008786:	2301      	movne	r3, #1
 8008788:	2300      	moveq	r3, #0
 800878a:	b2db      	uxtb	r3, r3
 800878c:	e015      	b.n	80087ba <HAL_TIM_PWM_Start+0x6a>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b08      	cmp	r3, #8
 8008792:	d109      	bne.n	80087a8 <HAL_TIM_PWM_Start+0x58>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b01      	cmp	r3, #1
 800879e:	bf14      	ite	ne
 80087a0:	2301      	movne	r3, #1
 80087a2:	2300      	moveq	r3, #0
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	e008      	b.n	80087ba <HAL_TIM_PWM_Start+0x6a>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	bf14      	ite	ne
 80087b4:	2301      	movne	r3, #1
 80087b6:	2300      	moveq	r3, #0
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e068      	b.n	8008894 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d104      	bne.n	80087d2 <HAL_TIM_PWM_Start+0x82>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2202      	movs	r2, #2
 80087cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087d0:	e013      	b.n	80087fa <HAL_TIM_PWM_Start+0xaa>
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	2b04      	cmp	r3, #4
 80087d6:	d104      	bne.n	80087e2 <HAL_TIM_PWM_Start+0x92>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087e0:	e00b      	b.n	80087fa <HAL_TIM_PWM_Start+0xaa>
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	2b08      	cmp	r3, #8
 80087e6:	d104      	bne.n	80087f2 <HAL_TIM_PWM_Start+0xa2>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2202      	movs	r2, #2
 80087ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087f0:	e003      	b.n	80087fa <HAL_TIM_PWM_Start+0xaa>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2202      	movs	r2, #2
 80087f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2201      	movs	r2, #1
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fd90 	bl	8009328 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a23      	ldr	r2, [pc, #140]	; (800889c <HAL_TIM_PWM_Start+0x14c>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d107      	bne.n	8008822 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008820:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a1d      	ldr	r2, [pc, #116]	; (800889c <HAL_TIM_PWM_Start+0x14c>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d018      	beq.n	800885e <HAL_TIM_PWM_Start+0x10e>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008834:	d013      	beq.n	800885e <HAL_TIM_PWM_Start+0x10e>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a19      	ldr	r2, [pc, #100]	; (80088a0 <HAL_TIM_PWM_Start+0x150>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d00e      	beq.n	800885e <HAL_TIM_PWM_Start+0x10e>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a17      	ldr	r2, [pc, #92]	; (80088a4 <HAL_TIM_PWM_Start+0x154>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d009      	beq.n	800885e <HAL_TIM_PWM_Start+0x10e>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a16      	ldr	r2, [pc, #88]	; (80088a8 <HAL_TIM_PWM_Start+0x158>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d004      	beq.n	800885e <HAL_TIM_PWM_Start+0x10e>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a14      	ldr	r2, [pc, #80]	; (80088ac <HAL_TIM_PWM_Start+0x15c>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d111      	bne.n	8008882 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f003 0307 	and.w	r3, r3, #7
 8008868:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2b06      	cmp	r3, #6
 800886e:	d010      	beq.n	8008892 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f042 0201 	orr.w	r2, r2, #1
 800887e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008880:	e007      	b.n	8008892 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f042 0201 	orr.w	r2, r2, #1
 8008890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	40010000 	.word	0x40010000
 80088a0:	40000400 	.word	0x40000400
 80088a4:	40000800 	.word	0x40000800
 80088a8:	40000c00 	.word	0x40000c00
 80088ac:	40014000 	.word	0x40014000

080088b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e097      	b.n	80089f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d106      	bne.n	80088de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f88f 	bl	80089fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2202      	movs	r2, #2
 80088e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	6812      	ldr	r2, [r2, #0]
 80088f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088f4:	f023 0307 	bic.w	r3, r3, #7
 80088f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	3304      	adds	r3, #4
 8008902:	4619      	mov	r1, r3
 8008904:	4610      	mov	r0, r2
 8008906:	f000 fb03 	bl	8008f10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	4313      	orrs	r3, r2
 800892a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008932:	f023 0303 	bic.w	r3, r3, #3
 8008936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	689a      	ldr	r2, [r3, #8]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	021b      	lsls	r3, r3, #8
 8008942:	4313      	orrs	r3, r2
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	4313      	orrs	r3, r2
 8008948:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008950:	f023 030c 	bic.w	r3, r3, #12
 8008954:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800895c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008960:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	69db      	ldr	r3, [r3, #28]
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	4313      	orrs	r3, r2
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	4313      	orrs	r3, r2
 8008972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	011a      	lsls	r2, r3, #4
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	031b      	lsls	r3, r3, #12
 8008980:	4313      	orrs	r3, r2
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	4313      	orrs	r3, r2
 8008986:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800898e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008996:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	011b      	lsls	r3, r3, #4
 80089a2:	4313      	orrs	r3, r2
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2201      	movs	r2, #1
 80089de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2201      	movs	r2, #1
 80089e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089f2:	2300      	movs	r3, #0
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}

080089fc <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d110      	bne.n	8008a62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d102      	bne.n	8008a4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a46:	7b7b      	ldrb	r3, [r7, #13]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d001      	beq.n	8008a50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e069      	b.n	8008b24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a60:	e031      	b.n	8008ac6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	d110      	bne.n	8008a8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d102      	bne.n	8008a74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a6e:	7b3b      	ldrb	r3, [r7, #12]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d001      	beq.n	8008a78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e055      	b.n	8008b24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2202      	movs	r2, #2
 8008a7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2202      	movs	r2, #2
 8008a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008a88:	e01d      	b.n	8008ac6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d108      	bne.n	8008aa2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a90:	7bbb      	ldrb	r3, [r7, #14]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d105      	bne.n	8008aa2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008a96:	7b7b      	ldrb	r3, [r7, #13]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d102      	bne.n	8008aa2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008a9c:	7b3b      	ldrb	r3, [r7, #12]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d001      	beq.n	8008aa6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e03e      	b.n	8008b24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2202      	movs	r2, #2
 8008ab2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2202      	movs	r2, #2
 8008aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d003      	beq.n	8008ad4 <HAL_TIM_Encoder_Start+0xc4>
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d008      	beq.n	8008ae4 <HAL_TIM_Encoder_Start+0xd4>
 8008ad2:	e00f      	b.n	8008af4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	2100      	movs	r1, #0
 8008adc:	4618      	mov	r0, r3
 8008ade:	f000 fc23 	bl	8009328 <TIM_CCxChannelCmd>
      break;
 8008ae2:	e016      	b.n	8008b12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	2104      	movs	r1, #4
 8008aec:	4618      	mov	r0, r3
 8008aee:	f000 fc1b 	bl	8009328 <TIM_CCxChannelCmd>
      break;
 8008af2:	e00e      	b.n	8008b12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2201      	movs	r2, #1
 8008afa:	2100      	movs	r1, #0
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 fc13 	bl	8009328 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2201      	movs	r2, #1
 8008b08:	2104      	movs	r1, #4
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 fc0c 	bl	8009328 <TIM_CCxChannelCmd>
      break;
 8008b10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f042 0201 	orr.w	r2, r2, #1
 8008b20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	f003 0302 	and.w	r3, r3, #2
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d122      	bne.n	8008b88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f003 0302 	and.w	r3, r3, #2
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d11b      	bne.n	8008b88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f06f 0202 	mvn.w	r2, #2
 8008b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2201      	movs	r2, #1
 8008b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	f003 0303 	and.w	r3, r3, #3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d003      	beq.n	8008b76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f9b0 	bl	8008ed4 <HAL_TIM_IC_CaptureCallback>
 8008b74:	e005      	b.n	8008b82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f9a2 	bl	8008ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f9b3 	bl	8008ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	f003 0304 	and.w	r3, r3, #4
 8008b92:	2b04      	cmp	r3, #4
 8008b94:	d122      	bne.n	8008bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	f003 0304 	and.w	r3, r3, #4
 8008ba0:	2b04      	cmp	r3, #4
 8008ba2:	d11b      	bne.n	8008bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f06f 0204 	mvn.w	r2, #4
 8008bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f986 	bl	8008ed4 <HAL_TIM_IC_CaptureCallback>
 8008bc8:	e005      	b.n	8008bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f978 	bl	8008ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f989 	bl	8008ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	f003 0308 	and.w	r3, r3, #8
 8008be6:	2b08      	cmp	r3, #8
 8008be8:	d122      	bne.n	8008c30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f003 0308 	and.w	r3, r3, #8
 8008bf4:	2b08      	cmp	r3, #8
 8008bf6:	d11b      	bne.n	8008c30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f06f 0208 	mvn.w	r2, #8
 8008c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2204      	movs	r2, #4
 8008c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	69db      	ldr	r3, [r3, #28]
 8008c0e:	f003 0303 	and.w	r3, r3, #3
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d003      	beq.n	8008c1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f95c 	bl	8008ed4 <HAL_TIM_IC_CaptureCallback>
 8008c1c:	e005      	b.n	8008c2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f94e 	bl	8008ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 f95f 	bl	8008ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	f003 0310 	and.w	r3, r3, #16
 8008c3a:	2b10      	cmp	r3, #16
 8008c3c:	d122      	bne.n	8008c84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	f003 0310 	and.w	r3, r3, #16
 8008c48:	2b10      	cmp	r3, #16
 8008c4a:	d11b      	bne.n	8008c84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f06f 0210 	mvn.w	r2, #16
 8008c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2208      	movs	r2, #8
 8008c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	69db      	ldr	r3, [r3, #28]
 8008c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f932 	bl	8008ed4 <HAL_TIM_IC_CaptureCallback>
 8008c70:	e005      	b.n	8008c7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f924 	bl	8008ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f935 	bl	8008ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b01      	cmp	r3, #1
 8008c90:	d10e      	bne.n	8008cb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d107      	bne.n	8008cb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f06f 0201 	mvn.w	r2, #1
 8008ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7fa f866 	bl	8002d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cba:	2b80      	cmp	r3, #128	; 0x80
 8008cbc:	d10e      	bne.n	8008cdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cc8:	2b80      	cmp	r3, #128	; 0x80
 8008cca:	d107      	bne.n	8008cdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fb55 	bl	8009386 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce6:	2b40      	cmp	r3, #64	; 0x40
 8008ce8:	d10e      	bne.n	8008d08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf4:	2b40      	cmp	r3, #64	; 0x40
 8008cf6:	d107      	bne.n	8008d08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f8fa 	bl	8008efc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	f003 0320 	and.w	r3, r3, #32
 8008d12:	2b20      	cmp	r3, #32
 8008d14:	d10e      	bne.n	8008d34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	f003 0320 	and.w	r3, r3, #32
 8008d20:	2b20      	cmp	r3, #32
 8008d22:	d107      	bne.n	8008d34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f06f 0220 	mvn.w	r2, #32
 8008d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fb1f 	bl	8009372 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d34:	bf00      	nop
 8008d36:	3708      	adds	r7, #8
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d101      	bne.n	8008d5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d56:	2302      	movs	r3, #2
 8008d58:	e0ae      	b.n	8008eb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2b0c      	cmp	r3, #12
 8008d66:	f200 809f 	bhi.w	8008ea8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008d6a:	a201      	add	r2, pc, #4	; (adr r2, 8008d70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d70:	08008da5 	.word	0x08008da5
 8008d74:	08008ea9 	.word	0x08008ea9
 8008d78:	08008ea9 	.word	0x08008ea9
 8008d7c:	08008ea9 	.word	0x08008ea9
 8008d80:	08008de5 	.word	0x08008de5
 8008d84:	08008ea9 	.word	0x08008ea9
 8008d88:	08008ea9 	.word	0x08008ea9
 8008d8c:	08008ea9 	.word	0x08008ea9
 8008d90:	08008e27 	.word	0x08008e27
 8008d94:	08008ea9 	.word	0x08008ea9
 8008d98:	08008ea9 	.word	0x08008ea9
 8008d9c:	08008ea9 	.word	0x08008ea9
 8008da0:	08008e67 	.word	0x08008e67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68b9      	ldr	r1, [r7, #8]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 f930 	bl	8009010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	699a      	ldr	r2, [r3, #24]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f042 0208 	orr.w	r2, r2, #8
 8008dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	699a      	ldr	r2, [r3, #24]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f022 0204 	bic.w	r2, r2, #4
 8008dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6999      	ldr	r1, [r3, #24]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	691a      	ldr	r2, [r3, #16]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	430a      	orrs	r2, r1
 8008de0:	619a      	str	r2, [r3, #24]
      break;
 8008de2:	e064      	b.n	8008eae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68b9      	ldr	r1, [r7, #8]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 f976 	bl	80090dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699a      	ldr	r2, [r3, #24]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	699a      	ldr	r2, [r3, #24]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6999      	ldr	r1, [r3, #24]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	021a      	lsls	r2, r3, #8
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	619a      	str	r2, [r3, #24]
      break;
 8008e24:	e043      	b.n	8008eae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68b9      	ldr	r1, [r7, #8]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 f9c1 	bl	80091b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	69da      	ldr	r2, [r3, #28]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f042 0208 	orr.w	r2, r2, #8
 8008e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	69da      	ldr	r2, [r3, #28]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f022 0204 	bic.w	r2, r2, #4
 8008e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	69d9      	ldr	r1, [r3, #28]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	691a      	ldr	r2, [r3, #16]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	61da      	str	r2, [r3, #28]
      break;
 8008e64:	e023      	b.n	8008eae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68b9      	ldr	r1, [r7, #8]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 fa0b 	bl	8009288 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	69da      	ldr	r2, [r3, #28]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	69da      	ldr	r2, [r3, #28]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	69d9      	ldr	r1, [r3, #28]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	021a      	lsls	r2, r3, #8
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	430a      	orrs	r2, r1
 8008ea4:	61da      	str	r2, [r3, #28]
      break;
 8008ea6:	e002      	b.n	8008eae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8008eac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3718      	adds	r7, #24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a34      	ldr	r2, [pc, #208]	; (8008ff4 <TIM_Base_SetConfig+0xe4>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d00f      	beq.n	8008f48 <TIM_Base_SetConfig+0x38>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f2e:	d00b      	beq.n	8008f48 <TIM_Base_SetConfig+0x38>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a31      	ldr	r2, [pc, #196]	; (8008ff8 <TIM_Base_SetConfig+0xe8>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d007      	beq.n	8008f48 <TIM_Base_SetConfig+0x38>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a30      	ldr	r2, [pc, #192]	; (8008ffc <TIM_Base_SetConfig+0xec>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d003      	beq.n	8008f48 <TIM_Base_SetConfig+0x38>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a2f      	ldr	r2, [pc, #188]	; (8009000 <TIM_Base_SetConfig+0xf0>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d108      	bne.n	8008f5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a25      	ldr	r2, [pc, #148]	; (8008ff4 <TIM_Base_SetConfig+0xe4>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d01b      	beq.n	8008f9a <TIM_Base_SetConfig+0x8a>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f68:	d017      	beq.n	8008f9a <TIM_Base_SetConfig+0x8a>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a22      	ldr	r2, [pc, #136]	; (8008ff8 <TIM_Base_SetConfig+0xe8>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d013      	beq.n	8008f9a <TIM_Base_SetConfig+0x8a>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a21      	ldr	r2, [pc, #132]	; (8008ffc <TIM_Base_SetConfig+0xec>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d00f      	beq.n	8008f9a <TIM_Base_SetConfig+0x8a>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a20      	ldr	r2, [pc, #128]	; (8009000 <TIM_Base_SetConfig+0xf0>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d00b      	beq.n	8008f9a <TIM_Base_SetConfig+0x8a>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a1f      	ldr	r2, [pc, #124]	; (8009004 <TIM_Base_SetConfig+0xf4>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d007      	beq.n	8008f9a <TIM_Base_SetConfig+0x8a>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a1e      	ldr	r2, [pc, #120]	; (8009008 <TIM_Base_SetConfig+0xf8>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d003      	beq.n	8008f9a <TIM_Base_SetConfig+0x8a>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a1d      	ldr	r2, [pc, #116]	; (800900c <TIM_Base_SetConfig+0xfc>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d108      	bne.n	8008fac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	689a      	ldr	r2, [r3, #8]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a08      	ldr	r2, [pc, #32]	; (8008ff4 <TIM_Base_SetConfig+0xe4>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d103      	bne.n	8008fe0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	691a      	ldr	r2, [r3, #16]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	615a      	str	r2, [r3, #20]
}
 8008fe6:	bf00      	nop
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	40010000 	.word	0x40010000
 8008ff8:	40000400 	.word	0x40000400
 8008ffc:	40000800 	.word	0x40000800
 8009000:	40000c00 	.word	0x40000c00
 8009004:	40014000 	.word	0x40014000
 8009008:	40014400 	.word	0x40014400
 800900c:	40014800 	.word	0x40014800

08009010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009010:	b480      	push	{r7}
 8009012:	b087      	sub	sp, #28
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	f023 0201 	bic.w	r2, r3, #1
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
 800902a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800903e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f023 0303 	bic.w	r3, r3, #3
 8009046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68fa      	ldr	r2, [r7, #12]
 800904e:	4313      	orrs	r3, r2
 8009050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f023 0302 	bic.w	r3, r3, #2
 8009058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	4313      	orrs	r3, r2
 8009062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a1c      	ldr	r2, [pc, #112]	; (80090d8 <TIM_OC1_SetConfig+0xc8>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d10c      	bne.n	8009086 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	f023 0308 	bic.w	r3, r3, #8
 8009072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	4313      	orrs	r3, r2
 800907c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f023 0304 	bic.w	r3, r3, #4
 8009084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a13      	ldr	r2, [pc, #76]	; (80090d8 <TIM_OC1_SetConfig+0xc8>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d111      	bne.n	80090b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009094:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800909c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	685a      	ldr	r2, [r3, #4]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	621a      	str	r2, [r3, #32]
}
 80090cc:	bf00      	nop
 80090ce:	371c      	adds	r7, #28
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	40010000 	.word	0x40010000

080090dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090dc:	b480      	push	{r7}
 80090de:	b087      	sub	sp, #28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	f023 0210 	bic.w	r2, r3, #16
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800910a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	021b      	lsls	r3, r3, #8
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	4313      	orrs	r3, r2
 800911e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	f023 0320 	bic.w	r3, r3, #32
 8009126:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	011b      	lsls	r3, r3, #4
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	4313      	orrs	r3, r2
 8009132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a1e      	ldr	r2, [pc, #120]	; (80091b0 <TIM_OC2_SetConfig+0xd4>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d10d      	bne.n	8009158 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	011b      	lsls	r3, r3, #4
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	4313      	orrs	r3, r2
 800914e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009156:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a15      	ldr	r2, [pc, #84]	; (80091b0 <TIM_OC2_SetConfig+0xd4>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d113      	bne.n	8009188 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800916e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	695b      	ldr	r3, [r3, #20]
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	4313      	orrs	r3, r2
 800917a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	4313      	orrs	r3, r2
 8009186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	621a      	str	r2, [r3, #32]
}
 80091a2:	bf00      	nop
 80091a4:	371c      	adds	r7, #28
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	40010000 	.word	0x40010000

080091b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f023 0303 	bic.w	r3, r3, #3
 80091ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	4313      	orrs	r3, r2
 8009208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a1d      	ldr	r2, [pc, #116]	; (8009284 <TIM_OC3_SetConfig+0xd0>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d10d      	bne.n	800922e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009218:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	021b      	lsls	r3, r3, #8
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	4313      	orrs	r3, r2
 8009224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800922c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a14      	ldr	r2, [pc, #80]	; (8009284 <TIM_OC3_SetConfig+0xd0>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d113      	bne.n	800925e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800923c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	695b      	ldr	r3, [r3, #20]
 800924a:	011b      	lsls	r3, r3, #4
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	4313      	orrs	r3, r2
 8009250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	011b      	lsls	r3, r3, #4
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	4313      	orrs	r3, r2
 800925c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	697a      	ldr	r2, [r7, #20]
 8009276:	621a      	str	r2, [r3, #32]
}
 8009278:	bf00      	nop
 800927a:	371c      	adds	r7, #28
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	40010000 	.word	0x40010000

08009288 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009288:	b480      	push	{r7}
 800928a:	b087      	sub	sp, #28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	69db      	ldr	r3, [r3, #28]
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	021b      	lsls	r3, r3, #8
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80092d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	031b      	lsls	r3, r3, #12
 80092da:	693a      	ldr	r2, [r7, #16]
 80092dc:	4313      	orrs	r3, r2
 80092de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a10      	ldr	r2, [pc, #64]	; (8009324 <TIM_OC4_SetConfig+0x9c>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d109      	bne.n	80092fc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	695b      	ldr	r3, [r3, #20]
 80092f4:	019b      	lsls	r3, r3, #6
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	621a      	str	r2, [r3, #32]
}
 8009316:	bf00      	nop
 8009318:	371c      	adds	r7, #28
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	40010000 	.word	0x40010000

08009328 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009328:	b480      	push	{r7}
 800932a:	b087      	sub	sp, #28
 800932c:	af00      	add	r7, sp, #0
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	f003 031f 	and.w	r3, r3, #31
 800933a:	2201      	movs	r2, #1
 800933c:	fa02 f303 	lsl.w	r3, r2, r3
 8009340:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6a1a      	ldr	r2, [r3, #32]
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	43db      	mvns	r3, r3
 800934a:	401a      	ands	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6a1a      	ldr	r2, [r3, #32]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	f003 031f 	and.w	r3, r3, #31
 800935a:	6879      	ldr	r1, [r7, #4]
 800935c:	fa01 f303 	lsl.w	r3, r1, r3
 8009360:	431a      	orrs	r2, r3
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	621a      	str	r2, [r3, #32]
}
 8009366:	bf00      	nop
 8009368:	371c      	adds	r7, #28
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009372:	b480      	push	{r7}
 8009374:	b083      	sub	sp, #12
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800937a:	bf00      	nop
 800937c:	370c      	adds	r7, #12
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr

08009386 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009386:	b480      	push	{r7}
 8009388:	b083      	sub	sp, #12
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800938e:	bf00      	nop
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b082      	sub	sp, #8
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e03f      	b.n	800942c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d106      	bne.n	80093c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7fa fa15 	bl	80037f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2224      	movs	r2, #36	; 0x24
 80093ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	68da      	ldr	r2, [r3, #12]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f001 f8d6 	bl	800a590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	691a      	ldr	r2, [r3, #16]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	695a      	ldr	r2, [r3, #20]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009402:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68da      	ldr	r2, [r3, #12]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009412:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2220      	movs	r2, #32
 800941e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2220      	movs	r2, #32
 8009426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b08a      	sub	sp, #40	; 0x28
 8009438:	af02      	add	r7, sp, #8
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	603b      	str	r3, [r7, #0]
 8009440:	4613      	mov	r3, r2
 8009442:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009444:	2300      	movs	r3, #0
 8009446:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800944e:	b2db      	uxtb	r3, r3
 8009450:	2b20      	cmp	r3, #32
 8009452:	d17c      	bne.n	800954e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d002      	beq.n	8009460 <HAL_UART_Transmit+0x2c>
 800945a:	88fb      	ldrh	r3, [r7, #6]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d101      	bne.n	8009464 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e075      	b.n	8009550 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800946a:	2b01      	cmp	r3, #1
 800946c:	d101      	bne.n	8009472 <HAL_UART_Transmit+0x3e>
 800946e:	2302      	movs	r3, #2
 8009470:	e06e      	b.n	8009550 <HAL_UART_Transmit+0x11c>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2201      	movs	r2, #1
 8009476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2221      	movs	r2, #33	; 0x21
 8009484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009488:	f7fa ff80 	bl	800438c <HAL_GetTick>
 800948c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	88fa      	ldrh	r2, [r7, #6]
 8009492:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	88fa      	ldrh	r2, [r7, #6]
 8009498:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094a2:	d108      	bne.n	80094b6 <HAL_UART_Transmit+0x82>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d104      	bne.n	80094b6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80094ac:	2300      	movs	r3, #0
 80094ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	61bb      	str	r3, [r7, #24]
 80094b4:	e003      	b.n	80094be <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094ba:	2300      	movs	r3, #0
 80094bc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80094c6:	e02a      	b.n	800951e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2200      	movs	r2, #0
 80094d0:	2180      	movs	r1, #128	; 0x80
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f000 fd8d 	bl	8009ff2 <UART_WaitOnFlagUntilTimeout>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d001      	beq.n	80094e2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80094de:	2303      	movs	r3, #3
 80094e0:	e036      	b.n	8009550 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10b      	bne.n	8009500 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	461a      	mov	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094f6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	3302      	adds	r3, #2
 80094fc:	61bb      	str	r3, [r7, #24]
 80094fe:	e007      	b.n	8009510 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	781a      	ldrb	r2, [r3, #0]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	3301      	adds	r3, #1
 800950e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009514:	b29b      	uxth	r3, r3
 8009516:	3b01      	subs	r3, #1
 8009518:	b29a      	uxth	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009522:	b29b      	uxth	r3, r3
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1cf      	bne.n	80094c8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	2200      	movs	r2, #0
 8009530:	2140      	movs	r1, #64	; 0x40
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 fd5d 	bl	8009ff2 <UART_WaitOnFlagUntilTimeout>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e006      	b.n	8009550 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2220      	movs	r2, #32
 8009546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	e000      	b.n	8009550 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800954e:	2302      	movs	r3, #2
  }
}
 8009550:	4618      	mov	r0, r3
 8009552:	3720      	adds	r7, #32
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08c      	sub	sp, #48	; 0x30
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	4613      	mov	r3, r2
 8009564:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b20      	cmp	r3, #32
 8009570:	d165      	bne.n	800963e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d002      	beq.n	800957e <HAL_UART_Transmit_DMA+0x26>
 8009578:	88fb      	ldrh	r3, [r7, #6]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e05e      	b.n	8009640 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009588:	2b01      	cmp	r3, #1
 800958a:	d101      	bne.n	8009590 <HAL_UART_Transmit_DMA+0x38>
 800958c:	2302      	movs	r3, #2
 800958e:	e057      	b.n	8009640 <HAL_UART_Transmit_DMA+0xe8>
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	88fa      	ldrh	r2, [r7, #6]
 80095a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	88fa      	ldrh	r2, [r7, #6]
 80095a8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2221      	movs	r2, #33	; 0x21
 80095b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095bc:	4a22      	ldr	r2, [pc, #136]	; (8009648 <HAL_UART_Transmit_DMA+0xf0>)
 80095be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c4:	4a21      	ldr	r2, [pc, #132]	; (800964c <HAL_UART_Transmit_DMA+0xf4>)
 80095c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095cc:	4a20      	ldr	r2, [pc, #128]	; (8009650 <HAL_UART_Transmit_DMA+0xf8>)
 80095ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095d4:	2200      	movs	r2, #0
 80095d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80095d8:	f107 0308 	add.w	r3, r7, #8
 80095dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80095e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e4:	6819      	ldr	r1, [r3, #0]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3304      	adds	r3, #4
 80095ec:	461a      	mov	r2, r3
 80095ee:	88fb      	ldrh	r3, [r7, #6]
 80095f0:	f7fb f9a0 	bl	8004934 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095fc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3314      	adds	r3, #20
 800960c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960e:	69bb      	ldr	r3, [r7, #24]
 8009610:	e853 3f00 	ldrex	r3, [r3]
 8009614:	617b      	str	r3, [r7, #20]
   return(result);
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800961c:	62bb      	str	r3, [r7, #40]	; 0x28
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3314      	adds	r3, #20
 8009624:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009626:	627a      	str	r2, [r7, #36]	; 0x24
 8009628:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962a:	6a39      	ldr	r1, [r7, #32]
 800962c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800962e:	e841 2300 	strex	r3, r2, [r1]
 8009632:	61fb      	str	r3, [r7, #28]
   return(result);
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1e5      	bne.n	8009606 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	e000      	b.n	8009640 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800963e:	2302      	movs	r3, #2
  }
}
 8009640:	4618      	mov	r0, r3
 8009642:	3730      	adds	r7, #48	; 0x30
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	08009d4d 	.word	0x08009d4d
 800964c:	08009de7 	.word	0x08009de7
 8009650:	08009f5f 	.word	0x08009f5f

08009654 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	4613      	mov	r3, r2
 8009660:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b20      	cmp	r3, #32
 800966c:	d11d      	bne.n	80096aa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d002      	beq.n	800967a <HAL_UART_Receive_DMA+0x26>
 8009674:	88fb      	ldrh	r3, [r7, #6]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d101      	bne.n	800967e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e016      	b.n	80096ac <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009684:	2b01      	cmp	r3, #1
 8009686:	d101      	bne.n	800968c <HAL_UART_Receive_DMA+0x38>
 8009688:	2302      	movs	r3, #2
 800968a:	e00f      	b.n	80096ac <HAL_UART_Receive_DMA+0x58>
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800969a:	88fb      	ldrh	r3, [r7, #6]
 800969c:	461a      	mov	r2, r3
 800969e:	68b9      	ldr	r1, [r7, #8]
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 fd15 	bl	800a0d0 <UART_Start_Receive_DMA>
 80096a6:	4603      	mov	r3, r0
 80096a8:	e000      	b.n	80096ac <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80096aa:	2302      	movs	r3, #2
  }
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b090      	sub	sp, #64	; 0x40
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80096bc:	2300      	movs	r3, #0
 80096be:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ca:	2b80      	cmp	r3, #128	; 0x80
 80096cc:	bf0c      	ite	eq
 80096ce:	2301      	moveq	r3, #1
 80096d0:	2300      	movne	r3, #0
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b21      	cmp	r3, #33	; 0x21
 80096e0:	d128      	bne.n	8009734 <HAL_UART_DMAStop+0x80>
 80096e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d025      	beq.n	8009734 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3314      	adds	r3, #20
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f2:	e853 3f00 	ldrex	r3, [r3]
 80096f6:	623b      	str	r3, [r7, #32]
   return(result);
 80096f8:	6a3b      	ldr	r3, [r7, #32]
 80096fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	3314      	adds	r3, #20
 8009706:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009708:	633a      	str	r2, [r7, #48]	; 0x30
 800970a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800970e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009710:	e841 2300 	strex	r3, r2, [r1]
 8009714:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1e5      	bne.n	80096e8 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009720:	2b00      	cmp	r3, #0
 8009722:	d004      	beq.n	800972e <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009728:	4618      	mov	r0, r3
 800972a:	f7fb f95b 	bl	80049e4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fd6c 	bl	800a20c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800973e:	2b40      	cmp	r3, #64	; 0x40
 8009740:	bf0c      	ite	eq
 8009742:	2301      	moveq	r3, #1
 8009744:	2300      	movne	r3, #0
 8009746:	b2db      	uxtb	r3, r3
 8009748:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b22      	cmp	r3, #34	; 0x22
 8009754:	d128      	bne.n	80097a8 <HAL_UART_DMAStop+0xf4>
 8009756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009758:	2b00      	cmp	r3, #0
 800975a:	d025      	beq.n	80097a8 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	3314      	adds	r3, #20
 8009762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	e853 3f00 	ldrex	r3, [r3]
 800976a:	60fb      	str	r3, [r7, #12]
   return(result);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009772:	637b      	str	r3, [r7, #52]	; 0x34
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	3314      	adds	r3, #20
 800977a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800977c:	61fa      	str	r2, [r7, #28]
 800977e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	69b9      	ldr	r1, [r7, #24]
 8009782:	69fa      	ldr	r2, [r7, #28]
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	617b      	str	r3, [r7, #20]
   return(result);
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e5      	bne.n	800975c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009794:	2b00      	cmp	r3, #0
 8009796:	d004      	beq.n	80097a2 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979c:	4618      	mov	r0, r3
 800979e:	f7fb f921 	bl	80049e4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 fd5a 	bl	800a25c <UART_EndRxTransfer>
  }

  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3740      	adds	r7, #64	; 0x40
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
	...

080097b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b0ba      	sub	sp, #232	; 0xe8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80097da:	2300      	movs	r3, #0
 80097dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80097e0:	2300      	movs	r3, #0
 80097e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80097e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097ea:	f003 030f 	and.w	r3, r3, #15
 80097ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80097f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10f      	bne.n	800981a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097fe:	f003 0320 	and.w	r3, r3, #32
 8009802:	2b00      	cmp	r3, #0
 8009804:	d009      	beq.n	800981a <HAL_UART_IRQHandler+0x66>
 8009806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800980a:	f003 0320 	and.w	r3, r3, #32
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fe01 	bl	800a41a <UART_Receive_IT>
      return;
 8009818:	e256      	b.n	8009cc8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800981a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800981e:	2b00      	cmp	r3, #0
 8009820:	f000 80de 	beq.w	80099e0 <HAL_UART_IRQHandler+0x22c>
 8009824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d106      	bne.n	800983e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009834:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 80d1 	beq.w	80099e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800983e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00b      	beq.n	8009862 <HAL_UART_IRQHandler+0xae>
 800984a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800984e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009852:	2b00      	cmp	r3, #0
 8009854:	d005      	beq.n	8009862 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985a:	f043 0201 	orr.w	r2, r3, #1
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009866:	f003 0304 	and.w	r3, r3, #4
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00b      	beq.n	8009886 <HAL_UART_IRQHandler+0xd2>
 800986e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	2b00      	cmp	r3, #0
 8009878:	d005      	beq.n	8009886 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987e:	f043 0202 	orr.w	r2, r3, #2
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800988a:	f003 0302 	and.w	r3, r3, #2
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00b      	beq.n	80098aa <HAL_UART_IRQHandler+0xf6>
 8009892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	2b00      	cmp	r3, #0
 800989c:	d005      	beq.n	80098aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a2:	f043 0204 	orr.w	r2, r3, #4
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80098aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ae:	f003 0308 	and.w	r3, r3, #8
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d011      	beq.n	80098da <HAL_UART_IRQHandler+0x126>
 80098b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098ba:	f003 0320 	and.w	r3, r3, #32
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d105      	bne.n	80098ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80098c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d005      	beq.n	80098da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d2:	f043 0208 	orr.w	r2, r3, #8
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f000 81ed 	beq.w	8009cbe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80098e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098e8:	f003 0320 	and.w	r3, r3, #32
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d008      	beq.n	8009902 <HAL_UART_IRQHandler+0x14e>
 80098f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098f4:	f003 0320 	and.w	r3, r3, #32
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d002      	beq.n	8009902 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fd8c 	bl	800a41a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800990c:	2b40      	cmp	r3, #64	; 0x40
 800990e:	bf0c      	ite	eq
 8009910:	2301      	moveq	r3, #1
 8009912:	2300      	movne	r3, #0
 8009914:	b2db      	uxtb	r3, r3
 8009916:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991e:	f003 0308 	and.w	r3, r3, #8
 8009922:	2b00      	cmp	r3, #0
 8009924:	d103      	bne.n	800992e <HAL_UART_IRQHandler+0x17a>
 8009926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800992a:	2b00      	cmp	r3, #0
 800992c:	d04f      	beq.n	80099ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 fc94 	bl	800a25c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	695b      	ldr	r3, [r3, #20]
 800993a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800993e:	2b40      	cmp	r3, #64	; 0x40
 8009940:	d141      	bne.n	80099c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3314      	adds	r3, #20
 8009948:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009950:	e853 3f00 	ldrex	r3, [r3]
 8009954:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009958:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800995c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009960:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	3314      	adds	r3, #20
 800996a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800996e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009972:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009976:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800997a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800997e:	e841 2300 	strex	r3, r2, [r1]
 8009982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1d9      	bne.n	8009942 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009992:	2b00      	cmp	r3, #0
 8009994:	d013      	beq.n	80099be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999a:	4a7d      	ldr	r2, [pc, #500]	; (8009b90 <HAL_UART_IRQHandler+0x3dc>)
 800999c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fb f88e 	bl	8004ac4 <HAL_DMA_Abort_IT>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d016      	beq.n	80099dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80099b8:	4610      	mov	r0, r2
 80099ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099bc:	e00e      	b.n	80099dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f9ae 	bl	8009d20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099c4:	e00a      	b.n	80099dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f9aa 	bl	8009d20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099cc:	e006      	b.n	80099dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f9a6 	bl	8009d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80099da:	e170      	b.n	8009cbe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099dc:	bf00      	nop
    return;
 80099de:	e16e      	b.n	8009cbe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	f040 814a 	bne.w	8009c7e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80099ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ee:	f003 0310 	and.w	r3, r3, #16
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 8143 	beq.w	8009c7e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80099f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099fc:	f003 0310 	and.w	r3, r3, #16
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f000 813c 	beq.w	8009c7e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009a06:	2300      	movs	r3, #0
 8009a08:	60bb      	str	r3, [r7, #8]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	60bb      	str	r3, [r7, #8]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	60bb      	str	r3, [r7, #8]
 8009a1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a26:	2b40      	cmp	r3, #64	; 0x40
 8009a28:	f040 80b4 	bne.w	8009b94 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f000 8140 	beq.w	8009cc2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	f080 8139 	bcs.w	8009cc2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a56:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a62:	f000 8088 	beq.w	8009b76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	330c      	adds	r3, #12
 8009a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	330c      	adds	r3, #12
 8009a8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009a92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009a96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009a9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009aa2:	e841 2300 	strex	r3, r2, [r1]
 8009aa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1d9      	bne.n	8009a66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	3314      	adds	r3, #20
 8009ab8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009abc:	e853 3f00 	ldrex	r3, [r3]
 8009ac0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009ac2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ac4:	f023 0301 	bic.w	r3, r3, #1
 8009ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	3314      	adds	r3, #20
 8009ad2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009ad6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009ada:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009adc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009ade:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ae2:	e841 2300 	strex	r3, r2, [r1]
 8009ae6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1e1      	bne.n	8009ab2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	3314      	adds	r3, #20
 8009af4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009af8:	e853 3f00 	ldrex	r3, [r3]
 8009afc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	3314      	adds	r3, #20
 8009b0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b12:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009b14:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b16:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b1a:	e841 2300 	strex	r3, r2, [r1]
 8009b1e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1e3      	bne.n	8009aee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2220      	movs	r2, #32
 8009b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	330c      	adds	r3, #12
 8009b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b3e:	e853 3f00 	ldrex	r3, [r3]
 8009b42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b46:	f023 0310 	bic.w	r3, r3, #16
 8009b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	330c      	adds	r3, #12
 8009b54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009b58:	65ba      	str	r2, [r7, #88]	; 0x58
 8009b5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b60:	e841 2300 	strex	r3, r2, [r1]
 8009b64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1e3      	bne.n	8009b34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7fa ff37 	bl	80049e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	1ad3      	subs	r3, r2, r3
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	4619      	mov	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f8d4 	bl	8009d34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009b8c:	e099      	b.n	8009cc2 <HAL_UART_IRQHandler+0x50e>
 8009b8e:	bf00      	nop
 8009b90:	0800a323 	.word	0x0800a323
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f000 808b 	beq.w	8009cc6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f000 8086 	beq.w	8009cc6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	330c      	adds	r3, #12
 8009bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc4:	e853 3f00 	ldrex	r3, [r3]
 8009bc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	330c      	adds	r3, #12
 8009bda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009bde:	647a      	str	r2, [r7, #68]	; 0x44
 8009be0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009be4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009be6:	e841 2300 	strex	r3, r2, [r1]
 8009bea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1e3      	bne.n	8009bba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3314      	adds	r3, #20
 8009bf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	e853 3f00 	ldrex	r3, [r3]
 8009c00:	623b      	str	r3, [r7, #32]
   return(result);
 8009c02:	6a3b      	ldr	r3, [r7, #32]
 8009c04:	f023 0301 	bic.w	r3, r3, #1
 8009c08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	3314      	adds	r3, #20
 8009c12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009c16:	633a      	str	r2, [r7, #48]	; 0x30
 8009c18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c1e:	e841 2300 	strex	r3, r2, [r1]
 8009c22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1e3      	bne.n	8009bf2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2220      	movs	r2, #32
 8009c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	330c      	adds	r3, #12
 8009c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	e853 3f00 	ldrex	r3, [r3]
 8009c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f023 0310 	bic.w	r3, r3, #16
 8009c4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	330c      	adds	r3, #12
 8009c58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009c5c:	61fa      	str	r2, [r7, #28]
 8009c5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c60:	69b9      	ldr	r1, [r7, #24]
 8009c62:	69fa      	ldr	r2, [r7, #28]
 8009c64:	e841 2300 	strex	r3, r2, [r1]
 8009c68:	617b      	str	r3, [r7, #20]
   return(result);
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1e3      	bne.n	8009c38 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c74:	4619      	mov	r1, r3
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f85c 	bl	8009d34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009c7c:	e023      	b.n	8009cc6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d009      	beq.n	8009c9e <HAL_UART_IRQHandler+0x4ea>
 8009c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d003      	beq.n	8009c9e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 fb57 	bl	800a34a <UART_Transmit_IT>
    return;
 8009c9c:	e014      	b.n	8009cc8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00e      	beq.n	8009cc8 <HAL_UART_IRQHandler+0x514>
 8009caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d008      	beq.n	8009cc8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fb97 	bl	800a3ea <UART_EndTransmit_IT>
    return;
 8009cbc:	e004      	b.n	8009cc8 <HAL_UART_IRQHandler+0x514>
    return;
 8009cbe:	bf00      	nop
 8009cc0:	e002      	b.n	8009cc8 <HAL_UART_IRQHandler+0x514>
      return;
 8009cc2:	bf00      	nop
 8009cc4:	e000      	b.n	8009cc8 <HAL_UART_IRQHandler+0x514>
      return;
 8009cc6:	bf00      	nop
  }
}
 8009cc8:	37e8      	adds	r7, #232	; 0xe8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop

08009cd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009cd8:	bf00      	nop
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009cec:	bf00      	nop
 8009cee:	370c      	adds	r7, #12
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr

08009cf8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009d00:	bf00      	nop
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b090      	sub	sp, #64	; 0x40
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d137      	bne.n	8009dd8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3314      	adds	r3, #20
 8009d74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d78:	e853 3f00 	ldrex	r3, [r3]
 8009d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d84:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	3314      	adds	r3, #20
 8009d8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d8e:	633a      	str	r2, [r7, #48]	; 0x30
 8009d90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d96:	e841 2300 	strex	r3, r2, [r1]
 8009d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1e5      	bne.n	8009d6e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	330c      	adds	r3, #12
 8009da8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	e853 3f00 	ldrex	r3, [r3]
 8009db0:	60fb      	str	r3, [r7, #12]
   return(result);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009db8:	637b      	str	r3, [r7, #52]	; 0x34
 8009dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	330c      	adds	r3, #12
 8009dc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dc2:	61fa      	str	r2, [r7, #28]
 8009dc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc6:	69b9      	ldr	r1, [r7, #24]
 8009dc8:	69fa      	ldr	r2, [r7, #28]
 8009dca:	e841 2300 	strex	r3, r2, [r1]
 8009dce:	617b      	str	r3, [r7, #20]
   return(result);
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1e5      	bne.n	8009da2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009dd6:	e002      	b.n	8009dde <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009dd8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009dda:	f7ff ff79 	bl	8009cd0 <HAL_UART_TxCpltCallback>
}
 8009dde:	bf00      	nop
 8009de0:	3740      	adds	r7, #64	; 0x40
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b084      	sub	sp, #16
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	f7ff ff75 	bl	8009ce4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dfa:	bf00      	nop
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b09c      	sub	sp, #112	; 0x70
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d172      	bne.n	8009f04 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e20:	2200      	movs	r2, #0
 8009e22:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	330c      	adds	r3, #12
 8009e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e2e:	e853 3f00 	ldrex	r3, [r3]
 8009e32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	330c      	adds	r3, #12
 8009e42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e44:	65ba      	str	r2, [r7, #88]	; 0x58
 8009e46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e4c:	e841 2300 	strex	r3, r2, [r1]
 8009e50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1e5      	bne.n	8009e24 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3314      	adds	r3, #20
 8009e5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e62:	e853 3f00 	ldrex	r3, [r3]
 8009e66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e6a:	f023 0301 	bic.w	r3, r3, #1
 8009e6e:	667b      	str	r3, [r7, #100]	; 0x64
 8009e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	3314      	adds	r3, #20
 8009e76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009e78:	647a      	str	r2, [r7, #68]	; 0x44
 8009e7a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e80:	e841 2300 	strex	r3, r2, [r1]
 8009e84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1e5      	bne.n	8009e58 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3314      	adds	r3, #20
 8009e92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	e853 3f00 	ldrex	r3, [r3]
 8009e9a:	623b      	str	r3, [r7, #32]
   return(result);
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ea2:	663b      	str	r3, [r7, #96]	; 0x60
 8009ea4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	3314      	adds	r3, #20
 8009eaa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009eac:	633a      	str	r2, [r7, #48]	; 0x30
 8009eae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009eb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eb4:	e841 2300 	strex	r3, r2, [r1]
 8009eb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d1e5      	bne.n	8009e8c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ec2:	2220      	movs	r2, #32
 8009ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d119      	bne.n	8009f04 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	330c      	adds	r3, #12
 8009ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	e853 3f00 	ldrex	r3, [r3]
 8009ede:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f023 0310 	bic.w	r3, r3, #16
 8009ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	330c      	adds	r3, #12
 8009eee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ef0:	61fa      	str	r2, [r7, #28]
 8009ef2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef4:	69b9      	ldr	r1, [r7, #24]
 8009ef6:	69fa      	ldr	r2, [r7, #28]
 8009ef8:	e841 2300 	strex	r3, r2, [r1]
 8009efc:	617b      	str	r3, [r7, #20]
   return(result);
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1e5      	bne.n	8009ed0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d106      	bne.n	8009f1a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f10:	4619      	mov	r1, r3
 8009f12:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009f14:	f7ff ff0e 	bl	8009d34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f18:	e002      	b.n	8009f20 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009f1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009f1c:	f7ff feec 	bl	8009cf8 <HAL_UART_RxCpltCallback>
}
 8009f20:	bf00      	nop
 8009f22:	3770      	adds	r7, #112	; 0x70
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f34:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d108      	bne.n	8009f50 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f42:	085b      	lsrs	r3, r3, #1
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	4619      	mov	r1, r3
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f7ff fef3 	bl	8009d34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f4e:	e002      	b.n	8009f56 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f7ff fedb 	bl	8009d0c <HAL_UART_RxHalfCpltCallback>
}
 8009f56:	bf00      	nop
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b084      	sub	sp, #16
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009f66:	2300      	movs	r3, #0
 8009f68:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	695b      	ldr	r3, [r3, #20]
 8009f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f7a:	2b80      	cmp	r3, #128	; 0x80
 8009f7c:	bf0c      	ite	eq
 8009f7e:	2301      	moveq	r3, #1
 8009f80:	2300      	movne	r3, #0
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	2b21      	cmp	r3, #33	; 0x21
 8009f90:	d108      	bne.n	8009fa4 <UART_DMAError+0x46>
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d005      	beq.n	8009fa4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009f9e:	68b8      	ldr	r0, [r7, #8]
 8009fa0:	f000 f934 	bl	800a20c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fae:	2b40      	cmp	r3, #64	; 0x40
 8009fb0:	bf0c      	ite	eq
 8009fb2:	2301      	moveq	r3, #1
 8009fb4:	2300      	movne	r3, #0
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	2b22      	cmp	r3, #34	; 0x22
 8009fc4:	d108      	bne.n	8009fd8 <UART_DMAError+0x7a>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d005      	beq.n	8009fd8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009fd2:	68b8      	ldr	r0, [r7, #8]
 8009fd4:	f000 f942 	bl	800a25c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fdc:	f043 0210 	orr.w	r2, r3, #16
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fe4:	68b8      	ldr	r0, [r7, #8]
 8009fe6:	f7ff fe9b 	bl	8009d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fea:	bf00      	nop
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b090      	sub	sp, #64	; 0x40
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	60f8      	str	r0, [r7, #12]
 8009ffa:	60b9      	str	r1, [r7, #8]
 8009ffc:	603b      	str	r3, [r7, #0]
 8009ffe:	4613      	mov	r3, r2
 800a000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a002:	e050      	b.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a00a:	d04c      	beq.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a00c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d007      	beq.n	800a022 <UART_WaitOnFlagUntilTimeout+0x30>
 800a012:	f7fa f9bb 	bl	800438c <HAL_GetTick>
 800a016:	4602      	mov	r2, r0
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a01e:	429a      	cmp	r2, r3
 800a020:	d241      	bcs.n	800a0a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	330c      	adds	r3, #12
 800a028:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a034:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	330c      	adds	r3, #12
 800a040:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a042:	637a      	str	r2, [r7, #52]	; 0x34
 800a044:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a046:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e5      	bne.n	800a022 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3314      	adds	r3, #20
 800a05c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	e853 3f00 	ldrex	r3, [r3]
 800a064:	613b      	str	r3, [r7, #16]
   return(result);
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	f023 0301 	bic.w	r3, r3, #1
 800a06c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	3314      	adds	r3, #20
 800a074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a076:	623a      	str	r2, [r7, #32]
 800a078:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07a:	69f9      	ldr	r1, [r7, #28]
 800a07c:	6a3a      	ldr	r2, [r7, #32]
 800a07e:	e841 2300 	strex	r3, r2, [r1]
 800a082:	61bb      	str	r3, [r7, #24]
   return(result);
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1e5      	bne.n	800a056 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2220      	movs	r2, #32
 800a08e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2220      	movs	r2, #32
 800a096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e00f      	b.n	800a0c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	bf0c      	ite	eq
 800a0b6:	2301      	moveq	r3, #1
 800a0b8:	2300      	movne	r3, #0
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	461a      	mov	r2, r3
 800a0be:	79fb      	ldrb	r3, [r7, #7]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d09f      	beq.n	800a004 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3740      	adds	r7, #64	; 0x40
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
	...

0800a0d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b098      	sub	sp, #96	; 0x60
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	4613      	mov	r3, r2
 800a0dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	88fa      	ldrh	r2, [r7, #6]
 800a0e8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2222      	movs	r2, #34	; 0x22
 800a0f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0fc:	4a40      	ldr	r2, [pc, #256]	; (800a200 <UART_Start_Receive_DMA+0x130>)
 800a0fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a104:	4a3f      	ldr	r2, [pc, #252]	; (800a204 <UART_Start_Receive_DMA+0x134>)
 800a106:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10c:	4a3e      	ldr	r2, [pc, #248]	; (800a208 <UART_Start_Receive_DMA+0x138>)
 800a10e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a114:	2200      	movs	r2, #0
 800a116:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a118:	f107 0308 	add.w	r3, r7, #8
 800a11c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	3304      	adds	r3, #4
 800a128:	4619      	mov	r1, r3
 800a12a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	88fb      	ldrh	r3, [r7, #6]
 800a130:	f7fa fc00 	bl	8004934 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a134:	2300      	movs	r3, #0
 800a136:	613b      	str	r3, [r7, #16]
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	613b      	str	r3, [r7, #16]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	613b      	str	r3, [r7, #16]
 800a148:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d019      	beq.n	800a18e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	330c      	adds	r3, #12
 800a160:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a164:	e853 3f00 	ldrex	r3, [r3]
 800a168:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a16c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a170:	65bb      	str	r3, [r7, #88]	; 0x58
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	330c      	adds	r3, #12
 800a178:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a17a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a17c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a180:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a182:	e841 2300 	strex	r3, r2, [r1]
 800a186:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d1e5      	bne.n	800a15a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3314      	adds	r3, #20
 800a194:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a198:	e853 3f00 	ldrex	r3, [r3]
 800a19c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a0:	f043 0301 	orr.w	r3, r3, #1
 800a1a4:	657b      	str	r3, [r7, #84]	; 0x54
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	3314      	adds	r3, #20
 800a1ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a1ae:	63ba      	str	r2, [r7, #56]	; 0x38
 800a1b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a1b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a1b6:	e841 2300 	strex	r3, r2, [r1]
 800a1ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1e5      	bne.n	800a18e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3314      	adds	r3, #20
 800a1c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	e853 3f00 	ldrex	r3, [r3]
 800a1d0:	617b      	str	r3, [r7, #20]
   return(result);
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1d8:	653b      	str	r3, [r7, #80]	; 0x50
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	3314      	adds	r3, #20
 800a1e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a1e2:	627a      	str	r2, [r7, #36]	; 0x24
 800a1e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1e6:	6a39      	ldr	r1, [r7, #32]
 800a1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ea:	e841 2300 	strex	r3, r2, [r1]
 800a1ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d1e5      	bne.n	800a1c2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3760      	adds	r7, #96	; 0x60
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	08009e03 	.word	0x08009e03
 800a204:	08009f29 	.word	0x08009f29
 800a208:	08009f5f 	.word	0x08009f5f

0800a20c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b089      	sub	sp, #36	; 0x24
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	330c      	adds	r3, #12
 800a21a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	e853 3f00 	ldrex	r3, [r3]
 800a222:	60bb      	str	r3, [r7, #8]
   return(result);
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a22a:	61fb      	str	r3, [r7, #28]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	330c      	adds	r3, #12
 800a232:	69fa      	ldr	r2, [r7, #28]
 800a234:	61ba      	str	r2, [r7, #24]
 800a236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a238:	6979      	ldr	r1, [r7, #20]
 800a23a:	69ba      	ldr	r2, [r7, #24]
 800a23c:	e841 2300 	strex	r3, r2, [r1]
 800a240:	613b      	str	r3, [r7, #16]
   return(result);
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1e5      	bne.n	800a214 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2220      	movs	r2, #32
 800a24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800a250:	bf00      	nop
 800a252:	3724      	adds	r7, #36	; 0x24
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b095      	sub	sp, #84	; 0x54
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	330c      	adds	r3, #12
 800a26a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a26e:	e853 3f00 	ldrex	r3, [r3]
 800a272:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a276:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a27a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	330c      	adds	r3, #12
 800a282:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a284:	643a      	str	r2, [r7, #64]	; 0x40
 800a286:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a288:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a28a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a28c:	e841 2300 	strex	r3, r2, [r1]
 800a290:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a294:	2b00      	cmp	r3, #0
 800a296:	d1e5      	bne.n	800a264 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	3314      	adds	r3, #20
 800a29e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a0:	6a3b      	ldr	r3, [r7, #32]
 800a2a2:	e853 3f00 	ldrex	r3, [r3]
 800a2a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	f023 0301 	bic.w	r3, r3, #1
 800a2ae:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3314      	adds	r3, #20
 800a2b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2c0:	e841 2300 	strex	r3, r2, [r1]
 800a2c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1e5      	bne.n	800a298 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d119      	bne.n	800a308 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	330c      	adds	r3, #12
 800a2da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	e853 3f00 	ldrex	r3, [r3]
 800a2e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	f023 0310 	bic.w	r3, r3, #16
 800a2ea:	647b      	str	r3, [r7, #68]	; 0x44
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	330c      	adds	r3, #12
 800a2f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2f4:	61ba      	str	r2, [r7, #24]
 800a2f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f8:	6979      	ldr	r1, [r7, #20]
 800a2fa:	69ba      	ldr	r2, [r7, #24]
 800a2fc:	e841 2300 	strex	r3, r2, [r1]
 800a300:	613b      	str	r3, [r7, #16]
   return(result);
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d1e5      	bne.n	800a2d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2220      	movs	r2, #32
 800a30c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a316:	bf00      	nop
 800a318:	3754      	adds	r7, #84	; 0x54
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b084      	sub	sp, #16
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a32e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2200      	movs	r2, #0
 800a334:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f7ff fcef 	bl	8009d20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a342:	bf00      	nop
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a34a:	b480      	push	{r7}
 800a34c:	b085      	sub	sp, #20
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b21      	cmp	r3, #33	; 0x21
 800a35c:	d13e      	bne.n	800a3dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a366:	d114      	bne.n	800a392 <UART_Transmit_IT+0x48>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d110      	bne.n	800a392 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6a1b      	ldr	r3, [r3, #32]
 800a374:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	881b      	ldrh	r3, [r3, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a384:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	1c9a      	adds	r2, r3, #2
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	621a      	str	r2, [r3, #32]
 800a390:	e008      	b.n	800a3a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	1c59      	adds	r1, r3, #1
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	6211      	str	r1, [r2, #32]
 800a39c:	781a      	ldrb	r2, [r3, #0]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d10f      	bne.n	800a3d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68da      	ldr	r2, [r3, #12]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	68da      	ldr	r2, [r3, #12]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	e000      	b.n	800a3de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a3dc:	2302      	movs	r3, #2
  }
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3714      	adds	r7, #20
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b082      	sub	sp, #8
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	68da      	ldr	r2, [r3, #12]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a400:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2220      	movs	r2, #32
 800a406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f7ff fc60 	bl	8009cd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3708      	adds	r7, #8
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b08c      	sub	sp, #48	; 0x30
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	2b22      	cmp	r3, #34	; 0x22
 800a42c:	f040 80ab 	bne.w	800a586 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a438:	d117      	bne.n	800a46a <UART_Receive_IT+0x50>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d113      	bne.n	800a46a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a442:	2300      	movs	r3, #0
 800a444:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a44a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	b29b      	uxth	r3, r3
 800a454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a458:	b29a      	uxth	r2, r3
 800a45a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a462:	1c9a      	adds	r2, r3, #2
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	629a      	str	r2, [r3, #40]	; 0x28
 800a468:	e026      	b.n	800a4b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a470:	2300      	movs	r3, #0
 800a472:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a47c:	d007      	beq.n	800a48e <UART_Receive_IT+0x74>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10a      	bne.n	800a49c <UART_Receive_IT+0x82>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d106      	bne.n	800a49c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	b2da      	uxtb	r2, r3
 800a496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a498:	701a      	strb	r2, [r3, #0]
 800a49a:	e008      	b.n	800a4ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4a8:	b2da      	uxtb	r2, r3
 800a4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b2:	1c5a      	adds	r2, r3, #1
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d15a      	bne.n	800a582 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68da      	ldr	r2, [r3, #12]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f022 0220 	bic.w	r2, r2, #32
 800a4da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	68da      	ldr	r2, [r3, #12]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	695a      	ldr	r2, [r3, #20]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f022 0201 	bic.w	r2, r2, #1
 800a4fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2220      	movs	r2, #32
 800a500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d135      	bne.n	800a578 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	330c      	adds	r3, #12
 800a518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	e853 3f00 	ldrex	r3, [r3]
 800a520:	613b      	str	r3, [r7, #16]
   return(result);
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	f023 0310 	bic.w	r3, r3, #16
 800a528:	627b      	str	r3, [r7, #36]	; 0x24
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	330c      	adds	r3, #12
 800a530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a532:	623a      	str	r2, [r7, #32]
 800a534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a536:	69f9      	ldr	r1, [r7, #28]
 800a538:	6a3a      	ldr	r2, [r7, #32]
 800a53a:	e841 2300 	strex	r3, r2, [r1]
 800a53e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1e5      	bne.n	800a512 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 0310 	and.w	r3, r3, #16
 800a550:	2b10      	cmp	r3, #16
 800a552:	d10a      	bne.n	800a56a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a554:	2300      	movs	r3, #0
 800a556:	60fb      	str	r3, [r7, #12]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	60fb      	str	r3, [r7, #12]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	60fb      	str	r3, [r7, #12]
 800a568:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a56e:	4619      	mov	r1, r3
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f7ff fbdf 	bl	8009d34 <HAL_UARTEx_RxEventCallback>
 800a576:	e002      	b.n	800a57e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff fbbd 	bl	8009cf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a57e:	2300      	movs	r3, #0
 800a580:	e002      	b.n	800a588 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a582:	2300      	movs	r3, #0
 800a584:	e000      	b.n	800a588 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a586:	2302      	movs	r3, #2
  }
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3730      	adds	r7, #48	; 0x30
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a594:	b0c0      	sub	sp, #256	; 0x100
 800a596:	af00      	add	r7, sp, #0
 800a598:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a59c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a5a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5ac:	68d9      	ldr	r1, [r3, #12]
 800a5ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	ea40 0301 	orr.w	r3, r0, r1
 800a5b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a5ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5be:	689a      	ldr	r2, [r3, #8]
 800a5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	431a      	orrs	r2, r3
 800a5c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5cc:	695b      	ldr	r3, [r3, #20]
 800a5ce:	431a      	orrs	r2, r3
 800a5d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5d4:	69db      	ldr	r3, [r3, #28]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a5dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a5e8:	f021 010c 	bic.w	r1, r1, #12
 800a5ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a5f6:	430b      	orrs	r3, r1
 800a5f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a5fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a60a:	6999      	ldr	r1, [r3, #24]
 800a60c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	ea40 0301 	orr.w	r3, r0, r1
 800a616:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	4b8f      	ldr	r3, [pc, #572]	; (800a85c <UART_SetConfig+0x2cc>)
 800a620:	429a      	cmp	r2, r3
 800a622:	d005      	beq.n	800a630 <UART_SetConfig+0xa0>
 800a624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	4b8d      	ldr	r3, [pc, #564]	; (800a860 <UART_SetConfig+0x2d0>)
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d104      	bne.n	800a63a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a630:	f7fd ff8c 	bl	800854c <HAL_RCC_GetPCLK2Freq>
 800a634:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a638:	e003      	b.n	800a642 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a63a:	f7fd ff73 	bl	8008524 <HAL_RCC_GetPCLK1Freq>
 800a63e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a646:	69db      	ldr	r3, [r3, #28]
 800a648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a64c:	f040 810c 	bne.w	800a868 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a654:	2200      	movs	r2, #0
 800a656:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a65a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a65e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a662:	4622      	mov	r2, r4
 800a664:	462b      	mov	r3, r5
 800a666:	1891      	adds	r1, r2, r2
 800a668:	65b9      	str	r1, [r7, #88]	; 0x58
 800a66a:	415b      	adcs	r3, r3
 800a66c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a66e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a672:	4621      	mov	r1, r4
 800a674:	eb12 0801 	adds.w	r8, r2, r1
 800a678:	4629      	mov	r1, r5
 800a67a:	eb43 0901 	adc.w	r9, r3, r1
 800a67e:	f04f 0200 	mov.w	r2, #0
 800a682:	f04f 0300 	mov.w	r3, #0
 800a686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a68a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a68e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a692:	4690      	mov	r8, r2
 800a694:	4699      	mov	r9, r3
 800a696:	4623      	mov	r3, r4
 800a698:	eb18 0303 	adds.w	r3, r8, r3
 800a69c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a6a0:	462b      	mov	r3, r5
 800a6a2:	eb49 0303 	adc.w	r3, r9, r3
 800a6a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a6aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a6b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a6ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a6be:	460b      	mov	r3, r1
 800a6c0:	18db      	adds	r3, r3, r3
 800a6c2:	653b      	str	r3, [r7, #80]	; 0x50
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	eb42 0303 	adc.w	r3, r2, r3
 800a6ca:	657b      	str	r3, [r7, #84]	; 0x54
 800a6cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a6d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a6d4:	f7f6 fb40 	bl	8000d58 <__aeabi_uldivmod>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4b61      	ldr	r3, [pc, #388]	; (800a864 <UART_SetConfig+0x2d4>)
 800a6de:	fba3 2302 	umull	r2, r3, r3, r2
 800a6e2:	095b      	lsrs	r3, r3, #5
 800a6e4:	011c      	lsls	r4, r3, #4
 800a6e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a6f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a6f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a6f8:	4642      	mov	r2, r8
 800a6fa:	464b      	mov	r3, r9
 800a6fc:	1891      	adds	r1, r2, r2
 800a6fe:	64b9      	str	r1, [r7, #72]	; 0x48
 800a700:	415b      	adcs	r3, r3
 800a702:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a704:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a708:	4641      	mov	r1, r8
 800a70a:	eb12 0a01 	adds.w	sl, r2, r1
 800a70e:	4649      	mov	r1, r9
 800a710:	eb43 0b01 	adc.w	fp, r3, r1
 800a714:	f04f 0200 	mov.w	r2, #0
 800a718:	f04f 0300 	mov.w	r3, #0
 800a71c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a720:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a724:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a728:	4692      	mov	sl, r2
 800a72a:	469b      	mov	fp, r3
 800a72c:	4643      	mov	r3, r8
 800a72e:	eb1a 0303 	adds.w	r3, sl, r3
 800a732:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a736:	464b      	mov	r3, r9
 800a738:	eb4b 0303 	adc.w	r3, fp, r3
 800a73c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	2200      	movs	r2, #0
 800a748:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a74c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a750:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a754:	460b      	mov	r3, r1
 800a756:	18db      	adds	r3, r3, r3
 800a758:	643b      	str	r3, [r7, #64]	; 0x40
 800a75a:	4613      	mov	r3, r2
 800a75c:	eb42 0303 	adc.w	r3, r2, r3
 800a760:	647b      	str	r3, [r7, #68]	; 0x44
 800a762:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a766:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a76a:	f7f6 faf5 	bl	8000d58 <__aeabi_uldivmod>
 800a76e:	4602      	mov	r2, r0
 800a770:	460b      	mov	r3, r1
 800a772:	4611      	mov	r1, r2
 800a774:	4b3b      	ldr	r3, [pc, #236]	; (800a864 <UART_SetConfig+0x2d4>)
 800a776:	fba3 2301 	umull	r2, r3, r3, r1
 800a77a:	095b      	lsrs	r3, r3, #5
 800a77c:	2264      	movs	r2, #100	; 0x64
 800a77e:	fb02 f303 	mul.w	r3, r2, r3
 800a782:	1acb      	subs	r3, r1, r3
 800a784:	00db      	lsls	r3, r3, #3
 800a786:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a78a:	4b36      	ldr	r3, [pc, #216]	; (800a864 <UART_SetConfig+0x2d4>)
 800a78c:	fba3 2302 	umull	r2, r3, r3, r2
 800a790:	095b      	lsrs	r3, r3, #5
 800a792:	005b      	lsls	r3, r3, #1
 800a794:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a798:	441c      	add	r4, r3
 800a79a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a7a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a7a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a7ac:	4642      	mov	r2, r8
 800a7ae:	464b      	mov	r3, r9
 800a7b0:	1891      	adds	r1, r2, r2
 800a7b2:	63b9      	str	r1, [r7, #56]	; 0x38
 800a7b4:	415b      	adcs	r3, r3
 800a7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a7b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a7bc:	4641      	mov	r1, r8
 800a7be:	1851      	adds	r1, r2, r1
 800a7c0:	6339      	str	r1, [r7, #48]	; 0x30
 800a7c2:	4649      	mov	r1, r9
 800a7c4:	414b      	adcs	r3, r1
 800a7c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a7c8:	f04f 0200 	mov.w	r2, #0
 800a7cc:	f04f 0300 	mov.w	r3, #0
 800a7d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a7d4:	4659      	mov	r1, fp
 800a7d6:	00cb      	lsls	r3, r1, #3
 800a7d8:	4651      	mov	r1, sl
 800a7da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7de:	4651      	mov	r1, sl
 800a7e0:	00ca      	lsls	r2, r1, #3
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	4642      	mov	r2, r8
 800a7ea:	189b      	adds	r3, r3, r2
 800a7ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a7f0:	464b      	mov	r3, r9
 800a7f2:	460a      	mov	r2, r1
 800a7f4:	eb42 0303 	adc.w	r3, r2, r3
 800a7f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a7fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a808:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a80c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a810:	460b      	mov	r3, r1
 800a812:	18db      	adds	r3, r3, r3
 800a814:	62bb      	str	r3, [r7, #40]	; 0x28
 800a816:	4613      	mov	r3, r2
 800a818:	eb42 0303 	adc.w	r3, r2, r3
 800a81c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a81e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a822:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a826:	f7f6 fa97 	bl	8000d58 <__aeabi_uldivmod>
 800a82a:	4602      	mov	r2, r0
 800a82c:	460b      	mov	r3, r1
 800a82e:	4b0d      	ldr	r3, [pc, #52]	; (800a864 <UART_SetConfig+0x2d4>)
 800a830:	fba3 1302 	umull	r1, r3, r3, r2
 800a834:	095b      	lsrs	r3, r3, #5
 800a836:	2164      	movs	r1, #100	; 0x64
 800a838:	fb01 f303 	mul.w	r3, r1, r3
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	00db      	lsls	r3, r3, #3
 800a840:	3332      	adds	r3, #50	; 0x32
 800a842:	4a08      	ldr	r2, [pc, #32]	; (800a864 <UART_SetConfig+0x2d4>)
 800a844:	fba2 2303 	umull	r2, r3, r2, r3
 800a848:	095b      	lsrs	r3, r3, #5
 800a84a:	f003 0207 	and.w	r2, r3, #7
 800a84e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4422      	add	r2, r4
 800a856:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a858:	e105      	b.n	800aa66 <UART_SetConfig+0x4d6>
 800a85a:	bf00      	nop
 800a85c:	40011000 	.word	0x40011000
 800a860:	40011400 	.word	0x40011400
 800a864:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a86c:	2200      	movs	r2, #0
 800a86e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a872:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a876:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a87a:	4642      	mov	r2, r8
 800a87c:	464b      	mov	r3, r9
 800a87e:	1891      	adds	r1, r2, r2
 800a880:	6239      	str	r1, [r7, #32]
 800a882:	415b      	adcs	r3, r3
 800a884:	627b      	str	r3, [r7, #36]	; 0x24
 800a886:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a88a:	4641      	mov	r1, r8
 800a88c:	1854      	adds	r4, r2, r1
 800a88e:	4649      	mov	r1, r9
 800a890:	eb43 0501 	adc.w	r5, r3, r1
 800a894:	f04f 0200 	mov.w	r2, #0
 800a898:	f04f 0300 	mov.w	r3, #0
 800a89c:	00eb      	lsls	r3, r5, #3
 800a89e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a8a2:	00e2      	lsls	r2, r4, #3
 800a8a4:	4614      	mov	r4, r2
 800a8a6:	461d      	mov	r5, r3
 800a8a8:	4643      	mov	r3, r8
 800a8aa:	18e3      	adds	r3, r4, r3
 800a8ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a8b0:	464b      	mov	r3, r9
 800a8b2:	eb45 0303 	adc.w	r3, r5, r3
 800a8b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a8ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a8c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a8ca:	f04f 0200 	mov.w	r2, #0
 800a8ce:	f04f 0300 	mov.w	r3, #0
 800a8d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	008b      	lsls	r3, r1, #2
 800a8da:	4621      	mov	r1, r4
 800a8dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8e0:	4621      	mov	r1, r4
 800a8e2:	008a      	lsls	r2, r1, #2
 800a8e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a8e8:	f7f6 fa36 	bl	8000d58 <__aeabi_uldivmod>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4b60      	ldr	r3, [pc, #384]	; (800aa74 <UART_SetConfig+0x4e4>)
 800a8f2:	fba3 2302 	umull	r2, r3, r3, r2
 800a8f6:	095b      	lsrs	r3, r3, #5
 800a8f8:	011c      	lsls	r4, r3, #4
 800a8fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8fe:	2200      	movs	r2, #0
 800a900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a904:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a908:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a90c:	4642      	mov	r2, r8
 800a90e:	464b      	mov	r3, r9
 800a910:	1891      	adds	r1, r2, r2
 800a912:	61b9      	str	r1, [r7, #24]
 800a914:	415b      	adcs	r3, r3
 800a916:	61fb      	str	r3, [r7, #28]
 800a918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a91c:	4641      	mov	r1, r8
 800a91e:	1851      	adds	r1, r2, r1
 800a920:	6139      	str	r1, [r7, #16]
 800a922:	4649      	mov	r1, r9
 800a924:	414b      	adcs	r3, r1
 800a926:	617b      	str	r3, [r7, #20]
 800a928:	f04f 0200 	mov.w	r2, #0
 800a92c:	f04f 0300 	mov.w	r3, #0
 800a930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a934:	4659      	mov	r1, fp
 800a936:	00cb      	lsls	r3, r1, #3
 800a938:	4651      	mov	r1, sl
 800a93a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a93e:	4651      	mov	r1, sl
 800a940:	00ca      	lsls	r2, r1, #3
 800a942:	4610      	mov	r0, r2
 800a944:	4619      	mov	r1, r3
 800a946:	4603      	mov	r3, r0
 800a948:	4642      	mov	r2, r8
 800a94a:	189b      	adds	r3, r3, r2
 800a94c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a950:	464b      	mov	r3, r9
 800a952:	460a      	mov	r2, r1
 800a954:	eb42 0303 	adc.w	r3, r2, r3
 800a958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a95c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	67bb      	str	r3, [r7, #120]	; 0x78
 800a966:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a968:	f04f 0200 	mov.w	r2, #0
 800a96c:	f04f 0300 	mov.w	r3, #0
 800a970:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a974:	4649      	mov	r1, r9
 800a976:	008b      	lsls	r3, r1, #2
 800a978:	4641      	mov	r1, r8
 800a97a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a97e:	4641      	mov	r1, r8
 800a980:	008a      	lsls	r2, r1, #2
 800a982:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a986:	f7f6 f9e7 	bl	8000d58 <__aeabi_uldivmod>
 800a98a:	4602      	mov	r2, r0
 800a98c:	460b      	mov	r3, r1
 800a98e:	4b39      	ldr	r3, [pc, #228]	; (800aa74 <UART_SetConfig+0x4e4>)
 800a990:	fba3 1302 	umull	r1, r3, r3, r2
 800a994:	095b      	lsrs	r3, r3, #5
 800a996:	2164      	movs	r1, #100	; 0x64
 800a998:	fb01 f303 	mul.w	r3, r1, r3
 800a99c:	1ad3      	subs	r3, r2, r3
 800a99e:	011b      	lsls	r3, r3, #4
 800a9a0:	3332      	adds	r3, #50	; 0x32
 800a9a2:	4a34      	ldr	r2, [pc, #208]	; (800aa74 <UART_SetConfig+0x4e4>)
 800a9a4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9a8:	095b      	lsrs	r3, r3, #5
 800a9aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9ae:	441c      	add	r4, r3
 800a9b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	673b      	str	r3, [r7, #112]	; 0x70
 800a9b8:	677a      	str	r2, [r7, #116]	; 0x74
 800a9ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a9be:	4642      	mov	r2, r8
 800a9c0:	464b      	mov	r3, r9
 800a9c2:	1891      	adds	r1, r2, r2
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	415b      	adcs	r3, r3
 800a9c8:	60fb      	str	r3, [r7, #12]
 800a9ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a9ce:	4641      	mov	r1, r8
 800a9d0:	1851      	adds	r1, r2, r1
 800a9d2:	6039      	str	r1, [r7, #0]
 800a9d4:	4649      	mov	r1, r9
 800a9d6:	414b      	adcs	r3, r1
 800a9d8:	607b      	str	r3, [r7, #4]
 800a9da:	f04f 0200 	mov.w	r2, #0
 800a9de:	f04f 0300 	mov.w	r3, #0
 800a9e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a9e6:	4659      	mov	r1, fp
 800a9e8:	00cb      	lsls	r3, r1, #3
 800a9ea:	4651      	mov	r1, sl
 800a9ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9f0:	4651      	mov	r1, sl
 800a9f2:	00ca      	lsls	r2, r1, #3
 800a9f4:	4610      	mov	r0, r2
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	4642      	mov	r2, r8
 800a9fc:	189b      	adds	r3, r3, r2
 800a9fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa00:	464b      	mov	r3, r9
 800aa02:	460a      	mov	r2, r1
 800aa04:	eb42 0303 	adc.w	r3, r2, r3
 800aa08:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	663b      	str	r3, [r7, #96]	; 0x60
 800aa14:	667a      	str	r2, [r7, #100]	; 0x64
 800aa16:	f04f 0200 	mov.w	r2, #0
 800aa1a:	f04f 0300 	mov.w	r3, #0
 800aa1e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800aa22:	4649      	mov	r1, r9
 800aa24:	008b      	lsls	r3, r1, #2
 800aa26:	4641      	mov	r1, r8
 800aa28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aa2c:	4641      	mov	r1, r8
 800aa2e:	008a      	lsls	r2, r1, #2
 800aa30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aa34:	f7f6 f990 	bl	8000d58 <__aeabi_uldivmod>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	4b0d      	ldr	r3, [pc, #52]	; (800aa74 <UART_SetConfig+0x4e4>)
 800aa3e:	fba3 1302 	umull	r1, r3, r3, r2
 800aa42:	095b      	lsrs	r3, r3, #5
 800aa44:	2164      	movs	r1, #100	; 0x64
 800aa46:	fb01 f303 	mul.w	r3, r1, r3
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	011b      	lsls	r3, r3, #4
 800aa4e:	3332      	adds	r3, #50	; 0x32
 800aa50:	4a08      	ldr	r2, [pc, #32]	; (800aa74 <UART_SetConfig+0x4e4>)
 800aa52:	fba2 2303 	umull	r2, r3, r2, r3
 800aa56:	095b      	lsrs	r3, r3, #5
 800aa58:	f003 020f 	and.w	r2, r3, #15
 800aa5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4422      	add	r2, r4
 800aa64:	609a      	str	r2, [r3, #8]
}
 800aa66:	bf00      	nop
 800aa68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa72:	bf00      	nop
 800aa74:	51eb851f 	.word	0x51eb851f

0800aa78 <__NVIC_SetPriority>:
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	6039      	str	r1, [r7, #0]
 800aa82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aa84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	db0a      	blt.n	800aaa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	b2da      	uxtb	r2, r3
 800aa90:	490c      	ldr	r1, [pc, #48]	; (800aac4 <__NVIC_SetPriority+0x4c>)
 800aa92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa96:	0112      	lsls	r2, r2, #4
 800aa98:	b2d2      	uxtb	r2, r2
 800aa9a:	440b      	add	r3, r1
 800aa9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800aaa0:	e00a      	b.n	800aab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	b2da      	uxtb	r2, r3
 800aaa6:	4908      	ldr	r1, [pc, #32]	; (800aac8 <__NVIC_SetPriority+0x50>)
 800aaa8:	79fb      	ldrb	r3, [r7, #7]
 800aaaa:	f003 030f 	and.w	r3, r3, #15
 800aaae:	3b04      	subs	r3, #4
 800aab0:	0112      	lsls	r2, r2, #4
 800aab2:	b2d2      	uxtb	r2, r2
 800aab4:	440b      	add	r3, r1
 800aab6:	761a      	strb	r2, [r3, #24]
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	e000e100 	.word	0xe000e100
 800aac8:	e000ed00 	.word	0xe000ed00

0800aacc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800aacc:	b580      	push	{r7, lr}
 800aace:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800aad0:	4b05      	ldr	r3, [pc, #20]	; (800aae8 <SysTick_Handler+0x1c>)
 800aad2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800aad4:	f001 fea6 	bl	800c824 <xTaskGetSchedulerState>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d001      	beq.n	800aae2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800aade:	f002 fd8b 	bl	800d5f8 <xPortSysTickHandler>
  }
}
 800aae2:	bf00      	nop
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	e000e010 	.word	0xe000e010

0800aaec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aaec:	b580      	push	{r7, lr}
 800aaee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	f06f 0004 	mvn.w	r0, #4
 800aaf6:	f7ff ffbf 	bl	800aa78 <__NVIC_SetPriority>
#endif
}
 800aafa:	bf00      	nop
 800aafc:	bd80      	pop	{r7, pc}
	...

0800ab00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab06:	f3ef 8305 	mrs	r3, IPSR
 800ab0a:	603b      	str	r3, [r7, #0]
  return(result);
 800ab0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d003      	beq.n	800ab1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ab12:	f06f 0305 	mvn.w	r3, #5
 800ab16:	607b      	str	r3, [r7, #4]
 800ab18:	e00c      	b.n	800ab34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ab1a:	4b0a      	ldr	r3, [pc, #40]	; (800ab44 <osKernelInitialize+0x44>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d105      	bne.n	800ab2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ab22:	4b08      	ldr	r3, [pc, #32]	; (800ab44 <osKernelInitialize+0x44>)
 800ab24:	2201      	movs	r2, #1
 800ab26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	607b      	str	r3, [r7, #4]
 800ab2c:	e002      	b.n	800ab34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ab2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ab34:	687b      	ldr	r3, [r7, #4]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	370c      	adds	r7, #12
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	20005054 	.word	0x20005054

0800ab48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab4e:	f3ef 8305 	mrs	r3, IPSR
 800ab52:	603b      	str	r3, [r7, #0]
  return(result);
 800ab54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d003      	beq.n	800ab62 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ab5a:	f06f 0305 	mvn.w	r3, #5
 800ab5e:	607b      	str	r3, [r7, #4]
 800ab60:	e010      	b.n	800ab84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ab62:	4b0b      	ldr	r3, [pc, #44]	; (800ab90 <osKernelStart+0x48>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d109      	bne.n	800ab7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ab6a:	f7ff ffbf 	bl	800aaec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ab6e:	4b08      	ldr	r3, [pc, #32]	; (800ab90 <osKernelStart+0x48>)
 800ab70:	2202      	movs	r2, #2
 800ab72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ab74:	f001 f9d4 	bl	800bf20 <vTaskStartScheduler>
      stat = osOK;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	607b      	str	r3, [r7, #4]
 800ab7c:	e002      	b.n	800ab84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ab7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ab84:	687b      	ldr	r3, [r7, #4]
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3708      	adds	r7, #8
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	20005054 	.word	0x20005054

0800ab94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab9c:	f3ef 8305 	mrs	r3, IPSR
 800aba0:	60bb      	str	r3, [r7, #8]
  return(result);
 800aba2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d003      	beq.n	800abb0 <osDelay+0x1c>
    stat = osErrorISR;
 800aba8:	f06f 0305 	mvn.w	r3, #5
 800abac:	60fb      	str	r3, [r7, #12]
 800abae:	e007      	b.n	800abc0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d002      	beq.n	800abc0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f001 f97c 	bl	800beb8 <vTaskDelay>
    }
  }

  return (stat);
 800abc0:	68fb      	ldr	r3, [r7, #12]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
	...

0800abcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800abcc:	b480      	push	{r7}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4a07      	ldr	r2, [pc, #28]	; (800abf8 <vApplicationGetIdleTaskMemory+0x2c>)
 800abdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	4a06      	ldr	r2, [pc, #24]	; (800abfc <vApplicationGetIdleTaskMemory+0x30>)
 800abe2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2280      	movs	r2, #128	; 0x80
 800abe8:	601a      	str	r2, [r3, #0]
}
 800abea:	bf00      	nop
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	20005058 	.word	0x20005058
 800abfc:	20005114 	.word	0x20005114

0800ac00 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	4a07      	ldr	r2, [pc, #28]	; (800ac2c <vApplicationGetTimerTaskMemory+0x2c>)
 800ac10:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	4a06      	ldr	r2, [pc, #24]	; (800ac30 <vApplicationGetTimerTaskMemory+0x30>)
 800ac16:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac1e:	601a      	str	r2, [r3, #0]
}
 800ac20:	bf00      	nop
 800ac22:	3714      	adds	r7, #20
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	20005314 	.word	0x20005314
 800ac30:	200053d0 	.word	0x200053d0

0800ac34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f103 0208 	add.w	r2, r3, #8
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f103 0208 	add.w	r2, r3, #8
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f103 0208 	add.w	r2, r3, #8
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ac68:	bf00      	nop
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ac82:	bf00      	nop
 800ac84:	370c      	adds	r7, #12
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr

0800ac8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac8e:	b480      	push	{r7}
 800ac90:	b085      	sub	sp, #20
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	689a      	ldr	r2, [r3, #8]
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	683a      	ldr	r2, [r7, #0]
 800acb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	683a      	ldr	r2, [r7, #0]
 800acb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	1c5a      	adds	r2, r3, #1
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	601a      	str	r2, [r3, #0]
}
 800acca:	bf00      	nop
 800accc:	3714      	adds	r7, #20
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr

0800acd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800acd6:	b480      	push	{r7}
 800acd8:	b085      	sub	sp, #20
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
 800acde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acec:	d103      	bne.n	800acf6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	e00c      	b.n	800ad10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	3308      	adds	r3, #8
 800acfa:	60fb      	str	r3, [r7, #12]
 800acfc:	e002      	b.n	800ad04 <vListInsert+0x2e>
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	60fb      	str	r3, [r7, #12]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d2f6      	bcs.n	800acfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	685a      	ldr	r2, [r3, #4]
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	1c5a      	adds	r2, r3, #1
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	601a      	str	r2, [r3, #0]
}
 800ad3c:	bf00      	nop
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	6892      	ldr	r2, [r2, #8]
 800ad5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	6852      	ldr	r2, [r2, #4]
 800ad68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d103      	bne.n	800ad7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	689a      	ldr	r2, [r3, #8]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	1e5a      	subs	r2, r3, #1
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3714      	adds	r7, #20
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d10a      	bne.n	800adc6 <xQueueGenericReset+0x2a>
	__asm volatile
 800adb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	60bb      	str	r3, [r7, #8]
}
 800adc2:	bf00      	nop
 800adc4:	e7fe      	b.n	800adc4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800adc6:	f002 fb85 	bl	800d4d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800add2:	68f9      	ldr	r1, [r7, #12]
 800add4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800add6:	fb01 f303 	mul.w	r3, r1, r3
 800adda:	441a      	add	r2, r3
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2200      	movs	r2, #0
 800ade4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf6:	3b01      	subs	r3, #1
 800adf8:	68f9      	ldr	r1, [r7, #12]
 800adfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800adfc:	fb01 f303 	mul.w	r3, r1, r3
 800ae00:	441a      	add	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	22ff      	movs	r2, #255	; 0xff
 800ae0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	22ff      	movs	r2, #255	; 0xff
 800ae12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d114      	bne.n	800ae46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d01a      	beq.n	800ae5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	3310      	adds	r3, #16
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f001 fb13 	bl	800c454 <xTaskRemoveFromEventList>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d012      	beq.n	800ae5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ae34:	4b0c      	ldr	r3, [pc, #48]	; (800ae68 <xQueueGenericReset+0xcc>)
 800ae36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae3a:	601a      	str	r2, [r3, #0]
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	f3bf 8f6f 	isb	sy
 800ae44:	e009      	b.n	800ae5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	3310      	adds	r3, #16
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7ff fef2 	bl	800ac34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	3324      	adds	r3, #36	; 0x24
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7ff feed 	bl	800ac34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ae5a:	f002 fb6b 	bl	800d534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ae5e:	2301      	movs	r3, #1
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	e000ed04 	.word	0xe000ed04

0800ae6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b08e      	sub	sp, #56	; 0x38
 800ae70:	af02      	add	r7, sp, #8
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
 800ae78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10a      	bne.n	800ae96 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae92:	bf00      	nop
 800ae94:	e7fe      	b.n	800ae94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10a      	bne.n	800aeb2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aeae:	bf00      	nop
 800aeb0:	e7fe      	b.n	800aeb0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d002      	beq.n	800aebe <xQueueGenericCreateStatic+0x52>
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <xQueueGenericCreateStatic+0x56>
 800aebe:	2301      	movs	r3, #1
 800aec0:	e000      	b.n	800aec4 <xQueueGenericCreateStatic+0x58>
 800aec2:	2300      	movs	r3, #0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d10a      	bne.n	800aede <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800aec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aecc:	f383 8811 	msr	BASEPRI, r3
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	f3bf 8f4f 	dsb	sy
 800aed8:	623b      	str	r3, [r7, #32]
}
 800aeda:	bf00      	nop
 800aedc:	e7fe      	b.n	800aedc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d102      	bne.n	800aeea <xQueueGenericCreateStatic+0x7e>
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <xQueueGenericCreateStatic+0x82>
 800aeea:	2301      	movs	r3, #1
 800aeec:	e000      	b.n	800aef0 <xQueueGenericCreateStatic+0x84>
 800aeee:	2300      	movs	r3, #0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d10a      	bne.n	800af0a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800aef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef8:	f383 8811 	msr	BASEPRI, r3
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	61fb      	str	r3, [r7, #28]
}
 800af06:	bf00      	nop
 800af08:	e7fe      	b.n	800af08 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800af0a:	2350      	movs	r3, #80	; 0x50
 800af0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	2b50      	cmp	r3, #80	; 0x50
 800af12:	d00a      	beq.n	800af2a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800af14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af18:	f383 8811 	msr	BASEPRI, r3
 800af1c:	f3bf 8f6f 	isb	sy
 800af20:	f3bf 8f4f 	dsb	sy
 800af24:	61bb      	str	r3, [r7, #24]
}
 800af26:	bf00      	nop
 800af28:	e7fe      	b.n	800af28 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800af2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800af30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af32:	2b00      	cmp	r3, #0
 800af34:	d00d      	beq.n	800af52 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800af36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af38:	2201      	movs	r2, #1
 800af3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800af42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af44:	9300      	str	r3, [sp, #0]
 800af46:	4613      	mov	r3, r2
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	68b9      	ldr	r1, [r7, #8]
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f000 f83f 	bl	800afd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800af54:	4618      	mov	r0, r3
 800af56:	3730      	adds	r7, #48	; 0x30
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b08a      	sub	sp, #40	; 0x28
 800af60:	af02      	add	r7, sp, #8
 800af62:	60f8      	str	r0, [r7, #12]
 800af64:	60b9      	str	r1, [r7, #8]
 800af66:	4613      	mov	r3, r2
 800af68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d10a      	bne.n	800af86 <xQueueGenericCreate+0x2a>
	__asm volatile
 800af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	613b      	str	r3, [r7, #16]
}
 800af82:	bf00      	nop
 800af84:	e7fe      	b.n	800af84 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	68ba      	ldr	r2, [r7, #8]
 800af8a:	fb02 f303 	mul.w	r3, r2, r3
 800af8e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	3350      	adds	r3, #80	; 0x50
 800af94:	4618      	mov	r0, r3
 800af96:	f002 fbbf 	bl	800d718 <pvPortMalloc>
 800af9a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d011      	beq.n	800afc6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	3350      	adds	r3, #80	; 0x50
 800afaa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	2200      	movs	r2, #0
 800afb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800afb4:	79fa      	ldrb	r2, [r7, #7]
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	4613      	mov	r3, r2
 800afbc:	697a      	ldr	r2, [r7, #20]
 800afbe:	68b9      	ldr	r1, [r7, #8]
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f000 f805 	bl	800afd0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800afc6:	69bb      	ldr	r3, [r7, #24]
	}
 800afc8:	4618      	mov	r0, r3
 800afca:	3720      	adds	r7, #32
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	607a      	str	r2, [r7, #4]
 800afdc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d103      	bne.n	800afec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	69ba      	ldr	r2, [r7, #24]
 800afe8:	601a      	str	r2, [r3, #0]
 800afea:	e002      	b.n	800aff2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800afec:	69bb      	ldr	r3, [r7, #24]
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800affe:	2101      	movs	r1, #1
 800b000:	69b8      	ldr	r0, [r7, #24]
 800b002:	f7ff fecb 	bl	800ad9c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	78fa      	ldrb	r2, [r7, #3]
 800b00a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b00e:	bf00      	nop
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
	...

0800b018 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b08e      	sub	sp, #56	; 0x38
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
 800b024:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b026:	2300      	movs	r3, #0
 800b028:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b030:	2b00      	cmp	r3, #0
 800b032:	d10a      	bne.n	800b04a <xQueueGenericSend+0x32>
	__asm volatile
 800b034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b038:	f383 8811 	msr	BASEPRI, r3
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b046:	bf00      	nop
 800b048:	e7fe      	b.n	800b048 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d103      	bne.n	800b058 <xQueueGenericSend+0x40>
 800b050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b054:	2b00      	cmp	r3, #0
 800b056:	d101      	bne.n	800b05c <xQueueGenericSend+0x44>
 800b058:	2301      	movs	r3, #1
 800b05a:	e000      	b.n	800b05e <xQueueGenericSend+0x46>
 800b05c:	2300      	movs	r3, #0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10a      	bne.n	800b078 <xQueueGenericSend+0x60>
	__asm volatile
 800b062:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b066:	f383 8811 	msr	BASEPRI, r3
 800b06a:	f3bf 8f6f 	isb	sy
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b074:	bf00      	nop
 800b076:	e7fe      	b.n	800b076 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	2b02      	cmp	r3, #2
 800b07c:	d103      	bne.n	800b086 <xQueueGenericSend+0x6e>
 800b07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b082:	2b01      	cmp	r3, #1
 800b084:	d101      	bne.n	800b08a <xQueueGenericSend+0x72>
 800b086:	2301      	movs	r3, #1
 800b088:	e000      	b.n	800b08c <xQueueGenericSend+0x74>
 800b08a:	2300      	movs	r3, #0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d10a      	bne.n	800b0a6 <xQueueGenericSend+0x8e>
	__asm volatile
 800b090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	623b      	str	r3, [r7, #32]
}
 800b0a2:	bf00      	nop
 800b0a4:	e7fe      	b.n	800b0a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0a6:	f001 fbbd 	bl	800c824 <xTaskGetSchedulerState>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d102      	bne.n	800b0b6 <xQueueGenericSend+0x9e>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <xQueueGenericSend+0xa2>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e000      	b.n	800b0bc <xQueueGenericSend+0xa4>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d10a      	bne.n	800b0d6 <xQueueGenericSend+0xbe>
	__asm volatile
 800b0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c4:	f383 8811 	msr	BASEPRI, r3
 800b0c8:	f3bf 8f6f 	isb	sy
 800b0cc:	f3bf 8f4f 	dsb	sy
 800b0d0:	61fb      	str	r3, [r7, #28]
}
 800b0d2:	bf00      	nop
 800b0d4:	e7fe      	b.n	800b0d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0d6:	f002 f9fd 	bl	800d4d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d302      	bcc.n	800b0ec <xQueueGenericSend+0xd4>
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	2b02      	cmp	r3, #2
 800b0ea:	d129      	bne.n	800b140 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0ec:	683a      	ldr	r2, [r7, #0]
 800b0ee:	68b9      	ldr	r1, [r7, #8]
 800b0f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0f2:	f000 fbbb 	bl	800b86c <prvCopyDataToQueue>
 800b0f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d010      	beq.n	800b122 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b102:	3324      	adds	r3, #36	; 0x24
 800b104:	4618      	mov	r0, r3
 800b106:	f001 f9a5 	bl	800c454 <xTaskRemoveFromEventList>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d013      	beq.n	800b138 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b110:	4b3f      	ldr	r3, [pc, #252]	; (800b210 <xQueueGenericSend+0x1f8>)
 800b112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b116:	601a      	str	r2, [r3, #0]
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	f3bf 8f6f 	isb	sy
 800b120:	e00a      	b.n	800b138 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b124:	2b00      	cmp	r3, #0
 800b126:	d007      	beq.n	800b138 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b128:	4b39      	ldr	r3, [pc, #228]	; (800b210 <xQueueGenericSend+0x1f8>)
 800b12a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b12e:	601a      	str	r2, [r3, #0]
 800b130:	f3bf 8f4f 	dsb	sy
 800b134:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b138:	f002 f9fc 	bl	800d534 <vPortExitCritical>
				return pdPASS;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e063      	b.n	800b208 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d103      	bne.n	800b14e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b146:	f002 f9f5 	bl	800d534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b14a:	2300      	movs	r3, #0
 800b14c:	e05c      	b.n	800b208 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b150:	2b00      	cmp	r3, #0
 800b152:	d106      	bne.n	800b162 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b154:	f107 0314 	add.w	r3, r7, #20
 800b158:	4618      	mov	r0, r3
 800b15a:	f001 fa05 	bl	800c568 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b15e:	2301      	movs	r3, #1
 800b160:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b162:	f002 f9e7 	bl	800d534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b166:	f000 ff4b 	bl	800c000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b16a:	f002 f9b3 	bl	800d4d4 <vPortEnterCritical>
 800b16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b170:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b174:	b25b      	sxtb	r3, r3
 800b176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b17a:	d103      	bne.n	800b184 <xQueueGenericSend+0x16c>
 800b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b186:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b18a:	b25b      	sxtb	r3, r3
 800b18c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b190:	d103      	bne.n	800b19a <xQueueGenericSend+0x182>
 800b192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b194:	2200      	movs	r2, #0
 800b196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b19a:	f002 f9cb 	bl	800d534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b19e:	1d3a      	adds	r2, r7, #4
 800b1a0:	f107 0314 	add.w	r3, r7, #20
 800b1a4:	4611      	mov	r1, r2
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f001 f9f4 	bl	800c594 <xTaskCheckForTimeOut>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d124      	bne.n	800b1fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b1b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1b4:	f000 fc52 	bl	800ba5c <prvIsQueueFull>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d018      	beq.n	800b1f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c0:	3310      	adds	r3, #16
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f001 f8f4 	bl	800c3b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b1cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1ce:	f000 fbdd 	bl	800b98c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b1d2:	f000 ff23 	bl	800c01c <xTaskResumeAll>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f47f af7c 	bne.w	800b0d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b1de:	4b0c      	ldr	r3, [pc, #48]	; (800b210 <xQueueGenericSend+0x1f8>)
 800b1e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1e4:	601a      	str	r2, [r3, #0]
 800b1e6:	f3bf 8f4f 	dsb	sy
 800b1ea:	f3bf 8f6f 	isb	sy
 800b1ee:	e772      	b.n	800b0d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b1f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1f2:	f000 fbcb 	bl	800b98c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1f6:	f000 ff11 	bl	800c01c <xTaskResumeAll>
 800b1fa:	e76c      	b.n	800b0d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b1fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1fe:	f000 fbc5 	bl	800b98c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b202:	f000 ff0b 	bl	800c01c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b206:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3738      	adds	r7, #56	; 0x38
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	e000ed04 	.word	0xe000ed04

0800b214 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b090      	sub	sp, #64	; 0x40
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
 800b220:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d10a      	bne.n	800b242 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b230:	f383 8811 	msr	BASEPRI, r3
 800b234:	f3bf 8f6f 	isb	sy
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b23e:	bf00      	nop
 800b240:	e7fe      	b.n	800b240 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d103      	bne.n	800b250 <xQueueGenericSendFromISR+0x3c>
 800b248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d101      	bne.n	800b254 <xQueueGenericSendFromISR+0x40>
 800b250:	2301      	movs	r3, #1
 800b252:	e000      	b.n	800b256 <xQueueGenericSendFromISR+0x42>
 800b254:	2300      	movs	r3, #0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10a      	bne.n	800b270 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b26c:	bf00      	nop
 800b26e:	e7fe      	b.n	800b26e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	2b02      	cmp	r3, #2
 800b274:	d103      	bne.n	800b27e <xQueueGenericSendFromISR+0x6a>
 800b276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d101      	bne.n	800b282 <xQueueGenericSendFromISR+0x6e>
 800b27e:	2301      	movs	r3, #1
 800b280:	e000      	b.n	800b284 <xQueueGenericSendFromISR+0x70>
 800b282:	2300      	movs	r3, #0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d10a      	bne.n	800b29e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28c:	f383 8811 	msr	BASEPRI, r3
 800b290:	f3bf 8f6f 	isb	sy
 800b294:	f3bf 8f4f 	dsb	sy
 800b298:	623b      	str	r3, [r7, #32]
}
 800b29a:	bf00      	nop
 800b29c:	e7fe      	b.n	800b29c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b29e:	f002 f9fb 	bl	800d698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b2a2:	f3ef 8211 	mrs	r2, BASEPRI
 800b2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2aa:	f383 8811 	msr	BASEPRI, r3
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	61fa      	str	r2, [r7, #28]
 800b2b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b2ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b2bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d302      	bcc.n	800b2d0 <xQueueGenericSendFromISR+0xbc>
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	d12f      	bne.n	800b330 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2e0:	683a      	ldr	r2, [r7, #0]
 800b2e2:	68b9      	ldr	r1, [r7, #8]
 800b2e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2e6:	f000 fac1 	bl	800b86c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b2ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b2ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2f2:	d112      	bne.n	800b31a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d016      	beq.n	800b32a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fe:	3324      	adds	r3, #36	; 0x24
 800b300:	4618      	mov	r0, r3
 800b302:	f001 f8a7 	bl	800c454 <xTaskRemoveFromEventList>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00e      	beq.n	800b32a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00b      	beq.n	800b32a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2201      	movs	r2, #1
 800b316:	601a      	str	r2, [r3, #0]
 800b318:	e007      	b.n	800b32a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b31a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b31e:	3301      	adds	r3, #1
 800b320:	b2db      	uxtb	r3, r3
 800b322:	b25a      	sxtb	r2, r3
 800b324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b32a:	2301      	movs	r3, #1
 800b32c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b32e:	e001      	b.n	800b334 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b330:	2300      	movs	r3, #0
 800b332:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b336:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b33e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b342:	4618      	mov	r0, r3
 800b344:	3740      	adds	r7, #64	; 0x40
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}

0800b34a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b34a:	b580      	push	{r7, lr}
 800b34c:	b08e      	sub	sp, #56	; 0x38
 800b34e:	af00      	add	r7, sp, #0
 800b350:	6078      	str	r0, [r7, #4]
 800b352:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d10a      	bne.n	800b374 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	623b      	str	r3, [r7, #32]
}
 800b370:	bf00      	nop
 800b372:	e7fe      	b.n	800b372 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00a      	beq.n	800b392 <xQueueGiveFromISR+0x48>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	61fb      	str	r3, [r7, #28]
}
 800b38e:	bf00      	nop
 800b390:	e7fe      	b.n	800b390 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d103      	bne.n	800b3a2 <xQueueGiveFromISR+0x58>
 800b39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d101      	bne.n	800b3a6 <xQueueGiveFromISR+0x5c>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e000      	b.n	800b3a8 <xQueueGiveFromISR+0x5e>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d10a      	bne.n	800b3c2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800b3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b0:	f383 8811 	msr	BASEPRI, r3
 800b3b4:	f3bf 8f6f 	isb	sy
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	61bb      	str	r3, [r7, #24]
}
 800b3be:	bf00      	nop
 800b3c0:	e7fe      	b.n	800b3c0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b3c2:	f002 f969 	bl	800d698 <vPortValidateInterruptPriority>
	__asm volatile
 800b3c6:	f3ef 8211 	mrs	r2, BASEPRI
 800b3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	617a      	str	r2, [r7, #20]
 800b3dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b3de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d22b      	bcs.n	800b44a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fe:	1c5a      	adds	r2, r3, #1
 800b400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b402:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b404:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b40c:	d112      	bne.n	800b434 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b412:	2b00      	cmp	r3, #0
 800b414:	d016      	beq.n	800b444 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b418:	3324      	adds	r3, #36	; 0x24
 800b41a:	4618      	mov	r0, r3
 800b41c:	f001 f81a 	bl	800c454 <xTaskRemoveFromEventList>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00e      	beq.n	800b444 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d00b      	beq.n	800b444 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	2201      	movs	r2, #1
 800b430:	601a      	str	r2, [r3, #0]
 800b432:	e007      	b.n	800b444 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b438:	3301      	adds	r3, #1
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	b25a      	sxtb	r2, r3
 800b43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b444:	2301      	movs	r3, #1
 800b446:	637b      	str	r3, [r7, #52]	; 0x34
 800b448:	e001      	b.n	800b44e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b44a:	2300      	movs	r3, #0
 800b44c:	637b      	str	r3, [r7, #52]	; 0x34
 800b44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b450:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f383 8811 	msr	BASEPRI, r3
}
 800b458:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3738      	adds	r7, #56	; 0x38
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b08c      	sub	sp, #48	; 0x30
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b470:	2300      	movs	r3, #0
 800b472:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10a      	bne.n	800b494 <xQueueReceive+0x30>
	__asm volatile
 800b47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	623b      	str	r3, [r7, #32]
}
 800b490:	bf00      	nop
 800b492:	e7fe      	b.n	800b492 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d103      	bne.n	800b4a2 <xQueueReceive+0x3e>
 800b49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d101      	bne.n	800b4a6 <xQueueReceive+0x42>
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	e000      	b.n	800b4a8 <xQueueReceive+0x44>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10a      	bne.n	800b4c2 <xQueueReceive+0x5e>
	__asm volatile
 800b4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b0:	f383 8811 	msr	BASEPRI, r3
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	61fb      	str	r3, [r7, #28]
}
 800b4be:	bf00      	nop
 800b4c0:	e7fe      	b.n	800b4c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4c2:	f001 f9af 	bl	800c824 <xTaskGetSchedulerState>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d102      	bne.n	800b4d2 <xQueueReceive+0x6e>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d101      	bne.n	800b4d6 <xQueueReceive+0x72>
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e000      	b.n	800b4d8 <xQueueReceive+0x74>
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10a      	bne.n	800b4f2 <xQueueReceive+0x8e>
	__asm volatile
 800b4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e0:	f383 8811 	msr	BASEPRI, r3
 800b4e4:	f3bf 8f6f 	isb	sy
 800b4e8:	f3bf 8f4f 	dsb	sy
 800b4ec:	61bb      	str	r3, [r7, #24]
}
 800b4ee:	bf00      	nop
 800b4f0:	e7fe      	b.n	800b4f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4f2:	f001 ffef 	bl	800d4d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d01f      	beq.n	800b542 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b502:	68b9      	ldr	r1, [r7, #8]
 800b504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b506:	f000 fa1b 	bl	800b940 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50c:	1e5a      	subs	r2, r3, #1
 800b50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b510:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d00f      	beq.n	800b53a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51c:	3310      	adds	r3, #16
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 ff98 	bl	800c454 <xTaskRemoveFromEventList>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d007      	beq.n	800b53a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b52a:	4b3d      	ldr	r3, [pc, #244]	; (800b620 <xQueueReceive+0x1bc>)
 800b52c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b530:	601a      	str	r2, [r3, #0]
 800b532:	f3bf 8f4f 	dsb	sy
 800b536:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b53a:	f001 fffb 	bl	800d534 <vPortExitCritical>
				return pdPASS;
 800b53e:	2301      	movs	r3, #1
 800b540:	e069      	b.n	800b616 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d103      	bne.n	800b550 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b548:	f001 fff4 	bl	800d534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b54c:	2300      	movs	r3, #0
 800b54e:	e062      	b.n	800b616 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b552:	2b00      	cmp	r3, #0
 800b554:	d106      	bne.n	800b564 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b556:	f107 0310 	add.w	r3, r7, #16
 800b55a:	4618      	mov	r0, r3
 800b55c:	f001 f804 	bl	800c568 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b560:	2301      	movs	r3, #1
 800b562:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b564:	f001 ffe6 	bl	800d534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b568:	f000 fd4a 	bl	800c000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b56c:	f001 ffb2 	bl	800d4d4 <vPortEnterCritical>
 800b570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b572:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b576:	b25b      	sxtb	r3, r3
 800b578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b57c:	d103      	bne.n	800b586 <xQueueReceive+0x122>
 800b57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b580:	2200      	movs	r2, #0
 800b582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b588:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b58c:	b25b      	sxtb	r3, r3
 800b58e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b592:	d103      	bne.n	800b59c <xQueueReceive+0x138>
 800b594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b596:	2200      	movs	r2, #0
 800b598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b59c:	f001 ffca 	bl	800d534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5a0:	1d3a      	adds	r2, r7, #4
 800b5a2:	f107 0310 	add.w	r3, r7, #16
 800b5a6:	4611      	mov	r1, r2
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f000 fff3 	bl	800c594 <xTaskCheckForTimeOut>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d123      	bne.n	800b5fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5b6:	f000 fa3b 	bl	800ba30 <prvIsQueueEmpty>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d017      	beq.n	800b5f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c2:	3324      	adds	r3, #36	; 0x24
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	4611      	mov	r1, r2
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f000 fef3 	bl	800c3b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b5ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5d0:	f000 f9dc 	bl	800b98c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5d4:	f000 fd22 	bl	800c01c <xTaskResumeAll>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d189      	bne.n	800b4f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b5de:	4b10      	ldr	r3, [pc, #64]	; (800b620 <xQueueReceive+0x1bc>)
 800b5e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	f3bf 8f4f 	dsb	sy
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	e780      	b.n	800b4f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b5f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5f2:	f000 f9cb 	bl	800b98c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5f6:	f000 fd11 	bl	800c01c <xTaskResumeAll>
 800b5fa:	e77a      	b.n	800b4f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b5fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5fe:	f000 f9c5 	bl	800b98c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b602:	f000 fd0b 	bl	800c01c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b608:	f000 fa12 	bl	800ba30 <prvIsQueueEmpty>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f43f af6f 	beq.w	800b4f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b614:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b616:	4618      	mov	r0, r3
 800b618:	3730      	adds	r7, #48	; 0x30
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	e000ed04 	.word	0xe000ed04

0800b624 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b08e      	sub	sp, #56	; 0x38
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b62e:	2300      	movs	r3, #0
 800b630:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b636:	2300      	movs	r3, #0
 800b638:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d10a      	bne.n	800b656 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b644:	f383 8811 	msr	BASEPRI, r3
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	623b      	str	r3, [r7, #32]
}
 800b652:	bf00      	nop
 800b654:	e7fe      	b.n	800b654 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d00a      	beq.n	800b674 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	61fb      	str	r3, [r7, #28]
}
 800b670:	bf00      	nop
 800b672:	e7fe      	b.n	800b672 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b674:	f001 f8d6 	bl	800c824 <xTaskGetSchedulerState>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d102      	bne.n	800b684 <xQueueSemaphoreTake+0x60>
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d101      	bne.n	800b688 <xQueueSemaphoreTake+0x64>
 800b684:	2301      	movs	r3, #1
 800b686:	e000      	b.n	800b68a <xQueueSemaphoreTake+0x66>
 800b688:	2300      	movs	r3, #0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10a      	bne.n	800b6a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b692:	f383 8811 	msr	BASEPRI, r3
 800b696:	f3bf 8f6f 	isb	sy
 800b69a:	f3bf 8f4f 	dsb	sy
 800b69e:	61bb      	str	r3, [r7, #24]
}
 800b6a0:	bf00      	nop
 800b6a2:	e7fe      	b.n	800b6a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b6a4:	f001 ff16 	bl	800d4d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d024      	beq.n	800b6fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b6:	1e5a      	subs	r2, r3, #1
 800b6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d104      	bne.n	800b6ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b6c4:	f001 fa24 	bl	800cb10 <pvTaskIncrementMutexHeldCount>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00f      	beq.n	800b6f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6d8:	3310      	adds	r3, #16
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f000 feba 	bl	800c454 <xTaskRemoveFromEventList>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d007      	beq.n	800b6f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b6e6:	4b54      	ldr	r3, [pc, #336]	; (800b838 <xQueueSemaphoreTake+0x214>)
 800b6e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6ec:	601a      	str	r2, [r3, #0]
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6f6:	f001 ff1d 	bl	800d534 <vPortExitCritical>
				return pdPASS;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	e097      	b.n	800b82e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d111      	bne.n	800b728 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00a      	beq.n	800b720 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b70a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	617b      	str	r3, [r7, #20]
}
 800b71c:	bf00      	nop
 800b71e:	e7fe      	b.n	800b71e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b720:	f001 ff08 	bl	800d534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b724:	2300      	movs	r3, #0
 800b726:	e082      	b.n	800b82e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d106      	bne.n	800b73c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b72e:	f107 030c 	add.w	r3, r7, #12
 800b732:	4618      	mov	r0, r3
 800b734:	f000 ff18 	bl	800c568 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b738:	2301      	movs	r3, #1
 800b73a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b73c:	f001 fefa 	bl	800d534 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b740:	f000 fc5e 	bl	800c000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b744:	f001 fec6 	bl	800d4d4 <vPortEnterCritical>
 800b748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b74e:	b25b      	sxtb	r3, r3
 800b750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b754:	d103      	bne.n	800b75e <xQueueSemaphoreTake+0x13a>
 800b756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b758:	2200      	movs	r2, #0
 800b75a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b764:	b25b      	sxtb	r3, r3
 800b766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b76a:	d103      	bne.n	800b774 <xQueueSemaphoreTake+0x150>
 800b76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76e:	2200      	movs	r2, #0
 800b770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b774:	f001 fede 	bl	800d534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b778:	463a      	mov	r2, r7
 800b77a:	f107 030c 	add.w	r3, r7, #12
 800b77e:	4611      	mov	r1, r2
 800b780:	4618      	mov	r0, r3
 800b782:	f000 ff07 	bl	800c594 <xTaskCheckForTimeOut>
 800b786:	4603      	mov	r3, r0
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d132      	bne.n	800b7f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b78c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b78e:	f000 f94f 	bl	800ba30 <prvIsQueueEmpty>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d026      	beq.n	800b7e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d109      	bne.n	800b7b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b7a0:	f001 fe98 	bl	800d4d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f001 f859 	bl	800c860 <xTaskPriorityInherit>
 800b7ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b7b0:	f001 fec0 	bl	800d534 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b6:	3324      	adds	r3, #36	; 0x24
 800b7b8:	683a      	ldr	r2, [r7, #0]
 800b7ba:	4611      	mov	r1, r2
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f000 fdf9 	bl	800c3b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b7c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7c4:	f000 f8e2 	bl	800b98c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b7c8:	f000 fc28 	bl	800c01c <xTaskResumeAll>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f47f af68 	bne.w	800b6a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b7d4:	4b18      	ldr	r3, [pc, #96]	; (800b838 <xQueueSemaphoreTake+0x214>)
 800b7d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7da:	601a      	str	r2, [r3, #0]
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	f3bf 8f6f 	isb	sy
 800b7e4:	e75e      	b.n	800b6a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b7e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7e8:	f000 f8d0 	bl	800b98c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7ec:	f000 fc16 	bl	800c01c <xTaskResumeAll>
 800b7f0:	e758      	b.n	800b6a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b7f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7f4:	f000 f8ca 	bl	800b98c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7f8:	f000 fc10 	bl	800c01c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b7fe:	f000 f917 	bl	800ba30 <prvIsQueueEmpty>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	f43f af4d 	beq.w	800b6a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d00d      	beq.n	800b82c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b810:	f001 fe60 	bl	800d4d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b814:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b816:	f000 f811 	bl	800b83c <prvGetDisinheritPriorityAfterTimeout>
 800b81a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b822:	4618      	mov	r0, r3
 800b824:	f001 f8f2 	bl	800ca0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b828:	f001 fe84 	bl	800d534 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b82c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3738      	adds	r7, #56	; 0x38
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	e000ed04 	.word	0xe000ed04

0800b83c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d006      	beq.n	800b85a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b856:	60fb      	str	r3, [r7, #12]
 800b858:	e001      	b.n	800b85e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b85a:	2300      	movs	r3, #0
 800b85c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b85e:	68fb      	ldr	r3, [r7, #12]
	}
 800b860:	4618      	mov	r0, r3
 800b862:	3714      	adds	r7, #20
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b878:	2300      	movs	r3, #0
 800b87a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b880:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10d      	bne.n	800b8a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d14d      	bne.n	800b92e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	4618      	mov	r0, r3
 800b898:	f001 f84a 	bl	800c930 <xTaskPriorityDisinherit>
 800b89c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	609a      	str	r2, [r3, #8]
 800b8a4:	e043      	b.n	800b92e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d119      	bne.n	800b8e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6858      	ldr	r0, [r3, #4]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	68b9      	ldr	r1, [r7, #8]
 800b8b8:	f00d fbf0 	bl	801909c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	685a      	ldr	r2, [r3, #4]
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8c4:	441a      	add	r2, r3
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	685a      	ldr	r2, [r3, #4]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	689b      	ldr	r3, [r3, #8]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d32b      	bcc.n	800b92e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	605a      	str	r2, [r3, #4]
 800b8de:	e026      	b.n	800b92e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	68d8      	ldr	r0, [r3, #12]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	68b9      	ldr	r1, [r7, #8]
 800b8ec:	f00d fbd6 	bl	801909c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	68da      	ldr	r2, [r3, #12]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8f8:	425b      	negs	r3, r3
 800b8fa:	441a      	add	r2, r3
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	68da      	ldr	r2, [r3, #12]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d207      	bcs.n	800b91c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	689a      	ldr	r2, [r3, #8]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b914:	425b      	negs	r3, r3
 800b916:	441a      	add	r2, r3
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b02      	cmp	r3, #2
 800b920:	d105      	bne.n	800b92e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d002      	beq.n	800b92e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	3b01      	subs	r3, #1
 800b92c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	1c5a      	adds	r2, r3, #1
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b936:	697b      	ldr	r3, [r7, #20]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3718      	adds	r7, #24
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d018      	beq.n	800b984 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	68da      	ldr	r2, [r3, #12]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b95a:	441a      	add	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	68da      	ldr	r2, [r3, #12]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d303      	bcc.n	800b974 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	68d9      	ldr	r1, [r3, #12]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b97c:	461a      	mov	r2, r3
 800b97e:	6838      	ldr	r0, [r7, #0]
 800b980:	f00d fb8c 	bl	801909c <memcpy>
	}
}
 800b984:	bf00      	nop
 800b986:	3708      	adds	r7, #8
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b994:	f001 fd9e 	bl	800d4d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b99e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9a0:	e011      	b.n	800b9c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d012      	beq.n	800b9d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	3324      	adds	r3, #36	; 0x24
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 fd50 	bl	800c454 <xTaskRemoveFromEventList>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d001      	beq.n	800b9be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b9ba:	f000 fe4d 	bl	800c658 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b9be:	7bfb      	ldrb	r3, [r7, #15]
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	b2db      	uxtb	r3, r3
 800b9c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b9c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	dce9      	bgt.n	800b9a2 <prvUnlockQueue+0x16>
 800b9ce:	e000      	b.n	800b9d2 <prvUnlockQueue+0x46>
					break;
 800b9d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	22ff      	movs	r2, #255	; 0xff
 800b9d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b9da:	f001 fdab 	bl	800d534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b9de:	f001 fd79 	bl	800d4d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9ea:	e011      	b.n	800ba10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d012      	beq.n	800ba1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	3310      	adds	r3, #16
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f000 fd2b 	bl	800c454 <xTaskRemoveFromEventList>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ba04:	f000 fe28 	bl	800c658 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ba08:	7bbb      	ldrb	r3, [r7, #14]
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	dce9      	bgt.n	800b9ec <prvUnlockQueue+0x60>
 800ba18:	e000      	b.n	800ba1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ba1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	22ff      	movs	r2, #255	; 0xff
 800ba20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ba24:	f001 fd86 	bl	800d534 <vPortExitCritical>
}
 800ba28:	bf00      	nop
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba38:	f001 fd4c 	bl	800d4d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d102      	bne.n	800ba4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ba44:	2301      	movs	r3, #1
 800ba46:	60fb      	str	r3, [r7, #12]
 800ba48:	e001      	b.n	800ba4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba4e:	f001 fd71 	bl	800d534 <vPortExitCritical>

	return xReturn;
 800ba52:	68fb      	ldr	r3, [r7, #12]
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ba64:	f001 fd36 	bl	800d4d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d102      	bne.n	800ba7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ba74:	2301      	movs	r3, #1
 800ba76:	60fb      	str	r3, [r7, #12]
 800ba78:	e001      	b.n	800ba7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ba7e:	f001 fd59 	bl	800d534 <vPortExitCritical>

	return xReturn;
 800ba82:	68fb      	ldr	r3, [r7, #12]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ba96:	2300      	movs	r3, #0
 800ba98:	60fb      	str	r3, [r7, #12]
 800ba9a:	e014      	b.n	800bac6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ba9c:	4a0f      	ldr	r2, [pc, #60]	; (800badc <vQueueAddToRegistry+0x50>)
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d10b      	bne.n	800bac0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800baa8:	490c      	ldr	r1, [pc, #48]	; (800badc <vQueueAddToRegistry+0x50>)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	683a      	ldr	r2, [r7, #0]
 800baae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bab2:	4a0a      	ldr	r2, [pc, #40]	; (800badc <vQueueAddToRegistry+0x50>)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	00db      	lsls	r3, r3, #3
 800bab8:	4413      	add	r3, r2
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800babe:	e006      	b.n	800bace <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	3301      	adds	r3, #1
 800bac4:	60fb      	str	r3, [r7, #12]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2b07      	cmp	r3, #7
 800baca:	d9e7      	bls.n	800ba9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bacc:	bf00      	nop
 800bace:	bf00      	nop
 800bad0:	3714      	adds	r7, #20
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	200057d0 	.word	0x200057d0

0800bae0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800baf0:	f001 fcf0 	bl	800d4d4 <vPortEnterCritical>
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bafa:	b25b      	sxtb	r3, r3
 800bafc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb00:	d103      	bne.n	800bb0a <vQueueWaitForMessageRestricted+0x2a>
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	2200      	movs	r2, #0
 800bb06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb10:	b25b      	sxtb	r3, r3
 800bb12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb16:	d103      	bne.n	800bb20 <vQueueWaitForMessageRestricted+0x40>
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bb20:	f001 fd08 	bl	800d534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d106      	bne.n	800bb3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	3324      	adds	r3, #36	; 0x24
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	68b9      	ldr	r1, [r7, #8]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f000 fc61 	bl	800c3fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bb3a:	6978      	ldr	r0, [r7, #20]
 800bb3c:	f7ff ff26 	bl	800b98c <prvUnlockQueue>
	}
 800bb40:	bf00      	nop
 800bb42:	3718      	adds	r7, #24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b08e      	sub	sp, #56	; 0x38
 800bb4c:	af04      	add	r7, sp, #16
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	607a      	str	r2, [r7, #4]
 800bb54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10a      	bne.n	800bb72 <xTaskCreateStatic+0x2a>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	623b      	str	r3, [r7, #32]
}
 800bb6e:	bf00      	nop
 800bb70:	e7fe      	b.n	800bb70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10a      	bne.n	800bb8e <xTaskCreateStatic+0x46>
	__asm volatile
 800bb78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7c:	f383 8811 	msr	BASEPRI, r3
 800bb80:	f3bf 8f6f 	isb	sy
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	61fb      	str	r3, [r7, #28]
}
 800bb8a:	bf00      	nop
 800bb8c:	e7fe      	b.n	800bb8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bb8e:	23bc      	movs	r3, #188	; 0xbc
 800bb90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	2bbc      	cmp	r3, #188	; 0xbc
 800bb96:	d00a      	beq.n	800bbae <xTaskCreateStatic+0x66>
	__asm volatile
 800bb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9c:	f383 8811 	msr	BASEPRI, r3
 800bba0:	f3bf 8f6f 	isb	sy
 800bba4:	f3bf 8f4f 	dsb	sy
 800bba8:	61bb      	str	r3, [r7, #24]
}
 800bbaa:	bf00      	nop
 800bbac:	e7fe      	b.n	800bbac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bbae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d01e      	beq.n	800bbf4 <xTaskCreateStatic+0xac>
 800bbb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d01b      	beq.n	800bbf4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbc4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc8:	2202      	movs	r2, #2
 800bbca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bbce:	2300      	movs	r3, #0
 800bbd0:	9303      	str	r3, [sp, #12]
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	9302      	str	r3, [sp, #8]
 800bbd6:	f107 0314 	add.w	r3, r7, #20
 800bbda:	9301      	str	r3, [sp, #4]
 800bbdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	68b9      	ldr	r1, [r7, #8]
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f000 f850 	bl	800bc8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bbec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbee:	f000 f8f3 	bl	800bdd8 <prvAddNewTaskToReadyList>
 800bbf2:	e001      	b.n	800bbf8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bbf8:	697b      	ldr	r3, [r7, #20]
	}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3728      	adds	r7, #40	; 0x28
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}

0800bc02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b08c      	sub	sp, #48	; 0x30
 800bc06:	af04      	add	r7, sp, #16
 800bc08:	60f8      	str	r0, [r7, #12]
 800bc0a:	60b9      	str	r1, [r7, #8]
 800bc0c:	603b      	str	r3, [r7, #0]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bc12:	88fb      	ldrh	r3, [r7, #6]
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4618      	mov	r0, r3
 800bc18:	f001 fd7e 	bl	800d718 <pvPortMalloc>
 800bc1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00e      	beq.n	800bc42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bc24:	20bc      	movs	r0, #188	; 0xbc
 800bc26:	f001 fd77 	bl	800d718 <pvPortMalloc>
 800bc2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bc2c:	69fb      	ldr	r3, [r7, #28]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d003      	beq.n	800bc3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	697a      	ldr	r2, [r7, #20]
 800bc36:	631a      	str	r2, [r3, #48]	; 0x30
 800bc38:	e005      	b.n	800bc46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bc3a:	6978      	ldr	r0, [r7, #20]
 800bc3c:	f001 fe38 	bl	800d8b0 <vPortFree>
 800bc40:	e001      	b.n	800bc46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bc42:	2300      	movs	r3, #0
 800bc44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d017      	beq.n	800bc7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bc54:	88fa      	ldrh	r2, [r7, #6]
 800bc56:	2300      	movs	r3, #0
 800bc58:	9303      	str	r3, [sp, #12]
 800bc5a:	69fb      	ldr	r3, [r7, #28]
 800bc5c:	9302      	str	r3, [sp, #8]
 800bc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc60:	9301      	str	r3, [sp, #4]
 800bc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc64:	9300      	str	r3, [sp, #0]
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	68b9      	ldr	r1, [r7, #8]
 800bc6a:	68f8      	ldr	r0, [r7, #12]
 800bc6c:	f000 f80e 	bl	800bc8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bc70:	69f8      	ldr	r0, [r7, #28]
 800bc72:	f000 f8b1 	bl	800bdd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bc76:	2301      	movs	r3, #1
 800bc78:	61bb      	str	r3, [r7, #24]
 800bc7a:	e002      	b.n	800bc82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bc7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bc82:	69bb      	ldr	r3, [r7, #24]
	}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3720      	adds	r7, #32
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b088      	sub	sp, #32
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	607a      	str	r2, [r7, #4]
 800bc98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	461a      	mov	r2, r3
 800bca4:	21a5      	movs	r1, #165	; 0xa5
 800bca6:	f00d fa21 	bl	80190ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bcb4:	3b01      	subs	r3, #1
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4413      	add	r3, r2
 800bcba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	f023 0307 	bic.w	r3, r3, #7
 800bcc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bcc4:	69bb      	ldr	r3, [r7, #24]
 800bcc6:	f003 0307 	and.w	r3, r3, #7
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d00a      	beq.n	800bce4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800bcce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd2:	f383 8811 	msr	BASEPRI, r3
 800bcd6:	f3bf 8f6f 	isb	sy
 800bcda:	f3bf 8f4f 	dsb	sy
 800bcde:	617b      	str	r3, [r7, #20]
}
 800bce0:	bf00      	nop
 800bce2:	e7fe      	b.n	800bce2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d01f      	beq.n	800bd2a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bcea:	2300      	movs	r3, #0
 800bcec:	61fb      	str	r3, [r7, #28]
 800bcee:	e012      	b.n	800bd16 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bcf0:	68ba      	ldr	r2, [r7, #8]
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	7819      	ldrb	r1, [r3, #0]
 800bcf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	3334      	adds	r3, #52	; 0x34
 800bd00:	460a      	mov	r2, r1
 800bd02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bd04:	68ba      	ldr	r2, [r7, #8]
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	4413      	add	r3, r2
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d006      	beq.n	800bd1e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	3301      	adds	r3, #1
 800bd14:	61fb      	str	r3, [r7, #28]
 800bd16:	69fb      	ldr	r3, [r7, #28]
 800bd18:	2b0f      	cmp	r3, #15
 800bd1a:	d9e9      	bls.n	800bcf0 <prvInitialiseNewTask+0x64>
 800bd1c:	e000      	b.n	800bd20 <prvInitialiseNewTask+0x94>
			{
				break;
 800bd1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd22:	2200      	movs	r2, #0
 800bd24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bd28:	e003      	b.n	800bd32 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd34:	2b37      	cmp	r3, #55	; 0x37
 800bd36:	d901      	bls.n	800bd3c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bd38:	2337      	movs	r3, #55	; 0x37
 800bd3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd50:	3304      	adds	r3, #4
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7fe ff8e 	bl	800ac74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	3318      	adds	r3, #24
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7fe ff89 	bl	800ac74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd82:	2200      	movs	r2, #0
 800bd84:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd8a:	3354      	adds	r3, #84	; 0x54
 800bd8c:	2260      	movs	r2, #96	; 0x60
 800bd8e:	2100      	movs	r1, #0
 800bd90:	4618      	mov	r0, r3
 800bd92:	f00d f9ab 	bl	80190ec <memset>
 800bd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd98:	4a0c      	ldr	r2, [pc, #48]	; (800bdcc <prvInitialiseNewTask+0x140>)
 800bd9a:	659a      	str	r2, [r3, #88]	; 0x58
 800bd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9e:	4a0c      	ldr	r2, [pc, #48]	; (800bdd0 <prvInitialiseNewTask+0x144>)
 800bda0:	65da      	str	r2, [r3, #92]	; 0x5c
 800bda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda4:	4a0b      	ldr	r2, [pc, #44]	; (800bdd4 <prvInitialiseNewTask+0x148>)
 800bda6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bda8:	683a      	ldr	r2, [r7, #0]
 800bdaa:	68f9      	ldr	r1, [r7, #12]
 800bdac:	69b8      	ldr	r0, [r7, #24]
 800bdae:	f001 fa65 	bl	800d27c <pxPortInitialiseStack>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bdb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d002      	beq.n	800bdc4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bdc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bdc4:	bf00      	nop
 800bdc6:	3720      	adds	r7, #32
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	0801e8bc 	.word	0x0801e8bc
 800bdd0:	0801e8dc 	.word	0x0801e8dc
 800bdd4:	0801e89c 	.word	0x0801e89c

0800bdd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bde0:	f001 fb78 	bl	800d4d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bde4:	4b2d      	ldr	r3, [pc, #180]	; (800be9c <prvAddNewTaskToReadyList+0xc4>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	3301      	adds	r3, #1
 800bdea:	4a2c      	ldr	r2, [pc, #176]	; (800be9c <prvAddNewTaskToReadyList+0xc4>)
 800bdec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bdee:	4b2c      	ldr	r3, [pc, #176]	; (800bea0 <prvAddNewTaskToReadyList+0xc8>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d109      	bne.n	800be0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bdf6:	4a2a      	ldr	r2, [pc, #168]	; (800bea0 <prvAddNewTaskToReadyList+0xc8>)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bdfc:	4b27      	ldr	r3, [pc, #156]	; (800be9c <prvAddNewTaskToReadyList+0xc4>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	2b01      	cmp	r3, #1
 800be02:	d110      	bne.n	800be26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800be04:	f000 fc4c 	bl	800c6a0 <prvInitialiseTaskLists>
 800be08:	e00d      	b.n	800be26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800be0a:	4b26      	ldr	r3, [pc, #152]	; (800bea4 <prvAddNewTaskToReadyList+0xcc>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d109      	bne.n	800be26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800be12:	4b23      	ldr	r3, [pc, #140]	; (800bea0 <prvAddNewTaskToReadyList+0xc8>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d802      	bhi.n	800be26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800be20:	4a1f      	ldr	r2, [pc, #124]	; (800bea0 <prvAddNewTaskToReadyList+0xc8>)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800be26:	4b20      	ldr	r3, [pc, #128]	; (800bea8 <prvAddNewTaskToReadyList+0xd0>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	3301      	adds	r3, #1
 800be2c:	4a1e      	ldr	r2, [pc, #120]	; (800bea8 <prvAddNewTaskToReadyList+0xd0>)
 800be2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800be30:	4b1d      	ldr	r3, [pc, #116]	; (800bea8 <prvAddNewTaskToReadyList+0xd0>)
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3c:	4b1b      	ldr	r3, [pc, #108]	; (800beac <prvAddNewTaskToReadyList+0xd4>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	429a      	cmp	r2, r3
 800be42:	d903      	bls.n	800be4c <prvAddNewTaskToReadyList+0x74>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be48:	4a18      	ldr	r2, [pc, #96]	; (800beac <prvAddNewTaskToReadyList+0xd4>)
 800be4a:	6013      	str	r3, [r2, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be50:	4613      	mov	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4a15      	ldr	r2, [pc, #84]	; (800beb0 <prvAddNewTaskToReadyList+0xd8>)
 800be5a:	441a      	add	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	3304      	adds	r3, #4
 800be60:	4619      	mov	r1, r3
 800be62:	4610      	mov	r0, r2
 800be64:	f7fe ff13 	bl	800ac8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800be68:	f001 fb64 	bl	800d534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800be6c:	4b0d      	ldr	r3, [pc, #52]	; (800bea4 <prvAddNewTaskToReadyList+0xcc>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00e      	beq.n	800be92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800be74:	4b0a      	ldr	r3, [pc, #40]	; (800bea0 <prvAddNewTaskToReadyList+0xc8>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be7e:	429a      	cmp	r2, r3
 800be80:	d207      	bcs.n	800be92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800be82:	4b0c      	ldr	r3, [pc, #48]	; (800beb4 <prvAddNewTaskToReadyList+0xdc>)
 800be84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be88:	601a      	str	r2, [r3, #0]
 800be8a:	f3bf 8f4f 	dsb	sy
 800be8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be92:	bf00      	nop
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	20005ce4 	.word	0x20005ce4
 800bea0:	20005810 	.word	0x20005810
 800bea4:	20005cf0 	.word	0x20005cf0
 800bea8:	20005d00 	.word	0x20005d00
 800beac:	20005cec 	.word	0x20005cec
 800beb0:	20005814 	.word	0x20005814
 800beb4:	e000ed04 	.word	0xe000ed04

0800beb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bec0:	2300      	movs	r3, #0
 800bec2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d017      	beq.n	800befa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800beca:	4b13      	ldr	r3, [pc, #76]	; (800bf18 <vTaskDelay+0x60>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00a      	beq.n	800bee8 <vTaskDelay+0x30>
	__asm volatile
 800bed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed6:	f383 8811 	msr	BASEPRI, r3
 800beda:	f3bf 8f6f 	isb	sy
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	60bb      	str	r3, [r7, #8]
}
 800bee4:	bf00      	nop
 800bee6:	e7fe      	b.n	800bee6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bee8:	f000 f88a 	bl	800c000 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800beec:	2100      	movs	r1, #0
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fe22 	bl	800cb38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bef4:	f000 f892 	bl	800c01c <xTaskResumeAll>
 800bef8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d107      	bne.n	800bf10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bf00:	4b06      	ldr	r3, [pc, #24]	; (800bf1c <vTaskDelay+0x64>)
 800bf02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf06:	601a      	str	r2, [r3, #0]
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf10:	bf00      	nop
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	20005d0c 	.word	0x20005d0c
 800bf1c:	e000ed04 	.word	0xe000ed04

0800bf20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b08a      	sub	sp, #40	; 0x28
 800bf24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bf26:	2300      	movs	r3, #0
 800bf28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bf2e:	463a      	mov	r2, r7
 800bf30:	1d39      	adds	r1, r7, #4
 800bf32:	f107 0308 	add.w	r3, r7, #8
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7fe fe48 	bl	800abcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	68ba      	ldr	r2, [r7, #8]
 800bf42:	9202      	str	r2, [sp, #8]
 800bf44:	9301      	str	r3, [sp, #4]
 800bf46:	2300      	movs	r3, #0
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	460a      	mov	r2, r1
 800bf4e:	4924      	ldr	r1, [pc, #144]	; (800bfe0 <vTaskStartScheduler+0xc0>)
 800bf50:	4824      	ldr	r0, [pc, #144]	; (800bfe4 <vTaskStartScheduler+0xc4>)
 800bf52:	f7ff fdf9 	bl	800bb48 <xTaskCreateStatic>
 800bf56:	4603      	mov	r3, r0
 800bf58:	4a23      	ldr	r2, [pc, #140]	; (800bfe8 <vTaskStartScheduler+0xc8>)
 800bf5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bf5c:	4b22      	ldr	r3, [pc, #136]	; (800bfe8 <vTaskStartScheduler+0xc8>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bf64:	2301      	movs	r3, #1
 800bf66:	617b      	str	r3, [r7, #20]
 800bf68:	e001      	b.n	800bf6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d102      	bne.n	800bf7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bf74:	f000 fe34 	bl	800cbe0 <xTimerCreateTimerTask>
 800bf78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d11b      	bne.n	800bfb8 <vTaskStartScheduler+0x98>
	__asm volatile
 800bf80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	613b      	str	r3, [r7, #16]
}
 800bf92:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf94:	4b15      	ldr	r3, [pc, #84]	; (800bfec <vTaskStartScheduler+0xcc>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	3354      	adds	r3, #84	; 0x54
 800bf9a:	4a15      	ldr	r2, [pc, #84]	; (800bff0 <vTaskStartScheduler+0xd0>)
 800bf9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bf9e:	4b15      	ldr	r3, [pc, #84]	; (800bff4 <vTaskStartScheduler+0xd4>)
 800bfa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfa4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bfa6:	4b14      	ldr	r3, [pc, #80]	; (800bff8 <vTaskStartScheduler+0xd8>)
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bfac:	4b13      	ldr	r3, [pc, #76]	; (800bffc <vTaskStartScheduler+0xdc>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bfb2:	f001 f9ed 	bl	800d390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bfb6:	e00e      	b.n	800bfd6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfbe:	d10a      	bne.n	800bfd6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800bfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc4:	f383 8811 	msr	BASEPRI, r3
 800bfc8:	f3bf 8f6f 	isb	sy
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	60fb      	str	r3, [r7, #12]
}
 800bfd2:	bf00      	nop
 800bfd4:	e7fe      	b.n	800bfd4 <vTaskStartScheduler+0xb4>
}
 800bfd6:	bf00      	nop
 800bfd8:	3718      	adds	r7, #24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	0801dde0 	.word	0x0801dde0
 800bfe4:	0800c671 	.word	0x0800c671
 800bfe8:	20005d08 	.word	0x20005d08
 800bfec:	20005810 	.word	0x20005810
 800bff0:	20000080 	.word	0x20000080
 800bff4:	20005d04 	.word	0x20005d04
 800bff8:	20005cf0 	.word	0x20005cf0
 800bffc:	20005ce8 	.word	0x20005ce8

0800c000 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c000:	b480      	push	{r7}
 800c002:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c004:	4b04      	ldr	r3, [pc, #16]	; (800c018 <vTaskSuspendAll+0x18>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	3301      	adds	r3, #1
 800c00a:	4a03      	ldr	r2, [pc, #12]	; (800c018 <vTaskSuspendAll+0x18>)
 800c00c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c00e:	bf00      	nop
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr
 800c018:	20005d0c 	.word	0x20005d0c

0800c01c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c022:	2300      	movs	r3, #0
 800c024:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c026:	2300      	movs	r3, #0
 800c028:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c02a:	4b42      	ldr	r3, [pc, #264]	; (800c134 <xTaskResumeAll+0x118>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d10a      	bne.n	800c048 <xTaskResumeAll+0x2c>
	__asm volatile
 800c032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c036:	f383 8811 	msr	BASEPRI, r3
 800c03a:	f3bf 8f6f 	isb	sy
 800c03e:	f3bf 8f4f 	dsb	sy
 800c042:	603b      	str	r3, [r7, #0]
}
 800c044:	bf00      	nop
 800c046:	e7fe      	b.n	800c046 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c048:	f001 fa44 	bl	800d4d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c04c:	4b39      	ldr	r3, [pc, #228]	; (800c134 <xTaskResumeAll+0x118>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	3b01      	subs	r3, #1
 800c052:	4a38      	ldr	r2, [pc, #224]	; (800c134 <xTaskResumeAll+0x118>)
 800c054:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c056:	4b37      	ldr	r3, [pc, #220]	; (800c134 <xTaskResumeAll+0x118>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d162      	bne.n	800c124 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c05e:	4b36      	ldr	r3, [pc, #216]	; (800c138 <xTaskResumeAll+0x11c>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d05e      	beq.n	800c124 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c066:	e02f      	b.n	800c0c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c068:	4b34      	ldr	r3, [pc, #208]	; (800c13c <xTaskResumeAll+0x120>)
 800c06a:	68db      	ldr	r3, [r3, #12]
 800c06c:	68db      	ldr	r3, [r3, #12]
 800c06e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	3318      	adds	r3, #24
 800c074:	4618      	mov	r0, r3
 800c076:	f7fe fe67 	bl	800ad48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	3304      	adds	r3, #4
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fe fe62 	bl	800ad48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c088:	4b2d      	ldr	r3, [pc, #180]	; (800c140 <xTaskResumeAll+0x124>)
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d903      	bls.n	800c098 <xTaskResumeAll+0x7c>
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c094:	4a2a      	ldr	r2, [pc, #168]	; (800c140 <xTaskResumeAll+0x124>)
 800c096:	6013      	str	r3, [r2, #0]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c09c:	4613      	mov	r3, r2
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	4413      	add	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4a27      	ldr	r2, [pc, #156]	; (800c144 <xTaskResumeAll+0x128>)
 800c0a6:	441a      	add	r2, r3
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	3304      	adds	r3, #4
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	4610      	mov	r0, r2
 800c0b0:	f7fe fded 	bl	800ac8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b8:	4b23      	ldr	r3, [pc, #140]	; (800c148 <xTaskResumeAll+0x12c>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d302      	bcc.n	800c0c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c0c2:	4b22      	ldr	r3, [pc, #136]	; (800c14c <xTaskResumeAll+0x130>)
 800c0c4:	2201      	movs	r2, #1
 800c0c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0c8:	4b1c      	ldr	r3, [pc, #112]	; (800c13c <xTaskResumeAll+0x120>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d1cb      	bne.n	800c068 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d001      	beq.n	800c0da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c0d6:	f000 fb85 	bl	800c7e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c0da:	4b1d      	ldr	r3, [pc, #116]	; (800c150 <xTaskResumeAll+0x134>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d010      	beq.n	800c108 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c0e6:	f000 f847 	bl	800c178 <xTaskIncrementTick>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d002      	beq.n	800c0f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c0f0:	4b16      	ldr	r3, [pc, #88]	; (800c14c <xTaskResumeAll+0x130>)
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	3b01      	subs	r3, #1
 800c0fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1f1      	bne.n	800c0e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c102:	4b13      	ldr	r3, [pc, #76]	; (800c150 <xTaskResumeAll+0x134>)
 800c104:	2200      	movs	r2, #0
 800c106:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c108:	4b10      	ldr	r3, [pc, #64]	; (800c14c <xTaskResumeAll+0x130>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d009      	beq.n	800c124 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c110:	2301      	movs	r3, #1
 800c112:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c114:	4b0f      	ldr	r3, [pc, #60]	; (800c154 <xTaskResumeAll+0x138>)
 800c116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c11a:	601a      	str	r2, [r3, #0]
 800c11c:	f3bf 8f4f 	dsb	sy
 800c120:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c124:	f001 fa06 	bl	800d534 <vPortExitCritical>

	return xAlreadyYielded;
 800c128:	68bb      	ldr	r3, [r7, #8]
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	20005d0c 	.word	0x20005d0c
 800c138:	20005ce4 	.word	0x20005ce4
 800c13c:	20005ca4 	.word	0x20005ca4
 800c140:	20005cec 	.word	0x20005cec
 800c144:	20005814 	.word	0x20005814
 800c148:	20005810 	.word	0x20005810
 800c14c:	20005cf8 	.word	0x20005cf8
 800c150:	20005cf4 	.word	0x20005cf4
 800c154:	e000ed04 	.word	0xe000ed04

0800c158 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c158:	b480      	push	{r7}
 800c15a:	b083      	sub	sp, #12
 800c15c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c15e:	4b05      	ldr	r3, [pc, #20]	; (800c174 <xTaskGetTickCount+0x1c>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c164:	687b      	ldr	r3, [r7, #4]
}
 800c166:	4618      	mov	r0, r3
 800c168:	370c      	adds	r7, #12
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	20005ce8 	.word	0x20005ce8

0800c178 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c17e:	2300      	movs	r3, #0
 800c180:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c182:	4b4f      	ldr	r3, [pc, #316]	; (800c2c0 <xTaskIncrementTick+0x148>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	f040 808f 	bne.w	800c2aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c18c:	4b4d      	ldr	r3, [pc, #308]	; (800c2c4 <xTaskIncrementTick+0x14c>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3301      	adds	r3, #1
 800c192:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c194:	4a4b      	ldr	r2, [pc, #300]	; (800c2c4 <xTaskIncrementTick+0x14c>)
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d120      	bne.n	800c1e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c1a0:	4b49      	ldr	r3, [pc, #292]	; (800c2c8 <xTaskIncrementTick+0x150>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00a      	beq.n	800c1c0 <xTaskIncrementTick+0x48>
	__asm volatile
 800c1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ae:	f383 8811 	msr	BASEPRI, r3
 800c1b2:	f3bf 8f6f 	isb	sy
 800c1b6:	f3bf 8f4f 	dsb	sy
 800c1ba:	603b      	str	r3, [r7, #0]
}
 800c1bc:	bf00      	nop
 800c1be:	e7fe      	b.n	800c1be <xTaskIncrementTick+0x46>
 800c1c0:	4b41      	ldr	r3, [pc, #260]	; (800c2c8 <xTaskIncrementTick+0x150>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	60fb      	str	r3, [r7, #12]
 800c1c6:	4b41      	ldr	r3, [pc, #260]	; (800c2cc <xTaskIncrementTick+0x154>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a3f      	ldr	r2, [pc, #252]	; (800c2c8 <xTaskIncrementTick+0x150>)
 800c1cc:	6013      	str	r3, [r2, #0]
 800c1ce:	4a3f      	ldr	r2, [pc, #252]	; (800c2cc <xTaskIncrementTick+0x154>)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	6013      	str	r3, [r2, #0]
 800c1d4:	4b3e      	ldr	r3, [pc, #248]	; (800c2d0 <xTaskIncrementTick+0x158>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	3301      	adds	r3, #1
 800c1da:	4a3d      	ldr	r2, [pc, #244]	; (800c2d0 <xTaskIncrementTick+0x158>)
 800c1dc:	6013      	str	r3, [r2, #0]
 800c1de:	f000 fb01 	bl	800c7e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c1e2:	4b3c      	ldr	r3, [pc, #240]	; (800c2d4 <xTaskIncrementTick+0x15c>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	693a      	ldr	r2, [r7, #16]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d349      	bcc.n	800c280 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1ec:	4b36      	ldr	r3, [pc, #216]	; (800c2c8 <xTaskIncrementTick+0x150>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d104      	bne.n	800c200 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1f6:	4b37      	ldr	r3, [pc, #220]	; (800c2d4 <xTaskIncrementTick+0x15c>)
 800c1f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1fc:	601a      	str	r2, [r3, #0]
					break;
 800c1fe:	e03f      	b.n	800c280 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c200:	4b31      	ldr	r3, [pc, #196]	; (800c2c8 <xTaskIncrementTick+0x150>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c210:	693a      	ldr	r2, [r7, #16]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	429a      	cmp	r2, r3
 800c216:	d203      	bcs.n	800c220 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c218:	4a2e      	ldr	r2, [pc, #184]	; (800c2d4 <xTaskIncrementTick+0x15c>)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c21e:	e02f      	b.n	800c280 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	3304      	adds	r3, #4
 800c224:	4618      	mov	r0, r3
 800c226:	f7fe fd8f 	bl	800ad48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d004      	beq.n	800c23c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	3318      	adds	r3, #24
 800c236:	4618      	mov	r0, r3
 800c238:	f7fe fd86 	bl	800ad48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c240:	4b25      	ldr	r3, [pc, #148]	; (800c2d8 <xTaskIncrementTick+0x160>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	429a      	cmp	r2, r3
 800c246:	d903      	bls.n	800c250 <xTaskIncrementTick+0xd8>
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c24c:	4a22      	ldr	r2, [pc, #136]	; (800c2d8 <xTaskIncrementTick+0x160>)
 800c24e:	6013      	str	r3, [r2, #0]
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c254:	4613      	mov	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4413      	add	r3, r2
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	4a1f      	ldr	r2, [pc, #124]	; (800c2dc <xTaskIncrementTick+0x164>)
 800c25e:	441a      	add	r2, r3
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	3304      	adds	r3, #4
 800c264:	4619      	mov	r1, r3
 800c266:	4610      	mov	r0, r2
 800c268:	f7fe fd11 	bl	800ac8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c270:	4b1b      	ldr	r3, [pc, #108]	; (800c2e0 <xTaskIncrementTick+0x168>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c276:	429a      	cmp	r2, r3
 800c278:	d3b8      	bcc.n	800c1ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c27a:	2301      	movs	r3, #1
 800c27c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c27e:	e7b5      	b.n	800c1ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c280:	4b17      	ldr	r3, [pc, #92]	; (800c2e0 <xTaskIncrementTick+0x168>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c286:	4915      	ldr	r1, [pc, #84]	; (800c2dc <xTaskIncrementTick+0x164>)
 800c288:	4613      	mov	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	4413      	add	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	440b      	add	r3, r1
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2b01      	cmp	r3, #1
 800c296:	d901      	bls.n	800c29c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800c298:	2301      	movs	r3, #1
 800c29a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c29c:	4b11      	ldr	r3, [pc, #68]	; (800c2e4 <xTaskIncrementTick+0x16c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d007      	beq.n	800c2b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	617b      	str	r3, [r7, #20]
 800c2a8:	e004      	b.n	800c2b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c2aa:	4b0f      	ldr	r3, [pc, #60]	; (800c2e8 <xTaskIncrementTick+0x170>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	4a0d      	ldr	r2, [pc, #52]	; (800c2e8 <xTaskIncrementTick+0x170>)
 800c2b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c2b4:	697b      	ldr	r3, [r7, #20]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3718      	adds	r7, #24
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	20005d0c 	.word	0x20005d0c
 800c2c4:	20005ce8 	.word	0x20005ce8
 800c2c8:	20005c9c 	.word	0x20005c9c
 800c2cc:	20005ca0 	.word	0x20005ca0
 800c2d0:	20005cfc 	.word	0x20005cfc
 800c2d4:	20005d04 	.word	0x20005d04
 800c2d8:	20005cec 	.word	0x20005cec
 800c2dc:	20005814 	.word	0x20005814
 800c2e0:	20005810 	.word	0x20005810
 800c2e4:	20005cf8 	.word	0x20005cf8
 800c2e8:	20005cf4 	.word	0x20005cf4

0800c2ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b085      	sub	sp, #20
 800c2f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c2f2:	4b2a      	ldr	r3, [pc, #168]	; (800c39c <vTaskSwitchContext+0xb0>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d003      	beq.n	800c302 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c2fa:	4b29      	ldr	r3, [pc, #164]	; (800c3a0 <vTaskSwitchContext+0xb4>)
 800c2fc:	2201      	movs	r2, #1
 800c2fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c300:	e046      	b.n	800c390 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800c302:	4b27      	ldr	r3, [pc, #156]	; (800c3a0 <vTaskSwitchContext+0xb4>)
 800c304:	2200      	movs	r2, #0
 800c306:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c308:	4b26      	ldr	r3, [pc, #152]	; (800c3a4 <vTaskSwitchContext+0xb8>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	60fb      	str	r3, [r7, #12]
 800c30e:	e010      	b.n	800c332 <vTaskSwitchContext+0x46>
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d10a      	bne.n	800c32c <vTaskSwitchContext+0x40>
	__asm volatile
 800c316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c31a:	f383 8811 	msr	BASEPRI, r3
 800c31e:	f3bf 8f6f 	isb	sy
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	607b      	str	r3, [r7, #4]
}
 800c328:	bf00      	nop
 800c32a:	e7fe      	b.n	800c32a <vTaskSwitchContext+0x3e>
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	3b01      	subs	r3, #1
 800c330:	60fb      	str	r3, [r7, #12]
 800c332:	491d      	ldr	r1, [pc, #116]	; (800c3a8 <vTaskSwitchContext+0xbc>)
 800c334:	68fa      	ldr	r2, [r7, #12]
 800c336:	4613      	mov	r3, r2
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	4413      	add	r3, r2
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	440b      	add	r3, r1
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d0e4      	beq.n	800c310 <vTaskSwitchContext+0x24>
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	4613      	mov	r3, r2
 800c34a:	009b      	lsls	r3, r3, #2
 800c34c:	4413      	add	r3, r2
 800c34e:	009b      	lsls	r3, r3, #2
 800c350:	4a15      	ldr	r2, [pc, #84]	; (800c3a8 <vTaskSwitchContext+0xbc>)
 800c352:	4413      	add	r3, r2
 800c354:	60bb      	str	r3, [r7, #8]
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	685a      	ldr	r2, [r3, #4]
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	605a      	str	r2, [r3, #4]
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	685a      	ldr	r2, [r3, #4]
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	3308      	adds	r3, #8
 800c368:	429a      	cmp	r2, r3
 800c36a:	d104      	bne.n	800c376 <vTaskSwitchContext+0x8a>
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	685a      	ldr	r2, [r3, #4]
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	605a      	str	r2, [r3, #4]
 800c376:	68bb      	ldr	r3, [r7, #8]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	68db      	ldr	r3, [r3, #12]
 800c37c:	4a0b      	ldr	r2, [pc, #44]	; (800c3ac <vTaskSwitchContext+0xc0>)
 800c37e:	6013      	str	r3, [r2, #0]
 800c380:	4a08      	ldr	r2, [pc, #32]	; (800c3a4 <vTaskSwitchContext+0xb8>)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c386:	4b09      	ldr	r3, [pc, #36]	; (800c3ac <vTaskSwitchContext+0xc0>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	3354      	adds	r3, #84	; 0x54
 800c38c:	4a08      	ldr	r2, [pc, #32]	; (800c3b0 <vTaskSwitchContext+0xc4>)
 800c38e:	6013      	str	r3, [r2, #0]
}
 800c390:	bf00      	nop
 800c392:	3714      	adds	r7, #20
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr
 800c39c:	20005d0c 	.word	0x20005d0c
 800c3a0:	20005cf8 	.word	0x20005cf8
 800c3a4:	20005cec 	.word	0x20005cec
 800c3a8:	20005814 	.word	0x20005814
 800c3ac:	20005810 	.word	0x20005810
 800c3b0:	20000080 	.word	0x20000080

0800c3b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d10a      	bne.n	800c3da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c8:	f383 8811 	msr	BASEPRI, r3
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	60fb      	str	r3, [r7, #12]
}
 800c3d6:	bf00      	nop
 800c3d8:	e7fe      	b.n	800c3d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3da:	4b07      	ldr	r3, [pc, #28]	; (800c3f8 <vTaskPlaceOnEventList+0x44>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	3318      	adds	r3, #24
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f7fe fc77 	bl	800acd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	6838      	ldr	r0, [r7, #0]
 800c3ec:	f000 fba4 	bl	800cb38 <prvAddCurrentTaskToDelayedList>
}
 800c3f0:	bf00      	nop
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	20005810 	.word	0x20005810

0800c3fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b086      	sub	sp, #24
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10a      	bne.n	800c424 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	617b      	str	r3, [r7, #20]
}
 800c420:	bf00      	nop
 800c422:	e7fe      	b.n	800c422 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c424:	4b0a      	ldr	r3, [pc, #40]	; (800c450 <vTaskPlaceOnEventListRestricted+0x54>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	3318      	adds	r3, #24
 800c42a:	4619      	mov	r1, r3
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f7fe fc2e 	bl	800ac8e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c43c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c43e:	6879      	ldr	r1, [r7, #4]
 800c440:	68b8      	ldr	r0, [r7, #8]
 800c442:	f000 fb79 	bl	800cb38 <prvAddCurrentTaskToDelayedList>
	}
 800c446:	bf00      	nop
 800c448:	3718      	adds	r7, #24
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}
 800c44e:	bf00      	nop
 800c450:	20005810 	.word	0x20005810

0800c454 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b086      	sub	sp, #24
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d10a      	bne.n	800c480 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46e:	f383 8811 	msr	BASEPRI, r3
 800c472:	f3bf 8f6f 	isb	sy
 800c476:	f3bf 8f4f 	dsb	sy
 800c47a:	60fb      	str	r3, [r7, #12]
}
 800c47c:	bf00      	nop
 800c47e:	e7fe      	b.n	800c47e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	3318      	adds	r3, #24
 800c484:	4618      	mov	r0, r3
 800c486:	f7fe fc5f 	bl	800ad48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c48a:	4b1e      	ldr	r3, [pc, #120]	; (800c504 <xTaskRemoveFromEventList+0xb0>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d11d      	bne.n	800c4ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	3304      	adds	r3, #4
 800c496:	4618      	mov	r0, r3
 800c498:	f7fe fc56 	bl	800ad48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4a0:	4b19      	ldr	r3, [pc, #100]	; (800c508 <xTaskRemoveFromEventList+0xb4>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d903      	bls.n	800c4b0 <xTaskRemoveFromEventList+0x5c>
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ac:	4a16      	ldr	r2, [pc, #88]	; (800c508 <xTaskRemoveFromEventList+0xb4>)
 800c4ae:	6013      	str	r3, [r2, #0]
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4a13      	ldr	r2, [pc, #76]	; (800c50c <xTaskRemoveFromEventList+0xb8>)
 800c4be:	441a      	add	r2, r3
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	3304      	adds	r3, #4
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	4610      	mov	r0, r2
 800c4c8:	f7fe fbe1 	bl	800ac8e <vListInsertEnd>
 800c4cc:	e005      	b.n	800c4da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	3318      	adds	r3, #24
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	480e      	ldr	r0, [pc, #56]	; (800c510 <xTaskRemoveFromEventList+0xbc>)
 800c4d6:	f7fe fbda 	bl	800ac8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4de:	4b0d      	ldr	r3, [pc, #52]	; (800c514 <xTaskRemoveFromEventList+0xc0>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d905      	bls.n	800c4f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c4ec:	4b0a      	ldr	r3, [pc, #40]	; (800c518 <xTaskRemoveFromEventList+0xc4>)
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	601a      	str	r2, [r3, #0]
 800c4f2:	e001      	b.n	800c4f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c4f8:	697b      	ldr	r3, [r7, #20]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3718      	adds	r7, #24
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	20005d0c 	.word	0x20005d0c
 800c508:	20005cec 	.word	0x20005cec
 800c50c:	20005814 	.word	0x20005814
 800c510:	20005ca4 	.word	0x20005ca4
 800c514:	20005810 	.word	0x20005810
 800c518:	20005cf8 	.word	0x20005cf8

0800c51c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d10a      	bne.n	800c540 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800c52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52e:	f383 8811 	msr	BASEPRI, r3
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	60fb      	str	r3, [r7, #12]
}
 800c53c:	bf00      	nop
 800c53e:	e7fe      	b.n	800c53e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800c540:	f000 ffc8 	bl	800d4d4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c544:	4b06      	ldr	r3, [pc, #24]	; (800c560 <vTaskSetTimeOutState+0x44>)
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800c54c:	4b05      	ldr	r3, [pc, #20]	; (800c564 <vTaskSetTimeOutState+0x48>)
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800c554:	f000 ffee 	bl	800d534 <vPortExitCritical>
}
 800c558:	bf00      	nop
 800c55a:	3710      	adds	r7, #16
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	20005cfc 	.word	0x20005cfc
 800c564:	20005ce8 	.word	0x20005ce8

0800c568 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c570:	4b06      	ldr	r3, [pc, #24]	; (800c58c <vTaskInternalSetTimeOutState+0x24>)
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c578:	4b05      	ldr	r3, [pc, #20]	; (800c590 <vTaskInternalSetTimeOutState+0x28>)
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	605a      	str	r2, [r3, #4]
}
 800c580:	bf00      	nop
 800c582:	370c      	adds	r7, #12
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr
 800c58c:	20005cfc 	.word	0x20005cfc
 800c590:	20005ce8 	.word	0x20005ce8

0800c594 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b088      	sub	sp, #32
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10a      	bne.n	800c5ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a8:	f383 8811 	msr	BASEPRI, r3
 800c5ac:	f3bf 8f6f 	isb	sy
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	613b      	str	r3, [r7, #16]
}
 800c5b6:	bf00      	nop
 800c5b8:	e7fe      	b.n	800c5b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10a      	bne.n	800c5d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	60fb      	str	r3, [r7, #12]
}
 800c5d2:	bf00      	nop
 800c5d4:	e7fe      	b.n	800c5d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c5d6:	f000 ff7d 	bl	800d4d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c5da:	4b1d      	ldr	r3, [pc, #116]	; (800c650 <xTaskCheckForTimeOut+0xbc>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	69ba      	ldr	r2, [r7, #24]
 800c5e6:	1ad3      	subs	r3, r2, r3
 800c5e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5f2:	d102      	bne.n	800c5fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	61fb      	str	r3, [r7, #28]
 800c5f8:	e023      	b.n	800c642 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	4b15      	ldr	r3, [pc, #84]	; (800c654 <xTaskCheckForTimeOut+0xc0>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	429a      	cmp	r2, r3
 800c604:	d007      	beq.n	800c616 <xTaskCheckForTimeOut+0x82>
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	69ba      	ldr	r2, [r7, #24]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d302      	bcc.n	800c616 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c610:	2301      	movs	r3, #1
 800c612:	61fb      	str	r3, [r7, #28]
 800c614:	e015      	b.n	800c642 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	697a      	ldr	r2, [r7, #20]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d20b      	bcs.n	800c638 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	1ad2      	subs	r2, r2, r3
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f7ff ff9b 	bl	800c568 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c632:	2300      	movs	r3, #0
 800c634:	61fb      	str	r3, [r7, #28]
 800c636:	e004      	b.n	800c642 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	2200      	movs	r2, #0
 800c63c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c63e:	2301      	movs	r3, #1
 800c640:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c642:	f000 ff77 	bl	800d534 <vPortExitCritical>

	return xReturn;
 800c646:	69fb      	ldr	r3, [r7, #28]
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3720      	adds	r7, #32
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	20005ce8 	.word	0x20005ce8
 800c654:	20005cfc 	.word	0x20005cfc

0800c658 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c658:	b480      	push	{r7}
 800c65a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c65c:	4b03      	ldr	r3, [pc, #12]	; (800c66c <vTaskMissedYield+0x14>)
 800c65e:	2201      	movs	r2, #1
 800c660:	601a      	str	r2, [r3, #0]
}
 800c662:	bf00      	nop
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr
 800c66c:	20005cf8 	.word	0x20005cf8

0800c670 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c678:	f000 f852 	bl	800c720 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c67c:	4b06      	ldr	r3, [pc, #24]	; (800c698 <prvIdleTask+0x28>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2b01      	cmp	r3, #1
 800c682:	d9f9      	bls.n	800c678 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c684:	4b05      	ldr	r3, [pc, #20]	; (800c69c <prvIdleTask+0x2c>)
 800c686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c68a:	601a      	str	r2, [r3, #0]
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c694:	e7f0      	b.n	800c678 <prvIdleTask+0x8>
 800c696:	bf00      	nop
 800c698:	20005814 	.word	0x20005814
 800c69c:	e000ed04 	.word	0xe000ed04

0800c6a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	607b      	str	r3, [r7, #4]
 800c6aa:	e00c      	b.n	800c6c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	4413      	add	r3, r2
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	4a12      	ldr	r2, [pc, #72]	; (800c700 <prvInitialiseTaskLists+0x60>)
 800c6b8:	4413      	add	r3, r2
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fe faba 	bl	800ac34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	607b      	str	r3, [r7, #4]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2b37      	cmp	r3, #55	; 0x37
 800c6ca:	d9ef      	bls.n	800c6ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c6cc:	480d      	ldr	r0, [pc, #52]	; (800c704 <prvInitialiseTaskLists+0x64>)
 800c6ce:	f7fe fab1 	bl	800ac34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c6d2:	480d      	ldr	r0, [pc, #52]	; (800c708 <prvInitialiseTaskLists+0x68>)
 800c6d4:	f7fe faae 	bl	800ac34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c6d8:	480c      	ldr	r0, [pc, #48]	; (800c70c <prvInitialiseTaskLists+0x6c>)
 800c6da:	f7fe faab 	bl	800ac34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c6de:	480c      	ldr	r0, [pc, #48]	; (800c710 <prvInitialiseTaskLists+0x70>)
 800c6e0:	f7fe faa8 	bl	800ac34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c6e4:	480b      	ldr	r0, [pc, #44]	; (800c714 <prvInitialiseTaskLists+0x74>)
 800c6e6:	f7fe faa5 	bl	800ac34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c6ea:	4b0b      	ldr	r3, [pc, #44]	; (800c718 <prvInitialiseTaskLists+0x78>)
 800c6ec:	4a05      	ldr	r2, [pc, #20]	; (800c704 <prvInitialiseTaskLists+0x64>)
 800c6ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c6f0:	4b0a      	ldr	r3, [pc, #40]	; (800c71c <prvInitialiseTaskLists+0x7c>)
 800c6f2:	4a05      	ldr	r2, [pc, #20]	; (800c708 <prvInitialiseTaskLists+0x68>)
 800c6f4:	601a      	str	r2, [r3, #0]
}
 800c6f6:	bf00      	nop
 800c6f8:	3708      	adds	r7, #8
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}
 800c6fe:	bf00      	nop
 800c700:	20005814 	.word	0x20005814
 800c704:	20005c74 	.word	0x20005c74
 800c708:	20005c88 	.word	0x20005c88
 800c70c:	20005ca4 	.word	0x20005ca4
 800c710:	20005cb8 	.word	0x20005cb8
 800c714:	20005cd0 	.word	0x20005cd0
 800c718:	20005c9c 	.word	0x20005c9c
 800c71c:	20005ca0 	.word	0x20005ca0

0800c720 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c726:	e019      	b.n	800c75c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c728:	f000 fed4 	bl	800d4d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c72c:	4b10      	ldr	r3, [pc, #64]	; (800c770 <prvCheckTasksWaitingTermination+0x50>)
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	3304      	adds	r3, #4
 800c738:	4618      	mov	r0, r3
 800c73a:	f7fe fb05 	bl	800ad48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c73e:	4b0d      	ldr	r3, [pc, #52]	; (800c774 <prvCheckTasksWaitingTermination+0x54>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	3b01      	subs	r3, #1
 800c744:	4a0b      	ldr	r2, [pc, #44]	; (800c774 <prvCheckTasksWaitingTermination+0x54>)
 800c746:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c748:	4b0b      	ldr	r3, [pc, #44]	; (800c778 <prvCheckTasksWaitingTermination+0x58>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	3b01      	subs	r3, #1
 800c74e:	4a0a      	ldr	r2, [pc, #40]	; (800c778 <prvCheckTasksWaitingTermination+0x58>)
 800c750:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c752:	f000 feef 	bl	800d534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f810 	bl	800c77c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c75c:	4b06      	ldr	r3, [pc, #24]	; (800c778 <prvCheckTasksWaitingTermination+0x58>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1e1      	bne.n	800c728 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c764:	bf00      	nop
 800c766:	bf00      	nop
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	20005cb8 	.word	0x20005cb8
 800c774:	20005ce4 	.word	0x20005ce4
 800c778:	20005ccc 	.word	0x20005ccc

0800c77c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b084      	sub	sp, #16
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	3354      	adds	r3, #84	; 0x54
 800c788:	4618      	mov	r0, r3
 800c78a:	f00d fd37 	bl	801a1fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c794:	2b00      	cmp	r3, #0
 800c796:	d108      	bne.n	800c7aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c79c:	4618      	mov	r0, r3
 800c79e:	f001 f887 	bl	800d8b0 <vPortFree>
				vPortFree( pxTCB );
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f001 f884 	bl	800d8b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c7a8:	e018      	b.n	800c7dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c7b0:	2b01      	cmp	r3, #1
 800c7b2:	d103      	bne.n	800c7bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f001 f87b 	bl	800d8b0 <vPortFree>
	}
 800c7ba:	e00f      	b.n	800c7dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	d00a      	beq.n	800c7dc <prvDeleteTCB+0x60>
	__asm volatile
 800c7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	60fb      	str	r3, [r7, #12]
}
 800c7d8:	bf00      	nop
 800c7da:	e7fe      	b.n	800c7da <prvDeleteTCB+0x5e>
	}
 800c7dc:	bf00      	nop
 800c7de:	3710      	adds	r7, #16
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7ea:	4b0c      	ldr	r3, [pc, #48]	; (800c81c <prvResetNextTaskUnblockTime+0x38>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d104      	bne.n	800c7fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c7f4:	4b0a      	ldr	r3, [pc, #40]	; (800c820 <prvResetNextTaskUnblockTime+0x3c>)
 800c7f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c7fc:	e008      	b.n	800c810 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7fe:	4b07      	ldr	r3, [pc, #28]	; (800c81c <prvResetNextTaskUnblockTime+0x38>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	68db      	ldr	r3, [r3, #12]
 800c806:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	4a04      	ldr	r2, [pc, #16]	; (800c820 <prvResetNextTaskUnblockTime+0x3c>)
 800c80e:	6013      	str	r3, [r2, #0]
}
 800c810:	bf00      	nop
 800c812:	370c      	adds	r7, #12
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr
 800c81c:	20005c9c 	.word	0x20005c9c
 800c820:	20005d04 	.word	0x20005d04

0800c824 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c82a:	4b0b      	ldr	r3, [pc, #44]	; (800c858 <xTaskGetSchedulerState+0x34>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d102      	bne.n	800c838 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c832:	2301      	movs	r3, #1
 800c834:	607b      	str	r3, [r7, #4]
 800c836:	e008      	b.n	800c84a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c838:	4b08      	ldr	r3, [pc, #32]	; (800c85c <xTaskGetSchedulerState+0x38>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d102      	bne.n	800c846 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c840:	2302      	movs	r3, #2
 800c842:	607b      	str	r3, [r7, #4]
 800c844:	e001      	b.n	800c84a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c846:	2300      	movs	r3, #0
 800c848:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c84a:	687b      	ldr	r3, [r7, #4]
	}
 800c84c:	4618      	mov	r0, r3
 800c84e:	370c      	adds	r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr
 800c858:	20005cf0 	.word	0x20005cf0
 800c85c:	20005d0c 	.word	0x20005d0c

0800c860 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c86c:	2300      	movs	r3, #0
 800c86e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d051      	beq.n	800c91a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c87a:	4b2a      	ldr	r3, [pc, #168]	; (800c924 <xTaskPriorityInherit+0xc4>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c880:	429a      	cmp	r2, r3
 800c882:	d241      	bcs.n	800c908 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	699b      	ldr	r3, [r3, #24]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	db06      	blt.n	800c89a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c88c:	4b25      	ldr	r3, [pc, #148]	; (800c924 <xTaskPriorityInherit+0xc4>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c892:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	6959      	ldr	r1, [r3, #20]
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8a2:	4613      	mov	r3, r2
 800c8a4:	009b      	lsls	r3, r3, #2
 800c8a6:	4413      	add	r3, r2
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	4a1f      	ldr	r2, [pc, #124]	; (800c928 <xTaskPriorityInherit+0xc8>)
 800c8ac:	4413      	add	r3, r2
 800c8ae:	4299      	cmp	r1, r3
 800c8b0:	d122      	bne.n	800c8f8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	3304      	adds	r3, #4
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7fe fa46 	bl	800ad48 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c8bc:	4b19      	ldr	r3, [pc, #100]	; (800c924 <xTaskPriorityInherit+0xc4>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ca:	4b18      	ldr	r3, [pc, #96]	; (800c92c <xTaskPriorityInherit+0xcc>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d903      	bls.n	800c8da <xTaskPriorityInherit+0x7a>
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d6:	4a15      	ldr	r2, [pc, #84]	; (800c92c <xTaskPriorityInherit+0xcc>)
 800c8d8:	6013      	str	r3, [r2, #0]
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8de:	4613      	mov	r3, r2
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	4413      	add	r3, r2
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	4a10      	ldr	r2, [pc, #64]	; (800c928 <xTaskPriorityInherit+0xc8>)
 800c8e8:	441a      	add	r2, r3
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	3304      	adds	r3, #4
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	4610      	mov	r0, r2
 800c8f2:	f7fe f9cc 	bl	800ac8e <vListInsertEnd>
 800c8f6:	e004      	b.n	800c902 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c8f8:	4b0a      	ldr	r3, [pc, #40]	; (800c924 <xTaskPriorityInherit+0xc4>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c902:	2301      	movs	r3, #1
 800c904:	60fb      	str	r3, [r7, #12]
 800c906:	e008      	b.n	800c91a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c90c:	4b05      	ldr	r3, [pc, #20]	; (800c924 <xTaskPriorityInherit+0xc4>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c912:	429a      	cmp	r2, r3
 800c914:	d201      	bcs.n	800c91a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c916:	2301      	movs	r3, #1
 800c918:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c91a:	68fb      	ldr	r3, [r7, #12]
	}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	20005810 	.word	0x20005810
 800c928:	20005814 	.word	0x20005814
 800c92c:	20005cec 	.word	0x20005cec

0800c930 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c930:	b580      	push	{r7, lr}
 800c932:	b086      	sub	sp, #24
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c93c:	2300      	movs	r3, #0
 800c93e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d056      	beq.n	800c9f4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c946:	4b2e      	ldr	r3, [pc, #184]	; (800ca00 <xTaskPriorityDisinherit+0xd0>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	693a      	ldr	r2, [r7, #16]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d00a      	beq.n	800c966 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c954:	f383 8811 	msr	BASEPRI, r3
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	60fb      	str	r3, [r7, #12]
}
 800c962:	bf00      	nop
 800c964:	e7fe      	b.n	800c964 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d10a      	bne.n	800c984 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c972:	f383 8811 	msr	BASEPRI, r3
 800c976:	f3bf 8f6f 	isb	sy
 800c97a:	f3bf 8f4f 	dsb	sy
 800c97e:	60bb      	str	r3, [r7, #8]
}
 800c980:	bf00      	nop
 800c982:	e7fe      	b.n	800c982 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c988:	1e5a      	subs	r2, r3, #1
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c996:	429a      	cmp	r2, r3
 800c998:	d02c      	beq.n	800c9f4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d128      	bne.n	800c9f4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	3304      	adds	r3, #4
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7fe f9ce 	bl	800ad48 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9c4:	4b0f      	ldr	r3, [pc, #60]	; (800ca04 <xTaskPriorityDisinherit+0xd4>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	d903      	bls.n	800c9d4 <xTaskPriorityDisinherit+0xa4>
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9d0:	4a0c      	ldr	r2, [pc, #48]	; (800ca04 <xTaskPriorityDisinherit+0xd4>)
 800c9d2:	6013      	str	r3, [r2, #0]
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9d8:	4613      	mov	r3, r2
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	4413      	add	r3, r2
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	4a09      	ldr	r2, [pc, #36]	; (800ca08 <xTaskPriorityDisinherit+0xd8>)
 800c9e2:	441a      	add	r2, r3
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	3304      	adds	r3, #4
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	4610      	mov	r0, r2
 800c9ec:	f7fe f94f 	bl	800ac8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c9f4:	697b      	ldr	r3, [r7, #20]
	}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3718      	adds	r7, #24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20005810 	.word	0x20005810
 800ca04:	20005cec 	.word	0x20005cec
 800ca08:	20005814 	.word	0x20005814

0800ca0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b088      	sub	sp, #32
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d06a      	beq.n	800cafa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d10a      	bne.n	800ca42 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ca2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca30:	f383 8811 	msr	BASEPRI, r3
 800ca34:	f3bf 8f6f 	isb	sy
 800ca38:	f3bf 8f4f 	dsb	sy
 800ca3c:	60fb      	str	r3, [r7, #12]
}
 800ca3e:	bf00      	nop
 800ca40:	e7fe      	b.n	800ca40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ca42:	69bb      	ldr	r3, [r7, #24]
 800ca44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d902      	bls.n	800ca52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	61fb      	str	r3, [r7, #28]
 800ca50:	e002      	b.n	800ca58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ca52:	69bb      	ldr	r3, [r7, #24]
 800ca54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ca58:	69bb      	ldr	r3, [r7, #24]
 800ca5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca5c:	69fa      	ldr	r2, [r7, #28]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d04b      	beq.n	800cafa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ca62:	69bb      	ldr	r3, [r7, #24]
 800ca64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca66:	697a      	ldr	r2, [r7, #20]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d146      	bne.n	800cafa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ca6c:	4b25      	ldr	r3, [pc, #148]	; (800cb04 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	69ba      	ldr	r2, [r7, #24]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d10a      	bne.n	800ca8c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ca76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca7a:	f383 8811 	msr	BASEPRI, r3
 800ca7e:	f3bf 8f6f 	isb	sy
 800ca82:	f3bf 8f4f 	dsb	sy
 800ca86:	60bb      	str	r3, [r7, #8]
}
 800ca88:	bf00      	nop
 800ca8a:	e7fe      	b.n	800ca8a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ca8c:	69bb      	ldr	r3, [r7, #24]
 800ca8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	69fa      	ldr	r2, [r7, #28]
 800ca96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	699b      	ldr	r3, [r3, #24]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	db04      	blt.n	800caaa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	6959      	ldr	r1, [r3, #20]
 800caae:	693a      	ldr	r2, [r7, #16]
 800cab0:	4613      	mov	r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4413      	add	r3, r2
 800cab6:	009b      	lsls	r3, r3, #2
 800cab8:	4a13      	ldr	r2, [pc, #76]	; (800cb08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800caba:	4413      	add	r3, r2
 800cabc:	4299      	cmp	r1, r3
 800cabe:	d11c      	bne.n	800cafa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	3304      	adds	r3, #4
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7fe f93f 	bl	800ad48 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cace:	4b0f      	ldr	r3, [pc, #60]	; (800cb0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d903      	bls.n	800cade <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800cad6:	69bb      	ldr	r3, [r7, #24]
 800cad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cada:	4a0c      	ldr	r2, [pc, #48]	; (800cb0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cadc:	6013      	str	r3, [r2, #0]
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae2:	4613      	mov	r3, r2
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	4413      	add	r3, r2
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	4a07      	ldr	r2, [pc, #28]	; (800cb08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800caec:	441a      	add	r2, r3
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	3304      	adds	r3, #4
 800caf2:	4619      	mov	r1, r3
 800caf4:	4610      	mov	r0, r2
 800caf6:	f7fe f8ca 	bl	800ac8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cafa:	bf00      	nop
 800cafc:	3720      	adds	r7, #32
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	20005810 	.word	0x20005810
 800cb08:	20005814 	.word	0x20005814
 800cb0c:	20005cec 	.word	0x20005cec

0800cb10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cb10:	b480      	push	{r7}
 800cb12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cb14:	4b07      	ldr	r3, [pc, #28]	; (800cb34 <pvTaskIncrementMutexHeldCount+0x24>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d004      	beq.n	800cb26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cb1c:	4b05      	ldr	r3, [pc, #20]	; (800cb34 <pvTaskIncrementMutexHeldCount+0x24>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb22:	3201      	adds	r2, #1
 800cb24:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800cb26:	4b03      	ldr	r3, [pc, #12]	; (800cb34 <pvTaskIncrementMutexHeldCount+0x24>)
 800cb28:	681b      	ldr	r3, [r3, #0]
	}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr
 800cb34:	20005810 	.word	0x20005810

0800cb38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cb42:	4b21      	ldr	r3, [pc, #132]	; (800cbc8 <prvAddCurrentTaskToDelayedList+0x90>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb48:	4b20      	ldr	r3, [pc, #128]	; (800cbcc <prvAddCurrentTaskToDelayedList+0x94>)
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	3304      	adds	r3, #4
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f7fe f8fa 	bl	800ad48 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb5a:	d10a      	bne.n	800cb72 <prvAddCurrentTaskToDelayedList+0x3a>
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d007      	beq.n	800cb72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb62:	4b1a      	ldr	r3, [pc, #104]	; (800cbcc <prvAddCurrentTaskToDelayedList+0x94>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	3304      	adds	r3, #4
 800cb68:	4619      	mov	r1, r3
 800cb6a:	4819      	ldr	r0, [pc, #100]	; (800cbd0 <prvAddCurrentTaskToDelayedList+0x98>)
 800cb6c:	f7fe f88f 	bl	800ac8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cb70:	e026      	b.n	800cbc0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4413      	add	r3, r2
 800cb78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cb7a:	4b14      	ldr	r3, [pc, #80]	; (800cbcc <prvAddCurrentTaskToDelayedList+0x94>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cb82:	68ba      	ldr	r2, [r7, #8]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d209      	bcs.n	800cb9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb8a:	4b12      	ldr	r3, [pc, #72]	; (800cbd4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cb8c:	681a      	ldr	r2, [r3, #0]
 800cb8e:	4b0f      	ldr	r3, [pc, #60]	; (800cbcc <prvAddCurrentTaskToDelayedList+0x94>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	3304      	adds	r3, #4
 800cb94:	4619      	mov	r1, r3
 800cb96:	4610      	mov	r0, r2
 800cb98:	f7fe f89d 	bl	800acd6 <vListInsert>
}
 800cb9c:	e010      	b.n	800cbc0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cb9e:	4b0e      	ldr	r3, [pc, #56]	; (800cbd8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	4b0a      	ldr	r3, [pc, #40]	; (800cbcc <prvAddCurrentTaskToDelayedList+0x94>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	3304      	adds	r3, #4
 800cba8:	4619      	mov	r1, r3
 800cbaa:	4610      	mov	r0, r2
 800cbac:	f7fe f893 	bl	800acd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cbb0:	4b0a      	ldr	r3, [pc, #40]	; (800cbdc <prvAddCurrentTaskToDelayedList+0xa4>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	68ba      	ldr	r2, [r7, #8]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d202      	bcs.n	800cbc0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cbba:	4a08      	ldr	r2, [pc, #32]	; (800cbdc <prvAddCurrentTaskToDelayedList+0xa4>)
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	6013      	str	r3, [r2, #0]
}
 800cbc0:	bf00      	nop
 800cbc2:	3710      	adds	r7, #16
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	20005ce8 	.word	0x20005ce8
 800cbcc:	20005810 	.word	0x20005810
 800cbd0:	20005cd0 	.word	0x20005cd0
 800cbd4:	20005ca0 	.word	0x20005ca0
 800cbd8:	20005c9c 	.word	0x20005c9c
 800cbdc:	20005d04 	.word	0x20005d04

0800cbe0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b08a      	sub	sp, #40	; 0x28
 800cbe4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cbea:	f000 fb07 	bl	800d1fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cbee:	4b1c      	ldr	r3, [pc, #112]	; (800cc60 <xTimerCreateTimerTask+0x80>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d021      	beq.n	800cc3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cbfe:	1d3a      	adds	r2, r7, #4
 800cc00:	f107 0108 	add.w	r1, r7, #8
 800cc04:	f107 030c 	add.w	r3, r7, #12
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7fd fff9 	bl	800ac00 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cc0e:	6879      	ldr	r1, [r7, #4]
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	68fa      	ldr	r2, [r7, #12]
 800cc14:	9202      	str	r2, [sp, #8]
 800cc16:	9301      	str	r3, [sp, #4]
 800cc18:	2302      	movs	r3, #2
 800cc1a:	9300      	str	r3, [sp, #0]
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	460a      	mov	r2, r1
 800cc20:	4910      	ldr	r1, [pc, #64]	; (800cc64 <xTimerCreateTimerTask+0x84>)
 800cc22:	4811      	ldr	r0, [pc, #68]	; (800cc68 <xTimerCreateTimerTask+0x88>)
 800cc24:	f7fe ff90 	bl	800bb48 <xTaskCreateStatic>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	4a10      	ldr	r2, [pc, #64]	; (800cc6c <xTimerCreateTimerTask+0x8c>)
 800cc2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cc2e:	4b0f      	ldr	r3, [pc, #60]	; (800cc6c <xTimerCreateTimerTask+0x8c>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d001      	beq.n	800cc3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cc36:	2301      	movs	r3, #1
 800cc38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d10a      	bne.n	800cc56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800cc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc44:	f383 8811 	msr	BASEPRI, r3
 800cc48:	f3bf 8f6f 	isb	sy
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	613b      	str	r3, [r7, #16]
}
 800cc52:	bf00      	nop
 800cc54:	e7fe      	b.n	800cc54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cc56:	697b      	ldr	r3, [r7, #20]
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3718      	adds	r7, #24
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	20005d40 	.word	0x20005d40
 800cc64:	0801dde8 	.word	0x0801dde8
 800cc68:	0800cda5 	.word	0x0800cda5
 800cc6c:	20005d44 	.word	0x20005d44

0800cc70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b08a      	sub	sp, #40	; 0x28
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	607a      	str	r2, [r7, #4]
 800cc7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d10a      	bne.n	800cc9e <xTimerGenericCommand+0x2e>
	__asm volatile
 800cc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8c:	f383 8811 	msr	BASEPRI, r3
 800cc90:	f3bf 8f6f 	isb	sy
 800cc94:	f3bf 8f4f 	dsb	sy
 800cc98:	623b      	str	r3, [r7, #32]
}
 800cc9a:	bf00      	nop
 800cc9c:	e7fe      	b.n	800cc9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cc9e:	4b1a      	ldr	r3, [pc, #104]	; (800cd08 <xTimerGenericCommand+0x98>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d02a      	beq.n	800ccfc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	2b05      	cmp	r3, #5
 800ccb6:	dc18      	bgt.n	800ccea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ccb8:	f7ff fdb4 	bl	800c824 <xTaskGetSchedulerState>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	d109      	bne.n	800ccd6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ccc2:	4b11      	ldr	r3, [pc, #68]	; (800cd08 <xTimerGenericCommand+0x98>)
 800ccc4:	6818      	ldr	r0, [r3, #0]
 800ccc6:	f107 0110 	add.w	r1, r7, #16
 800ccca:	2300      	movs	r3, #0
 800cccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccce:	f7fe f9a3 	bl	800b018 <xQueueGenericSend>
 800ccd2:	6278      	str	r0, [r7, #36]	; 0x24
 800ccd4:	e012      	b.n	800ccfc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ccd6:	4b0c      	ldr	r3, [pc, #48]	; (800cd08 <xTimerGenericCommand+0x98>)
 800ccd8:	6818      	ldr	r0, [r3, #0]
 800ccda:	f107 0110 	add.w	r1, r7, #16
 800ccde:	2300      	movs	r3, #0
 800cce0:	2200      	movs	r2, #0
 800cce2:	f7fe f999 	bl	800b018 <xQueueGenericSend>
 800cce6:	6278      	str	r0, [r7, #36]	; 0x24
 800cce8:	e008      	b.n	800ccfc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ccea:	4b07      	ldr	r3, [pc, #28]	; (800cd08 <xTimerGenericCommand+0x98>)
 800ccec:	6818      	ldr	r0, [r3, #0]
 800ccee:	f107 0110 	add.w	r1, r7, #16
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	683a      	ldr	r2, [r7, #0]
 800ccf6:	f7fe fa8d 	bl	800b214 <xQueueGenericSendFromISR>
 800ccfa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ccfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3728      	adds	r7, #40	; 0x28
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	20005d40 	.word	0x20005d40

0800cd0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b088      	sub	sp, #32
 800cd10:	af02      	add	r7, sp, #8
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd16:	4b22      	ldr	r3, [pc, #136]	; (800cda0 <prvProcessExpiredTimer+0x94>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	68db      	ldr	r3, [r3, #12]
 800cd1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	3304      	adds	r3, #4
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7fe f80f 	bl	800ad48 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd30:	f003 0304 	and.w	r3, r3, #4
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d022      	beq.n	800cd7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	699a      	ldr	r2, [r3, #24]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	18d1      	adds	r1, r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	683a      	ldr	r2, [r7, #0]
 800cd44:	6978      	ldr	r0, [r7, #20]
 800cd46:	f000 f8d1 	bl	800ceec <prvInsertTimerInActiveList>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d01f      	beq.n	800cd90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cd50:	2300      	movs	r3, #0
 800cd52:	9300      	str	r3, [sp, #0]
 800cd54:	2300      	movs	r3, #0
 800cd56:	687a      	ldr	r2, [r7, #4]
 800cd58:	2100      	movs	r1, #0
 800cd5a:	6978      	ldr	r0, [r7, #20]
 800cd5c:	f7ff ff88 	bl	800cc70 <xTimerGenericCommand>
 800cd60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d113      	bne.n	800cd90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6c:	f383 8811 	msr	BASEPRI, r3
 800cd70:	f3bf 8f6f 	isb	sy
 800cd74:	f3bf 8f4f 	dsb	sy
 800cd78:	60fb      	str	r3, [r7, #12]
}
 800cd7a:	bf00      	nop
 800cd7c:	e7fe      	b.n	800cd7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd84:	f023 0301 	bic.w	r3, r3, #1
 800cd88:	b2da      	uxtb	r2, r3
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	6a1b      	ldr	r3, [r3, #32]
 800cd94:	6978      	ldr	r0, [r7, #20]
 800cd96:	4798      	blx	r3
}
 800cd98:	bf00      	nop
 800cd9a:	3718      	adds	r7, #24
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	20005d38 	.word	0x20005d38

0800cda4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cdac:	f107 0308 	add.w	r3, r7, #8
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f000 f857 	bl	800ce64 <prvGetNextExpireTime>
 800cdb6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	4619      	mov	r1, r3
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f000 f803 	bl	800cdc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cdc2:	f000 f8d5 	bl	800cf70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cdc6:	e7f1      	b.n	800cdac <prvTimerTask+0x8>

0800cdc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cdd2:	f7ff f915 	bl	800c000 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cdd6:	f107 0308 	add.w	r3, r7, #8
 800cdda:	4618      	mov	r0, r3
 800cddc:	f000 f866 	bl	800ceac <prvSampleTimeNow>
 800cde0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d130      	bne.n	800ce4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d10a      	bne.n	800ce04 <prvProcessTimerOrBlockTask+0x3c>
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d806      	bhi.n	800ce04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cdf6:	f7ff f911 	bl	800c01c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cdfa:	68f9      	ldr	r1, [r7, #12]
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f7ff ff85 	bl	800cd0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ce02:	e024      	b.n	800ce4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d008      	beq.n	800ce1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ce0a:	4b13      	ldr	r3, [pc, #76]	; (800ce58 <prvProcessTimerOrBlockTask+0x90>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d101      	bne.n	800ce18 <prvProcessTimerOrBlockTask+0x50>
 800ce14:	2301      	movs	r3, #1
 800ce16:	e000      	b.n	800ce1a <prvProcessTimerOrBlockTask+0x52>
 800ce18:	2300      	movs	r3, #0
 800ce1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ce1c:	4b0f      	ldr	r3, [pc, #60]	; (800ce5c <prvProcessTimerOrBlockTask+0x94>)
 800ce1e:	6818      	ldr	r0, [r3, #0]
 800ce20:	687a      	ldr	r2, [r7, #4]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	1ad3      	subs	r3, r2, r3
 800ce26:	683a      	ldr	r2, [r7, #0]
 800ce28:	4619      	mov	r1, r3
 800ce2a:	f7fe fe59 	bl	800bae0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ce2e:	f7ff f8f5 	bl	800c01c <xTaskResumeAll>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d10a      	bne.n	800ce4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ce38:	4b09      	ldr	r3, [pc, #36]	; (800ce60 <prvProcessTimerOrBlockTask+0x98>)
 800ce3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce3e:	601a      	str	r2, [r3, #0]
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	f3bf 8f6f 	isb	sy
}
 800ce48:	e001      	b.n	800ce4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ce4a:	f7ff f8e7 	bl	800c01c <xTaskResumeAll>
}
 800ce4e:	bf00      	nop
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	bf00      	nop
 800ce58:	20005d3c 	.word	0x20005d3c
 800ce5c:	20005d40 	.word	0x20005d40
 800ce60:	e000ed04 	.word	0xe000ed04

0800ce64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ce64:	b480      	push	{r7}
 800ce66:	b085      	sub	sp, #20
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ce6c:	4b0e      	ldr	r3, [pc, #56]	; (800cea8 <prvGetNextExpireTime+0x44>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d101      	bne.n	800ce7a <prvGetNextExpireTime+0x16>
 800ce76:	2201      	movs	r2, #1
 800ce78:	e000      	b.n	800ce7c <prvGetNextExpireTime+0x18>
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d105      	bne.n	800ce94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce88:	4b07      	ldr	r3, [pc, #28]	; (800cea8 <prvGetNextExpireTime+0x44>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	60fb      	str	r3, [r7, #12]
 800ce92:	e001      	b.n	800ce98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ce94:	2300      	movs	r3, #0
 800ce96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ce98:	68fb      	ldr	r3, [r7, #12]
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3714      	adds	r7, #20
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop
 800cea8:	20005d38 	.word	0x20005d38

0800ceac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ceb4:	f7ff f950 	bl	800c158 <xTaskGetTickCount>
 800ceb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ceba:	4b0b      	ldr	r3, [pc, #44]	; (800cee8 <prvSampleTimeNow+0x3c>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	68fa      	ldr	r2, [r7, #12]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d205      	bcs.n	800ced0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cec4:	f000 f936 	bl	800d134 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2201      	movs	r2, #1
 800cecc:	601a      	str	r2, [r3, #0]
 800cece:	e002      	b.n	800ced6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ced6:	4a04      	ldr	r2, [pc, #16]	; (800cee8 <prvSampleTimeNow+0x3c>)
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cedc:	68fb      	ldr	r3, [r7, #12]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	20005d48 	.word	0x20005d48

0800ceec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b086      	sub	sp, #24
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
 800cef8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cefa:	2300      	movs	r3, #0
 800cefc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	68fa      	ldr	r2, [r7, #12]
 800cf08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cf0a:	68ba      	ldr	r2, [r7, #8]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d812      	bhi.n	800cf38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	1ad2      	subs	r2, r2, r3
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	699b      	ldr	r3, [r3, #24]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d302      	bcc.n	800cf26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cf20:	2301      	movs	r3, #1
 800cf22:	617b      	str	r3, [r7, #20]
 800cf24:	e01b      	b.n	800cf5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cf26:	4b10      	ldr	r3, [pc, #64]	; (800cf68 <prvInsertTimerInActiveList+0x7c>)
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	3304      	adds	r3, #4
 800cf2e:	4619      	mov	r1, r3
 800cf30:	4610      	mov	r0, r2
 800cf32:	f7fd fed0 	bl	800acd6 <vListInsert>
 800cf36:	e012      	b.n	800cf5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d206      	bcs.n	800cf4e <prvInsertTimerInActiveList+0x62>
 800cf40:	68ba      	ldr	r2, [r7, #8]
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d302      	bcc.n	800cf4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	617b      	str	r3, [r7, #20]
 800cf4c:	e007      	b.n	800cf5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf4e:	4b07      	ldr	r3, [pc, #28]	; (800cf6c <prvInsertTimerInActiveList+0x80>)
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	3304      	adds	r3, #4
 800cf56:	4619      	mov	r1, r3
 800cf58:	4610      	mov	r0, r2
 800cf5a:	f7fd febc 	bl	800acd6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cf5e:	697b      	ldr	r3, [r7, #20]
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3718      	adds	r7, #24
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	20005d3c 	.word	0x20005d3c
 800cf6c:	20005d38 	.word	0x20005d38

0800cf70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b08e      	sub	sp, #56	; 0x38
 800cf74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cf76:	e0ca      	b.n	800d10e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	da18      	bge.n	800cfb0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cf7e:	1d3b      	adds	r3, r7, #4
 800cf80:	3304      	adds	r3, #4
 800cf82:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d10a      	bne.n	800cfa0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8e:	f383 8811 	msr	BASEPRI, r3
 800cf92:	f3bf 8f6f 	isb	sy
 800cf96:	f3bf 8f4f 	dsb	sy
 800cf9a:	61fb      	str	r3, [r7, #28]
}
 800cf9c:	bf00      	nop
 800cf9e:	e7fe      	b.n	800cf9e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfa6:	6850      	ldr	r0, [r2, #4]
 800cfa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfaa:	6892      	ldr	r2, [r2, #8]
 800cfac:	4611      	mov	r1, r2
 800cfae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f2c0 80aa 	blt.w	800d10c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cfbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfbe:	695b      	ldr	r3, [r3, #20]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d004      	beq.n	800cfce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc6:	3304      	adds	r3, #4
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f7fd febd 	bl	800ad48 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cfce:	463b      	mov	r3, r7
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7ff ff6b 	bl	800ceac <prvSampleTimeNow>
 800cfd6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2b09      	cmp	r3, #9
 800cfdc:	f200 8097 	bhi.w	800d10e <prvProcessReceivedCommands+0x19e>
 800cfe0:	a201      	add	r2, pc, #4	; (adr r2, 800cfe8 <prvProcessReceivedCommands+0x78>)
 800cfe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe6:	bf00      	nop
 800cfe8:	0800d011 	.word	0x0800d011
 800cfec:	0800d011 	.word	0x0800d011
 800cff0:	0800d011 	.word	0x0800d011
 800cff4:	0800d085 	.word	0x0800d085
 800cff8:	0800d099 	.word	0x0800d099
 800cffc:	0800d0e3 	.word	0x0800d0e3
 800d000:	0800d011 	.word	0x0800d011
 800d004:	0800d011 	.word	0x0800d011
 800d008:	0800d085 	.word	0x0800d085
 800d00c:	0800d099 	.word	0x0800d099
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d016:	f043 0301 	orr.w	r3, r3, #1
 800d01a:	b2da      	uxtb	r2, r3
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d022:	68ba      	ldr	r2, [r7, #8]
 800d024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	18d1      	adds	r1, r2, r3
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d02e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d030:	f7ff ff5c 	bl	800ceec <prvInsertTimerInActiveList>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d069      	beq.n	800d10e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03c:	6a1b      	ldr	r3, [r3, #32]
 800d03e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d040:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d044:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d048:	f003 0304 	and.w	r3, r3, #4
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d05e      	beq.n	800d10e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d050:	68ba      	ldr	r2, [r7, #8]
 800d052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d054:	699b      	ldr	r3, [r3, #24]
 800d056:	441a      	add	r2, r3
 800d058:	2300      	movs	r3, #0
 800d05a:	9300      	str	r3, [sp, #0]
 800d05c:	2300      	movs	r3, #0
 800d05e:	2100      	movs	r1, #0
 800d060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d062:	f7ff fe05 	bl	800cc70 <xTimerGenericCommand>
 800d066:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d068:	6a3b      	ldr	r3, [r7, #32]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d14f      	bne.n	800d10e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d072:	f383 8811 	msr	BASEPRI, r3
 800d076:	f3bf 8f6f 	isb	sy
 800d07a:	f3bf 8f4f 	dsb	sy
 800d07e:	61bb      	str	r3, [r7, #24]
}
 800d080:	bf00      	nop
 800d082:	e7fe      	b.n	800d082 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d086:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d08a:	f023 0301 	bic.w	r3, r3, #1
 800d08e:	b2da      	uxtb	r2, r3
 800d090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d092:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d096:	e03a      	b.n	800d10e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d09e:	f043 0301 	orr.w	r3, r3, #1
 800d0a2:	b2da      	uxtb	r2, r3
 800d0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d0aa:	68ba      	ldr	r2, [r7, #8]
 800d0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b2:	699b      	ldr	r3, [r3, #24]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10a      	bne.n	800d0ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0bc:	f383 8811 	msr	BASEPRI, r3
 800d0c0:	f3bf 8f6f 	isb	sy
 800d0c4:	f3bf 8f4f 	dsb	sy
 800d0c8:	617b      	str	r3, [r7, #20]
}
 800d0ca:	bf00      	nop
 800d0cc:	e7fe      	b.n	800d0cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d0:	699a      	ldr	r2, [r3, #24]
 800d0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d4:	18d1      	adds	r1, r2, r3
 800d0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0dc:	f7ff ff06 	bl	800ceec <prvInsertTimerInActiveList>
					break;
 800d0e0:	e015      	b.n	800d10e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0e8:	f003 0302 	and.w	r3, r3, #2
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d103      	bne.n	800d0f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d0f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0f2:	f000 fbdd 	bl	800d8b0 <vPortFree>
 800d0f6:	e00a      	b.n	800d10e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0fe:	f023 0301 	bic.w	r3, r3, #1
 800d102:	b2da      	uxtb	r2, r3
 800d104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d10a:	e000      	b.n	800d10e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d10c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d10e:	4b08      	ldr	r3, [pc, #32]	; (800d130 <prvProcessReceivedCommands+0x1c0>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	1d39      	adds	r1, r7, #4
 800d114:	2200      	movs	r2, #0
 800d116:	4618      	mov	r0, r3
 800d118:	f7fe f9a4 	bl	800b464 <xQueueReceive>
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	f47f af2a 	bne.w	800cf78 <prvProcessReceivedCommands+0x8>
	}
}
 800d124:	bf00      	nop
 800d126:	bf00      	nop
 800d128:	3730      	adds	r7, #48	; 0x30
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	20005d40 	.word	0x20005d40

0800d134 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b088      	sub	sp, #32
 800d138:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d13a:	e048      	b.n	800d1ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d13c:	4b2d      	ldr	r3, [pc, #180]	; (800d1f4 <prvSwitchTimerLists+0xc0>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	68db      	ldr	r3, [r3, #12]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d146:	4b2b      	ldr	r3, [pc, #172]	; (800d1f4 <prvSwitchTimerLists+0xc0>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	3304      	adds	r3, #4
 800d154:	4618      	mov	r0, r3
 800d156:	f7fd fdf7 	bl	800ad48 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	6a1b      	ldr	r3, [r3, #32]
 800d15e:	68f8      	ldr	r0, [r7, #12]
 800d160:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d168:	f003 0304 	and.w	r3, r3, #4
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d02e      	beq.n	800d1ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	699b      	ldr	r3, [r3, #24]
 800d174:	693a      	ldr	r2, [r7, #16]
 800d176:	4413      	add	r3, r2
 800d178:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d17a:	68ba      	ldr	r2, [r7, #8]
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d90e      	bls.n	800d1a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	68ba      	ldr	r2, [r7, #8]
 800d186:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d18e:	4b19      	ldr	r3, [pc, #100]	; (800d1f4 <prvSwitchTimerLists+0xc0>)
 800d190:	681a      	ldr	r2, [r3, #0]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	3304      	adds	r3, #4
 800d196:	4619      	mov	r1, r3
 800d198:	4610      	mov	r0, r2
 800d19a:	f7fd fd9c 	bl	800acd6 <vListInsert>
 800d19e:	e016      	b.n	800d1ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	693a      	ldr	r2, [r7, #16]
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	f7ff fd60 	bl	800cc70 <xTimerGenericCommand>
 800d1b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d10a      	bne.n	800d1ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	603b      	str	r3, [r7, #0]
}
 800d1ca:	bf00      	nop
 800d1cc:	e7fe      	b.n	800d1cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d1ce:	4b09      	ldr	r3, [pc, #36]	; (800d1f4 <prvSwitchTimerLists+0xc0>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1b1      	bne.n	800d13c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d1d8:	4b06      	ldr	r3, [pc, #24]	; (800d1f4 <prvSwitchTimerLists+0xc0>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d1de:	4b06      	ldr	r3, [pc, #24]	; (800d1f8 <prvSwitchTimerLists+0xc4>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a04      	ldr	r2, [pc, #16]	; (800d1f4 <prvSwitchTimerLists+0xc0>)
 800d1e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d1e6:	4a04      	ldr	r2, [pc, #16]	; (800d1f8 <prvSwitchTimerLists+0xc4>)
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	6013      	str	r3, [r2, #0]
}
 800d1ec:	bf00      	nop
 800d1ee:	3718      	adds	r7, #24
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	20005d38 	.word	0x20005d38
 800d1f8:	20005d3c 	.word	0x20005d3c

0800d1fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d202:	f000 f967 	bl	800d4d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d206:	4b15      	ldr	r3, [pc, #84]	; (800d25c <prvCheckForValidListAndQueue+0x60>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d120      	bne.n	800d250 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d20e:	4814      	ldr	r0, [pc, #80]	; (800d260 <prvCheckForValidListAndQueue+0x64>)
 800d210:	f7fd fd10 	bl	800ac34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d214:	4813      	ldr	r0, [pc, #76]	; (800d264 <prvCheckForValidListAndQueue+0x68>)
 800d216:	f7fd fd0d 	bl	800ac34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d21a:	4b13      	ldr	r3, [pc, #76]	; (800d268 <prvCheckForValidListAndQueue+0x6c>)
 800d21c:	4a10      	ldr	r2, [pc, #64]	; (800d260 <prvCheckForValidListAndQueue+0x64>)
 800d21e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d220:	4b12      	ldr	r3, [pc, #72]	; (800d26c <prvCheckForValidListAndQueue+0x70>)
 800d222:	4a10      	ldr	r2, [pc, #64]	; (800d264 <prvCheckForValidListAndQueue+0x68>)
 800d224:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d226:	2300      	movs	r3, #0
 800d228:	9300      	str	r3, [sp, #0]
 800d22a:	4b11      	ldr	r3, [pc, #68]	; (800d270 <prvCheckForValidListAndQueue+0x74>)
 800d22c:	4a11      	ldr	r2, [pc, #68]	; (800d274 <prvCheckForValidListAndQueue+0x78>)
 800d22e:	2110      	movs	r1, #16
 800d230:	200a      	movs	r0, #10
 800d232:	f7fd fe1b 	bl	800ae6c <xQueueGenericCreateStatic>
 800d236:	4603      	mov	r3, r0
 800d238:	4a08      	ldr	r2, [pc, #32]	; (800d25c <prvCheckForValidListAndQueue+0x60>)
 800d23a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d23c:	4b07      	ldr	r3, [pc, #28]	; (800d25c <prvCheckForValidListAndQueue+0x60>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d005      	beq.n	800d250 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d244:	4b05      	ldr	r3, [pc, #20]	; (800d25c <prvCheckForValidListAndQueue+0x60>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	490b      	ldr	r1, [pc, #44]	; (800d278 <prvCheckForValidListAndQueue+0x7c>)
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fe fc1e 	bl	800ba8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d250:	f000 f970 	bl	800d534 <vPortExitCritical>
}
 800d254:	bf00      	nop
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	20005d40 	.word	0x20005d40
 800d260:	20005d10 	.word	0x20005d10
 800d264:	20005d24 	.word	0x20005d24
 800d268:	20005d38 	.word	0x20005d38
 800d26c:	20005d3c 	.word	0x20005d3c
 800d270:	20005dec 	.word	0x20005dec
 800d274:	20005d4c 	.word	0x20005d4c
 800d278:	0801ddf0 	.word	0x0801ddf0

0800d27c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d27c:	b480      	push	{r7}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	60b9      	str	r1, [r7, #8]
 800d286:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	3b04      	subs	r3, #4
 800d28c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d294:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	3b04      	subs	r3, #4
 800d29a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	f023 0201 	bic.w	r2, r3, #1
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	3b04      	subs	r3, #4
 800d2aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d2ac:	4a0c      	ldr	r2, [pc, #48]	; (800d2e0 <pxPortInitialiseStack+0x64>)
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	3b14      	subs	r3, #20
 800d2b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	3b04      	subs	r3, #4
 800d2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f06f 0202 	mvn.w	r2, #2
 800d2ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	3b20      	subs	r3, #32
 800d2d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3714      	adds	r7, #20
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	4770      	bx	lr
 800d2e0:	0800d2e5 	.word	0x0800d2e5

0800d2e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b085      	sub	sp, #20
 800d2e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d2ee:	4b12      	ldr	r3, [pc, #72]	; (800d338 <prvTaskExitError+0x54>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d2f6:	d00a      	beq.n	800d30e <prvTaskExitError+0x2a>
	__asm volatile
 800d2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	60fb      	str	r3, [r7, #12]
}
 800d30a:	bf00      	nop
 800d30c:	e7fe      	b.n	800d30c <prvTaskExitError+0x28>
	__asm volatile
 800d30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d312:	f383 8811 	msr	BASEPRI, r3
 800d316:	f3bf 8f6f 	isb	sy
 800d31a:	f3bf 8f4f 	dsb	sy
 800d31e:	60bb      	str	r3, [r7, #8]
}
 800d320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d322:	bf00      	nop
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d0fc      	beq.n	800d324 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d32a:	bf00      	nop
 800d32c:	bf00      	nop
 800d32e:	3714      	adds	r7, #20
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr
 800d338:	20000024 	.word	0x20000024
 800d33c:	00000000 	.word	0x00000000

0800d340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d340:	4b07      	ldr	r3, [pc, #28]	; (800d360 <pxCurrentTCBConst2>)
 800d342:	6819      	ldr	r1, [r3, #0]
 800d344:	6808      	ldr	r0, [r1, #0]
 800d346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d34a:	f380 8809 	msr	PSP, r0
 800d34e:	f3bf 8f6f 	isb	sy
 800d352:	f04f 0000 	mov.w	r0, #0
 800d356:	f380 8811 	msr	BASEPRI, r0
 800d35a:	4770      	bx	lr
 800d35c:	f3af 8000 	nop.w

0800d360 <pxCurrentTCBConst2>:
 800d360:	20005810 	.word	0x20005810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d364:	bf00      	nop
 800d366:	bf00      	nop

0800d368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d368:	4808      	ldr	r0, [pc, #32]	; (800d38c <prvPortStartFirstTask+0x24>)
 800d36a:	6800      	ldr	r0, [r0, #0]
 800d36c:	6800      	ldr	r0, [r0, #0]
 800d36e:	f380 8808 	msr	MSP, r0
 800d372:	f04f 0000 	mov.w	r0, #0
 800d376:	f380 8814 	msr	CONTROL, r0
 800d37a:	b662      	cpsie	i
 800d37c:	b661      	cpsie	f
 800d37e:	f3bf 8f4f 	dsb	sy
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	df00      	svc	0
 800d388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d38a:	bf00      	nop
 800d38c:	e000ed08 	.word	0xe000ed08

0800d390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b086      	sub	sp, #24
 800d394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d396:	4b46      	ldr	r3, [pc, #280]	; (800d4b0 <xPortStartScheduler+0x120>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4a46      	ldr	r2, [pc, #280]	; (800d4b4 <xPortStartScheduler+0x124>)
 800d39c:	4293      	cmp	r3, r2
 800d39e:	d10a      	bne.n	800d3b6 <xPortStartScheduler+0x26>
	__asm volatile
 800d3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a4:	f383 8811 	msr	BASEPRI, r3
 800d3a8:	f3bf 8f6f 	isb	sy
 800d3ac:	f3bf 8f4f 	dsb	sy
 800d3b0:	613b      	str	r3, [r7, #16]
}
 800d3b2:	bf00      	nop
 800d3b4:	e7fe      	b.n	800d3b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d3b6:	4b3e      	ldr	r3, [pc, #248]	; (800d4b0 <xPortStartScheduler+0x120>)
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4a3f      	ldr	r2, [pc, #252]	; (800d4b8 <xPortStartScheduler+0x128>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d10a      	bne.n	800d3d6 <xPortStartScheduler+0x46>
	__asm volatile
 800d3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c4:	f383 8811 	msr	BASEPRI, r3
 800d3c8:	f3bf 8f6f 	isb	sy
 800d3cc:	f3bf 8f4f 	dsb	sy
 800d3d0:	60fb      	str	r3, [r7, #12]
}
 800d3d2:	bf00      	nop
 800d3d4:	e7fe      	b.n	800d3d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d3d6:	4b39      	ldr	r3, [pc, #228]	; (800d4bc <xPortStartScheduler+0x12c>)
 800d3d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	b2db      	uxtb	r3, r3
 800d3e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	22ff      	movs	r2, #255	; 0xff
 800d3e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d3f0:	78fb      	ldrb	r3, [r7, #3]
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	4b31      	ldr	r3, [pc, #196]	; (800d4c0 <xPortStartScheduler+0x130>)
 800d3fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d3fe:	4b31      	ldr	r3, [pc, #196]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d400:	2207      	movs	r2, #7
 800d402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d404:	e009      	b.n	800d41a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d406:	4b2f      	ldr	r3, [pc, #188]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	3b01      	subs	r3, #1
 800d40c:	4a2d      	ldr	r2, [pc, #180]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d40e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d410:	78fb      	ldrb	r3, [r7, #3]
 800d412:	b2db      	uxtb	r3, r3
 800d414:	005b      	lsls	r3, r3, #1
 800d416:	b2db      	uxtb	r3, r3
 800d418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d41a:	78fb      	ldrb	r3, [r7, #3]
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d422:	2b80      	cmp	r3, #128	; 0x80
 800d424:	d0ef      	beq.n	800d406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d426:	4b27      	ldr	r3, [pc, #156]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f1c3 0307 	rsb	r3, r3, #7
 800d42e:	2b04      	cmp	r3, #4
 800d430:	d00a      	beq.n	800d448 <xPortStartScheduler+0xb8>
	__asm volatile
 800d432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d436:	f383 8811 	msr	BASEPRI, r3
 800d43a:	f3bf 8f6f 	isb	sy
 800d43e:	f3bf 8f4f 	dsb	sy
 800d442:	60bb      	str	r3, [r7, #8]
}
 800d444:	bf00      	nop
 800d446:	e7fe      	b.n	800d446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d448:	4b1e      	ldr	r3, [pc, #120]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	021b      	lsls	r3, r3, #8
 800d44e:	4a1d      	ldr	r2, [pc, #116]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d452:	4b1c      	ldr	r3, [pc, #112]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d45a:	4a1a      	ldr	r2, [pc, #104]	; (800d4c4 <xPortStartScheduler+0x134>)
 800d45c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	b2da      	uxtb	r2, r3
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d466:	4b18      	ldr	r3, [pc, #96]	; (800d4c8 <xPortStartScheduler+0x138>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a17      	ldr	r2, [pc, #92]	; (800d4c8 <xPortStartScheduler+0x138>)
 800d46c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d472:	4b15      	ldr	r3, [pc, #84]	; (800d4c8 <xPortStartScheduler+0x138>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	4a14      	ldr	r2, [pc, #80]	; (800d4c8 <xPortStartScheduler+0x138>)
 800d478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d47c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d47e:	f000 f8dd 	bl	800d63c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d482:	4b12      	ldr	r3, [pc, #72]	; (800d4cc <xPortStartScheduler+0x13c>)
 800d484:	2200      	movs	r2, #0
 800d486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d488:	f000 f8fc 	bl	800d684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d48c:	4b10      	ldr	r3, [pc, #64]	; (800d4d0 <xPortStartScheduler+0x140>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4a0f      	ldr	r2, [pc, #60]	; (800d4d0 <xPortStartScheduler+0x140>)
 800d492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d498:	f7ff ff66 	bl	800d368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d49c:	f7fe ff26 	bl	800c2ec <vTaskSwitchContext>
	prvTaskExitError();
 800d4a0:	f7ff ff20 	bl	800d2e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d4a4:	2300      	movs	r3, #0
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3718      	adds	r7, #24
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	e000ed00 	.word	0xe000ed00
 800d4b4:	410fc271 	.word	0x410fc271
 800d4b8:	410fc270 	.word	0x410fc270
 800d4bc:	e000e400 	.word	0xe000e400
 800d4c0:	20005e3c 	.word	0x20005e3c
 800d4c4:	20005e40 	.word	0x20005e40
 800d4c8:	e000ed20 	.word	0xe000ed20
 800d4cc:	20000024 	.word	0x20000024
 800d4d0:	e000ef34 	.word	0xe000ef34

0800d4d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
	__asm volatile
 800d4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4de:	f383 8811 	msr	BASEPRI, r3
 800d4e2:	f3bf 8f6f 	isb	sy
 800d4e6:	f3bf 8f4f 	dsb	sy
 800d4ea:	607b      	str	r3, [r7, #4]
}
 800d4ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d4ee:	4b0f      	ldr	r3, [pc, #60]	; (800d52c <vPortEnterCritical+0x58>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	4a0d      	ldr	r2, [pc, #52]	; (800d52c <vPortEnterCritical+0x58>)
 800d4f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d4f8:	4b0c      	ldr	r3, [pc, #48]	; (800d52c <vPortEnterCritical+0x58>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d10f      	bne.n	800d520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d500:	4b0b      	ldr	r3, [pc, #44]	; (800d530 <vPortEnterCritical+0x5c>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	b2db      	uxtb	r3, r3
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00a      	beq.n	800d520 <vPortEnterCritical+0x4c>
	__asm volatile
 800d50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50e:	f383 8811 	msr	BASEPRI, r3
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	f3bf 8f4f 	dsb	sy
 800d51a:	603b      	str	r3, [r7, #0]
}
 800d51c:	bf00      	nop
 800d51e:	e7fe      	b.n	800d51e <vPortEnterCritical+0x4a>
	}
}
 800d520:	bf00      	nop
 800d522:	370c      	adds	r7, #12
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr
 800d52c:	20000024 	.word	0x20000024
 800d530:	e000ed04 	.word	0xe000ed04

0800d534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d534:	b480      	push	{r7}
 800d536:	b083      	sub	sp, #12
 800d538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d53a:	4b12      	ldr	r3, [pc, #72]	; (800d584 <vPortExitCritical+0x50>)
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d10a      	bne.n	800d558 <vPortExitCritical+0x24>
	__asm volatile
 800d542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d546:	f383 8811 	msr	BASEPRI, r3
 800d54a:	f3bf 8f6f 	isb	sy
 800d54e:	f3bf 8f4f 	dsb	sy
 800d552:	607b      	str	r3, [r7, #4]
}
 800d554:	bf00      	nop
 800d556:	e7fe      	b.n	800d556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d558:	4b0a      	ldr	r3, [pc, #40]	; (800d584 <vPortExitCritical+0x50>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	3b01      	subs	r3, #1
 800d55e:	4a09      	ldr	r2, [pc, #36]	; (800d584 <vPortExitCritical+0x50>)
 800d560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d562:	4b08      	ldr	r3, [pc, #32]	; (800d584 <vPortExitCritical+0x50>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d105      	bne.n	800d576 <vPortExitCritical+0x42>
 800d56a:	2300      	movs	r3, #0
 800d56c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	f383 8811 	msr	BASEPRI, r3
}
 800d574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d576:	bf00      	nop
 800d578:	370c      	adds	r7, #12
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	20000024 	.word	0x20000024
	...

0800d590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d590:	f3ef 8009 	mrs	r0, PSP
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	4b15      	ldr	r3, [pc, #84]	; (800d5f0 <pxCurrentTCBConst>)
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	f01e 0f10 	tst.w	lr, #16
 800d5a0:	bf08      	it	eq
 800d5a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d5a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5aa:	6010      	str	r0, [r2, #0]
 800d5ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d5b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d5b4:	f380 8811 	msr	BASEPRI, r0
 800d5b8:	f3bf 8f4f 	dsb	sy
 800d5bc:	f3bf 8f6f 	isb	sy
 800d5c0:	f7fe fe94 	bl	800c2ec <vTaskSwitchContext>
 800d5c4:	f04f 0000 	mov.w	r0, #0
 800d5c8:	f380 8811 	msr	BASEPRI, r0
 800d5cc:	bc09      	pop	{r0, r3}
 800d5ce:	6819      	ldr	r1, [r3, #0]
 800d5d0:	6808      	ldr	r0, [r1, #0]
 800d5d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d6:	f01e 0f10 	tst.w	lr, #16
 800d5da:	bf08      	it	eq
 800d5dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d5e0:	f380 8809 	msr	PSP, r0
 800d5e4:	f3bf 8f6f 	isb	sy
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	f3af 8000 	nop.w

0800d5f0 <pxCurrentTCBConst>:
 800d5f0:	20005810 	.word	0x20005810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d5f4:	bf00      	nop
 800d5f6:	bf00      	nop

0800d5f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d602:	f383 8811 	msr	BASEPRI, r3
 800d606:	f3bf 8f6f 	isb	sy
 800d60a:	f3bf 8f4f 	dsb	sy
 800d60e:	607b      	str	r3, [r7, #4]
}
 800d610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d612:	f7fe fdb1 	bl	800c178 <xTaskIncrementTick>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d003      	beq.n	800d624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d61c:	4b06      	ldr	r3, [pc, #24]	; (800d638 <xPortSysTickHandler+0x40>)
 800d61e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d622:	601a      	str	r2, [r3, #0]
 800d624:	2300      	movs	r3, #0
 800d626:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	f383 8811 	msr	BASEPRI, r3
}
 800d62e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d630:	bf00      	nop
 800d632:	3708      	adds	r7, #8
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	e000ed04 	.word	0xe000ed04

0800d63c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d63c:	b480      	push	{r7}
 800d63e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d640:	4b0b      	ldr	r3, [pc, #44]	; (800d670 <vPortSetupTimerInterrupt+0x34>)
 800d642:	2200      	movs	r2, #0
 800d644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d646:	4b0b      	ldr	r3, [pc, #44]	; (800d674 <vPortSetupTimerInterrupt+0x38>)
 800d648:	2200      	movs	r2, #0
 800d64a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d64c:	4b0a      	ldr	r3, [pc, #40]	; (800d678 <vPortSetupTimerInterrupt+0x3c>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4a0a      	ldr	r2, [pc, #40]	; (800d67c <vPortSetupTimerInterrupt+0x40>)
 800d652:	fba2 2303 	umull	r2, r3, r2, r3
 800d656:	099b      	lsrs	r3, r3, #6
 800d658:	4a09      	ldr	r2, [pc, #36]	; (800d680 <vPortSetupTimerInterrupt+0x44>)
 800d65a:	3b01      	subs	r3, #1
 800d65c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d65e:	4b04      	ldr	r3, [pc, #16]	; (800d670 <vPortSetupTimerInterrupt+0x34>)
 800d660:	2207      	movs	r2, #7
 800d662:	601a      	str	r2, [r3, #0]
}
 800d664:	bf00      	nop
 800d666:	46bd      	mov	sp, r7
 800d668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66c:	4770      	bx	lr
 800d66e:	bf00      	nop
 800d670:	e000e010 	.word	0xe000e010
 800d674:	e000e018 	.word	0xe000e018
 800d678:	20000004 	.word	0x20000004
 800d67c:	10624dd3 	.word	0x10624dd3
 800d680:	e000e014 	.word	0xe000e014

0800d684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d694 <vPortEnableVFP+0x10>
 800d688:	6801      	ldr	r1, [r0, #0]
 800d68a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d68e:	6001      	str	r1, [r0, #0]
 800d690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d692:	bf00      	nop
 800d694:	e000ed88 	.word	0xe000ed88

0800d698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d698:	b480      	push	{r7}
 800d69a:	b085      	sub	sp, #20
 800d69c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d69e:	f3ef 8305 	mrs	r3, IPSR
 800d6a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2b0f      	cmp	r3, #15
 800d6a8:	d914      	bls.n	800d6d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d6aa:	4a17      	ldr	r2, [pc, #92]	; (800d708 <vPortValidateInterruptPriority+0x70>)
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d6b4:	4b15      	ldr	r3, [pc, #84]	; (800d70c <vPortValidateInterruptPriority+0x74>)
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	7afa      	ldrb	r2, [r7, #11]
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d20a      	bcs.n	800d6d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	607b      	str	r3, [r7, #4]
}
 800d6d0:	bf00      	nop
 800d6d2:	e7fe      	b.n	800d6d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d6d4:	4b0e      	ldr	r3, [pc, #56]	; (800d710 <vPortValidateInterruptPriority+0x78>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d6dc:	4b0d      	ldr	r3, [pc, #52]	; (800d714 <vPortValidateInterruptPriority+0x7c>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d90a      	bls.n	800d6fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e8:	f383 8811 	msr	BASEPRI, r3
 800d6ec:	f3bf 8f6f 	isb	sy
 800d6f0:	f3bf 8f4f 	dsb	sy
 800d6f4:	603b      	str	r3, [r7, #0]
}
 800d6f6:	bf00      	nop
 800d6f8:	e7fe      	b.n	800d6f8 <vPortValidateInterruptPriority+0x60>
	}
 800d6fa:	bf00      	nop
 800d6fc:	3714      	adds	r7, #20
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr
 800d706:	bf00      	nop
 800d708:	e000e3f0 	.word	0xe000e3f0
 800d70c:	20005e3c 	.word	0x20005e3c
 800d710:	e000ed0c 	.word	0xe000ed0c
 800d714:	20005e40 	.word	0x20005e40

0800d718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b08a      	sub	sp, #40	; 0x28
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d720:	2300      	movs	r3, #0
 800d722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d724:	f7fe fc6c 	bl	800c000 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d728:	4b5b      	ldr	r3, [pc, #364]	; (800d898 <pvPortMalloc+0x180>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d101      	bne.n	800d734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d730:	f000 f920 	bl	800d974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d734:	4b59      	ldr	r3, [pc, #356]	; (800d89c <pvPortMalloc+0x184>)
 800d736:	681a      	ldr	r2, [r3, #0]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	4013      	ands	r3, r2
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	f040 8093 	bne.w	800d868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d01d      	beq.n	800d784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d748:	2208      	movs	r2, #8
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	4413      	add	r3, r2
 800d74e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f003 0307 	and.w	r3, r3, #7
 800d756:	2b00      	cmp	r3, #0
 800d758:	d014      	beq.n	800d784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f023 0307 	bic.w	r3, r3, #7
 800d760:	3308      	adds	r3, #8
 800d762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f003 0307 	and.w	r3, r3, #7
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00a      	beq.n	800d784 <pvPortMalloc+0x6c>
	__asm volatile
 800d76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d772:	f383 8811 	msr	BASEPRI, r3
 800d776:	f3bf 8f6f 	isb	sy
 800d77a:	f3bf 8f4f 	dsb	sy
 800d77e:	617b      	str	r3, [r7, #20]
}
 800d780:	bf00      	nop
 800d782:	e7fe      	b.n	800d782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d06e      	beq.n	800d868 <pvPortMalloc+0x150>
 800d78a:	4b45      	ldr	r3, [pc, #276]	; (800d8a0 <pvPortMalloc+0x188>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	687a      	ldr	r2, [r7, #4]
 800d790:	429a      	cmp	r2, r3
 800d792:	d869      	bhi.n	800d868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d794:	4b43      	ldr	r3, [pc, #268]	; (800d8a4 <pvPortMalloc+0x18c>)
 800d796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d798:	4b42      	ldr	r3, [pc, #264]	; (800d8a4 <pvPortMalloc+0x18c>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d79e:	e004      	b.n	800d7aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ac:	685b      	ldr	r3, [r3, #4]
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	429a      	cmp	r2, r3
 800d7b2:	d903      	bls.n	800d7bc <pvPortMalloc+0xa4>
 800d7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d1f1      	bne.n	800d7a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d7bc:	4b36      	ldr	r3, [pc, #216]	; (800d898 <pvPortMalloc+0x180>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d050      	beq.n	800d868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d7c6:	6a3b      	ldr	r3, [r7, #32]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	2208      	movs	r2, #8
 800d7cc:	4413      	add	r3, r2
 800d7ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d2:	681a      	ldr	r2, [r3, #0]
 800d7d4:	6a3b      	ldr	r3, [r7, #32]
 800d7d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7da:	685a      	ldr	r2, [r3, #4]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	1ad2      	subs	r2, r2, r3
 800d7e0:	2308      	movs	r3, #8
 800d7e2:	005b      	lsls	r3, r3, #1
 800d7e4:	429a      	cmp	r2, r3
 800d7e6:	d91f      	bls.n	800d828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	f003 0307 	and.w	r3, r3, #7
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00a      	beq.n	800d810 <pvPortMalloc+0xf8>
	__asm volatile
 800d7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fe:	f383 8811 	msr	BASEPRI, r3
 800d802:	f3bf 8f6f 	isb	sy
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	613b      	str	r3, [r7, #16]
}
 800d80c:	bf00      	nop
 800d80e:	e7fe      	b.n	800d80e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d812:	685a      	ldr	r2, [r3, #4]
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	1ad2      	subs	r2, r2, r3
 800d818:	69bb      	ldr	r3, [r7, #24]
 800d81a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d822:	69b8      	ldr	r0, [r7, #24]
 800d824:	f000 f908 	bl	800da38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d828:	4b1d      	ldr	r3, [pc, #116]	; (800d8a0 <pvPortMalloc+0x188>)
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	1ad3      	subs	r3, r2, r3
 800d832:	4a1b      	ldr	r2, [pc, #108]	; (800d8a0 <pvPortMalloc+0x188>)
 800d834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d836:	4b1a      	ldr	r3, [pc, #104]	; (800d8a0 <pvPortMalloc+0x188>)
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	4b1b      	ldr	r3, [pc, #108]	; (800d8a8 <pvPortMalloc+0x190>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d203      	bcs.n	800d84a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d842:	4b17      	ldr	r3, [pc, #92]	; (800d8a0 <pvPortMalloc+0x188>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a18      	ldr	r2, [pc, #96]	; (800d8a8 <pvPortMalloc+0x190>)
 800d848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84c:	685a      	ldr	r2, [r3, #4]
 800d84e:	4b13      	ldr	r3, [pc, #76]	; (800d89c <pvPortMalloc+0x184>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	431a      	orrs	r2, r3
 800d854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85a:	2200      	movs	r2, #0
 800d85c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d85e:	4b13      	ldr	r3, [pc, #76]	; (800d8ac <pvPortMalloc+0x194>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	3301      	adds	r3, #1
 800d864:	4a11      	ldr	r2, [pc, #68]	; (800d8ac <pvPortMalloc+0x194>)
 800d866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d868:	f7fe fbd8 	bl	800c01c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	f003 0307 	and.w	r3, r3, #7
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00a      	beq.n	800d88c <pvPortMalloc+0x174>
	__asm volatile
 800d876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87a:	f383 8811 	msr	BASEPRI, r3
 800d87e:	f3bf 8f6f 	isb	sy
 800d882:	f3bf 8f4f 	dsb	sy
 800d886:	60fb      	str	r3, [r7, #12]
}
 800d888:	bf00      	nop
 800d88a:	e7fe      	b.n	800d88a <pvPortMalloc+0x172>
	return pvReturn;
 800d88c:	69fb      	ldr	r3, [r7, #28]
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3728      	adds	r7, #40	; 0x28
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	20009e4c 	.word	0x20009e4c
 800d89c:	20009e60 	.word	0x20009e60
 800d8a0:	20009e50 	.word	0x20009e50
 800d8a4:	20009e44 	.word	0x20009e44
 800d8a8:	20009e54 	.word	0x20009e54
 800d8ac:	20009e58 	.word	0x20009e58

0800d8b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d04d      	beq.n	800d95e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d8c2:	2308      	movs	r3, #8
 800d8c4:	425b      	negs	r3, r3
 800d8c6:	697a      	ldr	r2, [r7, #20]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	685a      	ldr	r2, [r3, #4]
 800d8d4:	4b24      	ldr	r3, [pc, #144]	; (800d968 <vPortFree+0xb8>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4013      	ands	r3, r2
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d10a      	bne.n	800d8f4 <vPortFree+0x44>
	__asm volatile
 800d8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e2:	f383 8811 	msr	BASEPRI, r3
 800d8e6:	f3bf 8f6f 	isb	sy
 800d8ea:	f3bf 8f4f 	dsb	sy
 800d8ee:	60fb      	str	r3, [r7, #12]
}
 800d8f0:	bf00      	nop
 800d8f2:	e7fe      	b.n	800d8f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00a      	beq.n	800d912 <vPortFree+0x62>
	__asm volatile
 800d8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d900:	f383 8811 	msr	BASEPRI, r3
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	60bb      	str	r3, [r7, #8]
}
 800d90e:	bf00      	nop
 800d910:	e7fe      	b.n	800d910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	685a      	ldr	r2, [r3, #4]
 800d916:	4b14      	ldr	r3, [pc, #80]	; (800d968 <vPortFree+0xb8>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4013      	ands	r3, r2
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d01e      	beq.n	800d95e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d11a      	bne.n	800d95e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	685a      	ldr	r2, [r3, #4]
 800d92c:	4b0e      	ldr	r3, [pc, #56]	; (800d968 <vPortFree+0xb8>)
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	43db      	mvns	r3, r3
 800d932:	401a      	ands	r2, r3
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d938:	f7fe fb62 	bl	800c000 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	685a      	ldr	r2, [r3, #4]
 800d940:	4b0a      	ldr	r3, [pc, #40]	; (800d96c <vPortFree+0xbc>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4413      	add	r3, r2
 800d946:	4a09      	ldr	r2, [pc, #36]	; (800d96c <vPortFree+0xbc>)
 800d948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d94a:	6938      	ldr	r0, [r7, #16]
 800d94c:	f000 f874 	bl	800da38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d950:	4b07      	ldr	r3, [pc, #28]	; (800d970 <vPortFree+0xc0>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	3301      	adds	r3, #1
 800d956:	4a06      	ldr	r2, [pc, #24]	; (800d970 <vPortFree+0xc0>)
 800d958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d95a:	f7fe fb5f 	bl	800c01c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d95e:	bf00      	nop
 800d960:	3718      	adds	r7, #24
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	20009e60 	.word	0x20009e60
 800d96c:	20009e50 	.word	0x20009e50
 800d970:	20009e5c 	.word	0x20009e5c

0800d974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d974:	b480      	push	{r7}
 800d976:	b085      	sub	sp, #20
 800d978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d97a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d97e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d980:	4b27      	ldr	r3, [pc, #156]	; (800da20 <prvHeapInit+0xac>)
 800d982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f003 0307 	and.w	r3, r3, #7
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00c      	beq.n	800d9a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	3307      	adds	r3, #7
 800d992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f023 0307 	bic.w	r3, r3, #7
 800d99a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	1ad3      	subs	r3, r2, r3
 800d9a2:	4a1f      	ldr	r2, [pc, #124]	; (800da20 <prvHeapInit+0xac>)
 800d9a4:	4413      	add	r3, r2
 800d9a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d9ac:	4a1d      	ldr	r2, [pc, #116]	; (800da24 <prvHeapInit+0xb0>)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d9b2:	4b1c      	ldr	r3, [pc, #112]	; (800da24 <prvHeapInit+0xb0>)
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	68ba      	ldr	r2, [r7, #8]
 800d9bc:	4413      	add	r3, r2
 800d9be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d9c0:	2208      	movs	r2, #8
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	1a9b      	subs	r3, r3, r2
 800d9c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f023 0307 	bic.w	r3, r3, #7
 800d9ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	4a15      	ldr	r2, [pc, #84]	; (800da28 <prvHeapInit+0xb4>)
 800d9d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d9d6:	4b14      	ldr	r3, [pc, #80]	; (800da28 <prvHeapInit+0xb4>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d9de:	4b12      	ldr	r3, [pc, #72]	; (800da28 <prvHeapInit+0xb4>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	68fa      	ldr	r2, [r7, #12]
 800d9ee:	1ad2      	subs	r2, r2, r3
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d9f4:	4b0c      	ldr	r3, [pc, #48]	; (800da28 <prvHeapInit+0xb4>)
 800d9f6:	681a      	ldr	r2, [r3, #0]
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	4a0a      	ldr	r2, [pc, #40]	; (800da2c <prvHeapInit+0xb8>)
 800da02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	685b      	ldr	r3, [r3, #4]
 800da08:	4a09      	ldr	r2, [pc, #36]	; (800da30 <prvHeapInit+0xbc>)
 800da0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800da0c:	4b09      	ldr	r3, [pc, #36]	; (800da34 <prvHeapInit+0xc0>)
 800da0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800da12:	601a      	str	r2, [r3, #0]
}
 800da14:	bf00      	nop
 800da16:	3714      	adds	r7, #20
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr
 800da20:	20005e44 	.word	0x20005e44
 800da24:	20009e44 	.word	0x20009e44
 800da28:	20009e4c 	.word	0x20009e4c
 800da2c:	20009e54 	.word	0x20009e54
 800da30:	20009e50 	.word	0x20009e50
 800da34:	20009e60 	.word	0x20009e60

0800da38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800da38:	b480      	push	{r7}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800da40:	4b28      	ldr	r3, [pc, #160]	; (800dae4 <prvInsertBlockIntoFreeList+0xac>)
 800da42:	60fb      	str	r3, [r7, #12]
 800da44:	e002      	b.n	800da4c <prvInsertBlockIntoFreeList+0x14>
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	60fb      	str	r3, [r7, #12]
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	429a      	cmp	r2, r3
 800da54:	d8f7      	bhi.n	800da46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	68ba      	ldr	r2, [r7, #8]
 800da60:	4413      	add	r3, r2
 800da62:	687a      	ldr	r2, [r7, #4]
 800da64:	429a      	cmp	r2, r3
 800da66:	d108      	bne.n	800da7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	685a      	ldr	r2, [r3, #4]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	441a      	add	r2, r3
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	68ba      	ldr	r2, [r7, #8]
 800da84:	441a      	add	r2, r3
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d118      	bne.n	800dac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	4b15      	ldr	r3, [pc, #84]	; (800dae8 <prvInsertBlockIntoFreeList+0xb0>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	429a      	cmp	r2, r3
 800da98:	d00d      	beq.n	800dab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	685a      	ldr	r2, [r3, #4]
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	441a      	add	r2, r3
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	681a      	ldr	r2, [r3, #0]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	601a      	str	r2, [r3, #0]
 800dab4:	e008      	b.n	800dac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dab6:	4b0c      	ldr	r3, [pc, #48]	; (800dae8 <prvInsertBlockIntoFreeList+0xb0>)
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	601a      	str	r2, [r3, #0]
 800dabe:	e003      	b.n	800dac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681a      	ldr	r2, [r3, #0]
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dac8:	68fa      	ldr	r2, [r7, #12]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d002      	beq.n	800dad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dad6:	bf00      	nop
 800dad8:	3714      	adds	r7, #20
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr
 800dae2:	bf00      	nop
 800dae4:	20009e44 	.word	0x20009e44
 800dae8:	20009e4c 	.word	0x20009e4c

0800daec <rcl_get_zero_initialized_init_options>:
 800daec:	2000      	movs	r0, #0
 800daee:	4770      	bx	lr

0800daf0 <rcl_init_options_init>:
 800daf0:	b084      	sub	sp, #16
 800daf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daf4:	b091      	sub	sp, #68	; 0x44
 800daf6:	af17      	add	r7, sp, #92	; 0x5c
 800daf8:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800dafc:	2800      	cmp	r0, #0
 800dafe:	d044      	beq.n	800db8a <rcl_init_options_init+0x9a>
 800db00:	6803      	ldr	r3, [r0, #0]
 800db02:	4606      	mov	r6, r0
 800db04:	b133      	cbz	r3, 800db14 <rcl_init_options_init+0x24>
 800db06:	2464      	movs	r4, #100	; 0x64
 800db08:	4620      	mov	r0, r4
 800db0a:	b011      	add	sp, #68	; 0x44
 800db0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800db10:	b004      	add	sp, #16
 800db12:	4770      	bx	lr
 800db14:	4638      	mov	r0, r7
 800db16:	f000 ff01 	bl	800e91c <rcutils_allocator_is_valid>
 800db1a:	2800      	cmp	r0, #0
 800db1c:	d035      	beq.n	800db8a <rcl_init_options_init+0x9a>
 800db1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db20:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800db22:	2050      	movs	r0, #80	; 0x50
 800db24:	4798      	blx	r3
 800db26:	4604      	mov	r4, r0
 800db28:	6030      	str	r0, [r6, #0]
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d02f      	beq.n	800db8e <rcl_init_options_init+0x9e>
 800db2e:	46bc      	mov	ip, r7
 800db30:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800db34:	4625      	mov	r5, r4
 800db36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800db38:	f8dc 3000 	ldr.w	r3, [ip]
 800db3c:	602b      	str	r3, [r5, #0]
 800db3e:	a802      	add	r0, sp, #8
 800db40:	ad02      	add	r5, sp, #8
 800db42:	f001 f8a7 	bl	800ec94 <rmw_get_zero_initialized_init_options>
 800db46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db48:	3418      	adds	r4, #24
 800db4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800db52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800db54:	e895 0003 	ldmia.w	r5, {r0, r1}
 800db58:	6833      	ldr	r3, [r6, #0]
 800db5a:	e884 0003 	stmia.w	r4, {r0, r1}
 800db5e:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800db62:	e88d 0003 	stmia.w	sp, {r0, r1}
 800db66:	f103 0018 	add.w	r0, r3, #24
 800db6a:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800db6e:	f001 f943 	bl	800edf8 <rmw_init_options_init>
 800db72:	4604      	mov	r4, r0
 800db74:	2800      	cmp	r0, #0
 800db76:	d0c7      	beq.n	800db08 <rcl_init_options_init+0x18>
 800db78:	6830      	ldr	r0, [r6, #0]
 800db7a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800db7c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800db7e:	4798      	blx	r3
 800db80:	4620      	mov	r0, r4
 800db82:	f006 f99b 	bl	8013ebc <rcl_convert_rmw_ret_to_rcl_ret>
 800db86:	4604      	mov	r4, r0
 800db88:	e7be      	b.n	800db08 <rcl_init_options_init+0x18>
 800db8a:	240b      	movs	r4, #11
 800db8c:	e7bc      	b.n	800db08 <rcl_init_options_init+0x18>
 800db8e:	240a      	movs	r4, #10
 800db90:	e7ba      	b.n	800db08 <rcl_init_options_init+0x18>
 800db92:	bf00      	nop

0800db94 <rcl_init_options_fini>:
 800db94:	b570      	push	{r4, r5, r6, lr}
 800db96:	b086      	sub	sp, #24
 800db98:	b1c0      	cbz	r0, 800dbcc <rcl_init_options_fini+0x38>
 800db9a:	6804      	ldr	r4, [r0, #0]
 800db9c:	4606      	mov	r6, r0
 800db9e:	b1ac      	cbz	r4, 800dbcc <rcl_init_options_fini+0x38>
 800dba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dba2:	ad01      	add	r5, sp, #4
 800dba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dba6:	6823      	ldr	r3, [r4, #0]
 800dba8:	602b      	str	r3, [r5, #0]
 800dbaa:	a801      	add	r0, sp, #4
 800dbac:	f000 feb6 	bl	800e91c <rcutils_allocator_is_valid>
 800dbb0:	b160      	cbz	r0, 800dbcc <rcl_init_options_fini+0x38>
 800dbb2:	6830      	ldr	r0, [r6, #0]
 800dbb4:	3018      	adds	r0, #24
 800dbb6:	f001 f9b9 	bl	800ef2c <rmw_init_options_fini>
 800dbba:	4604      	mov	r4, r0
 800dbbc:	b950      	cbnz	r0, 800dbd4 <rcl_init_options_fini+0x40>
 800dbbe:	6830      	ldr	r0, [r6, #0]
 800dbc0:	9b02      	ldr	r3, [sp, #8]
 800dbc2:	9905      	ldr	r1, [sp, #20]
 800dbc4:	4798      	blx	r3
 800dbc6:	4620      	mov	r0, r4
 800dbc8:	b006      	add	sp, #24
 800dbca:	bd70      	pop	{r4, r5, r6, pc}
 800dbcc:	240b      	movs	r4, #11
 800dbce:	4620      	mov	r0, r4
 800dbd0:	b006      	add	sp, #24
 800dbd2:	bd70      	pop	{r4, r5, r6, pc}
 800dbd4:	f006 f972 	bl	8013ebc <rcl_convert_rmw_ret_to_rcl_ret>
 800dbd8:	4604      	mov	r4, r0
 800dbda:	e7f8      	b.n	800dbce <rcl_init_options_fini+0x3a>

0800dbdc <rcl_init_options_copy>:
 800dbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbe0:	b096      	sub	sp, #88	; 0x58
 800dbe2:	2800      	cmp	r0, #0
 800dbe4:	d063      	beq.n	800dcae <rcl_init_options_copy+0xd2>
 800dbe6:	6806      	ldr	r6, [r0, #0]
 800dbe8:	4605      	mov	r5, r0
 800dbea:	2e00      	cmp	r6, #0
 800dbec:	d05f      	beq.n	800dcae <rcl_init_options_copy+0xd2>
 800dbee:	460c      	mov	r4, r1
 800dbf0:	2900      	cmp	r1, #0
 800dbf2:	d05c      	beq.n	800dcae <rcl_init_options_copy+0xd2>
 800dbf4:	680b      	ldr	r3, [r1, #0]
 800dbf6:	b123      	cbz	r3, 800dc02 <rcl_init_options_copy+0x26>
 800dbf8:	2664      	movs	r6, #100	; 0x64
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	b016      	add	sp, #88	; 0x58
 800dbfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc02:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dc04:	af11      	add	r7, sp, #68	; 0x44
 800dc06:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800dc08:	f10d 0844 	add.w	r8, sp, #68	; 0x44
 800dc0c:	6833      	ldr	r3, [r6, #0]
 800dc0e:	603b      	str	r3, [r7, #0]
 800dc10:	4640      	mov	r0, r8
 800dc12:	f000 fe83 	bl	800e91c <rcutils_allocator_is_valid>
 800dc16:	2800      	cmp	r0, #0
 800dc18:	d049      	beq.n	800dcae <rcl_init_options_copy+0xd2>
 800dc1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc1c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dc1e:	2050      	movs	r0, #80	; 0x50
 800dc20:	4798      	blx	r3
 800dc22:	4606      	mov	r6, r0
 800dc24:	6020      	str	r0, [r4, #0]
 800dc26:	2800      	cmp	r0, #0
 800dc28:	d077      	beq.n	800dd1a <rcl_init_options_copy+0x13e>
 800dc2a:	46c4      	mov	ip, r8
 800dc2c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dc30:	4637      	mov	r7, r6
 800dc32:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800dc34:	f8dc 3000 	ldr.w	r3, [ip]
 800dc38:	603b      	str	r3, [r7, #0]
 800dc3a:	a802      	add	r0, sp, #8
 800dc3c:	af02      	add	r7, sp, #8
 800dc3e:	f001 f829 	bl	800ec94 <rmw_get_zero_initialized_init_options>
 800dc42:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dc44:	3618      	adds	r6, #24
 800dc46:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dc48:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dc4a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dc4c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dc4e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dc50:	e897 0003 	ldmia.w	r7, {r0, r1}
 800dc54:	ab16      	add	r3, sp, #88	; 0x58
 800dc56:	e886 0003 	stmia.w	r6, {r0, r1}
 800dc5a:	e913 0003 	ldmdb	r3, {r0, r1}
 800dc5e:	6823      	ldr	r3, [r4, #0]
 800dc60:	e88d 0003 	stmia.w	sp, {r0, r1}
 800dc64:	f103 0018 	add.w	r0, r3, #24
 800dc68:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800dc6c:	f001 f8c4 	bl	800edf8 <rmw_init_options_init>
 800dc70:	4606      	mov	r6, r0
 800dc72:	bb08      	cbnz	r0, 800dcb8 <rcl_init_options_copy+0xdc>
 800dc74:	682f      	ldr	r7, [r5, #0]
 800dc76:	f8d4 c000 	ldr.w	ip, [r4]
 800dc7a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dc7c:	4666      	mov	r6, ip
 800dc7e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	6033      	str	r3, [r6, #0]
 800dc84:	f10c 0018 	add.w	r0, ip, #24
 800dc88:	f001 f950 	bl	800ef2c <rmw_init_options_fini>
 800dc8c:	4607      	mov	r7, r0
 800dc8e:	b1f0      	cbz	r0, 800dcce <rcl_init_options_copy+0xf2>
 800dc90:	f000 fe52 	bl	800e938 <rcutils_get_error_string>
 800dc94:	f000 fe66 	bl	800e964 <rcutils_reset_error>
 800dc98:	4620      	mov	r0, r4
 800dc9a:	f7ff ff7b 	bl	800db94 <rcl_init_options_fini>
 800dc9e:	4606      	mov	r6, r0
 800dca0:	2800      	cmp	r0, #0
 800dca2:	d1aa      	bne.n	800dbfa <rcl_init_options_copy+0x1e>
 800dca4:	4638      	mov	r0, r7
 800dca6:	f006 f909 	bl	8013ebc <rcl_convert_rmw_ret_to_rcl_ret>
 800dcaa:	4606      	mov	r6, r0
 800dcac:	e7a5      	b.n	800dbfa <rcl_init_options_copy+0x1e>
 800dcae:	260b      	movs	r6, #11
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	b016      	add	sp, #88	; 0x58
 800dcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dcba:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dcbc:	6820      	ldr	r0, [r4, #0]
 800dcbe:	4798      	blx	r3
 800dcc0:	4630      	mov	r0, r6
 800dcc2:	f006 f8fb 	bl	8013ebc <rcl_convert_rmw_ret_to_rcl_ret>
 800dcc6:	4606      	mov	r6, r0
 800dcc8:	2800      	cmp	r0, #0
 800dcca:	d0d3      	beq.n	800dc74 <rcl_init_options_copy+0x98>
 800dccc:	e795      	b.n	800dbfa <rcl_init_options_copy+0x1e>
 800dcce:	a802      	add	r0, sp, #8
 800dcd0:	ae02      	add	r6, sp, #8
 800dcd2:	6827      	ldr	r7, [r4, #0]
 800dcd4:	f000 ffde 	bl	800ec94 <rmw_get_zero_initialized_init_options>
 800dcd8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dcda:	3718      	adds	r7, #24
 800dcdc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800dcde:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dce0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800dce2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dce4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800dce6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800dcea:	682a      	ldr	r2, [r5, #0]
 800dcec:	6823      	ldr	r3, [r4, #0]
 800dcee:	e887 0003 	stmia.w	r7, {r0, r1}
 800dcf2:	f102 0018 	add.w	r0, r2, #24
 800dcf6:	f103 0118 	add.w	r1, r3, #24
 800dcfa:	f001 f8d5 	bl	800eea8 <rmw_init_options_copy>
 800dcfe:	4606      	mov	r6, r0
 800dd00:	2800      	cmp	r0, #0
 800dd02:	f43f af7a 	beq.w	800dbfa <rcl_init_options_copy+0x1e>
 800dd06:	f000 fe17 	bl	800e938 <rcutils_get_error_string>
 800dd0a:	f000 fe2b 	bl	800e964 <rcutils_reset_error>
 800dd0e:	4620      	mov	r0, r4
 800dd10:	f7ff ff40 	bl	800db94 <rcl_init_options_fini>
 800dd14:	b118      	cbz	r0, 800dd1e <rcl_init_options_copy+0x142>
 800dd16:	4606      	mov	r6, r0
 800dd18:	e76f      	b.n	800dbfa <rcl_init_options_copy+0x1e>
 800dd1a:	260a      	movs	r6, #10
 800dd1c:	e76d      	b.n	800dbfa <rcl_init_options_copy+0x1e>
 800dd1e:	4630      	mov	r0, r6
 800dd20:	f006 f8cc 	bl	8013ebc <rcl_convert_rmw_ret_to_rcl_ret>
 800dd24:	4606      	mov	r6, r0
 800dd26:	e768      	b.n	800dbfa <rcl_init_options_copy+0x1e>

0800dd28 <rcl_init_options_set_domain_id>:
 800dd28:	b120      	cbz	r0, 800dd34 <rcl_init_options_set_domain_id+0xc>
 800dd2a:	6803      	ldr	r3, [r0, #0]
 800dd2c:	b113      	cbz	r3, 800dd34 <rcl_init_options_set_domain_id+0xc>
 800dd2e:	6259      	str	r1, [r3, #36]	; 0x24
 800dd30:	2000      	movs	r0, #0
 800dd32:	4770      	bx	lr
 800dd34:	200b      	movs	r0, #11
 800dd36:	4770      	bx	lr

0800dd38 <rcl_node_get_default_options>:
 800dd38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd3a:	b087      	sub	sp, #28
 800dd3c:	4607      	mov	r7, r0
 800dd3e:	466d      	mov	r5, sp
 800dd40:	4668      	mov	r0, sp
 800dd42:	f000 fddd 	bl	800e900 <rcutils_get_default_allocator>
 800dd46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd48:	4c08      	ldr	r4, [pc, #32]	; (800dd6c <rcl_node_get_default_options+0x34>)
 800dd4a:	f8d5 c000 	ldr.w	ip, [r5]
 800dd4e:	1d26      	adds	r6, r4, #4
 800dd50:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dd52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd54:	463d      	mov	r5, r7
 800dd56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd58:	f8c6 c000 	str.w	ip, [r6]
 800dd5c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800dd60:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800dd64:	4638      	mov	r0, r7
 800dd66:	b007      	add	sp, #28
 800dd68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	20000028 	.word	0x20000028

0800dd70 <rcl_node_options_copy>:
 800dd70:	b1c8      	cbz	r0, 800dda6 <rcl_node_options_copy+0x36>
 800dd72:	b4f0      	push	{r4, r5, r6, r7}
 800dd74:	460f      	mov	r7, r1
 800dd76:	b199      	cbz	r1, 800dda0 <rcl_node_options_copy+0x30>
 800dd78:	4288      	cmp	r0, r1
 800dd7a:	4606      	mov	r6, r0
 800dd7c:	d010      	beq.n	800dda0 <rcl_node_options_copy+0x30>
 800dd7e:	4605      	mov	r5, r0
 800dd80:	460c      	mov	r4, r1
 800dd82:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd86:	f844 3b04 	str.w	r3, [r4], #4
 800dd8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd8e:	7e32      	ldrb	r2, [r6, #24]
 800dd90:	6829      	ldr	r1, [r5, #0]
 800dd92:	7e73      	ldrb	r3, [r6, #25]
 800dd94:	6021      	str	r1, [r4, #0]
 800dd96:	2000      	movs	r0, #0
 800dd98:	763a      	strb	r2, [r7, #24]
 800dd9a:	767b      	strb	r3, [r7, #25]
 800dd9c:	bcf0      	pop	{r4, r5, r6, r7}
 800dd9e:	4770      	bx	lr
 800dda0:	200b      	movs	r0, #11
 800dda2:	bcf0      	pop	{r4, r5, r6, r7}
 800dda4:	4770      	bx	lr
 800dda6:	200b      	movs	r0, #11
 800dda8:	4770      	bx	lr
 800ddaa:	bf00      	nop

0800ddac <rcl_get_zero_initialized_publisher>:
 800ddac:	4b01      	ldr	r3, [pc, #4]	; (800ddb4 <rcl_get_zero_initialized_publisher+0x8>)
 800ddae:	6818      	ldr	r0, [r3, #0]
 800ddb0:	4770      	bx	lr
 800ddb2:	bf00      	nop
 800ddb4:	0801de58 	.word	0x0801de58

0800ddb8 <rcl_publisher_init>:
 800ddb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddbc:	b091      	sub	sp, #68	; 0x44
 800ddbe:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800ddc0:	b3d7      	cbz	r7, 800de38 <rcl_publisher_init+0x80>
 800ddc2:	f107 0950 	add.w	r9, r7, #80	; 0x50
 800ddc6:	4604      	mov	r4, r0
 800ddc8:	4648      	mov	r0, r9
 800ddca:	4688      	mov	r8, r1
 800ddcc:	4616      	mov	r6, r2
 800ddce:	461d      	mov	r5, r3
 800ddd0:	f000 fda4 	bl	800e91c <rcutils_allocator_is_valid>
 800ddd4:	b380      	cbz	r0, 800de38 <rcl_publisher_init+0x80>
 800ddd6:	b37c      	cbz	r4, 800de38 <rcl_publisher_init+0x80>
 800ddd8:	f8d4 a000 	ldr.w	sl, [r4]
 800dddc:	f1ba 0f00 	cmp.w	sl, #0
 800dde0:	d004      	beq.n	800ddec <rcl_publisher_init+0x34>
 800dde2:	2564      	movs	r5, #100	; 0x64
 800dde4:	4628      	mov	r0, r5
 800dde6:	b011      	add	sp, #68	; 0x44
 800dde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddec:	4640      	mov	r0, r8
 800ddee:	f006 fcff 	bl	80147f0 <rcl_node_is_valid>
 800ddf2:	b330      	cbz	r0, 800de42 <rcl_publisher_init+0x8a>
 800ddf4:	b306      	cbz	r6, 800de38 <rcl_publisher_init+0x80>
 800ddf6:	b1fd      	cbz	r5, 800de38 <rcl_publisher_init+0x80>
 800ddf8:	46ce      	mov	lr, r9
 800ddfa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ddfe:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 800de02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de06:	f8de 3000 	ldr.w	r3, [lr]
 800de0a:	f8cc 3000 	str.w	r3, [ip]
 800de0e:	f000 fdc1 	bl	800e994 <rcutils_get_zero_initialized_string_map>
 800de12:	ab10      	add	r3, sp, #64	; 0x40
 800de14:	4684      	mov	ip, r0
 800de16:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800de1a:	f8cd c020 	str.w	ip, [sp, #32]
 800de1e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800de22:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 800de26:	4651      	mov	r1, sl
 800de28:	a808      	add	r0, sp, #32
 800de2a:	f000 fe2d 	bl	800ea88 <rcutils_string_map_init>
 800de2e:	b150      	cbz	r0, 800de46 <rcl_publisher_init+0x8e>
 800de30:	280a      	cmp	r0, #10
 800de32:	d013      	beq.n	800de5c <rcl_publisher_init+0xa4>
 800de34:	2501      	movs	r5, #1
 800de36:	e7d5      	b.n	800dde4 <rcl_publisher_init+0x2c>
 800de38:	250b      	movs	r5, #11
 800de3a:	4628      	mov	r0, r5
 800de3c:	b011      	add	sp, #68	; 0x44
 800de3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de42:	25c8      	movs	r5, #200	; 0xc8
 800de44:	e7ce      	b.n	800dde4 <rcl_publisher_init+0x2c>
 800de46:	a808      	add	r0, sp, #32
 800de48:	f006 fa26 	bl	8014298 <rcl_get_default_topic_name_substitutions>
 800de4c:	4682      	mov	sl, r0
 800de4e:	b138      	cbz	r0, 800de60 <rcl_publisher_init+0xa8>
 800de50:	a808      	add	r0, sp, #32
 800de52:	f000 fe59 	bl	800eb08 <rcutils_string_map_fini>
 800de56:	f1ba 0f0a 	cmp.w	sl, #10
 800de5a:	d1eb      	bne.n	800de34 <rcl_publisher_init+0x7c>
 800de5c:	250a      	movs	r5, #10
 800de5e:	e7c1      	b.n	800dde4 <rcl_publisher_init+0x2c>
 800de60:	4640      	mov	r0, r8
 800de62:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800de66:	f006 fccd 	bl	8014804 <rcl_node_get_name>
 800de6a:	4682      	mov	sl, r0
 800de6c:	4640      	mov	r0, r8
 800de6e:	f006 fcd1 	bl	8014814 <rcl_node_get_namespace>
 800de72:	4686      	mov	lr, r0
 800de74:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800de78:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 800de7c:	46ec      	mov	ip, sp
 800de7e:	f8cd b014 	str.w	fp, [sp, #20]
 800de82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800de86:	f8d9 3000 	ldr.w	r3, [r9]
 800de8a:	f8cc 3000 	str.w	r3, [ip]
 800de8e:	4628      	mov	r0, r5
 800de90:	4651      	mov	r1, sl
 800de92:	4672      	mov	r2, lr
 800de94:	ab08      	add	r3, sp, #32
 800de96:	f006 f899 	bl	8013fcc <rcl_expand_topic_name>
 800de9a:	4605      	mov	r5, r0
 800de9c:	a808      	add	r0, sp, #32
 800de9e:	f000 fe33 	bl	800eb08 <rcutils_string_map_fini>
 800dea2:	b920      	cbnz	r0, 800deae <rcl_publisher_init+0xf6>
 800dea4:	b15d      	cbz	r5, 800debe <rcl_publisher_init+0x106>
 800dea6:	2d67      	cmp	r5, #103	; 0x67
 800dea8:	d002      	beq.n	800deb0 <rcl_publisher_init+0xf8>
 800deaa:	2d69      	cmp	r5, #105	; 0x69
 800deac:	d05f      	beq.n	800df6e <rcl_publisher_init+0x1b6>
 800deae:	2501      	movs	r5, #1
 800deb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deb2:	2800      	cmp	r0, #0
 800deb4:	d096      	beq.n	800dde4 <rcl_publisher_init+0x2c>
 800deb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800deb8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800deba:	4798      	blx	r3
 800debc:	e792      	b.n	800dde4 <rcl_publisher_init+0x2c>
 800debe:	4640      	mov	r0, r8
 800dec0:	f006 fcb0 	bl	8014824 <rcl_node_get_options>
 800dec4:	2800      	cmp	r0, #0
 800dec6:	d0f2      	beq.n	800deae <rcl_publisher_init+0xf6>
 800dec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deca:	f7f2 f993 	bl	80001f4 <strlen>
 800dece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ded0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800ded2:	3001      	adds	r0, #1
 800ded4:	4798      	blx	r3
 800ded6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ded8:	9107      	str	r1, [sp, #28]
 800deda:	4681      	mov	r9, r0
 800dedc:	4608      	mov	r0, r1
 800dede:	f7f2 f989 	bl	80001f4 <strlen>
 800dee2:	9907      	ldr	r1, [sp, #28]
 800dee4:	1c42      	adds	r2, r0, #1
 800dee6:	4648      	mov	r0, r9
 800dee8:	f00b f8d8 	bl	801909c <memcpy>
 800deec:	462a      	mov	r2, r5
 800deee:	4648      	mov	r0, r9
 800def0:	a90a      	add	r1, sp, #40	; 0x28
 800def2:	f000 fee5 	bl	800ecc0 <rmw_validate_full_topic_name>
 800def6:	2800      	cmp	r0, #0
 800def8:	d137      	bne.n	800df6a <rcl_publisher_init+0x1b2>
 800defa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800defc:	2b00      	cmp	r3, #0
 800defe:	d138      	bne.n	800df72 <rcl_publisher_init+0x1ba>
 800df00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df02:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800df04:	20c0      	movs	r0, #192	; 0xc0
 800df06:	4798      	blx	r3
 800df08:	6020      	str	r0, [r4, #0]
 800df0a:	b3a0      	cbz	r0, 800df76 <rcl_publisher_init+0x1be>
 800df0c:	4640      	mov	r0, r8
 800df0e:	f006 fc91 	bl	8014834 <rcl_node_get_rmw_handle>
 800df12:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800df16:	9300      	str	r3, [sp, #0]
 800df18:	4631      	mov	r1, r6
 800df1a:	463b      	mov	r3, r7
 800df1c:	464a      	mov	r2, r9
 800df1e:	6825      	ldr	r5, [r4, #0]
 800df20:	f001 fb24 	bl	800f56c <rmw_create_publisher>
 800df24:	6821      	ldr	r1, [r4, #0]
 800df26:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
 800df2a:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 800df2e:	b388      	cbz	r0, 800df94 <rcl_publisher_init+0x1dc>
 800df30:	3168      	adds	r1, #104	; 0x68
 800df32:	f001 fbf9 	bl	800f728 <rmw_publisher_get_actual_qos>
 800df36:	6823      	ldr	r3, [r4, #0]
 800df38:	4605      	mov	r5, r0
 800df3a:	b9f0      	cbnz	r0, 800df7a <rcl_publisher_init+0x1c2>
 800df3c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800df40:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 800df44:	4618      	mov	r0, r3
 800df46:	2268      	movs	r2, #104	; 0x68
 800df48:	4639      	mov	r1, r7
 800df4a:	f00b f8a7 	bl	801909c <memcpy>
 800df4e:	f8d8 2000 	ldr.w	r2, [r8]
 800df52:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
 800df56:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df58:	b110      	cbz	r0, 800df60 <rcl_publisher_init+0x1a8>
 800df5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df5c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800df5e:	4798      	blx	r3
 800df60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df62:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800df64:	4648      	mov	r0, r9
 800df66:	4798      	blx	r3
 800df68:	e73c      	b.n	800dde4 <rcl_publisher_init+0x2c>
 800df6a:	2501      	movs	r5, #1
 800df6c:	e7f3      	b.n	800df56 <rcl_publisher_init+0x19e>
 800df6e:	2567      	movs	r5, #103	; 0x67
 800df70:	e79e      	b.n	800deb0 <rcl_publisher_init+0xf8>
 800df72:	2567      	movs	r5, #103	; 0x67
 800df74:	e7ef      	b.n	800df56 <rcl_publisher_init+0x19e>
 800df76:	250a      	movs	r5, #10
 800df78:	e7ed      	b.n	800df56 <rcl_publisher_init+0x19e>
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d0f5      	beq.n	800df6a <rcl_publisher_init+0x1b2>
 800df7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800df82:	b13b      	cbz	r3, 800df94 <rcl_publisher_init+0x1dc>
 800df84:	4640      	mov	r0, r8
 800df86:	f006 fc55 	bl	8014834 <rcl_node_get_rmw_handle>
 800df8a:	6823      	ldr	r3, [r4, #0]
 800df8c:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
 800df90:	f001 fbcc 	bl	800f72c <rmw_destroy_publisher>
 800df94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df96:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800df98:	6820      	ldr	r0, [r4, #0]
 800df9a:	4798      	blx	r3
 800df9c:	2300      	movs	r3, #0
 800df9e:	6023      	str	r3, [r4, #0]
 800dfa0:	2501      	movs	r5, #1
 800dfa2:	e7d8      	b.n	800df56 <rcl_publisher_init+0x19e>

0800dfa4 <rcl_publisher_get_default_options>:
 800dfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfa6:	4f0e      	ldr	r7, [pc, #56]	; (800dfe0 <rcl_publisher_get_default_options+0x3c>)
 800dfa8:	490e      	ldr	r1, [pc, #56]	; (800dfe4 <rcl_publisher_get_default_options+0x40>)
 800dfaa:	b087      	sub	sp, #28
 800dfac:	4606      	mov	r6, r0
 800dfae:	2250      	movs	r2, #80	; 0x50
 800dfb0:	4638      	mov	r0, r7
 800dfb2:	f00b f873 	bl	801909c <memcpy>
 800dfb6:	466c      	mov	r4, sp
 800dfb8:	4668      	mov	r0, sp
 800dfba:	f000 fca1 	bl	800e900 <rcutils_get_default_allocator>
 800dfbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dfc0:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800dfc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dfc6:	6823      	ldr	r3, [r4, #0]
 800dfc8:	602b      	str	r3, [r5, #0]
 800dfca:	f000 fe73 	bl	800ecb4 <rmw_get_default_publisher_options>
 800dfce:	4639      	mov	r1, r7
 800dfd0:	6678      	str	r0, [r7, #100]	; 0x64
 800dfd2:	2268      	movs	r2, #104	; 0x68
 800dfd4:	4630      	mov	r0, r6
 800dfd6:	f00b f861 	bl	801909c <memcpy>
 800dfda:	4630      	mov	r0, r6
 800dfdc:	b007      	add	sp, #28
 800dfde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfe0:	20009e68 	.word	0x20009e68
 800dfe4:	0801de60 	.word	0x0801de60

0800dfe8 <rcl_publish>:
 800dfe8:	b1f8      	cbz	r0, 800e02a <rcl_publish+0x42>
 800dfea:	6803      	ldr	r3, [r0, #0]
 800dfec:	b570      	push	{r4, r5, r6, lr}
 800dfee:	4604      	mov	r4, r0
 800dff0:	b1b3      	cbz	r3, 800e020 <rcl_publish+0x38>
 800dff2:	4616      	mov	r6, r2
 800dff4:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 800dff8:	b192      	cbz	r2, 800e020 <rcl_publish+0x38>
 800dffa:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800dffe:	460d      	mov	r5, r1
 800e000:	f005 ff7a 	bl	8013ef8 <rcl_context_is_valid>
 800e004:	b160      	cbz	r0, 800e020 <rcl_publish+0x38>
 800e006:	6823      	ldr	r3, [r4, #0]
 800e008:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800e00c:	b140      	cbz	r0, 800e020 <rcl_publish+0x38>
 800e00e:	b155      	cbz	r5, 800e026 <rcl_publish+0x3e>
 800e010:	4632      	mov	r2, r6
 800e012:	4629      	mov	r1, r5
 800e014:	f001 fa4a 	bl	800f4ac <rmw_publish>
 800e018:	3800      	subs	r0, #0
 800e01a:	bf18      	it	ne
 800e01c:	2001      	movne	r0, #1
 800e01e:	bd70      	pop	{r4, r5, r6, pc}
 800e020:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800e024:	bd70      	pop	{r4, r5, r6, pc}
 800e026:	200b      	movs	r0, #11
 800e028:	bd70      	pop	{r4, r5, r6, pc}
 800e02a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800e02e:	4770      	bx	lr

0800e030 <_rclc_check_for_new_data>:
 800e030:	b1e0      	cbz	r0, 800e06c <_rclc_check_for_new_data+0x3c>
 800e032:	7803      	ldrb	r3, [r0, #0]
 800e034:	2b08      	cmp	r3, #8
 800e036:	d81b      	bhi.n	800e070 <_rclc_check_for_new_data+0x40>
 800e038:	e8df f003 	tbb	[pc, r3]
 800e03c:	12161010 	.word	0x12161010
 800e040:	05050512 	.word	0x05050512
 800e044:	14          	.byte	0x14
 800e045:	00          	.byte	0x00
 800e046:	6a0b      	ldr	r3, [r1, #32]
 800e048:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e04e:	3b00      	subs	r3, #0
 800e050:	bf18      	it	ne
 800e052:	2301      	movne	r3, #1
 800e054:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800e058:	2000      	movs	r0, #0
 800e05a:	4770      	bx	lr
 800e05c:	680b      	ldr	r3, [r1, #0]
 800e05e:	e7f3      	b.n	800e048 <_rclc_check_for_new_data+0x18>
 800e060:	698b      	ldr	r3, [r1, #24]
 800e062:	e7f1      	b.n	800e048 <_rclc_check_for_new_data+0x18>
 800e064:	688b      	ldr	r3, [r1, #8]
 800e066:	e7ef      	b.n	800e048 <_rclc_check_for_new_data+0x18>
 800e068:	690b      	ldr	r3, [r1, #16]
 800e06a:	e7ed      	b.n	800e048 <_rclc_check_for_new_data+0x18>
 800e06c:	200b      	movs	r0, #11
 800e06e:	4770      	bx	lr
 800e070:	2300      	movs	r3, #0
 800e072:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 800e076:	2001      	movs	r0, #1
 800e078:	4770      	bx	lr
 800e07a:	bf00      	nop

0800e07c <_rclc_take_new_data>:
 800e07c:	2800      	cmp	r0, #0
 800e07e:	d049      	beq.n	800e114 <_rclc_take_new_data+0x98>
 800e080:	b510      	push	{r4, lr}
 800e082:	7803      	ldrb	r3, [r0, #0]
 800e084:	b08e      	sub	sp, #56	; 0x38
 800e086:	4604      	mov	r4, r0
 800e088:	2b08      	cmp	r3, #8
 800e08a:	d84a      	bhi.n	800e122 <_rclc_take_new_data+0xa6>
 800e08c:	e8df f003 	tbb	[pc, r3]
 800e090:	2b121515 	.word	0x2b121515
 800e094:	0505052b 	.word	0x0505052b
 800e098:	12          	.byte	0x12
 800e099:	00          	.byte	0x00
 800e09a:	6a0b      	ldr	r3, [r1, #32]
 800e09c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0a2:	b13b      	cbz	r3, 800e0b4 <_rclc_take_new_data+0x38>
 800e0a4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800e0a8:	f104 0110 	add.w	r1, r4, #16
 800e0ac:	f006 fcc2 	bl	8014a34 <rcl_take_request>
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	d131      	bne.n	800e118 <_rclc_take_new_data+0x9c>
 800e0b4:	2000      	movs	r0, #0
 800e0b6:	b00e      	add	sp, #56	; 0x38
 800e0b8:	bd10      	pop	{r4, pc}
 800e0ba:	680b      	ldr	r3, [r1, #0]
 800e0bc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e0be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d0f6      	beq.n	800e0b4 <_rclc_take_new_data+0x38>
 800e0c6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	aa02      	add	r2, sp, #8
 800e0ce:	f006 fe27 	bl	8014d20 <rcl_take>
 800e0d2:	2800      	cmp	r0, #0
 800e0d4:	d0ef      	beq.n	800e0b6 <_rclc_take_new_data+0x3a>
 800e0d6:	f240 1391 	movw	r3, #401	; 0x191
 800e0da:	4298      	cmp	r0, r3
 800e0dc:	d115      	bne.n	800e10a <_rclc_take_new_data+0x8e>
 800e0de:	2300      	movs	r3, #0
 800e0e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800e0e4:	e7e7      	b.n	800e0b6 <_rclc_take_new_data+0x3a>
 800e0e6:	698b      	ldr	r3, [r1, #24]
 800e0e8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d0e0      	beq.n	800e0b4 <_rclc_take_new_data+0x38>
 800e0f2:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800e0f6:	f104 0110 	add.w	r1, r4, #16
 800e0fa:	f005 fea3 	bl	8013e44 <rcl_take_response>
 800e0fe:	2800      	cmp	r0, #0
 800e100:	d0d8      	beq.n	800e0b4 <_rclc_take_new_data+0x38>
 800e102:	f240 13f5 	movw	r3, #501	; 0x1f5
 800e106:	4298      	cmp	r0, r3
 800e108:	d0d5      	beq.n	800e0b6 <_rclc_take_new_data+0x3a>
 800e10a:	9001      	str	r0, [sp, #4]
 800e10c:	f000 fc2a 	bl	800e964 <rcutils_reset_error>
 800e110:	9801      	ldr	r0, [sp, #4]
 800e112:	e7d0      	b.n	800e0b6 <_rclc_take_new_data+0x3a>
 800e114:	200b      	movs	r0, #11
 800e116:	4770      	bx	lr
 800e118:	f240 2359 	movw	r3, #601	; 0x259
 800e11c:	4298      	cmp	r0, r3
 800e11e:	d0de      	beq.n	800e0de <_rclc_take_new_data+0x62>
 800e120:	e7f3      	b.n	800e10a <_rclc_take_new_data+0x8e>
 800e122:	2001      	movs	r0, #1
 800e124:	e7c7      	b.n	800e0b6 <_rclc_take_new_data+0x3a>
 800e126:	bf00      	nop

0800e128 <rclc_executor_trigger_any>:
 800e128:	b170      	cbz	r0, 800e148 <rclc_executor_trigger_any+0x20>
 800e12a:	b179      	cbz	r1, 800e14c <rclc_executor_trigger_any+0x24>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2200      	movs	r2, #0
 800e130:	e005      	b.n	800e13e <rclc_executor_trigger_any+0x16>
 800e132:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800e136:	3340      	adds	r3, #64	; 0x40
 800e138:	b930      	cbnz	r0, 800e148 <rclc_executor_trigger_any+0x20>
 800e13a:	4291      	cmp	r1, r2
 800e13c:	d005      	beq.n	800e14a <rclc_executor_trigger_any+0x22>
 800e13e:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800e142:	3201      	adds	r2, #1
 800e144:	2800      	cmp	r0, #0
 800e146:	d1f4      	bne.n	800e132 <rclc_executor_trigger_any+0xa>
 800e148:	4770      	bx	lr
 800e14a:	4770      	bx	lr
 800e14c:	4608      	mov	r0, r1
 800e14e:	e7fb      	b.n	800e148 <rclc_executor_trigger_any+0x20>

0800e150 <_rclc_execute.part.0>:
 800e150:	b530      	push	{r4, r5, lr}
 800e152:	7803      	ldrb	r3, [r0, #0]
 800e154:	b083      	sub	sp, #12
 800e156:	4604      	mov	r4, r0
 800e158:	2b08      	cmp	r3, #8
 800e15a:	d85b      	bhi.n	800e214 <_rclc_execute.part.0+0xc4>
 800e15c:	e8df f003 	tbb	[pc, r3]
 800e160:	3036271f 	.word	0x3036271f
 800e164:	0505053f 	.word	0x0505053f
 800e168:	1a          	.byte	0x1a
 800e169:	00          	.byte	0x00
 800e16a:	2b06      	cmp	r3, #6
 800e16c:	d049      	beq.n	800e202 <_rclc_execute.part.0+0xb2>
 800e16e:	2b07      	cmp	r3, #7
 800e170:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e172:	d140      	bne.n	800e1f6 <_rclc_execute.part.0+0xa6>
 800e174:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800e178:	6880      	ldr	r0, [r0, #8]
 800e17a:	4798      	blx	r3
 800e17c:	f104 0110 	add.w	r1, r4, #16
 800e180:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e182:	6860      	ldr	r0, [r4, #4]
 800e184:	f006 fc8e 	bl	8014aa4 <rcl_send_response>
 800e188:	b138      	cbz	r0, 800e19a <_rclc_execute.part.0+0x4a>
 800e18a:	9001      	str	r0, [sp, #4]
 800e18c:	f000 fbea 	bl	800e964 <rcutils_reset_error>
 800e190:	9801      	ldr	r0, [sp, #4]
 800e192:	e002      	b.n	800e19a <_rclc_execute.part.0+0x4a>
 800e194:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e196:	4798      	blx	r3
 800e198:	2000      	movs	r0, #0
 800e19a:	b003      	add	sp, #12
 800e19c:	bd30      	pop	{r4, r5, pc}
 800e19e:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800e1a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e1a4:	b96d      	cbnz	r5, 800e1c2 <_rclc_execute.part.0+0x72>
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	4798      	blx	r3
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	e7f5      	b.n	800e19a <_rclc_execute.part.0+0x4a>
 800e1ae:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800e1b2:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 800e1b6:	b1d5      	cbz	r5, 800e1ee <_rclc_execute.part.0+0x9e>
 800e1b8:	6880      	ldr	r0, [r0, #8]
 800e1ba:	4798      	blx	r3
 800e1bc:	2000      	movs	r0, #0
 800e1be:	e7ec      	b.n	800e19a <_rclc_execute.part.0+0x4a>
 800e1c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e1c2:	68a0      	ldr	r0, [r4, #8]
 800e1c4:	4798      	blx	r3
 800e1c6:	2000      	movs	r0, #0
 800e1c8:	b003      	add	sp, #12
 800e1ca:	bd30      	pop	{r4, r5, pc}
 800e1cc:	6840      	ldr	r0, [r0, #4]
 800e1ce:	f006 fe9d 	bl	8014f0c <rcl_timer_call>
 800e1d2:	f240 3321 	movw	r3, #801	; 0x321
 800e1d6:	4298      	cmp	r0, r3
 800e1d8:	d1d6      	bne.n	800e188 <_rclc_execute.part.0+0x38>
 800e1da:	2000      	movs	r0, #0
 800e1dc:	e7dd      	b.n	800e19a <_rclc_execute.part.0+0x4a>
 800e1de:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e1e0:	6880      	ldr	r0, [r0, #8]
 800e1e2:	f104 0110 	add.w	r1, r4, #16
 800e1e6:	4798      	blx	r3
 800e1e8:	2000      	movs	r0, #0
 800e1ea:	b003      	add	sp, #12
 800e1ec:	bd30      	pop	{r4, r5, pc}
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	4798      	blx	r3
 800e1f2:	4628      	mov	r0, r5
 800e1f4:	e7d1      	b.n	800e19a <_rclc_execute.part.0+0x4a>
 800e1f6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800e1f8:	6880      	ldr	r0, [r0, #8]
 800e1fa:	4798      	blx	r3
 800e1fc:	f104 0110 	add.w	r1, r4, #16
 800e200:	e7be      	b.n	800e180 <_rclc_execute.part.0+0x30>
 800e202:	f100 0110 	add.w	r1, r0, #16
 800e206:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e208:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e20a:	6880      	ldr	r0, [r0, #8]
 800e20c:	9101      	str	r1, [sp, #4]
 800e20e:	4798      	blx	r3
 800e210:	9901      	ldr	r1, [sp, #4]
 800e212:	e7b5      	b.n	800e180 <_rclc_execute.part.0+0x30>
 800e214:	2001      	movs	r0, #1
 800e216:	e7c0      	b.n	800e19a <_rclc_execute.part.0+0x4a>

0800e218 <rclc_executor_init>:
 800e218:	2800      	cmp	r0, #0
 800e21a:	d063      	beq.n	800e2e4 <rclc_executor_init+0xcc>
 800e21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e220:	460f      	mov	r7, r1
 800e222:	b0ae      	sub	sp, #184	; 0xb8
 800e224:	2900      	cmp	r1, #0
 800e226:	d055      	beq.n	800e2d4 <rclc_executor_init+0xbc>
 800e228:	4605      	mov	r5, r0
 800e22a:	4618      	mov	r0, r3
 800e22c:	4616      	mov	r6, r2
 800e22e:	4698      	mov	r8, r3
 800e230:	f000 fb74 	bl	800e91c <rcutils_allocator_is_valid>
 800e234:	2800      	cmp	r0, #0
 800e236:	d04d      	beq.n	800e2d4 <rclc_executor_init+0xbc>
 800e238:	2e00      	cmp	r6, #0
 800e23a:	d04b      	beq.n	800e2d4 <rclc_executor_init+0xbc>
 800e23c:	492e      	ldr	r1, [pc, #184]	; (800e2f8 <rclc_executor_init+0xe0>)
 800e23e:	2280      	movs	r2, #128	; 0x80
 800e240:	a80e      	add	r0, sp, #56	; 0x38
 800e242:	f00a ff2b 	bl	801909c <memcpy>
 800e246:	2400      	movs	r4, #0
 800e248:	a90e      	add	r1, sp, #56	; 0x38
 800e24a:	2280      	movs	r2, #128	; 0x80
 800e24c:	4628      	mov	r0, r5
 800e24e:	f00a ff25 	bl	801909c <memcpy>
 800e252:	602f      	str	r7, [r5, #0]
 800e254:	4668      	mov	r0, sp
 800e256:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800e25a:	466f      	mov	r7, sp
 800e25c:	f007 f8b0 	bl	80153c0 <rcl_get_zero_initialized_wait_set>
 800e260:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e262:	f105 0c14 	add.w	ip, r5, #20
 800e266:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e26a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e26c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e270:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e272:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e276:	a31e      	add	r3, pc, #120	; (adr r3, 800e2f0 <rclc_executor_init+0xd8>)
 800e278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27c:	6839      	ldr	r1, [r7, #0]
 800e27e:	f8cc 1000 	str.w	r1, [ip]
 800e282:	f8d8 7000 	ldr.w	r7, [r8]
 800e286:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e28a:	f8c5 8010 	str.w	r8, [r5, #16]
 800e28e:	e9c5 2318 	strd	r2, r3, [r5, #96]	; 0x60
 800e292:	01b0      	lsls	r0, r6, #6
 800e294:	47b8      	blx	r7
 800e296:	6068      	str	r0, [r5, #4]
 800e298:	b908      	cbnz	r0, 800e29e <rclc_executor_init+0x86>
 800e29a:	e025      	b.n	800e2e8 <rclc_executor_init+0xd0>
 800e29c:	6868      	ldr	r0, [r5, #4]
 800e29e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800e2a2:	4631      	mov	r1, r6
 800e2a4:	3401      	adds	r4, #1
 800e2a6:	f000 fa01 	bl	800e6ac <rclc_executor_handle_init>
 800e2aa:	42a6      	cmp	r6, r4
 800e2ac:	d1f6      	bne.n	800e29c <rclc_executor_init+0x84>
 800e2ae:	f105 0048 	add.w	r0, r5, #72	; 0x48
 800e2b2:	f000 f9ef 	bl	800e694 <rclc_executor_handle_counters_zero_init>
 800e2b6:	686b      	ldr	r3, [r5, #4]
 800e2b8:	4a10      	ldr	r2, [pc, #64]	; (800e2fc <rclc_executor_init+0xe4>)
 800e2ba:	672a      	str	r2, [r5, #112]	; 0x70
 800e2bc:	2000      	movs	r0, #0
 800e2be:	6768      	str	r0, [r5, #116]	; 0x74
 800e2c0:	b163      	cbz	r3, 800e2dc <rclc_executor_init+0xc4>
 800e2c2:	692b      	ldr	r3, [r5, #16]
 800e2c4:	b153      	cbz	r3, 800e2dc <rclc_executor_init+0xc4>
 800e2c6:	68ab      	ldr	r3, [r5, #8]
 800e2c8:	b143      	cbz	r3, 800e2dc <rclc_executor_init+0xc4>
 800e2ca:	f885 0078 	strb.w	r0, [r5, #120]	; 0x78
 800e2ce:	b02e      	add	sp, #184	; 0xb8
 800e2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2d4:	200b      	movs	r0, #11
 800e2d6:	b02e      	add	sp, #184	; 0xb8
 800e2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	b02e      	add	sp, #184	; 0xb8
 800e2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e4:	200b      	movs	r0, #11
 800e2e6:	4770      	bx	lr
 800e2e8:	200a      	movs	r0, #10
 800e2ea:	e7f4      	b.n	800e2d6 <rclc_executor_init+0xbe>
 800e2ec:	f3af 8000 	nop.w
 800e2f0:	3b9aca00 	.word	0x3b9aca00
 800e2f4:	00000000 	.word	0x00000000
 800e2f8:	0801deb0 	.word	0x0801deb0
 800e2fc:	0800e129 	.word	0x0800e129

0800e300 <rclc_executor_add_subscription>:
 800e300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e304:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800e308:	b358      	cbz	r0, 800e362 <rclc_executor_add_subscription+0x62>
 800e30a:	b351      	cbz	r1, 800e362 <rclc_executor_add_subscription+0x62>
 800e30c:	b34a      	cbz	r2, 800e362 <rclc_executor_add_subscription+0x62>
 800e30e:	b343      	cbz	r3, 800e362 <rclc_executor_add_subscription+0x62>
 800e310:	4604      	mov	r4, r0
 800e312:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800e316:	4285      	cmp	r5, r0
 800e318:	d302      	bcc.n	800e320 <rclc_executor_add_subscription+0x20>
 800e31a:	2001      	movs	r0, #1
 800e31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e320:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800e324:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800e328:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800e32c:	f04f 0c00 	mov.w	ip, #0
 800e330:	f80e c008 	strb.w	ip, [lr, r8]
 800e334:	2001      	movs	r0, #1
 800e336:	3501      	adds	r5, #1
 800e338:	f104 0814 	add.w	r8, r4, #20
 800e33c:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
 800e340:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800e344:	6333      	str	r3, [r6, #48]	; 0x30
 800e346:	7077      	strb	r7, [r6, #1]
 800e348:	f8c6 c02c 	str.w	ip, [r6, #44]	; 0x2c
 800e34c:	4640      	mov	r0, r8
 800e34e:	60e5      	str	r5, [r4, #12]
 800e350:	f007 f848 	bl	80153e4 <rcl_wait_set_is_valid>
 800e354:	b940      	cbnz	r0, 800e368 <rclc_executor_add_subscription+0x68>
 800e356:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e358:	3301      	adds	r3, #1
 800e35a:	64a3      	str	r3, [r4, #72]	; 0x48
 800e35c:	2000      	movs	r0, #0
 800e35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e362:	200b      	movs	r0, #11
 800e364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e368:	4640      	mov	r0, r8
 800e36a:	f007 f841 	bl	80153f0 <rcl_wait_set_fini>
 800e36e:	2800      	cmp	r0, #0
 800e370:	d0f1      	beq.n	800e356 <rclc_executor_add_subscription+0x56>
 800e372:	e7d3      	b.n	800e31c <rclc_executor_add_subscription+0x1c>

0800e374 <rclc_executor_prepare>:
 800e374:	2800      	cmp	r0, #0
 800e376:	d03d      	beq.n	800e3f4 <rclc_executor_prepare+0x80>
 800e378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e37c:	f100 0814 	add.w	r8, r0, #20
 800e380:	b09a      	sub	sp, #104	; 0x68
 800e382:	4604      	mov	r4, r0
 800e384:	4640      	mov	r0, r8
 800e386:	f007 f82d 	bl	80153e4 <rcl_wait_set_is_valid>
 800e38a:	b118      	cbz	r0, 800e394 <rclc_executor_prepare+0x20>
 800e38c:	2000      	movs	r0, #0
 800e38e:	b01a      	add	sp, #104	; 0x68
 800e390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e394:	4640      	mov	r0, r8
 800e396:	f007 f82b 	bl	80153f0 <rcl_wait_set_fini>
 800e39a:	2800      	cmp	r0, #0
 800e39c:	d127      	bne.n	800e3ee <rclc_executor_prepare+0x7a>
 800e39e:	a80c      	add	r0, sp, #48	; 0x30
 800e3a0:	ad0c      	add	r5, sp, #48	; 0x30
 800e3a2:	f007 f80d 	bl	80153c0 <rcl_get_zero_initialized_wait_set>
 800e3a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e3a8:	4646      	mov	r6, r8
 800e3aa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e3ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e3ae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e3b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e3b2:	6927      	ldr	r7, [r4, #16]
 800e3b4:	682d      	ldr	r5, [r5, #0]
 800e3b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e3b8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e3ba:	6035      	str	r5, [r6, #0]
 800e3bc:	ad04      	add	r5, sp, #16
 800e3be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e3c0:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800e3c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e3c6:	6826      	ldr	r6, [r4, #0]
 800e3c8:	6838      	ldr	r0, [r7, #0]
 800e3ca:	6028      	str	r0, [r5, #0]
 800e3cc:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800e3d0:	e9cd 3200 	strd	r3, r2, [sp]
 800e3d4:	4640      	mov	r0, r8
 800e3d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e3d8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800e3da:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e3dc:	f007 fb26 	bl	8015a2c <rcl_wait_set_init>
 800e3e0:	2800      	cmp	r0, #0
 800e3e2:	d0d4      	beq.n	800e38e <rclc_executor_prepare+0x1a>
 800e3e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800e3e6:	f000 fabd 	bl	800e964 <rcutils_reset_error>
 800e3ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e3ec:	e7cf      	b.n	800e38e <rclc_executor_prepare+0x1a>
 800e3ee:	f000 fab9 	bl	800e964 <rcutils_reset_error>
 800e3f2:	e7d4      	b.n	800e39e <rclc_executor_prepare+0x2a>
 800e3f4:	200b      	movs	r0, #11
 800e3f6:	4770      	bx	lr

0800e3f8 <rclc_executor_spin_some.part.0>:
 800e3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3fc:	f100 0814 	add.w	r8, r0, #20
 800e400:	b083      	sub	sp, #12
 800e402:	4692      	mov	sl, r2
 800e404:	4699      	mov	r9, r3
 800e406:	4605      	mov	r5, r0
 800e408:	f7ff ffb4 	bl	800e374 <rclc_executor_prepare>
 800e40c:	4640      	mov	r0, r8
 800e40e:	f007 f8bb 	bl	8015588 <rcl_wait_set_clear>
 800e412:	4607      	mov	r7, r0
 800e414:	2800      	cmp	r0, #0
 800e416:	f040 80be 	bne.w	800e596 <rclc_executor_spin_some.part.0+0x19e>
 800e41a:	68ab      	ldr	r3, [r5, #8]
 800e41c:	4604      	mov	r4, r0
 800e41e:	b1eb      	cbz	r3, 800e45c <rclc_executor_spin_some.part.0+0x64>
 800e420:	686e      	ldr	r6, [r5, #4]
 800e422:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800e426:	01a2      	lsls	r2, r4, #6
 800e428:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 800e42c:	b1b3      	cbz	r3, 800e45c <rclc_executor_spin_some.part.0+0x64>
 800e42e:	5cb3      	ldrb	r3, [r6, r2]
 800e430:	2b08      	cmp	r3, #8
 800e432:	f200 80a9 	bhi.w	800e588 <rclc_executor_spin_some.part.0+0x190>
 800e436:	e8df f003 	tbb	[pc, r3]
 800e43a:	8989      	.short	0x8989
 800e43c:	057b7b93 	.word	0x057b7b93
 800e440:	0505      	.short	0x0505
 800e442:	9d          	.byte	0x9d
 800e443:	00          	.byte	0x00
 800e444:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800e448:	4640      	mov	r0, r8
 800e44a:	6849      	ldr	r1, [r1, #4]
 800e44c:	f007 fc04 	bl	8015c58 <rcl_wait_set_add_service>
 800e450:	2800      	cmp	r0, #0
 800e452:	d175      	bne.n	800e540 <rclc_executor_spin_some.part.0+0x148>
 800e454:	68ab      	ldr	r3, [r5, #8]
 800e456:	3401      	adds	r4, #1
 800e458:	429c      	cmp	r4, r3
 800e45a:	d3e1      	bcc.n	800e420 <rclc_executor_spin_some.part.0+0x28>
 800e45c:	464b      	mov	r3, r9
 800e45e:	4652      	mov	r2, sl
 800e460:	4640      	mov	r0, r8
 800e462:	f007 fc25 	bl	8015cb0 <rcl_wait>
 800e466:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f000 809b 	beq.w	800e5a6 <rclc_executor_spin_some.part.0+0x1ae>
 800e470:	2b01      	cmp	r3, #1
 800e472:	f040 8089 	bne.w	800e588 <rclc_executor_spin_some.part.0+0x190>
 800e476:	68ab      	ldr	r3, [r5, #8]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	f000 80ef 	beq.w	800e65c <rclc_executor_spin_some.part.0+0x264>
 800e47e:	2400      	movs	r4, #0
 800e480:	4626      	mov	r6, r4
 800e482:	f240 1991 	movw	r9, #401	; 0x191
 800e486:	e00a      	b.n	800e49e <rclc_executor_spin_some.part.0+0xa6>
 800e488:	f7ff fdd2 	bl	800e030 <_rclc_check_for_new_data>
 800e48c:	4604      	mov	r4, r0
 800e48e:	b110      	cbz	r0, 800e496 <rclc_executor_spin_some.part.0+0x9e>
 800e490:	4548      	cmp	r0, r9
 800e492:	f040 8086 	bne.w	800e5a2 <rclc_executor_spin_some.part.0+0x1aa>
 800e496:	68ab      	ldr	r3, [r5, #8]
 800e498:	429e      	cmp	r6, r3
 800e49a:	f080 80db 	bcs.w	800e654 <rclc_executor_spin_some.part.0+0x25c>
 800e49e:	686a      	ldr	r2, [r5, #4]
 800e4a0:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800e4a4:	4641      	mov	r1, r8
 800e4a6:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800e4aa:	3601      	adds	r6, #1
 800e4ac:	f1bc 0f00 	cmp.w	ip, #0
 800e4b0:	d1ea      	bne.n	800e488 <rclc_executor_spin_some.part.0+0x90>
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	4610      	mov	r0, r2
 800e4b6:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800e4ba:	4798      	blx	r3
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	d070      	beq.n	800e5a2 <rclc_executor_spin_some.part.0+0x1aa>
 800e4c0:	68aa      	ldr	r2, [r5, #8]
 800e4c2:	2a00      	cmp	r2, #0
 800e4c4:	d06d      	beq.n	800e5a2 <rclc_executor_spin_some.part.0+0x1aa>
 800e4c6:	2600      	movs	r6, #0
 800e4c8:	f240 1991 	movw	r9, #401	; 0x191
 800e4cc:	e008      	b.n	800e4e0 <rclc_executor_spin_some.part.0+0xe8>
 800e4ce:	f7ff fdd5 	bl	800e07c <_rclc_take_new_data>
 800e4d2:	4604      	mov	r4, r0
 800e4d4:	b108      	cbz	r0, 800e4da <rclc_executor_spin_some.part.0+0xe2>
 800e4d6:	4548      	cmp	r0, r9
 800e4d8:	d163      	bne.n	800e5a2 <rclc_executor_spin_some.part.0+0x1aa>
 800e4da:	68aa      	ldr	r2, [r5, #8]
 800e4dc:	4296      	cmp	r6, r2
 800e4de:	d208      	bcs.n	800e4f2 <rclc_executor_spin_some.part.0+0xfa>
 800e4e0:	6868      	ldr	r0, [r5, #4]
 800e4e2:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800e4e6:	4641      	mov	r1, r8
 800e4e8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800e4ec:	3601      	adds	r6, #1
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d1ed      	bne.n	800e4ce <rclc_executor_spin_some.part.0+0xd6>
 800e4f2:	2600      	movs	r6, #0
 800e4f4:	b932      	cbnz	r2, 800e504 <rclc_executor_spin_some.part.0+0x10c>
 800e4f6:	e054      	b.n	800e5a2 <rclc_executor_spin_some.part.0+0x1aa>
 800e4f8:	2901      	cmp	r1, #1
 800e4fa:	d012      	beq.n	800e522 <rclc_executor_spin_some.part.0+0x12a>
 800e4fc:	3601      	adds	r6, #1
 800e4fe:	4296      	cmp	r6, r2
 800e500:	d245      	bcs.n	800e58e <rclc_executor_spin_some.part.0+0x196>
 800e502:	2400      	movs	r4, #0
 800e504:	686b      	ldr	r3, [r5, #4]
 800e506:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800e50a:	4618      	mov	r0, r3
 800e50c:	f893 1038 	ldrb.w	r1, [r3, #56]	; 0x38
 800e510:	2900      	cmp	r1, #0
 800e512:	d046      	beq.n	800e5a2 <rclc_executor_spin_some.part.0+0x1aa>
 800e514:	7859      	ldrb	r1, [r3, #1]
 800e516:	2900      	cmp	r1, #0
 800e518:	d1ee      	bne.n	800e4f8 <rclc_executor_spin_some.part.0+0x100>
 800e51a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d0ec      	beq.n	800e4fc <rclc_executor_spin_some.part.0+0x104>
 800e522:	f7ff fe15 	bl	800e150 <_rclc_execute.part.0>
 800e526:	2800      	cmp	r0, #0
 800e528:	f040 8096 	bne.w	800e658 <rclc_executor_spin_some.part.0+0x260>
 800e52c:	68aa      	ldr	r2, [r5, #8]
 800e52e:	e7e5      	b.n	800e4fc <rclc_executor_spin_some.part.0+0x104>
 800e530:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800e534:	4640      	mov	r0, r8
 800e536:	6849      	ldr	r1, [r1, #4]
 800e538:	f007 fb62 	bl	8015c00 <rcl_wait_set_add_client>
 800e53c:	2800      	cmp	r0, #0
 800e53e:	d089      	beq.n	800e454 <rclc_executor_spin_some.part.0+0x5c>
 800e540:	9001      	str	r0, [sp, #4]
 800e542:	f000 fa0f 	bl	800e964 <rcutils_reset_error>
 800e546:	9801      	ldr	r0, [sp, #4]
 800e548:	4607      	mov	r7, r0
 800e54a:	e020      	b.n	800e58e <rclc_executor_spin_some.part.0+0x196>
 800e54c:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800e550:	4640      	mov	r0, r8
 800e552:	6849      	ldr	r1, [r1, #4]
 800e554:	f006 ffec 	bl	8015530 <rcl_wait_set_add_subscription>
 800e558:	2800      	cmp	r0, #0
 800e55a:	f43f af7b 	beq.w	800e454 <rclc_executor_spin_some.part.0+0x5c>
 800e55e:	e7ef      	b.n	800e540 <rclc_executor_spin_some.part.0+0x148>
 800e560:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800e564:	4640      	mov	r0, r8
 800e566:	6849      	ldr	r1, [r1, #4]
 800e568:	f007 fb1a 	bl	8015ba0 <rcl_wait_set_add_timer>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	f43f af71 	beq.w	800e454 <rclc_executor_spin_some.part.0+0x5c>
 800e572:	e7e5      	b.n	800e540 <rclc_executor_spin_some.part.0+0x148>
 800e574:	f101 0234 	add.w	r2, r1, #52	; 0x34
 800e578:	4640      	mov	r0, r8
 800e57a:	6849      	ldr	r1, [r1, #4]
 800e57c:	f007 fae4 	bl	8015b48 <rcl_wait_set_add_guard_condition>
 800e580:	2800      	cmp	r0, #0
 800e582:	f43f af67 	beq.w	800e454 <rclc_executor_spin_some.part.0+0x5c>
 800e586:	e7db      	b.n	800e540 <rclc_executor_spin_some.part.0+0x148>
 800e588:	f000 f9ec 	bl	800e964 <rcutils_reset_error>
 800e58c:	2701      	movs	r7, #1
 800e58e:	4638      	mov	r0, r7
 800e590:	b003      	add	sp, #12
 800e592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e596:	f000 f9e5 	bl	800e964 <rcutils_reset_error>
 800e59a:	4638      	mov	r0, r7
 800e59c:	b003      	add	sp, #12
 800e59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a2:	4627      	mov	r7, r4
 800e5a4:	e7f3      	b.n	800e58e <rclc_executor_spin_some.part.0+0x196>
 800e5a6:	68ab      	ldr	r3, [r5, #8]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d05a      	beq.n	800e662 <rclc_executor_spin_some.part.0+0x26a>
 800e5ac:	2400      	movs	r4, #0
 800e5ae:	4626      	mov	r6, r4
 800e5b0:	f240 1991 	movw	r9, #401	; 0x191
 800e5b4:	e008      	b.n	800e5c8 <rclc_executor_spin_some.part.0+0x1d0>
 800e5b6:	f7ff fd3b 	bl	800e030 <_rclc_check_for_new_data>
 800e5ba:	4604      	mov	r4, r0
 800e5bc:	b108      	cbz	r0, 800e5c2 <rclc_executor_spin_some.part.0+0x1ca>
 800e5be:	4548      	cmp	r0, r9
 800e5c0:	d1ef      	bne.n	800e5a2 <rclc_executor_spin_some.part.0+0x1aa>
 800e5c2:	68ab      	ldr	r3, [r5, #8]
 800e5c4:	429e      	cmp	r6, r3
 800e5c6:	d243      	bcs.n	800e650 <rclc_executor_spin_some.part.0+0x258>
 800e5c8:	686a      	ldr	r2, [r5, #4]
 800e5ca:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800e5ce:	4641      	mov	r1, r8
 800e5d0:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800e5d4:	3601      	adds	r6, #1
 800e5d6:	f1bc 0f00 	cmp.w	ip, #0
 800e5da:	d1ec      	bne.n	800e5b6 <rclc_executor_spin_some.part.0+0x1be>
 800e5dc:	4619      	mov	r1, r3
 800e5de:	4610      	mov	r0, r2
 800e5e0:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	; 0x70
 800e5e4:	4798      	blx	r3
 800e5e6:	2800      	cmp	r0, #0
 800e5e8:	d0db      	beq.n	800e5a2 <rclc_executor_spin_some.part.0+0x1aa>
 800e5ea:	68ab      	ldr	r3, [r5, #8]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d0d8      	beq.n	800e5a2 <rclc_executor_spin_some.part.0+0x1aa>
 800e5f0:	f04f 0a00 	mov.w	sl, #0
 800e5f4:	f240 1691 	movw	r6, #401	; 0x191
 800e5f8:	f240 2959 	movw	r9, #601	; 0x259
 800e5fc:	e00b      	b.n	800e616 <rclc_executor_spin_some.part.0+0x21e>
 800e5fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800e602:	b113      	cbz	r3, 800e60a <rclc_executor_spin_some.part.0+0x212>
 800e604:	f7ff fda4 	bl	800e150 <_rclc_execute.part.0>
 800e608:	bb30      	cbnz	r0, 800e658 <rclc_executor_spin_some.part.0+0x260>
 800e60a:	68ab      	ldr	r3, [r5, #8]
 800e60c:	f10a 0a01 	add.w	sl, sl, #1
 800e610:	459a      	cmp	sl, r3
 800e612:	d2bc      	bcs.n	800e58e <rclc_executor_spin_some.part.0+0x196>
 800e614:	2400      	movs	r4, #0
 800e616:	6868      	ldr	r0, [r5, #4]
 800e618:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800e61c:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800e620:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800e624:	2b00      	cmp	r3, #0
 800e626:	d0bc      	beq.n	800e5a2 <rclc_executor_spin_some.part.0+0x1aa>
 800e628:	4641      	mov	r1, r8
 800e62a:	f7ff fd27 	bl	800e07c <_rclc_take_new_data>
 800e62e:	b118      	cbz	r0, 800e638 <rclc_executor_spin_some.part.0+0x240>
 800e630:	42b0      	cmp	r0, r6
 800e632:	d001      	beq.n	800e638 <rclc_executor_spin_some.part.0+0x240>
 800e634:	4548      	cmp	r0, r9
 800e636:	d10f      	bne.n	800e658 <rclc_executor_spin_some.part.0+0x260>
 800e638:	6868      	ldr	r0, [r5, #4]
 800e63a:	eb10 000b 	adds.w	r0, r0, fp
 800e63e:	d005      	beq.n	800e64c <rclc_executor_spin_some.part.0+0x254>
 800e640:	7843      	ldrb	r3, [r0, #1]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d0db      	beq.n	800e5fe <rclc_executor_spin_some.part.0+0x206>
 800e646:	2b01      	cmp	r3, #1
 800e648:	d1df      	bne.n	800e60a <rclc_executor_spin_some.part.0+0x212>
 800e64a:	e7db      	b.n	800e604 <rclc_executor_spin_some.part.0+0x20c>
 800e64c:	270b      	movs	r7, #11
 800e64e:	e79e      	b.n	800e58e <rclc_executor_spin_some.part.0+0x196>
 800e650:	686a      	ldr	r2, [r5, #4]
 800e652:	e7c3      	b.n	800e5dc <rclc_executor_spin_some.part.0+0x1e4>
 800e654:	686a      	ldr	r2, [r5, #4]
 800e656:	e72c      	b.n	800e4b2 <rclc_executor_spin_some.part.0+0xba>
 800e658:	4607      	mov	r7, r0
 800e65a:	e798      	b.n	800e58e <rclc_executor_spin_some.part.0+0x196>
 800e65c:	686a      	ldr	r2, [r5, #4]
 800e65e:	461c      	mov	r4, r3
 800e660:	e727      	b.n	800e4b2 <rclc_executor_spin_some.part.0+0xba>
 800e662:	686a      	ldr	r2, [r5, #4]
 800e664:	461c      	mov	r4, r3
 800e666:	e7b9      	b.n	800e5dc <rclc_executor_spin_some.part.0+0x1e4>

0800e668 <rclc_executor_spin_some>:
 800e668:	b190      	cbz	r0, 800e690 <rclc_executor_spin_some+0x28>
 800e66a:	b570      	push	{r4, r5, r6, lr}
 800e66c:	4604      	mov	r4, r0
 800e66e:	6800      	ldr	r0, [r0, #0]
 800e670:	4616      	mov	r6, r2
 800e672:	461d      	mov	r5, r3
 800e674:	f005 fc40 	bl	8013ef8 <rcl_context_is_valid>
 800e678:	b130      	cbz	r0, 800e688 <rclc_executor_spin_some+0x20>
 800e67a:	4632      	mov	r2, r6
 800e67c:	462b      	mov	r3, r5
 800e67e:	4620      	mov	r0, r4
 800e680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e684:	f7ff beb8 	b.w	800e3f8 <rclc_executor_spin_some.part.0>
 800e688:	f000 f96c 	bl	800e964 <rcutils_reset_error>
 800e68c:	2001      	movs	r0, #1
 800e68e:	bd70      	pop	{r4, r5, r6, pc}
 800e690:	200b      	movs	r0, #11
 800e692:	4770      	bx	lr

0800e694 <rclc_executor_handle_counters_zero_init>:
 800e694:	b140      	cbz	r0, 800e6a8 <rclc_executor_handle_counters_zero_init+0x14>
 800e696:	2300      	movs	r3, #0
 800e698:	6003      	str	r3, [r0, #0]
 800e69a:	6043      	str	r3, [r0, #4]
 800e69c:	6083      	str	r3, [r0, #8]
 800e69e:	60c3      	str	r3, [r0, #12]
 800e6a0:	6103      	str	r3, [r0, #16]
 800e6a2:	6143      	str	r3, [r0, #20]
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	4770      	bx	lr
 800e6a8:	200b      	movs	r0, #11
 800e6aa:	4770      	bx	lr

0800e6ac <rclc_executor_handle_init>:
 800e6ac:	b178      	cbz	r0, 800e6ce <rclc_executor_handle_init+0x22>
 800e6ae:	b430      	push	{r4, r5}
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	2209      	movs	r2, #9
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	2400      	movs	r4, #0
 800e6b8:	2500      	movs	r5, #0
 800e6ba:	801a      	strh	r2, [r3, #0]
 800e6bc:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
 800e6c0:	bc30      	pop	{r4, r5}
 800e6c2:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800e6c6:	6359      	str	r1, [r3, #52]	; 0x34
 800e6c8:	6318      	str	r0, [r3, #48]	; 0x30
 800e6ca:	8718      	strh	r0, [r3, #56]	; 0x38
 800e6cc:	4770      	bx	lr
 800e6ce:	200b      	movs	r0, #11
 800e6d0:	4770      	bx	lr
 800e6d2:	bf00      	nop

0800e6d4 <rclc_support_init_with_options>:
 800e6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6d8:	b082      	sub	sp, #8
 800e6da:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e6de:	b380      	cbz	r0, 800e742 <rclc_support_init_with_options+0x6e>
 800e6e0:	461c      	mov	r4, r3
 800e6e2:	b373      	cbz	r3, 800e742 <rclc_support_init_with_options+0x6e>
 800e6e4:	f1b8 0f00 	cmp.w	r8, #0
 800e6e8:	d02b      	beq.n	800e742 <rclc_support_init_with_options+0x6e>
 800e6ea:	4605      	mov	r5, r0
 800e6ec:	460e      	mov	r6, r1
 800e6ee:	4617      	mov	r7, r2
 800e6f0:	f7ff f9fc 	bl	800daec <rcl_get_zero_initialized_init_options>
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	6028      	str	r0, [r5, #0]
 800e6f8:	4620      	mov	r0, r4
 800e6fa:	f7ff fa6f 	bl	800dbdc <rcl_init_options_copy>
 800e6fe:	4604      	mov	r4, r0
 800e700:	b9c8      	cbnz	r0, 800e736 <rclc_support_init_with_options+0x62>
 800e702:	466c      	mov	r4, sp
 800e704:	4620      	mov	r0, r4
 800e706:	f005 fbed 	bl	8013ee4 <rcl_get_zero_initialized_context>
 800e70a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e70e:	1d2b      	adds	r3, r5, #4
 800e710:	e883 0003 	stmia.w	r3, {r0, r1}
 800e714:	462a      	mov	r2, r5
 800e716:	4639      	mov	r1, r7
 800e718:	4630      	mov	r0, r6
 800e71a:	f005 fdc3 	bl	80142a4 <rcl_init>
 800e71e:	4604      	mov	r4, r0
 800e720:	b948      	cbnz	r0, 800e736 <rclc_support_init_with_options+0x62>
 800e722:	f8c5 800c 	str.w	r8, [r5, #12]
 800e726:	4642      	mov	r2, r8
 800e728:	f105 0110 	add.w	r1, r5, #16
 800e72c:	2003      	movs	r0, #3
 800e72e:	f006 fb61 	bl	8014df4 <rcl_clock_init>
 800e732:	4604      	mov	r4, r0
 800e734:	b108      	cbz	r0, 800e73a <rclc_support_init_with_options+0x66>
 800e736:	f000 f915 	bl	800e964 <rcutils_reset_error>
 800e73a:	4620      	mov	r0, r4
 800e73c:	b002      	add	sp, #8
 800e73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e742:	240b      	movs	r4, #11
 800e744:	4620      	mov	r0, r4
 800e746:	b002      	add	sp, #8
 800e748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e74c <rclc_node_init_default>:
 800e74c:	b3b8      	cbz	r0, 800e7be <rclc_node_init_default+0x72>
 800e74e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e752:	460d      	mov	r5, r1
 800e754:	b08f      	sub	sp, #60	; 0x3c
 800e756:	b329      	cbz	r1, 800e7a4 <rclc_node_init_default+0x58>
 800e758:	4616      	mov	r6, r2
 800e75a:	b31a      	cbz	r2, 800e7a4 <rclc_node_init_default+0x58>
 800e75c:	461f      	mov	r7, r3
 800e75e:	b30b      	cbz	r3, 800e7a4 <rclc_node_init_default+0x58>
 800e760:	f10d 0810 	add.w	r8, sp, #16
 800e764:	4604      	mov	r4, r0
 800e766:	4640      	mov	r0, r8
 800e768:	f005 fec8 	bl	80144fc <rcl_get_zero_initialized_node>
 800e76c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e770:	f10d 091c 	add.w	r9, sp, #28
 800e774:	e884 0003 	stmia.w	r4, {r0, r1}
 800e778:	4648      	mov	r0, r9
 800e77a:	f7ff fadd 	bl	800dd38 <rcl_node_get_default_options>
 800e77e:	4640      	mov	r0, r8
 800e780:	f005 febc 	bl	80144fc <rcl_get_zero_initialized_node>
 800e784:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e788:	1d3b      	adds	r3, r7, #4
 800e78a:	f8cd 9000 	str.w	r9, [sp]
 800e78e:	4632      	mov	r2, r6
 800e790:	e884 0003 	stmia.w	r4, {r0, r1}
 800e794:	4629      	mov	r1, r5
 800e796:	4620      	mov	r0, r4
 800e798:	f005 feba 	bl	8014510 <rcl_node_init>
 800e79c:	b930      	cbnz	r0, 800e7ac <rclc_node_init_default+0x60>
 800e79e:	b00f      	add	sp, #60	; 0x3c
 800e7a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7a4:	200b      	movs	r0, #11
 800e7a6:	b00f      	add	sp, #60	; 0x3c
 800e7a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7ac:	9003      	str	r0, [sp, #12]
 800e7ae:	f000 f8d9 	bl	800e964 <rcutils_reset_error>
 800e7b2:	f000 f8d7 	bl	800e964 <rcutils_reset_error>
 800e7b6:	9803      	ldr	r0, [sp, #12]
 800e7b8:	b00f      	add	sp, #60	; 0x3c
 800e7ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7be:	200b      	movs	r0, #11
 800e7c0:	4770      	bx	lr
 800e7c2:	bf00      	nop

0800e7c4 <rclc_publisher_init_default>:
 800e7c4:	b368      	cbz	r0, 800e822 <rclc_publisher_init_default+0x5e>
 800e7c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ca:	460d      	mov	r5, r1
 800e7cc:	b09e      	sub	sp, #120	; 0x78
 800e7ce:	b321      	cbz	r1, 800e81a <rclc_publisher_init_default+0x56>
 800e7d0:	4616      	mov	r6, r2
 800e7d2:	b312      	cbz	r2, 800e81a <rclc_publisher_init_default+0x56>
 800e7d4:	461f      	mov	r7, r3
 800e7d6:	b303      	cbz	r3, 800e81a <rclc_publisher_init_default+0x56>
 800e7d8:	4604      	mov	r4, r0
 800e7da:	f7ff fae7 	bl	800ddac <rcl_get_zero_initialized_publisher>
 800e7de:	f10d 0810 	add.w	r8, sp, #16
 800e7e2:	6020      	str	r0, [r4, #0]
 800e7e4:	4640      	mov	r0, r8
 800e7e6:	f7ff fbdd 	bl	800dfa4 <rcl_publisher_get_default_options>
 800e7ea:	490f      	ldr	r1, [pc, #60]	; (800e828 <rclc_publisher_init_default+0x64>)
 800e7ec:	2250      	movs	r2, #80	; 0x50
 800e7ee:	4640      	mov	r0, r8
 800e7f0:	f00a fc54 	bl	801909c <memcpy>
 800e7f4:	f8cd 8000 	str.w	r8, [sp]
 800e7f8:	463b      	mov	r3, r7
 800e7fa:	4632      	mov	r2, r6
 800e7fc:	4629      	mov	r1, r5
 800e7fe:	4620      	mov	r0, r4
 800e800:	f7ff fada 	bl	800ddb8 <rcl_publisher_init>
 800e804:	b910      	cbnz	r0, 800e80c <rclc_publisher_init_default+0x48>
 800e806:	b01e      	add	sp, #120	; 0x78
 800e808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e80c:	9003      	str	r0, [sp, #12]
 800e80e:	f000 f8a9 	bl	800e964 <rcutils_reset_error>
 800e812:	9803      	ldr	r0, [sp, #12]
 800e814:	b01e      	add	sp, #120	; 0x78
 800e816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e81a:	200b      	movs	r0, #11
 800e81c:	b01e      	add	sp, #120	; 0x78
 800e81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e822:	200b      	movs	r0, #11
 800e824:	4770      	bx	lr
 800e826:	bf00      	nop
 800e828:	0801df30 	.word	0x0801df30

0800e82c <rclc_subscription_init_default>:
 800e82c:	b368      	cbz	r0, 800e88a <rclc_subscription_init_default+0x5e>
 800e82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e832:	460d      	mov	r5, r1
 800e834:	b0a0      	sub	sp, #128	; 0x80
 800e836:	b321      	cbz	r1, 800e882 <rclc_subscription_init_default+0x56>
 800e838:	4616      	mov	r6, r2
 800e83a:	b312      	cbz	r2, 800e882 <rclc_subscription_init_default+0x56>
 800e83c:	461f      	mov	r7, r3
 800e83e:	b303      	cbz	r3, 800e882 <rclc_subscription_init_default+0x56>
 800e840:	4604      	mov	r4, r0
 800e842:	f006 f945 	bl	8014ad0 <rcl_get_zero_initialized_subscription>
 800e846:	f10d 0810 	add.w	r8, sp, #16
 800e84a:	6020      	str	r0, [r4, #0]
 800e84c:	4640      	mov	r0, r8
 800e84e:	f006 fa3b 	bl	8014cc8 <rcl_subscription_get_default_options>
 800e852:	490f      	ldr	r1, [pc, #60]	; (800e890 <rclc_subscription_init_default+0x64>)
 800e854:	2250      	movs	r2, #80	; 0x50
 800e856:	4640      	mov	r0, r8
 800e858:	f00a fc20 	bl	801909c <memcpy>
 800e85c:	f8cd 8000 	str.w	r8, [sp]
 800e860:	463b      	mov	r3, r7
 800e862:	4632      	mov	r2, r6
 800e864:	4629      	mov	r1, r5
 800e866:	4620      	mov	r0, r4
 800e868:	f006 f938 	bl	8014adc <rcl_subscription_init>
 800e86c:	b910      	cbnz	r0, 800e874 <rclc_subscription_init_default+0x48>
 800e86e:	b020      	add	sp, #128	; 0x80
 800e870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e874:	9003      	str	r0, [sp, #12]
 800e876:	f000 f875 	bl	800e964 <rcutils_reset_error>
 800e87a:	9803      	ldr	r0, [sp, #12]
 800e87c:	b020      	add	sp, #128	; 0x80
 800e87e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e882:	200b      	movs	r0, #11
 800e884:	b020      	add	sp, #128	; 0x80
 800e886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e88a:	200b      	movs	r0, #11
 800e88c:	4770      	bx	lr
 800e88e:	bf00      	nop
 800e890:	0801df80 	.word	0x0801df80

0800e894 <__default_zero_allocate>:
 800e894:	f00a ba7e 	b.w	8018d94 <calloc>

0800e898 <__default_reallocate>:
 800e898:	f00b bc9a 	b.w	801a1d0 <realloc>

0800e89c <__default_deallocate>:
 800e89c:	f00a bbf6 	b.w	801908c <free>

0800e8a0 <__default_allocate>:
 800e8a0:	f00a bbec 	b.w	801907c <malloc>

0800e8a4 <rcutils_get_zero_initialized_allocator>:
 800e8a4:	b470      	push	{r4, r5, r6}
 800e8a6:	4d05      	ldr	r5, [pc, #20]	; (800e8bc <rcutils_get_zero_initialized_allocator+0x18>)
 800e8a8:	4606      	mov	r6, r0
 800e8aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e8ac:	4634      	mov	r4, r6
 800e8ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e8b0:	682b      	ldr	r3, [r5, #0]
 800e8b2:	6023      	str	r3, [r4, #0]
 800e8b4:	4630      	mov	r0, r6
 800e8b6:	bc70      	pop	{r4, r5, r6}
 800e8b8:	4770      	bx	lr
 800e8ba:	bf00      	nop
 800e8bc:	0801dfd0 	.word	0x0801dfd0

0800e8c0 <rcutils_set_default_allocator>:
 800e8c0:	b1a0      	cbz	r0, 800e8ec <rcutils_set_default_allocator+0x2c>
 800e8c2:	6801      	ldr	r1, [r0, #0]
 800e8c4:	b199      	cbz	r1, 800e8ee <rcutils_set_default_allocator+0x2e>
 800e8c6:	b430      	push	{r4, r5}
 800e8c8:	6844      	ldr	r4, [r0, #4]
 800e8ca:	b194      	cbz	r4, 800e8f2 <rcutils_set_default_allocator+0x32>
 800e8cc:	68c5      	ldr	r5, [r0, #12]
 800e8ce:	b15d      	cbz	r5, 800e8e8 <rcutils_set_default_allocator+0x28>
 800e8d0:	6883      	ldr	r3, [r0, #8]
 800e8d2:	b18b      	cbz	r3, 800e8f8 <rcutils_set_default_allocator+0x38>
 800e8d4:	4a09      	ldr	r2, [pc, #36]	; (800e8fc <rcutils_set_default_allocator+0x3c>)
 800e8d6:	e9c2 1400 	strd	r1, r4, [r2]
 800e8da:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800e8de:	2000      	movs	r0, #0
 800e8e0:	6110      	str	r0, [r2, #16]
 800e8e2:	2001      	movs	r0, #1
 800e8e4:	bc30      	pop	{r4, r5}
 800e8e6:	4770      	bx	lr
 800e8e8:	4628      	mov	r0, r5
 800e8ea:	e7fb      	b.n	800e8e4 <rcutils_set_default_allocator+0x24>
 800e8ec:	4770      	bx	lr
 800e8ee:	4608      	mov	r0, r1
 800e8f0:	4770      	bx	lr
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	bc30      	pop	{r4, r5}
 800e8f6:	4770      	bx	lr
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	e7f3      	b.n	800e8e4 <rcutils_set_default_allocator+0x24>
 800e8fc:	20000044 	.word	0x20000044

0800e900 <rcutils_get_default_allocator>:
 800e900:	b470      	push	{r4, r5, r6}
 800e902:	4d05      	ldr	r5, [pc, #20]	; (800e918 <rcutils_get_default_allocator+0x18>)
 800e904:	4606      	mov	r6, r0
 800e906:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e908:	4634      	mov	r4, r6
 800e90a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e90c:	682b      	ldr	r3, [r5, #0]
 800e90e:	6023      	str	r3, [r4, #0]
 800e910:	4630      	mov	r0, r6
 800e912:	bc70      	pop	{r4, r5, r6}
 800e914:	4770      	bx	lr
 800e916:	bf00      	nop
 800e918:	20000044 	.word	0x20000044

0800e91c <rcutils_allocator_is_valid>:
 800e91c:	b158      	cbz	r0, 800e936 <rcutils_allocator_is_valid+0x1a>
 800e91e:	6803      	ldr	r3, [r0, #0]
 800e920:	b143      	cbz	r3, 800e934 <rcutils_allocator_is_valid+0x18>
 800e922:	6843      	ldr	r3, [r0, #4]
 800e924:	b133      	cbz	r3, 800e934 <rcutils_allocator_is_valid+0x18>
 800e926:	68c3      	ldr	r3, [r0, #12]
 800e928:	b123      	cbz	r3, 800e934 <rcutils_allocator_is_valid+0x18>
 800e92a:	6880      	ldr	r0, [r0, #8]
 800e92c:	3800      	subs	r0, #0
 800e92e:	bf18      	it	ne
 800e930:	2001      	movne	r0, #1
 800e932:	4770      	bx	lr
 800e934:	4618      	mov	r0, r3
 800e936:	4770      	bx	lr

0800e938 <rcutils_get_error_string>:
 800e938:	4b06      	ldr	r3, [pc, #24]	; (800e954 <rcutils_get_error_string+0x1c>)
 800e93a:	781b      	ldrb	r3, [r3, #0]
 800e93c:	b13b      	cbz	r3, 800e94e <rcutils_get_error_string+0x16>
 800e93e:	4b06      	ldr	r3, [pc, #24]	; (800e958 <rcutils_get_error_string+0x20>)
 800e940:	781a      	ldrb	r2, [r3, #0]
 800e942:	b90a      	cbnz	r2, 800e948 <rcutils_get_error_string+0x10>
 800e944:	2201      	movs	r2, #1
 800e946:	701a      	strb	r2, [r3, #0]
 800e948:	4b04      	ldr	r3, [pc, #16]	; (800e95c <rcutils_get_error_string+0x24>)
 800e94a:	7818      	ldrb	r0, [r3, #0]
 800e94c:	4770      	bx	lr
 800e94e:	4b04      	ldr	r3, [pc, #16]	; (800e960 <rcutils_get_error_string+0x28>)
 800e950:	7818      	ldrb	r0, [r3, #0]
 800e952:	4770      	bx	lr
 800e954:	20009ed0 	.word	0x20009ed0
 800e958:	20009ed1 	.word	0x20009ed1
 800e95c:	2000a070 	.word	0x2000a070
 800e960:	0801dfe4 	.word	0x0801dfe4

0800e964 <rcutils_reset_error>:
 800e964:	b4d0      	push	{r4, r6, r7}
 800e966:	4a07      	ldr	r2, [pc, #28]	; (800e984 <rcutils_reset_error+0x20>)
 800e968:	4807      	ldr	r0, [pc, #28]	; (800e988 <rcutils_reset_error+0x24>)
 800e96a:	4c08      	ldr	r4, [pc, #32]	; (800e98c <rcutils_reset_error+0x28>)
 800e96c:	4908      	ldr	r1, [pc, #32]	; (800e990 <rcutils_reset_error+0x2c>)
 800e96e:	2300      	movs	r3, #0
 800e970:	2600      	movs	r6, #0
 800e972:	2700      	movs	r7, #0
 800e974:	8013      	strh	r3, [r2, #0]
 800e976:	7003      	strb	r3, [r0, #0]
 800e978:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800e97c:	7023      	strb	r3, [r4, #0]
 800e97e:	700b      	strb	r3, [r1, #0]
 800e980:	bcd0      	pop	{r4, r6, r7}
 800e982:	4770      	bx	lr
 800e984:	2000a078 	.word	0x2000a078
 800e988:	2000a070 	.word	0x2000a070
 800e98c:	20009ed1 	.word	0x20009ed1
 800e990:	20009ed0 	.word	0x20009ed0

0800e994 <rcutils_get_zero_initialized_string_map>:
 800e994:	4b01      	ldr	r3, [pc, #4]	; (800e99c <rcutils_get_zero_initialized_string_map+0x8>)
 800e996:	2000      	movs	r0, #0
 800e998:	6018      	str	r0, [r3, #0]
 800e99a:	4770      	bx	lr
 800e99c:	20009ed4 	.word	0x20009ed4

0800e9a0 <rcutils_string_map_reserve>:
 800e9a0:	2800      	cmp	r0, #0
 800e9a2:	d061      	beq.n	800ea68 <rcutils_string_map_reserve+0xc8>
 800e9a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e9a8:	6805      	ldr	r5, [r0, #0]
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	460c      	mov	r4, r1
 800e9ae:	4606      	mov	r6, r0
 800e9b0:	b12d      	cbz	r5, 800e9be <rcutils_string_map_reserve+0x1e>
 800e9b2:	68eb      	ldr	r3, [r5, #12]
 800e9b4:	42a3      	cmp	r3, r4
 800e9b6:	d906      	bls.n	800e9c6 <rcutils_string_map_reserve+0x26>
 800e9b8:	461c      	mov	r4, r3
 800e9ba:	2d00      	cmp	r5, #0
 800e9bc:	d1f9      	bne.n	800e9b2 <rcutils_string_map_reserve+0x12>
 800e9be:	201f      	movs	r0, #31
 800e9c0:	b003      	add	sp, #12
 800e9c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9c6:	68ab      	ldr	r3, [r5, #8]
 800e9c8:	42a3      	cmp	r3, r4
 800e9ca:	d049      	beq.n	800ea60 <rcutils_string_map_reserve+0xc0>
 800e9cc:	6a2f      	ldr	r7, [r5, #32]
 800e9ce:	2c00      	cmp	r4, #0
 800e9d0:	d035      	beq.n	800ea3e <rcutils_string_map_reserve+0x9e>
 800e9d2:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800e9d6:	d245      	bcs.n	800ea64 <rcutils_string_map_reserve+0xc4>
 800e9d8:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800e9dc:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800e9e0:	6828      	ldr	r0, [r5, #0]
 800e9e2:	4641      	mov	r1, r8
 800e9e4:	463a      	mov	r2, r7
 800e9e6:	47c8      	blx	r9
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d03b      	beq.n	800ea64 <rcutils_string_map_reserve+0xc4>
 800e9ec:	6833      	ldr	r3, [r6, #0]
 800e9ee:	463a      	mov	r2, r7
 800e9f0:	6018      	str	r0, [r3, #0]
 800e9f2:	4641      	mov	r1, r8
 800e9f4:	6858      	ldr	r0, [r3, #4]
 800e9f6:	47c8      	blx	r9
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	d033      	beq.n	800ea64 <rcutils_string_map_reserve+0xc4>
 800e9fc:	6835      	ldr	r5, [r6, #0]
 800e9fe:	68ab      	ldr	r3, [r5, #8]
 800ea00:	6068      	str	r0, [r5, #4]
 800ea02:	42a3      	cmp	r3, r4
 800ea04:	d227      	bcs.n	800ea56 <rcutils_string_map_reserve+0xb6>
 800ea06:	682a      	ldr	r2, [r5, #0]
 800ea08:	eb00 0108 	add.w	r1, r0, r8
 800ea0c:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800ea10:	428f      	cmp	r7, r1
 800ea12:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800ea16:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800ea1a:	d203      	bcs.n	800ea24 <rcutils_string_map_reserve+0x84>
 800ea1c:	eb02 0108 	add.w	r1, r2, r8
 800ea20:	428e      	cmp	r6, r1
 800ea22:	d323      	bcc.n	800ea6c <rcutils_string_map_reserve+0xcc>
 800ea24:	1ae3      	subs	r3, r4, r3
 800ea26:	009a      	lsls	r2, r3, #2
 800ea28:	4638      	mov	r0, r7
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	9201      	str	r2, [sp, #4]
 800ea2e:	f00a fb5d 	bl	80190ec <memset>
 800ea32:	9a01      	ldr	r2, [sp, #4]
 800ea34:	4630      	mov	r0, r6
 800ea36:	2100      	movs	r1, #0
 800ea38:	f00a fb58 	bl	80190ec <memset>
 800ea3c:	e00b      	b.n	800ea56 <rcutils_string_map_reserve+0xb6>
 800ea3e:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800ea42:	6828      	ldr	r0, [r5, #0]
 800ea44:	4639      	mov	r1, r7
 800ea46:	47c0      	blx	r8
 800ea48:	6833      	ldr	r3, [r6, #0]
 800ea4a:	4639      	mov	r1, r7
 800ea4c:	6858      	ldr	r0, [r3, #4]
 800ea4e:	601c      	str	r4, [r3, #0]
 800ea50:	47c0      	blx	r8
 800ea52:	6835      	ldr	r5, [r6, #0]
 800ea54:	606c      	str	r4, [r5, #4]
 800ea56:	2000      	movs	r0, #0
 800ea58:	60ac      	str	r4, [r5, #8]
 800ea5a:	b003      	add	sp, #12
 800ea5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea60:	2000      	movs	r0, #0
 800ea62:	e7ad      	b.n	800e9c0 <rcutils_string_map_reserve+0x20>
 800ea64:	200a      	movs	r0, #10
 800ea66:	e7ab      	b.n	800e9c0 <rcutils_string_map_reserve+0x20>
 800ea68:	200b      	movs	r0, #11
 800ea6a:	4770      	bx	lr
 800ea6c:	1f13      	subs	r3, r2, #4
 800ea6e:	f1ac 0c04 	sub.w	ip, ip, #4
 800ea72:	4498      	add	r8, r3
 800ea74:	4460      	add	r0, ip
 800ea76:	4462      	add	r2, ip
 800ea78:	2300      	movs	r3, #0
 800ea7a:	f842 3f04 	str.w	r3, [r2, #4]!
 800ea7e:	4542      	cmp	r2, r8
 800ea80:	f840 3f04 	str.w	r3, [r0, #4]!
 800ea84:	d1f9      	bne.n	800ea7a <rcutils_string_map_reserve+0xda>
 800ea86:	e7e6      	b.n	800ea56 <rcutils_string_map_reserve+0xb6>

0800ea88 <rcutils_string_map_init>:
 800ea88:	b082      	sub	sp, #8
 800ea8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea8c:	460e      	mov	r6, r1
 800ea8e:	a906      	add	r1, sp, #24
 800ea90:	e881 000c 	stmia.w	r1, {r2, r3}
 800ea94:	b380      	cbz	r0, 800eaf8 <rcutils_string_map_init+0x70>
 800ea96:	6807      	ldr	r7, [r0, #0]
 800ea98:	4604      	mov	r4, r0
 800ea9a:	b12f      	cbz	r7, 800eaa8 <rcutils_string_map_init+0x20>
 800ea9c:	251e      	movs	r5, #30
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eaa4:	b002      	add	sp, #8
 800eaa6:	4770      	bx	lr
 800eaa8:	a806      	add	r0, sp, #24
 800eaaa:	f7ff ff37 	bl	800e91c <rcutils_allocator_is_valid>
 800eaae:	b318      	cbz	r0, 800eaf8 <rcutils_string_map_init+0x70>
 800eab0:	9b06      	ldr	r3, [sp, #24]
 800eab2:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eab4:	2024      	movs	r0, #36	; 0x24
 800eab6:	4798      	blx	r3
 800eab8:	4605      	mov	r5, r0
 800eaba:	6020      	str	r0, [r4, #0]
 800eabc:	b310      	cbz	r0, 800eb04 <rcutils_string_map_init+0x7c>
 800eabe:	f10d 0e18 	add.w	lr, sp, #24
 800eac2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eac6:	f105 0c10 	add.w	ip, r5, #16
 800eaca:	e9c5 7700 	strd	r7, r7, [r5]
 800eace:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800ead2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ead6:	f8de 3000 	ldr.w	r3, [lr]
 800eada:	f8cc 3000 	str.w	r3, [ip]
 800eade:	4631      	mov	r1, r6
 800eae0:	4620      	mov	r0, r4
 800eae2:	f7ff ff5d 	bl	800e9a0 <rcutils_string_map_reserve>
 800eae6:	4605      	mov	r5, r0
 800eae8:	2800      	cmp	r0, #0
 800eaea:	d0d8      	beq.n	800ea9e <rcutils_string_map_init+0x16>
 800eaec:	9b07      	ldr	r3, [sp, #28]
 800eaee:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eaf0:	6820      	ldr	r0, [r4, #0]
 800eaf2:	4798      	blx	r3
 800eaf4:	6027      	str	r7, [r4, #0]
 800eaf6:	e7d2      	b.n	800ea9e <rcutils_string_map_init+0x16>
 800eaf8:	250b      	movs	r5, #11
 800eafa:	4628      	mov	r0, r5
 800eafc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eb00:	b002      	add	sp, #8
 800eb02:	4770      	bx	lr
 800eb04:	250a      	movs	r5, #10
 800eb06:	e7ca      	b.n	800ea9e <rcutils_string_map_init+0x16>

0800eb08 <rcutils_string_map_fini>:
 800eb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb0c:	b082      	sub	sp, #8
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	d039      	beq.n	800eb86 <rcutils_string_map_fini+0x7e>
 800eb12:	6804      	ldr	r4, [r0, #0]
 800eb14:	4606      	mov	r6, r0
 800eb16:	2c00      	cmp	r4, #0
 800eb18:	d031      	beq.n	800eb7e <rcutils_string_map_fini+0x76>
 800eb1a:	68a3      	ldr	r3, [r4, #8]
 800eb1c:	b323      	cbz	r3, 800eb68 <rcutils_string_map_fini+0x60>
 800eb1e:	2500      	movs	r5, #0
 800eb20:	6822      	ldr	r2, [r4, #0]
 800eb22:	46a8      	mov	r8, r5
 800eb24:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800eb28:	b1d8      	cbz	r0, 800eb62 <rcutils_string_map_fini+0x5a>
 800eb2a:	6a21      	ldr	r1, [r4, #32]
 800eb2c:	6967      	ldr	r7, [r4, #20]
 800eb2e:	9101      	str	r1, [sp, #4]
 800eb30:	47b8      	blx	r7
 800eb32:	e9d4 2300 	ldrd	r2, r3, [r4]
 800eb36:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800eb3a:	9901      	ldr	r1, [sp, #4]
 800eb3c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb40:	47b8      	blx	r7
 800eb42:	68e3      	ldr	r3, [r4, #12]
 800eb44:	6862      	ldr	r2, [r4, #4]
 800eb46:	3b01      	subs	r3, #1
 800eb48:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800eb4c:	60e3      	str	r3, [r4, #12]
 800eb4e:	6834      	ldr	r4, [r6, #0]
 800eb50:	68a3      	ldr	r3, [r4, #8]
 800eb52:	3501      	adds	r5, #1
 800eb54:	429d      	cmp	r5, r3
 800eb56:	d207      	bcs.n	800eb68 <rcutils_string_map_fini+0x60>
 800eb58:	6822      	ldr	r2, [r4, #0]
 800eb5a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	d1e3      	bne.n	800eb2a <rcutils_string_map_fini+0x22>
 800eb62:	3501      	adds	r5, #1
 800eb64:	429d      	cmp	r5, r3
 800eb66:	d3dd      	bcc.n	800eb24 <rcutils_string_map_fini+0x1c>
 800eb68:	2100      	movs	r1, #0
 800eb6a:	4630      	mov	r0, r6
 800eb6c:	f7ff ff18 	bl	800e9a0 <rcutils_string_map_reserve>
 800eb70:	4604      	mov	r4, r0
 800eb72:	b920      	cbnz	r0, 800eb7e <rcutils_string_map_fini+0x76>
 800eb74:	6830      	ldr	r0, [r6, #0]
 800eb76:	6943      	ldr	r3, [r0, #20]
 800eb78:	6a01      	ldr	r1, [r0, #32]
 800eb7a:	4798      	blx	r3
 800eb7c:	6034      	str	r4, [r6, #0]
 800eb7e:	4620      	mov	r0, r4
 800eb80:	b002      	add	sp, #8
 800eb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb86:	240b      	movs	r4, #11
 800eb88:	4620      	mov	r0, r4
 800eb8a:	b002      	add	sp, #8
 800eb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eb90 <rcutils_string_map_getn>:
 800eb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb94:	b082      	sub	sp, #8
 800eb96:	b308      	cbz	r0, 800ebdc <rcutils_string_map_getn+0x4c>
 800eb98:	6804      	ldr	r4, [r0, #0]
 800eb9a:	b304      	cbz	r4, 800ebde <rcutils_string_map_getn+0x4e>
 800eb9c:	460d      	mov	r5, r1
 800eb9e:	b1e9      	cbz	r1, 800ebdc <rcutils_string_map_getn+0x4c>
 800eba0:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800eba4:	6827      	ldr	r7, [r4, #0]
 800eba6:	f1b9 0f00 	cmp.w	r9, #0
 800ebaa:	d017      	beq.n	800ebdc <rcutils_string_map_getn+0x4c>
 800ebac:	4690      	mov	r8, r2
 800ebae:	3f04      	subs	r7, #4
 800ebb0:	2600      	movs	r6, #0
 800ebb2:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800ebb6:	9101      	str	r1, [sp, #4]
 800ebb8:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800ebbc:	4608      	mov	r0, r1
 800ebbe:	3601      	adds	r6, #1
 800ebc0:	b151      	cbz	r1, 800ebd8 <rcutils_string_map_getn+0x48>
 800ebc2:	f7f1 fb17 	bl	80001f4 <strlen>
 800ebc6:	4540      	cmp	r0, r8
 800ebc8:	4602      	mov	r2, r0
 800ebca:	9901      	ldr	r1, [sp, #4]
 800ebcc:	bf38      	it	cc
 800ebce:	4642      	movcc	r2, r8
 800ebd0:	4628      	mov	r0, r5
 800ebd2:	f00b fc31 	bl	801a438 <strncmp>
 800ebd6:	b130      	cbz	r0, 800ebe6 <rcutils_string_map_getn+0x56>
 800ebd8:	45b1      	cmp	r9, r6
 800ebda:	d1ea      	bne.n	800ebb2 <rcutils_string_map_getn+0x22>
 800ebdc:	2400      	movs	r4, #0
 800ebde:	4620      	mov	r0, r4
 800ebe0:	b002      	add	sp, #8
 800ebe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebe6:	6863      	ldr	r3, [r4, #4]
 800ebe8:	f853 400a 	ldr.w	r4, [r3, sl]
 800ebec:	4620      	mov	r0, r4
 800ebee:	b002      	add	sp, #8
 800ebf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ebf4 <rcutils_system_time_now>:
 800ebf4:	b310      	cbz	r0, 800ec3c <rcutils_system_time_now+0x48>
 800ebf6:	b570      	push	{r4, r5, r6, lr}
 800ebf8:	b084      	sub	sp, #16
 800ebfa:	4669      	mov	r1, sp
 800ebfc:	4604      	mov	r4, r0
 800ebfe:	2001      	movs	r0, #1
 800ec00:	f7f4 f9d2 	bl	8002fa8 <clock_gettime>
 800ec04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec08:	2800      	cmp	r0, #0
 800ec0a:	f171 0300 	sbcs.w	r3, r1, #0
 800ec0e:	db12      	blt.n	800ec36 <rcutils_system_time_now+0x42>
 800ec10:	9d02      	ldr	r5, [sp, #8]
 800ec12:	2d00      	cmp	r5, #0
 800ec14:	db0c      	blt.n	800ec30 <rcutils_system_time_now+0x3c>
 800ec16:	4e0a      	ldr	r6, [pc, #40]	; (800ec40 <rcutils_system_time_now+0x4c>)
 800ec18:	fba0 2306 	umull	r2, r3, r0, r6
 800ec1c:	1952      	adds	r2, r2, r5
 800ec1e:	fb06 3301 	mla	r3, r6, r1, r3
 800ec22:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800ec26:	2000      	movs	r0, #0
 800ec28:	e9c4 2300 	strd	r2, r3, [r4]
 800ec2c:	b004      	add	sp, #16
 800ec2e:	bd70      	pop	{r4, r5, r6, pc}
 800ec30:	ea50 0301 	orrs.w	r3, r0, r1
 800ec34:	d1ef      	bne.n	800ec16 <rcutils_system_time_now+0x22>
 800ec36:	2002      	movs	r0, #2
 800ec38:	b004      	add	sp, #16
 800ec3a:	bd70      	pop	{r4, r5, r6, pc}
 800ec3c:	200b      	movs	r0, #11
 800ec3e:	4770      	bx	lr
 800ec40:	3b9aca00 	.word	0x3b9aca00

0800ec44 <rcutils_steady_time_now>:
 800ec44:	b310      	cbz	r0, 800ec8c <rcutils_steady_time_now+0x48>
 800ec46:	b570      	push	{r4, r5, r6, lr}
 800ec48:	b084      	sub	sp, #16
 800ec4a:	4669      	mov	r1, sp
 800ec4c:	4604      	mov	r4, r0
 800ec4e:	2000      	movs	r0, #0
 800ec50:	f7f4 f9aa 	bl	8002fa8 <clock_gettime>
 800ec54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	f171 0300 	sbcs.w	r3, r1, #0
 800ec5e:	db12      	blt.n	800ec86 <rcutils_steady_time_now+0x42>
 800ec60:	9d02      	ldr	r5, [sp, #8]
 800ec62:	2d00      	cmp	r5, #0
 800ec64:	db0c      	blt.n	800ec80 <rcutils_steady_time_now+0x3c>
 800ec66:	4e0a      	ldr	r6, [pc, #40]	; (800ec90 <rcutils_steady_time_now+0x4c>)
 800ec68:	fba0 2306 	umull	r2, r3, r0, r6
 800ec6c:	1952      	adds	r2, r2, r5
 800ec6e:	fb06 3301 	mla	r3, r6, r1, r3
 800ec72:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800ec76:	2000      	movs	r0, #0
 800ec78:	e9c4 2300 	strd	r2, r3, [r4]
 800ec7c:	b004      	add	sp, #16
 800ec7e:	bd70      	pop	{r4, r5, r6, pc}
 800ec80:	ea50 0301 	orrs.w	r3, r0, r1
 800ec84:	d1ef      	bne.n	800ec66 <rcutils_steady_time_now+0x22>
 800ec86:	2002      	movs	r0, #2
 800ec88:	b004      	add	sp, #16
 800ec8a:	bd70      	pop	{r4, r5, r6, pc}
 800ec8c:	200b      	movs	r0, #11
 800ec8e:	4770      	bx	lr
 800ec90:	3b9aca00 	.word	0x3b9aca00

0800ec94 <rmw_get_zero_initialized_init_options>:
 800ec94:	b510      	push	{r4, lr}
 800ec96:	2238      	movs	r2, #56	; 0x38
 800ec98:	4604      	mov	r4, r0
 800ec9a:	2100      	movs	r1, #0
 800ec9c:	f00a fa26 	bl	80190ec <memset>
 800eca0:	f104 0010 	add.w	r0, r4, #16
 800eca4:	f000 f808 	bl	800ecb8 <rmw_get_default_security_options>
 800eca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ecac:	60e3      	str	r3, [r4, #12]
 800ecae:	4620      	mov	r0, r4
 800ecb0:	bd10      	pop	{r4, pc}
 800ecb2:	bf00      	nop

0800ecb4 <rmw_get_default_publisher_options>:
 800ecb4:	2000      	movs	r0, #0
 800ecb6:	4770      	bx	lr

0800ecb8 <rmw_get_default_security_options>:
 800ecb8:	2200      	movs	r2, #0
 800ecba:	7002      	strb	r2, [r0, #0]
 800ecbc:	6042      	str	r2, [r0, #4]
 800ecbe:	4770      	bx	lr

0800ecc0 <rmw_validate_full_topic_name>:
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	d062      	beq.n	800ed8a <rmw_validate_full_topic_name+0xca>
 800ecc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecc8:	460d      	mov	r5, r1
 800ecca:	2900      	cmp	r1, #0
 800eccc:	d05f      	beq.n	800ed8e <rmw_validate_full_topic_name+0xce>
 800ecce:	4616      	mov	r6, r2
 800ecd0:	4604      	mov	r4, r0
 800ecd2:	f7f1 fa8f 	bl	80001f4 <strlen>
 800ecd6:	b148      	cbz	r0, 800ecec <rmw_validate_full_topic_name+0x2c>
 800ecd8:	7823      	ldrb	r3, [r4, #0]
 800ecda:	2b2f      	cmp	r3, #47	; 0x2f
 800ecdc:	d00d      	beq.n	800ecfa <rmw_validate_full_topic_name+0x3a>
 800ecde:	2302      	movs	r3, #2
 800ece0:	602b      	str	r3, [r5, #0]
 800ece2:	b13e      	cbz	r6, 800ecf4 <rmw_validate_full_topic_name+0x34>
 800ece4:	2000      	movs	r0, #0
 800ece6:	6030      	str	r0, [r6, #0]
 800ece8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecec:	2301      	movs	r3, #1
 800ecee:	602b      	str	r3, [r5, #0]
 800ecf0:	2e00      	cmp	r6, #0
 800ecf2:	d1f7      	bne.n	800ece4 <rmw_validate_full_topic_name+0x24>
 800ecf4:	2000      	movs	r0, #0
 800ecf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecfa:	1e47      	subs	r7, r0, #1
 800ecfc:	5de3      	ldrb	r3, [r4, r7]
 800ecfe:	2b2f      	cmp	r3, #47	; 0x2f
 800ed00:	d047      	beq.n	800ed92 <rmw_validate_full_topic_name+0xd2>
 800ed02:	1e63      	subs	r3, r4, #1
 800ed04:	eb03 0900 	add.w	r9, r3, r0
 800ed08:	f1c4 0e01 	rsb	lr, r4, #1
 800ed0c:	eb0e 0803 	add.w	r8, lr, r3
 800ed10:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ed14:	f021 0220 	bic.w	r2, r1, #32
 800ed18:	3a41      	subs	r2, #65	; 0x41
 800ed1a:	2a19      	cmp	r2, #25
 800ed1c:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800ed20:	d90c      	bls.n	800ed3c <rmw_validate_full_topic_name+0x7c>
 800ed22:	295f      	cmp	r1, #95	; 0x5f
 800ed24:	d00a      	beq.n	800ed3c <rmw_validate_full_topic_name+0x7c>
 800ed26:	f1bc 0f0a 	cmp.w	ip, #10
 800ed2a:	d907      	bls.n	800ed3c <rmw_validate_full_topic_name+0x7c>
 800ed2c:	2304      	movs	r3, #4
 800ed2e:	602b      	str	r3, [r5, #0]
 800ed30:	2e00      	cmp	r6, #0
 800ed32:	d0df      	beq.n	800ecf4 <rmw_validate_full_topic_name+0x34>
 800ed34:	f8c6 8000 	str.w	r8, [r6]
 800ed38:	2000      	movs	r0, #0
 800ed3a:	e7d5      	b.n	800ece8 <rmw_validate_full_topic_name+0x28>
 800ed3c:	454b      	cmp	r3, r9
 800ed3e:	d1e5      	bne.n	800ed0c <rmw_validate_full_topic_name+0x4c>
 800ed40:	f8df e084 	ldr.w	lr, [pc, #132]	; 800edc8 <rmw_validate_full_topic_name+0x108>
 800ed44:	2300      	movs	r3, #0
 800ed46:	f107 0801 	add.w	r8, r7, #1
 800ed4a:	e005      	b.n	800ed58 <rmw_validate_full_topic_name+0x98>
 800ed4c:	4611      	mov	r1, r2
 800ed4e:	4288      	cmp	r0, r1
 800ed50:	4613      	mov	r3, r2
 800ed52:	f104 0401 	add.w	r4, r4, #1
 800ed56:	d925      	bls.n	800eda4 <rmw_validate_full_topic_name+0xe4>
 800ed58:	429f      	cmp	r7, r3
 800ed5a:	f103 0201 	add.w	r2, r3, #1
 800ed5e:	d01e      	beq.n	800ed9e <rmw_validate_full_topic_name+0xde>
 800ed60:	7821      	ldrb	r1, [r4, #0]
 800ed62:	292f      	cmp	r1, #47	; 0x2f
 800ed64:	d1f2      	bne.n	800ed4c <rmw_validate_full_topic_name+0x8c>
 800ed66:	f894 c001 	ldrb.w	ip, [r4, #1]
 800ed6a:	1c5a      	adds	r2, r3, #1
 800ed6c:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 800ed70:	4611      	mov	r1, r2
 800ed72:	d024      	beq.n	800edbe <rmw_validate_full_topic_name+0xfe>
 800ed74:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800ed78:	075b      	lsls	r3, r3, #29
 800ed7a:	d5e8      	bpl.n	800ed4e <rmw_validate_full_topic_name+0x8e>
 800ed7c:	2306      	movs	r3, #6
 800ed7e:	602b      	str	r3, [r5, #0]
 800ed80:	2e00      	cmp	r6, #0
 800ed82:	d0b7      	beq.n	800ecf4 <rmw_validate_full_topic_name+0x34>
 800ed84:	6032      	str	r2, [r6, #0]
 800ed86:	2000      	movs	r0, #0
 800ed88:	e7ae      	b.n	800ece8 <rmw_validate_full_topic_name+0x28>
 800ed8a:	200b      	movs	r0, #11
 800ed8c:	4770      	bx	lr
 800ed8e:	200b      	movs	r0, #11
 800ed90:	e7aa      	b.n	800ece8 <rmw_validate_full_topic_name+0x28>
 800ed92:	2303      	movs	r3, #3
 800ed94:	602b      	str	r3, [r5, #0]
 800ed96:	2e00      	cmp	r6, #0
 800ed98:	d0ac      	beq.n	800ecf4 <rmw_validate_full_topic_name+0x34>
 800ed9a:	6037      	str	r7, [r6, #0]
 800ed9c:	e7aa      	b.n	800ecf4 <rmw_validate_full_topic_name+0x34>
 800ed9e:	4641      	mov	r1, r8
 800eda0:	1c7a      	adds	r2, r7, #1
 800eda2:	e7d4      	b.n	800ed4e <rmw_validate_full_topic_name+0x8e>
 800eda4:	28f7      	cmp	r0, #247	; 0xf7
 800eda6:	d802      	bhi.n	800edae <rmw_validate_full_topic_name+0xee>
 800eda8:	2000      	movs	r0, #0
 800edaa:	6028      	str	r0, [r5, #0]
 800edac:	e79c      	b.n	800ece8 <rmw_validate_full_topic_name+0x28>
 800edae:	2307      	movs	r3, #7
 800edb0:	602b      	str	r3, [r5, #0]
 800edb2:	2e00      	cmp	r6, #0
 800edb4:	d09e      	beq.n	800ecf4 <rmw_validate_full_topic_name+0x34>
 800edb6:	23f6      	movs	r3, #246	; 0xf6
 800edb8:	6033      	str	r3, [r6, #0]
 800edba:	2000      	movs	r0, #0
 800edbc:	e794      	b.n	800ece8 <rmw_validate_full_topic_name+0x28>
 800edbe:	2305      	movs	r3, #5
 800edc0:	602b      	str	r3, [r5, #0]
 800edc2:	2e00      	cmp	r6, #0
 800edc4:	d1de      	bne.n	800ed84 <rmw_validate_full_topic_name+0xc4>
 800edc6:	e795      	b.n	800ecf4 <rmw_validate_full_topic_name+0x34>
 800edc8:	0801e799 	.word	0x0801e799

0800edcc <rmw_uros_set_custom_transport>:
 800edcc:	b470      	push	{r4, r5, r6}
 800edce:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800edd2:	b162      	cbz	r2, 800edee <rmw_uros_set_custom_transport+0x22>
 800edd4:	b15b      	cbz	r3, 800edee <rmw_uros_set_custom_transport+0x22>
 800edd6:	b155      	cbz	r5, 800edee <rmw_uros_set_custom_transport+0x22>
 800edd8:	b14e      	cbz	r6, 800edee <rmw_uros_set_custom_transport+0x22>
 800edda:	4c06      	ldr	r4, [pc, #24]	; (800edf4 <rmw_uros_set_custom_transport+0x28>)
 800eddc:	7020      	strb	r0, [r4, #0]
 800edde:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ede2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ede6:	6166      	str	r6, [r4, #20]
 800ede8:	2000      	movs	r0, #0
 800edea:	bc70      	pop	{r4, r5, r6}
 800edec:	4770      	bx	lr
 800edee:	200b      	movs	r0, #11
 800edf0:	bc70      	pop	{r4, r5, r6}
 800edf2:	4770      	bx	lr
 800edf4:	2000a088 	.word	0x2000a088

0800edf8 <rmw_init_options_init>:
 800edf8:	b084      	sub	sp, #16
 800edfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edfe:	ad09      	add	r5, sp, #36	; 0x24
 800ee00:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800ee04:	b130      	cbz	r0, 800ee14 <rmw_init_options_init+0x1c>
 800ee06:	4604      	mov	r4, r0
 800ee08:	4628      	mov	r0, r5
 800ee0a:	f7ff fd87 	bl	800e91c <rcutils_allocator_is_valid>
 800ee0e:	b108      	cbz	r0, 800ee14 <rmw_init_options_init+0x1c>
 800ee10:	68a3      	ldr	r3, [r4, #8]
 800ee12:	b123      	cbz	r3, 800ee1e <rmw_init_options_init+0x26>
 800ee14:	200b      	movs	r0, #11
 800ee16:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee1a:	b004      	add	sp, #16
 800ee1c:	4770      	bx	lr
 800ee1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee20:	4f1c      	ldr	r7, [pc, #112]	; (800ee94 <rmw_init_options_init+0x9c>)
 800ee22:	682e      	ldr	r6, [r5, #0]
 800ee24:	683d      	ldr	r5, [r7, #0]
 800ee26:	60a5      	str	r5, [r4, #8]
 800ee28:	f04f 0800 	mov.w	r8, #0
 800ee2c:	f04f 0900 	mov.w	r9, #0
 800ee30:	f104 0520 	add.w	r5, r4, #32
 800ee34:	e9c4 8900 	strd	r8, r9, [r4]
 800ee38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ee3a:	4b17      	ldr	r3, [pc, #92]	; (800ee98 <rmw_init_options_init+0xa0>)
 800ee3c:	4817      	ldr	r0, [pc, #92]	; (800ee9c <rmw_init_options_init+0xa4>)
 800ee3e:	602e      	str	r6, [r5, #0]
 800ee40:	4917      	ldr	r1, [pc, #92]	; (800eea0 <rmw_init_options_init+0xa8>)
 800ee42:	61e3      	str	r3, [r4, #28]
 800ee44:	2203      	movs	r2, #3
 800ee46:	f000 ff37 	bl	800fcb8 <rmw_uxrce_init_init_options_impl_memory>
 800ee4a:	4814      	ldr	r0, [pc, #80]	; (800ee9c <rmw_init_options_init+0xa4>)
 800ee4c:	f007 fc92 	bl	8016774 <get_memory>
 800ee50:	b1e8      	cbz	r0, 800ee8e <rmw_init_options_init+0x96>
 800ee52:	4a14      	ldr	r2, [pc, #80]	; (800eea4 <rmw_init_options_init+0xac>)
 800ee54:	68c3      	ldr	r3, [r0, #12]
 800ee56:	6851      	ldr	r1, [r2, #4]
 800ee58:	7810      	ldrb	r0, [r2, #0]
 800ee5a:	6363      	str	r3, [r4, #52]	; 0x34
 800ee5c:	7418      	strb	r0, [r3, #16]
 800ee5e:	6159      	str	r1, [r3, #20]
 800ee60:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800ee64:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800ee68:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800ee6c:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800ee70:	f003 fdd4 	bl	8012a1c <uxr_nanos>
 800ee74:	f00b f940 	bl	801a0f8 <srand>
 800ee78:	f00b f96c 	bl	801a154 <rand>
 800ee7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee7e:	6298      	str	r0, [r3, #40]	; 0x28
 800ee80:	2800      	cmp	r0, #0
 800ee82:	d0f9      	beq.n	800ee78 <rmw_init_options_init+0x80>
 800ee84:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee88:	2000      	movs	r0, #0
 800ee8a:	b004      	add	sp, #16
 800ee8c:	4770      	bx	lr
 800ee8e:	2001      	movs	r0, #1
 800ee90:	e7c1      	b.n	800ee16 <rmw_init_options_init+0x1e>
 800ee92:	bf00      	nop
 800ee94:	0801e77c 	.word	0x0801e77c
 800ee98:	0801dfe8 	.word	0x0801dfe8
 800ee9c:	2000d3a4 	.word	0x2000d3a4
 800eea0:	2000cff8 	.word	0x2000cff8
 800eea4:	2000a088 	.word	0x2000a088

0800eea8 <rmw_init_options_copy>:
 800eea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeaa:	b158      	cbz	r0, 800eec4 <rmw_init_options_copy+0x1c>
 800eeac:	460e      	mov	r6, r1
 800eeae:	b149      	cbz	r1, 800eec4 <rmw_init_options_copy+0x1c>
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	6880      	ldr	r0, [r0, #8]
 800eeb4:	b120      	cbz	r0, 800eec0 <rmw_init_options_copy+0x18>
 800eeb6:	4b1b      	ldr	r3, [pc, #108]	; (800ef24 <rmw_init_options_copy+0x7c>)
 800eeb8:	6819      	ldr	r1, [r3, #0]
 800eeba:	f7f1 f991 	bl	80001e0 <strcmp>
 800eebe:	bb60      	cbnz	r0, 800ef1a <rmw_init_options_copy+0x72>
 800eec0:	68b3      	ldr	r3, [r6, #8]
 800eec2:	b113      	cbz	r3, 800eeca <rmw_init_options_copy+0x22>
 800eec4:	230b      	movs	r3, #11
 800eec6:	4618      	mov	r0, r3
 800eec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeca:	4623      	mov	r3, r4
 800eecc:	4632      	mov	r2, r6
 800eece:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800eed2:	681d      	ldr	r5, [r3, #0]
 800eed4:	6858      	ldr	r0, [r3, #4]
 800eed6:	6899      	ldr	r1, [r3, #8]
 800eed8:	68df      	ldr	r7, [r3, #12]
 800eeda:	60d7      	str	r7, [r2, #12]
 800eedc:	3310      	adds	r3, #16
 800eede:	4563      	cmp	r3, ip
 800eee0:	6015      	str	r5, [r2, #0]
 800eee2:	6050      	str	r0, [r2, #4]
 800eee4:	6091      	str	r1, [r2, #8]
 800eee6:	f102 0210 	add.w	r2, r2, #16
 800eeea:	d1f2      	bne.n	800eed2 <rmw_init_options_copy+0x2a>
 800eeec:	6819      	ldr	r1, [r3, #0]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	480d      	ldr	r0, [pc, #52]	; (800ef28 <rmw_init_options_copy+0x80>)
 800eef2:	6053      	str	r3, [r2, #4]
 800eef4:	6011      	str	r1, [r2, #0]
 800eef6:	f007 fc3d 	bl	8016774 <get_memory>
 800eefa:	b188      	cbz	r0, 800ef20 <rmw_init_options_copy+0x78>
 800eefc:	68c5      	ldr	r5, [r0, #12]
 800eefe:	6375      	str	r5, [r6, #52]	; 0x34
 800ef00:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800ef02:	3610      	adds	r6, #16
 800ef04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ef06:	f105 0410 	add.w	r4, r5, #16
 800ef0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef0c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ef10:	2300      	movs	r3, #0
 800ef12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ef16:	4618      	mov	r0, r3
 800ef18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef1a:	230c      	movs	r3, #12
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef20:	2301      	movs	r3, #1
 800ef22:	e7d0      	b.n	800eec6 <rmw_init_options_copy+0x1e>
 800ef24:	0801e77c 	.word	0x0801e77c
 800ef28:	2000d3a4 	.word	0x2000d3a4

0800ef2c <rmw_init_options_fini>:
 800ef2c:	2800      	cmp	r0, #0
 800ef2e:	d036      	beq.n	800ef9e <rmw_init_options_fini+0x72>
 800ef30:	b530      	push	{r4, r5, lr}
 800ef32:	4604      	mov	r4, r0
 800ef34:	b08f      	sub	sp, #60	; 0x3c
 800ef36:	3020      	adds	r0, #32
 800ef38:	f7ff fcf0 	bl	800e91c <rcutils_allocator_is_valid>
 800ef3c:	b328      	cbz	r0, 800ef8a <rmw_init_options_fini+0x5e>
 800ef3e:	68a0      	ldr	r0, [r4, #8]
 800ef40:	b120      	cbz	r0, 800ef4c <rmw_init_options_fini+0x20>
 800ef42:	4b18      	ldr	r3, [pc, #96]	; (800efa4 <rmw_init_options_fini+0x78>)
 800ef44:	6819      	ldr	r1, [r3, #0]
 800ef46:	f7f1 f94b 	bl	80001e0 <strcmp>
 800ef4a:	bb30      	cbnz	r0, 800ef9a <rmw_init_options_fini+0x6e>
 800ef4c:	4b16      	ldr	r3, [pc, #88]	; (800efa8 <rmw_init_options_fini+0x7c>)
 800ef4e:	6819      	ldr	r1, [r3, #0]
 800ef50:	b1f9      	cbz	r1, 800ef92 <rmw_init_options_fini+0x66>
 800ef52:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ef54:	e001      	b.n	800ef5a <rmw_init_options_fini+0x2e>
 800ef56:	6889      	ldr	r1, [r1, #8]
 800ef58:	b1d9      	cbz	r1, 800ef92 <rmw_init_options_fini+0x66>
 800ef5a:	68cb      	ldr	r3, [r1, #12]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d1fa      	bne.n	800ef56 <rmw_init_options_fini+0x2a>
 800ef60:	4811      	ldr	r0, [pc, #68]	; (800efa8 <rmw_init_options_fini+0x7c>)
 800ef62:	f007 fc17 	bl	8016794 <put_memory>
 800ef66:	466d      	mov	r5, sp
 800ef68:	4668      	mov	r0, sp
 800ef6a:	f7ff fe93 	bl	800ec94 <rmw_get_zero_initialized_init_options>
 800ef6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef7a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ef7e:	e884 0003 	stmia.w	r4, {r0, r1}
 800ef82:	2300      	movs	r3, #0
 800ef84:	4618      	mov	r0, r3
 800ef86:	b00f      	add	sp, #60	; 0x3c
 800ef88:	bd30      	pop	{r4, r5, pc}
 800ef8a:	230b      	movs	r3, #11
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	b00f      	add	sp, #60	; 0x3c
 800ef90:	bd30      	pop	{r4, r5, pc}
 800ef92:	2301      	movs	r3, #1
 800ef94:	4618      	mov	r0, r3
 800ef96:	b00f      	add	sp, #60	; 0x3c
 800ef98:	bd30      	pop	{r4, r5, pc}
 800ef9a:	230c      	movs	r3, #12
 800ef9c:	e7f2      	b.n	800ef84 <rmw_init_options_fini+0x58>
 800ef9e:	230b      	movs	r3, #11
 800efa0:	4618      	mov	r0, r3
 800efa2:	4770      	bx	lr
 800efa4:	0801e77c 	.word	0x0801e77c
 800efa8:	2000d3a4 	.word	0x2000d3a4

0800efac <rmw_init>:
 800efac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efb0:	b082      	sub	sp, #8
 800efb2:	2800      	cmp	r0, #0
 800efb4:	f000 80d6 	beq.w	800f164 <rmw_init+0x1b8>
 800efb8:	460e      	mov	r6, r1
 800efba:	2900      	cmp	r1, #0
 800efbc:	f000 80d2 	beq.w	800f164 <rmw_init+0x1b8>
 800efc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800efc2:	4605      	mov	r5, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f000 80cd 	beq.w	800f164 <rmw_init+0x1b8>
 800efca:	4b79      	ldr	r3, [pc, #484]	; (800f1b0 <rmw_init+0x204>)
 800efcc:	6880      	ldr	r0, [r0, #8]
 800efce:	f8d3 9000 	ldr.w	r9, [r3]
 800efd2:	b128      	cbz	r0, 800efe0 <rmw_init+0x34>
 800efd4:	4649      	mov	r1, r9
 800efd6:	f7f1 f903 	bl	80001e0 <strcmp>
 800efda:	2800      	cmp	r0, #0
 800efdc:	f040 80cc 	bne.w	800f178 <rmw_init+0x1cc>
 800efe0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800efe4:	68eb      	ldr	r3, [r5, #12]
 800efe6:	61f3      	str	r3, [r6, #28]
 800efe8:	e9c6 0100 	strd	r0, r1, [r6]
 800efec:	2201      	movs	r2, #1
 800efee:	4971      	ldr	r1, [pc, #452]	; (800f1b4 <rmw_init+0x208>)
 800eff0:	4871      	ldr	r0, [pc, #452]	; (800f1b8 <rmw_init+0x20c>)
 800eff2:	f8c6 9008 	str.w	r9, [r6, #8]
 800eff6:	f000 fe07 	bl	800fc08 <rmw_uxrce_init_session_memory>
 800effa:	4870      	ldr	r0, [pc, #448]	; (800f1bc <rmw_init+0x210>)
 800effc:	4970      	ldr	r1, [pc, #448]	; (800f1c0 <rmw_init+0x214>)
 800effe:	2204      	movs	r2, #4
 800f000:	f000 fe3c 	bl	800fc7c <rmw_uxrce_init_static_input_buffer_memory>
 800f004:	486c      	ldr	r0, [pc, #432]	; (800f1b8 <rmw_init+0x20c>)
 800f006:	f007 fbb5 	bl	8016774 <get_memory>
 800f00a:	2800      	cmp	r0, #0
 800f00c:	f000 80af 	beq.w	800f16e <rmw_init+0x1c2>
 800f010:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 800f012:	68c4      	ldr	r4, [r0, #12]
 800f014:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f016:	7c39      	ldrb	r1, [r7, #16]
 800f018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f01c:	9001      	str	r0, [sp, #4]
 800f01e:	6a38      	ldr	r0, [r7, #32]
 800f020:	9000      	str	r0, [sp, #0]
 800f022:	f104 0a10 	add.w	sl, r4, #16
 800f026:	4650      	mov	r0, sl
 800f028:	f001 fca0 	bl	801096c <uxr_set_custom_transport_callbacks>
 800f02c:	f241 5294 	movw	r2, #5524	; 0x1594
 800f030:	f241 5398 	movw	r3, #5528	; 0x1598
 800f034:	f04f 0800 	mov.w	r8, #0
 800f038:	f241 509c 	movw	r0, #5532	; 0x159c
 800f03c:	f504 51ad 	add.w	r1, r4, #5536	; 0x15a0
 800f040:	f844 8002 	str.w	r8, [r4, r2]
 800f044:	f844 8003 	str.w	r8, [r4, r3]
 800f048:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f04c:	f504 735e 	add.w	r3, r4, #888	; 0x378
 800f050:	f844 8000 	str.w	r8, [r4, r0]
 800f054:	e9c4 33e1 	strd	r3, r3, [r4, #900]	; 0x384
 800f058:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 800f05c:	4859      	ldr	r0, [pc, #356]	; (800f1c4 <rmw_init+0x218>)
 800f05e:	f8c1 8000 	str.w	r8, [r1]
 800f062:	2201      	movs	r2, #1
 800f064:	e9c4 98da 	strd	r9, r8, [r4, #872]	; 0x368
 800f068:	4957      	ldr	r1, [pc, #348]	; (800f1c8 <rmw_init+0x21c>)
 800f06a:	64b4      	str	r4, [r6, #72]	; 0x48
 800f06c:	f000 fdb2 	bl	800fbd4 <rmw_uxrce_init_node_memory>
 800f070:	4956      	ldr	r1, [pc, #344]	; (800f1cc <rmw_init+0x220>)
 800f072:	4857      	ldr	r0, [pc, #348]	; (800f1d0 <rmw_init+0x224>)
 800f074:	2205      	movs	r2, #5
 800f076:	f000 fd93 	bl	800fba0 <rmw_uxrce_init_subscription_memory>
 800f07a:	4956      	ldr	r1, [pc, #344]	; (800f1d4 <rmw_init+0x228>)
 800f07c:	4856      	ldr	r0, [pc, #344]	; (800f1d8 <rmw_init+0x22c>)
 800f07e:	220a      	movs	r2, #10
 800f080:	f000 fd74 	bl	800fb6c <rmw_uxrce_init_publisher_memory>
 800f084:	4955      	ldr	r1, [pc, #340]	; (800f1dc <rmw_init+0x230>)
 800f086:	4856      	ldr	r0, [pc, #344]	; (800f1e0 <rmw_init+0x234>)
 800f088:	2201      	movs	r2, #1
 800f08a:	f000 fd3b 	bl	800fb04 <rmw_uxrce_init_service_memory>
 800f08e:	4955      	ldr	r1, [pc, #340]	; (800f1e4 <rmw_init+0x238>)
 800f090:	4855      	ldr	r0, [pc, #340]	; (800f1e8 <rmw_init+0x23c>)
 800f092:	2201      	movs	r2, #1
 800f094:	f000 fd50 	bl	800fb38 <rmw_uxrce_init_client_memory>
 800f098:	4954      	ldr	r1, [pc, #336]	; (800f1ec <rmw_init+0x240>)
 800f09a:	4855      	ldr	r0, [pc, #340]	; (800f1f0 <rmw_init+0x244>)
 800f09c:	220f      	movs	r2, #15
 800f09e:	f000 fdd1 	bl	800fc44 <rmw_uxrce_init_topic_memory>
 800f0a2:	4954      	ldr	r1, [pc, #336]	; (800f1f4 <rmw_init+0x248>)
 800f0a4:	4854      	ldr	r0, [pc, #336]	; (800f1f8 <rmw_init+0x24c>)
 800f0a6:	2203      	movs	r2, #3
 800f0a8:	f000 fe06 	bl	800fcb8 <rmw_uxrce_init_init_options_impl_memory>
 800f0ac:	4953      	ldr	r1, [pc, #332]	; (800f1fc <rmw_init+0x250>)
 800f0ae:	4854      	ldr	r0, [pc, #336]	; (800f200 <rmw_init+0x254>)
 800f0b0:	2204      	movs	r2, #4
 800f0b2:	f000 fe1b 	bl	800fcec <rmw_uxrce_init_wait_set_memory>
 800f0b6:	4953      	ldr	r1, [pc, #332]	; (800f204 <rmw_init+0x258>)
 800f0b8:	4853      	ldr	r0, [pc, #332]	; (800f208 <rmw_init+0x25c>)
 800f0ba:	2204      	movs	r2, #4
 800f0bc:	f000 fe32 	bl	800fd24 <rmw_uxrce_init_guard_condition_memory>
 800f0c0:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800f0c2:	6cb0      	ldr	r0, [r6, #72]	; 0x48
 800f0c4:	4642      	mov	r2, r8
 800f0c6:	f000 fd05 	bl	800fad4 <rmw_uxrce_transport_init>
 800f0ca:	4607      	mov	r7, r0
 800f0cc:	2800      	cmp	r0, #0
 800f0ce:	d158      	bne.n	800f182 <rmw_init+0x1d6>
 800f0d0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800f0d2:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 800f0d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f0d8:	4628      	mov	r0, r5
 800f0da:	f504 7122 	add.w	r1, r4, #648	; 0x288
 800f0de:	f001 fe6b 	bl	8010db8 <uxr_init_session>
 800f0e2:	494a      	ldr	r1, [pc, #296]	; (800f20c <rmw_init+0x260>)
 800f0e4:	4622      	mov	r2, r4
 800f0e6:	4628      	mov	r0, r5
 800f0e8:	f001 fe88 	bl	8010dfc <uxr_set_topic_callback>
 800f0ec:	4948      	ldr	r1, [pc, #288]	; (800f210 <rmw_init+0x264>)
 800f0ee:	463a      	mov	r2, r7
 800f0f0:	4628      	mov	r0, r5
 800f0f2:	f001 fe7f 	bl	8010df4 <uxr_set_status_callback>
 800f0f6:	4947      	ldr	r1, [pc, #284]	; (800f214 <rmw_init+0x268>)
 800f0f8:	463a      	mov	r2, r7
 800f0fa:	4628      	mov	r0, r5
 800f0fc:	f001 fe82 	bl	8010e04 <uxr_set_request_callback>
 800f100:	4945      	ldr	r1, [pc, #276]	; (800f218 <rmw_init+0x26c>)
 800f102:	463a      	mov	r2, r7
 800f104:	4628      	mov	r0, r5
 800f106:	f001 fe81 	bl	8010e0c <uxr_set_reply_callback>
 800f10a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800f10e:	2304      	movs	r3, #4
 800f110:	0092      	lsls	r2, r2, #2
 800f112:	f504 7165 	add.w	r1, r4, #916	; 0x394
 800f116:	4628      	mov	r0, r5
 800f118:	f001 feb8 	bl	8010e8c <uxr_create_input_reliable_stream>
 800f11c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800f120:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 800f124:	0092      	lsls	r2, r2, #2
 800f126:	2304      	movs	r3, #4
 800f128:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 800f12c:	4628      	mov	r0, r5
 800f12e:	f001 fe83 	bl	8010e38 <uxr_create_output_reliable_stream>
 800f132:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 800f136:	4628      	mov	r0, r5
 800f138:	f001 fea2 	bl	8010e80 <uxr_create_input_best_effort_stream>
 800f13c:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 800f140:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 800f144:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 800f148:	4628      	mov	r0, r5
 800f14a:	3114      	adds	r1, #20
 800f14c:	f001 fe62 	bl	8010e14 <uxr_create_output_best_effort_stream>
 800f150:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 800f154:	4628      	mov	r0, r5
 800f156:	f002 faf3 	bl	8011740 <uxr_create_session>
 800f15a:	b1f8      	cbz	r0, 800f19c <rmw_init+0x1f0>
 800f15c:	4638      	mov	r0, r7
 800f15e:	b002      	add	sp, #8
 800f160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f164:	270b      	movs	r7, #11
 800f166:	4638      	mov	r0, r7
 800f168:	b002      	add	sp, #8
 800f16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f16e:	2701      	movs	r7, #1
 800f170:	4638      	mov	r0, r7
 800f172:	b002      	add	sp, #8
 800f174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f178:	270c      	movs	r7, #12
 800f17a:	4638      	mov	r0, r7
 800f17c:	b002      	add	sp, #8
 800f17e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f182:	4650      	mov	r0, sl
 800f184:	f001 fc32 	bl	80109ec <uxr_close_custom_transport>
 800f188:	480b      	ldr	r0, [pc, #44]	; (800f1b8 <rmw_init+0x20c>)
 800f18a:	4621      	mov	r1, r4
 800f18c:	f007 fb02 	bl	8016794 <put_memory>
 800f190:	4638      	mov	r0, r7
 800f192:	f8c6 8048 	str.w	r8, [r6, #72]	; 0x48
 800f196:	b002      	add	sp, #8
 800f198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f19c:	4650      	mov	r0, sl
 800f19e:	f001 fc25 	bl	80109ec <uxr_close_custom_transport>
 800f1a2:	4805      	ldr	r0, [pc, #20]	; (800f1b8 <rmw_init+0x20c>)
 800f1a4:	4621      	mov	r1, r4
 800f1a6:	f007 faf5 	bl	8016794 <put_memory>
 800f1aa:	64b7      	str	r7, [r6, #72]	; 0x48
 800f1ac:	2701      	movs	r7, #1
 800f1ae:	e7d5      	b.n	800f15c <rmw_init+0x1b0>
 800f1b0:	0801e77c 	.word	0x0801e77c
 800f1b4:	2000d480 	.word	0x2000d480
 800f1b8:	2000d250 	.word	0x2000d250
 800f1bc:	2000a0a8 	.word	0x2000a0a8
 800f1c0:	2000ae88 	.word	0x2000ae88
 800f1c4:	2000d07c 	.word	0x2000d07c
 800f1c8:	2000d260 	.word	0x2000d260
 800f1cc:	2000a9b0 	.word	0x2000a9b0
 800f1d0:	2000d314 	.word	0x2000d314
 800f1d4:	2000a0c8 	.word	0x2000a0c8
 800f1d8:	2000a0b8 	.word	0x2000a0b8
 800f1dc:	2000d3b8 	.word	0x2000d3b8
 800f1e0:	2000d304 	.word	0x2000d304
 800f1e4:	2000adc0 	.word	0x2000adc0
 800f1e8:	2000a938 	.word	0x2000a938
 800f1ec:	2000d08c 	.word	0x2000d08c
 800f1f0:	2000d240 	.word	0x2000d240
 800f1f4:	2000cff8 	.word	0x2000cff8
 800f1f8:	2000d3a4 	.word	0x2000d3a4
 800f1fc:	2000cf88 	.word	0x2000cf88
 800f200:	2000ea28 	.word	0x2000ea28
 800f204:	2000d324 	.word	0x2000d324
 800f208:	2000d230 	.word	0x2000d230
 800f20c:	080165b5 	.word	0x080165b5
 800f210:	080165ad 	.word	0x080165ad
 800f214:	08016649 	.word	0x08016649
 800f218:	080166e1 	.word	0x080166e1

0800f21c <rmw_context_fini>:
 800f21c:	4b17      	ldr	r3, [pc, #92]	; (800f27c <rmw_context_fini+0x60>)
 800f21e:	b570      	push	{r4, r5, r6, lr}
 800f220:	681c      	ldr	r4, [r3, #0]
 800f222:	4605      	mov	r5, r0
 800f224:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800f226:	b33c      	cbz	r4, 800f278 <rmw_context_fini+0x5c>
 800f228:	2600      	movs	r6, #0
 800f22a:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 800f22e:	691a      	ldr	r2, [r3, #16]
 800f230:	4282      	cmp	r2, r0
 800f232:	d018      	beq.n	800f266 <rmw_context_fini+0x4a>
 800f234:	2c00      	cmp	r4, #0
 800f236:	d1f8      	bne.n	800f22a <rmw_context_fini+0xe>
 800f238:	b188      	cbz	r0, 800f25e <rmw_context_fini+0x42>
 800f23a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f23e:	789b      	ldrb	r3, [r3, #2]
 800f240:	2b01      	cmp	r3, #1
 800f242:	bf14      	ite	ne
 800f244:	210a      	movne	r1, #10
 800f246:	2100      	moveq	r1, #0
 800f248:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f24c:	f002 fc3a 	bl	8011ac4 <uxr_delete_session_retries>
 800f250:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800f252:	f000 fd81 	bl	800fd58 <rmw_uxrce_fini_session_memory>
 800f256:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800f258:	3010      	adds	r0, #16
 800f25a:	f001 fbc7 	bl	80109ec <uxr_close_custom_transport>
 800f25e:	2300      	movs	r3, #0
 800f260:	4630      	mov	r0, r6
 800f262:	64ab      	str	r3, [r5, #72]	; 0x48
 800f264:	bd70      	pop	{r4, r5, r6, pc}
 800f266:	f103 0018 	add.w	r0, r3, #24
 800f26a:	f000 f89b 	bl	800f3a4 <rmw_destroy_node>
 800f26e:	4606      	mov	r6, r0
 800f270:	6ca8      	ldr	r0, [r5, #72]	; 0x48
 800f272:	2c00      	cmp	r4, #0
 800f274:	d1d9      	bne.n	800f22a <rmw_context_fini+0xe>
 800f276:	e7df      	b.n	800f238 <rmw_context_fini+0x1c>
 800f278:	4626      	mov	r6, r4
 800f27a:	e7dd      	b.n	800f238 <rmw_context_fini+0x1c>
 800f27c:	2000d07c 	.word	0x2000d07c

0800f280 <create_node>:
 800f280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f284:	b083      	sub	sp, #12
 800f286:	2b00      	cmp	r3, #0
 800f288:	d05f      	beq.n	800f34a <create_node+0xca>
 800f28a:	4606      	mov	r6, r0
 800f28c:	4835      	ldr	r0, [pc, #212]	; (800f364 <create_node+0xe4>)
 800f28e:	460f      	mov	r7, r1
 800f290:	4690      	mov	r8, r2
 800f292:	461d      	mov	r5, r3
 800f294:	f007 fa6e 	bl	8016774 <get_memory>
 800f298:	2800      	cmp	r0, #0
 800f29a:	d056      	beq.n	800f34a <create_node+0xca>
 800f29c:	68c4      	ldr	r4, [r0, #12]
 800f29e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800f2a0:	6123      	str	r3, [r4, #16]
 800f2a2:	f007 facf 	bl	8016844 <rmw_get_implementation_identifier>
 800f2a6:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 800f2aa:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800f2ae:	f8c4 9020 	str.w	r9, [r4, #32]
 800f2b2:	4630      	mov	r0, r6
 800f2b4:	f7f0 ff9e 	bl	80001f4 <strlen>
 800f2b8:	1c42      	adds	r2, r0, #1
 800f2ba:	2a3c      	cmp	r2, #60	; 0x3c
 800f2bc:	f104 0518 	add.w	r5, r4, #24
 800f2c0:	d840      	bhi.n	800f344 <create_node+0xc4>
 800f2c2:	4648      	mov	r0, r9
 800f2c4:	4631      	mov	r1, r6
 800f2c6:	f104 0968 	add.w	r9, r4, #104	; 0x68
 800f2ca:	f009 fee7 	bl	801909c <memcpy>
 800f2ce:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 800f2d2:	4638      	mov	r0, r7
 800f2d4:	f7f0 ff8e 	bl	80001f4 <strlen>
 800f2d8:	1c42      	adds	r2, r0, #1
 800f2da:	2a3c      	cmp	r2, #60	; 0x3c
 800f2dc:	d832      	bhi.n	800f344 <create_node+0xc4>
 800f2de:	4639      	mov	r1, r7
 800f2e0:	4648      	mov	r0, r9
 800f2e2:	f009 fedb 	bl	801909c <memcpy>
 800f2e6:	f241 5394 	movw	r3, #5524	; 0x1594
 800f2ea:	6922      	ldr	r2, [r4, #16]
 800f2ec:	5ad0      	ldrh	r0, [r2, r3]
 800f2ee:	2101      	movs	r1, #1
 800f2f0:	eb00 0c01 	add.w	ip, r0, r1
 800f2f4:	f822 c003 	strh.w	ip, [r2, r3]
 800f2f8:	f001 fb7c 	bl	80109f4 <uxr_object_id>
 800f2fc:	6160      	str	r0, [r4, #20]
 800f2fe:	783b      	ldrb	r3, [r7, #0]
 800f300:	2b2f      	cmp	r3, #47	; 0x2f
 800f302:	d127      	bne.n	800f354 <create_node+0xd4>
 800f304:	787b      	ldrb	r3, [r7, #1]
 800f306:	bb2b      	cbnz	r3, 800f354 <create_node+0xd4>
 800f308:	4a17      	ldr	r2, [pc, #92]	; (800f368 <create_node+0xe8>)
 800f30a:	4818      	ldr	r0, [pc, #96]	; (800f36c <create_node+0xec>)
 800f30c:	4633      	mov	r3, r6
 800f30e:	213c      	movs	r1, #60	; 0x3c
 800f310:	f00a ffe6 	bl	801a2e0 <sniprintf>
 800f314:	6920      	ldr	r0, [r4, #16]
 800f316:	4b15      	ldr	r3, [pc, #84]	; (800f36c <create_node+0xec>)
 800f318:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 800f31c:	9300      	str	r3, [sp, #0]
 800f31e:	2306      	movs	r3, #6
 800f320:	9301      	str	r3, [sp, #4]
 800f322:	6811      	ldr	r1, [r2, #0]
 800f324:	6962      	ldr	r2, [r4, #20]
 800f326:	fa1f f388 	uxth.w	r3, r8
 800f32a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f32e:	f001 f8eb 	bl	8010508 <uxr_buffer_create_participant_bin>
 800f332:	4602      	mov	r2, r0
 800f334:	6920      	ldr	r0, [r4, #16]
 800f336:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f33a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f33e:	f000 fe7b 	bl	8010038 <run_xrce_session>
 800f342:	b918      	cbnz	r0, 800f34c <create_node+0xcc>
 800f344:	4628      	mov	r0, r5
 800f346:	f000 fd0d 	bl	800fd64 <rmw_uxrce_fini_node_memory>
 800f34a:	2500      	movs	r5, #0
 800f34c:	4628      	mov	r0, r5
 800f34e:	b003      	add	sp, #12
 800f350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f354:	4a06      	ldr	r2, [pc, #24]	; (800f370 <create_node+0xf0>)
 800f356:	9600      	str	r6, [sp, #0]
 800f358:	463b      	mov	r3, r7
 800f35a:	213c      	movs	r1, #60	; 0x3c
 800f35c:	4803      	ldr	r0, [pc, #12]	; (800f36c <create_node+0xec>)
 800f35e:	f00a ffbf 	bl	801a2e0 <sniprintf>
 800f362:	e7d7      	b.n	800f314 <create_node+0x94>
 800f364:	2000d07c 	.word	0x2000d07c
 800f368:	0801e028 	.word	0x0801e028
 800f36c:	20009ed8 	.word	0x20009ed8
 800f370:	0801dfec 	.word	0x0801dfec

0800f374 <rmw_create_node>:
 800f374:	b199      	cbz	r1, 800f39e <rmw_create_node+0x2a>
 800f376:	b430      	push	{r4, r5}
 800f378:	4615      	mov	r5, r2
 800f37a:	461a      	mov	r2, r3
 800f37c:	780b      	ldrb	r3, [r1, #0]
 800f37e:	460c      	mov	r4, r1
 800f380:	b153      	cbz	r3, 800f398 <rmw_create_node+0x24>
 800f382:	b14d      	cbz	r5, 800f398 <rmw_create_node+0x24>
 800f384:	782b      	ldrb	r3, [r5, #0]
 800f386:	b13b      	cbz	r3, 800f398 <rmw_create_node+0x24>
 800f388:	b902      	cbnz	r2, 800f38c <rmw_create_node+0x18>
 800f38a:	69c2      	ldr	r2, [r0, #28]
 800f38c:	4603      	mov	r3, r0
 800f38e:	4629      	mov	r1, r5
 800f390:	4620      	mov	r0, r4
 800f392:	bc30      	pop	{r4, r5}
 800f394:	f7ff bf74 	b.w	800f280 <create_node>
 800f398:	2000      	movs	r0, #0
 800f39a:	bc30      	pop	{r4, r5}
 800f39c:	4770      	bx	lr
 800f39e:	2000      	movs	r0, #0
 800f3a0:	4770      	bx	lr
 800f3a2:	bf00      	nop

0800f3a4 <rmw_destroy_node>:
 800f3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	d066      	beq.n	800f478 <rmw_destroy_node+0xd4>
 800f3aa:	4607      	mov	r7, r0
 800f3ac:	6800      	ldr	r0, [r0, #0]
 800f3ae:	b128      	cbz	r0, 800f3bc <rmw_destroy_node+0x18>
 800f3b0:	4b34      	ldr	r3, [pc, #208]	; (800f484 <rmw_destroy_node+0xe0>)
 800f3b2:	6819      	ldr	r1, [r3, #0]
 800f3b4:	f7f0 ff14 	bl	80001e0 <strcmp>
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	d15d      	bne.n	800f478 <rmw_destroy_node+0xd4>
 800f3bc:	687c      	ldr	r4, [r7, #4]
 800f3be:	2c00      	cmp	r4, #0
 800f3c0:	d05a      	beq.n	800f478 <rmw_destroy_node+0xd4>
 800f3c2:	4b31      	ldr	r3, [pc, #196]	; (800f488 <rmw_destroy_node+0xe4>)
 800f3c4:	681d      	ldr	r5, [r3, #0]
 800f3c6:	2d00      	cmp	r5, #0
 800f3c8:	d059      	beq.n	800f47e <rmw_destroy_node+0xda>
 800f3ca:	2600      	movs	r6, #0
 800f3cc:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800f3d0:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 800f3d4:	429c      	cmp	r4, r3
 800f3d6:	d047      	beq.n	800f468 <rmw_destroy_node+0xc4>
 800f3d8:	2d00      	cmp	r5, #0
 800f3da:	d1f7      	bne.n	800f3cc <rmw_destroy_node+0x28>
 800f3dc:	4b2b      	ldr	r3, [pc, #172]	; (800f48c <rmw_destroy_node+0xe8>)
 800f3de:	681d      	ldr	r5, [r3, #0]
 800f3e0:	b15d      	cbz	r5, 800f3fa <rmw_destroy_node+0x56>
 800f3e2:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800f3e6:	6a0b      	ldr	r3, [r1, #32]
 800f3e8:	429c      	cmp	r4, r3
 800f3ea:	d1f9      	bne.n	800f3e0 <rmw_destroy_node+0x3c>
 800f3ec:	317c      	adds	r1, #124	; 0x7c
 800f3ee:	4638      	mov	r0, r7
 800f3f0:	f000 fb12 	bl	800fa18 <rmw_destroy_subscription>
 800f3f4:	4606      	mov	r6, r0
 800f3f6:	2d00      	cmp	r5, #0
 800f3f8:	d1f3      	bne.n	800f3e2 <rmw_destroy_node+0x3e>
 800f3fa:	4b25      	ldr	r3, [pc, #148]	; (800f490 <rmw_destroy_node+0xec>)
 800f3fc:	681d      	ldr	r5, [r3, #0]
 800f3fe:	b15d      	cbz	r5, 800f418 <rmw_destroy_node+0x74>
 800f400:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800f404:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800f406:	429c      	cmp	r4, r3
 800f408:	d1f9      	bne.n	800f3fe <rmw_destroy_node+0x5a>
 800f40a:	317c      	adds	r1, #124	; 0x7c
 800f40c:	4638      	mov	r0, r7
 800f40e:	f000 f9dd 	bl	800f7cc <rmw_destroy_service>
 800f412:	4606      	mov	r6, r0
 800f414:	2d00      	cmp	r5, #0
 800f416:	d1f3      	bne.n	800f400 <rmw_destroy_node+0x5c>
 800f418:	4b1e      	ldr	r3, [pc, #120]	; (800f494 <rmw_destroy_node+0xf0>)
 800f41a:	681d      	ldr	r5, [r3, #0]
 800f41c:	b15d      	cbz	r5, 800f436 <rmw_destroy_node+0x92>
 800f41e:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800f422:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 800f424:	429c      	cmp	r4, r3
 800f426:	d1f9      	bne.n	800f41c <rmw_destroy_node+0x78>
 800f428:	317c      	adds	r1, #124	; 0x7c
 800f42a:	4638      	mov	r0, r7
 800f42c:	f007 f9c6 	bl	80167bc <rmw_destroy_client>
 800f430:	4606      	mov	r6, r0
 800f432:	2d00      	cmp	r5, #0
 800f434:	d1f3      	bne.n	800f41e <rmw_destroy_node+0x7a>
 800f436:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800f43a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f43e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f442:	6819      	ldr	r1, [r3, #0]
 800f444:	f001 f814 	bl	8010470 <uxr_buffer_delete_entity>
 800f448:	4602      	mov	r2, r0
 800f44a:	6920      	ldr	r0, [r4, #16]
 800f44c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f450:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f454:	f000 fdf0 	bl	8010038 <run_xrce_session>
 800f458:	2800      	cmp	r0, #0
 800f45a:	bf08      	it	eq
 800f45c:	2602      	moveq	r6, #2
 800f45e:	4638      	mov	r0, r7
 800f460:	f000 fc80 	bl	800fd64 <rmw_uxrce_fini_node_memory>
 800f464:	4630      	mov	r0, r6
 800f466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f468:	3184      	adds	r1, #132	; 0x84
 800f46a:	4638      	mov	r0, r7
 800f46c:	f000 f95e 	bl	800f72c <rmw_destroy_publisher>
 800f470:	4606      	mov	r6, r0
 800f472:	2d00      	cmp	r5, #0
 800f474:	d1aa      	bne.n	800f3cc <rmw_destroy_node+0x28>
 800f476:	e7b1      	b.n	800f3dc <rmw_destroy_node+0x38>
 800f478:	2601      	movs	r6, #1
 800f47a:	4630      	mov	r0, r6
 800f47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f47e:	462e      	mov	r6, r5
 800f480:	e7ac      	b.n	800f3dc <rmw_destroy_node+0x38>
 800f482:	bf00      	nop
 800f484:	0801e77c 	.word	0x0801e77c
 800f488:	2000a0b8 	.word	0x2000a0b8
 800f48c:	2000d314 	.word	0x2000d314
 800f490:	2000d304 	.word	0x2000d304
 800f494:	2000a938 	.word	0x2000a938

0800f498 <rmw_node_get_graph_guard_condition>:
 800f498:	6843      	ldr	r3, [r0, #4]
 800f49a:	6918      	ldr	r0, [r3, #16]
 800f49c:	f500 705a 	add.w	r0, r0, #872	; 0x368
 800f4a0:	4770      	bx	lr
 800f4a2:	bf00      	nop

0800f4a4 <flush_session>:
 800f4a4:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800f4a6:	f002 b8d3 	b.w	8011650 <uxr_run_session_until_confirm_delivery>
 800f4aa:	bf00      	nop

0800f4ac <rmw_publish>:
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d053      	beq.n	800f558 <rmw_publish+0xac>
 800f4b0:	b570      	push	{r4, r5, r6, lr}
 800f4b2:	460d      	mov	r5, r1
 800f4b4:	b08e      	sub	sp, #56	; 0x38
 800f4b6:	2900      	cmp	r1, #0
 800f4b8:	d04b      	beq.n	800f552 <rmw_publish+0xa6>
 800f4ba:	4604      	mov	r4, r0
 800f4bc:	6800      	ldr	r0, [r0, #0]
 800f4be:	f000 fe3b 	bl	8010138 <is_uxrce_rmw_identifier_valid>
 800f4c2:	2800      	cmp	r0, #0
 800f4c4:	d045      	beq.n	800f552 <rmw_publish+0xa6>
 800f4c6:	6866      	ldr	r6, [r4, #4]
 800f4c8:	2e00      	cmp	r6, #0
 800f4ca:	d042      	beq.n	800f552 <rmw_publish+0xa6>
 800f4cc:	69b4      	ldr	r4, [r6, #24]
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	6923      	ldr	r3, [r4, #16]
 800f4d2:	4798      	blx	r3
 800f4d4:	69f3      	ldr	r3, [r6, #28]
 800f4d6:	9005      	str	r0, [sp, #20]
 800f4d8:	b113      	cbz	r3, 800f4e0 <rmw_publish+0x34>
 800f4da:	a805      	add	r0, sp, #20
 800f4dc:	4798      	blx	r3
 800f4de:	9805      	ldr	r0, [sp, #20]
 800f4e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f4e4:	691b      	ldr	r3, [r3, #16]
 800f4e6:	9000      	str	r0, [sp, #0]
 800f4e8:	6972      	ldr	r2, [r6, #20]
 800f4ea:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800f4ec:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800f4f0:	ab06      	add	r3, sp, #24
 800f4f2:	f003 fb33 	bl	8012b5c <uxr_prepare_output_stream>
 800f4f6:	b1d8      	cbz	r0, 800f530 <rmw_publish+0x84>
 800f4f8:	68a3      	ldr	r3, [r4, #8]
 800f4fa:	4628      	mov	r0, r5
 800f4fc:	a906      	add	r1, sp, #24
 800f4fe:	4798      	blx	r3
 800f500:	6a33      	ldr	r3, [r6, #32]
 800f502:	4604      	mov	r4, r0
 800f504:	b10b      	cbz	r3, 800f50a <rmw_publish+0x5e>
 800f506:	a806      	add	r0, sp, #24
 800f508:	4798      	blx	r3
 800f50a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800f50e:	2b01      	cmp	r3, #1
 800f510:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f514:	d022      	beq.n	800f55c <rmw_publish+0xb0>
 800f516:	6918      	ldr	r0, [r3, #16]
 800f518:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800f51a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f51e:	f002 f897 	bl	8011650 <uxr_run_session_until_confirm_delivery>
 800f522:	4020      	ands	r0, r4
 800f524:	b2c4      	uxtb	r4, r0
 800f526:	f084 0001 	eor.w	r0, r4, #1
 800f52a:	b2c0      	uxtb	r0, r0
 800f52c:	b00e      	add	sp, #56	; 0x38
 800f52e:	bd70      	pop	{r4, r5, r6, pc}
 800f530:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f534:	4a0c      	ldr	r2, [pc, #48]	; (800f568 <rmw_publish+0xbc>)
 800f536:	6918      	ldr	r0, [r3, #16]
 800f538:	9b05      	ldr	r3, [sp, #20]
 800f53a:	9300      	str	r3, [sp, #0]
 800f53c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800f540:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f544:	6972      	ldr	r2, [r6, #20]
 800f546:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800f548:	ab06      	add	r3, sp, #24
 800f54a:	f003 fb37 	bl	8012bbc <uxr_prepare_output_stream_fragmented>
 800f54e:	2800      	cmp	r0, #0
 800f550:	d1d2      	bne.n	800f4f8 <rmw_publish+0x4c>
 800f552:	2001      	movs	r0, #1
 800f554:	b00e      	add	sp, #56	; 0x38
 800f556:	bd70      	pop	{r4, r5, r6, pc}
 800f558:	2001      	movs	r0, #1
 800f55a:	4770      	bx	lr
 800f55c:	6918      	ldr	r0, [r3, #16]
 800f55e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f562:	f001 fcb9 	bl	8010ed8 <uxr_flash_output_streams>
 800f566:	e7de      	b.n	800f526 <rmw_publish+0x7a>
 800f568:	0800f4a5 	.word	0x0800f4a5

0800f56c <rmw_create_publisher>:
 800f56c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f570:	b087      	sub	sp, #28
 800f572:	2800      	cmp	r0, #0
 800f574:	f000 80cc 	beq.w	800f710 <rmw_create_publisher+0x1a4>
 800f578:	460e      	mov	r6, r1
 800f57a:	2900      	cmp	r1, #0
 800f57c:	f000 80c8 	beq.w	800f710 <rmw_create_publisher+0x1a4>
 800f580:	4604      	mov	r4, r0
 800f582:	6800      	ldr	r0, [r0, #0]
 800f584:	4615      	mov	r5, r2
 800f586:	4698      	mov	r8, r3
 800f588:	f000 fdd6 	bl	8010138 <is_uxrce_rmw_identifier_valid>
 800f58c:	2800      	cmp	r0, #0
 800f58e:	f000 80bf 	beq.w	800f710 <rmw_create_publisher+0x1a4>
 800f592:	2d00      	cmp	r5, #0
 800f594:	f000 80bc 	beq.w	800f710 <rmw_create_publisher+0x1a4>
 800f598:	782b      	ldrb	r3, [r5, #0]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	f000 80b8 	beq.w	800f710 <rmw_create_publisher+0x1a4>
 800f5a0:	f1b8 0f00 	cmp.w	r8, #0
 800f5a4:	f000 80b4 	beq.w	800f710 <rmw_create_publisher+0x1a4>
 800f5a8:	485c      	ldr	r0, [pc, #368]	; (800f71c <rmw_create_publisher+0x1b0>)
 800f5aa:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f5ae:	f007 f8e1 	bl	8016774 <get_memory>
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	f000 80ac 	beq.w	800f710 <rmw_create_publisher+0x1a4>
 800f5b8:	68c4      	ldr	r4, [r0, #12]
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800f5c0:	f007 f940 	bl	8016844 <rmw_get_implementation_identifier>
 800f5c4:	f104 0a98 	add.w	sl, r4, #152	; 0x98
 800f5c8:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800f5cc:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800f5d0:	4628      	mov	r0, r5
 800f5d2:	f7f0 fe0f 	bl	80001f4 <strlen>
 800f5d6:	3001      	adds	r0, #1
 800f5d8:	283c      	cmp	r0, #60	; 0x3c
 800f5da:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800f5de:	f200 8094 	bhi.w	800f70a <rmw_create_publisher+0x19e>
 800f5e2:	4a4f      	ldr	r2, [pc, #316]	; (800f720 <rmw_create_publisher+0x1b4>)
 800f5e4:	462b      	mov	r3, r5
 800f5e6:	213c      	movs	r1, #60	; 0x3c
 800f5e8:	4650      	mov	r0, sl
 800f5ea:	f00a fe79 	bl	801a2e0 <sniprintf>
 800f5ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f5f2:	e9c4 391f 	strd	r3, r9, [r4, #124]	; 0x7c
 800f5f6:	4641      	mov	r1, r8
 800f5f8:	2250      	movs	r2, #80	; 0x50
 800f5fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f5fe:	f009 fd4d 	bl	801909c <memcpy>
 800f602:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f606:	4947      	ldr	r1, [pc, #284]	; (800f724 <rmw_create_publisher+0x1b8>)
 800f608:	2b02      	cmp	r3, #2
 800f60a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f60e:	bf0c      	ite	eq
 800f610:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800f614:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800f618:	67a3      	str	r3, [r4, #120]	; 0x78
 800f61a:	2300      	movs	r3, #0
 800f61c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f620:	4630      	mov	r0, r6
 800f622:	f000 fd97 	bl	8010154 <get_message_typesupport_handle>
 800f626:	2800      	cmp	r0, #0
 800f628:	d06f      	beq.n	800f70a <rmw_create_publisher+0x19e>
 800f62a:	6842      	ldr	r2, [r0, #4]
 800f62c:	61a2      	str	r2, [r4, #24]
 800f62e:	2a00      	cmp	r2, #0
 800f630:	d06b      	beq.n	800f70a <rmw_create_publisher+0x19e>
 800f632:	4629      	mov	r1, r5
 800f634:	4643      	mov	r3, r8
 800f636:	4648      	mov	r0, r9
 800f638:	f007 f90a 	bl	8016850 <create_topic>
 800f63c:	6260      	str	r0, [r4, #36]	; 0x24
 800f63e:	2800      	cmp	r0, #0
 800f640:	d063      	beq.n	800f70a <rmw_create_publisher+0x19e>
 800f642:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f646:	f241 5398 	movw	r3, #5528	; 0x1598
 800f64a:	2103      	movs	r1, #3
 800f64c:	5ad0      	ldrh	r0, [r2, r3]
 800f64e:	1c45      	adds	r5, r0, #1
 800f650:	52d5      	strh	r5, [r2, r3]
 800f652:	f001 f9cf 	bl	80109f4 <uxr_object_id>
 800f656:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f65a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800f65e:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800f662:	6912      	ldr	r2, [r2, #16]
 800f664:	6120      	str	r0, [r4, #16]
 800f666:	f04f 0a06 	mov.w	sl, #6
 800f66a:	f8cd a000 	str.w	sl, [sp]
 800f66e:	6819      	ldr	r1, [r3, #0]
 800f670:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f674:	f502 7028 	add.w	r0, r2, #672	; 0x2a0
 800f678:	6922      	ldr	r2, [r4, #16]
 800f67a:	f000 ffab 	bl	80105d4 <uxr_buffer_create_publisher_bin>
 800f67e:	4602      	mov	r2, r0
 800f680:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f684:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f688:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f68c:	f000 fcd4 	bl	8010038 <run_xrce_session>
 800f690:	b3b8      	cbz	r0, 800f702 <rmw_create_publisher+0x196>
 800f692:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f696:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800f69a:	f241 539a 	movw	r3, #5530	; 0x159a
 800f69e:	2105      	movs	r1, #5
 800f6a0:	5ad0      	ldrh	r0, [r2, r3]
 800f6a2:	1c45      	adds	r5, r0, #1
 800f6a4:	52d5      	strh	r5, [r2, r3]
 800f6a6:	f001 f9a5 	bl	80109f4 <uxr_object_id>
 800f6aa:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800f6ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f6b2:	6915      	ldr	r5, [r2, #16]
 800f6b4:	6160      	str	r0, [r4, #20]
 800f6b6:	ae04      	add	r6, sp, #16
 800f6b8:	4641      	mov	r1, r8
 800f6ba:	4630      	mov	r0, r6
 800f6bc:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800f6c0:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800f6c4:	f000 fcd4 	bl	8010070 <convert_qos_profile>
 800f6c8:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f6cc:	f8cd a00c 	str.w	sl, [sp, #12]
 800f6d0:	9001      	str	r0, [sp, #4]
 800f6d2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f6d6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f6da:	9300      	str	r3, [sp, #0]
 800f6dc:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
 800f6e0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f6e4:	f8d8 1000 	ldr.w	r1, [r8]
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	f000 ffd1 	bl	8010690 <uxr_buffer_create_datawriter_bin>
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f6f4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f6f8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f6fc:	f000 fc9c 	bl	8010038 <run_xrce_session>
 800f700:	b938      	cbnz	r0, 800f712 <rmw_create_publisher+0x1a6>
 800f702:	4806      	ldr	r0, [pc, #24]	; (800f71c <rmw_create_publisher+0x1b0>)
 800f704:	4621      	mov	r1, r4
 800f706:	f007 f845 	bl	8016794 <put_memory>
 800f70a:	4638      	mov	r0, r7
 800f70c:	f000 fb42 	bl	800fd94 <rmw_uxrce_fini_publisher_memory>
 800f710:	2700      	movs	r7, #0
 800f712:	4638      	mov	r0, r7
 800f714:	b007      	add	sp, #28
 800f716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f71a:	bf00      	nop
 800f71c:	2000a0b8 	.word	0x2000a0b8
 800f720:	0801e028 	.word	0x0801e028
 800f724:	0801dff4 	.word	0x0801dff4

0800f728 <rmw_publisher_get_actual_qos>:
 800f728:	2000      	movs	r0, #0
 800f72a:	4770      	bx	lr

0800f72c <rmw_destroy_publisher>:
 800f72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f72e:	b128      	cbz	r0, 800f73c <rmw_destroy_publisher+0x10>
 800f730:	4604      	mov	r4, r0
 800f732:	6800      	ldr	r0, [r0, #0]
 800f734:	460d      	mov	r5, r1
 800f736:	f000 fcff 	bl	8010138 <is_uxrce_rmw_identifier_valid>
 800f73a:	b910      	cbnz	r0, 800f742 <rmw_destroy_publisher+0x16>
 800f73c:	2401      	movs	r4, #1
 800f73e:	4620      	mov	r0, r4
 800f740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f742:	6863      	ldr	r3, [r4, #4]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d0f9      	beq.n	800f73c <rmw_destroy_publisher+0x10>
 800f748:	2d00      	cmp	r5, #0
 800f74a:	d0f7      	beq.n	800f73c <rmw_destroy_publisher+0x10>
 800f74c:	6828      	ldr	r0, [r5, #0]
 800f74e:	f000 fcf3 	bl	8010138 <is_uxrce_rmw_identifier_valid>
 800f752:	2800      	cmp	r0, #0
 800f754:	d0f2      	beq.n	800f73c <rmw_destroy_publisher+0x10>
 800f756:	686c      	ldr	r4, [r5, #4]
 800f758:	2c00      	cmp	r4, #0
 800f75a:	d0ef      	beq.n	800f73c <rmw_destroy_publisher+0x10>
 800f75c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f75e:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800f762:	f007 f8d7 	bl	8016914 <destroy_topic>
 800f766:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800f76a:	6962      	ldr	r2, [r4, #20]
 800f76c:	6918      	ldr	r0, [r3, #16]
 800f76e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f772:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f776:	6819      	ldr	r1, [r3, #0]
 800f778:	f000 fe7a 	bl	8010470 <uxr_buffer_delete_entity>
 800f77c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800f780:	6922      	ldr	r2, [r4, #16]
 800f782:	4603      	mov	r3, r0
 800f784:	6908      	ldr	r0, [r1, #16]
 800f786:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f78a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f78e:	6809      	ldr	r1, [r1, #0]
 800f790:	461c      	mov	r4, r3
 800f792:	f000 fe6d 	bl	8010470 <uxr_buffer_delete_entity>
 800f796:	4606      	mov	r6, r0
 800f798:	6938      	ldr	r0, [r7, #16]
 800f79a:	4622      	mov	r2, r4
 800f79c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f7a0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f7a4:	f000 fc48 	bl	8010038 <run_xrce_session>
 800f7a8:	4604      	mov	r4, r0
 800f7aa:	6938      	ldr	r0, [r7, #16]
 800f7ac:	4632      	mov	r2, r6
 800f7ae:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f7b2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f7b6:	f000 fc3f 	bl	8010038 <run_xrce_session>
 800f7ba:	b12c      	cbz	r4, 800f7c8 <rmw_destroy_publisher+0x9c>
 800f7bc:	b120      	cbz	r0, 800f7c8 <rmw_destroy_publisher+0x9c>
 800f7be:	2400      	movs	r4, #0
 800f7c0:	4628      	mov	r0, r5
 800f7c2:	f000 fae7 	bl	800fd94 <rmw_uxrce_fini_publisher_memory>
 800f7c6:	e7ba      	b.n	800f73e <rmw_destroy_publisher+0x12>
 800f7c8:	2402      	movs	r4, #2
 800f7ca:	e7f9      	b.n	800f7c0 <rmw_destroy_publisher+0x94>

0800f7cc <rmw_destroy_service>:
 800f7cc:	b570      	push	{r4, r5, r6, lr}
 800f7ce:	b128      	cbz	r0, 800f7dc <rmw_destroy_service+0x10>
 800f7d0:	4604      	mov	r4, r0
 800f7d2:	6800      	ldr	r0, [r0, #0]
 800f7d4:	460d      	mov	r5, r1
 800f7d6:	f000 fcaf 	bl	8010138 <is_uxrce_rmw_identifier_valid>
 800f7da:	b910      	cbnz	r0, 800f7e2 <rmw_destroy_service+0x16>
 800f7dc:	2401      	movs	r4, #1
 800f7de:	4620      	mov	r0, r4
 800f7e0:	bd70      	pop	{r4, r5, r6, pc}
 800f7e2:	6863      	ldr	r3, [r4, #4]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d0f9      	beq.n	800f7dc <rmw_destroy_service+0x10>
 800f7e8:	2d00      	cmp	r5, #0
 800f7ea:	d0f7      	beq.n	800f7dc <rmw_destroy_service+0x10>
 800f7ec:	6828      	ldr	r0, [r5, #0]
 800f7ee:	f000 fca3 	bl	8010138 <is_uxrce_rmw_identifier_valid>
 800f7f2:	2800      	cmp	r0, #0
 800f7f4:	d0f2      	beq.n	800f7dc <rmw_destroy_service+0x10>
 800f7f6:	686e      	ldr	r6, [r5, #4]
 800f7f8:	2e00      	cmp	r6, #0
 800f7fa:	d0ef      	beq.n	800f7dc <rmw_destroy_service+0x10>
 800f7fc:	6864      	ldr	r4, [r4, #4]
 800f7fe:	6932      	ldr	r2, [r6, #16]
 800f800:	6920      	ldr	r0, [r4, #16]
 800f802:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f806:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f80a:	6819      	ldr	r1, [r3, #0]
 800f80c:	f001 f95a 	bl	8010ac4 <uxr_buffer_cancel_data>
 800f810:	4602      	mov	r2, r0
 800f812:	6920      	ldr	r0, [r4, #16]
 800f814:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f818:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f81c:	f000 fc0c 	bl	8010038 <run_xrce_session>
 800f820:	6920      	ldr	r0, [r4, #16]
 800f822:	6932      	ldr	r2, [r6, #16]
 800f824:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f828:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f82c:	6819      	ldr	r1, [r3, #0]
 800f82e:	f000 fe1f 	bl	8010470 <uxr_buffer_delete_entity>
 800f832:	4602      	mov	r2, r0
 800f834:	6920      	ldr	r0, [r4, #16]
 800f836:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f83a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f83e:	f000 fbfb 	bl	8010038 <run_xrce_session>
 800f842:	2800      	cmp	r0, #0
 800f844:	4628      	mov	r0, r5
 800f846:	bf14      	ite	ne
 800f848:	2400      	movne	r4, #0
 800f84a:	2402      	moveq	r4, #2
 800f84c:	f000 face 	bl	800fdec <rmw_uxrce_fini_service_memory>
 800f850:	e7c5      	b.n	800f7de <rmw_destroy_service+0x12>
 800f852:	bf00      	nop

0800f854 <rmw_create_subscription>:
 800f854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f858:	b08d      	sub	sp, #52	; 0x34
 800f85a:	2800      	cmp	r0, #0
 800f85c:	f000 80cf 	beq.w	800f9fe <rmw_create_subscription+0x1aa>
 800f860:	460e      	mov	r6, r1
 800f862:	2900      	cmp	r1, #0
 800f864:	f000 80cb 	beq.w	800f9fe <rmw_create_subscription+0x1aa>
 800f868:	4604      	mov	r4, r0
 800f86a:	6800      	ldr	r0, [r0, #0]
 800f86c:	4615      	mov	r5, r2
 800f86e:	4698      	mov	r8, r3
 800f870:	f000 fc62 	bl	8010138 <is_uxrce_rmw_identifier_valid>
 800f874:	2800      	cmp	r0, #0
 800f876:	f000 80c2 	beq.w	800f9fe <rmw_create_subscription+0x1aa>
 800f87a:	2d00      	cmp	r5, #0
 800f87c:	f000 80bf 	beq.w	800f9fe <rmw_create_subscription+0x1aa>
 800f880:	782b      	ldrb	r3, [r5, #0]
 800f882:	2b00      	cmp	r3, #0
 800f884:	f000 80bb 	beq.w	800f9fe <rmw_create_subscription+0x1aa>
 800f888:	f1b8 0f00 	cmp.w	r8, #0
 800f88c:	f000 80b7 	beq.w	800f9fe <rmw_create_subscription+0x1aa>
 800f890:	485d      	ldr	r0, [pc, #372]	; (800fa08 <rmw_create_subscription+0x1b4>)
 800f892:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f896:	f006 ff6d 	bl	8016774 <get_memory>
 800f89a:	4604      	mov	r4, r0
 800f89c:	2800      	cmp	r0, #0
 800f89e:	f000 80af 	beq.w	800fa00 <rmw_create_subscription+0x1ac>
 800f8a2:	68c7      	ldr	r7, [r0, #12]
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f8aa:	f006 ffcb 	bl	8016844 <rmw_get_implementation_identifier>
 800f8ae:	f107 0a94 	add.w	sl, r7, #148	; 0x94
 800f8b2:	67f8      	str	r0, [r7, #124]	; 0x7c
 800f8b4:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 800f8b8:	4628      	mov	r0, r5
 800f8ba:	f7f0 fc9b 	bl	80001f4 <strlen>
 800f8be:	3001      	adds	r0, #1
 800f8c0:	283c      	cmp	r0, #60	; 0x3c
 800f8c2:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800f8c6:	f200 8097 	bhi.w	800f9f8 <rmw_create_subscription+0x1a4>
 800f8ca:	4a50      	ldr	r2, [pc, #320]	; (800fa0c <rmw_create_subscription+0x1b8>)
 800f8cc:	462b      	mov	r3, r5
 800f8ce:	213c      	movs	r1, #60	; 0x3c
 800f8d0:	4650      	mov	r0, sl
 800f8d2:	f00a fd05 	bl	801a2e0 <sniprintf>
 800f8d6:	4641      	mov	r1, r8
 800f8d8:	f8c7 9020 	str.w	r9, [r7, #32]
 800f8dc:	2250      	movs	r2, #80	; 0x50
 800f8de:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800f8e2:	f009 fbdb 	bl	801909c <memcpy>
 800f8e6:	494a      	ldr	r1, [pc, #296]	; (800fa10 <rmw_create_subscription+0x1bc>)
 800f8e8:	4630      	mov	r0, r6
 800f8ea:	f000 fc33 	bl	8010154 <get_message_typesupport_handle>
 800f8ee:	2800      	cmp	r0, #0
 800f8f0:	f000 8082 	beq.w	800f9f8 <rmw_create_subscription+0x1a4>
 800f8f4:	6842      	ldr	r2, [r0, #4]
 800f8f6:	61ba      	str	r2, [r7, #24]
 800f8f8:	2a00      	cmp	r2, #0
 800f8fa:	d07d      	beq.n	800f9f8 <rmw_create_subscription+0x1a4>
 800f8fc:	4629      	mov	r1, r5
 800f8fe:	4643      	mov	r3, r8
 800f900:	4648      	mov	r0, r9
 800f902:	f006 ffa5 	bl	8016850 <create_topic>
 800f906:	61f8      	str	r0, [r7, #28]
 800f908:	2800      	cmp	r0, #0
 800f90a:	d075      	beq.n	800f9f8 <rmw_create_subscription+0x1a4>
 800f90c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f910:	f241 539c 	movw	r3, #5532	; 0x159c
 800f914:	2104      	movs	r1, #4
 800f916:	5ad0      	ldrh	r0, [r2, r3]
 800f918:	1c45      	adds	r5, r0, #1
 800f91a:	52d5      	strh	r5, [r2, r3]
 800f91c:	f001 f86a 	bl	80109f4 <uxr_object_id>
 800f920:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f924:	6138      	str	r0, [r7, #16]
 800f926:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800f92a:	2606      	movs	r6, #6
 800f92c:	9600      	str	r6, [sp, #0]
 800f92e:	6811      	ldr	r1, [r2, #0]
 800f930:	693a      	ldr	r2, [r7, #16]
 800f932:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800f936:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f93a:	f000 fe79 	bl	8010630 <uxr_buffer_create_subscriber_bin>
 800f93e:	4602      	mov	r2, r0
 800f940:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f944:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f948:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f94c:	f000 fb74 	bl	8010038 <run_xrce_session>
 800f950:	2800      	cmp	r0, #0
 800f952:	d04d      	beq.n	800f9f0 <rmw_create_subscription+0x19c>
 800f954:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f958:	f241 539e 	movw	r3, #5534	; 0x159e
 800f95c:	4631      	mov	r1, r6
 800f95e:	5ad0      	ldrh	r0, [r2, r3]
 800f960:	1c45      	adds	r5, r0, #1
 800f962:	52d5      	strh	r5, [r2, r3]
 800f964:	f001 f846 	bl	80109f4 <uxr_object_id>
 800f968:	ad08      	add	r5, sp, #32
 800f96a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f96e:	69fb      	ldr	r3, [r7, #28]
 800f970:	6178      	str	r0, [r7, #20]
 800f972:	4641      	mov	r1, r8
 800f974:	4628      	mov	r0, r5
 800f976:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 800f97a:	9305      	str	r3, [sp, #20]
 800f97c:	f000 fb78 	bl	8010070 <convert_qos_profile>
 800f980:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f984:	9b05      	ldr	r3, [sp, #20]
 800f986:	9001      	str	r0, [sp, #4]
 800f988:	9603      	str	r6, [sp, #12]
 800f98a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f98e:	691b      	ldr	r3, [r3, #16]
 800f990:	9300      	str	r3, [sp, #0]
 800f992:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800f996:	f8db 1000 	ldr.w	r1, [fp]
 800f99a:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 800f99e:	f000 feef 	bl	8010780 <uxr_buffer_create_datareader_bin>
 800f9a2:	4602      	mov	r2, r0
 800f9a4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f9a8:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800f9ac:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f9b0:	f000 fb42 	bl	8010038 <run_xrce_session>
 800f9b4:	b1e0      	cbz	r0, 800f9f0 <rmw_create_subscription+0x19c>
 800f9b6:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 800f9ba:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f9be:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f9c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 800f9cc:	2b02      	cmp	r3, #2
 800f9ce:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800f9d2:	bf0c      	ite	eq
 800f9d4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 800f9d8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 800f9dc:	9307      	str	r3, [sp, #28]
 800f9de:	aa0a      	add	r2, sp, #40	; 0x28
 800f9e0:	9200      	str	r2, [sp, #0]
 800f9e2:	697a      	ldr	r2, [r7, #20]
 800f9e4:	6809      	ldr	r1, [r1, #0]
 800f9e6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f9ea:	f001 f831 	bl	8010a50 <uxr_buffer_request_data>
 800f9ee:	e007      	b.n	800fa00 <rmw_create_subscription+0x1ac>
 800f9f0:	4805      	ldr	r0, [pc, #20]	; (800fa08 <rmw_create_subscription+0x1b4>)
 800f9f2:	4639      	mov	r1, r7
 800f9f4:	f006 fece 	bl	8016794 <put_memory>
 800f9f8:	4620      	mov	r0, r4
 800f9fa:	f000 f9e1 	bl	800fdc0 <rmw_uxrce_fini_subscription_memory>
 800f9fe:	2400      	movs	r4, #0
 800fa00:	4620      	mov	r0, r4
 800fa02:	b00d      	add	sp, #52	; 0x34
 800fa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa08:	2000d314 	.word	0x2000d314
 800fa0c:	0801e028 	.word	0x0801e028
 800fa10:	0801dff4 	.word	0x0801dff4

0800fa14 <rmw_subscription_get_actual_qos>:
 800fa14:	2000      	movs	r0, #0
 800fa16:	4770      	bx	lr

0800fa18 <rmw_destroy_subscription>:
 800fa18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa1a:	b128      	cbz	r0, 800fa28 <rmw_destroy_subscription+0x10>
 800fa1c:	4604      	mov	r4, r0
 800fa1e:	6800      	ldr	r0, [r0, #0]
 800fa20:	460d      	mov	r5, r1
 800fa22:	f000 fb89 	bl	8010138 <is_uxrce_rmw_identifier_valid>
 800fa26:	b910      	cbnz	r0, 800fa2e <rmw_destroy_subscription+0x16>
 800fa28:	2401      	movs	r4, #1
 800fa2a:	4620      	mov	r0, r4
 800fa2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa2e:	6863      	ldr	r3, [r4, #4]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d0f9      	beq.n	800fa28 <rmw_destroy_subscription+0x10>
 800fa34:	2d00      	cmp	r5, #0
 800fa36:	d0f7      	beq.n	800fa28 <rmw_destroy_subscription+0x10>
 800fa38:	6828      	ldr	r0, [r5, #0]
 800fa3a:	f000 fb7d 	bl	8010138 <is_uxrce_rmw_identifier_valid>
 800fa3e:	2800      	cmp	r0, #0
 800fa40:	d0f2      	beq.n	800fa28 <rmw_destroy_subscription+0x10>
 800fa42:	686c      	ldr	r4, [r5, #4]
 800fa44:	2c00      	cmp	r4, #0
 800fa46:	d0ef      	beq.n	800fa28 <rmw_destroy_subscription+0x10>
 800fa48:	6a26      	ldr	r6, [r4, #32]
 800fa4a:	6962      	ldr	r2, [r4, #20]
 800fa4c:	6930      	ldr	r0, [r6, #16]
 800fa4e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800fa52:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fa56:	6819      	ldr	r1, [r3, #0]
 800fa58:	f001 f834 	bl	8010ac4 <uxr_buffer_cancel_data>
 800fa5c:	4602      	mov	r2, r0
 800fa5e:	6930      	ldr	r0, [r6, #16]
 800fa60:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800fa64:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800fa68:	f000 fae6 	bl	8010038 <run_xrce_session>
 800fa6c:	69e0      	ldr	r0, [r4, #28]
 800fa6e:	f006 ff51 	bl	8016914 <destroy_topic>
 800fa72:	6a23      	ldr	r3, [r4, #32]
 800fa74:	6962      	ldr	r2, [r4, #20]
 800fa76:	6918      	ldr	r0, [r3, #16]
 800fa78:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800fa7c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fa80:	6819      	ldr	r1, [r3, #0]
 800fa82:	f000 fcf5 	bl	8010470 <uxr_buffer_delete_entity>
 800fa86:	6a21      	ldr	r1, [r4, #32]
 800fa88:	6922      	ldr	r2, [r4, #16]
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	6908      	ldr	r0, [r1, #16]
 800fa8e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800fa92:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800fa96:	6809      	ldr	r1, [r1, #0]
 800fa98:	461c      	mov	r4, r3
 800fa9a:	f000 fce9 	bl	8010470 <uxr_buffer_delete_entity>
 800fa9e:	4607      	mov	r7, r0
 800faa0:	6930      	ldr	r0, [r6, #16]
 800faa2:	4622      	mov	r2, r4
 800faa4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800faa8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800faac:	f000 fac4 	bl	8010038 <run_xrce_session>
 800fab0:	4604      	mov	r4, r0
 800fab2:	6930      	ldr	r0, [r6, #16]
 800fab4:	463a      	mov	r2, r7
 800fab6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800faba:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800fabe:	f000 fabb 	bl	8010038 <run_xrce_session>
 800fac2:	b12c      	cbz	r4, 800fad0 <rmw_destroy_subscription+0xb8>
 800fac4:	b120      	cbz	r0, 800fad0 <rmw_destroy_subscription+0xb8>
 800fac6:	2400      	movs	r4, #0
 800fac8:	4628      	mov	r0, r5
 800faca:	f000 f979 	bl	800fdc0 <rmw_uxrce_fini_subscription_memory>
 800face:	e7ac      	b.n	800fa2a <rmw_destroy_subscription+0x12>
 800fad0:	2402      	movs	r4, #2
 800fad2:	e7f9      	b.n	800fac8 <rmw_destroy_subscription+0xb0>

0800fad4 <rmw_uxrce_transport_init>:
 800fad4:	b508      	push	{r3, lr}
 800fad6:	b108      	cbz	r0, 800fadc <rmw_uxrce_transport_init+0x8>
 800fad8:	f100 0210 	add.w	r2, r0, #16
 800fadc:	b139      	cbz	r1, 800faee <rmw_uxrce_transport_init+0x1a>
 800fade:	6949      	ldr	r1, [r1, #20]
 800fae0:	4610      	mov	r0, r2
 800fae2:	f000 ff4f 	bl	8010984 <uxr_init_custom_transport>
 800fae6:	f080 0001 	eor.w	r0, r0, #1
 800faea:	b2c0      	uxtb	r0, r0
 800faec:	bd08      	pop	{r3, pc}
 800faee:	4b04      	ldr	r3, [pc, #16]	; (800fb00 <rmw_uxrce_transport_init+0x2c>)
 800faf0:	4610      	mov	r0, r2
 800faf2:	6859      	ldr	r1, [r3, #4]
 800faf4:	f000 ff46 	bl	8010984 <uxr_init_custom_transport>
 800faf8:	f080 0001 	eor.w	r0, r0, #1
 800fafc:	b2c0      	uxtb	r0, r0
 800fafe:	bd08      	pop	{r3, pc}
 800fb00:	2000a088 	.word	0x2000a088

0800fb04 <rmw_uxrce_init_service_memory>:
 800fb04:	b1b2      	cbz	r2, 800fb34 <rmw_uxrce_init_service_memory+0x30>
 800fb06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb08:	7a07      	ldrb	r7, [r0, #8]
 800fb0a:	4605      	mov	r5, r0
 800fb0c:	b98f      	cbnz	r7, 800fb32 <rmw_uxrce_init_service_memory+0x2e>
 800fb0e:	e9c0 7700 	strd	r7, r7, [r0]
 800fb12:	460c      	mov	r4, r1
 800fb14:	23c8      	movs	r3, #200	; 0xc8
 800fb16:	2101      	movs	r1, #1
 800fb18:	fb03 4602 	mla	r6, r3, r2, r4
 800fb1c:	60c3      	str	r3, [r0, #12]
 800fb1e:	7201      	strb	r1, [r0, #8]
 800fb20:	4621      	mov	r1, r4
 800fb22:	4628      	mov	r0, r5
 800fb24:	f006 fe36 	bl	8016794 <put_memory>
 800fb28:	60e4      	str	r4, [r4, #12]
 800fb2a:	f804 7bc8 	strb.w	r7, [r4], #200
 800fb2e:	42a6      	cmp	r6, r4
 800fb30:	d1f6      	bne.n	800fb20 <rmw_uxrce_init_service_memory+0x1c>
 800fb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb34:	4770      	bx	lr
 800fb36:	bf00      	nop

0800fb38 <rmw_uxrce_init_client_memory>:
 800fb38:	b1b2      	cbz	r2, 800fb68 <rmw_uxrce_init_client_memory+0x30>
 800fb3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb3c:	7a07      	ldrb	r7, [r0, #8]
 800fb3e:	4605      	mov	r5, r0
 800fb40:	b98f      	cbnz	r7, 800fb66 <rmw_uxrce_init_client_memory+0x2e>
 800fb42:	e9c0 7700 	strd	r7, r7, [r0]
 800fb46:	460c      	mov	r4, r1
 800fb48:	23c8      	movs	r3, #200	; 0xc8
 800fb4a:	2101      	movs	r1, #1
 800fb4c:	fb03 4602 	mla	r6, r3, r2, r4
 800fb50:	60c3      	str	r3, [r0, #12]
 800fb52:	7201      	strb	r1, [r0, #8]
 800fb54:	4621      	mov	r1, r4
 800fb56:	4628      	mov	r0, r5
 800fb58:	f006 fe1c 	bl	8016794 <put_memory>
 800fb5c:	60e4      	str	r4, [r4, #12]
 800fb5e:	f804 7bc8 	strb.w	r7, [r4], #200
 800fb62:	42a6      	cmp	r6, r4
 800fb64:	d1f6      	bne.n	800fb54 <rmw_uxrce_init_client_memory+0x1c>
 800fb66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb68:	4770      	bx	lr
 800fb6a:	bf00      	nop

0800fb6c <rmw_uxrce_init_publisher_memory>:
 800fb6c:	b1b2      	cbz	r2, 800fb9c <rmw_uxrce_init_publisher_memory+0x30>
 800fb6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb70:	7a07      	ldrb	r7, [r0, #8]
 800fb72:	4605      	mov	r5, r0
 800fb74:	b98f      	cbnz	r7, 800fb9a <rmw_uxrce_init_publisher_memory+0x2e>
 800fb76:	e9c0 7700 	strd	r7, r7, [r0]
 800fb7a:	460c      	mov	r4, r1
 800fb7c:	23d8      	movs	r3, #216	; 0xd8
 800fb7e:	2101      	movs	r1, #1
 800fb80:	fb03 4602 	mla	r6, r3, r2, r4
 800fb84:	60c3      	str	r3, [r0, #12]
 800fb86:	7201      	strb	r1, [r0, #8]
 800fb88:	4621      	mov	r1, r4
 800fb8a:	4628      	mov	r0, r5
 800fb8c:	f006 fe02 	bl	8016794 <put_memory>
 800fb90:	60e4      	str	r4, [r4, #12]
 800fb92:	f804 7bd8 	strb.w	r7, [r4], #216
 800fb96:	42a6      	cmp	r6, r4
 800fb98:	d1f6      	bne.n	800fb88 <rmw_uxrce_init_publisher_memory+0x1c>
 800fb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb9c:	4770      	bx	lr
 800fb9e:	bf00      	nop

0800fba0 <rmw_uxrce_init_subscription_memory>:
 800fba0:	b1b2      	cbz	r2, 800fbd0 <rmw_uxrce_init_subscription_memory+0x30>
 800fba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fba4:	7a07      	ldrb	r7, [r0, #8]
 800fba6:	4605      	mov	r5, r0
 800fba8:	b98f      	cbnz	r7, 800fbce <rmw_uxrce_init_subscription_memory+0x2e>
 800fbaa:	e9c0 7700 	strd	r7, r7, [r0]
 800fbae:	460c      	mov	r4, r1
 800fbb0:	23d0      	movs	r3, #208	; 0xd0
 800fbb2:	2101      	movs	r1, #1
 800fbb4:	fb03 4602 	mla	r6, r3, r2, r4
 800fbb8:	60c3      	str	r3, [r0, #12]
 800fbba:	7201      	strb	r1, [r0, #8]
 800fbbc:	4621      	mov	r1, r4
 800fbbe:	4628      	mov	r0, r5
 800fbc0:	f006 fde8 	bl	8016794 <put_memory>
 800fbc4:	60e4      	str	r4, [r4, #12]
 800fbc6:	f804 7bd0 	strb.w	r7, [r4], #208
 800fbca:	42a6      	cmp	r6, r4
 800fbcc:	d1f6      	bne.n	800fbbc <rmw_uxrce_init_subscription_memory+0x1c>
 800fbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbd0:	4770      	bx	lr
 800fbd2:	bf00      	nop

0800fbd4 <rmw_uxrce_init_node_memory>:
 800fbd4:	b1b2      	cbz	r2, 800fc04 <rmw_uxrce_init_node_memory+0x30>
 800fbd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbd8:	7a07      	ldrb	r7, [r0, #8]
 800fbda:	4605      	mov	r5, r0
 800fbdc:	b98f      	cbnz	r7, 800fc02 <rmw_uxrce_init_node_memory+0x2e>
 800fbde:	e9c0 7700 	strd	r7, r7, [r0]
 800fbe2:	460c      	mov	r4, r1
 800fbe4:	23a4      	movs	r3, #164	; 0xa4
 800fbe6:	2101      	movs	r1, #1
 800fbe8:	fb03 4602 	mla	r6, r3, r2, r4
 800fbec:	60c3      	str	r3, [r0, #12]
 800fbee:	7201      	strb	r1, [r0, #8]
 800fbf0:	4621      	mov	r1, r4
 800fbf2:	4628      	mov	r0, r5
 800fbf4:	f006 fdce 	bl	8016794 <put_memory>
 800fbf8:	60e4      	str	r4, [r4, #12]
 800fbfa:	f804 7ba4 	strb.w	r7, [r4], #164
 800fbfe:	42a6      	cmp	r6, r4
 800fc00:	d1f6      	bne.n	800fbf0 <rmw_uxrce_init_node_memory+0x1c>
 800fc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc04:	4770      	bx	lr
 800fc06:	bf00      	nop

0800fc08 <rmw_uxrce_init_session_memory>:
 800fc08:	b1d2      	cbz	r2, 800fc40 <rmw_uxrce_init_session_memory+0x38>
 800fc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc0e:	7a07      	ldrb	r7, [r0, #8]
 800fc10:	4605      	mov	r5, r0
 800fc12:	b99f      	cbnz	r7, 800fc3c <rmw_uxrce_init_session_memory+0x34>
 800fc14:	e9c0 7700 	strd	r7, r7, [r0]
 800fc18:	f241 53a8 	movw	r3, #5544	; 0x15a8
 800fc1c:	460c      	mov	r4, r1
 800fc1e:	2101      	movs	r1, #1
 800fc20:	fb03 4602 	mla	r6, r3, r2, r4
 800fc24:	60c3      	str	r3, [r0, #12]
 800fc26:	4698      	mov	r8, r3
 800fc28:	7201      	strb	r1, [r0, #8]
 800fc2a:	4621      	mov	r1, r4
 800fc2c:	4628      	mov	r0, r5
 800fc2e:	f006 fdb1 	bl	8016794 <put_memory>
 800fc32:	60e4      	str	r4, [r4, #12]
 800fc34:	7027      	strb	r7, [r4, #0]
 800fc36:	4444      	add	r4, r8
 800fc38:	42a6      	cmp	r6, r4
 800fc3a:	d1f6      	bne.n	800fc2a <rmw_uxrce_init_session_memory+0x22>
 800fc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc40:	4770      	bx	lr
 800fc42:	bf00      	nop

0800fc44 <rmw_uxrce_init_topic_memory>:
 800fc44:	b1c2      	cbz	r2, 800fc78 <rmw_uxrce_init_topic_memory+0x34>
 800fc46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc48:	7a07      	ldrb	r7, [r0, #8]
 800fc4a:	4606      	mov	r6, r0
 800fc4c:	b99f      	cbnz	r7, 800fc76 <rmw_uxrce_init_topic_memory+0x32>
 800fc4e:	e9c0 7700 	strd	r7, r7, [r0]
 800fc52:	460c      	mov	r4, r1
 800fc54:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800fc58:	2101      	movs	r1, #1
 800fc5a:	231c      	movs	r3, #28
 800fc5c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fc60:	7201      	strb	r1, [r0, #8]
 800fc62:	60c3      	str	r3, [r0, #12]
 800fc64:	4621      	mov	r1, r4
 800fc66:	4630      	mov	r0, r6
 800fc68:	f006 fd94 	bl	8016794 <put_memory>
 800fc6c:	60e4      	str	r4, [r4, #12]
 800fc6e:	f804 7b1c 	strb.w	r7, [r4], #28
 800fc72:	42a5      	cmp	r5, r4
 800fc74:	d1f6      	bne.n	800fc64 <rmw_uxrce_init_topic_memory+0x20>
 800fc76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc78:	4770      	bx	lr
 800fc7a:	bf00      	nop

0800fc7c <rmw_uxrce_init_static_input_buffer_memory>:
 800fc7c:	b1d2      	cbz	r2, 800fcb4 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800fc7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc80:	7a07      	ldrb	r7, [r0, #8]
 800fc82:	4606      	mov	r6, r0
 800fc84:	b9af      	cbnz	r7, 800fcb2 <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800fc86:	e9c0 7700 	strd	r7, r7, [r0]
 800fc8a:	460c      	mov	r4, r1
 800fc8c:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800fc90:	2101      	movs	r1, #1
 800fc92:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800fc96:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800fc9a:	7201      	strb	r1, [r0, #8]
 800fc9c:	60c3      	str	r3, [r0, #12]
 800fc9e:	4621      	mov	r1, r4
 800fca0:	4630      	mov	r0, r6
 800fca2:	f006 fd77 	bl	8016794 <put_memory>
 800fca6:	60e4      	str	r4, [r4, #12]
 800fca8:	7027      	strb	r7, [r4, #0]
 800fcaa:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800fcae:	42a5      	cmp	r5, r4
 800fcb0:	d1f5      	bne.n	800fc9e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800fcb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcb4:	4770      	bx	lr
 800fcb6:	bf00      	nop

0800fcb8 <rmw_uxrce_init_init_options_impl_memory>:
 800fcb8:	b1b2      	cbz	r2, 800fce8 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800fcba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcbc:	7a07      	ldrb	r7, [r0, #8]
 800fcbe:	4605      	mov	r5, r0
 800fcc0:	b98f      	cbnz	r7, 800fce6 <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800fcc2:	e9c0 7700 	strd	r7, r7, [r0]
 800fcc6:	460c      	mov	r4, r1
 800fcc8:	232c      	movs	r3, #44	; 0x2c
 800fcca:	2101      	movs	r1, #1
 800fccc:	fb03 4602 	mla	r6, r3, r2, r4
 800fcd0:	60c3      	str	r3, [r0, #12]
 800fcd2:	7201      	strb	r1, [r0, #8]
 800fcd4:	4621      	mov	r1, r4
 800fcd6:	4628      	mov	r0, r5
 800fcd8:	f006 fd5c 	bl	8016794 <put_memory>
 800fcdc:	60e4      	str	r4, [r4, #12]
 800fcde:	f804 7b2c 	strb.w	r7, [r4], #44
 800fce2:	42a6      	cmp	r6, r4
 800fce4:	d1f6      	bne.n	800fcd4 <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800fce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fce8:	4770      	bx	lr
 800fcea:	bf00      	nop

0800fcec <rmw_uxrce_init_wait_set_memory>:
 800fcec:	b1c2      	cbz	r2, 800fd20 <rmw_uxrce_init_wait_set_memory+0x34>
 800fcee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcf0:	7a07      	ldrb	r7, [r0, #8]
 800fcf2:	4606      	mov	r6, r0
 800fcf4:	b99f      	cbnz	r7, 800fd1e <rmw_uxrce_init_wait_set_memory+0x32>
 800fcf6:	e9c0 7700 	strd	r7, r7, [r0]
 800fcfa:	460c      	mov	r4, r1
 800fcfc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800fd00:	2101      	movs	r1, #1
 800fd02:	231c      	movs	r3, #28
 800fd04:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fd08:	7201      	strb	r1, [r0, #8]
 800fd0a:	60c3      	str	r3, [r0, #12]
 800fd0c:	4621      	mov	r1, r4
 800fd0e:	4630      	mov	r0, r6
 800fd10:	f006 fd40 	bl	8016794 <put_memory>
 800fd14:	60e4      	str	r4, [r4, #12]
 800fd16:	f804 7b1c 	strb.w	r7, [r4], #28
 800fd1a:	42a5      	cmp	r5, r4
 800fd1c:	d1f6      	bne.n	800fd0c <rmw_uxrce_init_wait_set_memory+0x20>
 800fd1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd20:	4770      	bx	lr
 800fd22:	bf00      	nop

0800fd24 <rmw_uxrce_init_guard_condition_memory>:
 800fd24:	b1b2      	cbz	r2, 800fd54 <rmw_uxrce_init_guard_condition_memory+0x30>
 800fd26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd28:	7a07      	ldrb	r7, [r0, #8]
 800fd2a:	4605      	mov	r5, r0
 800fd2c:	b98f      	cbnz	r7, 800fd52 <rmw_uxrce_init_guard_condition_memory+0x2e>
 800fd2e:	e9c0 7700 	strd	r7, r7, [r0]
 800fd32:	460c      	mov	r4, r1
 800fd34:	2320      	movs	r3, #32
 800fd36:	2101      	movs	r1, #1
 800fd38:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800fd3c:	7201      	strb	r1, [r0, #8]
 800fd3e:	60c3      	str	r3, [r0, #12]
 800fd40:	4621      	mov	r1, r4
 800fd42:	4628      	mov	r0, r5
 800fd44:	f006 fd26 	bl	8016794 <put_memory>
 800fd48:	60e4      	str	r4, [r4, #12]
 800fd4a:	f804 7b20 	strb.w	r7, [r4], #32
 800fd4e:	42a6      	cmp	r6, r4
 800fd50:	d1f6      	bne.n	800fd40 <rmw_uxrce_init_guard_condition_memory+0x1c>
 800fd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd54:	4770      	bx	lr
 800fd56:	bf00      	nop

0800fd58 <rmw_uxrce_fini_session_memory>:
 800fd58:	4601      	mov	r1, r0
 800fd5a:	4801      	ldr	r0, [pc, #4]	; (800fd60 <rmw_uxrce_fini_session_memory+0x8>)
 800fd5c:	f006 bd1a 	b.w	8016794 <put_memory>
 800fd60:	2000d250 	.word	0x2000d250

0800fd64 <rmw_uxrce_fini_node_memory>:
 800fd64:	b538      	push	{r3, r4, r5, lr}
 800fd66:	4604      	mov	r4, r0
 800fd68:	6800      	ldr	r0, [r0, #0]
 800fd6a:	b128      	cbz	r0, 800fd78 <rmw_uxrce_fini_node_memory+0x14>
 800fd6c:	4b07      	ldr	r3, [pc, #28]	; (800fd8c <rmw_uxrce_fini_node_memory+0x28>)
 800fd6e:	6819      	ldr	r1, [r3, #0]
 800fd70:	f7f0 fa36 	bl	80001e0 <strcmp>
 800fd74:	b940      	cbnz	r0, 800fd88 <rmw_uxrce_fini_node_memory+0x24>
 800fd76:	6020      	str	r0, [r4, #0]
 800fd78:	6861      	ldr	r1, [r4, #4]
 800fd7a:	b129      	cbz	r1, 800fd88 <rmw_uxrce_fini_node_memory+0x24>
 800fd7c:	2500      	movs	r5, #0
 800fd7e:	4804      	ldr	r0, [pc, #16]	; (800fd90 <rmw_uxrce_fini_node_memory+0x2c>)
 800fd80:	610d      	str	r5, [r1, #16]
 800fd82:	f006 fd07 	bl	8016794 <put_memory>
 800fd86:	6065      	str	r5, [r4, #4]
 800fd88:	bd38      	pop	{r3, r4, r5, pc}
 800fd8a:	bf00      	nop
 800fd8c:	0801e77c 	.word	0x0801e77c
 800fd90:	2000d07c 	.word	0x2000d07c

0800fd94 <rmw_uxrce_fini_publisher_memory>:
 800fd94:	b510      	push	{r4, lr}
 800fd96:	4604      	mov	r4, r0
 800fd98:	6800      	ldr	r0, [r0, #0]
 800fd9a:	b128      	cbz	r0, 800fda8 <rmw_uxrce_fini_publisher_memory+0x14>
 800fd9c:	4b06      	ldr	r3, [pc, #24]	; (800fdb8 <rmw_uxrce_fini_publisher_memory+0x24>)
 800fd9e:	6819      	ldr	r1, [r3, #0]
 800fda0:	f7f0 fa1e 	bl	80001e0 <strcmp>
 800fda4:	b938      	cbnz	r0, 800fdb6 <rmw_uxrce_fini_publisher_memory+0x22>
 800fda6:	6020      	str	r0, [r4, #0]
 800fda8:	6861      	ldr	r1, [r4, #4]
 800fdaa:	b121      	cbz	r1, 800fdb6 <rmw_uxrce_fini_publisher_memory+0x22>
 800fdac:	4803      	ldr	r0, [pc, #12]	; (800fdbc <rmw_uxrce_fini_publisher_memory+0x28>)
 800fdae:	f006 fcf1 	bl	8016794 <put_memory>
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	6063      	str	r3, [r4, #4]
 800fdb6:	bd10      	pop	{r4, pc}
 800fdb8:	0801e77c 	.word	0x0801e77c
 800fdbc:	2000a0b8 	.word	0x2000a0b8

0800fdc0 <rmw_uxrce_fini_subscription_memory>:
 800fdc0:	b510      	push	{r4, lr}
 800fdc2:	4604      	mov	r4, r0
 800fdc4:	6800      	ldr	r0, [r0, #0]
 800fdc6:	b128      	cbz	r0, 800fdd4 <rmw_uxrce_fini_subscription_memory+0x14>
 800fdc8:	4b06      	ldr	r3, [pc, #24]	; (800fde4 <rmw_uxrce_fini_subscription_memory+0x24>)
 800fdca:	6819      	ldr	r1, [r3, #0]
 800fdcc:	f7f0 fa08 	bl	80001e0 <strcmp>
 800fdd0:	b938      	cbnz	r0, 800fde2 <rmw_uxrce_fini_subscription_memory+0x22>
 800fdd2:	6020      	str	r0, [r4, #0]
 800fdd4:	6861      	ldr	r1, [r4, #4]
 800fdd6:	b121      	cbz	r1, 800fde2 <rmw_uxrce_fini_subscription_memory+0x22>
 800fdd8:	4803      	ldr	r0, [pc, #12]	; (800fde8 <rmw_uxrce_fini_subscription_memory+0x28>)
 800fdda:	f006 fcdb 	bl	8016794 <put_memory>
 800fdde:	2300      	movs	r3, #0
 800fde0:	6063      	str	r3, [r4, #4]
 800fde2:	bd10      	pop	{r4, pc}
 800fde4:	0801e77c 	.word	0x0801e77c
 800fde8:	2000d314 	.word	0x2000d314

0800fdec <rmw_uxrce_fini_service_memory>:
 800fdec:	b510      	push	{r4, lr}
 800fdee:	4604      	mov	r4, r0
 800fdf0:	6800      	ldr	r0, [r0, #0]
 800fdf2:	b128      	cbz	r0, 800fe00 <rmw_uxrce_fini_service_memory+0x14>
 800fdf4:	4b06      	ldr	r3, [pc, #24]	; (800fe10 <rmw_uxrce_fini_service_memory+0x24>)
 800fdf6:	6819      	ldr	r1, [r3, #0]
 800fdf8:	f7f0 f9f2 	bl	80001e0 <strcmp>
 800fdfc:	b938      	cbnz	r0, 800fe0e <rmw_uxrce_fini_service_memory+0x22>
 800fdfe:	6020      	str	r0, [r4, #0]
 800fe00:	6861      	ldr	r1, [r4, #4]
 800fe02:	b121      	cbz	r1, 800fe0e <rmw_uxrce_fini_service_memory+0x22>
 800fe04:	4803      	ldr	r0, [pc, #12]	; (800fe14 <rmw_uxrce_fini_service_memory+0x28>)
 800fe06:	f006 fcc5 	bl	8016794 <put_memory>
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	6063      	str	r3, [r4, #4]
 800fe0e:	bd10      	pop	{r4, pc}
 800fe10:	0801e77c 	.word	0x0801e77c
 800fe14:	2000d304 	.word	0x2000d304

0800fe18 <rmw_uxrce_fini_client_memory>:
 800fe18:	b510      	push	{r4, lr}
 800fe1a:	4604      	mov	r4, r0
 800fe1c:	6800      	ldr	r0, [r0, #0]
 800fe1e:	b128      	cbz	r0, 800fe2c <rmw_uxrce_fini_client_memory+0x14>
 800fe20:	4b06      	ldr	r3, [pc, #24]	; (800fe3c <rmw_uxrce_fini_client_memory+0x24>)
 800fe22:	6819      	ldr	r1, [r3, #0]
 800fe24:	f7f0 f9dc 	bl	80001e0 <strcmp>
 800fe28:	b938      	cbnz	r0, 800fe3a <rmw_uxrce_fini_client_memory+0x22>
 800fe2a:	6020      	str	r0, [r4, #0]
 800fe2c:	6861      	ldr	r1, [r4, #4]
 800fe2e:	b121      	cbz	r1, 800fe3a <rmw_uxrce_fini_client_memory+0x22>
 800fe30:	4803      	ldr	r0, [pc, #12]	; (800fe40 <rmw_uxrce_fini_client_memory+0x28>)
 800fe32:	f006 fcaf 	bl	8016794 <put_memory>
 800fe36:	2300      	movs	r3, #0
 800fe38:	6063      	str	r3, [r4, #4]
 800fe3a:	bd10      	pop	{r4, pc}
 800fe3c:	0801e77c 	.word	0x0801e77c
 800fe40:	2000a938 	.word	0x2000a938

0800fe44 <rmw_uxrce_fini_topic_memory>:
 800fe44:	b510      	push	{r4, lr}
 800fe46:	4601      	mov	r1, r0
 800fe48:	4604      	mov	r4, r0
 800fe4a:	4803      	ldr	r0, [pc, #12]	; (800fe58 <rmw_uxrce_fini_topic_memory+0x14>)
 800fe4c:	f006 fca2 	bl	8016794 <put_memory>
 800fe50:	2300      	movs	r3, #0
 800fe52:	61a3      	str	r3, [r4, #24]
 800fe54:	bd10      	pop	{r4, pc}
 800fe56:	bf00      	nop
 800fe58:	2000d240 	.word	0x2000d240

0800fe5c <rmw_uxrce_get_static_input_buffer_for_entity>:
 800fe5c:	b082      	sub	sp, #8
 800fe5e:	b4f0      	push	{r4, r5, r6, r7}
 800fe60:	4923      	ldr	r1, [pc, #140]	; (800fef0 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800fe62:	ac04      	add	r4, sp, #16
 800fe64:	e884 000c 	stmia.w	r4, {r2, r3}
 800fe68:	680d      	ldr	r5, [r1, #0]
 800fe6a:	9c05      	ldr	r4, [sp, #20]
 800fe6c:	2d00      	cmp	r5, #0
 800fe6e:	d03d      	beq.n	800feec <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 800fe70:	462b      	mov	r3, r5
 800fe72:	2100      	movs	r1, #0
 800fe74:	68da      	ldr	r2, [r3, #12]
 800fe76:	689b      	ldr	r3, [r3, #8]
 800fe78:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800fe7c:	4290      	cmp	r0, r2
 800fe7e:	bf08      	it	eq
 800fe80:	3101      	addeq	r1, #1
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d1f6      	bne.n	800fe74 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800fe86:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800fe8a:	2b02      	cmp	r3, #2
 800fe8c:	d026      	beq.n	800fedc <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 800fe8e:	d906      	bls.n	800fe9e <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800fe90:	2b03      	cmp	r3, #3
 800fe92:	d004      	beq.n	800fe9e <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 800fe94:	2100      	movs	r1, #0
 800fe96:	bcf0      	pop	{r4, r5, r6, r7}
 800fe98:	4608      	mov	r0, r1
 800fe9a:	b002      	add	sp, #8
 800fe9c:	4770      	bx	lr
 800fe9e:	b304      	cbz	r4, 800fee2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800fea0:	428c      	cmp	r4, r1
 800fea2:	d81e      	bhi.n	800fee2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800fea4:	2d00      	cmp	r5, #0
 800fea6:	d0f5      	beq.n	800fe94 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800fea8:	2100      	movs	r1, #0
 800feaa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800feae:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800feb2:	e002      	b.n	800feba <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 800feb4:	68ad      	ldr	r5, [r5, #8]
 800feb6:	2d00      	cmp	r5, #0
 800feb8:	d0ed      	beq.n	800fe96 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800feba:	68eb      	ldr	r3, [r5, #12]
 800febc:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800fec0:	4290      	cmp	r0, r2
 800fec2:	d1f7      	bne.n	800feb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800fec4:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800fec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fecc:	42b2      	cmp	r2, r6
 800fece:	eb73 0407 	sbcs.w	r4, r3, r7
 800fed2:	daef      	bge.n	800feb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800fed4:	4616      	mov	r6, r2
 800fed6:	461f      	mov	r7, r3
 800fed8:	4629      	mov	r1, r5
 800feda:	e7eb      	b.n	800feb4 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 800fedc:	b10c      	cbz	r4, 800fee2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800fede:	428c      	cmp	r4, r1
 800fee0:	d9d8      	bls.n	800fe94 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800fee2:	bcf0      	pop	{r4, r5, r6, r7}
 800fee4:	4802      	ldr	r0, [pc, #8]	; (800fef0 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 800fee6:	b002      	add	sp, #8
 800fee8:	f006 bc44 	b.w	8016774 <get_memory>
 800feec:	4629      	mov	r1, r5
 800feee:	e7ca      	b.n	800fe86 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800fef0:	2000a0a8 	.word	0x2000a0a8

0800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800fef4:	4b12      	ldr	r3, [pc, #72]	; (800ff40 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	b1fb      	cbz	r3, 800ff3a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800fefa:	b4f0      	push	{r4, r5, r6, r7}
 800fefc:	f04f 0c00 	mov.w	ip, #0
 800ff00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ff04:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 800ff08:	e001      	b.n	800ff0e <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ff0a:	689b      	ldr	r3, [r3, #8]
 800ff0c:	b193      	cbz	r3, 800ff34 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 800ff0e:	68da      	ldr	r2, [r3, #12]
 800ff10:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800ff14:	4288      	cmp	r0, r1
 800ff16:	d1f8      	bne.n	800ff0a <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800ff18:	f602 0218 	addw	r2, r2, #2072	; 0x818
 800ff1c:	e9d2 6700 	ldrd	r6, r7, [r2]
 800ff20:	42a6      	cmp	r6, r4
 800ff22:	eb77 0205 	sbcs.w	r2, r7, r5
 800ff26:	daf0      	bge.n	800ff0a <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 800ff28:	469c      	mov	ip, r3
 800ff2a:	689b      	ldr	r3, [r3, #8]
 800ff2c:	4634      	mov	r4, r6
 800ff2e:	463d      	mov	r5, r7
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d1ec      	bne.n	800ff0e <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 800ff34:	4660      	mov	r0, ip
 800ff36:	bcf0      	pop	{r4, r5, r6, r7}
 800ff38:	4770      	bx	lr
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	4770      	bx	lr
 800ff3e:	bf00      	nop
 800ff40:	2000a0a8 	.word	0x2000a0a8
 800ff44:	00000000 	.word	0x00000000

0800ff48 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ff48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff4c:	4e38      	ldr	r6, [pc, #224]	; (8010030 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 800ff4e:	f8d6 8000 	ldr.w	r8, [r6]
 800ff52:	b083      	sub	sp, #12
 800ff54:	f006 fffa 	bl	8016f4c <rmw_uros_epoch_nanos>
 800ff58:	f1b8 0f00 	cmp.w	r8, #0
 800ff5c:	d05f      	beq.n	801001e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800ff5e:	46b1      	mov	r9, r6
 800ff60:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800ff64:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800ff68:	2b04      	cmp	r3, #4
 800ff6a:	4682      	mov	sl, r0
 800ff6c:	468b      	mov	fp, r1
 800ff6e:	d02d      	beq.n	800ffcc <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800ff70:	2b05      	cmp	r3, #5
 800ff72:	d041      	beq.n	800fff8 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 800ff74:	2b03      	cmp	r3, #3
 800ff76:	d029      	beq.n	800ffcc <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 800ff78:	2200      	movs	r2, #0
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	e9cd 2300 	strd	r2, r3, [sp]
 800ff80:	2001      	movs	r0, #1
 800ff82:	2100      	movs	r1, #0
 800ff84:	9b00      	ldr	r3, [sp, #0]
 800ff86:	f606 0618 	addw	r6, r6, #2072	; 0x818
 800ff8a:	e9d6 6700 	ldrd	r6, r7, [r6]
 800ff8e:	18c2      	adds	r2, r0, r3
 800ff90:	9b01      	ldr	r3, [sp, #4]
 800ff92:	eb41 0303 	adc.w	r3, r1, r3
 800ff96:	1994      	adds	r4, r2, r6
 800ff98:	eb43 0507 	adc.w	r5, r3, r7
 800ff9c:	4554      	cmp	r4, sl
 800ff9e:	eb75 020b 	sbcs.w	r2, r5, fp
 800ffa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ffa6:	db03      	blt.n	800ffb0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ffa8:	45b2      	cmp	sl, r6
 800ffaa:	eb7b 0207 	sbcs.w	r2, fp, r7
 800ffae:	da05      	bge.n	800ffbc <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 800ffb0:	4641      	mov	r1, r8
 800ffb2:	4648      	mov	r0, r9
 800ffb4:	9300      	str	r3, [sp, #0]
 800ffb6:	f006 fbed 	bl	8016794 <put_memory>
 800ffba:	9b00      	ldr	r3, [sp, #0]
 800ffbc:	b37b      	cbz	r3, 801001e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 800ffbe:	4698      	mov	r8, r3
 800ffc0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800ffc4:	f896 3820 	ldrb.w	r3, [r6, #2080]	; 0x820
 800ffc8:	2b04      	cmp	r3, #4
 800ffca:	d1d1      	bne.n	800ff70 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 800ffcc:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800ffd0:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	; 0x40
 800ffd4:	e9cd 2300 	strd	r2, r3, [sp]
 800ffd8:	4313      	orrs	r3, r2
 800ffda:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
 800ffde:	d015      	beq.n	801000c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ffe0:	9a01      	ldr	r2, [sp, #4]
 800ffe2:	4b14      	ldr	r3, [pc, #80]	; (8010034 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 800ffe4:	fb03 f702 	mul.w	r7, r3, r2
 800ffe8:	9a00      	ldr	r2, [sp, #0]
 800ffea:	fba2 2303 	umull	r2, r3, r2, r3
 800ffee:	e9cd 2300 	strd	r2, r3, [sp]
 800fff2:	443b      	add	r3, r7
 800fff4:	9301      	str	r3, [sp, #4]
 800fff6:	e7c5      	b.n	800ff84 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 800fff8:	f8d6 1814 	ldr.w	r1, [r6, #2068]	; 0x814
 800fffc:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	; 0x48
 8010000:	e9cd 2300 	strd	r2, r3, [sp]
 8010004:	4313      	orrs	r3, r2
 8010006:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	; 0x50
 801000a:	d1e9      	bne.n	800ffe0 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 801000c:	ea50 0301 	orrs.w	r3, r0, r1
 8010010:	bf02      	ittt	eq
 8010012:	a305      	addeq	r3, pc, #20	; (adr r3, 8010028 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 8010014:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 8010018:	e9cd 2300 	strdeq	r2, r3, [sp]
 801001c:	e7b2      	b.n	800ff84 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 801001e:	b003      	add	sp, #12
 8010020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010024:	f3af 8000 	nop.w
 8010028:	fc23ac00 	.word	0xfc23ac00
 801002c:	00000006 	.word	0x00000006
 8010030:	2000a0a8 	.word	0x2000a0a8
 8010034:	3b9aca00 	.word	0x3b9aca00

08010038 <run_xrce_session>:
 8010038:	b510      	push	{r4, lr}
 801003a:	788c      	ldrb	r4, [r1, #2]
 801003c:	b086      	sub	sp, #24
 801003e:	2c01      	cmp	r4, #1
 8010040:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010044:	d00c      	beq.n	8010060 <run_xrce_session+0x28>
 8010046:	4619      	mov	r1, r3
 8010048:	2301      	movs	r3, #1
 801004a:	9300      	str	r3, [sp, #0]
 801004c:	f10d 020e 	add.w	r2, sp, #14
 8010050:	f10d 0317 	add.w	r3, sp, #23
 8010054:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010058:	f001 fb20 	bl	801169c <uxr_run_session_until_all_status>
 801005c:	b006      	add	sp, #24
 801005e:	bd10      	pop	{r4, pc}
 8010060:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010064:	f000 ff38 	bl	8010ed8 <uxr_flash_output_streams>
 8010068:	4620      	mov	r0, r4
 801006a:	b006      	add	sp, #24
 801006c:	bd10      	pop	{r4, pc}
 801006e:	bf00      	nop

08010070 <convert_qos_profile>:
 8010070:	b430      	push	{r4, r5}
 8010072:	7a0d      	ldrb	r5, [r1, #8]
 8010074:	780c      	ldrb	r4, [r1, #0]
 8010076:	7a4a      	ldrb	r2, [r1, #9]
 8010078:	8889      	ldrh	r1, [r1, #4]
 801007a:	8081      	strh	r1, [r0, #4]
 801007c:	f1a5 0502 	sub.w	r5, r5, #2
 8010080:	f1a4 0402 	sub.w	r4, r4, #2
 8010084:	2a02      	cmp	r2, #2
 8010086:	fab5 f585 	clz	r5, r5
 801008a:	fab4 f484 	clz	r4, r4
 801008e:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8010092:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8010096:	bf18      	it	ne
 8010098:	2200      	movne	r2, #0
 801009a:	7045      	strb	r5, [r0, #1]
 801009c:	7084      	strb	r4, [r0, #2]
 801009e:	7002      	strb	r2, [r0, #0]
 80100a0:	bc30      	pop	{r4, r5}
 80100a2:	4770      	bx	lr

080100a4 <generate_type_name>:
 80100a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100a6:	2300      	movs	r3, #0
 80100a8:	700b      	strb	r3, [r1, #0]
 80100aa:	6803      	ldr	r3, [r0, #0]
 80100ac:	b087      	sub	sp, #28
 80100ae:	4614      	mov	r4, r2
 80100b0:	b1d3      	cbz	r3, 80100e8 <generate_type_name+0x44>
 80100b2:	4d0f      	ldr	r5, [pc, #60]	; (80100f0 <generate_type_name+0x4c>)
 80100b4:	462f      	mov	r7, r5
 80100b6:	4a0f      	ldr	r2, [pc, #60]	; (80100f4 <generate_type_name+0x50>)
 80100b8:	4e0f      	ldr	r6, [pc, #60]	; (80100f8 <generate_type_name+0x54>)
 80100ba:	6840      	ldr	r0, [r0, #4]
 80100bc:	9004      	str	r0, [sp, #16]
 80100be:	e9cd 6201 	strd	r6, r2, [sp, #4]
 80100c2:	4608      	mov	r0, r1
 80100c4:	9205      	str	r2, [sp, #20]
 80100c6:	9503      	str	r5, [sp, #12]
 80100c8:	4a0c      	ldr	r2, [pc, #48]	; (80100fc <generate_type_name+0x58>)
 80100ca:	9700      	str	r7, [sp, #0]
 80100cc:	4621      	mov	r1, r4
 80100ce:	f00a f907 	bl	801a2e0 <sniprintf>
 80100d2:	2800      	cmp	r0, #0
 80100d4:	db05      	blt.n	80100e2 <generate_type_name+0x3e>
 80100d6:	4284      	cmp	r4, r0
 80100d8:	bfd4      	ite	le
 80100da:	2000      	movle	r0, #0
 80100dc:	2001      	movgt	r0, #1
 80100de:	b007      	add	sp, #28
 80100e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100e2:	2000      	movs	r0, #0
 80100e4:	b007      	add	sp, #28
 80100e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80100e8:	4b05      	ldr	r3, [pc, #20]	; (8010100 <generate_type_name+0x5c>)
 80100ea:	4d01      	ldr	r5, [pc, #4]	; (80100f0 <generate_type_name+0x4c>)
 80100ec:	461f      	mov	r7, r3
 80100ee:	e7e2      	b.n	80100b6 <generate_type_name+0x12>
 80100f0:	0801e018 	.word	0x0801e018
 80100f4:	0801e02c 	.word	0x0801e02c
 80100f8:	0801e030 	.word	0x0801e030
 80100fc:	0801e01c 	.word	0x0801e01c
 8010100:	0801e554 	.word	0x0801e554

08010104 <generate_topic_name>:
 8010104:	b510      	push	{r4, lr}
 8010106:	b082      	sub	sp, #8
 8010108:	4b09      	ldr	r3, [pc, #36]	; (8010130 <generate_topic_name+0x2c>)
 801010a:	9000      	str	r0, [sp, #0]
 801010c:	4614      	mov	r4, r2
 801010e:	4608      	mov	r0, r1
 8010110:	4611      	mov	r1, r2
 8010112:	4a08      	ldr	r2, [pc, #32]	; (8010134 <generate_topic_name+0x30>)
 8010114:	f00a f8e4 	bl	801a2e0 <sniprintf>
 8010118:	2800      	cmp	r0, #0
 801011a:	db05      	blt.n	8010128 <generate_topic_name+0x24>
 801011c:	4284      	cmp	r4, r0
 801011e:	bfd4      	ite	le
 8010120:	2000      	movle	r0, #0
 8010122:	2001      	movgt	r0, #1
 8010124:	b002      	add	sp, #8
 8010126:	bd10      	pop	{r4, pc}
 8010128:	2000      	movs	r0, #0
 801012a:	b002      	add	sp, #8
 801012c:	bd10      	pop	{r4, pc}
 801012e:	bf00      	nop
 8010130:	0801e03c 	.word	0x0801e03c
 8010134:	0801e034 	.word	0x0801e034

08010138 <is_uxrce_rmw_identifier_valid>:
 8010138:	b510      	push	{r4, lr}
 801013a:	4604      	mov	r4, r0
 801013c:	b140      	cbz	r0, 8010150 <is_uxrce_rmw_identifier_valid+0x18>
 801013e:	f006 fb81 	bl	8016844 <rmw_get_implementation_identifier>
 8010142:	4601      	mov	r1, r0
 8010144:	4620      	mov	r0, r4
 8010146:	f7f0 f84b 	bl	80001e0 <strcmp>
 801014a:	fab0 f080 	clz	r0, r0
 801014e:	0940      	lsrs	r0, r0, #5
 8010150:	bd10      	pop	{r4, pc}
 8010152:	bf00      	nop

08010154 <get_message_typesupport_handle>:
 8010154:	6883      	ldr	r3, [r0, #8]
 8010156:	4718      	bx	r3

08010158 <get_message_typesupport_handle_function>:
 8010158:	b510      	push	{r4, lr}
 801015a:	4604      	mov	r4, r0
 801015c:	6800      	ldr	r0, [r0, #0]
 801015e:	f7f0 f83f 	bl	80001e0 <strcmp>
 8010162:	2800      	cmp	r0, #0
 8010164:	bf0c      	ite	eq
 8010166:	4620      	moveq	r0, r4
 8010168:	2000      	movne	r0, #0
 801016a:	bd10      	pop	{r4, pc}

0801016c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 801016c:	f000 b862 	b.w	8010234 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>

08010170 <_String__max_serialized_size>:
 8010170:	2000      	movs	r0, #0
 8010172:	4770      	bx	lr

08010174 <_String__cdr_serialize>:
 8010174:	b1c0      	cbz	r0, 80101a8 <_String__cdr_serialize+0x34>
 8010176:	b570      	push	{r4, r5, r6, lr}
 8010178:	6806      	ldr	r6, [r0, #0]
 801017a:	460d      	mov	r5, r1
 801017c:	4604      	mov	r4, r0
 801017e:	b156      	cbz	r6, 8010196 <_String__cdr_serialize+0x22>
 8010180:	4630      	mov	r0, r6
 8010182:	f7f0 f837 	bl	80001f4 <strlen>
 8010186:	4631      	mov	r1, r6
 8010188:	6060      	str	r0, [r4, #4]
 801018a:	1c42      	adds	r2, r0, #1
 801018c:	4628      	mov	r0, r5
 801018e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010192:	f000 b915 	b.w	80103c0 <ucdr_serialize_sequence_char>
 8010196:	4630      	mov	r0, r6
 8010198:	6060      	str	r0, [r4, #4]
 801019a:	4632      	mov	r2, r6
 801019c:	4631      	mov	r1, r6
 801019e:	4628      	mov	r0, r5
 80101a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80101a4:	f000 b90c 	b.w	80103c0 <ucdr_serialize_sequence_char>
 80101a8:	4770      	bx	lr
 80101aa:	bf00      	nop

080101ac <get_serialized_size_std_msgs__msg__String>:
 80101ac:	b510      	push	{r4, lr}
 80101ae:	4604      	mov	r4, r0
 80101b0:	b130      	cbz	r0, 80101c0 <get_serialized_size_std_msgs__msg__String+0x14>
 80101b2:	4608      	mov	r0, r1
 80101b4:	2104      	movs	r1, #4
 80101b6:	f000 f897 	bl	80102e8 <ucdr_alignment>
 80101ba:	6863      	ldr	r3, [r4, #4]
 80101bc:	3305      	adds	r3, #5
 80101be:	4418      	add	r0, r3
 80101c0:	bd10      	pop	{r4, pc}
 80101c2:	bf00      	nop

080101c4 <_String__cdr_deserialize>:
 80101c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80101c6:	460c      	mov	r4, r1
 80101c8:	b083      	sub	sp, #12
 80101ca:	b1a1      	cbz	r1, 80101f6 <_String__cdr_deserialize+0x32>
 80101cc:	688f      	ldr	r7, [r1, #8]
 80101ce:	6809      	ldr	r1, [r1, #0]
 80101d0:	ab01      	add	r3, sp, #4
 80101d2:	463a      	mov	r2, r7
 80101d4:	4606      	mov	r6, r0
 80101d6:	f000 f905 	bl	80103e4 <ucdr_deserialize_sequence_char>
 80101da:	9b01      	ldr	r3, [sp, #4]
 80101dc:	4605      	mov	r5, r0
 80101de:	b920      	cbnz	r0, 80101ea <_String__cdr_deserialize+0x26>
 80101e0:	429f      	cmp	r7, r3
 80101e2:	d30c      	bcc.n	80101fe <_String__cdr_deserialize+0x3a>
 80101e4:	4628      	mov	r0, r5
 80101e6:	b003      	add	sp, #12
 80101e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101ea:	b103      	cbz	r3, 80101ee <_String__cdr_deserialize+0x2a>
 80101ec:	3b01      	subs	r3, #1
 80101ee:	4628      	mov	r0, r5
 80101f0:	6063      	str	r3, [r4, #4]
 80101f2:	b003      	add	sp, #12
 80101f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101f6:	460d      	mov	r5, r1
 80101f8:	4628      	mov	r0, r5
 80101fa:	b003      	add	sp, #12
 80101fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101fe:	2101      	movs	r1, #1
 8010200:	75b0      	strb	r0, [r6, #22]
 8010202:	7571      	strb	r1, [r6, #21]
 8010204:	6060      	str	r0, [r4, #4]
 8010206:	4630      	mov	r0, r6
 8010208:	f000 f884 	bl	8010314 <ucdr_align_to>
 801020c:	4630      	mov	r0, r6
 801020e:	9901      	ldr	r1, [sp, #4]
 8010210:	f000 f8b6 	bl	8010380 <ucdr_advance_buffer>
 8010214:	4628      	mov	r0, r5
 8010216:	b003      	add	sp, #12
 8010218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801021a:	bf00      	nop

0801021c <_String__get_serialized_size>:
 801021c:	b510      	push	{r4, lr}
 801021e:	4604      	mov	r4, r0
 8010220:	b130      	cbz	r0, 8010230 <_String__get_serialized_size+0x14>
 8010222:	2104      	movs	r1, #4
 8010224:	2000      	movs	r0, #0
 8010226:	f000 f85f 	bl	80102e8 <ucdr_alignment>
 801022a:	6863      	ldr	r3, [r4, #4]
 801022c:	3305      	adds	r3, #5
 801022e:	4418      	add	r0, r3
 8010230:	bd10      	pop	{r4, pc}
 8010232:	bf00      	nop

08010234 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 8010234:	4800      	ldr	r0, [pc, #0]	; (8010238 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 8010236:	4770      	bx	lr
 8010238:	20000058 	.word	0x20000058

0801023c <ucdr_check_buffer_available_for>:
 801023c:	7d83      	ldrb	r3, [r0, #22]
 801023e:	b93b      	cbnz	r3, 8010250 <ucdr_check_buffer_available_for+0x14>
 8010240:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010244:	4419      	add	r1, r3
 8010246:	4288      	cmp	r0, r1
 8010248:	bf34      	ite	cc
 801024a:	2000      	movcc	r0, #0
 801024c:	2001      	movcs	r0, #1
 801024e:	4770      	bx	lr
 8010250:	2000      	movs	r0, #0
 8010252:	4770      	bx	lr

08010254 <ucdr_check_final_buffer_behavior>:
 8010254:	7d83      	ldrb	r3, [r0, #22]
 8010256:	b943      	cbnz	r3, 801026a <ucdr_check_final_buffer_behavior+0x16>
 8010258:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801025c:	4291      	cmp	r1, r2
 801025e:	b510      	push	{r4, lr}
 8010260:	4604      	mov	r4, r0
 8010262:	d205      	bcs.n	8010270 <ucdr_check_final_buffer_behavior+0x1c>
 8010264:	2301      	movs	r3, #1
 8010266:	4618      	mov	r0, r3
 8010268:	bd10      	pop	{r4, pc}
 801026a:	2300      	movs	r3, #0
 801026c:	4618      	mov	r0, r3
 801026e:	4770      	bx	lr
 8010270:	6982      	ldr	r2, [r0, #24]
 8010272:	b13a      	cbz	r2, 8010284 <ucdr_check_final_buffer_behavior+0x30>
 8010274:	69c1      	ldr	r1, [r0, #28]
 8010276:	4790      	blx	r2
 8010278:	f080 0301 	eor.w	r3, r0, #1
 801027c:	b2db      	uxtb	r3, r3
 801027e:	75a0      	strb	r0, [r4, #22]
 8010280:	4618      	mov	r0, r3
 8010282:	bd10      	pop	{r4, pc}
 8010284:	2001      	movs	r0, #1
 8010286:	75a0      	strb	r0, [r4, #22]
 8010288:	e7fa      	b.n	8010280 <ucdr_check_final_buffer_behavior+0x2c>
 801028a:	bf00      	nop

0801028c <ucdr_set_on_full_buffer_callback>:
 801028c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010290:	4770      	bx	lr
 8010292:	bf00      	nop

08010294 <ucdr_init_buffer_origin_offset_endian>:
 8010294:	b430      	push	{r4, r5}
 8010296:	9c02      	ldr	r4, [sp, #8]
 8010298:	f89d 500c 	ldrb.w	r5, [sp, #12]
 801029c:	6001      	str	r1, [r0, #0]
 801029e:	440a      	add	r2, r1
 80102a0:	60c3      	str	r3, [r0, #12]
 80102a2:	4421      	add	r1, r4
 80102a4:	441c      	add	r4, r3
 80102a6:	2300      	movs	r3, #0
 80102a8:	6104      	str	r4, [r0, #16]
 80102aa:	7505      	strb	r5, [r0, #20]
 80102ac:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80102b0:	bc30      	pop	{r4, r5}
 80102b2:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80102b6:	7543      	strb	r3, [r0, #21]
 80102b8:	7583      	strb	r3, [r0, #22]
 80102ba:	4770      	bx	lr

080102bc <ucdr_init_buffer_origin_offset>:
 80102bc:	b510      	push	{r4, lr}
 80102be:	b082      	sub	sp, #8
 80102c0:	9c04      	ldr	r4, [sp, #16]
 80102c2:	9400      	str	r4, [sp, #0]
 80102c4:	2401      	movs	r4, #1
 80102c6:	9401      	str	r4, [sp, #4]
 80102c8:	f7ff ffe4 	bl	8010294 <ucdr_init_buffer_origin_offset_endian>
 80102cc:	b002      	add	sp, #8
 80102ce:	bd10      	pop	{r4, pc}

080102d0 <ucdr_init_buffer_origin>:
 80102d0:	b510      	push	{r4, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	2400      	movs	r4, #0
 80102d6:	9400      	str	r4, [sp, #0]
 80102d8:	f7ff fff0 	bl	80102bc <ucdr_init_buffer_origin_offset>
 80102dc:	b002      	add	sp, #8
 80102de:	bd10      	pop	{r4, pc}

080102e0 <ucdr_init_buffer>:
 80102e0:	2300      	movs	r3, #0
 80102e2:	f7ff bff5 	b.w	80102d0 <ucdr_init_buffer_origin>
 80102e6:	bf00      	nop

080102e8 <ucdr_alignment>:
 80102e8:	fbb0 f3f1 	udiv	r3, r0, r1
 80102ec:	fb03 0011 	mls	r0, r3, r1, r0
 80102f0:	1a08      	subs	r0, r1, r0
 80102f2:	3901      	subs	r1, #1
 80102f4:	4008      	ands	r0, r1
 80102f6:	4770      	bx	lr

080102f8 <ucdr_buffer_alignment>:
 80102f8:	7d43      	ldrb	r3, [r0, #21]
 80102fa:	428b      	cmp	r3, r1
 80102fc:	d208      	bcs.n	8010310 <ucdr_buffer_alignment+0x18>
 80102fe:	6903      	ldr	r3, [r0, #16]
 8010300:	fbb3 f0f1 	udiv	r0, r3, r1
 8010304:	fb01 3010 	mls	r0, r1, r0, r3
 8010308:	1a08      	subs	r0, r1, r0
 801030a:	3901      	subs	r1, #1
 801030c:	4008      	ands	r0, r1
 801030e:	4770      	bx	lr
 8010310:	2000      	movs	r0, #0
 8010312:	4770      	bx	lr

08010314 <ucdr_align_to>:
 8010314:	b570      	push	{r4, r5, r6, lr}
 8010316:	4604      	mov	r4, r0
 8010318:	460e      	mov	r6, r1
 801031a:	f7ff ffed 	bl	80102f8 <ucdr_buffer_alignment>
 801031e:	68a5      	ldr	r5, [r4, #8]
 8010320:	6863      	ldr	r3, [r4, #4]
 8010322:	6922      	ldr	r2, [r4, #16]
 8010324:	7566      	strb	r6, [r4, #21]
 8010326:	4405      	add	r5, r0
 8010328:	42ab      	cmp	r3, r5
 801032a:	4410      	add	r0, r2
 801032c:	bf28      	it	cs
 801032e:	462b      	movcs	r3, r5
 8010330:	6120      	str	r0, [r4, #16]
 8010332:	60a3      	str	r3, [r4, #8]
 8010334:	bd70      	pop	{r4, r5, r6, pc}
 8010336:	bf00      	nop

08010338 <ucdr_buffer_length>:
 8010338:	6882      	ldr	r2, [r0, #8]
 801033a:	6800      	ldr	r0, [r0, #0]
 801033c:	1a10      	subs	r0, r2, r0
 801033e:	4770      	bx	lr

08010340 <ucdr_buffer_remaining>:
 8010340:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010344:	1a10      	subs	r0, r2, r0
 8010346:	4770      	bx	lr

08010348 <ucdr_check_final_buffer_behavior_array>:
 8010348:	b538      	push	{r3, r4, r5, lr}
 801034a:	7d83      	ldrb	r3, [r0, #22]
 801034c:	b963      	cbnz	r3, 8010368 <ucdr_check_final_buffer_behavior_array+0x20>
 801034e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010352:	429a      	cmp	r2, r3
 8010354:	4604      	mov	r4, r0
 8010356:	460d      	mov	r5, r1
 8010358:	d308      	bcc.n	801036c <ucdr_check_final_buffer_behavior_array+0x24>
 801035a:	b139      	cbz	r1, 801036c <ucdr_check_final_buffer_behavior_array+0x24>
 801035c:	6983      	ldr	r3, [r0, #24]
 801035e:	b163      	cbz	r3, 801037a <ucdr_check_final_buffer_behavior_array+0x32>
 8010360:	69c1      	ldr	r1, [r0, #28]
 8010362:	4798      	blx	r3
 8010364:	75a0      	strb	r0, [r4, #22]
 8010366:	b108      	cbz	r0, 801036c <ucdr_check_final_buffer_behavior_array+0x24>
 8010368:	2000      	movs	r0, #0
 801036a:	bd38      	pop	{r3, r4, r5, pc}
 801036c:	4620      	mov	r0, r4
 801036e:	f7ff ffe7 	bl	8010340 <ucdr_buffer_remaining>
 8010372:	42a8      	cmp	r0, r5
 8010374:	bf28      	it	cs
 8010376:	4628      	movcs	r0, r5
 8010378:	bd38      	pop	{r3, r4, r5, pc}
 801037a:	2301      	movs	r3, #1
 801037c:	7583      	strb	r3, [r0, #22]
 801037e:	e7f3      	b.n	8010368 <ucdr_check_final_buffer_behavior_array+0x20>

08010380 <ucdr_advance_buffer>:
 8010380:	b538      	push	{r3, r4, r5, lr}
 8010382:	4604      	mov	r4, r0
 8010384:	460d      	mov	r5, r1
 8010386:	f7ff ff59 	bl	801023c <ucdr_check_buffer_available_for>
 801038a:	b178      	cbz	r0, 80103ac <ucdr_advance_buffer+0x2c>
 801038c:	68a3      	ldr	r3, [r4, #8]
 801038e:	6921      	ldr	r1, [r4, #16]
 8010390:	442b      	add	r3, r5
 8010392:	60a3      	str	r3, [r4, #8]
 8010394:	2301      	movs	r3, #1
 8010396:	4429      	add	r1, r5
 8010398:	7563      	strb	r3, [r4, #21]
 801039a:	6121      	str	r1, [r4, #16]
 801039c:	bd38      	pop	{r3, r4, r5, pc}
 801039e:	68a2      	ldr	r2, [r4, #8]
 80103a0:	6923      	ldr	r3, [r4, #16]
 80103a2:	4402      	add	r2, r0
 80103a4:	4403      	add	r3, r0
 80103a6:	1a2d      	subs	r5, r5, r0
 80103a8:	60a2      	str	r2, [r4, #8]
 80103aa:	6123      	str	r3, [r4, #16]
 80103ac:	2201      	movs	r2, #1
 80103ae:	4629      	mov	r1, r5
 80103b0:	4620      	mov	r0, r4
 80103b2:	f7ff ffc9 	bl	8010348 <ucdr_check_final_buffer_behavior_array>
 80103b6:	2800      	cmp	r0, #0
 80103b8:	d1f1      	bne.n	801039e <ucdr_advance_buffer+0x1e>
 80103ba:	2301      	movs	r3, #1
 80103bc:	7563      	strb	r3, [r4, #21]
 80103be:	bd38      	pop	{r3, r4, r5, pc}

080103c0 <ucdr_serialize_sequence_char>:
 80103c0:	b570      	push	{r4, r5, r6, lr}
 80103c2:	460e      	mov	r6, r1
 80103c4:	4615      	mov	r5, r2
 80103c6:	7d01      	ldrb	r1, [r0, #20]
 80103c8:	4604      	mov	r4, r0
 80103ca:	f007 f9d7 	bl	801777c <ucdr_serialize_endian_uint32_t>
 80103ce:	b90d      	cbnz	r5, 80103d4 <ucdr_serialize_sequence_char+0x14>
 80103d0:	2001      	movs	r0, #1
 80103d2:	bd70      	pop	{r4, r5, r6, pc}
 80103d4:	7d21      	ldrb	r1, [r4, #20]
 80103d6:	462b      	mov	r3, r5
 80103d8:	4632      	mov	r2, r6
 80103da:	4620      	mov	r0, r4
 80103dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80103e0:	f006 bdc2 	b.w	8016f68 <ucdr_serialize_endian_array_char>

080103e4 <ucdr_deserialize_sequence_char>:
 80103e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103e8:	461d      	mov	r5, r3
 80103ea:	4616      	mov	r6, r2
 80103ec:	460f      	mov	r7, r1
 80103ee:	461a      	mov	r2, r3
 80103f0:	7d01      	ldrb	r1, [r0, #20]
 80103f2:	4604      	mov	r4, r0
 80103f4:	f007 faea 	bl	80179cc <ucdr_deserialize_endian_uint32_t>
 80103f8:	682b      	ldr	r3, [r5, #0]
 80103fa:	429e      	cmp	r6, r3
 80103fc:	bf3c      	itt	cc
 80103fe:	2201      	movcc	r2, #1
 8010400:	75a2      	strbcc	r2, [r4, #22]
 8010402:	b913      	cbnz	r3, 801040a <ucdr_deserialize_sequence_char+0x26>
 8010404:	2001      	movs	r0, #1
 8010406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801040a:	7d21      	ldrb	r1, [r4, #20]
 801040c:	463a      	mov	r2, r7
 801040e:	4620      	mov	r0, r4
 8010410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010414:	f006 bdda 	b.w	8016fcc <ucdr_deserialize_endian_array_char>

08010418 <ucdr_serialize_sequence_uint8_t>:
 8010418:	b570      	push	{r4, r5, r6, lr}
 801041a:	460e      	mov	r6, r1
 801041c:	4615      	mov	r5, r2
 801041e:	7d01      	ldrb	r1, [r0, #20]
 8010420:	4604      	mov	r4, r0
 8010422:	f007 f9ab 	bl	801777c <ucdr_serialize_endian_uint32_t>
 8010426:	b90d      	cbnz	r5, 801042c <ucdr_serialize_sequence_uint8_t+0x14>
 8010428:	2001      	movs	r0, #1
 801042a:	bd70      	pop	{r4, r5, r6, pc}
 801042c:	7d21      	ldrb	r1, [r4, #20]
 801042e:	462b      	mov	r3, r5
 8010430:	4632      	mov	r2, r6
 8010432:	4620      	mov	r0, r4
 8010434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010438:	f006 be2c 	b.w	8017094 <ucdr_serialize_endian_array_uint8_t>

0801043c <ucdr_deserialize_sequence_uint8_t>:
 801043c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010440:	461d      	mov	r5, r3
 8010442:	4616      	mov	r6, r2
 8010444:	460f      	mov	r7, r1
 8010446:	461a      	mov	r2, r3
 8010448:	7d01      	ldrb	r1, [r0, #20]
 801044a:	4604      	mov	r4, r0
 801044c:	f007 fabe 	bl	80179cc <ucdr_deserialize_endian_uint32_t>
 8010450:	682b      	ldr	r3, [r5, #0]
 8010452:	429e      	cmp	r6, r3
 8010454:	bf3c      	itt	cc
 8010456:	2201      	movcc	r2, #1
 8010458:	75a2      	strbcc	r2, [r4, #22]
 801045a:	b913      	cbnz	r3, 8010462 <ucdr_deserialize_sequence_uint8_t+0x26>
 801045c:	2001      	movs	r0, #1
 801045e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010462:	7d21      	ldrb	r1, [r4, #20]
 8010464:	463a      	mov	r2, r7
 8010466:	4620      	mov	r0, r4
 8010468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801046c:	f006 be76 	b.w	801715c <ucdr_deserialize_endian_array_uint8_t>

08010470 <uxr_buffer_delete_entity>:
 8010470:	b530      	push	{r4, r5, lr}
 8010472:	b08f      	sub	sp, #60	; 0x3c
 8010474:	2403      	movs	r4, #3
 8010476:	2500      	movs	r5, #0
 8010478:	e9cd 4500 	strd	r4, r5, [sp]
 801047c:	9202      	str	r2, [sp, #8]
 801047e:	ab06      	add	r3, sp, #24
 8010480:	2204      	movs	r2, #4
 8010482:	9103      	str	r1, [sp, #12]
 8010484:	4604      	mov	r4, r0
 8010486:	f001 fb45 	bl	8011b14 <uxr_prepare_stream_to_write_submessage>
 801048a:	b918      	cbnz	r0, 8010494 <uxr_buffer_delete_entity+0x24>
 801048c:	4604      	mov	r4, r0
 801048e:	4620      	mov	r0, r4
 8010490:	b00f      	add	sp, #60	; 0x3c
 8010492:	bd30      	pop	{r4, r5, pc}
 8010494:	9902      	ldr	r1, [sp, #8]
 8010496:	aa05      	add	r2, sp, #20
 8010498:	4620      	mov	r0, r4
 801049a:	f001 fc75 	bl	8011d88 <uxr_init_base_object_request>
 801049e:	a905      	add	r1, sp, #20
 80104a0:	4604      	mov	r4, r0
 80104a2:	a806      	add	r0, sp, #24
 80104a4:	f003 fb2e 	bl	8013b04 <uxr_serialize_DELETE_Payload>
 80104a8:	4620      	mov	r0, r4
 80104aa:	b00f      	add	sp, #60	; 0x3c
 80104ac:	bd30      	pop	{r4, r5, pc}
 80104ae:	bf00      	nop

080104b0 <uxr_common_create_entity>:
 80104b0:	b530      	push	{r4, r5, lr}
 80104b2:	f3c2 4507 	ubfx	r5, r2, #16, #8
 80104b6:	b08d      	sub	sp, #52	; 0x34
 80104b8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80104bc:	2d01      	cmp	r5, #1
 80104be:	bf0c      	ite	eq
 80104c0:	f003 0201 	andeq.w	r2, r3, #1
 80104c4:	2200      	movne	r2, #0
 80104c6:	330e      	adds	r3, #14
 80104c8:	4604      	mov	r4, r0
 80104ca:	441a      	add	r2, r3
 80104cc:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80104d0:	9001      	str	r0, [sp, #4]
 80104d2:	2101      	movs	r1, #1
 80104d4:	9100      	str	r1, [sp, #0]
 80104d6:	b292      	uxth	r2, r2
 80104d8:	9903      	ldr	r1, [sp, #12]
 80104da:	ab04      	add	r3, sp, #16
 80104dc:	4620      	mov	r0, r4
 80104de:	f001 fb19 	bl	8011b14 <uxr_prepare_stream_to_write_submessage>
 80104e2:	b918      	cbnz	r0, 80104ec <uxr_common_create_entity+0x3c>
 80104e4:	4604      	mov	r4, r0
 80104e6:	4620      	mov	r0, r4
 80104e8:	b00d      	add	sp, #52	; 0x34
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80104ee:	9902      	ldr	r1, [sp, #8]
 80104f0:	4620      	mov	r0, r4
 80104f2:	f001 fc49 	bl	8011d88 <uxr_init_base_object_request>
 80104f6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80104f8:	4604      	mov	r4, r0
 80104fa:	a804      	add	r0, sp, #16
 80104fc:	f003 fa56 	bl	80139ac <uxr_serialize_CREATE_Payload>
 8010500:	4620      	mov	r0, r4
 8010502:	b00d      	add	sp, #52	; 0x34
 8010504:	bd30      	pop	{r4, r5, pc}
 8010506:	bf00      	nop

08010508 <uxr_buffer_create_participant_bin>:
 8010508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801050a:	f5ad 7d17 	sub.w	sp, sp, #604	; 0x25c
 801050e:	ac11      	add	r4, sp, #68	; 0x44
 8010510:	9103      	str	r1, [sp, #12]
 8010512:	9e9c      	ldr	r6, [sp, #624]	; 0x270
 8010514:	f8a4 3210 	strh.w	r3, [r4, #528]	; 0x210
 8010518:	2103      	movs	r1, #3
 801051a:	7221      	strb	r1, [r4, #8]
 801051c:	2301      	movs	r3, #1
 801051e:	2100      	movs	r1, #0
 8010520:	7123      	strb	r3, [r4, #4]
 8010522:	f89d 7274 	ldrb.w	r7, [sp, #628]	; 0x274
 8010526:	9202      	str	r2, [sp, #8]
 8010528:	4605      	mov	r5, r0
 801052a:	f88d 1014 	strb.w	r1, [sp, #20]
 801052e:	b1ce      	cbz	r6, 8010564 <uxr_buffer_create_participant_bin+0x5c>
 8010530:	f88d 301c 	strb.w	r3, [sp, #28]
 8010534:	9608      	str	r6, [sp, #32]
 8010536:	a809      	add	r0, sp, #36	; 0x24
 8010538:	f44f 7200 	mov.w	r2, #512	; 0x200
 801053c:	a915      	add	r1, sp, #84	; 0x54
 801053e:	f7ff fecf 	bl	80102e0 <ucdr_init_buffer>
 8010542:	a905      	add	r1, sp, #20
 8010544:	a809      	add	r0, sp, #36	; 0x24
 8010546:	f002 fdf9 	bl	801313c <uxr_serialize_OBJK_DomainParticipant_Binary>
 801054a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801054c:	9401      	str	r4, [sp, #4]
 801054e:	b283      	uxth	r3, r0
 8010550:	9700      	str	r7, [sp, #0]
 8010552:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010556:	60e0      	str	r0, [r4, #12]
 8010558:	4628      	mov	r0, r5
 801055a:	f7ff ffa9 	bl	80104b0 <uxr_common_create_entity>
 801055e:	f50d 7d17 	add.w	sp, sp, #604	; 0x25c
 8010562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010564:	f88d 601c 	strb.w	r6, [sp, #28]
 8010568:	e7e5      	b.n	8010536 <uxr_buffer_create_participant_bin+0x2e>
 801056a:	bf00      	nop

0801056c <uxr_buffer_create_topic_bin>:
 801056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801056e:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8010572:	ac13      	add	r4, sp, #76	; 0x4c
 8010574:	4605      	mov	r5, r0
 8010576:	9105      	str	r1, [sp, #20]
 8010578:	4618      	mov	r0, r3
 801057a:	a997      	add	r1, sp, #604	; 0x25c
 801057c:	2602      	movs	r6, #2
 801057e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010582:	f89d 7280 	ldrb.w	r7, [sp, #640]	; 0x280
 8010586:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
 801058a:	9e9f      	ldr	r6, [sp, #636]	; 0x27c
 801058c:	f000 fa54 	bl	8010a38 <uxr_object_id_to_raw>
 8010590:	9a9e      	ldr	r2, [sp, #632]	; 0x278
 8010592:	9206      	str	r2, [sp, #24]
 8010594:	2303      	movs	r3, #3
 8010596:	2101      	movs	r1, #1
 8010598:	7223      	strb	r3, [r4, #8]
 801059a:	a80b      	add	r0, sp, #44	; 0x2c
 801059c:	2300      	movs	r3, #0
 801059e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80105a2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80105a6:	a917      	add	r1, sp, #92	; 0x5c
 80105a8:	f88d 301c 	strb.w	r3, [sp, #28]
 80105ac:	960a      	str	r6, [sp, #40]	; 0x28
 80105ae:	f7ff fe97 	bl	80102e0 <ucdr_init_buffer>
 80105b2:	a906      	add	r1, sp, #24
 80105b4:	a80b      	add	r0, sp, #44	; 0x2c
 80105b6:	f002 fde3 	bl	8013180 <uxr_serialize_OBJK_Topic_Binary>
 80105ba:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80105bc:	9401      	str	r4, [sp, #4]
 80105be:	9700      	str	r7, [sp, #0]
 80105c0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80105c4:	4628      	mov	r0, r5
 80105c6:	b2b3      	uxth	r3, r6
 80105c8:	60e6      	str	r6, [r4, #12]
 80105ca:	f7ff ff71 	bl	80104b0 <uxr_common_create_entity>
 80105ce:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80105d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080105d4 <uxr_buffer_create_publisher_bin>:
 80105d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105d6:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80105da:	ac0e      	add	r4, sp, #56	; 0x38
 80105dc:	4605      	mov	r5, r0
 80105de:	9105      	str	r1, [sp, #20]
 80105e0:	4618      	mov	r0, r3
 80105e2:	2603      	movs	r6, #3
 80105e4:	a992      	add	r1, sp, #584	; 0x248
 80105e6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80105ea:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 80105ee:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 80105f2:	f000 fa21 	bl	8010a38 <uxr_object_id_to_raw>
 80105f6:	2300      	movs	r3, #0
 80105f8:	a806      	add	r0, sp, #24
 80105fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80105fe:	a912      	add	r1, sp, #72	; 0x48
 8010600:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8010604:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8010608:	7226      	strb	r6, [r4, #8]
 801060a:	f7ff fe69 	bl	80102e0 <ucdr_init_buffer>
 801060e:	a993      	add	r1, sp, #588	; 0x24c
 8010610:	a806      	add	r0, sp, #24
 8010612:	f002 fe69 	bl	80132e8 <uxr_serialize_OBJK_Publisher_Binary>
 8010616:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010618:	9700      	str	r7, [sp, #0]
 801061a:	9401      	str	r4, [sp, #4]
 801061c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010620:	4628      	mov	r0, r5
 8010622:	b2b3      	uxth	r3, r6
 8010624:	60e6      	str	r6, [r4, #12]
 8010626:	f7ff ff43 	bl	80104b0 <uxr_common_create_entity>
 801062a:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 801062e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010630 <uxr_buffer_create_subscriber_bin>:
 8010630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010632:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8010636:	ac0e      	add	r4, sp, #56	; 0x38
 8010638:	4605      	mov	r5, r0
 801063a:	9105      	str	r1, [sp, #20]
 801063c:	4618      	mov	r0, r3
 801063e:	a992      	add	r1, sp, #584	; 0x248
 8010640:	2604      	movs	r6, #4
 8010642:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010646:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 801064a:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 801064e:	f000 f9f3 	bl	8010a38 <uxr_object_id_to_raw>
 8010652:	2103      	movs	r1, #3
 8010654:	2300      	movs	r3, #0
 8010656:	a806      	add	r0, sp, #24
 8010658:	f44f 7200 	mov.w	r2, #512	; 0x200
 801065c:	7221      	strb	r1, [r4, #8]
 801065e:	a912      	add	r1, sp, #72	; 0x48
 8010660:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8010664:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8010668:	f7ff fe3a 	bl	80102e0 <ucdr_init_buffer>
 801066c:	a993      	add	r1, sp, #588	; 0x24c
 801066e:	a806      	add	r0, sp, #24
 8010670:	f002 feea 	bl	8013448 <uxr_serialize_OBJK_Subscriber_Binary>
 8010674:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010676:	9700      	str	r7, [sp, #0]
 8010678:	9401      	str	r4, [sp, #4]
 801067a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801067e:	4628      	mov	r0, r5
 8010680:	b2b3      	uxth	r3, r6
 8010682:	60e6      	str	r6, [r4, #12]
 8010684:	f7ff ff14 	bl	80104b0 <uxr_common_create_entity>
 8010688:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 801068c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801068e:	bf00      	nop

08010690 <uxr_buffer_create_datawriter_bin>:
 8010690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010694:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010698:	ac1d      	add	r4, sp, #116	; 0x74
 801069a:	2505      	movs	r5, #5
 801069c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80106a0:	9105      	str	r1, [sp, #20]
 80106a2:	4606      	mov	r6, r0
 80106a4:	a9a1      	add	r1, sp, #644	; 0x284
 80106a6:	4618      	mov	r0, r3
 80106a8:	7125      	strb	r5, [r4, #4]
 80106aa:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 80106ae:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 80106b2:	2703      	movs	r7, #3
 80106b4:	f000 f9c0 	bl	8010a38 <uxr_object_id_to_raw>
 80106b8:	a90e      	add	r1, sp, #56	; 0x38
 80106ba:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 80106bc:	7227      	strb	r7, [r4, #8]
 80106be:	f000 f9bb 	bl	8010a38 <uxr_object_id_to_raw>
 80106c2:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 80106c6:	f89d 12a5 	ldrb.w	r1, [sp, #677]	; 0x2a5
 80106ca:	3d00      	subs	r5, #0
 80106cc:	f04f 0300 	mov.w	r3, #0
 80106d0:	bf18      	it	ne
 80106d2:	2501      	movne	r5, #1
 80106d4:	2201      	movs	r2, #1
 80106d6:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 80106da:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 80106de:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80106e2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80106e6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 80106ea:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80106ee:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80106f2:	bb89      	cbnz	r1, 8010758 <uxr_buffer_create_datawriter_bin+0xc8>
 80106f4:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80106f8:	f04f 0e23 	mov.w	lr, #35	; 0x23
 80106fc:	f04f 0c13 	mov.w	ip, #19
 8010700:	250b      	movs	r5, #11
 8010702:	2221      	movs	r2, #33	; 0x21
 8010704:	2111      	movs	r1, #17
 8010706:	2009      	movs	r0, #9
 8010708:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 801070c:	b923      	cbnz	r3, 8010718 <uxr_buffer_create_datawriter_bin+0x88>
 801070e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8010712:	4672      	mov	r2, lr
 8010714:	4661      	mov	r1, ip
 8010716:	4628      	mov	r0, r5
 8010718:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 801071c:	2b01      	cmp	r3, #1
 801071e:	d025      	beq.n	801076c <uxr_buffer_create_datawriter_bin+0xdc>
 8010720:	2b03      	cmp	r3, #3
 8010722:	d029      	beq.n	8010778 <uxr_buffer_create_datawriter_bin+0xe8>
 8010724:	b32b      	cbz	r3, 8010772 <uxr_buffer_create_datawriter_bin+0xe2>
 8010726:	a806      	add	r0, sp, #24
 8010728:	f44f 7200 	mov.w	r2, #512	; 0x200
 801072c:	a921      	add	r1, sp, #132	; 0x84
 801072e:	f7ff fdd7 	bl	80102e0 <ucdr_init_buffer>
 8010732:	a90e      	add	r1, sp, #56	; 0x38
 8010734:	a806      	add	r0, sp, #24
 8010736:	f002 ff39 	bl	80135ac <uxr_serialize_OBJK_DataWriter_Binary>
 801073a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801073c:	9401      	str	r4, [sp, #4]
 801073e:	b283      	uxth	r3, r0
 8010740:	f8cd 8000 	str.w	r8, [sp]
 8010744:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010748:	60e0      	str	r0, [r4, #12]
 801074a:	4630      	mov	r0, r6
 801074c:	f7ff feb0 	bl	80104b0 <uxr_common_create_entity>
 8010750:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010758:	f04f 0e22 	mov.w	lr, #34	; 0x22
 801075c:	f04f 0c12 	mov.w	ip, #18
 8010760:	250a      	movs	r5, #10
 8010762:	2220      	movs	r2, #32
 8010764:	2110      	movs	r1, #16
 8010766:	2008      	movs	r0, #8
 8010768:	2702      	movs	r7, #2
 801076a:	e7cd      	b.n	8010708 <uxr_buffer_create_datawriter_bin+0x78>
 801076c:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8010770:	e7d9      	b.n	8010726 <uxr_buffer_create_datawriter_bin+0x96>
 8010772:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8010776:	e7d6      	b.n	8010726 <uxr_buffer_create_datawriter_bin+0x96>
 8010778:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801077c:	e7d3      	b.n	8010726 <uxr_buffer_create_datawriter_bin+0x96>
 801077e:	bf00      	nop

08010780 <uxr_buffer_create_datareader_bin>:
 8010780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010784:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8010788:	ac1f      	add	r4, sp, #124	; 0x7c
 801078a:	2506      	movs	r5, #6
 801078c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010790:	9105      	str	r1, [sp, #20]
 8010792:	4606      	mov	r6, r0
 8010794:	a9a3      	add	r1, sp, #652	; 0x28c
 8010796:	4618      	mov	r0, r3
 8010798:	7125      	strb	r5, [r4, #4]
 801079a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 801079e:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 80107a2:	2703      	movs	r7, #3
 80107a4:	f000 f948 	bl	8010a38 <uxr_object_id_to_raw>
 80107a8:	a90e      	add	r1, sp, #56	; 0x38
 80107aa:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 80107ac:	7227      	strb	r7, [r4, #8]
 80107ae:	f000 f943 	bl	8010a38 <uxr_object_id_to_raw>
 80107b2:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 80107b6:	f89d 12ad 	ldrb.w	r1, [sp, #685]	; 0x2ad
 80107ba:	3d00      	subs	r5, #0
 80107bc:	f04f 0300 	mov.w	r3, #0
 80107c0:	bf18      	it	ne
 80107c2:	2501      	movne	r5, #1
 80107c4:	2201      	movs	r2, #1
 80107c6:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 80107ca:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
 80107ce:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 80107d2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 80107d6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 80107da:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 80107de:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80107e2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80107e6:	bb89      	cbnz	r1, 801084c <uxr_buffer_create_datareader_bin+0xcc>
 80107e8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80107ec:	f04f 0e23 	mov.w	lr, #35	; 0x23
 80107f0:	f04f 0c13 	mov.w	ip, #19
 80107f4:	250b      	movs	r5, #11
 80107f6:	2221      	movs	r2, #33	; 0x21
 80107f8:	2111      	movs	r1, #17
 80107fa:	2009      	movs	r0, #9
 80107fc:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8010800:	b923      	cbnz	r3, 801080c <uxr_buffer_create_datareader_bin+0x8c>
 8010802:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8010806:	4672      	mov	r2, lr
 8010808:	4661      	mov	r1, ip
 801080a:	4628      	mov	r0, r5
 801080c:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8010810:	2b01      	cmp	r3, #1
 8010812:	d025      	beq.n	8010860 <uxr_buffer_create_datareader_bin+0xe0>
 8010814:	2b03      	cmp	r3, #3
 8010816:	d029      	beq.n	801086c <uxr_buffer_create_datareader_bin+0xec>
 8010818:	b32b      	cbz	r3, 8010866 <uxr_buffer_create_datareader_bin+0xe6>
 801081a:	a806      	add	r0, sp, #24
 801081c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010820:	a923      	add	r1, sp, #140	; 0x8c
 8010822:	f7ff fd5d 	bl	80102e0 <ucdr_init_buffer>
 8010826:	a90e      	add	r1, sp, #56	; 0x38
 8010828:	a806      	add	r0, sp, #24
 801082a:	f002 fe83 	bl	8013534 <uxr_serialize_OBJK_DataReader_Binary>
 801082e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8010830:	9401      	str	r4, [sp, #4]
 8010832:	b283      	uxth	r3, r0
 8010834:	f8cd 8000 	str.w	r8, [sp]
 8010838:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801083c:	60e0      	str	r0, [r4, #12]
 801083e:	4630      	mov	r0, r6
 8010840:	f7ff fe36 	bl	80104b0 <uxr_common_create_entity>
 8010844:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8010848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801084c:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8010850:	f04f 0c12 	mov.w	ip, #18
 8010854:	250a      	movs	r5, #10
 8010856:	2220      	movs	r2, #32
 8010858:	2110      	movs	r1, #16
 801085a:	2008      	movs	r0, #8
 801085c:	2702      	movs	r7, #2
 801085e:	e7cd      	b.n	80107fc <uxr_buffer_create_datareader_bin+0x7c>
 8010860:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8010864:	e7d9      	b.n	801081a <uxr_buffer_create_datareader_bin+0x9a>
 8010866:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801086a:	e7d6      	b.n	801081a <uxr_buffer_create_datareader_bin+0x9a>
 801086c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8010870:	e7d3      	b.n	801081a <uxr_buffer_create_datareader_bin+0x9a>
 8010872:	bf00      	nop

08010874 <get_custom_error>:
 8010874:	4b01      	ldr	r3, [pc, #4]	; (801087c <get_custom_error+0x8>)
 8010876:	7818      	ldrb	r0, [r3, #0]
 8010878:	4770      	bx	lr
 801087a:	bf00      	nop
 801087c:	20009f14 	.word	0x20009f14

08010880 <recv_custom_msg>:
 8010880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010884:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8010888:	b089      	sub	sp, #36	; 0x24
 801088a:	2600      	movs	r6, #0
 801088c:	4604      	mov	r4, r0
 801088e:	9305      	str	r3, [sp, #20]
 8010890:	468a      	mov	sl, r1
 8010892:	4693      	mov	fp, r2
 8010894:	f88d 601e 	strb.w	r6, [sp, #30]
 8010898:	b325      	cbz	r5, 80108e4 <recv_custom_msg+0x64>
 801089a:	f200 2902 	addw	r9, r0, #514	; 0x202
 801089e:	f10d 081f 	add.w	r8, sp, #31
 80108a2:	af05      	add	r7, sp, #20
 80108a4:	f10d 061e 	add.w	r6, sp, #30
 80108a8:	f44f 7500 	mov.w	r5, #512	; 0x200
 80108ac:	e002      	b.n	80108b4 <recv_custom_msg+0x34>
 80108ae:	9b05      	ldr	r3, [sp, #20]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	dd0f      	ble.n	80108d4 <recv_custom_msg+0x54>
 80108b4:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80108b8:	e9cd 5600 	strd	r5, r6, [sp]
 80108bc:	4623      	mov	r3, r4
 80108be:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80108c2:	4622      	mov	r2, r4
 80108c4:	4648      	mov	r0, r9
 80108c6:	f001 fc7d 	bl	80121c4 <uxr_read_framed_msg>
 80108ca:	2800      	cmp	r0, #0
 80108cc:	d0ef      	beq.n	80108ae <recv_custom_msg+0x2e>
 80108ce:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80108d2:	b1b3      	cbz	r3, 8010902 <recv_custom_msg+0x82>
 80108d4:	4b0f      	ldr	r3, [pc, #60]	; (8010914 <recv_custom_msg+0x94>)
 80108d6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80108da:	701a      	strb	r2, [r3, #0]
 80108dc:	2000      	movs	r0, #0
 80108de:	b009      	add	sp, #36	; 0x24
 80108e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e4:	f10d 021f 	add.w	r2, sp, #31
 80108e8:	9200      	str	r2, [sp, #0]
 80108ea:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80108ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80108f2:	4601      	mov	r1, r0
 80108f4:	47a8      	blx	r5
 80108f6:	2800      	cmp	r0, #0
 80108f8:	d0ec      	beq.n	80108d4 <recv_custom_msg+0x54>
 80108fa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d1e8      	bne.n	80108d4 <recv_custom_msg+0x54>
 8010902:	f8cb 0000 	str.w	r0, [fp]
 8010906:	2001      	movs	r0, #1
 8010908:	f8ca 4000 	str.w	r4, [sl]
 801090c:	b009      	add	sp, #36	; 0x24
 801090e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010912:	bf00      	nop
 8010914:	20009f14 	.word	0x20009f14

08010918 <send_custom_msg>:
 8010918:	b570      	push	{r4, r5, r6, lr}
 801091a:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801091e:	b086      	sub	sp, #24
 8010920:	4616      	mov	r6, r2
 8010922:	b975      	cbnz	r5, 8010942 <send_custom_msg+0x2a>
 8010924:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8010928:	f10d 0317 	add.w	r3, sp, #23
 801092c:	47a0      	blx	r4
 801092e:	b108      	cbz	r0, 8010934 <send_custom_msg+0x1c>
 8010930:	42b0      	cmp	r0, r6
 8010932:	d015      	beq.n	8010960 <send_custom_msg+0x48>
 8010934:	4b0c      	ldr	r3, [pc, #48]	; (8010968 <send_custom_msg+0x50>)
 8010936:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801093a:	701a      	strb	r2, [r3, #0]
 801093c:	2000      	movs	r0, #0
 801093e:	b006      	add	sp, #24
 8010940:	bd70      	pop	{r4, r5, r6, pc}
 8010942:	460b      	mov	r3, r1
 8010944:	2200      	movs	r2, #0
 8010946:	f10d 0117 	add.w	r1, sp, #23
 801094a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801094e:	9600      	str	r6, [sp, #0]
 8010950:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8010954:	4602      	mov	r2, r0
 8010956:	f200 2002 	addw	r0, r0, #514	; 0x202
 801095a:	f001 fa4b 	bl	8011df4 <uxr_write_framed_msg>
 801095e:	e7e6      	b.n	801092e <send_custom_msg+0x16>
 8010960:	2001      	movs	r0, #1
 8010962:	b006      	add	sp, #24
 8010964:	bd70      	pop	{r4, r5, r6, pc}
 8010966:	bf00      	nop
 8010968:	20009f14 	.word	0x20009f14

0801096c <uxr_set_custom_transport_callbacks>:
 801096c:	b430      	push	{r4, r5}
 801096e:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8010972:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8010976:	e9c0 549c 	strd	r5, r4, [r0, #624]	; 0x270
 801097a:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 801097e:	bc30      	pop	{r4, r5}
 8010980:	4770      	bx	lr
 8010982:	bf00      	nop

08010984 <uxr_init_custom_transport>:
 8010984:	b538      	push	{r3, r4, r5, lr}
 8010986:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801098a:	b303      	cbz	r3, 80109ce <uxr_init_custom_transport+0x4a>
 801098c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8010990:	4604      	mov	r4, r0
 8010992:	b1e2      	cbz	r2, 80109ce <uxr_init_custom_transport+0x4a>
 8010994:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8010998:	b1ca      	cbz	r2, 80109ce <uxr_init_custom_transport+0x4a>
 801099a:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801099e:	b1b2      	cbz	r2, 80109ce <uxr_init_custom_transport+0x4a>
 80109a0:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80109a4:	4798      	blx	r3
 80109a6:	4605      	mov	r5, r0
 80109a8:	b188      	cbz	r0, 80109ce <uxr_init_custom_transport+0x4a>
 80109aa:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80109ae:	b98b      	cbnz	r3, 80109d4 <uxr_init_custom_transport+0x50>
 80109b0:	480b      	ldr	r0, [pc, #44]	; (80109e0 <uxr_init_custom_transport+0x5c>)
 80109b2:	490c      	ldr	r1, [pc, #48]	; (80109e4 <uxr_init_custom_transport+0x60>)
 80109b4:	4a0c      	ldr	r2, [pc, #48]	; (80109e8 <uxr_init_custom_transport+0x64>)
 80109b6:	f8c4 4278 	str.w	r4, [r4, #632]	; 0x278
 80109ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80109be:	e9c4 019f 	strd	r0, r1, [r4, #636]	; 0x27c
 80109c2:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80109c6:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80109ca:	4628      	mov	r0, r5
 80109cc:	bd38      	pop	{r3, r4, r5, pc}
 80109ce:	2500      	movs	r5, #0
 80109d0:	4628      	mov	r0, r5
 80109d2:	bd38      	pop	{r3, r4, r5, pc}
 80109d4:	2100      	movs	r1, #0
 80109d6:	f204 2002 	addw	r0, r4, #514	; 0x202
 80109da:	f001 fa05 	bl	8011de8 <uxr_init_framing_io>
 80109de:	e7e7      	b.n	80109b0 <uxr_init_custom_transport+0x2c>
 80109e0:	08010919 	.word	0x08010919
 80109e4:	08010881 	.word	0x08010881
 80109e8:	08010875 	.word	0x08010875

080109ec <uxr_close_custom_transport>:
 80109ec:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80109f0:	4718      	bx	r3
 80109f2:	bf00      	nop

080109f4 <uxr_object_id>:
 80109f4:	b082      	sub	sp, #8
 80109f6:	2300      	movs	r3, #0
 80109f8:	f88d 1006 	strb.w	r1, [sp, #6]
 80109fc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010a00:	f360 030f 	bfi	r3, r0, #0, #16
 8010a04:	f362 431f 	bfi	r3, r2, #16, #16
 8010a08:	4618      	mov	r0, r3
 8010a0a:	b002      	add	sp, #8
 8010a0c:	4770      	bx	lr
 8010a0e:	bf00      	nop

08010a10 <uxr_object_id_from_raw>:
 8010a10:	7843      	ldrb	r3, [r0, #1]
 8010a12:	7801      	ldrb	r1, [r0, #0]
 8010a14:	b082      	sub	sp, #8
 8010a16:	f003 000f 	and.w	r0, r3, #15
 8010a1a:	f88d 0006 	strb.w	r0, [sp, #6]
 8010a1e:	091b      	lsrs	r3, r3, #4
 8010a20:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010a24:	2200      	movs	r2, #0
 8010a26:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8010a2a:	f363 020f 	bfi	r2, r3, #0, #16
 8010a2e:	f361 421f 	bfi	r2, r1, #16, #16
 8010a32:	4610      	mov	r0, r2
 8010a34:	b002      	add	sp, #8
 8010a36:	4770      	bx	lr

08010a38 <uxr_object_id_to_raw>:
 8010a38:	4602      	mov	r2, r0
 8010a3a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010a3e:	b082      	sub	sp, #8
 8010a40:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8010a44:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8010a48:	700a      	strb	r2, [r1, #0]
 8010a4a:	704b      	strb	r3, [r1, #1]
 8010a4c:	b002      	add	sp, #8
 8010a4e:	4770      	bx	lr

08010a50 <uxr_buffer_request_data>:
 8010a50:	b530      	push	{r4, r5, lr}
 8010a52:	b095      	sub	sp, #84	; 0x54
 8010a54:	4604      	mov	r4, r0
 8010a56:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8010a58:	9105      	str	r1, [sp, #20]
 8010a5a:	2d00      	cmp	r5, #0
 8010a5c:	bf14      	ite	ne
 8010a5e:	2101      	movne	r1, #1
 8010a60:	2100      	moveq	r1, #0
 8010a62:	9204      	str	r2, [sp, #16]
 8010a64:	f04f 0200 	mov.w	r2, #0
 8010a68:	9303      	str	r3, [sp, #12]
 8010a6a:	f88d 301c 	strb.w	r3, [sp, #28]
 8010a6e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8010a72:	f88d 201d 	strb.w	r2, [sp, #29]
 8010a76:	f88d 201e 	strb.w	r2, [sp, #30]
 8010a7a:	d021      	beq.n	8010ac0 <uxr_buffer_request_data+0x70>
 8010a7c:	686a      	ldr	r2, [r5, #4]
 8010a7e:	682b      	ldr	r3, [r5, #0]
 8010a80:	f8cd 202a 	str.w	r2, [sp, #42]	; 0x2a
 8010a84:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8010a88:	2210      	movs	r2, #16
 8010a8a:	2000      	movs	r0, #0
 8010a8c:	2108      	movs	r1, #8
 8010a8e:	e9cd 1000 	strd	r1, r0, [sp]
 8010a92:	ab0c      	add	r3, sp, #48	; 0x30
 8010a94:	9905      	ldr	r1, [sp, #20]
 8010a96:	4620      	mov	r0, r4
 8010a98:	f001 f83c 	bl	8011b14 <uxr_prepare_stream_to_write_submessage>
 8010a9c:	b918      	cbnz	r0, 8010aa6 <uxr_buffer_request_data+0x56>
 8010a9e:	4604      	mov	r4, r0
 8010aa0:	4620      	mov	r0, r4
 8010aa2:	b015      	add	sp, #84	; 0x54
 8010aa4:	bd30      	pop	{r4, r5, pc}
 8010aa6:	9904      	ldr	r1, [sp, #16]
 8010aa8:	aa06      	add	r2, sp, #24
 8010aaa:	4620      	mov	r0, r4
 8010aac:	f001 f96c 	bl	8011d88 <uxr_init_base_object_request>
 8010ab0:	a906      	add	r1, sp, #24
 8010ab2:	4604      	mov	r4, r0
 8010ab4:	a80c      	add	r0, sp, #48	; 0x30
 8010ab6:	f003 f8cf 	bl	8013c58 <uxr_serialize_READ_DATA_Payload>
 8010aba:	4620      	mov	r0, r4
 8010abc:	b015      	add	sp, #84	; 0x54
 8010abe:	bd30      	pop	{r4, r5, pc}
 8010ac0:	2208      	movs	r2, #8
 8010ac2:	e7e2      	b.n	8010a8a <uxr_buffer_request_data+0x3a>

08010ac4 <uxr_buffer_cancel_data>:
 8010ac4:	b530      	push	{r4, r5, lr}
 8010ac6:	b095      	sub	sp, #84	; 0x54
 8010ac8:	2400      	movs	r4, #0
 8010aca:	2308      	movs	r3, #8
 8010acc:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8010ad0:	9300      	str	r3, [sp, #0]
 8010ad2:	9205      	str	r2, [sp, #20]
 8010ad4:	2501      	movs	r5, #1
 8010ad6:	ab0c      	add	r3, sp, #48	; 0x30
 8010ad8:	2210      	movs	r2, #16
 8010ada:	f8ad 401c 	strh.w	r4, [sp, #28]
 8010ade:	f88d 401e 	strb.w	r4, [sp, #30]
 8010ae2:	f8cd 4026 	str.w	r4, [sp, #38]	; 0x26
 8010ae6:	f8cd 402a 	str.w	r4, [sp, #42]	; 0x2a
 8010aea:	9103      	str	r1, [sp, #12]
 8010aec:	4604      	mov	r4, r0
 8010aee:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8010af2:	f001 f80f 	bl	8011b14 <uxr_prepare_stream_to_write_submessage>
 8010af6:	b918      	cbnz	r0, 8010b00 <uxr_buffer_cancel_data+0x3c>
 8010af8:	4604      	mov	r4, r0
 8010afa:	4620      	mov	r0, r4
 8010afc:	b015      	add	sp, #84	; 0x54
 8010afe:	bd30      	pop	{r4, r5, pc}
 8010b00:	9905      	ldr	r1, [sp, #20]
 8010b02:	aa06      	add	r2, sp, #24
 8010b04:	4620      	mov	r0, r4
 8010b06:	f001 f93f 	bl	8011d88 <uxr_init_base_object_request>
 8010b0a:	a906      	add	r1, sp, #24
 8010b0c:	4604      	mov	r4, r0
 8010b0e:	a80c      	add	r0, sp, #48	; 0x30
 8010b10:	f003 f8a2 	bl	8013c58 <uxr_serialize_READ_DATA_Payload>
 8010b14:	4620      	mov	r0, r4
 8010b16:	b015      	add	sp, #84	; 0x54
 8010b18:	bd30      	pop	{r4, r5, pc}
 8010b1a:	bf00      	nop

08010b1c <read_submessage_format>:
 8010b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010b20:	b095      	sub	sp, #84	; 0x54
 8010b22:	f8bd 9078 	ldrh.w	r9, [sp, #120]	; 0x78
 8010b26:	b113      	cbz	r3, 8010b2e <read_submessage_format+0x12>
 8010b28:	b015      	add	sp, #84	; 0x54
 8010b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b2e:	460c      	mov	r4, r1
 8010b30:	4616      	mov	r6, r2
 8010b32:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010b36:	461d      	mov	r5, r3
 8010b38:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010b3a:	9304      	str	r3, [sp, #16]
 8010b3c:	1a52      	subs	r2, r2, r1
 8010b3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010b40:	9305      	str	r3, [sp, #20]
 8010b42:	4607      	mov	r7, r0
 8010b44:	a80c      	add	r0, sp, #48	; 0x30
 8010b46:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8010b4a:	f7ff fbc9 	bl	80102e0 <ucdr_init_buffer>
 8010b4e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010b52:	a80c      	add	r0, sp, #48	; 0x30
 8010b54:	f7ff fb9a 	bl	801028c <ucdr_set_on_full_buffer_callback>
 8010b58:	69e3      	ldr	r3, [r4, #28]
 8010b5a:	b193      	cbz	r3, 8010b82 <read_submessage_format+0x66>
 8010b5c:	f1b8 0f07 	cmp.w	r8, #7
 8010b60:	751d      	strb	r5, [r3, #20]
 8010b62:	d03e      	beq.n	8010be2 <read_submessage_format+0xc6>
 8010b64:	f1b8 0f08 	cmp.w	r8, #8
 8010b68:	d02c      	beq.n	8010bc4 <read_submessage_format+0xa8>
 8010b6a:	f1b8 0f06 	cmp.w	r8, #6
 8010b6e:	d011      	beq.n	8010b94 <read_submessage_format+0x78>
 8010b70:	2201      	movs	r2, #1
 8010b72:	751a      	strb	r2, [r3, #20]
 8010b74:	4631      	mov	r1, r6
 8010b76:	4620      	mov	r0, r4
 8010b78:	f7ff fc02 	bl	8010380 <ucdr_advance_buffer>
 8010b7c:	b015      	add	sp, #84	; 0x54
 8010b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b82:	f1b8 0f07 	cmp.w	r8, #7
 8010b86:	d02c      	beq.n	8010be2 <read_submessage_format+0xc6>
 8010b88:	f1b8 0f08 	cmp.w	r8, #8
 8010b8c:	d01a      	beq.n	8010bc4 <read_submessage_format+0xa8>
 8010b8e:	f1b8 0f06 	cmp.w	r8, #6
 8010b92:	d1ef      	bne.n	8010b74 <read_submessage_format+0x58>
 8010b94:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8010b98:	b18d      	cbz	r5, 8010bbe <read_submessage_format+0xa2>
 8010b9a:	2306      	movs	r3, #6
 8010b9c:	f88d 3016 	strb.w	r3, [sp, #22]
 8010ba0:	aa0c      	add	r2, sp, #48	; 0x30
 8010ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010ba6:	9302      	str	r3, [sp, #8]
 8010ba8:	9200      	str	r2, [sp, #0]
 8010baa:	9b04      	ldr	r3, [sp, #16]
 8010bac:	9905      	ldr	r1, [sp, #20]
 8010bae:	9601      	str	r6, [sp, #4]
 8010bb0:	464a      	mov	r2, r9
 8010bb2:	4638      	mov	r0, r7
 8010bb4:	47a8      	blx	r5
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8010bbc:	69e3      	ldr	r3, [r4, #28]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d1d6      	bne.n	8010b70 <read_submessage_format+0x54>
 8010bc2:	e7d7      	b.n	8010b74 <read_submessage_format+0x58>
 8010bc4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010bc8:	2a00      	cmp	r2, #0
 8010bca:	d0f8      	beq.n	8010bbe <read_submessage_format+0xa2>
 8010bcc:	a906      	add	r1, sp, #24
 8010bce:	a80c      	add	r0, sp, #48	; 0x30
 8010bd0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010bd2:	f003 f907 	bl	8013de4 <uxr_deserialize_SampleIdentity>
 8010bd6:	2800      	cmp	r0, #0
 8010bd8:	d13c      	bne.n	8010c54 <read_submessage_format+0x138>
 8010bda:	69e3      	ldr	r3, [r4, #28]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d1c7      	bne.n	8010b70 <read_submessage_format+0x54>
 8010be0:	e7c8      	b.n	8010b74 <read_submessage_format+0x58>
 8010be2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010be6:	b132      	cbz	r2, 8010bf6 <read_submessage_format+0xda>
 8010be8:	a906      	add	r1, sp, #24
 8010bea:	a80c      	add	r0, sp, #48	; 0x30
 8010bec:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8010bee:	f002 fdb7 	bl	8013760 <uxr_deserialize_BaseObjectRequest>
 8010bf2:	b930      	cbnz	r0, 8010c02 <read_submessage_format+0xe6>
 8010bf4:	69e3      	ldr	r3, [r4, #28]
 8010bf6:	68a2      	ldr	r2, [r4, #8]
 8010bf8:	4432      	add	r2, r6
 8010bfa:	60a2      	str	r2, [r4, #8]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d1b7      	bne.n	8010b70 <read_submessage_format+0x54>
 8010c00:	e7b8      	b.n	8010b74 <read_submessage_format+0x58>
 8010c02:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8010c06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c08:	1a52      	subs	r2, r2, r1
 8010c0a:	a80c      	add	r0, sp, #48	; 0x30
 8010c0c:	1aed      	subs	r5, r5, r3
 8010c0e:	f7ff fb67 	bl	80102e0 <ucdr_init_buffer>
 8010c12:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010c16:	a80c      	add	r0, sp, #48	; 0x30
 8010c18:	f7ff fb38 	bl	801028c <ucdr_set_on_full_buffer_callback>
 8010c1c:	4435      	add	r5, r6
 8010c1e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010c22:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010c26:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8010c2a:	9002      	str	r0, [sp, #8]
 8010c2c:	2207      	movs	r2, #7
 8010c2e:	f88d 2016 	strb.w	r2, [sp, #22]
 8010c32:	b2ad      	uxth	r5, r5
 8010c34:	aa0c      	add	r2, sp, #48	; 0x30
 8010c36:	9200      	str	r2, [sp, #0]
 8010c38:	9501      	str	r5, [sp, #4]
 8010c3a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010c3e:	b29b      	uxth	r3, r3
 8010c40:	9905      	ldr	r1, [sp, #20]
 8010c42:	f8d7 50ac 	ldr.w	r5, [r7, #172]	; 0xac
 8010c46:	464a      	mov	r2, r9
 8010c48:	4638      	mov	r0, r7
 8010c4a:	47a8      	blx	r5
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8010c52:	e7cf      	b.n	8010bf4 <read_submessage_format+0xd8>
 8010c54:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8010c58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010c5a:	1a52      	subs	r2, r2, r1
 8010c5c:	a80c      	add	r0, sp, #48	; 0x30
 8010c5e:	1aed      	subs	r5, r5, r3
 8010c60:	f7ff fb3e 	bl	80102e0 <ucdr_init_buffer>
 8010c64:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010c68:	a80c      	add	r0, sp, #48	; 0x30
 8010c6a:	f7ff fb0f 	bl	801028c <ucdr_set_on_full_buffer_callback>
 8010c6e:	4435      	add	r5, r6
 8010c70:	2308      	movs	r3, #8
 8010c72:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8010c76:	f88d 3016 	strb.w	r3, [sp, #22]
 8010c7a:	b2ad      	uxth	r5, r5
 8010c7c:	ab0c      	add	r3, sp, #48	; 0x30
 8010c7e:	9300      	str	r3, [sp, #0]
 8010c80:	9002      	str	r0, [sp, #8]
 8010c82:	9501      	str	r5, [sp, #4]
 8010c84:	ab06      	add	r3, sp, #24
 8010c86:	9905      	ldr	r1, [sp, #20]
 8010c88:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 8010c8c:	464a      	mov	r2, r9
 8010c8e:	4638      	mov	r0, r7
 8010c90:	47a8      	blx	r5
 8010c92:	2301      	movs	r3, #1
 8010c94:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8010c98:	e79f      	b.n	8010bda <read_submessage_format+0xbe>
 8010c9a:	bf00      	nop

08010c9c <on_get_fragmentation_info>:
 8010c9c:	b500      	push	{lr}
 8010c9e:	b08b      	sub	sp, #44	; 0x2c
 8010ca0:	4601      	mov	r1, r0
 8010ca2:	2204      	movs	r2, #4
 8010ca4:	a802      	add	r0, sp, #8
 8010ca6:	f7ff fb1b 	bl	80102e0 <ucdr_init_buffer>
 8010caa:	f10d 0305 	add.w	r3, sp, #5
 8010cae:	a802      	add	r0, sp, #8
 8010cb0:	f10d 0206 	add.w	r2, sp, #6
 8010cb4:	a901      	add	r1, sp, #4
 8010cb6:	f001 fe69 	bl	801298c <uxr_read_submessage_header>
 8010cba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010cbe:	2b0d      	cmp	r3, #13
 8010cc0:	d003      	beq.n	8010cca <on_get_fragmentation_info+0x2e>
 8010cc2:	2000      	movs	r0, #0
 8010cc4:	b00b      	add	sp, #44	; 0x2c
 8010cc6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010cce:	f013 0f02 	tst.w	r3, #2
 8010cd2:	bf14      	ite	ne
 8010cd4:	2002      	movne	r0, #2
 8010cd6:	2001      	moveq	r0, #1
 8010cd8:	b00b      	add	sp, #44	; 0x2c
 8010cda:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cde:	bf00      	nop

08010ce0 <read_submessage_get_info>:
 8010ce0:	b570      	push	{r4, r5, r6, lr}
 8010ce2:	2500      	movs	r5, #0
 8010ce4:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8010ce8:	4604      	mov	r4, r0
 8010cea:	f44f 7224 	mov.w	r2, #656	; 0x290
 8010cee:	460e      	mov	r6, r1
 8010cf0:	a810      	add	r0, sp, #64	; 0x40
 8010cf2:	4629      	mov	r1, r5
 8010cf4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010cf8:	f008 f9f8 	bl	80190ec <memset>
 8010cfc:	a903      	add	r1, sp, #12
 8010cfe:	4630      	mov	r0, r6
 8010d00:	f002 feec 	bl	8013adc <uxr_deserialize_GET_INFO_Payload>
 8010d04:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010d08:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010d0c:	4620      	mov	r0, r4
 8010d0e:	f001 f833 	bl	8011d78 <uxr_session_header_offset>
 8010d12:	462b      	mov	r3, r5
 8010d14:	9000      	str	r0, [sp, #0]
 8010d16:	a905      	add	r1, sp, #20
 8010d18:	a808      	add	r0, sp, #32
 8010d1a:	220c      	movs	r2, #12
 8010d1c:	f7ff face 	bl	80102bc <ucdr_init_buffer_origin_offset>
 8010d20:	a910      	add	r1, sp, #64	; 0x40
 8010d22:	a808      	add	r0, sp, #32
 8010d24:	f002 ff4c 	bl	8013bc0 <uxr_serialize_INFO_Payload>
 8010d28:	9b08      	ldr	r3, [sp, #32]
 8010d2a:	462a      	mov	r2, r5
 8010d2c:	4629      	mov	r1, r5
 8010d2e:	4620      	mov	r0, r4
 8010d30:	f000 ffca 	bl	8011cc8 <uxr_stamp_session_header>
 8010d34:	a808      	add	r0, sp, #32
 8010d36:	f7ff faff 	bl	8010338 <ucdr_buffer_length>
 8010d3a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010d3c:	4602      	mov	r2, r0
 8010d3e:	a905      	add	r1, sp, #20
 8010d40:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010d44:	47a0      	blx	r4
 8010d46:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8010d4a:	bd70      	pop	{r4, r5, r6, pc}

08010d4c <write_submessage_acknack.isra.0>:
 8010d4c:	b570      	push	{r4, r5, r6, lr}
 8010d4e:	b092      	sub	sp, #72	; 0x48
 8010d50:	4605      	mov	r5, r0
 8010d52:	460e      	mov	r6, r1
 8010d54:	4614      	mov	r4, r2
 8010d56:	f001 f80f 	bl	8011d78 <uxr_session_header_offset>
 8010d5a:	a905      	add	r1, sp, #20
 8010d5c:	9000      	str	r0, [sp, #0]
 8010d5e:	2300      	movs	r3, #0
 8010d60:	a80a      	add	r0, sp, #40	; 0x28
 8010d62:	2211      	movs	r2, #17
 8010d64:	f7ff faaa 	bl	80102bc <ucdr_init_buffer_origin_offset>
 8010d68:	2218      	movs	r2, #24
 8010d6a:	fb02 5404 	mla	r4, r2, r4, r5
 8010d6e:	2300      	movs	r3, #0
 8010d70:	2205      	movs	r2, #5
 8010d72:	3450      	adds	r4, #80	; 0x50
 8010d74:	a80a      	add	r0, sp, #40	; 0x28
 8010d76:	210a      	movs	r1, #10
 8010d78:	f001 fdee 	bl	8012958 <uxr_buffer_submessage_header>
 8010d7c:	a903      	add	r1, sp, #12
 8010d7e:	4620      	mov	r0, r4
 8010d80:	f007 fb54 	bl	801842c <uxr_compute_acknack>
 8010d84:	a903      	add	r1, sp, #12
 8010d86:	ba43      	rev16	r3, r0
 8010d88:	a80a      	add	r0, sp, #40	; 0x28
 8010d8a:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010d8e:	f88d 6010 	strb.w	r6, [sp, #16]
 8010d92:	f002 ff85 	bl	8013ca0 <uxr_serialize_ACKNACK_Payload>
 8010d96:	2200      	movs	r2, #0
 8010d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d9a:	4611      	mov	r1, r2
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	f000 ff93 	bl	8011cc8 <uxr_stamp_session_header>
 8010da2:	a80a      	add	r0, sp, #40	; 0x28
 8010da4:	f7ff fac8 	bl	8010338 <ucdr_buffer_length>
 8010da8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010daa:	4602      	mov	r2, r0
 8010dac:	a905      	add	r1, sp, #20
 8010dae:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010db2:	47a0      	blx	r4
 8010db4:	b012      	add	sp, #72	; 0x48
 8010db6:	bd70      	pop	{r4, r5, r6, pc}

08010db8 <uxr_init_session>:
 8010db8:	b5d0      	push	{r4, r6, r7, lr}
 8010dba:	2300      	movs	r3, #0
 8010dbc:	2600      	movs	r6, #0
 8010dbe:	2700      	movs	r7, #0
 8010dc0:	e9c0 6726 	strd	r6, r7, [r0, #152]	; 0x98
 8010dc4:	4604      	mov	r4, r0
 8010dc6:	6701      	str	r1, [r0, #112]	; 0x70
 8010dc8:	e9c0 331d 	strd	r3, r3, [r0, #116]	; 0x74
 8010dcc:	e9c0 331f 	strd	r3, r3, [r0, #124]	; 0x7c
 8010dd0:	e9c0 3321 	strd	r3, r3, [r0, #132]	; 0x84
 8010dd4:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
 8010dd8:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
 8010ddc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8010de0:	2181      	movs	r1, #129	; 0x81
 8010de2:	f000 fedb 	bl	8011b9c <uxr_init_session_info>
 8010de6:	f104 0008 	add.w	r0, r4, #8
 8010dea:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 8010dee:	f001 bccf 	b.w	8012790 <uxr_init_stream_storage>
 8010df2:	bf00      	nop

08010df4 <uxr_set_status_callback>:
 8010df4:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8010df8:	4770      	bx	lr
 8010dfa:	bf00      	nop

08010dfc <uxr_set_topic_callback>:
 8010dfc:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8010e00:	4770      	bx	lr
 8010e02:	bf00      	nop

08010e04 <uxr_set_request_callback>:
 8010e04:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8010e08:	4770      	bx	lr
 8010e0a:	bf00      	nop

08010e0c <uxr_set_reply_callback>:
 8010e0c:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8010e10:	4770      	bx	lr
 8010e12:	bf00      	nop

08010e14 <uxr_create_output_best_effort_stream>:
 8010e14:	b510      	push	{r4, lr}
 8010e16:	b084      	sub	sp, #16
 8010e18:	e9cd 2100 	strd	r2, r1, [sp]
 8010e1c:	4604      	mov	r4, r0
 8010e1e:	f000 ffab 	bl	8011d78 <uxr_session_header_offset>
 8010e22:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010e26:	4603      	mov	r3, r0
 8010e28:	f104 0008 	add.w	r0, r4, #8
 8010e2c:	b004      	add	sp, #16
 8010e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e32:	f001 bcf7 	b.w	8012824 <uxr_add_output_best_effort_buffer>
 8010e36:	bf00      	nop

08010e38 <uxr_create_output_reliable_stream>:
 8010e38:	b530      	push	{r4, r5, lr}
 8010e3a:	b089      	sub	sp, #36	; 0x24
 8010e3c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010e40:	9303      	str	r3, [sp, #12]
 8010e42:	4604      	mov	r4, r0
 8010e44:	f000 ff98 	bl	8011d78 <uxr_session_header_offset>
 8010e48:	4605      	mov	r5, r0
 8010e4a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010e4e:	9905      	ldr	r1, [sp, #20]
 8010e50:	9500      	str	r5, [sp, #0]
 8010e52:	f104 0008 	add.w	r0, r4, #8
 8010e56:	f001 fcf7 	bl	8012848 <uxr_add_output_reliable_buffer>
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	b2c3      	uxtb	r3, r0
 8010e5e:	f363 0207 	bfi	r2, r3, #0, #8
 8010e62:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010e66:	f363 220f 	bfi	r2, r3, #8, #8
 8010e6a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010e6e:	f363 4217 	bfi	r2, r3, #16, #8
 8010e72:	0e03      	lsrs	r3, r0, #24
 8010e74:	f363 621f 	bfi	r2, r3, #24, #8
 8010e78:	4610      	mov	r0, r2
 8010e7a:	b009      	add	sp, #36	; 0x24
 8010e7c:	bd30      	pop	{r4, r5, pc}
 8010e7e:	bf00      	nop

08010e80 <uxr_create_input_best_effort_stream>:
 8010e80:	b082      	sub	sp, #8
 8010e82:	3008      	adds	r0, #8
 8010e84:	b002      	add	sp, #8
 8010e86:	f001 bcf9 	b.w	801287c <uxr_add_input_best_effort_buffer>
 8010e8a:	bf00      	nop

08010e8c <uxr_create_input_reliable_stream>:
 8010e8c:	b510      	push	{r4, lr}
 8010e8e:	b084      	sub	sp, #16
 8010e90:	4c0b      	ldr	r4, [pc, #44]	; (8010ec0 <uxr_create_input_reliable_stream+0x34>)
 8010e92:	9400      	str	r4, [sp, #0]
 8010e94:	3008      	adds	r0, #8
 8010e96:	f001 fd07 	bl	80128a8 <uxr_add_input_reliable_buffer>
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	b2c3      	uxtb	r3, r0
 8010e9e:	f363 0207 	bfi	r2, r3, #0, #8
 8010ea2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8010ea6:	f363 220f 	bfi	r2, r3, #8, #8
 8010eaa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8010eae:	f363 4217 	bfi	r2, r3, #16, #8
 8010eb2:	0e03      	lsrs	r3, r0, #24
 8010eb4:	f363 621f 	bfi	r2, r3, #24, #8
 8010eb8:	4610      	mov	r0, r2
 8010eba:	b004      	add	sp, #16
 8010ebc:	bd10      	pop	{r4, pc}
 8010ebe:	bf00      	nop
 8010ec0:	08010c9d 	.word	0x08010c9d

08010ec4 <uxr_epoch_nanos>:
 8010ec4:	b510      	push	{r4, lr}
 8010ec6:	4604      	mov	r4, r0
 8010ec8:	f001 fda8 	bl	8012a1c <uxr_nanos>
 8010ecc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8010ed0:	1ac0      	subs	r0, r0, r3
 8010ed2:	eb61 0102 	sbc.w	r1, r1, r2
 8010ed6:	bd10      	pop	{r4, pc}

08010ed8 <uxr_flash_output_streams>:
 8010ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010edc:	7e03      	ldrb	r3, [r0, #24]
 8010ede:	b084      	sub	sp, #16
 8010ee0:	4604      	mov	r4, r0
 8010ee2:	b1fb      	cbz	r3, 8010f24 <uxr_flash_output_streams+0x4c>
 8010ee4:	f04f 0900 	mov.w	r9, #0
 8010ee8:	4648      	mov	r0, r9
 8010eea:	f10d 0802 	add.w	r8, sp, #2
 8010eee:	af03      	add	r7, sp, #12
 8010ef0:	ae02      	add	r6, sp, #8
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	4611      	mov	r1, r2
 8010ef6:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010efa:	f001 fbf3 	bl	80126e4 <uxr_stream_id>
 8010efe:	3508      	adds	r5, #8
 8010f00:	4684      	mov	ip, r0
 8010f02:	4643      	mov	r3, r8
 8010f04:	4628      	mov	r0, r5
 8010f06:	463a      	mov	r2, r7
 8010f08:	4631      	mov	r1, r6
 8010f0a:	f8cd c004 	str.w	ip, [sp, #4]
 8010f0e:	f007 fb15 	bl	801853c <uxr_prepare_best_effort_buffer_to_send>
 8010f12:	2800      	cmp	r0, #0
 8010f14:	d13d      	bne.n	8010f92 <uxr_flash_output_streams+0xba>
 8010f16:	7e23      	ldrb	r3, [r4, #24]
 8010f18:	f109 0901 	add.w	r9, r9, #1
 8010f1c:	fa5f f089 	uxtb.w	r0, r9
 8010f20:	4283      	cmp	r3, r0
 8010f22:	d8e6      	bhi.n	8010ef2 <uxr_flash_output_streams+0x1a>
 8010f24:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010f28:	b383      	cbz	r3, 8010f8c <uxr_flash_output_streams+0xb4>
 8010f2a:	f04f 0900 	mov.w	r9, #0
 8010f2e:	4648      	mov	r0, r9
 8010f30:	f10d 0802 	add.w	r8, sp, #2
 8010f34:	af03      	add	r7, sp, #12
 8010f36:	ae02      	add	r6, sp, #8
 8010f38:	2201      	movs	r2, #1
 8010f3a:	2102      	movs	r1, #2
 8010f3c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010f40:	f001 fbd0 	bl	80126e4 <uxr_stream_id>
 8010f44:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010f48:	3520      	adds	r5, #32
 8010f4a:	9001      	str	r0, [sp, #4]
 8010f4c:	e00c      	b.n	8010f68 <uxr_flash_output_streams+0x90>
 8010f4e:	9b02      	ldr	r3, [sp, #8]
 8010f50:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010f54:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010f58:	f000 feb6 	bl	8011cc8 <uxr_stamp_session_header>
 8010f5c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010f5e:	9a03      	ldr	r2, [sp, #12]
 8010f60:	9902      	ldr	r1, [sp, #8]
 8010f62:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8010f66:	47d0      	blx	sl
 8010f68:	4643      	mov	r3, r8
 8010f6a:	463a      	mov	r2, r7
 8010f6c:	4631      	mov	r1, r6
 8010f6e:	4628      	mov	r0, r5
 8010f70:	f007 fcec 	bl	801894c <uxr_prepare_next_reliable_buffer_to_send>
 8010f74:	4603      	mov	r3, r0
 8010f76:	4620      	mov	r0, r4
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d1e8      	bne.n	8010f4e <uxr_flash_output_streams+0x76>
 8010f7c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010f80:	f109 0901 	add.w	r9, r9, #1
 8010f84:	fa5f f089 	uxtb.w	r0, r9
 8010f88:	4283      	cmp	r3, r0
 8010f8a:	d8d5      	bhi.n	8010f38 <uxr_flash_output_streams+0x60>
 8010f8c:	b004      	add	sp, #16
 8010f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f92:	9b02      	ldr	r3, [sp, #8]
 8010f94:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010f98:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010f9c:	4620      	mov	r0, r4
 8010f9e:	f000 fe93 	bl	8011cc8 <uxr_stamp_session_header>
 8010fa2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010fa4:	9a03      	ldr	r2, [sp, #12]
 8010fa6:	9902      	ldr	r1, [sp, #8]
 8010fa8:	e9d3 0500 	ldrd	r0, r5, [r3]
 8010fac:	47a8      	blx	r5
 8010fae:	f109 0901 	add.w	r9, r9, #1
 8010fb2:	7e23      	ldrb	r3, [r4, #24]
 8010fb4:	fa5f f089 	uxtb.w	r0, r9
 8010fb8:	4283      	cmp	r3, r0
 8010fba:	d89a      	bhi.n	8010ef2 <uxr_flash_output_streams+0x1a>
 8010fbc:	e7b2      	b.n	8010f24 <uxr_flash_output_streams+0x4c>
 8010fbe:	bf00      	nop

08010fc0 <read_submessage_info>:
 8010fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fc4:	460d      	mov	r5, r1
 8010fc6:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8010fca:	4669      	mov	r1, sp
 8010fcc:	4607      	mov	r7, r0
 8010fce:	4628      	mov	r0, r5
 8010fd0:	f002 fc8a 	bl	80138e8 <uxr_deserialize_BaseObjectReply>
 8010fd4:	a902      	add	r1, sp, #8
 8010fd6:	4604      	mov	r4, r0
 8010fd8:	4628      	mov	r0, r5
 8010fda:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010fde:	f006 f905 	bl	80171ec <ucdr_deserialize_bool>
 8010fe2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010fe6:	4004      	ands	r4, r0
 8010fe8:	b2e4      	uxtb	r4, r4
 8010fea:	b95b      	cbnz	r3, 8011004 <read_submessage_info+0x44>
 8010fec:	a987      	add	r1, sp, #540	; 0x21c
 8010fee:	4628      	mov	r0, r5
 8010ff0:	f006 f8fc 	bl	80171ec <ucdr_deserialize_bool>
 8010ff4:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8010ff8:	4606      	mov	r6, r0
 8010ffa:	b94b      	cbnz	r3, 8011010 <read_submessage_info+0x50>
 8010ffc:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8011000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011004:	a903      	add	r1, sp, #12
 8011006:	4628      	mov	r0, r5
 8011008:	f002 fafc 	bl	8013604 <uxr_deserialize_ObjectVariant>
 801100c:	4004      	ands	r4, r0
 801100e:	e7ed      	b.n	8010fec <read_submessage_info+0x2c>
 8011010:	a988      	add	r1, sp, #544	; 0x220
 8011012:	4628      	mov	r0, r5
 8011014:	f006 f91a 	bl	801724c <ucdr_deserialize_uint8_t>
 8011018:	4234      	tst	r4, r6
 801101a:	d0ef      	beq.n	8010ffc <read_submessage_info+0x3c>
 801101c:	2800      	cmp	r0, #0
 801101e:	d0ed      	beq.n	8010ffc <read_submessage_info+0x3c>
 8011020:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8011024:	2b0d      	cmp	r3, #13
 8011026:	d1e9      	bne.n	8010ffc <read_submessage_info+0x3c>
 8011028:	4628      	mov	r0, r5
 801102a:	a98a      	add	r1, sp, #552	; 0x228
 801102c:	f006 feb4 	bl	8017d98 <ucdr_deserialize_int16_t>
 8011030:	b140      	cbz	r0, 8011044 <read_submessage_info+0x84>
 8011032:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8011036:	2b00      	cmp	r3, #0
 8011038:	dd07      	ble.n	801104a <read_submessage_info+0x8a>
 801103a:	f1b8 0f00 	cmp.w	r8, #0
 801103e:	bf14      	ite	ne
 8011040:	2001      	movne	r0, #1
 8011042:	2002      	moveq	r0, #2
 8011044:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 8011048:	e7d8      	b.n	8010ffc <read_submessage_info+0x3c>
 801104a:	2000      	movs	r0, #0
 801104c:	e7fa      	b.n	8011044 <read_submessage_info+0x84>
 801104e:	bf00      	nop

08011050 <read_submessage_list>:
 8011050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011054:	b098      	sub	sp, #96	; 0x60
 8011056:	f8df 9304 	ldr.w	r9, [pc, #772]	; 801135c <read_submessage_list+0x30c>
 801105a:	920b      	str	r2, [sp, #44]	; 0x2c
 801105c:	4604      	mov	r4, r0
 801105e:	4688      	mov	r8, r1
 8011060:	f10d 0337 	add.w	r3, sp, #55	; 0x37
 8011064:	aa0e      	add	r2, sp, #56	; 0x38
 8011066:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 801106a:	4640      	mov	r0, r8
 801106c:	f001 fc8e 	bl	801298c <uxr_read_submessage_header>
 8011070:	2800      	cmp	r0, #0
 8011072:	f000 813d 	beq.w	80112f0 <read_submessage_list+0x2a0>
 8011076:	f89d 3036 	ldrb.w	r3, [sp, #54]	; 0x36
 801107a:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
 801107e:	3b02      	subs	r3, #2
 8011080:	2b0d      	cmp	r3, #13
 8011082:	d8ed      	bhi.n	8011060 <read_submessage_list+0x10>
 8011084:	a101      	add	r1, pc, #4	; (adr r1, 801108c <read_submessage_list+0x3c>)
 8011086:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801108a:	bf00      	nop
 801108c:	080112e7 	.word	0x080112e7
 8011090:	08011061 	.word	0x08011061
 8011094:	080112d7 	.word	0x080112d7
 8011098:	0801127b 	.word	0x0801127b
 801109c:	08011271 	.word	0x08011271
 80110a0:	08011061 	.word	0x08011061
 80110a4:	08011061 	.word	0x08011061
 80110a8:	080111d3 	.word	0x080111d3
 80110ac:	08011165 	.word	0x08011165
 80110b0:	08011123 	.word	0x08011123
 80110b4:	08011061 	.word	0x08011061
 80110b8:	08011061 	.word	0x08011061
 80110bc:	08011061 	.word	0x08011061
 80110c0:	080110c5 	.word	0x080110c5
 80110c4:	a912      	add	r1, sp, #72	; 0x48
 80110c6:	4640      	mov	r0, r8
 80110c8:	f002 fe3a 	bl	8013d40 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80110cc:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 80110d0:	2d00      	cmp	r5, #0
 80110d2:	f000 8115 	beq.w	8011300 <read_submessage_list+0x2b0>
 80110d6:	f001 fca1 	bl	8012a1c <uxr_nanos>
 80110da:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80110dc:	460b      	mov	r3, r1
 80110de:	9916      	ldr	r1, [sp, #88]	; 0x58
 80110e0:	2700      	movs	r7, #0
 80110e2:	fbc9 6701 	smlal	r6, r7, r9, r1
 80110e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80110ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80110ec:	4602      	mov	r2, r0
 80110ee:	9812      	ldr	r0, [sp, #72]	; 0x48
 80110f0:	460e      	mov	r6, r1
 80110f2:	2700      	movs	r7, #0
 80110f4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80110f8:	9106      	str	r1, [sp, #24]
 80110fa:	fbc9 6700 	smlal	r6, r7, r9, r0
 80110fe:	9915      	ldr	r1, [sp, #84]	; 0x54
 8011100:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011104:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8011106:	2700      	movs	r7, #0
 8011108:	4608      	mov	r0, r1
 801110a:	4639      	mov	r1, r7
 801110c:	fbc9 0106 	smlal	r0, r1, r9, r6
 8011110:	e9cd 0100 	strd	r0, r1, [sp]
 8011114:	4620      	mov	r0, r4
 8011116:	47a8      	blx	r5
 8011118:	f04f 0301 	mov.w	r3, #1
 801111c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8011120:	e79e      	b.n	8011060 <read_submessage_list+0x10>
 8011122:	a912      	add	r1, sp, #72	; 0x48
 8011124:	4640      	mov	r0, r8
 8011126:	f002 fdf9 	bl	8013d1c <uxr_deserialize_HEARTBEAT_Payload>
 801112a:	2100      	movs	r1, #0
 801112c:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8011130:	f001 fb02 	bl	8012738 <uxr_stream_id_from_raw>
 8011134:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011138:	4603      	mov	r3, r0
 801113a:	4629      	mov	r1, r5
 801113c:	f104 0008 	add.w	r0, r4, #8
 8011140:	9311      	str	r3, [sp, #68]	; 0x44
 8011142:	f001 fbe7 	bl	8012914 <uxr_get_input_reliable_stream>
 8011146:	2800      	cmp	r0, #0
 8011148:	d08a      	beq.n	8011060 <read_submessage_list+0x10>
 801114a:	f8bd 204a 	ldrh.w	r2, [sp, #74]	; 0x4a
 801114e:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
 8011152:	f007 f95f 	bl	8018414 <uxr_process_heartbeat>
 8011156:	f89d 1044 	ldrb.w	r1, [sp, #68]	; 0x44
 801115a:	462a      	mov	r2, r5
 801115c:	4620      	mov	r0, r4
 801115e:	f7ff fdf5 	bl	8010d4c <write_submessage_acknack.isra.0>
 8011162:	e77d      	b.n	8011060 <read_submessage_list+0x10>
 8011164:	a912      	add	r1, sp, #72	; 0x48
 8011166:	4640      	mov	r0, r8
 8011168:	f002 fdb0 	bl	8013ccc <uxr_deserialize_ACKNACK_Payload>
 801116c:	2100      	movs	r1, #0
 801116e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 8011172:	f001 fae1 	bl	8012738 <uxr_stream_id_from_raw>
 8011176:	4603      	mov	r3, r0
 8011178:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801117c:	f104 0008 	add.w	r0, r4, #8
 8011180:	930f      	str	r3, [sp, #60]	; 0x3c
 8011182:	f001 fbb1 	bl	80128e8 <uxr_get_output_reliable_stream>
 8011186:	4605      	mov	r5, r0
 8011188:	2800      	cmp	r0, #0
 801118a:	f43f af69 	beq.w	8011060 <read_submessage_list+0x10>
 801118e:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
 8011192:	f89d 104b 	ldrb.w	r1, [sp, #75]	; 0x4b
 8011196:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 801119a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801119e:	b289      	uxth	r1, r1
 80111a0:	f007 fc7c 	bl	8018a9c <uxr_process_acknack>
 80111a4:	4628      	mov	r0, r5
 80111a6:	f007 fc3f 	bl	8018a28 <uxr_begin_output_nack_buffer_it>
 80111aa:	af10      	add	r7, sp, #64	; 0x40
 80111ac:	f8ad 003a 	strh.w	r0, [sp, #58]	; 0x3a
 80111b0:	e005      	b.n	80111be <read_submessage_list+0x16e>
 80111b2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80111b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80111b6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80111b8:	e9d3 0600 	ldrd	r0, r6, [r3]
 80111bc:	47b0      	blx	r6
 80111be:	f10d 033a 	add.w	r3, sp, #58	; 0x3a
 80111c2:	aa11      	add	r2, sp, #68	; 0x44
 80111c4:	4639      	mov	r1, r7
 80111c6:	4628      	mov	r0, r5
 80111c8:	f007 fc30 	bl	8018a2c <uxr_next_reliable_nack_buffer_to_send>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	d1f0      	bne.n	80111b2 <read_submessage_list+0x162>
 80111d0:	e746      	b.n	8011060 <read_submessage_list+0x10>
 80111d2:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 80111d6:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
 80111da:	af10      	add	r7, sp, #64	; 0x40
 80111dc:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 80111e0:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 80111e4:	4639      	mov	r1, r7
 80111e6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80111ea:	f89d 6037 	ldrb.w	r6, [sp, #55]	; 0x37
 80111ee:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80111f2:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
 80111f6:	4640      	mov	r0, r8
 80111f8:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 80111fc:	f002 fab0 	bl	8013760 <uxr_deserialize_BaseObjectRequest>
 8011200:	4638      	mov	r0, r7
 8011202:	a911      	add	r1, sp, #68	; 0x44
 8011204:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 8011208:	f000 fddc 	bl	8011dc4 <uxr_parse_base_object_request>
 801120c:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8011210:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011212:	f8bd 703a 	ldrh.w	r7, [sp, #58]	; 0x3a
 8011216:	9112      	str	r1, [sp, #72]	; 0x48
 8011218:	3d04      	subs	r5, #4
 801121a:	f006 060e 	and.w	r6, r6, #14
 801121e:	b2ad      	uxth	r5, r5
 8011220:	f1ba 0f00 	cmp.w	sl, #0
 8011224:	d006      	beq.n	8011234 <read_submessage_list+0x1e4>
 8011226:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801122a:	9300      	str	r3, [sp, #0]
 801122c:	463a      	mov	r2, r7
 801122e:	2300      	movs	r3, #0
 8011230:	4620      	mov	r0, r4
 8011232:	47d0      	blx	sl
 8011234:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8011236:	b168      	cbz	r0, 8011254 <read_submessage_list+0x204>
 8011238:	6f61      	ldr	r1, [r4, #116]	; 0x74
 801123a:	2300      	movs	r3, #0
 801123c:	3902      	subs	r1, #2
 801123e:	e002      	b.n	8011246 <read_submessage_list+0x1f6>
 8011240:	3301      	adds	r3, #1
 8011242:	4283      	cmp	r3, r0
 8011244:	d006      	beq.n	8011254 <read_submessage_list+0x204>
 8011246:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 801124a:	42ba      	cmp	r2, r7
 801124c:	d1f8      	bne.n	8011240 <read_submessage_list+0x1f0>
 801124e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8011250:	2100      	movs	r1, #0
 8011252:	54d1      	strb	r1, [r2, r3]
 8011254:	9811      	ldr	r0, [sp, #68]	; 0x44
 8011256:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011258:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801125c:	9302      	str	r3, [sp, #8]
 801125e:	e9cd 1000 	strd	r1, r0, [sp]
 8011262:	4633      	mov	r3, r6
 8011264:	462a      	mov	r2, r5
 8011266:	4641      	mov	r1, r8
 8011268:	4620      	mov	r0, r4
 801126a:	f7ff fc57 	bl	8010b1c <read_submessage_format>
 801126e:	e6f7      	b.n	8011060 <read_submessage_list+0x10>
 8011270:	4641      	mov	r1, r8
 8011272:	4620      	mov	r0, r4
 8011274:	f7ff fea4 	bl	8010fc0 <read_submessage_info>
 8011278:	e6f2      	b.n	8011060 <read_submessage_list+0x10>
 801127a:	2a00      	cmp	r2, #0
 801127c:	d03b      	beq.n	80112f6 <read_submessage_list+0x2a6>
 801127e:	a912      	add	r1, sp, #72	; 0x48
 8011280:	4640      	mov	r0, r8
 8011282:	f002 fc7f 	bl	8013b84 <uxr_deserialize_STATUS_Payload>
 8011286:	a910      	add	r1, sp, #64	; 0x40
 8011288:	aa0f      	add	r2, sp, #60	; 0x3c
 801128a:	a812      	add	r0, sp, #72	; 0x48
 801128c:	f000 fd9a 	bl	8011dc4 <uxr_parse_base_object_request>
 8011290:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8011294:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011296:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 801129a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801129e:	9111      	str	r1, [sp, #68]	; 0x44
 80112a0:	b135      	cbz	r5, 80112b0 <read_submessage_list+0x260>
 80112a2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80112a6:	9300      	str	r3, [sp, #0]
 80112a8:	4632      	mov	r2, r6
 80112aa:	463b      	mov	r3, r7
 80112ac:	4620      	mov	r0, r4
 80112ae:	47a8      	blx	r5
 80112b0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	f43f aed4 	beq.w	8011060 <read_submessage_list+0x10>
 80112b8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80112ba:	2100      	movs	r1, #0
 80112bc:	3802      	subs	r0, #2
 80112be:	e003      	b.n	80112c8 <read_submessage_list+0x278>
 80112c0:	3101      	adds	r1, #1
 80112c2:	4299      	cmp	r1, r3
 80112c4:	f43f aecc 	beq.w	8011060 <read_submessage_list+0x10>
 80112c8:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 80112cc:	42b2      	cmp	r2, r6
 80112ce:	d1f7      	bne.n	80112c0 <read_submessage_list+0x270>
 80112d0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80112d2:	545f      	strb	r7, [r3, r1]
 80112d4:	e6c4      	b.n	8011060 <read_submessage_list+0x10>
 80112d6:	2a00      	cmp	r2, #0
 80112d8:	f47f aec2 	bne.w	8011060 <read_submessage_list+0x10>
 80112dc:	4641      	mov	r1, r8
 80112de:	4620      	mov	r0, r4
 80112e0:	f000 fcb4 	bl	8011c4c <uxr_read_create_session_status>
 80112e4:	e6bc      	b.n	8011060 <read_submessage_list+0x10>
 80112e6:	4641      	mov	r1, r8
 80112e8:	4620      	mov	r0, r4
 80112ea:	f7ff fcf9 	bl	8010ce0 <read_submessage_get_info>
 80112ee:	e6b7      	b.n	8011060 <read_submessage_list+0x10>
 80112f0:	b018      	add	sp, #96	; 0x60
 80112f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112f6:	4641      	mov	r1, r8
 80112f8:	4620      	mov	r0, r4
 80112fa:	f000 fcb3 	bl	8011c64 <uxr_read_delete_session_status>
 80112fe:	e6af      	b.n	8011060 <read_submessage_list+0x10>
 8011300:	f001 fb8c 	bl	8012a1c <uxr_nanos>
 8011304:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011306:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011308:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801130a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801130c:	2700      	movs	r7, #0
 801130e:	fbc9 6703 	smlal	r6, r7, r9, r3
 8011312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011314:	eb16 0c00 	adds.w	ip, r6, r0
 8011318:	4618      	mov	r0, r3
 801131a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801131c:	eb47 0e01 	adc.w	lr, r7, r1
 8011320:	461e      	mov	r6, r3
 8011322:	2100      	movs	r1, #0
 8011324:	2700      	movs	r7, #0
 8011326:	fbc9 0105 	smlal	r0, r1, r9, r5
 801132a:	fbc9 6702 	smlal	r6, r7, r9, r2
 801132e:	1983      	adds	r3, r0, r6
 8011330:	eb41 0207 	adc.w	r2, r1, r7
 8011334:	ebbc 0303 	subs.w	r3, ip, r3
 8011338:	9308      	str	r3, [sp, #32]
 801133a:	eb6e 0302 	sbc.w	r3, lr, r2
 801133e:	9309      	str	r3, [sp, #36]	; 0x24
 8011340:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011344:	0fd3      	lsrs	r3, r2, #31
 8011346:	18c9      	adds	r1, r1, r3
 8011348:	f142 0200 	adc.w	r2, r2, #0
 801134c:	084b      	lsrs	r3, r1, #1
 801134e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8011352:	1052      	asrs	r2, r2, #1
 8011354:	e9c4 3226 	strd	r3, r2, [r4, #152]	; 0x98
 8011358:	e6de      	b.n	8011118 <read_submessage_list+0xc8>
 801135a:	bf00      	nop
 801135c:	3b9aca00 	.word	0x3b9aca00

08011360 <listen_message_reliably>:
 8011360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011364:	1e0b      	subs	r3, r1, #0
 8011366:	b09d      	sub	sp, #116	; 0x74
 8011368:	bfb8      	it	lt
 801136a:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801136e:	9305      	str	r3, [sp, #20]
 8011370:	4607      	mov	r7, r0
 8011372:	f001 fb37 	bl	80129e4 <uxr_millis>
 8011376:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 801137a:	4681      	mov	r9, r0
 801137c:	2a00      	cmp	r2, #0
 801137e:	f000 8095 	beq.w	80114ac <listen_message_reliably+0x14c>
 8011382:	2600      	movs	r6, #0
 8011384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011388:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 801138c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011390:	4630      	mov	r0, r6
 8011392:	4688      	mov	r8, r1
 8011394:	46ca      	mov	sl, r9
 8011396:	e00f      	b.n	80113b8 <listen_message_reliably+0x58>
 8011398:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801139c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80113a0:	42a2      	cmp	r2, r4
 80113a2:	eb73 0105 	sbcs.w	r1, r3, r5
 80113a6:	bfb8      	it	lt
 80113a8:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 80113ac:	3601      	adds	r6, #1
 80113ae:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80113b2:	b2f0      	uxtb	r0, r6
 80113b4:	4283      	cmp	r3, r0
 80113b6:	d951      	bls.n	801145c <listen_message_reliably+0xfc>
 80113b8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80113bc:	2201      	movs	r2, #1
 80113be:	2102      	movs	r1, #2
 80113c0:	f001 f990 	bl	80126e4 <uxr_stream_id>
 80113c4:	00e4      	lsls	r4, r4, #3
 80113c6:	f104 0520 	add.w	r5, r4, #32
 80113ca:	443d      	add	r5, r7
 80113cc:	4601      	mov	r1, r0
 80113ce:	4643      	mov	r3, r8
 80113d0:	4652      	mov	r2, sl
 80113d2:	4628      	mov	r0, r5
 80113d4:	9109      	str	r1, [sp, #36]	; 0x24
 80113d6:	f007 fafb 	bl	80189d0 <uxr_update_output_stream_heartbeat_timestamp>
 80113da:	193b      	adds	r3, r7, r4
 80113dc:	2800      	cmp	r0, #0
 80113de:	d0db      	beq.n	8011398 <listen_message_reliably+0x38>
 80113e0:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80113e4:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 80113e8:	4638      	mov	r0, r7
 80113ea:	f000 fcc5 	bl	8011d78 <uxr_session_header_offset>
 80113ee:	3501      	adds	r5, #1
 80113f0:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
 80113f4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80113f8:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80113fc:	9000      	str	r0, [sp, #0]
 80113fe:	2300      	movs	r3, #0
 8011400:	4658      	mov	r0, fp
 8011402:	2211      	movs	r2, #17
 8011404:	a90c      	add	r1, sp, #48	; 0x30
 8011406:	f7fe ff59 	bl	80102bc <ucdr_init_buffer_origin_offset>
 801140a:	2300      	movs	r3, #0
 801140c:	2205      	movs	r2, #5
 801140e:	210b      	movs	r1, #11
 8011410:	4658      	mov	r0, fp
 8011412:	f001 faa1 	bl	8012958 <uxr_buffer_submessage_header>
 8011416:	8968      	ldrh	r0, [r5, #10]
 8011418:	2101      	movs	r1, #1
 801141a:	f007 fb97 	bl	8018b4c <uxr_seq_num_add>
 801141e:	892a      	ldrh	r2, [r5, #8]
 8011420:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8011424:	4603      	mov	r3, r0
 8011426:	a90a      	add	r1, sp, #40	; 0x28
 8011428:	4658      	mov	r0, fp
 801142a:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801142e:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
 8011432:	f002 fc5f 	bl	8013cf4 <uxr_serialize_HEARTBEAT_Payload>
 8011436:	2200      	movs	r2, #0
 8011438:	4611      	mov	r1, r2
 801143a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801143c:	4638      	mov	r0, r7
 801143e:	f000 fc43 	bl	8011cc8 <uxr_stamp_session_header>
 8011442:	4658      	mov	r0, fp
 8011444:	f7fe ff78 	bl	8010338 <ucdr_buffer_length>
 8011448:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801144a:	4602      	mov	r2, r0
 801144c:	a90c      	add	r1, sp, #48	; 0x30
 801144e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011452:	443c      	add	r4, r7
 8011454:	47a8      	blx	r5
 8011456:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801145a:	e79f      	b.n	801139c <listen_message_reliably+0x3c>
 801145c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8011460:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8011464:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011468:	4294      	cmp	r4, r2
 801146a:	bf08      	it	eq
 801146c:	428b      	cmpeq	r3, r1
 801146e:	d01d      	beq.n	80114ac <listen_message_reliably+0x14c>
 8011470:	eba3 030a 	sub.w	r3, r3, sl
 8011474:	9905      	ldr	r1, [sp, #20]
 8011476:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011478:	2b00      	cmp	r3, #0
 801147a:	bf08      	it	eq
 801147c:	2301      	moveq	r3, #1
 801147e:	4299      	cmp	r1, r3
 8011480:	bfa8      	it	ge
 8011482:	4619      	movge	r1, r3
 8011484:	6894      	ldr	r4, [r2, #8]
 8011486:	6810      	ldr	r0, [r2, #0]
 8011488:	4689      	mov	r9, r1
 801148a:	460b      	mov	r3, r1
 801148c:	aa08      	add	r2, sp, #32
 801148e:	a907      	add	r1, sp, #28
 8011490:	47a0      	blx	r4
 8011492:	b968      	cbnz	r0, 80114b0 <listen_message_reliably+0x150>
 8011494:	9b05      	ldr	r3, [sp, #20]
 8011496:	eba3 0309 	sub.w	r3, r3, r9
 801149a:	2b00      	cmp	r3, #0
 801149c:	9305      	str	r3, [sp, #20]
 801149e:	f73f af68 	bgt.w	8011372 <listen_message_reliably+0x12>
 80114a2:	4604      	mov	r4, r0
 80114a4:	4620      	mov	r0, r4
 80114a6:	b01d      	add	sp, #116	; 0x74
 80114a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114ac:	9b05      	ldr	r3, [sp, #20]
 80114ae:	e7e1      	b.n	8011474 <listen_message_reliably+0x114>
 80114b0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80114b4:	4604      	mov	r4, r0
 80114b6:	a80c      	add	r0, sp, #48	; 0x30
 80114b8:	f7fe ff12 	bl	80102e0 <ucdr_init_buffer>
 80114bc:	2500      	movs	r5, #0
 80114be:	a90c      	add	r1, sp, #48	; 0x30
 80114c0:	f10d 031a 	add.w	r3, sp, #26
 80114c4:	aa06      	add	r2, sp, #24
 80114c6:	4638      	mov	r0, r7
 80114c8:	f88d 5018 	strb.w	r5, [sp, #24]
 80114cc:	f000 fc12 	bl	8011cf4 <uxr_read_session_header>
 80114d0:	b918      	cbnz	r0, 80114da <listen_message_reliably+0x17a>
 80114d2:	4620      	mov	r0, r4
 80114d4:	b01d      	add	sp, #116	; 0x74
 80114d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114da:	4629      	mov	r1, r5
 80114dc:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80114e0:	f001 f92a 	bl	8012738 <uxr_stream_id_from_raw>
 80114e4:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80114e8:	2e01      	cmp	r6, #1
 80114ea:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80114ee:	900a      	str	r0, [sp, #40]	; 0x28
 80114f0:	fa5f fa80 	uxtb.w	sl, r0
 80114f4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80114f8:	d04b      	beq.n	8011592 <listen_message_reliably+0x232>
 80114fa:	2e02      	cmp	r6, #2
 80114fc:	d00f      	beq.n	801151e <listen_message_reliably+0x1be>
 80114fe:	2e00      	cmp	r6, #0
 8011500:	d1e7      	bne.n	80114d2 <listen_message_reliably+0x172>
 8011502:	4631      	mov	r1, r6
 8011504:	4630      	mov	r0, r6
 8011506:	f001 f917 	bl	8012738 <uxr_stream_id_from_raw>
 801150a:	a90c      	add	r1, sp, #48	; 0x30
 801150c:	4602      	mov	r2, r0
 801150e:	4638      	mov	r0, r7
 8011510:	920a      	str	r2, [sp, #40]	; 0x28
 8011512:	f7ff fd9d 	bl	8011050 <read_submessage_list>
 8011516:	4620      	mov	r0, r4
 8011518:	b01d      	add	sp, #116	; 0x74
 801151a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801151e:	4629      	mov	r1, r5
 8011520:	f107 0008 	add.w	r0, r7, #8
 8011524:	f001 f9f6 	bl	8012914 <uxr_get_input_reliable_stream>
 8011528:	4680      	mov	r8, r0
 801152a:	b348      	cbz	r0, 8011580 <listen_message_reliably+0x220>
 801152c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801152e:	9202      	str	r2, [sp, #8]
 8011530:	a80c      	add	r0, sp, #48	; 0x30
 8011532:	f7fe ff05 	bl	8010340 <ucdr_buffer_remaining>
 8011536:	4603      	mov	r3, r0
 8011538:	f10d 0019 	add.w	r0, sp, #25
 801153c:	9000      	str	r0, [sp, #0]
 801153e:	9a02      	ldr	r2, [sp, #8]
 8011540:	4649      	mov	r1, r9
 8011542:	4640      	mov	r0, r8
 8011544:	f006 fe68 	bl	8018218 <uxr_receive_reliable_message>
 8011548:	b1d0      	cbz	r0, 8011580 <listen_message_reliably+0x220>
 801154a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d037      	beq.n	80115c2 <listen_message_reliably+0x262>
 8011552:	ae14      	add	r6, sp, #80	; 0x50
 8011554:	f04f 0902 	mov.w	r9, #2
 8011558:	e008      	b.n	801156c <listen_message_reliably+0x20c>
 801155a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 801155e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8011562:	f88d 902a 	strb.w	r9, [sp, #42]	; 0x2a
 8011566:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011568:	f7ff fd72 	bl	8011050 <read_submessage_list>
 801156c:	4631      	mov	r1, r6
 801156e:	2204      	movs	r2, #4
 8011570:	4640      	mov	r0, r8
 8011572:	f006 fed1 	bl	8018318 <uxr_next_input_reliable_buffer_available>
 8011576:	4603      	mov	r3, r0
 8011578:	4631      	mov	r1, r6
 801157a:	4638      	mov	r0, r7
 801157c:	2b00      	cmp	r3, #0
 801157e:	d1ec      	bne.n	801155a <listen_message_reliably+0x1fa>
 8011580:	4638      	mov	r0, r7
 8011582:	462a      	mov	r2, r5
 8011584:	4651      	mov	r1, sl
 8011586:	f7ff fbe1 	bl	8010d4c <write_submessage_acknack.isra.0>
 801158a:	4620      	mov	r0, r4
 801158c:	b01d      	add	sp, #116	; 0x74
 801158e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011592:	4629      	mov	r1, r5
 8011594:	f107 0008 	add.w	r0, r7, #8
 8011598:	f001 f9b2 	bl	8012900 <uxr_get_input_best_effort_stream>
 801159c:	2800      	cmp	r0, #0
 801159e:	d098      	beq.n	80114d2 <listen_message_reliably+0x172>
 80115a0:	4649      	mov	r1, r9
 80115a2:	f006 fdb5 	bl	8018110 <uxr_receive_best_effort_message>
 80115a6:	2800      	cmp	r0, #0
 80115a8:	d093      	beq.n	80114d2 <listen_message_reliably+0x172>
 80115aa:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80115ae:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 80115b2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80115b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80115b8:	a90c      	add	r1, sp, #48	; 0x30
 80115ba:	4638      	mov	r0, r7
 80115bc:	f7ff fd48 	bl	8011050 <read_submessage_list>
 80115c0:	e787      	b.n	80114d2 <listen_message_reliably+0x172>
 80115c2:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80115c6:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 80115ca:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80115ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80115d0:	a90c      	add	r1, sp, #48	; 0x30
 80115d2:	4638      	mov	r0, r7
 80115d4:	f7ff fd3c 	bl	8011050 <read_submessage_list>
 80115d8:	e7bb      	b.n	8011552 <listen_message_reliably+0x1f2>
 80115da:	bf00      	nop

080115dc <uxr_run_session_timeout>:
 80115dc:	b570      	push	{r4, r5, r6, lr}
 80115de:	4604      	mov	r4, r0
 80115e0:	460d      	mov	r5, r1
 80115e2:	f001 f9ff 	bl	80129e4 <uxr_millis>
 80115e6:	4606      	mov	r6, r0
 80115e8:	4620      	mov	r0, r4
 80115ea:	f7ff fc75 	bl	8010ed8 <uxr_flash_output_streams>
 80115ee:	4629      	mov	r1, r5
 80115f0:	4620      	mov	r0, r4
 80115f2:	f7ff feb5 	bl	8011360 <listen_message_reliably>
 80115f6:	f001 f9f5 	bl	80129e4 <uxr_millis>
 80115fa:	1b83      	subs	r3, r0, r6
 80115fc:	1ae9      	subs	r1, r5, r3
 80115fe:	2900      	cmp	r1, #0
 8011600:	dcf6      	bgt.n	80115f0 <uxr_run_session_timeout+0x14>
 8011602:	f104 0008 	add.w	r0, r4, #8
 8011606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801160a:	f001 b98f 	b.w	801292c <uxr_output_streams_confirmed>
 801160e:	bf00      	nop

08011610 <uxr_run_session_until_data>:
 8011610:	b570      	push	{r4, r5, r6, lr}
 8011612:	4604      	mov	r4, r0
 8011614:	460d      	mov	r5, r1
 8011616:	f001 f9e5 	bl	80129e4 <uxr_millis>
 801161a:	4606      	mov	r6, r0
 801161c:	4620      	mov	r0, r4
 801161e:	f7ff fc5b 	bl	8010ed8 <uxr_flash_output_streams>
 8011622:	2300      	movs	r3, #0
 8011624:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8011628:	4629      	mov	r1, r5
 801162a:	e005      	b.n	8011638 <uxr_run_session_until_data+0x28>
 801162c:	f001 f9da 	bl	80129e4 <uxr_millis>
 8011630:	1b83      	subs	r3, r0, r6
 8011632:	1ae9      	subs	r1, r5, r3
 8011634:	2900      	cmp	r1, #0
 8011636:	dd07      	ble.n	8011648 <uxr_run_session_until_data+0x38>
 8011638:	4620      	mov	r0, r4
 801163a:	f7ff fe91 	bl	8011360 <listen_message_reliably>
 801163e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8011642:	2800      	cmp	r0, #0
 8011644:	d0f2      	beq.n	801162c <uxr_run_session_until_data+0x1c>
 8011646:	bd70      	pop	{r4, r5, r6, pc}
 8011648:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 801164c:	bd70      	pop	{r4, r5, r6, pc}
 801164e:	bf00      	nop

08011650 <uxr_run_session_until_confirm_delivery>:
 8011650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011654:	4606      	mov	r6, r0
 8011656:	460d      	mov	r5, r1
 8011658:	f001 f9c4 	bl	80129e4 <uxr_millis>
 801165c:	4607      	mov	r7, r0
 801165e:	4630      	mov	r0, r6
 8011660:	f7ff fc3a 	bl	8010ed8 <uxr_flash_output_streams>
 8011664:	2d00      	cmp	r5, #0
 8011666:	f106 0808 	add.w	r8, r6, #8
 801166a:	bfa8      	it	ge
 801166c:	462c      	movge	r4, r5
 801166e:	da07      	bge.n	8011680 <uxr_run_session_until_confirm_delivery+0x30>
 8011670:	e00e      	b.n	8011690 <uxr_run_session_until_confirm_delivery+0x40>
 8011672:	f7ff fe75 	bl	8011360 <listen_message_reliably>
 8011676:	f001 f9b5 	bl	80129e4 <uxr_millis>
 801167a:	1bc3      	subs	r3, r0, r7
 801167c:	1aec      	subs	r4, r5, r3
 801167e:	d407      	bmi.n	8011690 <uxr_run_session_until_confirm_delivery+0x40>
 8011680:	4640      	mov	r0, r8
 8011682:	f001 f953 	bl	801292c <uxr_output_streams_confirmed>
 8011686:	4603      	mov	r3, r0
 8011688:	4621      	mov	r1, r4
 801168a:	4630      	mov	r0, r6
 801168c:	2b00      	cmp	r3, #0
 801168e:	d0f0      	beq.n	8011672 <uxr_run_session_until_confirm_delivery+0x22>
 8011690:	4640      	mov	r0, r8
 8011692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011696:	f001 b949 	b.w	801292c <uxr_output_streams_confirmed>
 801169a:	bf00      	nop

0801169c <uxr_run_session_until_all_status>:
 801169c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116a0:	9d08      	ldr	r5, [sp, #32]
 80116a2:	460f      	mov	r7, r1
 80116a4:	4692      	mov	sl, r2
 80116a6:	461c      	mov	r4, r3
 80116a8:	4606      	mov	r6, r0
 80116aa:	f7ff fc15 	bl	8010ed8 <uxr_flash_output_streams>
 80116ae:	b125      	cbz	r5, 80116ba <uxr_run_session_until_all_status+0x1e>
 80116b0:	462a      	mov	r2, r5
 80116b2:	21ff      	movs	r1, #255	; 0xff
 80116b4:	4620      	mov	r0, r4
 80116b6:	f007 fd19 	bl	80190ec <memset>
 80116ba:	e9c6 a41d 	strd	sl, r4, [r6, #116]	; 0x74
 80116be:	67f5      	str	r5, [r6, #124]	; 0x7c
 80116c0:	f001 f990 	bl	80129e4 <uxr_millis>
 80116c4:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 80116c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80116cc:	4680      	mov	r8, r0
 80116ce:	4639      	mov	r1, r7
 80116d0:	4630      	mov	r0, r6
 80116d2:	f7ff fe45 	bl	8011360 <listen_message_reliably>
 80116d6:	f001 f985 	bl	80129e4 <uxr_millis>
 80116da:	eba0 0008 	sub.w	r0, r0, r8
 80116de:	1a39      	subs	r1, r7, r0
 80116e0:	b33d      	cbz	r5, 8011732 <uxr_run_session_until_all_status+0x96>
 80116e2:	46cc      	mov	ip, r9
 80116e4:	464a      	mov	r2, r9
 80116e6:	2301      	movs	r3, #1
 80116e8:	e002      	b.n	80116f0 <uxr_run_session_until_all_status+0x54>
 80116ea:	42ab      	cmp	r3, r5
 80116ec:	d20c      	bcs.n	8011708 <uxr_run_session_until_all_status+0x6c>
 80116ee:	3301      	adds	r3, #1
 80116f0:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 80116f4:	2cff      	cmp	r4, #255	; 0xff
 80116f6:	d1f8      	bne.n	80116ea <uxr_run_session_until_all_status+0x4e>
 80116f8:	42ab      	cmp	r3, r5
 80116fa:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 80116fe:	d213      	bcs.n	8011728 <uxr_run_session_until_all_status+0x8c>
 8011700:	2800      	cmp	r0, #0
 8011702:	d0f4      	beq.n	80116ee <uxr_run_session_until_all_status+0x52>
 8011704:	2900      	cmp	r1, #0
 8011706:	dce3      	bgt.n	80116d0 <uxr_run_session_until_all_status+0x34>
 8011708:	2300      	movs	r3, #0
 801170a:	444d      	add	r5, r9
 801170c:	67f3      	str	r3, [r6, #124]	; 0x7c
 801170e:	e001      	b.n	8011714 <uxr_run_session_until_all_status+0x78>
 8011710:	2b01      	cmp	r3, #1
 8011712:	d812      	bhi.n	801173a <uxr_run_session_until_all_status+0x9e>
 8011714:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8011718:	4565      	cmp	r5, ip
 801171a:	d1f9      	bne.n	8011710 <uxr_run_session_until_all_status+0x74>
 801171c:	2b01      	cmp	r3, #1
 801171e:	bf8c      	ite	hi
 8011720:	2000      	movhi	r0, #0
 8011722:	2001      	movls	r0, #1
 8011724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011728:	2900      	cmp	r1, #0
 801172a:	dded      	ble.n	8011708 <uxr_run_session_until_all_status+0x6c>
 801172c:	2800      	cmp	r0, #0
 801172e:	d1cf      	bne.n	80116d0 <uxr_run_session_until_all_status+0x34>
 8011730:	e7ea      	b.n	8011708 <uxr_run_session_until_all_status+0x6c>
 8011732:	67f5      	str	r5, [r6, #124]	; 0x7c
 8011734:	2001      	movs	r0, #1
 8011736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801173a:	2000      	movs	r0, #0
 801173c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011740 <uxr_create_session>:
 8011740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011744:	ed2d 8b02 	vpush	{d8}
 8011748:	f100 0808 	add.w	r8, r0, #8
 801174c:	b0a9      	sub	sp, #164	; 0xa4
 801174e:	4604      	mov	r4, r0
 8011750:	4640      	mov	r0, r8
 8011752:	f001 f827 	bl	80127a4 <uxr_reset_stream_storage>
 8011756:	4620      	mov	r0, r4
 8011758:	f000 fb0e 	bl	8011d78 <uxr_session_header_offset>
 801175c:	a909      	add	r1, sp, #36	; 0x24
 801175e:	9000      	str	r0, [sp, #0]
 8011760:	2300      	movs	r3, #0
 8011762:	a810      	add	r0, sp, #64	; 0x40
 8011764:	221c      	movs	r2, #28
 8011766:	f7fe fda9 	bl	80102bc <ucdr_init_buffer_origin_offset>
 801176a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801176c:	8a1a      	ldrh	r2, [r3, #16]
 801176e:	3a04      	subs	r2, #4
 8011770:	b292      	uxth	r2, r2
 8011772:	4620      	mov	r0, r4
 8011774:	a910      	add	r1, sp, #64	; 0x40
 8011776:	f000 fa23 	bl	8011bc0 <uxr_buffer_create_session>
 801177a:	9910      	ldr	r1, [sp, #64]	; 0x40
 801177c:	4620      	mov	r0, r4
 801177e:	f000 fa8f 	bl	8011ca0 <uxr_stamp_create_session_header>
 8011782:	a810      	add	r0, sp, #64	; 0x40
 8011784:	f7fe fdd8 	bl	8010338 <ucdr_buffer_length>
 8011788:	23ff      	movs	r3, #255	; 0xff
 801178a:	ee08 0a10 	vmov	s16, r0
 801178e:	7163      	strb	r3, [r4, #5]
 8011790:	f04f 090a 	mov.w	r9, #10
 8011794:	46c2      	mov	sl, r8
 8011796:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011798:	ee18 2a10 	vmov	r2, s16
 801179c:	e9d3 0500 	ldrd	r0, r5, [r3]
 80117a0:	a909      	add	r1, sp, #36	; 0x24
 80117a2:	47a8      	blx	r5
 80117a4:	f001 f91e 	bl	80129e4 <uxr_millis>
 80117a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80117ac:	9002      	str	r0, [sp, #8]
 80117ae:	e00c      	b.n	80117ca <uxr_create_session+0x8a>
 80117b0:	f001 f918 	bl	80129e4 <uxr_millis>
 80117b4:	9b02      	ldr	r3, [sp, #8]
 80117b6:	7962      	ldrb	r2, [r4, #5]
 80117b8:	1ac0      	subs	r0, r0, r3
 80117ba:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80117be:	2b00      	cmp	r3, #0
 80117c0:	f340 8094 	ble.w	80118ec <uxr_create_session+0x1ac>
 80117c4:	2aff      	cmp	r2, #255	; 0xff
 80117c6:	f040 8097 	bne.w	80118f8 <uxr_create_session+0x1b8>
 80117ca:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80117cc:	a905      	add	r1, sp, #20
 80117ce:	6895      	ldr	r5, [r2, #8]
 80117d0:	6810      	ldr	r0, [r2, #0]
 80117d2:	aa06      	add	r2, sp, #24
 80117d4:	47a8      	blx	r5
 80117d6:	2800      	cmp	r0, #0
 80117d8:	d0ea      	beq.n	80117b0 <uxr_create_session+0x70>
 80117da:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80117de:	a818      	add	r0, sp, #96	; 0x60
 80117e0:	f7fe fd7e 	bl	80102e0 <ucdr_init_buffer>
 80117e4:	2500      	movs	r5, #0
 80117e6:	f10d 0312 	add.w	r3, sp, #18
 80117ea:	aa04      	add	r2, sp, #16
 80117ec:	a918      	add	r1, sp, #96	; 0x60
 80117ee:	4620      	mov	r0, r4
 80117f0:	f88d 5010 	strb.w	r5, [sp, #16]
 80117f4:	f000 fa7e 	bl	8011cf4 <uxr_read_session_header>
 80117f8:	2800      	cmp	r0, #0
 80117fa:	d0d9      	beq.n	80117b0 <uxr_create_session+0x70>
 80117fc:	4629      	mov	r1, r5
 80117fe:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8011802:	f000 ff99 	bl	8012738 <uxr_stream_id_from_raw>
 8011806:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801180a:	2f01      	cmp	r7, #1
 801180c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8011810:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8011814:	fa5f f880 	uxtb.w	r8, r0
 8011818:	f3c0 2507 	ubfx	r5, r0, #8, #8
 801181c:	d04d      	beq.n	80118ba <uxr_create_session+0x17a>
 801181e:	2f02      	cmp	r7, #2
 8011820:	d00c      	beq.n	801183c <uxr_create_session+0xfc>
 8011822:	2f00      	cmp	r7, #0
 8011824:	d1c4      	bne.n	80117b0 <uxr_create_session+0x70>
 8011826:	4639      	mov	r1, r7
 8011828:	4638      	mov	r0, r7
 801182a:	f000 ff85 	bl	8012738 <uxr_stream_id_from_raw>
 801182e:	a918      	add	r1, sp, #96	; 0x60
 8011830:	4602      	mov	r2, r0
 8011832:	4620      	mov	r0, r4
 8011834:	9208      	str	r2, [sp, #32]
 8011836:	f7ff fc0b 	bl	8011050 <read_submessage_list>
 801183a:	e7b9      	b.n	80117b0 <uxr_create_session+0x70>
 801183c:	4629      	mov	r1, r5
 801183e:	4650      	mov	r0, sl
 8011840:	f001 f868 	bl	8012914 <uxr_get_input_reliable_stream>
 8011844:	4606      	mov	r6, r0
 8011846:	b390      	cbz	r0, 80118ae <uxr_create_session+0x16e>
 8011848:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801184a:	9203      	str	r2, [sp, #12]
 801184c:	a818      	add	r0, sp, #96	; 0x60
 801184e:	f7fe fd77 	bl	8010340 <ucdr_buffer_remaining>
 8011852:	4603      	mov	r3, r0
 8011854:	f10d 0011 	add.w	r0, sp, #17
 8011858:	9000      	str	r0, [sp, #0]
 801185a:	9a03      	ldr	r2, [sp, #12]
 801185c:	4659      	mov	r1, fp
 801185e:	4630      	mov	r0, r6
 8011860:	f006 fcda 	bl	8018218 <uxr_receive_reliable_message>
 8011864:	b318      	cbz	r0, 80118ae <uxr_create_session+0x16e>
 8011866:	f89d 3011 	ldrb.w	r3, [sp, #17]
 801186a:	b9b3      	cbnz	r3, 801189a <uxr_create_session+0x15a>
 801186c:	f88d 8020 	strb.w	r8, [sp, #32]
 8011870:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8011874:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 8011878:	9a08      	ldr	r2, [sp, #32]
 801187a:	a918      	add	r1, sp, #96	; 0x60
 801187c:	4620      	mov	r0, r4
 801187e:	f7ff fbe7 	bl	8011050 <read_submessage_list>
 8011882:	e00a      	b.n	801189a <uxr_create_session+0x15a>
 8011884:	f04f 0302 	mov.w	r3, #2
 8011888:	f88d 8020 	strb.w	r8, [sp, #32]
 801188c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8011890:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8011894:	9a08      	ldr	r2, [sp, #32]
 8011896:	f7ff fbdb 	bl	8011050 <read_submessage_list>
 801189a:	a920      	add	r1, sp, #128	; 0x80
 801189c:	2204      	movs	r2, #4
 801189e:	4630      	mov	r0, r6
 80118a0:	f006 fd3a 	bl	8018318 <uxr_next_input_reliable_buffer_available>
 80118a4:	4603      	mov	r3, r0
 80118a6:	a920      	add	r1, sp, #128	; 0x80
 80118a8:	4620      	mov	r0, r4
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d1ea      	bne.n	8011884 <uxr_create_session+0x144>
 80118ae:	462a      	mov	r2, r5
 80118b0:	4641      	mov	r1, r8
 80118b2:	4620      	mov	r0, r4
 80118b4:	f7ff fa4a 	bl	8010d4c <write_submessage_acknack.isra.0>
 80118b8:	e77a      	b.n	80117b0 <uxr_create_session+0x70>
 80118ba:	4629      	mov	r1, r5
 80118bc:	4650      	mov	r0, sl
 80118be:	f001 f81f 	bl	8012900 <uxr_get_input_best_effort_stream>
 80118c2:	2800      	cmp	r0, #0
 80118c4:	f43f af74 	beq.w	80117b0 <uxr_create_session+0x70>
 80118c8:	4659      	mov	r1, fp
 80118ca:	f006 fc21 	bl	8018110 <uxr_receive_best_effort_message>
 80118ce:	2800      	cmp	r0, #0
 80118d0:	f43f af6e 	beq.w	80117b0 <uxr_create_session+0x70>
 80118d4:	f88d 8020 	strb.w	r8, [sp, #32]
 80118d8:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 80118dc:	f88d 7022 	strb.w	r7, [sp, #34]	; 0x22
 80118e0:	9a08      	ldr	r2, [sp, #32]
 80118e2:	a918      	add	r1, sp, #96	; 0x60
 80118e4:	4620      	mov	r0, r4
 80118e6:	f7ff fbb3 	bl	8011050 <read_submessage_list>
 80118ea:	e761      	b.n	80117b0 <uxr_create_session+0x70>
 80118ec:	f1b9 0901 	subs.w	r9, r9, #1
 80118f0:	d002      	beq.n	80118f8 <uxr_create_session+0x1b8>
 80118f2:	2aff      	cmp	r2, #255	; 0xff
 80118f4:	f43f af4f 	beq.w	8011796 <uxr_create_session+0x56>
 80118f8:	b12a      	cbz	r2, 8011906 <uxr_create_session+0x1c6>
 80118fa:	2000      	movs	r0, #0
 80118fc:	b029      	add	sp, #164	; 0xa4
 80118fe:	ecbd 8b02 	vpop	{d8}
 8011902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011906:	4650      	mov	r0, sl
 8011908:	f000 ff4c 	bl	80127a4 <uxr_reset_stream_storage>
 801190c:	2001      	movs	r0, #1
 801190e:	b029      	add	sp, #164	; 0xa4
 8011910:	ecbd 8b02 	vpop	{d8}
 8011914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011918 <wait_session_status>:
 8011918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801191c:	4604      	mov	r4, r0
 801191e:	b09d      	sub	sp, #116	; 0x74
 8011920:	20ff      	movs	r0, #255	; 0xff
 8011922:	7160      	strb	r0, [r4, #5]
 8011924:	9304      	str	r3, [sp, #16]
 8011926:	2b00      	cmp	r3, #0
 8011928:	f000 80b8 	beq.w	8011a9c <wait_session_status+0x184>
 801192c:	2300      	movs	r3, #0
 801192e:	468b      	mov	fp, r1
 8011930:	4692      	mov	sl, r2
 8011932:	9303      	str	r3, [sp, #12]
 8011934:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011936:	4652      	mov	r2, sl
 8011938:	e9d3 0500 	ldrd	r0, r5, [r3]
 801193c:	4659      	mov	r1, fp
 801193e:	47a8      	blx	r5
 8011940:	f001 f850 	bl	80129e4 <uxr_millis>
 8011944:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011948:	4605      	mov	r5, r0
 801194a:	e009      	b.n	8011960 <wait_session_status+0x48>
 801194c:	f001 f84a 	bl	80129e4 <uxr_millis>
 8011950:	1b40      	subs	r0, r0, r5
 8011952:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8011956:	2b00      	cmp	r3, #0
 8011958:	dd42      	ble.n	80119e0 <wait_session_status+0xc8>
 801195a:	7960      	ldrb	r0, [r4, #5]
 801195c:	28ff      	cmp	r0, #255	; 0xff
 801195e:	d148      	bne.n	80119f2 <wait_session_status+0xda>
 8011960:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8011962:	a908      	add	r1, sp, #32
 8011964:	6896      	ldr	r6, [r2, #8]
 8011966:	6810      	ldr	r0, [r2, #0]
 8011968:	aa09      	add	r2, sp, #36	; 0x24
 801196a:	47b0      	blx	r6
 801196c:	2800      	cmp	r0, #0
 801196e:	d0ed      	beq.n	801194c <wait_session_status+0x34>
 8011970:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011974:	a80c      	add	r0, sp, #48	; 0x30
 8011976:	f7fe fcb3 	bl	80102e0 <ucdr_init_buffer>
 801197a:	2600      	movs	r6, #0
 801197c:	f10d 031e 	add.w	r3, sp, #30
 8011980:	aa07      	add	r2, sp, #28
 8011982:	a90c      	add	r1, sp, #48	; 0x30
 8011984:	4620      	mov	r0, r4
 8011986:	f88d 601c 	strb.w	r6, [sp, #28]
 801198a:	f000 f9b3 	bl	8011cf4 <uxr_read_session_header>
 801198e:	2800      	cmp	r0, #0
 8011990:	d0dc      	beq.n	801194c <wait_session_status+0x34>
 8011992:	4631      	mov	r1, r6
 8011994:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011998:	f000 fece 	bl	8012738 <uxr_stream_id_from_raw>
 801199c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80119a0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80119a4:	9302      	str	r3, [sp, #8]
 80119a6:	2f01      	cmp	r7, #1
 80119a8:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 80119ac:	fa5f f880 	uxtb.w	r8, r0
 80119b0:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80119b4:	d058      	beq.n	8011a68 <wait_session_status+0x150>
 80119b6:	2f02      	cmp	r7, #2
 80119b8:	d021      	beq.n	80119fe <wait_session_status+0xe6>
 80119ba:	2f00      	cmp	r7, #0
 80119bc:	d1c6      	bne.n	801194c <wait_session_status+0x34>
 80119be:	4639      	mov	r1, r7
 80119c0:	4638      	mov	r0, r7
 80119c2:	f000 feb9 	bl	8012738 <uxr_stream_id_from_raw>
 80119c6:	a90c      	add	r1, sp, #48	; 0x30
 80119c8:	4602      	mov	r2, r0
 80119ca:	4620      	mov	r0, r4
 80119cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80119ce:	f7ff fb3f 	bl	8011050 <read_submessage_list>
 80119d2:	f001 f807 	bl	80129e4 <uxr_millis>
 80119d6:	1b40      	subs	r0, r0, r5
 80119d8:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80119dc:	2b00      	cmp	r3, #0
 80119de:	dcbc      	bgt.n	801195a <wait_session_status+0x42>
 80119e0:	9b03      	ldr	r3, [sp, #12]
 80119e2:	9a04      	ldr	r2, [sp, #16]
 80119e4:	7960      	ldrb	r0, [r4, #5]
 80119e6:	3301      	adds	r3, #1
 80119e8:	429a      	cmp	r2, r3
 80119ea:	9303      	str	r3, [sp, #12]
 80119ec:	d001      	beq.n	80119f2 <wait_session_status+0xda>
 80119ee:	28ff      	cmp	r0, #255	; 0xff
 80119f0:	d0a0      	beq.n	8011934 <wait_session_status+0x1c>
 80119f2:	38ff      	subs	r0, #255	; 0xff
 80119f4:	bf18      	it	ne
 80119f6:	2001      	movne	r0, #1
 80119f8:	b01d      	add	sp, #116	; 0x74
 80119fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119fe:	4631      	mov	r1, r6
 8011a00:	f104 0008 	add.w	r0, r4, #8
 8011a04:	f000 ff86 	bl	8012914 <uxr_get_input_reliable_stream>
 8011a08:	4681      	mov	r9, r0
 8011a0a:	b338      	cbz	r0, 8011a5c <wait_session_status+0x144>
 8011a0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011a0e:	9205      	str	r2, [sp, #20]
 8011a10:	a80c      	add	r0, sp, #48	; 0x30
 8011a12:	f7fe fc95 	bl	8010340 <ucdr_buffer_remaining>
 8011a16:	4603      	mov	r3, r0
 8011a18:	f10d 001d 	add.w	r0, sp, #29
 8011a1c:	9000      	str	r0, [sp, #0]
 8011a1e:	9a05      	ldr	r2, [sp, #20]
 8011a20:	9902      	ldr	r1, [sp, #8]
 8011a22:	4648      	mov	r0, r9
 8011a24:	f006 fbf8 	bl	8018218 <uxr_receive_reliable_message>
 8011a28:	b1c0      	cbz	r0, 8011a5c <wait_session_status+0x144>
 8011a2a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8011a2e:	b95b      	cbnz	r3, 8011a48 <wait_session_status+0x130>
 8011a30:	e03c      	b.n	8011aac <wait_session_status+0x194>
 8011a32:	f04f 0302 	mov.w	r3, #2
 8011a36:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8011a3a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8011a3e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8011a42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011a44:	f7ff fb04 	bl	8011050 <read_submessage_list>
 8011a48:	a914      	add	r1, sp, #80	; 0x50
 8011a4a:	2204      	movs	r2, #4
 8011a4c:	4648      	mov	r0, r9
 8011a4e:	f006 fc63 	bl	8018318 <uxr_next_input_reliable_buffer_available>
 8011a52:	4603      	mov	r3, r0
 8011a54:	a914      	add	r1, sp, #80	; 0x50
 8011a56:	4620      	mov	r0, r4
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d1ea      	bne.n	8011a32 <wait_session_status+0x11a>
 8011a5c:	4632      	mov	r2, r6
 8011a5e:	4641      	mov	r1, r8
 8011a60:	4620      	mov	r0, r4
 8011a62:	f7ff f973 	bl	8010d4c <write_submessage_acknack.isra.0>
 8011a66:	e771      	b.n	801194c <wait_session_status+0x34>
 8011a68:	4631      	mov	r1, r6
 8011a6a:	f104 0008 	add.w	r0, r4, #8
 8011a6e:	f000 ff47 	bl	8012900 <uxr_get_input_best_effort_stream>
 8011a72:	2800      	cmp	r0, #0
 8011a74:	f43f af6a 	beq.w	801194c <wait_session_status+0x34>
 8011a78:	9902      	ldr	r1, [sp, #8]
 8011a7a:	f006 fb49 	bl	8018110 <uxr_receive_best_effort_message>
 8011a7e:	2800      	cmp	r0, #0
 8011a80:	f43f af64 	beq.w	801194c <wait_session_status+0x34>
 8011a84:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8011a88:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8011a8c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8011a90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011a92:	a90c      	add	r1, sp, #48	; 0x30
 8011a94:	4620      	mov	r0, r4
 8011a96:	f7ff fadb 	bl	8011050 <read_submessage_list>
 8011a9a:	e757      	b.n	801194c <wait_session_status+0x34>
 8011a9c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011a9e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011aa2:	47a0      	blx	r4
 8011aa4:	2001      	movs	r0, #1
 8011aa6:	b01d      	add	sp, #116	; 0x74
 8011aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aac:	f88d 802c 	strb.w	r8, [sp, #44]	; 0x2c
 8011ab0:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8011ab4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8011ab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011aba:	a90c      	add	r1, sp, #48	; 0x30
 8011abc:	4620      	mov	r0, r4
 8011abe:	f7ff fac7 	bl	8011050 <read_submessage_list>
 8011ac2:	e7c1      	b.n	8011a48 <wait_session_status+0x130>

08011ac4 <uxr_delete_session_retries>:
 8011ac4:	b530      	push	{r4, r5, lr}
 8011ac6:	b08f      	sub	sp, #60	; 0x3c
 8011ac8:	4604      	mov	r4, r0
 8011aca:	460d      	mov	r5, r1
 8011acc:	f000 f954 	bl	8011d78 <uxr_session_header_offset>
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	2210      	movs	r2, #16
 8011ad4:	9000      	str	r0, [sp, #0]
 8011ad6:	a902      	add	r1, sp, #8
 8011ad8:	a806      	add	r0, sp, #24
 8011ada:	f7fe fbef 	bl	80102bc <ucdr_init_buffer_origin_offset>
 8011ade:	a906      	add	r1, sp, #24
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	f000 f897 	bl	8011c14 <uxr_buffer_delete_session>
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	4611      	mov	r1, r2
 8011aea:	9b06      	ldr	r3, [sp, #24]
 8011aec:	4620      	mov	r0, r4
 8011aee:	f000 f8eb 	bl	8011cc8 <uxr_stamp_session_header>
 8011af2:	a806      	add	r0, sp, #24
 8011af4:	f7fe fc20 	bl	8010338 <ucdr_buffer_length>
 8011af8:	462b      	mov	r3, r5
 8011afa:	4602      	mov	r2, r0
 8011afc:	a902      	add	r1, sp, #8
 8011afe:	4620      	mov	r0, r4
 8011b00:	f7ff ff0a 	bl	8011918 <wait_session_status>
 8011b04:	b118      	cbz	r0, 8011b0e <uxr_delete_session_retries+0x4a>
 8011b06:	7960      	ldrb	r0, [r4, #5]
 8011b08:	fab0 f080 	clz	r0, r0
 8011b0c:	0940      	lsrs	r0, r0, #5
 8011b0e:	b00f      	add	sp, #60	; 0x3c
 8011b10:	bd30      	pop	{r4, r5, pc}
 8011b12:	bf00      	nop

08011b14 <uxr_prepare_stream_to_write_submessage>:
 8011b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b18:	b082      	sub	sp, #8
 8011b1a:	4682      	mov	sl, r0
 8011b1c:	4610      	mov	r0, r2
 8011b1e:	4615      	mov	r5, r2
 8011b20:	461e      	mov	r6, r3
 8011b22:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8011b26:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8011b2a:	9101      	str	r1, [sp, #4]
 8011b2c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011b30:	f000 ff52 	bl	80129d8 <uxr_submessage_padding>
 8011b34:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011b38:	f105 0904 	add.w	r9, r5, #4
 8011b3c:	2b01      	cmp	r3, #1
 8011b3e:	4481      	add	r9, r0
 8011b40:	d01d      	beq.n	8011b7e <uxr_prepare_stream_to_write_submessage+0x6a>
 8011b42:	2b02      	cmp	r3, #2
 8011b44:	d116      	bne.n	8011b74 <uxr_prepare_stream_to_write_submessage+0x60>
 8011b46:	4621      	mov	r1, r4
 8011b48:	f10a 0008 	add.w	r0, sl, #8
 8011b4c:	f000 fecc 	bl	80128e8 <uxr_get_output_reliable_stream>
 8011b50:	4604      	mov	r4, r0
 8011b52:	b158      	cbz	r0, 8011b6c <uxr_prepare_stream_to_write_submessage+0x58>
 8011b54:	4649      	mov	r1, r9
 8011b56:	4632      	mov	r2, r6
 8011b58:	f006 fd94 	bl	8018684 <uxr_prepare_reliable_buffer_to_write>
 8011b5c:	4604      	mov	r4, r0
 8011b5e:	b12c      	cbz	r4, 8011b6c <uxr_prepare_stream_to_write_submessage+0x58>
 8011b60:	4643      	mov	r3, r8
 8011b62:	b2aa      	uxth	r2, r5
 8011b64:	4639      	mov	r1, r7
 8011b66:	4630      	mov	r0, r6
 8011b68:	f000 fef6 	bl	8012958 <uxr_buffer_submessage_header>
 8011b6c:	4620      	mov	r0, r4
 8011b6e:	b002      	add	sp, #8
 8011b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b74:	2400      	movs	r4, #0
 8011b76:	4620      	mov	r0, r4
 8011b78:	b002      	add	sp, #8
 8011b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b7e:	4621      	mov	r1, r4
 8011b80:	f10a 0008 	add.w	r0, sl, #8
 8011b84:	f000 fea8 	bl	80128d8 <uxr_get_output_best_effort_stream>
 8011b88:	4604      	mov	r4, r0
 8011b8a:	2800      	cmp	r0, #0
 8011b8c:	d0ee      	beq.n	8011b6c <uxr_prepare_stream_to_write_submessage+0x58>
 8011b8e:	4649      	mov	r1, r9
 8011b90:	4632      	mov	r2, r6
 8011b92:	f006 fcb3 	bl	80184fc <uxr_prepare_best_effort_buffer_to_write>
 8011b96:	4604      	mov	r4, r0
 8011b98:	e7e1      	b.n	8011b5e <uxr_prepare_stream_to_write_submessage+0x4a>
 8011b9a:	bf00      	nop

08011b9c <uxr_init_session_info>:
 8011b9c:	b470      	push	{r4, r5, r6}
 8011b9e:	7102      	strb	r2, [r0, #4]
 8011ba0:	0e16      	lsrs	r6, r2, #24
 8011ba2:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8011ba6:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8011baa:	23ff      	movs	r3, #255	; 0xff
 8011bac:	2209      	movs	r2, #9
 8011bae:	7046      	strb	r6, [r0, #1]
 8011bb0:	7085      	strb	r5, [r0, #2]
 8011bb2:	70c4      	strb	r4, [r0, #3]
 8011bb4:	7001      	strb	r1, [r0, #0]
 8011bb6:	bc70      	pop	{r4, r5, r6}
 8011bb8:	80c2      	strh	r2, [r0, #6]
 8011bba:	7143      	strb	r3, [r0, #5]
 8011bbc:	4770      	bx	lr
 8011bbe:	bf00      	nop

08011bc0 <uxr_buffer_create_session>:
 8011bc0:	b570      	push	{r4, r5, r6, lr}
 8011bc2:	b088      	sub	sp, #32
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	4d12      	ldr	r5, [pc, #72]	; (8011c10 <uxr_buffer_create_session+0x50>)
 8011bc8:	9307      	str	r3, [sp, #28]
 8011bca:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011bce:	7802      	ldrb	r2, [r0, #0]
 8011bd0:	9303      	str	r3, [sp, #12]
 8011bd2:	460c      	mov	r4, r1
 8011bd4:	f88d 200c 	strb.w	r2, [sp, #12]
 8011bd8:	2101      	movs	r1, #1
 8011bda:	682a      	ldr	r2, [r5, #0]
 8011bdc:	f8d0 6001 	ldr.w	r6, [r0, #1]
 8011be0:	88ad      	ldrh	r5, [r5, #4]
 8011be2:	80c1      	strh	r1, [r0, #6]
 8011be4:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011be8:	9200      	str	r2, [sp, #0]
 8011bea:	4619      	mov	r1, r3
 8011bec:	2210      	movs	r2, #16
 8011bee:	4620      	mov	r0, r4
 8011bf0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011bf4:	9306      	str	r3, [sp, #24]
 8011bf6:	f88d 300d 	strb.w	r3, [sp, #13]
 8011bfa:	9602      	str	r6, [sp, #8]
 8011bfc:	f8ad 5006 	strh.w	r5, [sp, #6]
 8011c00:	f000 feaa 	bl	8012958 <uxr_buffer_submessage_header>
 8011c04:	4620      	mov	r0, r4
 8011c06:	4669      	mov	r1, sp
 8011c08:	f001 fece 	bl	80139a8 <uxr_serialize_CREATE_CLIENT_Payload>
 8011c0c:	b008      	add	sp, #32
 8011c0e:	bd70      	pop	{r4, r5, r6, pc}
 8011c10:	0801ddf8 	.word	0x0801ddf8

08011c14 <uxr_buffer_delete_session>:
 8011c14:	b530      	push	{r4, r5, lr}
 8011c16:	4b0c      	ldr	r3, [pc, #48]	; (8011c48 <uxr_buffer_delete_session+0x34>)
 8011c18:	b083      	sub	sp, #12
 8011c1a:	891b      	ldrh	r3, [r3, #8]
 8011c1c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011c20:	2202      	movs	r2, #2
 8011c22:	460c      	mov	r4, r1
 8011c24:	80c2      	strh	r2, [r0, #6]
 8011c26:	2300      	movs	r3, #0
 8011c28:	2204      	movs	r2, #4
 8011c2a:	4608      	mov	r0, r1
 8011c2c:	f44f 7500 	mov.w	r5, #512	; 0x200
 8011c30:	2103      	movs	r1, #3
 8011c32:	f8ad 5004 	strh.w	r5, [sp, #4]
 8011c36:	f000 fe8f 	bl	8012958 <uxr_buffer_submessage_header>
 8011c3a:	4620      	mov	r0, r4
 8011c3c:	a901      	add	r1, sp, #4
 8011c3e:	f001 ff61 	bl	8013b04 <uxr_serialize_DELETE_Payload>
 8011c42:	b003      	add	sp, #12
 8011c44:	bd30      	pop	{r4, r5, pc}
 8011c46:	bf00      	nop
 8011c48:	0801ddf8 	.word	0x0801ddf8

08011c4c <uxr_read_create_session_status>:
 8011c4c:	b510      	push	{r4, lr}
 8011c4e:	b088      	sub	sp, #32
 8011c50:	4604      	mov	r4, r0
 8011c52:	4608      	mov	r0, r1
 8011c54:	a901      	add	r1, sp, #4
 8011c56:	f001 ff65 	bl	8013b24 <uxr_deserialize_STATUS_AGENT_Payload>
 8011c5a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011c5e:	7163      	strb	r3, [r4, #5]
 8011c60:	b008      	add	sp, #32
 8011c62:	bd10      	pop	{r4, pc}

08011c64 <uxr_read_delete_session_status>:
 8011c64:	b510      	push	{r4, lr}
 8011c66:	4604      	mov	r4, r0
 8011c68:	b084      	sub	sp, #16
 8011c6a:	4608      	mov	r0, r1
 8011c6c:	a902      	add	r1, sp, #8
 8011c6e:	f001 ff89 	bl	8013b84 <uxr_deserialize_STATUS_Payload>
 8011c72:	88e3      	ldrh	r3, [r4, #6]
 8011c74:	2b02      	cmp	r3, #2
 8011c76:	d001      	beq.n	8011c7c <uxr_read_delete_session_status+0x18>
 8011c78:	b004      	add	sp, #16
 8011c7a:	bd10      	pop	{r4, pc}
 8011c7c:	f10d 000a 	add.w	r0, sp, #10
 8011c80:	f7fe fec6 	bl	8010a10 <uxr_object_id_from_raw>
 8011c84:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011c88:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011c8c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	2b02      	cmp	r3, #2
 8011c94:	bf04      	itt	eq
 8011c96:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011c9a:	7163      	strbeq	r3, [r4, #5]
 8011c9c:	b004      	add	sp, #16
 8011c9e:	bd10      	pop	{r4, pc}

08011ca0 <uxr_stamp_create_session_header>:
 8011ca0:	b510      	push	{r4, lr}
 8011ca2:	4604      	mov	r4, r0
 8011ca4:	b08a      	sub	sp, #40	; 0x28
 8011ca6:	a802      	add	r0, sp, #8
 8011ca8:	2208      	movs	r2, #8
 8011caa:	f7fe fb19 	bl	80102e0 <ucdr_init_buffer>
 8011cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cb2:	9400      	str	r4, [sp, #0]
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	a802      	add	r0, sp, #8
 8011cb8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8011cbc:	461a      	mov	r2, r3
 8011cbe:	f001 f849 	bl	8012d54 <uxr_serialize_message_header>
 8011cc2:	b00a      	add	sp, #40	; 0x28
 8011cc4:	bd10      	pop	{r4, pc}
 8011cc6:	bf00      	nop

08011cc8 <uxr_stamp_session_header>:
 8011cc8:	b570      	push	{r4, r5, r6, lr}
 8011cca:	4604      	mov	r4, r0
 8011ccc:	b08c      	sub	sp, #48	; 0x30
 8011cce:	460d      	mov	r5, r1
 8011cd0:	4616      	mov	r6, r2
 8011cd2:	4619      	mov	r1, r3
 8011cd4:	a804      	add	r0, sp, #16
 8011cd6:	2208      	movs	r2, #8
 8011cd8:	9603      	str	r6, [sp, #12]
 8011cda:	f7fe fb01 	bl	80102e0 <ucdr_init_buffer>
 8011cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ce2:	9b03      	ldr	r3, [sp, #12]
 8011ce4:	9400      	str	r4, [sp, #0]
 8011ce6:	462a      	mov	r2, r5
 8011ce8:	a804      	add	r0, sp, #16
 8011cea:	f001 f833 	bl	8012d54 <uxr_serialize_message_header>
 8011cee:	b00c      	add	sp, #48	; 0x30
 8011cf0:	bd70      	pop	{r4, r5, r6, pc}
 8011cf2:	bf00      	nop

08011cf4 <uxr_read_session_header>:
 8011cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cf8:	4607      	mov	r7, r0
 8011cfa:	b084      	sub	sp, #16
 8011cfc:	4608      	mov	r0, r1
 8011cfe:	460c      	mov	r4, r1
 8011d00:	4615      	mov	r5, r2
 8011d02:	461e      	mov	r6, r3
 8011d04:	f7fe fb1c 	bl	8010340 <ucdr_buffer_remaining>
 8011d08:	2808      	cmp	r0, #8
 8011d0a:	d803      	bhi.n	8011d14 <uxr_read_session_header+0x20>
 8011d0c:	2000      	movs	r0, #0
 8011d0e:	b004      	add	sp, #16
 8011d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d14:	f10d 080c 	add.w	r8, sp, #12
 8011d18:	4633      	mov	r3, r6
 8011d1a:	462a      	mov	r2, r5
 8011d1c:	4620      	mov	r0, r4
 8011d1e:	f8cd 8000 	str.w	r8, [sp]
 8011d22:	f10d 010b 	add.w	r1, sp, #11
 8011d26:	f001 f833 	bl	8012d90 <uxr_deserialize_message_header>
 8011d2a:	783a      	ldrb	r2, [r7, #0]
 8011d2c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011d30:	4293      	cmp	r3, r2
 8011d32:	d1eb      	bne.n	8011d0c <uxr_read_session_header+0x18>
 8011d34:	061b      	lsls	r3, r3, #24
 8011d36:	d41c      	bmi.n	8011d72 <uxr_read_session_header+0x7e>
 8011d38:	f898 2000 	ldrb.w	r2, [r8]
 8011d3c:	787b      	ldrb	r3, [r7, #1]
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d003      	beq.n	8011d4a <uxr_read_session_header+0x56>
 8011d42:	2001      	movs	r0, #1
 8011d44:	f080 0001 	eor.w	r0, r0, #1
 8011d48:	e7e1      	b.n	8011d0e <uxr_read_session_header+0x1a>
 8011d4a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011d4e:	78bb      	ldrb	r3, [r7, #2]
 8011d50:	429a      	cmp	r2, r3
 8011d52:	f107 0102 	add.w	r1, r7, #2
 8011d56:	d1f4      	bne.n	8011d42 <uxr_read_session_header+0x4e>
 8011d58:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011d5c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011d60:	429a      	cmp	r2, r3
 8011d62:	d1ee      	bne.n	8011d42 <uxr_read_session_header+0x4e>
 8011d64:	784b      	ldrb	r3, [r1, #1]
 8011d66:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	d1e9      	bne.n	8011d42 <uxr_read_session_header+0x4e>
 8011d6e:	2000      	movs	r0, #0
 8011d70:	e7e8      	b.n	8011d44 <uxr_read_session_header+0x50>
 8011d72:	2001      	movs	r0, #1
 8011d74:	e7cb      	b.n	8011d0e <uxr_read_session_header+0x1a>
 8011d76:	bf00      	nop

08011d78 <uxr_session_header_offset>:
 8011d78:	f990 3000 	ldrsb.w	r3, [r0]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	bfac      	ite	ge
 8011d80:	2008      	movge	r0, #8
 8011d82:	2004      	movlt	r0, #4
 8011d84:	4770      	bx	lr
 8011d86:	bf00      	nop

08011d88 <uxr_init_base_object_request>:
 8011d88:	b530      	push	{r4, r5, lr}
 8011d8a:	88c3      	ldrh	r3, [r0, #6]
 8011d8c:	b083      	sub	sp, #12
 8011d8e:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8011d92:	9101      	str	r1, [sp, #4]
 8011d94:	f1a3 010a 	sub.w	r1, r3, #10
 8011d98:	b289      	uxth	r1, r1
 8011d9a:	42a1      	cmp	r1, r4
 8011d9c:	d80e      	bhi.n	8011dbc <uxr_init_base_object_request+0x34>
 8011d9e:	3301      	adds	r3, #1
 8011da0:	b29c      	uxth	r4, r3
 8011da2:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8011da6:	b2db      	uxtb	r3, r3
 8011da8:	80c4      	strh	r4, [r0, #6]
 8011daa:	1c91      	adds	r1, r2, #2
 8011dac:	9801      	ldr	r0, [sp, #4]
 8011dae:	7015      	strb	r5, [r2, #0]
 8011db0:	7053      	strb	r3, [r2, #1]
 8011db2:	f7fe fe41 	bl	8010a38 <uxr_object_id_to_raw>
 8011db6:	4620      	mov	r0, r4
 8011db8:	b003      	add	sp, #12
 8011dba:	bd30      	pop	{r4, r5, pc}
 8011dbc:	230a      	movs	r3, #10
 8011dbe:	461c      	mov	r4, r3
 8011dc0:	2500      	movs	r5, #0
 8011dc2:	e7f1      	b.n	8011da8 <uxr_init_base_object_request+0x20>

08011dc4 <uxr_parse_base_object_request>:
 8011dc4:	b570      	push	{r4, r5, r6, lr}
 8011dc6:	4604      	mov	r4, r0
 8011dc8:	3002      	adds	r0, #2
 8011dca:	460d      	mov	r5, r1
 8011dcc:	4616      	mov	r6, r2
 8011dce:	f7fe fe1f 	bl	8010a10 <uxr_object_id_from_raw>
 8011dd2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011dd6:	8028      	strh	r0, [r5, #0]
 8011dd8:	806b      	strh	r3, [r5, #2]
 8011dda:	7822      	ldrb	r2, [r4, #0]
 8011ddc:	7863      	ldrb	r3, [r4, #1]
 8011dde:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011de2:	8033      	strh	r3, [r6, #0]
 8011de4:	bd70      	pop	{r4, r5, r6, pc}
 8011de6:	bf00      	nop

08011de8 <uxr_init_framing_io>:
 8011de8:	2300      	movs	r3, #0
 8011dea:	7041      	strb	r1, [r0, #1]
 8011dec:	7003      	strb	r3, [r0, #0]
 8011dee:	8583      	strh	r3, [r0, #44]	; 0x2c
 8011df0:	4770      	bx	lr
 8011df2:	bf00      	nop

08011df4 <uxr_write_framed_msg>:
 8011df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011df8:	7845      	ldrb	r5, [r0, #1]
 8011dfa:	b085      	sub	sp, #20
 8011dfc:	4604      	mov	r4, r0
 8011dfe:	f1a5 0c7d 	sub.w	ip, r5, #125	; 0x7d
 8011e02:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
 8011e06:	f1bc 0f01 	cmp.w	ip, #1
 8011e0a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8011e0e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8011e12:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
 8011e16:	460e      	mov	r6, r1
 8011e18:	4617      	mov	r7, r2
 8011e1a:	469b      	mov	fp, r3
 8011e1c:	f240 8116 	bls.w	801204c <uxr_write_framed_msg+0x258>
 8011e20:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8011e24:	2302      	movs	r3, #2
 8011e26:	2a01      	cmp	r2, #1
 8011e28:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
 8011e2c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011e30:	f240 8091 	bls.w	8011f56 <uxr_write_framed_msg+0x162>
 8011e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e36:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8011e3a:	b2d9      	uxtb	r1, r3
 8011e3c:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8011e40:	2203      	movs	r2, #3
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011e48:	f240 809a 	bls.w	8011f80 <uxr_write_framed_msg+0x18c>
 8011e4c:	18a3      	adds	r3, r4, r2
 8011e4e:	3201      	adds	r2, #1
 8011e50:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8011e54:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e5a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8011e5e:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8011e62:	2901      	cmp	r1, #1
 8011e64:	eb04 0102 	add.w	r1, r4, r2
 8011e68:	f240 8101 	bls.w	801206e <uxr_write_framed_msg+0x27a>
 8011e6c:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8011e70:	3201      	adds	r2, #1
 8011e72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011e74:	b2d2      	uxtb	r2, r2
 8011e76:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	f000 8106 	beq.w	801208c <uxr_write_framed_msg+0x298>
 8011e80:	f04f 0a00 	mov.w	sl, #0
 8011e84:	46d1      	mov	r9, sl
 8011e86:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8011e8a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8011e8e:	2901      	cmp	r1, #1
 8011e90:	f240 80a3 	bls.w	8011fda <uxr_write_framed_msg+0x1e6>
 8011e94:	2a29      	cmp	r2, #41	; 0x29
 8011e96:	d87f      	bhi.n	8011f98 <uxr_write_framed_msg+0x1a4>
 8011e98:	18a1      	adds	r1, r4, r2
 8011e9a:	3201      	adds	r2, #1
 8011e9c:	b2d2      	uxtb	r2, r2
 8011e9e:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8011ea2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011ea6:	ea8a 0303 	eor.w	r3, sl, r3
 8011eaa:	4984      	ldr	r1, [pc, #528]	; (80120bc <uxr_write_framed_msg+0x2c8>)
 8011eac:	b2db      	uxtb	r3, r3
 8011eae:	f109 0901 	add.w	r9, r9, #1
 8011eb2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011eb6:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 8011eba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011ebc:	454b      	cmp	r3, r9
 8011ebe:	d8e2      	bhi.n	8011e86 <uxr_write_framed_msg+0x92>
 8011ec0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8011ec4:	fa5f f98a 	uxtb.w	r9, sl
 8011ec8:	9301      	str	r3, [sp, #4]
 8011eca:	f04f 0b00 	mov.w	fp, #0
 8011ece:	f88d 900c 	strb.w	r9, [sp, #12]
 8011ed2:	f88d 300d 	strb.w	r3, [sp, #13]
 8011ed6:	f1a9 0a7d 	sub.w	sl, r9, #125	; 0x7d
 8011eda:	fa5f f18a 	uxtb.w	r1, sl
 8011ede:	2901      	cmp	r1, #1
 8011ee0:	d920      	bls.n	8011f24 <uxr_write_framed_msg+0x130>
 8011ee2:	2a29      	cmp	r2, #41	; 0x29
 8011ee4:	f240 808b 	bls.w	8011ffe <uxr_write_framed_msg+0x20a>
 8011ee8:	2500      	movs	r5, #0
 8011eea:	e000      	b.n	8011eee <uxr_write_framed_msg+0xfa>
 8011eec:	b160      	cbz	r0, 8011f08 <uxr_write_framed_msg+0x114>
 8011eee:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8011ef2:	1b52      	subs	r2, r2, r5
 8011ef4:	4421      	add	r1, r4
 8011ef6:	4643      	mov	r3, r8
 8011ef8:	4638      	mov	r0, r7
 8011efa:	47b0      	blx	r6
 8011efc:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8011f00:	4405      	add	r5, r0
 8011f02:	4295      	cmp	r5, r2
 8011f04:	d3f2      	bcc.n	8011eec <uxr_write_framed_msg+0xf8>
 8011f06:	d003      	beq.n	8011f10 <uxr_write_framed_msg+0x11c>
 8011f08:	2000      	movs	r0, #0
 8011f0a:	b005      	add	sp, #20
 8011f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f10:	fa5f f18a 	uxtb.w	r1, sl
 8011f14:	f04f 0300 	mov.w	r3, #0
 8011f18:	2901      	cmp	r1, #1
 8011f1a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011f1e:	f04f 0200 	mov.w	r2, #0
 8011f22:	d86c      	bhi.n	8011ffe <uxr_write_framed_msg+0x20a>
 8011f24:	1c51      	adds	r1, r2, #1
 8011f26:	b2c9      	uxtb	r1, r1
 8011f28:	2929      	cmp	r1, #41	; 0x29
 8011f2a:	d8dd      	bhi.n	8011ee8 <uxr_write_framed_msg+0xf4>
 8011f2c:	18a0      	adds	r0, r4, r2
 8011f2e:	3202      	adds	r2, #2
 8011f30:	f089 0920 	eor.w	r9, r9, #32
 8011f34:	b2d2      	uxtb	r2, r2
 8011f36:	4659      	mov	r1, fp
 8011f38:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8011f3c:	f880 9039 	strb.w	r9, [r0, #57]	; 0x39
 8011f40:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8011f44:	f04f 0b01 	mov.w	fp, #1
 8011f48:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011f4c:	2900      	cmp	r1, #0
 8011f4e:	d162      	bne.n	8012016 <uxr_write_framed_msg+0x222>
 8011f50:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011f54:	e7bf      	b.n	8011ed6 <uxr_write_framed_msg+0xe2>
 8011f56:	2204      	movs	r2, #4
 8011f58:	2503      	movs	r5, #3
 8011f5a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011f5c:	4423      	add	r3, r4
 8011f5e:	b2c9      	uxtb	r1, r1
 8011f60:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8011f64:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8011f68:	4425      	add	r5, r4
 8011f6a:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8011f6e:	f080 0020 	eor.w	r0, r0, #32
 8011f72:	2b01      	cmp	r3, #1
 8011f74:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8011f78:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011f7c:	f63f af66 	bhi.w	8011e4c <uxr_write_framed_msg+0x58>
 8011f80:	18a3      	adds	r3, r4, r2
 8011f82:	f081 0120 	eor.w	r1, r1, #32
 8011f86:	3202      	adds	r2, #2
 8011f88:	207d      	movs	r0, #125	; 0x7d
 8011f8a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8011f8e:	f883 0038 	strb.w	r0, [r3, #56]	; 0x38
 8011f92:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011f96:	e75f      	b.n	8011e58 <uxr_write_framed_msg+0x64>
 8011f98:	2500      	movs	r5, #0
 8011f9a:	e001      	b.n	8011fa0 <uxr_write_framed_msg+0x1ac>
 8011f9c:	2800      	cmp	r0, #0
 8011f9e:	d0b3      	beq.n	8011f08 <uxr_write_framed_msg+0x114>
 8011fa0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8011fa4:	1b52      	subs	r2, r2, r5
 8011fa6:	4421      	add	r1, r4
 8011fa8:	4643      	mov	r3, r8
 8011faa:	4638      	mov	r0, r7
 8011fac:	47b0      	blx	r6
 8011fae:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8011fb2:	4405      	add	r5, r0
 8011fb4:	4295      	cmp	r5, r2
 8011fb6:	d3f1      	bcc.n	8011f9c <uxr_write_framed_msg+0x1a8>
 8011fb8:	d1a6      	bne.n	8011f08 <uxr_write_framed_msg+0x114>
 8011fba:	f04f 0300 	mov.w	r3, #0
 8011fbe:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011fc4:	454b      	cmp	r3, r9
 8011fc6:	d971      	bls.n	80120ac <uxr_write_framed_msg+0x2b8>
 8011fc8:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8011fcc:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8011fd0:	2901      	cmp	r1, #1
 8011fd2:	f04f 0200 	mov.w	r2, #0
 8011fd6:	f63f af5d 	bhi.w	8011e94 <uxr_write_framed_msg+0xa0>
 8011fda:	1c51      	adds	r1, r2, #1
 8011fdc:	b2c9      	uxtb	r1, r1
 8011fde:	2929      	cmp	r1, #41	; 0x29
 8011fe0:	d8da      	bhi.n	8011f98 <uxr_write_framed_msg+0x1a4>
 8011fe2:	18a0      	adds	r0, r4, r2
 8011fe4:	3202      	adds	r2, #2
 8011fe6:	b2d2      	uxtb	r2, r2
 8011fe8:	f083 0120 	eor.w	r1, r3, #32
 8011fec:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8011ff0:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8011ff4:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8011ff8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011ffc:	e753      	b.n	8011ea6 <uxr_write_framed_msg+0xb2>
 8011ffe:	18a0      	adds	r0, r4, r2
 8012000:	3201      	adds	r2, #1
 8012002:	b2d2      	uxtb	r2, r2
 8012004:	4659      	mov	r1, fp
 8012006:	f880 9038 	strb.w	r9, [r0, #56]	; 0x38
 801200a:	f04f 0b01 	mov.w	fp, #1
 801200e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012012:	2900      	cmp	r1, #0
 8012014:	d09c      	beq.n	8011f50 <uxr_write_framed_msg+0x15c>
 8012016:	2500      	movs	r5, #0
 8012018:	e002      	b.n	8012020 <uxr_write_framed_msg+0x22c>
 801201a:	2800      	cmp	r0, #0
 801201c:	f43f af74 	beq.w	8011f08 <uxr_write_framed_msg+0x114>
 8012020:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8012024:	1b52      	subs	r2, r2, r5
 8012026:	4421      	add	r1, r4
 8012028:	4643      	mov	r3, r8
 801202a:	4638      	mov	r0, r7
 801202c:	47b0      	blx	r6
 801202e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8012032:	4405      	add	r5, r0
 8012034:	4295      	cmp	r5, r2
 8012036:	d3f0      	bcc.n	801201a <uxr_write_framed_msg+0x226>
 8012038:	f47f af66 	bne.w	8011f08 <uxr_write_framed_msg+0x114>
 801203c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801203e:	2300      	movs	r3, #0
 8012040:	b290      	uxth	r0, r2
 8012042:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8012046:	b005      	add	sp, #20
 8012048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801204c:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8012050:	f085 0520 	eor.w	r5, r5, #32
 8012054:	2303      	movs	r3, #3
 8012056:	217d      	movs	r1, #125	; 0x7d
 8012058:	2a01      	cmp	r2, #1
 801205a:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
 801205e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8012062:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8012066:	d814      	bhi.n	8012092 <uxr_write_framed_msg+0x29e>
 8012068:	2205      	movs	r2, #5
 801206a:	2504      	movs	r5, #4
 801206c:	e775      	b.n	8011f5a <uxr_write_framed_msg+0x166>
 801206e:	f083 0320 	eor.w	r3, r3, #32
 8012072:	f881 3039 	strb.w	r3, [r1, #57]	; 0x39
 8012076:	3202      	adds	r2, #2
 8012078:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801207a:	b2d2      	uxtb	r2, r2
 801207c:	207d      	movs	r0, #125	; 0x7d
 801207e:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8012082:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8012086:	2b00      	cmp	r3, #0
 8012088:	f47f aefa 	bne.w	8011e80 <uxr_write_framed_msg+0x8c>
 801208c:	9301      	str	r3, [sp, #4]
 801208e:	4699      	mov	r9, r3
 8012090:	e71b      	b.n	8011eca <uxr_write_framed_msg+0xd6>
 8012092:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012094:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8012098:	b2d9      	uxtb	r1, r3
 801209a:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801209e:	2204      	movs	r2, #4
 80120a0:	2b01      	cmp	r3, #1
 80120a2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80120a6:	f63f aed1 	bhi.w	8011e4c <uxr_write_framed_msg+0x58>
 80120aa:	e769      	b.n	8011f80 <uxr_write_framed_msg+0x18c>
 80120ac:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80120b0:	fa5f f98a 	uxtb.w	r9, sl
 80120b4:	9301      	str	r3, [sp, #4]
 80120b6:	2200      	movs	r2, #0
 80120b8:	e707      	b.n	8011eca <uxr_write_framed_msg+0xd6>
 80120ba:	bf00      	nop
 80120bc:	0801e058 	.word	0x0801e058

080120c0 <uxr_framing_read_transport>:
 80120c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c4:	4604      	mov	r4, r0
 80120c6:	b083      	sub	sp, #12
 80120c8:	461f      	mov	r7, r3
 80120ca:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80120ce:	4689      	mov	r9, r1
 80120d0:	4692      	mov	sl, r2
 80120d2:	f000 fc87 	bl	80129e4 <uxr_millis>
 80120d6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80120da:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80120de:	42b3      	cmp	r3, r6
 80120e0:	4680      	mov	r8, r0
 80120e2:	d05f      	beq.n	80121a4 <uxr_framing_read_transport+0xe4>
 80120e4:	d81b      	bhi.n	801211e <uxr_framing_read_transport+0x5e>
 80120e6:	1e75      	subs	r5, r6, #1
 80120e8:	1aed      	subs	r5, r5, r3
 80120ea:	b2ed      	uxtb	r5, r5
 80120ec:	2600      	movs	r6, #0
 80120ee:	455d      	cmp	r5, fp
 80120f0:	d81e      	bhi.n	8012130 <uxr_framing_read_transport+0x70>
 80120f2:	19ab      	adds	r3, r5, r6
 80120f4:	455b      	cmp	r3, fp
 80120f6:	bf84      	itt	hi
 80120f8:	ebab 0605 	subhi.w	r6, fp, r5
 80120fc:	b2f6      	uxtbhi	r6, r6
 80120fe:	b9e5      	cbnz	r5, 801213a <uxr_framing_read_transport+0x7a>
 8012100:	f04f 0b00 	mov.w	fp, #0
 8012104:	f000 fc6e 	bl	80129e4 <uxr_millis>
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	eba0 0008 	sub.w	r0, r0, r8
 801210e:	1a1b      	subs	r3, r3, r0
 8012110:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012114:	4658      	mov	r0, fp
 8012116:	603b      	str	r3, [r7, #0]
 8012118:	b003      	add	sp, #12
 801211a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801211e:	2e00      	cmp	r6, #0
 8012120:	d048      	beq.n	80121b4 <uxr_framing_read_transport+0xf4>
 8012122:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8012126:	b2ed      	uxtb	r5, r5
 8012128:	3e01      	subs	r6, #1
 801212a:	455d      	cmp	r5, fp
 801212c:	b2f6      	uxtb	r6, r6
 801212e:	d9e0      	bls.n	80120f2 <uxr_framing_read_transport+0x32>
 8012130:	fa5f f58b 	uxtb.w	r5, fp
 8012134:	2600      	movs	r6, #0
 8012136:	2d00      	cmp	r5, #0
 8012138:	d0e2      	beq.n	8012100 <uxr_framing_read_transport+0x40>
 801213a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801213e:	3102      	adds	r1, #2
 8012140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012142:	9300      	str	r3, [sp, #0]
 8012144:	683b      	ldr	r3, [r7, #0]
 8012146:	4421      	add	r1, r4
 8012148:	462a      	mov	r2, r5
 801214a:	4650      	mov	r0, sl
 801214c:	47c8      	blx	r9
 801214e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012152:	4a1b      	ldr	r2, [pc, #108]	; (80121c0 <uxr_framing_read_transport+0x100>)
 8012154:	4403      	add	r3, r0
 8012156:	0859      	lsrs	r1, r3, #1
 8012158:	fba2 2101 	umull	r2, r1, r2, r1
 801215c:	0889      	lsrs	r1, r1, #2
 801215e:	222a      	movs	r2, #42	; 0x2a
 8012160:	fb02 3111 	mls	r1, r2, r1, r3
 8012164:	4683      	mov	fp, r0
 8012166:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801216a:	2800      	cmp	r0, #0
 801216c:	d0c8      	beq.n	8012100 <uxr_framing_read_transport+0x40>
 801216e:	42a8      	cmp	r0, r5
 8012170:	d1c8      	bne.n	8012104 <uxr_framing_read_transport+0x44>
 8012172:	b31e      	cbz	r6, 80121bc <uxr_framing_read_transport+0xfc>
 8012174:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012176:	9300      	str	r3, [sp, #0]
 8012178:	3102      	adds	r1, #2
 801217a:	4421      	add	r1, r4
 801217c:	4632      	mov	r2, r6
 801217e:	2300      	movs	r3, #0
 8012180:	4650      	mov	r0, sl
 8012182:	47c8      	blx	r9
 8012184:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012188:	490d      	ldr	r1, [pc, #52]	; (80121c0 <uxr_framing_read_transport+0x100>)
 801218a:	181a      	adds	r2, r3, r0
 801218c:	0853      	lsrs	r3, r2, #1
 801218e:	fba1 1303 	umull	r1, r3, r1, r3
 8012192:	089b      	lsrs	r3, r3, #2
 8012194:	212a      	movs	r1, #42	; 0x2a
 8012196:	fb01 2313 	mls	r3, r1, r3, r2
 801219a:	eb00 0b05 	add.w	fp, r0, r5
 801219e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80121a2:	e7af      	b.n	8012104 <uxr_framing_read_transport+0x44>
 80121a4:	2600      	movs	r6, #0
 80121a6:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 80121aa:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80121ac:	d9c0      	bls.n	8012130 <uxr_framing_read_transport+0x70>
 80121ae:	2102      	movs	r1, #2
 80121b0:	2529      	movs	r5, #41	; 0x29
 80121b2:	e7c5      	b.n	8012140 <uxr_framing_read_transport+0x80>
 80121b4:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 80121b8:	b2ed      	uxtb	r5, r5
 80121ba:	e798      	b.n	80120ee <uxr_framing_read_transport+0x2e>
 80121bc:	46ab      	mov	fp, r5
 80121be:	e7a1      	b.n	8012104 <uxr_framing_read_transport+0x44>
 80121c0:	30c30c31 	.word	0x30c30c31

080121c4 <uxr_read_framed_msg>:
 80121c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121c8:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 80121cc:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
 80121d0:	42ae      	cmp	r6, r5
 80121d2:	b083      	sub	sp, #12
 80121d4:	4604      	mov	r4, r0
 80121d6:	461f      	mov	r7, r3
 80121d8:	4689      	mov	r9, r1
 80121da:	4692      	mov	sl, r2
 80121dc:	f000 817d 	beq.w	80124da <uxr_read_framed_msg+0x316>
 80121e0:	7823      	ldrb	r3, [r4, #0]
 80121e2:	4ecc      	ldr	r6, [pc, #816]	; (8012514 <uxr_read_framed_msg+0x350>)
 80121e4:	f8df 8330 	ldr.w	r8, [pc, #816]	; 8012518 <uxr_read_framed_msg+0x354>
 80121e8:	2b07      	cmp	r3, #7
 80121ea:	d8fd      	bhi.n	80121e8 <uxr_read_framed_msg+0x24>
 80121ec:	e8df f013 	tbh	[pc, r3, lsl #1]
 80121f0:	00f40113 	.word	0x00f40113
 80121f4:	00b700d4 	.word	0x00b700d4
 80121f8:	004d008e 	.word	0x004d008e
 80121fc:	00080030 	.word	0x00080030
 8012200:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012204:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012208:	4298      	cmp	r0, r3
 801220a:	f000 8141 	beq.w	8012490 <uxr_read_framed_msg+0x2cc>
 801220e:	18e2      	adds	r2, r4, r3
 8012210:	7891      	ldrb	r1, [r2, #2]
 8012212:	297d      	cmp	r1, #125	; 0x7d
 8012214:	f000 81a2 	beq.w	801255c <uxr_read_framed_msg+0x398>
 8012218:	3301      	adds	r3, #1
 801221a:	085a      	lsrs	r2, r3, #1
 801221c:	fba6 0202 	umull	r0, r2, r6, r2
 8012220:	0892      	lsrs	r2, r2, #2
 8012222:	202a      	movs	r0, #42	; 0x2a
 8012224:	fb00 3312 	mls	r3, r0, r2, r3
 8012228:	297e      	cmp	r1, #126	; 0x7e
 801222a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801222e:	f000 8251 	beq.w	80126d4 <uxr_read_framed_msg+0x510>
 8012232:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8012234:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8012236:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801223a:	b29b      	uxth	r3, r3
 801223c:	2100      	movs	r1, #0
 801223e:	429a      	cmp	r2, r3
 8012240:	86a3      	strh	r3, [r4, #52]	; 0x34
 8012242:	7021      	strb	r1, [r4, #0]
 8012244:	f000 8182 	beq.w	801254c <uxr_read_framed_msg+0x388>
 8012248:	2000      	movs	r0, #0
 801224a:	b003      	add	sp, #12
 801224c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012250:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012254:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012258:	4298      	cmp	r0, r3
 801225a:	f000 8128 	beq.w	80124ae <uxr_read_framed_msg+0x2ea>
 801225e:	18e2      	adds	r2, r4, r3
 8012260:	7891      	ldrb	r1, [r2, #2]
 8012262:	297d      	cmp	r1, #125	; 0x7d
 8012264:	f000 8196 	beq.w	8012594 <uxr_read_framed_msg+0x3d0>
 8012268:	3301      	adds	r3, #1
 801226a:	085a      	lsrs	r2, r3, #1
 801226c:	fba6 0202 	umull	r0, r2, r6, r2
 8012270:	0892      	lsrs	r2, r2, #2
 8012272:	202a      	movs	r0, #42	; 0x2a
 8012274:	fb00 3312 	mls	r3, r0, r2, r3
 8012278:	297e      	cmp	r1, #126	; 0x7e
 801227a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801227e:	f000 8219 	beq.w	80126b4 <uxr_read_framed_msg+0x4f0>
 8012282:	2307      	movs	r3, #7
 8012284:	86a1      	strh	r1, [r4, #52]	; 0x34
 8012286:	7023      	strb	r3, [r4, #0]
 8012288:	e7ae      	b.n	80121e8 <uxr_read_framed_msg+0x24>
 801228a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801228c:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 801228e:	429d      	cmp	r5, r3
 8012290:	d937      	bls.n	8012302 <uxr_read_framed_msg+0x13e>
 8012292:	ee07 9a90 	vmov	s15, r9
 8012296:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801229a:	e01e      	b.n	80122da <uxr_read_framed_msg+0x116>
 801229c:	f89e e002 	ldrb.w	lr, [lr, #2]
 80122a0:	f1be 0f7d 	cmp.w	lr, #125	; 0x7d
 80122a4:	f000 80d2 	beq.w	801244c <uxr_read_framed_msg+0x288>
 80122a8:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 80122ac:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80122b0:	f000 8214 	beq.w	80126dc <uxr_read_framed_msg+0x518>
 80122b4:	f807 e003 	strb.w	lr, [r7, r3]
 80122b8:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 80122ba:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80122bc:	8e25      	ldrh	r5, [r4, #48]	; 0x30
 80122be:	ea80 010e 	eor.w	r1, r0, lr
 80122c2:	b2c9      	uxtb	r1, r1
 80122c4:	3301      	adds	r3, #1
 80122c6:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 80122ca:	b29b      	uxth	r3, r3
 80122cc:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80122d0:	42ab      	cmp	r3, r5
 80122d2:	86e2      	strh	r2, [r4, #54]	; 0x36
 80122d4:	8663      	strh	r3, [r4, #50]	; 0x32
 80122d6:	f080 8121 	bcs.w	801251c <uxr_read_framed_msg+0x358>
 80122da:	f894 102d 	ldrb.w	r1, [r4, #45]	; 0x2d
 80122de:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80122e2:	f101 0b01 	add.w	fp, r1, #1
 80122e6:	ea4f 025b 	mov.w	r2, fp, lsr #1
 80122ea:	fba6 9202 	umull	r9, r2, r6, r2
 80122ee:	0892      	lsrs	r2, r2, #2
 80122f0:	4288      	cmp	r0, r1
 80122f2:	eb04 0e01 	add.w	lr, r4, r1
 80122f6:	fb0c b212 	mls	r2, ip, r2, fp
 80122fa:	d1cf      	bne.n	801229c <uxr_read_framed_msg+0xd8>
 80122fc:	ee17 9a90 	vmov	r9, s15
 8012300:	429d      	cmp	r5, r3
 8012302:	f040 8112 	bne.w	801252a <uxr_read_framed_msg+0x366>
 8012306:	2306      	movs	r3, #6
 8012308:	7023      	strb	r3, [r4, #0]
 801230a:	e76d      	b.n	80121e8 <uxr_read_framed_msg+0x24>
 801230c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012310:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012314:	4298      	cmp	r0, r3
 8012316:	f000 80bb 	beq.w	8012490 <uxr_read_framed_msg+0x2cc>
 801231a:	18e2      	adds	r2, r4, r3
 801231c:	7891      	ldrb	r1, [r2, #2]
 801231e:	297d      	cmp	r1, #125	; 0x7d
 8012320:	f000 8153 	beq.w	80125ca <uxr_read_framed_msg+0x406>
 8012324:	3301      	adds	r3, #1
 8012326:	085a      	lsrs	r2, r3, #1
 8012328:	fba6 0202 	umull	r0, r2, r6, r2
 801232c:	0892      	lsrs	r2, r2, #2
 801232e:	202a      	movs	r0, #42	; 0x2a
 8012330:	fb00 3212 	mls	r2, r0, r2, r3
 8012334:	297e      	cmp	r1, #126	; 0x7e
 8012336:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801233a:	f000 81cb 	beq.w	80126d4 <uxr_read_framed_msg+0x510>
 801233e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012340:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012344:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012346:	b29b      	uxth	r3, r3
 8012348:	2000      	movs	r0, #0
 801234a:	428b      	cmp	r3, r1
 801234c:	8623      	strh	r3, [r4, #48]	; 0x30
 801234e:	8660      	strh	r0, [r4, #50]	; 0x32
 8012350:	86e0      	strh	r0, [r4, #54]	; 0x36
 8012352:	f240 80db 	bls.w	801250c <uxr_read_framed_msg+0x348>
 8012356:	7020      	strb	r0, [r4, #0]
 8012358:	b003      	add	sp, #12
 801235a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801235e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012362:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8012366:	4298      	cmp	r0, r3
 8012368:	f000 80a1 	beq.w	80124ae <uxr_read_framed_msg+0x2ea>
 801236c:	18e2      	adds	r2, r4, r3
 801236e:	7891      	ldrb	r1, [r2, #2]
 8012370:	297d      	cmp	r1, #125	; 0x7d
 8012372:	f000 8167 	beq.w	8012644 <uxr_read_framed_msg+0x480>
 8012376:	3301      	adds	r3, #1
 8012378:	085a      	lsrs	r2, r3, #1
 801237a:	fba6 0202 	umull	r0, r2, r6, r2
 801237e:	0892      	lsrs	r2, r2, #2
 8012380:	202a      	movs	r0, #42	; 0x2a
 8012382:	fb00 3312 	mls	r3, r0, r2, r3
 8012386:	297e      	cmp	r1, #126	; 0x7e
 8012388:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801238c:	f000 8192 	beq.w	80126b4 <uxr_read_framed_msg+0x4f0>
 8012390:	2304      	movs	r3, #4
 8012392:	8621      	strh	r1, [r4, #48]	; 0x30
 8012394:	7023      	strb	r3, [r4, #0]
 8012396:	e727      	b.n	80121e8 <uxr_read_framed_msg+0x24>
 8012398:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801239c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80123a0:	4290      	cmp	r0, r2
 80123a2:	f000 80b1 	beq.w	8012508 <uxr_read_framed_msg+0x344>
 80123a6:	18a3      	adds	r3, r4, r2
 80123a8:	7899      	ldrb	r1, [r3, #2]
 80123aa:	297d      	cmp	r1, #125	; 0x7d
 80123ac:	f000 8166 	beq.w	801267c <uxr_read_framed_msg+0x4b8>
 80123b0:	3201      	adds	r2, #1
 80123b2:	0850      	lsrs	r0, r2, #1
 80123b4:	fba6 3000 	umull	r3, r0, r6, r0
 80123b8:	0880      	lsrs	r0, r0, #2
 80123ba:	232a      	movs	r3, #42	; 0x2a
 80123bc:	fb03 2210 	mls	r2, r3, r0, r2
 80123c0:	297e      	cmp	r1, #126	; 0x7e
 80123c2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80123c6:	f000 8187 	beq.w	80126d8 <uxr_read_framed_msg+0x514>
 80123ca:	7863      	ldrb	r3, [r4, #1]
 80123cc:	428b      	cmp	r3, r1
 80123ce:	bf0c      	ite	eq
 80123d0:	2303      	moveq	r3, #3
 80123d2:	2300      	movne	r3, #0
 80123d4:	7023      	strb	r3, [r4, #0]
 80123d6:	e707      	b.n	80121e8 <uxr_read_framed_msg+0x24>
 80123d8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80123dc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80123e0:	2200      	movs	r2, #0
 80123e2:	4299      	cmp	r1, r3
 80123e4:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 80123e8:	d063      	beq.n	80124b2 <uxr_read_framed_msg+0x2ee>
 80123ea:	18e2      	adds	r2, r4, r3
 80123ec:	7892      	ldrb	r2, [r2, #2]
 80123ee:	2a7d      	cmp	r2, #125	; 0x7d
 80123f0:	f000 8107 	beq.w	8012602 <uxr_read_framed_msg+0x43e>
 80123f4:	1c59      	adds	r1, r3, #1
 80123f6:	084b      	lsrs	r3, r1, #1
 80123f8:	fba6 0303 	umull	r0, r3, r6, r3
 80123fc:	089b      	lsrs	r3, r3, #2
 80123fe:	202a      	movs	r0, #42	; 0x2a
 8012400:	fb00 1313 	mls	r3, r0, r3, r1
 8012404:	2a7e      	cmp	r2, #126	; 0x7e
 8012406:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801240a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801240e:	d050      	beq.n	80124b2 <uxr_read_framed_msg+0x2ee>
 8012410:	2302      	movs	r3, #2
 8012412:	7023      	strb	r3, [r4, #0]
 8012414:	e6e8      	b.n	80121e8 <uxr_read_framed_msg+0x24>
 8012416:	f894 e02c 	ldrb.w	lr, [r4, #44]	; 0x2c
 801241a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801241e:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8012422:	1c51      	adds	r1, r2, #1
 8012424:	084b      	lsrs	r3, r1, #1
 8012426:	fba6 5303 	umull	r5, r3, r6, r3
 801242a:	089b      	lsrs	r3, r3, #2
 801242c:	fb0c 1313 	mls	r3, ip, r3, r1
 8012430:	4596      	cmp	lr, r2
 8012432:	eb04 0002 	add.w	r0, r4, r2
 8012436:	b2da      	uxtb	r2, r3
 8012438:	f43f af06 	beq.w	8012248 <uxr_read_framed_msg+0x84>
 801243c:	7883      	ldrb	r3, [r0, #2]
 801243e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012442:	2b7e      	cmp	r3, #126	; 0x7e
 8012444:	d1ed      	bne.n	8012422 <uxr_read_framed_msg+0x25e>
 8012446:	2301      	movs	r3, #1
 8012448:	7023      	strb	r3, [r4, #0]
 801244a:	e6cd      	b.n	80121e8 <uxr_read_framed_msg+0x24>
 801244c:	f101 0b01 	add.w	fp, r1, #1
 8012450:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8012454:	fba6 e202 	umull	lr, r2, r6, r2
 8012458:	3102      	adds	r1, #2
 801245a:	0892      	lsrs	r2, r2, #2
 801245c:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8012460:	fb0c b212 	mls	r2, ip, r2, fp
 8012464:	fba6 9e0e 	umull	r9, lr, r6, lr
 8012468:	eb04 0b02 	add.w	fp, r4, r2
 801246c:	b2d2      	uxtb	r2, r2
 801246e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8012472:	4290      	cmp	r0, r2
 8012474:	fb0c 111e 	mls	r1, ip, lr, r1
 8012478:	f43f af40 	beq.w	80122fc <uxr_read_framed_msg+0x138>
 801247c:	f89b e002 	ldrb.w	lr, [fp, #2]
 8012480:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8012484:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8012488:	d036      	beq.n	80124f8 <uxr_read_framed_msg+0x334>
 801248a:	f08e 0e20 	eor.w	lr, lr, #32
 801248e:	e711      	b.n	80122b4 <uxr_read_framed_msg+0xf0>
 8012490:	2301      	movs	r3, #1
 8012492:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012494:	4649      	mov	r1, r9
 8012496:	e9cd 2300 	strd	r2, r3, [sp]
 801249a:	4620      	mov	r0, r4
 801249c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801249e:	4652      	mov	r2, sl
 80124a0:	f7ff fe0e 	bl	80120c0 <uxr_framing_read_transport>
 80124a4:	2800      	cmp	r0, #0
 80124a6:	f43f aecf 	beq.w	8012248 <uxr_read_framed_msg+0x84>
 80124aa:	7823      	ldrb	r3, [r4, #0]
 80124ac:	e69c      	b.n	80121e8 <uxr_read_framed_msg+0x24>
 80124ae:	2302      	movs	r3, #2
 80124b0:	e7ef      	b.n	8012492 <uxr_read_framed_msg+0x2ce>
 80124b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80124b4:	2304      	movs	r3, #4
 80124b6:	e9cd 2300 	strd	r2, r3, [sp]
 80124ba:	4649      	mov	r1, r9
 80124bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124be:	4652      	mov	r2, sl
 80124c0:	4620      	mov	r0, r4
 80124c2:	f7ff fdfd 	bl	80120c0 <uxr_framing_read_transport>
 80124c6:	2800      	cmp	r0, #0
 80124c8:	d1ef      	bne.n	80124aa <uxr_read_framed_msg+0x2e6>
 80124ca:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
 80124ce:	387e      	subs	r0, #126	; 0x7e
 80124d0:	bf18      	it	ne
 80124d2:	2001      	movne	r0, #1
 80124d4:	2800      	cmp	r0, #0
 80124d6:	d0e8      	beq.n	80124aa <uxr_read_framed_msg+0x2e6>
 80124d8:	e6b6      	b.n	8012248 <uxr_read_framed_msg+0x84>
 80124da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80124dc:	2305      	movs	r3, #5
 80124de:	e9cd 5300 	strd	r5, r3, [sp]
 80124e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124e4:	f7ff fdec 	bl	80120c0 <uxr_framing_read_transport>
 80124e8:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80124ec:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80124f0:	429a      	cmp	r2, r3
 80124f2:	f43f aea9 	beq.w	8012248 <uxr_read_framed_msg+0x84>
 80124f6:	e673      	b.n	80121e0 <uxr_read_framed_msg+0x1c>
 80124f8:	429d      	cmp	r5, r3
 80124fa:	ee17 9a90 	vmov	r9, s15
 80124fe:	f43f af02 	beq.w	8012306 <uxr_read_framed_msg+0x142>
 8012502:	2301      	movs	r3, #1
 8012504:	7023      	strb	r3, [r4, #0]
 8012506:	e66f      	b.n	80121e8 <uxr_read_framed_msg+0x24>
 8012508:	2303      	movs	r3, #3
 801250a:	e7c2      	b.n	8012492 <uxr_read_framed_msg+0x2ce>
 801250c:	2305      	movs	r3, #5
 801250e:	7023      	strb	r3, [r4, #0]
 8012510:	e66a      	b.n	80121e8 <uxr_read_framed_msg+0x24>
 8012512:	bf00      	nop
 8012514:	30c30c31 	.word	0x30c30c31
 8012518:	0801e058 	.word	0x0801e058
 801251c:	ee17 9a90 	vmov	r9, s15
 8012520:	f43f aef1 	beq.w	8012306 <uxr_read_framed_msg+0x142>
 8012524:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8012528:	d08d      	beq.n	8012446 <uxr_read_framed_msg+0x282>
 801252a:	1aeb      	subs	r3, r5, r3
 801252c:	3302      	adds	r3, #2
 801252e:	9301      	str	r3, [sp, #4]
 8012530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012532:	9300      	str	r3, [sp, #0]
 8012534:	4652      	mov	r2, sl
 8012536:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012538:	4649      	mov	r1, r9
 801253a:	4620      	mov	r0, r4
 801253c:	f7ff fdc0 	bl	80120c0 <uxr_framing_read_transport>
 8012540:	fab0 f080 	clz	r0, r0
 8012544:	0940      	lsrs	r0, r0, #5
 8012546:	2800      	cmp	r0, #0
 8012548:	d0af      	beq.n	80124aa <uxr_read_framed_msg+0x2e6>
 801254a:	e67d      	b.n	8012248 <uxr_read_framed_msg+0x84>
 801254c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801254e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8012552:	7013      	strb	r3, [r2, #0]
 8012554:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8012556:	b003      	add	sp, #12
 8012558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801255c:	1c59      	adds	r1, r3, #1
 801255e:	084a      	lsrs	r2, r1, #1
 8012560:	fba6 5202 	umull	r5, r2, r6, r2
 8012564:	0892      	lsrs	r2, r2, #2
 8012566:	252a      	movs	r5, #42	; 0x2a
 8012568:	fb05 1212 	mls	r2, r5, r2, r1
 801256c:	b2d1      	uxtb	r1, r2
 801256e:	4288      	cmp	r0, r1
 8012570:	d08e      	beq.n	8012490 <uxr_read_framed_msg+0x2cc>
 8012572:	3302      	adds	r3, #2
 8012574:	4422      	add	r2, r4
 8012576:	0858      	lsrs	r0, r3, #1
 8012578:	fba6 1000 	umull	r1, r0, r6, r0
 801257c:	7891      	ldrb	r1, [r2, #2]
 801257e:	0882      	lsrs	r2, r0, #2
 8012580:	fb05 3312 	mls	r3, r5, r2, r3
 8012584:	297e      	cmp	r1, #126	; 0x7e
 8012586:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801258a:	f000 80a3 	beq.w	80126d4 <uxr_read_framed_msg+0x510>
 801258e:	f081 0120 	eor.w	r1, r1, #32
 8012592:	e64e      	b.n	8012232 <uxr_read_framed_msg+0x6e>
 8012594:	1c59      	adds	r1, r3, #1
 8012596:	084a      	lsrs	r2, r1, #1
 8012598:	fba6 5202 	umull	r5, r2, r6, r2
 801259c:	0892      	lsrs	r2, r2, #2
 801259e:	252a      	movs	r5, #42	; 0x2a
 80125a0:	fb05 1212 	mls	r2, r5, r2, r1
 80125a4:	b2d1      	uxtb	r1, r2
 80125a6:	4288      	cmp	r0, r1
 80125a8:	d081      	beq.n	80124ae <uxr_read_framed_msg+0x2ea>
 80125aa:	3302      	adds	r3, #2
 80125ac:	4422      	add	r2, r4
 80125ae:	0858      	lsrs	r0, r3, #1
 80125b0:	fba6 1000 	umull	r1, r0, r6, r0
 80125b4:	7891      	ldrb	r1, [r2, #2]
 80125b6:	0882      	lsrs	r2, r0, #2
 80125b8:	fb05 3312 	mls	r3, r5, r2, r3
 80125bc:	297e      	cmp	r1, #126	; 0x7e
 80125be:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80125c2:	d077      	beq.n	80126b4 <uxr_read_framed_msg+0x4f0>
 80125c4:	f081 0120 	eor.w	r1, r1, #32
 80125c8:	e65b      	b.n	8012282 <uxr_read_framed_msg+0xbe>
 80125ca:	1c59      	adds	r1, r3, #1
 80125cc:	084a      	lsrs	r2, r1, #1
 80125ce:	fba6 5202 	umull	r5, r2, r6, r2
 80125d2:	0892      	lsrs	r2, r2, #2
 80125d4:	252a      	movs	r5, #42	; 0x2a
 80125d6:	fb05 1212 	mls	r2, r5, r2, r1
 80125da:	b2d1      	uxtb	r1, r2
 80125dc:	4288      	cmp	r0, r1
 80125de:	f43f af57 	beq.w	8012490 <uxr_read_framed_msg+0x2cc>
 80125e2:	3302      	adds	r3, #2
 80125e4:	4422      	add	r2, r4
 80125e6:	0858      	lsrs	r0, r3, #1
 80125e8:	fba6 1000 	umull	r1, r0, r6, r0
 80125ec:	7891      	ldrb	r1, [r2, #2]
 80125ee:	0882      	lsrs	r2, r0, #2
 80125f0:	fb05 3312 	mls	r3, r5, r2, r3
 80125f4:	297e      	cmp	r1, #126	; 0x7e
 80125f6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80125fa:	d06b      	beq.n	80126d4 <uxr_read_framed_msg+0x510>
 80125fc:	f081 0120 	eor.w	r1, r1, #32
 8012600:	e69d      	b.n	801233e <uxr_read_framed_msg+0x17a>
 8012602:	1c5d      	adds	r5, r3, #1
 8012604:	086a      	lsrs	r2, r5, #1
 8012606:	fba6 0202 	umull	r0, r2, r6, r2
 801260a:	0892      	lsrs	r2, r2, #2
 801260c:	202a      	movs	r0, #42	; 0x2a
 801260e:	fb00 5212 	mls	r2, r0, r2, r5
 8012612:	b2d5      	uxtb	r5, r2
 8012614:	42a9      	cmp	r1, r5
 8012616:	f43f af4c 	beq.w	80124b2 <uxr_read_framed_msg+0x2ee>
 801261a:	3302      	adds	r3, #2
 801261c:	4422      	add	r2, r4
 801261e:	0859      	lsrs	r1, r3, #1
 8012620:	fba6 5101 	umull	r5, r1, r6, r1
 8012624:	7895      	ldrb	r5, [r2, #2]
 8012626:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 801262a:	088a      	lsrs	r2, r1, #2
 801262c:	fb00 3312 	mls	r3, r0, r2, r3
 8012630:	2d7e      	cmp	r5, #126	; 0x7e
 8012632:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012636:	f43f af3c 	beq.w	80124b2 <uxr_read_framed_msg+0x2ee>
 801263a:	f085 0520 	eor.w	r5, r5, #32
 801263e:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
 8012642:	e6e5      	b.n	8012410 <uxr_read_framed_msg+0x24c>
 8012644:	1c59      	adds	r1, r3, #1
 8012646:	084a      	lsrs	r2, r1, #1
 8012648:	fba6 5202 	umull	r5, r2, r6, r2
 801264c:	0892      	lsrs	r2, r2, #2
 801264e:	252a      	movs	r5, #42	; 0x2a
 8012650:	fb05 1212 	mls	r2, r5, r2, r1
 8012654:	b2d1      	uxtb	r1, r2
 8012656:	4288      	cmp	r0, r1
 8012658:	f43f af29 	beq.w	80124ae <uxr_read_framed_msg+0x2ea>
 801265c:	3302      	adds	r3, #2
 801265e:	4422      	add	r2, r4
 8012660:	0858      	lsrs	r0, r3, #1
 8012662:	fba6 1000 	umull	r1, r0, r6, r0
 8012666:	7891      	ldrb	r1, [r2, #2]
 8012668:	0882      	lsrs	r2, r0, #2
 801266a:	fb05 3312 	mls	r3, r5, r2, r3
 801266e:	297e      	cmp	r1, #126	; 0x7e
 8012670:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012674:	d01e      	beq.n	80126b4 <uxr_read_framed_msg+0x4f0>
 8012676:	f081 0120 	eor.w	r1, r1, #32
 801267a:	e689      	b.n	8012390 <uxr_read_framed_msg+0x1cc>
 801267c:	1c51      	adds	r1, r2, #1
 801267e:	084b      	lsrs	r3, r1, #1
 8012680:	fba6 5303 	umull	r5, r3, r6, r3
 8012684:	089b      	lsrs	r3, r3, #2
 8012686:	252a      	movs	r5, #42	; 0x2a
 8012688:	fb05 1313 	mls	r3, r5, r3, r1
 801268c:	b2d9      	uxtb	r1, r3
 801268e:	4288      	cmp	r0, r1
 8012690:	f43f af3a 	beq.w	8012508 <uxr_read_framed_msg+0x344>
 8012694:	3202      	adds	r2, #2
 8012696:	4423      	add	r3, r4
 8012698:	0850      	lsrs	r0, r2, #1
 801269a:	789b      	ldrb	r3, [r3, #2]
 801269c:	fba6 1000 	umull	r1, r0, r6, r0
 80126a0:	0880      	lsrs	r0, r0, #2
 80126a2:	fb05 2210 	mls	r2, r5, r0, r2
 80126a6:	2b7e      	cmp	r3, #126	; 0x7e
 80126a8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80126ac:	d014      	beq.n	80126d8 <uxr_read_framed_msg+0x514>
 80126ae:	f083 0120 	eor.w	r1, r3, #32
 80126b2:	e68a      	b.n	80123ca <uxr_read_framed_msg+0x206>
 80126b4:	2302      	movs	r3, #2
 80126b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80126b8:	4649      	mov	r1, r9
 80126ba:	e9cd 2300 	strd	r2, r3, [sp]
 80126be:	4620      	mov	r0, r4
 80126c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80126c2:	4652      	mov	r2, sl
 80126c4:	f7ff fcfc 	bl	80120c0 <uxr_framing_read_transport>
 80126c8:	2800      	cmp	r0, #0
 80126ca:	f47f aeee 	bne.w	80124aa <uxr_read_framed_msg+0x2e6>
 80126ce:	2301      	movs	r3, #1
 80126d0:	7023      	strb	r3, [r4, #0]
 80126d2:	e589      	b.n	80121e8 <uxr_read_framed_msg+0x24>
 80126d4:	2301      	movs	r3, #1
 80126d6:	e7ee      	b.n	80126b6 <uxr_read_framed_msg+0x4f2>
 80126d8:	2303      	movs	r3, #3
 80126da:	e7ec      	b.n	80126b6 <uxr_read_framed_msg+0x4f2>
 80126dc:	ee17 9a90 	vmov	r9, s15
 80126e0:	e6b1      	b.n	8012446 <uxr_read_framed_msg+0x282>
 80126e2:	bf00      	nop

080126e4 <uxr_stream_id>:
 80126e4:	b410      	push	{r4}
 80126e6:	2901      	cmp	r1, #1
 80126e8:	b083      	sub	sp, #12
 80126ea:	d01f      	beq.n	801272c <uxr_stream_id+0x48>
 80126ec:	2902      	cmp	r1, #2
 80126ee:	f04f 0400 	mov.w	r4, #0
 80126f2:	d01e      	beq.n	8012732 <uxr_stream_id+0x4e>
 80126f4:	2300      	movs	r3, #0
 80126f6:	f364 0307 	bfi	r3, r4, #0, #8
 80126fa:	f360 230f 	bfi	r3, r0, #8, #8
 80126fe:	f361 4317 	bfi	r3, r1, #16, #8
 8012702:	f362 631f 	bfi	r3, r2, #24, #8
 8012706:	b2da      	uxtb	r2, r3
 8012708:	2000      	movs	r0, #0
 801270a:	f362 0007 	bfi	r0, r2, #0, #8
 801270e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012712:	f362 200f 	bfi	r0, r2, #8, #8
 8012716:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801271a:	f362 4017 	bfi	r0, r2, #16, #8
 801271e:	0e1b      	lsrs	r3, r3, #24
 8012720:	f363 601f 	bfi	r0, r3, #24, #8
 8012724:	b003      	add	sp, #12
 8012726:	f85d 4b04 	ldr.w	r4, [sp], #4
 801272a:	4770      	bx	lr
 801272c:	1c44      	adds	r4, r0, #1
 801272e:	b2e4      	uxtb	r4, r4
 8012730:	e7e0      	b.n	80126f4 <uxr_stream_id+0x10>
 8012732:	f080 0480 	eor.w	r4, r0, #128	; 0x80
 8012736:	e7dd      	b.n	80126f4 <uxr_stream_id+0x10>

08012738 <uxr_stream_id_from_raw>:
 8012738:	b410      	push	{r4}
 801273a:	b083      	sub	sp, #12
 801273c:	b128      	cbz	r0, 801274a <uxr_stream_id_from_raw+0x12>
 801273e:	0603      	lsls	r3, r0, #24
 8012740:	d421      	bmi.n	8012786 <uxr_stream_id_from_raw+0x4e>
 8012742:	1e42      	subs	r2, r0, #1
 8012744:	b2d2      	uxtb	r2, r2
 8012746:	2401      	movs	r4, #1
 8012748:	e001      	b.n	801274e <uxr_stream_id_from_raw+0x16>
 801274a:	4604      	mov	r4, r0
 801274c:	4602      	mov	r2, r0
 801274e:	2300      	movs	r3, #0
 8012750:	f360 0307 	bfi	r3, r0, #0, #8
 8012754:	f362 230f 	bfi	r3, r2, #8, #8
 8012758:	f364 4317 	bfi	r3, r4, #16, #8
 801275c:	f361 631f 	bfi	r3, r1, #24, #8
 8012760:	b2da      	uxtb	r2, r3
 8012762:	2000      	movs	r0, #0
 8012764:	f362 0007 	bfi	r0, r2, #0, #8
 8012768:	f3c3 2207 	ubfx	r2, r3, #8, #8
 801276c:	f362 200f 	bfi	r0, r2, #8, #8
 8012770:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012774:	f362 4017 	bfi	r0, r2, #16, #8
 8012778:	0e1b      	lsrs	r3, r3, #24
 801277a:	f363 601f 	bfi	r0, r3, #24, #8
 801277e:	b003      	add	sp, #12
 8012780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012784:	4770      	bx	lr
 8012786:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 801278a:	2402      	movs	r4, #2
 801278c:	e7df      	b.n	801274e <uxr_stream_id_from_raw+0x16>
 801278e:	bf00      	nop

08012790 <uxr_init_stream_storage>:
 8012790:	2300      	movs	r3, #0
 8012792:	7403      	strb	r3, [r0, #16]
 8012794:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8012798:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 801279c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80127a0:	4770      	bx	lr
 80127a2:	bf00      	nop

080127a4 <uxr_reset_stream_storage>:
 80127a4:	b570      	push	{r4, r5, r6, lr}
 80127a6:	7c03      	ldrb	r3, [r0, #16]
 80127a8:	4604      	mov	r4, r0
 80127aa:	b153      	cbz	r3, 80127c2 <uxr_reset_stream_storage+0x1e>
 80127ac:	4606      	mov	r6, r0
 80127ae:	2500      	movs	r5, #0
 80127b0:	4630      	mov	r0, r6
 80127b2:	f005 fe9d 	bl	80184f0 <uxr_reset_output_best_effort_stream>
 80127b6:	7c23      	ldrb	r3, [r4, #16]
 80127b8:	3501      	adds	r5, #1
 80127ba:	42ab      	cmp	r3, r5
 80127bc:	f106 0610 	add.w	r6, r6, #16
 80127c0:	d8f6      	bhi.n	80127b0 <uxr_reset_stream_storage+0xc>
 80127c2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80127c6:	b163      	cbz	r3, 80127e2 <uxr_reset_stream_storage+0x3e>
 80127c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80127cc:	2500      	movs	r5, #0
 80127ce:	4630      	mov	r0, r6
 80127d0:	f005 fc9a 	bl	8018108 <uxr_reset_input_best_effort_stream>
 80127d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80127d8:	3501      	adds	r5, #1
 80127da:	42ab      	cmp	r3, r5
 80127dc:	f106 0602 	add.w	r6, r6, #2
 80127e0:	d8f5      	bhi.n	80127ce <uxr_reset_stream_storage+0x2a>
 80127e2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80127e6:	b163      	cbz	r3, 8012802 <uxr_reset_stream_storage+0x5e>
 80127e8:	f104 0618 	add.w	r6, r4, #24
 80127ec:	2500      	movs	r5, #0
 80127ee:	4630      	mov	r0, r6
 80127f0:	f005 ff1e 	bl	8018630 <uxr_reset_output_reliable_stream>
 80127f4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80127f8:	3501      	adds	r5, #1
 80127fa:	42ab      	cmp	r3, r5
 80127fc:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8012800:	d8f5      	bhi.n	80127ee <uxr_reset_stream_storage+0x4a>
 8012802:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8012806:	b163      	cbz	r3, 8012822 <uxr_reset_stream_storage+0x7e>
 8012808:	f104 0648 	add.w	r6, r4, #72	; 0x48
 801280c:	2500      	movs	r5, #0
 801280e:	4630      	mov	r0, r6
 8012810:	f005 fce2 	bl	80181d8 <uxr_reset_input_reliable_stream>
 8012814:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8012818:	3501      	adds	r5, #1
 801281a:	42ab      	cmp	r3, r5
 801281c:	f106 0618 	add.w	r6, r6, #24
 8012820:	d8f5      	bhi.n	801280e <uxr_reset_stream_storage+0x6a>
 8012822:	bd70      	pop	{r4, r5, r6, pc}

08012824 <uxr_add_output_best_effort_buffer>:
 8012824:	b530      	push	{r4, r5, lr}
 8012826:	7c04      	ldrb	r4, [r0, #16]
 8012828:	1c65      	adds	r5, r4, #1
 801282a:	b083      	sub	sp, #12
 801282c:	7405      	strb	r5, [r0, #16]
 801282e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8012832:	f005 fe51 	bl	80184d8 <uxr_init_output_best_effort_stream>
 8012836:	2201      	movs	r2, #1
 8012838:	4620      	mov	r0, r4
 801283a:	4611      	mov	r1, r2
 801283c:	b003      	add	sp, #12
 801283e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012842:	f7ff bf4f 	b.w	80126e4 <uxr_stream_id>
 8012846:	bf00      	nop

08012848 <uxr_add_output_reliable_buffer>:
 8012848:	b570      	push	{r4, r5, r6, lr}
 801284a:	b084      	sub	sp, #16
 801284c:	f890 4040 	ldrb.w	r4, [r0, #64]	; 0x40
 8012850:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8012854:	9600      	str	r6, [sp, #0]
 8012856:	2528      	movs	r5, #40	; 0x28
 8012858:	1c66      	adds	r6, r4, #1
 801285a:	fb05 0504 	mla	r5, r5, r4, r0
 801285e:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
 8012862:	f105 0018 	add.w	r0, r5, #24
 8012866:	f005 feb1 	bl	80185cc <uxr_init_output_reliable_stream>
 801286a:	4620      	mov	r0, r4
 801286c:	2201      	movs	r2, #1
 801286e:	2102      	movs	r1, #2
 8012870:	b004      	add	sp, #16
 8012872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012876:	f7ff bf35 	b.w	80126e4 <uxr_stream_id>
 801287a:	bf00      	nop

0801287c <uxr_add_input_best_effort_buffer>:
 801287c:	b510      	push	{r4, lr}
 801287e:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8012882:	1c62      	adds	r2, r4, #1
 8012884:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8012888:	b082      	sub	sp, #8
 801288a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801288e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012892:	f005 fc35 	bl	8018100 <uxr_init_input_best_effort_stream>
 8012896:	4620      	mov	r0, r4
 8012898:	2200      	movs	r2, #0
 801289a:	2101      	movs	r1, #1
 801289c:	b002      	add	sp, #8
 801289e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128a2:	f7ff bf1f 	b.w	80126e4 <uxr_stream_id>
 80128a6:	bf00      	nop

080128a8 <uxr_add_input_reliable_buffer>:
 80128a8:	b570      	push	{r4, r5, r6, lr}
 80128aa:	b084      	sub	sp, #16
 80128ac:	f890 4060 	ldrb.w	r4, [r0, #96]	; 0x60
 80128b0:	9e08      	ldr	r6, [sp, #32]
 80128b2:	9600      	str	r6, [sp, #0]
 80128b4:	2518      	movs	r5, #24
 80128b6:	1c66      	adds	r6, r4, #1
 80128b8:	fb05 0504 	mla	r5, r5, r4, r0
 80128bc:	f880 6060 	strb.w	r6, [r0, #96]	; 0x60
 80128c0:	f105 0048 	add.w	r0, r5, #72	; 0x48
 80128c4:	f005 fc64 	bl	8018190 <uxr_init_input_reliable_stream>
 80128c8:	4620      	mov	r0, r4
 80128ca:	2200      	movs	r2, #0
 80128cc:	2102      	movs	r1, #2
 80128ce:	b004      	add	sp, #16
 80128d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128d4:	f7ff bf06 	b.w	80126e4 <uxr_stream_id>

080128d8 <uxr_get_output_best_effort_stream>:
 80128d8:	7c03      	ldrb	r3, [r0, #16]
 80128da:	428b      	cmp	r3, r1
 80128dc:	bf8c      	ite	hi
 80128de:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80128e2:	2000      	movls	r0, #0
 80128e4:	4770      	bx	lr
 80128e6:	bf00      	nop

080128e8 <uxr_get_output_reliable_stream>:
 80128e8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80128ec:	428b      	cmp	r3, r1
 80128ee:	bf83      	ittte	hi
 80128f0:	2328      	movhi	r3, #40	; 0x28
 80128f2:	fb03 0101 	mlahi	r1, r3, r1, r0
 80128f6:	f101 0018 	addhi.w	r0, r1, #24
 80128fa:	2000      	movls	r0, #0
 80128fc:	4770      	bx	lr
 80128fe:	bf00      	nop

08012900 <uxr_get_input_best_effort_stream>:
 8012900:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8012904:	428b      	cmp	r3, r1
 8012906:	bf86      	itte	hi
 8012908:	3121      	addhi	r1, #33	; 0x21
 801290a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 801290e:	2000      	movls	r0, #0
 8012910:	4770      	bx	lr
 8012912:	bf00      	nop

08012914 <uxr_get_input_reliable_stream>:
 8012914:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8012918:	428b      	cmp	r3, r1
 801291a:	bf83      	ittte	hi
 801291c:	2318      	movhi	r3, #24
 801291e:	fb03 0101 	mlahi	r1, r3, r1, r0
 8012922:	f101 0048 	addhi.w	r0, r1, #72	; 0x48
 8012926:	2000      	movls	r0, #0
 8012928:	4770      	bx	lr
 801292a:	bf00      	nop

0801292c <uxr_output_streams_confirmed>:
 801292c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8012930:	b183      	cbz	r3, 8012954 <uxr_output_streams_confirmed+0x28>
 8012932:	b570      	push	{r4, r5, r6, lr}
 8012934:	4606      	mov	r6, r0
 8012936:	f100 0518 	add.w	r5, r0, #24
 801293a:	2400      	movs	r4, #0
 801293c:	e001      	b.n	8012942 <uxr_output_streams_confirmed+0x16>
 801293e:	3528      	adds	r5, #40	; 0x28
 8012940:	b138      	cbz	r0, 8012952 <uxr_output_streams_confirmed+0x26>
 8012942:	4628      	mov	r0, r5
 8012944:	f006 f8d8 	bl	8018af8 <uxr_is_output_up_to_date>
 8012948:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 801294c:	3401      	adds	r4, #1
 801294e:	42a3      	cmp	r3, r4
 8012950:	d8f5      	bhi.n	801293e <uxr_output_streams_confirmed+0x12>
 8012952:	bd70      	pop	{r4, r5, r6, pc}
 8012954:	2001      	movs	r0, #1
 8012956:	4770      	bx	lr

08012958 <uxr_buffer_submessage_header>:
 8012958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801295a:	4604      	mov	r4, r0
 801295c:	460e      	mov	r6, r1
 801295e:	2104      	movs	r1, #4
 8012960:	4615      	mov	r5, r2
 8012962:	461f      	mov	r7, r3
 8012964:	f7fd fcd6 	bl	8010314 <ucdr_align_to>
 8012968:	2301      	movs	r3, #1
 801296a:	ea47 0203 	orr.w	r2, r7, r3
 801296e:	4631      	mov	r1, r6
 8012970:	7523      	strb	r3, [r4, #20]
 8012972:	4620      	mov	r0, r4
 8012974:	462b      	mov	r3, r5
 8012976:	f000 fa2b 	bl	8012dd0 <uxr_serialize_submessage_header>
 801297a:	4620      	mov	r0, r4
 801297c:	f7fd fce0 	bl	8010340 <ucdr_buffer_remaining>
 8012980:	42a8      	cmp	r0, r5
 8012982:	bf34      	ite	cc
 8012984:	2000      	movcc	r0, #0
 8012986:	2001      	movcs	r0, #1
 8012988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801298a:	bf00      	nop

0801298c <uxr_read_submessage_header>:
 801298c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012990:	4604      	mov	r4, r0
 8012992:	460d      	mov	r5, r1
 8012994:	2104      	movs	r1, #4
 8012996:	4616      	mov	r6, r2
 8012998:	4698      	mov	r8, r3
 801299a:	f7fd fcbb 	bl	8010314 <ucdr_align_to>
 801299e:	4620      	mov	r0, r4
 80129a0:	f7fd fcce 	bl	8010340 <ucdr_buffer_remaining>
 80129a4:	2803      	cmp	r0, #3
 80129a6:	bf8c      	ite	hi
 80129a8:	2701      	movhi	r7, #1
 80129aa:	2700      	movls	r7, #0
 80129ac:	d802      	bhi.n	80129b4 <uxr_read_submessage_header+0x28>
 80129ae:	4638      	mov	r0, r7
 80129b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129b4:	4633      	mov	r3, r6
 80129b6:	4642      	mov	r2, r8
 80129b8:	4620      	mov	r0, r4
 80129ba:	4629      	mov	r1, r5
 80129bc:	f000 fa1c 	bl	8012df8 <uxr_deserialize_submessage_header>
 80129c0:	f898 3000 	ldrb.w	r3, [r8]
 80129c4:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80129c8:	f003 0301 	and.w	r3, r3, #1
 80129cc:	f888 2000 	strb.w	r2, [r8]
 80129d0:	7523      	strb	r3, [r4, #20]
 80129d2:	4638      	mov	r0, r7
 80129d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080129d8 <uxr_submessage_padding>:
 80129d8:	f010 0003 	ands.w	r0, r0, #3
 80129dc:	bf18      	it	ne
 80129de:	f1c0 0004 	rsbne	r0, r0, #4
 80129e2:	4770      	bx	lr

080129e4 <uxr_millis>:
 80129e4:	b510      	push	{r4, lr}
 80129e6:	b084      	sub	sp, #16
 80129e8:	4669      	mov	r1, sp
 80129ea:	2001      	movs	r0, #1
 80129ec:	f7f0 fadc 	bl	8002fa8 <clock_gettime>
 80129f0:	e9dd 2400 	ldrd	r2, r4, [sp]
 80129f4:	4907      	ldr	r1, [pc, #28]	; (8012a14 <uxr_millis+0x30>)
 80129f6:	9802      	ldr	r0, [sp, #8]
 80129f8:	fba2 2301 	umull	r2, r3, r2, r1
 80129fc:	fb01 3304 	mla	r3, r1, r4, r3
 8012a00:	4604      	mov	r4, r0
 8012a02:	1810      	adds	r0, r2, r0
 8012a04:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8012a08:	4a03      	ldr	r2, [pc, #12]	; (8012a18 <uxr_millis+0x34>)
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	f7ee f954 	bl	8000cb8 <__aeabi_ldivmod>
 8012a10:	b004      	add	sp, #16
 8012a12:	bd10      	pop	{r4, pc}
 8012a14:	3b9aca00 	.word	0x3b9aca00
 8012a18:	000f4240 	.word	0x000f4240

08012a1c <uxr_nanos>:
 8012a1c:	b510      	push	{r4, lr}
 8012a1e:	b084      	sub	sp, #16
 8012a20:	4669      	mov	r1, sp
 8012a22:	2001      	movs	r0, #1
 8012a24:	f7f0 fac0 	bl	8002fa8 <clock_gettime>
 8012a28:	e9dd 2400 	ldrd	r2, r4, [sp]
 8012a2c:	4905      	ldr	r1, [pc, #20]	; (8012a44 <uxr_nanos+0x28>)
 8012a2e:	9802      	ldr	r0, [sp, #8]
 8012a30:	fba2 2301 	umull	r2, r3, r2, r1
 8012a34:	fb01 3304 	mla	r3, r1, r4, r3
 8012a38:	4604      	mov	r4, r0
 8012a3a:	1810      	adds	r0, r2, r0
 8012a3c:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8012a40:	b004      	add	sp, #16
 8012a42:	bd10      	pop	{r4, pc}
 8012a44:	3b9aca00 	.word	0x3b9aca00

08012a48 <on_full_output_buffer_fragmented>:
 8012a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a4c:	460c      	mov	r4, r1
 8012a4e:	b08a      	sub	sp, #40	; 0x28
 8012a50:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8012a54:	4606      	mov	r6, r0
 8012a56:	f104 0008 	add.w	r0, r4, #8
 8012a5a:	f7ff ff45 	bl	80128e8 <uxr_get_output_reliable_stream>
 8012a5e:	4605      	mov	r5, r0
 8012a60:	f006 f854 	bl	8018b0c <get_available_free_slots>
 8012a64:	b968      	cbnz	r0, 8012a82 <on_full_output_buffer_fragmented+0x3a>
 8012a66:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8012a6a:	4620      	mov	r0, r4
 8012a6c:	4798      	blx	r3
 8012a6e:	b918      	cbnz	r0, 8012a78 <on_full_output_buffer_fragmented+0x30>
 8012a70:	2001      	movs	r0, #1
 8012a72:	b00a      	add	sp, #40	; 0x28
 8012a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a78:	4628      	mov	r0, r5
 8012a7a:	f006 f847 	bl	8018b0c <get_available_free_slots>
 8012a7e:	2800      	cmp	r0, #0
 8012a80:	d0f6      	beq.n	8012a70 <on_full_output_buffer_fragmented+0x28>
 8012a82:	8928      	ldrh	r0, [r5, #8]
 8012a84:	89eb      	ldrh	r3, [r5, #14]
 8012a86:	7b2a      	ldrb	r2, [r5, #12]
 8012a88:	fbb3 f1f0 	udiv	r1, r3, r0
 8012a8c:	f5c2 427f 	rsb	r2, r2, #65280	; 0xff00
 8012a90:	fb00 3111 	mls	r1, r0, r1, r3
 8012a94:	b28b      	uxth	r3, r1
 8012a96:	32fc      	adds	r2, #252	; 0xfc
 8012a98:	6869      	ldr	r1, [r5, #4]
 8012a9a:	fbb1 f1f0 	udiv	r1, r1, r0
 8012a9e:	1f0f      	subs	r7, r1, #4
 8012aa0:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8012aa4:	fb01 f103 	mul.w	r1, r1, r3
 8012aa8:	443a      	add	r2, r7
 8012aaa:	682b      	ldr	r3, [r5, #0]
 8012aac:	fa1f f882 	uxth.w	r8, r2
 8012ab0:	3104      	adds	r1, #4
 8012ab2:	4419      	add	r1, r3
 8012ab4:	eba0 0008 	sub.w	r0, r0, r8
 8012ab8:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 8012abc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ac0:	9300      	str	r3, [sp, #0]
 8012ac2:	463a      	mov	r2, r7
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	a802      	add	r0, sp, #8
 8012ac8:	f7fd fbf8 	bl	80102bc <ucdr_init_buffer_origin_offset>
 8012acc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8012ad0:	f102 0308 	add.w	r3, r2, #8
 8012ad4:	42bb      	cmp	r3, r7
 8012ad6:	d927      	bls.n	8012b28 <on_full_output_buffer_fragmented+0xe0>
 8012ad8:	4642      	mov	r2, r8
 8012ada:	2300      	movs	r3, #0
 8012adc:	210d      	movs	r1, #13
 8012ade:	a802      	add	r0, sp, #8
 8012ae0:	f7ff ff3a 	bl	8012958 <uxr_buffer_submessage_header>
 8012ae4:	8928      	ldrh	r0, [r5, #8]
 8012ae6:	89eb      	ldrh	r3, [r5, #14]
 8012ae8:	fbb3 f1f0 	udiv	r1, r3, r0
 8012aec:	fb00 3111 	mls	r1, r0, r1, r3
 8012af0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012af4:	b289      	uxth	r1, r1
 8012af6:	fbb3 f3f0 	udiv	r3, r3, r0
 8012afa:	fb03 f301 	mul.w	r3, r3, r1
 8012afe:	50d7      	str	r7, [r2, r3]
 8012b00:	89e8      	ldrh	r0, [r5, #14]
 8012b02:	2101      	movs	r1, #1
 8012b04:	f006 f822 	bl	8018b4c <uxr_seq_num_add>
 8012b08:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8012b0c:	81e8      	strh	r0, [r5, #14]
 8012b0e:	1a52      	subs	r2, r2, r1
 8012b10:	4630      	mov	r0, r6
 8012b12:	f7fd fbe5 	bl	80102e0 <ucdr_init_buffer>
 8012b16:	4630      	mov	r0, r6
 8012b18:	490f      	ldr	r1, [pc, #60]	; (8012b58 <on_full_output_buffer_fragmented+0x110>)
 8012b1a:	4622      	mov	r2, r4
 8012b1c:	f7fd fbb6 	bl	801028c <ucdr_set_on_full_buffer_callback>
 8012b20:	2000      	movs	r0, #0
 8012b22:	b00a      	add	sp, #40	; 0x28
 8012b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b28:	b292      	uxth	r2, r2
 8012b2a:	2302      	movs	r3, #2
 8012b2c:	210d      	movs	r1, #13
 8012b2e:	a802      	add	r0, sp, #8
 8012b30:	f7ff ff12 	bl	8012958 <uxr_buffer_submessage_header>
 8012b34:	8928      	ldrh	r0, [r5, #8]
 8012b36:	89eb      	ldrh	r3, [r5, #14]
 8012b38:	fbb3 f2f0 	udiv	r2, r3, r0
 8012b3c:	fb00 3212 	mls	r2, r0, r2, r3
 8012b40:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8012b44:	686b      	ldr	r3, [r5, #4]
 8012b46:	fbb3 f3f0 	udiv	r3, r3, r0
 8012b4a:	b292      	uxth	r2, r2
 8012b4c:	6828      	ldr	r0, [r5, #0]
 8012b4e:	fb03 f302 	mul.w	r3, r3, r2
 8012b52:	3108      	adds	r1, #8
 8012b54:	50c1      	str	r1, [r0, r3]
 8012b56:	e7d3      	b.n	8012b00 <on_full_output_buffer_fragmented+0xb8>
 8012b58:	08012a49 	.word	0x08012a49

08012b5c <uxr_prepare_output_stream>:
 8012b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b5e:	b087      	sub	sp, #28
 8012b60:	2407      	movs	r4, #7
 8012b62:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012b64:	9202      	str	r2, [sp, #8]
 8012b66:	2500      	movs	r5, #0
 8012b68:	1d32      	adds	r2, r6, #4
 8012b6a:	e9cd 4500 	strd	r4, r5, [sp]
 8012b6e:	9103      	str	r1, [sp, #12]
 8012b70:	461c      	mov	r4, r3
 8012b72:	4606      	mov	r6, r0
 8012b74:	f7fe ffce 	bl	8011b14 <uxr_prepare_stream_to_write_submessage>
 8012b78:	f080 0201 	eor.w	r2, r0, #1
 8012b7c:	b2d2      	uxtb	r2, r2
 8012b7e:	75a2      	strb	r2, [r4, #22]
 8012b80:	b112      	cbz	r2, 8012b88 <uxr_prepare_output_stream+0x2c>
 8012b82:	4628      	mov	r0, r5
 8012b84:	b007      	add	sp, #28
 8012b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b88:	aa05      	add	r2, sp, #20
 8012b8a:	9902      	ldr	r1, [sp, #8]
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	f7ff f8fb 	bl	8011d88 <uxr_init_base_object_request>
 8012b92:	a905      	add	r1, sp, #20
 8012b94:	4605      	mov	r5, r0
 8012b96:	4620      	mov	r0, r4
 8012b98:	f001 f872 	bl	8013c80 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012b9c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012ba0:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8012ba4:	1a52      	subs	r2, r2, r1
 8012ba6:	4620      	mov	r0, r4
 8012ba8:	f7fd fb9a 	bl	80102e0 <ucdr_init_buffer>
 8012bac:	4620      	mov	r0, r4
 8012bae:	463a      	mov	r2, r7
 8012bb0:	4631      	mov	r1, r6
 8012bb2:	f7fd fb6b 	bl	801028c <ucdr_set_on_full_buffer_callback>
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	b007      	add	sp, #28
 8012bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012bbc <uxr_prepare_output_stream_fragmented>:
 8012bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bc0:	b093      	sub	sp, #76	; 0x4c
 8012bc2:	4605      	mov	r5, r0
 8012bc4:	9107      	str	r1, [sp, #28]
 8012bc6:	3008      	adds	r0, #8
 8012bc8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012bcc:	9303      	str	r3, [sp, #12]
 8012bce:	9206      	str	r2, [sp, #24]
 8012bd0:	f7ff fe8a 	bl	80128e8 <uxr_get_output_reliable_stream>
 8012bd4:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012bd8:	2b01      	cmp	r3, #1
 8012bda:	f000 8094 	beq.w	8012d06 <uxr_prepare_output_stream_fragmented+0x14a>
 8012bde:	4604      	mov	r4, r0
 8012be0:	2800      	cmp	r0, #0
 8012be2:	f000 8090 	beq.w	8012d06 <uxr_prepare_output_stream_fragmented+0x14a>
 8012be6:	f005 ff91 	bl	8018b0c <get_available_free_slots>
 8012bea:	2800      	cmp	r0, #0
 8012bec:	f000 8086 	beq.w	8012cfc <uxr_prepare_output_stream_fragmented+0x140>
 8012bf0:	8922      	ldrh	r2, [r4, #8]
 8012bf2:	89e7      	ldrh	r7, [r4, #14]
 8012bf4:	fbb7 f8f2 	udiv	r8, r7, r2
 8012bf8:	e9d4 3100 	ldrd	r3, r1, [r4]
 8012bfc:	fb02 7818 	mls	r8, r2, r8, r7
 8012c00:	fa1f f888 	uxth.w	r8, r8
 8012c04:	fbb1 f2f2 	udiv	r2, r1, r2
 8012c08:	fb02 f808 	mul.w	r8, r2, r8
 8012c0c:	f108 0804 	add.w	r8, r8, #4
 8012c10:	4498      	add	r8, r3
 8012c12:	7b23      	ldrb	r3, [r4, #12]
 8012c14:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8012c18:	9204      	str	r2, [sp, #16]
 8012c1a:	4553      	cmp	r3, sl
 8012c1c:	f1a2 0b04 	sub.w	fp, r2, #4
 8012c20:	d37d      	bcc.n	8012d1e <uxr_prepare_output_stream_fragmented+0x162>
 8012c22:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8012c24:	f8cd a000 	str.w	sl, [sp]
 8012c28:	f1ab 0904 	sub.w	r9, fp, #4
 8012c2c:	eba9 0903 	sub.w	r9, r9, r3
 8012c30:	3608      	adds	r6, #8
 8012c32:	a80a      	add	r0, sp, #40	; 0x28
 8012c34:	2300      	movs	r3, #0
 8012c36:	465a      	mov	r2, fp
 8012c38:	4641      	mov	r1, r8
 8012c3a:	fa1f f989 	uxth.w	r9, r9
 8012c3e:	9605      	str	r6, [sp, #20]
 8012c40:	f7fd fb3c 	bl	80102bc <ucdr_init_buffer_origin_offset>
 8012c44:	455e      	cmp	r6, fp
 8012c46:	bf34      	ite	cc
 8012c48:	2302      	movcc	r3, #2
 8012c4a:	2300      	movcs	r3, #0
 8012c4c:	464a      	mov	r2, r9
 8012c4e:	210d      	movs	r1, #13
 8012c50:	a80a      	add	r0, sp, #40	; 0x28
 8012c52:	f7ff fe81 	bl	8012958 <uxr_buffer_submessage_header>
 8012c56:	8920      	ldrh	r0, [r4, #8]
 8012c58:	fbb7 f3f0 	udiv	r3, r7, r0
 8012c5c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8012c60:	fb00 7313 	mls	r3, r0, r3, r7
 8012c64:	b29b      	uxth	r3, r3
 8012c66:	fbb1 f1f0 	udiv	r1, r1, r0
 8012c6a:	fb03 f301 	mul.w	r3, r3, r1
 8012c6e:	4638      	mov	r0, r7
 8012c70:	f842 b003 	str.w	fp, [r2, r3]
 8012c74:	2101      	movs	r1, #1
 8012c76:	f005 ff69 	bl	8018b4c <uxr_seq_num_add>
 8012c7a:	9b04      	ldr	r3, [sp, #16]
 8012c7c:	9e03      	ldr	r6, [sp, #12]
 8012c7e:	f1a3 0208 	sub.w	r2, r3, #8
 8012c82:	f10a 0104 	add.w	r1, sl, #4
 8012c86:	4607      	mov	r7, r0
 8012c88:	eba2 020a 	sub.w	r2, r2, sl
 8012c8c:	4441      	add	r1, r8
 8012c8e:	4630      	mov	r0, r6
 8012c90:	f7fd fb26 	bl	80102e0 <ucdr_init_buffer>
 8012c94:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012c96:	81e7      	strh	r7, [r4, #14]
 8012c98:	1d1a      	adds	r2, r3, #4
 8012c9a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8012c9e:	bf28      	it	cs
 8012ca0:	2200      	movcs	r2, #0
 8012ca2:	b292      	uxth	r2, r2
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	2107      	movs	r1, #7
 8012ca8:	4630      	mov	r0, r6
 8012caa:	f7ff fe55 	bl	8012958 <uxr_buffer_submessage_header>
 8012cae:	9906      	ldr	r1, [sp, #24]
 8012cb0:	aa09      	add	r2, sp, #36	; 0x24
 8012cb2:	4628      	mov	r0, r5
 8012cb4:	f7ff f868 	bl	8011d88 <uxr_init_base_object_request>
 8012cb8:	4604      	mov	r4, r0
 8012cba:	b328      	cbz	r0, 8012d08 <uxr_prepare_output_stream_fragmented+0x14c>
 8012cbc:	9e03      	ldr	r6, [sp, #12]
 8012cbe:	a909      	add	r1, sp, #36	; 0x24
 8012cc0:	4630      	mov	r0, r6
 8012cc2:	f000 ffdd 	bl	8013c80 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012cc6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012cca:	4630      	mov	r0, r6
 8012ccc:	1a52      	subs	r2, r2, r1
 8012cce:	f7fd fb07 	bl	80102e0 <ucdr_init_buffer>
 8012cd2:	9a05      	ldr	r2, [sp, #20]
 8012cd4:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8012cd8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012cda:	9b07      	ldr	r3, [sp, #28]
 8012cdc:	f8c5 20b8 	str.w	r2, [r5, #184]	; 0xb8
 8012ce0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8012ce2:	f8c5 20bc 	str.w	r2, [r5, #188]	; 0xbc
 8012ce6:	4630      	mov	r0, r6
 8012ce8:	4919      	ldr	r1, [pc, #100]	; (8012d50 <uxr_prepare_output_stream_fragmented+0x194>)
 8012cea:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8012cee:	462a      	mov	r2, r5
 8012cf0:	f7fd facc 	bl	801028c <ucdr_set_on_full_buffer_callback>
 8012cf4:	4620      	mov	r0, r4
 8012cf6:	b013      	add	sp, #76	; 0x4c
 8012cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cfc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8012cfe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012d00:	4628      	mov	r0, r5
 8012d02:	4798      	blx	r3
 8012d04:	b920      	cbnz	r0, 8012d10 <uxr_prepare_output_stream_fragmented+0x154>
 8012d06:	2400      	movs	r4, #0
 8012d08:	4620      	mov	r0, r4
 8012d0a:	b013      	add	sp, #76	; 0x4c
 8012d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d10:	4620      	mov	r0, r4
 8012d12:	f005 fefb 	bl	8018b0c <get_available_free_slots>
 8012d16:	2800      	cmp	r0, #0
 8012d18:	f47f af6a 	bne.w	8012bf0 <uxr_prepare_output_stream_fragmented+0x34>
 8012d1c:	e7f3      	b.n	8012d06 <uxr_prepare_output_stream_fragmented+0x14a>
 8012d1e:	4638      	mov	r0, r7
 8012d20:	2101      	movs	r1, #1
 8012d22:	f005 ff13 	bl	8018b4c <uxr_seq_num_add>
 8012d26:	8922      	ldrh	r2, [r4, #8]
 8012d28:	fbb0 f8f2 	udiv	r8, r0, r2
 8012d2c:	fb02 0818 	mls	r8, r2, r8, r0
 8012d30:	fa1f f888 	uxth.w	r8, r8
 8012d34:	6863      	ldr	r3, [r4, #4]
 8012d36:	fbb3 f3f2 	udiv	r3, r3, r2
 8012d3a:	6822      	ldr	r2, [r4, #0]
 8012d3c:	fb08 f803 	mul.w	r8, r8, r3
 8012d40:	f108 0804 	add.w	r8, r8, #4
 8012d44:	4490      	add	r8, r2
 8012d46:	7b23      	ldrb	r3, [r4, #12]
 8012d48:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8012d4c:	4607      	mov	r7, r0
 8012d4e:	e768      	b.n	8012c22 <uxr_prepare_output_stream_fragmented+0x66>
 8012d50:	08012a49 	.word	0x08012a49

08012d54 <uxr_serialize_message_header>:
 8012d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d56:	b083      	sub	sp, #12
 8012d58:	4616      	mov	r6, r2
 8012d5a:	4604      	mov	r4, r0
 8012d5c:	9301      	str	r3, [sp, #4]
 8012d5e:	460d      	mov	r5, r1
 8012d60:	9f08      	ldr	r7, [sp, #32]
 8012d62:	f004 fa5d 	bl	8017220 <ucdr_serialize_uint8_t>
 8012d66:	4631      	mov	r1, r6
 8012d68:	4620      	mov	r0, r4
 8012d6a:	f004 fa59 	bl	8017220 <ucdr_serialize_uint8_t>
 8012d6e:	9a01      	ldr	r2, [sp, #4]
 8012d70:	4620      	mov	r0, r4
 8012d72:	2101      	movs	r1, #1
 8012d74:	f004 fb00 	bl	8017378 <ucdr_serialize_endian_uint16_t>
 8012d78:	062b      	lsls	r3, r5, #24
 8012d7a:	d501      	bpl.n	8012d80 <uxr_serialize_message_header+0x2c>
 8012d7c:	b003      	add	sp, #12
 8012d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d80:	4639      	mov	r1, r7
 8012d82:	4620      	mov	r0, r4
 8012d84:	2204      	movs	r2, #4
 8012d86:	b003      	add	sp, #12
 8012d88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012d8c:	f004 b950 	b.w	8017030 <ucdr_serialize_array_uint8_t>

08012d90 <uxr_deserialize_message_header>:
 8012d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d92:	b083      	sub	sp, #12
 8012d94:	4616      	mov	r6, r2
 8012d96:	4604      	mov	r4, r0
 8012d98:	9301      	str	r3, [sp, #4]
 8012d9a:	460d      	mov	r5, r1
 8012d9c:	9f08      	ldr	r7, [sp, #32]
 8012d9e:	f004 fa55 	bl	801724c <ucdr_deserialize_uint8_t>
 8012da2:	4631      	mov	r1, r6
 8012da4:	4620      	mov	r0, r4
 8012da6:	f004 fa51 	bl	801724c <ucdr_deserialize_uint8_t>
 8012daa:	9a01      	ldr	r2, [sp, #4]
 8012dac:	4620      	mov	r0, r4
 8012dae:	2101      	movs	r1, #1
 8012db0:	f004 fbd6 	bl	8017560 <ucdr_deserialize_endian_uint16_t>
 8012db4:	f995 3000 	ldrsb.w	r3, [r5]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	da01      	bge.n	8012dc0 <uxr_deserialize_message_header+0x30>
 8012dbc:	b003      	add	sp, #12
 8012dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dc0:	4639      	mov	r1, r7
 8012dc2:	4620      	mov	r0, r4
 8012dc4:	2204      	movs	r2, #4
 8012dc6:	b003      	add	sp, #12
 8012dc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012dcc:	f004 b994 	b.w	80170f8 <ucdr_deserialize_array_uint8_t>

08012dd0 <uxr_serialize_submessage_header>:
 8012dd0:	b530      	push	{r4, r5, lr}
 8012dd2:	b083      	sub	sp, #12
 8012dd4:	4615      	mov	r5, r2
 8012dd6:	4604      	mov	r4, r0
 8012dd8:	9301      	str	r3, [sp, #4]
 8012dda:	f004 fa21 	bl	8017220 <ucdr_serialize_uint8_t>
 8012dde:	4629      	mov	r1, r5
 8012de0:	4620      	mov	r0, r4
 8012de2:	f004 fa1d 	bl	8017220 <ucdr_serialize_uint8_t>
 8012de6:	9a01      	ldr	r2, [sp, #4]
 8012de8:	4620      	mov	r0, r4
 8012dea:	2101      	movs	r1, #1
 8012dec:	b003      	add	sp, #12
 8012dee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012df2:	f004 bac1 	b.w	8017378 <ucdr_serialize_endian_uint16_t>
 8012df6:	bf00      	nop

08012df8 <uxr_deserialize_submessage_header>:
 8012df8:	b530      	push	{r4, r5, lr}
 8012dfa:	b083      	sub	sp, #12
 8012dfc:	4615      	mov	r5, r2
 8012dfe:	4604      	mov	r4, r0
 8012e00:	9301      	str	r3, [sp, #4]
 8012e02:	f004 fa23 	bl	801724c <ucdr_deserialize_uint8_t>
 8012e06:	4629      	mov	r1, r5
 8012e08:	4620      	mov	r0, r4
 8012e0a:	f004 fa1f 	bl	801724c <ucdr_deserialize_uint8_t>
 8012e0e:	9a01      	ldr	r2, [sp, #4]
 8012e10:	4620      	mov	r0, r4
 8012e12:	2101      	movs	r1, #1
 8012e14:	b003      	add	sp, #12
 8012e16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012e1a:	f004 bba1 	b.w	8017560 <ucdr_deserialize_endian_uint16_t>
 8012e1e:	bf00      	nop

08012e20 <uxr_serialize_CLIENT_Representation>:
 8012e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e24:	2204      	movs	r2, #4
 8012e26:	460c      	mov	r4, r1
 8012e28:	4605      	mov	r5, r0
 8012e2a:	f004 f901 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8012e2e:	1d21      	adds	r1, r4, #4
 8012e30:	4607      	mov	r7, r0
 8012e32:	2202      	movs	r2, #2
 8012e34:	4628      	mov	r0, r5
 8012e36:	f004 f8fb 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8012e3a:	1da1      	adds	r1, r4, #6
 8012e3c:	4007      	ands	r7, r0
 8012e3e:	2202      	movs	r2, #2
 8012e40:	4628      	mov	r0, r5
 8012e42:	f004 f8f5 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8012e46:	fa5f f887 	uxtb.w	r8, r7
 8012e4a:	2204      	movs	r2, #4
 8012e4c:	4607      	mov	r7, r0
 8012e4e:	f104 0108 	add.w	r1, r4, #8
 8012e52:	4628      	mov	r0, r5
 8012e54:	f004 f8ec 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8012e58:	ea08 0707 	and.w	r7, r8, r7
 8012e5c:	7b21      	ldrb	r1, [r4, #12]
 8012e5e:	4680      	mov	r8, r0
 8012e60:	4628      	mov	r0, r5
 8012e62:	f004 f9dd 	bl	8017220 <ucdr_serialize_uint8_t>
 8012e66:	ea08 0807 	and.w	r8, r8, r7
 8012e6a:	7b61      	ldrb	r1, [r4, #13]
 8012e6c:	4607      	mov	r7, r0
 8012e6e:	4628      	mov	r0, r5
 8012e70:	f004 f9a6 	bl	80171c0 <ucdr_serialize_bool>
 8012e74:	7b63      	ldrb	r3, [r4, #13]
 8012e76:	ea08 0707 	and.w	r7, r8, r7
 8012e7a:	ea07 0600 	and.w	r6, r7, r0
 8012e7e:	b933      	cbnz	r3, 8012e8e <uxr_serialize_CLIENT_Representation+0x6e>
 8012e80:	8ba1      	ldrh	r1, [r4, #28]
 8012e82:	4628      	mov	r0, r5
 8012e84:	f004 f9f8 	bl	8017278 <ucdr_serialize_uint16_t>
 8012e88:	4030      	ands	r0, r6
 8012e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e8e:	6921      	ldr	r1, [r4, #16]
 8012e90:	4628      	mov	r0, r5
 8012e92:	f004 fbdb 	bl	801764c <ucdr_serialize_uint32_t>
 8012e96:	6923      	ldr	r3, [r4, #16]
 8012e98:	b1cb      	cbz	r3, 8012ece <uxr_serialize_CLIENT_Representation+0xae>
 8012e9a:	b1d0      	cbz	r0, 8012ed2 <uxr_serialize_CLIENT_Representation+0xb2>
 8012e9c:	46a0      	mov	r8, r4
 8012e9e:	f04f 0900 	mov.w	r9, #0
 8012ea2:	e002      	b.n	8012eaa <uxr_serialize_CLIENT_Representation+0x8a>
 8012ea4:	f108 0808 	add.w	r8, r8, #8
 8012ea8:	b198      	cbz	r0, 8012ed2 <uxr_serialize_CLIENT_Representation+0xb2>
 8012eaa:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012eae:	4628      	mov	r0, r5
 8012eb0:	f005 f90e 	bl	80180d0 <ucdr_serialize_string>
 8012eb4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012eb8:	4607      	mov	r7, r0
 8012eba:	4628      	mov	r0, r5
 8012ebc:	f005 f908 	bl	80180d0 <ucdr_serialize_string>
 8012ec0:	6923      	ldr	r3, [r4, #16]
 8012ec2:	f109 0901 	add.w	r9, r9, #1
 8012ec6:	4038      	ands	r0, r7
 8012ec8:	4599      	cmp	r9, r3
 8012eca:	b2c0      	uxtb	r0, r0
 8012ecc:	d3ea      	bcc.n	8012ea4 <uxr_serialize_CLIENT_Representation+0x84>
 8012ece:	4006      	ands	r6, r0
 8012ed0:	e7d6      	b.n	8012e80 <uxr_serialize_CLIENT_Representation+0x60>
 8012ed2:	2600      	movs	r6, #0
 8012ed4:	e7d4      	b.n	8012e80 <uxr_serialize_CLIENT_Representation+0x60>
 8012ed6:	bf00      	nop

08012ed8 <uxr_deserialize_CLIENT_Representation>:
 8012ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012edc:	2204      	movs	r2, #4
 8012ede:	460c      	mov	r4, r1
 8012ee0:	4605      	mov	r5, r0
 8012ee2:	f004 f909 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8012ee6:	1d21      	adds	r1, r4, #4
 8012ee8:	4607      	mov	r7, r0
 8012eea:	2202      	movs	r2, #2
 8012eec:	4628      	mov	r0, r5
 8012eee:	f004 f903 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8012ef2:	1da1      	adds	r1, r4, #6
 8012ef4:	4007      	ands	r7, r0
 8012ef6:	2202      	movs	r2, #2
 8012ef8:	4628      	mov	r0, r5
 8012efa:	f004 f8fd 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8012efe:	fa5f f887 	uxtb.w	r8, r7
 8012f02:	2204      	movs	r2, #4
 8012f04:	4607      	mov	r7, r0
 8012f06:	f104 0108 	add.w	r1, r4, #8
 8012f0a:	4628      	mov	r0, r5
 8012f0c:	f004 f8f4 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8012f10:	ea08 0707 	and.w	r7, r8, r7
 8012f14:	f104 010c 	add.w	r1, r4, #12
 8012f18:	4680      	mov	r8, r0
 8012f1a:	4628      	mov	r0, r5
 8012f1c:	f004 f996 	bl	801724c <ucdr_deserialize_uint8_t>
 8012f20:	ea08 0807 	and.w	r8, r8, r7
 8012f24:	f104 010d 	add.w	r1, r4, #13
 8012f28:	4607      	mov	r7, r0
 8012f2a:	4628      	mov	r0, r5
 8012f2c:	f004 f95e 	bl	80171ec <ucdr_deserialize_bool>
 8012f30:	7b63      	ldrb	r3, [r4, #13]
 8012f32:	ea08 0707 	and.w	r7, r8, r7
 8012f36:	ea07 0600 	and.w	r6, r7, r0
 8012f3a:	b93b      	cbnz	r3, 8012f4c <uxr_deserialize_CLIENT_Representation+0x74>
 8012f3c:	f104 011c 	add.w	r1, r4, #28
 8012f40:	4628      	mov	r0, r5
 8012f42:	f004 fa99 	bl	8017478 <ucdr_deserialize_uint16_t>
 8012f46:	4030      	ands	r0, r6
 8012f48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f4c:	f104 0110 	add.w	r1, r4, #16
 8012f50:	4628      	mov	r0, r5
 8012f52:	f004 fcab 	bl	80178ac <ucdr_deserialize_uint32_t>
 8012f56:	6923      	ldr	r3, [r4, #16]
 8012f58:	2b01      	cmp	r3, #1
 8012f5a:	d903      	bls.n	8012f64 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012f5c:	2301      	movs	r3, #1
 8012f5e:	75ab      	strb	r3, [r5, #22]
 8012f60:	2600      	movs	r6, #0
 8012f62:	e7eb      	b.n	8012f3c <uxr_deserialize_CLIENT_Representation+0x64>
 8012f64:	b1fb      	cbz	r3, 8012fa6 <uxr_deserialize_CLIENT_Representation+0xce>
 8012f66:	2800      	cmp	r0, #0
 8012f68:	d0fa      	beq.n	8012f60 <uxr_deserialize_CLIENT_Representation+0x88>
 8012f6a:	46a0      	mov	r8, r4
 8012f6c:	f04f 0900 	mov.w	r9, #0
 8012f70:	e003      	b.n	8012f7a <uxr_deserialize_CLIENT_Representation+0xa2>
 8012f72:	f108 0808 	add.w	r8, r8, #8
 8012f76:	2800      	cmp	r0, #0
 8012f78:	d0f2      	beq.n	8012f60 <uxr_deserialize_CLIENT_Representation+0x88>
 8012f7a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8012f7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f82:	4628      	mov	r0, r5
 8012f84:	f005 f8b4 	bl	80180f0 <ucdr_deserialize_string>
 8012f88:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8012f8c:	4607      	mov	r7, r0
 8012f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f92:	4628      	mov	r0, r5
 8012f94:	f005 f8ac 	bl	80180f0 <ucdr_deserialize_string>
 8012f98:	6923      	ldr	r3, [r4, #16]
 8012f9a:	f109 0901 	add.w	r9, r9, #1
 8012f9e:	4038      	ands	r0, r7
 8012fa0:	4599      	cmp	r9, r3
 8012fa2:	b2c0      	uxtb	r0, r0
 8012fa4:	d3e5      	bcc.n	8012f72 <uxr_deserialize_CLIENT_Representation+0x9a>
 8012fa6:	4006      	ands	r6, r0
 8012fa8:	e7c8      	b.n	8012f3c <uxr_deserialize_CLIENT_Representation+0x64>
 8012faa:	bf00      	nop

08012fac <uxr_serialize_AGENT_Representation>:
 8012fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012fb0:	2204      	movs	r2, #4
 8012fb2:	460c      	mov	r4, r1
 8012fb4:	4605      	mov	r5, r0
 8012fb6:	f004 f83b 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8012fba:	1d21      	adds	r1, r4, #4
 8012fbc:	4606      	mov	r6, r0
 8012fbe:	2202      	movs	r2, #2
 8012fc0:	4628      	mov	r0, r5
 8012fc2:	f004 f835 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8012fc6:	1da1      	adds	r1, r4, #6
 8012fc8:	4006      	ands	r6, r0
 8012fca:	2202      	movs	r2, #2
 8012fcc:	4628      	mov	r0, r5
 8012fce:	f004 f82f 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8012fd2:	b2f6      	uxtb	r6, r6
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	7a21      	ldrb	r1, [r4, #8]
 8012fd8:	4628      	mov	r0, r5
 8012fda:	401e      	ands	r6, r3
 8012fdc:	f004 f8f0 	bl	80171c0 <ucdr_serialize_bool>
 8012fe0:	7a23      	ldrb	r3, [r4, #8]
 8012fe2:	ea00 0706 	and.w	r7, r0, r6
 8012fe6:	b913      	cbnz	r3, 8012fee <uxr_serialize_AGENT_Representation+0x42>
 8012fe8:	4638      	mov	r0, r7
 8012fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fee:	68e1      	ldr	r1, [r4, #12]
 8012ff0:	4628      	mov	r0, r5
 8012ff2:	f004 fb2b 	bl	801764c <ucdr_serialize_uint32_t>
 8012ff6:	68e3      	ldr	r3, [r4, #12]
 8012ff8:	b313      	cbz	r3, 8013040 <uxr_serialize_AGENT_Representation+0x94>
 8012ffa:	b1e8      	cbz	r0, 8013038 <uxr_serialize_AGENT_Representation+0x8c>
 8012ffc:	46a0      	mov	r8, r4
 8012ffe:	f04f 0900 	mov.w	r9, #0
 8013002:	e002      	b.n	801300a <uxr_serialize_AGENT_Representation+0x5e>
 8013004:	f108 0808 	add.w	r8, r8, #8
 8013008:	b1b3      	cbz	r3, 8013038 <uxr_serialize_AGENT_Representation+0x8c>
 801300a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801300e:	4628      	mov	r0, r5
 8013010:	f005 f85e 	bl	80180d0 <ucdr_serialize_string>
 8013014:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013018:	4606      	mov	r6, r0
 801301a:	4628      	mov	r0, r5
 801301c:	f005 f858 	bl	80180d0 <ucdr_serialize_string>
 8013020:	68e2      	ldr	r2, [r4, #12]
 8013022:	f109 0901 	add.w	r9, r9, #1
 8013026:	ea06 0300 	and.w	r3, r6, r0
 801302a:	4591      	cmp	r9, r2
 801302c:	b2db      	uxtb	r3, r3
 801302e:	d3e9      	bcc.n	8013004 <uxr_serialize_AGENT_Representation+0x58>
 8013030:	401f      	ands	r7, r3
 8013032:	4638      	mov	r0, r7
 8013034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013038:	2700      	movs	r7, #0
 801303a:	4638      	mov	r0, r7
 801303c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013040:	4007      	ands	r7, r0
 8013042:	e7d1      	b.n	8012fe8 <uxr_serialize_AGENT_Representation+0x3c>

08013044 <uxr_serialize_ObjectVariant.part.0>:
 8013044:	b570      	push	{r4, r5, r6, lr}
 8013046:	780b      	ldrb	r3, [r1, #0]
 8013048:	3b01      	subs	r3, #1
 801304a:	460c      	mov	r4, r1
 801304c:	4605      	mov	r5, r0
 801304e:	2b0d      	cmp	r3, #13
 8013050:	d869      	bhi.n	8013126 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8013052:	e8df f003 	tbb	[pc, r3]
 8013056:	074a      	.short	0x074a
 8013058:	07073030 	.word	0x07073030
 801305c:	21680707 	.word	0x21680707
 8013060:	45632121 	.word	0x45632121
 8013064:	7909      	ldrb	r1, [r1, #4]
 8013066:	f004 f8db 	bl	8017220 <ucdr_serialize_uint8_t>
 801306a:	4606      	mov	r6, r0
 801306c:	b158      	cbz	r0, 8013086 <uxr_serialize_ObjectVariant.part.0+0x42>
 801306e:	7923      	ldrb	r3, [r4, #4]
 8013070:	2b02      	cmp	r3, #2
 8013072:	d003      	beq.n	801307c <uxr_serialize_ObjectVariant.part.0+0x38>
 8013074:	2b03      	cmp	r3, #3
 8013076:	d029      	beq.n	80130cc <uxr_serialize_ObjectVariant.part.0+0x88>
 8013078:	2b01      	cmp	r3, #1
 801307a:	d104      	bne.n	8013086 <uxr_serialize_ObjectVariant.part.0+0x42>
 801307c:	68a1      	ldr	r1, [r4, #8]
 801307e:	4628      	mov	r0, r5
 8013080:	f005 f826 	bl	80180d0 <ucdr_serialize_string>
 8013084:	4606      	mov	r6, r0
 8013086:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801308a:	4628      	mov	r0, r5
 801308c:	2202      	movs	r2, #2
 801308e:	f003 ffcf 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013092:	4030      	ands	r0, r6
 8013094:	b2c0      	uxtb	r0, r0
 8013096:	bd70      	pop	{r4, r5, r6, pc}
 8013098:	7909      	ldrb	r1, [r1, #4]
 801309a:	f004 f8c1 	bl	8017220 <ucdr_serialize_uint8_t>
 801309e:	b1e8      	cbz	r0, 80130dc <uxr_serialize_ObjectVariant.part.0+0x98>
 80130a0:	7923      	ldrb	r3, [r4, #4]
 80130a2:	2b01      	cmp	r3, #1
 80130a4:	d001      	beq.n	80130aa <uxr_serialize_ObjectVariant.part.0+0x66>
 80130a6:	2b02      	cmp	r3, #2
 80130a8:	d13d      	bne.n	8013126 <uxr_serialize_ObjectVariant.part.0+0xe2>
 80130aa:	68a1      	ldr	r1, [r4, #8]
 80130ac:	4628      	mov	r0, r5
 80130ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130b2:	f005 b80d 	b.w	80180d0 <ucdr_serialize_string>
 80130b6:	7909      	ldrb	r1, [r1, #4]
 80130b8:	f004 f8b2 	bl	8017220 <ucdr_serialize_uint8_t>
 80130bc:	4606      	mov	r6, r0
 80130be:	2800      	cmp	r0, #0
 80130c0:	d0e1      	beq.n	8013086 <uxr_serialize_ObjectVariant.part.0+0x42>
 80130c2:	7923      	ldrb	r3, [r4, #4]
 80130c4:	2b02      	cmp	r3, #2
 80130c6:	d0d9      	beq.n	801307c <uxr_serialize_ObjectVariant.part.0+0x38>
 80130c8:	2b03      	cmp	r3, #3
 80130ca:	d1dc      	bne.n	8013086 <uxr_serialize_ObjectVariant.part.0+0x42>
 80130cc:	68a2      	ldr	r2, [r4, #8]
 80130ce:	f104 010c 	add.w	r1, r4, #12
 80130d2:	4628      	mov	r0, r5
 80130d4:	f7fd f9a0 	bl	8010418 <ucdr_serialize_sequence_uint8_t>
 80130d8:	4606      	mov	r6, r0
 80130da:	e7d4      	b.n	8013086 <uxr_serialize_ObjectVariant.part.0+0x42>
 80130dc:	2000      	movs	r0, #0
 80130de:	bd70      	pop	{r4, r5, r6, pc}
 80130e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130e4:	3104      	adds	r1, #4
 80130e6:	f7ff be9b 	b.w	8012e20 <uxr_serialize_CLIENT_Representation>
 80130ea:	7909      	ldrb	r1, [r1, #4]
 80130ec:	f004 f898 	bl	8017220 <ucdr_serialize_uint8_t>
 80130f0:	4606      	mov	r6, r0
 80130f2:	b158      	cbz	r0, 801310c <uxr_serialize_ObjectVariant.part.0+0xc8>
 80130f4:	7923      	ldrb	r3, [r4, #4]
 80130f6:	2b02      	cmp	r3, #2
 80130f8:	d003      	beq.n	8013102 <uxr_serialize_ObjectVariant.part.0+0xbe>
 80130fa:	2b03      	cmp	r3, #3
 80130fc:	d015      	beq.n	801312a <uxr_serialize_ObjectVariant.part.0+0xe6>
 80130fe:	2b01      	cmp	r3, #1
 8013100:	d104      	bne.n	801310c <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013102:	68a1      	ldr	r1, [r4, #8]
 8013104:	4628      	mov	r0, r5
 8013106:	f004 ffe3 	bl	80180d0 <ucdr_serialize_string>
 801310a:	4606      	mov	r6, r0
 801310c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8013110:	4628      	mov	r0, r5
 8013112:	f004 fdc1 	bl	8017c98 <ucdr_serialize_int16_t>
 8013116:	4030      	ands	r0, r6
 8013118:	b2c0      	uxtb	r0, r0
 801311a:	bd70      	pop	{r4, r5, r6, pc}
 801311c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013120:	3104      	adds	r1, #4
 8013122:	f7ff bf43 	b.w	8012fac <uxr_serialize_AGENT_Representation>
 8013126:	2001      	movs	r0, #1
 8013128:	bd70      	pop	{r4, r5, r6, pc}
 801312a:	68a2      	ldr	r2, [r4, #8]
 801312c:	f104 010c 	add.w	r1, r4, #12
 8013130:	4628      	mov	r0, r5
 8013132:	f7fd f971 	bl	8010418 <ucdr_serialize_sequence_uint8_t>
 8013136:	4606      	mov	r6, r0
 8013138:	e7e8      	b.n	801310c <uxr_serialize_ObjectVariant.part.0+0xc8>
 801313a:	bf00      	nop

0801313c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801313c:	b570      	push	{r4, r5, r6, lr}
 801313e:	460d      	mov	r5, r1
 8013140:	7809      	ldrb	r1, [r1, #0]
 8013142:	4606      	mov	r6, r0
 8013144:	f004 f83c 	bl	80171c0 <ucdr_serialize_bool>
 8013148:	782b      	ldrb	r3, [r5, #0]
 801314a:	4604      	mov	r4, r0
 801314c:	b94b      	cbnz	r3, 8013162 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801314e:	7a29      	ldrb	r1, [r5, #8]
 8013150:	4630      	mov	r0, r6
 8013152:	f004 f835 	bl	80171c0 <ucdr_serialize_bool>
 8013156:	7a2b      	ldrb	r3, [r5, #8]
 8013158:	4004      	ands	r4, r0
 801315a:	b2e4      	uxtb	r4, r4
 801315c:	b943      	cbnz	r3, 8013170 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801315e:	4620      	mov	r0, r4
 8013160:	bd70      	pop	{r4, r5, r6, pc}
 8013162:	6869      	ldr	r1, [r5, #4]
 8013164:	4630      	mov	r0, r6
 8013166:	f004 ffb3 	bl	80180d0 <ucdr_serialize_string>
 801316a:	4004      	ands	r4, r0
 801316c:	b2e4      	uxtb	r4, r4
 801316e:	e7ee      	b.n	801314e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013170:	68e9      	ldr	r1, [r5, #12]
 8013172:	4630      	mov	r0, r6
 8013174:	f004 ffac 	bl	80180d0 <ucdr_serialize_string>
 8013178:	4004      	ands	r4, r0
 801317a:	4620      	mov	r0, r4
 801317c:	bd70      	pop	{r4, r5, r6, pc}
 801317e:	bf00      	nop

08013180 <uxr_serialize_OBJK_Topic_Binary>:
 8013180:	b570      	push	{r4, r5, r6, lr}
 8013182:	460d      	mov	r5, r1
 8013184:	6809      	ldr	r1, [r1, #0]
 8013186:	4606      	mov	r6, r0
 8013188:	f004 ffa2 	bl	80180d0 <ucdr_serialize_string>
 801318c:	7929      	ldrb	r1, [r5, #4]
 801318e:	4604      	mov	r4, r0
 8013190:	4630      	mov	r0, r6
 8013192:	f004 f815 	bl	80171c0 <ucdr_serialize_bool>
 8013196:	792b      	ldrb	r3, [r5, #4]
 8013198:	4004      	ands	r4, r0
 801319a:	b2e4      	uxtb	r4, r4
 801319c:	b943      	cbnz	r3, 80131b0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801319e:	7b29      	ldrb	r1, [r5, #12]
 80131a0:	4630      	mov	r0, r6
 80131a2:	f004 f80d 	bl	80171c0 <ucdr_serialize_bool>
 80131a6:	7b2b      	ldrb	r3, [r5, #12]
 80131a8:	4004      	ands	r4, r0
 80131aa:	b93b      	cbnz	r3, 80131bc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80131ac:	4620      	mov	r0, r4
 80131ae:	bd70      	pop	{r4, r5, r6, pc}
 80131b0:	68a9      	ldr	r1, [r5, #8]
 80131b2:	4630      	mov	r0, r6
 80131b4:	f004 ff8c 	bl	80180d0 <ucdr_serialize_string>
 80131b8:	4004      	ands	r4, r0
 80131ba:	e7f0      	b.n	801319e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80131bc:	6929      	ldr	r1, [r5, #16]
 80131be:	4630      	mov	r0, r6
 80131c0:	f004 ff86 	bl	80180d0 <ucdr_serialize_string>
 80131c4:	4004      	ands	r4, r0
 80131c6:	b2e4      	uxtb	r4, r4
 80131c8:	4620      	mov	r0, r4
 80131ca:	bd70      	pop	{r4, r5, r6, pc}

080131cc <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80131cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131d0:	460c      	mov	r4, r1
 80131d2:	7809      	ldrb	r1, [r1, #0]
 80131d4:	4606      	mov	r6, r0
 80131d6:	f003 fff3 	bl	80171c0 <ucdr_serialize_bool>
 80131da:	7823      	ldrb	r3, [r4, #0]
 80131dc:	4605      	mov	r5, r0
 80131de:	b96b      	cbnz	r3, 80131fc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80131e0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80131e4:	4630      	mov	r0, r6
 80131e6:	f003 ffeb 	bl	80171c0 <ucdr_serialize_bool>
 80131ea:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80131ee:	4005      	ands	r5, r0
 80131f0:	b2ed      	uxtb	r5, r5
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d169      	bne.n	80132ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80131f6:	4628      	mov	r0, r5
 80131f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131fc:	6861      	ldr	r1, [r4, #4]
 80131fe:	4630      	mov	r0, r6
 8013200:	f004 fa24 	bl	801764c <ucdr_serialize_uint32_t>
 8013204:	6863      	ldr	r3, [r4, #4]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d06b      	beq.n	80132e2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801320a:	2800      	cmp	r0, #0
 801320c:	d067      	beq.n	80132de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801320e:	68a1      	ldr	r1, [r4, #8]
 8013210:	4630      	mov	r0, r6
 8013212:	f004 ff5d 	bl	80180d0 <ucdr_serialize_string>
 8013216:	6863      	ldr	r3, [r4, #4]
 8013218:	2b01      	cmp	r3, #1
 801321a:	d953      	bls.n	80132c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801321c:	2800      	cmp	r0, #0
 801321e:	d05e      	beq.n	80132de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013220:	68e1      	ldr	r1, [r4, #12]
 8013222:	4630      	mov	r0, r6
 8013224:	f004 ff54 	bl	80180d0 <ucdr_serialize_string>
 8013228:	6863      	ldr	r3, [r4, #4]
 801322a:	2b02      	cmp	r3, #2
 801322c:	d94a      	bls.n	80132c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801322e:	2800      	cmp	r0, #0
 8013230:	d055      	beq.n	80132de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013232:	6921      	ldr	r1, [r4, #16]
 8013234:	4630      	mov	r0, r6
 8013236:	f004 ff4b 	bl	80180d0 <ucdr_serialize_string>
 801323a:	6863      	ldr	r3, [r4, #4]
 801323c:	2b03      	cmp	r3, #3
 801323e:	d941      	bls.n	80132c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013240:	2800      	cmp	r0, #0
 8013242:	d04c      	beq.n	80132de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013244:	6961      	ldr	r1, [r4, #20]
 8013246:	4630      	mov	r0, r6
 8013248:	f004 ff42 	bl	80180d0 <ucdr_serialize_string>
 801324c:	6863      	ldr	r3, [r4, #4]
 801324e:	2b04      	cmp	r3, #4
 8013250:	d938      	bls.n	80132c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013252:	2800      	cmp	r0, #0
 8013254:	d043      	beq.n	80132de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013256:	69a1      	ldr	r1, [r4, #24]
 8013258:	4630      	mov	r0, r6
 801325a:	f004 ff39 	bl	80180d0 <ucdr_serialize_string>
 801325e:	6863      	ldr	r3, [r4, #4]
 8013260:	2b05      	cmp	r3, #5
 8013262:	d92f      	bls.n	80132c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013264:	2800      	cmp	r0, #0
 8013266:	d03a      	beq.n	80132de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013268:	69e1      	ldr	r1, [r4, #28]
 801326a:	4630      	mov	r0, r6
 801326c:	f004 ff30 	bl	80180d0 <ucdr_serialize_string>
 8013270:	6863      	ldr	r3, [r4, #4]
 8013272:	2b06      	cmp	r3, #6
 8013274:	d926      	bls.n	80132c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013276:	b390      	cbz	r0, 80132de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013278:	6a21      	ldr	r1, [r4, #32]
 801327a:	4630      	mov	r0, r6
 801327c:	f004 ff28 	bl	80180d0 <ucdr_serialize_string>
 8013280:	6863      	ldr	r3, [r4, #4]
 8013282:	2b07      	cmp	r3, #7
 8013284:	d91e      	bls.n	80132c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013286:	b350      	cbz	r0, 80132de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013288:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801328a:	4630      	mov	r0, r6
 801328c:	f004 ff20 	bl	80180d0 <ucdr_serialize_string>
 8013290:	6863      	ldr	r3, [r4, #4]
 8013292:	2b08      	cmp	r3, #8
 8013294:	d916      	bls.n	80132c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013296:	b310      	cbz	r0, 80132de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013298:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801329a:	4630      	mov	r0, r6
 801329c:	f004 ff18 	bl	80180d0 <ucdr_serialize_string>
 80132a0:	6863      	ldr	r3, [r4, #4]
 80132a2:	2b09      	cmp	r3, #9
 80132a4:	d90e      	bls.n	80132c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80132a6:	b1d0      	cbz	r0, 80132de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80132a8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80132ac:	2709      	movs	r7, #9
 80132ae:	e000      	b.n	80132b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80132b0:	b1a8      	cbz	r0, 80132de <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80132b2:	f858 1b04 	ldr.w	r1, [r8], #4
 80132b6:	4630      	mov	r0, r6
 80132b8:	f004 ff0a 	bl	80180d0 <ucdr_serialize_string>
 80132bc:	6862      	ldr	r2, [r4, #4]
 80132be:	3701      	adds	r7, #1
 80132c0:	4297      	cmp	r7, r2
 80132c2:	d3f5      	bcc.n	80132b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80132c4:	4005      	ands	r5, r0
 80132c6:	b2ed      	uxtb	r5, r5
 80132c8:	e78a      	b.n	80131e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80132ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80132cc:	4630      	mov	r0, r6
 80132ce:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80132d2:	f7fd f8a1 	bl	8010418 <ucdr_serialize_sequence_uint8_t>
 80132d6:	4005      	ands	r5, r0
 80132d8:	4628      	mov	r0, r5
 80132da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132de:	2500      	movs	r5, #0
 80132e0:	e77e      	b.n	80131e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80132e2:	4028      	ands	r0, r5
 80132e4:	b2c5      	uxtb	r5, r0
 80132e6:	e77b      	b.n	80131e0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080132e8 <uxr_serialize_OBJK_Publisher_Binary>:
 80132e8:	b570      	push	{r4, r5, r6, lr}
 80132ea:	460d      	mov	r5, r1
 80132ec:	7809      	ldrb	r1, [r1, #0]
 80132ee:	4606      	mov	r6, r0
 80132f0:	f003 ff66 	bl	80171c0 <ucdr_serialize_bool>
 80132f4:	782b      	ldrb	r3, [r5, #0]
 80132f6:	4604      	mov	r4, r0
 80132f8:	b94b      	cbnz	r3, 801330e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80132fa:	7a29      	ldrb	r1, [r5, #8]
 80132fc:	4630      	mov	r0, r6
 80132fe:	f003 ff5f 	bl	80171c0 <ucdr_serialize_bool>
 8013302:	7a2b      	ldrb	r3, [r5, #8]
 8013304:	4004      	ands	r4, r0
 8013306:	b2e4      	uxtb	r4, r4
 8013308:	b943      	cbnz	r3, 801331c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801330a:	4620      	mov	r0, r4
 801330c:	bd70      	pop	{r4, r5, r6, pc}
 801330e:	6869      	ldr	r1, [r5, #4]
 8013310:	4630      	mov	r0, r6
 8013312:	f004 fedd 	bl	80180d0 <ucdr_serialize_string>
 8013316:	4004      	ands	r4, r0
 8013318:	b2e4      	uxtb	r4, r4
 801331a:	e7ee      	b.n	80132fa <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801331c:	f105 010c 	add.w	r1, r5, #12
 8013320:	4630      	mov	r0, r6
 8013322:	f7ff ff53 	bl	80131cc <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013326:	4004      	ands	r4, r0
 8013328:	4620      	mov	r0, r4
 801332a:	bd70      	pop	{r4, r5, r6, pc}

0801332c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 801332c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013330:	460c      	mov	r4, r1
 8013332:	7809      	ldrb	r1, [r1, #0]
 8013334:	4606      	mov	r6, r0
 8013336:	f003 ff43 	bl	80171c0 <ucdr_serialize_bool>
 801333a:	7823      	ldrb	r3, [r4, #0]
 801333c:	4605      	mov	r5, r0
 801333e:	b96b      	cbnz	r3, 801335c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013340:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013344:	4630      	mov	r0, r6
 8013346:	f003 ff3b 	bl	80171c0 <ucdr_serialize_bool>
 801334a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801334e:	4005      	ands	r5, r0
 8013350:	b2ed      	uxtb	r5, r5
 8013352:	2b00      	cmp	r3, #0
 8013354:	d169      	bne.n	801342a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8013356:	4628      	mov	r0, r5
 8013358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801335c:	6861      	ldr	r1, [r4, #4]
 801335e:	4630      	mov	r0, r6
 8013360:	f004 f974 	bl	801764c <ucdr_serialize_uint32_t>
 8013364:	6863      	ldr	r3, [r4, #4]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d06b      	beq.n	8013442 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801336a:	2800      	cmp	r0, #0
 801336c:	d067      	beq.n	801343e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801336e:	68a1      	ldr	r1, [r4, #8]
 8013370:	4630      	mov	r0, r6
 8013372:	f004 fead 	bl	80180d0 <ucdr_serialize_string>
 8013376:	6863      	ldr	r3, [r4, #4]
 8013378:	2b01      	cmp	r3, #1
 801337a:	d953      	bls.n	8013424 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801337c:	2800      	cmp	r0, #0
 801337e:	d05e      	beq.n	801343e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013380:	68e1      	ldr	r1, [r4, #12]
 8013382:	4630      	mov	r0, r6
 8013384:	f004 fea4 	bl	80180d0 <ucdr_serialize_string>
 8013388:	6863      	ldr	r3, [r4, #4]
 801338a:	2b02      	cmp	r3, #2
 801338c:	d94a      	bls.n	8013424 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801338e:	2800      	cmp	r0, #0
 8013390:	d055      	beq.n	801343e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013392:	6921      	ldr	r1, [r4, #16]
 8013394:	4630      	mov	r0, r6
 8013396:	f004 fe9b 	bl	80180d0 <ucdr_serialize_string>
 801339a:	6863      	ldr	r3, [r4, #4]
 801339c:	2b03      	cmp	r3, #3
 801339e:	d941      	bls.n	8013424 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80133a0:	2800      	cmp	r0, #0
 80133a2:	d04c      	beq.n	801343e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80133a4:	6961      	ldr	r1, [r4, #20]
 80133a6:	4630      	mov	r0, r6
 80133a8:	f004 fe92 	bl	80180d0 <ucdr_serialize_string>
 80133ac:	6863      	ldr	r3, [r4, #4]
 80133ae:	2b04      	cmp	r3, #4
 80133b0:	d938      	bls.n	8013424 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80133b2:	2800      	cmp	r0, #0
 80133b4:	d043      	beq.n	801343e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80133b6:	69a1      	ldr	r1, [r4, #24]
 80133b8:	4630      	mov	r0, r6
 80133ba:	f004 fe89 	bl	80180d0 <ucdr_serialize_string>
 80133be:	6863      	ldr	r3, [r4, #4]
 80133c0:	2b05      	cmp	r3, #5
 80133c2:	d92f      	bls.n	8013424 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80133c4:	2800      	cmp	r0, #0
 80133c6:	d03a      	beq.n	801343e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80133c8:	69e1      	ldr	r1, [r4, #28]
 80133ca:	4630      	mov	r0, r6
 80133cc:	f004 fe80 	bl	80180d0 <ucdr_serialize_string>
 80133d0:	6863      	ldr	r3, [r4, #4]
 80133d2:	2b06      	cmp	r3, #6
 80133d4:	d926      	bls.n	8013424 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80133d6:	b390      	cbz	r0, 801343e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80133d8:	6a21      	ldr	r1, [r4, #32]
 80133da:	4630      	mov	r0, r6
 80133dc:	f004 fe78 	bl	80180d0 <ucdr_serialize_string>
 80133e0:	6863      	ldr	r3, [r4, #4]
 80133e2:	2b07      	cmp	r3, #7
 80133e4:	d91e      	bls.n	8013424 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80133e6:	b350      	cbz	r0, 801343e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80133e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80133ea:	4630      	mov	r0, r6
 80133ec:	f004 fe70 	bl	80180d0 <ucdr_serialize_string>
 80133f0:	6863      	ldr	r3, [r4, #4]
 80133f2:	2b08      	cmp	r3, #8
 80133f4:	d916      	bls.n	8013424 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80133f6:	b310      	cbz	r0, 801343e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80133f8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80133fa:	4630      	mov	r0, r6
 80133fc:	f004 fe68 	bl	80180d0 <ucdr_serialize_string>
 8013400:	6863      	ldr	r3, [r4, #4]
 8013402:	2b09      	cmp	r3, #9
 8013404:	d90e      	bls.n	8013424 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013406:	b1d0      	cbz	r0, 801343e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013408:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801340c:	2709      	movs	r7, #9
 801340e:	e000      	b.n	8013412 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8013410:	b1a8      	cbz	r0, 801343e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013412:	f858 1b04 	ldr.w	r1, [r8], #4
 8013416:	4630      	mov	r0, r6
 8013418:	f004 fe5a 	bl	80180d0 <ucdr_serialize_string>
 801341c:	6862      	ldr	r2, [r4, #4]
 801341e:	3701      	adds	r7, #1
 8013420:	4297      	cmp	r7, r2
 8013422:	d3f5      	bcc.n	8013410 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8013424:	4005      	ands	r5, r0
 8013426:	b2ed      	uxtb	r5, r5
 8013428:	e78a      	b.n	8013340 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 801342a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801342c:	4630      	mov	r0, r6
 801342e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013432:	f7fc fff1 	bl	8010418 <ucdr_serialize_sequence_uint8_t>
 8013436:	4005      	ands	r5, r0
 8013438:	4628      	mov	r0, r5
 801343a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801343e:	2500      	movs	r5, #0
 8013440:	e77e      	b.n	8013340 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013442:	4028      	ands	r0, r5
 8013444:	b2c5      	uxtb	r5, r0
 8013446:	e77b      	b.n	8013340 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08013448 <uxr_serialize_OBJK_Subscriber_Binary>:
 8013448:	b570      	push	{r4, r5, r6, lr}
 801344a:	460d      	mov	r5, r1
 801344c:	7809      	ldrb	r1, [r1, #0]
 801344e:	4606      	mov	r6, r0
 8013450:	f003 feb6 	bl	80171c0 <ucdr_serialize_bool>
 8013454:	782b      	ldrb	r3, [r5, #0]
 8013456:	4604      	mov	r4, r0
 8013458:	b94b      	cbnz	r3, 801346e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801345a:	7a29      	ldrb	r1, [r5, #8]
 801345c:	4630      	mov	r0, r6
 801345e:	f003 feaf 	bl	80171c0 <ucdr_serialize_bool>
 8013462:	7a2b      	ldrb	r3, [r5, #8]
 8013464:	4004      	ands	r4, r0
 8013466:	b2e4      	uxtb	r4, r4
 8013468:	b943      	cbnz	r3, 801347c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801346a:	4620      	mov	r0, r4
 801346c:	bd70      	pop	{r4, r5, r6, pc}
 801346e:	6869      	ldr	r1, [r5, #4]
 8013470:	4630      	mov	r0, r6
 8013472:	f004 fe2d 	bl	80180d0 <ucdr_serialize_string>
 8013476:	4004      	ands	r4, r0
 8013478:	b2e4      	uxtb	r4, r4
 801347a:	e7ee      	b.n	801345a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801347c:	f105 010c 	add.w	r1, r5, #12
 8013480:	4630      	mov	r0, r6
 8013482:	f7ff ff53 	bl	801332c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8013486:	4004      	ands	r4, r0
 8013488:	4620      	mov	r0, r4
 801348a:	bd70      	pop	{r4, r5, r6, pc}

0801348c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801348c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013490:	4688      	mov	r8, r1
 8013492:	8809      	ldrh	r1, [r1, #0]
 8013494:	4681      	mov	r9, r0
 8013496:	f003 feef 	bl	8017278 <ucdr_serialize_uint16_t>
 801349a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801349e:	4606      	mov	r6, r0
 80134a0:	4648      	mov	r0, r9
 80134a2:	f003 fe8d 	bl	80171c0 <ucdr_serialize_bool>
 80134a6:	f898 3002 	ldrb.w	r3, [r8, #2]
 80134aa:	4030      	ands	r0, r6
 80134ac:	b2c5      	uxtb	r5, r0
 80134ae:	b9eb      	cbnz	r3, 80134ec <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 80134b0:	f898 1006 	ldrb.w	r1, [r8, #6]
 80134b4:	4648      	mov	r0, r9
 80134b6:	f003 fe83 	bl	80171c0 <ucdr_serialize_bool>
 80134ba:	f898 3006 	ldrb.w	r3, [r8, #6]
 80134be:	4005      	ands	r5, r0
 80134c0:	bb7b      	cbnz	r3, 8013522 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 80134c2:	f898 100c 	ldrb.w	r1, [r8, #12]
 80134c6:	4648      	mov	r0, r9
 80134c8:	f003 fe7a 	bl	80171c0 <ucdr_serialize_bool>
 80134cc:	f898 300c 	ldrb.w	r3, [r8, #12]
 80134d0:	4005      	ands	r5, r0
 80134d2:	b9f3      	cbnz	r3, 8013512 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80134d4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80134d8:	4648      	mov	r0, r9
 80134da:	f003 fe71 	bl	80171c0 <ucdr_serialize_bool>
 80134de:	f898 3014 	ldrb.w	r3, [r8, #20]
 80134e2:	4005      	ands	r5, r0
 80134e4:	b94b      	cbnz	r3, 80134fa <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80134e6:	4628      	mov	r0, r5
 80134e8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80134ec:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80134f0:	4648      	mov	r0, r9
 80134f2:	f003 fec1 	bl	8017278 <ucdr_serialize_uint16_t>
 80134f6:	4005      	ands	r5, r0
 80134f8:	e7da      	b.n	80134b0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80134fa:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80134fe:	4648      	mov	r0, r9
 8013500:	f108 011c 	add.w	r1, r8, #28
 8013504:	f7fc ff88 	bl	8010418 <ucdr_serialize_sequence_uint8_t>
 8013508:	4028      	ands	r0, r5
 801350a:	b2c5      	uxtb	r5, r0
 801350c:	4628      	mov	r0, r5
 801350e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013512:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013516:	4648      	mov	r0, r9
 8013518:	f004 f898 	bl	801764c <ucdr_serialize_uint32_t>
 801351c:	4028      	ands	r0, r5
 801351e:	b2c5      	uxtb	r5, r0
 8013520:	e7d8      	b.n	80134d4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013522:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013526:	4648      	mov	r0, r9
 8013528:	f004 f890 	bl	801764c <ucdr_serialize_uint32_t>
 801352c:	4028      	ands	r0, r5
 801352e:	b2c5      	uxtb	r5, r0
 8013530:	e7c7      	b.n	80134c2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013532:	bf00      	nop

08013534 <uxr_serialize_OBJK_DataReader_Binary>:
 8013534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013536:	2202      	movs	r2, #2
 8013538:	460c      	mov	r4, r1
 801353a:	4606      	mov	r6, r0
 801353c:	f003 fd78 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013540:	78a1      	ldrb	r1, [r4, #2]
 8013542:	4605      	mov	r5, r0
 8013544:	4630      	mov	r0, r6
 8013546:	f003 fe3b 	bl	80171c0 <ucdr_serialize_bool>
 801354a:	78a3      	ldrb	r3, [r4, #2]
 801354c:	4005      	ands	r5, r0
 801354e:	b2ed      	uxtb	r5, r5
 8013550:	b90b      	cbnz	r3, 8013556 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8013552:	4628      	mov	r0, r5
 8013554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013556:	f104 0108 	add.w	r1, r4, #8
 801355a:	4630      	mov	r0, r6
 801355c:	f7ff ff96 	bl	801348c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013560:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013564:	4607      	mov	r7, r0
 8013566:	4630      	mov	r0, r6
 8013568:	f003 fe2a 	bl	80171c0 <ucdr_serialize_bool>
 801356c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013570:	4038      	ands	r0, r7
 8013572:	b2c7      	uxtb	r7, r0
 8013574:	b95b      	cbnz	r3, 801358e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8013576:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801357a:	4630      	mov	r0, r6
 801357c:	f003 fe20 	bl	80171c0 <ucdr_serialize_bool>
 8013580:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013584:	4007      	ands	r7, r0
 8013586:	b94b      	cbnz	r3, 801359c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8013588:	403d      	ands	r5, r7
 801358a:	4628      	mov	r0, r5
 801358c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801358e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8013592:	4630      	mov	r0, r6
 8013594:	f004 fab0 	bl	8017af8 <ucdr_serialize_uint64_t>
 8013598:	4007      	ands	r7, r0
 801359a:	e7ec      	b.n	8013576 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801359c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801359e:	4630      	mov	r0, r6
 80135a0:	f004 fd96 	bl	80180d0 <ucdr_serialize_string>
 80135a4:	4007      	ands	r7, r0
 80135a6:	b2ff      	uxtb	r7, r7
 80135a8:	e7ee      	b.n	8013588 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80135aa:	bf00      	nop

080135ac <uxr_serialize_OBJK_DataWriter_Binary>:
 80135ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135ae:	2202      	movs	r2, #2
 80135b0:	460d      	mov	r5, r1
 80135b2:	4606      	mov	r6, r0
 80135b4:	f003 fd3c 	bl	8017030 <ucdr_serialize_array_uint8_t>
 80135b8:	78a9      	ldrb	r1, [r5, #2]
 80135ba:	4604      	mov	r4, r0
 80135bc:	4630      	mov	r0, r6
 80135be:	f003 fdff 	bl	80171c0 <ucdr_serialize_bool>
 80135c2:	78ab      	ldrb	r3, [r5, #2]
 80135c4:	4004      	ands	r4, r0
 80135c6:	b2e4      	uxtb	r4, r4
 80135c8:	b90b      	cbnz	r3, 80135ce <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80135ca:	4620      	mov	r0, r4
 80135cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135ce:	f105 0108 	add.w	r1, r5, #8
 80135d2:	4630      	mov	r0, r6
 80135d4:	f7ff ff5a 	bl	801348c <uxr_serialize_OBJK_Endpoint_QosBinary>
 80135d8:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 80135dc:	4607      	mov	r7, r0
 80135de:	4630      	mov	r0, r6
 80135e0:	f003 fdee 	bl	80171c0 <ucdr_serialize_bool>
 80135e4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80135e8:	4007      	ands	r7, r0
 80135ea:	b2ff      	uxtb	r7, r7
 80135ec:	b913      	cbnz	r3, 80135f4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80135ee:	403c      	ands	r4, r7
 80135f0:	4620      	mov	r0, r4
 80135f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135f4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 80135f8:	4630      	mov	r0, r6
 80135fa:	f004 fa7d 	bl	8017af8 <ucdr_serialize_uint64_t>
 80135fe:	4007      	ands	r7, r0
 8013600:	e7f5      	b.n	80135ee <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8013602:	bf00      	nop

08013604 <uxr_deserialize_ObjectVariant>:
 8013604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013606:	4605      	mov	r5, r0
 8013608:	460e      	mov	r6, r1
 801360a:	f003 fe1f 	bl	801724c <ucdr_deserialize_uint8_t>
 801360e:	b320      	cbz	r0, 801365a <uxr_deserialize_ObjectVariant+0x56>
 8013610:	7833      	ldrb	r3, [r6, #0]
 8013612:	3b01      	subs	r3, #1
 8013614:	4604      	mov	r4, r0
 8013616:	2b0d      	cmp	r3, #13
 8013618:	d81d      	bhi.n	8013656 <uxr_deserialize_ObjectVariant+0x52>
 801361a:	e8df f003 	tbb	[pc, r3]
 801361e:	2107      	.short	0x2107
 8013620:	21214b4b 	.word	0x21214b4b
 8013624:	381c2121 	.word	0x381c2121
 8013628:	876a3838 	.word	0x876a3838
 801362c:	1d31      	adds	r1, r6, #4
 801362e:	4628      	mov	r0, r5
 8013630:	f003 fe0c 	bl	801724c <ucdr_deserialize_uint8_t>
 8013634:	4607      	mov	r7, r0
 8013636:	b138      	cbz	r0, 8013648 <uxr_deserialize_ObjectVariant+0x44>
 8013638:	7933      	ldrb	r3, [r6, #4]
 801363a:	2b02      	cmp	r3, #2
 801363c:	d07c      	beq.n	8013738 <uxr_deserialize_ObjectVariant+0x134>
 801363e:	2b03      	cmp	r3, #3
 8013640:	f000 8082 	beq.w	8013748 <uxr_deserialize_ObjectVariant+0x144>
 8013644:	2b01      	cmp	r3, #1
 8013646:	d077      	beq.n	8013738 <uxr_deserialize_ObjectVariant+0x134>
 8013648:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801364c:	4628      	mov	r0, r5
 801364e:	f004 fba3 	bl	8017d98 <ucdr_deserialize_int16_t>
 8013652:	4038      	ands	r0, r7
 8013654:	b2c4      	uxtb	r4, r0
 8013656:	4620      	mov	r0, r4
 8013658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801365a:	2400      	movs	r4, #0
 801365c:	4620      	mov	r0, r4
 801365e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013660:	1d31      	adds	r1, r6, #4
 8013662:	4628      	mov	r0, r5
 8013664:	f003 fdf2 	bl	801724c <ucdr_deserialize_uint8_t>
 8013668:	4607      	mov	r7, r0
 801366a:	b130      	cbz	r0, 801367a <uxr_deserialize_ObjectVariant+0x76>
 801366c:	7933      	ldrb	r3, [r6, #4]
 801366e:	2b02      	cmp	r3, #2
 8013670:	d037      	beq.n	80136e2 <uxr_deserialize_ObjectVariant+0xde>
 8013672:	2b03      	cmp	r3, #3
 8013674:	d02a      	beq.n	80136cc <uxr_deserialize_ObjectVariant+0xc8>
 8013676:	2b01      	cmp	r3, #1
 8013678:	d033      	beq.n	80136e2 <uxr_deserialize_ObjectVariant+0xde>
 801367a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801367e:	4628      	mov	r0, r5
 8013680:	2202      	movs	r2, #2
 8013682:	f003 fd39 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8013686:	4038      	ands	r0, r7
 8013688:	b2c4      	uxtb	r4, r0
 801368a:	4620      	mov	r0, r4
 801368c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801368e:	1d31      	adds	r1, r6, #4
 8013690:	4628      	mov	r0, r5
 8013692:	f003 fddb 	bl	801724c <ucdr_deserialize_uint8_t>
 8013696:	2800      	cmp	r0, #0
 8013698:	d0df      	beq.n	801365a <uxr_deserialize_ObjectVariant+0x56>
 801369a:	7933      	ldrb	r3, [r6, #4]
 801369c:	2b01      	cmp	r3, #1
 801369e:	d001      	beq.n	80136a4 <uxr_deserialize_ObjectVariant+0xa0>
 80136a0:	2b02      	cmp	r3, #2
 80136a2:	d1d8      	bne.n	8013656 <uxr_deserialize_ObjectVariant+0x52>
 80136a4:	68b1      	ldr	r1, [r6, #8]
 80136a6:	4628      	mov	r0, r5
 80136a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80136ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80136b0:	f004 bd1e 	b.w	80180f0 <ucdr_deserialize_string>
 80136b4:	1d31      	adds	r1, r6, #4
 80136b6:	4628      	mov	r0, r5
 80136b8:	f003 fdc8 	bl	801724c <ucdr_deserialize_uint8_t>
 80136bc:	4607      	mov	r7, r0
 80136be:	2800      	cmp	r0, #0
 80136c0:	d0db      	beq.n	801367a <uxr_deserialize_ObjectVariant+0x76>
 80136c2:	7933      	ldrb	r3, [r6, #4]
 80136c4:	2b02      	cmp	r3, #2
 80136c6:	d00c      	beq.n	80136e2 <uxr_deserialize_ObjectVariant+0xde>
 80136c8:	2b03      	cmp	r3, #3
 80136ca:	d1d6      	bne.n	801367a <uxr_deserialize_ObjectVariant+0x76>
 80136cc:	f106 0308 	add.w	r3, r6, #8
 80136d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80136d4:	f106 010c 	add.w	r1, r6, #12
 80136d8:	4628      	mov	r0, r5
 80136da:	f7fc feaf 	bl	801043c <ucdr_deserialize_sequence_uint8_t>
 80136de:	4607      	mov	r7, r0
 80136e0:	e7cb      	b.n	801367a <uxr_deserialize_ObjectVariant+0x76>
 80136e2:	68b1      	ldr	r1, [r6, #8]
 80136e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80136e8:	4628      	mov	r0, r5
 80136ea:	f004 fd01 	bl	80180f0 <ucdr_deserialize_string>
 80136ee:	4607      	mov	r7, r0
 80136f0:	e7c3      	b.n	801367a <uxr_deserialize_ObjectVariant+0x76>
 80136f2:	2204      	movs	r2, #4
 80136f4:	18b1      	adds	r1, r6, r2
 80136f6:	4628      	mov	r0, r5
 80136f8:	f003 fcfe 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 80136fc:	2202      	movs	r2, #2
 80136fe:	4604      	mov	r4, r0
 8013700:	f106 0108 	add.w	r1, r6, #8
 8013704:	4628      	mov	r0, r5
 8013706:	f003 fcf7 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 801370a:	2202      	movs	r2, #2
 801370c:	4004      	ands	r4, r0
 801370e:	f106 010a 	add.w	r1, r6, #10
 8013712:	4628      	mov	r0, r5
 8013714:	f003 fcf0 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8013718:	b2e4      	uxtb	r4, r4
 801371a:	4603      	mov	r3, r0
 801371c:	f106 010c 	add.w	r1, r6, #12
 8013720:	4628      	mov	r0, r5
 8013722:	401c      	ands	r4, r3
 8013724:	f003 fd62 	bl	80171ec <ucdr_deserialize_bool>
 8013728:	4004      	ands	r4, r0
 801372a:	e794      	b.n	8013656 <uxr_deserialize_ObjectVariant+0x52>
 801372c:	1d31      	adds	r1, r6, #4
 801372e:	4628      	mov	r0, r5
 8013730:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013734:	f7ff bbd0 	b.w	8012ed8 <uxr_deserialize_CLIENT_Representation>
 8013738:	68b1      	ldr	r1, [r6, #8]
 801373a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801373e:	4628      	mov	r0, r5
 8013740:	f004 fcd6 	bl	80180f0 <ucdr_deserialize_string>
 8013744:	4607      	mov	r7, r0
 8013746:	e77f      	b.n	8013648 <uxr_deserialize_ObjectVariant+0x44>
 8013748:	f106 0308 	add.w	r3, r6, #8
 801374c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013750:	f106 010c 	add.w	r1, r6, #12
 8013754:	4628      	mov	r0, r5
 8013756:	f7fc fe71 	bl	801043c <ucdr_deserialize_sequence_uint8_t>
 801375a:	4607      	mov	r7, r0
 801375c:	e774      	b.n	8013648 <uxr_deserialize_ObjectVariant+0x44>
 801375e:	bf00      	nop

08013760 <uxr_deserialize_BaseObjectRequest>:
 8013760:	b570      	push	{r4, r5, r6, lr}
 8013762:	2202      	movs	r2, #2
 8013764:	4605      	mov	r5, r0
 8013766:	460e      	mov	r6, r1
 8013768:	f003 fcc6 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 801376c:	1cb1      	adds	r1, r6, #2
 801376e:	4604      	mov	r4, r0
 8013770:	2202      	movs	r2, #2
 8013772:	4628      	mov	r0, r5
 8013774:	f003 fcc0 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8013778:	4020      	ands	r0, r4
 801377a:	b2c0      	uxtb	r0, r0
 801377c:	bd70      	pop	{r4, r5, r6, pc}
 801377e:	bf00      	nop

08013780 <uxr_serialize_AGENT_ActivityInfo>:
 8013780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013784:	460e      	mov	r6, r1
 8013786:	f9b1 1000 	ldrsh.w	r1, [r1]
 801378a:	4607      	mov	r7, r0
 801378c:	f004 fa84 	bl	8017c98 <ucdr_serialize_int16_t>
 8013790:	6871      	ldr	r1, [r6, #4]
 8013792:	4680      	mov	r8, r0
 8013794:	4638      	mov	r0, r7
 8013796:	f003 ff59 	bl	801764c <ucdr_serialize_uint32_t>
 801379a:	6873      	ldr	r3, [r6, #4]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d06a      	beq.n	8013876 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 80137a0:	b318      	cbz	r0, 80137ea <uxr_serialize_AGENT_ActivityInfo+0x6a>
 80137a2:	f106 0904 	add.w	r9, r6, #4
 80137a6:	2500      	movs	r5, #0
 80137a8:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 80137ac:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 80137b0:	7a21      	ldrb	r1, [r4, #8]
 80137b2:	4638      	mov	r0, r7
 80137b4:	f003 fd34 	bl	8017220 <ucdr_serialize_uint8_t>
 80137b8:	2800      	cmp	r0, #0
 80137ba:	d051      	beq.n	8013860 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 80137bc:	7a23      	ldrb	r3, [r4, #8]
 80137be:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80137c2:	00c9      	lsls	r1, r1, #3
 80137c4:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 80137c8:	2b03      	cmp	r3, #3
 80137ca:	d859      	bhi.n	8013880 <uxr_serialize_AGENT_ActivityInfo+0x100>
 80137cc:	e8df f003 	tbb	[pc, r3]
 80137d0:	02122436 	.word	0x02122436
 80137d4:	4449      	add	r1, r9
 80137d6:	4638      	mov	r0, r7
 80137d8:	6889      	ldr	r1, [r1, #8]
 80137da:	f004 fc79 	bl	80180d0 <ucdr_serialize_string>
 80137de:	6873      	ldr	r3, [r6, #4]
 80137e0:	3501      	adds	r5, #1
 80137e2:	429d      	cmp	r5, r3
 80137e4:	d240      	bcs.n	8013868 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 80137e6:	2800      	cmp	r0, #0
 80137e8:	d1de      	bne.n	80137a8 <uxr_serialize_AGENT_ActivityInfo+0x28>
 80137ea:	f04f 0800 	mov.w	r8, #0
 80137ee:	4640      	mov	r0, r8
 80137f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137f4:	3108      	adds	r1, #8
 80137f6:	4449      	add	r1, r9
 80137f8:	2210      	movs	r2, #16
 80137fa:	4638      	mov	r0, r7
 80137fc:	f003 fc18 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013800:	44aa      	add	sl, r5
 8013802:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8013806:	4604      	mov	r4, r0
 8013808:	f8da 101c 	ldr.w	r1, [sl, #28]
 801380c:	4638      	mov	r0, r7
 801380e:	f003 ff1d 	bl	801764c <ucdr_serialize_uint32_t>
 8013812:	4020      	ands	r0, r4
 8013814:	b2c0      	uxtb	r0, r0
 8013816:	e7e2      	b.n	80137de <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8013818:	3108      	adds	r1, #8
 801381a:	4449      	add	r1, r9
 801381c:	2204      	movs	r2, #4
 801381e:	4638      	mov	r0, r7
 8013820:	f003 fc06 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013824:	44aa      	add	sl, r5
 8013826:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801382a:	4604      	mov	r4, r0
 801382c:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 8013830:	4638      	mov	r0, r7
 8013832:	f003 fd21 	bl	8017278 <ucdr_serialize_uint16_t>
 8013836:	4020      	ands	r0, r4
 8013838:	b2c0      	uxtb	r0, r0
 801383a:	e7d0      	b.n	80137de <uxr_serialize_AGENT_ActivityInfo+0x5e>
 801383c:	3108      	adds	r1, #8
 801383e:	4449      	add	r1, r9
 8013840:	2202      	movs	r2, #2
 8013842:	4638      	mov	r0, r7
 8013844:	f003 fbf4 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013848:	44aa      	add	sl, r5
 801384a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801384e:	4604      	mov	r4, r0
 8013850:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8013854:	4638      	mov	r0, r7
 8013856:	f003 fce3 	bl	8017220 <ucdr_serialize_uint8_t>
 801385a:	4020      	ands	r0, r4
 801385c:	b2c0      	uxtb	r0, r0
 801385e:	e7be      	b.n	80137de <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8013860:	6873      	ldr	r3, [r6, #4]
 8013862:	3501      	adds	r5, #1
 8013864:	429d      	cmp	r5, r3
 8013866:	d3c0      	bcc.n	80137ea <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8013868:	ea08 0000 	and.w	r0, r8, r0
 801386c:	fa5f f880 	uxtb.w	r8, r0
 8013870:	4640      	mov	r0, r8
 8013872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013876:	ea08 0800 	and.w	r8, r8, r0
 801387a:	fa5f f888 	uxtb.w	r8, r8
 801387e:	e7b6      	b.n	80137ee <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8013880:	6873      	ldr	r3, [r6, #4]
 8013882:	3501      	adds	r5, #1
 8013884:	42ab      	cmp	r3, r5
 8013886:	f104 0418 	add.w	r4, r4, #24
 801388a:	d891      	bhi.n	80137b0 <uxr_serialize_AGENT_ActivityInfo+0x30>
 801388c:	e7af      	b.n	80137ee <uxr_serialize_AGENT_ActivityInfo+0x6e>
 801388e:	bf00      	nop

08013890 <uxr_serialize_ActivityInfoVariant>:
 8013890:	b570      	push	{r4, r5, r6, lr}
 8013892:	460d      	mov	r5, r1
 8013894:	7809      	ldrb	r1, [r1, #0]
 8013896:	4606      	mov	r6, r0
 8013898:	f003 fcc2 	bl	8017220 <ucdr_serialize_uint8_t>
 801389c:	b130      	cbz	r0, 80138ac <uxr_serialize_ActivityInfoVariant+0x1c>
 801389e:	782b      	ldrb	r3, [r5, #0]
 80138a0:	2b06      	cmp	r3, #6
 80138a2:	d019      	beq.n	80138d8 <uxr_serialize_ActivityInfoVariant+0x48>
 80138a4:	2b0d      	cmp	r3, #13
 80138a6:	d010      	beq.n	80138ca <uxr_serialize_ActivityInfoVariant+0x3a>
 80138a8:	2b05      	cmp	r3, #5
 80138aa:	d000      	beq.n	80138ae <uxr_serialize_ActivityInfoVariant+0x1e>
 80138ac:	bd70      	pop	{r4, r5, r6, pc}
 80138ae:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80138b2:	4630      	mov	r0, r6
 80138b4:	f004 f9f0 	bl	8017c98 <ucdr_serialize_int16_t>
 80138b8:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80138bc:	4604      	mov	r4, r0
 80138be:	4630      	mov	r0, r6
 80138c0:	f004 f91a 	bl	8017af8 <ucdr_serialize_uint64_t>
 80138c4:	4020      	ands	r0, r4
 80138c6:	b2c0      	uxtb	r0, r0
 80138c8:	bd70      	pop	{r4, r5, r6, pc}
 80138ca:	f105 0108 	add.w	r1, r5, #8
 80138ce:	4630      	mov	r0, r6
 80138d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138d4:	f7ff bf54 	b.w	8013780 <uxr_serialize_AGENT_ActivityInfo>
 80138d8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80138dc:	4630      	mov	r0, r6
 80138de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138e2:	f004 b9d9 	b.w	8017c98 <ucdr_serialize_int16_t>
 80138e6:	bf00      	nop

080138e8 <uxr_deserialize_BaseObjectReply>:
 80138e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138ec:	2202      	movs	r2, #2
 80138ee:	4606      	mov	r6, r0
 80138f0:	460f      	mov	r7, r1
 80138f2:	f003 fc01 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 80138f6:	2202      	movs	r2, #2
 80138f8:	1cb9      	adds	r1, r7, #2
 80138fa:	4605      	mov	r5, r0
 80138fc:	4630      	mov	r0, r6
 80138fe:	f003 fbfb 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8013902:	1d39      	adds	r1, r7, #4
 8013904:	4680      	mov	r8, r0
 8013906:	4630      	mov	r0, r6
 8013908:	f003 fca0 	bl	801724c <ucdr_deserialize_uint8_t>
 801390c:	1d79      	adds	r1, r7, #5
 801390e:	4604      	mov	r4, r0
 8013910:	4630      	mov	r0, r6
 8013912:	f003 fc9b 	bl	801724c <ucdr_deserialize_uint8_t>
 8013916:	ea05 0508 	and.w	r5, r5, r8
 801391a:	402c      	ands	r4, r5
 801391c:	4020      	ands	r0, r4
 801391e:	b2c0      	uxtb	r0, r0
 8013920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013924 <uxr_serialize_ReadSpecification>:
 8013924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013928:	460e      	mov	r6, r1
 801392a:	7809      	ldrb	r1, [r1, #0]
 801392c:	4607      	mov	r7, r0
 801392e:	f003 fc77 	bl	8017220 <ucdr_serialize_uint8_t>
 8013932:	7871      	ldrb	r1, [r6, #1]
 8013934:	4604      	mov	r4, r0
 8013936:	4638      	mov	r0, r7
 8013938:	f003 fc72 	bl	8017220 <ucdr_serialize_uint8_t>
 801393c:	78b1      	ldrb	r1, [r6, #2]
 801393e:	4004      	ands	r4, r0
 8013940:	4638      	mov	r0, r7
 8013942:	f003 fc3d 	bl	80171c0 <ucdr_serialize_bool>
 8013946:	78b3      	ldrb	r3, [r6, #2]
 8013948:	b2e4      	uxtb	r4, r4
 801394a:	4004      	ands	r4, r0
 801394c:	b94b      	cbnz	r3, 8013962 <uxr_serialize_ReadSpecification+0x3e>
 801394e:	7a31      	ldrb	r1, [r6, #8]
 8013950:	4638      	mov	r0, r7
 8013952:	f003 fc35 	bl	80171c0 <ucdr_serialize_bool>
 8013956:	7a33      	ldrb	r3, [r6, #8]
 8013958:	4004      	ands	r4, r0
 801395a:	b943      	cbnz	r3, 801396e <uxr_serialize_ReadSpecification+0x4a>
 801395c:	4620      	mov	r0, r4
 801395e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013962:	6871      	ldr	r1, [r6, #4]
 8013964:	4638      	mov	r0, r7
 8013966:	f004 fbb3 	bl	80180d0 <ucdr_serialize_string>
 801396a:	4004      	ands	r4, r0
 801396c:	e7ef      	b.n	801394e <uxr_serialize_ReadSpecification+0x2a>
 801396e:	8971      	ldrh	r1, [r6, #10]
 8013970:	4638      	mov	r0, r7
 8013972:	f003 fc81 	bl	8017278 <ucdr_serialize_uint16_t>
 8013976:	89b1      	ldrh	r1, [r6, #12]
 8013978:	4605      	mov	r5, r0
 801397a:	4638      	mov	r0, r7
 801397c:	f003 fc7c 	bl	8017278 <ucdr_serialize_uint16_t>
 8013980:	89f1      	ldrh	r1, [r6, #14]
 8013982:	4005      	ands	r5, r0
 8013984:	4638      	mov	r0, r7
 8013986:	f003 fc77 	bl	8017278 <ucdr_serialize_uint16_t>
 801398a:	8a31      	ldrh	r1, [r6, #16]
 801398c:	4680      	mov	r8, r0
 801398e:	4638      	mov	r0, r7
 8013990:	f003 fc72 	bl	8017278 <ucdr_serialize_uint16_t>
 8013994:	b2ed      	uxtb	r5, r5
 8013996:	4025      	ands	r5, r4
 8013998:	ea08 0505 	and.w	r5, r8, r5
 801399c:	ea00 0405 	and.w	r4, r0, r5
 80139a0:	4620      	mov	r0, r4
 80139a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139a6:	bf00      	nop

080139a8 <uxr_serialize_CREATE_CLIENT_Payload>:
 80139a8:	f7ff ba3a 	b.w	8012e20 <uxr_serialize_CLIENT_Representation>

080139ac <uxr_serialize_CREATE_Payload>:
 80139ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ae:	2202      	movs	r2, #2
 80139b0:	4606      	mov	r6, r0
 80139b2:	460d      	mov	r5, r1
 80139b4:	f003 fb3c 	bl	8017030 <ucdr_serialize_array_uint8_t>
 80139b8:	1ca9      	adds	r1, r5, #2
 80139ba:	4604      	mov	r4, r0
 80139bc:	2202      	movs	r2, #2
 80139be:	4630      	mov	r0, r6
 80139c0:	f003 fb36 	bl	8017030 <ucdr_serialize_array_uint8_t>
 80139c4:	7929      	ldrb	r1, [r5, #4]
 80139c6:	4607      	mov	r7, r0
 80139c8:	4630      	mov	r0, r6
 80139ca:	f003 fc29 	bl	8017220 <ucdr_serialize_uint8_t>
 80139ce:	b328      	cbz	r0, 8013a1c <uxr_serialize_CREATE_Payload+0x70>
 80139d0:	792b      	ldrb	r3, [r5, #4]
 80139d2:	403c      	ands	r4, r7
 80139d4:	3b01      	subs	r3, #1
 80139d6:	b2e4      	uxtb	r4, r4
 80139d8:	2b0d      	cmp	r3, #13
 80139da:	d81d      	bhi.n	8013a18 <uxr_serialize_CREATE_Payload+0x6c>
 80139dc:	e8df f003 	tbb	[pc, r3]
 80139e0:	32320753 	.word	0x32320753
 80139e4:	07070707 	.word	0x07070707
 80139e8:	2121211c 	.word	0x2121211c
 80139ec:	684c      	.short	0x684c
 80139ee:	7a29      	ldrb	r1, [r5, #8]
 80139f0:	4630      	mov	r0, r6
 80139f2:	f003 fc15 	bl	8017220 <ucdr_serialize_uint8_t>
 80139f6:	4607      	mov	r7, r0
 80139f8:	b130      	cbz	r0, 8013a08 <uxr_serialize_CREATE_Payload+0x5c>
 80139fa:	7a2b      	ldrb	r3, [r5, #8]
 80139fc:	2b02      	cmp	r3, #2
 80139fe:	d035      	beq.n	8013a6c <uxr_serialize_CREATE_Payload+0xc0>
 8013a00:	2b03      	cmp	r3, #3
 8013a02:	d02b      	beq.n	8013a5c <uxr_serialize_CREATE_Payload+0xb0>
 8013a04:	2b01      	cmp	r3, #1
 8013a06:	d031      	beq.n	8013a6c <uxr_serialize_CREATE_Payload+0xc0>
 8013a08:	f505 7104 	add.w	r1, r5, #528	; 0x210
 8013a0c:	4630      	mov	r0, r6
 8013a0e:	2202      	movs	r2, #2
 8013a10:	f003 fb0e 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013a14:	4038      	ands	r0, r7
 8013a16:	4004      	ands	r4, r0
 8013a18:	4620      	mov	r0, r4
 8013a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a1c:	2400      	movs	r4, #0
 8013a1e:	4620      	mov	r0, r4
 8013a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a22:	7a29      	ldrb	r1, [r5, #8]
 8013a24:	4630      	mov	r0, r6
 8013a26:	f003 fbfb 	bl	8017220 <ucdr_serialize_uint8_t>
 8013a2a:	2800      	cmp	r0, #0
 8013a2c:	d0f6      	beq.n	8013a1c <uxr_serialize_CREATE_Payload+0x70>
 8013a2e:	7a2b      	ldrb	r3, [r5, #8]
 8013a30:	2b01      	cmp	r3, #1
 8013a32:	d001      	beq.n	8013a38 <uxr_serialize_CREATE_Payload+0x8c>
 8013a34:	2b02      	cmp	r3, #2
 8013a36:	d1ef      	bne.n	8013a18 <uxr_serialize_CREATE_Payload+0x6c>
 8013a38:	68e9      	ldr	r1, [r5, #12]
 8013a3a:	4630      	mov	r0, r6
 8013a3c:	f004 fb48 	bl	80180d0 <ucdr_serialize_string>
 8013a40:	4004      	ands	r4, r0
 8013a42:	e7e9      	b.n	8013a18 <uxr_serialize_CREATE_Payload+0x6c>
 8013a44:	7a29      	ldrb	r1, [r5, #8]
 8013a46:	4630      	mov	r0, r6
 8013a48:	f003 fbea 	bl	8017220 <ucdr_serialize_uint8_t>
 8013a4c:	4607      	mov	r7, r0
 8013a4e:	2800      	cmp	r0, #0
 8013a50:	d0da      	beq.n	8013a08 <uxr_serialize_CREATE_Payload+0x5c>
 8013a52:	7a2b      	ldrb	r3, [r5, #8]
 8013a54:	2b02      	cmp	r3, #2
 8013a56:	d009      	beq.n	8013a6c <uxr_serialize_CREATE_Payload+0xc0>
 8013a58:	2b03      	cmp	r3, #3
 8013a5a:	d1d5      	bne.n	8013a08 <uxr_serialize_CREATE_Payload+0x5c>
 8013a5c:	68ea      	ldr	r2, [r5, #12]
 8013a5e:	f105 0110 	add.w	r1, r5, #16
 8013a62:	4630      	mov	r0, r6
 8013a64:	f7fc fcd8 	bl	8010418 <ucdr_serialize_sequence_uint8_t>
 8013a68:	4607      	mov	r7, r0
 8013a6a:	e7cd      	b.n	8013a08 <uxr_serialize_CREATE_Payload+0x5c>
 8013a6c:	68e9      	ldr	r1, [r5, #12]
 8013a6e:	4630      	mov	r0, r6
 8013a70:	f004 fb2e 	bl	80180d0 <ucdr_serialize_string>
 8013a74:	4607      	mov	r7, r0
 8013a76:	e7c7      	b.n	8013a08 <uxr_serialize_CREATE_Payload+0x5c>
 8013a78:	f105 0108 	add.w	r1, r5, #8
 8013a7c:	4630      	mov	r0, r6
 8013a7e:	f7ff fa95 	bl	8012fac <uxr_serialize_AGENT_Representation>
 8013a82:	4004      	ands	r4, r0
 8013a84:	e7c8      	b.n	8013a18 <uxr_serialize_CREATE_Payload+0x6c>
 8013a86:	7a29      	ldrb	r1, [r5, #8]
 8013a88:	4630      	mov	r0, r6
 8013a8a:	f003 fbc9 	bl	8017220 <ucdr_serialize_uint8_t>
 8013a8e:	4607      	mov	r7, r0
 8013a90:	b130      	cbz	r0, 8013aa0 <uxr_serialize_CREATE_Payload+0xf4>
 8013a92:	7a2b      	ldrb	r3, [r5, #8]
 8013a94:	2b02      	cmp	r3, #2
 8013a96:	d012      	beq.n	8013abe <uxr_serialize_CREATE_Payload+0x112>
 8013a98:	2b03      	cmp	r3, #3
 8013a9a:	d016      	beq.n	8013aca <uxr_serialize_CREATE_Payload+0x11e>
 8013a9c:	2b01      	cmp	r3, #1
 8013a9e:	d00e      	beq.n	8013abe <uxr_serialize_CREATE_Payload+0x112>
 8013aa0:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	; 0x210
 8013aa4:	4630      	mov	r0, r6
 8013aa6:	f004 f8f7 	bl	8017c98 <ucdr_serialize_int16_t>
 8013aaa:	4038      	ands	r0, r7
 8013aac:	4004      	ands	r4, r0
 8013aae:	e7b3      	b.n	8013a18 <uxr_serialize_CREATE_Payload+0x6c>
 8013ab0:	f105 0108 	add.w	r1, r5, #8
 8013ab4:	4630      	mov	r0, r6
 8013ab6:	f7ff f9b3 	bl	8012e20 <uxr_serialize_CLIENT_Representation>
 8013aba:	4004      	ands	r4, r0
 8013abc:	e7ac      	b.n	8013a18 <uxr_serialize_CREATE_Payload+0x6c>
 8013abe:	68e9      	ldr	r1, [r5, #12]
 8013ac0:	4630      	mov	r0, r6
 8013ac2:	f004 fb05 	bl	80180d0 <ucdr_serialize_string>
 8013ac6:	4607      	mov	r7, r0
 8013ac8:	e7ea      	b.n	8013aa0 <uxr_serialize_CREATE_Payload+0xf4>
 8013aca:	68ea      	ldr	r2, [r5, #12]
 8013acc:	f105 0110 	add.w	r1, r5, #16
 8013ad0:	4630      	mov	r0, r6
 8013ad2:	f7fc fca1 	bl	8010418 <ucdr_serialize_sequence_uint8_t>
 8013ad6:	4607      	mov	r7, r0
 8013ad8:	e7e2      	b.n	8013aa0 <uxr_serialize_CREATE_Payload+0xf4>
 8013ada:	bf00      	nop

08013adc <uxr_deserialize_GET_INFO_Payload>:
 8013adc:	b570      	push	{r4, r5, r6, lr}
 8013ade:	2202      	movs	r2, #2
 8013ae0:	4605      	mov	r5, r0
 8013ae2:	460e      	mov	r6, r1
 8013ae4:	f003 fb08 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8013ae8:	1cb1      	adds	r1, r6, #2
 8013aea:	2202      	movs	r2, #2
 8013aec:	4604      	mov	r4, r0
 8013aee:	4628      	mov	r0, r5
 8013af0:	f003 fb02 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8013af4:	1d31      	adds	r1, r6, #4
 8013af6:	4004      	ands	r4, r0
 8013af8:	4628      	mov	r0, r5
 8013afa:	f003 fed7 	bl	80178ac <ucdr_deserialize_uint32_t>
 8013afe:	b2e4      	uxtb	r4, r4
 8013b00:	4020      	ands	r0, r4
 8013b02:	bd70      	pop	{r4, r5, r6, pc}

08013b04 <uxr_serialize_DELETE_Payload>:
 8013b04:	b570      	push	{r4, r5, r6, lr}
 8013b06:	2202      	movs	r2, #2
 8013b08:	4605      	mov	r5, r0
 8013b0a:	460e      	mov	r6, r1
 8013b0c:	f003 fa90 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013b10:	1cb1      	adds	r1, r6, #2
 8013b12:	4604      	mov	r4, r0
 8013b14:	2202      	movs	r2, #2
 8013b16:	4628      	mov	r0, r5
 8013b18:	f003 fa8a 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013b1c:	4020      	ands	r0, r4
 8013b1e:	b2c0      	uxtb	r0, r0
 8013b20:	bd70      	pop	{r4, r5, r6, pc}
 8013b22:	bf00      	nop

08013b24 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b28:	4606      	mov	r6, r0
 8013b2a:	460f      	mov	r7, r1
 8013b2c:	f003 fb8e 	bl	801724c <ucdr_deserialize_uint8_t>
 8013b30:	1c79      	adds	r1, r7, #1
 8013b32:	4605      	mov	r5, r0
 8013b34:	4630      	mov	r0, r6
 8013b36:	f003 fb89 	bl	801724c <ucdr_deserialize_uint8_t>
 8013b3a:	1d39      	adds	r1, r7, #4
 8013b3c:	4681      	mov	r9, r0
 8013b3e:	2204      	movs	r2, #4
 8013b40:	4630      	mov	r0, r6
 8013b42:	f003 fad9 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8013b46:	f107 0108 	add.w	r1, r7, #8
 8013b4a:	4604      	mov	r4, r0
 8013b4c:	2202      	movs	r2, #2
 8013b4e:	4630      	mov	r0, r6
 8013b50:	f003 fad2 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8013b54:	f107 010a 	add.w	r1, r7, #10
 8013b58:	4680      	mov	r8, r0
 8013b5a:	2202      	movs	r2, #2
 8013b5c:	4630      	mov	r0, r6
 8013b5e:	f003 facb 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8013b62:	ea05 0509 	and.w	r5, r5, r9
 8013b66:	b2ed      	uxtb	r5, r5
 8013b68:	402c      	ands	r4, r5
 8013b6a:	f107 010c 	add.w	r1, r7, #12
 8013b6e:	4605      	mov	r5, r0
 8013b70:	4630      	mov	r0, r6
 8013b72:	f003 fb3b 	bl	80171ec <ucdr_deserialize_bool>
 8013b76:	ea08 0404 	and.w	r4, r8, r4
 8013b7a:	4025      	ands	r5, r4
 8013b7c:	4028      	ands	r0, r5
 8013b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b82:	bf00      	nop

08013b84 <uxr_deserialize_STATUS_Payload>:
 8013b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b88:	2202      	movs	r2, #2
 8013b8a:	4606      	mov	r6, r0
 8013b8c:	460f      	mov	r7, r1
 8013b8e:	f003 fab3 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8013b92:	2202      	movs	r2, #2
 8013b94:	1cb9      	adds	r1, r7, #2
 8013b96:	4605      	mov	r5, r0
 8013b98:	4630      	mov	r0, r6
 8013b9a:	f003 faad 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8013b9e:	1d39      	adds	r1, r7, #4
 8013ba0:	4680      	mov	r8, r0
 8013ba2:	4630      	mov	r0, r6
 8013ba4:	f003 fb52 	bl	801724c <ucdr_deserialize_uint8_t>
 8013ba8:	1d79      	adds	r1, r7, #5
 8013baa:	4604      	mov	r4, r0
 8013bac:	4630      	mov	r0, r6
 8013bae:	f003 fb4d 	bl	801724c <ucdr_deserialize_uint8_t>
 8013bb2:	ea05 0508 	and.w	r5, r5, r8
 8013bb6:	402c      	ands	r4, r5
 8013bb8:	4020      	ands	r0, r4
 8013bba:	b2c0      	uxtb	r0, r0
 8013bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013bc0 <uxr_serialize_INFO_Payload>:
 8013bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bc4:	2202      	movs	r2, #2
 8013bc6:	460c      	mov	r4, r1
 8013bc8:	4605      	mov	r5, r0
 8013bca:	f003 fa31 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013bce:	2202      	movs	r2, #2
 8013bd0:	4680      	mov	r8, r0
 8013bd2:	1ca1      	adds	r1, r4, #2
 8013bd4:	4628      	mov	r0, r5
 8013bd6:	f003 fa2b 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013bda:	7921      	ldrb	r1, [r4, #4]
 8013bdc:	4607      	mov	r7, r0
 8013bde:	4628      	mov	r0, r5
 8013be0:	f003 fb1e 	bl	8017220 <ucdr_serialize_uint8_t>
 8013be4:	7961      	ldrb	r1, [r4, #5]
 8013be6:	4606      	mov	r6, r0
 8013be8:	4628      	mov	r0, r5
 8013bea:	f003 fb19 	bl	8017220 <ucdr_serialize_uint8_t>
 8013bee:	ea08 0807 	and.w	r8, r8, r7
 8013bf2:	ea06 0608 	and.w	r6, r6, r8
 8013bf6:	4006      	ands	r6, r0
 8013bf8:	7a21      	ldrb	r1, [r4, #8]
 8013bfa:	4628      	mov	r0, r5
 8013bfc:	f003 fae0 	bl	80171c0 <ucdr_serialize_bool>
 8013c00:	7a23      	ldrb	r3, [r4, #8]
 8013c02:	b2f7      	uxtb	r7, r6
 8013c04:	4606      	mov	r6, r0
 8013c06:	b96b      	cbnz	r3, 8013c24 <uxr_serialize_INFO_Payload+0x64>
 8013c08:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8013c0c:	4628      	mov	r0, r5
 8013c0e:	f003 fad7 	bl	80171c0 <ucdr_serialize_bool>
 8013c12:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8013c16:	4030      	ands	r0, r6
 8013c18:	b2c6      	uxtb	r6, r0
 8013c1a:	b983      	cbnz	r3, 8013c3e <uxr_serialize_INFO_Payload+0x7e>
 8013c1c:	ea06 0007 	and.w	r0, r6, r7
 8013c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c24:	7b21      	ldrb	r1, [r4, #12]
 8013c26:	4628      	mov	r0, r5
 8013c28:	f003 fafa 	bl	8017220 <ucdr_serialize_uint8_t>
 8013c2c:	b188      	cbz	r0, 8013c52 <uxr_serialize_INFO_Payload+0x92>
 8013c2e:	f104 010c 	add.w	r1, r4, #12
 8013c32:	4628      	mov	r0, r5
 8013c34:	f7ff fa06 	bl	8013044 <uxr_serialize_ObjectVariant.part.0>
 8013c38:	4030      	ands	r0, r6
 8013c3a:	b2c6      	uxtb	r6, r0
 8013c3c:	e7e4      	b.n	8013c08 <uxr_serialize_INFO_Payload+0x48>
 8013c3e:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8013c42:	4628      	mov	r0, r5
 8013c44:	f7ff fe24 	bl	8013890 <uxr_serialize_ActivityInfoVariant>
 8013c48:	4006      	ands	r6, r0
 8013c4a:	ea06 0007 	and.w	r0, r6, r7
 8013c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c52:	4606      	mov	r6, r0
 8013c54:	e7d8      	b.n	8013c08 <uxr_serialize_INFO_Payload+0x48>
 8013c56:	bf00      	nop

08013c58 <uxr_serialize_READ_DATA_Payload>:
 8013c58:	b570      	push	{r4, r5, r6, lr}
 8013c5a:	2202      	movs	r2, #2
 8013c5c:	4605      	mov	r5, r0
 8013c5e:	460e      	mov	r6, r1
 8013c60:	f003 f9e6 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013c64:	1cb1      	adds	r1, r6, #2
 8013c66:	2202      	movs	r2, #2
 8013c68:	4604      	mov	r4, r0
 8013c6a:	4628      	mov	r0, r5
 8013c6c:	f003 f9e0 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013c70:	1d31      	adds	r1, r6, #4
 8013c72:	4004      	ands	r4, r0
 8013c74:	4628      	mov	r0, r5
 8013c76:	f7ff fe55 	bl	8013924 <uxr_serialize_ReadSpecification>
 8013c7a:	b2e4      	uxtb	r4, r4
 8013c7c:	4020      	ands	r0, r4
 8013c7e:	bd70      	pop	{r4, r5, r6, pc}

08013c80 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013c80:	b570      	push	{r4, r5, r6, lr}
 8013c82:	2202      	movs	r2, #2
 8013c84:	4605      	mov	r5, r0
 8013c86:	460e      	mov	r6, r1
 8013c88:	f003 f9d2 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013c8c:	1cb1      	adds	r1, r6, #2
 8013c8e:	4604      	mov	r4, r0
 8013c90:	2202      	movs	r2, #2
 8013c92:	4628      	mov	r0, r5
 8013c94:	f003 f9cc 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013c98:	4020      	ands	r0, r4
 8013c9a:	b2c0      	uxtb	r0, r0
 8013c9c:	bd70      	pop	{r4, r5, r6, pc}
 8013c9e:	bf00      	nop

08013ca0 <uxr_serialize_ACKNACK_Payload>:
 8013ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ca2:	460f      	mov	r7, r1
 8013ca4:	460e      	mov	r6, r1
 8013ca6:	f837 1b02 	ldrh.w	r1, [r7], #2
 8013caa:	4605      	mov	r5, r0
 8013cac:	f003 fae4 	bl	8017278 <ucdr_serialize_uint16_t>
 8013cb0:	4639      	mov	r1, r7
 8013cb2:	2202      	movs	r2, #2
 8013cb4:	4604      	mov	r4, r0
 8013cb6:	4628      	mov	r0, r5
 8013cb8:	f003 f9ba 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013cbc:	7931      	ldrb	r1, [r6, #4]
 8013cbe:	4004      	ands	r4, r0
 8013cc0:	4628      	mov	r0, r5
 8013cc2:	f003 faad 	bl	8017220 <ucdr_serialize_uint8_t>
 8013cc6:	b2e4      	uxtb	r4, r4
 8013cc8:	4020      	ands	r0, r4
 8013cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013ccc <uxr_deserialize_ACKNACK_Payload>:
 8013ccc:	b570      	push	{r4, r5, r6, lr}
 8013cce:	4605      	mov	r5, r0
 8013cd0:	460e      	mov	r6, r1
 8013cd2:	f003 fbd1 	bl	8017478 <ucdr_deserialize_uint16_t>
 8013cd6:	1cb1      	adds	r1, r6, #2
 8013cd8:	2202      	movs	r2, #2
 8013cda:	4604      	mov	r4, r0
 8013cdc:	4628      	mov	r0, r5
 8013cde:	f003 fa0b 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8013ce2:	1d31      	adds	r1, r6, #4
 8013ce4:	4004      	ands	r4, r0
 8013ce6:	4628      	mov	r0, r5
 8013ce8:	f003 fab0 	bl	801724c <ucdr_deserialize_uint8_t>
 8013cec:	b2e4      	uxtb	r4, r4
 8013cee:	4020      	ands	r0, r4
 8013cf0:	bd70      	pop	{r4, r5, r6, pc}
 8013cf2:	bf00      	nop

08013cf4 <uxr_serialize_HEARTBEAT_Payload>:
 8013cf4:	b570      	push	{r4, r5, r6, lr}
 8013cf6:	460d      	mov	r5, r1
 8013cf8:	8809      	ldrh	r1, [r1, #0]
 8013cfa:	4606      	mov	r6, r0
 8013cfc:	f003 fabc 	bl	8017278 <ucdr_serialize_uint16_t>
 8013d00:	8869      	ldrh	r1, [r5, #2]
 8013d02:	4604      	mov	r4, r0
 8013d04:	4630      	mov	r0, r6
 8013d06:	f003 fab7 	bl	8017278 <ucdr_serialize_uint16_t>
 8013d0a:	7929      	ldrb	r1, [r5, #4]
 8013d0c:	4004      	ands	r4, r0
 8013d0e:	4630      	mov	r0, r6
 8013d10:	f003 fa86 	bl	8017220 <ucdr_serialize_uint8_t>
 8013d14:	b2e4      	uxtb	r4, r4
 8013d16:	4020      	ands	r0, r4
 8013d18:	bd70      	pop	{r4, r5, r6, pc}
 8013d1a:	bf00      	nop

08013d1c <uxr_deserialize_HEARTBEAT_Payload>:
 8013d1c:	b570      	push	{r4, r5, r6, lr}
 8013d1e:	4605      	mov	r5, r0
 8013d20:	460e      	mov	r6, r1
 8013d22:	f003 fba9 	bl	8017478 <ucdr_deserialize_uint16_t>
 8013d26:	1cb1      	adds	r1, r6, #2
 8013d28:	4604      	mov	r4, r0
 8013d2a:	4628      	mov	r0, r5
 8013d2c:	f003 fba4 	bl	8017478 <ucdr_deserialize_uint16_t>
 8013d30:	1d31      	adds	r1, r6, #4
 8013d32:	4004      	ands	r4, r0
 8013d34:	4628      	mov	r0, r5
 8013d36:	f003 fa89 	bl	801724c <ucdr_deserialize_uint8_t>
 8013d3a:	b2e4      	uxtb	r4, r4
 8013d3c:	4020      	ands	r0, r4
 8013d3e:	bd70      	pop	{r4, r5, r6, pc}

08013d40 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8013d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d44:	4605      	mov	r5, r0
 8013d46:	460e      	mov	r6, r1
 8013d48:	f004 f932 	bl	8017fb0 <ucdr_deserialize_int32_t>
 8013d4c:	1d31      	adds	r1, r6, #4
 8013d4e:	4607      	mov	r7, r0
 8013d50:	4628      	mov	r0, r5
 8013d52:	f003 fdab 	bl	80178ac <ucdr_deserialize_uint32_t>
 8013d56:	f106 0108 	add.w	r1, r6, #8
 8013d5a:	4680      	mov	r8, r0
 8013d5c:	4628      	mov	r0, r5
 8013d5e:	f004 f927 	bl	8017fb0 <ucdr_deserialize_int32_t>
 8013d62:	f106 010c 	add.w	r1, r6, #12
 8013d66:	4604      	mov	r4, r0
 8013d68:	4628      	mov	r0, r5
 8013d6a:	f003 fd9f 	bl	80178ac <ucdr_deserialize_uint32_t>
 8013d6e:	ea07 0708 	and.w	r7, r7, r8
 8013d72:	403c      	ands	r4, r7
 8013d74:	f106 0110 	add.w	r1, r6, #16
 8013d78:	4004      	ands	r4, r0
 8013d7a:	4628      	mov	r0, r5
 8013d7c:	f004 f918 	bl	8017fb0 <ucdr_deserialize_int32_t>
 8013d80:	f106 0114 	add.w	r1, r6, #20
 8013d84:	4603      	mov	r3, r0
 8013d86:	4628      	mov	r0, r5
 8013d88:	461d      	mov	r5, r3
 8013d8a:	f003 fd8f 	bl	80178ac <ucdr_deserialize_uint32_t>
 8013d8e:	b2e4      	uxtb	r4, r4
 8013d90:	402c      	ands	r4, r5
 8013d92:	4020      	ands	r0, r4
 8013d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013d98 <uxr_serialize_SampleIdentity>:
 8013d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d9c:	220c      	movs	r2, #12
 8013d9e:	4604      	mov	r4, r0
 8013da0:	460d      	mov	r5, r1
 8013da2:	f003 f945 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013da6:	2203      	movs	r2, #3
 8013da8:	f105 010c 	add.w	r1, r5, #12
 8013dac:	4607      	mov	r7, r0
 8013dae:	4620      	mov	r0, r4
 8013db0:	f003 f93e 	bl	8017030 <ucdr_serialize_array_uint8_t>
 8013db4:	7be9      	ldrb	r1, [r5, #15]
 8013db6:	4680      	mov	r8, r0
 8013db8:	4620      	mov	r0, r4
 8013dba:	f003 fa31 	bl	8017220 <ucdr_serialize_uint8_t>
 8013dbe:	6929      	ldr	r1, [r5, #16]
 8013dc0:	4606      	mov	r6, r0
 8013dc2:	4620      	mov	r0, r4
 8013dc4:	f004 f85c 	bl	8017e80 <ucdr_serialize_int32_t>
 8013dc8:	6969      	ldr	r1, [r5, #20]
 8013dca:	4603      	mov	r3, r0
 8013dcc:	4620      	mov	r0, r4
 8013dce:	ea07 0708 	and.w	r7, r7, r8
 8013dd2:	461c      	mov	r4, r3
 8013dd4:	f003 fc3a 	bl	801764c <ucdr_serialize_uint32_t>
 8013dd8:	403e      	ands	r6, r7
 8013dda:	4034      	ands	r4, r6
 8013ddc:	4020      	ands	r0, r4
 8013dde:	b2c0      	uxtb	r0, r0
 8013de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013de4 <uxr_deserialize_SampleIdentity>:
 8013de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013de8:	220c      	movs	r2, #12
 8013dea:	4604      	mov	r4, r0
 8013dec:	460d      	mov	r5, r1
 8013dee:	f003 f983 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8013df2:	2203      	movs	r2, #3
 8013df4:	f105 010c 	add.w	r1, r5, #12
 8013df8:	4607      	mov	r7, r0
 8013dfa:	4620      	mov	r0, r4
 8013dfc:	f003 f97c 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8013e00:	f105 010f 	add.w	r1, r5, #15
 8013e04:	4680      	mov	r8, r0
 8013e06:	4620      	mov	r0, r4
 8013e08:	f003 fa20 	bl	801724c <ucdr_deserialize_uint8_t>
 8013e0c:	f105 0110 	add.w	r1, r5, #16
 8013e10:	4606      	mov	r6, r0
 8013e12:	4620      	mov	r0, r4
 8013e14:	f004 f8cc 	bl	8017fb0 <ucdr_deserialize_int32_t>
 8013e18:	f105 0114 	add.w	r1, r5, #20
 8013e1c:	4603      	mov	r3, r0
 8013e1e:	4620      	mov	r0, r4
 8013e20:	ea07 0708 	and.w	r7, r7, r8
 8013e24:	461c      	mov	r4, r3
 8013e26:	f003 fd41 	bl	80178ac <ucdr_deserialize_uint32_t>
 8013e2a:	403e      	ands	r6, r7
 8013e2c:	4034      	ands	r4, r6
 8013e2e:	4020      	ands	r0, r4
 8013e30:	b2c0      	uxtb	r0, r0
 8013e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e36:	bf00      	nop

08013e38 <rcl_client_get_rmw_handle>:
 8013e38:	b110      	cbz	r0, 8013e40 <rcl_client_get_rmw_handle+0x8>
 8013e3a:	6800      	ldr	r0, [r0, #0]
 8013e3c:	b100      	cbz	r0, 8013e40 <rcl_client_get_rmw_handle+0x8>
 8013e3e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8013e40:	4770      	bx	lr
 8013e42:	bf00      	nop

08013e44 <rcl_take_response>:
 8013e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e46:	460e      	mov	r6, r1
 8013e48:	460c      	mov	r4, r1
 8013e4a:	4607      	mov	r7, r0
 8013e4c:	4694      	mov	ip, r2
 8013e4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013e50:	b08d      	sub	sp, #52	; 0x34
 8013e52:	ad06      	add	r5, sp, #24
 8013e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013e56:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013e5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8013e5e:	b337      	cbz	r7, 8013eae <rcl_take_response+0x6a>
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	b323      	cbz	r3, 8013eae <rcl_take_response+0x6a>
 8013e64:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8013e66:	b310      	cbz	r0, 8013eae <rcl_take_response+0x6a>
 8013e68:	4662      	mov	r2, ip
 8013e6a:	b31a      	cbz	r2, 8013eb4 <rcl_take_response+0x70>
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	2600      	movs	r6, #0
 8013e70:	2700      	movs	r7, #0
 8013e72:	f88d 3007 	strb.w	r3, [sp, #7]
 8013e76:	a902      	add	r1, sp, #8
 8013e78:	f10d 0307 	add.w	r3, sp, #7
 8013e7c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8013e80:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013e84:	f002 fe24 	bl	8016ad0 <rmw_take_response>
 8013e88:	4606      	mov	r6, r0
 8013e8a:	b9a8      	cbnz	r0, 8013eb8 <rcl_take_response+0x74>
 8013e8c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013e90:	f240 13f5 	movw	r3, #501	; 0x1f5
 8013e94:	2a00      	cmp	r2, #0
 8013e96:	bf08      	it	eq
 8013e98:	461e      	moveq	r6, r3
 8013e9a:	ad06      	add	r5, sp, #24
 8013e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ea0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013ea4:	e884 0003 	stmia.w	r4, {r0, r1}
 8013ea8:	4630      	mov	r0, r6
 8013eaa:	b00d      	add	sp, #52	; 0x34
 8013eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013eae:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8013eb2:	e7f2      	b.n	8013e9a <rcl_take_response+0x56>
 8013eb4:	260b      	movs	r6, #11
 8013eb6:	e7f0      	b.n	8013e9a <rcl_take_response+0x56>
 8013eb8:	2601      	movs	r6, #1
 8013eba:	e7ee      	b.n	8013e9a <rcl_take_response+0x56>

08013ebc <rcl_convert_rmw_ret_to_rcl_ret>:
 8013ebc:	280b      	cmp	r0, #11
 8013ebe:	dc0d      	bgt.n	8013edc <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8013ec0:	2800      	cmp	r0, #0
 8013ec2:	db09      	blt.n	8013ed8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013ec4:	280b      	cmp	r0, #11
 8013ec6:	d807      	bhi.n	8013ed8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8013ec8:	e8df f000 	tbb	[pc, r0]
 8013ecc:	07060607 	.word	0x07060607
 8013ed0:	06060606 	.word	0x06060606
 8013ed4:	07070606 	.word	0x07070606
 8013ed8:	2001      	movs	r0, #1
 8013eda:	4770      	bx	lr
 8013edc:	28cb      	cmp	r0, #203	; 0xcb
 8013ede:	bf18      	it	ne
 8013ee0:	2001      	movne	r0, #1
 8013ee2:	4770      	bx	lr

08013ee4 <rcl_get_zero_initialized_context>:
 8013ee4:	4a03      	ldr	r2, [pc, #12]	; (8013ef4 <rcl_get_zero_initialized_context+0x10>)
 8013ee6:	4603      	mov	r3, r0
 8013ee8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013eec:	e883 0003 	stmia.w	r3, {r0, r1}
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	4770      	bx	lr
 8013ef4:	0801e258 	.word	0x0801e258

08013ef8 <rcl_context_is_valid>:
 8013ef8:	b118      	cbz	r0, 8013f02 <rcl_context_is_valid+0xa>
 8013efa:	6840      	ldr	r0, [r0, #4]
 8013efc:	3800      	subs	r0, #0
 8013efe:	bf18      	it	ne
 8013f00:	2001      	movne	r0, #1
 8013f02:	4770      	bx	lr

08013f04 <__cleanup_context>:
 8013f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f08:	4606      	mov	r6, r0
 8013f0a:	6800      	ldr	r0, [r0, #0]
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	6073      	str	r3, [r6, #4]
 8013f10:	2800      	cmp	r0, #0
 8013f12:	d04d      	beq.n	8013fb0 <__cleanup_context+0xac>
 8013f14:	6947      	ldr	r7, [r0, #20]
 8013f16:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8013f1a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8013f1e:	b137      	cbz	r7, 8013f2e <__cleanup_context+0x2a>
 8013f20:	3014      	adds	r0, #20
 8013f22:	f7f9 fe37 	bl	800db94 <rcl_init_options_fini>
 8013f26:	4607      	mov	r7, r0
 8013f28:	2800      	cmp	r0, #0
 8013f2a:	d148      	bne.n	8013fbe <__cleanup_context+0xba>
 8013f2c:	6830      	ldr	r0, [r6, #0]
 8013f2e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013f30:	b143      	cbz	r3, 8013f44 <__cleanup_context+0x40>
 8013f32:	3028      	adds	r0, #40	; 0x28
 8013f34:	f7fb f972 	bl	800f21c <rmw_context_fini>
 8013f38:	b118      	cbz	r0, 8013f42 <__cleanup_context+0x3e>
 8013f3a:	2f00      	cmp	r7, #0
 8013f3c:	d042      	beq.n	8013fc4 <__cleanup_context+0xc0>
 8013f3e:	f7fa fd11 	bl	800e964 <rcutils_reset_error>
 8013f42:	6830      	ldr	r0, [r6, #0]
 8013f44:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8013f48:	f1bc 0f00 	cmp.w	ip, #0
 8013f4c:	d01c      	beq.n	8013f88 <__cleanup_context+0x84>
 8013f4e:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8013f52:	2a01      	cmp	r2, #1
 8013f54:	f173 0100 	sbcs.w	r1, r3, #0
 8013f58:	db12      	blt.n	8013f80 <__cleanup_context+0x7c>
 8013f5a:	2400      	movs	r4, #0
 8013f5c:	2500      	movs	r5, #0
 8013f5e:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8013f62:	4649      	mov	r1, r9
 8013f64:	b1c0      	cbz	r0, 8013f98 <__cleanup_context+0x94>
 8013f66:	47c0      	blx	r8
 8013f68:	6831      	ldr	r1, [r6, #0]
 8013f6a:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8013f6e:	3401      	adds	r4, #1
 8013f70:	f145 0500 	adc.w	r5, r5, #0
 8013f74:	4294      	cmp	r4, r2
 8013f76:	f8d1 c020 	ldr.w	ip, [r1, #32]
 8013f7a:	eb75 0103 	sbcs.w	r1, r5, r3
 8013f7e:	dbee      	blt.n	8013f5e <__cleanup_context+0x5a>
 8013f80:	4660      	mov	r0, ip
 8013f82:	4649      	mov	r1, r9
 8013f84:	47c0      	blx	r8
 8013f86:	6830      	ldr	r0, [r6, #0]
 8013f88:	4649      	mov	r1, r9
 8013f8a:	47c0      	blx	r8
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	e9c6 3300 	strd	r3, r3, [r6]
 8013f92:	4638      	mov	r0, r7
 8013f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f98:	3401      	adds	r4, #1
 8013f9a:	f145 0500 	adc.w	r5, r5, #0
 8013f9e:	4294      	cmp	r4, r2
 8013fa0:	eb75 0103 	sbcs.w	r1, r5, r3
 8013fa4:	dbdb      	blt.n	8013f5e <__cleanup_context+0x5a>
 8013fa6:	4660      	mov	r0, ip
 8013fa8:	4649      	mov	r1, r9
 8013faa:	47c0      	blx	r8
 8013fac:	6830      	ldr	r0, [r6, #0]
 8013fae:	e7eb      	b.n	8013f88 <__cleanup_context+0x84>
 8013fb0:	4607      	mov	r7, r0
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	e9c6 3300 	strd	r3, r3, [r6]
 8013fb8:	4638      	mov	r0, r7
 8013fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fbe:	f7fa fcd1 	bl	800e964 <rcutils_reset_error>
 8013fc2:	e7b3      	b.n	8013f2c <__cleanup_context+0x28>
 8013fc4:	f7ff ff7a 	bl	8013ebc <rcl_convert_rmw_ret_to_rcl_ret>
 8013fc8:	4607      	mov	r7, r0
 8013fca:	e7b8      	b.n	8013f3e <__cleanup_context+0x3a>

08013fcc <rcl_expand_topic_name>:
 8013fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fd0:	b08b      	sub	sp, #44	; 0x2c
 8013fd2:	9306      	str	r3, [sp, #24]
 8013fd4:	2800      	cmp	r0, #0
 8013fd6:	f000 80d2 	beq.w	801417e <rcl_expand_topic_name+0x1b2>
 8013fda:	460e      	mov	r6, r1
 8013fdc:	2900      	cmp	r1, #0
 8013fde:	f000 80ce 	beq.w	801417e <rcl_expand_topic_name+0x1b2>
 8013fe2:	4617      	mov	r7, r2
 8013fe4:	2a00      	cmp	r2, #0
 8013fe6:	f000 80ca 	beq.w	801417e <rcl_expand_topic_name+0x1b2>
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	f000 80c7 	beq.w	801417e <rcl_expand_topic_name+0x1b2>
 8013ff0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	f000 80c3 	beq.w	801417e <rcl_expand_topic_name+0x1b2>
 8013ff8:	a909      	add	r1, sp, #36	; 0x24
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	4680      	mov	r8, r0
 8013ffe:	f001 f8f5 	bl	80151ec <rcl_validate_topic_name>
 8014002:	4604      	mov	r4, r0
 8014004:	2800      	cmp	r0, #0
 8014006:	f040 80b6 	bne.w	8014176 <rcl_expand_topic_name+0x1aa>
 801400a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801400c:	2b00      	cmp	r3, #0
 801400e:	f040 80bf 	bne.w	8014190 <rcl_expand_topic_name+0x1c4>
 8014012:	4602      	mov	r2, r0
 8014014:	a909      	add	r1, sp, #36	; 0x24
 8014016:	4630      	mov	r0, r6
 8014018:	f002 fa6a 	bl	80164f0 <rmw_validate_node_name>
 801401c:	2800      	cmp	r0, #0
 801401e:	f040 80b3 	bne.w	8014188 <rcl_expand_topic_name+0x1bc>
 8014022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014024:	2a00      	cmp	r2, #0
 8014026:	f040 80b8 	bne.w	801419a <rcl_expand_topic_name+0x1ce>
 801402a:	a909      	add	r1, sp, #36	; 0x24
 801402c:	4638      	mov	r0, r7
 801402e:	f002 fa41 	bl	80164b4 <rmw_validate_namespace>
 8014032:	2800      	cmp	r0, #0
 8014034:	f040 80a8 	bne.w	8014188 <rcl_expand_topic_name+0x1bc>
 8014038:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801403a:	2c00      	cmp	r4, #0
 801403c:	f040 80f6 	bne.w	801422c <rcl_expand_topic_name+0x260>
 8014040:	217b      	movs	r1, #123	; 0x7b
 8014042:	4640      	mov	r0, r8
 8014044:	f006 f9e3 	bl	801a40e <strchr>
 8014048:	f898 3000 	ldrb.w	r3, [r8]
 801404c:	2b2f      	cmp	r3, #47	; 0x2f
 801404e:	4605      	mov	r5, r0
 8014050:	f000 80c4 	beq.w	80141dc <rcl_expand_topic_name+0x210>
 8014054:	2b7e      	cmp	r3, #126	; 0x7e
 8014056:	d16f      	bne.n	8014138 <rcl_expand_topic_name+0x16c>
 8014058:	4638      	mov	r0, r7
 801405a:	f7ec f8cb 	bl	80001f4 <strlen>
 801405e:	4b87      	ldr	r3, [pc, #540]	; (801427c <rcl_expand_topic_name+0x2b0>)
 8014060:	4987      	ldr	r1, [pc, #540]	; (8014280 <rcl_expand_topic_name+0x2b4>)
 8014062:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014064:	9604      	str	r6, [sp, #16]
 8014066:	2801      	cmp	r0, #1
 8014068:	bf0c      	ite	eq
 801406a:	4618      	moveq	r0, r3
 801406c:	4608      	movne	r0, r1
 801406e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014072:	e9cd 2300 	strd	r2, r3, [sp]
 8014076:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801407a:	f108 0101 	add.w	r1, r8, #1
 801407e:	9105      	str	r1, [sp, #20]
 8014080:	ab14      	add	r3, sp, #80	; 0x50
 8014082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014084:	f002 f842 	bl	801610c <rcutils_format_string_limit>
 8014088:	4682      	mov	sl, r0
 801408a:	2800      	cmp	r0, #0
 801408c:	f000 80d0 	beq.w	8014230 <rcl_expand_topic_name+0x264>
 8014090:	2d00      	cmp	r5, #0
 8014092:	f000 80aa 	beq.w	80141ea <rcl_expand_topic_name+0x21e>
 8014096:	217b      	movs	r1, #123	; 0x7b
 8014098:	f006 f9b9 	bl	801a40e <strchr>
 801409c:	46d1      	mov	r9, sl
 801409e:	4605      	mov	r5, r0
 80140a0:	9407      	str	r4, [sp, #28]
 80140a2:	46d3      	mov	fp, sl
 80140a4:	464c      	mov	r4, r9
 80140a6:	2d00      	cmp	r5, #0
 80140a8:	f000 80c7 	beq.w	801423a <rcl_expand_topic_name+0x26e>
 80140ac:	217d      	movs	r1, #125	; 0x7d
 80140ae:	4620      	mov	r0, r4
 80140b0:	f006 f9ad 	bl	801a40e <strchr>
 80140b4:	eba0 0905 	sub.w	r9, r0, r5
 80140b8:	f109 0a01 	add.w	sl, r9, #1
 80140bc:	4871      	ldr	r0, [pc, #452]	; (8014284 <rcl_expand_topic_name+0x2b8>)
 80140be:	4652      	mov	r2, sl
 80140c0:	4629      	mov	r1, r5
 80140c2:	f006 f9b9 	bl	801a438 <strncmp>
 80140c6:	2800      	cmp	r0, #0
 80140c8:	f000 808d 	beq.w	80141e6 <rcl_expand_topic_name+0x21a>
 80140cc:	486e      	ldr	r0, [pc, #440]	; (8014288 <rcl_expand_topic_name+0x2bc>)
 80140ce:	4652      	mov	r2, sl
 80140d0:	4629      	mov	r1, r5
 80140d2:	f006 f9b1 	bl	801a438 <strncmp>
 80140d6:	b130      	cbz	r0, 80140e6 <rcl_expand_topic_name+0x11a>
 80140d8:	486c      	ldr	r0, [pc, #432]	; (801428c <rcl_expand_topic_name+0x2c0>)
 80140da:	4652      	mov	r2, sl
 80140dc:	4629      	mov	r1, r5
 80140de:	f006 f9ab 	bl	801a438 <strncmp>
 80140e2:	2800      	cmp	r0, #0
 80140e4:	d15b      	bne.n	801419e <rcl_expand_topic_name+0x1d2>
 80140e6:	46b9      	mov	r9, r7
 80140e8:	ab16      	add	r3, sp, #88	; 0x58
 80140ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80140ee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80140f2:	ab14      	add	r3, sp, #80	; 0x50
 80140f4:	4628      	mov	r0, r5
 80140f6:	cb0c      	ldmia	r3, {r2, r3}
 80140f8:	4651      	mov	r1, sl
 80140fa:	f002 f953 	bl	80163a4 <rcutils_strndup>
 80140fe:	4605      	mov	r5, r0
 8014100:	2800      	cmp	r0, #0
 8014102:	f000 80a4 	beq.w	801424e <rcl_expand_topic_name+0x282>
 8014106:	464a      	mov	r2, r9
 8014108:	4620      	mov	r0, r4
 801410a:	ab14      	add	r3, sp, #80	; 0x50
 801410c:	4629      	mov	r1, r5
 801410e:	f002 f84f 	bl	80161b0 <rcutils_repl_str>
 8014112:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014114:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014116:	4604      	mov	r4, r0
 8014118:	4628      	mov	r0, r5
 801411a:	4798      	blx	r3
 801411c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801411e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014120:	4658      	mov	r0, fp
 8014122:	4798      	blx	r3
 8014124:	2c00      	cmp	r4, #0
 8014126:	f000 8083 	beq.w	8014230 <rcl_expand_topic_name+0x264>
 801412a:	217b      	movs	r1, #123	; 0x7b
 801412c:	4620      	mov	r0, r4
 801412e:	f006 f96e 	bl	801a40e <strchr>
 8014132:	46a3      	mov	fp, r4
 8014134:	4605      	mov	r5, r0
 8014136:	e7b6      	b.n	80140a6 <rcl_expand_topic_name+0xda>
 8014138:	2800      	cmp	r0, #0
 801413a:	d151      	bne.n	80141e0 <rcl_expand_topic_name+0x214>
 801413c:	4638      	mov	r0, r7
 801413e:	f7ec f859 	bl	80001f4 <strlen>
 8014142:	4b53      	ldr	r3, [pc, #332]	; (8014290 <rcl_expand_topic_name+0x2c4>)
 8014144:	4a53      	ldr	r2, [pc, #332]	; (8014294 <rcl_expand_topic_name+0x2c8>)
 8014146:	f8cd 8010 	str.w	r8, [sp, #16]
 801414a:	2801      	cmp	r0, #1
 801414c:	bf0c      	ite	eq
 801414e:	4618      	moveq	r0, r3
 8014150:	4610      	movne	r0, r2
 8014152:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014158:	e9cd 3200 	strd	r3, r2, [sp]
 801415c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014160:	ab14      	add	r3, sp, #80	; 0x50
 8014162:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014164:	f001 ffd2 	bl	801610c <rcutils_format_string_limit>
 8014168:	4682      	mov	sl, r0
 801416a:	4653      	mov	r3, sl
 801416c:	2b00      	cmp	r3, #0
 801416e:	d05f      	beq.n	8014230 <rcl_expand_topic_name+0x264>
 8014170:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014172:	f8c3 a000 	str.w	sl, [r3]
 8014176:	4620      	mov	r0, r4
 8014178:	b00b      	add	sp, #44	; 0x2c
 801417a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801417e:	240b      	movs	r4, #11
 8014180:	4620      	mov	r0, r4
 8014182:	b00b      	add	sp, #44	; 0x2c
 8014184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014188:	f7ff fe98 	bl	8013ebc <rcl_convert_rmw_ret_to_rcl_ret>
 801418c:	4604      	mov	r4, r0
 801418e:	e7f2      	b.n	8014176 <rcl_expand_topic_name+0x1aa>
 8014190:	2467      	movs	r4, #103	; 0x67
 8014192:	4620      	mov	r0, r4
 8014194:	b00b      	add	sp, #44	; 0x2c
 8014196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801419a:	24c9      	movs	r4, #201	; 0xc9
 801419c:	e7eb      	b.n	8014176 <rcl_expand_topic_name+0x1aa>
 801419e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80141a2:	9806      	ldr	r0, [sp, #24]
 80141a4:	1c69      	adds	r1, r5, #1
 80141a6:	f7fa fcf3 	bl	800eb90 <rcutils_string_map_getn>
 80141aa:	4681      	mov	r9, r0
 80141ac:	2800      	cmp	r0, #0
 80141ae:	d19b      	bne.n	80140e8 <rcl_expand_topic_name+0x11c>
 80141b0:	aa16      	add	r2, sp, #88	; 0x58
 80141b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80141b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80141b6:	f8c3 9000 	str.w	r9, [r3]
 80141ba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80141be:	ab14      	add	r3, sp, #80	; 0x50
 80141c0:	cb0c      	ldmia	r3, {r2, r3}
 80141c2:	4651      	mov	r1, sl
 80141c4:	4628      	mov	r0, r5
 80141c6:	f002 f8ed 	bl	80163a4 <rcutils_strndup>
 80141ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80141cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80141ce:	4798      	blx	r3
 80141d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80141d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80141d4:	4658      	mov	r0, fp
 80141d6:	4798      	blx	r3
 80141d8:	2469      	movs	r4, #105	; 0x69
 80141da:	e7cc      	b.n	8014176 <rcl_expand_topic_name+0x1aa>
 80141dc:	2800      	cmp	r0, #0
 80141de:	d03e      	beq.n	801425e <rcl_expand_topic_name+0x292>
 80141e0:	46c1      	mov	r9, r8
 80141e2:	46a2      	mov	sl, r4
 80141e4:	e75c      	b.n	80140a0 <rcl_expand_topic_name+0xd4>
 80141e6:	46b1      	mov	r9, r6
 80141e8:	e77e      	b.n	80140e8 <rcl_expand_topic_name+0x11c>
 80141ea:	f89a 3000 	ldrb.w	r3, [sl]
 80141ee:	2b2f      	cmp	r3, #47	; 0x2f
 80141f0:	d0be      	beq.n	8014170 <rcl_expand_topic_name+0x1a4>
 80141f2:	4638      	mov	r0, r7
 80141f4:	f7eb fffe 	bl	80001f4 <strlen>
 80141f8:	4b25      	ldr	r3, [pc, #148]	; (8014290 <rcl_expand_topic_name+0x2c4>)
 80141fa:	4926      	ldr	r1, [pc, #152]	; (8014294 <rcl_expand_topic_name+0x2c8>)
 80141fc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80141fe:	f8cd a010 	str.w	sl, [sp, #16]
 8014202:	2801      	cmp	r0, #1
 8014204:	bf0c      	ite	eq
 8014206:	4618      	moveq	r0, r3
 8014208:	4608      	movne	r0, r1
 801420a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801420e:	e9cd 2300 	strd	r2, r3, [sp]
 8014212:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014216:	ab14      	add	r3, sp, #80	; 0x50
 8014218:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801421a:	f001 ff77 	bl	801610c <rcutils_format_string_limit>
 801421e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014220:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014222:	4603      	mov	r3, r0
 8014224:	4650      	mov	r0, sl
 8014226:	469a      	mov	sl, r3
 8014228:	4790      	blx	r2
 801422a:	e79e      	b.n	801416a <rcl_expand_topic_name+0x19e>
 801422c:	24ca      	movs	r4, #202	; 0xca
 801422e:	e7a2      	b.n	8014176 <rcl_expand_topic_name+0x1aa>
 8014230:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8014232:	2300      	movs	r3, #0
 8014234:	6013      	str	r3, [r2, #0]
 8014236:	240a      	movs	r4, #10
 8014238:	e79d      	b.n	8014176 <rcl_expand_topic_name+0x1aa>
 801423a:	465b      	mov	r3, fp
 801423c:	9c07      	ldr	r4, [sp, #28]
 801423e:	46da      	mov	sl, fp
 8014240:	2b00      	cmp	r3, #0
 8014242:	d1d2      	bne.n	80141ea <rcl_expand_topic_name+0x21e>
 8014244:	f898 3000 	ldrb.w	r3, [r8]
 8014248:	2b2f      	cmp	r3, #47	; 0x2f
 801424a:	d091      	beq.n	8014170 <rcl_expand_topic_name+0x1a4>
 801424c:	e776      	b.n	801413c <rcl_expand_topic_name+0x170>
 801424e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014250:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014252:	601d      	str	r5, [r3, #0]
 8014254:	4658      	mov	r0, fp
 8014256:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014258:	4798      	blx	r3
 801425a:	240a      	movs	r4, #10
 801425c:	e78b      	b.n	8014176 <rcl_expand_topic_name+0x1aa>
 801425e:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	; 0x5c
 8014262:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014266:	ab14      	add	r3, sp, #80	; 0x50
 8014268:	cb0e      	ldmia	r3, {r1, r2, r3}
 801426a:	4640      	mov	r0, r8
 801426c:	f002 f878 	bl	8016360 <rcutils_strdup>
 8014270:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014272:	2800      	cmp	r0, #0
 8014274:	bf08      	it	eq
 8014276:	240a      	moveq	r4, #10
 8014278:	6018      	str	r0, [r3, #0]
 801427a:	e77c      	b.n	8014176 <rcl_expand_topic_name+0x1aa>
 801427c:	0801e024 	.word	0x0801e024
 8014280:	0801e260 	.word	0x0801e260
 8014284:	0801e268 	.word	0x0801e268
 8014288:	0801e270 	.word	0x0801e270
 801428c:	0801e278 	.word	0x0801e278
 8014290:	0801e034 	.word	0x0801e034
 8014294:	0801dfec 	.word	0x0801dfec

08014298 <rcl_get_default_topic_name_substitutions>:
 8014298:	2800      	cmp	r0, #0
 801429a:	bf0c      	ite	eq
 801429c:	200b      	moveq	r0, #11
 801429e:	2000      	movne	r0, #0
 80142a0:	4770      	bx	lr
 80142a2:	bf00      	nop

080142a4 <rcl_init>:
 80142a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142a8:	1e07      	subs	r7, r0, #0
 80142aa:	b09f      	sub	sp, #124	; 0x7c
 80142ac:	4688      	mov	r8, r1
 80142ae:	4692      	mov	sl, r2
 80142b0:	4699      	mov	r9, r3
 80142b2:	f340 8097 	ble.w	80143e4 <rcl_init+0x140>
 80142b6:	2900      	cmp	r1, #0
 80142b8:	f000 8097 	beq.w	80143ea <rcl_init+0x146>
 80142bc:	1f0d      	subs	r5, r1, #4
 80142be:	2400      	movs	r4, #0
 80142c0:	f855 6f04 	ldr.w	r6, [r5, #4]!
 80142c4:	3401      	adds	r4, #1
 80142c6:	2e00      	cmp	r6, #0
 80142c8:	f000 808f 	beq.w	80143ea <rcl_init+0x146>
 80142cc:	42a7      	cmp	r7, r4
 80142ce:	d1f7      	bne.n	80142c0 <rcl_init+0x1c>
 80142d0:	f1ba 0f00 	cmp.w	sl, #0
 80142d4:	f000 8089 	beq.w	80143ea <rcl_init+0x146>
 80142d8:	f8da 4000 	ldr.w	r4, [sl]
 80142dc:	2c00      	cmp	r4, #0
 80142de:	f000 8084 	beq.w	80143ea <rcl_init+0x146>
 80142e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80142e4:	ad19      	add	r5, sp, #100	; 0x64
 80142e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80142e8:	6823      	ldr	r3, [r4, #0]
 80142ea:	602b      	str	r3, [r5, #0]
 80142ec:	a819      	add	r0, sp, #100	; 0x64
 80142ee:	f7fa fb15 	bl	800e91c <rcutils_allocator_is_valid>
 80142f2:	2800      	cmp	r0, #0
 80142f4:	d079      	beq.n	80143ea <rcl_init+0x146>
 80142f6:	f1b9 0f00 	cmp.w	r9, #0
 80142fa:	d076      	beq.n	80143ea <rcl_init+0x146>
 80142fc:	f8d9 3000 	ldr.w	r3, [r9]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d177      	bne.n	80143f4 <rcl_init+0x150>
 8014304:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8014308:	2178      	movs	r1, #120	; 0x78
 801430a:	2001      	movs	r0, #1
 801430c:	4798      	blx	r3
 801430e:	4604      	mov	r4, r0
 8014310:	f8c9 0000 	str.w	r0, [r9]
 8014314:	2800      	cmp	r0, #0
 8014316:	f000 80ba 	beq.w	801448e <rcl_init+0x1ea>
 801431a:	a802      	add	r0, sp, #8
 801431c:	f002 f85e 	bl	80163dc <rmw_get_zero_initialized_context>
 8014320:	a902      	add	r1, sp, #8
 8014322:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014326:	2250      	movs	r2, #80	; 0x50
 8014328:	ac19      	add	r4, sp, #100	; 0x64
 801432a:	f004 feb7 	bl	801909c <memcpy>
 801432e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014330:	f8d9 5000 	ldr.w	r5, [r9]
 8014334:	6826      	ldr	r6, [r4, #0]
 8014336:	462c      	mov	r4, r5
 8014338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801433a:	f105 0114 	add.w	r1, r5, #20
 801433e:	6026      	str	r6, [r4, #0]
 8014340:	4650      	mov	r0, sl
 8014342:	f7f9 fc4b 	bl	800dbdc <rcl_init_options_copy>
 8014346:	4606      	mov	r6, r0
 8014348:	2800      	cmp	r0, #0
 801434a:	d144      	bne.n	80143d6 <rcl_init+0x132>
 801434c:	f8d9 a000 	ldr.w	sl, [r9]
 8014350:	463c      	mov	r4, r7
 8014352:	17fd      	asrs	r5, r7, #31
 8014354:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8014358:	f8ca 0020 	str.w	r0, [sl, #32]
 801435c:	2f00      	cmp	r7, #0
 801435e:	d050      	beq.n	8014402 <rcl_init+0x15e>
 8014360:	f1b8 0f00 	cmp.w	r8, #0
 8014364:	d04d      	beq.n	8014402 <rcl_init+0x15e>
 8014366:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801436a:	4638      	mov	r0, r7
 801436c:	2104      	movs	r1, #4
 801436e:	4798      	blx	r3
 8014370:	f8ca 0020 	str.w	r0, [sl, #32]
 8014374:	f8d9 a000 	ldr.w	sl, [r9]
 8014378:	f8da 3020 	ldr.w	r3, [sl, #32]
 801437c:	46d3      	mov	fp, sl
 801437e:	b34b      	cbz	r3, 80143d4 <rcl_init+0x130>
 8014380:	2f01      	cmp	r7, #1
 8014382:	f175 0300 	sbcs.w	r3, r5, #0
 8014386:	db3c      	blt.n	8014402 <rcl_init+0x15e>
 8014388:	f1a8 0804 	sub.w	r8, r8, #4
 801438c:	2600      	movs	r6, #0
 801438e:	2700      	movs	r7, #0
 8014390:	e00c      	b.n	80143ac <rcl_init+0x108>
 8014392:	f8d8 1000 	ldr.w	r1, [r8]
 8014396:	f004 fe81 	bl	801909c <memcpy>
 801439a:	3601      	adds	r6, #1
 801439c:	f147 0700 	adc.w	r7, r7, #0
 80143a0:	42bd      	cmp	r5, r7
 80143a2:	bf08      	it	eq
 80143a4:	42b4      	cmpeq	r4, r6
 80143a6:	d02a      	beq.n	80143fe <rcl_init+0x15a>
 80143a8:	f8d9 b000 	ldr.w	fp, [r9]
 80143ac:	f858 0f04 	ldr.w	r0, [r8, #4]!
 80143b0:	f7eb ff20 	bl	80001f4 <strlen>
 80143b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80143b6:	991d      	ldr	r1, [sp, #116]	; 0x74
 80143b8:	f8db a020 	ldr.w	sl, [fp, #32]
 80143bc:	9001      	str	r0, [sp, #4]
 80143be:	4798      	blx	r3
 80143c0:	f8d9 1000 	ldr.w	r1, [r9]
 80143c4:	9a01      	ldr	r2, [sp, #4]
 80143c6:	6a09      	ldr	r1, [r1, #32]
 80143c8:	00b3      	lsls	r3, r6, #2
 80143ca:	f84a 0003 	str.w	r0, [sl, r3]
 80143ce:	58c8      	ldr	r0, [r1, r3]
 80143d0:	2800      	cmp	r0, #0
 80143d2:	d1de      	bne.n	8014392 <rcl_init+0xee>
 80143d4:	260a      	movs	r6, #10
 80143d6:	4648      	mov	r0, r9
 80143d8:	f7ff fd94 	bl	8013f04 <__cleanup_context>
 80143dc:	4630      	mov	r0, r6
 80143de:	b01f      	add	sp, #124	; 0x7c
 80143e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143e4:	2900      	cmp	r1, #0
 80143e6:	f43f af73 	beq.w	80142d0 <rcl_init+0x2c>
 80143ea:	260b      	movs	r6, #11
 80143ec:	4630      	mov	r0, r6
 80143ee:	b01f      	add	sp, #124	; 0x7c
 80143f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143f4:	2664      	movs	r6, #100	; 0x64
 80143f6:	4630      	mov	r0, r6
 80143f8:	b01f      	add	sp, #124	; 0x7c
 80143fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143fe:	f8d9 a000 	ldr.w	sl, [r9]
 8014402:	4a2c      	ldr	r2, [pc, #176]	; (80144b4 <rcl_init+0x210>)
 8014404:	6813      	ldr	r3, [r2, #0]
 8014406:	3301      	adds	r3, #1
 8014408:	d03b      	beq.n	8014482 <rcl_init+0x1de>
 801440a:	6013      	str	r3, [r2, #0]
 801440c:	4619      	mov	r1, r3
 801440e:	2000      	movs	r0, #0
 8014410:	f8da 4014 	ldr.w	r4, [sl, #20]
 8014414:	f8c9 3004 	str.w	r3, [r9, #4]
 8014418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801441a:	3301      	adds	r3, #1
 801441c:	e9c4 1006 	strd	r1, r0, [r4, #24]
 8014420:	d039      	beq.n	8014496 <rcl_init+0x1f2>
 8014422:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8014426:	b94b      	cbnz	r3, 801443c <rcl_init+0x198>
 8014428:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801442c:	f000 f844 	bl	80144b8 <rcl_get_localhost_only>
 8014430:	4606      	mov	r6, r0
 8014432:	2800      	cmp	r0, #0
 8014434:	d1cf      	bne.n	80143d6 <rcl_init+0x132>
 8014436:	f8d9 3000 	ldr.w	r3, [r9]
 801443a:	695c      	ldr	r4, [r3, #20]
 801443c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801443e:	aa18      	add	r2, sp, #96	; 0x60
 8014440:	a917      	add	r1, sp, #92	; 0x5c
 8014442:	f000 fec1 	bl	80151c8 <rcl_validate_enclave_name>
 8014446:	4606      	mov	r6, r0
 8014448:	2800      	cmp	r0, #0
 801444a:	d1c4      	bne.n	80143d6 <rcl_init+0x132>
 801444c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801444e:	bb03      	cbnz	r3, 8014492 <rcl_init+0x1ee>
 8014450:	f8d9 1000 	ldr.w	r1, [r9]
 8014454:	694b      	ldr	r3, [r1, #20]
 8014456:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014458:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801445c:	f000 fa9a 	bl	8014994 <rcl_get_security_options_from_environment>
 8014460:	4606      	mov	r6, r0
 8014462:	2800      	cmp	r0, #0
 8014464:	d1b7      	bne.n	80143d6 <rcl_init+0x132>
 8014466:	f8d9 1000 	ldr.w	r1, [r9]
 801446a:	6948      	ldr	r0, [r1, #20]
 801446c:	3128      	adds	r1, #40	; 0x28
 801446e:	3018      	adds	r0, #24
 8014470:	f7fa fd9c 	bl	800efac <rmw_init>
 8014474:	4606      	mov	r6, r0
 8014476:	2800      	cmp	r0, #0
 8014478:	d0b8      	beq.n	80143ec <rcl_init+0x148>
 801447a:	f7ff fd1f 	bl	8013ebc <rcl_convert_rmw_ret_to_rcl_ret>
 801447e:	4606      	mov	r6, r0
 8014480:	e7a9      	b.n	80143d6 <rcl_init+0x132>
 8014482:	2401      	movs	r4, #1
 8014484:	4618      	mov	r0, r3
 8014486:	4621      	mov	r1, r4
 8014488:	6014      	str	r4, [r2, #0]
 801448a:	4623      	mov	r3, r4
 801448c:	e7c0      	b.n	8014410 <rcl_init+0x16c>
 801448e:	260a      	movs	r6, #10
 8014490:	e7ac      	b.n	80143ec <rcl_init+0x148>
 8014492:	2601      	movs	r6, #1
 8014494:	e79f      	b.n	80143d6 <rcl_init+0x132>
 8014496:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801449a:	f004 fb77 	bl	8018b8c <rcl_get_default_domain_id>
 801449e:	4606      	mov	r6, r0
 80144a0:	2800      	cmp	r0, #0
 80144a2:	d198      	bne.n	80143d6 <rcl_init+0x132>
 80144a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80144a6:	3301      	adds	r3, #1
 80144a8:	f8d9 3000 	ldr.w	r3, [r9]
 80144ac:	bf08      	it	eq
 80144ae:	6260      	streq	r0, [r4, #36]	; 0x24
 80144b0:	695c      	ldr	r4, [r3, #20]
 80144b2:	e7b6      	b.n	8014422 <rcl_init+0x17e>
 80144b4:	20009f18 	.word	0x20009f18

080144b8 <rcl_get_localhost_only>:
 80144b8:	b510      	push	{r4, lr}
 80144ba:	b082      	sub	sp, #8
 80144bc:	2300      	movs	r3, #0
 80144be:	9301      	str	r3, [sp, #4]
 80144c0:	b1b8      	cbz	r0, 80144f2 <rcl_get_localhost_only+0x3a>
 80144c2:	4604      	mov	r4, r0
 80144c4:	a901      	add	r1, sp, #4
 80144c6:	480c      	ldr	r0, [pc, #48]	; (80144f8 <rcl_get_localhost_only+0x40>)
 80144c8:	f001 fe5a 	bl	8016180 <rcutils_get_env>
 80144cc:	b110      	cbz	r0, 80144d4 <rcl_get_localhost_only+0x1c>
 80144ce:	2001      	movs	r0, #1
 80144d0:	b002      	add	sp, #8
 80144d2:	bd10      	pop	{r4, pc}
 80144d4:	9b01      	ldr	r3, [sp, #4]
 80144d6:	b113      	cbz	r3, 80144de <rcl_get_localhost_only+0x26>
 80144d8:	781a      	ldrb	r2, [r3, #0]
 80144da:	2a31      	cmp	r2, #49	; 0x31
 80144dc:	d004      	beq.n	80144e8 <rcl_get_localhost_only+0x30>
 80144de:	2302      	movs	r3, #2
 80144e0:	2000      	movs	r0, #0
 80144e2:	7023      	strb	r3, [r4, #0]
 80144e4:	b002      	add	sp, #8
 80144e6:	bd10      	pop	{r4, pc}
 80144e8:	785b      	ldrb	r3, [r3, #1]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d1f7      	bne.n	80144de <rcl_get_localhost_only+0x26>
 80144ee:	2301      	movs	r3, #1
 80144f0:	e7f6      	b.n	80144e0 <rcl_get_localhost_only+0x28>
 80144f2:	200b      	movs	r0, #11
 80144f4:	b002      	add	sp, #8
 80144f6:	bd10      	pop	{r4, pc}
 80144f8:	0801e284 	.word	0x0801e284

080144fc <rcl_get_zero_initialized_node>:
 80144fc:	4a03      	ldr	r2, [pc, #12]	; (801450c <rcl_get_zero_initialized_node+0x10>)
 80144fe:	4603      	mov	r3, r0
 8014500:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014504:	e883 0003 	stmia.w	r3, {r0, r1}
 8014508:	4618      	mov	r0, r3
 801450a:	4770      	bx	lr
 801450c:	0801e2a0 	.word	0x0801e2a0

08014510 <rcl_node_init>:
 8014510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014514:	b09b      	sub	sp, #108	; 0x6c
 8014516:	4604      	mov	r4, r0
 8014518:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 801451c:	f04f 0c00 	mov.w	ip, #0
 8014520:	a815      	add	r0, sp, #84	; 0x54
 8014522:	460e      	mov	r6, r1
 8014524:	4615      	mov	r5, r2
 8014526:	461f      	mov	r7, r3
 8014528:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 801452c:	f004 fbea 	bl	8018d04 <rcl_guard_condition_get_default_options>
 8014530:	f1b8 0f00 	cmp.w	r8, #0
 8014534:	f000 80fd 	beq.w	8014732 <rcl_node_init+0x222>
 8014538:	f108 0b04 	add.w	fp, r8, #4
 801453c:	4658      	mov	r0, fp
 801453e:	f7fa f9ed 	bl	800e91c <rcutils_allocator_is_valid>
 8014542:	2800      	cmp	r0, #0
 8014544:	f000 80f5 	beq.w	8014732 <rcl_node_init+0x222>
 8014548:	2e00      	cmp	r6, #0
 801454a:	f000 80f2 	beq.w	8014732 <rcl_node_init+0x222>
 801454e:	2d00      	cmp	r5, #0
 8014550:	f000 80ef 	beq.w	8014732 <rcl_node_init+0x222>
 8014554:	2c00      	cmp	r4, #0
 8014556:	f000 80ec 	beq.w	8014732 <rcl_node_init+0x222>
 801455a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801455e:	f1b9 0f00 	cmp.w	r9, #0
 8014562:	f040 8112 	bne.w	801478a <rcl_node_init+0x27a>
 8014566:	2f00      	cmp	r7, #0
 8014568:	f000 80e3 	beq.w	8014732 <rcl_node_init+0x222>
 801456c:	4638      	mov	r0, r7
 801456e:	f7ff fcc3 	bl	8013ef8 <rcl_context_is_valid>
 8014572:	4682      	mov	sl, r0
 8014574:	2800      	cmp	r0, #0
 8014576:	f000 80e2 	beq.w	801473e <rcl_node_init+0x22e>
 801457a:	464a      	mov	r2, r9
 801457c:	a914      	add	r1, sp, #80	; 0x50
 801457e:	4630      	mov	r0, r6
 8014580:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8014584:	f001 ffb4 	bl	80164f0 <rmw_validate_node_name>
 8014588:	4681      	mov	r9, r0
 801458a:	2800      	cmp	r0, #0
 801458c:	f040 80d3 	bne.w	8014736 <rcl_node_init+0x226>
 8014590:	9814      	ldr	r0, [sp, #80]	; 0x50
 8014592:	2800      	cmp	r0, #0
 8014594:	f040 8105 	bne.w	80147a2 <rcl_node_init+0x292>
 8014598:	4628      	mov	r0, r5
 801459a:	f7eb fe2b 	bl	80001f4 <strlen>
 801459e:	2800      	cmp	r0, #0
 80145a0:	f040 80d0 	bne.w	8014744 <rcl_node_init+0x234>
 80145a4:	4d8e      	ldr	r5, [pc, #568]	; (80147e0 <rcl_node_init+0x2d0>)
 80145a6:	a914      	add	r1, sp, #80	; 0x50
 80145a8:	2200      	movs	r2, #0
 80145aa:	4628      	mov	r0, r5
 80145ac:	f001 ff82 	bl	80164b4 <rmw_validate_namespace>
 80145b0:	4681      	mov	r9, r0
 80145b2:	2800      	cmp	r0, #0
 80145b4:	f040 80bf 	bne.w	8014736 <rcl_node_init+0x226>
 80145b8:	4682      	mov	sl, r0
 80145ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80145bc:	2b00      	cmp	r3, #0
 80145be:	f040 80f5 	bne.w	80147ac <rcl_node_init+0x29c>
 80145c2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80145c6:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80145ca:	9307      	str	r3, [sp, #28]
 80145cc:	2030      	movs	r0, #48	; 0x30
 80145ce:	4790      	blx	r2
 80145d0:	4681      	mov	r9, r0
 80145d2:	6060      	str	r0, [r4, #4]
 80145d4:	2800      	cmp	r0, #0
 80145d6:	f000 80de 	beq.w	8014796 <rcl_node_init+0x286>
 80145da:	9b07      	ldr	r3, [sp, #28]
 80145dc:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80145e0:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80145e4:	a80a      	add	r0, sp, #40	; 0x28
 80145e6:	f7f9 fba7 	bl	800dd38 <rcl_node_get_default_options>
 80145ea:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80145ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80145f2:	46cc      	mov	ip, r9
 80145f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80145f8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80145fc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8014600:	6861      	ldr	r1, [r4, #4]
 8014602:	6027      	str	r7, [r4, #0]
 8014604:	4640      	mov	r0, r8
 8014606:	f7f9 fbb3 	bl	800dd70 <rcl_node_options_copy>
 801460a:	2800      	cmp	r0, #0
 801460c:	d167      	bne.n	80146de <rcl_node_init+0x1ce>
 801460e:	4628      	mov	r0, r5
 8014610:	f7eb fdf0 	bl	80001f4 <strlen>
 8014614:	4428      	add	r0, r5
 8014616:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801461a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801461e:	2b2f      	cmp	r3, #47	; 0x2f
 8014620:	bf08      	it	eq
 8014622:	4970      	ldreq	r1, [pc, #448]	; (80147e4 <rcl_node_init+0x2d4>)
 8014624:	f8db 3010 	ldr.w	r3, [fp, #16]
 8014628:	bf18      	it	ne
 801462a:	496f      	ldrne	r1, [pc, #444]	; (80147e8 <rcl_node_init+0x2d8>)
 801462c:	9604      	str	r6, [sp, #16]
 801462e:	e9cd 1502 	strd	r1, r5, [sp, #8]
 8014632:	e9cd 3200 	strd	r3, r2, [sp]
 8014636:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801463a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801463e:	f001 fd65 	bl	801610c <rcutils_format_string_limit>
 8014642:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 8014646:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801464a:	f8d9 3000 	ldr.w	r3, [r9]
 801464e:	9313      	str	r3, [sp, #76]	; 0x4c
 8014650:	1c59      	adds	r1, r3, #1
 8014652:	f000 80b7 	beq.w	80147c4 <rcl_node_init+0x2b4>
 8014656:	683a      	ldr	r2, [r7, #0]
 8014658:	f8c9 301c 	str.w	r3, [r9, #28]
 801465c:	6952      	ldr	r2, [r2, #20]
 801465e:	6821      	ldr	r1, [r4, #0]
 8014660:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8014664:	6808      	ldr	r0, [r1, #0]
 8014666:	f1a2 0201 	sub.w	r2, r2, #1
 801466a:	fab2 f282 	clz	r2, r2
 801466e:	0952      	lsrs	r2, r2, #5
 8014670:	9200      	str	r2, [sp, #0]
 8014672:	4631      	mov	r1, r6
 8014674:	3028      	adds	r0, #40	; 0x28
 8014676:	462a      	mov	r2, r5
 8014678:	f7fa fe7c 	bl	800f374 <rmw_create_node>
 801467c:	6863      	ldr	r3, [r4, #4]
 801467e:	f8c9 0020 	str.w	r0, [r9, #32]
 8014682:	6a18      	ldr	r0, [r3, #32]
 8014684:	b368      	cbz	r0, 80146e2 <rcl_node_init+0x1d2>
 8014686:	f7fa ff07 	bl	800f498 <rmw_node_get_graph_guard_condition>
 801468a:	4681      	mov	r9, r0
 801468c:	b338      	cbz	r0, 80146de <rcl_node_init+0x1ce>
 801468e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014692:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014696:	6866      	ldr	r6, [r4, #4]
 8014698:	2008      	movs	r0, #8
 801469a:	4798      	blx	r3
 801469c:	6863      	ldr	r3, [r4, #4]
 801469e:	6270      	str	r0, [r6, #36]	; 0x24
 80146a0:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80146a2:	b1f6      	cbz	r6, 80146e2 <rcl_node_init+0x1d2>
 80146a4:	a808      	add	r0, sp, #32
 80146a6:	f004 faa5 	bl	8018bf4 <rcl_get_zero_initialized_guard_condition>
 80146aa:	a808      	add	r0, sp, #32
 80146ac:	c803      	ldmia	r0, {r0, r1}
 80146ae:	e886 0003 	stmia.w	r6, {r0, r1}
 80146b2:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80146b6:	ae15      	add	r6, sp, #84	; 0x54
 80146b8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80146ba:	f8db 3000 	ldr.w	r3, [fp]
 80146be:	6033      	str	r3, [r6, #0]
 80146c0:	ab1a      	add	r3, sp, #104	; 0x68
 80146c2:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80146c6:	6866      	ldr	r6, [r4, #4]
 80146c8:	6a76      	ldr	r6, [r6, #36]	; 0x24
 80146ca:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80146ce:	4649      	mov	r1, r9
 80146d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80146d2:	4630      	mov	r0, r6
 80146d4:	463a      	mov	r2, r7
 80146d6:	f004 fa97 	bl	8018c08 <rcl_guard_condition_init_from_rmw>
 80146da:	4681      	mov	r9, r0
 80146dc:	b328      	cbz	r0, 801472a <rcl_node_init+0x21a>
 80146de:	6863      	ldr	r3, [r4, #4]
 80146e0:	b1f3      	cbz	r3, 8014720 <rcl_node_init+0x210>
 80146e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80146e4:	b128      	cbz	r0, 80146f2 <rcl_node_init+0x1e2>
 80146e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80146ea:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80146ee:	4798      	blx	r3
 80146f0:	6863      	ldr	r3, [r4, #4]
 80146f2:	6a18      	ldr	r0, [r3, #32]
 80146f4:	b110      	cbz	r0, 80146fc <rcl_node_init+0x1ec>
 80146f6:	f7fa fe55 	bl	800f3a4 <rmw_destroy_node>
 80146fa:	6863      	ldr	r3, [r4, #4]
 80146fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80146fe:	b148      	cbz	r0, 8014714 <rcl_node_init+0x204>
 8014700:	f004 fada 	bl	8018cb8 <rcl_guard_condition_fini>
 8014704:	6862      	ldr	r2, [r4, #4]
 8014706:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801470a:	6a50      	ldr	r0, [r2, #36]	; 0x24
 801470c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014710:	4798      	blx	r3
 8014712:	6863      	ldr	r3, [r4, #4]
 8014714:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8014718:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801471c:	4618      	mov	r0, r3
 801471e:	4790      	blx	r2
 8014720:	2300      	movs	r3, #0
 8014722:	e9c4 3300 	strd	r3, r3, [r4]
 8014726:	f04f 0901 	mov.w	r9, #1
 801472a:	f1ba 0f00 	cmp.w	sl, #0
 801472e:	d125      	bne.n	801477c <rcl_node_init+0x26c>
 8014730:	e001      	b.n	8014736 <rcl_node_init+0x226>
 8014732:	f04f 090b 	mov.w	r9, #11
 8014736:	4648      	mov	r0, r9
 8014738:	b01b      	add	sp, #108	; 0x6c
 801473a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801473e:	f04f 0965 	mov.w	r9, #101	; 0x65
 8014742:	e7f8      	b.n	8014736 <rcl_node_init+0x226>
 8014744:	782b      	ldrb	r3, [r5, #0]
 8014746:	2b2f      	cmp	r3, #47	; 0x2f
 8014748:	f43f af2d 	beq.w	80145a6 <rcl_node_init+0x96>
 801474c:	4927      	ldr	r1, [pc, #156]	; (80147ec <rcl_node_init+0x2dc>)
 801474e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8014752:	9300      	str	r3, [sp, #0]
 8014754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014758:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801475c:	9503      	str	r5, [sp, #12]
 801475e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8014762:	f001 fcd3 	bl	801610c <rcutils_format_string_limit>
 8014766:	4605      	mov	r5, r0
 8014768:	b348      	cbz	r0, 80147be <rcl_node_init+0x2ae>
 801476a:	2200      	movs	r2, #0
 801476c:	a914      	add	r1, sp, #80	; 0x50
 801476e:	9214      	str	r2, [sp, #80]	; 0x50
 8014770:	f001 fea0 	bl	80164b4 <rmw_validate_namespace>
 8014774:	4681      	mov	r9, r0
 8014776:	2800      	cmp	r0, #0
 8014778:	f43f af1f 	beq.w	80145ba <rcl_node_init+0xaa>
 801477c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014780:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014784:	4628      	mov	r0, r5
 8014786:	4798      	blx	r3
 8014788:	e7d5      	b.n	8014736 <rcl_node_init+0x226>
 801478a:	f04f 0964 	mov.w	r9, #100	; 0x64
 801478e:	4648      	mov	r0, r9
 8014790:	b01b      	add	sp, #108	; 0x6c
 8014792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014796:	f04f 090a 	mov.w	r9, #10
 801479a:	f1ba 0f00 	cmp.w	sl, #0
 801479e:	d1ed      	bne.n	801477c <rcl_node_init+0x26c>
 80147a0:	e7c9      	b.n	8014736 <rcl_node_init+0x226>
 80147a2:	f001 fef7 	bl	8016594 <rmw_node_name_validation_result_string>
 80147a6:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 80147aa:	e7c4      	b.n	8014736 <rcl_node_init+0x226>
 80147ac:	4618      	mov	r0, r3
 80147ae:	f001 fe93 	bl	80164d8 <rmw_namespace_validation_result_string>
 80147b2:	f04f 09ca 	mov.w	r9, #202	; 0xca
 80147b6:	f1ba 0f00 	cmp.w	sl, #0
 80147ba:	d1df      	bne.n	801477c <rcl_node_init+0x26c>
 80147bc:	e7bb      	b.n	8014736 <rcl_node_init+0x226>
 80147be:	f04f 090a 	mov.w	r9, #10
 80147c2:	e7b8      	b.n	8014736 <rcl_node_init+0x226>
 80147c4:	a813      	add	r0, sp, #76	; 0x4c
 80147c6:	f004 f9e1 	bl	8018b8c <rcl_get_default_domain_id>
 80147ca:	2800      	cmp	r0, #0
 80147cc:	d187      	bne.n	80146de <rcl_node_init+0x1ce>
 80147ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80147d0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80147d4:	1c5a      	adds	r2, r3, #1
 80147d6:	bf04      	itt	eq
 80147d8:	9013      	streq	r0, [sp, #76]	; 0x4c
 80147da:	4603      	moveq	r3, r0
 80147dc:	e73b      	b.n	8014656 <rcl_node_init+0x146>
 80147de:	bf00      	nop
 80147e0:	0801dfe8 	.word	0x0801dfe8
 80147e4:	0801e034 	.word	0x0801e034
 80147e8:	0801dfec 	.word	0x0801dfec
 80147ec:	0801e29c 	.word	0x0801e29c

080147f0 <rcl_node_is_valid>:
 80147f0:	b130      	cbz	r0, 8014800 <rcl_node_is_valid+0x10>
 80147f2:	6843      	ldr	r3, [r0, #4]
 80147f4:	b123      	cbz	r3, 8014800 <rcl_node_is_valid+0x10>
 80147f6:	6a1b      	ldr	r3, [r3, #32]
 80147f8:	b113      	cbz	r3, 8014800 <rcl_node_is_valid+0x10>
 80147fa:	6800      	ldr	r0, [r0, #0]
 80147fc:	f7ff bb7c 	b.w	8013ef8 <rcl_context_is_valid>
 8014800:	2000      	movs	r0, #0
 8014802:	4770      	bx	lr

08014804 <rcl_node_get_name>:
 8014804:	b120      	cbz	r0, 8014810 <rcl_node_get_name+0xc>
 8014806:	6840      	ldr	r0, [r0, #4]
 8014808:	b110      	cbz	r0, 8014810 <rcl_node_get_name+0xc>
 801480a:	6a00      	ldr	r0, [r0, #32]
 801480c:	b100      	cbz	r0, 8014810 <rcl_node_get_name+0xc>
 801480e:	6880      	ldr	r0, [r0, #8]
 8014810:	4770      	bx	lr
 8014812:	bf00      	nop

08014814 <rcl_node_get_namespace>:
 8014814:	b120      	cbz	r0, 8014820 <rcl_node_get_namespace+0xc>
 8014816:	6840      	ldr	r0, [r0, #4]
 8014818:	b110      	cbz	r0, 8014820 <rcl_node_get_namespace+0xc>
 801481a:	6a00      	ldr	r0, [r0, #32]
 801481c:	b100      	cbz	r0, 8014820 <rcl_node_get_namespace+0xc>
 801481e:	68c0      	ldr	r0, [r0, #12]
 8014820:	4770      	bx	lr
 8014822:	bf00      	nop

08014824 <rcl_node_get_options>:
 8014824:	b128      	cbz	r0, 8014832 <rcl_node_get_options+0xe>
 8014826:	6840      	ldr	r0, [r0, #4]
 8014828:	b118      	cbz	r0, 8014832 <rcl_node_get_options+0xe>
 801482a:	6a03      	ldr	r3, [r0, #32]
 801482c:	2b00      	cmp	r3, #0
 801482e:	bf08      	it	eq
 8014830:	2000      	moveq	r0, #0
 8014832:	4770      	bx	lr

08014834 <rcl_node_get_rmw_handle>:
 8014834:	b110      	cbz	r0, 801483c <rcl_node_get_rmw_handle+0x8>
 8014836:	6840      	ldr	r0, [r0, #4]
 8014838:	b100      	cbz	r0, 801483c <rcl_node_get_rmw_handle+0x8>
 801483a:	6a00      	ldr	r0, [r0, #32]
 801483c:	4770      	bx	lr
 801483e:	bf00      	nop

08014840 <exact_match_lookup>:
 8014840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014842:	f102 0708 	add.w	r7, r2, #8
 8014846:	460b      	mov	r3, r1
 8014848:	4614      	mov	r4, r2
 801484a:	4606      	mov	r6, r0
 801484c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014850:	b085      	sub	sp, #20
 8014852:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014856:	4618      	mov	r0, r3
 8014858:	4918      	ldr	r1, [pc, #96]	; (80148bc <exact_match_lookup+0x7c>)
 801485a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801485e:	f001 fc47 	bl	80160f0 <rcutils_join_path>
 8014862:	7833      	ldrb	r3, [r6, #0]
 8014864:	2b2f      	cmp	r3, #47	; 0x2f
 8014866:	4605      	mov	r5, r0
 8014868:	d021      	beq.n	80148ae <exact_match_lookup+0x6e>
 801486a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 801486e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014872:	1c70      	adds	r0, r6, #1
 8014874:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014878:	f001 fc40 	bl	80160fc <rcutils_to_native_path>
 801487c:	4606      	mov	r6, r0
 801487e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014882:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014886:	4631      	mov	r1, r6
 8014888:	e894 000c 	ldmia.w	r4, {r2, r3}
 801488c:	4628      	mov	r0, r5
 801488e:	f001 fc2f 	bl	80160f0 <rcutils_join_path>
 8014892:	6862      	ldr	r2, [r4, #4]
 8014894:	6921      	ldr	r1, [r4, #16]
 8014896:	4603      	mov	r3, r0
 8014898:	4630      	mov	r0, r6
 801489a:	461e      	mov	r6, r3
 801489c:	4790      	blx	r2
 801489e:	4628      	mov	r0, r5
 80148a0:	6863      	ldr	r3, [r4, #4]
 80148a2:	6921      	ldr	r1, [r4, #16]
 80148a4:	4798      	blx	r3
 80148a6:	4635      	mov	r5, r6
 80148a8:	4628      	mov	r0, r5
 80148aa:	b005      	add	sp, #20
 80148ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148ae:	7873      	ldrb	r3, [r6, #1]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d1da      	bne.n	801486a <exact_match_lookup+0x2a>
 80148b4:	4628      	mov	r0, r5
 80148b6:	b005      	add	sp, #20
 80148b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148ba:	bf00      	nop
 80148bc:	0801e2e4 	.word	0x0801e2e4

080148c0 <rcl_get_secure_root>:
 80148c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148c4:	b085      	sub	sp, #20
 80148c6:	b168      	cbz	r0, 80148e4 <rcl_get_secure_root+0x24>
 80148c8:	4607      	mov	r7, r0
 80148ca:	4608      	mov	r0, r1
 80148cc:	460c      	mov	r4, r1
 80148ce:	f7fa f825 	bl	800e91c <rcutils_allocator_is_valid>
 80148d2:	b138      	cbz	r0, 80148e4 <rcl_get_secure_root+0x24>
 80148d4:	2300      	movs	r3, #0
 80148d6:	482d      	ldr	r0, [pc, #180]	; (801498c <rcl_get_secure_root+0xcc>)
 80148d8:	9303      	str	r3, [sp, #12]
 80148da:	a903      	add	r1, sp, #12
 80148dc:	f001 fc50 	bl	8016180 <rcutils_get_env>
 80148e0:	4605      	mov	r5, r0
 80148e2:	b120      	cbz	r0, 80148ee <rcl_get_secure_root+0x2e>
 80148e4:	2500      	movs	r5, #0
 80148e6:	4628      	mov	r0, r5
 80148e8:	b005      	add	sp, #20
 80148ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148ee:	9b03      	ldr	r3, [sp, #12]
 80148f0:	781a      	ldrb	r2, [r3, #0]
 80148f2:	2a00      	cmp	r2, #0
 80148f4:	d0f6      	beq.n	80148e4 <rcl_get_secure_root+0x24>
 80148f6:	f104 090c 	add.w	r9, r4, #12
 80148fa:	e899 0003 	ldmia.w	r9, {r0, r1}
 80148fe:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014902:	4618      	mov	r0, r3
 8014904:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014908:	f001 fd2a 	bl	8016360 <rcutils_strdup>
 801490c:	4680      	mov	r8, r0
 801490e:	2800      	cmp	r0, #0
 8014910:	d0e8      	beq.n	80148e4 <rcl_get_secure_root+0x24>
 8014912:	481f      	ldr	r0, [pc, #124]	; (8014990 <rcl_get_secure_root+0xd0>)
 8014914:	9503      	str	r5, [sp, #12]
 8014916:	a903      	add	r1, sp, #12
 8014918:	f001 fc32 	bl	8016180 <rcutils_get_env>
 801491c:	b160      	cbz	r0, 8014938 <rcl_get_secure_root+0x78>
 801491e:	2600      	movs	r6, #0
 8014920:	6863      	ldr	r3, [r4, #4]
 8014922:	6921      	ldr	r1, [r4, #16]
 8014924:	4630      	mov	r0, r6
 8014926:	4798      	blx	r3
 8014928:	4640      	mov	r0, r8
 801492a:	6863      	ldr	r3, [r4, #4]
 801492c:	6921      	ldr	r1, [r4, #16]
 801492e:	4798      	blx	r3
 8014930:	4628      	mov	r0, r5
 8014932:	b005      	add	sp, #20
 8014934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014938:	9b03      	ldr	r3, [sp, #12]
 801493a:	781e      	ldrb	r6, [r3, #0]
 801493c:	b1f6      	cbz	r6, 801497c <rcl_get_secure_root+0xbc>
 801493e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014942:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014946:	4618      	mov	r0, r3
 8014948:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801494c:	f001 fd08 	bl	8016360 <rcutils_strdup>
 8014950:	4606      	mov	r6, r0
 8014952:	2800      	cmp	r0, #0
 8014954:	d0e3      	beq.n	801491e <rcl_get_secure_root+0x5e>
 8014956:	4622      	mov	r2, r4
 8014958:	4641      	mov	r1, r8
 801495a:	f7ff ff71 	bl	8014840 <exact_match_lookup>
 801495e:	4605      	mov	r5, r0
 8014960:	2d00      	cmp	r5, #0
 8014962:	d0dd      	beq.n	8014920 <rcl_get_secure_root+0x60>
 8014964:	4628      	mov	r0, r5
 8014966:	f001 fbc1 	bl	80160ec <rcutils_is_directory>
 801496a:	4607      	mov	r7, r0
 801496c:	2800      	cmp	r0, #0
 801496e:	d1d7      	bne.n	8014920 <rcl_get_secure_root+0x60>
 8014970:	4628      	mov	r0, r5
 8014972:	6863      	ldr	r3, [r4, #4]
 8014974:	6921      	ldr	r1, [r4, #16]
 8014976:	4798      	blx	r3
 8014978:	463d      	mov	r5, r7
 801497a:	e7d1      	b.n	8014920 <rcl_get_secure_root+0x60>
 801497c:	4638      	mov	r0, r7
 801497e:	4622      	mov	r2, r4
 8014980:	4641      	mov	r1, r8
 8014982:	f7ff ff5d 	bl	8014840 <exact_match_lookup>
 8014986:	4605      	mov	r5, r0
 8014988:	e7ea      	b.n	8014960 <rcl_get_secure_root+0xa0>
 801498a:	bf00      	nop
 801498c:	0801e2f0 	.word	0x0801e2f0
 8014990:	0801e308 	.word	0x0801e308

08014994 <rcl_get_security_options_from_environment>:
 8014994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014998:	b082      	sub	sp, #8
 801499a:	4607      	mov	r7, r0
 801499c:	4688      	mov	r8, r1
 801499e:	2400      	movs	r4, #0
 80149a0:	481d      	ldr	r0, [pc, #116]	; (8014a18 <rcl_get_security_options_from_environment+0x84>)
 80149a2:	9401      	str	r4, [sp, #4]
 80149a4:	a901      	add	r1, sp, #4
 80149a6:	4616      	mov	r6, r2
 80149a8:	f001 fbea 	bl	8016180 <rcutils_get_env>
 80149ac:	b120      	cbz	r0, 80149b8 <rcl_get_security_options_from_environment+0x24>
 80149ae:	2501      	movs	r5, #1
 80149b0:	4628      	mov	r0, r5
 80149b2:	b002      	add	sp, #8
 80149b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149b8:	4918      	ldr	r1, [pc, #96]	; (8014a1c <rcl_get_security_options_from_environment+0x88>)
 80149ba:	4604      	mov	r4, r0
 80149bc:	9801      	ldr	r0, [sp, #4]
 80149be:	f7eb fc0f 	bl	80001e0 <strcmp>
 80149c2:	4605      	mov	r5, r0
 80149c4:	b9c8      	cbnz	r0, 80149fa <rcl_get_security_options_from_environment+0x66>
 80149c6:	9001      	str	r0, [sp, #4]
 80149c8:	b1ee      	cbz	r6, 8014a06 <rcl_get_security_options_from_environment+0x72>
 80149ca:	4815      	ldr	r0, [pc, #84]	; (8014a20 <rcl_get_security_options_from_environment+0x8c>)
 80149cc:	a901      	add	r1, sp, #4
 80149ce:	f001 fbd7 	bl	8016180 <rcutils_get_env>
 80149d2:	2800      	cmp	r0, #0
 80149d4:	d1eb      	bne.n	80149ae <rcl_get_security_options_from_environment+0x1a>
 80149d6:	4913      	ldr	r1, [pc, #76]	; (8014a24 <rcl_get_security_options_from_environment+0x90>)
 80149d8:	9801      	ldr	r0, [sp, #4]
 80149da:	f7eb fc01 	bl	80001e0 <strcmp>
 80149de:	fab0 f080 	clz	r0, r0
 80149e2:	0940      	lsrs	r0, r0, #5
 80149e4:	7030      	strb	r0, [r6, #0]
 80149e6:	4641      	mov	r1, r8
 80149e8:	4638      	mov	r0, r7
 80149ea:	f7ff ff69 	bl	80148c0 <rcl_get_secure_root>
 80149ee:	b160      	cbz	r0, 8014a0a <rcl_get_security_options_from_environment+0x76>
 80149f0:	6070      	str	r0, [r6, #4]
 80149f2:	4628      	mov	r0, r5
 80149f4:	b002      	add	sp, #8
 80149f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149fa:	4625      	mov	r5, r4
 80149fc:	4628      	mov	r0, r5
 80149fe:	7034      	strb	r4, [r6, #0]
 8014a00:	b002      	add	sp, #8
 8014a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a06:	250b      	movs	r5, #11
 8014a08:	e7d2      	b.n	80149b0 <rcl_get_security_options_from_environment+0x1c>
 8014a0a:	7835      	ldrb	r5, [r6, #0]
 8014a0c:	f1a5 0501 	sub.w	r5, r5, #1
 8014a10:	fab5 f585 	clz	r5, r5
 8014a14:	096d      	lsrs	r5, r5, #5
 8014a16:	e7cb      	b.n	80149b0 <rcl_get_security_options_from_environment+0x1c>
 8014a18:	0801e2a8 	.word	0x0801e2a8
 8014a1c:	0801e2bc 	.word	0x0801e2bc
 8014a20:	0801e2c4 	.word	0x0801e2c4
 8014a24:	0801e2dc 	.word	0x0801e2dc

08014a28 <rcl_service_get_rmw_handle>:
 8014a28:	b110      	cbz	r0, 8014a30 <rcl_service_get_rmw_handle+0x8>
 8014a2a:	6800      	ldr	r0, [r0, #0]
 8014a2c:	b100      	cbz	r0, 8014a30 <rcl_service_get_rmw_handle+0x8>
 8014a2e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8014a30:	4770      	bx	lr
 8014a32:	bf00      	nop

08014a34 <rcl_take_request>:
 8014a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a36:	460e      	mov	r6, r1
 8014a38:	460c      	mov	r4, r1
 8014a3a:	4607      	mov	r7, r0
 8014a3c:	4694      	mov	ip, r2
 8014a3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014a40:	b08d      	sub	sp, #52	; 0x34
 8014a42:	ad06      	add	r5, sp, #24
 8014a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014a46:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014a4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8014a4e:	b1e7      	cbz	r7, 8014a8a <rcl_take_request+0x56>
 8014a50:	683b      	ldr	r3, [r7, #0]
 8014a52:	b1d3      	cbz	r3, 8014a8a <rcl_take_request+0x56>
 8014a54:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8014a56:	b1c0      	cbz	r0, 8014a8a <rcl_take_request+0x56>
 8014a58:	4662      	mov	r2, ip
 8014a5a:	b30a      	cbz	r2, 8014aa0 <rcl_take_request+0x6c>
 8014a5c:	2500      	movs	r5, #0
 8014a5e:	f10d 0307 	add.w	r3, sp, #7
 8014a62:	a902      	add	r1, sp, #8
 8014a64:	f88d 5007 	strb.w	r5, [sp, #7]
 8014a68:	f001 ff76 	bl	8016958 <rmw_take_request>
 8014a6c:	4606      	mov	r6, r0
 8014a6e:	b178      	cbz	r0, 8014a90 <rcl_take_request+0x5c>
 8014a70:	280a      	cmp	r0, #10
 8014a72:	bf18      	it	ne
 8014a74:	2601      	movne	r6, #1
 8014a76:	ad06      	add	r5, sp, #24
 8014a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014a80:	e884 0003 	stmia.w	r4, {r0, r1}
 8014a84:	4630      	mov	r0, r6
 8014a86:	b00d      	add	sp, #52	; 0x34
 8014a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a8a:	f44f 7616 	mov.w	r6, #600	; 0x258
 8014a8e:	e7f2      	b.n	8014a76 <rcl_take_request+0x42>
 8014a90:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014a94:	f240 2359 	movw	r3, #601	; 0x259
 8014a98:	2a00      	cmp	r2, #0
 8014a9a:	bf08      	it	eq
 8014a9c:	461e      	moveq	r6, r3
 8014a9e:	e7ea      	b.n	8014a76 <rcl_take_request+0x42>
 8014aa0:	260b      	movs	r6, #11
 8014aa2:	e7e8      	b.n	8014a76 <rcl_take_request+0x42>

08014aa4 <rcl_send_response>:
 8014aa4:	b160      	cbz	r0, 8014ac0 <rcl_send_response+0x1c>
 8014aa6:	6800      	ldr	r0, [r0, #0]
 8014aa8:	b150      	cbz	r0, 8014ac0 <rcl_send_response+0x1c>
 8014aaa:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8014aac:	b140      	cbz	r0, 8014ac0 <rcl_send_response+0x1c>
 8014aae:	b151      	cbz	r1, 8014ac6 <rcl_send_response+0x22>
 8014ab0:	b510      	push	{r4, lr}
 8014ab2:	b152      	cbz	r2, 8014aca <rcl_send_response+0x26>
 8014ab4:	f001 ffae 	bl	8016a14 <rmw_send_response>
 8014ab8:	3800      	subs	r0, #0
 8014aba:	bf18      	it	ne
 8014abc:	2001      	movne	r0, #1
 8014abe:	bd10      	pop	{r4, pc}
 8014ac0:	f44f 7016 	mov.w	r0, #600	; 0x258
 8014ac4:	4770      	bx	lr
 8014ac6:	200b      	movs	r0, #11
 8014ac8:	4770      	bx	lr
 8014aca:	200b      	movs	r0, #11
 8014acc:	bd10      	pop	{r4, pc}
 8014ace:	bf00      	nop

08014ad0 <rcl_get_zero_initialized_subscription>:
 8014ad0:	4b01      	ldr	r3, [pc, #4]	; (8014ad8 <rcl_get_zero_initialized_subscription+0x8>)
 8014ad2:	6818      	ldr	r0, [r3, #0]
 8014ad4:	4770      	bx	lr
 8014ad6:	bf00      	nop
 8014ad8:	0801e328 	.word	0x0801e328

08014adc <rcl_subscription_init>:
 8014adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ae0:	b091      	sub	sp, #68	; 0x44
 8014ae2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8014ae4:	b1d7      	cbz	r7, 8014b1c <rcl_subscription_init+0x40>
 8014ae6:	f107 0950 	add.w	r9, r7, #80	; 0x50
 8014aea:	4604      	mov	r4, r0
 8014aec:	4648      	mov	r0, r9
 8014aee:	4688      	mov	r8, r1
 8014af0:	4616      	mov	r6, r2
 8014af2:	461d      	mov	r5, r3
 8014af4:	f7f9 ff12 	bl	800e91c <rcutils_allocator_is_valid>
 8014af8:	b180      	cbz	r0, 8014b1c <rcl_subscription_init+0x40>
 8014afa:	b17c      	cbz	r4, 8014b1c <rcl_subscription_init+0x40>
 8014afc:	4640      	mov	r0, r8
 8014afe:	f7ff fe77 	bl	80147f0 <rcl_node_is_valid>
 8014b02:	b380      	cbz	r0, 8014b66 <rcl_subscription_init+0x8a>
 8014b04:	b156      	cbz	r6, 8014b1c <rcl_subscription_init+0x40>
 8014b06:	b14d      	cbz	r5, 8014b1c <rcl_subscription_init+0x40>
 8014b08:	f8d4 a000 	ldr.w	sl, [r4]
 8014b0c:	f1ba 0f00 	cmp.w	sl, #0
 8014b10:	d009      	beq.n	8014b26 <rcl_subscription_init+0x4a>
 8014b12:	2564      	movs	r5, #100	; 0x64
 8014b14:	4628      	mov	r0, r5
 8014b16:	b011      	add	sp, #68	; 0x44
 8014b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b1c:	250b      	movs	r5, #11
 8014b1e:	4628      	mov	r0, r5
 8014b20:	b011      	add	sp, #68	; 0x44
 8014b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b26:	46ce      	mov	lr, r9
 8014b28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014b2c:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8014b30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014b34:	f8de 3000 	ldr.w	r3, [lr]
 8014b38:	f8cc 3000 	str.w	r3, [ip]
 8014b3c:	f7f9 ff2a 	bl	800e994 <rcutils_get_zero_initialized_string_map>
 8014b40:	ab10      	add	r3, sp, #64	; 0x40
 8014b42:	4684      	mov	ip, r0
 8014b44:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014b48:	f8cd c020 	str.w	ip, [sp, #32]
 8014b4c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014b50:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8014b54:	4651      	mov	r1, sl
 8014b56:	a808      	add	r0, sp, #32
 8014b58:	f7f9 ff96 	bl	800ea88 <rcutils_string_map_init>
 8014b5c:	b140      	cbz	r0, 8014b70 <rcl_subscription_init+0x94>
 8014b5e:	280a      	cmp	r0, #10
 8014b60:	d011      	beq.n	8014b86 <rcl_subscription_init+0xaa>
 8014b62:	2501      	movs	r5, #1
 8014b64:	e7db      	b.n	8014b1e <rcl_subscription_init+0x42>
 8014b66:	25c8      	movs	r5, #200	; 0xc8
 8014b68:	4628      	mov	r0, r5
 8014b6a:	b011      	add	sp, #68	; 0x44
 8014b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b70:	a808      	add	r0, sp, #32
 8014b72:	f7ff fb91 	bl	8014298 <rcl_get_default_topic_name_substitutions>
 8014b76:	4682      	mov	sl, r0
 8014b78:	b138      	cbz	r0, 8014b8a <rcl_subscription_init+0xae>
 8014b7a:	a808      	add	r0, sp, #32
 8014b7c:	f7f9 ffc4 	bl	800eb08 <rcutils_string_map_fini>
 8014b80:	f1ba 0f0a 	cmp.w	sl, #10
 8014b84:	d1ed      	bne.n	8014b62 <rcl_subscription_init+0x86>
 8014b86:	250a      	movs	r5, #10
 8014b88:	e7c9      	b.n	8014b1e <rcl_subscription_init+0x42>
 8014b8a:	4640      	mov	r0, r8
 8014b8c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014b90:	f7ff fe38 	bl	8014804 <rcl_node_get_name>
 8014b94:	4682      	mov	sl, r0
 8014b96:	4640      	mov	r0, r8
 8014b98:	f7ff fe3c 	bl	8014814 <rcl_node_get_namespace>
 8014b9c:	4686      	mov	lr, r0
 8014b9e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8014ba2:	f10d 0b24 	add.w	fp, sp, #36	; 0x24
 8014ba6:	46ec      	mov	ip, sp
 8014ba8:	f8cd b014 	str.w	fp, [sp, #20]
 8014bac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014bb0:	f8d9 3000 	ldr.w	r3, [r9]
 8014bb4:	f8cc 3000 	str.w	r3, [ip]
 8014bb8:	4628      	mov	r0, r5
 8014bba:	4651      	mov	r1, sl
 8014bbc:	4672      	mov	r2, lr
 8014bbe:	ab08      	add	r3, sp, #32
 8014bc0:	f7ff fa04 	bl	8013fcc <rcl_expand_topic_name>
 8014bc4:	4605      	mov	r5, r0
 8014bc6:	a808      	add	r0, sp, #32
 8014bc8:	f7f9 ff9e 	bl	800eb08 <rcutils_string_map_fini>
 8014bcc:	b920      	cbnz	r0, 8014bd8 <rcl_subscription_init+0xfc>
 8014bce:	b15d      	cbz	r5, 8014be8 <rcl_subscription_init+0x10c>
 8014bd0:	2d67      	cmp	r5, #103	; 0x67
 8014bd2:	d002      	beq.n	8014bda <rcl_subscription_init+0xfe>
 8014bd4:	2d69      	cmp	r5, #105	; 0x69
 8014bd6:	d05a      	beq.n	8014c8e <rcl_subscription_init+0x1b2>
 8014bd8:	2501      	movs	r5, #1
 8014bda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014bdc:	2800      	cmp	r0, #0
 8014bde:	d09e      	beq.n	8014b1e <rcl_subscription_init+0x42>
 8014be0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014be2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014be4:	4798      	blx	r3
 8014be6:	e79a      	b.n	8014b1e <rcl_subscription_init+0x42>
 8014be8:	4640      	mov	r0, r8
 8014bea:	f7ff fe1b 	bl	8014824 <rcl_node_get_options>
 8014bee:	2800      	cmp	r0, #0
 8014bf0:	d0f2      	beq.n	8014bd8 <rcl_subscription_init+0xfc>
 8014bf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014bf4:	f7eb fafe 	bl	80001f4 <strlen>
 8014bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bfa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014bfc:	3001      	adds	r0, #1
 8014bfe:	4798      	blx	r3
 8014c00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c02:	9107      	str	r1, [sp, #28]
 8014c04:	4681      	mov	r9, r0
 8014c06:	4608      	mov	r0, r1
 8014c08:	f7eb faf4 	bl	80001f4 <strlen>
 8014c0c:	9907      	ldr	r1, [sp, #28]
 8014c0e:	1c42      	adds	r2, r0, #1
 8014c10:	4648      	mov	r0, r9
 8014c12:	f004 fa43 	bl	801909c <memcpy>
 8014c16:	462a      	mov	r2, r5
 8014c18:	4648      	mov	r0, r9
 8014c1a:	a90a      	add	r1, sp, #40	; 0x28
 8014c1c:	f7fa f850 	bl	800ecc0 <rmw_validate_full_topic_name>
 8014c20:	2800      	cmp	r0, #0
 8014c22:	d132      	bne.n	8014c8a <rcl_subscription_init+0x1ae>
 8014c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d133      	bne.n	8014c92 <rcl_subscription_init+0x1b6>
 8014c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014c2e:	20c8      	movs	r0, #200	; 0xc8
 8014c30:	4798      	blx	r3
 8014c32:	6020      	str	r0, [r4, #0]
 8014c34:	b378      	cbz	r0, 8014c96 <rcl_subscription_init+0x1ba>
 8014c36:	4640      	mov	r0, r8
 8014c38:	f7ff fdfc 	bl	8014834 <rcl_node_get_rmw_handle>
 8014c3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014c40:	9300      	str	r3, [sp, #0]
 8014c42:	4631      	mov	r1, r6
 8014c44:	463b      	mov	r3, r7
 8014c46:	464a      	mov	r2, r9
 8014c48:	6825      	ldr	r5, [r4, #0]
 8014c4a:	f7fa fe03 	bl	800f854 <rmw_create_subscription>
 8014c4e:	6821      	ldr	r1, [r4, #0]
 8014c50:	f8c5 00c0 	str.w	r0, [r5, #192]	; 0xc0
 8014c54:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 8014c58:	b368      	cbz	r0, 8014cb6 <rcl_subscription_init+0x1da>
 8014c5a:	3170      	adds	r1, #112	; 0x70
 8014c5c:	f7fa feda 	bl	800fa14 <rmw_subscription_get_actual_qos>
 8014c60:	4605      	mov	r5, r0
 8014c62:	b9d0      	cbnz	r0, 8014c9a <rcl_subscription_init+0x1be>
 8014c64:	6820      	ldr	r0, [r4, #0]
 8014c66:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8014c6a:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8014c6e:	2270      	movs	r2, #112	; 0x70
 8014c70:	4639      	mov	r1, r7
 8014c72:	f004 fa13 	bl	801909c <memcpy>
 8014c76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c78:	b110      	cbz	r0, 8014c80 <rcl_subscription_init+0x1a4>
 8014c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c7c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014c7e:	4798      	blx	r3
 8014c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c82:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014c84:	4648      	mov	r0, r9
 8014c86:	4798      	blx	r3
 8014c88:	e749      	b.n	8014b1e <rcl_subscription_init+0x42>
 8014c8a:	2501      	movs	r5, #1
 8014c8c:	e7f3      	b.n	8014c76 <rcl_subscription_init+0x19a>
 8014c8e:	2567      	movs	r5, #103	; 0x67
 8014c90:	e7a3      	b.n	8014bda <rcl_subscription_init+0xfe>
 8014c92:	2567      	movs	r5, #103	; 0x67
 8014c94:	e7ef      	b.n	8014c76 <rcl_subscription_init+0x19a>
 8014c96:	250a      	movs	r5, #10
 8014c98:	e7ed      	b.n	8014c76 <rcl_subscription_init+0x19a>
 8014c9a:	6823      	ldr	r3, [r4, #0]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d0f4      	beq.n	8014c8a <rcl_subscription_init+0x1ae>
 8014ca0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8014ca4:	b13b      	cbz	r3, 8014cb6 <rcl_subscription_init+0x1da>
 8014ca6:	4640      	mov	r0, r8
 8014ca8:	f7ff fdc4 	bl	8014834 <rcl_node_get_rmw_handle>
 8014cac:	6823      	ldr	r3, [r4, #0]
 8014cae:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8014cb2:	f7fa feb1 	bl	800fa18 <rmw_destroy_subscription>
 8014cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014cb8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014cba:	6820      	ldr	r0, [r4, #0]
 8014cbc:	4798      	blx	r3
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	6023      	str	r3, [r4, #0]
 8014cc2:	2501      	movs	r5, #1
 8014cc4:	e7d7      	b.n	8014c76 <rcl_subscription_init+0x19a>
 8014cc6:	bf00      	nop

08014cc8 <rcl_subscription_get_default_options>:
 8014cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ccc:	4f12      	ldr	r7, [pc, #72]	; (8014d18 <rcl_subscription_get_default_options+0x50>)
 8014cce:	4913      	ldr	r1, [pc, #76]	; (8014d1c <rcl_subscription_get_default_options+0x54>)
 8014cd0:	b088      	sub	sp, #32
 8014cd2:	4606      	mov	r6, r0
 8014cd4:	2250      	movs	r2, #80	; 0x50
 8014cd6:	4638      	mov	r0, r7
 8014cd8:	f004 f9e0 	bl	801909c <memcpy>
 8014cdc:	ac02      	add	r4, sp, #8
 8014cde:	a802      	add	r0, sp, #8
 8014ce0:	f7f9 fe0e 	bl	800e900 <rcutils_get_default_allocator>
 8014ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ce6:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8014cea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014cec:	46e8      	mov	r8, sp
 8014cee:	6823      	ldr	r3, [r4, #0]
 8014cf0:	602b      	str	r3, [r5, #0]
 8014cf2:	4640      	mov	r0, r8
 8014cf4:	f001 fb7a 	bl	80163ec <rmw_get_default_subscription_options>
 8014cf8:	e898 0003 	ldmia.w	r8, {r0, r1}
 8014cfc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8014d00:	e883 0003 	stmia.w	r3, {r0, r1}
 8014d04:	2270      	movs	r2, #112	; 0x70
 8014d06:	4639      	mov	r1, r7
 8014d08:	4630      	mov	r0, r6
 8014d0a:	f004 f9c7 	bl	801909c <memcpy>
 8014d0e:	4630      	mov	r0, r6
 8014d10:	b008      	add	sp, #32
 8014d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d16:	bf00      	nop
 8014d18:	20009f20 	.word	0x20009f20
 8014d1c:	0801e330 	.word	0x0801e330

08014d20 <rcl_take>:
 8014d20:	2800      	cmp	r0, #0
 8014d22:	d03f      	beq.n	8014da4 <rcl_take+0x84>
 8014d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d28:	4617      	mov	r7, r2
 8014d2a:	6802      	ldr	r2, [r0, #0]
 8014d2c:	b09d      	sub	sp, #116	; 0x74
 8014d2e:	4606      	mov	r6, r0
 8014d30:	b382      	cbz	r2, 8014d94 <rcl_take+0x74>
 8014d32:	4699      	mov	r9, r3
 8014d34:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8014d38:	b363      	cbz	r3, 8014d94 <rcl_take+0x74>
 8014d3a:	4688      	mov	r8, r1
 8014d3c:	b381      	cbz	r1, 8014da0 <rcl_take+0x80>
 8014d3e:	2f00      	cmp	r7, #0
 8014d40:	d034      	beq.n	8014dac <rcl_take+0x8c>
 8014d42:	a802      	add	r0, sp, #8
 8014d44:	ac02      	add	r4, sp, #8
 8014d46:	f001 fb55 	bl	80163f4 <rmw_get_zero_initialized_message_info>
 8014d4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d4c:	463d      	mov	r5, r7
 8014d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014d52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014d58:	6834      	ldr	r4, [r6, #0]
 8014d5a:	f8d4 60c0 	ldr.w	r6, [r4, #192]	; 0xc0
 8014d5e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8014d62:	2400      	movs	r4, #0
 8014d64:	463b      	mov	r3, r7
 8014d66:	4630      	mov	r0, r6
 8014d68:	f8cd 9000 	str.w	r9, [sp]
 8014d6c:	4641      	mov	r1, r8
 8014d6e:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
 8014d72:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 8014d76:	f001 fef7 	bl	8016b68 <rmw_take_with_info>
 8014d7a:	4603      	mov	r3, r0
 8014d7c:	b9c0      	cbnz	r0, 8014db0 <rcl_take+0x90>
 8014d7e:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
 8014d82:	f240 1291 	movw	r2, #401	; 0x191
 8014d86:	2900      	cmp	r1, #0
 8014d88:	bf08      	it	eq
 8014d8a:	4613      	moveq	r3, r2
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	b01d      	add	sp, #116	; 0x74
 8014d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d94:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014d98:	4618      	mov	r0, r3
 8014d9a:	b01d      	add	sp, #116	; 0x74
 8014d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014da0:	230b      	movs	r3, #11
 8014da2:	e7f3      	b.n	8014d8c <rcl_take+0x6c>
 8014da4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8014da8:	4618      	mov	r0, r3
 8014daa:	4770      	bx	lr
 8014dac:	af10      	add	r7, sp, #64	; 0x40
 8014dae:	e7c8      	b.n	8014d42 <rcl_take+0x22>
 8014db0:	f7ff f884 	bl	8013ebc <rcl_convert_rmw_ret_to_rcl_ret>
 8014db4:	4603      	mov	r3, r0
 8014db6:	e7e9      	b.n	8014d8c <rcl_take+0x6c>

08014db8 <rcl_subscription_get_rmw_handle>:
 8014db8:	b118      	cbz	r0, 8014dc2 <rcl_subscription_get_rmw_handle+0xa>
 8014dba:	6800      	ldr	r0, [r0, #0]
 8014dbc:	b108      	cbz	r0, 8014dc2 <rcl_subscription_get_rmw_handle+0xa>
 8014dbe:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8014dc2:	4770      	bx	lr

08014dc4 <rcl_get_system_time>:
 8014dc4:	4608      	mov	r0, r1
 8014dc6:	f7f9 bf15 	b.w	800ebf4 <rcutils_system_time_now>
 8014dca:	bf00      	nop

08014dcc <rcl_get_steady_time>:
 8014dcc:	4608      	mov	r0, r1
 8014dce:	f7f9 bf39 	b.w	800ec44 <rcutils_steady_time_now>
 8014dd2:	bf00      	nop

08014dd4 <rcl_get_ros_time>:
 8014dd4:	7a03      	ldrb	r3, [r0, #8]
 8014dd6:	b510      	push	{r4, lr}
 8014dd8:	460c      	mov	r4, r1
 8014dda:	b133      	cbz	r3, 8014dea <rcl_get_ros_time+0x16>
 8014ddc:	2105      	movs	r1, #5
 8014dde:	f001 f8e3 	bl	8015fa8 <__atomic_load_8>
 8014de2:	e9c4 0100 	strd	r0, r1, [r4]
 8014de6:	2000      	movs	r0, #0
 8014de8:	bd10      	pop	{r4, pc}
 8014dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014dee:	4608      	mov	r0, r1
 8014df0:	f7f9 bf00 	b.w	800ebf4 <rcutils_system_time_now>

08014df4 <rcl_clock_init>:
 8014df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014df8:	4606      	mov	r6, r0
 8014dfa:	4610      	mov	r0, r2
 8014dfc:	4614      	mov	r4, r2
 8014dfe:	460d      	mov	r5, r1
 8014e00:	f7f9 fd8c 	bl	800e91c <rcutils_allocator_is_valid>
 8014e04:	b128      	cbz	r0, 8014e12 <rcl_clock_init+0x1e>
 8014e06:	2e03      	cmp	r6, #3
 8014e08:	d803      	bhi.n	8014e12 <rcl_clock_init+0x1e>
 8014e0a:	e8df f006 	tbb	[pc, r6]
 8014e0e:	2c1b      	.short	0x2c1b
 8014e10:	0554      	.short	0x0554
 8014e12:	200b      	movs	r0, #11
 8014e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e18:	2d00      	cmp	r5, #0
 8014e1a:	d0fa      	beq.n	8014e12 <rcl_clock_init+0x1e>
 8014e1c:	2c00      	cmp	r4, #0
 8014e1e:	d0f8      	beq.n	8014e12 <rcl_clock_init+0x1e>
 8014e20:	2600      	movs	r6, #0
 8014e22:	702e      	strb	r6, [r5, #0]
 8014e24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e26:	f105 0714 	add.w	r7, r5, #20
 8014e2a:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8014e2e:	612e      	str	r6, [r5, #16]
 8014e30:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014e32:	6823      	ldr	r3, [r4, #0]
 8014e34:	603b      	str	r3, [r7, #0]
 8014e36:	2303      	movs	r3, #3
 8014e38:	4a2b      	ldr	r2, [pc, #172]	; (8014ee8 <rcl_clock_init+0xf4>)
 8014e3a:	702b      	strb	r3, [r5, #0]
 8014e3c:	4630      	mov	r0, r6
 8014e3e:	60ea      	str	r2, [r5, #12]
 8014e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e44:	2d00      	cmp	r5, #0
 8014e46:	d0e4      	beq.n	8014e12 <rcl_clock_init+0x1e>
 8014e48:	2600      	movs	r6, #0
 8014e4a:	702e      	strb	r6, [r5, #0]
 8014e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014e4e:	f105 0714 	add.w	r7, r5, #20
 8014e52:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8014e56:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8014e5a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014e5c:	6823      	ldr	r3, [r4, #0]
 8014e5e:	603b      	str	r3, [r7, #0]
 8014e60:	4630      	mov	r0, r6
 8014e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e66:	2d00      	cmp	r5, #0
 8014e68:	d0d3      	beq.n	8014e12 <rcl_clock_init+0x1e>
 8014e6a:	2c00      	cmp	r4, #0
 8014e6c:	d0d1      	beq.n	8014e12 <rcl_clock_init+0x1e>
 8014e6e:	2600      	movs	r6, #0
 8014e70:	702e      	strb	r6, [r5, #0]
 8014e72:	46a4      	mov	ip, r4
 8014e74:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e78:	f105 0714 	add.w	r7, r5, #20
 8014e7c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8014e80:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8014e84:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014e86:	f8dc 3000 	ldr.w	r3, [ip]
 8014e8a:	603b      	str	r3, [r7, #0]
 8014e8c:	6921      	ldr	r1, [r4, #16]
 8014e8e:	6823      	ldr	r3, [r4, #0]
 8014e90:	2010      	movs	r0, #16
 8014e92:	4798      	blx	r3
 8014e94:	4603      	mov	r3, r0
 8014e96:	6128      	str	r0, [r5, #16]
 8014e98:	b318      	cbz	r0, 8014ee2 <rcl_clock_init+0xee>
 8014e9a:	f04f 0800 	mov.w	r8, #0
 8014e9e:	f04f 0900 	mov.w	r9, #0
 8014ea2:	7206      	strb	r6, [r0, #8]
 8014ea4:	e9c3 8900 	strd	r8, r9, [r3]
 8014ea8:	2301      	movs	r3, #1
 8014eaa:	4a10      	ldr	r2, [pc, #64]	; (8014eec <rcl_clock_init+0xf8>)
 8014eac:	702b      	strb	r3, [r5, #0]
 8014eae:	4630      	mov	r0, r6
 8014eb0:	60ea      	str	r2, [r5, #12]
 8014eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014eb6:	2d00      	cmp	r5, #0
 8014eb8:	d0ab      	beq.n	8014e12 <rcl_clock_init+0x1e>
 8014eba:	2c00      	cmp	r4, #0
 8014ebc:	d0a9      	beq.n	8014e12 <rcl_clock_init+0x1e>
 8014ebe:	2600      	movs	r6, #0
 8014ec0:	702e      	strb	r6, [r5, #0]
 8014ec2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014ec4:	f105 0714 	add.w	r7, r5, #20
 8014ec8:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8014ecc:	612e      	str	r6, [r5, #16]
 8014ece:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014ed0:	6823      	ldr	r3, [r4, #0]
 8014ed2:	603b      	str	r3, [r7, #0]
 8014ed4:	2302      	movs	r3, #2
 8014ed6:	4a06      	ldr	r2, [pc, #24]	; (8014ef0 <rcl_clock_init+0xfc>)
 8014ed8:	702b      	strb	r3, [r5, #0]
 8014eda:	4630      	mov	r0, r6
 8014edc:	60ea      	str	r2, [r5, #12]
 8014ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ee2:	200a      	movs	r0, #10
 8014ee4:	e796      	b.n	8014e14 <rcl_clock_init+0x20>
 8014ee6:	bf00      	nop
 8014ee8:	08014dcd 	.word	0x08014dcd
 8014eec:	08014dd5 	.word	0x08014dd5
 8014ef0:	08014dc5 	.word	0x08014dc5

08014ef4 <rcl_clock_get_now>:
 8014ef4:	b140      	cbz	r0, 8014f08 <rcl_clock_get_now+0x14>
 8014ef6:	b139      	cbz	r1, 8014f08 <rcl_clock_get_now+0x14>
 8014ef8:	7803      	ldrb	r3, [r0, #0]
 8014efa:	b11b      	cbz	r3, 8014f04 <rcl_clock_get_now+0x10>
 8014efc:	68c3      	ldr	r3, [r0, #12]
 8014efe:	b10b      	cbz	r3, 8014f04 <rcl_clock_get_now+0x10>
 8014f00:	6900      	ldr	r0, [r0, #16]
 8014f02:	4718      	bx	r3
 8014f04:	2001      	movs	r0, #1
 8014f06:	4770      	bx	lr
 8014f08:	200b      	movs	r0, #11
 8014f0a:	4770      	bx	lr

08014f0c <rcl_timer_call>:
 8014f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f10:	b08b      	sub	sp, #44	; 0x2c
 8014f12:	2800      	cmp	r0, #0
 8014f14:	d06e      	beq.n	8014ff4 <rcl_timer_call+0xe8>
 8014f16:	6803      	ldr	r3, [r0, #0]
 8014f18:	f3bf 8f5b 	dmb	ish
 8014f1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014f20:	f3bf 8f5b 	dmb	ish
 8014f24:	4604      	mov	r4, r0
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d159      	bne.n	8014fde <rcl_timer_call+0xd2>
 8014f2a:	6803      	ldr	r3, [r0, #0]
 8014f2c:	a908      	add	r1, sp, #32
 8014f2e:	6818      	ldr	r0, [r3, #0]
 8014f30:	f7ff ffe0 	bl	8014ef4 <rcl_clock_get_now>
 8014f34:	4605      	mov	r5, r0
 8014f36:	2800      	cmp	r0, #0
 8014f38:	d14d      	bne.n	8014fd6 <rcl_timer_call+0xca>
 8014f3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014f3e:	2a00      	cmp	r2, #0
 8014f40:	f173 0100 	sbcs.w	r1, r3, #0
 8014f44:	db51      	blt.n	8014fea <rcl_timer_call+0xde>
 8014f46:	6820      	ldr	r0, [r4, #0]
 8014f48:	2605      	movs	r6, #5
 8014f4a:	9600      	str	r6, [sp, #0]
 8014f4c:	3020      	adds	r0, #32
 8014f4e:	f001 f893 	bl	8016078 <__atomic_exchange_8>
 8014f52:	6822      	ldr	r2, [r4, #0]
 8014f54:	f3bf 8f5b 	dmb	ish
 8014f58:	4682      	mov	sl, r0
 8014f5a:	f8d2 b010 	ldr.w	fp, [r2, #16]
 8014f5e:	f3bf 8f5b 	dmb	ish
 8014f62:	6820      	ldr	r0, [r4, #0]
 8014f64:	460b      	mov	r3, r1
 8014f66:	3028      	adds	r0, #40	; 0x28
 8014f68:	4631      	mov	r1, r6
 8014f6a:	9305      	str	r3, [sp, #20]
 8014f6c:	f001 f81c 	bl	8015fa8 <__atomic_load_8>
 8014f70:	4603      	mov	r3, r0
 8014f72:	6820      	ldr	r0, [r4, #0]
 8014f74:	460a      	mov	r2, r1
 8014f76:	3018      	adds	r0, #24
 8014f78:	4631      	mov	r1, r6
 8014f7a:	e9cd 2303 	strd	r2, r3, [sp, #12]
 8014f7e:	f001 f813 	bl	8015fa8 <__atomic_load_8>
 8014f82:	9b04      	ldr	r3, [sp, #16]
 8014f84:	9a03      	ldr	r2, [sp, #12]
 8014f86:	4606      	mov	r6, r0
 8014f88:	460f      	mov	r7, r1
 8014f8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014f8e:	eb13 0806 	adds.w	r8, r3, r6
 8014f92:	eb42 0907 	adc.w	r9, r2, r7
 8014f96:	4580      	cmp	r8, r0
 8014f98:	eb79 0301 	sbcs.w	r3, r9, r1
 8014f9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014fa0:	460a      	mov	r2, r1
 8014fa2:	da04      	bge.n	8014fae <rcl_timer_call+0xa2>
 8014fa4:	ea56 0307 	orrs.w	r3, r6, r7
 8014fa8:	d129      	bne.n	8014ffe <rcl_timer_call+0xf2>
 8014faa:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8014fae:	6820      	ldr	r0, [r4, #0]
 8014fb0:	2105      	movs	r1, #5
 8014fb2:	4642      	mov	r2, r8
 8014fb4:	464b      	mov	r3, r9
 8014fb6:	3028      	adds	r0, #40	; 0x28
 8014fb8:	9100      	str	r1, [sp, #0]
 8014fba:	f001 f829 	bl	8016010 <__atomic_store_8>
 8014fbe:	f1bb 0f00 	cmp.w	fp, #0
 8014fc2:	d008      	beq.n	8014fd6 <rcl_timer_call+0xca>
 8014fc4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014fc8:	9905      	ldr	r1, [sp, #20]
 8014fca:	ebb2 020a 	subs.w	r2, r2, sl
 8014fce:	4620      	mov	r0, r4
 8014fd0:	eb63 0301 	sbc.w	r3, r3, r1
 8014fd4:	47d8      	blx	fp
 8014fd6:	4628      	mov	r0, r5
 8014fd8:	b00b      	add	sp, #44	; 0x2c
 8014fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fde:	f240 3521 	movw	r5, #801	; 0x321
 8014fe2:	4628      	mov	r0, r5
 8014fe4:	b00b      	add	sp, #44	; 0x2c
 8014fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fea:	2501      	movs	r5, #1
 8014fec:	4628      	mov	r0, r5
 8014fee:	b00b      	add	sp, #44	; 0x2c
 8014ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ff4:	250b      	movs	r5, #11
 8014ff6:	4628      	mov	r0, r5
 8014ff8:	b00b      	add	sp, #44	; 0x2c
 8014ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ffe:	ebb0 0008 	subs.w	r0, r0, r8
 8015002:	eb62 0109 	sbc.w	r1, r2, r9
 8015006:	f110 30ff 	adds.w	r0, r0, #4294967295	; 0xffffffff
 801500a:	463b      	mov	r3, r7
 801500c:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8015010:	4632      	mov	r2, r6
 8015012:	f7eb fe51 	bl	8000cb8 <__aeabi_ldivmod>
 8015016:	1c43      	adds	r3, r0, #1
 8015018:	f141 0100 	adc.w	r1, r1, #0
 801501c:	fb00 7007 	mla	r0, r0, r7, r7
 8015020:	fb06 0001 	mla	r0, r6, r1, r0
 8015024:	fba3 6706 	umull	r6, r7, r3, r6
 8015028:	4407      	add	r7, r0
 801502a:	eb18 0806 	adds.w	r8, r8, r6
 801502e:	eb49 0907 	adc.w	r9, r9, r7
 8015032:	e7bc      	b.n	8014fae <rcl_timer_call+0xa2>

08015034 <rcl_timer_is_ready>:
 8015034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015038:	b082      	sub	sp, #8
 801503a:	b310      	cbz	r0, 8015082 <rcl_timer_is_ready+0x4e>
 801503c:	4688      	mov	r8, r1
 801503e:	b301      	cbz	r1, 8015082 <rcl_timer_is_ready+0x4e>
 8015040:	6803      	ldr	r3, [r0, #0]
 8015042:	4604      	mov	r4, r0
 8015044:	4669      	mov	r1, sp
 8015046:	6818      	ldr	r0, [r3, #0]
 8015048:	f7ff ff54 	bl	8014ef4 <rcl_clock_get_now>
 801504c:	4605      	mov	r5, r0
 801504e:	b118      	cbz	r0, 8015058 <rcl_timer_is_ready+0x24>
 8015050:	4628      	mov	r0, r5
 8015052:	b002      	add	sp, #8
 8015054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015058:	6820      	ldr	r0, [r4, #0]
 801505a:	2105      	movs	r1, #5
 801505c:	3028      	adds	r0, #40	; 0x28
 801505e:	f000 ffa3 	bl	8015fa8 <__atomic_load_8>
 8015062:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015066:	1ac6      	subs	r6, r0, r3
 8015068:	eb61 0702 	sbc.w	r7, r1, r2
 801506c:	2e01      	cmp	r6, #1
 801506e:	f177 0300 	sbcs.w	r3, r7, #0
 8015072:	db0b      	blt.n	801508c <rcl_timer_is_ready+0x58>
 8015074:	462b      	mov	r3, r5
 8015076:	4628      	mov	r0, r5
 8015078:	f888 3000 	strb.w	r3, [r8]
 801507c:	b002      	add	sp, #8
 801507e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015082:	250b      	movs	r5, #11
 8015084:	4628      	mov	r0, r5
 8015086:	b002      	add	sp, #8
 8015088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801508c:	6823      	ldr	r3, [r4, #0]
 801508e:	f3bf 8f5b 	dmb	ish
 8015092:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015096:	f3bf 8f5b 	dmb	ish
 801509a:	fab3 f383 	clz	r3, r3
 801509e:	095b      	lsrs	r3, r3, #5
 80150a0:	e7e9      	b.n	8015076 <rcl_timer_is_ready+0x42>
 80150a2:	bf00      	nop

080150a4 <rcl_timer_get_time_until_next_call>:
 80150a4:	b570      	push	{r4, r5, r6, lr}
 80150a6:	b082      	sub	sp, #8
 80150a8:	b1d8      	cbz	r0, 80150e2 <rcl_timer_get_time_until_next_call+0x3e>
 80150aa:	460d      	mov	r5, r1
 80150ac:	b1c9      	cbz	r1, 80150e2 <rcl_timer_get_time_until_next_call+0x3e>
 80150ae:	6803      	ldr	r3, [r0, #0]
 80150b0:	4604      	mov	r4, r0
 80150b2:	4669      	mov	r1, sp
 80150b4:	6818      	ldr	r0, [r3, #0]
 80150b6:	f7ff ff1d 	bl	8014ef4 <rcl_clock_get_now>
 80150ba:	4606      	mov	r6, r0
 80150bc:	b110      	cbz	r0, 80150c4 <rcl_timer_get_time_until_next_call+0x20>
 80150be:	4630      	mov	r0, r6
 80150c0:	b002      	add	sp, #8
 80150c2:	bd70      	pop	{r4, r5, r6, pc}
 80150c4:	6820      	ldr	r0, [r4, #0]
 80150c6:	2105      	movs	r1, #5
 80150c8:	3028      	adds	r0, #40	; 0x28
 80150ca:	f000 ff6d 	bl	8015fa8 <__atomic_load_8>
 80150ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 80150d2:	1ac0      	subs	r0, r0, r3
 80150d4:	eb61 0102 	sbc.w	r1, r1, r2
 80150d8:	e9c5 0100 	strd	r0, r1, [r5]
 80150dc:	4630      	mov	r0, r6
 80150de:	b002      	add	sp, #8
 80150e0:	bd70      	pop	{r4, r5, r6, pc}
 80150e2:	260b      	movs	r6, #11
 80150e4:	4630      	mov	r0, r6
 80150e6:	b002      	add	sp, #8
 80150e8:	bd70      	pop	{r4, r5, r6, pc}
 80150ea:	bf00      	nop

080150ec <rcl_timer_is_canceled>:
 80150ec:	b168      	cbz	r0, 801510a <rcl_timer_is_canceled+0x1e>
 80150ee:	b161      	cbz	r1, 801510a <rcl_timer_is_canceled+0x1e>
 80150f0:	6803      	ldr	r3, [r0, #0]
 80150f2:	f3bf 8f5b 	dmb	ish
 80150f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80150fa:	f3bf 8f5b 	dmb	ish
 80150fe:	3b00      	subs	r3, #0
 8015100:	bf18      	it	ne
 8015102:	2301      	movne	r3, #1
 8015104:	700b      	strb	r3, [r1, #0]
 8015106:	2000      	movs	r0, #0
 8015108:	4770      	bx	lr
 801510a:	200b      	movs	r0, #11
 801510c:	4770      	bx	lr
 801510e:	bf00      	nop

08015110 <rcl_timer_get_guard_condition>:
 8015110:	b130      	cbz	r0, 8015120 <rcl_timer_get_guard_condition+0x10>
 8015112:	6800      	ldr	r0, [r0, #0]
 8015114:	b120      	cbz	r0, 8015120 <rcl_timer_get_guard_condition+0x10>
 8015116:	68c3      	ldr	r3, [r0, #12]
 8015118:	b10b      	cbz	r3, 801511e <rcl_timer_get_guard_condition+0xe>
 801511a:	3008      	adds	r0, #8
 801511c:	4770      	bx	lr
 801511e:	4618      	mov	r0, r3
 8015120:	4770      	bx	lr
 8015122:	bf00      	nop

08015124 <rcl_validate_enclave_name_with_size>:
 8015124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015126:	b0c3      	sub	sp, #268	; 0x10c
 8015128:	b1d0      	cbz	r0, 8015160 <rcl_validate_enclave_name_with_size+0x3c>
 801512a:	4615      	mov	r5, r2
 801512c:	b1c2      	cbz	r2, 8015160 <rcl_validate_enclave_name_with_size+0x3c>
 801512e:	461f      	mov	r7, r3
 8015130:	466a      	mov	r2, sp
 8015132:	ab01      	add	r3, sp, #4
 8015134:	460e      	mov	r6, r1
 8015136:	f001 f96f 	bl	8016418 <rmw_validate_namespace_with_size>
 801513a:	4604      	mov	r4, r0
 801513c:	b9e0      	cbnz	r0, 8015178 <rcl_validate_enclave_name_with_size+0x54>
 801513e:	9b00      	ldr	r3, [sp, #0]
 8015140:	b923      	cbnz	r3, 801514c <rcl_validate_enclave_name_with_size+0x28>
 8015142:	2300      	movs	r3, #0
 8015144:	602b      	str	r3, [r5, #0]
 8015146:	4620      	mov	r0, r4
 8015148:	b043      	add	sp, #268	; 0x10c
 801514a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801514c:	2b07      	cmp	r3, #7
 801514e:	d00b      	beq.n	8015168 <rcl_validate_enclave_name_with_size+0x44>
 8015150:	1e5a      	subs	r2, r3, #1
 8015152:	2a05      	cmp	r2, #5
 8015154:	d82e      	bhi.n	80151b4 <rcl_validate_enclave_name_with_size+0x90>
 8015156:	e8df f002 	tbb	[pc, r2]
 801515a:	211e      	.short	0x211e
 801515c:	152a2724 	.word	0x152a2724
 8015160:	240b      	movs	r4, #11
 8015162:	4620      	mov	r0, r4
 8015164:	b043      	add	sp, #268	; 0x10c
 8015166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015168:	2eff      	cmp	r6, #255	; 0xff
 801516a:	d9ea      	bls.n	8015142 <rcl_validate_enclave_name_with_size+0x1e>
 801516c:	602b      	str	r3, [r5, #0]
 801516e:	2f00      	cmp	r7, #0
 8015170:	d0e9      	beq.n	8015146 <rcl_validate_enclave_name_with_size+0x22>
 8015172:	23fe      	movs	r3, #254	; 0xfe
 8015174:	603b      	str	r3, [r7, #0]
 8015176:	e7e6      	b.n	8015146 <rcl_validate_enclave_name_with_size+0x22>
 8015178:	f7fe fea0 	bl	8013ebc <rcl_convert_rmw_ret_to_rcl_ret>
 801517c:	4604      	mov	r4, r0
 801517e:	4620      	mov	r0, r4
 8015180:	b043      	add	sp, #268	; 0x10c
 8015182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015184:	2306      	movs	r3, #6
 8015186:	602b      	str	r3, [r5, #0]
 8015188:	2f00      	cmp	r7, #0
 801518a:	d0dc      	beq.n	8015146 <rcl_validate_enclave_name_with_size+0x22>
 801518c:	9b01      	ldr	r3, [sp, #4]
 801518e:	603b      	str	r3, [r7, #0]
 8015190:	4620      	mov	r0, r4
 8015192:	b043      	add	sp, #268	; 0x10c
 8015194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015196:	2301      	movs	r3, #1
 8015198:	602b      	str	r3, [r5, #0]
 801519a:	e7f5      	b.n	8015188 <rcl_validate_enclave_name_with_size+0x64>
 801519c:	2302      	movs	r3, #2
 801519e:	602b      	str	r3, [r5, #0]
 80151a0:	e7f2      	b.n	8015188 <rcl_validate_enclave_name_with_size+0x64>
 80151a2:	2303      	movs	r3, #3
 80151a4:	602b      	str	r3, [r5, #0]
 80151a6:	e7ef      	b.n	8015188 <rcl_validate_enclave_name_with_size+0x64>
 80151a8:	2304      	movs	r3, #4
 80151aa:	602b      	str	r3, [r5, #0]
 80151ac:	e7ec      	b.n	8015188 <rcl_validate_enclave_name_with_size+0x64>
 80151ae:	2305      	movs	r3, #5
 80151b0:	602b      	str	r3, [r5, #0]
 80151b2:	e7e9      	b.n	8015188 <rcl_validate_enclave_name_with_size+0x64>
 80151b4:	4a03      	ldr	r2, [pc, #12]	; (80151c4 <rcl_validate_enclave_name_with_size+0xa0>)
 80151b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80151ba:	a802      	add	r0, sp, #8
 80151bc:	f001 f8a4 	bl	8016308 <rcutils_snprintf>
 80151c0:	2401      	movs	r4, #1
 80151c2:	e7c0      	b.n	8015146 <rcl_validate_enclave_name_with_size+0x22>
 80151c4:	0801e380 	.word	0x0801e380

080151c8 <rcl_validate_enclave_name>:
 80151c8:	b168      	cbz	r0, 80151e6 <rcl_validate_enclave_name+0x1e>
 80151ca:	b570      	push	{r4, r5, r6, lr}
 80151cc:	460d      	mov	r5, r1
 80151ce:	4616      	mov	r6, r2
 80151d0:	4604      	mov	r4, r0
 80151d2:	f7eb f80f 	bl	80001f4 <strlen>
 80151d6:	4633      	mov	r3, r6
 80151d8:	4601      	mov	r1, r0
 80151da:	462a      	mov	r2, r5
 80151dc:	4620      	mov	r0, r4
 80151de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80151e2:	f7ff bf9f 	b.w	8015124 <rcl_validate_enclave_name_with_size>
 80151e6:	200b      	movs	r0, #11
 80151e8:	4770      	bx	lr
 80151ea:	bf00      	nop

080151ec <rcl_validate_topic_name>:
 80151ec:	2800      	cmp	r0, #0
 80151ee:	f000 808b 	beq.w	8015308 <rcl_validate_topic_name+0x11c>
 80151f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151f6:	460e      	mov	r6, r1
 80151f8:	2900      	cmp	r1, #0
 80151fa:	f000 808c 	beq.w	8015316 <rcl_validate_topic_name+0x12a>
 80151fe:	4617      	mov	r7, r2
 8015200:	4605      	mov	r5, r0
 8015202:	f7ea fff7 	bl	80001f4 <strlen>
 8015206:	b1b0      	cbz	r0, 8015236 <rcl_validate_topic_name+0x4a>
 8015208:	f895 9000 	ldrb.w	r9, [r5]
 801520c:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 80153bc <rcl_validate_topic_name+0x1d0>
 8015210:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015214:	f013 0304 	ands.w	r3, r3, #4
 8015218:	d178      	bne.n	801530c <rcl_validate_topic_name+0x120>
 801521a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801521e:	f815 2008 	ldrb.w	r2, [r5, r8]
 8015222:	2a2f      	cmp	r2, #47	; 0x2f
 8015224:	d10e      	bne.n	8015244 <rcl_validate_topic_name+0x58>
 8015226:	2202      	movs	r2, #2
 8015228:	6032      	str	r2, [r6, #0]
 801522a:	b36f      	cbz	r7, 8015288 <rcl_validate_topic_name+0x9c>
 801522c:	f8c7 8000 	str.w	r8, [r7]
 8015230:	4618      	mov	r0, r3
 8015232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015236:	2301      	movs	r3, #1
 8015238:	6033      	str	r3, [r6, #0]
 801523a:	b32f      	cbz	r7, 8015288 <rcl_validate_topic_name+0x9c>
 801523c:	2000      	movs	r0, #0
 801523e:	6038      	str	r0, [r7, #0]
 8015240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015244:	461c      	mov	r4, r3
 8015246:	4619      	mov	r1, r3
 8015248:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 801524c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015250:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8015254:	f1be 0f09 	cmp.w	lr, #9
 8015258:	d946      	bls.n	80152e8 <rcl_validate_topic_name+0xfc>
 801525a:	f022 0e20 	bic.w	lr, r2, #32
 801525e:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8015262:	f1be 0f19 	cmp.w	lr, #25
 8015266:	d93f      	bls.n	80152e8 <rcl_validate_topic_name+0xfc>
 8015268:	2a5f      	cmp	r2, #95	; 0x5f
 801526a:	d014      	beq.n	8015296 <rcl_validate_topic_name+0xaa>
 801526c:	2a2f      	cmp	r2, #47	; 0x2f
 801526e:	d05b      	beq.n	8015328 <rcl_validate_topic_name+0x13c>
 8015270:	2a7e      	cmp	r2, #126	; 0x7e
 8015272:	d052      	beq.n	801531a <rcl_validate_topic_name+0x12e>
 8015274:	2a7b      	cmp	r2, #123	; 0x7b
 8015276:	d00a      	beq.n	801528e <rcl_validate_topic_name+0xa2>
 8015278:	2a7d      	cmp	r2, #125	; 0x7d
 801527a:	d16f      	bne.n	801535c <rcl_validate_topic_name+0x170>
 801527c:	2c00      	cmp	r4, #0
 801527e:	d15e      	bne.n	801533e <rcl_validate_topic_name+0x152>
 8015280:	2305      	movs	r3, #5
 8015282:	6033      	str	r3, [r6, #0]
 8015284:	b107      	cbz	r7, 8015288 <rcl_validate_topic_name+0x9c>
 8015286:	6039      	str	r1, [r7, #0]
 8015288:	2000      	movs	r0, #0
 801528a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801528e:	2c00      	cmp	r4, #0
 8015290:	d14c      	bne.n	801532c <rcl_validate_topic_name+0x140>
 8015292:	460b      	mov	r3, r1
 8015294:	2401      	movs	r4, #1
 8015296:	3101      	adds	r1, #1
 8015298:	4288      	cmp	r0, r1
 801529a:	d1d7      	bne.n	801524c <rcl_validate_topic_name+0x60>
 801529c:	2c00      	cmp	r4, #0
 801529e:	d156      	bne.n	801534e <rcl_validate_topic_name+0x162>
 80152a0:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 80152a4:	4620      	mov	r0, r4
 80152a6:	d061      	beq.n	801536c <rcl_validate_topic_name+0x180>
 80152a8:	f108 0e01 	add.w	lr, r8, #1
 80152ac:	e007      	b.n	80152be <rcl_validate_topic_name+0xd2>
 80152ae:	2801      	cmp	r0, #1
 80152b0:	d047      	beq.n	8015342 <rcl_validate_topic_name+0x156>
 80152b2:	461a      	mov	r2, r3
 80152b4:	4291      	cmp	r1, r2
 80152b6:	4618      	mov	r0, r3
 80152b8:	f105 0501 	add.w	r5, r5, #1
 80152bc:	d944      	bls.n	8015348 <rcl_validate_topic_name+0x15c>
 80152be:	4580      	cmp	r8, r0
 80152c0:	f100 0301 	add.w	r3, r0, #1
 80152c4:	d037      	beq.n	8015336 <rcl_validate_topic_name+0x14a>
 80152c6:	782a      	ldrb	r2, [r5, #0]
 80152c8:	2a2f      	cmp	r2, #47	; 0x2f
 80152ca:	d1f0      	bne.n	80152ae <rcl_validate_topic_name+0xc2>
 80152cc:	786b      	ldrb	r3, [r5, #1]
 80152ce:	f81c 4003 	ldrb.w	r4, [ip, r3]
 80152d2:	1c43      	adds	r3, r0, #1
 80152d4:	0760      	lsls	r0, r4, #29
 80152d6:	461a      	mov	r2, r3
 80152d8:	d5ec      	bpl.n	80152b4 <rcl_validate_topic_name+0xc8>
 80152da:	2304      	movs	r3, #4
 80152dc:	6033      	str	r3, [r6, #0]
 80152de:	2f00      	cmp	r7, #0
 80152e0:	d0d2      	beq.n	8015288 <rcl_validate_topic_name+0x9c>
 80152e2:	603a      	str	r2, [r7, #0]
 80152e4:	2000      	movs	r0, #0
 80152e6:	e7ab      	b.n	8015240 <rcl_validate_topic_name+0x54>
 80152e8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80152ec:	0752      	lsls	r2, r2, #29
 80152ee:	d5d2      	bpl.n	8015296 <rcl_validate_topic_name+0xaa>
 80152f0:	2c00      	cmp	r4, #0
 80152f2:	d0d0      	beq.n	8015296 <rcl_validate_topic_name+0xaa>
 80152f4:	2900      	cmp	r1, #0
 80152f6:	d0ce      	beq.n	8015296 <rcl_validate_topic_name+0xaa>
 80152f8:	1e4a      	subs	r2, r1, #1
 80152fa:	429a      	cmp	r2, r3
 80152fc:	d1cb      	bne.n	8015296 <rcl_validate_topic_name+0xaa>
 80152fe:	2309      	movs	r3, #9
 8015300:	6033      	str	r3, [r6, #0]
 8015302:	2f00      	cmp	r7, #0
 8015304:	d1bf      	bne.n	8015286 <rcl_validate_topic_name+0x9a>
 8015306:	e7bf      	b.n	8015288 <rcl_validate_topic_name+0x9c>
 8015308:	200b      	movs	r0, #11
 801530a:	4770      	bx	lr
 801530c:	2304      	movs	r3, #4
 801530e:	6033      	str	r3, [r6, #0]
 8015310:	2f00      	cmp	r7, #0
 8015312:	d193      	bne.n	801523c <rcl_validate_topic_name+0x50>
 8015314:	e7b8      	b.n	8015288 <rcl_validate_topic_name+0x9c>
 8015316:	200b      	movs	r0, #11
 8015318:	e792      	b.n	8015240 <rcl_validate_topic_name+0x54>
 801531a:	2900      	cmp	r1, #0
 801531c:	d0bb      	beq.n	8015296 <rcl_validate_topic_name+0xaa>
 801531e:	2306      	movs	r3, #6
 8015320:	6033      	str	r3, [r6, #0]
 8015322:	2f00      	cmp	r7, #0
 8015324:	d1af      	bne.n	8015286 <rcl_validate_topic_name+0x9a>
 8015326:	e7af      	b.n	8015288 <rcl_validate_topic_name+0x9c>
 8015328:	2c00      	cmp	r4, #0
 801532a:	d0b4      	beq.n	8015296 <rcl_validate_topic_name+0xaa>
 801532c:	2308      	movs	r3, #8
 801532e:	6033      	str	r3, [r6, #0]
 8015330:	2f00      	cmp	r7, #0
 8015332:	d1a8      	bne.n	8015286 <rcl_validate_topic_name+0x9a>
 8015334:	e7a8      	b.n	8015288 <rcl_validate_topic_name+0x9c>
 8015336:	4672      	mov	r2, lr
 8015338:	f108 0301 	add.w	r3, r8, #1
 801533c:	e7ba      	b.n	80152b4 <rcl_validate_topic_name+0xc8>
 801533e:	2400      	movs	r4, #0
 8015340:	e7a9      	b.n	8015296 <rcl_validate_topic_name+0xaa>
 8015342:	2202      	movs	r2, #2
 8015344:	4613      	mov	r3, r2
 8015346:	e7b5      	b.n	80152b4 <rcl_validate_topic_name+0xc8>
 8015348:	2000      	movs	r0, #0
 801534a:	6030      	str	r0, [r6, #0]
 801534c:	e778      	b.n	8015240 <rcl_validate_topic_name+0x54>
 801534e:	2205      	movs	r2, #5
 8015350:	6032      	str	r2, [r6, #0]
 8015352:	2f00      	cmp	r7, #0
 8015354:	d098      	beq.n	8015288 <rcl_validate_topic_name+0x9c>
 8015356:	603b      	str	r3, [r7, #0]
 8015358:	2000      	movs	r0, #0
 801535a:	e771      	b.n	8015240 <rcl_validate_topic_name+0x54>
 801535c:	2c00      	cmp	r4, #0
 801535e:	bf14      	ite	ne
 8015360:	2308      	movne	r3, #8
 8015362:	2303      	moveq	r3, #3
 8015364:	6033      	str	r3, [r6, #0]
 8015366:	2f00      	cmp	r7, #0
 8015368:	d18d      	bne.n	8015286 <rcl_validate_topic_name+0x9a>
 801536a:	e78d      	b.n	8015288 <rcl_validate_topic_name+0x9c>
 801536c:	f108 0401 	add.w	r4, r8, #1
 8015370:	e007      	b.n	8015382 <rcl_validate_topic_name+0x196>
 8015372:	2801      	cmp	r0, #1
 8015374:	d019      	beq.n	80153aa <rcl_validate_topic_name+0x1be>
 8015376:	461a      	mov	r2, r3
 8015378:	4291      	cmp	r1, r2
 801537a:	4618      	mov	r0, r3
 801537c:	f105 0501 	add.w	r5, r5, #1
 8015380:	d9e2      	bls.n	8015348 <rcl_validate_topic_name+0x15c>
 8015382:	4580      	cmp	r8, r0
 8015384:	f100 0301 	add.w	r3, r0, #1
 8015388:	d00b      	beq.n	80153a2 <rcl_validate_topic_name+0x1b6>
 801538a:	782a      	ldrb	r2, [r5, #0]
 801538c:	2a2f      	cmp	r2, #47	; 0x2f
 801538e:	d1f0      	bne.n	8015372 <rcl_validate_topic_name+0x186>
 8015390:	786b      	ldrb	r3, [r5, #1]
 8015392:	f81c e003 	ldrb.w	lr, [ip, r3]
 8015396:	1c43      	adds	r3, r0, #1
 8015398:	f01e 0f04 	tst.w	lr, #4
 801539c:	461a      	mov	r2, r3
 801539e:	d0eb      	beq.n	8015378 <rcl_validate_topic_name+0x18c>
 80153a0:	e79b      	b.n	80152da <rcl_validate_topic_name+0xee>
 80153a2:	4622      	mov	r2, r4
 80153a4:	f108 0301 	add.w	r3, r8, #1
 80153a8:	e7e6      	b.n	8015378 <rcl_validate_topic_name+0x18c>
 80153aa:	2307      	movs	r3, #7
 80153ac:	6033      	str	r3, [r6, #0]
 80153ae:	2f00      	cmp	r7, #0
 80153b0:	f43f af6a 	beq.w	8015288 <rcl_validate_topic_name+0x9c>
 80153b4:	6038      	str	r0, [r7, #0]
 80153b6:	2000      	movs	r0, #0
 80153b8:	e742      	b.n	8015240 <rcl_validate_topic_name+0x54>
 80153ba:	bf00      	nop
 80153bc:	0801e799 	.word	0x0801e799

080153c0 <rcl_get_zero_initialized_wait_set>:
 80153c0:	b470      	push	{r4, r5, r6}
 80153c2:	4d07      	ldr	r5, [pc, #28]	; (80153e0 <rcl_get_zero_initialized_wait_set+0x20>)
 80153c4:	4606      	mov	r6, r0
 80153c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153c8:	4634      	mov	r4, r6
 80153ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153d4:	682b      	ldr	r3, [r5, #0]
 80153d6:	6023      	str	r3, [r4, #0]
 80153d8:	4630      	mov	r0, r6
 80153da:	bc70      	pop	{r4, r5, r6}
 80153dc:	4770      	bx	lr
 80153de:	bf00      	nop
 80153e0:	0801e3e0 	.word	0x0801e3e0

080153e4 <rcl_wait_set_is_valid>:
 80153e4:	b118      	cbz	r0, 80153ee <rcl_wait_set_is_valid+0xa>
 80153e6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80153e8:	3800      	subs	r0, #0
 80153ea:	bf18      	it	ne
 80153ec:	2001      	movne	r0, #1
 80153ee:	4770      	bx	lr

080153f0 <rcl_wait_set_fini>:
 80153f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153f4:	b082      	sub	sp, #8
 80153f6:	2800      	cmp	r0, #0
 80153f8:	f000 8095 	beq.w	8015526 <rcl_wait_set_fini+0x136>
 80153fc:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80153fe:	4604      	mov	r4, r0
 8015400:	2e00      	cmp	r6, #0
 8015402:	f000 808c 	beq.w	801551e <rcl_wait_set_fini+0x12e>
 8015406:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8015408:	f001 fd8c 	bl	8016f24 <rmw_destroy_wait_set>
 801540c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801540e:	1e06      	subs	r6, r0, #0
 8015410:	bf18      	it	ne
 8015412:	f44f 7661 	movne.w	r6, #900	; 0x384
 8015416:	2d00      	cmp	r5, #0
 8015418:	f000 8081 	beq.w	801551e <rcl_wait_set_fini+0x12e>
 801541c:	6820      	ldr	r0, [r4, #0]
 801541e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8015422:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015424:	2700      	movs	r7, #0
 8015426:	6067      	str	r7, [r4, #4]
 8015428:	602f      	str	r7, [r5, #0]
 801542a:	b120      	cbz	r0, 8015436 <rcl_wait_set_fini+0x46>
 801542c:	9101      	str	r1, [sp, #4]
 801542e:	47c0      	blx	r8
 8015430:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015432:	9901      	ldr	r1, [sp, #4]
 8015434:	6027      	str	r7, [r4, #0]
 8015436:	68a8      	ldr	r0, [r5, #8]
 8015438:	b120      	cbz	r0, 8015444 <rcl_wait_set_fini+0x54>
 801543a:	47c0      	blx	r8
 801543c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801543e:	2300      	movs	r3, #0
 8015440:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015444:	68a0      	ldr	r0, [r4, #8]
 8015446:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015448:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801544a:	f04f 0800 	mov.w	r8, #0
 801544e:	f8c4 800c 	str.w	r8, [r4, #12]
 8015452:	f8c5 800c 	str.w	r8, [r5, #12]
 8015456:	b128      	cbz	r0, 8015464 <rcl_wait_set_fini+0x74>
 8015458:	47b8      	blx	r7
 801545a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801545c:	f8c4 8008 	str.w	r8, [r4, #8]
 8015460:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015462:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015464:	6968      	ldr	r0, [r5, #20]
 8015466:	f04f 0800 	mov.w	r8, #0
 801546a:	f8c5 8010 	str.w	r8, [r5, #16]
 801546e:	b128      	cbz	r0, 801547c <rcl_wait_set_fini+0x8c>
 8015470:	47b8      	blx	r7
 8015472:	f8c5 8014 	str.w	r8, [r5, #20]
 8015476:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015478:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801547a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801547c:	6920      	ldr	r0, [r4, #16]
 801547e:	f04f 0800 	mov.w	r8, #0
 8015482:	f8c4 8014 	str.w	r8, [r4, #20]
 8015486:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801548a:	b128      	cbz	r0, 8015498 <rcl_wait_set_fini+0xa8>
 801548c:	47b8      	blx	r7
 801548e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015490:	f8c4 8010 	str.w	r8, [r4, #16]
 8015494:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8015496:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015498:	69a0      	ldr	r0, [r4, #24]
 801549a:	f04f 0800 	mov.w	r8, #0
 801549e:	f8c4 801c 	str.w	r8, [r4, #28]
 80154a2:	f8c5 8018 	str.w	r8, [r5, #24]
 80154a6:	b128      	cbz	r0, 80154b4 <rcl_wait_set_fini+0xc4>
 80154a8:	9101      	str	r1, [sp, #4]
 80154aa:	47b8      	blx	r7
 80154ac:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80154ae:	9901      	ldr	r1, [sp, #4]
 80154b0:	f8c4 8018 	str.w	r8, [r4, #24]
 80154b4:	6a28      	ldr	r0, [r5, #32]
 80154b6:	b120      	cbz	r0, 80154c2 <rcl_wait_set_fini+0xd2>
 80154b8:	47b8      	blx	r7
 80154ba:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80154bc:	2300      	movs	r3, #0
 80154be:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80154c2:	6a20      	ldr	r0, [r4, #32]
 80154c4:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80154c8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80154ca:	2700      	movs	r7, #0
 80154cc:	6267      	str	r7, [r4, #36]	; 0x24
 80154ce:	626f      	str	r7, [r5, #36]	; 0x24
 80154d0:	b120      	cbz	r0, 80154dc <rcl_wait_set_fini+0xec>
 80154d2:	9101      	str	r1, [sp, #4]
 80154d4:	47c0      	blx	r8
 80154d6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80154d8:	9901      	ldr	r1, [sp, #4]
 80154da:	6227      	str	r7, [r4, #32]
 80154dc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80154de:	b120      	cbz	r0, 80154ea <rcl_wait_set_fini+0xfa>
 80154e0:	47c0      	blx	r8
 80154e2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80154e4:	2300      	movs	r3, #0
 80154e6:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80154ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80154ec:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80154f0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80154f2:	2700      	movs	r7, #0
 80154f4:	62e7      	str	r7, [r4, #44]	; 0x2c
 80154f6:	632f      	str	r7, [r5, #48]	; 0x30
 80154f8:	b120      	cbz	r0, 8015504 <rcl_wait_set_fini+0x114>
 80154fa:	9101      	str	r1, [sp, #4]
 80154fc:	47c0      	blx	r8
 80154fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015500:	9901      	ldr	r1, [sp, #4]
 8015502:	62a7      	str	r7, [r4, #40]	; 0x28
 8015504:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8015506:	b120      	cbz	r0, 8015512 <rcl_wait_set_fini+0x122>
 8015508:	47c0      	blx	r8
 801550a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801550c:	2300      	movs	r3, #0
 801550e:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8015512:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8015514:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8015516:	4628      	mov	r0, r5
 8015518:	4798      	blx	r3
 801551a:	2300      	movs	r3, #0
 801551c:	6323      	str	r3, [r4, #48]	; 0x30
 801551e:	4630      	mov	r0, r6
 8015520:	b002      	add	sp, #8
 8015522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015526:	260b      	movs	r6, #11
 8015528:	4630      	mov	r0, r6
 801552a:	b002      	add	sp, #8
 801552c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015530 <rcl_wait_set_add_subscription>:
 8015530:	b320      	cbz	r0, 801557c <rcl_wait_set_add_subscription+0x4c>
 8015532:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015534:	b570      	push	{r4, r5, r6, lr}
 8015536:	4604      	mov	r4, r0
 8015538:	b1d3      	cbz	r3, 8015570 <rcl_wait_set_add_subscription+0x40>
 801553a:	b319      	cbz	r1, 8015584 <rcl_wait_set_add_subscription+0x54>
 801553c:	681d      	ldr	r5, [r3, #0]
 801553e:	6860      	ldr	r0, [r4, #4]
 8015540:	4285      	cmp	r5, r0
 8015542:	d218      	bcs.n	8015576 <rcl_wait_set_add_subscription+0x46>
 8015544:	6820      	ldr	r0, [r4, #0]
 8015546:	1c6e      	adds	r6, r5, #1
 8015548:	601e      	str	r6, [r3, #0]
 801554a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801554e:	b102      	cbz	r2, 8015552 <rcl_wait_set_add_subscription+0x22>
 8015550:	6015      	str	r5, [r2, #0]
 8015552:	4608      	mov	r0, r1
 8015554:	f7ff fc30 	bl	8014db8 <rcl_subscription_get_rmw_handle>
 8015558:	b190      	cbz	r0, 8015580 <rcl_wait_set_add_subscription+0x50>
 801555a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801555c:	6842      	ldr	r2, [r0, #4]
 801555e:	689b      	ldr	r3, [r3, #8]
 8015560:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015564:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015566:	6853      	ldr	r3, [r2, #4]
 8015568:	3301      	adds	r3, #1
 801556a:	6053      	str	r3, [r2, #4]
 801556c:	2000      	movs	r0, #0
 801556e:	bd70      	pop	{r4, r5, r6, pc}
 8015570:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015574:	bd70      	pop	{r4, r5, r6, pc}
 8015576:	f240 3086 	movw	r0, #902	; 0x386
 801557a:	bd70      	pop	{r4, r5, r6, pc}
 801557c:	200b      	movs	r0, #11
 801557e:	4770      	bx	lr
 8015580:	2001      	movs	r0, #1
 8015582:	bd70      	pop	{r4, r5, r6, pc}
 8015584:	200b      	movs	r0, #11
 8015586:	bd70      	pop	{r4, r5, r6, pc}

08015588 <rcl_wait_set_clear>:
 8015588:	2800      	cmp	r0, #0
 801558a:	d073      	beq.n	8015674 <rcl_wait_set_clear+0xec>
 801558c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801558e:	b510      	push	{r4, lr}
 8015590:	4604      	mov	r4, r0
 8015592:	2b00      	cmp	r3, #0
 8015594:	d070      	beq.n	8015678 <rcl_wait_set_clear+0xf0>
 8015596:	6800      	ldr	r0, [r0, #0]
 8015598:	b138      	cbz	r0, 80155aa <rcl_wait_set_clear+0x22>
 801559a:	6862      	ldr	r2, [r4, #4]
 801559c:	2100      	movs	r1, #0
 801559e:	0092      	lsls	r2, r2, #2
 80155a0:	f003 fda4 	bl	80190ec <memset>
 80155a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80155a6:	2200      	movs	r2, #0
 80155a8:	601a      	str	r2, [r3, #0]
 80155aa:	68a0      	ldr	r0, [r4, #8]
 80155ac:	b138      	cbz	r0, 80155be <rcl_wait_set_clear+0x36>
 80155ae:	68e2      	ldr	r2, [r4, #12]
 80155b0:	2100      	movs	r1, #0
 80155b2:	0092      	lsls	r2, r2, #2
 80155b4:	f003 fd9a 	bl	80190ec <memset>
 80155b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80155ba:	2200      	movs	r2, #0
 80155bc:	60da      	str	r2, [r3, #12]
 80155be:	69a0      	ldr	r0, [r4, #24]
 80155c0:	b138      	cbz	r0, 80155d2 <rcl_wait_set_clear+0x4a>
 80155c2:	69e2      	ldr	r2, [r4, #28]
 80155c4:	2100      	movs	r1, #0
 80155c6:	0092      	lsls	r2, r2, #2
 80155c8:	f003 fd90 	bl	80190ec <memset>
 80155cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80155ce:	2200      	movs	r2, #0
 80155d0:	619a      	str	r2, [r3, #24]
 80155d2:	6a20      	ldr	r0, [r4, #32]
 80155d4:	b138      	cbz	r0, 80155e6 <rcl_wait_set_clear+0x5e>
 80155d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80155d8:	2100      	movs	r1, #0
 80155da:	0092      	lsls	r2, r2, #2
 80155dc:	f003 fd86 	bl	80190ec <memset>
 80155e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80155e2:	2200      	movs	r2, #0
 80155e4:	625a      	str	r2, [r3, #36]	; 0x24
 80155e6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80155e8:	b138      	cbz	r0, 80155fa <rcl_wait_set_clear+0x72>
 80155ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80155ec:	2100      	movs	r1, #0
 80155ee:	0092      	lsls	r2, r2, #2
 80155f0:	f003 fd7c 	bl	80190ec <memset>
 80155f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80155f6:	2200      	movs	r2, #0
 80155f8:	631a      	str	r2, [r3, #48]	; 0x30
 80155fa:	6920      	ldr	r0, [r4, #16]
 80155fc:	b138      	cbz	r0, 801560e <rcl_wait_set_clear+0x86>
 80155fe:	6962      	ldr	r2, [r4, #20]
 8015600:	2100      	movs	r1, #0
 8015602:	0092      	lsls	r2, r2, #2
 8015604:	f003 fd72 	bl	80190ec <memset>
 8015608:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801560a:	2200      	movs	r2, #0
 801560c:	641a      	str	r2, [r3, #64]	; 0x40
 801560e:	6898      	ldr	r0, [r3, #8]
 8015610:	b138      	cbz	r0, 8015622 <rcl_wait_set_clear+0x9a>
 8015612:	685a      	ldr	r2, [r3, #4]
 8015614:	2100      	movs	r1, #0
 8015616:	0092      	lsls	r2, r2, #2
 8015618:	f003 fd68 	bl	80190ec <memset>
 801561c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801561e:	2200      	movs	r2, #0
 8015620:	605a      	str	r2, [r3, #4]
 8015622:	6958      	ldr	r0, [r3, #20]
 8015624:	b138      	cbz	r0, 8015636 <rcl_wait_set_clear+0xae>
 8015626:	691a      	ldr	r2, [r3, #16]
 8015628:	2100      	movs	r1, #0
 801562a:	0092      	lsls	r2, r2, #2
 801562c:	f003 fd5e 	bl	80190ec <memset>
 8015630:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015632:	2200      	movs	r2, #0
 8015634:	611a      	str	r2, [r3, #16]
 8015636:	6a18      	ldr	r0, [r3, #32]
 8015638:	b138      	cbz	r0, 801564a <rcl_wait_set_clear+0xc2>
 801563a:	69da      	ldr	r2, [r3, #28]
 801563c:	2100      	movs	r1, #0
 801563e:	0092      	lsls	r2, r2, #2
 8015640:	f003 fd54 	bl	80190ec <memset>
 8015644:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015646:	2200      	movs	r2, #0
 8015648:	61da      	str	r2, [r3, #28]
 801564a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801564c:	b138      	cbz	r0, 801565e <rcl_wait_set_clear+0xd6>
 801564e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015650:	2100      	movs	r1, #0
 8015652:	0092      	lsls	r2, r2, #2
 8015654:	f003 fd4a 	bl	80190ec <memset>
 8015658:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801565a:	2200      	movs	r2, #0
 801565c:	629a      	str	r2, [r3, #40]	; 0x28
 801565e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8015660:	b138      	cbz	r0, 8015672 <rcl_wait_set_clear+0xea>
 8015662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015664:	2100      	movs	r1, #0
 8015666:	0092      	lsls	r2, r2, #2
 8015668:	f003 fd40 	bl	80190ec <memset>
 801566c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801566e:	2000      	movs	r0, #0
 8015670:	6358      	str	r0, [r3, #52]	; 0x34
 8015672:	bd10      	pop	{r4, pc}
 8015674:	200b      	movs	r0, #11
 8015676:	4770      	bx	lr
 8015678:	f44f 7061 	mov.w	r0, #900	; 0x384
 801567c:	bd10      	pop	{r4, pc}
 801567e:	bf00      	nop

08015680 <rcl_wait_set_resize>:
 8015680:	2800      	cmp	r0, #0
 8015682:	f000 81a6 	beq.w	80159d2 <rcl_wait_set_resize+0x352>
 8015686:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801568a:	f8d0 a030 	ldr.w	sl, [r0, #48]	; 0x30
 801568e:	b083      	sub	sp, #12
 8015690:	4604      	mov	r4, r0
 8015692:	f1ba 0f00 	cmp.w	sl, #0
 8015696:	f000 819e 	beq.w	80159d6 <rcl_wait_set_resize+0x356>
 801569a:	461e      	mov	r6, r3
 801569c:	e9da b313 	ldrd	fp, r3, [sl, #76]	; 0x4c
 80156a0:	f04f 0800 	mov.w	r8, #0
 80156a4:	f8da 9058 	ldr.w	r9, [sl, #88]	; 0x58
 80156a8:	9300      	str	r3, [sp, #0]
 80156aa:	f8c0 8004 	str.w	r8, [r0, #4]
 80156ae:	460f      	mov	r7, r1
 80156b0:	4615      	mov	r5, r2
 80156b2:	f8ca 8000 	str.w	r8, [sl]
 80156b6:	2900      	cmp	r1, #0
 80156b8:	f000 80c9 	beq.w	801584e <rcl_wait_set_resize+0x1ce>
 80156bc:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 80156c0:	6800      	ldr	r0, [r0, #0]
 80156c2:	4651      	mov	r1, sl
 80156c4:	464a      	mov	r2, r9
 80156c6:	4798      	blx	r3
 80156c8:	6020      	str	r0, [r4, #0]
 80156ca:	2800      	cmp	r0, #0
 80156cc:	f000 80d8 	beq.w	8015880 <rcl_wait_set_resize+0x200>
 80156d0:	4652      	mov	r2, sl
 80156d2:	4641      	mov	r1, r8
 80156d4:	f003 fd0a 	bl	80190ec <memset>
 80156d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80156da:	6067      	str	r7, [r4, #4]
 80156dc:	6898      	ldr	r0, [r3, #8]
 80156de:	f8c3 8004 	str.w	r8, [r3, #4]
 80156e2:	9301      	str	r3, [sp, #4]
 80156e4:	464a      	mov	r2, r9
 80156e6:	9b00      	ldr	r3, [sp, #0]
 80156e8:	4651      	mov	r1, sl
 80156ea:	4798      	blx	r3
 80156ec:	9b01      	ldr	r3, [sp, #4]
 80156ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80156f0:	6098      	str	r0, [r3, #8]
 80156f2:	6897      	ldr	r7, [r2, #8]
 80156f4:	2f00      	cmp	r7, #0
 80156f6:	f000 80be 	beq.w	8015876 <rcl_wait_set_resize+0x1f6>
 80156fa:	4652      	mov	r2, sl
 80156fc:	4641      	mov	r1, r8
 80156fe:	4638      	mov	r0, r7
 8015700:	f003 fcf4 	bl	80190ec <memset>
 8015704:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015708:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801570c:	2700      	movs	r7, #0
 801570e:	e9da 2313 	ldrd	r2, r3, [sl, #76]	; 0x4c
 8015712:	60e7      	str	r7, [r4, #12]
 8015714:	f8ca 700c 	str.w	r7, [sl, #12]
 8015718:	2d00      	cmp	r5, #0
 801571a:	f040 80b5 	bne.w	8015888 <rcl_wait_set_resize+0x208>
 801571e:	68a0      	ldr	r0, [r4, #8]
 8015720:	b130      	cbz	r0, 8015730 <rcl_wait_set_resize+0xb0>
 8015722:	4641      	mov	r1, r8
 8015724:	4790      	blx	r2
 8015726:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801572a:	60a5      	str	r5, [r4, #8]
 801572c:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8015730:	2700      	movs	r7, #0
 8015732:	19ad      	adds	r5, r5, r6
 8015734:	f8ca 7010 	str.w	r7, [sl, #16]
 8015738:	f040 80be 	bne.w	80158b8 <rcl_wait_set_resize+0x238>
 801573c:	f8da 0014 	ldr.w	r0, [sl, #20]
 8015740:	b148      	cbz	r0, 8015756 <rcl_wait_set_resize+0xd6>
 8015742:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8015746:	4641      	mov	r1, r8
 8015748:	4798      	blx	r3
 801574a:	f8ca 5014 	str.w	r5, [sl, #20]
 801574e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015752:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 8015756:	2500      	movs	r5, #0
 8015758:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801575c:	6165      	str	r5, [r4, #20]
 801575e:	f8ca 5040 	str.w	r5, [sl, #64]	; 0x40
 8015762:	2e00      	cmp	r6, #0
 8015764:	f040 80bf 	bne.w	80158e6 <rcl_wait_set_resize+0x266>
 8015768:	6920      	ldr	r0, [r4, #16]
 801576a:	b140      	cbz	r0, 801577e <rcl_wait_set_resize+0xfe>
 801576c:	4641      	mov	r1, r8
 801576e:	47c8      	blx	r9
 8015770:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015774:	6126      	str	r6, [r4, #16]
 8015776:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801577a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801577e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015780:	2500      	movs	r5, #0
 8015782:	61e5      	str	r5, [r4, #28]
 8015784:	f8ca 5018 	str.w	r5, [sl, #24]
 8015788:	2b00      	cmp	r3, #0
 801578a:	f040 80c1 	bne.w	8015910 <rcl_wait_set_resize+0x290>
 801578e:	69a0      	ldr	r0, [r4, #24]
 8015790:	b128      	cbz	r0, 801579e <rcl_wait_set_resize+0x11e>
 8015792:	4641      	mov	r1, r8
 8015794:	47c8      	blx	r9
 8015796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015798:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801579c:	61a3      	str	r3, [r4, #24]
 801579e:	f8da 0020 	ldr.w	r0, [sl, #32]
 80157a2:	b130      	cbz	r0, 80157b2 <rcl_wait_set_resize+0x132>
 80157a4:	4641      	mov	r1, r8
 80157a6:	47c8      	blx	r9
 80157a8:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80157ac:	2300      	movs	r3, #0
 80157ae:	e9ca 3307 	strd	r3, r3, [sl, #28]
 80157b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157b4:	f8da 7058 	ldr.w	r7, [sl, #88]	; 0x58
 80157b8:	2600      	movs	r6, #0
 80157ba:	e9da 8913 	ldrd	r8, r9, [sl, #76]	; 0x4c
 80157be:	6266      	str	r6, [r4, #36]	; 0x24
 80157c0:	f8ca 6024 	str.w	r6, [sl, #36]	; 0x24
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	f000 80c8 	beq.w	801595a <rcl_wait_set_resize+0x2da>
 80157ca:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80157ce:	6a20      	ldr	r0, [r4, #32]
 80157d0:	4651      	mov	r1, sl
 80157d2:	463a      	mov	r2, r7
 80157d4:	47c8      	blx	r9
 80157d6:	6220      	str	r0, [r4, #32]
 80157d8:	2800      	cmp	r0, #0
 80157da:	d051      	beq.n	8015880 <rcl_wait_set_resize+0x200>
 80157dc:	4652      	mov	r2, sl
 80157de:	4631      	mov	r1, r6
 80157e0:	f003 fc84 	bl	80190ec <memset>
 80157e4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80157e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157e8:	6263      	str	r3, [r4, #36]	; 0x24
 80157ea:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80157ec:	62ae      	str	r6, [r5, #40]	; 0x28
 80157ee:	463a      	mov	r2, r7
 80157f0:	4651      	mov	r1, sl
 80157f2:	47c8      	blx	r9
 80157f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80157f6:	62e8      	str	r0, [r5, #44]	; 0x2c
 80157f8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80157fa:	2d00      	cmp	r5, #0
 80157fc:	f000 8105 	beq.w	8015a0a <rcl_wait_set_resize+0x38a>
 8015800:	4652      	mov	r2, sl
 8015802:	4631      	mov	r1, r6
 8015804:	4628      	mov	r0, r5
 8015806:	f003 fc71 	bl	80190ec <memset>
 801580a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801580e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015810:	f8da 6058 	ldr.w	r6, [sl, #88]	; 0x58
 8015814:	2500      	movs	r5, #0
 8015816:	e9da 7913 	ldrd	r7, r9, [sl, #76]	; 0x4c
 801581a:	62e5      	str	r5, [r4, #44]	; 0x2c
 801581c:	f8ca 5030 	str.w	r5, [sl, #48]	; 0x30
 8015820:	2b00      	cmp	r3, #0
 8015822:	f040 80af 	bne.w	8015984 <rcl_wait_set_resize+0x304>
 8015826:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015828:	b128      	cbz	r0, 8015836 <rcl_wait_set_resize+0x1b6>
 801582a:	4631      	mov	r1, r6
 801582c:	47b8      	blx	r7
 801582e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015830:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015834:	62a3      	str	r3, [r4, #40]	; 0x28
 8015836:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 801583a:	b310      	cbz	r0, 8015882 <rcl_wait_set_resize+0x202>
 801583c:	4631      	mov	r1, r6
 801583e:	47b8      	blx	r7
 8015840:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015842:	2000      	movs	r0, #0
 8015844:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 8015848:	b003      	add	sp, #12
 801584a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801584e:	6800      	ldr	r0, [r0, #0]
 8015850:	b120      	cbz	r0, 801585c <rcl_wait_set_resize+0x1dc>
 8015852:	4649      	mov	r1, r9
 8015854:	47d8      	blx	fp
 8015856:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801585a:	6027      	str	r7, [r4, #0]
 801585c:	f8da 0008 	ldr.w	r0, [sl, #8]
 8015860:	2800      	cmp	r0, #0
 8015862:	f43f af51 	beq.w	8015708 <rcl_wait_set_resize+0x88>
 8015866:	4649      	mov	r1, r9
 8015868:	47d8      	blx	fp
 801586a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801586e:	2300      	movs	r3, #0
 8015870:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8015874:	e748      	b.n	8015708 <rcl_wait_set_resize+0x88>
 8015876:	6820      	ldr	r0, [r4, #0]
 8015878:	4649      	mov	r1, r9
 801587a:	47d8      	blx	fp
 801587c:	e9c4 7700 	strd	r7, r7, [r4]
 8015880:	200a      	movs	r0, #10
 8015882:	b003      	add	sp, #12
 8015884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015888:	ea4f 0985 	mov.w	r9, r5, lsl #2
 801588c:	68a0      	ldr	r0, [r4, #8]
 801588e:	4642      	mov	r2, r8
 8015890:	4649      	mov	r1, r9
 8015892:	4798      	blx	r3
 8015894:	60a0      	str	r0, [r4, #8]
 8015896:	2800      	cmp	r0, #0
 8015898:	d0f2      	beq.n	8015880 <rcl_wait_set_resize+0x200>
 801589a:	4639      	mov	r1, r7
 801589c:	464a      	mov	r2, r9
 801589e:	f003 fc25 	bl	80190ec <memset>
 80158a2:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80158a6:	60e5      	str	r5, [r4, #12]
 80158a8:	2700      	movs	r7, #0
 80158aa:	19ad      	adds	r5, r5, r6
 80158ac:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80158b0:	f8ca 7010 	str.w	r7, [sl, #16]
 80158b4:	f43f af42 	beq.w	801573c <rcl_wait_set_resize+0xbc>
 80158b8:	00ad      	lsls	r5, r5, #2
 80158ba:	4642      	mov	r2, r8
 80158bc:	f8da 3050 	ldr.w	r3, [sl, #80]	; 0x50
 80158c0:	f8da 0014 	ldr.w	r0, [sl, #20]
 80158c4:	4629      	mov	r1, r5
 80158c6:	4798      	blx	r3
 80158c8:	4680      	mov	r8, r0
 80158ca:	f8ca 0014 	str.w	r0, [sl, #20]
 80158ce:	2800      	cmp	r0, #0
 80158d0:	f000 8084 	beq.w	80159dc <rcl_wait_set_resize+0x35c>
 80158d4:	462a      	mov	r2, r5
 80158d6:	4639      	mov	r1, r7
 80158d8:	f003 fc08 	bl	80190ec <memset>
 80158dc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80158e0:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 80158e4:	e737      	b.n	8015756 <rcl_wait_set_resize+0xd6>
 80158e6:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80158ea:	6920      	ldr	r0, [r4, #16]
 80158ec:	4642      	mov	r2, r8
 80158ee:	4649      	mov	r1, r9
 80158f0:	47b8      	blx	r7
 80158f2:	6120      	str	r0, [r4, #16]
 80158f4:	2800      	cmp	r0, #0
 80158f6:	d0c3      	beq.n	8015880 <rcl_wait_set_resize+0x200>
 80158f8:	464a      	mov	r2, r9
 80158fa:	4629      	mov	r1, r5
 80158fc:	f003 fbf6 	bl	80190ec <memset>
 8015900:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015904:	6166      	str	r6, [r4, #20]
 8015906:	e9da 9713 	ldrd	r9, r7, [sl, #76]	; 0x4c
 801590a:	f8da 8058 	ldr.w	r8, [sl, #88]	; 0x58
 801590e:	e736      	b.n	801577e <rcl_wait_set_resize+0xfe>
 8015910:	009e      	lsls	r6, r3, #2
 8015912:	69a0      	ldr	r0, [r4, #24]
 8015914:	4631      	mov	r1, r6
 8015916:	4642      	mov	r2, r8
 8015918:	47b8      	blx	r7
 801591a:	61a0      	str	r0, [r4, #24]
 801591c:	2800      	cmp	r0, #0
 801591e:	d0af      	beq.n	8015880 <rcl_wait_set_resize+0x200>
 8015920:	4632      	mov	r2, r6
 8015922:	4629      	mov	r1, r5
 8015924:	f003 fbe2 	bl	80190ec <memset>
 8015928:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801592c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801592e:	61e3      	str	r3, [r4, #28]
 8015930:	f8da 0020 	ldr.w	r0, [sl, #32]
 8015934:	f8ca 501c 	str.w	r5, [sl, #28]
 8015938:	4642      	mov	r2, r8
 801593a:	4631      	mov	r1, r6
 801593c:	47b8      	blx	r7
 801593e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015940:	f8ca 0020 	str.w	r0, [sl, #32]
 8015944:	6a1f      	ldr	r7, [r3, #32]
 8015946:	2f00      	cmp	r7, #0
 8015948:	d058      	beq.n	80159fc <rcl_wait_set_resize+0x37c>
 801594a:	4632      	mov	r2, r6
 801594c:	4629      	mov	r1, r5
 801594e:	4638      	mov	r0, r7
 8015950:	f003 fbcc 	bl	80190ec <memset>
 8015954:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015958:	e72b      	b.n	80157b2 <rcl_wait_set_resize+0x132>
 801595a:	6a20      	ldr	r0, [r4, #32]
 801595c:	b128      	cbz	r0, 801596a <rcl_wait_set_resize+0x2ea>
 801595e:	4639      	mov	r1, r7
 8015960:	47c0      	blx	r8
 8015962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015964:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8015968:	6223      	str	r3, [r4, #32]
 801596a:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 801596e:	2800      	cmp	r0, #0
 8015970:	f43f af4d 	beq.w	801580e <rcl_wait_set_resize+0x18e>
 8015974:	4639      	mov	r1, r7
 8015976:	47c0      	blx	r8
 8015978:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 801597c:	2300      	movs	r3, #0
 801597e:	e9ca 330a 	strd	r3, r3, [sl, #40]	; 0x28
 8015982:	e744      	b.n	801580e <rcl_wait_set_resize+0x18e>
 8015984:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8015988:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801598a:	4641      	mov	r1, r8
 801598c:	4632      	mov	r2, r6
 801598e:	47c8      	blx	r9
 8015990:	62a0      	str	r0, [r4, #40]	; 0x28
 8015992:	2800      	cmp	r0, #0
 8015994:	f43f af74 	beq.w	8015880 <rcl_wait_set_resize+0x200>
 8015998:	4642      	mov	r2, r8
 801599a:	4629      	mov	r1, r5
 801599c:	f003 fba6 	bl	80190ec <memset>
 80159a0:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80159a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80159a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80159a8:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80159ac:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
 80159b0:	4632      	mov	r2, r6
 80159b2:	4641      	mov	r1, r8
 80159b4:	47c8      	blx	r9
 80159b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80159b8:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 80159bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80159be:	b35b      	cbz	r3, 8015a18 <rcl_wait_set_resize+0x398>
 80159c0:	4642      	mov	r2, r8
 80159c2:	4618      	mov	r0, r3
 80159c4:	4629      	mov	r1, r5
 80159c6:	f003 fb91 	bl	80190ec <memset>
 80159ca:	4628      	mov	r0, r5
 80159cc:	b003      	add	sp, #12
 80159ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159d2:	200b      	movs	r0, #11
 80159d4:	4770      	bx	lr
 80159d6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80159da:	e752      	b.n	8015882 <rcl_wait_set_resize+0x202>
 80159dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80159de:	68a0      	ldr	r0, [r4, #8]
 80159e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80159e2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80159e4:	4790      	blx	r2
 80159e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80159e8:	6920      	ldr	r0, [r4, #16]
 80159ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80159ec:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80159ee:	e9c4 8802 	strd	r8, r8, [r4, #8]
 80159f2:	4790      	blx	r2
 80159f4:	e9c4 8804 	strd	r8, r8, [r4, #16]
 80159f8:	200a      	movs	r0, #10
 80159fa:	e742      	b.n	8015882 <rcl_wait_set_resize+0x202>
 80159fc:	69a0      	ldr	r0, [r4, #24]
 80159fe:	4641      	mov	r1, r8
 8015a00:	47c8      	blx	r9
 8015a02:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8015a06:	200a      	movs	r0, #10
 8015a08:	e73b      	b.n	8015882 <rcl_wait_set_resize+0x202>
 8015a0a:	6a20      	ldr	r0, [r4, #32]
 8015a0c:	4639      	mov	r1, r7
 8015a0e:	47c0      	blx	r8
 8015a10:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8015a14:	200a      	movs	r0, #10
 8015a16:	e734      	b.n	8015882 <rcl_wait_set_resize+0x202>
 8015a18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015a1a:	9300      	str	r3, [sp, #0]
 8015a1c:	4631      	mov	r1, r6
 8015a1e:	47b8      	blx	r7
 8015a20:	9b00      	ldr	r3, [sp, #0]
 8015a22:	200a      	movs	r0, #10
 8015a24:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8015a28:	e72b      	b.n	8015882 <rcl_wait_set_resize+0x202>
 8015a2a:	bf00      	nop

08015a2c <rcl_wait_set_init>:
 8015a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a30:	b084      	sub	sp, #16
 8015a32:	4604      	mov	r4, r0
 8015a34:	a810      	add	r0, sp, #64	; 0x40
 8015a36:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8015a3a:	460f      	mov	r7, r1
 8015a3c:	4690      	mov	r8, r2
 8015a3e:	4699      	mov	r9, r3
 8015a40:	f7f8 ff6c 	bl	800e91c <rcutils_allocator_is_valid>
 8015a44:	2800      	cmp	r0, #0
 8015a46:	d06b      	beq.n	8015b20 <rcl_wait_set_init+0xf4>
 8015a48:	2c00      	cmp	r4, #0
 8015a4a:	d069      	beq.n	8015b20 <rcl_wait_set_init+0xf4>
 8015a4c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015a4e:	b125      	cbz	r5, 8015a5a <rcl_wait_set_init+0x2e>
 8015a50:	2564      	movs	r5, #100	; 0x64
 8015a52:	4628      	mov	r0, r5
 8015a54:	b004      	add	sp, #16
 8015a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a5a:	f1ba 0f00 	cmp.w	sl, #0
 8015a5e:	d05f      	beq.n	8015b20 <rcl_wait_set_init+0xf4>
 8015a60:	4650      	mov	r0, sl
 8015a62:	f7fe fa49 	bl	8013ef8 <rcl_context_is_valid>
 8015a66:	2800      	cmp	r0, #0
 8015a68:	d067      	beq.n	8015b3a <rcl_wait_set_init+0x10e>
 8015a6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015a6c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8015a6e:	205c      	movs	r0, #92	; 0x5c
 8015a70:	4798      	blx	r3
 8015a72:	6320      	str	r0, [r4, #48]	; 0x30
 8015a74:	2800      	cmp	r0, #0
 8015a76:	d062      	beq.n	8015b3e <rcl_wait_set_init+0x112>
 8015a78:	225c      	movs	r2, #92	; 0x5c
 8015a7a:	4629      	mov	r1, r5
 8015a7c:	f003 fb36 	bl	80190ec <memset>
 8015a80:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8015a84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015a88:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8015a8a:	f8dc e000 	ldr.w	lr, [ip]
 8015a8e:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 8015a92:	f106 0c48 	add.w	ip, r6, #72	; 0x48
 8015a96:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8015a9a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8015a9e:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 8015aa2:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 8015aa6:	60b5      	str	r5, [r6, #8]
 8015aa8:	6075      	str	r5, [r6, #4]
 8015aaa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015aae:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8015ab2:	1899      	adds	r1, r3, r2
 8015ab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ab6:	f8da 0000 	ldr.w	r0, [sl]
 8015aba:	f8cc e000 	str.w	lr, [ip]
 8015abe:	4419      	add	r1, r3
 8015ac0:	4441      	add	r1, r8
 8015ac2:	3028      	adds	r0, #40	; 0x28
 8015ac4:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8015ac8:	f001 fa22 	bl	8016f10 <rmw_create_wait_set>
 8015acc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015ace:	63f0      	str	r0, [r6, #60]	; 0x3c
 8015ad0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8015ad2:	b350      	cbz	r0, 8015b2a <rcl_wait_set_init+0xfe>
 8015ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ad6:	9302      	str	r3, [sp, #8]
 8015ad8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ada:	9301      	str	r3, [sp, #4]
 8015adc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ade:	9300      	str	r3, [sp, #0]
 8015ae0:	4642      	mov	r2, r8
 8015ae2:	464b      	mov	r3, r9
 8015ae4:	4639      	mov	r1, r7
 8015ae6:	4620      	mov	r0, r4
 8015ae8:	f7ff fdca 	bl	8015680 <rcl_wait_set_resize>
 8015aec:	4605      	mov	r5, r0
 8015aee:	2800      	cmp	r0, #0
 8015af0:	d0af      	beq.n	8015a52 <rcl_wait_set_init+0x26>
 8015af2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015af4:	bb2b      	cbnz	r3, 8015b42 <rcl_wait_set_init+0x116>
 8015af6:	2600      	movs	r6, #0
 8015af8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015afc:	9600      	str	r6, [sp, #0]
 8015afe:	4633      	mov	r3, r6
 8015b00:	4632      	mov	r2, r6
 8015b02:	4631      	mov	r1, r6
 8015b04:	4620      	mov	r0, r4
 8015b06:	f7ff fdbb 	bl	8015680 <rcl_wait_set_resize>
 8015b0a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015b0c:	2800      	cmp	r0, #0
 8015b0e:	d0a0      	beq.n	8015a52 <rcl_wait_set_init+0x26>
 8015b10:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8015b12:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8015b14:	4798      	blx	r3
 8015b16:	4628      	mov	r0, r5
 8015b18:	6326      	str	r6, [r4, #48]	; 0x30
 8015b1a:	b004      	add	sp, #16
 8015b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b20:	250b      	movs	r5, #11
 8015b22:	4628      	mov	r0, r5
 8015b24:	b004      	add	sp, #16
 8015b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b2a:	2501      	movs	r5, #1
 8015b2c:	f001 f9fa 	bl	8016f24 <rmw_destroy_wait_set>
 8015b30:	2800      	cmp	r0, #0
 8015b32:	bf18      	it	ne
 8015b34:	f44f 7561 	movne.w	r5, #900	; 0x384
 8015b38:	e7dd      	b.n	8015af6 <rcl_wait_set_init+0xca>
 8015b3a:	2565      	movs	r5, #101	; 0x65
 8015b3c:	e789      	b.n	8015a52 <rcl_wait_set_init+0x26>
 8015b3e:	250a      	movs	r5, #10
 8015b40:	e787      	b.n	8015a52 <rcl_wait_set_init+0x26>
 8015b42:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8015b44:	e7f2      	b.n	8015b2c <rcl_wait_set_init+0x100>
 8015b46:	bf00      	nop

08015b48 <rcl_wait_set_add_guard_condition>:
 8015b48:	b320      	cbz	r0, 8015b94 <rcl_wait_set_add_guard_condition+0x4c>
 8015b4a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015b4c:	b570      	push	{r4, r5, r6, lr}
 8015b4e:	4604      	mov	r4, r0
 8015b50:	b1d3      	cbz	r3, 8015b88 <rcl_wait_set_add_guard_condition+0x40>
 8015b52:	b319      	cbz	r1, 8015b9c <rcl_wait_set_add_guard_condition+0x54>
 8015b54:	68dd      	ldr	r5, [r3, #12]
 8015b56:	68e0      	ldr	r0, [r4, #12]
 8015b58:	4285      	cmp	r5, r0
 8015b5a:	d218      	bcs.n	8015b8e <rcl_wait_set_add_guard_condition+0x46>
 8015b5c:	68a0      	ldr	r0, [r4, #8]
 8015b5e:	1c6e      	adds	r6, r5, #1
 8015b60:	60de      	str	r6, [r3, #12]
 8015b62:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015b66:	b102      	cbz	r2, 8015b6a <rcl_wait_set_add_guard_condition+0x22>
 8015b68:	6015      	str	r5, [r2, #0]
 8015b6a:	4608      	mov	r0, r1
 8015b6c:	f003 f8e4 	bl	8018d38 <rcl_guard_condition_get_rmw_handle>
 8015b70:	b190      	cbz	r0, 8015b98 <rcl_wait_set_add_guard_condition+0x50>
 8015b72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015b74:	6842      	ldr	r2, [r0, #4]
 8015b76:	695b      	ldr	r3, [r3, #20]
 8015b78:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b7c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015b7e:	6913      	ldr	r3, [r2, #16]
 8015b80:	3301      	adds	r3, #1
 8015b82:	6113      	str	r3, [r2, #16]
 8015b84:	2000      	movs	r0, #0
 8015b86:	bd70      	pop	{r4, r5, r6, pc}
 8015b88:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015b8c:	bd70      	pop	{r4, r5, r6, pc}
 8015b8e:	f240 3086 	movw	r0, #902	; 0x386
 8015b92:	bd70      	pop	{r4, r5, r6, pc}
 8015b94:	200b      	movs	r0, #11
 8015b96:	4770      	bx	lr
 8015b98:	2001      	movs	r0, #1
 8015b9a:	bd70      	pop	{r4, r5, r6, pc}
 8015b9c:	200b      	movs	r0, #11
 8015b9e:	bd70      	pop	{r4, r5, r6, pc}

08015ba0 <rcl_wait_set_add_timer>:
 8015ba0:	b340      	cbz	r0, 8015bf4 <rcl_wait_set_add_timer+0x54>
 8015ba2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015ba4:	b570      	push	{r4, r5, r6, lr}
 8015ba6:	4604      	mov	r4, r0
 8015ba8:	b1f3      	cbz	r3, 8015be8 <rcl_wait_set_add_timer+0x48>
 8015baa:	b329      	cbz	r1, 8015bf8 <rcl_wait_set_add_timer+0x58>
 8015bac:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8015bae:	6965      	ldr	r5, [r4, #20]
 8015bb0:	42a8      	cmp	r0, r5
 8015bb2:	d21c      	bcs.n	8015bee <rcl_wait_set_add_timer+0x4e>
 8015bb4:	6925      	ldr	r5, [r4, #16]
 8015bb6:	1c46      	adds	r6, r0, #1
 8015bb8:	641e      	str	r6, [r3, #64]	; 0x40
 8015bba:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8015bbe:	b102      	cbz	r2, 8015bc2 <rcl_wait_set_add_timer+0x22>
 8015bc0:	6010      	str	r0, [r2, #0]
 8015bc2:	4608      	mov	r0, r1
 8015bc4:	f7ff faa4 	bl	8015110 <rcl_timer_get_guard_condition>
 8015bc8:	b168      	cbz	r0, 8015be6 <rcl_wait_set_add_timer+0x46>
 8015bca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015bcc:	68e3      	ldr	r3, [r4, #12]
 8015bce:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8015bd0:	3b01      	subs	r3, #1
 8015bd2:	441d      	add	r5, r3
 8015bd4:	f003 f8b0 	bl	8018d38 <rcl_guard_condition_get_rmw_handle>
 8015bd8:	b180      	cbz	r0, 8015bfc <rcl_wait_set_add_timer+0x5c>
 8015bda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015bdc:	6842      	ldr	r2, [r0, #4]
 8015bde:	695b      	ldr	r3, [r3, #20]
 8015be0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015be4:	2000      	movs	r0, #0
 8015be6:	bd70      	pop	{r4, r5, r6, pc}
 8015be8:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015bec:	bd70      	pop	{r4, r5, r6, pc}
 8015bee:	f240 3086 	movw	r0, #902	; 0x386
 8015bf2:	bd70      	pop	{r4, r5, r6, pc}
 8015bf4:	200b      	movs	r0, #11
 8015bf6:	4770      	bx	lr
 8015bf8:	200b      	movs	r0, #11
 8015bfa:	bd70      	pop	{r4, r5, r6, pc}
 8015bfc:	2001      	movs	r0, #1
 8015bfe:	bd70      	pop	{r4, r5, r6, pc}

08015c00 <rcl_wait_set_add_client>:
 8015c00:	b320      	cbz	r0, 8015c4c <rcl_wait_set_add_client+0x4c>
 8015c02:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015c04:	b570      	push	{r4, r5, r6, lr}
 8015c06:	4604      	mov	r4, r0
 8015c08:	b1d3      	cbz	r3, 8015c40 <rcl_wait_set_add_client+0x40>
 8015c0a:	b319      	cbz	r1, 8015c54 <rcl_wait_set_add_client+0x54>
 8015c0c:	699d      	ldr	r5, [r3, #24]
 8015c0e:	69e0      	ldr	r0, [r4, #28]
 8015c10:	4285      	cmp	r5, r0
 8015c12:	d218      	bcs.n	8015c46 <rcl_wait_set_add_client+0x46>
 8015c14:	69a0      	ldr	r0, [r4, #24]
 8015c16:	1c6e      	adds	r6, r5, #1
 8015c18:	619e      	str	r6, [r3, #24]
 8015c1a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015c1e:	b102      	cbz	r2, 8015c22 <rcl_wait_set_add_client+0x22>
 8015c20:	6015      	str	r5, [r2, #0]
 8015c22:	4608      	mov	r0, r1
 8015c24:	f7fe f908 	bl	8013e38 <rcl_client_get_rmw_handle>
 8015c28:	b190      	cbz	r0, 8015c50 <rcl_wait_set_add_client+0x50>
 8015c2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015c2c:	6842      	ldr	r2, [r0, #4]
 8015c2e:	6a1b      	ldr	r3, [r3, #32]
 8015c30:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015c34:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015c36:	69d3      	ldr	r3, [r2, #28]
 8015c38:	3301      	adds	r3, #1
 8015c3a:	61d3      	str	r3, [r2, #28]
 8015c3c:	2000      	movs	r0, #0
 8015c3e:	bd70      	pop	{r4, r5, r6, pc}
 8015c40:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015c44:	bd70      	pop	{r4, r5, r6, pc}
 8015c46:	f240 3086 	movw	r0, #902	; 0x386
 8015c4a:	bd70      	pop	{r4, r5, r6, pc}
 8015c4c:	200b      	movs	r0, #11
 8015c4e:	4770      	bx	lr
 8015c50:	2001      	movs	r0, #1
 8015c52:	bd70      	pop	{r4, r5, r6, pc}
 8015c54:	200b      	movs	r0, #11
 8015c56:	bd70      	pop	{r4, r5, r6, pc}

08015c58 <rcl_wait_set_add_service>:
 8015c58:	b320      	cbz	r0, 8015ca4 <rcl_wait_set_add_service+0x4c>
 8015c5a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015c5c:	b570      	push	{r4, r5, r6, lr}
 8015c5e:	4604      	mov	r4, r0
 8015c60:	b1d3      	cbz	r3, 8015c98 <rcl_wait_set_add_service+0x40>
 8015c62:	b319      	cbz	r1, 8015cac <rcl_wait_set_add_service+0x54>
 8015c64:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8015c66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015c68:	4285      	cmp	r5, r0
 8015c6a:	d218      	bcs.n	8015c9e <rcl_wait_set_add_service+0x46>
 8015c6c:	6a20      	ldr	r0, [r4, #32]
 8015c6e:	1c6e      	adds	r6, r5, #1
 8015c70:	625e      	str	r6, [r3, #36]	; 0x24
 8015c72:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015c76:	b102      	cbz	r2, 8015c7a <rcl_wait_set_add_service+0x22>
 8015c78:	6015      	str	r5, [r2, #0]
 8015c7a:	4608      	mov	r0, r1
 8015c7c:	f7fe fed4 	bl	8014a28 <rcl_service_get_rmw_handle>
 8015c80:	b190      	cbz	r0, 8015ca8 <rcl_wait_set_add_service+0x50>
 8015c82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015c84:	6842      	ldr	r2, [r0, #4]
 8015c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c88:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015c8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015c8e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8015c90:	3301      	adds	r3, #1
 8015c92:	6293      	str	r3, [r2, #40]	; 0x28
 8015c94:	2000      	movs	r0, #0
 8015c96:	bd70      	pop	{r4, r5, r6, pc}
 8015c98:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015c9c:	bd70      	pop	{r4, r5, r6, pc}
 8015c9e:	f240 3086 	movw	r0, #902	; 0x386
 8015ca2:	bd70      	pop	{r4, r5, r6, pc}
 8015ca4:	200b      	movs	r0, #11
 8015ca6:	4770      	bx	lr
 8015ca8:	2001      	movs	r0, #1
 8015caa:	bd70      	pop	{r4, r5, r6, pc}
 8015cac:	200b      	movs	r0, #11
 8015cae:	bd70      	pop	{r4, r5, r6, pc}

08015cb0 <rcl_wait>:
 8015cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cb4:	b08f      	sub	sp, #60	; 0x3c
 8015cb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015cba:	2800      	cmp	r0, #0
 8015cbc:	f000 814c 	beq.w	8015f58 <rcl_wait+0x2a8>
 8015cc0:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8015cc2:	4604      	mov	r4, r0
 8015cc4:	2d00      	cmp	r5, #0
 8015cc6:	f000 80bc 	beq.w	8015e42 <rcl_wait+0x192>
 8015cca:	6843      	ldr	r3, [r0, #4]
 8015ccc:	b973      	cbnz	r3, 8015cec <rcl_wait+0x3c>
 8015cce:	68e3      	ldr	r3, [r4, #12]
 8015cd0:	b963      	cbnz	r3, 8015cec <rcl_wait+0x3c>
 8015cd2:	6963      	ldr	r3, [r4, #20]
 8015cd4:	b953      	cbnz	r3, 8015cec <rcl_wait+0x3c>
 8015cd6:	69e3      	ldr	r3, [r4, #28]
 8015cd8:	b943      	cbnz	r3, 8015cec <rcl_wait+0x3c>
 8015cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015cdc:	b933      	cbnz	r3, 8015cec <rcl_wait+0x3c>
 8015cde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015ce0:	b923      	cbnz	r3, 8015cec <rcl_wait+0x3c>
 8015ce2:	f240 3085 	movw	r0, #901	; 0x385
 8015ce6:	b00f      	add	sp, #60	; 0x3c
 8015ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015cf0:	2a01      	cmp	r2, #1
 8015cf2:	f173 0300 	sbcs.w	r3, r3, #0
 8015cf6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8015cf8:	db56      	blt.n	8015da8 <rcl_wait+0xf8>
 8015cfa:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8015cfe:	2900      	cmp	r1, #0
 8015d00:	f000 8149 	beq.w	8015f96 <rcl_wait+0x2e6>
 8015d04:	2300      	movs	r3, #0
 8015d06:	9307      	str	r3, [sp, #28]
 8015d08:	469b      	mov	fp, r3
 8015d0a:	f04f 0800 	mov.w	r8, #0
 8015d0e:	f04f 0900 	mov.w	r9, #0
 8015d12:	e00d      	b.n	8015d30 <rcl_wait+0x80>
 8015d14:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015d16:	6922      	ldr	r2, [r4, #16]
 8015d18:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8015d1a:	f842 000a 	str.w	r0, [r2, sl]
 8015d1e:	f118 0801 	adds.w	r8, r8, #1
 8015d22:	f149 0900 	adc.w	r9, r9, #0
 8015d26:	2300      	movs	r3, #0
 8015d28:	4599      	cmp	r9, r3
 8015d2a:	bf08      	it	eq
 8015d2c:	4588      	cmpeq	r8, r1
 8015d2e:	d243      	bcs.n	8015db8 <rcl_wait+0x108>
 8015d30:	6922      	ldr	r2, [r4, #16]
 8015d32:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8015d36:	f852 000a 	ldr.w	r0, [r2, sl]
 8015d3a:	2800      	cmp	r0, #0
 8015d3c:	d0ef      	beq.n	8015d1e <rcl_wait+0x6e>
 8015d3e:	68e2      	ldr	r2, [r4, #12]
 8015d40:	6969      	ldr	r1, [r5, #20]
 8015d42:	4442      	add	r2, r8
 8015d44:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8015d48:	b13b      	cbz	r3, 8015d5a <rcl_wait+0xaa>
 8015d4a:	692a      	ldr	r2, [r5, #16]
 8015d4c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015d50:	6921      	ldr	r1, [r4, #16]
 8015d52:	3201      	adds	r2, #1
 8015d54:	f851 000a 	ldr.w	r0, [r1, sl]
 8015d58:	612a      	str	r2, [r5, #16]
 8015d5a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8015d5e:	f88d b027 	strb.w	fp, [sp, #39]	; 0x27
 8015d62:	f7ff f9c3 	bl	80150ec <rcl_timer_is_canceled>
 8015d66:	2800      	cmp	r0, #0
 8015d68:	d1bd      	bne.n	8015ce6 <rcl_wait+0x36>
 8015d6a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8015d6e:	2a00      	cmp	r2, #0
 8015d70:	d1d0      	bne.n	8015d14 <rcl_wait+0x64>
 8015d72:	6922      	ldr	r2, [r4, #16]
 8015d74:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015d78:	f852 000a 	ldr.w	r0, [r2, sl]
 8015d7c:	a90a      	add	r1, sp, #40	; 0x28
 8015d7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015d82:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015d86:	f7ff f98d 	bl	80150a4 <rcl_timer_get_time_until_next_call>
 8015d8a:	2800      	cmp	r0, #0
 8015d8c:	d1ab      	bne.n	8015ce6 <rcl_wait+0x36>
 8015d8e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015d92:	42b2      	cmp	r2, r6
 8015d94:	eb73 0107 	sbcs.w	r1, r3, r7
 8015d98:	da03      	bge.n	8015da2 <rcl_wait+0xf2>
 8015d9a:	461f      	mov	r7, r3
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	4616      	mov	r6, r2
 8015da0:	9307      	str	r3, [sp, #28]
 8015da2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8015da4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8015da6:	e7ba      	b.n	8015d1e <rcl_wait+0x6e>
 8015da8:	2900      	cmp	r1, #0
 8015daa:	f000 80de 	beq.w	8015f6a <rcl_wait+0x2ba>
 8015dae:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8015db2:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8015db6:	e7a5      	b.n	8015d04 <rcl_wait+0x54>
 8015db8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015dbc:	4313      	orrs	r3, r2
 8015dbe:	d145      	bne.n	8015e4c <rcl_wait+0x19c>
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015dc8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8015dcc:	ab0a      	add	r3, sp, #40	; 0x28
 8015dce:	9302      	str	r3, [sp, #8]
 8015dd0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8015dd2:	9301      	str	r3, [sp, #4]
 8015dd4:	f105 0334 	add.w	r3, r5, #52	; 0x34
 8015dd8:	9300      	str	r3, [sp, #0]
 8015dda:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8015dde:	f105 031c 	add.w	r3, r5, #28
 8015de2:	f105 0110 	add.w	r1, r5, #16
 8015de6:	1d28      	adds	r0, r5, #4
 8015de8:	f000 ff12 	bl	8016c10 <rmw_wait>
 8015dec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015df0:	4680      	mov	r8, r0
 8015df2:	b30a      	cbz	r2, 8015e38 <rcl_wait+0x188>
 8015df4:	2500      	movs	r5, #0
 8015df6:	462f      	mov	r7, r5
 8015df8:	e004      	b.n	8015e04 <rcl_wait+0x154>
 8015dfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015dfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015dfe:	3501      	adds	r5, #1
 8015e00:	42aa      	cmp	r2, r5
 8015e02:	d919      	bls.n	8015e38 <rcl_wait+0x188>
 8015e04:	6922      	ldr	r2, [r4, #16]
 8015e06:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8015e0a:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8015e0e:	00ae      	lsls	r6, r5, #2
 8015e10:	2800      	cmp	r0, #0
 8015e12:	d0f3      	beq.n	8015dfc <rcl_wait+0x14c>
 8015e14:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 8015e18:	f7ff f90c 	bl	8015034 <rcl_timer_is_ready>
 8015e1c:	2800      	cmp	r0, #0
 8015e1e:	f47f af62 	bne.w	8015ce6 <rcl_wait+0x36>
 8015e22:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
 8015e26:	2a00      	cmp	r2, #0
 8015e28:	d1e7      	bne.n	8015dfa <rcl_wait+0x14a>
 8015e2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015e2c:	6921      	ldr	r1, [r4, #16]
 8015e2e:	518a      	str	r2, [r1, r6]
 8015e30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015e32:	3501      	adds	r5, #1
 8015e34:	42aa      	cmp	r2, r5
 8015e36:	d8e5      	bhi.n	8015e04 <rcl_wait+0x154>
 8015e38:	f038 0002 	bics.w	r0, r8, #2
 8015e3c:	d029      	beq.n	8015e92 <rcl_wait+0x1e2>
 8015e3e:	2001      	movs	r0, #1
 8015e40:	e751      	b.n	8015ce6 <rcl_wait+0x36>
 8015e42:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015e46:	b00f      	add	sp, #60	; 0x3c
 8015e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e50:	2a01      	cmp	r2, #1
 8015e52:	f173 0300 	sbcs.w	r3, r3, #0
 8015e56:	f2c0 8083 	blt.w	8015f60 <rcl_wait+0x2b0>
 8015e5a:	2e00      	cmp	r6, #0
 8015e5c:	f177 0300 	sbcs.w	r3, r7, #0
 8015e60:	bfbc      	itt	lt
 8015e62:	2600      	movlt	r6, #0
 8015e64:	2700      	movlt	r7, #0
 8015e66:	a34e      	add	r3, pc, #312	; (adr r3, 8015fa0 <rcl_wait+0x2f0>)
 8015e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e6c:	4630      	mov	r0, r6
 8015e6e:	4639      	mov	r1, r7
 8015e70:	f7ea ff22 	bl	8000cb8 <__aeabi_ldivmod>
 8015e74:	a34a      	add	r3, pc, #296	; (adr r3, 8015fa0 <rcl_wait+0x2f0>)
 8015e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e7a:	4680      	mov	r8, r0
 8015e7c:	4689      	mov	r9, r1
 8015e7e:	4630      	mov	r0, r6
 8015e80:	4639      	mov	r1, r7
 8015e82:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8015e86:	f7ea ff17 	bl	8000cb8 <__aeabi_ldivmod>
 8015e8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8015e8e:	ab0a      	add	r3, sp, #40	; 0x28
 8015e90:	e79d      	b.n	8015dce <rcl_wait+0x11e>
 8015e92:	6866      	ldr	r6, [r4, #4]
 8015e94:	4602      	mov	r2, r0
 8015e96:	b91e      	cbnz	r6, 8015ea0 <rcl_wait+0x1f0>
 8015e98:	e00d      	b.n	8015eb6 <rcl_wait+0x206>
 8015e9a:	3201      	adds	r2, #1
 8015e9c:	42b2      	cmp	r2, r6
 8015e9e:	d00a      	beq.n	8015eb6 <rcl_wait+0x206>
 8015ea0:	6899      	ldr	r1, [r3, #8]
 8015ea2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015ea6:	2900      	cmp	r1, #0
 8015ea8:	d1f7      	bne.n	8015e9a <rcl_wait+0x1ea>
 8015eaa:	6825      	ldr	r5, [r4, #0]
 8015eac:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015eb0:	3201      	adds	r2, #1
 8015eb2:	42b2      	cmp	r2, r6
 8015eb4:	d1f4      	bne.n	8015ea0 <rcl_wait+0x1f0>
 8015eb6:	68e6      	ldr	r6, [r4, #12]
 8015eb8:	2200      	movs	r2, #0
 8015eba:	b91e      	cbnz	r6, 8015ec4 <rcl_wait+0x214>
 8015ebc:	e00d      	b.n	8015eda <rcl_wait+0x22a>
 8015ebe:	3201      	adds	r2, #1
 8015ec0:	42b2      	cmp	r2, r6
 8015ec2:	d00a      	beq.n	8015eda <rcl_wait+0x22a>
 8015ec4:	6959      	ldr	r1, [r3, #20]
 8015ec6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015eca:	2900      	cmp	r1, #0
 8015ecc:	d1f7      	bne.n	8015ebe <rcl_wait+0x20e>
 8015ece:	68a5      	ldr	r5, [r4, #8]
 8015ed0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015ed4:	3201      	adds	r2, #1
 8015ed6:	42b2      	cmp	r2, r6
 8015ed8:	d1f4      	bne.n	8015ec4 <rcl_wait+0x214>
 8015eda:	69e6      	ldr	r6, [r4, #28]
 8015edc:	2200      	movs	r2, #0
 8015ede:	b91e      	cbnz	r6, 8015ee8 <rcl_wait+0x238>
 8015ee0:	e00d      	b.n	8015efe <rcl_wait+0x24e>
 8015ee2:	3201      	adds	r2, #1
 8015ee4:	42b2      	cmp	r2, r6
 8015ee6:	d00a      	beq.n	8015efe <rcl_wait+0x24e>
 8015ee8:	6a19      	ldr	r1, [r3, #32]
 8015eea:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015eee:	2900      	cmp	r1, #0
 8015ef0:	d1f7      	bne.n	8015ee2 <rcl_wait+0x232>
 8015ef2:	69a5      	ldr	r5, [r4, #24]
 8015ef4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015ef8:	3201      	adds	r2, #1
 8015efa:	42b2      	cmp	r2, r6
 8015efc:	d1f4      	bne.n	8015ee8 <rcl_wait+0x238>
 8015efe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015f00:	2200      	movs	r2, #0
 8015f02:	b91e      	cbnz	r6, 8015f0c <rcl_wait+0x25c>
 8015f04:	e00d      	b.n	8015f22 <rcl_wait+0x272>
 8015f06:	3201      	adds	r2, #1
 8015f08:	4296      	cmp	r6, r2
 8015f0a:	d00a      	beq.n	8015f22 <rcl_wait+0x272>
 8015f0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8015f0e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015f12:	2900      	cmp	r1, #0
 8015f14:	d1f7      	bne.n	8015f06 <rcl_wait+0x256>
 8015f16:	6a25      	ldr	r5, [r4, #32]
 8015f18:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015f1c:	3201      	adds	r2, #1
 8015f1e:	4296      	cmp	r6, r2
 8015f20:	d1f4      	bne.n	8015f0c <rcl_wait+0x25c>
 8015f22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015f24:	2200      	movs	r2, #0
 8015f26:	b91e      	cbnz	r6, 8015f30 <rcl_wait+0x280>
 8015f28:	e00d      	b.n	8015f46 <rcl_wait+0x296>
 8015f2a:	3201      	adds	r2, #1
 8015f2c:	42b2      	cmp	r2, r6
 8015f2e:	d00a      	beq.n	8015f46 <rcl_wait+0x296>
 8015f30:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8015f32:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015f36:	2900      	cmp	r1, #0
 8015f38:	d1f7      	bne.n	8015f2a <rcl_wait+0x27a>
 8015f3a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8015f3c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8015f40:	3201      	adds	r2, #1
 8015f42:	42b2      	cmp	r2, r6
 8015f44:	d1f4      	bne.n	8015f30 <rcl_wait+0x280>
 8015f46:	f1b8 0f02 	cmp.w	r8, #2
 8015f4a:	f47f aecc 	bne.w	8015ce6 <rcl_wait+0x36>
 8015f4e:	9b07      	ldr	r3, [sp, #28]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	bf08      	it	eq
 8015f54:	2002      	moveq	r0, #2
 8015f56:	e6c6      	b.n	8015ce6 <rcl_wait+0x36>
 8015f58:	200b      	movs	r0, #11
 8015f5a:	b00f      	add	sp, #60	; 0x3c
 8015f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f60:	9b07      	ldr	r3, [sp, #28]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	f47f af79 	bne.w	8015e5a <rcl_wait+0x1aa>
 8015f68:	e731      	b.n	8015dce <rcl_wait+0x11e>
 8015f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015f6e:	4313      	orrs	r3, r2
 8015f70:	bf08      	it	eq
 8015f72:	9107      	streq	r1, [sp, #28]
 8015f74:	f43f af24 	beq.w	8015dc0 <rcl_wait+0x110>
 8015f78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015f7c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8015f80:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8015f84:	2a01      	cmp	r2, #1
 8015f86:	f173 0300 	sbcs.w	r3, r3, #0
 8015f8a:	f04f 0300 	mov.w	r3, #0
 8015f8e:	9307      	str	r3, [sp, #28]
 8015f90:	f6bf af63 	bge.w	8015e5a <rcl_wait+0x1aa>
 8015f94:	e71b      	b.n	8015dce <rcl_wait+0x11e>
 8015f96:	4632      	mov	r2, r6
 8015f98:	463b      	mov	r3, r7
 8015f9a:	e7f3      	b.n	8015f84 <rcl_wait+0x2d4>
 8015f9c:	f3af 8000 	nop.w
 8015fa0:	3b9aca00 	.word	0x3b9aca00
 8015fa4:	00000000 	.word	0x00000000

08015fa8 <__atomic_load_8>:
 8015fa8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8015fac:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8015fb0:	4b14      	ldr	r3, [pc, #80]	; (8016004 <__atomic_load_8+0x5c>)
 8015fb2:	4a15      	ldr	r2, [pc, #84]	; (8016008 <__atomic_load_8+0x60>)
 8015fb4:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8015fb8:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8015fbc:	fb03 f301 	mul.w	r3, r3, r1
 8015fc0:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8015fc4:	fba2 1203 	umull	r1, r2, r2, r3
 8015fc8:	0912      	lsrs	r2, r2, #4
 8015fca:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8015fce:	b430      	push	{r4, r5}
 8015fd0:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8015fd4:	4c0d      	ldr	r4, [pc, #52]	; (801600c <__atomic_load_8+0x64>)
 8015fd6:	1a9b      	subs	r3, r3, r2
 8015fd8:	18e1      	adds	r1, r4, r3
 8015fda:	f04f 0501 	mov.w	r5, #1
 8015fde:	e8d1 2f4f 	ldrexb	r2, [r1]
 8015fe2:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8015fe6:	f1bc 0f00 	cmp.w	ip, #0
 8015fea:	d1f8      	bne.n	8015fde <__atomic_load_8+0x36>
 8015fec:	f3bf 8f5b 	dmb	ish
 8015ff0:	b2d2      	uxtb	r2, r2
 8015ff2:	2a00      	cmp	r2, #0
 8015ff4:	d1f3      	bne.n	8015fde <__atomic_load_8+0x36>
 8015ff6:	e9d0 0100 	ldrd	r0, r1, [r0]
 8015ffa:	f3bf 8f5b 	dmb	ish
 8015ffe:	54e2      	strb	r2, [r4, r3]
 8016000:	bc30      	pop	{r4, r5}
 8016002:	4770      	bx	lr
 8016004:	27d4eb2d 	.word	0x27d4eb2d
 8016008:	b21642c9 	.word	0xb21642c9
 801600c:	20009f90 	.word	0x20009f90

08016010 <__atomic_store_8>:
 8016010:	b4f0      	push	{r4, r5, r6, r7}
 8016012:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016016:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 801601a:	4914      	ldr	r1, [pc, #80]	; (801606c <__atomic_store_8+0x5c>)
 801601c:	4c14      	ldr	r4, [pc, #80]	; (8016070 <__atomic_store_8+0x60>)
 801601e:	4e15      	ldr	r6, [pc, #84]	; (8016074 <__atomic_store_8+0x64>)
 8016020:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 8016024:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016028:	fb01 f105 	mul.w	r1, r1, r5
 801602c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016030:	fba4 5401 	umull	r5, r4, r4, r1
 8016034:	0924      	lsrs	r4, r4, #4
 8016036:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801603a:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 801603e:	1b09      	subs	r1, r1, r4
 8016040:	1875      	adds	r5, r6, r1
 8016042:	f04f 0701 	mov.w	r7, #1
 8016046:	e8d5 4f4f 	ldrexb	r4, [r5]
 801604a:	e8c5 7f4c 	strexb	ip, r7, [r5]
 801604e:	f1bc 0f00 	cmp.w	ip, #0
 8016052:	d1f8      	bne.n	8016046 <__atomic_store_8+0x36>
 8016054:	f3bf 8f5b 	dmb	ish
 8016058:	b2e4      	uxtb	r4, r4
 801605a:	2c00      	cmp	r4, #0
 801605c:	d1f3      	bne.n	8016046 <__atomic_store_8+0x36>
 801605e:	e9c0 2300 	strd	r2, r3, [r0]
 8016062:	f3bf 8f5b 	dmb	ish
 8016066:	5474      	strb	r4, [r6, r1]
 8016068:	bcf0      	pop	{r4, r5, r6, r7}
 801606a:	4770      	bx	lr
 801606c:	27d4eb2d 	.word	0x27d4eb2d
 8016070:	b21642c9 	.word	0xb21642c9
 8016074:	20009f90 	.word	0x20009f90

08016078 <__atomic_exchange_8>:
 8016078:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 801607c:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016080:	f085 053d 	eor.w	r5, r5, #61	; 0x3d
 8016084:	4c16      	ldr	r4, [pc, #88]	; (80160e0 <__atomic_exchange_8+0x68>)
 8016086:	4917      	ldr	r1, [pc, #92]	; (80160e4 <__atomic_exchange_8+0x6c>)
 8016088:	4e17      	ldr	r6, [pc, #92]	; (80160e8 <__atomic_exchange_8+0x70>)
 801608a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 801608e:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016092:	fb04 f505 	mul.w	r5, r4, r5
 8016096:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 801609a:	fba1 4105 	umull	r4, r1, r1, r5
 801609e:	0909      	lsrs	r1, r1, #4
 80160a0:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80160a4:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 80160a8:	1a6c      	subs	r4, r5, r1
 80160aa:	1931      	adds	r1, r6, r4
 80160ac:	f04f 0701 	mov.w	r7, #1
 80160b0:	e8d1 5f4f 	ldrexb	r5, [r1]
 80160b4:	e8c1 7f4c 	strexb	ip, r7, [r1]
 80160b8:	f1bc 0f00 	cmp.w	ip, #0
 80160bc:	d1f8      	bne.n	80160b0 <__atomic_exchange_8+0x38>
 80160be:	f3bf 8f5b 	dmb	ish
 80160c2:	b2ed      	uxtb	r5, r5
 80160c4:	2d00      	cmp	r5, #0
 80160c6:	d1f3      	bne.n	80160b0 <__atomic_exchange_8+0x38>
 80160c8:	e9d0 8900 	ldrd	r8, r9, [r0]
 80160cc:	e9c0 2300 	strd	r2, r3, [r0]
 80160d0:	f3bf 8f5b 	dmb	ish
 80160d4:	5535      	strb	r5, [r6, r4]
 80160d6:	4640      	mov	r0, r8
 80160d8:	4649      	mov	r1, r9
 80160da:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80160de:	4770      	bx	lr
 80160e0:	27d4eb2d 	.word	0x27d4eb2d
 80160e4:	b21642c9 	.word	0xb21642c9
 80160e8:	20009f90 	.word	0x20009f90

080160ec <rcutils_is_directory>:
 80160ec:	2000      	movs	r0, #0
 80160ee:	4770      	bx	lr

080160f0 <rcutils_join_path>:
 80160f0:	b082      	sub	sp, #8
 80160f2:	e88d 000c 	stmia.w	sp, {r2, r3}
 80160f6:	2000      	movs	r0, #0
 80160f8:	b002      	add	sp, #8
 80160fa:	4770      	bx	lr

080160fc <rcutils_to_native_path>:
 80160fc:	b084      	sub	sp, #16
 80160fe:	a801      	add	r0, sp, #4
 8016100:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016104:	b004      	add	sp, #16
 8016106:	2000      	movs	r0, #0
 8016108:	4770      	bx	lr
 801610a:	bf00      	nop

0801610c <rcutils_format_string_limit>:
 801610c:	b40f      	push	{r0, r1, r2, r3}
 801610e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016110:	b083      	sub	sp, #12
 8016112:	ac08      	add	r4, sp, #32
 8016114:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016116:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801611a:	b34e      	cbz	r6, 8016170 <rcutils_format_string_limit+0x64>
 801611c:	a808      	add	r0, sp, #32
 801611e:	f7f8 fbfd 	bl	800e91c <rcutils_allocator_is_valid>
 8016122:	b328      	cbz	r0, 8016170 <rcutils_format_string_limit+0x64>
 8016124:	2100      	movs	r1, #0
 8016126:	ab0f      	add	r3, sp, #60	; 0x3c
 8016128:	4608      	mov	r0, r1
 801612a:	4632      	mov	r2, r6
 801612c:	e9cd 3300 	strd	r3, r3, [sp]
 8016130:	f000 f904 	bl	801633c <rcutils_vsnprintf>
 8016134:	1c43      	adds	r3, r0, #1
 8016136:	4605      	mov	r5, r0
 8016138:	d01a      	beq.n	8016170 <rcutils_format_string_limit+0x64>
 801613a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801613c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801613e:	1c47      	adds	r7, r0, #1
 8016140:	429f      	cmp	r7, r3
 8016142:	bf84      	itt	hi
 8016144:	461f      	movhi	r7, r3
 8016146:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 801614a:	4638      	mov	r0, r7
 801614c:	9b08      	ldr	r3, [sp, #32]
 801614e:	4798      	blx	r3
 8016150:	4604      	mov	r4, r0
 8016152:	b168      	cbz	r0, 8016170 <rcutils_format_string_limit+0x64>
 8016154:	9b01      	ldr	r3, [sp, #4]
 8016156:	4632      	mov	r2, r6
 8016158:	4639      	mov	r1, r7
 801615a:	f000 f8ef 	bl	801633c <rcutils_vsnprintf>
 801615e:	2800      	cmp	r0, #0
 8016160:	db02      	blt.n	8016168 <rcutils_format_string_limit+0x5c>
 8016162:	2300      	movs	r3, #0
 8016164:	5563      	strb	r3, [r4, r5]
 8016166:	e004      	b.n	8016172 <rcutils_format_string_limit+0x66>
 8016168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801616a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801616c:	4620      	mov	r0, r4
 801616e:	4798      	blx	r3
 8016170:	2400      	movs	r4, #0
 8016172:	4620      	mov	r0, r4
 8016174:	b003      	add	sp, #12
 8016176:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801617a:	b004      	add	sp, #16
 801617c:	4770      	bx	lr
 801617e:	bf00      	nop

08016180 <rcutils_get_env>:
 8016180:	b168      	cbz	r0, 801619e <rcutils_get_env+0x1e>
 8016182:	b510      	push	{r4, lr}
 8016184:	460c      	mov	r4, r1
 8016186:	b129      	cbz	r1, 8016194 <rcutils_get_env+0x14>
 8016188:	f002 ff08 	bl	8018f9c <getenv>
 801618c:	b120      	cbz	r0, 8016198 <rcutils_get_env+0x18>
 801618e:	6020      	str	r0, [r4, #0]
 8016190:	2000      	movs	r0, #0
 8016192:	bd10      	pop	{r4, pc}
 8016194:	4803      	ldr	r0, [pc, #12]	; (80161a4 <rcutils_get_env+0x24>)
 8016196:	bd10      	pop	{r4, pc}
 8016198:	4b03      	ldr	r3, [pc, #12]	; (80161a8 <rcutils_get_env+0x28>)
 801619a:	6023      	str	r3, [r4, #0]
 801619c:	bd10      	pop	{r4, pc}
 801619e:	4803      	ldr	r0, [pc, #12]	; (80161ac <rcutils_get_env+0x2c>)
 80161a0:	4770      	bx	lr
 80161a2:	bf00      	nop
 80161a4:	0801e430 	.word	0x0801e430
 80161a8:	0801e554 	.word	0x0801e554
 80161ac:	0801e414 	.word	0x0801e414

080161b0 <rcutils_repl_str>:
 80161b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161b4:	ed2d 8b02 	vpush	{d8}
 80161b8:	b087      	sub	sp, #28
 80161ba:	4680      	mov	r8, r0
 80161bc:	4608      	mov	r0, r1
 80161be:	f8cd 8000 	str.w	r8, [sp]
 80161c2:	ee08 2a10 	vmov	s16, r2
 80161c6:	468a      	mov	sl, r1
 80161c8:	4699      	mov	r9, r3
 80161ca:	f7ea f813 	bl	80001f4 <strlen>
 80161ce:	2600      	movs	r6, #0
 80161d0:	4647      	mov	r7, r8
 80161d2:	9001      	str	r0, [sp, #4]
 80161d4:	46b3      	mov	fp, r6
 80161d6:	2510      	movs	r5, #16
 80161d8:	46b0      	mov	r8, r6
 80161da:	e01d      	b.n	8016218 <rcutils_repl_str+0x68>
 80161dc:	f10b 0b01 	add.w	fp, fp, #1
 80161e0:	455e      	cmp	r6, fp
 80161e2:	d211      	bcs.n	8016208 <rcutils_repl_str+0x58>
 80161e4:	442e      	add	r6, r5
 80161e6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80161ea:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80161ee:	00b1      	lsls	r1, r6, #2
 80161f0:	4798      	blx	r3
 80161f2:	2800      	cmp	r0, #0
 80161f4:	f000 8084 	beq.w	8016300 <rcutils_repl_str+0x150>
 80161f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80161fc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8016200:	bf28      	it	cs
 8016202:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8016206:	4680      	mov	r8, r0
 8016208:	9a00      	ldr	r2, [sp, #0]
 801620a:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801620e:	1aa2      	subs	r2, r4, r2
 8016210:	f843 2c04 	str.w	r2, [r3, #-4]
 8016214:	9b01      	ldr	r3, [sp, #4]
 8016216:	18e7      	adds	r7, r4, r3
 8016218:	4651      	mov	r1, sl
 801621a:	4638      	mov	r0, r7
 801621c:	f004 f920 	bl	801a460 <strstr>
 8016220:	4604      	mov	r4, r0
 8016222:	4640      	mov	r0, r8
 8016224:	2c00      	cmp	r4, #0
 8016226:	d1d9      	bne.n	80161dc <rcutils_repl_str+0x2c>
 8016228:	46b8      	mov	r8, r7
 801622a:	4607      	mov	r7, r0
 801622c:	4640      	mov	r0, r8
 801622e:	f7e9 ffe1 	bl	80001f4 <strlen>
 8016232:	9b00      	ldr	r3, [sp, #0]
 8016234:	eba8 0303 	sub.w	r3, r8, r3
 8016238:	181d      	adds	r5, r3, r0
 801623a:	9504      	str	r5, [sp, #16]
 801623c:	f1bb 0f00 	cmp.w	fp, #0
 8016240:	d03d      	beq.n	80162be <rcutils_repl_str+0x10e>
 8016242:	ee18 0a10 	vmov	r0, s16
 8016246:	f7e9 ffd5 	bl	80001f4 <strlen>
 801624a:	9b01      	ldr	r3, [sp, #4]
 801624c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016250:	1ac3      	subs	r3, r0, r3
 8016252:	fb0b 5303 	mla	r3, fp, r3, r5
 8016256:	9305      	str	r3, [sp, #20]
 8016258:	4606      	mov	r6, r0
 801625a:	1c58      	adds	r0, r3, #1
 801625c:	f8d9 3000 	ldr.w	r3, [r9]
 8016260:	4798      	blx	r3
 8016262:	9003      	str	r0, [sp, #12]
 8016264:	2800      	cmp	r0, #0
 8016266:	d04c      	beq.n	8016302 <rcutils_repl_str+0x152>
 8016268:	683a      	ldr	r2, [r7, #0]
 801626a:	9900      	ldr	r1, [sp, #0]
 801626c:	f002 ff16 	bl	801909c <memcpy>
 8016270:	9b03      	ldr	r3, [sp, #12]
 8016272:	683d      	ldr	r5, [r7, #0]
 8016274:	ee18 8a10 	vmov	r8, s16
 8016278:	441d      	add	r5, r3
 801627a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801627e:	9302      	str	r3, [sp, #8]
 8016280:	46ba      	mov	sl, r7
 8016282:	4632      	mov	r2, r6
 8016284:	4641      	mov	r1, r8
 8016286:	4628      	mov	r0, r5
 8016288:	f002 ff08 	bl	801909c <memcpy>
 801628c:	9b01      	ldr	r3, [sp, #4]
 801628e:	f85a 2b04 	ldr.w	r2, [sl], #4
 8016292:	441a      	add	r2, r3
 8016294:	9b00      	ldr	r3, [sp, #0]
 8016296:	1899      	adds	r1, r3, r2
 8016298:	9b02      	ldr	r3, [sp, #8]
 801629a:	4435      	add	r5, r6
 801629c:	429c      	cmp	r4, r3
 801629e:	4628      	mov	r0, r5
 80162a0:	d025      	beq.n	80162ee <rcutils_repl_str+0x13e>
 80162a2:	f8da 3000 	ldr.w	r3, [sl]
 80162a6:	3401      	adds	r4, #1
 80162a8:	1a9a      	subs	r2, r3, r2
 80162aa:	4415      	add	r5, r2
 80162ac:	f002 fef6 	bl	801909c <memcpy>
 80162b0:	455c      	cmp	r4, fp
 80162b2:	d3e6      	bcc.n	8016282 <rcutils_repl_str+0xd2>
 80162b4:	9a03      	ldr	r2, [sp, #12]
 80162b6:	9905      	ldr	r1, [sp, #20]
 80162b8:	2300      	movs	r3, #0
 80162ba:	5453      	strb	r3, [r2, r1]
 80162bc:	e00b      	b.n	80162d6 <rcutils_repl_str+0x126>
 80162be:	4628      	mov	r0, r5
 80162c0:	f8d9 3000 	ldr.w	r3, [r9]
 80162c4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80162c8:	3001      	adds	r0, #1
 80162ca:	4798      	blx	r3
 80162cc:	9003      	str	r0, [sp, #12]
 80162ce:	b110      	cbz	r0, 80162d6 <rcutils_repl_str+0x126>
 80162d0:	9900      	ldr	r1, [sp, #0]
 80162d2:	f004 f8a9 	bl	801a428 <strcpy>
 80162d6:	4638      	mov	r0, r7
 80162d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80162dc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80162e0:	4798      	blx	r3
 80162e2:	9803      	ldr	r0, [sp, #12]
 80162e4:	b007      	add	sp, #28
 80162e6:	ecbd 8b02 	vpop	{d8}
 80162ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162ee:	9b04      	ldr	r3, [sp, #16]
 80162f0:	3401      	adds	r4, #1
 80162f2:	1a9a      	subs	r2, r3, r2
 80162f4:	4415      	add	r5, r2
 80162f6:	f002 fed1 	bl	801909c <memcpy>
 80162fa:	455c      	cmp	r4, fp
 80162fc:	d3c1      	bcc.n	8016282 <rcutils_repl_str+0xd2>
 80162fe:	e7d9      	b.n	80162b4 <rcutils_repl_str+0x104>
 8016300:	4647      	mov	r7, r8
 8016302:	2300      	movs	r3, #0
 8016304:	9303      	str	r3, [sp, #12]
 8016306:	e7e6      	b.n	80162d6 <rcutils_repl_str+0x126>

08016308 <rcutils_snprintf>:
 8016308:	b40c      	push	{r2, r3}
 801630a:	b530      	push	{r4, r5, lr}
 801630c:	b083      	sub	sp, #12
 801630e:	ab06      	add	r3, sp, #24
 8016310:	f853 2b04 	ldr.w	r2, [r3], #4
 8016314:	9301      	str	r3, [sp, #4]
 8016316:	b152      	cbz	r2, 801632e <rcutils_snprintf+0x26>
 8016318:	b138      	cbz	r0, 801632a <rcutils_snprintf+0x22>
 801631a:	b141      	cbz	r1, 801632e <rcutils_snprintf+0x26>
 801631c:	f005 f80c 	bl	801b338 <vsniprintf>
 8016320:	b003      	add	sp, #12
 8016322:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016326:	b002      	add	sp, #8
 8016328:	4770      	bx	lr
 801632a:	2900      	cmp	r1, #0
 801632c:	d0f6      	beq.n	801631c <rcutils_snprintf+0x14>
 801632e:	f002 fd39 	bl	8018da4 <__errno>
 8016332:	2316      	movs	r3, #22
 8016334:	6003      	str	r3, [r0, #0]
 8016336:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801633a:	e7f1      	b.n	8016320 <rcutils_snprintf+0x18>

0801633c <rcutils_vsnprintf>:
 801633c:	b570      	push	{r4, r5, r6, lr}
 801633e:	b13a      	cbz	r2, 8016350 <rcutils_vsnprintf+0x14>
 8016340:	b120      	cbz	r0, 801634c <rcutils_vsnprintf+0x10>
 8016342:	b129      	cbz	r1, 8016350 <rcutils_vsnprintf+0x14>
 8016344:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016348:	f004 bff6 	b.w	801b338 <vsniprintf>
 801634c:	2900      	cmp	r1, #0
 801634e:	d0f9      	beq.n	8016344 <rcutils_vsnprintf+0x8>
 8016350:	f002 fd28 	bl	8018da4 <__errno>
 8016354:	2316      	movs	r3, #22
 8016356:	6003      	str	r3, [r0, #0]
 8016358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801635c:	bd70      	pop	{r4, r5, r6, pc}
 801635e:	bf00      	nop

08016360 <rcutils_strdup>:
 8016360:	b084      	sub	sp, #16
 8016362:	b570      	push	{r4, r5, r6, lr}
 8016364:	b082      	sub	sp, #8
 8016366:	ac07      	add	r4, sp, #28
 8016368:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801636c:	4605      	mov	r5, r0
 801636e:	b1b0      	cbz	r0, 801639e <rcutils_strdup+0x3e>
 8016370:	f7e9 ff40 	bl	80001f4 <strlen>
 8016374:	1c42      	adds	r2, r0, #1
 8016376:	9b07      	ldr	r3, [sp, #28]
 8016378:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801637a:	9201      	str	r2, [sp, #4]
 801637c:	4606      	mov	r6, r0
 801637e:	4610      	mov	r0, r2
 8016380:	4798      	blx	r3
 8016382:	4604      	mov	r4, r0
 8016384:	b128      	cbz	r0, 8016392 <rcutils_strdup+0x32>
 8016386:	9a01      	ldr	r2, [sp, #4]
 8016388:	4629      	mov	r1, r5
 801638a:	f002 fe87 	bl	801909c <memcpy>
 801638e:	2300      	movs	r3, #0
 8016390:	55a3      	strb	r3, [r4, r6]
 8016392:	4620      	mov	r0, r4
 8016394:	b002      	add	sp, #8
 8016396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801639a:	b004      	add	sp, #16
 801639c:	4770      	bx	lr
 801639e:	4604      	mov	r4, r0
 80163a0:	e7f7      	b.n	8016392 <rcutils_strdup+0x32>
 80163a2:	bf00      	nop

080163a4 <rcutils_strndup>:
 80163a4:	b082      	sub	sp, #8
 80163a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163a8:	460e      	mov	r6, r1
 80163aa:	a906      	add	r1, sp, #24
 80163ac:	e881 000c 	stmia.w	r1, {r2, r3}
 80163b0:	4605      	mov	r5, r0
 80163b2:	b180      	cbz	r0, 80163d6 <rcutils_strndup+0x32>
 80163b4:	1c77      	adds	r7, r6, #1
 80163b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80163b8:	4638      	mov	r0, r7
 80163ba:	4790      	blx	r2
 80163bc:	4604      	mov	r4, r0
 80163be:	b128      	cbz	r0, 80163cc <rcutils_strndup+0x28>
 80163c0:	463a      	mov	r2, r7
 80163c2:	4629      	mov	r1, r5
 80163c4:	f002 fe6a 	bl	801909c <memcpy>
 80163c8:	2300      	movs	r3, #0
 80163ca:	55a3      	strb	r3, [r4, r6]
 80163cc:	4620      	mov	r0, r4
 80163ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80163d2:	b002      	add	sp, #8
 80163d4:	4770      	bx	lr
 80163d6:	4604      	mov	r4, r0
 80163d8:	e7f8      	b.n	80163cc <rcutils_strndup+0x28>
 80163da:	bf00      	nop

080163dc <rmw_get_zero_initialized_context>:
 80163dc:	b510      	push	{r4, lr}
 80163de:	2250      	movs	r2, #80	; 0x50
 80163e0:	4604      	mov	r4, r0
 80163e2:	2100      	movs	r1, #0
 80163e4:	f002 fe82 	bl	80190ec <memset>
 80163e8:	4620      	mov	r0, r4
 80163ea:	bd10      	pop	{r4, pc}

080163ec <rmw_get_default_subscription_options>:
 80163ec:	2200      	movs	r2, #0
 80163ee:	6002      	str	r2, [r0, #0]
 80163f0:	7102      	strb	r2, [r0, #4]
 80163f2:	4770      	bx	lr

080163f4 <rmw_get_zero_initialized_message_info>:
 80163f4:	b470      	push	{r4, r5, r6}
 80163f6:	4d07      	ldr	r5, [pc, #28]	; (8016414 <rmw_get_zero_initialized_message_info+0x20>)
 80163f8:	4606      	mov	r6, r0
 80163fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80163fc:	4634      	mov	r4, r6
 80163fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016404:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016408:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801640c:	4630      	mov	r0, r6
 801640e:	bc70      	pop	{r4, r5, r6}
 8016410:	4770      	bx	lr
 8016412:	bf00      	nop
 8016414:	0801de08 	.word	0x0801de08

08016418 <rmw_validate_namespace_with_size>:
 8016418:	b340      	cbz	r0, 801646c <rmw_validate_namespace_with_size+0x54>
 801641a:	b5d0      	push	{r4, r6, r7, lr}
 801641c:	4614      	mov	r4, r2
 801641e:	b0c2      	sub	sp, #264	; 0x108
 8016420:	b332      	cbz	r2, 8016470 <rmw_validate_namespace_with_size+0x58>
 8016422:	2901      	cmp	r1, #1
 8016424:	460f      	mov	r7, r1
 8016426:	461e      	mov	r6, r3
 8016428:	d102      	bne.n	8016430 <rmw_validate_namespace_with_size+0x18>
 801642a:	7803      	ldrb	r3, [r0, #0]
 801642c:	2b2f      	cmp	r3, #47	; 0x2f
 801642e:	d019      	beq.n	8016464 <rmw_validate_namespace_with_size+0x4c>
 8016430:	aa01      	add	r2, sp, #4
 8016432:	4669      	mov	r1, sp
 8016434:	f7f8 fc44 	bl	800ecc0 <rmw_validate_full_topic_name>
 8016438:	b990      	cbnz	r0, 8016460 <rmw_validate_namespace_with_size+0x48>
 801643a:	9b00      	ldr	r3, [sp, #0]
 801643c:	b14b      	cbz	r3, 8016452 <rmw_validate_namespace_with_size+0x3a>
 801643e:	2b07      	cmp	r3, #7
 8016440:	d007      	beq.n	8016452 <rmw_validate_namespace_with_size+0x3a>
 8016442:	1e5a      	subs	r2, r3, #1
 8016444:	2a05      	cmp	r2, #5
 8016446:	d82b      	bhi.n	80164a0 <rmw_validate_namespace_with_size+0x88>
 8016448:	e8df f002 	tbb	[pc, r2]
 801644c:	24211e1b 	.word	0x24211e1b
 8016450:	1427      	.short	0x1427
 8016452:	2ff5      	cmp	r7, #245	; 0xf5
 8016454:	d906      	bls.n	8016464 <rmw_validate_namespace_with_size+0x4c>
 8016456:	2307      	movs	r3, #7
 8016458:	6023      	str	r3, [r4, #0]
 801645a:	b10e      	cbz	r6, 8016460 <rmw_validate_namespace_with_size+0x48>
 801645c:	23f4      	movs	r3, #244	; 0xf4
 801645e:	6033      	str	r3, [r6, #0]
 8016460:	b042      	add	sp, #264	; 0x108
 8016462:	bdd0      	pop	{r4, r6, r7, pc}
 8016464:	2000      	movs	r0, #0
 8016466:	6020      	str	r0, [r4, #0]
 8016468:	b042      	add	sp, #264	; 0x108
 801646a:	bdd0      	pop	{r4, r6, r7, pc}
 801646c:	200b      	movs	r0, #11
 801646e:	4770      	bx	lr
 8016470:	200b      	movs	r0, #11
 8016472:	e7f5      	b.n	8016460 <rmw_validate_namespace_with_size+0x48>
 8016474:	2306      	movs	r3, #6
 8016476:	6023      	str	r3, [r4, #0]
 8016478:	2e00      	cmp	r6, #0
 801647a:	d0f1      	beq.n	8016460 <rmw_validate_namespace_with_size+0x48>
 801647c:	9b01      	ldr	r3, [sp, #4]
 801647e:	6033      	str	r3, [r6, #0]
 8016480:	e7ee      	b.n	8016460 <rmw_validate_namespace_with_size+0x48>
 8016482:	2301      	movs	r3, #1
 8016484:	6023      	str	r3, [r4, #0]
 8016486:	e7f7      	b.n	8016478 <rmw_validate_namespace_with_size+0x60>
 8016488:	2302      	movs	r3, #2
 801648a:	6023      	str	r3, [r4, #0]
 801648c:	e7f4      	b.n	8016478 <rmw_validate_namespace_with_size+0x60>
 801648e:	2303      	movs	r3, #3
 8016490:	6023      	str	r3, [r4, #0]
 8016492:	e7f1      	b.n	8016478 <rmw_validate_namespace_with_size+0x60>
 8016494:	2304      	movs	r3, #4
 8016496:	6023      	str	r3, [r4, #0]
 8016498:	e7ee      	b.n	8016478 <rmw_validate_namespace_with_size+0x60>
 801649a:	2305      	movs	r3, #5
 801649c:	6023      	str	r3, [r4, #0]
 801649e:	e7eb      	b.n	8016478 <rmw_validate_namespace_with_size+0x60>
 80164a0:	4a03      	ldr	r2, [pc, #12]	; (80164b0 <rmw_validate_namespace_with_size+0x98>)
 80164a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80164a6:	a802      	add	r0, sp, #8
 80164a8:	f7ff ff2e 	bl	8016308 <rcutils_snprintf>
 80164ac:	2001      	movs	r0, #1
 80164ae:	e7d7      	b.n	8016460 <rmw_validate_namespace_with_size+0x48>
 80164b0:	0801e44c 	.word	0x0801e44c

080164b4 <rmw_validate_namespace>:
 80164b4:	b168      	cbz	r0, 80164d2 <rmw_validate_namespace+0x1e>
 80164b6:	b570      	push	{r4, r5, r6, lr}
 80164b8:	460d      	mov	r5, r1
 80164ba:	4616      	mov	r6, r2
 80164bc:	4604      	mov	r4, r0
 80164be:	f7e9 fe99 	bl	80001f4 <strlen>
 80164c2:	4633      	mov	r3, r6
 80164c4:	4601      	mov	r1, r0
 80164c6:	462a      	mov	r2, r5
 80164c8:	4620      	mov	r0, r4
 80164ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80164ce:	f7ff bfa3 	b.w	8016418 <rmw_validate_namespace_with_size>
 80164d2:	200b      	movs	r0, #11
 80164d4:	4770      	bx	lr
 80164d6:	bf00      	nop

080164d8 <rmw_namespace_validation_result_string>:
 80164d8:	2807      	cmp	r0, #7
 80164da:	bf9a      	itte	ls
 80164dc:	4b02      	ldrls	r3, [pc, #8]	; (80164e8 <rmw_namespace_validation_result_string+0x10>)
 80164de:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80164e2:	4802      	ldrhi	r0, [pc, #8]	; (80164ec <rmw_namespace_validation_result_string+0x14>)
 80164e4:	4770      	bx	lr
 80164e6:	bf00      	nop
 80164e8:	0801e644 	.word	0x0801e644
 80164ec:	0801e49c 	.word	0x0801e49c

080164f0 <rmw_validate_node_name>:
 80164f0:	2800      	cmp	r0, #0
 80164f2:	d03b      	beq.n	801656c <rmw_validate_node_name+0x7c>
 80164f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164f8:	460f      	mov	r7, r1
 80164fa:	2900      	cmp	r1, #0
 80164fc:	d038      	beq.n	8016570 <rmw_validate_node_name+0x80>
 80164fe:	4615      	mov	r5, r2
 8016500:	4604      	mov	r4, r0
 8016502:	f7e9 fe77 	bl	80001f4 <strlen>
 8016506:	b1e0      	cbz	r0, 8016542 <rmw_validate_node_name+0x52>
 8016508:	1e63      	subs	r3, r4, #1
 801650a:	eb03 0e00 	add.w	lr, r3, r0
 801650e:	f1c4 0c01 	rsb	ip, r4, #1
 8016512:	eb0c 0803 	add.w	r8, ip, r3
 8016516:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 801651a:	f1a6 0130 	sub.w	r1, r6, #48	; 0x30
 801651e:	f026 0220 	bic.w	r2, r6, #32
 8016522:	2909      	cmp	r1, #9
 8016524:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
 8016528:	d913      	bls.n	8016552 <rmw_validate_node_name+0x62>
 801652a:	2a19      	cmp	r2, #25
 801652c:	d911      	bls.n	8016552 <rmw_validate_node_name+0x62>
 801652e:	2e5f      	cmp	r6, #95	; 0x5f
 8016530:	d00f      	beq.n	8016552 <rmw_validate_node_name+0x62>
 8016532:	2302      	movs	r3, #2
 8016534:	603b      	str	r3, [r7, #0]
 8016536:	b10d      	cbz	r5, 801653c <rmw_validate_node_name+0x4c>
 8016538:	f8c5 8000 	str.w	r8, [r5]
 801653c:	2000      	movs	r0, #0
 801653e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016542:	2301      	movs	r3, #1
 8016544:	603b      	str	r3, [r7, #0]
 8016546:	2d00      	cmp	r5, #0
 8016548:	d0f8      	beq.n	801653c <rmw_validate_node_name+0x4c>
 801654a:	2000      	movs	r0, #0
 801654c:	6028      	str	r0, [r5, #0]
 801654e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016552:	4573      	cmp	r3, lr
 8016554:	d1dd      	bne.n	8016512 <rmw_validate_node_name+0x22>
 8016556:	7822      	ldrb	r2, [r4, #0]
 8016558:	4b0d      	ldr	r3, [pc, #52]	; (8016590 <rmw_validate_node_name+0xa0>)
 801655a:	5cd3      	ldrb	r3, [r2, r3]
 801655c:	f013 0304 	ands.w	r3, r3, #4
 8016560:	d110      	bne.n	8016584 <rmw_validate_node_name+0x94>
 8016562:	28ff      	cmp	r0, #255	; 0xff
 8016564:	d806      	bhi.n	8016574 <rmw_validate_node_name+0x84>
 8016566:	603b      	str	r3, [r7, #0]
 8016568:	4618      	mov	r0, r3
 801656a:	e7e8      	b.n	801653e <rmw_validate_node_name+0x4e>
 801656c:	200b      	movs	r0, #11
 801656e:	4770      	bx	lr
 8016570:	200b      	movs	r0, #11
 8016572:	e7e4      	b.n	801653e <rmw_validate_node_name+0x4e>
 8016574:	2204      	movs	r2, #4
 8016576:	603a      	str	r2, [r7, #0]
 8016578:	2d00      	cmp	r5, #0
 801657a:	d0df      	beq.n	801653c <rmw_validate_node_name+0x4c>
 801657c:	22fe      	movs	r2, #254	; 0xfe
 801657e:	4618      	mov	r0, r3
 8016580:	602a      	str	r2, [r5, #0]
 8016582:	e7dc      	b.n	801653e <rmw_validate_node_name+0x4e>
 8016584:	2303      	movs	r3, #3
 8016586:	603b      	str	r3, [r7, #0]
 8016588:	2d00      	cmp	r5, #0
 801658a:	d1de      	bne.n	801654a <rmw_validate_node_name+0x5a>
 801658c:	e7d6      	b.n	801653c <rmw_validate_node_name+0x4c>
 801658e:	bf00      	nop
 8016590:	0801e799 	.word	0x0801e799

08016594 <rmw_node_name_validation_result_string>:
 8016594:	2804      	cmp	r0, #4
 8016596:	bf9a      	itte	ls
 8016598:	4b02      	ldrls	r3, [pc, #8]	; (80165a4 <rmw_node_name_validation_result_string+0x10>)
 801659a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801659e:	4802      	ldrhi	r0, [pc, #8]	; (80165a8 <rmw_node_name_validation_result_string+0x14>)
 80165a0:	4770      	bx	lr
 80165a2:	bf00      	nop
 80165a4:	0801e750 	.word	0x0801e750
 80165a8:	0801e664 	.word	0x0801e664

080165ac <on_status>:
 80165ac:	b082      	sub	sp, #8
 80165ae:	b002      	add	sp, #8
 80165b0:	4770      	bx	lr
 80165b2:	bf00      	nop

080165b4 <on_topic>:
 80165b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165b8:	4a21      	ldr	r2, [pc, #132]	; (8016640 <on_topic+0x8c>)
 80165ba:	b094      	sub	sp, #80	; 0x50
 80165bc:	6812      	ldr	r2, [r2, #0]
 80165be:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80165c0:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80165c4:	9113      	str	r1, [sp, #76]	; 0x4c
 80165c6:	9312      	str	r3, [sp, #72]	; 0x48
 80165c8:	b3ba      	cbz	r2, 801663a <on_topic+0x86>
 80165ca:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80165ce:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80165d2:	e001      	b.n	80165d8 <on_topic+0x24>
 80165d4:	6892      	ldr	r2, [r2, #8]
 80165d6:	b382      	cbz	r2, 801663a <on_topic+0x86>
 80165d8:	68d4      	ldr	r4, [r2, #12]
 80165da:	8aa3      	ldrh	r3, [r4, #20]
 80165dc:	428b      	cmp	r3, r1
 80165de:	d1f9      	bne.n	80165d4 <on_topic+0x20>
 80165e0:	7da3      	ldrb	r3, [r4, #22]
 80165e2:	4283      	cmp	r3, r0
 80165e4:	d1f6      	bne.n	80165d4 <on_topic+0x20>
 80165e6:	2248      	movs	r2, #72	; 0x48
 80165e8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80165ec:	4668      	mov	r0, sp
 80165ee:	f002 fd55 	bl	801909c <memcpy>
 80165f2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 80165f6:	4620      	mov	r0, r4
 80165f8:	f7f9 fc30 	bl	800fe5c <rmw_uxrce_get_static_input_buffer_for_entity>
 80165fc:	4607      	mov	r7, r0
 80165fe:	b1e0      	cbz	r0, 801663a <on_topic+0x86>
 8016600:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8016604:	462a      	mov	r2, r5
 8016606:	4630      	mov	r0, r6
 8016608:	f108 0110 	add.w	r1, r8, #16
 801660c:	f000 fd74 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8016610:	b930      	cbnz	r0, 8016620 <on_topic+0x6c>
 8016612:	480c      	ldr	r0, [pc, #48]	; (8016644 <on_topic+0x90>)
 8016614:	4639      	mov	r1, r7
 8016616:	b014      	add	sp, #80	; 0x50
 8016618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801661c:	f000 b8ba 	b.w	8016794 <put_memory>
 8016620:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8016624:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8016628:	f000 fc90 	bl	8016f4c <rmw_uros_epoch_nanos>
 801662c:	f608 0218 	addw	r2, r8, #2072	; 0x818
 8016630:	2305      	movs	r3, #5
 8016632:	e9c2 0100 	strd	r0, r1, [r2]
 8016636:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801663a:	b014      	add	sp, #80	; 0x50
 801663c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016640:	2000d314 	.word	0x2000d314
 8016644:	2000a0a8 	.word	0x2000a0a8

08016648 <on_request>:
 8016648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801664c:	4822      	ldr	r0, [pc, #136]	; (80166d8 <on_request+0x90>)
 801664e:	b095      	sub	sp, #84	; 0x54
 8016650:	9113      	str	r1, [sp, #76]	; 0x4c
 8016652:	6801      	ldr	r1, [r0, #0]
 8016654:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8016656:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 801665a:	2900      	cmp	r1, #0
 801665c:	d039      	beq.n	80166d2 <on_request+0x8a>
 801665e:	461d      	mov	r5, r3
 8016660:	e001      	b.n	8016666 <on_request+0x1e>
 8016662:	6889      	ldr	r1, [r1, #8]
 8016664:	b3a9      	cbz	r1, 80166d2 <on_request+0x8a>
 8016666:	68cc      	ldr	r4, [r1, #12]
 8016668:	8b20      	ldrh	r0, [r4, #24]
 801666a:	4290      	cmp	r0, r2
 801666c:	d1f9      	bne.n	8016662 <on_request+0x1a>
 801666e:	2248      	movs	r2, #72	; 0x48
 8016670:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8016674:	4668      	mov	r0, sp
 8016676:	f002 fd11 	bl	801909c <memcpy>
 801667a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 801667e:	4620      	mov	r0, r4
 8016680:	f7f9 fbec 	bl	800fe5c <rmw_uxrce_get_static_input_buffer_for_entity>
 8016684:	4680      	mov	r8, r0
 8016686:	b320      	cbz	r0, 80166d2 <on_request+0x8a>
 8016688:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801668c:	4632      	mov	r2, r6
 801668e:	4638      	mov	r0, r7
 8016690:	f109 0110 	add.w	r1, r9, #16
 8016694:	f000 fd30 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 8016698:	b930      	cbnz	r0, 80166a8 <on_request+0x60>
 801669a:	4810      	ldr	r0, [pc, #64]	; (80166dc <on_request+0x94>)
 801669c:	4641      	mov	r1, r8
 801669e:	b015      	add	sp, #84	; 0x54
 80166a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166a4:	f000 b876 	b.w	8016794 <put_memory>
 80166a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80166aa:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 80166ae:	f609 0428 	addw	r4, r9, #2088	; 0x828
 80166b2:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 80166b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80166b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80166bc:	e884 0003 	stmia.w	r4, {r0, r1}
 80166c0:	f000 fc44 	bl	8016f4c <rmw_uros_epoch_nanos>
 80166c4:	f609 0218 	addw	r2, r9, #2072	; 0x818
 80166c8:	2303      	movs	r3, #3
 80166ca:	e9c2 0100 	strd	r0, r1, [r2]
 80166ce:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 80166d2:	b015      	add	sp, #84	; 0x54
 80166d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166d8:	2000d304 	.word	0x2000d304
 80166dc:	2000a0a8 	.word	0x2000a0a8

080166e0 <on_reply>:
 80166e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80166e4:	4821      	ldr	r0, [pc, #132]	; (801676c <on_reply+0x8c>)
 80166e6:	b095      	sub	sp, #84	; 0x54
 80166e8:	9113      	str	r1, [sp, #76]	; 0x4c
 80166ea:	6801      	ldr	r1, [r0, #0]
 80166ec:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80166ee:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 80166f2:	b3b9      	cbz	r1, 8016764 <on_reply+0x84>
 80166f4:	461d      	mov	r5, r3
 80166f6:	e001      	b.n	80166fc <on_reply+0x1c>
 80166f8:	6889      	ldr	r1, [r1, #8]
 80166fa:	b399      	cbz	r1, 8016764 <on_reply+0x84>
 80166fc:	68cc      	ldr	r4, [r1, #12]
 80166fe:	8b20      	ldrh	r0, [r4, #24]
 8016700:	4290      	cmp	r0, r2
 8016702:	d1f9      	bne.n	80166f8 <on_reply+0x18>
 8016704:	2248      	movs	r2, #72	; 0x48
 8016706:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801670a:	4668      	mov	r0, sp
 801670c:	f002 fcc6 	bl	801909c <memcpy>
 8016710:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8016714:	4620      	mov	r0, r4
 8016716:	f7f9 fba1 	bl	800fe5c <rmw_uxrce_get_static_input_buffer_for_entity>
 801671a:	4680      	mov	r8, r0
 801671c:	b310      	cbz	r0, 8016764 <on_reply+0x84>
 801671e:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8016722:	4632      	mov	r2, r6
 8016724:	4638      	mov	r0, r7
 8016726:	f109 0110 	add.w	r1, r9, #16
 801672a:	f000 fce5 	bl	80170f8 <ucdr_deserialize_array_uint8_t>
 801672e:	b930      	cbnz	r0, 801673e <on_reply+0x5e>
 8016730:	480f      	ldr	r0, [pc, #60]	; (8016770 <on_reply+0x90>)
 8016732:	4641      	mov	r1, r8
 8016734:	b015      	add	sp, #84	; 0x54
 8016736:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801673a:	f000 b82b 	b.w	8016794 <put_memory>
 801673e:	b2aa      	uxth	r2, r5
 8016740:	2300      	movs	r3, #0
 8016742:	f609 0128 	addw	r1, r9, #2088	; 0x828
 8016746:	f8c9 4814 	str.w	r4, [r9, #2068]	; 0x814
 801674a:	f8c9 6810 	str.w	r6, [r9, #2064]	; 0x810
 801674e:	e9c1 2300 	strd	r2, r3, [r1]
 8016752:	f000 fbfb 	bl	8016f4c <rmw_uros_epoch_nanos>
 8016756:	f609 0218 	addw	r2, r9, #2072	; 0x818
 801675a:	2304      	movs	r3, #4
 801675c:	e9c2 0100 	strd	r0, r1, [r2]
 8016760:	f889 3820 	strb.w	r3, [r9, #2080]	; 0x820
 8016764:	b015      	add	sp, #84	; 0x54
 8016766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801676a:	bf00      	nop
 801676c:	2000a938 	.word	0x2000a938
 8016770:	2000a0a8 	.word	0x2000a0a8

08016774 <get_memory>:
 8016774:	4603      	mov	r3, r0
 8016776:	6840      	ldr	r0, [r0, #4]
 8016778:	b158      	cbz	r0, 8016792 <get_memory+0x1e>
 801677a:	6882      	ldr	r2, [r0, #8]
 801677c:	605a      	str	r2, [r3, #4]
 801677e:	b10a      	cbz	r2, 8016784 <get_memory+0x10>
 8016780:	2100      	movs	r1, #0
 8016782:	6051      	str	r1, [r2, #4]
 8016784:	681a      	ldr	r2, [r3, #0]
 8016786:	6082      	str	r2, [r0, #8]
 8016788:	b102      	cbz	r2, 801678c <get_memory+0x18>
 801678a:	6050      	str	r0, [r2, #4]
 801678c:	2200      	movs	r2, #0
 801678e:	6042      	str	r2, [r0, #4]
 8016790:	6018      	str	r0, [r3, #0]
 8016792:	4770      	bx	lr

08016794 <put_memory>:
 8016794:	684b      	ldr	r3, [r1, #4]
 8016796:	b10b      	cbz	r3, 801679c <put_memory+0x8>
 8016798:	688a      	ldr	r2, [r1, #8]
 801679a:	609a      	str	r2, [r3, #8]
 801679c:	688a      	ldr	r2, [r1, #8]
 801679e:	b102      	cbz	r2, 80167a2 <put_memory+0xe>
 80167a0:	6053      	str	r3, [r2, #4]
 80167a2:	6803      	ldr	r3, [r0, #0]
 80167a4:	428b      	cmp	r3, r1
 80167a6:	6843      	ldr	r3, [r0, #4]
 80167a8:	bf08      	it	eq
 80167aa:	6002      	streq	r2, [r0, #0]
 80167ac:	608b      	str	r3, [r1, #8]
 80167ae:	b103      	cbz	r3, 80167b2 <put_memory+0x1e>
 80167b0:	6059      	str	r1, [r3, #4]
 80167b2:	2300      	movs	r3, #0
 80167b4:	604b      	str	r3, [r1, #4]
 80167b6:	6041      	str	r1, [r0, #4]
 80167b8:	4770      	bx	lr
 80167ba:	bf00      	nop

080167bc <rmw_destroy_client>:
 80167bc:	b570      	push	{r4, r5, r6, lr}
 80167be:	b128      	cbz	r0, 80167cc <rmw_destroy_client+0x10>
 80167c0:	4604      	mov	r4, r0
 80167c2:	6800      	ldr	r0, [r0, #0]
 80167c4:	460d      	mov	r5, r1
 80167c6:	f7f9 fcb7 	bl	8010138 <is_uxrce_rmw_identifier_valid>
 80167ca:	b910      	cbnz	r0, 80167d2 <rmw_destroy_client+0x16>
 80167cc:	2401      	movs	r4, #1
 80167ce:	4620      	mov	r0, r4
 80167d0:	bd70      	pop	{r4, r5, r6, pc}
 80167d2:	6863      	ldr	r3, [r4, #4]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d0f9      	beq.n	80167cc <rmw_destroy_client+0x10>
 80167d8:	2d00      	cmp	r5, #0
 80167da:	d0f7      	beq.n	80167cc <rmw_destroy_client+0x10>
 80167dc:	6828      	ldr	r0, [r5, #0]
 80167de:	f7f9 fcab 	bl	8010138 <is_uxrce_rmw_identifier_valid>
 80167e2:	2800      	cmp	r0, #0
 80167e4:	d0f2      	beq.n	80167cc <rmw_destroy_client+0x10>
 80167e6:	686e      	ldr	r6, [r5, #4]
 80167e8:	2e00      	cmp	r6, #0
 80167ea:	d0ef      	beq.n	80167cc <rmw_destroy_client+0x10>
 80167ec:	6864      	ldr	r4, [r4, #4]
 80167ee:	6932      	ldr	r2, [r6, #16]
 80167f0:	6920      	ldr	r0, [r4, #16]
 80167f2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80167f6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80167fa:	6819      	ldr	r1, [r3, #0]
 80167fc:	f7fa f962 	bl	8010ac4 <uxr_buffer_cancel_data>
 8016800:	4602      	mov	r2, r0
 8016802:	6920      	ldr	r0, [r4, #16]
 8016804:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016808:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801680c:	f7f9 fc14 	bl	8010038 <run_xrce_session>
 8016810:	6920      	ldr	r0, [r4, #16]
 8016812:	6932      	ldr	r2, [r6, #16]
 8016814:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016818:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801681c:	6819      	ldr	r1, [r3, #0]
 801681e:	f7f9 fe27 	bl	8010470 <uxr_buffer_delete_entity>
 8016822:	4602      	mov	r2, r0
 8016824:	6920      	ldr	r0, [r4, #16]
 8016826:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801682a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801682e:	f7f9 fc03 	bl	8010038 <run_xrce_session>
 8016832:	2800      	cmp	r0, #0
 8016834:	4628      	mov	r0, r5
 8016836:	bf14      	ite	ne
 8016838:	2400      	movne	r4, #0
 801683a:	2402      	moveq	r4, #2
 801683c:	f7f9 faec 	bl	800fe18 <rmw_uxrce_fini_client_memory>
 8016840:	e7c5      	b.n	80167ce <rmw_destroy_client+0x12>
 8016842:	bf00      	nop

08016844 <rmw_get_implementation_identifier>:
 8016844:	4b01      	ldr	r3, [pc, #4]	; (801684c <rmw_get_implementation_identifier+0x8>)
 8016846:	6818      	ldr	r0, [r3, #0]
 8016848:	4770      	bx	lr
 801684a:	bf00      	nop
 801684c:	0801e77c 	.word	0x0801e77c

08016850 <create_topic>:
 8016850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016854:	4605      	mov	r5, r0
 8016856:	b084      	sub	sp, #16
 8016858:	482b      	ldr	r0, [pc, #172]	; (8016908 <create_topic+0xb8>)
 801685a:	460f      	mov	r7, r1
 801685c:	4616      	mov	r6, r2
 801685e:	f7ff ff89 	bl	8016774 <get_memory>
 8016862:	4604      	mov	r4, r0
 8016864:	2800      	cmp	r0, #0
 8016866:	d036      	beq.n	80168d6 <create_topic+0x86>
 8016868:	692a      	ldr	r2, [r5, #16]
 801686a:	68c4      	ldr	r4, [r0, #12]
 801686c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8016910 <create_topic+0xc0>
 8016870:	61a5      	str	r5, [r4, #24]
 8016872:	f241 5396 	movw	r3, #5526	; 0x1596
 8016876:	6166      	str	r6, [r4, #20]
 8016878:	5ad0      	ldrh	r0, [r2, r3]
 801687a:	1c41      	adds	r1, r0, #1
 801687c:	52d1      	strh	r1, [r2, r3]
 801687e:	2102      	movs	r1, #2
 8016880:	f7fa f8b8 	bl	80109f4 <uxr_object_id>
 8016884:	4641      	mov	r1, r8
 8016886:	6120      	str	r0, [r4, #16]
 8016888:	223c      	movs	r2, #60	; 0x3c
 801688a:	4638      	mov	r0, r7
 801688c:	f7f9 fc3a 	bl	8010104 <generate_topic_name>
 8016890:	4607      	mov	r7, r0
 8016892:	b320      	cbz	r0, 80168de <create_topic+0x8e>
 8016894:	4f1d      	ldr	r7, [pc, #116]	; (801690c <create_topic+0xbc>)
 8016896:	4630      	mov	r0, r6
 8016898:	4639      	mov	r1, r7
 801689a:	2264      	movs	r2, #100	; 0x64
 801689c:	f7f9 fc02 	bl	80100a4 <generate_type_name>
 80168a0:	4606      	mov	r6, r0
 80168a2:	b320      	cbz	r0, 80168ee <create_topic+0x9e>
 80168a4:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 80168a8:	2106      	movs	r1, #6
 80168aa:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80168ae:	9701      	str	r7, [sp, #4]
 80168b0:	f8cd 8000 	str.w	r8, [sp]
 80168b4:	9102      	str	r1, [sp, #8]
 80168b6:	6811      	ldr	r1, [r2, #0]
 80168b8:	6922      	ldr	r2, [r4, #16]
 80168ba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80168be:	f7f9 fe55 	bl	801056c <uxr_buffer_create_topic_bin>
 80168c2:	4602      	mov	r2, r0
 80168c4:	6928      	ldr	r0, [r5, #16]
 80168c6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80168ca:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80168ce:	f7f9 fbb3 	bl	8010038 <run_xrce_session>
 80168d2:	4605      	mov	r5, r0
 80168d4:	b198      	cbz	r0, 80168fe <create_topic+0xae>
 80168d6:	4620      	mov	r0, r4
 80168d8:	b004      	add	sp, #16
 80168da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168de:	4620      	mov	r0, r4
 80168e0:	f7f9 fab0 	bl	800fe44 <rmw_uxrce_fini_topic_memory>
 80168e4:	463c      	mov	r4, r7
 80168e6:	4620      	mov	r0, r4
 80168e8:	b004      	add	sp, #16
 80168ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168ee:	4620      	mov	r0, r4
 80168f0:	f7f9 faa8 	bl	800fe44 <rmw_uxrce_fini_topic_memory>
 80168f4:	4634      	mov	r4, r6
 80168f6:	4620      	mov	r0, r4
 80168f8:	b004      	add	sp, #16
 80168fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168fe:	4620      	mov	r0, r4
 8016900:	f7f9 faa0 	bl	800fe44 <rmw_uxrce_fini_topic_memory>
 8016904:	462c      	mov	r4, r5
 8016906:	e7e6      	b.n	80168d6 <create_topic+0x86>
 8016908:	2000d240 	.word	0x2000d240
 801690c:	20009fe4 	.word	0x20009fe4
 8016910:	20009fa8 	.word	0x20009fa8

08016914 <destroy_topic>:
 8016914:	b538      	push	{r3, r4, r5, lr}
 8016916:	6985      	ldr	r5, [r0, #24]
 8016918:	b1d5      	cbz	r5, 8016950 <destroy_topic+0x3c>
 801691a:	4604      	mov	r4, r0
 801691c:	6928      	ldr	r0, [r5, #16]
 801691e:	6922      	ldr	r2, [r4, #16]
 8016920:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016924:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016928:	6819      	ldr	r1, [r3, #0]
 801692a:	f7f9 fda1 	bl	8010470 <uxr_buffer_delete_entity>
 801692e:	4602      	mov	r2, r0
 8016930:	6928      	ldr	r0, [r5, #16]
 8016932:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016936:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801693a:	f7f9 fb7d 	bl	8010038 <run_xrce_session>
 801693e:	2800      	cmp	r0, #0
 8016940:	4620      	mov	r0, r4
 8016942:	bf14      	ite	ne
 8016944:	2400      	movne	r4, #0
 8016946:	2402      	moveq	r4, #2
 8016948:	f7f9 fa7c 	bl	800fe44 <rmw_uxrce_fini_topic_memory>
 801694c:	4620      	mov	r0, r4
 801694e:	bd38      	pop	{r3, r4, r5, pc}
 8016950:	2401      	movs	r4, #1
 8016952:	4620      	mov	r0, r4
 8016954:	bd38      	pop	{r3, r4, r5, pc}
 8016956:	bf00      	nop

08016958 <rmw_take_request>:
 8016958:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801695c:	4605      	mov	r5, r0
 801695e:	6800      	ldr	r0, [r0, #0]
 8016960:	b089      	sub	sp, #36	; 0x24
 8016962:	460c      	mov	r4, r1
 8016964:	4690      	mov	r8, r2
 8016966:	461e      	mov	r6, r3
 8016968:	b128      	cbz	r0, 8016976 <rmw_take_request+0x1e>
 801696a:	4b28      	ldr	r3, [pc, #160]	; (8016a0c <rmw_take_request+0xb4>)
 801696c:	6819      	ldr	r1, [r3, #0]
 801696e:	f7e9 fc37 	bl	80001e0 <strcmp>
 8016972:	2800      	cmp	r0, #0
 8016974:	d146      	bne.n	8016a04 <rmw_take_request+0xac>
 8016976:	b10e      	cbz	r6, 801697c <rmw_take_request+0x24>
 8016978:	2300      	movs	r3, #0
 801697a:	7033      	strb	r3, [r6, #0]
 801697c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016980:	f7f9 fae2 	bl	800ff48 <rmw_uxrce_clean_expired_static_input_buffer>
 8016984:	4648      	mov	r0, r9
 8016986:	f7f9 fab5 	bl	800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801698a:	4607      	mov	r7, r0
 801698c:	b3b0      	cbz	r0, 80169fc <rmw_take_request+0xa4>
 801698e:	68c5      	ldr	r5, [r0, #12]
 8016990:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8016994:	f8d5 183c 	ldr.w	r1, [r5, #2108]	; 0x83c
 8016998:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 801699c:	7423      	strb	r3, [r4, #16]
 801699e:	e9c4 1208 	strd	r1, r2, [r4, #32]
 80169a2:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 80169a6:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 80169aa:	74e2      	strb	r2, [r4, #19]
 80169ac:	f8a4 3011 	strh.w	r3, [r4, #17]
 80169b0:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 80169b4:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 80169b8:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 80169bc:	61e1      	str	r1, [r4, #28]
 80169be:	6162      	str	r2, [r4, #20]
 80169c0:	61a3      	str	r3, [r4, #24]
 80169c2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80169c6:	689b      	ldr	r3, [r3, #8]
 80169c8:	4798      	blx	r3
 80169ca:	6844      	ldr	r4, [r0, #4]
 80169cc:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 80169d0:	f105 0110 	add.w	r1, r5, #16
 80169d4:	4668      	mov	r0, sp
 80169d6:	f7f9 fc83 	bl	80102e0 <ucdr_init_buffer>
 80169da:	68e3      	ldr	r3, [r4, #12]
 80169dc:	4641      	mov	r1, r8
 80169de:	4668      	mov	r0, sp
 80169e0:	4798      	blx	r3
 80169e2:	4639      	mov	r1, r7
 80169e4:	4604      	mov	r4, r0
 80169e6:	480a      	ldr	r0, [pc, #40]	; (8016a10 <rmw_take_request+0xb8>)
 80169e8:	f7ff fed4 	bl	8016794 <put_memory>
 80169ec:	b106      	cbz	r6, 80169f0 <rmw_take_request+0x98>
 80169ee:	7034      	strb	r4, [r6, #0]
 80169f0:	f084 0001 	eor.w	r0, r4, #1
 80169f4:	b2c0      	uxtb	r0, r0
 80169f6:	b009      	add	sp, #36	; 0x24
 80169f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169fc:	2001      	movs	r0, #1
 80169fe:	b009      	add	sp, #36	; 0x24
 8016a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a04:	200c      	movs	r0, #12
 8016a06:	b009      	add	sp, #36	; 0x24
 8016a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a0c:	0801e77c 	.word	0x0801e77c
 8016a10:	2000a0a8 	.word	0x2000a0a8

08016a14 <rmw_send_response>:
 8016a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a16:	4605      	mov	r5, r0
 8016a18:	6800      	ldr	r0, [r0, #0]
 8016a1a:	b091      	sub	sp, #68	; 0x44
 8016a1c:	460c      	mov	r4, r1
 8016a1e:	4617      	mov	r7, r2
 8016a20:	b128      	cbz	r0, 8016a2e <rmw_send_response+0x1a>
 8016a22:	4b2a      	ldr	r3, [pc, #168]	; (8016acc <rmw_send_response+0xb8>)
 8016a24:	6819      	ldr	r1, [r3, #0]
 8016a26:	f7e9 fbdb 	bl	80001e0 <strcmp>
 8016a2a:	2800      	cmp	r0, #0
 8016a2c:	d143      	bne.n	8016ab6 <rmw_send_response+0xa2>
 8016a2e:	4623      	mov	r3, r4
 8016a30:	4626      	mov	r6, r4
 8016a32:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8016a36:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 8016a3a:	6859      	ldr	r1, [r3, #4]
 8016a3c:	686d      	ldr	r5, [r5, #4]
 8016a3e:	689a      	ldr	r2, [r3, #8]
 8016a40:	78b3      	ldrb	r3, [r6, #2]
 8016a42:	f894 c000 	ldrb.w	ip, [r4]
 8016a46:	6966      	ldr	r6, [r4, #20]
 8016a48:	f88d 3016 	strb.w	r3, [sp, #22]
 8016a4c:	ab02      	add	r3, sp, #8
 8016a4e:	f8ad e014 	strh.w	lr, [sp, #20]
 8016a52:	f88d c017 	strb.w	ip, [sp, #23]
 8016a56:	9606      	str	r6, [sp, #24]
 8016a58:	c307      	stmia	r3!, {r0, r1, r2}
 8016a5a:	696b      	ldr	r3, [r5, #20]
 8016a5c:	6922      	ldr	r2, [r4, #16]
 8016a5e:	9207      	str	r2, [sp, #28]
 8016a60:	68db      	ldr	r3, [r3, #12]
 8016a62:	6fae      	ldr	r6, [r5, #120]	; 0x78
 8016a64:	4798      	blx	r3
 8016a66:	4603      	mov	r3, r0
 8016a68:	4638      	mov	r0, r7
 8016a6a:	685c      	ldr	r4, [r3, #4]
 8016a6c:	6923      	ldr	r3, [r4, #16]
 8016a6e:	4798      	blx	r3
 8016a70:	6933      	ldr	r3, [r6, #16]
 8016a72:	3018      	adds	r0, #24
 8016a74:	9000      	str	r0, [sp, #0]
 8016a76:	692a      	ldr	r2, [r5, #16]
 8016a78:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8016a7a:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8016a7e:	ab08      	add	r3, sp, #32
 8016a80:	f7fc f86c 	bl	8012b5c <uxr_prepare_output_stream>
 8016a84:	b910      	cbnz	r0, 8016a8c <rmw_send_response+0x78>
 8016a86:	2001      	movs	r0, #1
 8016a88:	b011      	add	sp, #68	; 0x44
 8016a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a8c:	a902      	add	r1, sp, #8
 8016a8e:	a808      	add	r0, sp, #32
 8016a90:	f7fd f982 	bl	8013d98 <uxr_serialize_SampleIdentity>
 8016a94:	68a3      	ldr	r3, [r4, #8]
 8016a96:	a908      	add	r1, sp, #32
 8016a98:	4638      	mov	r0, r7
 8016a9a:	4798      	blx	r3
 8016a9c:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8016aa0:	6930      	ldr	r0, [r6, #16]
 8016aa2:	2b01      	cmp	r3, #1
 8016aa4:	d00a      	beq.n	8016abc <rmw_send_response+0xa8>
 8016aa6:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8016aa8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016aac:	f7fa fdd0 	bl	8011650 <uxr_run_session_until_confirm_delivery>
 8016ab0:	2000      	movs	r0, #0
 8016ab2:	b011      	add	sp, #68	; 0x44
 8016ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ab6:	200c      	movs	r0, #12
 8016ab8:	b011      	add	sp, #68	; 0x44
 8016aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016abc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016ac0:	f7fa fa0a 	bl	8010ed8 <uxr_flash_output_streams>
 8016ac4:	2000      	movs	r0, #0
 8016ac6:	b011      	add	sp, #68	; 0x44
 8016ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016aca:	bf00      	nop
 8016acc:	0801e77c 	.word	0x0801e77c

08016ad0 <rmw_take_response>:
 8016ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ad4:	4604      	mov	r4, r0
 8016ad6:	6800      	ldr	r0, [r0, #0]
 8016ad8:	b089      	sub	sp, #36	; 0x24
 8016ada:	4688      	mov	r8, r1
 8016adc:	4617      	mov	r7, r2
 8016ade:	461d      	mov	r5, r3
 8016ae0:	b120      	cbz	r0, 8016aec <rmw_take_response+0x1c>
 8016ae2:	4b1f      	ldr	r3, [pc, #124]	; (8016b60 <rmw_take_response+0x90>)
 8016ae4:	6819      	ldr	r1, [r3, #0]
 8016ae6:	f7e9 fb7b 	bl	80001e0 <strcmp>
 8016aea:	bb88      	cbnz	r0, 8016b50 <rmw_take_response+0x80>
 8016aec:	b10d      	cbz	r5, 8016af2 <rmw_take_response+0x22>
 8016aee:	2300      	movs	r3, #0
 8016af0:	702b      	strb	r3, [r5, #0]
 8016af2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016af6:	f7f9 fa27 	bl	800ff48 <rmw_uxrce_clean_expired_static_input_buffer>
 8016afa:	4648      	mov	r0, r9
 8016afc:	f7f9 f9fa 	bl	800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016b00:	4606      	mov	r6, r0
 8016b02:	b348      	cbz	r0, 8016b58 <rmw_take_response+0x88>
 8016b04:	68c4      	ldr	r4, [r0, #12]
 8016b06:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8016b0a:	f604 0328 	addw	r3, r4, #2088	; 0x828
 8016b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b12:	68c9      	ldr	r1, [r1, #12]
 8016b14:	e9c8 2308 	strd	r2, r3, [r8, #32]
 8016b18:	4788      	blx	r1
 8016b1a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016b1e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8016b22:	f104 0110 	add.w	r1, r4, #16
 8016b26:	4668      	mov	r0, sp
 8016b28:	f7f9 fbda 	bl	80102e0 <ucdr_init_buffer>
 8016b2c:	4639      	mov	r1, r7
 8016b2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016b32:	4668      	mov	r0, sp
 8016b34:	4798      	blx	r3
 8016b36:	4631      	mov	r1, r6
 8016b38:	4604      	mov	r4, r0
 8016b3a:	480a      	ldr	r0, [pc, #40]	; (8016b64 <rmw_take_response+0x94>)
 8016b3c:	f7ff fe2a 	bl	8016794 <put_memory>
 8016b40:	b105      	cbz	r5, 8016b44 <rmw_take_response+0x74>
 8016b42:	702c      	strb	r4, [r5, #0]
 8016b44:	f084 0001 	eor.w	r0, r4, #1
 8016b48:	b2c0      	uxtb	r0, r0
 8016b4a:	b009      	add	sp, #36	; 0x24
 8016b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b50:	200c      	movs	r0, #12
 8016b52:	b009      	add	sp, #36	; 0x24
 8016b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b58:	2001      	movs	r0, #1
 8016b5a:	b009      	add	sp, #36	; 0x24
 8016b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b60:	0801e77c 	.word	0x0801e77c
 8016b64:	2000a0a8 	.word	0x2000a0a8

08016b68 <rmw_take_with_info>:
 8016b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b6a:	4604      	mov	r4, r0
 8016b6c:	6800      	ldr	r0, [r0, #0]
 8016b6e:	b089      	sub	sp, #36	; 0x24
 8016b70:	460f      	mov	r7, r1
 8016b72:	4615      	mov	r5, r2
 8016b74:	b128      	cbz	r0, 8016b82 <rmw_take_with_info+0x1a>
 8016b76:	4b24      	ldr	r3, [pc, #144]	; (8016c08 <rmw_take_with_info+0xa0>)
 8016b78:	6819      	ldr	r1, [r3, #0]
 8016b7a:	f7e9 fb31 	bl	80001e0 <strcmp>
 8016b7e:	2800      	cmp	r0, #0
 8016b80:	d13e      	bne.n	8016c00 <rmw_take_with_info+0x98>
 8016b82:	b305      	cbz	r5, 8016bc6 <rmw_take_with_info+0x5e>
 8016b84:	6864      	ldr	r4, [r4, #4]
 8016b86:	2300      	movs	r3, #0
 8016b88:	702b      	strb	r3, [r5, #0]
 8016b8a:	f7f9 f9dd 	bl	800ff48 <rmw_uxrce_clean_expired_static_input_buffer>
 8016b8e:	4620      	mov	r0, r4
 8016b90:	f7f9 f9b0 	bl	800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016b94:	4606      	mov	r6, r0
 8016b96:	b1f0      	cbz	r0, 8016bd6 <rmw_take_with_info+0x6e>
 8016b98:	68c1      	ldr	r1, [r0, #12]
 8016b9a:	4668      	mov	r0, sp
 8016b9c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8016ba0:	3110      	adds	r1, #16
 8016ba2:	f7f9 fb9d 	bl	80102e0 <ucdr_init_buffer>
 8016ba6:	69a3      	ldr	r3, [r4, #24]
 8016ba8:	4639      	mov	r1, r7
 8016baa:	68db      	ldr	r3, [r3, #12]
 8016bac:	4668      	mov	r0, sp
 8016bae:	4798      	blx	r3
 8016bb0:	4631      	mov	r1, r6
 8016bb2:	4604      	mov	r4, r0
 8016bb4:	4815      	ldr	r0, [pc, #84]	; (8016c0c <rmw_take_with_info+0xa4>)
 8016bb6:	f7ff fded 	bl	8016794 <put_memory>
 8016bba:	702c      	strb	r4, [r5, #0]
 8016bbc:	f084 0001 	eor.w	r0, r4, #1
 8016bc0:	b2c0      	uxtb	r0, r0
 8016bc2:	b009      	add	sp, #36	; 0x24
 8016bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bc6:	6864      	ldr	r4, [r4, #4]
 8016bc8:	f7f9 f9be 	bl	800ff48 <rmw_uxrce_clean_expired_static_input_buffer>
 8016bcc:	4620      	mov	r0, r4
 8016bce:	f7f9 f991 	bl	800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016bd2:	4605      	mov	r5, r0
 8016bd4:	b910      	cbnz	r0, 8016bdc <rmw_take_with_info+0x74>
 8016bd6:	2001      	movs	r0, #1
 8016bd8:	b009      	add	sp, #36	; 0x24
 8016bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bdc:	68e9      	ldr	r1, [r5, #12]
 8016bde:	4668      	mov	r0, sp
 8016be0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8016be4:	3110      	adds	r1, #16
 8016be6:	f7f9 fb7b 	bl	80102e0 <ucdr_init_buffer>
 8016bea:	69a3      	ldr	r3, [r4, #24]
 8016bec:	4639      	mov	r1, r7
 8016bee:	68db      	ldr	r3, [r3, #12]
 8016bf0:	4668      	mov	r0, sp
 8016bf2:	4798      	blx	r3
 8016bf4:	4629      	mov	r1, r5
 8016bf6:	4604      	mov	r4, r0
 8016bf8:	4804      	ldr	r0, [pc, #16]	; (8016c0c <rmw_take_with_info+0xa4>)
 8016bfa:	f7ff fdcb 	bl	8016794 <put_memory>
 8016bfe:	e7dd      	b.n	8016bbc <rmw_take_with_info+0x54>
 8016c00:	200c      	movs	r0, #12
 8016c02:	b009      	add	sp, #36	; 0x24
 8016c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016c06:	bf00      	nop
 8016c08:	0801e77c 	.word	0x0801e77c
 8016c0c:	2000a0a8 	.word	0x2000a0a8

08016c10 <rmw_wait>:
 8016c10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c14:	460f      	mov	r7, r1
 8016c16:	4606      	mov	r6, r0
 8016c18:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016c1a:	469a      	mov	sl, r3
 8016c1c:	4615      	mov	r5, r2
 8016c1e:	2a00      	cmp	r2, #0
 8016c20:	f000 8122 	beq.w	8016e68 <rmw_wait+0x258>
 8016c24:	2900      	cmp	r1, #0
 8016c26:	f000 812a 	beq.w	8016e7e <rmw_wait+0x26e>
 8016c2a:	e9d1 2300 	ldrd	r2, r3, [r1]
 8016c2e:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8016c32:	015c      	lsls	r4, r3, #5
 8016c34:	ebbb 0b02 	subs.w	fp, fp, r2
 8016c38:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8016c3c:	eb64 0403 	sbc.w	r4, r4, r3
 8016c40:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8016c44:	00a4      	lsls	r4, r4, #2
 8016c46:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8016c4a:	eb10 0b02 	adds.w	fp, r0, r2
 8016c4e:	eb43 0404 	adc.w	r4, r3, r4
 8016c52:	4aad      	ldr	r2, [pc, #692]	; (8016f08 <rmw_wait+0x2f8>)
 8016c54:	2300      	movs	r3, #0
 8016c56:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8016c5a:	f7ea f87d 	bl	8000d58 <__aeabi_uldivmod>
 8016c5e:	00e4      	lsls	r4, r4, #3
 8016c60:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8016c64:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8016c68:	eb1b 0800 	adds.w	r8, fp, r0
 8016c6c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8016c70:	eb44 0901 	adc.w	r9, r4, r1
 8016c74:	2300      	movs	r3, #0
 8016c76:	4542      	cmp	r2, r8
 8016c78:	eb73 0109 	sbcs.w	r1, r3, r9
 8016c7c:	f2c0 80f2 	blt.w	8016e64 <rmw_wait+0x254>
 8016c80:	f7f9 f962 	bl	800ff48 <rmw_uxrce_clean_expired_static_input_buffer>
 8016c84:	4ba1      	ldr	r3, [pc, #644]	; (8016f0c <rmw_wait+0x2fc>)
 8016c86:	681c      	ldr	r4, [r3, #0]
 8016c88:	b144      	cbz	r4, 8016c9c <rmw_wait+0x8c>
 8016c8a:	4623      	mov	r3, r4
 8016c8c:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8016c90:	2100      	movs	r1, #0
 8016c92:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8016c96:	5411      	strb	r1, [r2, r0]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d1fa      	bne.n	8016c92 <rmw_wait+0x82>
 8016c9c:	b185      	cbz	r5, 8016cc0 <rmw_wait+0xb0>
 8016c9e:	6829      	ldr	r1, [r5, #0]
 8016ca0:	b171      	cbz	r1, 8016cc0 <rmw_wait+0xb0>
 8016ca2:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8016cac:	2001      	movs	r0, #1
 8016cae:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8016cb2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8016cb4:	3301      	adds	r3, #1
 8016cb6:	6912      	ldr	r2, [r2, #16]
 8016cb8:	4299      	cmp	r1, r3
 8016cba:	f802 000c 	strb.w	r0, [r2, ip]
 8016cbe:	d1f6      	bne.n	8016cae <rmw_wait+0x9e>
 8016cc0:	f1ba 0f00 	cmp.w	sl, #0
 8016cc4:	d011      	beq.n	8016cea <rmw_wait+0xda>
 8016cc6:	f8da 1000 	ldr.w	r1, [sl]
 8016cca:	b171      	cbz	r1, 8016cea <rmw_wait+0xda>
 8016ccc:	f8da e004 	ldr.w	lr, [sl, #4]
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8016cd6:	2001      	movs	r0, #1
 8016cd8:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8016cdc:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8016cde:	3301      	adds	r3, #1
 8016ce0:	6912      	ldr	r2, [r2, #16]
 8016ce2:	4299      	cmp	r1, r3
 8016ce4:	f802 000c 	strb.w	r0, [r2, ip]
 8016ce8:	d1f6      	bne.n	8016cd8 <rmw_wait+0xc8>
 8016cea:	b186      	cbz	r6, 8016d0e <rmw_wait+0xfe>
 8016cec:	6831      	ldr	r1, [r6, #0]
 8016cee:	b171      	cbz	r1, 8016d0e <rmw_wait+0xfe>
 8016cf0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	f241 5ca4 	movw	ip, #5540	; 0x15a4
 8016cfa:	2001      	movs	r0, #1
 8016cfc:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8016d00:	6a12      	ldr	r2, [r2, #32]
 8016d02:	3301      	adds	r3, #1
 8016d04:	6912      	ldr	r2, [r2, #16]
 8016d06:	4299      	cmp	r1, r3
 8016d08:	f802 000c 	strb.w	r0, [r2, ip]
 8016d0c:	d1f6      	bne.n	8016cfc <rmw_wait+0xec>
 8016d0e:	b34c      	cbz	r4, 8016d64 <rmw_wait+0x154>
 8016d10:	4622      	mov	r2, r4
 8016d12:	2300      	movs	r3, #0
 8016d14:	f241 50a4 	movw	r0, #5540	; 0x15a4
 8016d18:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8016d1c:	5c09      	ldrb	r1, [r1, r0]
 8016d1e:	440b      	add	r3, r1
 8016d20:	b2db      	uxtb	r3, r3
 8016d22:	2a00      	cmp	r2, #0
 8016d24:	d1f8      	bne.n	8016d18 <rmw_wait+0x108>
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	f000 8082 	beq.w	8016e30 <rmw_wait+0x220>
 8016d2c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8016d30:	d00d      	beq.n	8016d4e <rmw_wait+0x13e>
 8016d32:	ee07 8a90 	vmov	s15, r8
 8016d36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8016d3a:	ee07 3a90 	vmov	s15, r3
 8016d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016d46:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8016d4a:	ee17 8a90 	vmov	r8, s15
 8016d4e:	f241 59a4 	movw	r9, #5540	; 0x15a4
 8016d52:	68e0      	ldr	r0, [r4, #12]
 8016d54:	f810 3009 	ldrb.w	r3, [r0, r9]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	f040 8093 	bne.w	8016e84 <rmw_wait+0x274>
 8016d5e:	68a4      	ldr	r4, [r4, #8]
 8016d60:	2c00      	cmp	r4, #0
 8016d62:	d1f6      	bne.n	8016d52 <rmw_wait+0x142>
 8016d64:	2d00      	cmp	r5, #0
 8016d66:	f000 80ac 	beq.w	8016ec2 <rmw_wait+0x2b2>
 8016d6a:	682b      	ldr	r3, [r5, #0]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	f000 8093 	beq.w	8016e98 <rmw_wait+0x288>
 8016d72:	2400      	movs	r4, #0
 8016d74:	46a0      	mov	r8, r4
 8016d76:	686b      	ldr	r3, [r5, #4]
 8016d78:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016d7c:	f7f9 f8ba 	bl	800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016d80:	2800      	cmp	r0, #0
 8016d82:	d05f      	beq.n	8016e44 <rmw_wait+0x234>
 8016d84:	682b      	ldr	r3, [r5, #0]
 8016d86:	3401      	adds	r4, #1
 8016d88:	42a3      	cmp	r3, r4
 8016d8a:	f04f 0801 	mov.w	r8, #1
 8016d8e:	d8f2      	bhi.n	8016d76 <rmw_wait+0x166>
 8016d90:	f1ba 0f00 	cmp.w	sl, #0
 8016d94:	d012      	beq.n	8016dbc <rmw_wait+0x1ac>
 8016d96:	f8da 3000 	ldr.w	r3, [sl]
 8016d9a:	b17b      	cbz	r3, 8016dbc <rmw_wait+0x1ac>
 8016d9c:	2400      	movs	r4, #0
 8016d9e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8016da2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016da6:	f7f9 f8a5 	bl	800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016daa:	2800      	cmp	r0, #0
 8016dac:	d052      	beq.n	8016e54 <rmw_wait+0x244>
 8016dae:	f8da 3000 	ldr.w	r3, [sl]
 8016db2:	3401      	adds	r4, #1
 8016db4:	42a3      	cmp	r3, r4
 8016db6:	f04f 0801 	mov.w	r8, #1
 8016dba:	d8f0      	bhi.n	8016d9e <rmw_wait+0x18e>
 8016dbc:	b1e6      	cbz	r6, 8016df8 <rmw_wait+0x1e8>
 8016dbe:	6833      	ldr	r3, [r6, #0]
 8016dc0:	b1d3      	cbz	r3, 8016df8 <rmw_wait+0x1e8>
 8016dc2:	2400      	movs	r4, #0
 8016dc4:	6873      	ldr	r3, [r6, #4]
 8016dc6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016dca:	f7f9 f893 	bl	800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016dce:	b160      	cbz	r0, 8016dea <rmw_wait+0x1da>
 8016dd0:	6833      	ldr	r3, [r6, #0]
 8016dd2:	3401      	adds	r4, #1
 8016dd4:	42a3      	cmp	r3, r4
 8016dd6:	d96c      	bls.n	8016eb2 <rmw_wait+0x2a2>
 8016dd8:	6873      	ldr	r3, [r6, #4]
 8016dda:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016dde:	f04f 0801 	mov.w	r8, #1
 8016de2:	f7f9 f887 	bl	800fef4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016de6:	2800      	cmp	r0, #0
 8016de8:	d1f2      	bne.n	8016dd0 <rmw_wait+0x1c0>
 8016dea:	e9d6 3200 	ldrd	r3, r2, [r6]
 8016dee:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016df2:	3401      	adds	r4, #1
 8016df4:	42a3      	cmp	r3, r4
 8016df6:	d8e5      	bhi.n	8016dc4 <rmw_wait+0x1b4>
 8016df8:	b1a7      	cbz	r7, 8016e24 <rmw_wait+0x214>
 8016dfa:	683c      	ldr	r4, [r7, #0]
 8016dfc:	b194      	cbz	r4, 8016e24 <rmw_wait+0x214>
 8016dfe:	2300      	movs	r3, #0
 8016e00:	461d      	mov	r5, r3
 8016e02:	e004      	b.n	8016e0e <rmw_wait+0x1fe>
 8016e04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8016e08:	3301      	adds	r3, #1
 8016e0a:	42a3      	cmp	r3, r4
 8016e0c:	d00a      	beq.n	8016e24 <rmw_wait+0x214>
 8016e0e:	6878      	ldr	r0, [r7, #4]
 8016e10:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8016e14:	7c0a      	ldrb	r2, [r1, #16]
 8016e16:	2a00      	cmp	r2, #0
 8016e18:	d0f4      	beq.n	8016e04 <rmw_wait+0x1f4>
 8016e1a:	3301      	adds	r3, #1
 8016e1c:	42a3      	cmp	r3, r4
 8016e1e:	740d      	strb	r5, [r1, #16]
 8016e20:	4690      	mov	r8, r2
 8016e22:	d1f4      	bne.n	8016e0e <rmw_wait+0x1fe>
 8016e24:	f1b8 0f00 	cmp.w	r8, #0
 8016e28:	d040      	beq.n	8016eac <rmw_wait+0x29c>
 8016e2a:	2000      	movs	r0, #0
 8016e2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e30:	68e0      	ldr	r0, [r4, #12]
 8016e32:	2100      	movs	r1, #0
 8016e34:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016e38:	f7fa fbd0 	bl	80115dc <uxr_run_session_timeout>
 8016e3c:	68a4      	ldr	r4, [r4, #8]
 8016e3e:	2c00      	cmp	r4, #0
 8016e40:	d1f6      	bne.n	8016e30 <rmw_wait+0x220>
 8016e42:	e78f      	b.n	8016d64 <rmw_wait+0x154>
 8016e44:	e9d5 3200 	ldrd	r3, r2, [r5]
 8016e48:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016e4c:	3401      	adds	r4, #1
 8016e4e:	42a3      	cmp	r3, r4
 8016e50:	d891      	bhi.n	8016d76 <rmw_wait+0x166>
 8016e52:	e79d      	b.n	8016d90 <rmw_wait+0x180>
 8016e54:	e9da 3200 	ldrd	r3, r2, [sl]
 8016e58:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8016e5c:	3401      	adds	r4, #1
 8016e5e:	429c      	cmp	r4, r3
 8016e60:	d39d      	bcc.n	8016d9e <rmw_wait+0x18e>
 8016e62:	e7ab      	b.n	8016dbc <rmw_wait+0x1ac>
 8016e64:	4690      	mov	r8, r2
 8016e66:	e70b      	b.n	8016c80 <rmw_wait+0x70>
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	f47f aedb 	bne.w	8016c24 <rmw_wait+0x14>
 8016e6e:	2800      	cmp	r0, #0
 8016e70:	f47f aed8 	bne.w	8016c24 <rmw_wait+0x14>
 8016e74:	2f00      	cmp	r7, #0
 8016e76:	d0d8      	beq.n	8016e2a <rmw_wait+0x21a>
 8016e78:	2900      	cmp	r1, #0
 8016e7a:	f47f aed6 	bne.w	8016c2a <rmw_wait+0x1a>
 8016e7e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016e82:	e6fd      	b.n	8016c80 <rmw_wait+0x70>
 8016e84:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016e88:	4641      	mov	r1, r8
 8016e8a:	f7fa fbc1 	bl	8011610 <uxr_run_session_until_data>
 8016e8e:	68a4      	ldr	r4, [r4, #8]
 8016e90:	2c00      	cmp	r4, #0
 8016e92:	f47f af5e 	bne.w	8016d52 <rmw_wait+0x142>
 8016e96:	e765      	b.n	8016d64 <rmw_wait+0x154>
 8016e98:	f1ba 0f00 	cmp.w	sl, #0
 8016e9c:	d11e      	bne.n	8016edc <rmw_wait+0x2cc>
 8016e9e:	b35e      	cbz	r6, 8016ef8 <rmw_wait+0x2e8>
 8016ea0:	6833      	ldr	r3, [r6, #0]
 8016ea2:	46d0      	mov	r8, sl
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d18c      	bne.n	8016dc2 <rmw_wait+0x1b2>
 8016ea8:	2f00      	cmp	r7, #0
 8016eaa:	d1a6      	bne.n	8016dfa <rmw_wait+0x1ea>
 8016eac:	2002      	movs	r0, #2
 8016eae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eb2:	2f00      	cmp	r7, #0
 8016eb4:	d0b9      	beq.n	8016e2a <rmw_wait+0x21a>
 8016eb6:	683c      	ldr	r4, [r7, #0]
 8016eb8:	f04f 0801 	mov.w	r8, #1
 8016ebc:	2c00      	cmp	r4, #0
 8016ebe:	d19e      	bne.n	8016dfe <rmw_wait+0x1ee>
 8016ec0:	e7b3      	b.n	8016e2a <rmw_wait+0x21a>
 8016ec2:	f1ba 0f00 	cmp.w	sl, #0
 8016ec6:	d0ea      	beq.n	8016e9e <rmw_wait+0x28e>
 8016ec8:	f8da 3000 	ldr.w	r3, [sl]
 8016ecc:	46a8      	mov	r8, r5
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	f47f af64 	bne.w	8016d9c <rmw_wait+0x18c>
 8016ed4:	2e00      	cmp	r6, #0
 8016ed6:	f47f af72 	bne.w	8016dbe <rmw_wait+0x1ae>
 8016eda:	e009      	b.n	8016ef0 <rmw_wait+0x2e0>
 8016edc:	f8da 2000 	ldr.w	r2, [sl]
 8016ee0:	4698      	mov	r8, r3
 8016ee2:	2a00      	cmp	r2, #0
 8016ee4:	f47f af5a 	bne.w	8016d9c <rmw_wait+0x18c>
 8016ee8:	4690      	mov	r8, r2
 8016eea:	2e00      	cmp	r6, #0
 8016eec:	f47f af67 	bne.w	8016dbe <rmw_wait+0x1ae>
 8016ef0:	46b0      	mov	r8, r6
 8016ef2:	2f00      	cmp	r7, #0
 8016ef4:	d181      	bne.n	8016dfa <rmw_wait+0x1ea>
 8016ef6:	e7d9      	b.n	8016eac <rmw_wait+0x29c>
 8016ef8:	2f00      	cmp	r7, #0
 8016efa:	d0d7      	beq.n	8016eac <rmw_wait+0x29c>
 8016efc:	683c      	ldr	r4, [r7, #0]
 8016efe:	46b0      	mov	r8, r6
 8016f00:	2c00      	cmp	r4, #0
 8016f02:	f47f af7c 	bne.w	8016dfe <rmw_wait+0x1ee>
 8016f06:	e7d1      	b.n	8016eac <rmw_wait+0x29c>
 8016f08:	000f4240 	.word	0x000f4240
 8016f0c:	2000d250 	.word	0x2000d250

08016f10 <rmw_create_wait_set>:
 8016f10:	b508      	push	{r3, lr}
 8016f12:	4803      	ldr	r0, [pc, #12]	; (8016f20 <rmw_create_wait_set+0x10>)
 8016f14:	f7ff fc2e 	bl	8016774 <get_memory>
 8016f18:	b108      	cbz	r0, 8016f1e <rmw_create_wait_set+0xe>
 8016f1a:	68c0      	ldr	r0, [r0, #12]
 8016f1c:	3010      	adds	r0, #16
 8016f1e:	bd08      	pop	{r3, pc}
 8016f20:	2000ea28 	.word	0x2000ea28

08016f24 <rmw_destroy_wait_set>:
 8016f24:	b508      	push	{r3, lr}
 8016f26:	4b08      	ldr	r3, [pc, #32]	; (8016f48 <rmw_destroy_wait_set+0x24>)
 8016f28:	6819      	ldr	r1, [r3, #0]
 8016f2a:	b911      	cbnz	r1, 8016f32 <rmw_destroy_wait_set+0xe>
 8016f2c:	e00a      	b.n	8016f44 <rmw_destroy_wait_set+0x20>
 8016f2e:	6889      	ldr	r1, [r1, #8]
 8016f30:	b141      	cbz	r1, 8016f44 <rmw_destroy_wait_set+0x20>
 8016f32:	68cb      	ldr	r3, [r1, #12]
 8016f34:	3310      	adds	r3, #16
 8016f36:	4298      	cmp	r0, r3
 8016f38:	d1f9      	bne.n	8016f2e <rmw_destroy_wait_set+0xa>
 8016f3a:	4803      	ldr	r0, [pc, #12]	; (8016f48 <rmw_destroy_wait_set+0x24>)
 8016f3c:	f7ff fc2a 	bl	8016794 <put_memory>
 8016f40:	2000      	movs	r0, #0
 8016f42:	bd08      	pop	{r3, pc}
 8016f44:	2001      	movs	r0, #1
 8016f46:	bd08      	pop	{r3, pc}
 8016f48:	2000ea28 	.word	0x2000ea28

08016f4c <rmw_uros_epoch_nanos>:
 8016f4c:	4b05      	ldr	r3, [pc, #20]	; (8016f64 <rmw_uros_epoch_nanos+0x18>)
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	b123      	cbz	r3, 8016f5c <rmw_uros_epoch_nanos+0x10>
 8016f52:	68d8      	ldr	r0, [r3, #12]
 8016f54:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016f58:	f7f9 bfb4 	b.w	8010ec4 <uxr_epoch_nanos>
 8016f5c:	2000      	movs	r0, #0
 8016f5e:	2100      	movs	r1, #0
 8016f60:	4770      	bx	lr
 8016f62:	bf00      	nop
 8016f64:	2000d250 	.word	0x2000d250

08016f68 <ucdr_serialize_endian_array_char>:
 8016f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f6c:	4619      	mov	r1, r3
 8016f6e:	461e      	mov	r6, r3
 8016f70:	4690      	mov	r8, r2
 8016f72:	4604      	mov	r4, r0
 8016f74:	f7f9 f962 	bl	801023c <ucdr_check_buffer_available_for>
 8016f78:	b9e0      	cbnz	r0, 8016fb4 <ucdr_serialize_endian_array_char+0x4c>
 8016f7a:	4637      	mov	r7, r6
 8016f7c:	e009      	b.n	8016f92 <ucdr_serialize_endian_array_char+0x2a>
 8016f7e:	68a0      	ldr	r0, [r4, #8]
 8016f80:	f002 f88c 	bl	801909c <memcpy>
 8016f84:	68a2      	ldr	r2, [r4, #8]
 8016f86:	6923      	ldr	r3, [r4, #16]
 8016f88:	442a      	add	r2, r5
 8016f8a:	442b      	add	r3, r5
 8016f8c:	1b7f      	subs	r7, r7, r5
 8016f8e:	60a2      	str	r2, [r4, #8]
 8016f90:	6123      	str	r3, [r4, #16]
 8016f92:	2201      	movs	r2, #1
 8016f94:	4639      	mov	r1, r7
 8016f96:	4620      	mov	r0, r4
 8016f98:	f7f9 f9d6 	bl	8010348 <ucdr_check_final_buffer_behavior_array>
 8016f9c:	1bf1      	subs	r1, r6, r7
 8016f9e:	4441      	add	r1, r8
 8016fa0:	4605      	mov	r5, r0
 8016fa2:	4602      	mov	r2, r0
 8016fa4:	2800      	cmp	r0, #0
 8016fa6:	d1ea      	bne.n	8016f7e <ucdr_serialize_endian_array_char+0x16>
 8016fa8:	2301      	movs	r3, #1
 8016faa:	7da0      	ldrb	r0, [r4, #22]
 8016fac:	7563      	strb	r3, [r4, #21]
 8016fae:	4058      	eors	r0, r3
 8016fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fb4:	4632      	mov	r2, r6
 8016fb6:	68a0      	ldr	r0, [r4, #8]
 8016fb8:	4641      	mov	r1, r8
 8016fba:	f002 f86f 	bl	801909c <memcpy>
 8016fbe:	68a2      	ldr	r2, [r4, #8]
 8016fc0:	6923      	ldr	r3, [r4, #16]
 8016fc2:	4432      	add	r2, r6
 8016fc4:	4433      	add	r3, r6
 8016fc6:	60a2      	str	r2, [r4, #8]
 8016fc8:	6123      	str	r3, [r4, #16]
 8016fca:	e7ed      	b.n	8016fa8 <ucdr_serialize_endian_array_char+0x40>

08016fcc <ucdr_deserialize_endian_array_char>:
 8016fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016fd0:	4619      	mov	r1, r3
 8016fd2:	461e      	mov	r6, r3
 8016fd4:	4690      	mov	r8, r2
 8016fd6:	4604      	mov	r4, r0
 8016fd8:	f7f9 f930 	bl	801023c <ucdr_check_buffer_available_for>
 8016fdc:	b9e0      	cbnz	r0, 8017018 <ucdr_deserialize_endian_array_char+0x4c>
 8016fde:	4637      	mov	r7, r6
 8016fe0:	e009      	b.n	8016ff6 <ucdr_deserialize_endian_array_char+0x2a>
 8016fe2:	68a1      	ldr	r1, [r4, #8]
 8016fe4:	f002 f85a 	bl	801909c <memcpy>
 8016fe8:	68a2      	ldr	r2, [r4, #8]
 8016fea:	6923      	ldr	r3, [r4, #16]
 8016fec:	442a      	add	r2, r5
 8016fee:	442b      	add	r3, r5
 8016ff0:	1b7f      	subs	r7, r7, r5
 8016ff2:	60a2      	str	r2, [r4, #8]
 8016ff4:	6123      	str	r3, [r4, #16]
 8016ff6:	2201      	movs	r2, #1
 8016ff8:	4639      	mov	r1, r7
 8016ffa:	4620      	mov	r0, r4
 8016ffc:	f7f9 f9a4 	bl	8010348 <ucdr_check_final_buffer_behavior_array>
 8017000:	4605      	mov	r5, r0
 8017002:	1bf0      	subs	r0, r6, r7
 8017004:	4440      	add	r0, r8
 8017006:	462a      	mov	r2, r5
 8017008:	2d00      	cmp	r5, #0
 801700a:	d1ea      	bne.n	8016fe2 <ucdr_deserialize_endian_array_char+0x16>
 801700c:	2301      	movs	r3, #1
 801700e:	7da0      	ldrb	r0, [r4, #22]
 8017010:	7563      	strb	r3, [r4, #21]
 8017012:	4058      	eors	r0, r3
 8017014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017018:	4632      	mov	r2, r6
 801701a:	68a1      	ldr	r1, [r4, #8]
 801701c:	4640      	mov	r0, r8
 801701e:	f002 f83d 	bl	801909c <memcpy>
 8017022:	68a2      	ldr	r2, [r4, #8]
 8017024:	6923      	ldr	r3, [r4, #16]
 8017026:	4432      	add	r2, r6
 8017028:	4433      	add	r3, r6
 801702a:	60a2      	str	r2, [r4, #8]
 801702c:	6123      	str	r3, [r4, #16]
 801702e:	e7ed      	b.n	801700c <ucdr_deserialize_endian_array_char+0x40>

08017030 <ucdr_serialize_array_uint8_t>:
 8017030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017034:	4688      	mov	r8, r1
 8017036:	4611      	mov	r1, r2
 8017038:	4616      	mov	r6, r2
 801703a:	4604      	mov	r4, r0
 801703c:	f7f9 f8fe 	bl	801023c <ucdr_check_buffer_available_for>
 8017040:	b9e0      	cbnz	r0, 801707c <ucdr_serialize_array_uint8_t+0x4c>
 8017042:	4637      	mov	r7, r6
 8017044:	e009      	b.n	801705a <ucdr_serialize_array_uint8_t+0x2a>
 8017046:	68a0      	ldr	r0, [r4, #8]
 8017048:	f002 f828 	bl	801909c <memcpy>
 801704c:	68a2      	ldr	r2, [r4, #8]
 801704e:	6923      	ldr	r3, [r4, #16]
 8017050:	442a      	add	r2, r5
 8017052:	442b      	add	r3, r5
 8017054:	1b7f      	subs	r7, r7, r5
 8017056:	60a2      	str	r2, [r4, #8]
 8017058:	6123      	str	r3, [r4, #16]
 801705a:	2201      	movs	r2, #1
 801705c:	4639      	mov	r1, r7
 801705e:	4620      	mov	r0, r4
 8017060:	f7f9 f972 	bl	8010348 <ucdr_check_final_buffer_behavior_array>
 8017064:	1bf1      	subs	r1, r6, r7
 8017066:	4441      	add	r1, r8
 8017068:	4605      	mov	r5, r0
 801706a:	4602      	mov	r2, r0
 801706c:	2800      	cmp	r0, #0
 801706e:	d1ea      	bne.n	8017046 <ucdr_serialize_array_uint8_t+0x16>
 8017070:	2301      	movs	r3, #1
 8017072:	7da0      	ldrb	r0, [r4, #22]
 8017074:	7563      	strb	r3, [r4, #21]
 8017076:	4058      	eors	r0, r3
 8017078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801707c:	4632      	mov	r2, r6
 801707e:	68a0      	ldr	r0, [r4, #8]
 8017080:	4641      	mov	r1, r8
 8017082:	f002 f80b 	bl	801909c <memcpy>
 8017086:	68a3      	ldr	r3, [r4, #8]
 8017088:	6922      	ldr	r2, [r4, #16]
 801708a:	4433      	add	r3, r6
 801708c:	4432      	add	r2, r6
 801708e:	60a3      	str	r3, [r4, #8]
 8017090:	6122      	str	r2, [r4, #16]
 8017092:	e7ed      	b.n	8017070 <ucdr_serialize_array_uint8_t+0x40>

08017094 <ucdr_serialize_endian_array_uint8_t>:
 8017094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017098:	4619      	mov	r1, r3
 801709a:	461e      	mov	r6, r3
 801709c:	4690      	mov	r8, r2
 801709e:	4604      	mov	r4, r0
 80170a0:	f7f9 f8cc 	bl	801023c <ucdr_check_buffer_available_for>
 80170a4:	b9e0      	cbnz	r0, 80170e0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 80170a6:	4637      	mov	r7, r6
 80170a8:	e009      	b.n	80170be <ucdr_serialize_endian_array_uint8_t+0x2a>
 80170aa:	68a0      	ldr	r0, [r4, #8]
 80170ac:	f001 fff6 	bl	801909c <memcpy>
 80170b0:	68a2      	ldr	r2, [r4, #8]
 80170b2:	6923      	ldr	r3, [r4, #16]
 80170b4:	442a      	add	r2, r5
 80170b6:	442b      	add	r3, r5
 80170b8:	1b7f      	subs	r7, r7, r5
 80170ba:	60a2      	str	r2, [r4, #8]
 80170bc:	6123      	str	r3, [r4, #16]
 80170be:	2201      	movs	r2, #1
 80170c0:	4639      	mov	r1, r7
 80170c2:	4620      	mov	r0, r4
 80170c4:	f7f9 f940 	bl	8010348 <ucdr_check_final_buffer_behavior_array>
 80170c8:	1bf1      	subs	r1, r6, r7
 80170ca:	4441      	add	r1, r8
 80170cc:	4605      	mov	r5, r0
 80170ce:	4602      	mov	r2, r0
 80170d0:	2800      	cmp	r0, #0
 80170d2:	d1ea      	bne.n	80170aa <ucdr_serialize_endian_array_uint8_t+0x16>
 80170d4:	2301      	movs	r3, #1
 80170d6:	7da0      	ldrb	r0, [r4, #22]
 80170d8:	7563      	strb	r3, [r4, #21]
 80170da:	4058      	eors	r0, r3
 80170dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170e0:	4632      	mov	r2, r6
 80170e2:	68a0      	ldr	r0, [r4, #8]
 80170e4:	4641      	mov	r1, r8
 80170e6:	f001 ffd9 	bl	801909c <memcpy>
 80170ea:	68a2      	ldr	r2, [r4, #8]
 80170ec:	6923      	ldr	r3, [r4, #16]
 80170ee:	4432      	add	r2, r6
 80170f0:	4433      	add	r3, r6
 80170f2:	60a2      	str	r2, [r4, #8]
 80170f4:	6123      	str	r3, [r4, #16]
 80170f6:	e7ed      	b.n	80170d4 <ucdr_serialize_endian_array_uint8_t+0x40>

080170f8 <ucdr_deserialize_array_uint8_t>:
 80170f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170fc:	4688      	mov	r8, r1
 80170fe:	4611      	mov	r1, r2
 8017100:	4616      	mov	r6, r2
 8017102:	4604      	mov	r4, r0
 8017104:	f7f9 f89a 	bl	801023c <ucdr_check_buffer_available_for>
 8017108:	b9e0      	cbnz	r0, 8017144 <ucdr_deserialize_array_uint8_t+0x4c>
 801710a:	4637      	mov	r7, r6
 801710c:	e009      	b.n	8017122 <ucdr_deserialize_array_uint8_t+0x2a>
 801710e:	68a1      	ldr	r1, [r4, #8]
 8017110:	f001 ffc4 	bl	801909c <memcpy>
 8017114:	68a2      	ldr	r2, [r4, #8]
 8017116:	6923      	ldr	r3, [r4, #16]
 8017118:	442a      	add	r2, r5
 801711a:	442b      	add	r3, r5
 801711c:	1b7f      	subs	r7, r7, r5
 801711e:	60a2      	str	r2, [r4, #8]
 8017120:	6123      	str	r3, [r4, #16]
 8017122:	2201      	movs	r2, #1
 8017124:	4639      	mov	r1, r7
 8017126:	4620      	mov	r0, r4
 8017128:	f7f9 f90e 	bl	8010348 <ucdr_check_final_buffer_behavior_array>
 801712c:	4605      	mov	r5, r0
 801712e:	1bf0      	subs	r0, r6, r7
 8017130:	4440      	add	r0, r8
 8017132:	462a      	mov	r2, r5
 8017134:	2d00      	cmp	r5, #0
 8017136:	d1ea      	bne.n	801710e <ucdr_deserialize_array_uint8_t+0x16>
 8017138:	2301      	movs	r3, #1
 801713a:	7da0      	ldrb	r0, [r4, #22]
 801713c:	7563      	strb	r3, [r4, #21]
 801713e:	4058      	eors	r0, r3
 8017140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017144:	4632      	mov	r2, r6
 8017146:	68a1      	ldr	r1, [r4, #8]
 8017148:	4640      	mov	r0, r8
 801714a:	f001 ffa7 	bl	801909c <memcpy>
 801714e:	68a3      	ldr	r3, [r4, #8]
 8017150:	6922      	ldr	r2, [r4, #16]
 8017152:	4433      	add	r3, r6
 8017154:	4432      	add	r2, r6
 8017156:	60a3      	str	r3, [r4, #8]
 8017158:	6122      	str	r2, [r4, #16]
 801715a:	e7ed      	b.n	8017138 <ucdr_deserialize_array_uint8_t+0x40>

0801715c <ucdr_deserialize_endian_array_uint8_t>:
 801715c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017160:	4619      	mov	r1, r3
 8017162:	461e      	mov	r6, r3
 8017164:	4690      	mov	r8, r2
 8017166:	4604      	mov	r4, r0
 8017168:	f7f9 f868 	bl	801023c <ucdr_check_buffer_available_for>
 801716c:	b9e0      	cbnz	r0, 80171a8 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801716e:	4637      	mov	r7, r6
 8017170:	e009      	b.n	8017186 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8017172:	68a1      	ldr	r1, [r4, #8]
 8017174:	f001 ff92 	bl	801909c <memcpy>
 8017178:	68a2      	ldr	r2, [r4, #8]
 801717a:	6923      	ldr	r3, [r4, #16]
 801717c:	442a      	add	r2, r5
 801717e:	442b      	add	r3, r5
 8017180:	1b7f      	subs	r7, r7, r5
 8017182:	60a2      	str	r2, [r4, #8]
 8017184:	6123      	str	r3, [r4, #16]
 8017186:	2201      	movs	r2, #1
 8017188:	4639      	mov	r1, r7
 801718a:	4620      	mov	r0, r4
 801718c:	f7f9 f8dc 	bl	8010348 <ucdr_check_final_buffer_behavior_array>
 8017190:	4605      	mov	r5, r0
 8017192:	1bf0      	subs	r0, r6, r7
 8017194:	4440      	add	r0, r8
 8017196:	462a      	mov	r2, r5
 8017198:	2d00      	cmp	r5, #0
 801719a:	d1ea      	bne.n	8017172 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801719c:	2301      	movs	r3, #1
 801719e:	7da0      	ldrb	r0, [r4, #22]
 80171a0:	7563      	strb	r3, [r4, #21]
 80171a2:	4058      	eors	r0, r3
 80171a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171a8:	4632      	mov	r2, r6
 80171aa:	68a1      	ldr	r1, [r4, #8]
 80171ac:	4640      	mov	r0, r8
 80171ae:	f001 ff75 	bl	801909c <memcpy>
 80171b2:	68a2      	ldr	r2, [r4, #8]
 80171b4:	6923      	ldr	r3, [r4, #16]
 80171b6:	4432      	add	r2, r6
 80171b8:	4433      	add	r3, r6
 80171ba:	60a2      	str	r2, [r4, #8]
 80171bc:	6123      	str	r3, [r4, #16]
 80171be:	e7ed      	b.n	801719c <ucdr_deserialize_endian_array_uint8_t+0x40>

080171c0 <ucdr_serialize_bool>:
 80171c0:	b538      	push	{r3, r4, r5, lr}
 80171c2:	460d      	mov	r5, r1
 80171c4:	2101      	movs	r1, #1
 80171c6:	4604      	mov	r4, r0
 80171c8:	f7f9 f844 	bl	8010254 <ucdr_check_final_buffer_behavior>
 80171cc:	b148      	cbz	r0, 80171e2 <ucdr_serialize_bool+0x22>
 80171ce:	68a3      	ldr	r3, [r4, #8]
 80171d0:	701d      	strb	r5, [r3, #0]
 80171d2:	68a2      	ldr	r2, [r4, #8]
 80171d4:	6923      	ldr	r3, [r4, #16]
 80171d6:	3201      	adds	r2, #1
 80171d8:	3301      	adds	r3, #1
 80171da:	2101      	movs	r1, #1
 80171dc:	60a2      	str	r2, [r4, #8]
 80171de:	6123      	str	r3, [r4, #16]
 80171e0:	7561      	strb	r1, [r4, #21]
 80171e2:	7da0      	ldrb	r0, [r4, #22]
 80171e4:	f080 0001 	eor.w	r0, r0, #1
 80171e8:	bd38      	pop	{r3, r4, r5, pc}
 80171ea:	bf00      	nop

080171ec <ucdr_deserialize_bool>:
 80171ec:	b538      	push	{r3, r4, r5, lr}
 80171ee:	460d      	mov	r5, r1
 80171f0:	2101      	movs	r1, #1
 80171f2:	4604      	mov	r4, r0
 80171f4:	f7f9 f82e 	bl	8010254 <ucdr_check_final_buffer_behavior>
 80171f8:	b168      	cbz	r0, 8017216 <ucdr_deserialize_bool+0x2a>
 80171fa:	68a2      	ldr	r2, [r4, #8]
 80171fc:	6923      	ldr	r3, [r4, #16]
 80171fe:	f812 1b01 	ldrb.w	r1, [r2], #1
 8017202:	3900      	subs	r1, #0
 8017204:	f103 0301 	add.w	r3, r3, #1
 8017208:	bf18      	it	ne
 801720a:	2101      	movne	r1, #1
 801720c:	2001      	movs	r0, #1
 801720e:	7029      	strb	r1, [r5, #0]
 8017210:	60a2      	str	r2, [r4, #8]
 8017212:	6123      	str	r3, [r4, #16]
 8017214:	7560      	strb	r0, [r4, #21]
 8017216:	7da0      	ldrb	r0, [r4, #22]
 8017218:	f080 0001 	eor.w	r0, r0, #1
 801721c:	bd38      	pop	{r3, r4, r5, pc}
 801721e:	bf00      	nop

08017220 <ucdr_serialize_uint8_t>:
 8017220:	b538      	push	{r3, r4, r5, lr}
 8017222:	460d      	mov	r5, r1
 8017224:	2101      	movs	r1, #1
 8017226:	4604      	mov	r4, r0
 8017228:	f7f9 f814 	bl	8010254 <ucdr_check_final_buffer_behavior>
 801722c:	b148      	cbz	r0, 8017242 <ucdr_serialize_uint8_t+0x22>
 801722e:	68a3      	ldr	r3, [r4, #8]
 8017230:	701d      	strb	r5, [r3, #0]
 8017232:	68a2      	ldr	r2, [r4, #8]
 8017234:	6923      	ldr	r3, [r4, #16]
 8017236:	3201      	adds	r2, #1
 8017238:	3301      	adds	r3, #1
 801723a:	2101      	movs	r1, #1
 801723c:	60a2      	str	r2, [r4, #8]
 801723e:	6123      	str	r3, [r4, #16]
 8017240:	7561      	strb	r1, [r4, #21]
 8017242:	7da0      	ldrb	r0, [r4, #22]
 8017244:	f080 0001 	eor.w	r0, r0, #1
 8017248:	bd38      	pop	{r3, r4, r5, pc}
 801724a:	bf00      	nop

0801724c <ucdr_deserialize_uint8_t>:
 801724c:	b538      	push	{r3, r4, r5, lr}
 801724e:	460d      	mov	r5, r1
 8017250:	2101      	movs	r1, #1
 8017252:	4604      	mov	r4, r0
 8017254:	f7f8 fffe 	bl	8010254 <ucdr_check_final_buffer_behavior>
 8017258:	b150      	cbz	r0, 8017270 <ucdr_deserialize_uint8_t+0x24>
 801725a:	68a3      	ldr	r3, [r4, #8]
 801725c:	781b      	ldrb	r3, [r3, #0]
 801725e:	702b      	strb	r3, [r5, #0]
 8017260:	68a2      	ldr	r2, [r4, #8]
 8017262:	6923      	ldr	r3, [r4, #16]
 8017264:	3201      	adds	r2, #1
 8017266:	3301      	adds	r3, #1
 8017268:	2101      	movs	r1, #1
 801726a:	60a2      	str	r2, [r4, #8]
 801726c:	6123      	str	r3, [r4, #16]
 801726e:	7561      	strb	r1, [r4, #21]
 8017270:	7da0      	ldrb	r0, [r4, #22]
 8017272:	f080 0001 	eor.w	r0, r0, #1
 8017276:	bd38      	pop	{r3, r4, r5, pc}

08017278 <ucdr_serialize_uint16_t>:
 8017278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801727c:	b082      	sub	sp, #8
 801727e:	460b      	mov	r3, r1
 8017280:	2102      	movs	r1, #2
 8017282:	4604      	mov	r4, r0
 8017284:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017288:	f7f9 f836 	bl	80102f8 <ucdr_buffer_alignment>
 801728c:	4601      	mov	r1, r0
 801728e:	4620      	mov	r0, r4
 8017290:	7d67      	ldrb	r7, [r4, #21]
 8017292:	f7f9 f875 	bl	8010380 <ucdr_advance_buffer>
 8017296:	4620      	mov	r0, r4
 8017298:	2102      	movs	r1, #2
 801729a:	f7f8 ffcf 	bl	801023c <ucdr_check_buffer_available_for>
 801729e:	bb78      	cbnz	r0, 8017300 <ucdr_serialize_uint16_t+0x88>
 80172a0:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 80172a4:	42b5      	cmp	r5, r6
 80172a6:	d926      	bls.n	80172f6 <ucdr_serialize_uint16_t+0x7e>
 80172a8:	6922      	ldr	r2, [r4, #16]
 80172aa:	60a5      	str	r5, [r4, #8]
 80172ac:	1bad      	subs	r5, r5, r6
 80172ae:	442a      	add	r2, r5
 80172b0:	f1c5 0802 	rsb	r8, r5, #2
 80172b4:	6122      	str	r2, [r4, #16]
 80172b6:	4641      	mov	r1, r8
 80172b8:	4620      	mov	r0, r4
 80172ba:	f7f8 ffcb 	bl	8010254 <ucdr_check_final_buffer_behavior>
 80172be:	2800      	cmp	r0, #0
 80172c0:	d03b      	beq.n	801733a <ucdr_serialize_uint16_t+0xc2>
 80172c2:	7d23      	ldrb	r3, [r4, #20]
 80172c4:	2b01      	cmp	r3, #1
 80172c6:	d04a      	beq.n	801735e <ucdr_serialize_uint16_t+0xe6>
 80172c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80172cc:	7033      	strb	r3, [r6, #0]
 80172ce:	2d00      	cmp	r5, #0
 80172d0:	d040      	beq.n	8017354 <ucdr_serialize_uint16_t+0xdc>
 80172d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80172d6:	7073      	strb	r3, [r6, #1]
 80172d8:	6923      	ldr	r3, [r4, #16]
 80172da:	68a2      	ldr	r2, [r4, #8]
 80172dc:	7da0      	ldrb	r0, [r4, #22]
 80172de:	3302      	adds	r3, #2
 80172e0:	1b5b      	subs	r3, r3, r5
 80172e2:	4442      	add	r2, r8
 80172e4:	2102      	movs	r1, #2
 80172e6:	f080 0001 	eor.w	r0, r0, #1
 80172ea:	6123      	str	r3, [r4, #16]
 80172ec:	60a2      	str	r2, [r4, #8]
 80172ee:	7561      	strb	r1, [r4, #21]
 80172f0:	b002      	add	sp, #8
 80172f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172f6:	2102      	movs	r1, #2
 80172f8:	4620      	mov	r0, r4
 80172fa:	f7f8 ffab 	bl	8010254 <ucdr_check_final_buffer_behavior>
 80172fe:	b190      	cbz	r0, 8017326 <ucdr_serialize_uint16_t+0xae>
 8017300:	7d23      	ldrb	r3, [r4, #20]
 8017302:	2b01      	cmp	r3, #1
 8017304:	68a3      	ldr	r3, [r4, #8]
 8017306:	d014      	beq.n	8017332 <ucdr_serialize_uint16_t+0xba>
 8017308:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801730c:	701a      	strb	r2, [r3, #0]
 801730e:	68a3      	ldr	r3, [r4, #8]
 8017310:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017314:	705a      	strb	r2, [r3, #1]
 8017316:	68a2      	ldr	r2, [r4, #8]
 8017318:	6923      	ldr	r3, [r4, #16]
 801731a:	3202      	adds	r2, #2
 801731c:	3302      	adds	r3, #2
 801731e:	2102      	movs	r1, #2
 8017320:	60a2      	str	r2, [r4, #8]
 8017322:	6123      	str	r3, [r4, #16]
 8017324:	7561      	strb	r1, [r4, #21]
 8017326:	7da0      	ldrb	r0, [r4, #22]
 8017328:	f080 0001 	eor.w	r0, r0, #1
 801732c:	b002      	add	sp, #8
 801732e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017332:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017336:	801a      	strh	r2, [r3, #0]
 8017338:	e7ed      	b.n	8017316 <ucdr_serialize_uint16_t+0x9e>
 801733a:	68a2      	ldr	r2, [r4, #8]
 801733c:	6923      	ldr	r3, [r4, #16]
 801733e:	7da0      	ldrb	r0, [r4, #22]
 8017340:	7567      	strb	r7, [r4, #21]
 8017342:	1b52      	subs	r2, r2, r5
 8017344:	1b5b      	subs	r3, r3, r5
 8017346:	f080 0001 	eor.w	r0, r0, #1
 801734a:	60a2      	str	r2, [r4, #8]
 801734c:	6123      	str	r3, [r4, #16]
 801734e:	b002      	add	sp, #8
 8017350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017354:	68a3      	ldr	r3, [r4, #8]
 8017356:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801735a:	701a      	strb	r2, [r3, #0]
 801735c:	e7bc      	b.n	80172d8 <ucdr_serialize_uint16_t+0x60>
 801735e:	4630      	mov	r0, r6
 8017360:	f10d 0606 	add.w	r6, sp, #6
 8017364:	4631      	mov	r1, r6
 8017366:	462a      	mov	r2, r5
 8017368:	f001 fe98 	bl	801909c <memcpy>
 801736c:	68a0      	ldr	r0, [r4, #8]
 801736e:	4642      	mov	r2, r8
 8017370:	1971      	adds	r1, r6, r5
 8017372:	f001 fe93 	bl	801909c <memcpy>
 8017376:	e7af      	b.n	80172d8 <ucdr_serialize_uint16_t+0x60>

08017378 <ucdr_serialize_endian_uint16_t>:
 8017378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801737c:	b083      	sub	sp, #12
 801737e:	460d      	mov	r5, r1
 8017380:	2102      	movs	r1, #2
 8017382:	4604      	mov	r4, r0
 8017384:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017388:	f7f8 ffb6 	bl	80102f8 <ucdr_buffer_alignment>
 801738c:	4601      	mov	r1, r0
 801738e:	4620      	mov	r0, r4
 8017390:	f894 8015 	ldrb.w	r8, [r4, #21]
 8017394:	f7f8 fff4 	bl	8010380 <ucdr_advance_buffer>
 8017398:	4620      	mov	r0, r4
 801739a:	2102      	movs	r1, #2
 801739c:	f7f8 ff4e 	bl	801023c <ucdr_check_buffer_available_for>
 80173a0:	bb70      	cbnz	r0, 8017400 <ucdr_serialize_endian_uint16_t+0x88>
 80173a2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80173a6:	42be      	cmp	r6, r7
 80173a8:	d925      	bls.n	80173f6 <ucdr_serialize_endian_uint16_t+0x7e>
 80173aa:	6922      	ldr	r2, [r4, #16]
 80173ac:	60a6      	str	r6, [r4, #8]
 80173ae:	1bf6      	subs	r6, r6, r7
 80173b0:	4432      	add	r2, r6
 80173b2:	f1c6 0902 	rsb	r9, r6, #2
 80173b6:	6122      	str	r2, [r4, #16]
 80173b8:	4649      	mov	r1, r9
 80173ba:	4620      	mov	r0, r4
 80173bc:	f7f8 ff4a 	bl	8010254 <ucdr_check_final_buffer_behavior>
 80173c0:	2800      	cmp	r0, #0
 80173c2:	d039      	beq.n	8017438 <ucdr_serialize_endian_uint16_t+0xc0>
 80173c4:	2d01      	cmp	r5, #1
 80173c6:	d04a      	beq.n	801745e <ucdr_serialize_endian_uint16_t+0xe6>
 80173c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80173cc:	703b      	strb	r3, [r7, #0]
 80173ce:	2e00      	cmp	r6, #0
 80173d0:	d040      	beq.n	8017454 <ucdr_serialize_endian_uint16_t+0xdc>
 80173d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80173d6:	707b      	strb	r3, [r7, #1]
 80173d8:	6923      	ldr	r3, [r4, #16]
 80173da:	68a2      	ldr	r2, [r4, #8]
 80173dc:	7da0      	ldrb	r0, [r4, #22]
 80173de:	3302      	adds	r3, #2
 80173e0:	1b9b      	subs	r3, r3, r6
 80173e2:	444a      	add	r2, r9
 80173e4:	2102      	movs	r1, #2
 80173e6:	f080 0001 	eor.w	r0, r0, #1
 80173ea:	6123      	str	r3, [r4, #16]
 80173ec:	60a2      	str	r2, [r4, #8]
 80173ee:	7561      	strb	r1, [r4, #21]
 80173f0:	b003      	add	sp, #12
 80173f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80173f6:	2102      	movs	r1, #2
 80173f8:	4620      	mov	r0, r4
 80173fa:	f7f8 ff2b 	bl	8010254 <ucdr_check_final_buffer_behavior>
 80173fe:	b188      	cbz	r0, 8017424 <ucdr_serialize_endian_uint16_t+0xac>
 8017400:	2d01      	cmp	r5, #1
 8017402:	68a3      	ldr	r3, [r4, #8]
 8017404:	d014      	beq.n	8017430 <ucdr_serialize_endian_uint16_t+0xb8>
 8017406:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801740a:	701a      	strb	r2, [r3, #0]
 801740c:	68a3      	ldr	r3, [r4, #8]
 801740e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017412:	705a      	strb	r2, [r3, #1]
 8017414:	68a2      	ldr	r2, [r4, #8]
 8017416:	6923      	ldr	r3, [r4, #16]
 8017418:	3202      	adds	r2, #2
 801741a:	3302      	adds	r3, #2
 801741c:	2102      	movs	r1, #2
 801741e:	60a2      	str	r2, [r4, #8]
 8017420:	6123      	str	r3, [r4, #16]
 8017422:	7561      	strb	r1, [r4, #21]
 8017424:	7da0      	ldrb	r0, [r4, #22]
 8017426:	f080 0001 	eor.w	r0, r0, #1
 801742a:	b003      	add	sp, #12
 801742c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017430:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017434:	801a      	strh	r2, [r3, #0]
 8017436:	e7ed      	b.n	8017414 <ucdr_serialize_endian_uint16_t+0x9c>
 8017438:	68a2      	ldr	r2, [r4, #8]
 801743a:	6923      	ldr	r3, [r4, #16]
 801743c:	7da0      	ldrb	r0, [r4, #22]
 801743e:	f884 8015 	strb.w	r8, [r4, #21]
 8017442:	1b92      	subs	r2, r2, r6
 8017444:	1b9b      	subs	r3, r3, r6
 8017446:	f080 0001 	eor.w	r0, r0, #1
 801744a:	60a2      	str	r2, [r4, #8]
 801744c:	6123      	str	r3, [r4, #16]
 801744e:	b003      	add	sp, #12
 8017450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017454:	68a3      	ldr	r3, [r4, #8]
 8017456:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801745a:	701a      	strb	r2, [r3, #0]
 801745c:	e7bc      	b.n	80173d8 <ucdr_serialize_endian_uint16_t+0x60>
 801745e:	f10d 0506 	add.w	r5, sp, #6
 8017462:	4629      	mov	r1, r5
 8017464:	4632      	mov	r2, r6
 8017466:	4638      	mov	r0, r7
 8017468:	f001 fe18 	bl	801909c <memcpy>
 801746c:	68a0      	ldr	r0, [r4, #8]
 801746e:	464a      	mov	r2, r9
 8017470:	19a9      	adds	r1, r5, r6
 8017472:	f001 fe13 	bl	801909c <memcpy>
 8017476:	e7af      	b.n	80173d8 <ucdr_serialize_endian_uint16_t+0x60>

08017478 <ucdr_deserialize_uint16_t>:
 8017478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801747c:	460d      	mov	r5, r1
 801747e:	2102      	movs	r1, #2
 8017480:	4604      	mov	r4, r0
 8017482:	f7f8 ff39 	bl	80102f8 <ucdr_buffer_alignment>
 8017486:	4601      	mov	r1, r0
 8017488:	4620      	mov	r0, r4
 801748a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801748e:	f7f8 ff77 	bl	8010380 <ucdr_advance_buffer>
 8017492:	4620      	mov	r0, r4
 8017494:	2102      	movs	r1, #2
 8017496:	f7f8 fed1 	bl	801023c <ucdr_check_buffer_available_for>
 801749a:	bb60      	cbnz	r0, 80174f6 <ucdr_deserialize_uint16_t+0x7e>
 801749c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80174a0:	42be      	cmp	r6, r7
 80174a2:	d923      	bls.n	80174ec <ucdr_deserialize_uint16_t+0x74>
 80174a4:	6922      	ldr	r2, [r4, #16]
 80174a6:	60a6      	str	r6, [r4, #8]
 80174a8:	1bf6      	subs	r6, r6, r7
 80174aa:	4432      	add	r2, r6
 80174ac:	f1c6 0902 	rsb	r9, r6, #2
 80174b0:	6122      	str	r2, [r4, #16]
 80174b2:	4649      	mov	r1, r9
 80174b4:	4620      	mov	r0, r4
 80174b6:	f7f8 fecd 	bl	8010254 <ucdr_check_final_buffer_behavior>
 80174ba:	2800      	cmp	r0, #0
 80174bc:	d034      	beq.n	8017528 <ucdr_deserialize_uint16_t+0xb0>
 80174be:	7d23      	ldrb	r3, [r4, #20]
 80174c0:	2b01      	cmp	r3, #1
 80174c2:	d042      	beq.n	801754a <ucdr_deserialize_uint16_t+0xd2>
 80174c4:	787b      	ldrb	r3, [r7, #1]
 80174c6:	702b      	strb	r3, [r5, #0]
 80174c8:	2e00      	cmp	r6, #0
 80174ca:	d03a      	beq.n	8017542 <ucdr_deserialize_uint16_t+0xca>
 80174cc:	783b      	ldrb	r3, [r7, #0]
 80174ce:	706b      	strb	r3, [r5, #1]
 80174d0:	6923      	ldr	r3, [r4, #16]
 80174d2:	68a2      	ldr	r2, [r4, #8]
 80174d4:	7da0      	ldrb	r0, [r4, #22]
 80174d6:	2102      	movs	r1, #2
 80174d8:	3302      	adds	r3, #2
 80174da:	1b9b      	subs	r3, r3, r6
 80174dc:	444a      	add	r2, r9
 80174de:	7561      	strb	r1, [r4, #21]
 80174e0:	6123      	str	r3, [r4, #16]
 80174e2:	60a2      	str	r2, [r4, #8]
 80174e4:	f080 0001 	eor.w	r0, r0, #1
 80174e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174ec:	2102      	movs	r1, #2
 80174ee:	4620      	mov	r0, r4
 80174f0:	f7f8 feb0 	bl	8010254 <ucdr_check_final_buffer_behavior>
 80174f4:	b180      	cbz	r0, 8017518 <ucdr_deserialize_uint16_t+0xa0>
 80174f6:	7d23      	ldrb	r3, [r4, #20]
 80174f8:	2b01      	cmp	r3, #1
 80174fa:	68a3      	ldr	r3, [r4, #8]
 80174fc:	d011      	beq.n	8017522 <ucdr_deserialize_uint16_t+0xaa>
 80174fe:	785b      	ldrb	r3, [r3, #1]
 8017500:	702b      	strb	r3, [r5, #0]
 8017502:	68a3      	ldr	r3, [r4, #8]
 8017504:	781b      	ldrb	r3, [r3, #0]
 8017506:	706b      	strb	r3, [r5, #1]
 8017508:	68a2      	ldr	r2, [r4, #8]
 801750a:	6923      	ldr	r3, [r4, #16]
 801750c:	3202      	adds	r2, #2
 801750e:	3302      	adds	r3, #2
 8017510:	2102      	movs	r1, #2
 8017512:	60a2      	str	r2, [r4, #8]
 8017514:	6123      	str	r3, [r4, #16]
 8017516:	7561      	strb	r1, [r4, #21]
 8017518:	7da0      	ldrb	r0, [r4, #22]
 801751a:	f080 0001 	eor.w	r0, r0, #1
 801751e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017522:	881b      	ldrh	r3, [r3, #0]
 8017524:	802b      	strh	r3, [r5, #0]
 8017526:	e7ef      	b.n	8017508 <ucdr_deserialize_uint16_t+0x90>
 8017528:	68a2      	ldr	r2, [r4, #8]
 801752a:	6923      	ldr	r3, [r4, #16]
 801752c:	7da0      	ldrb	r0, [r4, #22]
 801752e:	f884 8015 	strb.w	r8, [r4, #21]
 8017532:	1b92      	subs	r2, r2, r6
 8017534:	1b9b      	subs	r3, r3, r6
 8017536:	60a2      	str	r2, [r4, #8]
 8017538:	6123      	str	r3, [r4, #16]
 801753a:	f080 0001 	eor.w	r0, r0, #1
 801753e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017542:	68a3      	ldr	r3, [r4, #8]
 8017544:	781b      	ldrb	r3, [r3, #0]
 8017546:	706b      	strb	r3, [r5, #1]
 8017548:	e7c2      	b.n	80174d0 <ucdr_deserialize_uint16_t+0x58>
 801754a:	4639      	mov	r1, r7
 801754c:	4632      	mov	r2, r6
 801754e:	4628      	mov	r0, r5
 8017550:	f001 fda4 	bl	801909c <memcpy>
 8017554:	68a1      	ldr	r1, [r4, #8]
 8017556:	464a      	mov	r2, r9
 8017558:	19a8      	adds	r0, r5, r6
 801755a:	f001 fd9f 	bl	801909c <memcpy>
 801755e:	e7b7      	b.n	80174d0 <ucdr_deserialize_uint16_t+0x58>

08017560 <ucdr_deserialize_endian_uint16_t>:
 8017560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017564:	460e      	mov	r6, r1
 8017566:	2102      	movs	r1, #2
 8017568:	4604      	mov	r4, r0
 801756a:	4615      	mov	r5, r2
 801756c:	f7f8 fec4 	bl	80102f8 <ucdr_buffer_alignment>
 8017570:	4601      	mov	r1, r0
 8017572:	4620      	mov	r0, r4
 8017574:	f894 9015 	ldrb.w	r9, [r4, #21]
 8017578:	f7f8 ff02 	bl	8010380 <ucdr_advance_buffer>
 801757c:	4620      	mov	r0, r4
 801757e:	2102      	movs	r1, #2
 8017580:	f7f8 fe5c 	bl	801023c <ucdr_check_buffer_available_for>
 8017584:	bb70      	cbnz	r0, 80175e4 <ucdr_deserialize_endian_uint16_t+0x84>
 8017586:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 801758a:	4547      	cmp	r7, r8
 801758c:	d925      	bls.n	80175da <ucdr_deserialize_endian_uint16_t+0x7a>
 801758e:	6922      	ldr	r2, [r4, #16]
 8017590:	60a7      	str	r7, [r4, #8]
 8017592:	eba7 0708 	sub.w	r7, r7, r8
 8017596:	443a      	add	r2, r7
 8017598:	f1c7 0a02 	rsb	sl, r7, #2
 801759c:	6122      	str	r2, [r4, #16]
 801759e:	4651      	mov	r1, sl
 80175a0:	4620      	mov	r0, r4
 80175a2:	f7f8 fe57 	bl	8010254 <ucdr_check_final_buffer_behavior>
 80175a6:	2800      	cmp	r0, #0
 80175a8:	d034      	beq.n	8017614 <ucdr_deserialize_endian_uint16_t+0xb4>
 80175aa:	2e01      	cmp	r6, #1
 80175ac:	d043      	beq.n	8017636 <ucdr_deserialize_endian_uint16_t+0xd6>
 80175ae:	f898 3001 	ldrb.w	r3, [r8, #1]
 80175b2:	702b      	strb	r3, [r5, #0]
 80175b4:	2f00      	cmp	r7, #0
 80175b6:	d03a      	beq.n	801762e <ucdr_deserialize_endian_uint16_t+0xce>
 80175b8:	f898 3000 	ldrb.w	r3, [r8]
 80175bc:	706b      	strb	r3, [r5, #1]
 80175be:	6923      	ldr	r3, [r4, #16]
 80175c0:	68a2      	ldr	r2, [r4, #8]
 80175c2:	7da0      	ldrb	r0, [r4, #22]
 80175c4:	2102      	movs	r1, #2
 80175c6:	3302      	adds	r3, #2
 80175c8:	1bdb      	subs	r3, r3, r7
 80175ca:	4452      	add	r2, sl
 80175cc:	7561      	strb	r1, [r4, #21]
 80175ce:	6123      	str	r3, [r4, #16]
 80175d0:	60a2      	str	r2, [r4, #8]
 80175d2:	f080 0001 	eor.w	r0, r0, #1
 80175d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175da:	2102      	movs	r1, #2
 80175dc:	4620      	mov	r0, r4
 80175de:	f7f8 fe39 	bl	8010254 <ucdr_check_final_buffer_behavior>
 80175e2:	b178      	cbz	r0, 8017604 <ucdr_deserialize_endian_uint16_t+0xa4>
 80175e4:	2e01      	cmp	r6, #1
 80175e6:	68a3      	ldr	r3, [r4, #8]
 80175e8:	d011      	beq.n	801760e <ucdr_deserialize_endian_uint16_t+0xae>
 80175ea:	785b      	ldrb	r3, [r3, #1]
 80175ec:	702b      	strb	r3, [r5, #0]
 80175ee:	68a3      	ldr	r3, [r4, #8]
 80175f0:	781b      	ldrb	r3, [r3, #0]
 80175f2:	706b      	strb	r3, [r5, #1]
 80175f4:	68a2      	ldr	r2, [r4, #8]
 80175f6:	6923      	ldr	r3, [r4, #16]
 80175f8:	3202      	adds	r2, #2
 80175fa:	3302      	adds	r3, #2
 80175fc:	2102      	movs	r1, #2
 80175fe:	60a2      	str	r2, [r4, #8]
 8017600:	6123      	str	r3, [r4, #16]
 8017602:	7561      	strb	r1, [r4, #21]
 8017604:	7da0      	ldrb	r0, [r4, #22]
 8017606:	f080 0001 	eor.w	r0, r0, #1
 801760a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801760e:	881b      	ldrh	r3, [r3, #0]
 8017610:	802b      	strh	r3, [r5, #0]
 8017612:	e7ef      	b.n	80175f4 <ucdr_deserialize_endian_uint16_t+0x94>
 8017614:	68a2      	ldr	r2, [r4, #8]
 8017616:	6923      	ldr	r3, [r4, #16]
 8017618:	7da0      	ldrb	r0, [r4, #22]
 801761a:	f884 9015 	strb.w	r9, [r4, #21]
 801761e:	1bd2      	subs	r2, r2, r7
 8017620:	1bdb      	subs	r3, r3, r7
 8017622:	60a2      	str	r2, [r4, #8]
 8017624:	6123      	str	r3, [r4, #16]
 8017626:	f080 0001 	eor.w	r0, r0, #1
 801762a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801762e:	68a3      	ldr	r3, [r4, #8]
 8017630:	781b      	ldrb	r3, [r3, #0]
 8017632:	706b      	strb	r3, [r5, #1]
 8017634:	e7c3      	b.n	80175be <ucdr_deserialize_endian_uint16_t+0x5e>
 8017636:	4641      	mov	r1, r8
 8017638:	463a      	mov	r2, r7
 801763a:	4628      	mov	r0, r5
 801763c:	f001 fd2e 	bl	801909c <memcpy>
 8017640:	68a1      	ldr	r1, [r4, #8]
 8017642:	4652      	mov	r2, sl
 8017644:	19e8      	adds	r0, r5, r7
 8017646:	f001 fd29 	bl	801909c <memcpy>
 801764a:	e7b8      	b.n	80175be <ucdr_deserialize_endian_uint16_t+0x5e>

0801764c <ucdr_serialize_uint32_t>:
 801764c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017650:	b082      	sub	sp, #8
 8017652:	4604      	mov	r4, r0
 8017654:	9101      	str	r1, [sp, #4]
 8017656:	2104      	movs	r1, #4
 8017658:	f7f8 fe4e 	bl	80102f8 <ucdr_buffer_alignment>
 801765c:	4601      	mov	r1, r0
 801765e:	4620      	mov	r0, r4
 8017660:	7d67      	ldrb	r7, [r4, #21]
 8017662:	f7f8 fe8d 	bl	8010380 <ucdr_advance_buffer>
 8017666:	4620      	mov	r0, r4
 8017668:	2104      	movs	r1, #4
 801766a:	f7f8 fde7 	bl	801023c <ucdr_check_buffer_available_for>
 801766e:	2800      	cmp	r0, #0
 8017670:	d139      	bne.n	80176e6 <ucdr_serialize_uint32_t+0x9a>
 8017672:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8017676:	42ae      	cmp	r6, r5
 8017678:	d930      	bls.n	80176dc <ucdr_serialize_uint32_t+0x90>
 801767a:	6922      	ldr	r2, [r4, #16]
 801767c:	60a6      	str	r6, [r4, #8]
 801767e:	1b76      	subs	r6, r6, r5
 8017680:	4432      	add	r2, r6
 8017682:	f1c6 0804 	rsb	r8, r6, #4
 8017686:	6122      	str	r2, [r4, #16]
 8017688:	4641      	mov	r1, r8
 801768a:	4620      	mov	r0, r4
 801768c:	f7f8 fde2 	bl	8010254 <ucdr_check_final_buffer_behavior>
 8017690:	2800      	cmp	r0, #0
 8017692:	d04c      	beq.n	801772e <ucdr_serialize_uint32_t+0xe2>
 8017694:	7d23      	ldrb	r3, [r4, #20]
 8017696:	2b01      	cmp	r3, #1
 8017698:	d063      	beq.n	8017762 <ucdr_serialize_uint32_t+0x116>
 801769a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801769e:	702b      	strb	r3, [r5, #0]
 80176a0:	2e00      	cmp	r6, #0
 80176a2:	d051      	beq.n	8017748 <ucdr_serialize_uint32_t+0xfc>
 80176a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80176a8:	706b      	strb	r3, [r5, #1]
 80176aa:	2e01      	cmp	r6, #1
 80176ac:	d050      	beq.n	8017750 <ucdr_serialize_uint32_t+0x104>
 80176ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80176b2:	70ab      	strb	r3, [r5, #2]
 80176b4:	2e02      	cmp	r6, #2
 80176b6:	d04f      	beq.n	8017758 <ucdr_serialize_uint32_t+0x10c>
 80176b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80176bc:	70eb      	strb	r3, [r5, #3]
 80176be:	6923      	ldr	r3, [r4, #16]
 80176c0:	68a2      	ldr	r2, [r4, #8]
 80176c2:	7da0      	ldrb	r0, [r4, #22]
 80176c4:	3304      	adds	r3, #4
 80176c6:	1b9b      	subs	r3, r3, r6
 80176c8:	4442      	add	r2, r8
 80176ca:	2104      	movs	r1, #4
 80176cc:	f080 0001 	eor.w	r0, r0, #1
 80176d0:	6123      	str	r3, [r4, #16]
 80176d2:	60a2      	str	r2, [r4, #8]
 80176d4:	7561      	strb	r1, [r4, #21]
 80176d6:	b002      	add	sp, #8
 80176d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176dc:	2104      	movs	r1, #4
 80176de:	4620      	mov	r0, r4
 80176e0:	f7f8 fdb8 	bl	8010254 <ucdr_check_final_buffer_behavior>
 80176e4:	b1d0      	cbz	r0, 801771c <ucdr_serialize_uint32_t+0xd0>
 80176e6:	7d23      	ldrb	r3, [r4, #20]
 80176e8:	2b01      	cmp	r3, #1
 80176ea:	68a3      	ldr	r3, [r4, #8]
 80176ec:	d01c      	beq.n	8017728 <ucdr_serialize_uint32_t+0xdc>
 80176ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80176f2:	701a      	strb	r2, [r3, #0]
 80176f4:	68a3      	ldr	r3, [r4, #8]
 80176f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80176fa:	705a      	strb	r2, [r3, #1]
 80176fc:	68a3      	ldr	r3, [r4, #8]
 80176fe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017702:	709a      	strb	r2, [r3, #2]
 8017704:	68a3      	ldr	r3, [r4, #8]
 8017706:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801770a:	70da      	strb	r2, [r3, #3]
 801770c:	68a2      	ldr	r2, [r4, #8]
 801770e:	6923      	ldr	r3, [r4, #16]
 8017710:	3204      	adds	r2, #4
 8017712:	3304      	adds	r3, #4
 8017714:	2104      	movs	r1, #4
 8017716:	60a2      	str	r2, [r4, #8]
 8017718:	6123      	str	r3, [r4, #16]
 801771a:	7561      	strb	r1, [r4, #21]
 801771c:	7da0      	ldrb	r0, [r4, #22]
 801771e:	f080 0001 	eor.w	r0, r0, #1
 8017722:	b002      	add	sp, #8
 8017724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017728:	9a01      	ldr	r2, [sp, #4]
 801772a:	601a      	str	r2, [r3, #0]
 801772c:	e7ee      	b.n	801770c <ucdr_serialize_uint32_t+0xc0>
 801772e:	68a2      	ldr	r2, [r4, #8]
 8017730:	6923      	ldr	r3, [r4, #16]
 8017732:	7da0      	ldrb	r0, [r4, #22]
 8017734:	7567      	strb	r7, [r4, #21]
 8017736:	1b92      	subs	r2, r2, r6
 8017738:	1b9b      	subs	r3, r3, r6
 801773a:	f080 0001 	eor.w	r0, r0, #1
 801773e:	60a2      	str	r2, [r4, #8]
 8017740:	6123      	str	r3, [r4, #16]
 8017742:	b002      	add	sp, #8
 8017744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017748:	68a3      	ldr	r3, [r4, #8]
 801774a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801774e:	701a      	strb	r2, [r3, #0]
 8017750:	68a3      	ldr	r3, [r4, #8]
 8017752:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017756:	701a      	strb	r2, [r3, #0]
 8017758:	68a3      	ldr	r3, [r4, #8]
 801775a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801775e:	701a      	strb	r2, [r3, #0]
 8017760:	e7ad      	b.n	80176be <ucdr_serialize_uint32_t+0x72>
 8017762:	4628      	mov	r0, r5
 8017764:	ad01      	add	r5, sp, #4
 8017766:	4629      	mov	r1, r5
 8017768:	4632      	mov	r2, r6
 801776a:	f001 fc97 	bl	801909c <memcpy>
 801776e:	68a0      	ldr	r0, [r4, #8]
 8017770:	4642      	mov	r2, r8
 8017772:	19a9      	adds	r1, r5, r6
 8017774:	f001 fc92 	bl	801909c <memcpy>
 8017778:	e7a1      	b.n	80176be <ucdr_serialize_uint32_t+0x72>
 801777a:	bf00      	nop

0801777c <ucdr_serialize_endian_uint32_t>:
 801777c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017780:	b083      	sub	sp, #12
 8017782:	460d      	mov	r5, r1
 8017784:	2104      	movs	r1, #4
 8017786:	4604      	mov	r4, r0
 8017788:	9201      	str	r2, [sp, #4]
 801778a:	f7f8 fdb5 	bl	80102f8 <ucdr_buffer_alignment>
 801778e:	4601      	mov	r1, r0
 8017790:	4620      	mov	r0, r4
 8017792:	f894 8015 	ldrb.w	r8, [r4, #21]
 8017796:	f7f8 fdf3 	bl	8010380 <ucdr_advance_buffer>
 801779a:	4620      	mov	r0, r4
 801779c:	2104      	movs	r1, #4
 801779e:	f7f8 fd4d 	bl	801023c <ucdr_check_buffer_available_for>
 80177a2:	2800      	cmp	r0, #0
 80177a4:	d138      	bne.n	8017818 <ucdr_serialize_endian_uint32_t+0x9c>
 80177a6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80177aa:	42b7      	cmp	r7, r6
 80177ac:	d92f      	bls.n	801780e <ucdr_serialize_endian_uint32_t+0x92>
 80177ae:	6922      	ldr	r2, [r4, #16]
 80177b0:	60a7      	str	r7, [r4, #8]
 80177b2:	1bbf      	subs	r7, r7, r6
 80177b4:	443a      	add	r2, r7
 80177b6:	f1c7 0904 	rsb	r9, r7, #4
 80177ba:	6122      	str	r2, [r4, #16]
 80177bc:	4649      	mov	r1, r9
 80177be:	4620      	mov	r0, r4
 80177c0:	f7f8 fd48 	bl	8010254 <ucdr_check_final_buffer_behavior>
 80177c4:	2800      	cmp	r0, #0
 80177c6:	d04a      	beq.n	801785e <ucdr_serialize_endian_uint32_t+0xe2>
 80177c8:	2d01      	cmp	r5, #1
 80177ca:	d063      	beq.n	8017894 <ucdr_serialize_endian_uint32_t+0x118>
 80177cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80177d0:	7033      	strb	r3, [r6, #0]
 80177d2:	2f00      	cmp	r7, #0
 80177d4:	d051      	beq.n	801787a <ucdr_serialize_endian_uint32_t+0xfe>
 80177d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80177da:	7073      	strb	r3, [r6, #1]
 80177dc:	2f01      	cmp	r7, #1
 80177de:	d050      	beq.n	8017882 <ucdr_serialize_endian_uint32_t+0x106>
 80177e0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80177e4:	70b3      	strb	r3, [r6, #2]
 80177e6:	2f02      	cmp	r7, #2
 80177e8:	d04f      	beq.n	801788a <ucdr_serialize_endian_uint32_t+0x10e>
 80177ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80177ee:	70f3      	strb	r3, [r6, #3]
 80177f0:	6923      	ldr	r3, [r4, #16]
 80177f2:	68a2      	ldr	r2, [r4, #8]
 80177f4:	7da0      	ldrb	r0, [r4, #22]
 80177f6:	3304      	adds	r3, #4
 80177f8:	1bdb      	subs	r3, r3, r7
 80177fa:	444a      	add	r2, r9
 80177fc:	2104      	movs	r1, #4
 80177fe:	f080 0001 	eor.w	r0, r0, #1
 8017802:	6123      	str	r3, [r4, #16]
 8017804:	60a2      	str	r2, [r4, #8]
 8017806:	7561      	strb	r1, [r4, #21]
 8017808:	b003      	add	sp, #12
 801780a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801780e:	2104      	movs	r1, #4
 8017810:	4620      	mov	r0, r4
 8017812:	f7f8 fd1f 	bl	8010254 <ucdr_check_final_buffer_behavior>
 8017816:	b1c8      	cbz	r0, 801784c <ucdr_serialize_endian_uint32_t+0xd0>
 8017818:	2d01      	cmp	r5, #1
 801781a:	68a3      	ldr	r3, [r4, #8]
 801781c:	d01c      	beq.n	8017858 <ucdr_serialize_endian_uint32_t+0xdc>
 801781e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017822:	701a      	strb	r2, [r3, #0]
 8017824:	68a3      	ldr	r3, [r4, #8]
 8017826:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801782a:	705a      	strb	r2, [r3, #1]
 801782c:	68a3      	ldr	r3, [r4, #8]
 801782e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017832:	709a      	strb	r2, [r3, #2]
 8017834:	68a3      	ldr	r3, [r4, #8]
 8017836:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801783a:	70da      	strb	r2, [r3, #3]
 801783c:	68a2      	ldr	r2, [r4, #8]
 801783e:	6923      	ldr	r3, [r4, #16]
 8017840:	3204      	adds	r2, #4
 8017842:	3304      	adds	r3, #4
 8017844:	2104      	movs	r1, #4
 8017846:	60a2      	str	r2, [r4, #8]
 8017848:	6123      	str	r3, [r4, #16]
 801784a:	7561      	strb	r1, [r4, #21]
 801784c:	7da0      	ldrb	r0, [r4, #22]
 801784e:	f080 0001 	eor.w	r0, r0, #1
 8017852:	b003      	add	sp, #12
 8017854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017858:	9a01      	ldr	r2, [sp, #4]
 801785a:	601a      	str	r2, [r3, #0]
 801785c:	e7ee      	b.n	801783c <ucdr_serialize_endian_uint32_t+0xc0>
 801785e:	68a2      	ldr	r2, [r4, #8]
 8017860:	6923      	ldr	r3, [r4, #16]
 8017862:	7da0      	ldrb	r0, [r4, #22]
 8017864:	f884 8015 	strb.w	r8, [r4, #21]
 8017868:	1bd2      	subs	r2, r2, r7
 801786a:	1bdb      	subs	r3, r3, r7
 801786c:	f080 0001 	eor.w	r0, r0, #1
 8017870:	60a2      	str	r2, [r4, #8]
 8017872:	6123      	str	r3, [r4, #16]
 8017874:	b003      	add	sp, #12
 8017876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801787a:	68a3      	ldr	r3, [r4, #8]
 801787c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017880:	701a      	strb	r2, [r3, #0]
 8017882:	68a3      	ldr	r3, [r4, #8]
 8017884:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017888:	701a      	strb	r2, [r3, #0]
 801788a:	68a3      	ldr	r3, [r4, #8]
 801788c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017890:	701a      	strb	r2, [r3, #0]
 8017892:	e7ad      	b.n	80177f0 <ucdr_serialize_endian_uint32_t+0x74>
 8017894:	ad01      	add	r5, sp, #4
 8017896:	4629      	mov	r1, r5
 8017898:	463a      	mov	r2, r7
 801789a:	4630      	mov	r0, r6
 801789c:	f001 fbfe 	bl	801909c <memcpy>
 80178a0:	68a0      	ldr	r0, [r4, #8]
 80178a2:	464a      	mov	r2, r9
 80178a4:	19e9      	adds	r1, r5, r7
 80178a6:	f001 fbf9 	bl	801909c <memcpy>
 80178aa:	e7a1      	b.n	80177f0 <ucdr_serialize_endian_uint32_t+0x74>

080178ac <ucdr_deserialize_uint32_t>:
 80178ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178b0:	460d      	mov	r5, r1
 80178b2:	2104      	movs	r1, #4
 80178b4:	4604      	mov	r4, r0
 80178b6:	f7f8 fd1f 	bl	80102f8 <ucdr_buffer_alignment>
 80178ba:	4601      	mov	r1, r0
 80178bc:	4620      	mov	r0, r4
 80178be:	f894 8015 	ldrb.w	r8, [r4, #21]
 80178c2:	f7f8 fd5d 	bl	8010380 <ucdr_advance_buffer>
 80178c6:	4620      	mov	r0, r4
 80178c8:	2104      	movs	r1, #4
 80178ca:	f7f8 fcb7 	bl	801023c <ucdr_check_buffer_available_for>
 80178ce:	2800      	cmp	r0, #0
 80178d0:	d138      	bne.n	8017944 <ucdr_deserialize_uint32_t+0x98>
 80178d2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80178d6:	42b7      	cmp	r7, r6
 80178d8:	d92f      	bls.n	801793a <ucdr_deserialize_uint32_t+0x8e>
 80178da:	6922      	ldr	r2, [r4, #16]
 80178dc:	60a7      	str	r7, [r4, #8]
 80178de:	1bbf      	subs	r7, r7, r6
 80178e0:	443a      	add	r2, r7
 80178e2:	f1c7 0904 	rsb	r9, r7, #4
 80178e6:	6122      	str	r2, [r4, #16]
 80178e8:	4649      	mov	r1, r9
 80178ea:	4620      	mov	r0, r4
 80178ec:	f7f8 fcb2 	bl	8010254 <ucdr_check_final_buffer_behavior>
 80178f0:	2800      	cmp	r0, #0
 80178f2:	d046      	beq.n	8017982 <ucdr_deserialize_uint32_t+0xd6>
 80178f4:	7d23      	ldrb	r3, [r4, #20]
 80178f6:	2b01      	cmp	r3, #1
 80178f8:	d05c      	beq.n	80179b4 <ucdr_deserialize_uint32_t+0x108>
 80178fa:	78f3      	ldrb	r3, [r6, #3]
 80178fc:	702b      	strb	r3, [r5, #0]
 80178fe:	2f00      	cmp	r7, #0
 8017900:	d04c      	beq.n	801799c <ucdr_deserialize_uint32_t+0xf0>
 8017902:	78b3      	ldrb	r3, [r6, #2]
 8017904:	706b      	strb	r3, [r5, #1]
 8017906:	2f01      	cmp	r7, #1
 8017908:	f105 0302 	add.w	r3, r5, #2
 801790c:	d04a      	beq.n	80179a4 <ucdr_deserialize_uint32_t+0xf8>
 801790e:	7873      	ldrb	r3, [r6, #1]
 8017910:	70ab      	strb	r3, [r5, #2]
 8017912:	2f02      	cmp	r7, #2
 8017914:	f105 0303 	add.w	r3, r5, #3
 8017918:	d048      	beq.n	80179ac <ucdr_deserialize_uint32_t+0x100>
 801791a:	7833      	ldrb	r3, [r6, #0]
 801791c:	70eb      	strb	r3, [r5, #3]
 801791e:	6923      	ldr	r3, [r4, #16]
 8017920:	68a2      	ldr	r2, [r4, #8]
 8017922:	7da0      	ldrb	r0, [r4, #22]
 8017924:	2104      	movs	r1, #4
 8017926:	3304      	adds	r3, #4
 8017928:	1bdb      	subs	r3, r3, r7
 801792a:	444a      	add	r2, r9
 801792c:	7561      	strb	r1, [r4, #21]
 801792e:	6123      	str	r3, [r4, #16]
 8017930:	60a2      	str	r2, [r4, #8]
 8017932:	f080 0001 	eor.w	r0, r0, #1
 8017936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801793a:	2104      	movs	r1, #4
 801793c:	4620      	mov	r0, r4
 801793e:	f7f8 fc89 	bl	8010254 <ucdr_check_final_buffer_behavior>
 8017942:	b1b0      	cbz	r0, 8017972 <ucdr_deserialize_uint32_t+0xc6>
 8017944:	7d23      	ldrb	r3, [r4, #20]
 8017946:	2b01      	cmp	r3, #1
 8017948:	68a3      	ldr	r3, [r4, #8]
 801794a:	d017      	beq.n	801797c <ucdr_deserialize_uint32_t+0xd0>
 801794c:	78db      	ldrb	r3, [r3, #3]
 801794e:	702b      	strb	r3, [r5, #0]
 8017950:	68a3      	ldr	r3, [r4, #8]
 8017952:	789b      	ldrb	r3, [r3, #2]
 8017954:	706b      	strb	r3, [r5, #1]
 8017956:	68a3      	ldr	r3, [r4, #8]
 8017958:	785b      	ldrb	r3, [r3, #1]
 801795a:	70ab      	strb	r3, [r5, #2]
 801795c:	68a3      	ldr	r3, [r4, #8]
 801795e:	781b      	ldrb	r3, [r3, #0]
 8017960:	70eb      	strb	r3, [r5, #3]
 8017962:	68a2      	ldr	r2, [r4, #8]
 8017964:	6923      	ldr	r3, [r4, #16]
 8017966:	3204      	adds	r2, #4
 8017968:	3304      	adds	r3, #4
 801796a:	2104      	movs	r1, #4
 801796c:	60a2      	str	r2, [r4, #8]
 801796e:	6123      	str	r3, [r4, #16]
 8017970:	7561      	strb	r1, [r4, #21]
 8017972:	7da0      	ldrb	r0, [r4, #22]
 8017974:	f080 0001 	eor.w	r0, r0, #1
 8017978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	602b      	str	r3, [r5, #0]
 8017980:	e7ef      	b.n	8017962 <ucdr_deserialize_uint32_t+0xb6>
 8017982:	68a2      	ldr	r2, [r4, #8]
 8017984:	6923      	ldr	r3, [r4, #16]
 8017986:	7da0      	ldrb	r0, [r4, #22]
 8017988:	f884 8015 	strb.w	r8, [r4, #21]
 801798c:	1bd2      	subs	r2, r2, r7
 801798e:	1bdb      	subs	r3, r3, r7
 8017990:	60a2      	str	r2, [r4, #8]
 8017992:	6123      	str	r3, [r4, #16]
 8017994:	f080 0001 	eor.w	r0, r0, #1
 8017998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801799c:	68a3      	ldr	r3, [r4, #8]
 801799e:	789b      	ldrb	r3, [r3, #2]
 80179a0:	706b      	strb	r3, [r5, #1]
 80179a2:	1cab      	adds	r3, r5, #2
 80179a4:	68a2      	ldr	r2, [r4, #8]
 80179a6:	7852      	ldrb	r2, [r2, #1]
 80179a8:	f803 2b01 	strb.w	r2, [r3], #1
 80179ac:	68a2      	ldr	r2, [r4, #8]
 80179ae:	7812      	ldrb	r2, [r2, #0]
 80179b0:	701a      	strb	r2, [r3, #0]
 80179b2:	e7b4      	b.n	801791e <ucdr_deserialize_uint32_t+0x72>
 80179b4:	4631      	mov	r1, r6
 80179b6:	463a      	mov	r2, r7
 80179b8:	4628      	mov	r0, r5
 80179ba:	f001 fb6f 	bl	801909c <memcpy>
 80179be:	68a1      	ldr	r1, [r4, #8]
 80179c0:	464a      	mov	r2, r9
 80179c2:	19e8      	adds	r0, r5, r7
 80179c4:	f001 fb6a 	bl	801909c <memcpy>
 80179c8:	e7a9      	b.n	801791e <ucdr_deserialize_uint32_t+0x72>
 80179ca:	bf00      	nop

080179cc <ucdr_deserialize_endian_uint32_t>:
 80179cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179d0:	460e      	mov	r6, r1
 80179d2:	2104      	movs	r1, #4
 80179d4:	4604      	mov	r4, r0
 80179d6:	4615      	mov	r5, r2
 80179d8:	f7f8 fc8e 	bl	80102f8 <ucdr_buffer_alignment>
 80179dc:	4601      	mov	r1, r0
 80179de:	4620      	mov	r0, r4
 80179e0:	f894 9015 	ldrb.w	r9, [r4, #21]
 80179e4:	f7f8 fccc 	bl	8010380 <ucdr_advance_buffer>
 80179e8:	4620      	mov	r0, r4
 80179ea:	2104      	movs	r1, #4
 80179ec:	f7f8 fc26 	bl	801023c <ucdr_check_buffer_available_for>
 80179f0:	2800      	cmp	r0, #0
 80179f2:	d13c      	bne.n	8017a6e <ucdr_deserialize_endian_uint32_t+0xa2>
 80179f4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80179f8:	42bb      	cmp	r3, r7
 80179fa:	d933      	bls.n	8017a64 <ucdr_deserialize_endian_uint32_t+0x98>
 80179fc:	6922      	ldr	r2, [r4, #16]
 80179fe:	60a3      	str	r3, [r4, #8]
 8017a00:	eba3 0807 	sub.w	r8, r3, r7
 8017a04:	4442      	add	r2, r8
 8017a06:	f1c8 0a04 	rsb	sl, r8, #4
 8017a0a:	6122      	str	r2, [r4, #16]
 8017a0c:	4651      	mov	r1, sl
 8017a0e:	4620      	mov	r0, r4
 8017a10:	f7f8 fc20 	bl	8010254 <ucdr_check_final_buffer_behavior>
 8017a14:	2800      	cmp	r0, #0
 8017a16:	d048      	beq.n	8017aaa <ucdr_deserialize_endian_uint32_t+0xde>
 8017a18:	2e01      	cmp	r6, #1
 8017a1a:	d061      	beq.n	8017ae0 <ucdr_deserialize_endian_uint32_t+0x114>
 8017a1c:	78fb      	ldrb	r3, [r7, #3]
 8017a1e:	702b      	strb	r3, [r5, #0]
 8017a20:	f1b8 0f00 	cmp.w	r8, #0
 8017a24:	d050      	beq.n	8017ac8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8017a26:	78bb      	ldrb	r3, [r7, #2]
 8017a28:	706b      	strb	r3, [r5, #1]
 8017a2a:	f1b8 0f01 	cmp.w	r8, #1
 8017a2e:	f105 0302 	add.w	r3, r5, #2
 8017a32:	d04d      	beq.n	8017ad0 <ucdr_deserialize_endian_uint32_t+0x104>
 8017a34:	787b      	ldrb	r3, [r7, #1]
 8017a36:	70ab      	strb	r3, [r5, #2]
 8017a38:	f1b8 0f02 	cmp.w	r8, #2
 8017a3c:	f105 0303 	add.w	r3, r5, #3
 8017a40:	d04a      	beq.n	8017ad8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8017a42:	783b      	ldrb	r3, [r7, #0]
 8017a44:	70eb      	strb	r3, [r5, #3]
 8017a46:	6923      	ldr	r3, [r4, #16]
 8017a48:	68a2      	ldr	r2, [r4, #8]
 8017a4a:	7da0      	ldrb	r0, [r4, #22]
 8017a4c:	2104      	movs	r1, #4
 8017a4e:	3304      	adds	r3, #4
 8017a50:	eba3 0308 	sub.w	r3, r3, r8
 8017a54:	4452      	add	r2, sl
 8017a56:	7561      	strb	r1, [r4, #21]
 8017a58:	6123      	str	r3, [r4, #16]
 8017a5a:	60a2      	str	r2, [r4, #8]
 8017a5c:	f080 0001 	eor.w	r0, r0, #1
 8017a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a64:	2104      	movs	r1, #4
 8017a66:	4620      	mov	r0, r4
 8017a68:	f7f8 fbf4 	bl	8010254 <ucdr_check_final_buffer_behavior>
 8017a6c:	b1a8      	cbz	r0, 8017a9a <ucdr_deserialize_endian_uint32_t+0xce>
 8017a6e:	2e01      	cmp	r6, #1
 8017a70:	68a3      	ldr	r3, [r4, #8]
 8017a72:	d017      	beq.n	8017aa4 <ucdr_deserialize_endian_uint32_t+0xd8>
 8017a74:	78db      	ldrb	r3, [r3, #3]
 8017a76:	702b      	strb	r3, [r5, #0]
 8017a78:	68a3      	ldr	r3, [r4, #8]
 8017a7a:	789b      	ldrb	r3, [r3, #2]
 8017a7c:	706b      	strb	r3, [r5, #1]
 8017a7e:	68a3      	ldr	r3, [r4, #8]
 8017a80:	785b      	ldrb	r3, [r3, #1]
 8017a82:	70ab      	strb	r3, [r5, #2]
 8017a84:	68a3      	ldr	r3, [r4, #8]
 8017a86:	781b      	ldrb	r3, [r3, #0]
 8017a88:	70eb      	strb	r3, [r5, #3]
 8017a8a:	68a2      	ldr	r2, [r4, #8]
 8017a8c:	6923      	ldr	r3, [r4, #16]
 8017a8e:	3204      	adds	r2, #4
 8017a90:	3304      	adds	r3, #4
 8017a92:	2104      	movs	r1, #4
 8017a94:	60a2      	str	r2, [r4, #8]
 8017a96:	6123      	str	r3, [r4, #16]
 8017a98:	7561      	strb	r1, [r4, #21]
 8017a9a:	7da0      	ldrb	r0, [r4, #22]
 8017a9c:	f080 0001 	eor.w	r0, r0, #1
 8017aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	602b      	str	r3, [r5, #0]
 8017aa8:	e7ef      	b.n	8017a8a <ucdr_deserialize_endian_uint32_t+0xbe>
 8017aaa:	68a2      	ldr	r2, [r4, #8]
 8017aac:	6923      	ldr	r3, [r4, #16]
 8017aae:	7da0      	ldrb	r0, [r4, #22]
 8017ab0:	f884 9015 	strb.w	r9, [r4, #21]
 8017ab4:	eba2 0208 	sub.w	r2, r2, r8
 8017ab8:	eba3 0308 	sub.w	r3, r3, r8
 8017abc:	60a2      	str	r2, [r4, #8]
 8017abe:	6123      	str	r3, [r4, #16]
 8017ac0:	f080 0001 	eor.w	r0, r0, #1
 8017ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ac8:	68a3      	ldr	r3, [r4, #8]
 8017aca:	789b      	ldrb	r3, [r3, #2]
 8017acc:	706b      	strb	r3, [r5, #1]
 8017ace:	1cab      	adds	r3, r5, #2
 8017ad0:	68a2      	ldr	r2, [r4, #8]
 8017ad2:	7852      	ldrb	r2, [r2, #1]
 8017ad4:	f803 2b01 	strb.w	r2, [r3], #1
 8017ad8:	68a2      	ldr	r2, [r4, #8]
 8017ada:	7812      	ldrb	r2, [r2, #0]
 8017adc:	701a      	strb	r2, [r3, #0]
 8017ade:	e7b2      	b.n	8017a46 <ucdr_deserialize_endian_uint32_t+0x7a>
 8017ae0:	4639      	mov	r1, r7
 8017ae2:	4642      	mov	r2, r8
 8017ae4:	4628      	mov	r0, r5
 8017ae6:	f001 fad9 	bl	801909c <memcpy>
 8017aea:	68a1      	ldr	r1, [r4, #8]
 8017aec:	4652      	mov	r2, sl
 8017aee:	eb05 0008 	add.w	r0, r5, r8
 8017af2:	f001 fad3 	bl	801909c <memcpy>
 8017af6:	e7a6      	b.n	8017a46 <ucdr_deserialize_endian_uint32_t+0x7a>

08017af8 <ucdr_serialize_uint64_t>:
 8017af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017afc:	2108      	movs	r1, #8
 8017afe:	b082      	sub	sp, #8
 8017b00:	4604      	mov	r4, r0
 8017b02:	e9cd 2300 	strd	r2, r3, [sp]
 8017b06:	f7f8 fbf7 	bl	80102f8 <ucdr_buffer_alignment>
 8017b0a:	4601      	mov	r1, r0
 8017b0c:	4620      	mov	r0, r4
 8017b0e:	7d67      	ldrb	r7, [r4, #21]
 8017b10:	f7f8 fc36 	bl	8010380 <ucdr_advance_buffer>
 8017b14:	4620      	mov	r0, r4
 8017b16:	2108      	movs	r1, #8
 8017b18:	f7f8 fb90 	bl	801023c <ucdr_check_buffer_available_for>
 8017b1c:	2800      	cmp	r0, #0
 8017b1e:	d14e      	bne.n	8017bbe <ucdr_serialize_uint64_t+0xc6>
 8017b20:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8017b24:	42b5      	cmp	r5, r6
 8017b26:	d945      	bls.n	8017bb4 <ucdr_serialize_uint64_t+0xbc>
 8017b28:	6923      	ldr	r3, [r4, #16]
 8017b2a:	60a5      	str	r5, [r4, #8]
 8017b2c:	1bad      	subs	r5, r5, r6
 8017b2e:	442b      	add	r3, r5
 8017b30:	f1c5 0808 	rsb	r8, r5, #8
 8017b34:	6123      	str	r3, [r4, #16]
 8017b36:	4641      	mov	r1, r8
 8017b38:	4620      	mov	r0, r4
 8017b3a:	f7f8 fb8b 	bl	8010254 <ucdr_check_final_buffer_behavior>
 8017b3e:	2800      	cmp	r0, #0
 8017b40:	d074      	beq.n	8017c2c <ucdr_serialize_uint64_t+0x134>
 8017b42:	7d23      	ldrb	r3, [r4, #20]
 8017b44:	2b01      	cmp	r3, #1
 8017b46:	f000 809b 	beq.w	8017c80 <ucdr_serialize_uint64_t+0x188>
 8017b4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017b4e:	7033      	strb	r3, [r6, #0]
 8017b50:	2d00      	cmp	r5, #0
 8017b52:	d078      	beq.n	8017c46 <ucdr_serialize_uint64_t+0x14e>
 8017b54:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017b58:	7073      	strb	r3, [r6, #1]
 8017b5a:	2d01      	cmp	r5, #1
 8017b5c:	d077      	beq.n	8017c4e <ucdr_serialize_uint64_t+0x156>
 8017b5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8017b62:	70b3      	strb	r3, [r6, #2]
 8017b64:	2d02      	cmp	r5, #2
 8017b66:	d076      	beq.n	8017c56 <ucdr_serialize_uint64_t+0x15e>
 8017b68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8017b6c:	70f3      	strb	r3, [r6, #3]
 8017b6e:	2d03      	cmp	r5, #3
 8017b70:	d075      	beq.n	8017c5e <ucdr_serialize_uint64_t+0x166>
 8017b72:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8017b76:	7133      	strb	r3, [r6, #4]
 8017b78:	2d04      	cmp	r5, #4
 8017b7a:	d074      	beq.n	8017c66 <ucdr_serialize_uint64_t+0x16e>
 8017b7c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8017b80:	7173      	strb	r3, [r6, #5]
 8017b82:	2d05      	cmp	r5, #5
 8017b84:	d073      	beq.n	8017c6e <ucdr_serialize_uint64_t+0x176>
 8017b86:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8017b8a:	71b3      	strb	r3, [r6, #6]
 8017b8c:	2d06      	cmp	r5, #6
 8017b8e:	d072      	beq.n	8017c76 <ucdr_serialize_uint64_t+0x17e>
 8017b90:	f89d 3000 	ldrb.w	r3, [sp]
 8017b94:	71f3      	strb	r3, [r6, #7]
 8017b96:	6923      	ldr	r3, [r4, #16]
 8017b98:	68a2      	ldr	r2, [r4, #8]
 8017b9a:	7da0      	ldrb	r0, [r4, #22]
 8017b9c:	3308      	adds	r3, #8
 8017b9e:	1b5d      	subs	r5, r3, r5
 8017ba0:	4442      	add	r2, r8
 8017ba2:	2308      	movs	r3, #8
 8017ba4:	f080 0001 	eor.w	r0, r0, #1
 8017ba8:	6125      	str	r5, [r4, #16]
 8017baa:	60a2      	str	r2, [r4, #8]
 8017bac:	7563      	strb	r3, [r4, #21]
 8017bae:	b002      	add	sp, #8
 8017bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bb4:	2108      	movs	r1, #8
 8017bb6:	4620      	mov	r0, r4
 8017bb8:	f7f8 fb4c 	bl	8010254 <ucdr_check_final_buffer_behavior>
 8017bbc:	b350      	cbz	r0, 8017c14 <ucdr_serialize_uint64_t+0x11c>
 8017bbe:	7d23      	ldrb	r3, [r4, #20]
 8017bc0:	2b01      	cmp	r3, #1
 8017bc2:	d02d      	beq.n	8017c20 <ucdr_serialize_uint64_t+0x128>
 8017bc4:	68a3      	ldr	r3, [r4, #8]
 8017bc6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017bca:	701a      	strb	r2, [r3, #0]
 8017bcc:	68a3      	ldr	r3, [r4, #8]
 8017bce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017bd2:	705a      	strb	r2, [r3, #1]
 8017bd4:	68a3      	ldr	r3, [r4, #8]
 8017bd6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017bda:	709a      	strb	r2, [r3, #2]
 8017bdc:	68a3      	ldr	r3, [r4, #8]
 8017bde:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017be2:	70da      	strb	r2, [r3, #3]
 8017be4:	68a3      	ldr	r3, [r4, #8]
 8017be6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8017bea:	711a      	strb	r2, [r3, #4]
 8017bec:	68a3      	ldr	r3, [r4, #8]
 8017bee:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8017bf2:	715a      	strb	r2, [r3, #5]
 8017bf4:	68a3      	ldr	r3, [r4, #8]
 8017bf6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8017bfa:	719a      	strb	r2, [r3, #6]
 8017bfc:	68a3      	ldr	r3, [r4, #8]
 8017bfe:	f89d 2000 	ldrb.w	r2, [sp]
 8017c02:	71da      	strb	r2, [r3, #7]
 8017c04:	68a2      	ldr	r2, [r4, #8]
 8017c06:	6923      	ldr	r3, [r4, #16]
 8017c08:	3208      	adds	r2, #8
 8017c0a:	3308      	adds	r3, #8
 8017c0c:	2108      	movs	r1, #8
 8017c0e:	60a2      	str	r2, [r4, #8]
 8017c10:	6123      	str	r3, [r4, #16]
 8017c12:	7561      	strb	r1, [r4, #21]
 8017c14:	7da0      	ldrb	r0, [r4, #22]
 8017c16:	f080 0001 	eor.w	r0, r0, #1
 8017c1a:	b002      	add	sp, #8
 8017c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c20:	466b      	mov	r3, sp
 8017c22:	cb03      	ldmia	r3!, {r0, r1}
 8017c24:	68a3      	ldr	r3, [r4, #8]
 8017c26:	6018      	str	r0, [r3, #0]
 8017c28:	6059      	str	r1, [r3, #4]
 8017c2a:	e7eb      	b.n	8017c04 <ucdr_serialize_uint64_t+0x10c>
 8017c2c:	68a2      	ldr	r2, [r4, #8]
 8017c2e:	6923      	ldr	r3, [r4, #16]
 8017c30:	7da0      	ldrb	r0, [r4, #22]
 8017c32:	7567      	strb	r7, [r4, #21]
 8017c34:	1b52      	subs	r2, r2, r5
 8017c36:	f080 0001 	eor.w	r0, r0, #1
 8017c3a:	1b5d      	subs	r5, r3, r5
 8017c3c:	60a2      	str	r2, [r4, #8]
 8017c3e:	6125      	str	r5, [r4, #16]
 8017c40:	b002      	add	sp, #8
 8017c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c46:	68a3      	ldr	r3, [r4, #8]
 8017c48:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017c4c:	701a      	strb	r2, [r3, #0]
 8017c4e:	68a3      	ldr	r3, [r4, #8]
 8017c50:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017c54:	701a      	strb	r2, [r3, #0]
 8017c56:	68a3      	ldr	r3, [r4, #8]
 8017c58:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017c5c:	701a      	strb	r2, [r3, #0]
 8017c5e:	68a3      	ldr	r3, [r4, #8]
 8017c60:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8017c64:	701a      	strb	r2, [r3, #0]
 8017c66:	68a3      	ldr	r3, [r4, #8]
 8017c68:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8017c6c:	701a      	strb	r2, [r3, #0]
 8017c6e:	68a3      	ldr	r3, [r4, #8]
 8017c70:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8017c74:	701a      	strb	r2, [r3, #0]
 8017c76:	68a3      	ldr	r3, [r4, #8]
 8017c78:	f89d 2000 	ldrb.w	r2, [sp]
 8017c7c:	701a      	strb	r2, [r3, #0]
 8017c7e:	e78a      	b.n	8017b96 <ucdr_serialize_uint64_t+0x9e>
 8017c80:	4630      	mov	r0, r6
 8017c82:	466e      	mov	r6, sp
 8017c84:	4631      	mov	r1, r6
 8017c86:	462a      	mov	r2, r5
 8017c88:	f001 fa08 	bl	801909c <memcpy>
 8017c8c:	68a0      	ldr	r0, [r4, #8]
 8017c8e:	4642      	mov	r2, r8
 8017c90:	1971      	adds	r1, r6, r5
 8017c92:	f001 fa03 	bl	801909c <memcpy>
 8017c96:	e77e      	b.n	8017b96 <ucdr_serialize_uint64_t+0x9e>

08017c98 <ucdr_serialize_int16_t>:
 8017c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c9c:	b082      	sub	sp, #8
 8017c9e:	460b      	mov	r3, r1
 8017ca0:	2102      	movs	r1, #2
 8017ca2:	4604      	mov	r4, r0
 8017ca4:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017ca8:	f7f8 fb26 	bl	80102f8 <ucdr_buffer_alignment>
 8017cac:	4601      	mov	r1, r0
 8017cae:	4620      	mov	r0, r4
 8017cb0:	7d67      	ldrb	r7, [r4, #21]
 8017cb2:	f7f8 fb65 	bl	8010380 <ucdr_advance_buffer>
 8017cb6:	4620      	mov	r0, r4
 8017cb8:	2102      	movs	r1, #2
 8017cba:	f7f8 fabf 	bl	801023c <ucdr_check_buffer_available_for>
 8017cbe:	bb78      	cbnz	r0, 8017d20 <ucdr_serialize_int16_t+0x88>
 8017cc0:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8017cc4:	42b5      	cmp	r5, r6
 8017cc6:	d926      	bls.n	8017d16 <ucdr_serialize_int16_t+0x7e>
 8017cc8:	6922      	ldr	r2, [r4, #16]
 8017cca:	60a5      	str	r5, [r4, #8]
 8017ccc:	1bad      	subs	r5, r5, r6
 8017cce:	442a      	add	r2, r5
 8017cd0:	f1c5 0802 	rsb	r8, r5, #2
 8017cd4:	6122      	str	r2, [r4, #16]
 8017cd6:	4641      	mov	r1, r8
 8017cd8:	4620      	mov	r0, r4
 8017cda:	f7f8 fabb 	bl	8010254 <ucdr_check_final_buffer_behavior>
 8017cde:	2800      	cmp	r0, #0
 8017ce0:	d03b      	beq.n	8017d5a <ucdr_serialize_int16_t+0xc2>
 8017ce2:	7d23      	ldrb	r3, [r4, #20]
 8017ce4:	2b01      	cmp	r3, #1
 8017ce6:	d04a      	beq.n	8017d7e <ucdr_serialize_int16_t+0xe6>
 8017ce8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017cec:	7033      	strb	r3, [r6, #0]
 8017cee:	2d00      	cmp	r5, #0
 8017cf0:	d040      	beq.n	8017d74 <ucdr_serialize_int16_t+0xdc>
 8017cf2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017cf6:	7073      	strb	r3, [r6, #1]
 8017cf8:	6923      	ldr	r3, [r4, #16]
 8017cfa:	68a2      	ldr	r2, [r4, #8]
 8017cfc:	7da0      	ldrb	r0, [r4, #22]
 8017cfe:	3302      	adds	r3, #2
 8017d00:	1b5b      	subs	r3, r3, r5
 8017d02:	4442      	add	r2, r8
 8017d04:	2102      	movs	r1, #2
 8017d06:	f080 0001 	eor.w	r0, r0, #1
 8017d0a:	6123      	str	r3, [r4, #16]
 8017d0c:	60a2      	str	r2, [r4, #8]
 8017d0e:	7561      	strb	r1, [r4, #21]
 8017d10:	b002      	add	sp, #8
 8017d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d16:	2102      	movs	r1, #2
 8017d18:	4620      	mov	r0, r4
 8017d1a:	f7f8 fa9b 	bl	8010254 <ucdr_check_final_buffer_behavior>
 8017d1e:	b190      	cbz	r0, 8017d46 <ucdr_serialize_int16_t+0xae>
 8017d20:	7d23      	ldrb	r3, [r4, #20]
 8017d22:	2b01      	cmp	r3, #1
 8017d24:	68a3      	ldr	r3, [r4, #8]
 8017d26:	d014      	beq.n	8017d52 <ucdr_serialize_int16_t+0xba>
 8017d28:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017d2c:	701a      	strb	r2, [r3, #0]
 8017d2e:	68a3      	ldr	r3, [r4, #8]
 8017d30:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017d34:	705a      	strb	r2, [r3, #1]
 8017d36:	68a2      	ldr	r2, [r4, #8]
 8017d38:	6923      	ldr	r3, [r4, #16]
 8017d3a:	3202      	adds	r2, #2
 8017d3c:	3302      	adds	r3, #2
 8017d3e:	2102      	movs	r1, #2
 8017d40:	60a2      	str	r2, [r4, #8]
 8017d42:	6123      	str	r3, [r4, #16]
 8017d44:	7561      	strb	r1, [r4, #21]
 8017d46:	7da0      	ldrb	r0, [r4, #22]
 8017d48:	f080 0001 	eor.w	r0, r0, #1
 8017d4c:	b002      	add	sp, #8
 8017d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d52:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017d56:	801a      	strh	r2, [r3, #0]
 8017d58:	e7ed      	b.n	8017d36 <ucdr_serialize_int16_t+0x9e>
 8017d5a:	68a2      	ldr	r2, [r4, #8]
 8017d5c:	6923      	ldr	r3, [r4, #16]
 8017d5e:	7da0      	ldrb	r0, [r4, #22]
 8017d60:	7567      	strb	r7, [r4, #21]
 8017d62:	1b52      	subs	r2, r2, r5
 8017d64:	1b5b      	subs	r3, r3, r5
 8017d66:	f080 0001 	eor.w	r0, r0, #1
 8017d6a:	60a2      	str	r2, [r4, #8]
 8017d6c:	6123      	str	r3, [r4, #16]
 8017d6e:	b002      	add	sp, #8
 8017d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d74:	68a3      	ldr	r3, [r4, #8]
 8017d76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017d7a:	701a      	strb	r2, [r3, #0]
 8017d7c:	e7bc      	b.n	8017cf8 <ucdr_serialize_int16_t+0x60>
 8017d7e:	4630      	mov	r0, r6
 8017d80:	f10d 0606 	add.w	r6, sp, #6
 8017d84:	4631      	mov	r1, r6
 8017d86:	462a      	mov	r2, r5
 8017d88:	f001 f988 	bl	801909c <memcpy>
 8017d8c:	68a0      	ldr	r0, [r4, #8]
 8017d8e:	4642      	mov	r2, r8
 8017d90:	1971      	adds	r1, r6, r5
 8017d92:	f001 f983 	bl	801909c <memcpy>
 8017d96:	e7af      	b.n	8017cf8 <ucdr_serialize_int16_t+0x60>

08017d98 <ucdr_deserialize_int16_t>:
 8017d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d9c:	460d      	mov	r5, r1
 8017d9e:	2102      	movs	r1, #2
 8017da0:	4604      	mov	r4, r0
 8017da2:	f7f8 faa9 	bl	80102f8 <ucdr_buffer_alignment>
 8017da6:	4601      	mov	r1, r0
 8017da8:	4620      	mov	r0, r4
 8017daa:	f894 8015 	ldrb.w	r8, [r4, #21]
 8017dae:	f7f8 fae7 	bl	8010380 <ucdr_advance_buffer>
 8017db2:	4620      	mov	r0, r4
 8017db4:	2102      	movs	r1, #2
 8017db6:	f7f8 fa41 	bl	801023c <ucdr_check_buffer_available_for>
 8017dba:	bb60      	cbnz	r0, 8017e16 <ucdr_deserialize_int16_t+0x7e>
 8017dbc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8017dc0:	42be      	cmp	r6, r7
 8017dc2:	d923      	bls.n	8017e0c <ucdr_deserialize_int16_t+0x74>
 8017dc4:	6922      	ldr	r2, [r4, #16]
 8017dc6:	60a6      	str	r6, [r4, #8]
 8017dc8:	1bf6      	subs	r6, r6, r7
 8017dca:	4432      	add	r2, r6
 8017dcc:	f1c6 0902 	rsb	r9, r6, #2
 8017dd0:	6122      	str	r2, [r4, #16]
 8017dd2:	4649      	mov	r1, r9
 8017dd4:	4620      	mov	r0, r4
 8017dd6:	f7f8 fa3d 	bl	8010254 <ucdr_check_final_buffer_behavior>
 8017dda:	2800      	cmp	r0, #0
 8017ddc:	d034      	beq.n	8017e48 <ucdr_deserialize_int16_t+0xb0>
 8017dde:	7d23      	ldrb	r3, [r4, #20]
 8017de0:	2b01      	cmp	r3, #1
 8017de2:	d042      	beq.n	8017e6a <ucdr_deserialize_int16_t+0xd2>
 8017de4:	787b      	ldrb	r3, [r7, #1]
 8017de6:	702b      	strb	r3, [r5, #0]
 8017de8:	2e00      	cmp	r6, #0
 8017dea:	d03a      	beq.n	8017e62 <ucdr_deserialize_int16_t+0xca>
 8017dec:	783b      	ldrb	r3, [r7, #0]
 8017dee:	706b      	strb	r3, [r5, #1]
 8017df0:	6923      	ldr	r3, [r4, #16]
 8017df2:	68a2      	ldr	r2, [r4, #8]
 8017df4:	7da0      	ldrb	r0, [r4, #22]
 8017df6:	2102      	movs	r1, #2
 8017df8:	3302      	adds	r3, #2
 8017dfa:	1b9b      	subs	r3, r3, r6
 8017dfc:	444a      	add	r2, r9
 8017dfe:	7561      	strb	r1, [r4, #21]
 8017e00:	6123      	str	r3, [r4, #16]
 8017e02:	60a2      	str	r2, [r4, #8]
 8017e04:	f080 0001 	eor.w	r0, r0, #1
 8017e08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e0c:	2102      	movs	r1, #2
 8017e0e:	4620      	mov	r0, r4
 8017e10:	f7f8 fa20 	bl	8010254 <ucdr_check_final_buffer_behavior>
 8017e14:	b180      	cbz	r0, 8017e38 <ucdr_deserialize_int16_t+0xa0>
 8017e16:	7d23      	ldrb	r3, [r4, #20]
 8017e18:	2b01      	cmp	r3, #1
 8017e1a:	68a3      	ldr	r3, [r4, #8]
 8017e1c:	d011      	beq.n	8017e42 <ucdr_deserialize_int16_t+0xaa>
 8017e1e:	785b      	ldrb	r3, [r3, #1]
 8017e20:	702b      	strb	r3, [r5, #0]
 8017e22:	68a3      	ldr	r3, [r4, #8]
 8017e24:	781b      	ldrb	r3, [r3, #0]
 8017e26:	706b      	strb	r3, [r5, #1]
 8017e28:	68a2      	ldr	r2, [r4, #8]
 8017e2a:	6923      	ldr	r3, [r4, #16]
 8017e2c:	3202      	adds	r2, #2
 8017e2e:	3302      	adds	r3, #2
 8017e30:	2102      	movs	r1, #2
 8017e32:	60a2      	str	r2, [r4, #8]
 8017e34:	6123      	str	r3, [r4, #16]
 8017e36:	7561      	strb	r1, [r4, #21]
 8017e38:	7da0      	ldrb	r0, [r4, #22]
 8017e3a:	f080 0001 	eor.w	r0, r0, #1
 8017e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e42:	881b      	ldrh	r3, [r3, #0]
 8017e44:	802b      	strh	r3, [r5, #0]
 8017e46:	e7ef      	b.n	8017e28 <ucdr_deserialize_int16_t+0x90>
 8017e48:	68a2      	ldr	r2, [r4, #8]
 8017e4a:	6923      	ldr	r3, [r4, #16]
 8017e4c:	7da0      	ldrb	r0, [r4, #22]
 8017e4e:	f884 8015 	strb.w	r8, [r4, #21]
 8017e52:	1b92      	subs	r2, r2, r6
 8017e54:	1b9b      	subs	r3, r3, r6
 8017e56:	60a2      	str	r2, [r4, #8]
 8017e58:	6123      	str	r3, [r4, #16]
 8017e5a:	f080 0001 	eor.w	r0, r0, #1
 8017e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e62:	68a3      	ldr	r3, [r4, #8]
 8017e64:	781b      	ldrb	r3, [r3, #0]
 8017e66:	706b      	strb	r3, [r5, #1]
 8017e68:	e7c2      	b.n	8017df0 <ucdr_deserialize_int16_t+0x58>
 8017e6a:	4639      	mov	r1, r7
 8017e6c:	4632      	mov	r2, r6
 8017e6e:	4628      	mov	r0, r5
 8017e70:	f001 f914 	bl	801909c <memcpy>
 8017e74:	68a1      	ldr	r1, [r4, #8]
 8017e76:	464a      	mov	r2, r9
 8017e78:	19a8      	adds	r0, r5, r6
 8017e7a:	f001 f90f 	bl	801909c <memcpy>
 8017e7e:	e7b7      	b.n	8017df0 <ucdr_deserialize_int16_t+0x58>

08017e80 <ucdr_serialize_int32_t>:
 8017e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e84:	b082      	sub	sp, #8
 8017e86:	4604      	mov	r4, r0
 8017e88:	9101      	str	r1, [sp, #4]
 8017e8a:	2104      	movs	r1, #4
 8017e8c:	f7f8 fa34 	bl	80102f8 <ucdr_buffer_alignment>
 8017e90:	4601      	mov	r1, r0
 8017e92:	4620      	mov	r0, r4
 8017e94:	7d67      	ldrb	r7, [r4, #21]
 8017e96:	f7f8 fa73 	bl	8010380 <ucdr_advance_buffer>
 8017e9a:	4620      	mov	r0, r4
 8017e9c:	2104      	movs	r1, #4
 8017e9e:	f7f8 f9cd 	bl	801023c <ucdr_check_buffer_available_for>
 8017ea2:	2800      	cmp	r0, #0
 8017ea4:	d139      	bne.n	8017f1a <ucdr_serialize_int32_t+0x9a>
 8017ea6:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8017eaa:	42ae      	cmp	r6, r5
 8017eac:	d930      	bls.n	8017f10 <ucdr_serialize_int32_t+0x90>
 8017eae:	6922      	ldr	r2, [r4, #16]
 8017eb0:	60a6      	str	r6, [r4, #8]
 8017eb2:	1b76      	subs	r6, r6, r5
 8017eb4:	4432      	add	r2, r6
 8017eb6:	f1c6 0804 	rsb	r8, r6, #4
 8017eba:	6122      	str	r2, [r4, #16]
 8017ebc:	4641      	mov	r1, r8
 8017ebe:	4620      	mov	r0, r4
 8017ec0:	f7f8 f9c8 	bl	8010254 <ucdr_check_final_buffer_behavior>
 8017ec4:	2800      	cmp	r0, #0
 8017ec6:	d04c      	beq.n	8017f62 <ucdr_serialize_int32_t+0xe2>
 8017ec8:	7d23      	ldrb	r3, [r4, #20]
 8017eca:	2b01      	cmp	r3, #1
 8017ecc:	d063      	beq.n	8017f96 <ucdr_serialize_int32_t+0x116>
 8017ece:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017ed2:	702b      	strb	r3, [r5, #0]
 8017ed4:	2e00      	cmp	r6, #0
 8017ed6:	d051      	beq.n	8017f7c <ucdr_serialize_int32_t+0xfc>
 8017ed8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017edc:	706b      	strb	r3, [r5, #1]
 8017ede:	2e01      	cmp	r6, #1
 8017ee0:	d050      	beq.n	8017f84 <ucdr_serialize_int32_t+0x104>
 8017ee2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8017ee6:	70ab      	strb	r3, [r5, #2]
 8017ee8:	2e02      	cmp	r6, #2
 8017eea:	d04f      	beq.n	8017f8c <ucdr_serialize_int32_t+0x10c>
 8017eec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8017ef0:	70eb      	strb	r3, [r5, #3]
 8017ef2:	6923      	ldr	r3, [r4, #16]
 8017ef4:	68a2      	ldr	r2, [r4, #8]
 8017ef6:	7da0      	ldrb	r0, [r4, #22]
 8017ef8:	3304      	adds	r3, #4
 8017efa:	1b9b      	subs	r3, r3, r6
 8017efc:	4442      	add	r2, r8
 8017efe:	2104      	movs	r1, #4
 8017f00:	f080 0001 	eor.w	r0, r0, #1
 8017f04:	6123      	str	r3, [r4, #16]
 8017f06:	60a2      	str	r2, [r4, #8]
 8017f08:	7561      	strb	r1, [r4, #21]
 8017f0a:	b002      	add	sp, #8
 8017f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f10:	2104      	movs	r1, #4
 8017f12:	4620      	mov	r0, r4
 8017f14:	f7f8 f99e 	bl	8010254 <ucdr_check_final_buffer_behavior>
 8017f18:	b1d0      	cbz	r0, 8017f50 <ucdr_serialize_int32_t+0xd0>
 8017f1a:	7d23      	ldrb	r3, [r4, #20]
 8017f1c:	2b01      	cmp	r3, #1
 8017f1e:	68a3      	ldr	r3, [r4, #8]
 8017f20:	d01c      	beq.n	8017f5c <ucdr_serialize_int32_t+0xdc>
 8017f22:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017f26:	701a      	strb	r2, [r3, #0]
 8017f28:	68a3      	ldr	r3, [r4, #8]
 8017f2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017f2e:	705a      	strb	r2, [r3, #1]
 8017f30:	68a3      	ldr	r3, [r4, #8]
 8017f32:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017f36:	709a      	strb	r2, [r3, #2]
 8017f38:	68a3      	ldr	r3, [r4, #8]
 8017f3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017f3e:	70da      	strb	r2, [r3, #3]
 8017f40:	68a2      	ldr	r2, [r4, #8]
 8017f42:	6923      	ldr	r3, [r4, #16]
 8017f44:	3204      	adds	r2, #4
 8017f46:	3304      	adds	r3, #4
 8017f48:	2104      	movs	r1, #4
 8017f4a:	60a2      	str	r2, [r4, #8]
 8017f4c:	6123      	str	r3, [r4, #16]
 8017f4e:	7561      	strb	r1, [r4, #21]
 8017f50:	7da0      	ldrb	r0, [r4, #22]
 8017f52:	f080 0001 	eor.w	r0, r0, #1
 8017f56:	b002      	add	sp, #8
 8017f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f5c:	9a01      	ldr	r2, [sp, #4]
 8017f5e:	601a      	str	r2, [r3, #0]
 8017f60:	e7ee      	b.n	8017f40 <ucdr_serialize_int32_t+0xc0>
 8017f62:	68a2      	ldr	r2, [r4, #8]
 8017f64:	6923      	ldr	r3, [r4, #16]
 8017f66:	7da0      	ldrb	r0, [r4, #22]
 8017f68:	7567      	strb	r7, [r4, #21]
 8017f6a:	1b92      	subs	r2, r2, r6
 8017f6c:	1b9b      	subs	r3, r3, r6
 8017f6e:	f080 0001 	eor.w	r0, r0, #1
 8017f72:	60a2      	str	r2, [r4, #8]
 8017f74:	6123      	str	r3, [r4, #16]
 8017f76:	b002      	add	sp, #8
 8017f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f7c:	68a3      	ldr	r3, [r4, #8]
 8017f7e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017f82:	701a      	strb	r2, [r3, #0]
 8017f84:	68a3      	ldr	r3, [r4, #8]
 8017f86:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017f8a:	701a      	strb	r2, [r3, #0]
 8017f8c:	68a3      	ldr	r3, [r4, #8]
 8017f8e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017f92:	701a      	strb	r2, [r3, #0]
 8017f94:	e7ad      	b.n	8017ef2 <ucdr_serialize_int32_t+0x72>
 8017f96:	4628      	mov	r0, r5
 8017f98:	ad01      	add	r5, sp, #4
 8017f9a:	4629      	mov	r1, r5
 8017f9c:	4632      	mov	r2, r6
 8017f9e:	f001 f87d 	bl	801909c <memcpy>
 8017fa2:	68a0      	ldr	r0, [r4, #8]
 8017fa4:	4642      	mov	r2, r8
 8017fa6:	19a9      	adds	r1, r5, r6
 8017fa8:	f001 f878 	bl	801909c <memcpy>
 8017fac:	e7a1      	b.n	8017ef2 <ucdr_serialize_int32_t+0x72>
 8017fae:	bf00      	nop

08017fb0 <ucdr_deserialize_int32_t>:
 8017fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017fb4:	460d      	mov	r5, r1
 8017fb6:	2104      	movs	r1, #4
 8017fb8:	4604      	mov	r4, r0
 8017fba:	f7f8 f99d 	bl	80102f8 <ucdr_buffer_alignment>
 8017fbe:	4601      	mov	r1, r0
 8017fc0:	4620      	mov	r0, r4
 8017fc2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8017fc6:	f7f8 f9db 	bl	8010380 <ucdr_advance_buffer>
 8017fca:	4620      	mov	r0, r4
 8017fcc:	2104      	movs	r1, #4
 8017fce:	f7f8 f935 	bl	801023c <ucdr_check_buffer_available_for>
 8017fd2:	2800      	cmp	r0, #0
 8017fd4:	d138      	bne.n	8018048 <ucdr_deserialize_int32_t+0x98>
 8017fd6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8017fda:	42b7      	cmp	r7, r6
 8017fdc:	d92f      	bls.n	801803e <ucdr_deserialize_int32_t+0x8e>
 8017fde:	6922      	ldr	r2, [r4, #16]
 8017fe0:	60a7      	str	r7, [r4, #8]
 8017fe2:	1bbf      	subs	r7, r7, r6
 8017fe4:	443a      	add	r2, r7
 8017fe6:	f1c7 0904 	rsb	r9, r7, #4
 8017fea:	6122      	str	r2, [r4, #16]
 8017fec:	4649      	mov	r1, r9
 8017fee:	4620      	mov	r0, r4
 8017ff0:	f7f8 f930 	bl	8010254 <ucdr_check_final_buffer_behavior>
 8017ff4:	2800      	cmp	r0, #0
 8017ff6:	d046      	beq.n	8018086 <ucdr_deserialize_int32_t+0xd6>
 8017ff8:	7d23      	ldrb	r3, [r4, #20]
 8017ffa:	2b01      	cmp	r3, #1
 8017ffc:	d05c      	beq.n	80180b8 <ucdr_deserialize_int32_t+0x108>
 8017ffe:	78f3      	ldrb	r3, [r6, #3]
 8018000:	702b      	strb	r3, [r5, #0]
 8018002:	2f00      	cmp	r7, #0
 8018004:	d04c      	beq.n	80180a0 <ucdr_deserialize_int32_t+0xf0>
 8018006:	78b3      	ldrb	r3, [r6, #2]
 8018008:	706b      	strb	r3, [r5, #1]
 801800a:	2f01      	cmp	r7, #1
 801800c:	f105 0302 	add.w	r3, r5, #2
 8018010:	d04a      	beq.n	80180a8 <ucdr_deserialize_int32_t+0xf8>
 8018012:	7873      	ldrb	r3, [r6, #1]
 8018014:	70ab      	strb	r3, [r5, #2]
 8018016:	2f02      	cmp	r7, #2
 8018018:	f105 0303 	add.w	r3, r5, #3
 801801c:	d048      	beq.n	80180b0 <ucdr_deserialize_int32_t+0x100>
 801801e:	7833      	ldrb	r3, [r6, #0]
 8018020:	70eb      	strb	r3, [r5, #3]
 8018022:	6923      	ldr	r3, [r4, #16]
 8018024:	68a2      	ldr	r2, [r4, #8]
 8018026:	7da0      	ldrb	r0, [r4, #22]
 8018028:	2104      	movs	r1, #4
 801802a:	3304      	adds	r3, #4
 801802c:	1bdb      	subs	r3, r3, r7
 801802e:	444a      	add	r2, r9
 8018030:	7561      	strb	r1, [r4, #21]
 8018032:	6123      	str	r3, [r4, #16]
 8018034:	60a2      	str	r2, [r4, #8]
 8018036:	f080 0001 	eor.w	r0, r0, #1
 801803a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801803e:	2104      	movs	r1, #4
 8018040:	4620      	mov	r0, r4
 8018042:	f7f8 f907 	bl	8010254 <ucdr_check_final_buffer_behavior>
 8018046:	b1b0      	cbz	r0, 8018076 <ucdr_deserialize_int32_t+0xc6>
 8018048:	7d23      	ldrb	r3, [r4, #20]
 801804a:	2b01      	cmp	r3, #1
 801804c:	68a3      	ldr	r3, [r4, #8]
 801804e:	d017      	beq.n	8018080 <ucdr_deserialize_int32_t+0xd0>
 8018050:	78db      	ldrb	r3, [r3, #3]
 8018052:	702b      	strb	r3, [r5, #0]
 8018054:	68a3      	ldr	r3, [r4, #8]
 8018056:	789b      	ldrb	r3, [r3, #2]
 8018058:	706b      	strb	r3, [r5, #1]
 801805a:	68a3      	ldr	r3, [r4, #8]
 801805c:	785b      	ldrb	r3, [r3, #1]
 801805e:	70ab      	strb	r3, [r5, #2]
 8018060:	68a3      	ldr	r3, [r4, #8]
 8018062:	781b      	ldrb	r3, [r3, #0]
 8018064:	70eb      	strb	r3, [r5, #3]
 8018066:	68a2      	ldr	r2, [r4, #8]
 8018068:	6923      	ldr	r3, [r4, #16]
 801806a:	3204      	adds	r2, #4
 801806c:	3304      	adds	r3, #4
 801806e:	2104      	movs	r1, #4
 8018070:	60a2      	str	r2, [r4, #8]
 8018072:	6123      	str	r3, [r4, #16]
 8018074:	7561      	strb	r1, [r4, #21]
 8018076:	7da0      	ldrb	r0, [r4, #22]
 8018078:	f080 0001 	eor.w	r0, r0, #1
 801807c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	602b      	str	r3, [r5, #0]
 8018084:	e7ef      	b.n	8018066 <ucdr_deserialize_int32_t+0xb6>
 8018086:	68a2      	ldr	r2, [r4, #8]
 8018088:	6923      	ldr	r3, [r4, #16]
 801808a:	7da0      	ldrb	r0, [r4, #22]
 801808c:	f884 8015 	strb.w	r8, [r4, #21]
 8018090:	1bd2      	subs	r2, r2, r7
 8018092:	1bdb      	subs	r3, r3, r7
 8018094:	60a2      	str	r2, [r4, #8]
 8018096:	6123      	str	r3, [r4, #16]
 8018098:	f080 0001 	eor.w	r0, r0, #1
 801809c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180a0:	68a3      	ldr	r3, [r4, #8]
 80180a2:	789b      	ldrb	r3, [r3, #2]
 80180a4:	706b      	strb	r3, [r5, #1]
 80180a6:	1cab      	adds	r3, r5, #2
 80180a8:	68a2      	ldr	r2, [r4, #8]
 80180aa:	7852      	ldrb	r2, [r2, #1]
 80180ac:	f803 2b01 	strb.w	r2, [r3], #1
 80180b0:	68a2      	ldr	r2, [r4, #8]
 80180b2:	7812      	ldrb	r2, [r2, #0]
 80180b4:	701a      	strb	r2, [r3, #0]
 80180b6:	e7b4      	b.n	8018022 <ucdr_deserialize_int32_t+0x72>
 80180b8:	4631      	mov	r1, r6
 80180ba:	463a      	mov	r2, r7
 80180bc:	4628      	mov	r0, r5
 80180be:	f000 ffed 	bl	801909c <memcpy>
 80180c2:	68a1      	ldr	r1, [r4, #8]
 80180c4:	464a      	mov	r2, r9
 80180c6:	19e8      	adds	r0, r5, r7
 80180c8:	f000 ffe8 	bl	801909c <memcpy>
 80180cc:	e7a9      	b.n	8018022 <ucdr_deserialize_int32_t+0x72>
 80180ce:	bf00      	nop

080180d0 <ucdr_serialize_string>:
 80180d0:	b510      	push	{r4, lr}
 80180d2:	b082      	sub	sp, #8
 80180d4:	4604      	mov	r4, r0
 80180d6:	4608      	mov	r0, r1
 80180d8:	9101      	str	r1, [sp, #4]
 80180da:	f7e8 f88b 	bl	80001f4 <strlen>
 80180de:	9901      	ldr	r1, [sp, #4]
 80180e0:	4602      	mov	r2, r0
 80180e2:	3201      	adds	r2, #1
 80180e4:	4620      	mov	r0, r4
 80180e6:	b002      	add	sp, #8
 80180e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180ec:	f7f8 b968 	b.w	80103c0 <ucdr_serialize_sequence_char>

080180f0 <ucdr_deserialize_string>:
 80180f0:	b500      	push	{lr}
 80180f2:	b083      	sub	sp, #12
 80180f4:	ab01      	add	r3, sp, #4
 80180f6:	f7f8 f975 	bl	80103e4 <ucdr_deserialize_sequence_char>
 80180fa:	b003      	add	sp, #12
 80180fc:	f85d fb04 	ldr.w	pc, [sp], #4

08018100 <uxr_init_input_best_effort_stream>:
 8018100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018104:	8003      	strh	r3, [r0, #0]
 8018106:	4770      	bx	lr

08018108 <uxr_reset_input_best_effort_stream>:
 8018108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801810c:	8003      	strh	r3, [r0, #0]
 801810e:	4770      	bx	lr

08018110 <uxr_receive_best_effort_message>:
 8018110:	b538      	push	{r3, r4, r5, lr}
 8018112:	4604      	mov	r4, r0
 8018114:	8800      	ldrh	r0, [r0, #0]
 8018116:	460d      	mov	r5, r1
 8018118:	f000 fd20 	bl	8018b5c <uxr_seq_num_cmp>
 801811c:	4603      	mov	r3, r0
 801811e:	2b00      	cmp	r3, #0
 8018120:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8018124:	bfb8      	it	lt
 8018126:	8025      	strhlt	r5, [r4, #0]
 8018128:	bd38      	pop	{r3, r4, r5, pc}
 801812a:	bf00      	nop

0801812c <on_full_input_buffer>:
 801812c:	b570      	push	{r4, r5, r6, lr}
 801812e:	6802      	ldr	r2, [r0, #0]
 8018130:	460d      	mov	r5, r1
 8018132:	6809      	ldr	r1, [r1, #0]
 8018134:	686c      	ldr	r4, [r5, #4]
 8018136:	1a53      	subs	r3, r2, r1
 8018138:	4606      	mov	r6, r0
 801813a:	8928      	ldrh	r0, [r5, #8]
 801813c:	fbb4 f4f0 	udiv	r4, r4, r0
 8018140:	fbb3 f3f4 	udiv	r3, r3, r4
 8018144:	3301      	adds	r3, #1
 8018146:	b29b      	uxth	r3, r3
 8018148:	fbb3 f2f0 	udiv	r2, r3, r0
 801814c:	fb00 3312 	mls	r3, r0, r2, r3
 8018150:	b29b      	uxth	r3, r3
 8018152:	fb04 f403 	mul.w	r4, r4, r3
 8018156:	1d23      	adds	r3, r4, #4
 8018158:	440b      	add	r3, r1
 801815a:	7d28      	ldrb	r0, [r5, #20]
 801815c:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8018160:	b110      	cbz	r0, 8018168 <on_full_input_buffer+0x3c>
 8018162:	2000      	movs	r0, #0
 8018164:	f843 0c04 	str.w	r0, [r3, #-4]
 8018168:	2a03      	cmp	r2, #3
 801816a:	d801      	bhi.n	8018170 <on_full_input_buffer+0x44>
 801816c:	2001      	movs	r0, #1
 801816e:	bd70      	pop	{r4, r5, r6, pc}
 8018170:	3408      	adds	r4, #8
 8018172:	6933      	ldr	r3, [r6, #16]
 8018174:	4421      	add	r1, r4
 8018176:	4630      	mov	r0, r6
 8018178:	3a04      	subs	r2, #4
 801817a:	f7f8 f8a9 	bl	80102d0 <ucdr_init_buffer_origin>
 801817e:	4630      	mov	r0, r6
 8018180:	4902      	ldr	r1, [pc, #8]	; (801818c <on_full_input_buffer+0x60>)
 8018182:	462a      	mov	r2, r5
 8018184:	f7f8 f882 	bl	801028c <ucdr_set_on_full_buffer_callback>
 8018188:	2000      	movs	r0, #0
 801818a:	bd70      	pop	{r4, r5, r6, pc}
 801818c:	0801812d 	.word	0x0801812d

08018190 <uxr_init_input_reliable_stream>:
 8018190:	b470      	push	{r4, r5, r6}
 8018192:	9c03      	ldr	r4, [sp, #12]
 8018194:	6001      	str	r1, [r0, #0]
 8018196:	2600      	movs	r6, #0
 8018198:	8103      	strh	r3, [r0, #8]
 801819a:	6042      	str	r2, [r0, #4]
 801819c:	6104      	str	r4, [r0, #16]
 801819e:	7506      	strb	r6, [r0, #20]
 80181a0:	b1ab      	cbz	r3, 80181ce <uxr_init_input_reliable_stream+0x3e>
 80181a2:	600e      	str	r6, [r1, #0]
 80181a4:	8901      	ldrh	r1, [r0, #8]
 80181a6:	2901      	cmp	r1, #1
 80181a8:	d911      	bls.n	80181ce <uxr_init_input_reliable_stream+0x3e>
 80181aa:	2201      	movs	r2, #1
 80181ac:	e9d0 5400 	ldrd	r5, r4, [r0]
 80181b0:	fbb2 f3f1 	udiv	r3, r2, r1
 80181b4:	fb01 2313 	mls	r3, r1, r3, r2
 80181b8:	b29b      	uxth	r3, r3
 80181ba:	fbb4 f1f1 	udiv	r1, r4, r1
 80181be:	fb03 f301 	mul.w	r3, r3, r1
 80181c2:	3201      	adds	r2, #1
 80181c4:	50ee      	str	r6, [r5, r3]
 80181c6:	8901      	ldrh	r1, [r0, #8]
 80181c8:	b292      	uxth	r2, r2
 80181ca:	4291      	cmp	r1, r2
 80181cc:	d8ee      	bhi.n	80181ac <uxr_init_input_reliable_stream+0x1c>
 80181ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80181d2:	bc70      	pop	{r4, r5, r6}
 80181d4:	60c3      	str	r3, [r0, #12]
 80181d6:	4770      	bx	lr

080181d8 <uxr_reset_input_reliable_stream>:
 80181d8:	8902      	ldrh	r2, [r0, #8]
 80181da:	b1ca      	cbz	r2, 8018210 <uxr_reset_input_reliable_stream+0x38>
 80181dc:	b470      	push	{r4, r5, r6}
 80181de:	2400      	movs	r4, #0
 80181e0:	4621      	mov	r1, r4
 80181e2:	4626      	mov	r6, r4
 80181e4:	fbb1 f3f2 	udiv	r3, r1, r2
 80181e8:	fb02 1313 	mls	r3, r2, r3, r1
 80181ec:	e9d0 5100 	ldrd	r5, r1, [r0]
 80181f0:	b29b      	uxth	r3, r3
 80181f2:	fbb1 f2f2 	udiv	r2, r1, r2
 80181f6:	fb03 f302 	mul.w	r3, r3, r2
 80181fa:	3401      	adds	r4, #1
 80181fc:	50ee      	str	r6, [r5, r3]
 80181fe:	8902      	ldrh	r2, [r0, #8]
 8018200:	b2a1      	uxth	r1, r4
 8018202:	428a      	cmp	r2, r1
 8018204:	d8ee      	bhi.n	80181e4 <uxr_reset_input_reliable_stream+0xc>
 8018206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801820a:	bc70      	pop	{r4, r5, r6}
 801820c:	60c3      	str	r3, [r0, #12]
 801820e:	4770      	bx	lr
 8018210:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018214:	60c3      	str	r3, [r0, #12]
 8018216:	4770      	bx	lr

08018218 <uxr_receive_reliable_message>:
 8018218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801821c:	4604      	mov	r4, r0
 801821e:	460d      	mov	r5, r1
 8018220:	8901      	ldrh	r1, [r0, #8]
 8018222:	8980      	ldrh	r0, [r0, #12]
 8018224:	4690      	mov	r8, r2
 8018226:	461f      	mov	r7, r3
 8018228:	f000 fc90 	bl	8018b4c <uxr_seq_num_add>
 801822c:	4629      	mov	r1, r5
 801822e:	4606      	mov	r6, r0
 8018230:	89a0      	ldrh	r0, [r4, #12]
 8018232:	f000 fc93 	bl	8018b5c <uxr_seq_num_cmp>
 8018236:	2800      	cmp	r0, #0
 8018238:	db0a      	blt.n	8018250 <uxr_receive_reliable_message+0x38>
 801823a:	2600      	movs	r6, #0
 801823c:	89e0      	ldrh	r0, [r4, #14]
 801823e:	4629      	mov	r1, r5
 8018240:	f000 fc8c 	bl	8018b5c <uxr_seq_num_cmp>
 8018244:	2800      	cmp	r0, #0
 8018246:	bfb8      	it	lt
 8018248:	81e5      	strhlt	r5, [r4, #14]
 801824a:	4630      	mov	r0, r6
 801824c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018250:	4630      	mov	r0, r6
 8018252:	4629      	mov	r1, r5
 8018254:	f000 fc82 	bl	8018b5c <uxr_seq_num_cmp>
 8018258:	2800      	cmp	r0, #0
 801825a:	dbee      	blt.n	801823a <uxr_receive_reliable_message+0x22>
 801825c:	6923      	ldr	r3, [r4, #16]
 801825e:	4640      	mov	r0, r8
 8018260:	4798      	blx	r3
 8018262:	2101      	movs	r1, #1
 8018264:	4681      	mov	r9, r0
 8018266:	89a0      	ldrh	r0, [r4, #12]
 8018268:	f000 fc70 	bl	8018b4c <uxr_seq_num_add>
 801826c:	f1b9 0f00 	cmp.w	r9, #0
 8018270:	d101      	bne.n	8018276 <uxr_receive_reliable_message+0x5e>
 8018272:	4285      	cmp	r5, r0
 8018274:	d049      	beq.n	801830a <uxr_receive_reliable_message+0xf2>
 8018276:	8921      	ldrh	r1, [r4, #8]
 8018278:	fbb5 f3f1 	udiv	r3, r5, r1
 801827c:	fb01 5313 	mls	r3, r1, r3, r5
 8018280:	b29b      	uxth	r3, r3
 8018282:	6862      	ldr	r2, [r4, #4]
 8018284:	6820      	ldr	r0, [r4, #0]
 8018286:	fbb2 f2f1 	udiv	r2, r2, r1
 801828a:	fb03 f302 	mul.w	r3, r3, r2
 801828e:	3304      	adds	r3, #4
 8018290:	4418      	add	r0, r3
 8018292:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018296:	2b00      	cmp	r3, #0
 8018298:	d1cf      	bne.n	801823a <uxr_receive_reliable_message+0x22>
 801829a:	4641      	mov	r1, r8
 801829c:	463a      	mov	r2, r7
 801829e:	f000 fefd 	bl	801909c <memcpy>
 80182a2:	8921      	ldrh	r1, [r4, #8]
 80182a4:	fbb5 f3f1 	udiv	r3, r5, r1
 80182a8:	fb01 5313 	mls	r3, r1, r3, r5
 80182ac:	b29b      	uxth	r3, r3
 80182ae:	6862      	ldr	r2, [r4, #4]
 80182b0:	fbb2 f2f1 	udiv	r2, r2, r1
 80182b4:	6821      	ldr	r1, [r4, #0]
 80182b6:	fb03 f302 	mul.w	r3, r3, r2
 80182ba:	2201      	movs	r2, #1
 80182bc:	50cf      	str	r7, [r1, r3]
 80182be:	9b08      	ldr	r3, [sp, #32]
 80182c0:	701a      	strb	r2, [r3, #0]
 80182c2:	f1b9 0f00 	cmp.w	r9, #0
 80182c6:	d0b8      	beq.n	801823a <uxr_receive_reliable_message+0x22>
 80182c8:	89a6      	ldrh	r6, [r4, #12]
 80182ca:	e001      	b.n	80182d0 <uxr_receive_reliable_message+0xb8>
 80182cc:	2801      	cmp	r0, #1
 80182ce:	d1b4      	bne.n	801823a <uxr_receive_reliable_message+0x22>
 80182d0:	4630      	mov	r0, r6
 80182d2:	2101      	movs	r1, #1
 80182d4:	f000 fc3a 	bl	8018b4c <uxr_seq_num_add>
 80182d8:	8921      	ldrh	r1, [r4, #8]
 80182da:	fbb0 f3f1 	udiv	r3, r0, r1
 80182de:	fb01 0313 	mls	r3, r1, r3, r0
 80182e2:	b29b      	uxth	r3, r3
 80182e4:	6862      	ldr	r2, [r4, #4]
 80182e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80182ea:	4606      	mov	r6, r0
 80182ec:	fb03 f302 	mul.w	r3, r3, r2
 80182f0:	6820      	ldr	r0, [r4, #0]
 80182f2:	3304      	adds	r3, #4
 80182f4:	4418      	add	r0, r3
 80182f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d09d      	beq.n	801823a <uxr_receive_reliable_message+0x22>
 80182fe:	6923      	ldr	r3, [r4, #16]
 8018300:	4798      	blx	r3
 8018302:	2802      	cmp	r0, #2
 8018304:	d1e2      	bne.n	80182cc <uxr_receive_reliable_message+0xb4>
 8018306:	2601      	movs	r6, #1
 8018308:	e798      	b.n	801823c <uxr_receive_reliable_message+0x24>
 801830a:	9b08      	ldr	r3, [sp, #32]
 801830c:	81a5      	strh	r5, [r4, #12]
 801830e:	2601      	movs	r6, #1
 8018310:	f883 9000 	strb.w	r9, [r3]
 8018314:	e792      	b.n	801823c <uxr_receive_reliable_message+0x24>
 8018316:	bf00      	nop

08018318 <uxr_next_input_reliable_buffer_available>:
 8018318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801831c:	4604      	mov	r4, r0
 801831e:	460e      	mov	r6, r1
 8018320:	8980      	ldrh	r0, [r0, #12]
 8018322:	2101      	movs	r1, #1
 8018324:	4617      	mov	r7, r2
 8018326:	f000 fc11 	bl	8018b4c <uxr_seq_num_add>
 801832a:	8921      	ldrh	r1, [r4, #8]
 801832c:	fbb0 f3f1 	udiv	r3, r0, r1
 8018330:	fb01 0313 	mls	r3, r1, r3, r0
 8018334:	b29b      	uxth	r3, r3
 8018336:	6862      	ldr	r2, [r4, #4]
 8018338:	fbb2 f2f1 	udiv	r2, r2, r1
 801833c:	fb03 f302 	mul.w	r3, r3, r2
 8018340:	6822      	ldr	r2, [r4, #0]
 8018342:	3304      	adds	r3, #4
 8018344:	eb02 0803 	add.w	r8, r2, r3
 8018348:	f858 9c04 	ldr.w	r9, [r8, #-4]
 801834c:	f1b9 0f00 	cmp.w	r9, #0
 8018350:	d025      	beq.n	801839e <uxr_next_input_reliable_buffer_available+0x86>
 8018352:	6923      	ldr	r3, [r4, #16]
 8018354:	4605      	mov	r5, r0
 8018356:	4640      	mov	r0, r8
 8018358:	4798      	blx	r3
 801835a:	4682      	mov	sl, r0
 801835c:	b310      	cbz	r0, 80183a4 <uxr_next_input_reliable_buffer_available+0x8c>
 801835e:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018362:	e005      	b.n	8018370 <uxr_next_input_reliable_buffer_available+0x58>
 8018364:	6923      	ldr	r3, [r4, #16]
 8018366:	4798      	blx	r3
 8018368:	2802      	cmp	r0, #2
 801836a:	d032      	beq.n	80183d2 <uxr_next_input_reliable_buffer_available+0xba>
 801836c:	2801      	cmp	r0, #1
 801836e:	d116      	bne.n	801839e <uxr_next_input_reliable_buffer_available+0x86>
 8018370:	4650      	mov	r0, sl
 8018372:	2101      	movs	r1, #1
 8018374:	f000 fbea 	bl	8018b4c <uxr_seq_num_add>
 8018378:	8921      	ldrh	r1, [r4, #8]
 801837a:	fbb0 f3f1 	udiv	r3, r0, r1
 801837e:	fb01 0313 	mls	r3, r1, r3, r0
 8018382:	b29b      	uxth	r3, r3
 8018384:	6862      	ldr	r2, [r4, #4]
 8018386:	fbb2 f2f1 	udiv	r2, r2, r1
 801838a:	4682      	mov	sl, r0
 801838c:	fb03 f302 	mul.w	r3, r3, r2
 8018390:	6820      	ldr	r0, [r4, #0]
 8018392:	3304      	adds	r3, #4
 8018394:	4418      	add	r0, r3
 8018396:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801839a:	2b00      	cmp	r3, #0
 801839c:	d1e2      	bne.n	8018364 <uxr_next_input_reliable_buffer_available+0x4c>
 801839e:	2000      	movs	r0, #0
 80183a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183a4:	464a      	mov	r2, r9
 80183a6:	4641      	mov	r1, r8
 80183a8:	4630      	mov	r0, r6
 80183aa:	f7f7 ff99 	bl	80102e0 <ucdr_init_buffer>
 80183ae:	8921      	ldrh	r1, [r4, #8]
 80183b0:	fbb5 f3f1 	udiv	r3, r5, r1
 80183b4:	fb01 5313 	mls	r3, r1, r3, r5
 80183b8:	b29b      	uxth	r3, r3
 80183ba:	6862      	ldr	r2, [r4, #4]
 80183bc:	fbb2 f2f1 	udiv	r2, r2, r1
 80183c0:	6821      	ldr	r1, [r4, #0]
 80183c2:	fb03 f302 	mul.w	r3, r3, r2
 80183c6:	2001      	movs	r0, #1
 80183c8:	f841 a003 	str.w	sl, [r1, r3]
 80183cc:	81a5      	strh	r5, [r4, #12]
 80183ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80183d2:	8922      	ldrh	r2, [r4, #8]
 80183d4:	fbb5 f0f2 	udiv	r0, r5, r2
 80183d8:	fb02 5510 	mls	r5, r2, r0, r5
 80183dc:	b2ad      	uxth	r5, r5
 80183de:	6863      	ldr	r3, [r4, #4]
 80183e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80183e4:	fb05 f503 	mul.w	r5, r5, r3
 80183e8:	6823      	ldr	r3, [r4, #0]
 80183ea:	2000      	movs	r0, #0
 80183ec:	5158      	str	r0, [r3, r5]
 80183ee:	eba9 0207 	sub.w	r2, r9, r7
 80183f2:	eb08 0107 	add.w	r1, r8, r7
 80183f6:	4630      	mov	r0, r6
 80183f8:	f7f7 ff72 	bl	80102e0 <ucdr_init_buffer>
 80183fc:	4630      	mov	r0, r6
 80183fe:	4904      	ldr	r1, [pc, #16]	; (8018410 <uxr_next_input_reliable_buffer_available+0xf8>)
 8018400:	4622      	mov	r2, r4
 8018402:	f7f7 ff43 	bl	801028c <ucdr_set_on_full_buffer_callback>
 8018406:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801840a:	2001      	movs	r0, #1
 801840c:	e7c8      	b.n	80183a0 <uxr_next_input_reliable_buffer_available+0x88>
 801840e:	bf00      	nop
 8018410:	0801812d 	.word	0x0801812d

08018414 <uxr_process_heartbeat>:
 8018414:	b538      	push	{r3, r4, r5, lr}
 8018416:	4611      	mov	r1, r2
 8018418:	4604      	mov	r4, r0
 801841a:	89c0      	ldrh	r0, [r0, #14]
 801841c:	4615      	mov	r5, r2
 801841e:	f000 fb9d 	bl	8018b5c <uxr_seq_num_cmp>
 8018422:	2800      	cmp	r0, #0
 8018424:	bfb8      	it	lt
 8018426:	81e5      	strhlt	r5, [r4, #14]
 8018428:	bd38      	pop	{r3, r4, r5, pc}
 801842a:	bf00      	nop

0801842c <uxr_compute_acknack>:
 801842c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018430:	8903      	ldrh	r3, [r0, #8]
 8018432:	8986      	ldrh	r6, [r0, #12]
 8018434:	4604      	mov	r4, r0
 8018436:	460d      	mov	r5, r1
 8018438:	b1d3      	cbz	r3, 8018470 <uxr_compute_acknack+0x44>
 801843a:	4630      	mov	r0, r6
 801843c:	2701      	movs	r7, #1
 801843e:	e003      	b.n	8018448 <uxr_compute_acknack+0x1c>
 8018440:	4567      	cmp	r7, ip
 8018442:	d215      	bcs.n	8018470 <uxr_compute_acknack+0x44>
 8018444:	89a0      	ldrh	r0, [r4, #12]
 8018446:	3701      	adds	r7, #1
 8018448:	b2b9      	uxth	r1, r7
 801844a:	f000 fb7f 	bl	8018b4c <uxr_seq_num_add>
 801844e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018452:	fbb0 f2fc 	udiv	r2, r0, ip
 8018456:	e9d4 1300 	ldrd	r1, r3, [r4]
 801845a:	fb0c 0212 	mls	r2, ip, r2, r0
 801845e:	b292      	uxth	r2, r2
 8018460:	fbb3 f3fc 	udiv	r3, r3, ip
 8018464:	fb02 1303 	mla	r3, r2, r3, r1
 8018468:	681b      	ldr	r3, [r3, #0]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d1e8      	bne.n	8018440 <uxr_compute_acknack+0x14>
 801846e:	4606      	mov	r6, r0
 8018470:	802e      	strh	r6, [r5, #0]
 8018472:	4630      	mov	r0, r6
 8018474:	2101      	movs	r1, #1
 8018476:	89e6      	ldrh	r6, [r4, #14]
 8018478:	f000 fb6c 	bl	8018b54 <uxr_seq_num_sub>
 801847c:	4601      	mov	r1, r0
 801847e:	4630      	mov	r0, r6
 8018480:	f000 fb68 	bl	8018b54 <uxr_seq_num_sub>
 8018484:	4606      	mov	r6, r0
 8018486:	b318      	cbz	r0, 80184d0 <uxr_compute_acknack+0xa4>
 8018488:	f04f 0900 	mov.w	r9, #0
 801848c:	464f      	mov	r7, r9
 801848e:	f04f 0801 	mov.w	r8, #1
 8018492:	fa1f f189 	uxth.w	r1, r9
 8018496:	8828      	ldrh	r0, [r5, #0]
 8018498:	f000 fb58 	bl	8018b4c <uxr_seq_num_add>
 801849c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80184a0:	6822      	ldr	r2, [r4, #0]
 80184a2:	fbb0 f1fc 	udiv	r1, r0, ip
 80184a6:	fb01 011c 	mls	r1, r1, ip, r0
 80184aa:	b289      	uxth	r1, r1
 80184ac:	6863      	ldr	r3, [r4, #4]
 80184ae:	fbb3 f3fc 	udiv	r3, r3, ip
 80184b2:	fb01 2303 	mla	r3, r1, r3, r2
 80184b6:	fa08 f209 	lsl.w	r2, r8, r9
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	f109 0901 	add.w	r9, r9, #1
 80184c0:	b90b      	cbnz	r3, 80184c6 <uxr_compute_acknack+0x9a>
 80184c2:	4317      	orrs	r7, r2
 80184c4:	b2bf      	uxth	r7, r7
 80184c6:	454e      	cmp	r6, r9
 80184c8:	d1e3      	bne.n	8018492 <uxr_compute_acknack+0x66>
 80184ca:	4638      	mov	r0, r7
 80184cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184d0:	4607      	mov	r7, r0
 80184d2:	4638      	mov	r0, r7
 80184d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080184d8 <uxr_init_output_best_effort_stream>:
 80184d8:	b410      	push	{r4}
 80184da:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80184de:	81c4      	strh	r4, [r0, #14]
 80184e0:	e9c0 1300 	strd	r1, r3, [r0]
 80184e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80184e8:	7303      	strb	r3, [r0, #12]
 80184ea:	6082      	str	r2, [r0, #8]
 80184ec:	4770      	bx	lr
 80184ee:	bf00      	nop

080184f0 <uxr_reset_output_best_effort_stream>:
 80184f0:	7b02      	ldrb	r2, [r0, #12]
 80184f2:	6042      	str	r2, [r0, #4]
 80184f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80184f8:	81c3      	strh	r3, [r0, #14]
 80184fa:	4770      	bx	lr

080184fc <uxr_prepare_best_effort_buffer_to_write>:
 80184fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184fe:	4604      	mov	r4, r0
 8018500:	b083      	sub	sp, #12
 8018502:	6840      	ldr	r0, [r0, #4]
 8018504:	460d      	mov	r5, r1
 8018506:	4616      	mov	r6, r2
 8018508:	f7fa fa66 	bl	80129d8 <uxr_submessage_padding>
 801850c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8018510:	4410      	add	r0, r2
 8018512:	1942      	adds	r2, r0, r5
 8018514:	4293      	cmp	r3, r2
 8018516:	bf2c      	ite	cs
 8018518:	2701      	movcs	r7, #1
 801851a:	2700      	movcc	r7, #0
 801851c:	d202      	bcs.n	8018524 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801851e:	4638      	mov	r0, r7
 8018520:	b003      	add	sp, #12
 8018522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018524:	9000      	str	r0, [sp, #0]
 8018526:	6821      	ldr	r1, [r4, #0]
 8018528:	4630      	mov	r0, r6
 801852a:	2300      	movs	r3, #0
 801852c:	f7f7 fec6 	bl	80102bc <ucdr_init_buffer_origin_offset>
 8018530:	6861      	ldr	r1, [r4, #4]
 8018532:	4638      	mov	r0, r7
 8018534:	4429      	add	r1, r5
 8018536:	6061      	str	r1, [r4, #4]
 8018538:	b003      	add	sp, #12
 801853a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801853c <uxr_prepare_best_effort_buffer_to_send>:
 801853c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018540:	6845      	ldr	r5, [r0, #4]
 8018542:	4604      	mov	r4, r0
 8018544:	7b00      	ldrb	r0, [r0, #12]
 8018546:	4285      	cmp	r5, r0
 8018548:	bf8c      	ite	hi
 801854a:	2701      	movhi	r7, #1
 801854c:	2700      	movls	r7, #0
 801854e:	d802      	bhi.n	8018556 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8018550:	4638      	mov	r0, r7
 8018552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018556:	4688      	mov	r8, r1
 8018558:	89e0      	ldrh	r0, [r4, #14]
 801855a:	2101      	movs	r1, #1
 801855c:	4615      	mov	r5, r2
 801855e:	461e      	mov	r6, r3
 8018560:	f000 faf4 	bl	8018b4c <uxr_seq_num_add>
 8018564:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018568:	81e0      	strh	r0, [r4, #14]
 801856a:	8030      	strh	r0, [r6, #0]
 801856c:	f8c8 2000 	str.w	r2, [r8]
 8018570:	602b      	str	r3, [r5, #0]
 8018572:	7b23      	ldrb	r3, [r4, #12]
 8018574:	6063      	str	r3, [r4, #4]
 8018576:	4638      	mov	r0, r7
 8018578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801857c <on_full_output_buffer>:
 801857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801857e:	6802      	ldr	r2, [r0, #0]
 8018580:	460d      	mov	r5, r1
 8018582:	6809      	ldr	r1, [r1, #0]
 8018584:	892f      	ldrh	r7, [r5, #8]
 8018586:	686c      	ldr	r4, [r5, #4]
 8018588:	fbb4 f4f7 	udiv	r4, r4, r7
 801858c:	1a53      	subs	r3, r2, r1
 801858e:	fbb3 f3f4 	udiv	r3, r3, r4
 8018592:	3301      	adds	r3, #1
 8018594:	b29b      	uxth	r3, r3
 8018596:	fbb3 f2f7 	udiv	r2, r3, r7
 801859a:	fb07 3312 	mls	r3, r7, r2, r3
 801859e:	b29b      	uxth	r3, r3
 80185a0:	fb04 f403 	mul.w	r4, r4, r3
 80185a4:	7b2f      	ldrb	r7, [r5, #12]
 80185a6:	590a      	ldr	r2, [r1, r4]
 80185a8:	6903      	ldr	r3, [r0, #16]
 80185aa:	443c      	add	r4, r7
 80185ac:	3408      	adds	r4, #8
 80185ae:	1bd2      	subs	r2, r2, r7
 80185b0:	4606      	mov	r6, r0
 80185b2:	4421      	add	r1, r4
 80185b4:	3a04      	subs	r2, #4
 80185b6:	f7f7 fe8b 	bl	80102d0 <ucdr_init_buffer_origin>
 80185ba:	4630      	mov	r0, r6
 80185bc:	4902      	ldr	r1, [pc, #8]	; (80185c8 <on_full_output_buffer+0x4c>)
 80185be:	462a      	mov	r2, r5
 80185c0:	f7f7 fe64 	bl	801028c <ucdr_set_on_full_buffer_callback>
 80185c4:	2000      	movs	r0, #0
 80185c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80185c8:	0801857d 	.word	0x0801857d

080185cc <uxr_init_output_reliable_stream>:
 80185cc:	b430      	push	{r4, r5}
 80185ce:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80185d2:	6001      	str	r1, [r0, #0]
 80185d4:	8103      	strh	r3, [r0, #8]
 80185d6:	6042      	str	r2, [r0, #4]
 80185d8:	7304      	strb	r4, [r0, #12]
 80185da:	b1b3      	cbz	r3, 801860a <uxr_init_output_reliable_stream+0x3e>
 80185dc:	600c      	str	r4, [r1, #0]
 80185de:	8901      	ldrh	r1, [r0, #8]
 80185e0:	2901      	cmp	r1, #1
 80185e2:	d912      	bls.n	801860a <uxr_init_output_reliable_stream+0x3e>
 80185e4:	2201      	movs	r2, #1
 80185e6:	e9d0 5400 	ldrd	r5, r4, [r0]
 80185ea:	fbb2 f3f1 	udiv	r3, r2, r1
 80185ee:	fb01 2313 	mls	r3, r1, r3, r2
 80185f2:	b29b      	uxth	r3, r3
 80185f4:	fbb4 f1f1 	udiv	r1, r4, r1
 80185f8:	fb03 f301 	mul.w	r3, r3, r1
 80185fc:	7b01      	ldrb	r1, [r0, #12]
 80185fe:	50e9      	str	r1, [r5, r3]
 8018600:	3201      	adds	r2, #1
 8018602:	8901      	ldrh	r1, [r0, #8]
 8018604:	b292      	uxth	r2, r2
 8018606:	4291      	cmp	r1, r2
 8018608:	d8ed      	bhi.n	80185e6 <uxr_init_output_reliable_stream+0x1a>
 801860a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801860e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018612:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018616:	4b05      	ldr	r3, [pc, #20]	; (801862c <uxr_init_output_reliable_stream+0x60>)
 8018618:	f8c0 300e 	str.w	r3, [r0, #14]
 801861c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018620:	2300      	movs	r3, #0
 8018622:	bc30      	pop	{r4, r5}
 8018624:	8242      	strh	r2, [r0, #18]
 8018626:	8403      	strh	r3, [r0, #32]
 8018628:	4770      	bx	lr
 801862a:	bf00      	nop
 801862c:	ffff0000 	.word	0xffff0000

08018630 <uxr_reset_output_reliable_stream>:
 8018630:	8902      	ldrh	r2, [r0, #8]
 8018632:	b430      	push	{r4, r5}
 8018634:	b19a      	cbz	r2, 801865e <uxr_reset_output_reliable_stream+0x2e>
 8018636:	2400      	movs	r4, #0
 8018638:	4621      	mov	r1, r4
 801863a:	fbb1 f3f2 	udiv	r3, r1, r2
 801863e:	fb02 1313 	mls	r3, r2, r3, r1
 8018642:	e9d0 5100 	ldrd	r5, r1, [r0]
 8018646:	b29b      	uxth	r3, r3
 8018648:	fbb1 f2f2 	udiv	r2, r1, r2
 801864c:	fb03 f302 	mul.w	r3, r3, r2
 8018650:	7b02      	ldrb	r2, [r0, #12]
 8018652:	50ea      	str	r2, [r5, r3]
 8018654:	3401      	adds	r4, #1
 8018656:	8902      	ldrh	r2, [r0, #8]
 8018658:	b2a1      	uxth	r1, r4
 801865a:	428a      	cmp	r2, r1
 801865c:	d8ed      	bhi.n	801863a <uxr_reset_output_reliable_stream+0xa>
 801865e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018662:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018666:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801866a:	4b05      	ldr	r3, [pc, #20]	; (8018680 <uxr_reset_output_reliable_stream+0x50>)
 801866c:	f8c0 300e 	str.w	r3, [r0, #14]
 8018670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018674:	2300      	movs	r3, #0
 8018676:	bc30      	pop	{r4, r5}
 8018678:	8242      	strh	r2, [r0, #18]
 801867a:	8403      	strh	r3, [r0, #32]
 801867c:	4770      	bx	lr
 801867e:	bf00      	nop
 8018680:	ffff0000 	.word	0xffff0000

08018684 <uxr_prepare_reliable_buffer_to_write>:
 8018684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018688:	89c5      	ldrh	r5, [r0, #14]
 801868a:	4604      	mov	r4, r0
 801868c:	8900      	ldrh	r0, [r0, #8]
 801868e:	fbb5 f3f0 	udiv	r3, r5, r0
 8018692:	4688      	mov	r8, r1
 8018694:	e9d4 1600 	ldrd	r1, r6, [r4]
 8018698:	fb00 5313 	mls	r3, r0, r3, r5
 801869c:	b29b      	uxth	r3, r3
 801869e:	fbb6 f0f0 	udiv	r0, r6, r0
 80186a2:	fb00 f303 	mul.w	r3, r0, r3
 80186a6:	3304      	adds	r3, #4
 80186a8:	18cb      	adds	r3, r1, r3
 80186aa:	b091      	sub	sp, #68	; 0x44
 80186ac:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80186b0:	9004      	str	r0, [sp, #16]
 80186b2:	2104      	movs	r1, #4
 80186b4:	4630      	mov	r0, r6
 80186b6:	9305      	str	r3, [sp, #20]
 80186b8:	9206      	str	r2, [sp, #24]
 80186ba:	f7f7 fe15 	bl	80102e8 <ucdr_alignment>
 80186be:	1833      	adds	r3, r6, r0
 80186c0:	9804      	ldr	r0, [sp, #16]
 80186c2:	9303      	str	r3, [sp, #12]
 80186c4:	eb03 0708 	add.w	r7, r3, r8
 80186c8:	1f06      	subs	r6, r0, #4
 80186ca:	42b7      	cmp	r7, r6
 80186cc:	f240 80dc 	bls.w	8018888 <uxr_prepare_reliable_buffer_to_write+0x204>
 80186d0:	f894 e00c 	ldrb.w	lr, [r4, #12]
 80186d4:	eb0e 0308 	add.w	r3, lr, r8
 80186d8:	42b3      	cmp	r3, r6
 80186da:	f240 80c2 	bls.w	8018862 <uxr_prepare_reliable_buffer_to_write+0x1de>
 80186de:	9b03      	ldr	r3, [sp, #12]
 80186e0:	3304      	adds	r3, #4
 80186e2:	42b3      	cmp	r3, r6
 80186e4:	f080 8112 	bcs.w	801890c <uxr_prepare_reliable_buffer_to_write+0x288>
 80186e8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80186ec:	f1bc 0f00 	cmp.w	ip, #0
 80186f0:	f000 8127 	beq.w	8018942 <uxr_prepare_reliable_buffer_to_write+0x2be>
 80186f4:	e9d4 7300 	ldrd	r7, r3, [r4]
 80186f8:	2100      	movs	r1, #0
 80186fa:	4608      	mov	r0, r1
 80186fc:	460a      	mov	r2, r1
 80186fe:	fbb3 f9fc 	udiv	r9, r3, ip
 8018702:	fbb2 f3fc 	udiv	r3, r2, ip
 8018706:	fb0c 2313 	mls	r3, ip, r3, r2
 801870a:	b29b      	uxth	r3, r3
 801870c:	fb09 7303 	mla	r3, r9, r3, r7
 8018710:	3101      	adds	r1, #1
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	459e      	cmp	lr, r3
 8018716:	bf08      	it	eq
 8018718:	3001      	addeq	r0, #1
 801871a:	b28a      	uxth	r2, r1
 801871c:	bf08      	it	eq
 801871e:	b280      	uxtheq	r0, r0
 8018720:	4562      	cmp	r2, ip
 8018722:	d3ee      	bcc.n	8018702 <uxr_prepare_reliable_buffer_to_write+0x7e>
 8018724:	9b03      	ldr	r3, [sp, #12]
 8018726:	1f37      	subs	r7, r6, #4
 8018728:	b2bf      	uxth	r7, r7
 801872a:	eba7 0903 	sub.w	r9, r7, r3
 801872e:	fa1f f989 	uxth.w	r9, r9
 8018732:	eba7 070e 	sub.w	r7, r7, lr
 8018736:	b2bf      	uxth	r7, r7
 8018738:	eba8 0809 	sub.w	r8, r8, r9
 801873c:	fbb8 faf7 	udiv	sl, r8, r7
 8018740:	fb07 831a 	mls	r3, r7, sl, r8
 8018744:	9707      	str	r7, [sp, #28]
 8018746:	2b00      	cmp	r3, #0
 8018748:	f040 80bf 	bne.w	80188ca <uxr_prepare_reliable_buffer_to_write+0x246>
 801874c:	fa1f fa8a 	uxth.w	sl, sl
 8018750:	4582      	cmp	sl, r0
 8018752:	f200 8095 	bhi.w	8018880 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8018756:	f10d 0b20 	add.w	fp, sp, #32
 801875a:	f1ba 0f00 	cmp.w	sl, #0
 801875e:	d03a      	beq.n	80187d6 <uxr_prepare_reliable_buffer_to_write+0x152>
 8018760:	f04f 0800 	mov.w	r8, #0
 8018764:	f10d 0b20 	add.w	fp, sp, #32
 8018768:	e000      	b.n	801876c <uxr_prepare_reliable_buffer_to_write+0xe8>
 801876a:	46b9      	mov	r9, r7
 801876c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8018770:	fbb5 f1fc 	udiv	r1, r5, ip
 8018774:	fb0c 5111 	mls	r1, ip, r1, r5
 8018778:	b289      	uxth	r1, r1
 801877a:	fbb2 f2fc 	udiv	r2, r2, ip
 801877e:	fb01 f102 	mul.w	r1, r1, r2
 8018782:	3104      	adds	r1, #4
 8018784:	4419      	add	r1, r3
 8018786:	4632      	mov	r2, r6
 8018788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801878c:	9300      	str	r3, [sp, #0]
 801878e:	4658      	mov	r0, fp
 8018790:	2300      	movs	r3, #0
 8018792:	f7f7 fd93 	bl	80102bc <ucdr_init_buffer_origin_offset>
 8018796:	464a      	mov	r2, r9
 8018798:	2300      	movs	r3, #0
 801879a:	210d      	movs	r1, #13
 801879c:	4658      	mov	r0, fp
 801879e:	f7fa f8db 	bl	8012958 <uxr_buffer_submessage_header>
 80187a2:	8920      	ldrh	r0, [r4, #8]
 80187a4:	fbb5 f3f0 	udiv	r3, r5, r0
 80187a8:	e9d4 2100 	ldrd	r2, r1, [r4]
 80187ac:	fb00 5313 	mls	r3, r0, r3, r5
 80187b0:	b29b      	uxth	r3, r3
 80187b2:	fbb1 f1f0 	udiv	r1, r1, r0
 80187b6:	fb03 f301 	mul.w	r3, r3, r1
 80187ba:	4628      	mov	r0, r5
 80187bc:	50d6      	str	r6, [r2, r3]
 80187be:	2101      	movs	r1, #1
 80187c0:	f000 f9c4 	bl	8018b4c <uxr_seq_num_add>
 80187c4:	f108 0801 	add.w	r8, r8, #1
 80187c8:	fa1f f388 	uxth.w	r3, r8
 80187cc:	459a      	cmp	sl, r3
 80187ce:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80187d2:	4605      	mov	r5, r0
 80187d4:	d8c9      	bhi.n	801876a <uxr_prepare_reliable_buffer_to_write+0xe6>
 80187d6:	fbb5 f1fc 	udiv	r1, r5, ip
 80187da:	fb0c 5111 	mls	r1, ip, r1, r5
 80187de:	b289      	uxth	r1, r1
 80187e0:	6863      	ldr	r3, [r4, #4]
 80187e2:	fbb3 fcfc 	udiv	ip, r3, ip
 80187e6:	6823      	ldr	r3, [r4, #0]
 80187e8:	fb01 f10c 	mul.w	r1, r1, ip
 80187ec:	3104      	adds	r1, #4
 80187ee:	4419      	add	r1, r3
 80187f0:	4632      	mov	r2, r6
 80187f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80187f6:	9300      	str	r3, [sp, #0]
 80187f8:	4658      	mov	r0, fp
 80187fa:	2300      	movs	r3, #0
 80187fc:	f7f7 fd5e 	bl	80102bc <ucdr_init_buffer_origin_offset>
 8018800:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018804:	4658      	mov	r0, fp
 8018806:	fa1f f288 	uxth.w	r2, r8
 801880a:	2302      	movs	r3, #2
 801880c:	210d      	movs	r1, #13
 801880e:	f7fa f8a3 	bl	8012958 <uxr_buffer_submessage_header>
 8018812:	e9d4 3200 	ldrd	r3, r2, [r4]
 8018816:	8921      	ldrh	r1, [r4, #8]
 8018818:	9f03      	ldr	r7, [sp, #12]
 801881a:	9307      	str	r3, [sp, #28]
 801881c:	9b05      	ldr	r3, [sp, #20]
 801881e:	7b26      	ldrb	r6, [r4, #12]
 8018820:	fbb5 f0f1 	udiv	r0, r5, r1
 8018824:	fbb2 f2f1 	udiv	r2, r2, r1
 8018828:	fb01 5010 	mls	r0, r1, r0, r5
 801882c:	1d39      	adds	r1, r7, #4
 801882e:	440b      	add	r3, r1
 8018830:	b280      	uxth	r0, r0
 8018832:	fb00 f002 	mul.w	r0, r0, r2
 8018836:	4619      	mov	r1, r3
 8018838:	3604      	adds	r6, #4
 801883a:	9b07      	ldr	r3, [sp, #28]
 801883c:	9a04      	ldr	r2, [sp, #16]
 801883e:	4446      	add	r6, r8
 8018840:	501e      	str	r6, [r3, r0]
 8018842:	9e06      	ldr	r6, [sp, #24]
 8018844:	3a08      	subs	r2, #8
 8018846:	1bd2      	subs	r2, r2, r7
 8018848:	4630      	mov	r0, r6
 801884a:	f7f7 fd49 	bl	80102e0 <ucdr_init_buffer>
 801884e:	4630      	mov	r0, r6
 8018850:	493d      	ldr	r1, [pc, #244]	; (8018948 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 8018852:	4622      	mov	r2, r4
 8018854:	f7f7 fd1a 	bl	801028c <ucdr_set_on_full_buffer_callback>
 8018858:	2001      	movs	r0, #1
 801885a:	81e5      	strh	r5, [r4, #14]
 801885c:	b011      	add	sp, #68	; 0x44
 801885e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018862:	2101      	movs	r1, #1
 8018864:	89e0      	ldrh	r0, [r4, #14]
 8018866:	f000 f971 	bl	8018b4c <uxr_seq_num_add>
 801886a:	8921      	ldrh	r1, [r4, #8]
 801886c:	4605      	mov	r5, r0
 801886e:	8a60      	ldrh	r0, [r4, #18]
 8018870:	f000 f96c 	bl	8018b4c <uxr_seq_num_add>
 8018874:	4601      	mov	r1, r0
 8018876:	4628      	mov	r0, r5
 8018878:	f000 f970 	bl	8018b5c <uxr_seq_num_cmp>
 801887c:	2800      	cmp	r0, #0
 801887e:	dd2a      	ble.n	80188d6 <uxr_prepare_reliable_buffer_to_write+0x252>
 8018880:	2000      	movs	r0, #0
 8018882:	b011      	add	sp, #68	; 0x44
 8018884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018888:	8921      	ldrh	r1, [r4, #8]
 801888a:	8a60      	ldrh	r0, [r4, #18]
 801888c:	f000 f95e 	bl	8018b4c <uxr_seq_num_add>
 8018890:	4601      	mov	r1, r0
 8018892:	4628      	mov	r0, r5
 8018894:	f000 f962 	bl	8018b5c <uxr_seq_num_cmp>
 8018898:	2800      	cmp	r0, #0
 801889a:	dcf1      	bgt.n	8018880 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 801889c:	8921      	ldrh	r1, [r4, #8]
 801889e:	fbb5 f3f1 	udiv	r3, r5, r1
 80188a2:	e9d4 4200 	ldrd	r4, r2, [r4]
 80188a6:	fb01 5313 	mls	r3, r1, r3, r5
 80188aa:	b29b      	uxth	r3, r3
 80188ac:	fbb2 f2f1 	udiv	r2, r2, r1
 80188b0:	fb03 f302 	mul.w	r3, r3, r2
 80188b4:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 80188b8:	50e7      	str	r7, [r4, r3]
 80188ba:	9b03      	ldr	r3, [sp, #12]
 80188bc:	9300      	str	r3, [sp, #0]
 80188be:	463a      	mov	r2, r7
 80188c0:	2300      	movs	r3, #0
 80188c2:	f7f7 fcfb 	bl	80102bc <ucdr_init_buffer_origin_offset>
 80188c6:	2001      	movs	r0, #1
 80188c8:	e7db      	b.n	8018882 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 80188ca:	f10a 0a01 	add.w	sl, sl, #1
 80188ce:	fa1f fa8a 	uxth.w	sl, sl
 80188d2:	9307      	str	r3, [sp, #28]
 80188d4:	e73c      	b.n	8018750 <uxr_prepare_reliable_buffer_to_write+0xcc>
 80188d6:	8920      	ldrh	r0, [r4, #8]
 80188d8:	fbb5 f3f0 	udiv	r3, r5, r0
 80188dc:	fb00 5313 	mls	r3, r0, r3, r5
 80188e0:	b29b      	uxth	r3, r3
 80188e2:	6862      	ldr	r2, [r4, #4]
 80188e4:	6821      	ldr	r1, [r4, #0]
 80188e6:	fbb2 f0f0 	udiv	r0, r2, r0
 80188ea:	fb03 f300 	mul.w	r3, r3, r0
 80188ee:	7b22      	ldrb	r2, [r4, #12]
 80188f0:	9806      	ldr	r0, [sp, #24]
 80188f2:	3304      	adds	r3, #4
 80188f4:	4419      	add	r1, r3
 80188f6:	4442      	add	r2, r8
 80188f8:	f841 2c04 	str.w	r2, [r1, #-4]
 80188fc:	7b23      	ldrb	r3, [r4, #12]
 80188fe:	9300      	str	r3, [sp, #0]
 8018900:	2300      	movs	r3, #0
 8018902:	f7f7 fcdb 	bl	80102bc <ucdr_init_buffer_origin_offset>
 8018906:	81e5      	strh	r5, [r4, #14]
 8018908:	2001      	movs	r0, #1
 801890a:	e7ba      	b.n	8018882 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 801890c:	4628      	mov	r0, r5
 801890e:	2101      	movs	r1, #1
 8018910:	f000 f91c 	bl	8018b4c <uxr_seq_num_add>
 8018914:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018918:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801891c:	fbb3 f1fc 	udiv	r1, r3, ip
 8018920:	fbb0 f3fc 	udiv	r3, r0, ip
 8018924:	fb0c 0313 	mls	r3, ip, r3, r0
 8018928:	b29b      	uxth	r3, r3
 801892a:	fb03 f301 	mul.w	r3, r3, r1
 801892e:	3304      	adds	r3, #4
 8018930:	18d3      	adds	r3, r2, r3
 8018932:	9305      	str	r3, [sp, #20]
 8018934:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018938:	f894 e00c 	ldrb.w	lr, [r4, #12]
 801893c:	9303      	str	r3, [sp, #12]
 801893e:	4605      	mov	r5, r0
 8018940:	e6d4      	b.n	80186ec <uxr_prepare_reliable_buffer_to_write+0x68>
 8018942:	4660      	mov	r0, ip
 8018944:	e6ee      	b.n	8018724 <uxr_prepare_reliable_buffer_to_write+0xa0>
 8018946:	bf00      	nop
 8018948:	0801857d 	.word	0x0801857d

0801894c <uxr_prepare_next_reliable_buffer_to_send>:
 801894c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018950:	4605      	mov	r5, r0
 8018952:	4688      	mov	r8, r1
 8018954:	8a00      	ldrh	r0, [r0, #16]
 8018956:	2101      	movs	r1, #1
 8018958:	4617      	mov	r7, r2
 801895a:	461e      	mov	r6, r3
 801895c:	f000 f8f6 	bl	8018b4c <uxr_seq_num_add>
 8018960:	8030      	strh	r0, [r6, #0]
 8018962:	892a      	ldrh	r2, [r5, #8]
 8018964:	fbb0 f3f2 	udiv	r3, r0, r2
 8018968:	fb02 0413 	mls	r4, r2, r3, r0
 801896c:	b2a4      	uxth	r4, r4
 801896e:	686b      	ldr	r3, [r5, #4]
 8018970:	fbb3 f2f2 	udiv	r2, r3, r2
 8018974:	682b      	ldr	r3, [r5, #0]
 8018976:	89e9      	ldrh	r1, [r5, #14]
 8018978:	fb04 f402 	mul.w	r4, r4, r2
 801897c:	3404      	adds	r4, #4
 801897e:	4423      	add	r3, r4
 8018980:	f8c8 3000 	str.w	r3, [r8]
 8018984:	682b      	ldr	r3, [r5, #0]
 8018986:	441c      	add	r4, r3
 8018988:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801898c:	603b      	str	r3, [r7, #0]
 801898e:	f000 f8e5 	bl	8018b5c <uxr_seq_num_cmp>
 8018992:	2800      	cmp	r0, #0
 8018994:	dd02      	ble.n	801899c <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8018996:	2000      	movs	r0, #0
 8018998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801899c:	683a      	ldr	r2, [r7, #0]
 801899e:	7b2b      	ldrb	r3, [r5, #12]
 80189a0:	429a      	cmp	r2, r3
 80189a2:	d9f8      	bls.n	8018996 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80189a4:	8a69      	ldrh	r1, [r5, #18]
 80189a6:	8a28      	ldrh	r0, [r5, #16]
 80189a8:	f000 f8d4 	bl	8018b54 <uxr_seq_num_sub>
 80189ac:	892b      	ldrh	r3, [r5, #8]
 80189ae:	4283      	cmp	r3, r0
 80189b0:	d0f1      	beq.n	8018996 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80189b2:	8830      	ldrh	r0, [r6, #0]
 80189b4:	89eb      	ldrh	r3, [r5, #14]
 80189b6:	8228      	strh	r0, [r5, #16]
 80189b8:	4298      	cmp	r0, r3
 80189ba:	d002      	beq.n	80189c2 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 80189bc:	2001      	movs	r0, #1
 80189be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189c2:	2101      	movs	r1, #1
 80189c4:	f000 f8c2 	bl	8018b4c <uxr_seq_num_add>
 80189c8:	81e8      	strh	r0, [r5, #14]
 80189ca:	2001      	movs	r0, #1
 80189cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080189d0 <uxr_update_output_stream_heartbeat_timestamp>:
 80189d0:	b5d0      	push	{r4, r6, r7, lr}
 80189d2:	8a01      	ldrh	r1, [r0, #16]
 80189d4:	4604      	mov	r4, r0
 80189d6:	8a40      	ldrh	r0, [r0, #18]
 80189d8:	4616      	mov	r6, r2
 80189da:	461f      	mov	r7, r3
 80189dc:	f000 f8be 	bl	8018b5c <uxr_seq_num_cmp>
 80189e0:	2800      	cmp	r0, #0
 80189e2:	db07      	blt.n	80189f4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80189e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80189e8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80189ec:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80189f0:	2000      	movs	r0, #0
 80189f2:	bdd0      	pop	{r4, r6, r7, pc}
 80189f4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80189f8:	b948      	cbnz	r0, 8018a0e <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 80189fa:	2301      	movs	r3, #1
 80189fc:	f884 3020 	strb.w	r3, [r4, #32]
 8018a00:	f116 0364 	adds.w	r3, r6, #100	; 0x64
 8018a04:	f147 0200 	adc.w	r2, r7, #0
 8018a08:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8018a0c:	bdd0      	pop	{r4, r6, r7, pc}
 8018a0e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018a12:	4296      	cmp	r6, r2
 8018a14:	eb77 0303 	sbcs.w	r3, r7, r3
 8018a18:	bfa5      	ittet	ge
 8018a1a:	3001      	addge	r0, #1
 8018a1c:	f884 0020 	strbge.w	r0, [r4, #32]
 8018a20:	2000      	movlt	r0, #0
 8018a22:	2001      	movge	r0, #1
 8018a24:	e7ec      	b.n	8018a00 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018a26:	bf00      	nop

08018a28 <uxr_begin_output_nack_buffer_it>:
 8018a28:	8a40      	ldrh	r0, [r0, #18]
 8018a2a:	4770      	bx	lr

08018a2c <uxr_next_reliable_nack_buffer_to_send>:
 8018a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a30:	f890 9021 	ldrb.w	r9, [r0, #33]	; 0x21
 8018a34:	f1b9 0f00 	cmp.w	r9, #0
 8018a38:	d011      	beq.n	8018a5e <uxr_next_reliable_nack_buffer_to_send+0x32>
 8018a3a:	4605      	mov	r5, r0
 8018a3c:	8818      	ldrh	r0, [r3, #0]
 8018a3e:	460f      	mov	r7, r1
 8018a40:	4690      	mov	r8, r2
 8018a42:	461e      	mov	r6, r3
 8018a44:	2101      	movs	r1, #1
 8018a46:	f000 f881 	bl	8018b4c <uxr_seq_num_add>
 8018a4a:	8030      	strh	r0, [r6, #0]
 8018a4c:	8a29      	ldrh	r1, [r5, #16]
 8018a4e:	f000 f885 	bl	8018b5c <uxr_seq_num_cmp>
 8018a52:	2800      	cmp	r0, #0
 8018a54:	dd06      	ble.n	8018a64 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8018a56:	f04f 0900 	mov.w	r9, #0
 8018a5a:	f885 9021 	strb.w	r9, [r5, #33]	; 0x21
 8018a5e:	4648      	mov	r0, r9
 8018a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a64:	892a      	ldrh	r2, [r5, #8]
 8018a66:	8830      	ldrh	r0, [r6, #0]
 8018a68:	fbb0 f4f2 	udiv	r4, r0, r2
 8018a6c:	fb02 0414 	mls	r4, r2, r4, r0
 8018a70:	b2a4      	uxth	r4, r4
 8018a72:	686b      	ldr	r3, [r5, #4]
 8018a74:	fbb3 f2f2 	udiv	r2, r3, r2
 8018a78:	682b      	ldr	r3, [r5, #0]
 8018a7a:	fb04 f402 	mul.w	r4, r4, r2
 8018a7e:	3404      	adds	r4, #4
 8018a80:	4423      	add	r3, r4
 8018a82:	603b      	str	r3, [r7, #0]
 8018a84:	682b      	ldr	r3, [r5, #0]
 8018a86:	441c      	add	r4, r3
 8018a88:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018a8c:	f8c8 3000 	str.w	r3, [r8]
 8018a90:	7b2a      	ldrb	r2, [r5, #12]
 8018a92:	429a      	cmp	r2, r3
 8018a94:	d0d6      	beq.n	8018a44 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8018a96:	4648      	mov	r0, r9
 8018a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018a9c <uxr_process_acknack>:
 8018a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a9e:	4604      	mov	r4, r0
 8018aa0:	460e      	mov	r6, r1
 8018aa2:	4610      	mov	r0, r2
 8018aa4:	2101      	movs	r1, #1
 8018aa6:	f000 f855 	bl	8018b54 <uxr_seq_num_sub>
 8018aaa:	8a61      	ldrh	r1, [r4, #18]
 8018aac:	f000 f852 	bl	8018b54 <uxr_seq_num_sub>
 8018ab0:	b1c0      	cbz	r0, 8018ae4 <uxr_process_acknack+0x48>
 8018ab2:	4605      	mov	r5, r0
 8018ab4:	2700      	movs	r7, #0
 8018ab6:	2101      	movs	r1, #1
 8018ab8:	8a60      	ldrh	r0, [r4, #18]
 8018aba:	f000 f847 	bl	8018b4c <uxr_seq_num_add>
 8018abe:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018ac2:	fbb0 f3fc 	udiv	r3, r0, ip
 8018ac6:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018aca:	fb0c 0313 	mls	r3, ip, r3, r0
 8018ace:	b29b      	uxth	r3, r3
 8018ad0:	fbb1 f1fc 	udiv	r1, r1, ip
 8018ad4:	3701      	adds	r7, #1
 8018ad6:	fb03 f301 	mul.w	r3, r3, r1
 8018ada:	42bd      	cmp	r5, r7
 8018adc:	7b21      	ldrb	r1, [r4, #12]
 8018ade:	8260      	strh	r0, [r4, #18]
 8018ae0:	50d1      	str	r1, [r2, r3]
 8018ae2:	d1e8      	bne.n	8018ab6 <uxr_process_acknack+0x1a>
 8018ae4:	3e00      	subs	r6, #0
 8018ae6:	f04f 0300 	mov.w	r3, #0
 8018aea:	bf18      	it	ne
 8018aec:	2601      	movne	r6, #1
 8018aee:	f884 3020 	strb.w	r3, [r4, #32]
 8018af2:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8018af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018af8 <uxr_is_output_up_to_date>:
 8018af8:	8a01      	ldrh	r1, [r0, #16]
 8018afa:	8a40      	ldrh	r0, [r0, #18]
 8018afc:	b508      	push	{r3, lr}
 8018afe:	f000 f82d 	bl	8018b5c <uxr_seq_num_cmp>
 8018b02:	fab0 f080 	clz	r0, r0
 8018b06:	0940      	lsrs	r0, r0, #5
 8018b08:	bd08      	pop	{r3, pc}
 8018b0a:	bf00      	nop

08018b0c <get_available_free_slots>:
 8018b0c:	8901      	ldrh	r1, [r0, #8]
 8018b0e:	b1d9      	cbz	r1, 8018b48 <get_available_free_slots+0x3c>
 8018b10:	b4f0      	push	{r4, r5, r6, r7}
 8018b12:	2400      	movs	r4, #0
 8018b14:	6845      	ldr	r5, [r0, #4]
 8018b16:	6807      	ldr	r7, [r0, #0]
 8018b18:	7b06      	ldrb	r6, [r0, #12]
 8018b1a:	fbb5 f5f1 	udiv	r5, r5, r1
 8018b1e:	4620      	mov	r0, r4
 8018b20:	4622      	mov	r2, r4
 8018b22:	fbb2 f3f1 	udiv	r3, r2, r1
 8018b26:	fb01 2313 	mls	r3, r1, r3, r2
 8018b2a:	b29b      	uxth	r3, r3
 8018b2c:	fb05 7303 	mla	r3, r5, r3, r7
 8018b30:	3401      	adds	r4, #1
 8018b32:	681b      	ldr	r3, [r3, #0]
 8018b34:	429e      	cmp	r6, r3
 8018b36:	bf08      	it	eq
 8018b38:	3001      	addeq	r0, #1
 8018b3a:	b2a2      	uxth	r2, r4
 8018b3c:	bf08      	it	eq
 8018b3e:	b280      	uxtheq	r0, r0
 8018b40:	428a      	cmp	r2, r1
 8018b42:	d3ee      	bcc.n	8018b22 <get_available_free_slots+0x16>
 8018b44:	bcf0      	pop	{r4, r5, r6, r7}
 8018b46:	4770      	bx	lr
 8018b48:	4608      	mov	r0, r1
 8018b4a:	4770      	bx	lr

08018b4c <uxr_seq_num_add>:
 8018b4c:	4408      	add	r0, r1
 8018b4e:	b280      	uxth	r0, r0
 8018b50:	4770      	bx	lr
 8018b52:	bf00      	nop

08018b54 <uxr_seq_num_sub>:
 8018b54:	1a40      	subs	r0, r0, r1
 8018b56:	b280      	uxth	r0, r0
 8018b58:	4770      	bx	lr
 8018b5a:	bf00      	nop

08018b5c <uxr_seq_num_cmp>:
 8018b5c:	4288      	cmp	r0, r1
 8018b5e:	d011      	beq.n	8018b84 <uxr_seq_num_cmp+0x28>
 8018b60:	d309      	bcc.n	8018b76 <uxr_seq_num_cmp+0x1a>
 8018b62:	4288      	cmp	r0, r1
 8018b64:	d910      	bls.n	8018b88 <uxr_seq_num_cmp+0x2c>
 8018b66:	1a40      	subs	r0, r0, r1
 8018b68:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8018b6c:	bfd4      	ite	le
 8018b6e:	2001      	movle	r0, #1
 8018b70:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8018b74:	4770      	bx	lr
 8018b76:	1a0b      	subs	r3, r1, r0
 8018b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018b7c:	daf1      	bge.n	8018b62 <uxr_seq_num_cmp+0x6>
 8018b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018b82:	4770      	bx	lr
 8018b84:	2000      	movs	r0, #0
 8018b86:	4770      	bx	lr
 8018b88:	2001      	movs	r0, #1
 8018b8a:	4770      	bx	lr

08018b8c <rcl_get_default_domain_id>:
 8018b8c:	b530      	push	{r4, r5, lr}
 8018b8e:	b083      	sub	sp, #12
 8018b90:	2300      	movs	r3, #0
 8018b92:	9300      	str	r3, [sp, #0]
 8018b94:	b1d0      	cbz	r0, 8018bcc <rcl_get_default_domain_id+0x40>
 8018b96:	4604      	mov	r4, r0
 8018b98:	4669      	mov	r1, sp
 8018b9a:	4815      	ldr	r0, [pc, #84]	; (8018bf0 <rcl_get_default_domain_id+0x64>)
 8018b9c:	f7fd faf0 	bl	8016180 <rcutils_get_env>
 8018ba0:	4602      	mov	r2, r0
 8018ba2:	b110      	cbz	r0, 8018baa <rcl_get_default_domain_id+0x1e>
 8018ba4:	2001      	movs	r0, #1
 8018ba6:	b003      	add	sp, #12
 8018ba8:	bd30      	pop	{r4, r5, pc}
 8018baa:	9b00      	ldr	r3, [sp, #0]
 8018bac:	b18b      	cbz	r3, 8018bd2 <rcl_get_default_domain_id+0x46>
 8018bae:	7818      	ldrb	r0, [r3, #0]
 8018bb0:	2800      	cmp	r0, #0
 8018bb2:	d0f8      	beq.n	8018ba6 <rcl_get_default_domain_id+0x1a>
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	a901      	add	r1, sp, #4
 8018bb8:	9201      	str	r2, [sp, #4]
 8018bba:	f002 fb87 	bl	801b2cc <strtoul>
 8018bbe:	4605      	mov	r5, r0
 8018bc0:	b150      	cbz	r0, 8018bd8 <rcl_get_default_domain_id+0x4c>
 8018bc2:	1c43      	adds	r3, r0, #1
 8018bc4:	d00d      	beq.n	8018be2 <rcl_get_default_domain_id+0x56>
 8018bc6:	6025      	str	r5, [r4, #0]
 8018bc8:	2000      	movs	r0, #0
 8018bca:	e7ec      	b.n	8018ba6 <rcl_get_default_domain_id+0x1a>
 8018bcc:	200b      	movs	r0, #11
 8018bce:	b003      	add	sp, #12
 8018bd0:	bd30      	pop	{r4, r5, pc}
 8018bd2:	4618      	mov	r0, r3
 8018bd4:	b003      	add	sp, #12
 8018bd6:	bd30      	pop	{r4, r5, pc}
 8018bd8:	9b01      	ldr	r3, [sp, #4]
 8018bda:	781b      	ldrb	r3, [r3, #0]
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d0f2      	beq.n	8018bc6 <rcl_get_default_domain_id+0x3a>
 8018be0:	e7e0      	b.n	8018ba4 <rcl_get_default_domain_id+0x18>
 8018be2:	f000 f8df 	bl	8018da4 <__errno>
 8018be6:	6803      	ldr	r3, [r0, #0]
 8018be8:	2b22      	cmp	r3, #34	; 0x22
 8018bea:	d1ec      	bne.n	8018bc6 <rcl_get_default_domain_id+0x3a>
 8018bec:	e7da      	b.n	8018ba4 <rcl_get_default_domain_id+0x18>
 8018bee:	bf00      	nop
 8018bf0:	0801e780 	.word	0x0801e780

08018bf4 <rcl_get_zero_initialized_guard_condition>:
 8018bf4:	4a03      	ldr	r2, [pc, #12]	; (8018c04 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018bf6:	4603      	mov	r3, r0
 8018bf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018bfc:	e883 0003 	stmia.w	r3, {r0, r1}
 8018c00:	4618      	mov	r0, r3
 8018c02:	4770      	bx	lr
 8018c04:	0801e790 	.word	0x0801e790

08018c08 <rcl_guard_condition_init_from_rmw>:
 8018c08:	b082      	sub	sp, #8
 8018c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c0e:	b086      	sub	sp, #24
 8018c10:	ac0c      	add	r4, sp, #48	; 0x30
 8018c12:	4684      	mov	ip, r0
 8018c14:	f844 3f04 	str.w	r3, [r4, #4]!
 8018c18:	460f      	mov	r7, r1
 8018c1a:	4690      	mov	r8, r2
 8018c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c1e:	ad01      	add	r5, sp, #4
 8018c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018c22:	6823      	ldr	r3, [r4, #0]
 8018c24:	602b      	str	r3, [r5, #0]
 8018c26:	a801      	add	r0, sp, #4
 8018c28:	4664      	mov	r4, ip
 8018c2a:	f7f5 fe77 	bl	800e91c <rcutils_allocator_is_valid>
 8018c2e:	b328      	cbz	r0, 8018c7c <rcl_guard_condition_init_from_rmw+0x74>
 8018c30:	b324      	cbz	r4, 8018c7c <rcl_guard_condition_init_from_rmw+0x74>
 8018c32:	6866      	ldr	r6, [r4, #4]
 8018c34:	b9e6      	cbnz	r6, 8018c70 <rcl_guard_condition_init_from_rmw+0x68>
 8018c36:	f1b8 0f00 	cmp.w	r8, #0
 8018c3a:	d01f      	beq.n	8018c7c <rcl_guard_condition_init_from_rmw+0x74>
 8018c3c:	4640      	mov	r0, r8
 8018c3e:	f7fb f95b 	bl	8013ef8 <rcl_context_is_valid>
 8018c42:	b308      	cbz	r0, 8018c88 <rcl_guard_condition_init_from_rmw+0x80>
 8018c44:	9b01      	ldr	r3, [sp, #4]
 8018c46:	9905      	ldr	r1, [sp, #20]
 8018c48:	201c      	movs	r0, #28
 8018c4a:	4798      	blx	r3
 8018c4c:	4605      	mov	r5, r0
 8018c4e:	6060      	str	r0, [r4, #4]
 8018c50:	b340      	cbz	r0, 8018ca4 <rcl_guard_condition_init_from_rmw+0x9c>
 8018c52:	b1df      	cbz	r7, 8018c8c <rcl_guard_condition_init_from_rmw+0x84>
 8018c54:	6007      	str	r7, [r0, #0]
 8018c56:	7106      	strb	r6, [r0, #4]
 8018c58:	ac01      	add	r4, sp, #4
 8018c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018c5c:	3508      	adds	r5, #8
 8018c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018c60:	6823      	ldr	r3, [r4, #0]
 8018c62:	602b      	str	r3, [r5, #0]
 8018c64:	2000      	movs	r0, #0
 8018c66:	b006      	add	sp, #24
 8018c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c6c:	b002      	add	sp, #8
 8018c6e:	4770      	bx	lr
 8018c70:	2064      	movs	r0, #100	; 0x64
 8018c72:	b006      	add	sp, #24
 8018c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c78:	b002      	add	sp, #8
 8018c7a:	4770      	bx	lr
 8018c7c:	200b      	movs	r0, #11
 8018c7e:	b006      	add	sp, #24
 8018c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c84:	b002      	add	sp, #8
 8018c86:	4770      	bx	lr
 8018c88:	2065      	movs	r0, #101	; 0x65
 8018c8a:	e7f2      	b.n	8018c72 <rcl_guard_condition_init_from_rmw+0x6a>
 8018c8c:	f8d8 0000 	ldr.w	r0, [r8]
 8018c90:	3028      	adds	r0, #40	; 0x28
 8018c92:	f000 f857 	bl	8018d44 <rmw_create_guard_condition>
 8018c96:	6028      	str	r0, [r5, #0]
 8018c98:	6865      	ldr	r5, [r4, #4]
 8018c9a:	682e      	ldr	r6, [r5, #0]
 8018c9c:	b126      	cbz	r6, 8018ca8 <rcl_guard_condition_init_from_rmw+0xa0>
 8018c9e:	2301      	movs	r3, #1
 8018ca0:	712b      	strb	r3, [r5, #4]
 8018ca2:	e7d9      	b.n	8018c58 <rcl_guard_condition_init_from_rmw+0x50>
 8018ca4:	200a      	movs	r0, #10
 8018ca6:	e7e4      	b.n	8018c72 <rcl_guard_condition_init_from_rmw+0x6a>
 8018ca8:	4628      	mov	r0, r5
 8018caa:	9b02      	ldr	r3, [sp, #8]
 8018cac:	9905      	ldr	r1, [sp, #20]
 8018cae:	4798      	blx	r3
 8018cb0:	6066      	str	r6, [r4, #4]
 8018cb2:	2001      	movs	r0, #1
 8018cb4:	e7dd      	b.n	8018c72 <rcl_guard_condition_init_from_rmw+0x6a>
 8018cb6:	bf00      	nop

08018cb8 <rcl_guard_condition_fini>:
 8018cb8:	b570      	push	{r4, r5, r6, lr}
 8018cba:	b082      	sub	sp, #8
 8018cbc:	b1f0      	cbz	r0, 8018cfc <rcl_guard_condition_fini+0x44>
 8018cbe:	4604      	mov	r4, r0
 8018cc0:	6840      	ldr	r0, [r0, #4]
 8018cc2:	b158      	cbz	r0, 8018cdc <rcl_guard_condition_fini+0x24>
 8018cc4:	6803      	ldr	r3, [r0, #0]
 8018cc6:	68c6      	ldr	r6, [r0, #12]
 8018cc8:	6981      	ldr	r1, [r0, #24]
 8018cca:	b15b      	cbz	r3, 8018ce4 <rcl_guard_condition_fini+0x2c>
 8018ccc:	7905      	ldrb	r5, [r0, #4]
 8018cce:	b95d      	cbnz	r5, 8018ce8 <rcl_guard_condition_fini+0x30>
 8018cd0:	47b0      	blx	r6
 8018cd2:	2300      	movs	r3, #0
 8018cd4:	4628      	mov	r0, r5
 8018cd6:	6063      	str	r3, [r4, #4]
 8018cd8:	b002      	add	sp, #8
 8018cda:	bd70      	pop	{r4, r5, r6, pc}
 8018cdc:	4605      	mov	r5, r0
 8018cde:	4628      	mov	r0, r5
 8018ce0:	b002      	add	sp, #8
 8018ce2:	bd70      	pop	{r4, r5, r6, pc}
 8018ce4:	461d      	mov	r5, r3
 8018ce6:	e7f3      	b.n	8018cd0 <rcl_guard_condition_fini+0x18>
 8018ce8:	4618      	mov	r0, r3
 8018cea:	9101      	str	r1, [sp, #4]
 8018cec:	f000 f83e 	bl	8018d6c <rmw_destroy_guard_condition>
 8018cf0:	1e05      	subs	r5, r0, #0
 8018cf2:	9901      	ldr	r1, [sp, #4]
 8018cf4:	6860      	ldr	r0, [r4, #4]
 8018cf6:	bf18      	it	ne
 8018cf8:	2501      	movne	r5, #1
 8018cfa:	e7e9      	b.n	8018cd0 <rcl_guard_condition_fini+0x18>
 8018cfc:	250b      	movs	r5, #11
 8018cfe:	4628      	mov	r0, r5
 8018d00:	b002      	add	sp, #8
 8018d02:	bd70      	pop	{r4, r5, r6, pc}

08018d04 <rcl_guard_condition_get_default_options>:
 8018d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d06:	b087      	sub	sp, #28
 8018d08:	4607      	mov	r7, r0
 8018d0a:	466c      	mov	r4, sp
 8018d0c:	4668      	mov	r0, sp
 8018d0e:	f7f5 fdf7 	bl	800e900 <rcutils_get_default_allocator>
 8018d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018d14:	4d07      	ldr	r5, [pc, #28]	; (8018d34 <rcl_guard_condition_get_default_options+0x30>)
 8018d16:	f8d4 c000 	ldr.w	ip, [r4]
 8018d1a:	462e      	mov	r6, r5
 8018d1c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8018d1e:	462c      	mov	r4, r5
 8018d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018d22:	463c      	mov	r4, r7
 8018d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018d26:	4638      	mov	r0, r7
 8018d28:	f8c6 c000 	str.w	ip, [r6]
 8018d2c:	f8c4 c000 	str.w	ip, [r4]
 8018d30:	b007      	add	sp, #28
 8018d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d34:	2000a048 	.word	0x2000a048

08018d38 <rcl_guard_condition_get_rmw_handle>:
 8018d38:	b110      	cbz	r0, 8018d40 <rcl_guard_condition_get_rmw_handle+0x8>
 8018d3a:	6840      	ldr	r0, [r0, #4]
 8018d3c:	b100      	cbz	r0, 8018d40 <rcl_guard_condition_get_rmw_handle+0x8>
 8018d3e:	6800      	ldr	r0, [r0, #0]
 8018d40:	4770      	bx	lr
 8018d42:	bf00      	nop

08018d44 <rmw_create_guard_condition>:
 8018d44:	b538      	push	{r3, r4, r5, lr}
 8018d46:	4605      	mov	r5, r0
 8018d48:	4807      	ldr	r0, [pc, #28]	; (8018d68 <rmw_create_guard_condition+0x24>)
 8018d4a:	f7fd fd13 	bl	8016774 <get_memory>
 8018d4e:	b148      	cbz	r0, 8018d64 <rmw_create_guard_condition+0x20>
 8018d50:	68c4      	ldr	r4, [r0, #12]
 8018d52:	2300      	movs	r3, #0
 8018d54:	61e5      	str	r5, [r4, #28]
 8018d56:	7423      	strb	r3, [r4, #16]
 8018d58:	f7fd fd74 	bl	8016844 <rmw_get_implementation_identifier>
 8018d5c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8018d60:	f104 0014 	add.w	r0, r4, #20
 8018d64:	bd38      	pop	{r3, r4, r5, pc}
 8018d66:	bf00      	nop
 8018d68:	2000d230 	.word	0x2000d230

08018d6c <rmw_destroy_guard_condition>:
 8018d6c:	b508      	push	{r3, lr}
 8018d6e:	4b08      	ldr	r3, [pc, #32]	; (8018d90 <rmw_destroy_guard_condition+0x24>)
 8018d70:	6819      	ldr	r1, [r3, #0]
 8018d72:	b911      	cbnz	r1, 8018d7a <rmw_destroy_guard_condition+0xe>
 8018d74:	e00a      	b.n	8018d8c <rmw_destroy_guard_condition+0x20>
 8018d76:	6889      	ldr	r1, [r1, #8]
 8018d78:	b141      	cbz	r1, 8018d8c <rmw_destroy_guard_condition+0x20>
 8018d7a:	68cb      	ldr	r3, [r1, #12]
 8018d7c:	3314      	adds	r3, #20
 8018d7e:	4298      	cmp	r0, r3
 8018d80:	d1f9      	bne.n	8018d76 <rmw_destroy_guard_condition+0xa>
 8018d82:	4803      	ldr	r0, [pc, #12]	; (8018d90 <rmw_destroy_guard_condition+0x24>)
 8018d84:	f7fd fd06 	bl	8016794 <put_memory>
 8018d88:	2000      	movs	r0, #0
 8018d8a:	bd08      	pop	{r3, pc}
 8018d8c:	2001      	movs	r0, #1
 8018d8e:	bd08      	pop	{r3, pc}
 8018d90:	2000d230 	.word	0x2000d230

08018d94 <calloc>:
 8018d94:	4b02      	ldr	r3, [pc, #8]	; (8018da0 <calloc+0xc>)
 8018d96:	460a      	mov	r2, r1
 8018d98:	4601      	mov	r1, r0
 8018d9a:	6818      	ldr	r0, [r3, #0]
 8018d9c:	f000 b9ae 	b.w	80190fc <_calloc_r>
 8018da0:	20000080 	.word	0x20000080

08018da4 <__errno>:
 8018da4:	4b01      	ldr	r3, [pc, #4]	; (8018dac <__errno+0x8>)
 8018da6:	6818      	ldr	r0, [r3, #0]
 8018da8:	4770      	bx	lr
 8018daa:	bf00      	nop
 8018dac:	20000080 	.word	0x20000080

08018db0 <std>:
 8018db0:	2300      	movs	r3, #0
 8018db2:	b510      	push	{r4, lr}
 8018db4:	4604      	mov	r4, r0
 8018db6:	e9c0 3300 	strd	r3, r3, [r0]
 8018dba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018dbe:	6083      	str	r3, [r0, #8]
 8018dc0:	8181      	strh	r1, [r0, #12]
 8018dc2:	6643      	str	r3, [r0, #100]	; 0x64
 8018dc4:	81c2      	strh	r2, [r0, #14]
 8018dc6:	6183      	str	r3, [r0, #24]
 8018dc8:	4619      	mov	r1, r3
 8018dca:	2208      	movs	r2, #8
 8018dcc:	305c      	adds	r0, #92	; 0x5c
 8018dce:	f000 f98d 	bl	80190ec <memset>
 8018dd2:	4b05      	ldr	r3, [pc, #20]	; (8018de8 <std+0x38>)
 8018dd4:	6263      	str	r3, [r4, #36]	; 0x24
 8018dd6:	4b05      	ldr	r3, [pc, #20]	; (8018dec <std+0x3c>)
 8018dd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8018dda:	4b05      	ldr	r3, [pc, #20]	; (8018df0 <std+0x40>)
 8018ddc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018dde:	4b05      	ldr	r3, [pc, #20]	; (8018df4 <std+0x44>)
 8018de0:	6224      	str	r4, [r4, #32]
 8018de2:	6323      	str	r3, [r4, #48]	; 0x30
 8018de4:	bd10      	pop	{r4, pc}
 8018de6:	bf00      	nop
 8018de8:	0801a389 	.word	0x0801a389
 8018dec:	0801a3ab 	.word	0x0801a3ab
 8018df0:	0801a3e3 	.word	0x0801a3e3
 8018df4:	0801a407 	.word	0x0801a407

08018df8 <_cleanup_r>:
 8018df8:	4901      	ldr	r1, [pc, #4]	; (8018e00 <_cleanup_r+0x8>)
 8018dfa:	f000 b8af 	b.w	8018f5c <_fwalk_reent>
 8018dfe:	bf00      	nop
 8018e00:	0801c371 	.word	0x0801c371

08018e04 <__sfmoreglue>:
 8018e04:	b570      	push	{r4, r5, r6, lr}
 8018e06:	2268      	movs	r2, #104	; 0x68
 8018e08:	1e4d      	subs	r5, r1, #1
 8018e0a:	4355      	muls	r5, r2
 8018e0c:	460e      	mov	r6, r1
 8018e0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018e12:	f000 f9f5 	bl	8019200 <_malloc_r>
 8018e16:	4604      	mov	r4, r0
 8018e18:	b140      	cbz	r0, 8018e2c <__sfmoreglue+0x28>
 8018e1a:	2100      	movs	r1, #0
 8018e1c:	e9c0 1600 	strd	r1, r6, [r0]
 8018e20:	300c      	adds	r0, #12
 8018e22:	60a0      	str	r0, [r4, #8]
 8018e24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018e28:	f000 f960 	bl	80190ec <memset>
 8018e2c:	4620      	mov	r0, r4
 8018e2e:	bd70      	pop	{r4, r5, r6, pc}

08018e30 <__sfp_lock_acquire>:
 8018e30:	4801      	ldr	r0, [pc, #4]	; (8018e38 <__sfp_lock_acquire+0x8>)
 8018e32:	f000 b920 	b.w	8019076 <__retarget_lock_acquire_recursive>
 8018e36:	bf00      	nop
 8018e38:	2000a05e 	.word	0x2000a05e

08018e3c <__sfp_lock_release>:
 8018e3c:	4801      	ldr	r0, [pc, #4]	; (8018e44 <__sfp_lock_release+0x8>)
 8018e3e:	f000 b91b 	b.w	8019078 <__retarget_lock_release_recursive>
 8018e42:	bf00      	nop
 8018e44:	2000a05e 	.word	0x2000a05e

08018e48 <__sinit_lock_acquire>:
 8018e48:	4801      	ldr	r0, [pc, #4]	; (8018e50 <__sinit_lock_acquire+0x8>)
 8018e4a:	f000 b914 	b.w	8019076 <__retarget_lock_acquire_recursive>
 8018e4e:	bf00      	nop
 8018e50:	2000a05f 	.word	0x2000a05f

08018e54 <__sinit_lock_release>:
 8018e54:	4801      	ldr	r0, [pc, #4]	; (8018e5c <__sinit_lock_release+0x8>)
 8018e56:	f000 b90f 	b.w	8019078 <__retarget_lock_release_recursive>
 8018e5a:	bf00      	nop
 8018e5c:	2000a05f 	.word	0x2000a05f

08018e60 <__sinit>:
 8018e60:	b510      	push	{r4, lr}
 8018e62:	4604      	mov	r4, r0
 8018e64:	f7ff fff0 	bl	8018e48 <__sinit_lock_acquire>
 8018e68:	69a3      	ldr	r3, [r4, #24]
 8018e6a:	b11b      	cbz	r3, 8018e74 <__sinit+0x14>
 8018e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e70:	f7ff bff0 	b.w	8018e54 <__sinit_lock_release>
 8018e74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018e78:	6523      	str	r3, [r4, #80]	; 0x50
 8018e7a:	4b13      	ldr	r3, [pc, #76]	; (8018ec8 <__sinit+0x68>)
 8018e7c:	4a13      	ldr	r2, [pc, #76]	; (8018ecc <__sinit+0x6c>)
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	62a2      	str	r2, [r4, #40]	; 0x28
 8018e82:	42a3      	cmp	r3, r4
 8018e84:	bf04      	itt	eq
 8018e86:	2301      	moveq	r3, #1
 8018e88:	61a3      	streq	r3, [r4, #24]
 8018e8a:	4620      	mov	r0, r4
 8018e8c:	f000 f820 	bl	8018ed0 <__sfp>
 8018e90:	6060      	str	r0, [r4, #4]
 8018e92:	4620      	mov	r0, r4
 8018e94:	f000 f81c 	bl	8018ed0 <__sfp>
 8018e98:	60a0      	str	r0, [r4, #8]
 8018e9a:	4620      	mov	r0, r4
 8018e9c:	f000 f818 	bl	8018ed0 <__sfp>
 8018ea0:	2200      	movs	r2, #0
 8018ea2:	60e0      	str	r0, [r4, #12]
 8018ea4:	2104      	movs	r1, #4
 8018ea6:	6860      	ldr	r0, [r4, #4]
 8018ea8:	f7ff ff82 	bl	8018db0 <std>
 8018eac:	68a0      	ldr	r0, [r4, #8]
 8018eae:	2201      	movs	r2, #1
 8018eb0:	2109      	movs	r1, #9
 8018eb2:	f7ff ff7d 	bl	8018db0 <std>
 8018eb6:	68e0      	ldr	r0, [r4, #12]
 8018eb8:	2202      	movs	r2, #2
 8018eba:	2112      	movs	r1, #18
 8018ebc:	f7ff ff78 	bl	8018db0 <std>
 8018ec0:	2301      	movs	r3, #1
 8018ec2:	61a3      	str	r3, [r4, #24]
 8018ec4:	e7d2      	b.n	8018e6c <__sinit+0xc>
 8018ec6:	bf00      	nop
 8018ec8:	0801e8fc 	.word	0x0801e8fc
 8018ecc:	08018df9 	.word	0x08018df9

08018ed0 <__sfp>:
 8018ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ed2:	4607      	mov	r7, r0
 8018ed4:	f7ff ffac 	bl	8018e30 <__sfp_lock_acquire>
 8018ed8:	4b1e      	ldr	r3, [pc, #120]	; (8018f54 <__sfp+0x84>)
 8018eda:	681e      	ldr	r6, [r3, #0]
 8018edc:	69b3      	ldr	r3, [r6, #24]
 8018ede:	b913      	cbnz	r3, 8018ee6 <__sfp+0x16>
 8018ee0:	4630      	mov	r0, r6
 8018ee2:	f7ff ffbd 	bl	8018e60 <__sinit>
 8018ee6:	3648      	adds	r6, #72	; 0x48
 8018ee8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018eec:	3b01      	subs	r3, #1
 8018eee:	d503      	bpl.n	8018ef8 <__sfp+0x28>
 8018ef0:	6833      	ldr	r3, [r6, #0]
 8018ef2:	b30b      	cbz	r3, 8018f38 <__sfp+0x68>
 8018ef4:	6836      	ldr	r6, [r6, #0]
 8018ef6:	e7f7      	b.n	8018ee8 <__sfp+0x18>
 8018ef8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018efc:	b9d5      	cbnz	r5, 8018f34 <__sfp+0x64>
 8018efe:	4b16      	ldr	r3, [pc, #88]	; (8018f58 <__sfp+0x88>)
 8018f00:	60e3      	str	r3, [r4, #12]
 8018f02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018f06:	6665      	str	r5, [r4, #100]	; 0x64
 8018f08:	f000 f8b4 	bl	8019074 <__retarget_lock_init_recursive>
 8018f0c:	f7ff ff96 	bl	8018e3c <__sfp_lock_release>
 8018f10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018f14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018f18:	6025      	str	r5, [r4, #0]
 8018f1a:	61a5      	str	r5, [r4, #24]
 8018f1c:	2208      	movs	r2, #8
 8018f1e:	4629      	mov	r1, r5
 8018f20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018f24:	f000 f8e2 	bl	80190ec <memset>
 8018f28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018f2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018f30:	4620      	mov	r0, r4
 8018f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f34:	3468      	adds	r4, #104	; 0x68
 8018f36:	e7d9      	b.n	8018eec <__sfp+0x1c>
 8018f38:	2104      	movs	r1, #4
 8018f3a:	4638      	mov	r0, r7
 8018f3c:	f7ff ff62 	bl	8018e04 <__sfmoreglue>
 8018f40:	4604      	mov	r4, r0
 8018f42:	6030      	str	r0, [r6, #0]
 8018f44:	2800      	cmp	r0, #0
 8018f46:	d1d5      	bne.n	8018ef4 <__sfp+0x24>
 8018f48:	f7ff ff78 	bl	8018e3c <__sfp_lock_release>
 8018f4c:	230c      	movs	r3, #12
 8018f4e:	603b      	str	r3, [r7, #0]
 8018f50:	e7ee      	b.n	8018f30 <__sfp+0x60>
 8018f52:	bf00      	nop
 8018f54:	0801e8fc 	.word	0x0801e8fc
 8018f58:	ffff0001 	.word	0xffff0001

08018f5c <_fwalk_reent>:
 8018f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f60:	4606      	mov	r6, r0
 8018f62:	4688      	mov	r8, r1
 8018f64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018f68:	2700      	movs	r7, #0
 8018f6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018f6e:	f1b9 0901 	subs.w	r9, r9, #1
 8018f72:	d505      	bpl.n	8018f80 <_fwalk_reent+0x24>
 8018f74:	6824      	ldr	r4, [r4, #0]
 8018f76:	2c00      	cmp	r4, #0
 8018f78:	d1f7      	bne.n	8018f6a <_fwalk_reent+0xe>
 8018f7a:	4638      	mov	r0, r7
 8018f7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f80:	89ab      	ldrh	r3, [r5, #12]
 8018f82:	2b01      	cmp	r3, #1
 8018f84:	d907      	bls.n	8018f96 <_fwalk_reent+0x3a>
 8018f86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018f8a:	3301      	adds	r3, #1
 8018f8c:	d003      	beq.n	8018f96 <_fwalk_reent+0x3a>
 8018f8e:	4629      	mov	r1, r5
 8018f90:	4630      	mov	r0, r6
 8018f92:	47c0      	blx	r8
 8018f94:	4307      	orrs	r7, r0
 8018f96:	3568      	adds	r5, #104	; 0x68
 8018f98:	e7e9      	b.n	8018f6e <_fwalk_reent+0x12>
	...

08018f9c <getenv>:
 8018f9c:	b507      	push	{r0, r1, r2, lr}
 8018f9e:	4b04      	ldr	r3, [pc, #16]	; (8018fb0 <getenv+0x14>)
 8018fa0:	4601      	mov	r1, r0
 8018fa2:	aa01      	add	r2, sp, #4
 8018fa4:	6818      	ldr	r0, [r3, #0]
 8018fa6:	f000 f805 	bl	8018fb4 <_findenv_r>
 8018faa:	b003      	add	sp, #12
 8018fac:	f85d fb04 	ldr.w	pc, [sp], #4
 8018fb0:	20000080 	.word	0x20000080

08018fb4 <_findenv_r>:
 8018fb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fb8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8019028 <_findenv_r+0x74>
 8018fbc:	4607      	mov	r7, r0
 8018fbe:	4689      	mov	r9, r1
 8018fc0:	4616      	mov	r6, r2
 8018fc2:	f003 f943 	bl	801c24c <__env_lock>
 8018fc6:	f8da 4000 	ldr.w	r4, [sl]
 8018fca:	b134      	cbz	r4, 8018fda <_findenv_r+0x26>
 8018fcc:	464b      	mov	r3, r9
 8018fce:	4698      	mov	r8, r3
 8018fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018fd4:	b13a      	cbz	r2, 8018fe6 <_findenv_r+0x32>
 8018fd6:	2a3d      	cmp	r2, #61	; 0x3d
 8018fd8:	d1f9      	bne.n	8018fce <_findenv_r+0x1a>
 8018fda:	4638      	mov	r0, r7
 8018fdc:	f003 f93c 	bl	801c258 <__env_unlock>
 8018fe0:	2000      	movs	r0, #0
 8018fe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fe6:	eba8 0809 	sub.w	r8, r8, r9
 8018fea:	46a3      	mov	fp, r4
 8018fec:	f854 0b04 	ldr.w	r0, [r4], #4
 8018ff0:	2800      	cmp	r0, #0
 8018ff2:	d0f2      	beq.n	8018fda <_findenv_r+0x26>
 8018ff4:	4642      	mov	r2, r8
 8018ff6:	4649      	mov	r1, r9
 8018ff8:	f001 fa1e 	bl	801a438 <strncmp>
 8018ffc:	2800      	cmp	r0, #0
 8018ffe:	d1f4      	bne.n	8018fea <_findenv_r+0x36>
 8019000:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019004:	eb03 0508 	add.w	r5, r3, r8
 8019008:	f813 3008 	ldrb.w	r3, [r3, r8]
 801900c:	2b3d      	cmp	r3, #61	; 0x3d
 801900e:	d1ec      	bne.n	8018fea <_findenv_r+0x36>
 8019010:	f8da 3000 	ldr.w	r3, [sl]
 8019014:	ebab 0303 	sub.w	r3, fp, r3
 8019018:	109b      	asrs	r3, r3, #2
 801901a:	4638      	mov	r0, r7
 801901c:	6033      	str	r3, [r6, #0]
 801901e:	f003 f91b 	bl	801c258 <__env_unlock>
 8019022:	1c68      	adds	r0, r5, #1
 8019024:	e7dd      	b.n	8018fe2 <_findenv_r+0x2e>
 8019026:	bf00      	nop
 8019028:	20000000 	.word	0x20000000

0801902c <__libc_init_array>:
 801902c:	b570      	push	{r4, r5, r6, lr}
 801902e:	4d0d      	ldr	r5, [pc, #52]	; (8019064 <__libc_init_array+0x38>)
 8019030:	4c0d      	ldr	r4, [pc, #52]	; (8019068 <__libc_init_array+0x3c>)
 8019032:	1b64      	subs	r4, r4, r5
 8019034:	10a4      	asrs	r4, r4, #2
 8019036:	2600      	movs	r6, #0
 8019038:	42a6      	cmp	r6, r4
 801903a:	d109      	bne.n	8019050 <__libc_init_array+0x24>
 801903c:	4d0b      	ldr	r5, [pc, #44]	; (801906c <__libc_init_array+0x40>)
 801903e:	4c0c      	ldr	r4, [pc, #48]	; (8019070 <__libc_init_array+0x44>)
 8019040:	f004 fe30 	bl	801dca4 <_init>
 8019044:	1b64      	subs	r4, r4, r5
 8019046:	10a4      	asrs	r4, r4, #2
 8019048:	2600      	movs	r6, #0
 801904a:	42a6      	cmp	r6, r4
 801904c:	d105      	bne.n	801905a <__libc_init_array+0x2e>
 801904e:	bd70      	pop	{r4, r5, r6, pc}
 8019050:	f855 3b04 	ldr.w	r3, [r5], #4
 8019054:	4798      	blx	r3
 8019056:	3601      	adds	r6, #1
 8019058:	e7ee      	b.n	8019038 <__libc_init_array+0xc>
 801905a:	f855 3b04 	ldr.w	r3, [r5], #4
 801905e:	4798      	blx	r3
 8019060:	3601      	adds	r6, #1
 8019062:	e7f2      	b.n	801904a <__libc_init_array+0x1e>
 8019064:	0801eca8 	.word	0x0801eca8
 8019068:	0801eca8 	.word	0x0801eca8
 801906c:	0801eca8 	.word	0x0801eca8
 8019070:	0801ecac 	.word	0x0801ecac

08019074 <__retarget_lock_init_recursive>:
 8019074:	4770      	bx	lr

08019076 <__retarget_lock_acquire_recursive>:
 8019076:	4770      	bx	lr

08019078 <__retarget_lock_release_recursive>:
 8019078:	4770      	bx	lr
	...

0801907c <malloc>:
 801907c:	4b02      	ldr	r3, [pc, #8]	; (8019088 <malloc+0xc>)
 801907e:	4601      	mov	r1, r0
 8019080:	6818      	ldr	r0, [r3, #0]
 8019082:	f000 b8bd 	b.w	8019200 <_malloc_r>
 8019086:	bf00      	nop
 8019088:	20000080 	.word	0x20000080

0801908c <free>:
 801908c:	4b02      	ldr	r3, [pc, #8]	; (8019098 <free+0xc>)
 801908e:	4601      	mov	r1, r0
 8019090:	6818      	ldr	r0, [r3, #0]
 8019092:	f000 b849 	b.w	8019128 <_free_r>
 8019096:	bf00      	nop
 8019098:	20000080 	.word	0x20000080

0801909c <memcpy>:
 801909c:	440a      	add	r2, r1
 801909e:	4291      	cmp	r1, r2
 80190a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80190a4:	d100      	bne.n	80190a8 <memcpy+0xc>
 80190a6:	4770      	bx	lr
 80190a8:	b510      	push	{r4, lr}
 80190aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80190ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80190b2:	4291      	cmp	r1, r2
 80190b4:	d1f9      	bne.n	80190aa <memcpy+0xe>
 80190b6:	bd10      	pop	{r4, pc}

080190b8 <memmove>:
 80190b8:	4288      	cmp	r0, r1
 80190ba:	b510      	push	{r4, lr}
 80190bc:	eb01 0402 	add.w	r4, r1, r2
 80190c0:	d902      	bls.n	80190c8 <memmove+0x10>
 80190c2:	4284      	cmp	r4, r0
 80190c4:	4623      	mov	r3, r4
 80190c6:	d807      	bhi.n	80190d8 <memmove+0x20>
 80190c8:	1e43      	subs	r3, r0, #1
 80190ca:	42a1      	cmp	r1, r4
 80190cc:	d008      	beq.n	80190e0 <memmove+0x28>
 80190ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80190d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80190d6:	e7f8      	b.n	80190ca <memmove+0x12>
 80190d8:	4402      	add	r2, r0
 80190da:	4601      	mov	r1, r0
 80190dc:	428a      	cmp	r2, r1
 80190de:	d100      	bne.n	80190e2 <memmove+0x2a>
 80190e0:	bd10      	pop	{r4, pc}
 80190e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80190e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80190ea:	e7f7      	b.n	80190dc <memmove+0x24>

080190ec <memset>:
 80190ec:	4402      	add	r2, r0
 80190ee:	4603      	mov	r3, r0
 80190f0:	4293      	cmp	r3, r2
 80190f2:	d100      	bne.n	80190f6 <memset+0xa>
 80190f4:	4770      	bx	lr
 80190f6:	f803 1b01 	strb.w	r1, [r3], #1
 80190fa:	e7f9      	b.n	80190f0 <memset+0x4>

080190fc <_calloc_r>:
 80190fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80190fe:	fba1 2402 	umull	r2, r4, r1, r2
 8019102:	b94c      	cbnz	r4, 8019118 <_calloc_r+0x1c>
 8019104:	4611      	mov	r1, r2
 8019106:	9201      	str	r2, [sp, #4]
 8019108:	f000 f87a 	bl	8019200 <_malloc_r>
 801910c:	9a01      	ldr	r2, [sp, #4]
 801910e:	4605      	mov	r5, r0
 8019110:	b930      	cbnz	r0, 8019120 <_calloc_r+0x24>
 8019112:	4628      	mov	r0, r5
 8019114:	b003      	add	sp, #12
 8019116:	bd30      	pop	{r4, r5, pc}
 8019118:	220c      	movs	r2, #12
 801911a:	6002      	str	r2, [r0, #0]
 801911c:	2500      	movs	r5, #0
 801911e:	e7f8      	b.n	8019112 <_calloc_r+0x16>
 8019120:	4621      	mov	r1, r4
 8019122:	f7ff ffe3 	bl	80190ec <memset>
 8019126:	e7f4      	b.n	8019112 <_calloc_r+0x16>

08019128 <_free_r>:
 8019128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801912a:	2900      	cmp	r1, #0
 801912c:	d044      	beq.n	80191b8 <_free_r+0x90>
 801912e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019132:	9001      	str	r0, [sp, #4]
 8019134:	2b00      	cmp	r3, #0
 8019136:	f1a1 0404 	sub.w	r4, r1, #4
 801913a:	bfb8      	it	lt
 801913c:	18e4      	addlt	r4, r4, r3
 801913e:	f003 fd63 	bl	801cc08 <__malloc_lock>
 8019142:	4a1e      	ldr	r2, [pc, #120]	; (80191bc <_free_r+0x94>)
 8019144:	9801      	ldr	r0, [sp, #4]
 8019146:	6813      	ldr	r3, [r2, #0]
 8019148:	b933      	cbnz	r3, 8019158 <_free_r+0x30>
 801914a:	6063      	str	r3, [r4, #4]
 801914c:	6014      	str	r4, [r2, #0]
 801914e:	b003      	add	sp, #12
 8019150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019154:	f003 bd5e 	b.w	801cc14 <__malloc_unlock>
 8019158:	42a3      	cmp	r3, r4
 801915a:	d908      	bls.n	801916e <_free_r+0x46>
 801915c:	6825      	ldr	r5, [r4, #0]
 801915e:	1961      	adds	r1, r4, r5
 8019160:	428b      	cmp	r3, r1
 8019162:	bf01      	itttt	eq
 8019164:	6819      	ldreq	r1, [r3, #0]
 8019166:	685b      	ldreq	r3, [r3, #4]
 8019168:	1949      	addeq	r1, r1, r5
 801916a:	6021      	streq	r1, [r4, #0]
 801916c:	e7ed      	b.n	801914a <_free_r+0x22>
 801916e:	461a      	mov	r2, r3
 8019170:	685b      	ldr	r3, [r3, #4]
 8019172:	b10b      	cbz	r3, 8019178 <_free_r+0x50>
 8019174:	42a3      	cmp	r3, r4
 8019176:	d9fa      	bls.n	801916e <_free_r+0x46>
 8019178:	6811      	ldr	r1, [r2, #0]
 801917a:	1855      	adds	r5, r2, r1
 801917c:	42a5      	cmp	r5, r4
 801917e:	d10b      	bne.n	8019198 <_free_r+0x70>
 8019180:	6824      	ldr	r4, [r4, #0]
 8019182:	4421      	add	r1, r4
 8019184:	1854      	adds	r4, r2, r1
 8019186:	42a3      	cmp	r3, r4
 8019188:	6011      	str	r1, [r2, #0]
 801918a:	d1e0      	bne.n	801914e <_free_r+0x26>
 801918c:	681c      	ldr	r4, [r3, #0]
 801918e:	685b      	ldr	r3, [r3, #4]
 8019190:	6053      	str	r3, [r2, #4]
 8019192:	4421      	add	r1, r4
 8019194:	6011      	str	r1, [r2, #0]
 8019196:	e7da      	b.n	801914e <_free_r+0x26>
 8019198:	d902      	bls.n	80191a0 <_free_r+0x78>
 801919a:	230c      	movs	r3, #12
 801919c:	6003      	str	r3, [r0, #0]
 801919e:	e7d6      	b.n	801914e <_free_r+0x26>
 80191a0:	6825      	ldr	r5, [r4, #0]
 80191a2:	1961      	adds	r1, r4, r5
 80191a4:	428b      	cmp	r3, r1
 80191a6:	bf04      	itt	eq
 80191a8:	6819      	ldreq	r1, [r3, #0]
 80191aa:	685b      	ldreq	r3, [r3, #4]
 80191ac:	6063      	str	r3, [r4, #4]
 80191ae:	bf04      	itt	eq
 80191b0:	1949      	addeq	r1, r1, r5
 80191b2:	6021      	streq	r1, [r4, #0]
 80191b4:	6054      	str	r4, [r2, #4]
 80191b6:	e7ca      	b.n	801914e <_free_r+0x26>
 80191b8:	b003      	add	sp, #12
 80191ba:	bd30      	pop	{r4, r5, pc}
 80191bc:	2000a060 	.word	0x2000a060

080191c0 <sbrk_aligned>:
 80191c0:	b570      	push	{r4, r5, r6, lr}
 80191c2:	4e0e      	ldr	r6, [pc, #56]	; (80191fc <sbrk_aligned+0x3c>)
 80191c4:	460c      	mov	r4, r1
 80191c6:	6831      	ldr	r1, [r6, #0]
 80191c8:	4605      	mov	r5, r0
 80191ca:	b911      	cbnz	r1, 80191d2 <sbrk_aligned+0x12>
 80191cc:	f001 f872 	bl	801a2b4 <_sbrk_r>
 80191d0:	6030      	str	r0, [r6, #0]
 80191d2:	4621      	mov	r1, r4
 80191d4:	4628      	mov	r0, r5
 80191d6:	f001 f86d 	bl	801a2b4 <_sbrk_r>
 80191da:	1c43      	adds	r3, r0, #1
 80191dc:	d00a      	beq.n	80191f4 <sbrk_aligned+0x34>
 80191de:	1cc4      	adds	r4, r0, #3
 80191e0:	f024 0403 	bic.w	r4, r4, #3
 80191e4:	42a0      	cmp	r0, r4
 80191e6:	d007      	beq.n	80191f8 <sbrk_aligned+0x38>
 80191e8:	1a21      	subs	r1, r4, r0
 80191ea:	4628      	mov	r0, r5
 80191ec:	f001 f862 	bl	801a2b4 <_sbrk_r>
 80191f0:	3001      	adds	r0, #1
 80191f2:	d101      	bne.n	80191f8 <sbrk_aligned+0x38>
 80191f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80191f8:	4620      	mov	r0, r4
 80191fa:	bd70      	pop	{r4, r5, r6, pc}
 80191fc:	2000a064 	.word	0x2000a064

08019200 <_malloc_r>:
 8019200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019204:	1ccd      	adds	r5, r1, #3
 8019206:	f025 0503 	bic.w	r5, r5, #3
 801920a:	3508      	adds	r5, #8
 801920c:	2d0c      	cmp	r5, #12
 801920e:	bf38      	it	cc
 8019210:	250c      	movcc	r5, #12
 8019212:	2d00      	cmp	r5, #0
 8019214:	4607      	mov	r7, r0
 8019216:	db01      	blt.n	801921c <_malloc_r+0x1c>
 8019218:	42a9      	cmp	r1, r5
 801921a:	d905      	bls.n	8019228 <_malloc_r+0x28>
 801921c:	230c      	movs	r3, #12
 801921e:	603b      	str	r3, [r7, #0]
 8019220:	2600      	movs	r6, #0
 8019222:	4630      	mov	r0, r6
 8019224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019228:	4e2e      	ldr	r6, [pc, #184]	; (80192e4 <_malloc_r+0xe4>)
 801922a:	f003 fced 	bl	801cc08 <__malloc_lock>
 801922e:	6833      	ldr	r3, [r6, #0]
 8019230:	461c      	mov	r4, r3
 8019232:	bb34      	cbnz	r4, 8019282 <_malloc_r+0x82>
 8019234:	4629      	mov	r1, r5
 8019236:	4638      	mov	r0, r7
 8019238:	f7ff ffc2 	bl	80191c0 <sbrk_aligned>
 801923c:	1c43      	adds	r3, r0, #1
 801923e:	4604      	mov	r4, r0
 8019240:	d14d      	bne.n	80192de <_malloc_r+0xde>
 8019242:	6834      	ldr	r4, [r6, #0]
 8019244:	4626      	mov	r6, r4
 8019246:	2e00      	cmp	r6, #0
 8019248:	d140      	bne.n	80192cc <_malloc_r+0xcc>
 801924a:	6823      	ldr	r3, [r4, #0]
 801924c:	4631      	mov	r1, r6
 801924e:	4638      	mov	r0, r7
 8019250:	eb04 0803 	add.w	r8, r4, r3
 8019254:	f001 f82e 	bl	801a2b4 <_sbrk_r>
 8019258:	4580      	cmp	r8, r0
 801925a:	d13a      	bne.n	80192d2 <_malloc_r+0xd2>
 801925c:	6821      	ldr	r1, [r4, #0]
 801925e:	3503      	adds	r5, #3
 8019260:	1a6d      	subs	r5, r5, r1
 8019262:	f025 0503 	bic.w	r5, r5, #3
 8019266:	3508      	adds	r5, #8
 8019268:	2d0c      	cmp	r5, #12
 801926a:	bf38      	it	cc
 801926c:	250c      	movcc	r5, #12
 801926e:	4629      	mov	r1, r5
 8019270:	4638      	mov	r0, r7
 8019272:	f7ff ffa5 	bl	80191c0 <sbrk_aligned>
 8019276:	3001      	adds	r0, #1
 8019278:	d02b      	beq.n	80192d2 <_malloc_r+0xd2>
 801927a:	6823      	ldr	r3, [r4, #0]
 801927c:	442b      	add	r3, r5
 801927e:	6023      	str	r3, [r4, #0]
 8019280:	e00e      	b.n	80192a0 <_malloc_r+0xa0>
 8019282:	6822      	ldr	r2, [r4, #0]
 8019284:	1b52      	subs	r2, r2, r5
 8019286:	d41e      	bmi.n	80192c6 <_malloc_r+0xc6>
 8019288:	2a0b      	cmp	r2, #11
 801928a:	d916      	bls.n	80192ba <_malloc_r+0xba>
 801928c:	1961      	adds	r1, r4, r5
 801928e:	42a3      	cmp	r3, r4
 8019290:	6025      	str	r5, [r4, #0]
 8019292:	bf18      	it	ne
 8019294:	6059      	strne	r1, [r3, #4]
 8019296:	6863      	ldr	r3, [r4, #4]
 8019298:	bf08      	it	eq
 801929a:	6031      	streq	r1, [r6, #0]
 801929c:	5162      	str	r2, [r4, r5]
 801929e:	604b      	str	r3, [r1, #4]
 80192a0:	4638      	mov	r0, r7
 80192a2:	f104 060b 	add.w	r6, r4, #11
 80192a6:	f003 fcb5 	bl	801cc14 <__malloc_unlock>
 80192aa:	f026 0607 	bic.w	r6, r6, #7
 80192ae:	1d23      	adds	r3, r4, #4
 80192b0:	1af2      	subs	r2, r6, r3
 80192b2:	d0b6      	beq.n	8019222 <_malloc_r+0x22>
 80192b4:	1b9b      	subs	r3, r3, r6
 80192b6:	50a3      	str	r3, [r4, r2]
 80192b8:	e7b3      	b.n	8019222 <_malloc_r+0x22>
 80192ba:	6862      	ldr	r2, [r4, #4]
 80192bc:	42a3      	cmp	r3, r4
 80192be:	bf0c      	ite	eq
 80192c0:	6032      	streq	r2, [r6, #0]
 80192c2:	605a      	strne	r2, [r3, #4]
 80192c4:	e7ec      	b.n	80192a0 <_malloc_r+0xa0>
 80192c6:	4623      	mov	r3, r4
 80192c8:	6864      	ldr	r4, [r4, #4]
 80192ca:	e7b2      	b.n	8019232 <_malloc_r+0x32>
 80192cc:	4634      	mov	r4, r6
 80192ce:	6876      	ldr	r6, [r6, #4]
 80192d0:	e7b9      	b.n	8019246 <_malloc_r+0x46>
 80192d2:	230c      	movs	r3, #12
 80192d4:	603b      	str	r3, [r7, #0]
 80192d6:	4638      	mov	r0, r7
 80192d8:	f003 fc9c 	bl	801cc14 <__malloc_unlock>
 80192dc:	e7a1      	b.n	8019222 <_malloc_r+0x22>
 80192de:	6025      	str	r5, [r4, #0]
 80192e0:	e7de      	b.n	80192a0 <_malloc_r+0xa0>
 80192e2:	bf00      	nop
 80192e4:	2000a060 	.word	0x2000a060

080192e8 <__cvt>:
 80192e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80192ec:	ec55 4b10 	vmov	r4, r5, d0
 80192f0:	2d00      	cmp	r5, #0
 80192f2:	460e      	mov	r6, r1
 80192f4:	4619      	mov	r1, r3
 80192f6:	462b      	mov	r3, r5
 80192f8:	bfbb      	ittet	lt
 80192fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80192fe:	461d      	movlt	r5, r3
 8019300:	2300      	movge	r3, #0
 8019302:	232d      	movlt	r3, #45	; 0x2d
 8019304:	700b      	strb	r3, [r1, #0]
 8019306:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019308:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801930c:	4691      	mov	r9, r2
 801930e:	f023 0820 	bic.w	r8, r3, #32
 8019312:	bfbc      	itt	lt
 8019314:	4622      	movlt	r2, r4
 8019316:	4614      	movlt	r4, r2
 8019318:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801931c:	d005      	beq.n	801932a <__cvt+0x42>
 801931e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019322:	d100      	bne.n	8019326 <__cvt+0x3e>
 8019324:	3601      	adds	r6, #1
 8019326:	2102      	movs	r1, #2
 8019328:	e000      	b.n	801932c <__cvt+0x44>
 801932a:	2103      	movs	r1, #3
 801932c:	ab03      	add	r3, sp, #12
 801932e:	9301      	str	r3, [sp, #4]
 8019330:	ab02      	add	r3, sp, #8
 8019332:	9300      	str	r3, [sp, #0]
 8019334:	ec45 4b10 	vmov	d0, r4, r5
 8019338:	4653      	mov	r3, sl
 801933a:	4632      	mov	r2, r6
 801933c:	f002 f998 	bl	801b670 <_dtoa_r>
 8019340:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019344:	4607      	mov	r7, r0
 8019346:	d102      	bne.n	801934e <__cvt+0x66>
 8019348:	f019 0f01 	tst.w	r9, #1
 801934c:	d022      	beq.n	8019394 <__cvt+0xac>
 801934e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019352:	eb07 0906 	add.w	r9, r7, r6
 8019356:	d110      	bne.n	801937a <__cvt+0x92>
 8019358:	783b      	ldrb	r3, [r7, #0]
 801935a:	2b30      	cmp	r3, #48	; 0x30
 801935c:	d10a      	bne.n	8019374 <__cvt+0x8c>
 801935e:	2200      	movs	r2, #0
 8019360:	2300      	movs	r3, #0
 8019362:	4620      	mov	r0, r4
 8019364:	4629      	mov	r1, r5
 8019366:	f7e7 fbc7 	bl	8000af8 <__aeabi_dcmpeq>
 801936a:	b918      	cbnz	r0, 8019374 <__cvt+0x8c>
 801936c:	f1c6 0601 	rsb	r6, r6, #1
 8019370:	f8ca 6000 	str.w	r6, [sl]
 8019374:	f8da 3000 	ldr.w	r3, [sl]
 8019378:	4499      	add	r9, r3
 801937a:	2200      	movs	r2, #0
 801937c:	2300      	movs	r3, #0
 801937e:	4620      	mov	r0, r4
 8019380:	4629      	mov	r1, r5
 8019382:	f7e7 fbb9 	bl	8000af8 <__aeabi_dcmpeq>
 8019386:	b108      	cbz	r0, 801938c <__cvt+0xa4>
 8019388:	f8cd 900c 	str.w	r9, [sp, #12]
 801938c:	2230      	movs	r2, #48	; 0x30
 801938e:	9b03      	ldr	r3, [sp, #12]
 8019390:	454b      	cmp	r3, r9
 8019392:	d307      	bcc.n	80193a4 <__cvt+0xbc>
 8019394:	9b03      	ldr	r3, [sp, #12]
 8019396:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019398:	1bdb      	subs	r3, r3, r7
 801939a:	4638      	mov	r0, r7
 801939c:	6013      	str	r3, [r2, #0]
 801939e:	b004      	add	sp, #16
 80193a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193a4:	1c59      	adds	r1, r3, #1
 80193a6:	9103      	str	r1, [sp, #12]
 80193a8:	701a      	strb	r2, [r3, #0]
 80193aa:	e7f0      	b.n	801938e <__cvt+0xa6>

080193ac <__exponent>:
 80193ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80193ae:	4603      	mov	r3, r0
 80193b0:	2900      	cmp	r1, #0
 80193b2:	bfb8      	it	lt
 80193b4:	4249      	neglt	r1, r1
 80193b6:	f803 2b02 	strb.w	r2, [r3], #2
 80193ba:	bfb4      	ite	lt
 80193bc:	222d      	movlt	r2, #45	; 0x2d
 80193be:	222b      	movge	r2, #43	; 0x2b
 80193c0:	2909      	cmp	r1, #9
 80193c2:	7042      	strb	r2, [r0, #1]
 80193c4:	dd2a      	ble.n	801941c <__exponent+0x70>
 80193c6:	f10d 0407 	add.w	r4, sp, #7
 80193ca:	46a4      	mov	ip, r4
 80193cc:	270a      	movs	r7, #10
 80193ce:	46a6      	mov	lr, r4
 80193d0:	460a      	mov	r2, r1
 80193d2:	fb91 f6f7 	sdiv	r6, r1, r7
 80193d6:	fb07 1516 	mls	r5, r7, r6, r1
 80193da:	3530      	adds	r5, #48	; 0x30
 80193dc:	2a63      	cmp	r2, #99	; 0x63
 80193de:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80193e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80193e6:	4631      	mov	r1, r6
 80193e8:	dcf1      	bgt.n	80193ce <__exponent+0x22>
 80193ea:	3130      	adds	r1, #48	; 0x30
 80193ec:	f1ae 0502 	sub.w	r5, lr, #2
 80193f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80193f4:	1c44      	adds	r4, r0, #1
 80193f6:	4629      	mov	r1, r5
 80193f8:	4561      	cmp	r1, ip
 80193fa:	d30a      	bcc.n	8019412 <__exponent+0x66>
 80193fc:	f10d 0209 	add.w	r2, sp, #9
 8019400:	eba2 020e 	sub.w	r2, r2, lr
 8019404:	4565      	cmp	r5, ip
 8019406:	bf88      	it	hi
 8019408:	2200      	movhi	r2, #0
 801940a:	4413      	add	r3, r2
 801940c:	1a18      	subs	r0, r3, r0
 801940e:	b003      	add	sp, #12
 8019410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019416:	f804 2f01 	strb.w	r2, [r4, #1]!
 801941a:	e7ed      	b.n	80193f8 <__exponent+0x4c>
 801941c:	2330      	movs	r3, #48	; 0x30
 801941e:	3130      	adds	r1, #48	; 0x30
 8019420:	7083      	strb	r3, [r0, #2]
 8019422:	70c1      	strb	r1, [r0, #3]
 8019424:	1d03      	adds	r3, r0, #4
 8019426:	e7f1      	b.n	801940c <__exponent+0x60>

08019428 <_printf_float>:
 8019428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801942c:	ed2d 8b02 	vpush	{d8}
 8019430:	b08d      	sub	sp, #52	; 0x34
 8019432:	460c      	mov	r4, r1
 8019434:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019438:	4616      	mov	r6, r2
 801943a:	461f      	mov	r7, r3
 801943c:	4605      	mov	r5, r0
 801943e:	f003 fb55 	bl	801caec <_localeconv_r>
 8019442:	f8d0 a000 	ldr.w	sl, [r0]
 8019446:	4650      	mov	r0, sl
 8019448:	f7e6 fed4 	bl	80001f4 <strlen>
 801944c:	2300      	movs	r3, #0
 801944e:	930a      	str	r3, [sp, #40]	; 0x28
 8019450:	6823      	ldr	r3, [r4, #0]
 8019452:	9305      	str	r3, [sp, #20]
 8019454:	f8d8 3000 	ldr.w	r3, [r8]
 8019458:	f894 b018 	ldrb.w	fp, [r4, #24]
 801945c:	3307      	adds	r3, #7
 801945e:	f023 0307 	bic.w	r3, r3, #7
 8019462:	f103 0208 	add.w	r2, r3, #8
 8019466:	f8c8 2000 	str.w	r2, [r8]
 801946a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801946e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019472:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019476:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801947a:	9307      	str	r3, [sp, #28]
 801947c:	f8cd 8018 	str.w	r8, [sp, #24]
 8019480:	ee08 0a10 	vmov	s16, r0
 8019484:	4b9f      	ldr	r3, [pc, #636]	; (8019704 <_printf_float+0x2dc>)
 8019486:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801948a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801948e:	f7e7 fb65 	bl	8000b5c <__aeabi_dcmpun>
 8019492:	bb88      	cbnz	r0, 80194f8 <_printf_float+0xd0>
 8019494:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019498:	4b9a      	ldr	r3, [pc, #616]	; (8019704 <_printf_float+0x2dc>)
 801949a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801949e:	f7e7 fb3f 	bl	8000b20 <__aeabi_dcmple>
 80194a2:	bb48      	cbnz	r0, 80194f8 <_printf_float+0xd0>
 80194a4:	2200      	movs	r2, #0
 80194a6:	2300      	movs	r3, #0
 80194a8:	4640      	mov	r0, r8
 80194aa:	4649      	mov	r1, r9
 80194ac:	f7e7 fb2e 	bl	8000b0c <__aeabi_dcmplt>
 80194b0:	b110      	cbz	r0, 80194b8 <_printf_float+0x90>
 80194b2:	232d      	movs	r3, #45	; 0x2d
 80194b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80194b8:	4b93      	ldr	r3, [pc, #588]	; (8019708 <_printf_float+0x2e0>)
 80194ba:	4894      	ldr	r0, [pc, #592]	; (801970c <_printf_float+0x2e4>)
 80194bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80194c0:	bf94      	ite	ls
 80194c2:	4698      	movls	r8, r3
 80194c4:	4680      	movhi	r8, r0
 80194c6:	2303      	movs	r3, #3
 80194c8:	6123      	str	r3, [r4, #16]
 80194ca:	9b05      	ldr	r3, [sp, #20]
 80194cc:	f023 0204 	bic.w	r2, r3, #4
 80194d0:	6022      	str	r2, [r4, #0]
 80194d2:	f04f 0900 	mov.w	r9, #0
 80194d6:	9700      	str	r7, [sp, #0]
 80194d8:	4633      	mov	r3, r6
 80194da:	aa0b      	add	r2, sp, #44	; 0x2c
 80194dc:	4621      	mov	r1, r4
 80194de:	4628      	mov	r0, r5
 80194e0:	f000 f9d8 	bl	8019894 <_printf_common>
 80194e4:	3001      	adds	r0, #1
 80194e6:	f040 8090 	bne.w	801960a <_printf_float+0x1e2>
 80194ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80194ee:	b00d      	add	sp, #52	; 0x34
 80194f0:	ecbd 8b02 	vpop	{d8}
 80194f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194f8:	4642      	mov	r2, r8
 80194fa:	464b      	mov	r3, r9
 80194fc:	4640      	mov	r0, r8
 80194fe:	4649      	mov	r1, r9
 8019500:	f7e7 fb2c 	bl	8000b5c <__aeabi_dcmpun>
 8019504:	b140      	cbz	r0, 8019518 <_printf_float+0xf0>
 8019506:	464b      	mov	r3, r9
 8019508:	2b00      	cmp	r3, #0
 801950a:	bfbc      	itt	lt
 801950c:	232d      	movlt	r3, #45	; 0x2d
 801950e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019512:	487f      	ldr	r0, [pc, #508]	; (8019710 <_printf_float+0x2e8>)
 8019514:	4b7f      	ldr	r3, [pc, #508]	; (8019714 <_printf_float+0x2ec>)
 8019516:	e7d1      	b.n	80194bc <_printf_float+0x94>
 8019518:	6863      	ldr	r3, [r4, #4]
 801951a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801951e:	9206      	str	r2, [sp, #24]
 8019520:	1c5a      	adds	r2, r3, #1
 8019522:	d13f      	bne.n	80195a4 <_printf_float+0x17c>
 8019524:	2306      	movs	r3, #6
 8019526:	6063      	str	r3, [r4, #4]
 8019528:	9b05      	ldr	r3, [sp, #20]
 801952a:	6861      	ldr	r1, [r4, #4]
 801952c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019530:	2300      	movs	r3, #0
 8019532:	9303      	str	r3, [sp, #12]
 8019534:	ab0a      	add	r3, sp, #40	; 0x28
 8019536:	e9cd b301 	strd	fp, r3, [sp, #4]
 801953a:	ab09      	add	r3, sp, #36	; 0x24
 801953c:	ec49 8b10 	vmov	d0, r8, r9
 8019540:	9300      	str	r3, [sp, #0]
 8019542:	6022      	str	r2, [r4, #0]
 8019544:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019548:	4628      	mov	r0, r5
 801954a:	f7ff fecd 	bl	80192e8 <__cvt>
 801954e:	9b06      	ldr	r3, [sp, #24]
 8019550:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019552:	2b47      	cmp	r3, #71	; 0x47
 8019554:	4680      	mov	r8, r0
 8019556:	d108      	bne.n	801956a <_printf_float+0x142>
 8019558:	1cc8      	adds	r0, r1, #3
 801955a:	db02      	blt.n	8019562 <_printf_float+0x13a>
 801955c:	6863      	ldr	r3, [r4, #4]
 801955e:	4299      	cmp	r1, r3
 8019560:	dd41      	ble.n	80195e6 <_printf_float+0x1be>
 8019562:	f1ab 0b02 	sub.w	fp, fp, #2
 8019566:	fa5f fb8b 	uxtb.w	fp, fp
 801956a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801956e:	d820      	bhi.n	80195b2 <_printf_float+0x18a>
 8019570:	3901      	subs	r1, #1
 8019572:	465a      	mov	r2, fp
 8019574:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019578:	9109      	str	r1, [sp, #36]	; 0x24
 801957a:	f7ff ff17 	bl	80193ac <__exponent>
 801957e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019580:	1813      	adds	r3, r2, r0
 8019582:	2a01      	cmp	r2, #1
 8019584:	4681      	mov	r9, r0
 8019586:	6123      	str	r3, [r4, #16]
 8019588:	dc02      	bgt.n	8019590 <_printf_float+0x168>
 801958a:	6822      	ldr	r2, [r4, #0]
 801958c:	07d2      	lsls	r2, r2, #31
 801958e:	d501      	bpl.n	8019594 <_printf_float+0x16c>
 8019590:	3301      	adds	r3, #1
 8019592:	6123      	str	r3, [r4, #16]
 8019594:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019598:	2b00      	cmp	r3, #0
 801959a:	d09c      	beq.n	80194d6 <_printf_float+0xae>
 801959c:	232d      	movs	r3, #45	; 0x2d
 801959e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80195a2:	e798      	b.n	80194d6 <_printf_float+0xae>
 80195a4:	9a06      	ldr	r2, [sp, #24]
 80195a6:	2a47      	cmp	r2, #71	; 0x47
 80195a8:	d1be      	bne.n	8019528 <_printf_float+0x100>
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d1bc      	bne.n	8019528 <_printf_float+0x100>
 80195ae:	2301      	movs	r3, #1
 80195b0:	e7b9      	b.n	8019526 <_printf_float+0xfe>
 80195b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80195b6:	d118      	bne.n	80195ea <_printf_float+0x1c2>
 80195b8:	2900      	cmp	r1, #0
 80195ba:	6863      	ldr	r3, [r4, #4]
 80195bc:	dd0b      	ble.n	80195d6 <_printf_float+0x1ae>
 80195be:	6121      	str	r1, [r4, #16]
 80195c0:	b913      	cbnz	r3, 80195c8 <_printf_float+0x1a0>
 80195c2:	6822      	ldr	r2, [r4, #0]
 80195c4:	07d0      	lsls	r0, r2, #31
 80195c6:	d502      	bpl.n	80195ce <_printf_float+0x1a6>
 80195c8:	3301      	adds	r3, #1
 80195ca:	440b      	add	r3, r1
 80195cc:	6123      	str	r3, [r4, #16]
 80195ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80195d0:	f04f 0900 	mov.w	r9, #0
 80195d4:	e7de      	b.n	8019594 <_printf_float+0x16c>
 80195d6:	b913      	cbnz	r3, 80195de <_printf_float+0x1b6>
 80195d8:	6822      	ldr	r2, [r4, #0]
 80195da:	07d2      	lsls	r2, r2, #31
 80195dc:	d501      	bpl.n	80195e2 <_printf_float+0x1ba>
 80195de:	3302      	adds	r3, #2
 80195e0:	e7f4      	b.n	80195cc <_printf_float+0x1a4>
 80195e2:	2301      	movs	r3, #1
 80195e4:	e7f2      	b.n	80195cc <_printf_float+0x1a4>
 80195e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80195ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195ec:	4299      	cmp	r1, r3
 80195ee:	db05      	blt.n	80195fc <_printf_float+0x1d4>
 80195f0:	6823      	ldr	r3, [r4, #0]
 80195f2:	6121      	str	r1, [r4, #16]
 80195f4:	07d8      	lsls	r0, r3, #31
 80195f6:	d5ea      	bpl.n	80195ce <_printf_float+0x1a6>
 80195f8:	1c4b      	adds	r3, r1, #1
 80195fa:	e7e7      	b.n	80195cc <_printf_float+0x1a4>
 80195fc:	2900      	cmp	r1, #0
 80195fe:	bfd4      	ite	le
 8019600:	f1c1 0202 	rsble	r2, r1, #2
 8019604:	2201      	movgt	r2, #1
 8019606:	4413      	add	r3, r2
 8019608:	e7e0      	b.n	80195cc <_printf_float+0x1a4>
 801960a:	6823      	ldr	r3, [r4, #0]
 801960c:	055a      	lsls	r2, r3, #21
 801960e:	d407      	bmi.n	8019620 <_printf_float+0x1f8>
 8019610:	6923      	ldr	r3, [r4, #16]
 8019612:	4642      	mov	r2, r8
 8019614:	4631      	mov	r1, r6
 8019616:	4628      	mov	r0, r5
 8019618:	47b8      	blx	r7
 801961a:	3001      	adds	r0, #1
 801961c:	d12c      	bne.n	8019678 <_printf_float+0x250>
 801961e:	e764      	b.n	80194ea <_printf_float+0xc2>
 8019620:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019624:	f240 80e0 	bls.w	80197e8 <_printf_float+0x3c0>
 8019628:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801962c:	2200      	movs	r2, #0
 801962e:	2300      	movs	r3, #0
 8019630:	f7e7 fa62 	bl	8000af8 <__aeabi_dcmpeq>
 8019634:	2800      	cmp	r0, #0
 8019636:	d034      	beq.n	80196a2 <_printf_float+0x27a>
 8019638:	4a37      	ldr	r2, [pc, #220]	; (8019718 <_printf_float+0x2f0>)
 801963a:	2301      	movs	r3, #1
 801963c:	4631      	mov	r1, r6
 801963e:	4628      	mov	r0, r5
 8019640:	47b8      	blx	r7
 8019642:	3001      	adds	r0, #1
 8019644:	f43f af51 	beq.w	80194ea <_printf_float+0xc2>
 8019648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801964c:	429a      	cmp	r2, r3
 801964e:	db02      	blt.n	8019656 <_printf_float+0x22e>
 8019650:	6823      	ldr	r3, [r4, #0]
 8019652:	07d8      	lsls	r0, r3, #31
 8019654:	d510      	bpl.n	8019678 <_printf_float+0x250>
 8019656:	ee18 3a10 	vmov	r3, s16
 801965a:	4652      	mov	r2, sl
 801965c:	4631      	mov	r1, r6
 801965e:	4628      	mov	r0, r5
 8019660:	47b8      	blx	r7
 8019662:	3001      	adds	r0, #1
 8019664:	f43f af41 	beq.w	80194ea <_printf_float+0xc2>
 8019668:	f04f 0800 	mov.w	r8, #0
 801966c:	f104 091a 	add.w	r9, r4, #26
 8019670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019672:	3b01      	subs	r3, #1
 8019674:	4543      	cmp	r3, r8
 8019676:	dc09      	bgt.n	801968c <_printf_float+0x264>
 8019678:	6823      	ldr	r3, [r4, #0]
 801967a:	079b      	lsls	r3, r3, #30
 801967c:	f100 8105 	bmi.w	801988a <_printf_float+0x462>
 8019680:	68e0      	ldr	r0, [r4, #12]
 8019682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019684:	4298      	cmp	r0, r3
 8019686:	bfb8      	it	lt
 8019688:	4618      	movlt	r0, r3
 801968a:	e730      	b.n	80194ee <_printf_float+0xc6>
 801968c:	2301      	movs	r3, #1
 801968e:	464a      	mov	r2, r9
 8019690:	4631      	mov	r1, r6
 8019692:	4628      	mov	r0, r5
 8019694:	47b8      	blx	r7
 8019696:	3001      	adds	r0, #1
 8019698:	f43f af27 	beq.w	80194ea <_printf_float+0xc2>
 801969c:	f108 0801 	add.w	r8, r8, #1
 80196a0:	e7e6      	b.n	8019670 <_printf_float+0x248>
 80196a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	dc39      	bgt.n	801971c <_printf_float+0x2f4>
 80196a8:	4a1b      	ldr	r2, [pc, #108]	; (8019718 <_printf_float+0x2f0>)
 80196aa:	2301      	movs	r3, #1
 80196ac:	4631      	mov	r1, r6
 80196ae:	4628      	mov	r0, r5
 80196b0:	47b8      	blx	r7
 80196b2:	3001      	adds	r0, #1
 80196b4:	f43f af19 	beq.w	80194ea <_printf_float+0xc2>
 80196b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80196bc:	4313      	orrs	r3, r2
 80196be:	d102      	bne.n	80196c6 <_printf_float+0x29e>
 80196c0:	6823      	ldr	r3, [r4, #0]
 80196c2:	07d9      	lsls	r1, r3, #31
 80196c4:	d5d8      	bpl.n	8019678 <_printf_float+0x250>
 80196c6:	ee18 3a10 	vmov	r3, s16
 80196ca:	4652      	mov	r2, sl
 80196cc:	4631      	mov	r1, r6
 80196ce:	4628      	mov	r0, r5
 80196d0:	47b8      	blx	r7
 80196d2:	3001      	adds	r0, #1
 80196d4:	f43f af09 	beq.w	80194ea <_printf_float+0xc2>
 80196d8:	f04f 0900 	mov.w	r9, #0
 80196dc:	f104 0a1a 	add.w	sl, r4, #26
 80196e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80196e2:	425b      	negs	r3, r3
 80196e4:	454b      	cmp	r3, r9
 80196e6:	dc01      	bgt.n	80196ec <_printf_float+0x2c4>
 80196e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80196ea:	e792      	b.n	8019612 <_printf_float+0x1ea>
 80196ec:	2301      	movs	r3, #1
 80196ee:	4652      	mov	r2, sl
 80196f0:	4631      	mov	r1, r6
 80196f2:	4628      	mov	r0, r5
 80196f4:	47b8      	blx	r7
 80196f6:	3001      	adds	r0, #1
 80196f8:	f43f aef7 	beq.w	80194ea <_printf_float+0xc2>
 80196fc:	f109 0901 	add.w	r9, r9, #1
 8019700:	e7ee      	b.n	80196e0 <_printf_float+0x2b8>
 8019702:	bf00      	nop
 8019704:	7fefffff 	.word	0x7fefffff
 8019708:	0801e900 	.word	0x0801e900
 801970c:	0801e904 	.word	0x0801e904
 8019710:	0801e90c 	.word	0x0801e90c
 8019714:	0801e908 	.word	0x0801e908
 8019718:	0801e910 	.word	0x0801e910
 801971c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801971e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019720:	429a      	cmp	r2, r3
 8019722:	bfa8      	it	ge
 8019724:	461a      	movge	r2, r3
 8019726:	2a00      	cmp	r2, #0
 8019728:	4691      	mov	r9, r2
 801972a:	dc37      	bgt.n	801979c <_printf_float+0x374>
 801972c:	f04f 0b00 	mov.w	fp, #0
 8019730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019734:	f104 021a 	add.w	r2, r4, #26
 8019738:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801973a:	9305      	str	r3, [sp, #20]
 801973c:	eba3 0309 	sub.w	r3, r3, r9
 8019740:	455b      	cmp	r3, fp
 8019742:	dc33      	bgt.n	80197ac <_printf_float+0x384>
 8019744:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019748:	429a      	cmp	r2, r3
 801974a:	db3b      	blt.n	80197c4 <_printf_float+0x39c>
 801974c:	6823      	ldr	r3, [r4, #0]
 801974e:	07da      	lsls	r2, r3, #31
 8019750:	d438      	bmi.n	80197c4 <_printf_float+0x39c>
 8019752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019754:	9a05      	ldr	r2, [sp, #20]
 8019756:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019758:	1a9a      	subs	r2, r3, r2
 801975a:	eba3 0901 	sub.w	r9, r3, r1
 801975e:	4591      	cmp	r9, r2
 8019760:	bfa8      	it	ge
 8019762:	4691      	movge	r9, r2
 8019764:	f1b9 0f00 	cmp.w	r9, #0
 8019768:	dc35      	bgt.n	80197d6 <_printf_float+0x3ae>
 801976a:	f04f 0800 	mov.w	r8, #0
 801976e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019772:	f104 0a1a 	add.w	sl, r4, #26
 8019776:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801977a:	1a9b      	subs	r3, r3, r2
 801977c:	eba3 0309 	sub.w	r3, r3, r9
 8019780:	4543      	cmp	r3, r8
 8019782:	f77f af79 	ble.w	8019678 <_printf_float+0x250>
 8019786:	2301      	movs	r3, #1
 8019788:	4652      	mov	r2, sl
 801978a:	4631      	mov	r1, r6
 801978c:	4628      	mov	r0, r5
 801978e:	47b8      	blx	r7
 8019790:	3001      	adds	r0, #1
 8019792:	f43f aeaa 	beq.w	80194ea <_printf_float+0xc2>
 8019796:	f108 0801 	add.w	r8, r8, #1
 801979a:	e7ec      	b.n	8019776 <_printf_float+0x34e>
 801979c:	4613      	mov	r3, r2
 801979e:	4631      	mov	r1, r6
 80197a0:	4642      	mov	r2, r8
 80197a2:	4628      	mov	r0, r5
 80197a4:	47b8      	blx	r7
 80197a6:	3001      	adds	r0, #1
 80197a8:	d1c0      	bne.n	801972c <_printf_float+0x304>
 80197aa:	e69e      	b.n	80194ea <_printf_float+0xc2>
 80197ac:	2301      	movs	r3, #1
 80197ae:	4631      	mov	r1, r6
 80197b0:	4628      	mov	r0, r5
 80197b2:	9205      	str	r2, [sp, #20]
 80197b4:	47b8      	blx	r7
 80197b6:	3001      	adds	r0, #1
 80197b8:	f43f ae97 	beq.w	80194ea <_printf_float+0xc2>
 80197bc:	9a05      	ldr	r2, [sp, #20]
 80197be:	f10b 0b01 	add.w	fp, fp, #1
 80197c2:	e7b9      	b.n	8019738 <_printf_float+0x310>
 80197c4:	ee18 3a10 	vmov	r3, s16
 80197c8:	4652      	mov	r2, sl
 80197ca:	4631      	mov	r1, r6
 80197cc:	4628      	mov	r0, r5
 80197ce:	47b8      	blx	r7
 80197d0:	3001      	adds	r0, #1
 80197d2:	d1be      	bne.n	8019752 <_printf_float+0x32a>
 80197d4:	e689      	b.n	80194ea <_printf_float+0xc2>
 80197d6:	9a05      	ldr	r2, [sp, #20]
 80197d8:	464b      	mov	r3, r9
 80197da:	4442      	add	r2, r8
 80197dc:	4631      	mov	r1, r6
 80197de:	4628      	mov	r0, r5
 80197e0:	47b8      	blx	r7
 80197e2:	3001      	adds	r0, #1
 80197e4:	d1c1      	bne.n	801976a <_printf_float+0x342>
 80197e6:	e680      	b.n	80194ea <_printf_float+0xc2>
 80197e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80197ea:	2a01      	cmp	r2, #1
 80197ec:	dc01      	bgt.n	80197f2 <_printf_float+0x3ca>
 80197ee:	07db      	lsls	r3, r3, #31
 80197f0:	d538      	bpl.n	8019864 <_printf_float+0x43c>
 80197f2:	2301      	movs	r3, #1
 80197f4:	4642      	mov	r2, r8
 80197f6:	4631      	mov	r1, r6
 80197f8:	4628      	mov	r0, r5
 80197fa:	47b8      	blx	r7
 80197fc:	3001      	adds	r0, #1
 80197fe:	f43f ae74 	beq.w	80194ea <_printf_float+0xc2>
 8019802:	ee18 3a10 	vmov	r3, s16
 8019806:	4652      	mov	r2, sl
 8019808:	4631      	mov	r1, r6
 801980a:	4628      	mov	r0, r5
 801980c:	47b8      	blx	r7
 801980e:	3001      	adds	r0, #1
 8019810:	f43f ae6b 	beq.w	80194ea <_printf_float+0xc2>
 8019814:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019818:	2200      	movs	r2, #0
 801981a:	2300      	movs	r3, #0
 801981c:	f7e7 f96c 	bl	8000af8 <__aeabi_dcmpeq>
 8019820:	b9d8      	cbnz	r0, 801985a <_printf_float+0x432>
 8019822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019824:	f108 0201 	add.w	r2, r8, #1
 8019828:	3b01      	subs	r3, #1
 801982a:	4631      	mov	r1, r6
 801982c:	4628      	mov	r0, r5
 801982e:	47b8      	blx	r7
 8019830:	3001      	adds	r0, #1
 8019832:	d10e      	bne.n	8019852 <_printf_float+0x42a>
 8019834:	e659      	b.n	80194ea <_printf_float+0xc2>
 8019836:	2301      	movs	r3, #1
 8019838:	4652      	mov	r2, sl
 801983a:	4631      	mov	r1, r6
 801983c:	4628      	mov	r0, r5
 801983e:	47b8      	blx	r7
 8019840:	3001      	adds	r0, #1
 8019842:	f43f ae52 	beq.w	80194ea <_printf_float+0xc2>
 8019846:	f108 0801 	add.w	r8, r8, #1
 801984a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801984c:	3b01      	subs	r3, #1
 801984e:	4543      	cmp	r3, r8
 8019850:	dcf1      	bgt.n	8019836 <_printf_float+0x40e>
 8019852:	464b      	mov	r3, r9
 8019854:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019858:	e6dc      	b.n	8019614 <_printf_float+0x1ec>
 801985a:	f04f 0800 	mov.w	r8, #0
 801985e:	f104 0a1a 	add.w	sl, r4, #26
 8019862:	e7f2      	b.n	801984a <_printf_float+0x422>
 8019864:	2301      	movs	r3, #1
 8019866:	4642      	mov	r2, r8
 8019868:	e7df      	b.n	801982a <_printf_float+0x402>
 801986a:	2301      	movs	r3, #1
 801986c:	464a      	mov	r2, r9
 801986e:	4631      	mov	r1, r6
 8019870:	4628      	mov	r0, r5
 8019872:	47b8      	blx	r7
 8019874:	3001      	adds	r0, #1
 8019876:	f43f ae38 	beq.w	80194ea <_printf_float+0xc2>
 801987a:	f108 0801 	add.w	r8, r8, #1
 801987e:	68e3      	ldr	r3, [r4, #12]
 8019880:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019882:	1a5b      	subs	r3, r3, r1
 8019884:	4543      	cmp	r3, r8
 8019886:	dcf0      	bgt.n	801986a <_printf_float+0x442>
 8019888:	e6fa      	b.n	8019680 <_printf_float+0x258>
 801988a:	f04f 0800 	mov.w	r8, #0
 801988e:	f104 0919 	add.w	r9, r4, #25
 8019892:	e7f4      	b.n	801987e <_printf_float+0x456>

08019894 <_printf_common>:
 8019894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019898:	4616      	mov	r6, r2
 801989a:	4699      	mov	r9, r3
 801989c:	688a      	ldr	r2, [r1, #8]
 801989e:	690b      	ldr	r3, [r1, #16]
 80198a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80198a4:	4293      	cmp	r3, r2
 80198a6:	bfb8      	it	lt
 80198a8:	4613      	movlt	r3, r2
 80198aa:	6033      	str	r3, [r6, #0]
 80198ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80198b0:	4607      	mov	r7, r0
 80198b2:	460c      	mov	r4, r1
 80198b4:	b10a      	cbz	r2, 80198ba <_printf_common+0x26>
 80198b6:	3301      	adds	r3, #1
 80198b8:	6033      	str	r3, [r6, #0]
 80198ba:	6823      	ldr	r3, [r4, #0]
 80198bc:	0699      	lsls	r1, r3, #26
 80198be:	bf42      	ittt	mi
 80198c0:	6833      	ldrmi	r3, [r6, #0]
 80198c2:	3302      	addmi	r3, #2
 80198c4:	6033      	strmi	r3, [r6, #0]
 80198c6:	6825      	ldr	r5, [r4, #0]
 80198c8:	f015 0506 	ands.w	r5, r5, #6
 80198cc:	d106      	bne.n	80198dc <_printf_common+0x48>
 80198ce:	f104 0a19 	add.w	sl, r4, #25
 80198d2:	68e3      	ldr	r3, [r4, #12]
 80198d4:	6832      	ldr	r2, [r6, #0]
 80198d6:	1a9b      	subs	r3, r3, r2
 80198d8:	42ab      	cmp	r3, r5
 80198da:	dc26      	bgt.n	801992a <_printf_common+0x96>
 80198dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80198e0:	1e13      	subs	r3, r2, #0
 80198e2:	6822      	ldr	r2, [r4, #0]
 80198e4:	bf18      	it	ne
 80198e6:	2301      	movne	r3, #1
 80198e8:	0692      	lsls	r2, r2, #26
 80198ea:	d42b      	bmi.n	8019944 <_printf_common+0xb0>
 80198ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80198f0:	4649      	mov	r1, r9
 80198f2:	4638      	mov	r0, r7
 80198f4:	47c0      	blx	r8
 80198f6:	3001      	adds	r0, #1
 80198f8:	d01e      	beq.n	8019938 <_printf_common+0xa4>
 80198fa:	6823      	ldr	r3, [r4, #0]
 80198fc:	68e5      	ldr	r5, [r4, #12]
 80198fe:	6832      	ldr	r2, [r6, #0]
 8019900:	f003 0306 	and.w	r3, r3, #6
 8019904:	2b04      	cmp	r3, #4
 8019906:	bf08      	it	eq
 8019908:	1aad      	subeq	r5, r5, r2
 801990a:	68a3      	ldr	r3, [r4, #8]
 801990c:	6922      	ldr	r2, [r4, #16]
 801990e:	bf0c      	ite	eq
 8019910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019914:	2500      	movne	r5, #0
 8019916:	4293      	cmp	r3, r2
 8019918:	bfc4      	itt	gt
 801991a:	1a9b      	subgt	r3, r3, r2
 801991c:	18ed      	addgt	r5, r5, r3
 801991e:	2600      	movs	r6, #0
 8019920:	341a      	adds	r4, #26
 8019922:	42b5      	cmp	r5, r6
 8019924:	d11a      	bne.n	801995c <_printf_common+0xc8>
 8019926:	2000      	movs	r0, #0
 8019928:	e008      	b.n	801993c <_printf_common+0xa8>
 801992a:	2301      	movs	r3, #1
 801992c:	4652      	mov	r2, sl
 801992e:	4649      	mov	r1, r9
 8019930:	4638      	mov	r0, r7
 8019932:	47c0      	blx	r8
 8019934:	3001      	adds	r0, #1
 8019936:	d103      	bne.n	8019940 <_printf_common+0xac>
 8019938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801993c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019940:	3501      	adds	r5, #1
 8019942:	e7c6      	b.n	80198d2 <_printf_common+0x3e>
 8019944:	18e1      	adds	r1, r4, r3
 8019946:	1c5a      	adds	r2, r3, #1
 8019948:	2030      	movs	r0, #48	; 0x30
 801994a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801994e:	4422      	add	r2, r4
 8019950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019958:	3302      	adds	r3, #2
 801995a:	e7c7      	b.n	80198ec <_printf_common+0x58>
 801995c:	2301      	movs	r3, #1
 801995e:	4622      	mov	r2, r4
 8019960:	4649      	mov	r1, r9
 8019962:	4638      	mov	r0, r7
 8019964:	47c0      	blx	r8
 8019966:	3001      	adds	r0, #1
 8019968:	d0e6      	beq.n	8019938 <_printf_common+0xa4>
 801996a:	3601      	adds	r6, #1
 801996c:	e7d9      	b.n	8019922 <_printf_common+0x8e>
	...

08019970 <_printf_i>:
 8019970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019974:	7e0f      	ldrb	r7, [r1, #24]
 8019976:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019978:	2f78      	cmp	r7, #120	; 0x78
 801997a:	4691      	mov	r9, r2
 801997c:	4680      	mov	r8, r0
 801997e:	460c      	mov	r4, r1
 8019980:	469a      	mov	sl, r3
 8019982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019986:	d807      	bhi.n	8019998 <_printf_i+0x28>
 8019988:	2f62      	cmp	r7, #98	; 0x62
 801998a:	d80a      	bhi.n	80199a2 <_printf_i+0x32>
 801998c:	2f00      	cmp	r7, #0
 801998e:	f000 80d8 	beq.w	8019b42 <_printf_i+0x1d2>
 8019992:	2f58      	cmp	r7, #88	; 0x58
 8019994:	f000 80a3 	beq.w	8019ade <_printf_i+0x16e>
 8019998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801999c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80199a0:	e03a      	b.n	8019a18 <_printf_i+0xa8>
 80199a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80199a6:	2b15      	cmp	r3, #21
 80199a8:	d8f6      	bhi.n	8019998 <_printf_i+0x28>
 80199aa:	a101      	add	r1, pc, #4	; (adr r1, 80199b0 <_printf_i+0x40>)
 80199ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80199b0:	08019a09 	.word	0x08019a09
 80199b4:	08019a1d 	.word	0x08019a1d
 80199b8:	08019999 	.word	0x08019999
 80199bc:	08019999 	.word	0x08019999
 80199c0:	08019999 	.word	0x08019999
 80199c4:	08019999 	.word	0x08019999
 80199c8:	08019a1d 	.word	0x08019a1d
 80199cc:	08019999 	.word	0x08019999
 80199d0:	08019999 	.word	0x08019999
 80199d4:	08019999 	.word	0x08019999
 80199d8:	08019999 	.word	0x08019999
 80199dc:	08019b29 	.word	0x08019b29
 80199e0:	08019a4d 	.word	0x08019a4d
 80199e4:	08019b0b 	.word	0x08019b0b
 80199e8:	08019999 	.word	0x08019999
 80199ec:	08019999 	.word	0x08019999
 80199f0:	08019b4b 	.word	0x08019b4b
 80199f4:	08019999 	.word	0x08019999
 80199f8:	08019a4d 	.word	0x08019a4d
 80199fc:	08019999 	.word	0x08019999
 8019a00:	08019999 	.word	0x08019999
 8019a04:	08019b13 	.word	0x08019b13
 8019a08:	682b      	ldr	r3, [r5, #0]
 8019a0a:	1d1a      	adds	r2, r3, #4
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	602a      	str	r2, [r5, #0]
 8019a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019a18:	2301      	movs	r3, #1
 8019a1a:	e0a3      	b.n	8019b64 <_printf_i+0x1f4>
 8019a1c:	6820      	ldr	r0, [r4, #0]
 8019a1e:	6829      	ldr	r1, [r5, #0]
 8019a20:	0606      	lsls	r6, r0, #24
 8019a22:	f101 0304 	add.w	r3, r1, #4
 8019a26:	d50a      	bpl.n	8019a3e <_printf_i+0xce>
 8019a28:	680e      	ldr	r6, [r1, #0]
 8019a2a:	602b      	str	r3, [r5, #0]
 8019a2c:	2e00      	cmp	r6, #0
 8019a2e:	da03      	bge.n	8019a38 <_printf_i+0xc8>
 8019a30:	232d      	movs	r3, #45	; 0x2d
 8019a32:	4276      	negs	r6, r6
 8019a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a38:	485e      	ldr	r0, [pc, #376]	; (8019bb4 <_printf_i+0x244>)
 8019a3a:	230a      	movs	r3, #10
 8019a3c:	e019      	b.n	8019a72 <_printf_i+0x102>
 8019a3e:	680e      	ldr	r6, [r1, #0]
 8019a40:	602b      	str	r3, [r5, #0]
 8019a42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019a46:	bf18      	it	ne
 8019a48:	b236      	sxthne	r6, r6
 8019a4a:	e7ef      	b.n	8019a2c <_printf_i+0xbc>
 8019a4c:	682b      	ldr	r3, [r5, #0]
 8019a4e:	6820      	ldr	r0, [r4, #0]
 8019a50:	1d19      	adds	r1, r3, #4
 8019a52:	6029      	str	r1, [r5, #0]
 8019a54:	0601      	lsls	r1, r0, #24
 8019a56:	d501      	bpl.n	8019a5c <_printf_i+0xec>
 8019a58:	681e      	ldr	r6, [r3, #0]
 8019a5a:	e002      	b.n	8019a62 <_printf_i+0xf2>
 8019a5c:	0646      	lsls	r6, r0, #25
 8019a5e:	d5fb      	bpl.n	8019a58 <_printf_i+0xe8>
 8019a60:	881e      	ldrh	r6, [r3, #0]
 8019a62:	4854      	ldr	r0, [pc, #336]	; (8019bb4 <_printf_i+0x244>)
 8019a64:	2f6f      	cmp	r7, #111	; 0x6f
 8019a66:	bf0c      	ite	eq
 8019a68:	2308      	moveq	r3, #8
 8019a6a:	230a      	movne	r3, #10
 8019a6c:	2100      	movs	r1, #0
 8019a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019a72:	6865      	ldr	r5, [r4, #4]
 8019a74:	60a5      	str	r5, [r4, #8]
 8019a76:	2d00      	cmp	r5, #0
 8019a78:	bfa2      	ittt	ge
 8019a7a:	6821      	ldrge	r1, [r4, #0]
 8019a7c:	f021 0104 	bicge.w	r1, r1, #4
 8019a80:	6021      	strge	r1, [r4, #0]
 8019a82:	b90e      	cbnz	r6, 8019a88 <_printf_i+0x118>
 8019a84:	2d00      	cmp	r5, #0
 8019a86:	d04d      	beq.n	8019b24 <_printf_i+0x1b4>
 8019a88:	4615      	mov	r5, r2
 8019a8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8019a8e:	fb03 6711 	mls	r7, r3, r1, r6
 8019a92:	5dc7      	ldrb	r7, [r0, r7]
 8019a94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019a98:	4637      	mov	r7, r6
 8019a9a:	42bb      	cmp	r3, r7
 8019a9c:	460e      	mov	r6, r1
 8019a9e:	d9f4      	bls.n	8019a8a <_printf_i+0x11a>
 8019aa0:	2b08      	cmp	r3, #8
 8019aa2:	d10b      	bne.n	8019abc <_printf_i+0x14c>
 8019aa4:	6823      	ldr	r3, [r4, #0]
 8019aa6:	07de      	lsls	r6, r3, #31
 8019aa8:	d508      	bpl.n	8019abc <_printf_i+0x14c>
 8019aaa:	6923      	ldr	r3, [r4, #16]
 8019aac:	6861      	ldr	r1, [r4, #4]
 8019aae:	4299      	cmp	r1, r3
 8019ab0:	bfde      	ittt	le
 8019ab2:	2330      	movle	r3, #48	; 0x30
 8019ab4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019ab8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8019abc:	1b52      	subs	r2, r2, r5
 8019abe:	6122      	str	r2, [r4, #16]
 8019ac0:	f8cd a000 	str.w	sl, [sp]
 8019ac4:	464b      	mov	r3, r9
 8019ac6:	aa03      	add	r2, sp, #12
 8019ac8:	4621      	mov	r1, r4
 8019aca:	4640      	mov	r0, r8
 8019acc:	f7ff fee2 	bl	8019894 <_printf_common>
 8019ad0:	3001      	adds	r0, #1
 8019ad2:	d14c      	bne.n	8019b6e <_printf_i+0x1fe>
 8019ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ad8:	b004      	add	sp, #16
 8019ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ade:	4835      	ldr	r0, [pc, #212]	; (8019bb4 <_printf_i+0x244>)
 8019ae0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019ae4:	6829      	ldr	r1, [r5, #0]
 8019ae6:	6823      	ldr	r3, [r4, #0]
 8019ae8:	f851 6b04 	ldr.w	r6, [r1], #4
 8019aec:	6029      	str	r1, [r5, #0]
 8019aee:	061d      	lsls	r5, r3, #24
 8019af0:	d514      	bpl.n	8019b1c <_printf_i+0x1ac>
 8019af2:	07df      	lsls	r7, r3, #31
 8019af4:	bf44      	itt	mi
 8019af6:	f043 0320 	orrmi.w	r3, r3, #32
 8019afa:	6023      	strmi	r3, [r4, #0]
 8019afc:	b91e      	cbnz	r6, 8019b06 <_printf_i+0x196>
 8019afe:	6823      	ldr	r3, [r4, #0]
 8019b00:	f023 0320 	bic.w	r3, r3, #32
 8019b04:	6023      	str	r3, [r4, #0]
 8019b06:	2310      	movs	r3, #16
 8019b08:	e7b0      	b.n	8019a6c <_printf_i+0xfc>
 8019b0a:	6823      	ldr	r3, [r4, #0]
 8019b0c:	f043 0320 	orr.w	r3, r3, #32
 8019b10:	6023      	str	r3, [r4, #0]
 8019b12:	2378      	movs	r3, #120	; 0x78
 8019b14:	4828      	ldr	r0, [pc, #160]	; (8019bb8 <_printf_i+0x248>)
 8019b16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019b1a:	e7e3      	b.n	8019ae4 <_printf_i+0x174>
 8019b1c:	0659      	lsls	r1, r3, #25
 8019b1e:	bf48      	it	mi
 8019b20:	b2b6      	uxthmi	r6, r6
 8019b22:	e7e6      	b.n	8019af2 <_printf_i+0x182>
 8019b24:	4615      	mov	r5, r2
 8019b26:	e7bb      	b.n	8019aa0 <_printf_i+0x130>
 8019b28:	682b      	ldr	r3, [r5, #0]
 8019b2a:	6826      	ldr	r6, [r4, #0]
 8019b2c:	6961      	ldr	r1, [r4, #20]
 8019b2e:	1d18      	adds	r0, r3, #4
 8019b30:	6028      	str	r0, [r5, #0]
 8019b32:	0635      	lsls	r5, r6, #24
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	d501      	bpl.n	8019b3c <_printf_i+0x1cc>
 8019b38:	6019      	str	r1, [r3, #0]
 8019b3a:	e002      	b.n	8019b42 <_printf_i+0x1d2>
 8019b3c:	0670      	lsls	r0, r6, #25
 8019b3e:	d5fb      	bpl.n	8019b38 <_printf_i+0x1c8>
 8019b40:	8019      	strh	r1, [r3, #0]
 8019b42:	2300      	movs	r3, #0
 8019b44:	6123      	str	r3, [r4, #16]
 8019b46:	4615      	mov	r5, r2
 8019b48:	e7ba      	b.n	8019ac0 <_printf_i+0x150>
 8019b4a:	682b      	ldr	r3, [r5, #0]
 8019b4c:	1d1a      	adds	r2, r3, #4
 8019b4e:	602a      	str	r2, [r5, #0]
 8019b50:	681d      	ldr	r5, [r3, #0]
 8019b52:	6862      	ldr	r2, [r4, #4]
 8019b54:	2100      	movs	r1, #0
 8019b56:	4628      	mov	r0, r5
 8019b58:	f7e6 fb5a 	bl	8000210 <memchr>
 8019b5c:	b108      	cbz	r0, 8019b62 <_printf_i+0x1f2>
 8019b5e:	1b40      	subs	r0, r0, r5
 8019b60:	6060      	str	r0, [r4, #4]
 8019b62:	6863      	ldr	r3, [r4, #4]
 8019b64:	6123      	str	r3, [r4, #16]
 8019b66:	2300      	movs	r3, #0
 8019b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b6c:	e7a8      	b.n	8019ac0 <_printf_i+0x150>
 8019b6e:	6923      	ldr	r3, [r4, #16]
 8019b70:	462a      	mov	r2, r5
 8019b72:	4649      	mov	r1, r9
 8019b74:	4640      	mov	r0, r8
 8019b76:	47d0      	blx	sl
 8019b78:	3001      	adds	r0, #1
 8019b7a:	d0ab      	beq.n	8019ad4 <_printf_i+0x164>
 8019b7c:	6823      	ldr	r3, [r4, #0]
 8019b7e:	079b      	lsls	r3, r3, #30
 8019b80:	d413      	bmi.n	8019baa <_printf_i+0x23a>
 8019b82:	68e0      	ldr	r0, [r4, #12]
 8019b84:	9b03      	ldr	r3, [sp, #12]
 8019b86:	4298      	cmp	r0, r3
 8019b88:	bfb8      	it	lt
 8019b8a:	4618      	movlt	r0, r3
 8019b8c:	e7a4      	b.n	8019ad8 <_printf_i+0x168>
 8019b8e:	2301      	movs	r3, #1
 8019b90:	4632      	mov	r2, r6
 8019b92:	4649      	mov	r1, r9
 8019b94:	4640      	mov	r0, r8
 8019b96:	47d0      	blx	sl
 8019b98:	3001      	adds	r0, #1
 8019b9a:	d09b      	beq.n	8019ad4 <_printf_i+0x164>
 8019b9c:	3501      	adds	r5, #1
 8019b9e:	68e3      	ldr	r3, [r4, #12]
 8019ba0:	9903      	ldr	r1, [sp, #12]
 8019ba2:	1a5b      	subs	r3, r3, r1
 8019ba4:	42ab      	cmp	r3, r5
 8019ba6:	dcf2      	bgt.n	8019b8e <_printf_i+0x21e>
 8019ba8:	e7eb      	b.n	8019b82 <_printf_i+0x212>
 8019baa:	2500      	movs	r5, #0
 8019bac:	f104 0619 	add.w	r6, r4, #25
 8019bb0:	e7f5      	b.n	8019b9e <_printf_i+0x22e>
 8019bb2:	bf00      	nop
 8019bb4:	0801e912 	.word	0x0801e912
 8019bb8:	0801e923 	.word	0x0801e923

08019bbc <_scanf_float>:
 8019bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bc0:	b087      	sub	sp, #28
 8019bc2:	4617      	mov	r7, r2
 8019bc4:	9303      	str	r3, [sp, #12]
 8019bc6:	688b      	ldr	r3, [r1, #8]
 8019bc8:	1e5a      	subs	r2, r3, #1
 8019bca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019bce:	bf83      	ittte	hi
 8019bd0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019bd4:	195b      	addhi	r3, r3, r5
 8019bd6:	9302      	strhi	r3, [sp, #8]
 8019bd8:	2300      	movls	r3, #0
 8019bda:	bf86      	itte	hi
 8019bdc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019be0:	608b      	strhi	r3, [r1, #8]
 8019be2:	9302      	strls	r3, [sp, #8]
 8019be4:	680b      	ldr	r3, [r1, #0]
 8019be6:	468b      	mov	fp, r1
 8019be8:	2500      	movs	r5, #0
 8019bea:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8019bee:	f84b 3b1c 	str.w	r3, [fp], #28
 8019bf2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019bf6:	4680      	mov	r8, r0
 8019bf8:	460c      	mov	r4, r1
 8019bfa:	465e      	mov	r6, fp
 8019bfc:	46aa      	mov	sl, r5
 8019bfe:	46a9      	mov	r9, r5
 8019c00:	9501      	str	r5, [sp, #4]
 8019c02:	68a2      	ldr	r2, [r4, #8]
 8019c04:	b152      	cbz	r2, 8019c1c <_scanf_float+0x60>
 8019c06:	683b      	ldr	r3, [r7, #0]
 8019c08:	781b      	ldrb	r3, [r3, #0]
 8019c0a:	2b4e      	cmp	r3, #78	; 0x4e
 8019c0c:	d864      	bhi.n	8019cd8 <_scanf_float+0x11c>
 8019c0e:	2b40      	cmp	r3, #64	; 0x40
 8019c10:	d83c      	bhi.n	8019c8c <_scanf_float+0xd0>
 8019c12:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8019c16:	b2c8      	uxtb	r0, r1
 8019c18:	280e      	cmp	r0, #14
 8019c1a:	d93a      	bls.n	8019c92 <_scanf_float+0xd6>
 8019c1c:	f1b9 0f00 	cmp.w	r9, #0
 8019c20:	d003      	beq.n	8019c2a <_scanf_float+0x6e>
 8019c22:	6823      	ldr	r3, [r4, #0]
 8019c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019c28:	6023      	str	r3, [r4, #0]
 8019c2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8019c2e:	f1ba 0f01 	cmp.w	sl, #1
 8019c32:	f200 8113 	bhi.w	8019e5c <_scanf_float+0x2a0>
 8019c36:	455e      	cmp	r6, fp
 8019c38:	f200 8105 	bhi.w	8019e46 <_scanf_float+0x28a>
 8019c3c:	2501      	movs	r5, #1
 8019c3e:	4628      	mov	r0, r5
 8019c40:	b007      	add	sp, #28
 8019c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c46:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8019c4a:	2a0d      	cmp	r2, #13
 8019c4c:	d8e6      	bhi.n	8019c1c <_scanf_float+0x60>
 8019c4e:	a101      	add	r1, pc, #4	; (adr r1, 8019c54 <_scanf_float+0x98>)
 8019c50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019c54:	08019d93 	.word	0x08019d93
 8019c58:	08019c1d 	.word	0x08019c1d
 8019c5c:	08019c1d 	.word	0x08019c1d
 8019c60:	08019c1d 	.word	0x08019c1d
 8019c64:	08019df3 	.word	0x08019df3
 8019c68:	08019dcb 	.word	0x08019dcb
 8019c6c:	08019c1d 	.word	0x08019c1d
 8019c70:	08019c1d 	.word	0x08019c1d
 8019c74:	08019da1 	.word	0x08019da1
 8019c78:	08019c1d 	.word	0x08019c1d
 8019c7c:	08019c1d 	.word	0x08019c1d
 8019c80:	08019c1d 	.word	0x08019c1d
 8019c84:	08019c1d 	.word	0x08019c1d
 8019c88:	08019d59 	.word	0x08019d59
 8019c8c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8019c90:	e7db      	b.n	8019c4a <_scanf_float+0x8e>
 8019c92:	290e      	cmp	r1, #14
 8019c94:	d8c2      	bhi.n	8019c1c <_scanf_float+0x60>
 8019c96:	a001      	add	r0, pc, #4	; (adr r0, 8019c9c <_scanf_float+0xe0>)
 8019c98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019c9c:	08019d4b 	.word	0x08019d4b
 8019ca0:	08019c1d 	.word	0x08019c1d
 8019ca4:	08019d4b 	.word	0x08019d4b
 8019ca8:	08019ddf 	.word	0x08019ddf
 8019cac:	08019c1d 	.word	0x08019c1d
 8019cb0:	08019cf9 	.word	0x08019cf9
 8019cb4:	08019d35 	.word	0x08019d35
 8019cb8:	08019d35 	.word	0x08019d35
 8019cbc:	08019d35 	.word	0x08019d35
 8019cc0:	08019d35 	.word	0x08019d35
 8019cc4:	08019d35 	.word	0x08019d35
 8019cc8:	08019d35 	.word	0x08019d35
 8019ccc:	08019d35 	.word	0x08019d35
 8019cd0:	08019d35 	.word	0x08019d35
 8019cd4:	08019d35 	.word	0x08019d35
 8019cd8:	2b6e      	cmp	r3, #110	; 0x6e
 8019cda:	d809      	bhi.n	8019cf0 <_scanf_float+0x134>
 8019cdc:	2b60      	cmp	r3, #96	; 0x60
 8019cde:	d8b2      	bhi.n	8019c46 <_scanf_float+0x8a>
 8019ce0:	2b54      	cmp	r3, #84	; 0x54
 8019ce2:	d077      	beq.n	8019dd4 <_scanf_float+0x218>
 8019ce4:	2b59      	cmp	r3, #89	; 0x59
 8019ce6:	d199      	bne.n	8019c1c <_scanf_float+0x60>
 8019ce8:	2d07      	cmp	r5, #7
 8019cea:	d197      	bne.n	8019c1c <_scanf_float+0x60>
 8019cec:	2508      	movs	r5, #8
 8019cee:	e029      	b.n	8019d44 <_scanf_float+0x188>
 8019cf0:	2b74      	cmp	r3, #116	; 0x74
 8019cf2:	d06f      	beq.n	8019dd4 <_scanf_float+0x218>
 8019cf4:	2b79      	cmp	r3, #121	; 0x79
 8019cf6:	e7f6      	b.n	8019ce6 <_scanf_float+0x12a>
 8019cf8:	6821      	ldr	r1, [r4, #0]
 8019cfa:	05c8      	lsls	r0, r1, #23
 8019cfc:	d51a      	bpl.n	8019d34 <_scanf_float+0x178>
 8019cfe:	9b02      	ldr	r3, [sp, #8]
 8019d00:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8019d04:	6021      	str	r1, [r4, #0]
 8019d06:	f109 0901 	add.w	r9, r9, #1
 8019d0a:	b11b      	cbz	r3, 8019d14 <_scanf_float+0x158>
 8019d0c:	3b01      	subs	r3, #1
 8019d0e:	3201      	adds	r2, #1
 8019d10:	9302      	str	r3, [sp, #8]
 8019d12:	60a2      	str	r2, [r4, #8]
 8019d14:	68a3      	ldr	r3, [r4, #8]
 8019d16:	3b01      	subs	r3, #1
 8019d18:	60a3      	str	r3, [r4, #8]
 8019d1a:	6923      	ldr	r3, [r4, #16]
 8019d1c:	3301      	adds	r3, #1
 8019d1e:	6123      	str	r3, [r4, #16]
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	3b01      	subs	r3, #1
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	607b      	str	r3, [r7, #4]
 8019d28:	f340 8084 	ble.w	8019e34 <_scanf_float+0x278>
 8019d2c:	683b      	ldr	r3, [r7, #0]
 8019d2e:	3301      	adds	r3, #1
 8019d30:	603b      	str	r3, [r7, #0]
 8019d32:	e766      	b.n	8019c02 <_scanf_float+0x46>
 8019d34:	eb1a 0f05 	cmn.w	sl, r5
 8019d38:	f47f af70 	bne.w	8019c1c <_scanf_float+0x60>
 8019d3c:	6822      	ldr	r2, [r4, #0]
 8019d3e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8019d42:	6022      	str	r2, [r4, #0]
 8019d44:	f806 3b01 	strb.w	r3, [r6], #1
 8019d48:	e7e4      	b.n	8019d14 <_scanf_float+0x158>
 8019d4a:	6822      	ldr	r2, [r4, #0]
 8019d4c:	0610      	lsls	r0, r2, #24
 8019d4e:	f57f af65 	bpl.w	8019c1c <_scanf_float+0x60>
 8019d52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019d56:	e7f4      	b.n	8019d42 <_scanf_float+0x186>
 8019d58:	f1ba 0f00 	cmp.w	sl, #0
 8019d5c:	d10e      	bne.n	8019d7c <_scanf_float+0x1c0>
 8019d5e:	f1b9 0f00 	cmp.w	r9, #0
 8019d62:	d10e      	bne.n	8019d82 <_scanf_float+0x1c6>
 8019d64:	6822      	ldr	r2, [r4, #0]
 8019d66:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019d6a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019d6e:	d108      	bne.n	8019d82 <_scanf_float+0x1c6>
 8019d70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019d74:	6022      	str	r2, [r4, #0]
 8019d76:	f04f 0a01 	mov.w	sl, #1
 8019d7a:	e7e3      	b.n	8019d44 <_scanf_float+0x188>
 8019d7c:	f1ba 0f02 	cmp.w	sl, #2
 8019d80:	d055      	beq.n	8019e2e <_scanf_float+0x272>
 8019d82:	2d01      	cmp	r5, #1
 8019d84:	d002      	beq.n	8019d8c <_scanf_float+0x1d0>
 8019d86:	2d04      	cmp	r5, #4
 8019d88:	f47f af48 	bne.w	8019c1c <_scanf_float+0x60>
 8019d8c:	3501      	adds	r5, #1
 8019d8e:	b2ed      	uxtb	r5, r5
 8019d90:	e7d8      	b.n	8019d44 <_scanf_float+0x188>
 8019d92:	f1ba 0f01 	cmp.w	sl, #1
 8019d96:	f47f af41 	bne.w	8019c1c <_scanf_float+0x60>
 8019d9a:	f04f 0a02 	mov.w	sl, #2
 8019d9e:	e7d1      	b.n	8019d44 <_scanf_float+0x188>
 8019da0:	b97d      	cbnz	r5, 8019dc2 <_scanf_float+0x206>
 8019da2:	f1b9 0f00 	cmp.w	r9, #0
 8019da6:	f47f af3c 	bne.w	8019c22 <_scanf_float+0x66>
 8019daa:	6822      	ldr	r2, [r4, #0]
 8019dac:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019db0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019db4:	f47f af39 	bne.w	8019c2a <_scanf_float+0x6e>
 8019db8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019dbc:	6022      	str	r2, [r4, #0]
 8019dbe:	2501      	movs	r5, #1
 8019dc0:	e7c0      	b.n	8019d44 <_scanf_float+0x188>
 8019dc2:	2d03      	cmp	r5, #3
 8019dc4:	d0e2      	beq.n	8019d8c <_scanf_float+0x1d0>
 8019dc6:	2d05      	cmp	r5, #5
 8019dc8:	e7de      	b.n	8019d88 <_scanf_float+0x1cc>
 8019dca:	2d02      	cmp	r5, #2
 8019dcc:	f47f af26 	bne.w	8019c1c <_scanf_float+0x60>
 8019dd0:	2503      	movs	r5, #3
 8019dd2:	e7b7      	b.n	8019d44 <_scanf_float+0x188>
 8019dd4:	2d06      	cmp	r5, #6
 8019dd6:	f47f af21 	bne.w	8019c1c <_scanf_float+0x60>
 8019dda:	2507      	movs	r5, #7
 8019ddc:	e7b2      	b.n	8019d44 <_scanf_float+0x188>
 8019dde:	6822      	ldr	r2, [r4, #0]
 8019de0:	0591      	lsls	r1, r2, #22
 8019de2:	f57f af1b 	bpl.w	8019c1c <_scanf_float+0x60>
 8019de6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8019dea:	6022      	str	r2, [r4, #0]
 8019dec:	f8cd 9004 	str.w	r9, [sp, #4]
 8019df0:	e7a8      	b.n	8019d44 <_scanf_float+0x188>
 8019df2:	6822      	ldr	r2, [r4, #0]
 8019df4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8019df8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8019dfc:	d006      	beq.n	8019e0c <_scanf_float+0x250>
 8019dfe:	0550      	lsls	r0, r2, #21
 8019e00:	f57f af0c 	bpl.w	8019c1c <_scanf_float+0x60>
 8019e04:	f1b9 0f00 	cmp.w	r9, #0
 8019e08:	f43f af0f 	beq.w	8019c2a <_scanf_float+0x6e>
 8019e0c:	0591      	lsls	r1, r2, #22
 8019e0e:	bf58      	it	pl
 8019e10:	9901      	ldrpl	r1, [sp, #4]
 8019e12:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019e16:	bf58      	it	pl
 8019e18:	eba9 0101 	subpl.w	r1, r9, r1
 8019e1c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8019e20:	bf58      	it	pl
 8019e22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8019e26:	6022      	str	r2, [r4, #0]
 8019e28:	f04f 0900 	mov.w	r9, #0
 8019e2c:	e78a      	b.n	8019d44 <_scanf_float+0x188>
 8019e2e:	f04f 0a03 	mov.w	sl, #3
 8019e32:	e787      	b.n	8019d44 <_scanf_float+0x188>
 8019e34:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019e38:	4639      	mov	r1, r7
 8019e3a:	4640      	mov	r0, r8
 8019e3c:	4798      	blx	r3
 8019e3e:	2800      	cmp	r0, #0
 8019e40:	f43f aedf 	beq.w	8019c02 <_scanf_float+0x46>
 8019e44:	e6ea      	b.n	8019c1c <_scanf_float+0x60>
 8019e46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019e4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019e4e:	463a      	mov	r2, r7
 8019e50:	4640      	mov	r0, r8
 8019e52:	4798      	blx	r3
 8019e54:	6923      	ldr	r3, [r4, #16]
 8019e56:	3b01      	subs	r3, #1
 8019e58:	6123      	str	r3, [r4, #16]
 8019e5a:	e6ec      	b.n	8019c36 <_scanf_float+0x7a>
 8019e5c:	1e6b      	subs	r3, r5, #1
 8019e5e:	2b06      	cmp	r3, #6
 8019e60:	d825      	bhi.n	8019eae <_scanf_float+0x2f2>
 8019e62:	2d02      	cmp	r5, #2
 8019e64:	d836      	bhi.n	8019ed4 <_scanf_float+0x318>
 8019e66:	455e      	cmp	r6, fp
 8019e68:	f67f aee8 	bls.w	8019c3c <_scanf_float+0x80>
 8019e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019e70:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019e74:	463a      	mov	r2, r7
 8019e76:	4640      	mov	r0, r8
 8019e78:	4798      	blx	r3
 8019e7a:	6923      	ldr	r3, [r4, #16]
 8019e7c:	3b01      	subs	r3, #1
 8019e7e:	6123      	str	r3, [r4, #16]
 8019e80:	e7f1      	b.n	8019e66 <_scanf_float+0x2aa>
 8019e82:	9802      	ldr	r0, [sp, #8]
 8019e84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019e88:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8019e8c:	9002      	str	r0, [sp, #8]
 8019e8e:	463a      	mov	r2, r7
 8019e90:	4640      	mov	r0, r8
 8019e92:	4798      	blx	r3
 8019e94:	6923      	ldr	r3, [r4, #16]
 8019e96:	3b01      	subs	r3, #1
 8019e98:	6123      	str	r3, [r4, #16]
 8019e9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8019e9e:	fa5f fa8a 	uxtb.w	sl, sl
 8019ea2:	f1ba 0f02 	cmp.w	sl, #2
 8019ea6:	d1ec      	bne.n	8019e82 <_scanf_float+0x2c6>
 8019ea8:	3d03      	subs	r5, #3
 8019eaa:	b2ed      	uxtb	r5, r5
 8019eac:	1b76      	subs	r6, r6, r5
 8019eae:	6823      	ldr	r3, [r4, #0]
 8019eb0:	05da      	lsls	r2, r3, #23
 8019eb2:	d52f      	bpl.n	8019f14 <_scanf_float+0x358>
 8019eb4:	055b      	lsls	r3, r3, #21
 8019eb6:	d510      	bpl.n	8019eda <_scanf_float+0x31e>
 8019eb8:	455e      	cmp	r6, fp
 8019eba:	f67f aebf 	bls.w	8019c3c <_scanf_float+0x80>
 8019ebe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019ec2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019ec6:	463a      	mov	r2, r7
 8019ec8:	4640      	mov	r0, r8
 8019eca:	4798      	blx	r3
 8019ecc:	6923      	ldr	r3, [r4, #16]
 8019ece:	3b01      	subs	r3, #1
 8019ed0:	6123      	str	r3, [r4, #16]
 8019ed2:	e7f1      	b.n	8019eb8 <_scanf_float+0x2fc>
 8019ed4:	46aa      	mov	sl, r5
 8019ed6:	9602      	str	r6, [sp, #8]
 8019ed8:	e7df      	b.n	8019e9a <_scanf_float+0x2de>
 8019eda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8019ede:	6923      	ldr	r3, [r4, #16]
 8019ee0:	2965      	cmp	r1, #101	; 0x65
 8019ee2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8019ee6:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8019eea:	6123      	str	r3, [r4, #16]
 8019eec:	d00c      	beq.n	8019f08 <_scanf_float+0x34c>
 8019eee:	2945      	cmp	r1, #69	; 0x45
 8019ef0:	d00a      	beq.n	8019f08 <_scanf_float+0x34c>
 8019ef2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019ef6:	463a      	mov	r2, r7
 8019ef8:	4640      	mov	r0, r8
 8019efa:	4798      	blx	r3
 8019efc:	6923      	ldr	r3, [r4, #16]
 8019efe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8019f02:	3b01      	subs	r3, #1
 8019f04:	1eb5      	subs	r5, r6, #2
 8019f06:	6123      	str	r3, [r4, #16]
 8019f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019f0c:	463a      	mov	r2, r7
 8019f0e:	4640      	mov	r0, r8
 8019f10:	4798      	blx	r3
 8019f12:	462e      	mov	r6, r5
 8019f14:	6825      	ldr	r5, [r4, #0]
 8019f16:	f015 0510 	ands.w	r5, r5, #16
 8019f1a:	d159      	bne.n	8019fd0 <_scanf_float+0x414>
 8019f1c:	7035      	strb	r5, [r6, #0]
 8019f1e:	6823      	ldr	r3, [r4, #0]
 8019f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8019f24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019f28:	d11b      	bne.n	8019f62 <_scanf_float+0x3a6>
 8019f2a:	9b01      	ldr	r3, [sp, #4]
 8019f2c:	454b      	cmp	r3, r9
 8019f2e:	eba3 0209 	sub.w	r2, r3, r9
 8019f32:	d123      	bne.n	8019f7c <_scanf_float+0x3c0>
 8019f34:	2200      	movs	r2, #0
 8019f36:	4659      	mov	r1, fp
 8019f38:	4640      	mov	r0, r8
 8019f3a:	f001 f8cb 	bl	801b0d4 <_strtod_r>
 8019f3e:	6822      	ldr	r2, [r4, #0]
 8019f40:	9b03      	ldr	r3, [sp, #12]
 8019f42:	f012 0f02 	tst.w	r2, #2
 8019f46:	ec57 6b10 	vmov	r6, r7, d0
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	d021      	beq.n	8019f92 <_scanf_float+0x3d6>
 8019f4e:	9903      	ldr	r1, [sp, #12]
 8019f50:	1d1a      	adds	r2, r3, #4
 8019f52:	600a      	str	r2, [r1, #0]
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	e9c3 6700 	strd	r6, r7, [r3]
 8019f5a:	68e3      	ldr	r3, [r4, #12]
 8019f5c:	3301      	adds	r3, #1
 8019f5e:	60e3      	str	r3, [r4, #12]
 8019f60:	e66d      	b.n	8019c3e <_scanf_float+0x82>
 8019f62:	9b04      	ldr	r3, [sp, #16]
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d0e5      	beq.n	8019f34 <_scanf_float+0x378>
 8019f68:	9905      	ldr	r1, [sp, #20]
 8019f6a:	230a      	movs	r3, #10
 8019f6c:	462a      	mov	r2, r5
 8019f6e:	3101      	adds	r1, #1
 8019f70:	4640      	mov	r0, r8
 8019f72:	f001 f937 	bl	801b1e4 <_strtol_r>
 8019f76:	9b04      	ldr	r3, [sp, #16]
 8019f78:	9e05      	ldr	r6, [sp, #20]
 8019f7a:	1ac2      	subs	r2, r0, r3
 8019f7c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8019f80:	429e      	cmp	r6, r3
 8019f82:	bf28      	it	cs
 8019f84:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8019f88:	4912      	ldr	r1, [pc, #72]	; (8019fd4 <_scanf_float+0x418>)
 8019f8a:	4630      	mov	r0, r6
 8019f8c:	f000 f9dc 	bl	801a348 <siprintf>
 8019f90:	e7d0      	b.n	8019f34 <_scanf_float+0x378>
 8019f92:	9903      	ldr	r1, [sp, #12]
 8019f94:	f012 0f04 	tst.w	r2, #4
 8019f98:	f103 0204 	add.w	r2, r3, #4
 8019f9c:	600a      	str	r2, [r1, #0]
 8019f9e:	d1d9      	bne.n	8019f54 <_scanf_float+0x398>
 8019fa0:	f8d3 8000 	ldr.w	r8, [r3]
 8019fa4:	ee10 2a10 	vmov	r2, s0
 8019fa8:	ee10 0a10 	vmov	r0, s0
 8019fac:	463b      	mov	r3, r7
 8019fae:	4639      	mov	r1, r7
 8019fb0:	f7e6 fdd4 	bl	8000b5c <__aeabi_dcmpun>
 8019fb4:	b128      	cbz	r0, 8019fc2 <_scanf_float+0x406>
 8019fb6:	4808      	ldr	r0, [pc, #32]	; (8019fd8 <_scanf_float+0x41c>)
 8019fb8:	f000 f98c 	bl	801a2d4 <nanf>
 8019fbc:	ed88 0a00 	vstr	s0, [r8]
 8019fc0:	e7cb      	b.n	8019f5a <_scanf_float+0x39e>
 8019fc2:	4630      	mov	r0, r6
 8019fc4:	4639      	mov	r1, r7
 8019fc6:	f7e6 fe27 	bl	8000c18 <__aeabi_d2f>
 8019fca:	f8c8 0000 	str.w	r0, [r8]
 8019fce:	e7c4      	b.n	8019f5a <_scanf_float+0x39e>
 8019fd0:	2500      	movs	r5, #0
 8019fd2:	e634      	b.n	8019c3e <_scanf_float+0x82>
 8019fd4:	0801e934 	.word	0x0801e934
 8019fd8:	0801ea3b 	.word	0x0801ea3b

08019fdc <iprintf>:
 8019fdc:	b40f      	push	{r0, r1, r2, r3}
 8019fde:	4b0a      	ldr	r3, [pc, #40]	; (801a008 <iprintf+0x2c>)
 8019fe0:	b513      	push	{r0, r1, r4, lr}
 8019fe2:	681c      	ldr	r4, [r3, #0]
 8019fe4:	b124      	cbz	r4, 8019ff0 <iprintf+0x14>
 8019fe6:	69a3      	ldr	r3, [r4, #24]
 8019fe8:	b913      	cbnz	r3, 8019ff0 <iprintf+0x14>
 8019fea:	4620      	mov	r0, r4
 8019fec:	f7fe ff38 	bl	8018e60 <__sinit>
 8019ff0:	ab05      	add	r3, sp, #20
 8019ff2:	9a04      	ldr	r2, [sp, #16]
 8019ff4:	68a1      	ldr	r1, [r4, #8]
 8019ff6:	9301      	str	r3, [sp, #4]
 8019ff8:	4620      	mov	r0, r4
 8019ffa:	f003 fc87 	bl	801d90c <_vfiprintf_r>
 8019ffe:	b002      	add	sp, #8
 801a000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a004:	b004      	add	sp, #16
 801a006:	4770      	bx	lr
 801a008:	20000080 	.word	0x20000080

0801a00c <_puts_r>:
 801a00c:	b570      	push	{r4, r5, r6, lr}
 801a00e:	460e      	mov	r6, r1
 801a010:	4605      	mov	r5, r0
 801a012:	b118      	cbz	r0, 801a01c <_puts_r+0x10>
 801a014:	6983      	ldr	r3, [r0, #24]
 801a016:	b90b      	cbnz	r3, 801a01c <_puts_r+0x10>
 801a018:	f7fe ff22 	bl	8018e60 <__sinit>
 801a01c:	69ab      	ldr	r3, [r5, #24]
 801a01e:	68ac      	ldr	r4, [r5, #8]
 801a020:	b913      	cbnz	r3, 801a028 <_puts_r+0x1c>
 801a022:	4628      	mov	r0, r5
 801a024:	f7fe ff1c 	bl	8018e60 <__sinit>
 801a028:	4b2c      	ldr	r3, [pc, #176]	; (801a0dc <_puts_r+0xd0>)
 801a02a:	429c      	cmp	r4, r3
 801a02c:	d120      	bne.n	801a070 <_puts_r+0x64>
 801a02e:	686c      	ldr	r4, [r5, #4]
 801a030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a032:	07db      	lsls	r3, r3, #31
 801a034:	d405      	bmi.n	801a042 <_puts_r+0x36>
 801a036:	89a3      	ldrh	r3, [r4, #12]
 801a038:	0598      	lsls	r0, r3, #22
 801a03a:	d402      	bmi.n	801a042 <_puts_r+0x36>
 801a03c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a03e:	f7ff f81a 	bl	8019076 <__retarget_lock_acquire_recursive>
 801a042:	89a3      	ldrh	r3, [r4, #12]
 801a044:	0719      	lsls	r1, r3, #28
 801a046:	d51d      	bpl.n	801a084 <_puts_r+0x78>
 801a048:	6923      	ldr	r3, [r4, #16]
 801a04a:	b1db      	cbz	r3, 801a084 <_puts_r+0x78>
 801a04c:	3e01      	subs	r6, #1
 801a04e:	68a3      	ldr	r3, [r4, #8]
 801a050:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a054:	3b01      	subs	r3, #1
 801a056:	60a3      	str	r3, [r4, #8]
 801a058:	bb39      	cbnz	r1, 801a0aa <_puts_r+0x9e>
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	da38      	bge.n	801a0d0 <_puts_r+0xc4>
 801a05e:	4622      	mov	r2, r4
 801a060:	210a      	movs	r1, #10
 801a062:	4628      	mov	r0, r5
 801a064:	f001 f976 	bl	801b354 <__swbuf_r>
 801a068:	3001      	adds	r0, #1
 801a06a:	d011      	beq.n	801a090 <_puts_r+0x84>
 801a06c:	250a      	movs	r5, #10
 801a06e:	e011      	b.n	801a094 <_puts_r+0x88>
 801a070:	4b1b      	ldr	r3, [pc, #108]	; (801a0e0 <_puts_r+0xd4>)
 801a072:	429c      	cmp	r4, r3
 801a074:	d101      	bne.n	801a07a <_puts_r+0x6e>
 801a076:	68ac      	ldr	r4, [r5, #8]
 801a078:	e7da      	b.n	801a030 <_puts_r+0x24>
 801a07a:	4b1a      	ldr	r3, [pc, #104]	; (801a0e4 <_puts_r+0xd8>)
 801a07c:	429c      	cmp	r4, r3
 801a07e:	bf08      	it	eq
 801a080:	68ec      	ldreq	r4, [r5, #12]
 801a082:	e7d5      	b.n	801a030 <_puts_r+0x24>
 801a084:	4621      	mov	r1, r4
 801a086:	4628      	mov	r0, r5
 801a088:	f001 f9c8 	bl	801b41c <__swsetup_r>
 801a08c:	2800      	cmp	r0, #0
 801a08e:	d0dd      	beq.n	801a04c <_puts_r+0x40>
 801a090:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a094:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a096:	07da      	lsls	r2, r3, #31
 801a098:	d405      	bmi.n	801a0a6 <_puts_r+0x9a>
 801a09a:	89a3      	ldrh	r3, [r4, #12]
 801a09c:	059b      	lsls	r3, r3, #22
 801a09e:	d402      	bmi.n	801a0a6 <_puts_r+0x9a>
 801a0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0a2:	f7fe ffe9 	bl	8019078 <__retarget_lock_release_recursive>
 801a0a6:	4628      	mov	r0, r5
 801a0a8:	bd70      	pop	{r4, r5, r6, pc}
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	da04      	bge.n	801a0b8 <_puts_r+0xac>
 801a0ae:	69a2      	ldr	r2, [r4, #24]
 801a0b0:	429a      	cmp	r2, r3
 801a0b2:	dc06      	bgt.n	801a0c2 <_puts_r+0xb6>
 801a0b4:	290a      	cmp	r1, #10
 801a0b6:	d004      	beq.n	801a0c2 <_puts_r+0xb6>
 801a0b8:	6823      	ldr	r3, [r4, #0]
 801a0ba:	1c5a      	adds	r2, r3, #1
 801a0bc:	6022      	str	r2, [r4, #0]
 801a0be:	7019      	strb	r1, [r3, #0]
 801a0c0:	e7c5      	b.n	801a04e <_puts_r+0x42>
 801a0c2:	4622      	mov	r2, r4
 801a0c4:	4628      	mov	r0, r5
 801a0c6:	f001 f945 	bl	801b354 <__swbuf_r>
 801a0ca:	3001      	adds	r0, #1
 801a0cc:	d1bf      	bne.n	801a04e <_puts_r+0x42>
 801a0ce:	e7df      	b.n	801a090 <_puts_r+0x84>
 801a0d0:	6823      	ldr	r3, [r4, #0]
 801a0d2:	250a      	movs	r5, #10
 801a0d4:	1c5a      	adds	r2, r3, #1
 801a0d6:	6022      	str	r2, [r4, #0]
 801a0d8:	701d      	strb	r5, [r3, #0]
 801a0da:	e7db      	b.n	801a094 <_puts_r+0x88>
 801a0dc:	0801e8bc 	.word	0x0801e8bc
 801a0e0:	0801e8dc 	.word	0x0801e8dc
 801a0e4:	0801e89c 	.word	0x0801e89c

0801a0e8 <puts>:
 801a0e8:	4b02      	ldr	r3, [pc, #8]	; (801a0f4 <puts+0xc>)
 801a0ea:	4601      	mov	r1, r0
 801a0ec:	6818      	ldr	r0, [r3, #0]
 801a0ee:	f7ff bf8d 	b.w	801a00c <_puts_r>
 801a0f2:	bf00      	nop
 801a0f4:	20000080 	.word	0x20000080

0801a0f8 <srand>:
 801a0f8:	b538      	push	{r3, r4, r5, lr}
 801a0fa:	4b10      	ldr	r3, [pc, #64]	; (801a13c <srand+0x44>)
 801a0fc:	681d      	ldr	r5, [r3, #0]
 801a0fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801a100:	4604      	mov	r4, r0
 801a102:	b9b3      	cbnz	r3, 801a132 <srand+0x3a>
 801a104:	2018      	movs	r0, #24
 801a106:	f7fe ffb9 	bl	801907c <malloc>
 801a10a:	4602      	mov	r2, r0
 801a10c:	63a8      	str	r0, [r5, #56]	; 0x38
 801a10e:	b920      	cbnz	r0, 801a11a <srand+0x22>
 801a110:	4b0b      	ldr	r3, [pc, #44]	; (801a140 <srand+0x48>)
 801a112:	480c      	ldr	r0, [pc, #48]	; (801a144 <srand+0x4c>)
 801a114:	2142      	movs	r1, #66	; 0x42
 801a116:	f001 f9ef 	bl	801b4f8 <__assert_func>
 801a11a:	490b      	ldr	r1, [pc, #44]	; (801a148 <srand+0x50>)
 801a11c:	4b0b      	ldr	r3, [pc, #44]	; (801a14c <srand+0x54>)
 801a11e:	e9c0 1300 	strd	r1, r3, [r0]
 801a122:	4b0b      	ldr	r3, [pc, #44]	; (801a150 <srand+0x58>)
 801a124:	6083      	str	r3, [r0, #8]
 801a126:	230b      	movs	r3, #11
 801a128:	8183      	strh	r3, [r0, #12]
 801a12a:	2100      	movs	r1, #0
 801a12c:	2001      	movs	r0, #1
 801a12e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a132:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801a134:	2200      	movs	r2, #0
 801a136:	611c      	str	r4, [r3, #16]
 801a138:	615a      	str	r2, [r3, #20]
 801a13a:	bd38      	pop	{r3, r4, r5, pc}
 801a13c:	20000080 	.word	0x20000080
 801a140:	0801e939 	.word	0x0801e939
 801a144:	0801e950 	.word	0x0801e950
 801a148:	abcd330e 	.word	0xabcd330e
 801a14c:	e66d1234 	.word	0xe66d1234
 801a150:	0005deec 	.word	0x0005deec

0801a154 <rand>:
 801a154:	4b16      	ldr	r3, [pc, #88]	; (801a1b0 <rand+0x5c>)
 801a156:	b510      	push	{r4, lr}
 801a158:	681c      	ldr	r4, [r3, #0]
 801a15a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a15c:	b9b3      	cbnz	r3, 801a18c <rand+0x38>
 801a15e:	2018      	movs	r0, #24
 801a160:	f7fe ff8c 	bl	801907c <malloc>
 801a164:	63a0      	str	r0, [r4, #56]	; 0x38
 801a166:	b928      	cbnz	r0, 801a174 <rand+0x20>
 801a168:	4602      	mov	r2, r0
 801a16a:	4b12      	ldr	r3, [pc, #72]	; (801a1b4 <rand+0x60>)
 801a16c:	4812      	ldr	r0, [pc, #72]	; (801a1b8 <rand+0x64>)
 801a16e:	214e      	movs	r1, #78	; 0x4e
 801a170:	f001 f9c2 	bl	801b4f8 <__assert_func>
 801a174:	4a11      	ldr	r2, [pc, #68]	; (801a1bc <rand+0x68>)
 801a176:	4b12      	ldr	r3, [pc, #72]	; (801a1c0 <rand+0x6c>)
 801a178:	e9c0 2300 	strd	r2, r3, [r0]
 801a17c:	4b11      	ldr	r3, [pc, #68]	; (801a1c4 <rand+0x70>)
 801a17e:	6083      	str	r3, [r0, #8]
 801a180:	230b      	movs	r3, #11
 801a182:	8183      	strh	r3, [r0, #12]
 801a184:	2201      	movs	r2, #1
 801a186:	2300      	movs	r3, #0
 801a188:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a18c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801a18e:	4a0e      	ldr	r2, [pc, #56]	; (801a1c8 <rand+0x74>)
 801a190:	6920      	ldr	r0, [r4, #16]
 801a192:	6963      	ldr	r3, [r4, #20]
 801a194:	490d      	ldr	r1, [pc, #52]	; (801a1cc <rand+0x78>)
 801a196:	4342      	muls	r2, r0
 801a198:	fb01 2203 	mla	r2, r1, r3, r2
 801a19c:	fba0 0101 	umull	r0, r1, r0, r1
 801a1a0:	1c43      	adds	r3, r0, #1
 801a1a2:	eb42 0001 	adc.w	r0, r2, r1
 801a1a6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801a1aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a1ae:	bd10      	pop	{r4, pc}
 801a1b0:	20000080 	.word	0x20000080
 801a1b4:	0801e939 	.word	0x0801e939
 801a1b8:	0801e950 	.word	0x0801e950
 801a1bc:	abcd330e 	.word	0xabcd330e
 801a1c0:	e66d1234 	.word	0xe66d1234
 801a1c4:	0005deec 	.word	0x0005deec
 801a1c8:	5851f42d 	.word	0x5851f42d
 801a1cc:	4c957f2d 	.word	0x4c957f2d

0801a1d0 <realloc>:
 801a1d0:	4b02      	ldr	r3, [pc, #8]	; (801a1dc <realloc+0xc>)
 801a1d2:	460a      	mov	r2, r1
 801a1d4:	4601      	mov	r1, r0
 801a1d6:	6818      	ldr	r0, [r3, #0]
 801a1d8:	f003 b9e3 	b.w	801d5a2 <_realloc_r>
 801a1dc:	20000080 	.word	0x20000080

0801a1e0 <cleanup_glue>:
 801a1e0:	b538      	push	{r3, r4, r5, lr}
 801a1e2:	460c      	mov	r4, r1
 801a1e4:	6809      	ldr	r1, [r1, #0]
 801a1e6:	4605      	mov	r5, r0
 801a1e8:	b109      	cbz	r1, 801a1ee <cleanup_glue+0xe>
 801a1ea:	f7ff fff9 	bl	801a1e0 <cleanup_glue>
 801a1ee:	4621      	mov	r1, r4
 801a1f0:	4628      	mov	r0, r5
 801a1f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a1f6:	f7fe bf97 	b.w	8019128 <_free_r>
	...

0801a1fc <_reclaim_reent>:
 801a1fc:	4b2c      	ldr	r3, [pc, #176]	; (801a2b0 <_reclaim_reent+0xb4>)
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	4283      	cmp	r3, r0
 801a202:	b570      	push	{r4, r5, r6, lr}
 801a204:	4604      	mov	r4, r0
 801a206:	d051      	beq.n	801a2ac <_reclaim_reent+0xb0>
 801a208:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a20a:	b143      	cbz	r3, 801a21e <_reclaim_reent+0x22>
 801a20c:	68db      	ldr	r3, [r3, #12]
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d14a      	bne.n	801a2a8 <_reclaim_reent+0xac>
 801a212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a214:	6819      	ldr	r1, [r3, #0]
 801a216:	b111      	cbz	r1, 801a21e <_reclaim_reent+0x22>
 801a218:	4620      	mov	r0, r4
 801a21a:	f7fe ff85 	bl	8019128 <_free_r>
 801a21e:	6961      	ldr	r1, [r4, #20]
 801a220:	b111      	cbz	r1, 801a228 <_reclaim_reent+0x2c>
 801a222:	4620      	mov	r0, r4
 801a224:	f7fe ff80 	bl	8019128 <_free_r>
 801a228:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a22a:	b111      	cbz	r1, 801a232 <_reclaim_reent+0x36>
 801a22c:	4620      	mov	r0, r4
 801a22e:	f7fe ff7b 	bl	8019128 <_free_r>
 801a232:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a234:	b111      	cbz	r1, 801a23c <_reclaim_reent+0x40>
 801a236:	4620      	mov	r0, r4
 801a238:	f7fe ff76 	bl	8019128 <_free_r>
 801a23c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a23e:	b111      	cbz	r1, 801a246 <_reclaim_reent+0x4a>
 801a240:	4620      	mov	r0, r4
 801a242:	f7fe ff71 	bl	8019128 <_free_r>
 801a246:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801a248:	b111      	cbz	r1, 801a250 <_reclaim_reent+0x54>
 801a24a:	4620      	mov	r0, r4
 801a24c:	f7fe ff6c 	bl	8019128 <_free_r>
 801a250:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801a252:	b111      	cbz	r1, 801a25a <_reclaim_reent+0x5e>
 801a254:	4620      	mov	r0, r4
 801a256:	f7fe ff67 	bl	8019128 <_free_r>
 801a25a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a25c:	b111      	cbz	r1, 801a264 <_reclaim_reent+0x68>
 801a25e:	4620      	mov	r0, r4
 801a260:	f7fe ff62 	bl	8019128 <_free_r>
 801a264:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a266:	b111      	cbz	r1, 801a26e <_reclaim_reent+0x72>
 801a268:	4620      	mov	r0, r4
 801a26a:	f7fe ff5d 	bl	8019128 <_free_r>
 801a26e:	69a3      	ldr	r3, [r4, #24]
 801a270:	b1e3      	cbz	r3, 801a2ac <_reclaim_reent+0xb0>
 801a272:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a274:	4620      	mov	r0, r4
 801a276:	4798      	blx	r3
 801a278:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a27a:	b1b9      	cbz	r1, 801a2ac <_reclaim_reent+0xb0>
 801a27c:	4620      	mov	r0, r4
 801a27e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a282:	f7ff bfad 	b.w	801a1e0 <cleanup_glue>
 801a286:	5949      	ldr	r1, [r1, r5]
 801a288:	b941      	cbnz	r1, 801a29c <_reclaim_reent+0xa0>
 801a28a:	3504      	adds	r5, #4
 801a28c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a28e:	2d80      	cmp	r5, #128	; 0x80
 801a290:	68d9      	ldr	r1, [r3, #12]
 801a292:	d1f8      	bne.n	801a286 <_reclaim_reent+0x8a>
 801a294:	4620      	mov	r0, r4
 801a296:	f7fe ff47 	bl	8019128 <_free_r>
 801a29a:	e7ba      	b.n	801a212 <_reclaim_reent+0x16>
 801a29c:	680e      	ldr	r6, [r1, #0]
 801a29e:	4620      	mov	r0, r4
 801a2a0:	f7fe ff42 	bl	8019128 <_free_r>
 801a2a4:	4631      	mov	r1, r6
 801a2a6:	e7ef      	b.n	801a288 <_reclaim_reent+0x8c>
 801a2a8:	2500      	movs	r5, #0
 801a2aa:	e7ef      	b.n	801a28c <_reclaim_reent+0x90>
 801a2ac:	bd70      	pop	{r4, r5, r6, pc}
 801a2ae:	bf00      	nop
 801a2b0:	20000080 	.word	0x20000080

0801a2b4 <_sbrk_r>:
 801a2b4:	b538      	push	{r3, r4, r5, lr}
 801a2b6:	4d06      	ldr	r5, [pc, #24]	; (801a2d0 <_sbrk_r+0x1c>)
 801a2b8:	2300      	movs	r3, #0
 801a2ba:	4604      	mov	r4, r0
 801a2bc:	4608      	mov	r0, r1
 801a2be:	602b      	str	r3, [r5, #0]
 801a2c0:	f7e9 fd88 	bl	8003dd4 <_sbrk>
 801a2c4:	1c43      	adds	r3, r0, #1
 801a2c6:	d102      	bne.n	801a2ce <_sbrk_r+0x1a>
 801a2c8:	682b      	ldr	r3, [r5, #0]
 801a2ca:	b103      	cbz	r3, 801a2ce <_sbrk_r+0x1a>
 801a2cc:	6023      	str	r3, [r4, #0]
 801a2ce:	bd38      	pop	{r3, r4, r5, pc}
 801a2d0:	2000a068 	.word	0x2000a068

0801a2d4 <nanf>:
 801a2d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a2dc <nanf+0x8>
 801a2d8:	4770      	bx	lr
 801a2da:	bf00      	nop
 801a2dc:	7fc00000 	.word	0x7fc00000

0801a2e0 <sniprintf>:
 801a2e0:	b40c      	push	{r2, r3}
 801a2e2:	b530      	push	{r4, r5, lr}
 801a2e4:	4b17      	ldr	r3, [pc, #92]	; (801a344 <sniprintf+0x64>)
 801a2e6:	1e0c      	subs	r4, r1, #0
 801a2e8:	681d      	ldr	r5, [r3, #0]
 801a2ea:	b09d      	sub	sp, #116	; 0x74
 801a2ec:	da08      	bge.n	801a300 <sniprintf+0x20>
 801a2ee:	238b      	movs	r3, #139	; 0x8b
 801a2f0:	602b      	str	r3, [r5, #0]
 801a2f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a2f6:	b01d      	add	sp, #116	; 0x74
 801a2f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a2fc:	b002      	add	sp, #8
 801a2fe:	4770      	bx	lr
 801a300:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a304:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a308:	bf14      	ite	ne
 801a30a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801a30e:	4623      	moveq	r3, r4
 801a310:	9304      	str	r3, [sp, #16]
 801a312:	9307      	str	r3, [sp, #28]
 801a314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a318:	9002      	str	r0, [sp, #8]
 801a31a:	9006      	str	r0, [sp, #24]
 801a31c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a320:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a322:	ab21      	add	r3, sp, #132	; 0x84
 801a324:	a902      	add	r1, sp, #8
 801a326:	4628      	mov	r0, r5
 801a328:	9301      	str	r3, [sp, #4]
 801a32a:	f003 f9c5 	bl	801d6b8 <_svfiprintf_r>
 801a32e:	1c43      	adds	r3, r0, #1
 801a330:	bfbc      	itt	lt
 801a332:	238b      	movlt	r3, #139	; 0x8b
 801a334:	602b      	strlt	r3, [r5, #0]
 801a336:	2c00      	cmp	r4, #0
 801a338:	d0dd      	beq.n	801a2f6 <sniprintf+0x16>
 801a33a:	9b02      	ldr	r3, [sp, #8]
 801a33c:	2200      	movs	r2, #0
 801a33e:	701a      	strb	r2, [r3, #0]
 801a340:	e7d9      	b.n	801a2f6 <sniprintf+0x16>
 801a342:	bf00      	nop
 801a344:	20000080 	.word	0x20000080

0801a348 <siprintf>:
 801a348:	b40e      	push	{r1, r2, r3}
 801a34a:	b500      	push	{lr}
 801a34c:	b09c      	sub	sp, #112	; 0x70
 801a34e:	ab1d      	add	r3, sp, #116	; 0x74
 801a350:	9002      	str	r0, [sp, #8]
 801a352:	9006      	str	r0, [sp, #24]
 801a354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a358:	4809      	ldr	r0, [pc, #36]	; (801a380 <siprintf+0x38>)
 801a35a:	9107      	str	r1, [sp, #28]
 801a35c:	9104      	str	r1, [sp, #16]
 801a35e:	4909      	ldr	r1, [pc, #36]	; (801a384 <siprintf+0x3c>)
 801a360:	f853 2b04 	ldr.w	r2, [r3], #4
 801a364:	9105      	str	r1, [sp, #20]
 801a366:	6800      	ldr	r0, [r0, #0]
 801a368:	9301      	str	r3, [sp, #4]
 801a36a:	a902      	add	r1, sp, #8
 801a36c:	f003 f9a4 	bl	801d6b8 <_svfiprintf_r>
 801a370:	9b02      	ldr	r3, [sp, #8]
 801a372:	2200      	movs	r2, #0
 801a374:	701a      	strb	r2, [r3, #0]
 801a376:	b01c      	add	sp, #112	; 0x70
 801a378:	f85d eb04 	ldr.w	lr, [sp], #4
 801a37c:	b003      	add	sp, #12
 801a37e:	4770      	bx	lr
 801a380:	20000080 	.word	0x20000080
 801a384:	ffff0208 	.word	0xffff0208

0801a388 <__sread>:
 801a388:	b510      	push	{r4, lr}
 801a38a:	460c      	mov	r4, r1
 801a38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a390:	f003 fbec 	bl	801db6c <_read_r>
 801a394:	2800      	cmp	r0, #0
 801a396:	bfab      	itete	ge
 801a398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a39a:	89a3      	ldrhlt	r3, [r4, #12]
 801a39c:	181b      	addge	r3, r3, r0
 801a39e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a3a2:	bfac      	ite	ge
 801a3a4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a3a6:	81a3      	strhlt	r3, [r4, #12]
 801a3a8:	bd10      	pop	{r4, pc}

0801a3aa <__swrite>:
 801a3aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a3ae:	461f      	mov	r7, r3
 801a3b0:	898b      	ldrh	r3, [r1, #12]
 801a3b2:	05db      	lsls	r3, r3, #23
 801a3b4:	4605      	mov	r5, r0
 801a3b6:	460c      	mov	r4, r1
 801a3b8:	4616      	mov	r6, r2
 801a3ba:	d505      	bpl.n	801a3c8 <__swrite+0x1e>
 801a3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3c0:	2302      	movs	r3, #2
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	f002 fb96 	bl	801caf4 <_lseek_r>
 801a3c8:	89a3      	ldrh	r3, [r4, #12]
 801a3ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a3ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a3d2:	81a3      	strh	r3, [r4, #12]
 801a3d4:	4632      	mov	r2, r6
 801a3d6:	463b      	mov	r3, r7
 801a3d8:	4628      	mov	r0, r5
 801a3da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a3de:	f001 b80b 	b.w	801b3f8 <_write_r>

0801a3e2 <__sseek>:
 801a3e2:	b510      	push	{r4, lr}
 801a3e4:	460c      	mov	r4, r1
 801a3e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3ea:	f002 fb83 	bl	801caf4 <_lseek_r>
 801a3ee:	1c43      	adds	r3, r0, #1
 801a3f0:	89a3      	ldrh	r3, [r4, #12]
 801a3f2:	bf15      	itete	ne
 801a3f4:	6560      	strne	r0, [r4, #84]	; 0x54
 801a3f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a3fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a3fe:	81a3      	strheq	r3, [r4, #12]
 801a400:	bf18      	it	ne
 801a402:	81a3      	strhne	r3, [r4, #12]
 801a404:	bd10      	pop	{r4, pc}

0801a406 <__sclose>:
 801a406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a40a:	f001 b893 	b.w	801b534 <_close_r>

0801a40e <strchr>:
 801a40e:	b2c9      	uxtb	r1, r1
 801a410:	4603      	mov	r3, r0
 801a412:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a416:	b11a      	cbz	r2, 801a420 <strchr+0x12>
 801a418:	428a      	cmp	r2, r1
 801a41a:	d1f9      	bne.n	801a410 <strchr+0x2>
 801a41c:	4618      	mov	r0, r3
 801a41e:	4770      	bx	lr
 801a420:	2900      	cmp	r1, #0
 801a422:	bf18      	it	ne
 801a424:	2300      	movne	r3, #0
 801a426:	e7f9      	b.n	801a41c <strchr+0xe>

0801a428 <strcpy>:
 801a428:	4603      	mov	r3, r0
 801a42a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a42e:	f803 2b01 	strb.w	r2, [r3], #1
 801a432:	2a00      	cmp	r2, #0
 801a434:	d1f9      	bne.n	801a42a <strcpy+0x2>
 801a436:	4770      	bx	lr

0801a438 <strncmp>:
 801a438:	b510      	push	{r4, lr}
 801a43a:	b17a      	cbz	r2, 801a45c <strncmp+0x24>
 801a43c:	4603      	mov	r3, r0
 801a43e:	3901      	subs	r1, #1
 801a440:	1884      	adds	r4, r0, r2
 801a442:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a446:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a44a:	4290      	cmp	r0, r2
 801a44c:	d101      	bne.n	801a452 <strncmp+0x1a>
 801a44e:	42a3      	cmp	r3, r4
 801a450:	d101      	bne.n	801a456 <strncmp+0x1e>
 801a452:	1a80      	subs	r0, r0, r2
 801a454:	bd10      	pop	{r4, pc}
 801a456:	2800      	cmp	r0, #0
 801a458:	d1f3      	bne.n	801a442 <strncmp+0xa>
 801a45a:	e7fa      	b.n	801a452 <strncmp+0x1a>
 801a45c:	4610      	mov	r0, r2
 801a45e:	e7f9      	b.n	801a454 <strncmp+0x1c>

0801a460 <strstr>:
 801a460:	780a      	ldrb	r2, [r1, #0]
 801a462:	b570      	push	{r4, r5, r6, lr}
 801a464:	b96a      	cbnz	r2, 801a482 <strstr+0x22>
 801a466:	bd70      	pop	{r4, r5, r6, pc}
 801a468:	429a      	cmp	r2, r3
 801a46a:	d109      	bne.n	801a480 <strstr+0x20>
 801a46c:	460c      	mov	r4, r1
 801a46e:	4605      	mov	r5, r0
 801a470:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a474:	2b00      	cmp	r3, #0
 801a476:	d0f6      	beq.n	801a466 <strstr+0x6>
 801a478:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a47c:	429e      	cmp	r6, r3
 801a47e:	d0f7      	beq.n	801a470 <strstr+0x10>
 801a480:	3001      	adds	r0, #1
 801a482:	7803      	ldrb	r3, [r0, #0]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d1ef      	bne.n	801a468 <strstr+0x8>
 801a488:	4618      	mov	r0, r3
 801a48a:	e7ec      	b.n	801a466 <strstr+0x6>

0801a48c <sulp>:
 801a48c:	b570      	push	{r4, r5, r6, lr}
 801a48e:	4604      	mov	r4, r0
 801a490:	460d      	mov	r5, r1
 801a492:	ec45 4b10 	vmov	d0, r4, r5
 801a496:	4616      	mov	r6, r2
 801a498:	f002 ff34 	bl	801d304 <__ulp>
 801a49c:	ec51 0b10 	vmov	r0, r1, d0
 801a4a0:	b17e      	cbz	r6, 801a4c2 <sulp+0x36>
 801a4a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a4a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	dd09      	ble.n	801a4c2 <sulp+0x36>
 801a4ae:	051b      	lsls	r3, r3, #20
 801a4b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a4b4:	2400      	movs	r4, #0
 801a4b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a4ba:	4622      	mov	r2, r4
 801a4bc:	462b      	mov	r3, r5
 801a4be:	f7e6 f8b3 	bl	8000628 <__aeabi_dmul>
 801a4c2:	bd70      	pop	{r4, r5, r6, pc}
 801a4c4:	0000      	movs	r0, r0
	...

0801a4c8 <_strtod_l>:
 801a4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4cc:	ed2d 8b02 	vpush	{d8}
 801a4d0:	b09d      	sub	sp, #116	; 0x74
 801a4d2:	461f      	mov	r7, r3
 801a4d4:	2300      	movs	r3, #0
 801a4d6:	9318      	str	r3, [sp, #96]	; 0x60
 801a4d8:	4ba2      	ldr	r3, [pc, #648]	; (801a764 <_strtod_l+0x29c>)
 801a4da:	9213      	str	r2, [sp, #76]	; 0x4c
 801a4dc:	681b      	ldr	r3, [r3, #0]
 801a4de:	9305      	str	r3, [sp, #20]
 801a4e0:	4604      	mov	r4, r0
 801a4e2:	4618      	mov	r0, r3
 801a4e4:	4688      	mov	r8, r1
 801a4e6:	f7e5 fe85 	bl	80001f4 <strlen>
 801a4ea:	f04f 0a00 	mov.w	sl, #0
 801a4ee:	4605      	mov	r5, r0
 801a4f0:	f04f 0b00 	mov.w	fp, #0
 801a4f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a4f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a4fa:	781a      	ldrb	r2, [r3, #0]
 801a4fc:	2a2b      	cmp	r2, #43	; 0x2b
 801a4fe:	d04e      	beq.n	801a59e <_strtod_l+0xd6>
 801a500:	d83b      	bhi.n	801a57a <_strtod_l+0xb2>
 801a502:	2a0d      	cmp	r2, #13
 801a504:	d834      	bhi.n	801a570 <_strtod_l+0xa8>
 801a506:	2a08      	cmp	r2, #8
 801a508:	d834      	bhi.n	801a574 <_strtod_l+0xac>
 801a50a:	2a00      	cmp	r2, #0
 801a50c:	d03e      	beq.n	801a58c <_strtod_l+0xc4>
 801a50e:	2300      	movs	r3, #0
 801a510:	930a      	str	r3, [sp, #40]	; 0x28
 801a512:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801a514:	7833      	ldrb	r3, [r6, #0]
 801a516:	2b30      	cmp	r3, #48	; 0x30
 801a518:	f040 80b0 	bne.w	801a67c <_strtod_l+0x1b4>
 801a51c:	7873      	ldrb	r3, [r6, #1]
 801a51e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a522:	2b58      	cmp	r3, #88	; 0x58
 801a524:	d168      	bne.n	801a5f8 <_strtod_l+0x130>
 801a526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a528:	9301      	str	r3, [sp, #4]
 801a52a:	ab18      	add	r3, sp, #96	; 0x60
 801a52c:	9702      	str	r7, [sp, #8]
 801a52e:	9300      	str	r3, [sp, #0]
 801a530:	4a8d      	ldr	r2, [pc, #564]	; (801a768 <_strtod_l+0x2a0>)
 801a532:	ab19      	add	r3, sp, #100	; 0x64
 801a534:	a917      	add	r1, sp, #92	; 0x5c
 801a536:	4620      	mov	r0, r4
 801a538:	f001 ffd0 	bl	801c4dc <__gethex>
 801a53c:	f010 0707 	ands.w	r7, r0, #7
 801a540:	4605      	mov	r5, r0
 801a542:	d005      	beq.n	801a550 <_strtod_l+0x88>
 801a544:	2f06      	cmp	r7, #6
 801a546:	d12c      	bne.n	801a5a2 <_strtod_l+0xda>
 801a548:	3601      	adds	r6, #1
 801a54a:	2300      	movs	r3, #0
 801a54c:	9617      	str	r6, [sp, #92]	; 0x5c
 801a54e:	930a      	str	r3, [sp, #40]	; 0x28
 801a550:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a552:	2b00      	cmp	r3, #0
 801a554:	f040 8590 	bne.w	801b078 <_strtod_l+0xbb0>
 801a558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a55a:	b1eb      	cbz	r3, 801a598 <_strtod_l+0xd0>
 801a55c:	4652      	mov	r2, sl
 801a55e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a562:	ec43 2b10 	vmov	d0, r2, r3
 801a566:	b01d      	add	sp, #116	; 0x74
 801a568:	ecbd 8b02 	vpop	{d8}
 801a56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a570:	2a20      	cmp	r2, #32
 801a572:	d1cc      	bne.n	801a50e <_strtod_l+0x46>
 801a574:	3301      	adds	r3, #1
 801a576:	9317      	str	r3, [sp, #92]	; 0x5c
 801a578:	e7be      	b.n	801a4f8 <_strtod_l+0x30>
 801a57a:	2a2d      	cmp	r2, #45	; 0x2d
 801a57c:	d1c7      	bne.n	801a50e <_strtod_l+0x46>
 801a57e:	2201      	movs	r2, #1
 801a580:	920a      	str	r2, [sp, #40]	; 0x28
 801a582:	1c5a      	adds	r2, r3, #1
 801a584:	9217      	str	r2, [sp, #92]	; 0x5c
 801a586:	785b      	ldrb	r3, [r3, #1]
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d1c2      	bne.n	801a512 <_strtod_l+0x4a>
 801a58c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a58e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a592:	2b00      	cmp	r3, #0
 801a594:	f040 856e 	bne.w	801b074 <_strtod_l+0xbac>
 801a598:	4652      	mov	r2, sl
 801a59a:	465b      	mov	r3, fp
 801a59c:	e7e1      	b.n	801a562 <_strtod_l+0x9a>
 801a59e:	2200      	movs	r2, #0
 801a5a0:	e7ee      	b.n	801a580 <_strtod_l+0xb8>
 801a5a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a5a4:	b13a      	cbz	r2, 801a5b6 <_strtod_l+0xee>
 801a5a6:	2135      	movs	r1, #53	; 0x35
 801a5a8:	a81a      	add	r0, sp, #104	; 0x68
 801a5aa:	f002 ffb6 	bl	801d51a <__copybits>
 801a5ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a5b0:	4620      	mov	r0, r4
 801a5b2:	f002 fb75 	bl	801cca0 <_Bfree>
 801a5b6:	3f01      	subs	r7, #1
 801a5b8:	2f04      	cmp	r7, #4
 801a5ba:	d806      	bhi.n	801a5ca <_strtod_l+0x102>
 801a5bc:	e8df f007 	tbb	[pc, r7]
 801a5c0:	1714030a 	.word	0x1714030a
 801a5c4:	0a          	.byte	0x0a
 801a5c5:	00          	.byte	0x00
 801a5c6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801a5ca:	0728      	lsls	r0, r5, #28
 801a5cc:	d5c0      	bpl.n	801a550 <_strtod_l+0x88>
 801a5ce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a5d2:	e7bd      	b.n	801a550 <_strtod_l+0x88>
 801a5d4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801a5d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a5da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a5de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a5e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a5e6:	e7f0      	b.n	801a5ca <_strtod_l+0x102>
 801a5e8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801a76c <_strtod_l+0x2a4>
 801a5ec:	e7ed      	b.n	801a5ca <_strtod_l+0x102>
 801a5ee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a5f2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801a5f6:	e7e8      	b.n	801a5ca <_strtod_l+0x102>
 801a5f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a5fa:	1c5a      	adds	r2, r3, #1
 801a5fc:	9217      	str	r2, [sp, #92]	; 0x5c
 801a5fe:	785b      	ldrb	r3, [r3, #1]
 801a600:	2b30      	cmp	r3, #48	; 0x30
 801a602:	d0f9      	beq.n	801a5f8 <_strtod_l+0x130>
 801a604:	2b00      	cmp	r3, #0
 801a606:	d0a3      	beq.n	801a550 <_strtod_l+0x88>
 801a608:	2301      	movs	r3, #1
 801a60a:	f04f 0900 	mov.w	r9, #0
 801a60e:	9304      	str	r3, [sp, #16]
 801a610:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a612:	9308      	str	r3, [sp, #32]
 801a614:	f8cd 901c 	str.w	r9, [sp, #28]
 801a618:	464f      	mov	r7, r9
 801a61a:	220a      	movs	r2, #10
 801a61c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a61e:	7806      	ldrb	r6, [r0, #0]
 801a620:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a624:	b2d9      	uxtb	r1, r3
 801a626:	2909      	cmp	r1, #9
 801a628:	d92a      	bls.n	801a680 <_strtod_l+0x1b8>
 801a62a:	9905      	ldr	r1, [sp, #20]
 801a62c:	462a      	mov	r2, r5
 801a62e:	f7ff ff03 	bl	801a438 <strncmp>
 801a632:	b398      	cbz	r0, 801a69c <_strtod_l+0x1d4>
 801a634:	2000      	movs	r0, #0
 801a636:	4632      	mov	r2, r6
 801a638:	463d      	mov	r5, r7
 801a63a:	9005      	str	r0, [sp, #20]
 801a63c:	4603      	mov	r3, r0
 801a63e:	2a65      	cmp	r2, #101	; 0x65
 801a640:	d001      	beq.n	801a646 <_strtod_l+0x17e>
 801a642:	2a45      	cmp	r2, #69	; 0x45
 801a644:	d118      	bne.n	801a678 <_strtod_l+0x1b0>
 801a646:	b91d      	cbnz	r5, 801a650 <_strtod_l+0x188>
 801a648:	9a04      	ldr	r2, [sp, #16]
 801a64a:	4302      	orrs	r2, r0
 801a64c:	d09e      	beq.n	801a58c <_strtod_l+0xc4>
 801a64e:	2500      	movs	r5, #0
 801a650:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801a654:	f108 0201 	add.w	r2, r8, #1
 801a658:	9217      	str	r2, [sp, #92]	; 0x5c
 801a65a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a65e:	2a2b      	cmp	r2, #43	; 0x2b
 801a660:	d075      	beq.n	801a74e <_strtod_l+0x286>
 801a662:	2a2d      	cmp	r2, #45	; 0x2d
 801a664:	d07b      	beq.n	801a75e <_strtod_l+0x296>
 801a666:	f04f 0c00 	mov.w	ip, #0
 801a66a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a66e:	2909      	cmp	r1, #9
 801a670:	f240 8082 	bls.w	801a778 <_strtod_l+0x2b0>
 801a674:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a678:	2600      	movs	r6, #0
 801a67a:	e09d      	b.n	801a7b8 <_strtod_l+0x2f0>
 801a67c:	2300      	movs	r3, #0
 801a67e:	e7c4      	b.n	801a60a <_strtod_l+0x142>
 801a680:	2f08      	cmp	r7, #8
 801a682:	bfd8      	it	le
 801a684:	9907      	ldrle	r1, [sp, #28]
 801a686:	f100 0001 	add.w	r0, r0, #1
 801a68a:	bfda      	itte	le
 801a68c:	fb02 3301 	mlale	r3, r2, r1, r3
 801a690:	9307      	strle	r3, [sp, #28]
 801a692:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a696:	3701      	adds	r7, #1
 801a698:	9017      	str	r0, [sp, #92]	; 0x5c
 801a69a:	e7bf      	b.n	801a61c <_strtod_l+0x154>
 801a69c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a69e:	195a      	adds	r2, r3, r5
 801a6a0:	9217      	str	r2, [sp, #92]	; 0x5c
 801a6a2:	5d5a      	ldrb	r2, [r3, r5]
 801a6a4:	2f00      	cmp	r7, #0
 801a6a6:	d037      	beq.n	801a718 <_strtod_l+0x250>
 801a6a8:	9005      	str	r0, [sp, #20]
 801a6aa:	463d      	mov	r5, r7
 801a6ac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801a6b0:	2b09      	cmp	r3, #9
 801a6b2:	d912      	bls.n	801a6da <_strtod_l+0x212>
 801a6b4:	2301      	movs	r3, #1
 801a6b6:	e7c2      	b.n	801a63e <_strtod_l+0x176>
 801a6b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a6ba:	1c5a      	adds	r2, r3, #1
 801a6bc:	9217      	str	r2, [sp, #92]	; 0x5c
 801a6be:	785a      	ldrb	r2, [r3, #1]
 801a6c0:	3001      	adds	r0, #1
 801a6c2:	2a30      	cmp	r2, #48	; 0x30
 801a6c4:	d0f8      	beq.n	801a6b8 <_strtod_l+0x1f0>
 801a6c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a6ca:	2b08      	cmp	r3, #8
 801a6cc:	f200 84d9 	bhi.w	801b082 <_strtod_l+0xbba>
 801a6d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a6d2:	9005      	str	r0, [sp, #20]
 801a6d4:	2000      	movs	r0, #0
 801a6d6:	9308      	str	r3, [sp, #32]
 801a6d8:	4605      	mov	r5, r0
 801a6da:	3a30      	subs	r2, #48	; 0x30
 801a6dc:	f100 0301 	add.w	r3, r0, #1
 801a6e0:	d014      	beq.n	801a70c <_strtod_l+0x244>
 801a6e2:	9905      	ldr	r1, [sp, #20]
 801a6e4:	4419      	add	r1, r3
 801a6e6:	9105      	str	r1, [sp, #20]
 801a6e8:	462b      	mov	r3, r5
 801a6ea:	eb00 0e05 	add.w	lr, r0, r5
 801a6ee:	210a      	movs	r1, #10
 801a6f0:	4573      	cmp	r3, lr
 801a6f2:	d113      	bne.n	801a71c <_strtod_l+0x254>
 801a6f4:	182b      	adds	r3, r5, r0
 801a6f6:	2b08      	cmp	r3, #8
 801a6f8:	f105 0501 	add.w	r5, r5, #1
 801a6fc:	4405      	add	r5, r0
 801a6fe:	dc1c      	bgt.n	801a73a <_strtod_l+0x272>
 801a700:	9907      	ldr	r1, [sp, #28]
 801a702:	230a      	movs	r3, #10
 801a704:	fb03 2301 	mla	r3, r3, r1, r2
 801a708:	9307      	str	r3, [sp, #28]
 801a70a:	2300      	movs	r3, #0
 801a70c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a70e:	1c51      	adds	r1, r2, #1
 801a710:	9117      	str	r1, [sp, #92]	; 0x5c
 801a712:	7852      	ldrb	r2, [r2, #1]
 801a714:	4618      	mov	r0, r3
 801a716:	e7c9      	b.n	801a6ac <_strtod_l+0x1e4>
 801a718:	4638      	mov	r0, r7
 801a71a:	e7d2      	b.n	801a6c2 <_strtod_l+0x1fa>
 801a71c:	2b08      	cmp	r3, #8
 801a71e:	dc04      	bgt.n	801a72a <_strtod_l+0x262>
 801a720:	9e07      	ldr	r6, [sp, #28]
 801a722:	434e      	muls	r6, r1
 801a724:	9607      	str	r6, [sp, #28]
 801a726:	3301      	adds	r3, #1
 801a728:	e7e2      	b.n	801a6f0 <_strtod_l+0x228>
 801a72a:	f103 0c01 	add.w	ip, r3, #1
 801a72e:	f1bc 0f10 	cmp.w	ip, #16
 801a732:	bfd8      	it	le
 801a734:	fb01 f909 	mulle.w	r9, r1, r9
 801a738:	e7f5      	b.n	801a726 <_strtod_l+0x25e>
 801a73a:	2d10      	cmp	r5, #16
 801a73c:	bfdc      	itt	le
 801a73e:	230a      	movle	r3, #10
 801a740:	fb03 2909 	mlale	r9, r3, r9, r2
 801a744:	e7e1      	b.n	801a70a <_strtod_l+0x242>
 801a746:	2300      	movs	r3, #0
 801a748:	9305      	str	r3, [sp, #20]
 801a74a:	2301      	movs	r3, #1
 801a74c:	e77c      	b.n	801a648 <_strtod_l+0x180>
 801a74e:	f04f 0c00 	mov.w	ip, #0
 801a752:	f108 0202 	add.w	r2, r8, #2
 801a756:	9217      	str	r2, [sp, #92]	; 0x5c
 801a758:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a75c:	e785      	b.n	801a66a <_strtod_l+0x1a2>
 801a75e:	f04f 0c01 	mov.w	ip, #1
 801a762:	e7f6      	b.n	801a752 <_strtod_l+0x28a>
 801a764:	0801eb1c 	.word	0x0801eb1c
 801a768:	0801e9ac 	.word	0x0801e9ac
 801a76c:	7ff00000 	.word	0x7ff00000
 801a770:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a772:	1c51      	adds	r1, r2, #1
 801a774:	9117      	str	r1, [sp, #92]	; 0x5c
 801a776:	7852      	ldrb	r2, [r2, #1]
 801a778:	2a30      	cmp	r2, #48	; 0x30
 801a77a:	d0f9      	beq.n	801a770 <_strtod_l+0x2a8>
 801a77c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801a780:	2908      	cmp	r1, #8
 801a782:	f63f af79 	bhi.w	801a678 <_strtod_l+0x1b0>
 801a786:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801a78a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a78c:	9206      	str	r2, [sp, #24]
 801a78e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a790:	1c51      	adds	r1, r2, #1
 801a792:	9117      	str	r1, [sp, #92]	; 0x5c
 801a794:	7852      	ldrb	r2, [r2, #1]
 801a796:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801a79a:	2e09      	cmp	r6, #9
 801a79c:	d937      	bls.n	801a80e <_strtod_l+0x346>
 801a79e:	9e06      	ldr	r6, [sp, #24]
 801a7a0:	1b89      	subs	r1, r1, r6
 801a7a2:	2908      	cmp	r1, #8
 801a7a4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a7a8:	dc02      	bgt.n	801a7b0 <_strtod_l+0x2e8>
 801a7aa:	4576      	cmp	r6, lr
 801a7ac:	bfa8      	it	ge
 801a7ae:	4676      	movge	r6, lr
 801a7b0:	f1bc 0f00 	cmp.w	ip, #0
 801a7b4:	d000      	beq.n	801a7b8 <_strtod_l+0x2f0>
 801a7b6:	4276      	negs	r6, r6
 801a7b8:	2d00      	cmp	r5, #0
 801a7ba:	d14d      	bne.n	801a858 <_strtod_l+0x390>
 801a7bc:	9904      	ldr	r1, [sp, #16]
 801a7be:	4301      	orrs	r1, r0
 801a7c0:	f47f aec6 	bne.w	801a550 <_strtod_l+0x88>
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	f47f aee1 	bne.w	801a58c <_strtod_l+0xc4>
 801a7ca:	2a69      	cmp	r2, #105	; 0x69
 801a7cc:	d027      	beq.n	801a81e <_strtod_l+0x356>
 801a7ce:	dc24      	bgt.n	801a81a <_strtod_l+0x352>
 801a7d0:	2a49      	cmp	r2, #73	; 0x49
 801a7d2:	d024      	beq.n	801a81e <_strtod_l+0x356>
 801a7d4:	2a4e      	cmp	r2, #78	; 0x4e
 801a7d6:	f47f aed9 	bne.w	801a58c <_strtod_l+0xc4>
 801a7da:	499f      	ldr	r1, [pc, #636]	; (801aa58 <_strtod_l+0x590>)
 801a7dc:	a817      	add	r0, sp, #92	; 0x5c
 801a7de:	f002 f8d5 	bl	801c98c <__match>
 801a7e2:	2800      	cmp	r0, #0
 801a7e4:	f43f aed2 	beq.w	801a58c <_strtod_l+0xc4>
 801a7e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a7ea:	781b      	ldrb	r3, [r3, #0]
 801a7ec:	2b28      	cmp	r3, #40	; 0x28
 801a7ee:	d12d      	bne.n	801a84c <_strtod_l+0x384>
 801a7f0:	499a      	ldr	r1, [pc, #616]	; (801aa5c <_strtod_l+0x594>)
 801a7f2:	aa1a      	add	r2, sp, #104	; 0x68
 801a7f4:	a817      	add	r0, sp, #92	; 0x5c
 801a7f6:	f002 f8dd 	bl	801c9b4 <__hexnan>
 801a7fa:	2805      	cmp	r0, #5
 801a7fc:	d126      	bne.n	801a84c <_strtod_l+0x384>
 801a7fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a800:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801a804:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a808:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a80c:	e6a0      	b.n	801a550 <_strtod_l+0x88>
 801a80e:	210a      	movs	r1, #10
 801a810:	fb01 2e0e 	mla	lr, r1, lr, r2
 801a814:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a818:	e7b9      	b.n	801a78e <_strtod_l+0x2c6>
 801a81a:	2a6e      	cmp	r2, #110	; 0x6e
 801a81c:	e7db      	b.n	801a7d6 <_strtod_l+0x30e>
 801a81e:	4990      	ldr	r1, [pc, #576]	; (801aa60 <_strtod_l+0x598>)
 801a820:	a817      	add	r0, sp, #92	; 0x5c
 801a822:	f002 f8b3 	bl	801c98c <__match>
 801a826:	2800      	cmp	r0, #0
 801a828:	f43f aeb0 	beq.w	801a58c <_strtod_l+0xc4>
 801a82c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a82e:	498d      	ldr	r1, [pc, #564]	; (801aa64 <_strtod_l+0x59c>)
 801a830:	3b01      	subs	r3, #1
 801a832:	a817      	add	r0, sp, #92	; 0x5c
 801a834:	9317      	str	r3, [sp, #92]	; 0x5c
 801a836:	f002 f8a9 	bl	801c98c <__match>
 801a83a:	b910      	cbnz	r0, 801a842 <_strtod_l+0x37a>
 801a83c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a83e:	3301      	adds	r3, #1
 801a840:	9317      	str	r3, [sp, #92]	; 0x5c
 801a842:	f8df b230 	ldr.w	fp, [pc, #560]	; 801aa74 <_strtod_l+0x5ac>
 801a846:	f04f 0a00 	mov.w	sl, #0
 801a84a:	e681      	b.n	801a550 <_strtod_l+0x88>
 801a84c:	4886      	ldr	r0, [pc, #536]	; (801aa68 <_strtod_l+0x5a0>)
 801a84e:	f003 f99f 	bl	801db90 <nan>
 801a852:	ec5b ab10 	vmov	sl, fp, d0
 801a856:	e67b      	b.n	801a550 <_strtod_l+0x88>
 801a858:	9b05      	ldr	r3, [sp, #20]
 801a85a:	9807      	ldr	r0, [sp, #28]
 801a85c:	1af3      	subs	r3, r6, r3
 801a85e:	2f00      	cmp	r7, #0
 801a860:	bf08      	it	eq
 801a862:	462f      	moveq	r7, r5
 801a864:	2d10      	cmp	r5, #16
 801a866:	9306      	str	r3, [sp, #24]
 801a868:	46a8      	mov	r8, r5
 801a86a:	bfa8      	it	ge
 801a86c:	f04f 0810 	movge.w	r8, #16
 801a870:	f7e5 fe60 	bl	8000534 <__aeabi_ui2d>
 801a874:	2d09      	cmp	r5, #9
 801a876:	4682      	mov	sl, r0
 801a878:	468b      	mov	fp, r1
 801a87a:	dd13      	ble.n	801a8a4 <_strtod_l+0x3dc>
 801a87c:	4b7b      	ldr	r3, [pc, #492]	; (801aa6c <_strtod_l+0x5a4>)
 801a87e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a882:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801a886:	f7e5 fecf 	bl	8000628 <__aeabi_dmul>
 801a88a:	4682      	mov	sl, r0
 801a88c:	4648      	mov	r0, r9
 801a88e:	468b      	mov	fp, r1
 801a890:	f7e5 fe50 	bl	8000534 <__aeabi_ui2d>
 801a894:	4602      	mov	r2, r0
 801a896:	460b      	mov	r3, r1
 801a898:	4650      	mov	r0, sl
 801a89a:	4659      	mov	r1, fp
 801a89c:	f7e5 fd0e 	bl	80002bc <__adddf3>
 801a8a0:	4682      	mov	sl, r0
 801a8a2:	468b      	mov	fp, r1
 801a8a4:	2d0f      	cmp	r5, #15
 801a8a6:	dc38      	bgt.n	801a91a <_strtod_l+0x452>
 801a8a8:	9b06      	ldr	r3, [sp, #24]
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	f43f ae50 	beq.w	801a550 <_strtod_l+0x88>
 801a8b0:	dd24      	ble.n	801a8fc <_strtod_l+0x434>
 801a8b2:	2b16      	cmp	r3, #22
 801a8b4:	dc0b      	bgt.n	801a8ce <_strtod_l+0x406>
 801a8b6:	496d      	ldr	r1, [pc, #436]	; (801aa6c <_strtod_l+0x5a4>)
 801a8b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a8bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a8c0:	4652      	mov	r2, sl
 801a8c2:	465b      	mov	r3, fp
 801a8c4:	f7e5 feb0 	bl	8000628 <__aeabi_dmul>
 801a8c8:	4682      	mov	sl, r0
 801a8ca:	468b      	mov	fp, r1
 801a8cc:	e640      	b.n	801a550 <_strtod_l+0x88>
 801a8ce:	9a06      	ldr	r2, [sp, #24]
 801a8d0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801a8d4:	4293      	cmp	r3, r2
 801a8d6:	db20      	blt.n	801a91a <_strtod_l+0x452>
 801a8d8:	4c64      	ldr	r4, [pc, #400]	; (801aa6c <_strtod_l+0x5a4>)
 801a8da:	f1c5 050f 	rsb	r5, r5, #15
 801a8de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801a8e2:	4652      	mov	r2, sl
 801a8e4:	465b      	mov	r3, fp
 801a8e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a8ea:	f7e5 fe9d 	bl	8000628 <__aeabi_dmul>
 801a8ee:	9b06      	ldr	r3, [sp, #24]
 801a8f0:	1b5d      	subs	r5, r3, r5
 801a8f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801a8f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a8fa:	e7e3      	b.n	801a8c4 <_strtod_l+0x3fc>
 801a8fc:	9b06      	ldr	r3, [sp, #24]
 801a8fe:	3316      	adds	r3, #22
 801a900:	db0b      	blt.n	801a91a <_strtod_l+0x452>
 801a902:	9b05      	ldr	r3, [sp, #20]
 801a904:	1b9e      	subs	r6, r3, r6
 801a906:	4b59      	ldr	r3, [pc, #356]	; (801aa6c <_strtod_l+0x5a4>)
 801a908:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801a90c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a910:	4650      	mov	r0, sl
 801a912:	4659      	mov	r1, fp
 801a914:	f7e5 ffb2 	bl	800087c <__aeabi_ddiv>
 801a918:	e7d6      	b.n	801a8c8 <_strtod_l+0x400>
 801a91a:	9b06      	ldr	r3, [sp, #24]
 801a91c:	eba5 0808 	sub.w	r8, r5, r8
 801a920:	4498      	add	r8, r3
 801a922:	f1b8 0f00 	cmp.w	r8, #0
 801a926:	dd74      	ble.n	801aa12 <_strtod_l+0x54a>
 801a928:	f018 030f 	ands.w	r3, r8, #15
 801a92c:	d00a      	beq.n	801a944 <_strtod_l+0x47c>
 801a92e:	494f      	ldr	r1, [pc, #316]	; (801aa6c <_strtod_l+0x5a4>)
 801a930:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a934:	4652      	mov	r2, sl
 801a936:	465b      	mov	r3, fp
 801a938:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a93c:	f7e5 fe74 	bl	8000628 <__aeabi_dmul>
 801a940:	4682      	mov	sl, r0
 801a942:	468b      	mov	fp, r1
 801a944:	f038 080f 	bics.w	r8, r8, #15
 801a948:	d04f      	beq.n	801a9ea <_strtod_l+0x522>
 801a94a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801a94e:	dd22      	ble.n	801a996 <_strtod_l+0x4ce>
 801a950:	2500      	movs	r5, #0
 801a952:	462e      	mov	r6, r5
 801a954:	9507      	str	r5, [sp, #28]
 801a956:	9505      	str	r5, [sp, #20]
 801a958:	2322      	movs	r3, #34	; 0x22
 801a95a:	f8df b118 	ldr.w	fp, [pc, #280]	; 801aa74 <_strtod_l+0x5ac>
 801a95e:	6023      	str	r3, [r4, #0]
 801a960:	f04f 0a00 	mov.w	sl, #0
 801a964:	9b07      	ldr	r3, [sp, #28]
 801a966:	2b00      	cmp	r3, #0
 801a968:	f43f adf2 	beq.w	801a550 <_strtod_l+0x88>
 801a96c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a96e:	4620      	mov	r0, r4
 801a970:	f002 f996 	bl	801cca0 <_Bfree>
 801a974:	9905      	ldr	r1, [sp, #20]
 801a976:	4620      	mov	r0, r4
 801a978:	f002 f992 	bl	801cca0 <_Bfree>
 801a97c:	4631      	mov	r1, r6
 801a97e:	4620      	mov	r0, r4
 801a980:	f002 f98e 	bl	801cca0 <_Bfree>
 801a984:	9907      	ldr	r1, [sp, #28]
 801a986:	4620      	mov	r0, r4
 801a988:	f002 f98a 	bl	801cca0 <_Bfree>
 801a98c:	4629      	mov	r1, r5
 801a98e:	4620      	mov	r0, r4
 801a990:	f002 f986 	bl	801cca0 <_Bfree>
 801a994:	e5dc      	b.n	801a550 <_strtod_l+0x88>
 801a996:	4b36      	ldr	r3, [pc, #216]	; (801aa70 <_strtod_l+0x5a8>)
 801a998:	9304      	str	r3, [sp, #16]
 801a99a:	2300      	movs	r3, #0
 801a99c:	ea4f 1828 	mov.w	r8, r8, asr #4
 801a9a0:	4650      	mov	r0, sl
 801a9a2:	4659      	mov	r1, fp
 801a9a4:	4699      	mov	r9, r3
 801a9a6:	f1b8 0f01 	cmp.w	r8, #1
 801a9aa:	dc21      	bgt.n	801a9f0 <_strtod_l+0x528>
 801a9ac:	b10b      	cbz	r3, 801a9b2 <_strtod_l+0x4ea>
 801a9ae:	4682      	mov	sl, r0
 801a9b0:	468b      	mov	fp, r1
 801a9b2:	4b2f      	ldr	r3, [pc, #188]	; (801aa70 <_strtod_l+0x5a8>)
 801a9b4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801a9b8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801a9bc:	4652      	mov	r2, sl
 801a9be:	465b      	mov	r3, fp
 801a9c0:	e9d9 0100 	ldrd	r0, r1, [r9]
 801a9c4:	f7e5 fe30 	bl	8000628 <__aeabi_dmul>
 801a9c8:	4b2a      	ldr	r3, [pc, #168]	; (801aa74 <_strtod_l+0x5ac>)
 801a9ca:	460a      	mov	r2, r1
 801a9cc:	400b      	ands	r3, r1
 801a9ce:	492a      	ldr	r1, [pc, #168]	; (801aa78 <_strtod_l+0x5b0>)
 801a9d0:	428b      	cmp	r3, r1
 801a9d2:	4682      	mov	sl, r0
 801a9d4:	d8bc      	bhi.n	801a950 <_strtod_l+0x488>
 801a9d6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801a9da:	428b      	cmp	r3, r1
 801a9dc:	bf86      	itte	hi
 801a9de:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801aa7c <_strtod_l+0x5b4>
 801a9e2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 801a9e6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801a9ea:	2300      	movs	r3, #0
 801a9ec:	9304      	str	r3, [sp, #16]
 801a9ee:	e084      	b.n	801aafa <_strtod_l+0x632>
 801a9f0:	f018 0f01 	tst.w	r8, #1
 801a9f4:	d005      	beq.n	801aa02 <_strtod_l+0x53a>
 801a9f6:	9b04      	ldr	r3, [sp, #16]
 801a9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9fc:	f7e5 fe14 	bl	8000628 <__aeabi_dmul>
 801aa00:	2301      	movs	r3, #1
 801aa02:	9a04      	ldr	r2, [sp, #16]
 801aa04:	3208      	adds	r2, #8
 801aa06:	f109 0901 	add.w	r9, r9, #1
 801aa0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801aa0e:	9204      	str	r2, [sp, #16]
 801aa10:	e7c9      	b.n	801a9a6 <_strtod_l+0x4de>
 801aa12:	d0ea      	beq.n	801a9ea <_strtod_l+0x522>
 801aa14:	f1c8 0800 	rsb	r8, r8, #0
 801aa18:	f018 020f 	ands.w	r2, r8, #15
 801aa1c:	d00a      	beq.n	801aa34 <_strtod_l+0x56c>
 801aa1e:	4b13      	ldr	r3, [pc, #76]	; (801aa6c <_strtod_l+0x5a4>)
 801aa20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801aa24:	4650      	mov	r0, sl
 801aa26:	4659      	mov	r1, fp
 801aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa2c:	f7e5 ff26 	bl	800087c <__aeabi_ddiv>
 801aa30:	4682      	mov	sl, r0
 801aa32:	468b      	mov	fp, r1
 801aa34:	ea5f 1828 	movs.w	r8, r8, asr #4
 801aa38:	d0d7      	beq.n	801a9ea <_strtod_l+0x522>
 801aa3a:	f1b8 0f1f 	cmp.w	r8, #31
 801aa3e:	dd1f      	ble.n	801aa80 <_strtod_l+0x5b8>
 801aa40:	2500      	movs	r5, #0
 801aa42:	462e      	mov	r6, r5
 801aa44:	9507      	str	r5, [sp, #28]
 801aa46:	9505      	str	r5, [sp, #20]
 801aa48:	2322      	movs	r3, #34	; 0x22
 801aa4a:	f04f 0a00 	mov.w	sl, #0
 801aa4e:	f04f 0b00 	mov.w	fp, #0
 801aa52:	6023      	str	r3, [r4, #0]
 801aa54:	e786      	b.n	801a964 <_strtod_l+0x49c>
 801aa56:	bf00      	nop
 801aa58:	0801e90d 	.word	0x0801e90d
 801aa5c:	0801e9c0 	.word	0x0801e9c0
 801aa60:	0801e905 	.word	0x0801e905
 801aa64:	0801ea3f 	.word	0x0801ea3f
 801aa68:	0801ea3b 	.word	0x0801ea3b
 801aa6c:	0801ebb8 	.word	0x0801ebb8
 801aa70:	0801eb90 	.word	0x0801eb90
 801aa74:	7ff00000 	.word	0x7ff00000
 801aa78:	7ca00000 	.word	0x7ca00000
 801aa7c:	7fefffff 	.word	0x7fefffff
 801aa80:	f018 0310 	ands.w	r3, r8, #16
 801aa84:	bf18      	it	ne
 801aa86:	236a      	movne	r3, #106	; 0x6a
 801aa88:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801ae38 <_strtod_l+0x970>
 801aa8c:	9304      	str	r3, [sp, #16]
 801aa8e:	4650      	mov	r0, sl
 801aa90:	4659      	mov	r1, fp
 801aa92:	2300      	movs	r3, #0
 801aa94:	f018 0f01 	tst.w	r8, #1
 801aa98:	d004      	beq.n	801aaa4 <_strtod_l+0x5dc>
 801aa9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801aa9e:	f7e5 fdc3 	bl	8000628 <__aeabi_dmul>
 801aaa2:	2301      	movs	r3, #1
 801aaa4:	ea5f 0868 	movs.w	r8, r8, asr #1
 801aaa8:	f109 0908 	add.w	r9, r9, #8
 801aaac:	d1f2      	bne.n	801aa94 <_strtod_l+0x5cc>
 801aaae:	b10b      	cbz	r3, 801aab4 <_strtod_l+0x5ec>
 801aab0:	4682      	mov	sl, r0
 801aab2:	468b      	mov	fp, r1
 801aab4:	9b04      	ldr	r3, [sp, #16]
 801aab6:	b1c3      	cbz	r3, 801aaea <_strtod_l+0x622>
 801aab8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801aabc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	4659      	mov	r1, fp
 801aac4:	dd11      	ble.n	801aaea <_strtod_l+0x622>
 801aac6:	2b1f      	cmp	r3, #31
 801aac8:	f340 8124 	ble.w	801ad14 <_strtod_l+0x84c>
 801aacc:	2b34      	cmp	r3, #52	; 0x34
 801aace:	bfde      	ittt	le
 801aad0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801aad4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 801aad8:	fa03 f202 	lslle.w	r2, r3, r2
 801aadc:	f04f 0a00 	mov.w	sl, #0
 801aae0:	bfcc      	ite	gt
 801aae2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801aae6:	ea02 0b01 	andle.w	fp, r2, r1
 801aaea:	2200      	movs	r2, #0
 801aaec:	2300      	movs	r3, #0
 801aaee:	4650      	mov	r0, sl
 801aaf0:	4659      	mov	r1, fp
 801aaf2:	f7e6 f801 	bl	8000af8 <__aeabi_dcmpeq>
 801aaf6:	2800      	cmp	r0, #0
 801aaf8:	d1a2      	bne.n	801aa40 <_strtod_l+0x578>
 801aafa:	9b07      	ldr	r3, [sp, #28]
 801aafc:	9300      	str	r3, [sp, #0]
 801aafe:	9908      	ldr	r1, [sp, #32]
 801ab00:	462b      	mov	r3, r5
 801ab02:	463a      	mov	r2, r7
 801ab04:	4620      	mov	r0, r4
 801ab06:	f002 f933 	bl	801cd70 <__s2b>
 801ab0a:	9007      	str	r0, [sp, #28]
 801ab0c:	2800      	cmp	r0, #0
 801ab0e:	f43f af1f 	beq.w	801a950 <_strtod_l+0x488>
 801ab12:	9b05      	ldr	r3, [sp, #20]
 801ab14:	1b9e      	subs	r6, r3, r6
 801ab16:	9b06      	ldr	r3, [sp, #24]
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	bfb4      	ite	lt
 801ab1c:	4633      	movlt	r3, r6
 801ab1e:	2300      	movge	r3, #0
 801ab20:	930c      	str	r3, [sp, #48]	; 0x30
 801ab22:	9b06      	ldr	r3, [sp, #24]
 801ab24:	2500      	movs	r5, #0
 801ab26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab2a:	9312      	str	r3, [sp, #72]	; 0x48
 801ab2c:	462e      	mov	r6, r5
 801ab2e:	9b07      	ldr	r3, [sp, #28]
 801ab30:	4620      	mov	r0, r4
 801ab32:	6859      	ldr	r1, [r3, #4]
 801ab34:	f002 f874 	bl	801cc20 <_Balloc>
 801ab38:	9005      	str	r0, [sp, #20]
 801ab3a:	2800      	cmp	r0, #0
 801ab3c:	f43f af0c 	beq.w	801a958 <_strtod_l+0x490>
 801ab40:	9b07      	ldr	r3, [sp, #28]
 801ab42:	691a      	ldr	r2, [r3, #16]
 801ab44:	3202      	adds	r2, #2
 801ab46:	f103 010c 	add.w	r1, r3, #12
 801ab4a:	0092      	lsls	r2, r2, #2
 801ab4c:	300c      	adds	r0, #12
 801ab4e:	f7fe faa5 	bl	801909c <memcpy>
 801ab52:	ec4b ab10 	vmov	d0, sl, fp
 801ab56:	aa1a      	add	r2, sp, #104	; 0x68
 801ab58:	a919      	add	r1, sp, #100	; 0x64
 801ab5a:	4620      	mov	r0, r4
 801ab5c:	f002 fc4e 	bl	801d3fc <__d2b>
 801ab60:	ec4b ab18 	vmov	d8, sl, fp
 801ab64:	9018      	str	r0, [sp, #96]	; 0x60
 801ab66:	2800      	cmp	r0, #0
 801ab68:	f43f aef6 	beq.w	801a958 <_strtod_l+0x490>
 801ab6c:	2101      	movs	r1, #1
 801ab6e:	4620      	mov	r0, r4
 801ab70:	f002 f998 	bl	801cea4 <__i2b>
 801ab74:	4606      	mov	r6, r0
 801ab76:	2800      	cmp	r0, #0
 801ab78:	f43f aeee 	beq.w	801a958 <_strtod_l+0x490>
 801ab7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ab7e:	9904      	ldr	r1, [sp, #16]
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	bfab      	itete	ge
 801ab84:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801ab86:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801ab88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801ab8a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801ab8e:	bfac      	ite	ge
 801ab90:	eb03 0902 	addge.w	r9, r3, r2
 801ab94:	1ad7      	sublt	r7, r2, r3
 801ab96:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ab98:	eba3 0801 	sub.w	r8, r3, r1
 801ab9c:	4490      	add	r8, r2
 801ab9e:	4ba1      	ldr	r3, [pc, #644]	; (801ae24 <_strtod_l+0x95c>)
 801aba0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801aba4:	4598      	cmp	r8, r3
 801aba6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801abaa:	f280 80c7 	bge.w	801ad3c <_strtod_l+0x874>
 801abae:	eba3 0308 	sub.w	r3, r3, r8
 801abb2:	2b1f      	cmp	r3, #31
 801abb4:	eba2 0203 	sub.w	r2, r2, r3
 801abb8:	f04f 0101 	mov.w	r1, #1
 801abbc:	f300 80b1 	bgt.w	801ad22 <_strtod_l+0x85a>
 801abc0:	fa01 f303 	lsl.w	r3, r1, r3
 801abc4:	930d      	str	r3, [sp, #52]	; 0x34
 801abc6:	2300      	movs	r3, #0
 801abc8:	9308      	str	r3, [sp, #32]
 801abca:	eb09 0802 	add.w	r8, r9, r2
 801abce:	9b04      	ldr	r3, [sp, #16]
 801abd0:	45c1      	cmp	r9, r8
 801abd2:	4417      	add	r7, r2
 801abd4:	441f      	add	r7, r3
 801abd6:	464b      	mov	r3, r9
 801abd8:	bfa8      	it	ge
 801abda:	4643      	movge	r3, r8
 801abdc:	42bb      	cmp	r3, r7
 801abde:	bfa8      	it	ge
 801abe0:	463b      	movge	r3, r7
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	bfc2      	ittt	gt
 801abe6:	eba8 0803 	subgt.w	r8, r8, r3
 801abea:	1aff      	subgt	r7, r7, r3
 801abec:	eba9 0903 	subgt.w	r9, r9, r3
 801abf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	dd17      	ble.n	801ac26 <_strtod_l+0x75e>
 801abf6:	4631      	mov	r1, r6
 801abf8:	461a      	mov	r2, r3
 801abfa:	4620      	mov	r0, r4
 801abfc:	f002 fa12 	bl	801d024 <__pow5mult>
 801ac00:	4606      	mov	r6, r0
 801ac02:	2800      	cmp	r0, #0
 801ac04:	f43f aea8 	beq.w	801a958 <_strtod_l+0x490>
 801ac08:	4601      	mov	r1, r0
 801ac0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ac0c:	4620      	mov	r0, r4
 801ac0e:	f002 f95f 	bl	801ced0 <__multiply>
 801ac12:	900b      	str	r0, [sp, #44]	; 0x2c
 801ac14:	2800      	cmp	r0, #0
 801ac16:	f43f ae9f 	beq.w	801a958 <_strtod_l+0x490>
 801ac1a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ac1c:	4620      	mov	r0, r4
 801ac1e:	f002 f83f 	bl	801cca0 <_Bfree>
 801ac22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac24:	9318      	str	r3, [sp, #96]	; 0x60
 801ac26:	f1b8 0f00 	cmp.w	r8, #0
 801ac2a:	f300 808c 	bgt.w	801ad46 <_strtod_l+0x87e>
 801ac2e:	9b06      	ldr	r3, [sp, #24]
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	dd08      	ble.n	801ac46 <_strtod_l+0x77e>
 801ac34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ac36:	9905      	ldr	r1, [sp, #20]
 801ac38:	4620      	mov	r0, r4
 801ac3a:	f002 f9f3 	bl	801d024 <__pow5mult>
 801ac3e:	9005      	str	r0, [sp, #20]
 801ac40:	2800      	cmp	r0, #0
 801ac42:	f43f ae89 	beq.w	801a958 <_strtod_l+0x490>
 801ac46:	2f00      	cmp	r7, #0
 801ac48:	dd08      	ble.n	801ac5c <_strtod_l+0x794>
 801ac4a:	9905      	ldr	r1, [sp, #20]
 801ac4c:	463a      	mov	r2, r7
 801ac4e:	4620      	mov	r0, r4
 801ac50:	f002 fa42 	bl	801d0d8 <__lshift>
 801ac54:	9005      	str	r0, [sp, #20]
 801ac56:	2800      	cmp	r0, #0
 801ac58:	f43f ae7e 	beq.w	801a958 <_strtod_l+0x490>
 801ac5c:	f1b9 0f00 	cmp.w	r9, #0
 801ac60:	dd08      	ble.n	801ac74 <_strtod_l+0x7ac>
 801ac62:	4631      	mov	r1, r6
 801ac64:	464a      	mov	r2, r9
 801ac66:	4620      	mov	r0, r4
 801ac68:	f002 fa36 	bl	801d0d8 <__lshift>
 801ac6c:	4606      	mov	r6, r0
 801ac6e:	2800      	cmp	r0, #0
 801ac70:	f43f ae72 	beq.w	801a958 <_strtod_l+0x490>
 801ac74:	9a05      	ldr	r2, [sp, #20]
 801ac76:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ac78:	4620      	mov	r0, r4
 801ac7a:	f002 fab9 	bl	801d1f0 <__mdiff>
 801ac7e:	4605      	mov	r5, r0
 801ac80:	2800      	cmp	r0, #0
 801ac82:	f43f ae69 	beq.w	801a958 <_strtod_l+0x490>
 801ac86:	68c3      	ldr	r3, [r0, #12]
 801ac88:	930b      	str	r3, [sp, #44]	; 0x2c
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	60c3      	str	r3, [r0, #12]
 801ac8e:	4631      	mov	r1, r6
 801ac90:	f002 fa92 	bl	801d1b8 <__mcmp>
 801ac94:	2800      	cmp	r0, #0
 801ac96:	da60      	bge.n	801ad5a <_strtod_l+0x892>
 801ac98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac9a:	ea53 030a 	orrs.w	r3, r3, sl
 801ac9e:	f040 8082 	bne.w	801ada6 <_strtod_l+0x8de>
 801aca2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801aca6:	2b00      	cmp	r3, #0
 801aca8:	d17d      	bne.n	801ada6 <_strtod_l+0x8de>
 801acaa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801acae:	0d1b      	lsrs	r3, r3, #20
 801acb0:	051b      	lsls	r3, r3, #20
 801acb2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801acb6:	d976      	bls.n	801ada6 <_strtod_l+0x8de>
 801acb8:	696b      	ldr	r3, [r5, #20]
 801acba:	b913      	cbnz	r3, 801acc2 <_strtod_l+0x7fa>
 801acbc:	692b      	ldr	r3, [r5, #16]
 801acbe:	2b01      	cmp	r3, #1
 801acc0:	dd71      	ble.n	801ada6 <_strtod_l+0x8de>
 801acc2:	4629      	mov	r1, r5
 801acc4:	2201      	movs	r2, #1
 801acc6:	4620      	mov	r0, r4
 801acc8:	f002 fa06 	bl	801d0d8 <__lshift>
 801accc:	4631      	mov	r1, r6
 801acce:	4605      	mov	r5, r0
 801acd0:	f002 fa72 	bl	801d1b8 <__mcmp>
 801acd4:	2800      	cmp	r0, #0
 801acd6:	dd66      	ble.n	801ada6 <_strtod_l+0x8de>
 801acd8:	9904      	ldr	r1, [sp, #16]
 801acda:	4a53      	ldr	r2, [pc, #332]	; (801ae28 <_strtod_l+0x960>)
 801acdc:	465b      	mov	r3, fp
 801acde:	2900      	cmp	r1, #0
 801ace0:	f000 8081 	beq.w	801ade6 <_strtod_l+0x91e>
 801ace4:	ea02 010b 	and.w	r1, r2, fp
 801ace8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801acec:	dc7b      	bgt.n	801ade6 <_strtod_l+0x91e>
 801acee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801acf2:	f77f aea9 	ble.w	801aa48 <_strtod_l+0x580>
 801acf6:	4b4d      	ldr	r3, [pc, #308]	; (801ae2c <_strtod_l+0x964>)
 801acf8:	4650      	mov	r0, sl
 801acfa:	4659      	mov	r1, fp
 801acfc:	2200      	movs	r2, #0
 801acfe:	f7e5 fc93 	bl	8000628 <__aeabi_dmul>
 801ad02:	460b      	mov	r3, r1
 801ad04:	4303      	orrs	r3, r0
 801ad06:	bf08      	it	eq
 801ad08:	2322      	moveq	r3, #34	; 0x22
 801ad0a:	4682      	mov	sl, r0
 801ad0c:	468b      	mov	fp, r1
 801ad0e:	bf08      	it	eq
 801ad10:	6023      	streq	r3, [r4, #0]
 801ad12:	e62b      	b.n	801a96c <_strtod_l+0x4a4>
 801ad14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ad18:	fa02 f303 	lsl.w	r3, r2, r3
 801ad1c:	ea03 0a0a 	and.w	sl, r3, sl
 801ad20:	e6e3      	b.n	801aaea <_strtod_l+0x622>
 801ad22:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801ad26:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801ad2a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801ad2e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801ad32:	fa01 f308 	lsl.w	r3, r1, r8
 801ad36:	9308      	str	r3, [sp, #32]
 801ad38:	910d      	str	r1, [sp, #52]	; 0x34
 801ad3a:	e746      	b.n	801abca <_strtod_l+0x702>
 801ad3c:	2300      	movs	r3, #0
 801ad3e:	9308      	str	r3, [sp, #32]
 801ad40:	2301      	movs	r3, #1
 801ad42:	930d      	str	r3, [sp, #52]	; 0x34
 801ad44:	e741      	b.n	801abca <_strtod_l+0x702>
 801ad46:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ad48:	4642      	mov	r2, r8
 801ad4a:	4620      	mov	r0, r4
 801ad4c:	f002 f9c4 	bl	801d0d8 <__lshift>
 801ad50:	9018      	str	r0, [sp, #96]	; 0x60
 801ad52:	2800      	cmp	r0, #0
 801ad54:	f47f af6b 	bne.w	801ac2e <_strtod_l+0x766>
 801ad58:	e5fe      	b.n	801a958 <_strtod_l+0x490>
 801ad5a:	465f      	mov	r7, fp
 801ad5c:	d16e      	bne.n	801ae3c <_strtod_l+0x974>
 801ad5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ad60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ad64:	b342      	cbz	r2, 801adb8 <_strtod_l+0x8f0>
 801ad66:	4a32      	ldr	r2, [pc, #200]	; (801ae30 <_strtod_l+0x968>)
 801ad68:	4293      	cmp	r3, r2
 801ad6a:	d128      	bne.n	801adbe <_strtod_l+0x8f6>
 801ad6c:	9b04      	ldr	r3, [sp, #16]
 801ad6e:	4651      	mov	r1, sl
 801ad70:	b1eb      	cbz	r3, 801adae <_strtod_l+0x8e6>
 801ad72:	4b2d      	ldr	r3, [pc, #180]	; (801ae28 <_strtod_l+0x960>)
 801ad74:	403b      	ands	r3, r7
 801ad76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ad7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ad7e:	d819      	bhi.n	801adb4 <_strtod_l+0x8ec>
 801ad80:	0d1b      	lsrs	r3, r3, #20
 801ad82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ad86:	fa02 f303 	lsl.w	r3, r2, r3
 801ad8a:	4299      	cmp	r1, r3
 801ad8c:	d117      	bne.n	801adbe <_strtod_l+0x8f6>
 801ad8e:	4b29      	ldr	r3, [pc, #164]	; (801ae34 <_strtod_l+0x96c>)
 801ad90:	429f      	cmp	r7, r3
 801ad92:	d102      	bne.n	801ad9a <_strtod_l+0x8d2>
 801ad94:	3101      	adds	r1, #1
 801ad96:	f43f addf 	beq.w	801a958 <_strtod_l+0x490>
 801ad9a:	4b23      	ldr	r3, [pc, #140]	; (801ae28 <_strtod_l+0x960>)
 801ad9c:	403b      	ands	r3, r7
 801ad9e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801ada2:	f04f 0a00 	mov.w	sl, #0
 801ada6:	9b04      	ldr	r3, [sp, #16]
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d1a4      	bne.n	801acf6 <_strtod_l+0x82e>
 801adac:	e5de      	b.n	801a96c <_strtod_l+0x4a4>
 801adae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801adb2:	e7ea      	b.n	801ad8a <_strtod_l+0x8c2>
 801adb4:	4613      	mov	r3, r2
 801adb6:	e7e8      	b.n	801ad8a <_strtod_l+0x8c2>
 801adb8:	ea53 030a 	orrs.w	r3, r3, sl
 801adbc:	d08c      	beq.n	801acd8 <_strtod_l+0x810>
 801adbe:	9b08      	ldr	r3, [sp, #32]
 801adc0:	b1db      	cbz	r3, 801adfa <_strtod_l+0x932>
 801adc2:	423b      	tst	r3, r7
 801adc4:	d0ef      	beq.n	801ada6 <_strtod_l+0x8de>
 801adc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801adc8:	9a04      	ldr	r2, [sp, #16]
 801adca:	4650      	mov	r0, sl
 801adcc:	4659      	mov	r1, fp
 801adce:	b1c3      	cbz	r3, 801ae02 <_strtod_l+0x93a>
 801add0:	f7ff fb5c 	bl	801a48c <sulp>
 801add4:	4602      	mov	r2, r0
 801add6:	460b      	mov	r3, r1
 801add8:	ec51 0b18 	vmov	r0, r1, d8
 801addc:	f7e5 fa6e 	bl	80002bc <__adddf3>
 801ade0:	4682      	mov	sl, r0
 801ade2:	468b      	mov	fp, r1
 801ade4:	e7df      	b.n	801ada6 <_strtod_l+0x8de>
 801ade6:	4013      	ands	r3, r2
 801ade8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801adec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801adf0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801adf4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801adf8:	e7d5      	b.n	801ada6 <_strtod_l+0x8de>
 801adfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801adfc:	ea13 0f0a 	tst.w	r3, sl
 801ae00:	e7e0      	b.n	801adc4 <_strtod_l+0x8fc>
 801ae02:	f7ff fb43 	bl	801a48c <sulp>
 801ae06:	4602      	mov	r2, r0
 801ae08:	460b      	mov	r3, r1
 801ae0a:	ec51 0b18 	vmov	r0, r1, d8
 801ae0e:	f7e5 fa53 	bl	80002b8 <__aeabi_dsub>
 801ae12:	2200      	movs	r2, #0
 801ae14:	2300      	movs	r3, #0
 801ae16:	4682      	mov	sl, r0
 801ae18:	468b      	mov	fp, r1
 801ae1a:	f7e5 fe6d 	bl	8000af8 <__aeabi_dcmpeq>
 801ae1e:	2800      	cmp	r0, #0
 801ae20:	d0c1      	beq.n	801ada6 <_strtod_l+0x8de>
 801ae22:	e611      	b.n	801aa48 <_strtod_l+0x580>
 801ae24:	fffffc02 	.word	0xfffffc02
 801ae28:	7ff00000 	.word	0x7ff00000
 801ae2c:	39500000 	.word	0x39500000
 801ae30:	000fffff 	.word	0x000fffff
 801ae34:	7fefffff 	.word	0x7fefffff
 801ae38:	0801e9d8 	.word	0x0801e9d8
 801ae3c:	4631      	mov	r1, r6
 801ae3e:	4628      	mov	r0, r5
 801ae40:	f002 fb38 	bl	801d4b4 <__ratio>
 801ae44:	ec59 8b10 	vmov	r8, r9, d0
 801ae48:	ee10 0a10 	vmov	r0, s0
 801ae4c:	2200      	movs	r2, #0
 801ae4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ae52:	4649      	mov	r1, r9
 801ae54:	f7e5 fe64 	bl	8000b20 <__aeabi_dcmple>
 801ae58:	2800      	cmp	r0, #0
 801ae5a:	d07a      	beq.n	801af52 <_strtod_l+0xa8a>
 801ae5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d04a      	beq.n	801aef8 <_strtod_l+0xa30>
 801ae62:	4b95      	ldr	r3, [pc, #596]	; (801b0b8 <_strtod_l+0xbf0>)
 801ae64:	2200      	movs	r2, #0
 801ae66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ae6a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b0b8 <_strtod_l+0xbf0>
 801ae6e:	f04f 0800 	mov.w	r8, #0
 801ae72:	4b92      	ldr	r3, [pc, #584]	; (801b0bc <_strtod_l+0xbf4>)
 801ae74:	403b      	ands	r3, r7
 801ae76:	930d      	str	r3, [sp, #52]	; 0x34
 801ae78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ae7a:	4b91      	ldr	r3, [pc, #580]	; (801b0c0 <_strtod_l+0xbf8>)
 801ae7c:	429a      	cmp	r2, r3
 801ae7e:	f040 80b0 	bne.w	801afe2 <_strtod_l+0xb1a>
 801ae82:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ae86:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801ae8a:	ec4b ab10 	vmov	d0, sl, fp
 801ae8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ae92:	f002 fa37 	bl	801d304 <__ulp>
 801ae96:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ae9a:	ec53 2b10 	vmov	r2, r3, d0
 801ae9e:	f7e5 fbc3 	bl	8000628 <__aeabi_dmul>
 801aea2:	4652      	mov	r2, sl
 801aea4:	465b      	mov	r3, fp
 801aea6:	f7e5 fa09 	bl	80002bc <__adddf3>
 801aeaa:	460b      	mov	r3, r1
 801aeac:	4983      	ldr	r1, [pc, #524]	; (801b0bc <_strtod_l+0xbf4>)
 801aeae:	4a85      	ldr	r2, [pc, #532]	; (801b0c4 <_strtod_l+0xbfc>)
 801aeb0:	4019      	ands	r1, r3
 801aeb2:	4291      	cmp	r1, r2
 801aeb4:	4682      	mov	sl, r0
 801aeb6:	d960      	bls.n	801af7a <_strtod_l+0xab2>
 801aeb8:	ee18 3a90 	vmov	r3, s17
 801aebc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801aec0:	4293      	cmp	r3, r2
 801aec2:	d104      	bne.n	801aece <_strtod_l+0xa06>
 801aec4:	ee18 3a10 	vmov	r3, s16
 801aec8:	3301      	adds	r3, #1
 801aeca:	f43f ad45 	beq.w	801a958 <_strtod_l+0x490>
 801aece:	f8df b200 	ldr.w	fp, [pc, #512]	; 801b0d0 <_strtod_l+0xc08>
 801aed2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801aed6:	9918      	ldr	r1, [sp, #96]	; 0x60
 801aed8:	4620      	mov	r0, r4
 801aeda:	f001 fee1 	bl	801cca0 <_Bfree>
 801aede:	9905      	ldr	r1, [sp, #20]
 801aee0:	4620      	mov	r0, r4
 801aee2:	f001 fedd 	bl	801cca0 <_Bfree>
 801aee6:	4631      	mov	r1, r6
 801aee8:	4620      	mov	r0, r4
 801aeea:	f001 fed9 	bl	801cca0 <_Bfree>
 801aeee:	4629      	mov	r1, r5
 801aef0:	4620      	mov	r0, r4
 801aef2:	f001 fed5 	bl	801cca0 <_Bfree>
 801aef6:	e61a      	b.n	801ab2e <_strtod_l+0x666>
 801aef8:	f1ba 0f00 	cmp.w	sl, #0
 801aefc:	d11b      	bne.n	801af36 <_strtod_l+0xa6e>
 801aefe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801af02:	b9f3      	cbnz	r3, 801af42 <_strtod_l+0xa7a>
 801af04:	4b6c      	ldr	r3, [pc, #432]	; (801b0b8 <_strtod_l+0xbf0>)
 801af06:	2200      	movs	r2, #0
 801af08:	4640      	mov	r0, r8
 801af0a:	4649      	mov	r1, r9
 801af0c:	f7e5 fdfe 	bl	8000b0c <__aeabi_dcmplt>
 801af10:	b9d0      	cbnz	r0, 801af48 <_strtod_l+0xa80>
 801af12:	4640      	mov	r0, r8
 801af14:	4649      	mov	r1, r9
 801af16:	4b6c      	ldr	r3, [pc, #432]	; (801b0c8 <_strtod_l+0xc00>)
 801af18:	2200      	movs	r2, #0
 801af1a:	f7e5 fb85 	bl	8000628 <__aeabi_dmul>
 801af1e:	4680      	mov	r8, r0
 801af20:	4689      	mov	r9, r1
 801af22:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801af26:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801af2a:	9315      	str	r3, [sp, #84]	; 0x54
 801af2c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801af30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801af34:	e79d      	b.n	801ae72 <_strtod_l+0x9aa>
 801af36:	f1ba 0f01 	cmp.w	sl, #1
 801af3a:	d102      	bne.n	801af42 <_strtod_l+0xa7a>
 801af3c:	2f00      	cmp	r7, #0
 801af3e:	f43f ad83 	beq.w	801aa48 <_strtod_l+0x580>
 801af42:	4b62      	ldr	r3, [pc, #392]	; (801b0cc <_strtod_l+0xc04>)
 801af44:	2200      	movs	r2, #0
 801af46:	e78e      	b.n	801ae66 <_strtod_l+0x99e>
 801af48:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801b0c8 <_strtod_l+0xc00>
 801af4c:	f04f 0800 	mov.w	r8, #0
 801af50:	e7e7      	b.n	801af22 <_strtod_l+0xa5a>
 801af52:	4b5d      	ldr	r3, [pc, #372]	; (801b0c8 <_strtod_l+0xc00>)
 801af54:	4640      	mov	r0, r8
 801af56:	4649      	mov	r1, r9
 801af58:	2200      	movs	r2, #0
 801af5a:	f7e5 fb65 	bl	8000628 <__aeabi_dmul>
 801af5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801af60:	4680      	mov	r8, r0
 801af62:	4689      	mov	r9, r1
 801af64:	b933      	cbnz	r3, 801af74 <_strtod_l+0xaac>
 801af66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801af6a:	900e      	str	r0, [sp, #56]	; 0x38
 801af6c:	930f      	str	r3, [sp, #60]	; 0x3c
 801af6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801af72:	e7dd      	b.n	801af30 <_strtod_l+0xa68>
 801af74:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801af78:	e7f9      	b.n	801af6e <_strtod_l+0xaa6>
 801af7a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801af7e:	9b04      	ldr	r3, [sp, #16]
 801af80:	2b00      	cmp	r3, #0
 801af82:	d1a8      	bne.n	801aed6 <_strtod_l+0xa0e>
 801af84:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801af88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801af8a:	0d1b      	lsrs	r3, r3, #20
 801af8c:	051b      	lsls	r3, r3, #20
 801af8e:	429a      	cmp	r2, r3
 801af90:	d1a1      	bne.n	801aed6 <_strtod_l+0xa0e>
 801af92:	4640      	mov	r0, r8
 801af94:	4649      	mov	r1, r9
 801af96:	f7e5 fef7 	bl	8000d88 <__aeabi_d2lz>
 801af9a:	f7e5 fb17 	bl	80005cc <__aeabi_l2d>
 801af9e:	4602      	mov	r2, r0
 801afa0:	460b      	mov	r3, r1
 801afa2:	4640      	mov	r0, r8
 801afa4:	4649      	mov	r1, r9
 801afa6:	f7e5 f987 	bl	80002b8 <__aeabi_dsub>
 801afaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801afac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801afb0:	ea43 030a 	orr.w	r3, r3, sl
 801afb4:	4313      	orrs	r3, r2
 801afb6:	4680      	mov	r8, r0
 801afb8:	4689      	mov	r9, r1
 801afba:	d055      	beq.n	801b068 <_strtod_l+0xba0>
 801afbc:	a336      	add	r3, pc, #216	; (adr r3, 801b098 <_strtod_l+0xbd0>)
 801afbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afc2:	f7e5 fda3 	bl	8000b0c <__aeabi_dcmplt>
 801afc6:	2800      	cmp	r0, #0
 801afc8:	f47f acd0 	bne.w	801a96c <_strtod_l+0x4a4>
 801afcc:	a334      	add	r3, pc, #208	; (adr r3, 801b0a0 <_strtod_l+0xbd8>)
 801afce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afd2:	4640      	mov	r0, r8
 801afd4:	4649      	mov	r1, r9
 801afd6:	f7e5 fdb7 	bl	8000b48 <__aeabi_dcmpgt>
 801afda:	2800      	cmp	r0, #0
 801afdc:	f43f af7b 	beq.w	801aed6 <_strtod_l+0xa0e>
 801afe0:	e4c4      	b.n	801a96c <_strtod_l+0x4a4>
 801afe2:	9b04      	ldr	r3, [sp, #16]
 801afe4:	b333      	cbz	r3, 801b034 <_strtod_l+0xb6c>
 801afe6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801afe8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801afec:	d822      	bhi.n	801b034 <_strtod_l+0xb6c>
 801afee:	a32e      	add	r3, pc, #184	; (adr r3, 801b0a8 <_strtod_l+0xbe0>)
 801aff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aff4:	4640      	mov	r0, r8
 801aff6:	4649      	mov	r1, r9
 801aff8:	f7e5 fd92 	bl	8000b20 <__aeabi_dcmple>
 801affc:	b1a0      	cbz	r0, 801b028 <_strtod_l+0xb60>
 801affe:	4649      	mov	r1, r9
 801b000:	4640      	mov	r0, r8
 801b002:	f7e5 fde9 	bl	8000bd8 <__aeabi_d2uiz>
 801b006:	2801      	cmp	r0, #1
 801b008:	bf38      	it	cc
 801b00a:	2001      	movcc	r0, #1
 801b00c:	f7e5 fa92 	bl	8000534 <__aeabi_ui2d>
 801b010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b012:	4680      	mov	r8, r0
 801b014:	4689      	mov	r9, r1
 801b016:	bb23      	cbnz	r3, 801b062 <_strtod_l+0xb9a>
 801b018:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b01c:	9010      	str	r0, [sp, #64]	; 0x40
 801b01e:	9311      	str	r3, [sp, #68]	; 0x44
 801b020:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b024:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b02a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b02c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b030:	1a9b      	subs	r3, r3, r2
 801b032:	9309      	str	r3, [sp, #36]	; 0x24
 801b034:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b038:	eeb0 0a48 	vmov.f32	s0, s16
 801b03c:	eef0 0a68 	vmov.f32	s1, s17
 801b040:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b044:	f002 f95e 	bl	801d304 <__ulp>
 801b048:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b04c:	ec53 2b10 	vmov	r2, r3, d0
 801b050:	f7e5 faea 	bl	8000628 <__aeabi_dmul>
 801b054:	ec53 2b18 	vmov	r2, r3, d8
 801b058:	f7e5 f930 	bl	80002bc <__adddf3>
 801b05c:	4682      	mov	sl, r0
 801b05e:	468b      	mov	fp, r1
 801b060:	e78d      	b.n	801af7e <_strtod_l+0xab6>
 801b062:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801b066:	e7db      	b.n	801b020 <_strtod_l+0xb58>
 801b068:	a311      	add	r3, pc, #68	; (adr r3, 801b0b0 <_strtod_l+0xbe8>)
 801b06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b06e:	f7e5 fd4d 	bl	8000b0c <__aeabi_dcmplt>
 801b072:	e7b2      	b.n	801afda <_strtod_l+0xb12>
 801b074:	2300      	movs	r3, #0
 801b076:	930a      	str	r3, [sp, #40]	; 0x28
 801b078:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b07a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b07c:	6013      	str	r3, [r2, #0]
 801b07e:	f7ff ba6b 	b.w	801a558 <_strtod_l+0x90>
 801b082:	2a65      	cmp	r2, #101	; 0x65
 801b084:	f43f ab5f 	beq.w	801a746 <_strtod_l+0x27e>
 801b088:	2a45      	cmp	r2, #69	; 0x45
 801b08a:	f43f ab5c 	beq.w	801a746 <_strtod_l+0x27e>
 801b08e:	2301      	movs	r3, #1
 801b090:	f7ff bb94 	b.w	801a7bc <_strtod_l+0x2f4>
 801b094:	f3af 8000 	nop.w
 801b098:	94a03595 	.word	0x94a03595
 801b09c:	3fdfffff 	.word	0x3fdfffff
 801b0a0:	35afe535 	.word	0x35afe535
 801b0a4:	3fe00000 	.word	0x3fe00000
 801b0a8:	ffc00000 	.word	0xffc00000
 801b0ac:	41dfffff 	.word	0x41dfffff
 801b0b0:	94a03595 	.word	0x94a03595
 801b0b4:	3fcfffff 	.word	0x3fcfffff
 801b0b8:	3ff00000 	.word	0x3ff00000
 801b0bc:	7ff00000 	.word	0x7ff00000
 801b0c0:	7fe00000 	.word	0x7fe00000
 801b0c4:	7c9fffff 	.word	0x7c9fffff
 801b0c8:	3fe00000 	.word	0x3fe00000
 801b0cc:	bff00000 	.word	0xbff00000
 801b0d0:	7fefffff 	.word	0x7fefffff

0801b0d4 <_strtod_r>:
 801b0d4:	4b01      	ldr	r3, [pc, #4]	; (801b0dc <_strtod_r+0x8>)
 801b0d6:	f7ff b9f7 	b.w	801a4c8 <_strtod_l>
 801b0da:	bf00      	nop
 801b0dc:	200000e8 	.word	0x200000e8

0801b0e0 <_strtol_l.constprop.0>:
 801b0e0:	2b01      	cmp	r3, #1
 801b0e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0e6:	d001      	beq.n	801b0ec <_strtol_l.constprop.0+0xc>
 801b0e8:	2b24      	cmp	r3, #36	; 0x24
 801b0ea:	d906      	bls.n	801b0fa <_strtol_l.constprop.0+0x1a>
 801b0ec:	f7fd fe5a 	bl	8018da4 <__errno>
 801b0f0:	2316      	movs	r3, #22
 801b0f2:	6003      	str	r3, [r0, #0]
 801b0f4:	2000      	movs	r0, #0
 801b0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b0fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801b1e0 <_strtol_l.constprop.0+0x100>
 801b0fe:	460d      	mov	r5, r1
 801b100:	462e      	mov	r6, r5
 801b102:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b106:	f814 700c 	ldrb.w	r7, [r4, ip]
 801b10a:	f017 0708 	ands.w	r7, r7, #8
 801b10e:	d1f7      	bne.n	801b100 <_strtol_l.constprop.0+0x20>
 801b110:	2c2d      	cmp	r4, #45	; 0x2d
 801b112:	d132      	bne.n	801b17a <_strtol_l.constprop.0+0x9a>
 801b114:	782c      	ldrb	r4, [r5, #0]
 801b116:	2701      	movs	r7, #1
 801b118:	1cb5      	adds	r5, r6, #2
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d05b      	beq.n	801b1d6 <_strtol_l.constprop.0+0xf6>
 801b11e:	2b10      	cmp	r3, #16
 801b120:	d109      	bne.n	801b136 <_strtol_l.constprop.0+0x56>
 801b122:	2c30      	cmp	r4, #48	; 0x30
 801b124:	d107      	bne.n	801b136 <_strtol_l.constprop.0+0x56>
 801b126:	782c      	ldrb	r4, [r5, #0]
 801b128:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b12c:	2c58      	cmp	r4, #88	; 0x58
 801b12e:	d14d      	bne.n	801b1cc <_strtol_l.constprop.0+0xec>
 801b130:	786c      	ldrb	r4, [r5, #1]
 801b132:	2310      	movs	r3, #16
 801b134:	3502      	adds	r5, #2
 801b136:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b13a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 801b13e:	f04f 0c00 	mov.w	ip, #0
 801b142:	fbb8 f9f3 	udiv	r9, r8, r3
 801b146:	4666      	mov	r6, ip
 801b148:	fb03 8a19 	mls	sl, r3, r9, r8
 801b14c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801b150:	f1be 0f09 	cmp.w	lr, #9
 801b154:	d816      	bhi.n	801b184 <_strtol_l.constprop.0+0xa4>
 801b156:	4674      	mov	r4, lr
 801b158:	42a3      	cmp	r3, r4
 801b15a:	dd24      	ble.n	801b1a6 <_strtol_l.constprop.0+0xc6>
 801b15c:	f1bc 0f00 	cmp.w	ip, #0
 801b160:	db1e      	blt.n	801b1a0 <_strtol_l.constprop.0+0xc0>
 801b162:	45b1      	cmp	r9, r6
 801b164:	d31c      	bcc.n	801b1a0 <_strtol_l.constprop.0+0xc0>
 801b166:	d101      	bne.n	801b16c <_strtol_l.constprop.0+0x8c>
 801b168:	45a2      	cmp	sl, r4
 801b16a:	db19      	blt.n	801b1a0 <_strtol_l.constprop.0+0xc0>
 801b16c:	fb06 4603 	mla	r6, r6, r3, r4
 801b170:	f04f 0c01 	mov.w	ip, #1
 801b174:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b178:	e7e8      	b.n	801b14c <_strtol_l.constprop.0+0x6c>
 801b17a:	2c2b      	cmp	r4, #43	; 0x2b
 801b17c:	bf04      	itt	eq
 801b17e:	782c      	ldrbeq	r4, [r5, #0]
 801b180:	1cb5      	addeq	r5, r6, #2
 801b182:	e7ca      	b.n	801b11a <_strtol_l.constprop.0+0x3a>
 801b184:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801b188:	f1be 0f19 	cmp.w	lr, #25
 801b18c:	d801      	bhi.n	801b192 <_strtol_l.constprop.0+0xb2>
 801b18e:	3c37      	subs	r4, #55	; 0x37
 801b190:	e7e2      	b.n	801b158 <_strtol_l.constprop.0+0x78>
 801b192:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801b196:	f1be 0f19 	cmp.w	lr, #25
 801b19a:	d804      	bhi.n	801b1a6 <_strtol_l.constprop.0+0xc6>
 801b19c:	3c57      	subs	r4, #87	; 0x57
 801b19e:	e7db      	b.n	801b158 <_strtol_l.constprop.0+0x78>
 801b1a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801b1a4:	e7e6      	b.n	801b174 <_strtol_l.constprop.0+0x94>
 801b1a6:	f1bc 0f00 	cmp.w	ip, #0
 801b1aa:	da05      	bge.n	801b1b8 <_strtol_l.constprop.0+0xd8>
 801b1ac:	2322      	movs	r3, #34	; 0x22
 801b1ae:	6003      	str	r3, [r0, #0]
 801b1b0:	4646      	mov	r6, r8
 801b1b2:	b942      	cbnz	r2, 801b1c6 <_strtol_l.constprop.0+0xe6>
 801b1b4:	4630      	mov	r0, r6
 801b1b6:	e79e      	b.n	801b0f6 <_strtol_l.constprop.0+0x16>
 801b1b8:	b107      	cbz	r7, 801b1bc <_strtol_l.constprop.0+0xdc>
 801b1ba:	4276      	negs	r6, r6
 801b1bc:	2a00      	cmp	r2, #0
 801b1be:	d0f9      	beq.n	801b1b4 <_strtol_l.constprop.0+0xd4>
 801b1c0:	f1bc 0f00 	cmp.w	ip, #0
 801b1c4:	d000      	beq.n	801b1c8 <_strtol_l.constprop.0+0xe8>
 801b1c6:	1e69      	subs	r1, r5, #1
 801b1c8:	6011      	str	r1, [r2, #0]
 801b1ca:	e7f3      	b.n	801b1b4 <_strtol_l.constprop.0+0xd4>
 801b1cc:	2430      	movs	r4, #48	; 0x30
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	d1b1      	bne.n	801b136 <_strtol_l.constprop.0+0x56>
 801b1d2:	2308      	movs	r3, #8
 801b1d4:	e7af      	b.n	801b136 <_strtol_l.constprop.0+0x56>
 801b1d6:	2c30      	cmp	r4, #48	; 0x30
 801b1d8:	d0a5      	beq.n	801b126 <_strtol_l.constprop.0+0x46>
 801b1da:	230a      	movs	r3, #10
 801b1dc:	e7ab      	b.n	801b136 <_strtol_l.constprop.0+0x56>
 801b1de:	bf00      	nop
 801b1e0:	0801e799 	.word	0x0801e799

0801b1e4 <_strtol_r>:
 801b1e4:	f7ff bf7c 	b.w	801b0e0 <_strtol_l.constprop.0>

0801b1e8 <_strtoul_l.constprop.0>:
 801b1e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b1ec:	4f36      	ldr	r7, [pc, #216]	; (801b2c8 <_strtoul_l.constprop.0+0xe0>)
 801b1ee:	4686      	mov	lr, r0
 801b1f0:	460d      	mov	r5, r1
 801b1f2:	4628      	mov	r0, r5
 801b1f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b1f8:	5de6      	ldrb	r6, [r4, r7]
 801b1fa:	f016 0608 	ands.w	r6, r6, #8
 801b1fe:	d1f8      	bne.n	801b1f2 <_strtoul_l.constprop.0+0xa>
 801b200:	2c2d      	cmp	r4, #45	; 0x2d
 801b202:	d12f      	bne.n	801b264 <_strtoul_l.constprop.0+0x7c>
 801b204:	782c      	ldrb	r4, [r5, #0]
 801b206:	2601      	movs	r6, #1
 801b208:	1c85      	adds	r5, r0, #2
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d057      	beq.n	801b2be <_strtoul_l.constprop.0+0xd6>
 801b20e:	2b10      	cmp	r3, #16
 801b210:	d109      	bne.n	801b226 <_strtoul_l.constprop.0+0x3e>
 801b212:	2c30      	cmp	r4, #48	; 0x30
 801b214:	d107      	bne.n	801b226 <_strtoul_l.constprop.0+0x3e>
 801b216:	7828      	ldrb	r0, [r5, #0]
 801b218:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801b21c:	2858      	cmp	r0, #88	; 0x58
 801b21e:	d149      	bne.n	801b2b4 <_strtoul_l.constprop.0+0xcc>
 801b220:	786c      	ldrb	r4, [r5, #1]
 801b222:	2310      	movs	r3, #16
 801b224:	3502      	adds	r5, #2
 801b226:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801b22a:	2700      	movs	r7, #0
 801b22c:	fbb8 f8f3 	udiv	r8, r8, r3
 801b230:	fb03 f908 	mul.w	r9, r3, r8
 801b234:	ea6f 0909 	mvn.w	r9, r9
 801b238:	4638      	mov	r0, r7
 801b23a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b23e:	f1bc 0f09 	cmp.w	ip, #9
 801b242:	d814      	bhi.n	801b26e <_strtoul_l.constprop.0+0x86>
 801b244:	4664      	mov	r4, ip
 801b246:	42a3      	cmp	r3, r4
 801b248:	dd22      	ble.n	801b290 <_strtoul_l.constprop.0+0xa8>
 801b24a:	2f00      	cmp	r7, #0
 801b24c:	db1d      	blt.n	801b28a <_strtoul_l.constprop.0+0xa2>
 801b24e:	4580      	cmp	r8, r0
 801b250:	d31b      	bcc.n	801b28a <_strtoul_l.constprop.0+0xa2>
 801b252:	d101      	bne.n	801b258 <_strtoul_l.constprop.0+0x70>
 801b254:	45a1      	cmp	r9, r4
 801b256:	db18      	blt.n	801b28a <_strtoul_l.constprop.0+0xa2>
 801b258:	fb00 4003 	mla	r0, r0, r3, r4
 801b25c:	2701      	movs	r7, #1
 801b25e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b262:	e7ea      	b.n	801b23a <_strtoul_l.constprop.0+0x52>
 801b264:	2c2b      	cmp	r4, #43	; 0x2b
 801b266:	bf04      	itt	eq
 801b268:	782c      	ldrbeq	r4, [r5, #0]
 801b26a:	1c85      	addeq	r5, r0, #2
 801b26c:	e7cd      	b.n	801b20a <_strtoul_l.constprop.0+0x22>
 801b26e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801b272:	f1bc 0f19 	cmp.w	ip, #25
 801b276:	d801      	bhi.n	801b27c <_strtoul_l.constprop.0+0x94>
 801b278:	3c37      	subs	r4, #55	; 0x37
 801b27a:	e7e4      	b.n	801b246 <_strtoul_l.constprop.0+0x5e>
 801b27c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801b280:	f1bc 0f19 	cmp.w	ip, #25
 801b284:	d804      	bhi.n	801b290 <_strtoul_l.constprop.0+0xa8>
 801b286:	3c57      	subs	r4, #87	; 0x57
 801b288:	e7dd      	b.n	801b246 <_strtoul_l.constprop.0+0x5e>
 801b28a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b28e:	e7e6      	b.n	801b25e <_strtoul_l.constprop.0+0x76>
 801b290:	2f00      	cmp	r7, #0
 801b292:	da07      	bge.n	801b2a4 <_strtoul_l.constprop.0+0xbc>
 801b294:	2322      	movs	r3, #34	; 0x22
 801b296:	f8ce 3000 	str.w	r3, [lr]
 801b29a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b29e:	b932      	cbnz	r2, 801b2ae <_strtoul_l.constprop.0+0xc6>
 801b2a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b2a4:	b106      	cbz	r6, 801b2a8 <_strtoul_l.constprop.0+0xc0>
 801b2a6:	4240      	negs	r0, r0
 801b2a8:	2a00      	cmp	r2, #0
 801b2aa:	d0f9      	beq.n	801b2a0 <_strtoul_l.constprop.0+0xb8>
 801b2ac:	b107      	cbz	r7, 801b2b0 <_strtoul_l.constprop.0+0xc8>
 801b2ae:	1e69      	subs	r1, r5, #1
 801b2b0:	6011      	str	r1, [r2, #0]
 801b2b2:	e7f5      	b.n	801b2a0 <_strtoul_l.constprop.0+0xb8>
 801b2b4:	2430      	movs	r4, #48	; 0x30
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d1b5      	bne.n	801b226 <_strtoul_l.constprop.0+0x3e>
 801b2ba:	2308      	movs	r3, #8
 801b2bc:	e7b3      	b.n	801b226 <_strtoul_l.constprop.0+0x3e>
 801b2be:	2c30      	cmp	r4, #48	; 0x30
 801b2c0:	d0a9      	beq.n	801b216 <_strtoul_l.constprop.0+0x2e>
 801b2c2:	230a      	movs	r3, #10
 801b2c4:	e7af      	b.n	801b226 <_strtoul_l.constprop.0+0x3e>
 801b2c6:	bf00      	nop
 801b2c8:	0801e799 	.word	0x0801e799

0801b2cc <strtoul>:
 801b2cc:	4613      	mov	r3, r2
 801b2ce:	460a      	mov	r2, r1
 801b2d0:	4601      	mov	r1, r0
 801b2d2:	4802      	ldr	r0, [pc, #8]	; (801b2dc <strtoul+0x10>)
 801b2d4:	6800      	ldr	r0, [r0, #0]
 801b2d6:	f7ff bf87 	b.w	801b1e8 <_strtoul_l.constprop.0>
 801b2da:	bf00      	nop
 801b2dc:	20000080 	.word	0x20000080

0801b2e0 <_vsniprintf_r>:
 801b2e0:	b530      	push	{r4, r5, lr}
 801b2e2:	4614      	mov	r4, r2
 801b2e4:	2c00      	cmp	r4, #0
 801b2e6:	b09b      	sub	sp, #108	; 0x6c
 801b2e8:	4605      	mov	r5, r0
 801b2ea:	461a      	mov	r2, r3
 801b2ec:	da05      	bge.n	801b2fa <_vsniprintf_r+0x1a>
 801b2ee:	238b      	movs	r3, #139	; 0x8b
 801b2f0:	6003      	str	r3, [r0, #0]
 801b2f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b2f6:	b01b      	add	sp, #108	; 0x6c
 801b2f8:	bd30      	pop	{r4, r5, pc}
 801b2fa:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b2fe:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b302:	bf14      	ite	ne
 801b304:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801b308:	4623      	moveq	r3, r4
 801b30a:	9302      	str	r3, [sp, #8]
 801b30c:	9305      	str	r3, [sp, #20]
 801b30e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b312:	9100      	str	r1, [sp, #0]
 801b314:	9104      	str	r1, [sp, #16]
 801b316:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b31a:	4669      	mov	r1, sp
 801b31c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b31e:	f002 f9cb 	bl	801d6b8 <_svfiprintf_r>
 801b322:	1c43      	adds	r3, r0, #1
 801b324:	bfbc      	itt	lt
 801b326:	238b      	movlt	r3, #139	; 0x8b
 801b328:	602b      	strlt	r3, [r5, #0]
 801b32a:	2c00      	cmp	r4, #0
 801b32c:	d0e3      	beq.n	801b2f6 <_vsniprintf_r+0x16>
 801b32e:	9b00      	ldr	r3, [sp, #0]
 801b330:	2200      	movs	r2, #0
 801b332:	701a      	strb	r2, [r3, #0]
 801b334:	e7df      	b.n	801b2f6 <_vsniprintf_r+0x16>
	...

0801b338 <vsniprintf>:
 801b338:	b507      	push	{r0, r1, r2, lr}
 801b33a:	9300      	str	r3, [sp, #0]
 801b33c:	4613      	mov	r3, r2
 801b33e:	460a      	mov	r2, r1
 801b340:	4601      	mov	r1, r0
 801b342:	4803      	ldr	r0, [pc, #12]	; (801b350 <vsniprintf+0x18>)
 801b344:	6800      	ldr	r0, [r0, #0]
 801b346:	f7ff ffcb 	bl	801b2e0 <_vsniprintf_r>
 801b34a:	b003      	add	sp, #12
 801b34c:	f85d fb04 	ldr.w	pc, [sp], #4
 801b350:	20000080 	.word	0x20000080

0801b354 <__swbuf_r>:
 801b354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b356:	460e      	mov	r6, r1
 801b358:	4614      	mov	r4, r2
 801b35a:	4605      	mov	r5, r0
 801b35c:	b118      	cbz	r0, 801b366 <__swbuf_r+0x12>
 801b35e:	6983      	ldr	r3, [r0, #24]
 801b360:	b90b      	cbnz	r3, 801b366 <__swbuf_r+0x12>
 801b362:	f7fd fd7d 	bl	8018e60 <__sinit>
 801b366:	4b21      	ldr	r3, [pc, #132]	; (801b3ec <__swbuf_r+0x98>)
 801b368:	429c      	cmp	r4, r3
 801b36a:	d12b      	bne.n	801b3c4 <__swbuf_r+0x70>
 801b36c:	686c      	ldr	r4, [r5, #4]
 801b36e:	69a3      	ldr	r3, [r4, #24]
 801b370:	60a3      	str	r3, [r4, #8]
 801b372:	89a3      	ldrh	r3, [r4, #12]
 801b374:	071a      	lsls	r2, r3, #28
 801b376:	d52f      	bpl.n	801b3d8 <__swbuf_r+0x84>
 801b378:	6923      	ldr	r3, [r4, #16]
 801b37a:	b36b      	cbz	r3, 801b3d8 <__swbuf_r+0x84>
 801b37c:	6923      	ldr	r3, [r4, #16]
 801b37e:	6820      	ldr	r0, [r4, #0]
 801b380:	1ac0      	subs	r0, r0, r3
 801b382:	6963      	ldr	r3, [r4, #20]
 801b384:	b2f6      	uxtb	r6, r6
 801b386:	4283      	cmp	r3, r0
 801b388:	4637      	mov	r7, r6
 801b38a:	dc04      	bgt.n	801b396 <__swbuf_r+0x42>
 801b38c:	4621      	mov	r1, r4
 801b38e:	4628      	mov	r0, r5
 801b390:	f000 ffee 	bl	801c370 <_fflush_r>
 801b394:	bb30      	cbnz	r0, 801b3e4 <__swbuf_r+0x90>
 801b396:	68a3      	ldr	r3, [r4, #8]
 801b398:	3b01      	subs	r3, #1
 801b39a:	60a3      	str	r3, [r4, #8]
 801b39c:	6823      	ldr	r3, [r4, #0]
 801b39e:	1c5a      	adds	r2, r3, #1
 801b3a0:	6022      	str	r2, [r4, #0]
 801b3a2:	701e      	strb	r6, [r3, #0]
 801b3a4:	6963      	ldr	r3, [r4, #20]
 801b3a6:	3001      	adds	r0, #1
 801b3a8:	4283      	cmp	r3, r0
 801b3aa:	d004      	beq.n	801b3b6 <__swbuf_r+0x62>
 801b3ac:	89a3      	ldrh	r3, [r4, #12]
 801b3ae:	07db      	lsls	r3, r3, #31
 801b3b0:	d506      	bpl.n	801b3c0 <__swbuf_r+0x6c>
 801b3b2:	2e0a      	cmp	r6, #10
 801b3b4:	d104      	bne.n	801b3c0 <__swbuf_r+0x6c>
 801b3b6:	4621      	mov	r1, r4
 801b3b8:	4628      	mov	r0, r5
 801b3ba:	f000 ffd9 	bl	801c370 <_fflush_r>
 801b3be:	b988      	cbnz	r0, 801b3e4 <__swbuf_r+0x90>
 801b3c0:	4638      	mov	r0, r7
 801b3c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3c4:	4b0a      	ldr	r3, [pc, #40]	; (801b3f0 <__swbuf_r+0x9c>)
 801b3c6:	429c      	cmp	r4, r3
 801b3c8:	d101      	bne.n	801b3ce <__swbuf_r+0x7a>
 801b3ca:	68ac      	ldr	r4, [r5, #8]
 801b3cc:	e7cf      	b.n	801b36e <__swbuf_r+0x1a>
 801b3ce:	4b09      	ldr	r3, [pc, #36]	; (801b3f4 <__swbuf_r+0xa0>)
 801b3d0:	429c      	cmp	r4, r3
 801b3d2:	bf08      	it	eq
 801b3d4:	68ec      	ldreq	r4, [r5, #12]
 801b3d6:	e7ca      	b.n	801b36e <__swbuf_r+0x1a>
 801b3d8:	4621      	mov	r1, r4
 801b3da:	4628      	mov	r0, r5
 801b3dc:	f000 f81e 	bl	801b41c <__swsetup_r>
 801b3e0:	2800      	cmp	r0, #0
 801b3e2:	d0cb      	beq.n	801b37c <__swbuf_r+0x28>
 801b3e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b3e8:	e7ea      	b.n	801b3c0 <__swbuf_r+0x6c>
 801b3ea:	bf00      	nop
 801b3ec:	0801e8bc 	.word	0x0801e8bc
 801b3f0:	0801e8dc 	.word	0x0801e8dc
 801b3f4:	0801e89c 	.word	0x0801e89c

0801b3f8 <_write_r>:
 801b3f8:	b538      	push	{r3, r4, r5, lr}
 801b3fa:	4d07      	ldr	r5, [pc, #28]	; (801b418 <_write_r+0x20>)
 801b3fc:	4604      	mov	r4, r0
 801b3fe:	4608      	mov	r0, r1
 801b400:	4611      	mov	r1, r2
 801b402:	2200      	movs	r2, #0
 801b404:	602a      	str	r2, [r5, #0]
 801b406:	461a      	mov	r2, r3
 801b408:	f7e8 fc93 	bl	8003d32 <_write>
 801b40c:	1c43      	adds	r3, r0, #1
 801b40e:	d102      	bne.n	801b416 <_write_r+0x1e>
 801b410:	682b      	ldr	r3, [r5, #0]
 801b412:	b103      	cbz	r3, 801b416 <_write_r+0x1e>
 801b414:	6023      	str	r3, [r4, #0]
 801b416:	bd38      	pop	{r3, r4, r5, pc}
 801b418:	2000a068 	.word	0x2000a068

0801b41c <__swsetup_r>:
 801b41c:	4b32      	ldr	r3, [pc, #200]	; (801b4e8 <__swsetup_r+0xcc>)
 801b41e:	b570      	push	{r4, r5, r6, lr}
 801b420:	681d      	ldr	r5, [r3, #0]
 801b422:	4606      	mov	r6, r0
 801b424:	460c      	mov	r4, r1
 801b426:	b125      	cbz	r5, 801b432 <__swsetup_r+0x16>
 801b428:	69ab      	ldr	r3, [r5, #24]
 801b42a:	b913      	cbnz	r3, 801b432 <__swsetup_r+0x16>
 801b42c:	4628      	mov	r0, r5
 801b42e:	f7fd fd17 	bl	8018e60 <__sinit>
 801b432:	4b2e      	ldr	r3, [pc, #184]	; (801b4ec <__swsetup_r+0xd0>)
 801b434:	429c      	cmp	r4, r3
 801b436:	d10f      	bne.n	801b458 <__swsetup_r+0x3c>
 801b438:	686c      	ldr	r4, [r5, #4]
 801b43a:	89a3      	ldrh	r3, [r4, #12]
 801b43c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b440:	0719      	lsls	r1, r3, #28
 801b442:	d42c      	bmi.n	801b49e <__swsetup_r+0x82>
 801b444:	06dd      	lsls	r5, r3, #27
 801b446:	d411      	bmi.n	801b46c <__swsetup_r+0x50>
 801b448:	2309      	movs	r3, #9
 801b44a:	6033      	str	r3, [r6, #0]
 801b44c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b450:	81a3      	strh	r3, [r4, #12]
 801b452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b456:	e03e      	b.n	801b4d6 <__swsetup_r+0xba>
 801b458:	4b25      	ldr	r3, [pc, #148]	; (801b4f0 <__swsetup_r+0xd4>)
 801b45a:	429c      	cmp	r4, r3
 801b45c:	d101      	bne.n	801b462 <__swsetup_r+0x46>
 801b45e:	68ac      	ldr	r4, [r5, #8]
 801b460:	e7eb      	b.n	801b43a <__swsetup_r+0x1e>
 801b462:	4b24      	ldr	r3, [pc, #144]	; (801b4f4 <__swsetup_r+0xd8>)
 801b464:	429c      	cmp	r4, r3
 801b466:	bf08      	it	eq
 801b468:	68ec      	ldreq	r4, [r5, #12]
 801b46a:	e7e6      	b.n	801b43a <__swsetup_r+0x1e>
 801b46c:	0758      	lsls	r0, r3, #29
 801b46e:	d512      	bpl.n	801b496 <__swsetup_r+0x7a>
 801b470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b472:	b141      	cbz	r1, 801b486 <__swsetup_r+0x6a>
 801b474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b478:	4299      	cmp	r1, r3
 801b47a:	d002      	beq.n	801b482 <__swsetup_r+0x66>
 801b47c:	4630      	mov	r0, r6
 801b47e:	f7fd fe53 	bl	8019128 <_free_r>
 801b482:	2300      	movs	r3, #0
 801b484:	6363      	str	r3, [r4, #52]	; 0x34
 801b486:	89a3      	ldrh	r3, [r4, #12]
 801b488:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b48c:	81a3      	strh	r3, [r4, #12]
 801b48e:	2300      	movs	r3, #0
 801b490:	6063      	str	r3, [r4, #4]
 801b492:	6923      	ldr	r3, [r4, #16]
 801b494:	6023      	str	r3, [r4, #0]
 801b496:	89a3      	ldrh	r3, [r4, #12]
 801b498:	f043 0308 	orr.w	r3, r3, #8
 801b49c:	81a3      	strh	r3, [r4, #12]
 801b49e:	6923      	ldr	r3, [r4, #16]
 801b4a0:	b94b      	cbnz	r3, 801b4b6 <__swsetup_r+0x9a>
 801b4a2:	89a3      	ldrh	r3, [r4, #12]
 801b4a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b4a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b4ac:	d003      	beq.n	801b4b6 <__swsetup_r+0x9a>
 801b4ae:	4621      	mov	r1, r4
 801b4b0:	4630      	mov	r0, r6
 801b4b2:	f001 fb57 	bl	801cb64 <__smakebuf_r>
 801b4b6:	89a0      	ldrh	r0, [r4, #12]
 801b4b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b4bc:	f010 0301 	ands.w	r3, r0, #1
 801b4c0:	d00a      	beq.n	801b4d8 <__swsetup_r+0xbc>
 801b4c2:	2300      	movs	r3, #0
 801b4c4:	60a3      	str	r3, [r4, #8]
 801b4c6:	6963      	ldr	r3, [r4, #20]
 801b4c8:	425b      	negs	r3, r3
 801b4ca:	61a3      	str	r3, [r4, #24]
 801b4cc:	6923      	ldr	r3, [r4, #16]
 801b4ce:	b943      	cbnz	r3, 801b4e2 <__swsetup_r+0xc6>
 801b4d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b4d4:	d1ba      	bne.n	801b44c <__swsetup_r+0x30>
 801b4d6:	bd70      	pop	{r4, r5, r6, pc}
 801b4d8:	0781      	lsls	r1, r0, #30
 801b4da:	bf58      	it	pl
 801b4dc:	6963      	ldrpl	r3, [r4, #20]
 801b4de:	60a3      	str	r3, [r4, #8]
 801b4e0:	e7f4      	b.n	801b4cc <__swsetup_r+0xb0>
 801b4e2:	2000      	movs	r0, #0
 801b4e4:	e7f7      	b.n	801b4d6 <__swsetup_r+0xba>
 801b4e6:	bf00      	nop
 801b4e8:	20000080 	.word	0x20000080
 801b4ec:	0801e8bc 	.word	0x0801e8bc
 801b4f0:	0801e8dc 	.word	0x0801e8dc
 801b4f4:	0801e89c 	.word	0x0801e89c

0801b4f8 <__assert_func>:
 801b4f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b4fa:	4614      	mov	r4, r2
 801b4fc:	461a      	mov	r2, r3
 801b4fe:	4b09      	ldr	r3, [pc, #36]	; (801b524 <__assert_func+0x2c>)
 801b500:	681b      	ldr	r3, [r3, #0]
 801b502:	4605      	mov	r5, r0
 801b504:	68d8      	ldr	r0, [r3, #12]
 801b506:	b14c      	cbz	r4, 801b51c <__assert_func+0x24>
 801b508:	4b07      	ldr	r3, [pc, #28]	; (801b528 <__assert_func+0x30>)
 801b50a:	9100      	str	r1, [sp, #0]
 801b50c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b510:	4906      	ldr	r1, [pc, #24]	; (801b52c <__assert_func+0x34>)
 801b512:	462b      	mov	r3, r5
 801b514:	f000 ff68 	bl	801c3e8 <fiprintf>
 801b518:	f002 fb4f 	bl	801dbba <abort>
 801b51c:	4b04      	ldr	r3, [pc, #16]	; (801b530 <__assert_func+0x38>)
 801b51e:	461c      	mov	r4, r3
 801b520:	e7f3      	b.n	801b50a <__assert_func+0x12>
 801b522:	bf00      	nop
 801b524:	20000080 	.word	0x20000080
 801b528:	0801ea00 	.word	0x0801ea00
 801b52c:	0801ea0d 	.word	0x0801ea0d
 801b530:	0801ea3b 	.word	0x0801ea3b

0801b534 <_close_r>:
 801b534:	b538      	push	{r3, r4, r5, lr}
 801b536:	4d06      	ldr	r5, [pc, #24]	; (801b550 <_close_r+0x1c>)
 801b538:	2300      	movs	r3, #0
 801b53a:	4604      	mov	r4, r0
 801b53c:	4608      	mov	r0, r1
 801b53e:	602b      	str	r3, [r5, #0]
 801b540:	f7e8 fc13 	bl	8003d6a <_close>
 801b544:	1c43      	adds	r3, r0, #1
 801b546:	d102      	bne.n	801b54e <_close_r+0x1a>
 801b548:	682b      	ldr	r3, [r5, #0]
 801b54a:	b103      	cbz	r3, 801b54e <_close_r+0x1a>
 801b54c:	6023      	str	r3, [r4, #0]
 801b54e:	bd38      	pop	{r3, r4, r5, pc}
 801b550:	2000a068 	.word	0x2000a068

0801b554 <quorem>:
 801b554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b558:	6903      	ldr	r3, [r0, #16]
 801b55a:	690c      	ldr	r4, [r1, #16]
 801b55c:	42a3      	cmp	r3, r4
 801b55e:	4607      	mov	r7, r0
 801b560:	f2c0 8081 	blt.w	801b666 <quorem+0x112>
 801b564:	3c01      	subs	r4, #1
 801b566:	f101 0814 	add.w	r8, r1, #20
 801b56a:	f100 0514 	add.w	r5, r0, #20
 801b56e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b572:	9301      	str	r3, [sp, #4]
 801b574:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b578:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b57c:	3301      	adds	r3, #1
 801b57e:	429a      	cmp	r2, r3
 801b580:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b584:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b588:	fbb2 f6f3 	udiv	r6, r2, r3
 801b58c:	d331      	bcc.n	801b5f2 <quorem+0x9e>
 801b58e:	f04f 0e00 	mov.w	lr, #0
 801b592:	4640      	mov	r0, r8
 801b594:	46ac      	mov	ip, r5
 801b596:	46f2      	mov	sl, lr
 801b598:	f850 2b04 	ldr.w	r2, [r0], #4
 801b59c:	b293      	uxth	r3, r2
 801b59e:	fb06 e303 	mla	r3, r6, r3, lr
 801b5a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b5a6:	b29b      	uxth	r3, r3
 801b5a8:	ebaa 0303 	sub.w	r3, sl, r3
 801b5ac:	f8dc a000 	ldr.w	sl, [ip]
 801b5b0:	0c12      	lsrs	r2, r2, #16
 801b5b2:	fa13 f38a 	uxtah	r3, r3, sl
 801b5b6:	fb06 e202 	mla	r2, r6, r2, lr
 801b5ba:	9300      	str	r3, [sp, #0]
 801b5bc:	9b00      	ldr	r3, [sp, #0]
 801b5be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b5c2:	b292      	uxth	r2, r2
 801b5c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b5c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b5cc:	f8bd 3000 	ldrh.w	r3, [sp]
 801b5d0:	4581      	cmp	r9, r0
 801b5d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b5d6:	f84c 3b04 	str.w	r3, [ip], #4
 801b5da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b5de:	d2db      	bcs.n	801b598 <quorem+0x44>
 801b5e0:	f855 300b 	ldr.w	r3, [r5, fp]
 801b5e4:	b92b      	cbnz	r3, 801b5f2 <quorem+0x9e>
 801b5e6:	9b01      	ldr	r3, [sp, #4]
 801b5e8:	3b04      	subs	r3, #4
 801b5ea:	429d      	cmp	r5, r3
 801b5ec:	461a      	mov	r2, r3
 801b5ee:	d32e      	bcc.n	801b64e <quorem+0xfa>
 801b5f0:	613c      	str	r4, [r7, #16]
 801b5f2:	4638      	mov	r0, r7
 801b5f4:	f001 fde0 	bl	801d1b8 <__mcmp>
 801b5f8:	2800      	cmp	r0, #0
 801b5fa:	db24      	blt.n	801b646 <quorem+0xf2>
 801b5fc:	3601      	adds	r6, #1
 801b5fe:	4628      	mov	r0, r5
 801b600:	f04f 0c00 	mov.w	ip, #0
 801b604:	f858 2b04 	ldr.w	r2, [r8], #4
 801b608:	f8d0 e000 	ldr.w	lr, [r0]
 801b60c:	b293      	uxth	r3, r2
 801b60e:	ebac 0303 	sub.w	r3, ip, r3
 801b612:	0c12      	lsrs	r2, r2, #16
 801b614:	fa13 f38e 	uxtah	r3, r3, lr
 801b618:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b61c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b620:	b29b      	uxth	r3, r3
 801b622:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b626:	45c1      	cmp	r9, r8
 801b628:	f840 3b04 	str.w	r3, [r0], #4
 801b62c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b630:	d2e8      	bcs.n	801b604 <quorem+0xb0>
 801b632:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b636:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b63a:	b922      	cbnz	r2, 801b646 <quorem+0xf2>
 801b63c:	3b04      	subs	r3, #4
 801b63e:	429d      	cmp	r5, r3
 801b640:	461a      	mov	r2, r3
 801b642:	d30a      	bcc.n	801b65a <quorem+0x106>
 801b644:	613c      	str	r4, [r7, #16]
 801b646:	4630      	mov	r0, r6
 801b648:	b003      	add	sp, #12
 801b64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b64e:	6812      	ldr	r2, [r2, #0]
 801b650:	3b04      	subs	r3, #4
 801b652:	2a00      	cmp	r2, #0
 801b654:	d1cc      	bne.n	801b5f0 <quorem+0x9c>
 801b656:	3c01      	subs	r4, #1
 801b658:	e7c7      	b.n	801b5ea <quorem+0x96>
 801b65a:	6812      	ldr	r2, [r2, #0]
 801b65c:	3b04      	subs	r3, #4
 801b65e:	2a00      	cmp	r2, #0
 801b660:	d1f0      	bne.n	801b644 <quorem+0xf0>
 801b662:	3c01      	subs	r4, #1
 801b664:	e7eb      	b.n	801b63e <quorem+0xea>
 801b666:	2000      	movs	r0, #0
 801b668:	e7ee      	b.n	801b648 <quorem+0xf4>
 801b66a:	0000      	movs	r0, r0
 801b66c:	0000      	movs	r0, r0
	...

0801b670 <_dtoa_r>:
 801b670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b674:	ed2d 8b04 	vpush	{d8-d9}
 801b678:	ec57 6b10 	vmov	r6, r7, d0
 801b67c:	b093      	sub	sp, #76	; 0x4c
 801b67e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b680:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b684:	9106      	str	r1, [sp, #24]
 801b686:	ee10 aa10 	vmov	sl, s0
 801b68a:	4604      	mov	r4, r0
 801b68c:	9209      	str	r2, [sp, #36]	; 0x24
 801b68e:	930c      	str	r3, [sp, #48]	; 0x30
 801b690:	46bb      	mov	fp, r7
 801b692:	b975      	cbnz	r5, 801b6b2 <_dtoa_r+0x42>
 801b694:	2010      	movs	r0, #16
 801b696:	f7fd fcf1 	bl	801907c <malloc>
 801b69a:	4602      	mov	r2, r0
 801b69c:	6260      	str	r0, [r4, #36]	; 0x24
 801b69e:	b920      	cbnz	r0, 801b6aa <_dtoa_r+0x3a>
 801b6a0:	4ba7      	ldr	r3, [pc, #668]	; (801b940 <_dtoa_r+0x2d0>)
 801b6a2:	21ea      	movs	r1, #234	; 0xea
 801b6a4:	48a7      	ldr	r0, [pc, #668]	; (801b944 <_dtoa_r+0x2d4>)
 801b6a6:	f7ff ff27 	bl	801b4f8 <__assert_func>
 801b6aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b6ae:	6005      	str	r5, [r0, #0]
 801b6b0:	60c5      	str	r5, [r0, #12]
 801b6b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b6b4:	6819      	ldr	r1, [r3, #0]
 801b6b6:	b151      	cbz	r1, 801b6ce <_dtoa_r+0x5e>
 801b6b8:	685a      	ldr	r2, [r3, #4]
 801b6ba:	604a      	str	r2, [r1, #4]
 801b6bc:	2301      	movs	r3, #1
 801b6be:	4093      	lsls	r3, r2
 801b6c0:	608b      	str	r3, [r1, #8]
 801b6c2:	4620      	mov	r0, r4
 801b6c4:	f001 faec 	bl	801cca0 <_Bfree>
 801b6c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b6ca:	2200      	movs	r2, #0
 801b6cc:	601a      	str	r2, [r3, #0]
 801b6ce:	1e3b      	subs	r3, r7, #0
 801b6d0:	bfaa      	itet	ge
 801b6d2:	2300      	movge	r3, #0
 801b6d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b6d8:	f8c8 3000 	strge.w	r3, [r8]
 801b6dc:	4b9a      	ldr	r3, [pc, #616]	; (801b948 <_dtoa_r+0x2d8>)
 801b6de:	bfbc      	itt	lt
 801b6e0:	2201      	movlt	r2, #1
 801b6e2:	f8c8 2000 	strlt.w	r2, [r8]
 801b6e6:	ea33 030b 	bics.w	r3, r3, fp
 801b6ea:	d11b      	bne.n	801b724 <_dtoa_r+0xb4>
 801b6ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b6ee:	f242 730f 	movw	r3, #9999	; 0x270f
 801b6f2:	6013      	str	r3, [r2, #0]
 801b6f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b6f8:	4333      	orrs	r3, r6
 801b6fa:	f000 8592 	beq.w	801c222 <_dtoa_r+0xbb2>
 801b6fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b700:	b963      	cbnz	r3, 801b71c <_dtoa_r+0xac>
 801b702:	4b92      	ldr	r3, [pc, #584]	; (801b94c <_dtoa_r+0x2dc>)
 801b704:	e022      	b.n	801b74c <_dtoa_r+0xdc>
 801b706:	4b92      	ldr	r3, [pc, #584]	; (801b950 <_dtoa_r+0x2e0>)
 801b708:	9301      	str	r3, [sp, #4]
 801b70a:	3308      	adds	r3, #8
 801b70c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b70e:	6013      	str	r3, [r2, #0]
 801b710:	9801      	ldr	r0, [sp, #4]
 801b712:	b013      	add	sp, #76	; 0x4c
 801b714:	ecbd 8b04 	vpop	{d8-d9}
 801b718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b71c:	4b8b      	ldr	r3, [pc, #556]	; (801b94c <_dtoa_r+0x2dc>)
 801b71e:	9301      	str	r3, [sp, #4]
 801b720:	3303      	adds	r3, #3
 801b722:	e7f3      	b.n	801b70c <_dtoa_r+0x9c>
 801b724:	2200      	movs	r2, #0
 801b726:	2300      	movs	r3, #0
 801b728:	4650      	mov	r0, sl
 801b72a:	4659      	mov	r1, fp
 801b72c:	f7e5 f9e4 	bl	8000af8 <__aeabi_dcmpeq>
 801b730:	ec4b ab19 	vmov	d9, sl, fp
 801b734:	4680      	mov	r8, r0
 801b736:	b158      	cbz	r0, 801b750 <_dtoa_r+0xe0>
 801b738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b73a:	2301      	movs	r3, #1
 801b73c:	6013      	str	r3, [r2, #0]
 801b73e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b740:	2b00      	cmp	r3, #0
 801b742:	f000 856b 	beq.w	801c21c <_dtoa_r+0xbac>
 801b746:	4883      	ldr	r0, [pc, #524]	; (801b954 <_dtoa_r+0x2e4>)
 801b748:	6018      	str	r0, [r3, #0]
 801b74a:	1e43      	subs	r3, r0, #1
 801b74c:	9301      	str	r3, [sp, #4]
 801b74e:	e7df      	b.n	801b710 <_dtoa_r+0xa0>
 801b750:	ec4b ab10 	vmov	d0, sl, fp
 801b754:	aa10      	add	r2, sp, #64	; 0x40
 801b756:	a911      	add	r1, sp, #68	; 0x44
 801b758:	4620      	mov	r0, r4
 801b75a:	f001 fe4f 	bl	801d3fc <__d2b>
 801b75e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801b762:	ee08 0a10 	vmov	s16, r0
 801b766:	2d00      	cmp	r5, #0
 801b768:	f000 8084 	beq.w	801b874 <_dtoa_r+0x204>
 801b76c:	ee19 3a90 	vmov	r3, s19
 801b770:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b774:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b778:	4656      	mov	r6, sl
 801b77a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b77e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b782:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b786:	4b74      	ldr	r3, [pc, #464]	; (801b958 <_dtoa_r+0x2e8>)
 801b788:	2200      	movs	r2, #0
 801b78a:	4630      	mov	r0, r6
 801b78c:	4639      	mov	r1, r7
 801b78e:	f7e4 fd93 	bl	80002b8 <__aeabi_dsub>
 801b792:	a365      	add	r3, pc, #404	; (adr r3, 801b928 <_dtoa_r+0x2b8>)
 801b794:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b798:	f7e4 ff46 	bl	8000628 <__aeabi_dmul>
 801b79c:	a364      	add	r3, pc, #400	; (adr r3, 801b930 <_dtoa_r+0x2c0>)
 801b79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7a2:	f7e4 fd8b 	bl	80002bc <__adddf3>
 801b7a6:	4606      	mov	r6, r0
 801b7a8:	4628      	mov	r0, r5
 801b7aa:	460f      	mov	r7, r1
 801b7ac:	f7e4 fed2 	bl	8000554 <__aeabi_i2d>
 801b7b0:	a361      	add	r3, pc, #388	; (adr r3, 801b938 <_dtoa_r+0x2c8>)
 801b7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7b6:	f7e4 ff37 	bl	8000628 <__aeabi_dmul>
 801b7ba:	4602      	mov	r2, r0
 801b7bc:	460b      	mov	r3, r1
 801b7be:	4630      	mov	r0, r6
 801b7c0:	4639      	mov	r1, r7
 801b7c2:	f7e4 fd7b 	bl	80002bc <__adddf3>
 801b7c6:	4606      	mov	r6, r0
 801b7c8:	460f      	mov	r7, r1
 801b7ca:	f7e5 f9dd 	bl	8000b88 <__aeabi_d2iz>
 801b7ce:	2200      	movs	r2, #0
 801b7d0:	9000      	str	r0, [sp, #0]
 801b7d2:	2300      	movs	r3, #0
 801b7d4:	4630      	mov	r0, r6
 801b7d6:	4639      	mov	r1, r7
 801b7d8:	f7e5 f998 	bl	8000b0c <__aeabi_dcmplt>
 801b7dc:	b150      	cbz	r0, 801b7f4 <_dtoa_r+0x184>
 801b7de:	9800      	ldr	r0, [sp, #0]
 801b7e0:	f7e4 feb8 	bl	8000554 <__aeabi_i2d>
 801b7e4:	4632      	mov	r2, r6
 801b7e6:	463b      	mov	r3, r7
 801b7e8:	f7e5 f986 	bl	8000af8 <__aeabi_dcmpeq>
 801b7ec:	b910      	cbnz	r0, 801b7f4 <_dtoa_r+0x184>
 801b7ee:	9b00      	ldr	r3, [sp, #0]
 801b7f0:	3b01      	subs	r3, #1
 801b7f2:	9300      	str	r3, [sp, #0]
 801b7f4:	9b00      	ldr	r3, [sp, #0]
 801b7f6:	2b16      	cmp	r3, #22
 801b7f8:	d85a      	bhi.n	801b8b0 <_dtoa_r+0x240>
 801b7fa:	9a00      	ldr	r2, [sp, #0]
 801b7fc:	4b57      	ldr	r3, [pc, #348]	; (801b95c <_dtoa_r+0x2ec>)
 801b7fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b802:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b806:	ec51 0b19 	vmov	r0, r1, d9
 801b80a:	f7e5 f97f 	bl	8000b0c <__aeabi_dcmplt>
 801b80e:	2800      	cmp	r0, #0
 801b810:	d050      	beq.n	801b8b4 <_dtoa_r+0x244>
 801b812:	9b00      	ldr	r3, [sp, #0]
 801b814:	3b01      	subs	r3, #1
 801b816:	9300      	str	r3, [sp, #0]
 801b818:	2300      	movs	r3, #0
 801b81a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b81c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b81e:	1b5d      	subs	r5, r3, r5
 801b820:	1e6b      	subs	r3, r5, #1
 801b822:	9305      	str	r3, [sp, #20]
 801b824:	bf45      	ittet	mi
 801b826:	f1c5 0301 	rsbmi	r3, r5, #1
 801b82a:	9304      	strmi	r3, [sp, #16]
 801b82c:	2300      	movpl	r3, #0
 801b82e:	2300      	movmi	r3, #0
 801b830:	bf4c      	ite	mi
 801b832:	9305      	strmi	r3, [sp, #20]
 801b834:	9304      	strpl	r3, [sp, #16]
 801b836:	9b00      	ldr	r3, [sp, #0]
 801b838:	2b00      	cmp	r3, #0
 801b83a:	db3d      	blt.n	801b8b8 <_dtoa_r+0x248>
 801b83c:	9b05      	ldr	r3, [sp, #20]
 801b83e:	9a00      	ldr	r2, [sp, #0]
 801b840:	920a      	str	r2, [sp, #40]	; 0x28
 801b842:	4413      	add	r3, r2
 801b844:	9305      	str	r3, [sp, #20]
 801b846:	2300      	movs	r3, #0
 801b848:	9307      	str	r3, [sp, #28]
 801b84a:	9b06      	ldr	r3, [sp, #24]
 801b84c:	2b09      	cmp	r3, #9
 801b84e:	f200 8089 	bhi.w	801b964 <_dtoa_r+0x2f4>
 801b852:	2b05      	cmp	r3, #5
 801b854:	bfc4      	itt	gt
 801b856:	3b04      	subgt	r3, #4
 801b858:	9306      	strgt	r3, [sp, #24]
 801b85a:	9b06      	ldr	r3, [sp, #24]
 801b85c:	f1a3 0302 	sub.w	r3, r3, #2
 801b860:	bfcc      	ite	gt
 801b862:	2500      	movgt	r5, #0
 801b864:	2501      	movle	r5, #1
 801b866:	2b03      	cmp	r3, #3
 801b868:	f200 8087 	bhi.w	801b97a <_dtoa_r+0x30a>
 801b86c:	e8df f003 	tbb	[pc, r3]
 801b870:	59383a2d 	.word	0x59383a2d
 801b874:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b878:	441d      	add	r5, r3
 801b87a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b87e:	2b20      	cmp	r3, #32
 801b880:	bfc1      	itttt	gt
 801b882:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b886:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b88a:	fa0b f303 	lslgt.w	r3, fp, r3
 801b88e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b892:	bfda      	itte	le
 801b894:	f1c3 0320 	rsble	r3, r3, #32
 801b898:	fa06 f003 	lslle.w	r0, r6, r3
 801b89c:	4318      	orrgt	r0, r3
 801b89e:	f7e4 fe49 	bl	8000534 <__aeabi_ui2d>
 801b8a2:	2301      	movs	r3, #1
 801b8a4:	4606      	mov	r6, r0
 801b8a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b8aa:	3d01      	subs	r5, #1
 801b8ac:	930e      	str	r3, [sp, #56]	; 0x38
 801b8ae:	e76a      	b.n	801b786 <_dtoa_r+0x116>
 801b8b0:	2301      	movs	r3, #1
 801b8b2:	e7b2      	b.n	801b81a <_dtoa_r+0x1aa>
 801b8b4:	900b      	str	r0, [sp, #44]	; 0x2c
 801b8b6:	e7b1      	b.n	801b81c <_dtoa_r+0x1ac>
 801b8b8:	9b04      	ldr	r3, [sp, #16]
 801b8ba:	9a00      	ldr	r2, [sp, #0]
 801b8bc:	1a9b      	subs	r3, r3, r2
 801b8be:	9304      	str	r3, [sp, #16]
 801b8c0:	4253      	negs	r3, r2
 801b8c2:	9307      	str	r3, [sp, #28]
 801b8c4:	2300      	movs	r3, #0
 801b8c6:	930a      	str	r3, [sp, #40]	; 0x28
 801b8c8:	e7bf      	b.n	801b84a <_dtoa_r+0x1da>
 801b8ca:	2300      	movs	r3, #0
 801b8cc:	9308      	str	r3, [sp, #32]
 801b8ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	dc55      	bgt.n	801b980 <_dtoa_r+0x310>
 801b8d4:	2301      	movs	r3, #1
 801b8d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b8da:	461a      	mov	r2, r3
 801b8dc:	9209      	str	r2, [sp, #36]	; 0x24
 801b8de:	e00c      	b.n	801b8fa <_dtoa_r+0x28a>
 801b8e0:	2301      	movs	r3, #1
 801b8e2:	e7f3      	b.n	801b8cc <_dtoa_r+0x25c>
 801b8e4:	2300      	movs	r3, #0
 801b8e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b8e8:	9308      	str	r3, [sp, #32]
 801b8ea:	9b00      	ldr	r3, [sp, #0]
 801b8ec:	4413      	add	r3, r2
 801b8ee:	9302      	str	r3, [sp, #8]
 801b8f0:	3301      	adds	r3, #1
 801b8f2:	2b01      	cmp	r3, #1
 801b8f4:	9303      	str	r3, [sp, #12]
 801b8f6:	bfb8      	it	lt
 801b8f8:	2301      	movlt	r3, #1
 801b8fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b8fc:	2200      	movs	r2, #0
 801b8fe:	6042      	str	r2, [r0, #4]
 801b900:	2204      	movs	r2, #4
 801b902:	f102 0614 	add.w	r6, r2, #20
 801b906:	429e      	cmp	r6, r3
 801b908:	6841      	ldr	r1, [r0, #4]
 801b90a:	d93d      	bls.n	801b988 <_dtoa_r+0x318>
 801b90c:	4620      	mov	r0, r4
 801b90e:	f001 f987 	bl	801cc20 <_Balloc>
 801b912:	9001      	str	r0, [sp, #4]
 801b914:	2800      	cmp	r0, #0
 801b916:	d13b      	bne.n	801b990 <_dtoa_r+0x320>
 801b918:	4b11      	ldr	r3, [pc, #68]	; (801b960 <_dtoa_r+0x2f0>)
 801b91a:	4602      	mov	r2, r0
 801b91c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b920:	e6c0      	b.n	801b6a4 <_dtoa_r+0x34>
 801b922:	2301      	movs	r3, #1
 801b924:	e7df      	b.n	801b8e6 <_dtoa_r+0x276>
 801b926:	bf00      	nop
 801b928:	636f4361 	.word	0x636f4361
 801b92c:	3fd287a7 	.word	0x3fd287a7
 801b930:	8b60c8b3 	.word	0x8b60c8b3
 801b934:	3fc68a28 	.word	0x3fc68a28
 801b938:	509f79fb 	.word	0x509f79fb
 801b93c:	3fd34413 	.word	0x3fd34413
 801b940:	0801e939 	.word	0x0801e939
 801b944:	0801ea49 	.word	0x0801ea49
 801b948:	7ff00000 	.word	0x7ff00000
 801b94c:	0801ea45 	.word	0x0801ea45
 801b950:	0801ea3c 	.word	0x0801ea3c
 801b954:	0801e911 	.word	0x0801e911
 801b958:	3ff80000 	.word	0x3ff80000
 801b95c:	0801ebb8 	.word	0x0801ebb8
 801b960:	0801eaa4 	.word	0x0801eaa4
 801b964:	2501      	movs	r5, #1
 801b966:	2300      	movs	r3, #0
 801b968:	9306      	str	r3, [sp, #24]
 801b96a:	9508      	str	r5, [sp, #32]
 801b96c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b970:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b974:	2200      	movs	r2, #0
 801b976:	2312      	movs	r3, #18
 801b978:	e7b0      	b.n	801b8dc <_dtoa_r+0x26c>
 801b97a:	2301      	movs	r3, #1
 801b97c:	9308      	str	r3, [sp, #32]
 801b97e:	e7f5      	b.n	801b96c <_dtoa_r+0x2fc>
 801b980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b982:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b986:	e7b8      	b.n	801b8fa <_dtoa_r+0x28a>
 801b988:	3101      	adds	r1, #1
 801b98a:	6041      	str	r1, [r0, #4]
 801b98c:	0052      	lsls	r2, r2, #1
 801b98e:	e7b8      	b.n	801b902 <_dtoa_r+0x292>
 801b990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b992:	9a01      	ldr	r2, [sp, #4]
 801b994:	601a      	str	r2, [r3, #0]
 801b996:	9b03      	ldr	r3, [sp, #12]
 801b998:	2b0e      	cmp	r3, #14
 801b99a:	f200 809d 	bhi.w	801bad8 <_dtoa_r+0x468>
 801b99e:	2d00      	cmp	r5, #0
 801b9a0:	f000 809a 	beq.w	801bad8 <_dtoa_r+0x468>
 801b9a4:	9b00      	ldr	r3, [sp, #0]
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	dd32      	ble.n	801ba10 <_dtoa_r+0x3a0>
 801b9aa:	4ab7      	ldr	r2, [pc, #732]	; (801bc88 <_dtoa_r+0x618>)
 801b9ac:	f003 030f 	and.w	r3, r3, #15
 801b9b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b9b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b9b8:	9b00      	ldr	r3, [sp, #0]
 801b9ba:	05d8      	lsls	r0, r3, #23
 801b9bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 801b9c0:	d516      	bpl.n	801b9f0 <_dtoa_r+0x380>
 801b9c2:	4bb2      	ldr	r3, [pc, #712]	; (801bc8c <_dtoa_r+0x61c>)
 801b9c4:	ec51 0b19 	vmov	r0, r1, d9
 801b9c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b9cc:	f7e4 ff56 	bl	800087c <__aeabi_ddiv>
 801b9d0:	f007 070f 	and.w	r7, r7, #15
 801b9d4:	4682      	mov	sl, r0
 801b9d6:	468b      	mov	fp, r1
 801b9d8:	2503      	movs	r5, #3
 801b9da:	4eac      	ldr	r6, [pc, #688]	; (801bc8c <_dtoa_r+0x61c>)
 801b9dc:	b957      	cbnz	r7, 801b9f4 <_dtoa_r+0x384>
 801b9de:	4642      	mov	r2, r8
 801b9e0:	464b      	mov	r3, r9
 801b9e2:	4650      	mov	r0, sl
 801b9e4:	4659      	mov	r1, fp
 801b9e6:	f7e4 ff49 	bl	800087c <__aeabi_ddiv>
 801b9ea:	4682      	mov	sl, r0
 801b9ec:	468b      	mov	fp, r1
 801b9ee:	e028      	b.n	801ba42 <_dtoa_r+0x3d2>
 801b9f0:	2502      	movs	r5, #2
 801b9f2:	e7f2      	b.n	801b9da <_dtoa_r+0x36a>
 801b9f4:	07f9      	lsls	r1, r7, #31
 801b9f6:	d508      	bpl.n	801ba0a <_dtoa_r+0x39a>
 801b9f8:	4640      	mov	r0, r8
 801b9fa:	4649      	mov	r1, r9
 801b9fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ba00:	f7e4 fe12 	bl	8000628 <__aeabi_dmul>
 801ba04:	3501      	adds	r5, #1
 801ba06:	4680      	mov	r8, r0
 801ba08:	4689      	mov	r9, r1
 801ba0a:	107f      	asrs	r7, r7, #1
 801ba0c:	3608      	adds	r6, #8
 801ba0e:	e7e5      	b.n	801b9dc <_dtoa_r+0x36c>
 801ba10:	f000 809b 	beq.w	801bb4a <_dtoa_r+0x4da>
 801ba14:	9b00      	ldr	r3, [sp, #0]
 801ba16:	4f9d      	ldr	r7, [pc, #628]	; (801bc8c <_dtoa_r+0x61c>)
 801ba18:	425e      	negs	r6, r3
 801ba1a:	4b9b      	ldr	r3, [pc, #620]	; (801bc88 <_dtoa_r+0x618>)
 801ba1c:	f006 020f 	and.w	r2, r6, #15
 801ba20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ba24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba28:	ec51 0b19 	vmov	r0, r1, d9
 801ba2c:	f7e4 fdfc 	bl	8000628 <__aeabi_dmul>
 801ba30:	1136      	asrs	r6, r6, #4
 801ba32:	4682      	mov	sl, r0
 801ba34:	468b      	mov	fp, r1
 801ba36:	2300      	movs	r3, #0
 801ba38:	2502      	movs	r5, #2
 801ba3a:	2e00      	cmp	r6, #0
 801ba3c:	d17a      	bne.n	801bb34 <_dtoa_r+0x4c4>
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d1d3      	bne.n	801b9ea <_dtoa_r+0x37a>
 801ba42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	f000 8082 	beq.w	801bb4e <_dtoa_r+0x4de>
 801ba4a:	4b91      	ldr	r3, [pc, #580]	; (801bc90 <_dtoa_r+0x620>)
 801ba4c:	2200      	movs	r2, #0
 801ba4e:	4650      	mov	r0, sl
 801ba50:	4659      	mov	r1, fp
 801ba52:	f7e5 f85b 	bl	8000b0c <__aeabi_dcmplt>
 801ba56:	2800      	cmp	r0, #0
 801ba58:	d079      	beq.n	801bb4e <_dtoa_r+0x4de>
 801ba5a:	9b03      	ldr	r3, [sp, #12]
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d076      	beq.n	801bb4e <_dtoa_r+0x4de>
 801ba60:	9b02      	ldr	r3, [sp, #8]
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	dd36      	ble.n	801bad4 <_dtoa_r+0x464>
 801ba66:	9b00      	ldr	r3, [sp, #0]
 801ba68:	4650      	mov	r0, sl
 801ba6a:	4659      	mov	r1, fp
 801ba6c:	1e5f      	subs	r7, r3, #1
 801ba6e:	2200      	movs	r2, #0
 801ba70:	4b88      	ldr	r3, [pc, #544]	; (801bc94 <_dtoa_r+0x624>)
 801ba72:	f7e4 fdd9 	bl	8000628 <__aeabi_dmul>
 801ba76:	9e02      	ldr	r6, [sp, #8]
 801ba78:	4682      	mov	sl, r0
 801ba7a:	468b      	mov	fp, r1
 801ba7c:	3501      	adds	r5, #1
 801ba7e:	4628      	mov	r0, r5
 801ba80:	f7e4 fd68 	bl	8000554 <__aeabi_i2d>
 801ba84:	4652      	mov	r2, sl
 801ba86:	465b      	mov	r3, fp
 801ba88:	f7e4 fdce 	bl	8000628 <__aeabi_dmul>
 801ba8c:	4b82      	ldr	r3, [pc, #520]	; (801bc98 <_dtoa_r+0x628>)
 801ba8e:	2200      	movs	r2, #0
 801ba90:	f7e4 fc14 	bl	80002bc <__adddf3>
 801ba94:	46d0      	mov	r8, sl
 801ba96:	46d9      	mov	r9, fp
 801ba98:	4682      	mov	sl, r0
 801ba9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801ba9e:	2e00      	cmp	r6, #0
 801baa0:	d158      	bne.n	801bb54 <_dtoa_r+0x4e4>
 801baa2:	4b7e      	ldr	r3, [pc, #504]	; (801bc9c <_dtoa_r+0x62c>)
 801baa4:	2200      	movs	r2, #0
 801baa6:	4640      	mov	r0, r8
 801baa8:	4649      	mov	r1, r9
 801baaa:	f7e4 fc05 	bl	80002b8 <__aeabi_dsub>
 801baae:	4652      	mov	r2, sl
 801bab0:	465b      	mov	r3, fp
 801bab2:	4680      	mov	r8, r0
 801bab4:	4689      	mov	r9, r1
 801bab6:	f7e5 f847 	bl	8000b48 <__aeabi_dcmpgt>
 801baba:	2800      	cmp	r0, #0
 801babc:	f040 8295 	bne.w	801bfea <_dtoa_r+0x97a>
 801bac0:	4652      	mov	r2, sl
 801bac2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801bac6:	4640      	mov	r0, r8
 801bac8:	4649      	mov	r1, r9
 801baca:	f7e5 f81f 	bl	8000b0c <__aeabi_dcmplt>
 801bace:	2800      	cmp	r0, #0
 801bad0:	f040 8289 	bne.w	801bfe6 <_dtoa_r+0x976>
 801bad4:	ec5b ab19 	vmov	sl, fp, d9
 801bad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bada:	2b00      	cmp	r3, #0
 801badc:	f2c0 8148 	blt.w	801bd70 <_dtoa_r+0x700>
 801bae0:	9a00      	ldr	r2, [sp, #0]
 801bae2:	2a0e      	cmp	r2, #14
 801bae4:	f300 8144 	bgt.w	801bd70 <_dtoa_r+0x700>
 801bae8:	4b67      	ldr	r3, [pc, #412]	; (801bc88 <_dtoa_r+0x618>)
 801baea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801baee:	e9d3 8900 	ldrd	r8, r9, [r3]
 801baf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	f280 80d5 	bge.w	801bca4 <_dtoa_r+0x634>
 801bafa:	9b03      	ldr	r3, [sp, #12]
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	f300 80d1 	bgt.w	801bca4 <_dtoa_r+0x634>
 801bb02:	f040 826f 	bne.w	801bfe4 <_dtoa_r+0x974>
 801bb06:	4b65      	ldr	r3, [pc, #404]	; (801bc9c <_dtoa_r+0x62c>)
 801bb08:	2200      	movs	r2, #0
 801bb0a:	4640      	mov	r0, r8
 801bb0c:	4649      	mov	r1, r9
 801bb0e:	f7e4 fd8b 	bl	8000628 <__aeabi_dmul>
 801bb12:	4652      	mov	r2, sl
 801bb14:	465b      	mov	r3, fp
 801bb16:	f7e5 f80d 	bl	8000b34 <__aeabi_dcmpge>
 801bb1a:	9e03      	ldr	r6, [sp, #12]
 801bb1c:	4637      	mov	r7, r6
 801bb1e:	2800      	cmp	r0, #0
 801bb20:	f040 8245 	bne.w	801bfae <_dtoa_r+0x93e>
 801bb24:	9d01      	ldr	r5, [sp, #4]
 801bb26:	2331      	movs	r3, #49	; 0x31
 801bb28:	f805 3b01 	strb.w	r3, [r5], #1
 801bb2c:	9b00      	ldr	r3, [sp, #0]
 801bb2e:	3301      	adds	r3, #1
 801bb30:	9300      	str	r3, [sp, #0]
 801bb32:	e240      	b.n	801bfb6 <_dtoa_r+0x946>
 801bb34:	07f2      	lsls	r2, r6, #31
 801bb36:	d505      	bpl.n	801bb44 <_dtoa_r+0x4d4>
 801bb38:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bb3c:	f7e4 fd74 	bl	8000628 <__aeabi_dmul>
 801bb40:	3501      	adds	r5, #1
 801bb42:	2301      	movs	r3, #1
 801bb44:	1076      	asrs	r6, r6, #1
 801bb46:	3708      	adds	r7, #8
 801bb48:	e777      	b.n	801ba3a <_dtoa_r+0x3ca>
 801bb4a:	2502      	movs	r5, #2
 801bb4c:	e779      	b.n	801ba42 <_dtoa_r+0x3d2>
 801bb4e:	9f00      	ldr	r7, [sp, #0]
 801bb50:	9e03      	ldr	r6, [sp, #12]
 801bb52:	e794      	b.n	801ba7e <_dtoa_r+0x40e>
 801bb54:	9901      	ldr	r1, [sp, #4]
 801bb56:	4b4c      	ldr	r3, [pc, #304]	; (801bc88 <_dtoa_r+0x618>)
 801bb58:	4431      	add	r1, r6
 801bb5a:	910d      	str	r1, [sp, #52]	; 0x34
 801bb5c:	9908      	ldr	r1, [sp, #32]
 801bb5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801bb62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bb66:	2900      	cmp	r1, #0
 801bb68:	d043      	beq.n	801bbf2 <_dtoa_r+0x582>
 801bb6a:	494d      	ldr	r1, [pc, #308]	; (801bca0 <_dtoa_r+0x630>)
 801bb6c:	2000      	movs	r0, #0
 801bb6e:	f7e4 fe85 	bl	800087c <__aeabi_ddiv>
 801bb72:	4652      	mov	r2, sl
 801bb74:	465b      	mov	r3, fp
 801bb76:	f7e4 fb9f 	bl	80002b8 <__aeabi_dsub>
 801bb7a:	9d01      	ldr	r5, [sp, #4]
 801bb7c:	4682      	mov	sl, r0
 801bb7e:	468b      	mov	fp, r1
 801bb80:	4649      	mov	r1, r9
 801bb82:	4640      	mov	r0, r8
 801bb84:	f7e5 f800 	bl	8000b88 <__aeabi_d2iz>
 801bb88:	4606      	mov	r6, r0
 801bb8a:	f7e4 fce3 	bl	8000554 <__aeabi_i2d>
 801bb8e:	4602      	mov	r2, r0
 801bb90:	460b      	mov	r3, r1
 801bb92:	4640      	mov	r0, r8
 801bb94:	4649      	mov	r1, r9
 801bb96:	f7e4 fb8f 	bl	80002b8 <__aeabi_dsub>
 801bb9a:	3630      	adds	r6, #48	; 0x30
 801bb9c:	f805 6b01 	strb.w	r6, [r5], #1
 801bba0:	4652      	mov	r2, sl
 801bba2:	465b      	mov	r3, fp
 801bba4:	4680      	mov	r8, r0
 801bba6:	4689      	mov	r9, r1
 801bba8:	f7e4 ffb0 	bl	8000b0c <__aeabi_dcmplt>
 801bbac:	2800      	cmp	r0, #0
 801bbae:	d163      	bne.n	801bc78 <_dtoa_r+0x608>
 801bbb0:	4642      	mov	r2, r8
 801bbb2:	464b      	mov	r3, r9
 801bbb4:	4936      	ldr	r1, [pc, #216]	; (801bc90 <_dtoa_r+0x620>)
 801bbb6:	2000      	movs	r0, #0
 801bbb8:	f7e4 fb7e 	bl	80002b8 <__aeabi_dsub>
 801bbbc:	4652      	mov	r2, sl
 801bbbe:	465b      	mov	r3, fp
 801bbc0:	f7e4 ffa4 	bl	8000b0c <__aeabi_dcmplt>
 801bbc4:	2800      	cmp	r0, #0
 801bbc6:	f040 80b5 	bne.w	801bd34 <_dtoa_r+0x6c4>
 801bbca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bbcc:	429d      	cmp	r5, r3
 801bbce:	d081      	beq.n	801bad4 <_dtoa_r+0x464>
 801bbd0:	4b30      	ldr	r3, [pc, #192]	; (801bc94 <_dtoa_r+0x624>)
 801bbd2:	2200      	movs	r2, #0
 801bbd4:	4650      	mov	r0, sl
 801bbd6:	4659      	mov	r1, fp
 801bbd8:	f7e4 fd26 	bl	8000628 <__aeabi_dmul>
 801bbdc:	4b2d      	ldr	r3, [pc, #180]	; (801bc94 <_dtoa_r+0x624>)
 801bbde:	4682      	mov	sl, r0
 801bbe0:	468b      	mov	fp, r1
 801bbe2:	4640      	mov	r0, r8
 801bbe4:	4649      	mov	r1, r9
 801bbe6:	2200      	movs	r2, #0
 801bbe8:	f7e4 fd1e 	bl	8000628 <__aeabi_dmul>
 801bbec:	4680      	mov	r8, r0
 801bbee:	4689      	mov	r9, r1
 801bbf0:	e7c6      	b.n	801bb80 <_dtoa_r+0x510>
 801bbf2:	4650      	mov	r0, sl
 801bbf4:	4659      	mov	r1, fp
 801bbf6:	f7e4 fd17 	bl	8000628 <__aeabi_dmul>
 801bbfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bbfc:	9d01      	ldr	r5, [sp, #4]
 801bbfe:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc00:	4682      	mov	sl, r0
 801bc02:	468b      	mov	fp, r1
 801bc04:	4649      	mov	r1, r9
 801bc06:	4640      	mov	r0, r8
 801bc08:	f7e4 ffbe 	bl	8000b88 <__aeabi_d2iz>
 801bc0c:	4606      	mov	r6, r0
 801bc0e:	f7e4 fca1 	bl	8000554 <__aeabi_i2d>
 801bc12:	3630      	adds	r6, #48	; 0x30
 801bc14:	4602      	mov	r2, r0
 801bc16:	460b      	mov	r3, r1
 801bc18:	4640      	mov	r0, r8
 801bc1a:	4649      	mov	r1, r9
 801bc1c:	f7e4 fb4c 	bl	80002b8 <__aeabi_dsub>
 801bc20:	f805 6b01 	strb.w	r6, [r5], #1
 801bc24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc26:	429d      	cmp	r5, r3
 801bc28:	4680      	mov	r8, r0
 801bc2a:	4689      	mov	r9, r1
 801bc2c:	f04f 0200 	mov.w	r2, #0
 801bc30:	d124      	bne.n	801bc7c <_dtoa_r+0x60c>
 801bc32:	4b1b      	ldr	r3, [pc, #108]	; (801bca0 <_dtoa_r+0x630>)
 801bc34:	4650      	mov	r0, sl
 801bc36:	4659      	mov	r1, fp
 801bc38:	f7e4 fb40 	bl	80002bc <__adddf3>
 801bc3c:	4602      	mov	r2, r0
 801bc3e:	460b      	mov	r3, r1
 801bc40:	4640      	mov	r0, r8
 801bc42:	4649      	mov	r1, r9
 801bc44:	f7e4 ff80 	bl	8000b48 <__aeabi_dcmpgt>
 801bc48:	2800      	cmp	r0, #0
 801bc4a:	d173      	bne.n	801bd34 <_dtoa_r+0x6c4>
 801bc4c:	4652      	mov	r2, sl
 801bc4e:	465b      	mov	r3, fp
 801bc50:	4913      	ldr	r1, [pc, #76]	; (801bca0 <_dtoa_r+0x630>)
 801bc52:	2000      	movs	r0, #0
 801bc54:	f7e4 fb30 	bl	80002b8 <__aeabi_dsub>
 801bc58:	4602      	mov	r2, r0
 801bc5a:	460b      	mov	r3, r1
 801bc5c:	4640      	mov	r0, r8
 801bc5e:	4649      	mov	r1, r9
 801bc60:	f7e4 ff54 	bl	8000b0c <__aeabi_dcmplt>
 801bc64:	2800      	cmp	r0, #0
 801bc66:	f43f af35 	beq.w	801bad4 <_dtoa_r+0x464>
 801bc6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801bc6c:	1e6b      	subs	r3, r5, #1
 801bc6e:	930f      	str	r3, [sp, #60]	; 0x3c
 801bc70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bc74:	2b30      	cmp	r3, #48	; 0x30
 801bc76:	d0f8      	beq.n	801bc6a <_dtoa_r+0x5fa>
 801bc78:	9700      	str	r7, [sp, #0]
 801bc7a:	e049      	b.n	801bd10 <_dtoa_r+0x6a0>
 801bc7c:	4b05      	ldr	r3, [pc, #20]	; (801bc94 <_dtoa_r+0x624>)
 801bc7e:	f7e4 fcd3 	bl	8000628 <__aeabi_dmul>
 801bc82:	4680      	mov	r8, r0
 801bc84:	4689      	mov	r9, r1
 801bc86:	e7bd      	b.n	801bc04 <_dtoa_r+0x594>
 801bc88:	0801ebb8 	.word	0x0801ebb8
 801bc8c:	0801eb90 	.word	0x0801eb90
 801bc90:	3ff00000 	.word	0x3ff00000
 801bc94:	40240000 	.word	0x40240000
 801bc98:	401c0000 	.word	0x401c0000
 801bc9c:	40140000 	.word	0x40140000
 801bca0:	3fe00000 	.word	0x3fe00000
 801bca4:	9d01      	ldr	r5, [sp, #4]
 801bca6:	4656      	mov	r6, sl
 801bca8:	465f      	mov	r7, fp
 801bcaa:	4642      	mov	r2, r8
 801bcac:	464b      	mov	r3, r9
 801bcae:	4630      	mov	r0, r6
 801bcb0:	4639      	mov	r1, r7
 801bcb2:	f7e4 fde3 	bl	800087c <__aeabi_ddiv>
 801bcb6:	f7e4 ff67 	bl	8000b88 <__aeabi_d2iz>
 801bcba:	4682      	mov	sl, r0
 801bcbc:	f7e4 fc4a 	bl	8000554 <__aeabi_i2d>
 801bcc0:	4642      	mov	r2, r8
 801bcc2:	464b      	mov	r3, r9
 801bcc4:	f7e4 fcb0 	bl	8000628 <__aeabi_dmul>
 801bcc8:	4602      	mov	r2, r0
 801bcca:	460b      	mov	r3, r1
 801bccc:	4630      	mov	r0, r6
 801bcce:	4639      	mov	r1, r7
 801bcd0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801bcd4:	f7e4 faf0 	bl	80002b8 <__aeabi_dsub>
 801bcd8:	f805 6b01 	strb.w	r6, [r5], #1
 801bcdc:	9e01      	ldr	r6, [sp, #4]
 801bcde:	9f03      	ldr	r7, [sp, #12]
 801bce0:	1bae      	subs	r6, r5, r6
 801bce2:	42b7      	cmp	r7, r6
 801bce4:	4602      	mov	r2, r0
 801bce6:	460b      	mov	r3, r1
 801bce8:	d135      	bne.n	801bd56 <_dtoa_r+0x6e6>
 801bcea:	f7e4 fae7 	bl	80002bc <__adddf3>
 801bcee:	4642      	mov	r2, r8
 801bcf0:	464b      	mov	r3, r9
 801bcf2:	4606      	mov	r6, r0
 801bcf4:	460f      	mov	r7, r1
 801bcf6:	f7e4 ff27 	bl	8000b48 <__aeabi_dcmpgt>
 801bcfa:	b9d0      	cbnz	r0, 801bd32 <_dtoa_r+0x6c2>
 801bcfc:	4642      	mov	r2, r8
 801bcfe:	464b      	mov	r3, r9
 801bd00:	4630      	mov	r0, r6
 801bd02:	4639      	mov	r1, r7
 801bd04:	f7e4 fef8 	bl	8000af8 <__aeabi_dcmpeq>
 801bd08:	b110      	cbz	r0, 801bd10 <_dtoa_r+0x6a0>
 801bd0a:	f01a 0f01 	tst.w	sl, #1
 801bd0e:	d110      	bne.n	801bd32 <_dtoa_r+0x6c2>
 801bd10:	4620      	mov	r0, r4
 801bd12:	ee18 1a10 	vmov	r1, s16
 801bd16:	f000 ffc3 	bl	801cca0 <_Bfree>
 801bd1a:	2300      	movs	r3, #0
 801bd1c:	9800      	ldr	r0, [sp, #0]
 801bd1e:	702b      	strb	r3, [r5, #0]
 801bd20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd22:	3001      	adds	r0, #1
 801bd24:	6018      	str	r0, [r3, #0]
 801bd26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bd28:	2b00      	cmp	r3, #0
 801bd2a:	f43f acf1 	beq.w	801b710 <_dtoa_r+0xa0>
 801bd2e:	601d      	str	r5, [r3, #0]
 801bd30:	e4ee      	b.n	801b710 <_dtoa_r+0xa0>
 801bd32:	9f00      	ldr	r7, [sp, #0]
 801bd34:	462b      	mov	r3, r5
 801bd36:	461d      	mov	r5, r3
 801bd38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bd3c:	2a39      	cmp	r2, #57	; 0x39
 801bd3e:	d106      	bne.n	801bd4e <_dtoa_r+0x6de>
 801bd40:	9a01      	ldr	r2, [sp, #4]
 801bd42:	429a      	cmp	r2, r3
 801bd44:	d1f7      	bne.n	801bd36 <_dtoa_r+0x6c6>
 801bd46:	9901      	ldr	r1, [sp, #4]
 801bd48:	2230      	movs	r2, #48	; 0x30
 801bd4a:	3701      	adds	r7, #1
 801bd4c:	700a      	strb	r2, [r1, #0]
 801bd4e:	781a      	ldrb	r2, [r3, #0]
 801bd50:	3201      	adds	r2, #1
 801bd52:	701a      	strb	r2, [r3, #0]
 801bd54:	e790      	b.n	801bc78 <_dtoa_r+0x608>
 801bd56:	4ba6      	ldr	r3, [pc, #664]	; (801bff0 <_dtoa_r+0x980>)
 801bd58:	2200      	movs	r2, #0
 801bd5a:	f7e4 fc65 	bl	8000628 <__aeabi_dmul>
 801bd5e:	2200      	movs	r2, #0
 801bd60:	2300      	movs	r3, #0
 801bd62:	4606      	mov	r6, r0
 801bd64:	460f      	mov	r7, r1
 801bd66:	f7e4 fec7 	bl	8000af8 <__aeabi_dcmpeq>
 801bd6a:	2800      	cmp	r0, #0
 801bd6c:	d09d      	beq.n	801bcaa <_dtoa_r+0x63a>
 801bd6e:	e7cf      	b.n	801bd10 <_dtoa_r+0x6a0>
 801bd70:	9a08      	ldr	r2, [sp, #32]
 801bd72:	2a00      	cmp	r2, #0
 801bd74:	f000 80d7 	beq.w	801bf26 <_dtoa_r+0x8b6>
 801bd78:	9a06      	ldr	r2, [sp, #24]
 801bd7a:	2a01      	cmp	r2, #1
 801bd7c:	f300 80ba 	bgt.w	801bef4 <_dtoa_r+0x884>
 801bd80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bd82:	2a00      	cmp	r2, #0
 801bd84:	f000 80b2 	beq.w	801beec <_dtoa_r+0x87c>
 801bd88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801bd8c:	9e07      	ldr	r6, [sp, #28]
 801bd8e:	9d04      	ldr	r5, [sp, #16]
 801bd90:	9a04      	ldr	r2, [sp, #16]
 801bd92:	441a      	add	r2, r3
 801bd94:	9204      	str	r2, [sp, #16]
 801bd96:	9a05      	ldr	r2, [sp, #20]
 801bd98:	2101      	movs	r1, #1
 801bd9a:	441a      	add	r2, r3
 801bd9c:	4620      	mov	r0, r4
 801bd9e:	9205      	str	r2, [sp, #20]
 801bda0:	f001 f880 	bl	801cea4 <__i2b>
 801bda4:	4607      	mov	r7, r0
 801bda6:	2d00      	cmp	r5, #0
 801bda8:	dd0c      	ble.n	801bdc4 <_dtoa_r+0x754>
 801bdaa:	9b05      	ldr	r3, [sp, #20]
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	dd09      	ble.n	801bdc4 <_dtoa_r+0x754>
 801bdb0:	42ab      	cmp	r3, r5
 801bdb2:	9a04      	ldr	r2, [sp, #16]
 801bdb4:	bfa8      	it	ge
 801bdb6:	462b      	movge	r3, r5
 801bdb8:	1ad2      	subs	r2, r2, r3
 801bdba:	9204      	str	r2, [sp, #16]
 801bdbc:	9a05      	ldr	r2, [sp, #20]
 801bdbe:	1aed      	subs	r5, r5, r3
 801bdc0:	1ad3      	subs	r3, r2, r3
 801bdc2:	9305      	str	r3, [sp, #20]
 801bdc4:	9b07      	ldr	r3, [sp, #28]
 801bdc6:	b31b      	cbz	r3, 801be10 <_dtoa_r+0x7a0>
 801bdc8:	9b08      	ldr	r3, [sp, #32]
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	f000 80af 	beq.w	801bf2e <_dtoa_r+0x8be>
 801bdd0:	2e00      	cmp	r6, #0
 801bdd2:	dd13      	ble.n	801bdfc <_dtoa_r+0x78c>
 801bdd4:	4639      	mov	r1, r7
 801bdd6:	4632      	mov	r2, r6
 801bdd8:	4620      	mov	r0, r4
 801bdda:	f001 f923 	bl	801d024 <__pow5mult>
 801bdde:	ee18 2a10 	vmov	r2, s16
 801bde2:	4601      	mov	r1, r0
 801bde4:	4607      	mov	r7, r0
 801bde6:	4620      	mov	r0, r4
 801bde8:	f001 f872 	bl	801ced0 <__multiply>
 801bdec:	ee18 1a10 	vmov	r1, s16
 801bdf0:	4680      	mov	r8, r0
 801bdf2:	4620      	mov	r0, r4
 801bdf4:	f000 ff54 	bl	801cca0 <_Bfree>
 801bdf8:	ee08 8a10 	vmov	s16, r8
 801bdfc:	9b07      	ldr	r3, [sp, #28]
 801bdfe:	1b9a      	subs	r2, r3, r6
 801be00:	d006      	beq.n	801be10 <_dtoa_r+0x7a0>
 801be02:	ee18 1a10 	vmov	r1, s16
 801be06:	4620      	mov	r0, r4
 801be08:	f001 f90c 	bl	801d024 <__pow5mult>
 801be0c:	ee08 0a10 	vmov	s16, r0
 801be10:	2101      	movs	r1, #1
 801be12:	4620      	mov	r0, r4
 801be14:	f001 f846 	bl	801cea4 <__i2b>
 801be18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	4606      	mov	r6, r0
 801be1e:	f340 8088 	ble.w	801bf32 <_dtoa_r+0x8c2>
 801be22:	461a      	mov	r2, r3
 801be24:	4601      	mov	r1, r0
 801be26:	4620      	mov	r0, r4
 801be28:	f001 f8fc 	bl	801d024 <__pow5mult>
 801be2c:	9b06      	ldr	r3, [sp, #24]
 801be2e:	2b01      	cmp	r3, #1
 801be30:	4606      	mov	r6, r0
 801be32:	f340 8081 	ble.w	801bf38 <_dtoa_r+0x8c8>
 801be36:	f04f 0800 	mov.w	r8, #0
 801be3a:	6933      	ldr	r3, [r6, #16]
 801be3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801be40:	6918      	ldr	r0, [r3, #16]
 801be42:	f000 ffdf 	bl	801ce04 <__hi0bits>
 801be46:	f1c0 0020 	rsb	r0, r0, #32
 801be4a:	9b05      	ldr	r3, [sp, #20]
 801be4c:	4418      	add	r0, r3
 801be4e:	f010 001f 	ands.w	r0, r0, #31
 801be52:	f000 8092 	beq.w	801bf7a <_dtoa_r+0x90a>
 801be56:	f1c0 0320 	rsb	r3, r0, #32
 801be5a:	2b04      	cmp	r3, #4
 801be5c:	f340 808a 	ble.w	801bf74 <_dtoa_r+0x904>
 801be60:	f1c0 001c 	rsb	r0, r0, #28
 801be64:	9b04      	ldr	r3, [sp, #16]
 801be66:	4403      	add	r3, r0
 801be68:	9304      	str	r3, [sp, #16]
 801be6a:	9b05      	ldr	r3, [sp, #20]
 801be6c:	4403      	add	r3, r0
 801be6e:	4405      	add	r5, r0
 801be70:	9305      	str	r3, [sp, #20]
 801be72:	9b04      	ldr	r3, [sp, #16]
 801be74:	2b00      	cmp	r3, #0
 801be76:	dd07      	ble.n	801be88 <_dtoa_r+0x818>
 801be78:	ee18 1a10 	vmov	r1, s16
 801be7c:	461a      	mov	r2, r3
 801be7e:	4620      	mov	r0, r4
 801be80:	f001 f92a 	bl	801d0d8 <__lshift>
 801be84:	ee08 0a10 	vmov	s16, r0
 801be88:	9b05      	ldr	r3, [sp, #20]
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	dd05      	ble.n	801be9a <_dtoa_r+0x82a>
 801be8e:	4631      	mov	r1, r6
 801be90:	461a      	mov	r2, r3
 801be92:	4620      	mov	r0, r4
 801be94:	f001 f920 	bl	801d0d8 <__lshift>
 801be98:	4606      	mov	r6, r0
 801be9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	d06e      	beq.n	801bf7e <_dtoa_r+0x90e>
 801bea0:	ee18 0a10 	vmov	r0, s16
 801bea4:	4631      	mov	r1, r6
 801bea6:	f001 f987 	bl	801d1b8 <__mcmp>
 801beaa:	2800      	cmp	r0, #0
 801beac:	da67      	bge.n	801bf7e <_dtoa_r+0x90e>
 801beae:	9b00      	ldr	r3, [sp, #0]
 801beb0:	3b01      	subs	r3, #1
 801beb2:	ee18 1a10 	vmov	r1, s16
 801beb6:	9300      	str	r3, [sp, #0]
 801beb8:	220a      	movs	r2, #10
 801beba:	2300      	movs	r3, #0
 801bebc:	4620      	mov	r0, r4
 801bebe:	f000 ff11 	bl	801cce4 <__multadd>
 801bec2:	9b08      	ldr	r3, [sp, #32]
 801bec4:	ee08 0a10 	vmov	s16, r0
 801bec8:	2b00      	cmp	r3, #0
 801beca:	f000 81b1 	beq.w	801c230 <_dtoa_r+0xbc0>
 801bece:	2300      	movs	r3, #0
 801bed0:	4639      	mov	r1, r7
 801bed2:	220a      	movs	r2, #10
 801bed4:	4620      	mov	r0, r4
 801bed6:	f000 ff05 	bl	801cce4 <__multadd>
 801beda:	9b02      	ldr	r3, [sp, #8]
 801bedc:	2b00      	cmp	r3, #0
 801bede:	4607      	mov	r7, r0
 801bee0:	f300 808e 	bgt.w	801c000 <_dtoa_r+0x990>
 801bee4:	9b06      	ldr	r3, [sp, #24]
 801bee6:	2b02      	cmp	r3, #2
 801bee8:	dc51      	bgt.n	801bf8e <_dtoa_r+0x91e>
 801beea:	e089      	b.n	801c000 <_dtoa_r+0x990>
 801beec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801beee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801bef2:	e74b      	b.n	801bd8c <_dtoa_r+0x71c>
 801bef4:	9b03      	ldr	r3, [sp, #12]
 801bef6:	1e5e      	subs	r6, r3, #1
 801bef8:	9b07      	ldr	r3, [sp, #28]
 801befa:	42b3      	cmp	r3, r6
 801befc:	bfbf      	itttt	lt
 801befe:	9b07      	ldrlt	r3, [sp, #28]
 801bf00:	9607      	strlt	r6, [sp, #28]
 801bf02:	1af2      	sublt	r2, r6, r3
 801bf04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bf06:	bfb6      	itet	lt
 801bf08:	189b      	addlt	r3, r3, r2
 801bf0a:	1b9e      	subge	r6, r3, r6
 801bf0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bf0e:	9b03      	ldr	r3, [sp, #12]
 801bf10:	bfb8      	it	lt
 801bf12:	2600      	movlt	r6, #0
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	bfb7      	itett	lt
 801bf18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801bf1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801bf20:	1a9d      	sublt	r5, r3, r2
 801bf22:	2300      	movlt	r3, #0
 801bf24:	e734      	b.n	801bd90 <_dtoa_r+0x720>
 801bf26:	9e07      	ldr	r6, [sp, #28]
 801bf28:	9d04      	ldr	r5, [sp, #16]
 801bf2a:	9f08      	ldr	r7, [sp, #32]
 801bf2c:	e73b      	b.n	801bda6 <_dtoa_r+0x736>
 801bf2e:	9a07      	ldr	r2, [sp, #28]
 801bf30:	e767      	b.n	801be02 <_dtoa_r+0x792>
 801bf32:	9b06      	ldr	r3, [sp, #24]
 801bf34:	2b01      	cmp	r3, #1
 801bf36:	dc18      	bgt.n	801bf6a <_dtoa_r+0x8fa>
 801bf38:	f1ba 0f00 	cmp.w	sl, #0
 801bf3c:	d115      	bne.n	801bf6a <_dtoa_r+0x8fa>
 801bf3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bf42:	b993      	cbnz	r3, 801bf6a <_dtoa_r+0x8fa>
 801bf44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bf48:	0d1b      	lsrs	r3, r3, #20
 801bf4a:	051b      	lsls	r3, r3, #20
 801bf4c:	b183      	cbz	r3, 801bf70 <_dtoa_r+0x900>
 801bf4e:	9b04      	ldr	r3, [sp, #16]
 801bf50:	3301      	adds	r3, #1
 801bf52:	9304      	str	r3, [sp, #16]
 801bf54:	9b05      	ldr	r3, [sp, #20]
 801bf56:	3301      	adds	r3, #1
 801bf58:	9305      	str	r3, [sp, #20]
 801bf5a:	f04f 0801 	mov.w	r8, #1
 801bf5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	f47f af6a 	bne.w	801be3a <_dtoa_r+0x7ca>
 801bf66:	2001      	movs	r0, #1
 801bf68:	e76f      	b.n	801be4a <_dtoa_r+0x7da>
 801bf6a:	f04f 0800 	mov.w	r8, #0
 801bf6e:	e7f6      	b.n	801bf5e <_dtoa_r+0x8ee>
 801bf70:	4698      	mov	r8, r3
 801bf72:	e7f4      	b.n	801bf5e <_dtoa_r+0x8ee>
 801bf74:	f43f af7d 	beq.w	801be72 <_dtoa_r+0x802>
 801bf78:	4618      	mov	r0, r3
 801bf7a:	301c      	adds	r0, #28
 801bf7c:	e772      	b.n	801be64 <_dtoa_r+0x7f4>
 801bf7e:	9b03      	ldr	r3, [sp, #12]
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	dc37      	bgt.n	801bff4 <_dtoa_r+0x984>
 801bf84:	9b06      	ldr	r3, [sp, #24]
 801bf86:	2b02      	cmp	r3, #2
 801bf88:	dd34      	ble.n	801bff4 <_dtoa_r+0x984>
 801bf8a:	9b03      	ldr	r3, [sp, #12]
 801bf8c:	9302      	str	r3, [sp, #8]
 801bf8e:	9b02      	ldr	r3, [sp, #8]
 801bf90:	b96b      	cbnz	r3, 801bfae <_dtoa_r+0x93e>
 801bf92:	4631      	mov	r1, r6
 801bf94:	2205      	movs	r2, #5
 801bf96:	4620      	mov	r0, r4
 801bf98:	f000 fea4 	bl	801cce4 <__multadd>
 801bf9c:	4601      	mov	r1, r0
 801bf9e:	4606      	mov	r6, r0
 801bfa0:	ee18 0a10 	vmov	r0, s16
 801bfa4:	f001 f908 	bl	801d1b8 <__mcmp>
 801bfa8:	2800      	cmp	r0, #0
 801bfaa:	f73f adbb 	bgt.w	801bb24 <_dtoa_r+0x4b4>
 801bfae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bfb0:	9d01      	ldr	r5, [sp, #4]
 801bfb2:	43db      	mvns	r3, r3
 801bfb4:	9300      	str	r3, [sp, #0]
 801bfb6:	f04f 0800 	mov.w	r8, #0
 801bfba:	4631      	mov	r1, r6
 801bfbc:	4620      	mov	r0, r4
 801bfbe:	f000 fe6f 	bl	801cca0 <_Bfree>
 801bfc2:	2f00      	cmp	r7, #0
 801bfc4:	f43f aea4 	beq.w	801bd10 <_dtoa_r+0x6a0>
 801bfc8:	f1b8 0f00 	cmp.w	r8, #0
 801bfcc:	d005      	beq.n	801bfda <_dtoa_r+0x96a>
 801bfce:	45b8      	cmp	r8, r7
 801bfd0:	d003      	beq.n	801bfda <_dtoa_r+0x96a>
 801bfd2:	4641      	mov	r1, r8
 801bfd4:	4620      	mov	r0, r4
 801bfd6:	f000 fe63 	bl	801cca0 <_Bfree>
 801bfda:	4639      	mov	r1, r7
 801bfdc:	4620      	mov	r0, r4
 801bfde:	f000 fe5f 	bl	801cca0 <_Bfree>
 801bfe2:	e695      	b.n	801bd10 <_dtoa_r+0x6a0>
 801bfe4:	2600      	movs	r6, #0
 801bfe6:	4637      	mov	r7, r6
 801bfe8:	e7e1      	b.n	801bfae <_dtoa_r+0x93e>
 801bfea:	9700      	str	r7, [sp, #0]
 801bfec:	4637      	mov	r7, r6
 801bfee:	e599      	b.n	801bb24 <_dtoa_r+0x4b4>
 801bff0:	40240000 	.word	0x40240000
 801bff4:	9b08      	ldr	r3, [sp, #32]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	f000 80ca 	beq.w	801c190 <_dtoa_r+0xb20>
 801bffc:	9b03      	ldr	r3, [sp, #12]
 801bffe:	9302      	str	r3, [sp, #8]
 801c000:	2d00      	cmp	r5, #0
 801c002:	dd05      	ble.n	801c010 <_dtoa_r+0x9a0>
 801c004:	4639      	mov	r1, r7
 801c006:	462a      	mov	r2, r5
 801c008:	4620      	mov	r0, r4
 801c00a:	f001 f865 	bl	801d0d8 <__lshift>
 801c00e:	4607      	mov	r7, r0
 801c010:	f1b8 0f00 	cmp.w	r8, #0
 801c014:	d05b      	beq.n	801c0ce <_dtoa_r+0xa5e>
 801c016:	6879      	ldr	r1, [r7, #4]
 801c018:	4620      	mov	r0, r4
 801c01a:	f000 fe01 	bl	801cc20 <_Balloc>
 801c01e:	4605      	mov	r5, r0
 801c020:	b928      	cbnz	r0, 801c02e <_dtoa_r+0x9be>
 801c022:	4b87      	ldr	r3, [pc, #540]	; (801c240 <_dtoa_r+0xbd0>)
 801c024:	4602      	mov	r2, r0
 801c026:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c02a:	f7ff bb3b 	b.w	801b6a4 <_dtoa_r+0x34>
 801c02e:	693a      	ldr	r2, [r7, #16]
 801c030:	3202      	adds	r2, #2
 801c032:	0092      	lsls	r2, r2, #2
 801c034:	f107 010c 	add.w	r1, r7, #12
 801c038:	300c      	adds	r0, #12
 801c03a:	f7fd f82f 	bl	801909c <memcpy>
 801c03e:	2201      	movs	r2, #1
 801c040:	4629      	mov	r1, r5
 801c042:	4620      	mov	r0, r4
 801c044:	f001 f848 	bl	801d0d8 <__lshift>
 801c048:	9b01      	ldr	r3, [sp, #4]
 801c04a:	f103 0901 	add.w	r9, r3, #1
 801c04e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c052:	4413      	add	r3, r2
 801c054:	9305      	str	r3, [sp, #20]
 801c056:	f00a 0301 	and.w	r3, sl, #1
 801c05a:	46b8      	mov	r8, r7
 801c05c:	9304      	str	r3, [sp, #16]
 801c05e:	4607      	mov	r7, r0
 801c060:	4631      	mov	r1, r6
 801c062:	ee18 0a10 	vmov	r0, s16
 801c066:	f7ff fa75 	bl	801b554 <quorem>
 801c06a:	4641      	mov	r1, r8
 801c06c:	9002      	str	r0, [sp, #8]
 801c06e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c072:	ee18 0a10 	vmov	r0, s16
 801c076:	f001 f89f 	bl	801d1b8 <__mcmp>
 801c07a:	463a      	mov	r2, r7
 801c07c:	9003      	str	r0, [sp, #12]
 801c07e:	4631      	mov	r1, r6
 801c080:	4620      	mov	r0, r4
 801c082:	f001 f8b5 	bl	801d1f0 <__mdiff>
 801c086:	68c2      	ldr	r2, [r0, #12]
 801c088:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 801c08c:	4605      	mov	r5, r0
 801c08e:	bb02      	cbnz	r2, 801c0d2 <_dtoa_r+0xa62>
 801c090:	4601      	mov	r1, r0
 801c092:	ee18 0a10 	vmov	r0, s16
 801c096:	f001 f88f 	bl	801d1b8 <__mcmp>
 801c09a:	4602      	mov	r2, r0
 801c09c:	4629      	mov	r1, r5
 801c09e:	4620      	mov	r0, r4
 801c0a0:	9207      	str	r2, [sp, #28]
 801c0a2:	f000 fdfd 	bl	801cca0 <_Bfree>
 801c0a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c0aa:	ea43 0102 	orr.w	r1, r3, r2
 801c0ae:	9b04      	ldr	r3, [sp, #16]
 801c0b0:	430b      	orrs	r3, r1
 801c0b2:	464d      	mov	r5, r9
 801c0b4:	d10f      	bne.n	801c0d6 <_dtoa_r+0xa66>
 801c0b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c0ba:	d02a      	beq.n	801c112 <_dtoa_r+0xaa2>
 801c0bc:	9b03      	ldr	r3, [sp, #12]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	dd02      	ble.n	801c0c8 <_dtoa_r+0xa58>
 801c0c2:	9b02      	ldr	r3, [sp, #8]
 801c0c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801c0c8:	f88b a000 	strb.w	sl, [fp]
 801c0cc:	e775      	b.n	801bfba <_dtoa_r+0x94a>
 801c0ce:	4638      	mov	r0, r7
 801c0d0:	e7ba      	b.n	801c048 <_dtoa_r+0x9d8>
 801c0d2:	2201      	movs	r2, #1
 801c0d4:	e7e2      	b.n	801c09c <_dtoa_r+0xa2c>
 801c0d6:	9b03      	ldr	r3, [sp, #12]
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	db04      	blt.n	801c0e6 <_dtoa_r+0xa76>
 801c0dc:	9906      	ldr	r1, [sp, #24]
 801c0de:	430b      	orrs	r3, r1
 801c0e0:	9904      	ldr	r1, [sp, #16]
 801c0e2:	430b      	orrs	r3, r1
 801c0e4:	d122      	bne.n	801c12c <_dtoa_r+0xabc>
 801c0e6:	2a00      	cmp	r2, #0
 801c0e8:	ddee      	ble.n	801c0c8 <_dtoa_r+0xa58>
 801c0ea:	ee18 1a10 	vmov	r1, s16
 801c0ee:	2201      	movs	r2, #1
 801c0f0:	4620      	mov	r0, r4
 801c0f2:	f000 fff1 	bl	801d0d8 <__lshift>
 801c0f6:	4631      	mov	r1, r6
 801c0f8:	ee08 0a10 	vmov	s16, r0
 801c0fc:	f001 f85c 	bl	801d1b8 <__mcmp>
 801c100:	2800      	cmp	r0, #0
 801c102:	dc03      	bgt.n	801c10c <_dtoa_r+0xa9c>
 801c104:	d1e0      	bne.n	801c0c8 <_dtoa_r+0xa58>
 801c106:	f01a 0f01 	tst.w	sl, #1
 801c10a:	d0dd      	beq.n	801c0c8 <_dtoa_r+0xa58>
 801c10c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c110:	d1d7      	bne.n	801c0c2 <_dtoa_r+0xa52>
 801c112:	2339      	movs	r3, #57	; 0x39
 801c114:	f88b 3000 	strb.w	r3, [fp]
 801c118:	462b      	mov	r3, r5
 801c11a:	461d      	mov	r5, r3
 801c11c:	3b01      	subs	r3, #1
 801c11e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c122:	2a39      	cmp	r2, #57	; 0x39
 801c124:	d071      	beq.n	801c20a <_dtoa_r+0xb9a>
 801c126:	3201      	adds	r2, #1
 801c128:	701a      	strb	r2, [r3, #0]
 801c12a:	e746      	b.n	801bfba <_dtoa_r+0x94a>
 801c12c:	2a00      	cmp	r2, #0
 801c12e:	dd07      	ble.n	801c140 <_dtoa_r+0xad0>
 801c130:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c134:	d0ed      	beq.n	801c112 <_dtoa_r+0xaa2>
 801c136:	f10a 0301 	add.w	r3, sl, #1
 801c13a:	f88b 3000 	strb.w	r3, [fp]
 801c13e:	e73c      	b.n	801bfba <_dtoa_r+0x94a>
 801c140:	9b05      	ldr	r3, [sp, #20]
 801c142:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c146:	4599      	cmp	r9, r3
 801c148:	d047      	beq.n	801c1da <_dtoa_r+0xb6a>
 801c14a:	ee18 1a10 	vmov	r1, s16
 801c14e:	2300      	movs	r3, #0
 801c150:	220a      	movs	r2, #10
 801c152:	4620      	mov	r0, r4
 801c154:	f000 fdc6 	bl	801cce4 <__multadd>
 801c158:	45b8      	cmp	r8, r7
 801c15a:	ee08 0a10 	vmov	s16, r0
 801c15e:	f04f 0300 	mov.w	r3, #0
 801c162:	f04f 020a 	mov.w	r2, #10
 801c166:	4641      	mov	r1, r8
 801c168:	4620      	mov	r0, r4
 801c16a:	d106      	bne.n	801c17a <_dtoa_r+0xb0a>
 801c16c:	f000 fdba 	bl	801cce4 <__multadd>
 801c170:	4680      	mov	r8, r0
 801c172:	4607      	mov	r7, r0
 801c174:	f109 0901 	add.w	r9, r9, #1
 801c178:	e772      	b.n	801c060 <_dtoa_r+0x9f0>
 801c17a:	f000 fdb3 	bl	801cce4 <__multadd>
 801c17e:	4639      	mov	r1, r7
 801c180:	4680      	mov	r8, r0
 801c182:	2300      	movs	r3, #0
 801c184:	220a      	movs	r2, #10
 801c186:	4620      	mov	r0, r4
 801c188:	f000 fdac 	bl	801cce4 <__multadd>
 801c18c:	4607      	mov	r7, r0
 801c18e:	e7f1      	b.n	801c174 <_dtoa_r+0xb04>
 801c190:	9b03      	ldr	r3, [sp, #12]
 801c192:	9302      	str	r3, [sp, #8]
 801c194:	9d01      	ldr	r5, [sp, #4]
 801c196:	ee18 0a10 	vmov	r0, s16
 801c19a:	4631      	mov	r1, r6
 801c19c:	f7ff f9da 	bl	801b554 <quorem>
 801c1a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c1a4:	9b01      	ldr	r3, [sp, #4]
 801c1a6:	f805 ab01 	strb.w	sl, [r5], #1
 801c1aa:	1aea      	subs	r2, r5, r3
 801c1ac:	9b02      	ldr	r3, [sp, #8]
 801c1ae:	4293      	cmp	r3, r2
 801c1b0:	dd09      	ble.n	801c1c6 <_dtoa_r+0xb56>
 801c1b2:	ee18 1a10 	vmov	r1, s16
 801c1b6:	2300      	movs	r3, #0
 801c1b8:	220a      	movs	r2, #10
 801c1ba:	4620      	mov	r0, r4
 801c1bc:	f000 fd92 	bl	801cce4 <__multadd>
 801c1c0:	ee08 0a10 	vmov	s16, r0
 801c1c4:	e7e7      	b.n	801c196 <_dtoa_r+0xb26>
 801c1c6:	9b02      	ldr	r3, [sp, #8]
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	bfc8      	it	gt
 801c1cc:	461d      	movgt	r5, r3
 801c1ce:	9b01      	ldr	r3, [sp, #4]
 801c1d0:	bfd8      	it	le
 801c1d2:	2501      	movle	r5, #1
 801c1d4:	441d      	add	r5, r3
 801c1d6:	f04f 0800 	mov.w	r8, #0
 801c1da:	ee18 1a10 	vmov	r1, s16
 801c1de:	2201      	movs	r2, #1
 801c1e0:	4620      	mov	r0, r4
 801c1e2:	f000 ff79 	bl	801d0d8 <__lshift>
 801c1e6:	4631      	mov	r1, r6
 801c1e8:	ee08 0a10 	vmov	s16, r0
 801c1ec:	f000 ffe4 	bl	801d1b8 <__mcmp>
 801c1f0:	2800      	cmp	r0, #0
 801c1f2:	dc91      	bgt.n	801c118 <_dtoa_r+0xaa8>
 801c1f4:	d102      	bne.n	801c1fc <_dtoa_r+0xb8c>
 801c1f6:	f01a 0f01 	tst.w	sl, #1
 801c1fa:	d18d      	bne.n	801c118 <_dtoa_r+0xaa8>
 801c1fc:	462b      	mov	r3, r5
 801c1fe:	461d      	mov	r5, r3
 801c200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c204:	2a30      	cmp	r2, #48	; 0x30
 801c206:	d0fa      	beq.n	801c1fe <_dtoa_r+0xb8e>
 801c208:	e6d7      	b.n	801bfba <_dtoa_r+0x94a>
 801c20a:	9a01      	ldr	r2, [sp, #4]
 801c20c:	429a      	cmp	r2, r3
 801c20e:	d184      	bne.n	801c11a <_dtoa_r+0xaaa>
 801c210:	9b00      	ldr	r3, [sp, #0]
 801c212:	3301      	adds	r3, #1
 801c214:	9300      	str	r3, [sp, #0]
 801c216:	2331      	movs	r3, #49	; 0x31
 801c218:	7013      	strb	r3, [r2, #0]
 801c21a:	e6ce      	b.n	801bfba <_dtoa_r+0x94a>
 801c21c:	4b09      	ldr	r3, [pc, #36]	; (801c244 <_dtoa_r+0xbd4>)
 801c21e:	f7ff ba95 	b.w	801b74c <_dtoa_r+0xdc>
 801c222:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c224:	2b00      	cmp	r3, #0
 801c226:	f47f aa6e 	bne.w	801b706 <_dtoa_r+0x96>
 801c22a:	4b07      	ldr	r3, [pc, #28]	; (801c248 <_dtoa_r+0xbd8>)
 801c22c:	f7ff ba8e 	b.w	801b74c <_dtoa_r+0xdc>
 801c230:	9b02      	ldr	r3, [sp, #8]
 801c232:	2b00      	cmp	r3, #0
 801c234:	dcae      	bgt.n	801c194 <_dtoa_r+0xb24>
 801c236:	9b06      	ldr	r3, [sp, #24]
 801c238:	2b02      	cmp	r3, #2
 801c23a:	f73f aea8 	bgt.w	801bf8e <_dtoa_r+0x91e>
 801c23e:	e7a9      	b.n	801c194 <_dtoa_r+0xb24>
 801c240:	0801eaa4 	.word	0x0801eaa4
 801c244:	0801e910 	.word	0x0801e910
 801c248:	0801ea3c 	.word	0x0801ea3c

0801c24c <__env_lock>:
 801c24c:	4801      	ldr	r0, [pc, #4]	; (801c254 <__env_lock+0x8>)
 801c24e:	f7fc bf12 	b.w	8019076 <__retarget_lock_acquire_recursive>
 801c252:	bf00      	nop
 801c254:	2000a05c 	.word	0x2000a05c

0801c258 <__env_unlock>:
 801c258:	4801      	ldr	r0, [pc, #4]	; (801c260 <__env_unlock+0x8>)
 801c25a:	f7fc bf0d 	b.w	8019078 <__retarget_lock_release_recursive>
 801c25e:	bf00      	nop
 801c260:	2000a05c 	.word	0x2000a05c

0801c264 <__sflush_r>:
 801c264:	898a      	ldrh	r2, [r1, #12]
 801c266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c26a:	4605      	mov	r5, r0
 801c26c:	0710      	lsls	r0, r2, #28
 801c26e:	460c      	mov	r4, r1
 801c270:	d458      	bmi.n	801c324 <__sflush_r+0xc0>
 801c272:	684b      	ldr	r3, [r1, #4]
 801c274:	2b00      	cmp	r3, #0
 801c276:	dc05      	bgt.n	801c284 <__sflush_r+0x20>
 801c278:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	dc02      	bgt.n	801c284 <__sflush_r+0x20>
 801c27e:	2000      	movs	r0, #0
 801c280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c286:	2e00      	cmp	r6, #0
 801c288:	d0f9      	beq.n	801c27e <__sflush_r+0x1a>
 801c28a:	2300      	movs	r3, #0
 801c28c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c290:	682f      	ldr	r7, [r5, #0]
 801c292:	602b      	str	r3, [r5, #0]
 801c294:	d032      	beq.n	801c2fc <__sflush_r+0x98>
 801c296:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c298:	89a3      	ldrh	r3, [r4, #12]
 801c29a:	075a      	lsls	r2, r3, #29
 801c29c:	d505      	bpl.n	801c2aa <__sflush_r+0x46>
 801c29e:	6863      	ldr	r3, [r4, #4]
 801c2a0:	1ac0      	subs	r0, r0, r3
 801c2a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c2a4:	b10b      	cbz	r3, 801c2aa <__sflush_r+0x46>
 801c2a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c2a8:	1ac0      	subs	r0, r0, r3
 801c2aa:	2300      	movs	r3, #0
 801c2ac:	4602      	mov	r2, r0
 801c2ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c2b0:	6a21      	ldr	r1, [r4, #32]
 801c2b2:	4628      	mov	r0, r5
 801c2b4:	47b0      	blx	r6
 801c2b6:	1c43      	adds	r3, r0, #1
 801c2b8:	89a3      	ldrh	r3, [r4, #12]
 801c2ba:	d106      	bne.n	801c2ca <__sflush_r+0x66>
 801c2bc:	6829      	ldr	r1, [r5, #0]
 801c2be:	291d      	cmp	r1, #29
 801c2c0:	d82c      	bhi.n	801c31c <__sflush_r+0xb8>
 801c2c2:	4a2a      	ldr	r2, [pc, #168]	; (801c36c <__sflush_r+0x108>)
 801c2c4:	40ca      	lsrs	r2, r1
 801c2c6:	07d6      	lsls	r6, r2, #31
 801c2c8:	d528      	bpl.n	801c31c <__sflush_r+0xb8>
 801c2ca:	2200      	movs	r2, #0
 801c2cc:	6062      	str	r2, [r4, #4]
 801c2ce:	04d9      	lsls	r1, r3, #19
 801c2d0:	6922      	ldr	r2, [r4, #16]
 801c2d2:	6022      	str	r2, [r4, #0]
 801c2d4:	d504      	bpl.n	801c2e0 <__sflush_r+0x7c>
 801c2d6:	1c42      	adds	r2, r0, #1
 801c2d8:	d101      	bne.n	801c2de <__sflush_r+0x7a>
 801c2da:	682b      	ldr	r3, [r5, #0]
 801c2dc:	b903      	cbnz	r3, 801c2e0 <__sflush_r+0x7c>
 801c2de:	6560      	str	r0, [r4, #84]	; 0x54
 801c2e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c2e2:	602f      	str	r7, [r5, #0]
 801c2e4:	2900      	cmp	r1, #0
 801c2e6:	d0ca      	beq.n	801c27e <__sflush_r+0x1a>
 801c2e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c2ec:	4299      	cmp	r1, r3
 801c2ee:	d002      	beq.n	801c2f6 <__sflush_r+0x92>
 801c2f0:	4628      	mov	r0, r5
 801c2f2:	f7fc ff19 	bl	8019128 <_free_r>
 801c2f6:	2000      	movs	r0, #0
 801c2f8:	6360      	str	r0, [r4, #52]	; 0x34
 801c2fa:	e7c1      	b.n	801c280 <__sflush_r+0x1c>
 801c2fc:	6a21      	ldr	r1, [r4, #32]
 801c2fe:	2301      	movs	r3, #1
 801c300:	4628      	mov	r0, r5
 801c302:	47b0      	blx	r6
 801c304:	1c41      	adds	r1, r0, #1
 801c306:	d1c7      	bne.n	801c298 <__sflush_r+0x34>
 801c308:	682b      	ldr	r3, [r5, #0]
 801c30a:	2b00      	cmp	r3, #0
 801c30c:	d0c4      	beq.n	801c298 <__sflush_r+0x34>
 801c30e:	2b1d      	cmp	r3, #29
 801c310:	d001      	beq.n	801c316 <__sflush_r+0xb2>
 801c312:	2b16      	cmp	r3, #22
 801c314:	d101      	bne.n	801c31a <__sflush_r+0xb6>
 801c316:	602f      	str	r7, [r5, #0]
 801c318:	e7b1      	b.n	801c27e <__sflush_r+0x1a>
 801c31a:	89a3      	ldrh	r3, [r4, #12]
 801c31c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c320:	81a3      	strh	r3, [r4, #12]
 801c322:	e7ad      	b.n	801c280 <__sflush_r+0x1c>
 801c324:	690f      	ldr	r7, [r1, #16]
 801c326:	2f00      	cmp	r7, #0
 801c328:	d0a9      	beq.n	801c27e <__sflush_r+0x1a>
 801c32a:	0793      	lsls	r3, r2, #30
 801c32c:	680e      	ldr	r6, [r1, #0]
 801c32e:	bf08      	it	eq
 801c330:	694b      	ldreq	r3, [r1, #20]
 801c332:	600f      	str	r7, [r1, #0]
 801c334:	bf18      	it	ne
 801c336:	2300      	movne	r3, #0
 801c338:	eba6 0807 	sub.w	r8, r6, r7
 801c33c:	608b      	str	r3, [r1, #8]
 801c33e:	f1b8 0f00 	cmp.w	r8, #0
 801c342:	dd9c      	ble.n	801c27e <__sflush_r+0x1a>
 801c344:	6a21      	ldr	r1, [r4, #32]
 801c346:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c348:	4643      	mov	r3, r8
 801c34a:	463a      	mov	r2, r7
 801c34c:	4628      	mov	r0, r5
 801c34e:	47b0      	blx	r6
 801c350:	2800      	cmp	r0, #0
 801c352:	dc06      	bgt.n	801c362 <__sflush_r+0xfe>
 801c354:	89a3      	ldrh	r3, [r4, #12]
 801c356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c35a:	81a3      	strh	r3, [r4, #12]
 801c35c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c360:	e78e      	b.n	801c280 <__sflush_r+0x1c>
 801c362:	4407      	add	r7, r0
 801c364:	eba8 0800 	sub.w	r8, r8, r0
 801c368:	e7e9      	b.n	801c33e <__sflush_r+0xda>
 801c36a:	bf00      	nop
 801c36c:	20400001 	.word	0x20400001

0801c370 <_fflush_r>:
 801c370:	b538      	push	{r3, r4, r5, lr}
 801c372:	690b      	ldr	r3, [r1, #16]
 801c374:	4605      	mov	r5, r0
 801c376:	460c      	mov	r4, r1
 801c378:	b913      	cbnz	r3, 801c380 <_fflush_r+0x10>
 801c37a:	2500      	movs	r5, #0
 801c37c:	4628      	mov	r0, r5
 801c37e:	bd38      	pop	{r3, r4, r5, pc}
 801c380:	b118      	cbz	r0, 801c38a <_fflush_r+0x1a>
 801c382:	6983      	ldr	r3, [r0, #24]
 801c384:	b90b      	cbnz	r3, 801c38a <_fflush_r+0x1a>
 801c386:	f7fc fd6b 	bl	8018e60 <__sinit>
 801c38a:	4b14      	ldr	r3, [pc, #80]	; (801c3dc <_fflush_r+0x6c>)
 801c38c:	429c      	cmp	r4, r3
 801c38e:	d11b      	bne.n	801c3c8 <_fflush_r+0x58>
 801c390:	686c      	ldr	r4, [r5, #4]
 801c392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c396:	2b00      	cmp	r3, #0
 801c398:	d0ef      	beq.n	801c37a <_fflush_r+0xa>
 801c39a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c39c:	07d0      	lsls	r0, r2, #31
 801c39e:	d404      	bmi.n	801c3aa <_fflush_r+0x3a>
 801c3a0:	0599      	lsls	r1, r3, #22
 801c3a2:	d402      	bmi.n	801c3aa <_fflush_r+0x3a>
 801c3a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c3a6:	f7fc fe66 	bl	8019076 <__retarget_lock_acquire_recursive>
 801c3aa:	4628      	mov	r0, r5
 801c3ac:	4621      	mov	r1, r4
 801c3ae:	f7ff ff59 	bl	801c264 <__sflush_r>
 801c3b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c3b4:	07da      	lsls	r2, r3, #31
 801c3b6:	4605      	mov	r5, r0
 801c3b8:	d4e0      	bmi.n	801c37c <_fflush_r+0xc>
 801c3ba:	89a3      	ldrh	r3, [r4, #12]
 801c3bc:	059b      	lsls	r3, r3, #22
 801c3be:	d4dd      	bmi.n	801c37c <_fflush_r+0xc>
 801c3c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c3c2:	f7fc fe59 	bl	8019078 <__retarget_lock_release_recursive>
 801c3c6:	e7d9      	b.n	801c37c <_fflush_r+0xc>
 801c3c8:	4b05      	ldr	r3, [pc, #20]	; (801c3e0 <_fflush_r+0x70>)
 801c3ca:	429c      	cmp	r4, r3
 801c3cc:	d101      	bne.n	801c3d2 <_fflush_r+0x62>
 801c3ce:	68ac      	ldr	r4, [r5, #8]
 801c3d0:	e7df      	b.n	801c392 <_fflush_r+0x22>
 801c3d2:	4b04      	ldr	r3, [pc, #16]	; (801c3e4 <_fflush_r+0x74>)
 801c3d4:	429c      	cmp	r4, r3
 801c3d6:	bf08      	it	eq
 801c3d8:	68ec      	ldreq	r4, [r5, #12]
 801c3da:	e7da      	b.n	801c392 <_fflush_r+0x22>
 801c3dc:	0801e8bc 	.word	0x0801e8bc
 801c3e0:	0801e8dc 	.word	0x0801e8dc
 801c3e4:	0801e89c 	.word	0x0801e89c

0801c3e8 <fiprintf>:
 801c3e8:	b40e      	push	{r1, r2, r3}
 801c3ea:	b503      	push	{r0, r1, lr}
 801c3ec:	4601      	mov	r1, r0
 801c3ee:	ab03      	add	r3, sp, #12
 801c3f0:	4805      	ldr	r0, [pc, #20]	; (801c408 <fiprintf+0x20>)
 801c3f2:	f853 2b04 	ldr.w	r2, [r3], #4
 801c3f6:	6800      	ldr	r0, [r0, #0]
 801c3f8:	9301      	str	r3, [sp, #4]
 801c3fa:	f001 fa87 	bl	801d90c <_vfiprintf_r>
 801c3fe:	b002      	add	sp, #8
 801c400:	f85d eb04 	ldr.w	lr, [sp], #4
 801c404:	b003      	add	sp, #12
 801c406:	4770      	bx	lr
 801c408:	20000080 	.word	0x20000080

0801c40c <rshift>:
 801c40c:	6903      	ldr	r3, [r0, #16]
 801c40e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c412:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c416:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c41a:	f100 0414 	add.w	r4, r0, #20
 801c41e:	dd45      	ble.n	801c4ac <rshift+0xa0>
 801c420:	f011 011f 	ands.w	r1, r1, #31
 801c424:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c428:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c42c:	d10c      	bne.n	801c448 <rshift+0x3c>
 801c42e:	f100 0710 	add.w	r7, r0, #16
 801c432:	4629      	mov	r1, r5
 801c434:	42b1      	cmp	r1, r6
 801c436:	d334      	bcc.n	801c4a2 <rshift+0x96>
 801c438:	1a9b      	subs	r3, r3, r2
 801c43a:	009b      	lsls	r3, r3, #2
 801c43c:	1eea      	subs	r2, r5, #3
 801c43e:	4296      	cmp	r6, r2
 801c440:	bf38      	it	cc
 801c442:	2300      	movcc	r3, #0
 801c444:	4423      	add	r3, r4
 801c446:	e015      	b.n	801c474 <rshift+0x68>
 801c448:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c44c:	f1c1 0820 	rsb	r8, r1, #32
 801c450:	40cf      	lsrs	r7, r1
 801c452:	f105 0e04 	add.w	lr, r5, #4
 801c456:	46a1      	mov	r9, r4
 801c458:	4576      	cmp	r6, lr
 801c45a:	46f4      	mov	ip, lr
 801c45c:	d815      	bhi.n	801c48a <rshift+0x7e>
 801c45e:	1a9a      	subs	r2, r3, r2
 801c460:	0092      	lsls	r2, r2, #2
 801c462:	3a04      	subs	r2, #4
 801c464:	3501      	adds	r5, #1
 801c466:	42ae      	cmp	r6, r5
 801c468:	bf38      	it	cc
 801c46a:	2200      	movcc	r2, #0
 801c46c:	18a3      	adds	r3, r4, r2
 801c46e:	50a7      	str	r7, [r4, r2]
 801c470:	b107      	cbz	r7, 801c474 <rshift+0x68>
 801c472:	3304      	adds	r3, #4
 801c474:	1b1a      	subs	r2, r3, r4
 801c476:	42a3      	cmp	r3, r4
 801c478:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c47c:	bf08      	it	eq
 801c47e:	2300      	moveq	r3, #0
 801c480:	6102      	str	r2, [r0, #16]
 801c482:	bf08      	it	eq
 801c484:	6143      	streq	r3, [r0, #20]
 801c486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c48a:	f8dc c000 	ldr.w	ip, [ip]
 801c48e:	fa0c fc08 	lsl.w	ip, ip, r8
 801c492:	ea4c 0707 	orr.w	r7, ip, r7
 801c496:	f849 7b04 	str.w	r7, [r9], #4
 801c49a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c49e:	40cf      	lsrs	r7, r1
 801c4a0:	e7da      	b.n	801c458 <rshift+0x4c>
 801c4a2:	f851 cb04 	ldr.w	ip, [r1], #4
 801c4a6:	f847 cf04 	str.w	ip, [r7, #4]!
 801c4aa:	e7c3      	b.n	801c434 <rshift+0x28>
 801c4ac:	4623      	mov	r3, r4
 801c4ae:	e7e1      	b.n	801c474 <rshift+0x68>

0801c4b0 <__hexdig_fun>:
 801c4b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c4b4:	2b09      	cmp	r3, #9
 801c4b6:	d802      	bhi.n	801c4be <__hexdig_fun+0xe>
 801c4b8:	3820      	subs	r0, #32
 801c4ba:	b2c0      	uxtb	r0, r0
 801c4bc:	4770      	bx	lr
 801c4be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c4c2:	2b05      	cmp	r3, #5
 801c4c4:	d801      	bhi.n	801c4ca <__hexdig_fun+0x1a>
 801c4c6:	3847      	subs	r0, #71	; 0x47
 801c4c8:	e7f7      	b.n	801c4ba <__hexdig_fun+0xa>
 801c4ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c4ce:	2b05      	cmp	r3, #5
 801c4d0:	d801      	bhi.n	801c4d6 <__hexdig_fun+0x26>
 801c4d2:	3827      	subs	r0, #39	; 0x27
 801c4d4:	e7f1      	b.n	801c4ba <__hexdig_fun+0xa>
 801c4d6:	2000      	movs	r0, #0
 801c4d8:	4770      	bx	lr
	...

0801c4dc <__gethex>:
 801c4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4e0:	ed2d 8b02 	vpush	{d8}
 801c4e4:	b089      	sub	sp, #36	; 0x24
 801c4e6:	ee08 0a10 	vmov	s16, r0
 801c4ea:	9304      	str	r3, [sp, #16]
 801c4ec:	4bb4      	ldr	r3, [pc, #720]	; (801c7c0 <__gethex+0x2e4>)
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	9301      	str	r3, [sp, #4]
 801c4f2:	4618      	mov	r0, r3
 801c4f4:	468b      	mov	fp, r1
 801c4f6:	4690      	mov	r8, r2
 801c4f8:	f7e3 fe7c 	bl	80001f4 <strlen>
 801c4fc:	9b01      	ldr	r3, [sp, #4]
 801c4fe:	f8db 2000 	ldr.w	r2, [fp]
 801c502:	4403      	add	r3, r0
 801c504:	4682      	mov	sl, r0
 801c506:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c50a:	9305      	str	r3, [sp, #20]
 801c50c:	1c93      	adds	r3, r2, #2
 801c50e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c512:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c516:	32fe      	adds	r2, #254	; 0xfe
 801c518:	18d1      	adds	r1, r2, r3
 801c51a:	461f      	mov	r7, r3
 801c51c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c520:	9100      	str	r1, [sp, #0]
 801c522:	2830      	cmp	r0, #48	; 0x30
 801c524:	d0f8      	beq.n	801c518 <__gethex+0x3c>
 801c526:	f7ff ffc3 	bl	801c4b0 <__hexdig_fun>
 801c52a:	4604      	mov	r4, r0
 801c52c:	2800      	cmp	r0, #0
 801c52e:	d13a      	bne.n	801c5a6 <__gethex+0xca>
 801c530:	9901      	ldr	r1, [sp, #4]
 801c532:	4652      	mov	r2, sl
 801c534:	4638      	mov	r0, r7
 801c536:	f7fd ff7f 	bl	801a438 <strncmp>
 801c53a:	4605      	mov	r5, r0
 801c53c:	2800      	cmp	r0, #0
 801c53e:	d168      	bne.n	801c612 <__gethex+0x136>
 801c540:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c544:	eb07 060a 	add.w	r6, r7, sl
 801c548:	f7ff ffb2 	bl	801c4b0 <__hexdig_fun>
 801c54c:	2800      	cmp	r0, #0
 801c54e:	d062      	beq.n	801c616 <__gethex+0x13a>
 801c550:	4633      	mov	r3, r6
 801c552:	7818      	ldrb	r0, [r3, #0]
 801c554:	2830      	cmp	r0, #48	; 0x30
 801c556:	461f      	mov	r7, r3
 801c558:	f103 0301 	add.w	r3, r3, #1
 801c55c:	d0f9      	beq.n	801c552 <__gethex+0x76>
 801c55e:	f7ff ffa7 	bl	801c4b0 <__hexdig_fun>
 801c562:	2301      	movs	r3, #1
 801c564:	fab0 f480 	clz	r4, r0
 801c568:	0964      	lsrs	r4, r4, #5
 801c56a:	4635      	mov	r5, r6
 801c56c:	9300      	str	r3, [sp, #0]
 801c56e:	463a      	mov	r2, r7
 801c570:	4616      	mov	r6, r2
 801c572:	3201      	adds	r2, #1
 801c574:	7830      	ldrb	r0, [r6, #0]
 801c576:	f7ff ff9b 	bl	801c4b0 <__hexdig_fun>
 801c57a:	2800      	cmp	r0, #0
 801c57c:	d1f8      	bne.n	801c570 <__gethex+0x94>
 801c57e:	9901      	ldr	r1, [sp, #4]
 801c580:	4652      	mov	r2, sl
 801c582:	4630      	mov	r0, r6
 801c584:	f7fd ff58 	bl	801a438 <strncmp>
 801c588:	b980      	cbnz	r0, 801c5ac <__gethex+0xd0>
 801c58a:	b94d      	cbnz	r5, 801c5a0 <__gethex+0xc4>
 801c58c:	eb06 050a 	add.w	r5, r6, sl
 801c590:	462a      	mov	r2, r5
 801c592:	4616      	mov	r6, r2
 801c594:	3201      	adds	r2, #1
 801c596:	7830      	ldrb	r0, [r6, #0]
 801c598:	f7ff ff8a 	bl	801c4b0 <__hexdig_fun>
 801c59c:	2800      	cmp	r0, #0
 801c59e:	d1f8      	bne.n	801c592 <__gethex+0xb6>
 801c5a0:	1bad      	subs	r5, r5, r6
 801c5a2:	00ad      	lsls	r5, r5, #2
 801c5a4:	e004      	b.n	801c5b0 <__gethex+0xd4>
 801c5a6:	2400      	movs	r4, #0
 801c5a8:	4625      	mov	r5, r4
 801c5aa:	e7e0      	b.n	801c56e <__gethex+0x92>
 801c5ac:	2d00      	cmp	r5, #0
 801c5ae:	d1f7      	bne.n	801c5a0 <__gethex+0xc4>
 801c5b0:	7833      	ldrb	r3, [r6, #0]
 801c5b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c5b6:	2b50      	cmp	r3, #80	; 0x50
 801c5b8:	d13b      	bne.n	801c632 <__gethex+0x156>
 801c5ba:	7873      	ldrb	r3, [r6, #1]
 801c5bc:	2b2b      	cmp	r3, #43	; 0x2b
 801c5be:	d02c      	beq.n	801c61a <__gethex+0x13e>
 801c5c0:	2b2d      	cmp	r3, #45	; 0x2d
 801c5c2:	d02e      	beq.n	801c622 <__gethex+0x146>
 801c5c4:	1c71      	adds	r1, r6, #1
 801c5c6:	f04f 0900 	mov.w	r9, #0
 801c5ca:	7808      	ldrb	r0, [r1, #0]
 801c5cc:	f7ff ff70 	bl	801c4b0 <__hexdig_fun>
 801c5d0:	1e43      	subs	r3, r0, #1
 801c5d2:	b2db      	uxtb	r3, r3
 801c5d4:	2b18      	cmp	r3, #24
 801c5d6:	d82c      	bhi.n	801c632 <__gethex+0x156>
 801c5d8:	f1a0 0210 	sub.w	r2, r0, #16
 801c5dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c5e0:	f7ff ff66 	bl	801c4b0 <__hexdig_fun>
 801c5e4:	1e43      	subs	r3, r0, #1
 801c5e6:	b2db      	uxtb	r3, r3
 801c5e8:	2b18      	cmp	r3, #24
 801c5ea:	d91d      	bls.n	801c628 <__gethex+0x14c>
 801c5ec:	f1b9 0f00 	cmp.w	r9, #0
 801c5f0:	d000      	beq.n	801c5f4 <__gethex+0x118>
 801c5f2:	4252      	negs	r2, r2
 801c5f4:	4415      	add	r5, r2
 801c5f6:	f8cb 1000 	str.w	r1, [fp]
 801c5fa:	b1e4      	cbz	r4, 801c636 <__gethex+0x15a>
 801c5fc:	9b00      	ldr	r3, [sp, #0]
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	bf14      	ite	ne
 801c602:	2700      	movne	r7, #0
 801c604:	2706      	moveq	r7, #6
 801c606:	4638      	mov	r0, r7
 801c608:	b009      	add	sp, #36	; 0x24
 801c60a:	ecbd 8b02 	vpop	{d8}
 801c60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c612:	463e      	mov	r6, r7
 801c614:	4625      	mov	r5, r4
 801c616:	2401      	movs	r4, #1
 801c618:	e7ca      	b.n	801c5b0 <__gethex+0xd4>
 801c61a:	f04f 0900 	mov.w	r9, #0
 801c61e:	1cb1      	adds	r1, r6, #2
 801c620:	e7d3      	b.n	801c5ca <__gethex+0xee>
 801c622:	f04f 0901 	mov.w	r9, #1
 801c626:	e7fa      	b.n	801c61e <__gethex+0x142>
 801c628:	230a      	movs	r3, #10
 801c62a:	fb03 0202 	mla	r2, r3, r2, r0
 801c62e:	3a10      	subs	r2, #16
 801c630:	e7d4      	b.n	801c5dc <__gethex+0x100>
 801c632:	4631      	mov	r1, r6
 801c634:	e7df      	b.n	801c5f6 <__gethex+0x11a>
 801c636:	1bf3      	subs	r3, r6, r7
 801c638:	3b01      	subs	r3, #1
 801c63a:	4621      	mov	r1, r4
 801c63c:	2b07      	cmp	r3, #7
 801c63e:	dc0b      	bgt.n	801c658 <__gethex+0x17c>
 801c640:	ee18 0a10 	vmov	r0, s16
 801c644:	f000 faec 	bl	801cc20 <_Balloc>
 801c648:	4604      	mov	r4, r0
 801c64a:	b940      	cbnz	r0, 801c65e <__gethex+0x182>
 801c64c:	4b5d      	ldr	r3, [pc, #372]	; (801c7c4 <__gethex+0x2e8>)
 801c64e:	4602      	mov	r2, r0
 801c650:	21de      	movs	r1, #222	; 0xde
 801c652:	485d      	ldr	r0, [pc, #372]	; (801c7c8 <__gethex+0x2ec>)
 801c654:	f7fe ff50 	bl	801b4f8 <__assert_func>
 801c658:	3101      	adds	r1, #1
 801c65a:	105b      	asrs	r3, r3, #1
 801c65c:	e7ee      	b.n	801c63c <__gethex+0x160>
 801c65e:	f100 0914 	add.w	r9, r0, #20
 801c662:	f04f 0b00 	mov.w	fp, #0
 801c666:	f1ca 0301 	rsb	r3, sl, #1
 801c66a:	f8cd 9008 	str.w	r9, [sp, #8]
 801c66e:	f8cd b000 	str.w	fp, [sp]
 801c672:	9306      	str	r3, [sp, #24]
 801c674:	42b7      	cmp	r7, r6
 801c676:	d340      	bcc.n	801c6fa <__gethex+0x21e>
 801c678:	9802      	ldr	r0, [sp, #8]
 801c67a:	9b00      	ldr	r3, [sp, #0]
 801c67c:	f840 3b04 	str.w	r3, [r0], #4
 801c680:	eba0 0009 	sub.w	r0, r0, r9
 801c684:	1080      	asrs	r0, r0, #2
 801c686:	0146      	lsls	r6, r0, #5
 801c688:	6120      	str	r0, [r4, #16]
 801c68a:	4618      	mov	r0, r3
 801c68c:	f000 fbba 	bl	801ce04 <__hi0bits>
 801c690:	1a30      	subs	r0, r6, r0
 801c692:	f8d8 6000 	ldr.w	r6, [r8]
 801c696:	42b0      	cmp	r0, r6
 801c698:	dd63      	ble.n	801c762 <__gethex+0x286>
 801c69a:	1b87      	subs	r7, r0, r6
 801c69c:	4639      	mov	r1, r7
 801c69e:	4620      	mov	r0, r4
 801c6a0:	f000 ff5e 	bl	801d560 <__any_on>
 801c6a4:	4682      	mov	sl, r0
 801c6a6:	b1a8      	cbz	r0, 801c6d4 <__gethex+0x1f8>
 801c6a8:	1e7b      	subs	r3, r7, #1
 801c6aa:	1159      	asrs	r1, r3, #5
 801c6ac:	f003 021f 	and.w	r2, r3, #31
 801c6b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c6b4:	f04f 0a01 	mov.w	sl, #1
 801c6b8:	fa0a f202 	lsl.w	r2, sl, r2
 801c6bc:	420a      	tst	r2, r1
 801c6be:	d009      	beq.n	801c6d4 <__gethex+0x1f8>
 801c6c0:	4553      	cmp	r3, sl
 801c6c2:	dd05      	ble.n	801c6d0 <__gethex+0x1f4>
 801c6c4:	1eb9      	subs	r1, r7, #2
 801c6c6:	4620      	mov	r0, r4
 801c6c8:	f000 ff4a 	bl	801d560 <__any_on>
 801c6cc:	2800      	cmp	r0, #0
 801c6ce:	d145      	bne.n	801c75c <__gethex+0x280>
 801c6d0:	f04f 0a02 	mov.w	sl, #2
 801c6d4:	4639      	mov	r1, r7
 801c6d6:	4620      	mov	r0, r4
 801c6d8:	f7ff fe98 	bl	801c40c <rshift>
 801c6dc:	443d      	add	r5, r7
 801c6de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c6e2:	42ab      	cmp	r3, r5
 801c6e4:	da4c      	bge.n	801c780 <__gethex+0x2a4>
 801c6e6:	ee18 0a10 	vmov	r0, s16
 801c6ea:	4621      	mov	r1, r4
 801c6ec:	f000 fad8 	bl	801cca0 <_Bfree>
 801c6f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c6f2:	2300      	movs	r3, #0
 801c6f4:	6013      	str	r3, [r2, #0]
 801c6f6:	27a3      	movs	r7, #163	; 0xa3
 801c6f8:	e785      	b.n	801c606 <__gethex+0x12a>
 801c6fa:	1e73      	subs	r3, r6, #1
 801c6fc:	9a05      	ldr	r2, [sp, #20]
 801c6fe:	9303      	str	r3, [sp, #12]
 801c700:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c704:	4293      	cmp	r3, r2
 801c706:	d019      	beq.n	801c73c <__gethex+0x260>
 801c708:	f1bb 0f20 	cmp.w	fp, #32
 801c70c:	d107      	bne.n	801c71e <__gethex+0x242>
 801c70e:	9b02      	ldr	r3, [sp, #8]
 801c710:	9a00      	ldr	r2, [sp, #0]
 801c712:	f843 2b04 	str.w	r2, [r3], #4
 801c716:	9302      	str	r3, [sp, #8]
 801c718:	2300      	movs	r3, #0
 801c71a:	9300      	str	r3, [sp, #0]
 801c71c:	469b      	mov	fp, r3
 801c71e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c722:	f7ff fec5 	bl	801c4b0 <__hexdig_fun>
 801c726:	9b00      	ldr	r3, [sp, #0]
 801c728:	f000 000f 	and.w	r0, r0, #15
 801c72c:	fa00 f00b 	lsl.w	r0, r0, fp
 801c730:	4303      	orrs	r3, r0
 801c732:	9300      	str	r3, [sp, #0]
 801c734:	f10b 0b04 	add.w	fp, fp, #4
 801c738:	9b03      	ldr	r3, [sp, #12]
 801c73a:	e00d      	b.n	801c758 <__gethex+0x27c>
 801c73c:	9b03      	ldr	r3, [sp, #12]
 801c73e:	9a06      	ldr	r2, [sp, #24]
 801c740:	4413      	add	r3, r2
 801c742:	42bb      	cmp	r3, r7
 801c744:	d3e0      	bcc.n	801c708 <__gethex+0x22c>
 801c746:	4618      	mov	r0, r3
 801c748:	9901      	ldr	r1, [sp, #4]
 801c74a:	9307      	str	r3, [sp, #28]
 801c74c:	4652      	mov	r2, sl
 801c74e:	f7fd fe73 	bl	801a438 <strncmp>
 801c752:	9b07      	ldr	r3, [sp, #28]
 801c754:	2800      	cmp	r0, #0
 801c756:	d1d7      	bne.n	801c708 <__gethex+0x22c>
 801c758:	461e      	mov	r6, r3
 801c75a:	e78b      	b.n	801c674 <__gethex+0x198>
 801c75c:	f04f 0a03 	mov.w	sl, #3
 801c760:	e7b8      	b.n	801c6d4 <__gethex+0x1f8>
 801c762:	da0a      	bge.n	801c77a <__gethex+0x29e>
 801c764:	1a37      	subs	r7, r6, r0
 801c766:	4621      	mov	r1, r4
 801c768:	ee18 0a10 	vmov	r0, s16
 801c76c:	463a      	mov	r2, r7
 801c76e:	f000 fcb3 	bl	801d0d8 <__lshift>
 801c772:	1bed      	subs	r5, r5, r7
 801c774:	4604      	mov	r4, r0
 801c776:	f100 0914 	add.w	r9, r0, #20
 801c77a:	f04f 0a00 	mov.w	sl, #0
 801c77e:	e7ae      	b.n	801c6de <__gethex+0x202>
 801c780:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c784:	42a8      	cmp	r0, r5
 801c786:	dd72      	ble.n	801c86e <__gethex+0x392>
 801c788:	1b45      	subs	r5, r0, r5
 801c78a:	42ae      	cmp	r6, r5
 801c78c:	dc36      	bgt.n	801c7fc <__gethex+0x320>
 801c78e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c792:	2b02      	cmp	r3, #2
 801c794:	d02a      	beq.n	801c7ec <__gethex+0x310>
 801c796:	2b03      	cmp	r3, #3
 801c798:	d02c      	beq.n	801c7f4 <__gethex+0x318>
 801c79a:	2b01      	cmp	r3, #1
 801c79c:	d11c      	bne.n	801c7d8 <__gethex+0x2fc>
 801c79e:	42ae      	cmp	r6, r5
 801c7a0:	d11a      	bne.n	801c7d8 <__gethex+0x2fc>
 801c7a2:	2e01      	cmp	r6, #1
 801c7a4:	d112      	bne.n	801c7cc <__gethex+0x2f0>
 801c7a6:	9a04      	ldr	r2, [sp, #16]
 801c7a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c7ac:	6013      	str	r3, [r2, #0]
 801c7ae:	2301      	movs	r3, #1
 801c7b0:	6123      	str	r3, [r4, #16]
 801c7b2:	f8c9 3000 	str.w	r3, [r9]
 801c7b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c7b8:	2762      	movs	r7, #98	; 0x62
 801c7ba:	601c      	str	r4, [r3, #0]
 801c7bc:	e723      	b.n	801c606 <__gethex+0x12a>
 801c7be:	bf00      	nop
 801c7c0:	0801eb1c 	.word	0x0801eb1c
 801c7c4:	0801eaa4 	.word	0x0801eaa4
 801c7c8:	0801eab5 	.word	0x0801eab5
 801c7cc:	1e71      	subs	r1, r6, #1
 801c7ce:	4620      	mov	r0, r4
 801c7d0:	f000 fec6 	bl	801d560 <__any_on>
 801c7d4:	2800      	cmp	r0, #0
 801c7d6:	d1e6      	bne.n	801c7a6 <__gethex+0x2ca>
 801c7d8:	ee18 0a10 	vmov	r0, s16
 801c7dc:	4621      	mov	r1, r4
 801c7de:	f000 fa5f 	bl	801cca0 <_Bfree>
 801c7e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c7e4:	2300      	movs	r3, #0
 801c7e6:	6013      	str	r3, [r2, #0]
 801c7e8:	2750      	movs	r7, #80	; 0x50
 801c7ea:	e70c      	b.n	801c606 <__gethex+0x12a>
 801c7ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c7ee:	2b00      	cmp	r3, #0
 801c7f0:	d1f2      	bne.n	801c7d8 <__gethex+0x2fc>
 801c7f2:	e7d8      	b.n	801c7a6 <__gethex+0x2ca>
 801c7f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	d1d5      	bne.n	801c7a6 <__gethex+0x2ca>
 801c7fa:	e7ed      	b.n	801c7d8 <__gethex+0x2fc>
 801c7fc:	1e6f      	subs	r7, r5, #1
 801c7fe:	f1ba 0f00 	cmp.w	sl, #0
 801c802:	d131      	bne.n	801c868 <__gethex+0x38c>
 801c804:	b127      	cbz	r7, 801c810 <__gethex+0x334>
 801c806:	4639      	mov	r1, r7
 801c808:	4620      	mov	r0, r4
 801c80a:	f000 fea9 	bl	801d560 <__any_on>
 801c80e:	4682      	mov	sl, r0
 801c810:	117b      	asrs	r3, r7, #5
 801c812:	2101      	movs	r1, #1
 801c814:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c818:	f007 071f 	and.w	r7, r7, #31
 801c81c:	fa01 f707 	lsl.w	r7, r1, r7
 801c820:	421f      	tst	r7, r3
 801c822:	4629      	mov	r1, r5
 801c824:	4620      	mov	r0, r4
 801c826:	bf18      	it	ne
 801c828:	f04a 0a02 	orrne.w	sl, sl, #2
 801c82c:	1b76      	subs	r6, r6, r5
 801c82e:	f7ff fded 	bl	801c40c <rshift>
 801c832:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c836:	2702      	movs	r7, #2
 801c838:	f1ba 0f00 	cmp.w	sl, #0
 801c83c:	d048      	beq.n	801c8d0 <__gethex+0x3f4>
 801c83e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c842:	2b02      	cmp	r3, #2
 801c844:	d015      	beq.n	801c872 <__gethex+0x396>
 801c846:	2b03      	cmp	r3, #3
 801c848:	d017      	beq.n	801c87a <__gethex+0x39e>
 801c84a:	2b01      	cmp	r3, #1
 801c84c:	d109      	bne.n	801c862 <__gethex+0x386>
 801c84e:	f01a 0f02 	tst.w	sl, #2
 801c852:	d006      	beq.n	801c862 <__gethex+0x386>
 801c854:	f8d9 0000 	ldr.w	r0, [r9]
 801c858:	ea4a 0a00 	orr.w	sl, sl, r0
 801c85c:	f01a 0f01 	tst.w	sl, #1
 801c860:	d10e      	bne.n	801c880 <__gethex+0x3a4>
 801c862:	f047 0710 	orr.w	r7, r7, #16
 801c866:	e033      	b.n	801c8d0 <__gethex+0x3f4>
 801c868:	f04f 0a01 	mov.w	sl, #1
 801c86c:	e7d0      	b.n	801c810 <__gethex+0x334>
 801c86e:	2701      	movs	r7, #1
 801c870:	e7e2      	b.n	801c838 <__gethex+0x35c>
 801c872:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c874:	f1c3 0301 	rsb	r3, r3, #1
 801c878:	9315      	str	r3, [sp, #84]	; 0x54
 801c87a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	d0f0      	beq.n	801c862 <__gethex+0x386>
 801c880:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c884:	f104 0314 	add.w	r3, r4, #20
 801c888:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c88c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c890:	f04f 0c00 	mov.w	ip, #0
 801c894:	4618      	mov	r0, r3
 801c896:	f853 2b04 	ldr.w	r2, [r3], #4
 801c89a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801c89e:	d01c      	beq.n	801c8da <__gethex+0x3fe>
 801c8a0:	3201      	adds	r2, #1
 801c8a2:	6002      	str	r2, [r0, #0]
 801c8a4:	2f02      	cmp	r7, #2
 801c8a6:	f104 0314 	add.w	r3, r4, #20
 801c8aa:	d13f      	bne.n	801c92c <__gethex+0x450>
 801c8ac:	f8d8 2000 	ldr.w	r2, [r8]
 801c8b0:	3a01      	subs	r2, #1
 801c8b2:	42b2      	cmp	r2, r6
 801c8b4:	d10a      	bne.n	801c8cc <__gethex+0x3f0>
 801c8b6:	1171      	asrs	r1, r6, #5
 801c8b8:	2201      	movs	r2, #1
 801c8ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c8be:	f006 061f 	and.w	r6, r6, #31
 801c8c2:	fa02 f606 	lsl.w	r6, r2, r6
 801c8c6:	421e      	tst	r6, r3
 801c8c8:	bf18      	it	ne
 801c8ca:	4617      	movne	r7, r2
 801c8cc:	f047 0720 	orr.w	r7, r7, #32
 801c8d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c8d2:	601c      	str	r4, [r3, #0]
 801c8d4:	9b04      	ldr	r3, [sp, #16]
 801c8d6:	601d      	str	r5, [r3, #0]
 801c8d8:	e695      	b.n	801c606 <__gethex+0x12a>
 801c8da:	4299      	cmp	r1, r3
 801c8dc:	f843 cc04 	str.w	ip, [r3, #-4]
 801c8e0:	d8d8      	bhi.n	801c894 <__gethex+0x3b8>
 801c8e2:	68a3      	ldr	r3, [r4, #8]
 801c8e4:	459b      	cmp	fp, r3
 801c8e6:	db19      	blt.n	801c91c <__gethex+0x440>
 801c8e8:	6861      	ldr	r1, [r4, #4]
 801c8ea:	ee18 0a10 	vmov	r0, s16
 801c8ee:	3101      	adds	r1, #1
 801c8f0:	f000 f996 	bl	801cc20 <_Balloc>
 801c8f4:	4681      	mov	r9, r0
 801c8f6:	b918      	cbnz	r0, 801c900 <__gethex+0x424>
 801c8f8:	4b1a      	ldr	r3, [pc, #104]	; (801c964 <__gethex+0x488>)
 801c8fa:	4602      	mov	r2, r0
 801c8fc:	2184      	movs	r1, #132	; 0x84
 801c8fe:	e6a8      	b.n	801c652 <__gethex+0x176>
 801c900:	6922      	ldr	r2, [r4, #16]
 801c902:	3202      	adds	r2, #2
 801c904:	f104 010c 	add.w	r1, r4, #12
 801c908:	0092      	lsls	r2, r2, #2
 801c90a:	300c      	adds	r0, #12
 801c90c:	f7fc fbc6 	bl	801909c <memcpy>
 801c910:	4621      	mov	r1, r4
 801c912:	ee18 0a10 	vmov	r0, s16
 801c916:	f000 f9c3 	bl	801cca0 <_Bfree>
 801c91a:	464c      	mov	r4, r9
 801c91c:	6923      	ldr	r3, [r4, #16]
 801c91e:	1c5a      	adds	r2, r3, #1
 801c920:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c924:	6122      	str	r2, [r4, #16]
 801c926:	2201      	movs	r2, #1
 801c928:	615a      	str	r2, [r3, #20]
 801c92a:	e7bb      	b.n	801c8a4 <__gethex+0x3c8>
 801c92c:	6922      	ldr	r2, [r4, #16]
 801c92e:	455a      	cmp	r2, fp
 801c930:	dd0b      	ble.n	801c94a <__gethex+0x46e>
 801c932:	2101      	movs	r1, #1
 801c934:	4620      	mov	r0, r4
 801c936:	f7ff fd69 	bl	801c40c <rshift>
 801c93a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c93e:	3501      	adds	r5, #1
 801c940:	42ab      	cmp	r3, r5
 801c942:	f6ff aed0 	blt.w	801c6e6 <__gethex+0x20a>
 801c946:	2701      	movs	r7, #1
 801c948:	e7c0      	b.n	801c8cc <__gethex+0x3f0>
 801c94a:	f016 061f 	ands.w	r6, r6, #31
 801c94e:	d0fa      	beq.n	801c946 <__gethex+0x46a>
 801c950:	4453      	add	r3, sl
 801c952:	f1c6 0620 	rsb	r6, r6, #32
 801c956:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c95a:	f000 fa53 	bl	801ce04 <__hi0bits>
 801c95e:	42b0      	cmp	r0, r6
 801c960:	dbe7      	blt.n	801c932 <__gethex+0x456>
 801c962:	e7f0      	b.n	801c946 <__gethex+0x46a>
 801c964:	0801eaa4 	.word	0x0801eaa4

0801c968 <L_shift>:
 801c968:	f1c2 0208 	rsb	r2, r2, #8
 801c96c:	0092      	lsls	r2, r2, #2
 801c96e:	b570      	push	{r4, r5, r6, lr}
 801c970:	f1c2 0620 	rsb	r6, r2, #32
 801c974:	6843      	ldr	r3, [r0, #4]
 801c976:	6804      	ldr	r4, [r0, #0]
 801c978:	fa03 f506 	lsl.w	r5, r3, r6
 801c97c:	432c      	orrs	r4, r5
 801c97e:	40d3      	lsrs	r3, r2
 801c980:	6004      	str	r4, [r0, #0]
 801c982:	f840 3f04 	str.w	r3, [r0, #4]!
 801c986:	4288      	cmp	r0, r1
 801c988:	d3f4      	bcc.n	801c974 <L_shift+0xc>
 801c98a:	bd70      	pop	{r4, r5, r6, pc}

0801c98c <__match>:
 801c98c:	b530      	push	{r4, r5, lr}
 801c98e:	6803      	ldr	r3, [r0, #0]
 801c990:	3301      	adds	r3, #1
 801c992:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c996:	b914      	cbnz	r4, 801c99e <__match+0x12>
 801c998:	6003      	str	r3, [r0, #0]
 801c99a:	2001      	movs	r0, #1
 801c99c:	bd30      	pop	{r4, r5, pc}
 801c99e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c9a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c9a6:	2d19      	cmp	r5, #25
 801c9a8:	bf98      	it	ls
 801c9aa:	3220      	addls	r2, #32
 801c9ac:	42a2      	cmp	r2, r4
 801c9ae:	d0f0      	beq.n	801c992 <__match+0x6>
 801c9b0:	2000      	movs	r0, #0
 801c9b2:	e7f3      	b.n	801c99c <__match+0x10>

0801c9b4 <__hexnan>:
 801c9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9b8:	680b      	ldr	r3, [r1, #0]
 801c9ba:	115e      	asrs	r6, r3, #5
 801c9bc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c9c0:	f013 031f 	ands.w	r3, r3, #31
 801c9c4:	b087      	sub	sp, #28
 801c9c6:	bf18      	it	ne
 801c9c8:	3604      	addne	r6, #4
 801c9ca:	2500      	movs	r5, #0
 801c9cc:	1f37      	subs	r7, r6, #4
 801c9ce:	4690      	mov	r8, r2
 801c9d0:	6802      	ldr	r2, [r0, #0]
 801c9d2:	9301      	str	r3, [sp, #4]
 801c9d4:	4682      	mov	sl, r0
 801c9d6:	f846 5c04 	str.w	r5, [r6, #-4]
 801c9da:	46b9      	mov	r9, r7
 801c9dc:	463c      	mov	r4, r7
 801c9de:	9502      	str	r5, [sp, #8]
 801c9e0:	46ab      	mov	fp, r5
 801c9e2:	7851      	ldrb	r1, [r2, #1]
 801c9e4:	1c53      	adds	r3, r2, #1
 801c9e6:	9303      	str	r3, [sp, #12]
 801c9e8:	b341      	cbz	r1, 801ca3c <__hexnan+0x88>
 801c9ea:	4608      	mov	r0, r1
 801c9ec:	9205      	str	r2, [sp, #20]
 801c9ee:	9104      	str	r1, [sp, #16]
 801c9f0:	f7ff fd5e 	bl	801c4b0 <__hexdig_fun>
 801c9f4:	2800      	cmp	r0, #0
 801c9f6:	d14f      	bne.n	801ca98 <__hexnan+0xe4>
 801c9f8:	9904      	ldr	r1, [sp, #16]
 801c9fa:	9a05      	ldr	r2, [sp, #20]
 801c9fc:	2920      	cmp	r1, #32
 801c9fe:	d818      	bhi.n	801ca32 <__hexnan+0x7e>
 801ca00:	9b02      	ldr	r3, [sp, #8]
 801ca02:	459b      	cmp	fp, r3
 801ca04:	dd13      	ble.n	801ca2e <__hexnan+0x7a>
 801ca06:	454c      	cmp	r4, r9
 801ca08:	d206      	bcs.n	801ca18 <__hexnan+0x64>
 801ca0a:	2d07      	cmp	r5, #7
 801ca0c:	dc04      	bgt.n	801ca18 <__hexnan+0x64>
 801ca0e:	462a      	mov	r2, r5
 801ca10:	4649      	mov	r1, r9
 801ca12:	4620      	mov	r0, r4
 801ca14:	f7ff ffa8 	bl	801c968 <L_shift>
 801ca18:	4544      	cmp	r4, r8
 801ca1a:	d950      	bls.n	801cabe <__hexnan+0x10a>
 801ca1c:	2300      	movs	r3, #0
 801ca1e:	f1a4 0904 	sub.w	r9, r4, #4
 801ca22:	f844 3c04 	str.w	r3, [r4, #-4]
 801ca26:	f8cd b008 	str.w	fp, [sp, #8]
 801ca2a:	464c      	mov	r4, r9
 801ca2c:	461d      	mov	r5, r3
 801ca2e:	9a03      	ldr	r2, [sp, #12]
 801ca30:	e7d7      	b.n	801c9e2 <__hexnan+0x2e>
 801ca32:	2929      	cmp	r1, #41	; 0x29
 801ca34:	d156      	bne.n	801cae4 <__hexnan+0x130>
 801ca36:	3202      	adds	r2, #2
 801ca38:	f8ca 2000 	str.w	r2, [sl]
 801ca3c:	f1bb 0f00 	cmp.w	fp, #0
 801ca40:	d050      	beq.n	801cae4 <__hexnan+0x130>
 801ca42:	454c      	cmp	r4, r9
 801ca44:	d206      	bcs.n	801ca54 <__hexnan+0xa0>
 801ca46:	2d07      	cmp	r5, #7
 801ca48:	dc04      	bgt.n	801ca54 <__hexnan+0xa0>
 801ca4a:	462a      	mov	r2, r5
 801ca4c:	4649      	mov	r1, r9
 801ca4e:	4620      	mov	r0, r4
 801ca50:	f7ff ff8a 	bl	801c968 <L_shift>
 801ca54:	4544      	cmp	r4, r8
 801ca56:	d934      	bls.n	801cac2 <__hexnan+0x10e>
 801ca58:	f1a8 0204 	sub.w	r2, r8, #4
 801ca5c:	4623      	mov	r3, r4
 801ca5e:	f853 1b04 	ldr.w	r1, [r3], #4
 801ca62:	f842 1f04 	str.w	r1, [r2, #4]!
 801ca66:	429f      	cmp	r7, r3
 801ca68:	d2f9      	bcs.n	801ca5e <__hexnan+0xaa>
 801ca6a:	1b3b      	subs	r3, r7, r4
 801ca6c:	f023 0303 	bic.w	r3, r3, #3
 801ca70:	3304      	adds	r3, #4
 801ca72:	3401      	adds	r4, #1
 801ca74:	3e03      	subs	r6, #3
 801ca76:	42b4      	cmp	r4, r6
 801ca78:	bf88      	it	hi
 801ca7a:	2304      	movhi	r3, #4
 801ca7c:	4443      	add	r3, r8
 801ca7e:	2200      	movs	r2, #0
 801ca80:	f843 2b04 	str.w	r2, [r3], #4
 801ca84:	429f      	cmp	r7, r3
 801ca86:	d2fb      	bcs.n	801ca80 <__hexnan+0xcc>
 801ca88:	683b      	ldr	r3, [r7, #0]
 801ca8a:	b91b      	cbnz	r3, 801ca94 <__hexnan+0xe0>
 801ca8c:	4547      	cmp	r7, r8
 801ca8e:	d127      	bne.n	801cae0 <__hexnan+0x12c>
 801ca90:	2301      	movs	r3, #1
 801ca92:	603b      	str	r3, [r7, #0]
 801ca94:	2005      	movs	r0, #5
 801ca96:	e026      	b.n	801cae6 <__hexnan+0x132>
 801ca98:	3501      	adds	r5, #1
 801ca9a:	2d08      	cmp	r5, #8
 801ca9c:	f10b 0b01 	add.w	fp, fp, #1
 801caa0:	dd06      	ble.n	801cab0 <__hexnan+0xfc>
 801caa2:	4544      	cmp	r4, r8
 801caa4:	d9c3      	bls.n	801ca2e <__hexnan+0x7a>
 801caa6:	2300      	movs	r3, #0
 801caa8:	f844 3c04 	str.w	r3, [r4, #-4]
 801caac:	2501      	movs	r5, #1
 801caae:	3c04      	subs	r4, #4
 801cab0:	6822      	ldr	r2, [r4, #0]
 801cab2:	f000 000f 	and.w	r0, r0, #15
 801cab6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801caba:	6022      	str	r2, [r4, #0]
 801cabc:	e7b7      	b.n	801ca2e <__hexnan+0x7a>
 801cabe:	2508      	movs	r5, #8
 801cac0:	e7b5      	b.n	801ca2e <__hexnan+0x7a>
 801cac2:	9b01      	ldr	r3, [sp, #4]
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d0df      	beq.n	801ca88 <__hexnan+0xd4>
 801cac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cacc:	f1c3 0320 	rsb	r3, r3, #32
 801cad0:	fa22 f303 	lsr.w	r3, r2, r3
 801cad4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801cad8:	401a      	ands	r2, r3
 801cada:	f846 2c04 	str.w	r2, [r6, #-4]
 801cade:	e7d3      	b.n	801ca88 <__hexnan+0xd4>
 801cae0:	3f04      	subs	r7, #4
 801cae2:	e7d1      	b.n	801ca88 <__hexnan+0xd4>
 801cae4:	2004      	movs	r0, #4
 801cae6:	b007      	add	sp, #28
 801cae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801caec <_localeconv_r>:
 801caec:	4800      	ldr	r0, [pc, #0]	; (801caf0 <_localeconv_r+0x4>)
 801caee:	4770      	bx	lr
 801caf0:	200001d8 	.word	0x200001d8

0801caf4 <_lseek_r>:
 801caf4:	b538      	push	{r3, r4, r5, lr}
 801caf6:	4d07      	ldr	r5, [pc, #28]	; (801cb14 <_lseek_r+0x20>)
 801caf8:	4604      	mov	r4, r0
 801cafa:	4608      	mov	r0, r1
 801cafc:	4611      	mov	r1, r2
 801cafe:	2200      	movs	r2, #0
 801cb00:	602a      	str	r2, [r5, #0]
 801cb02:	461a      	mov	r2, r3
 801cb04:	f7e7 f958 	bl	8003db8 <_lseek>
 801cb08:	1c43      	adds	r3, r0, #1
 801cb0a:	d102      	bne.n	801cb12 <_lseek_r+0x1e>
 801cb0c:	682b      	ldr	r3, [r5, #0]
 801cb0e:	b103      	cbz	r3, 801cb12 <_lseek_r+0x1e>
 801cb10:	6023      	str	r3, [r4, #0]
 801cb12:	bd38      	pop	{r3, r4, r5, pc}
 801cb14:	2000a068 	.word	0x2000a068

0801cb18 <__swhatbuf_r>:
 801cb18:	b570      	push	{r4, r5, r6, lr}
 801cb1a:	460e      	mov	r6, r1
 801cb1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cb20:	2900      	cmp	r1, #0
 801cb22:	b096      	sub	sp, #88	; 0x58
 801cb24:	4614      	mov	r4, r2
 801cb26:	461d      	mov	r5, r3
 801cb28:	da08      	bge.n	801cb3c <__swhatbuf_r+0x24>
 801cb2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801cb2e:	2200      	movs	r2, #0
 801cb30:	602a      	str	r2, [r5, #0]
 801cb32:	061a      	lsls	r2, r3, #24
 801cb34:	d410      	bmi.n	801cb58 <__swhatbuf_r+0x40>
 801cb36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cb3a:	e00e      	b.n	801cb5a <__swhatbuf_r+0x42>
 801cb3c:	466a      	mov	r2, sp
 801cb3e:	f001 f843 	bl	801dbc8 <_fstat_r>
 801cb42:	2800      	cmp	r0, #0
 801cb44:	dbf1      	blt.n	801cb2a <__swhatbuf_r+0x12>
 801cb46:	9a01      	ldr	r2, [sp, #4]
 801cb48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801cb4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801cb50:	425a      	negs	r2, r3
 801cb52:	415a      	adcs	r2, r3
 801cb54:	602a      	str	r2, [r5, #0]
 801cb56:	e7ee      	b.n	801cb36 <__swhatbuf_r+0x1e>
 801cb58:	2340      	movs	r3, #64	; 0x40
 801cb5a:	2000      	movs	r0, #0
 801cb5c:	6023      	str	r3, [r4, #0]
 801cb5e:	b016      	add	sp, #88	; 0x58
 801cb60:	bd70      	pop	{r4, r5, r6, pc}
	...

0801cb64 <__smakebuf_r>:
 801cb64:	898b      	ldrh	r3, [r1, #12]
 801cb66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cb68:	079d      	lsls	r5, r3, #30
 801cb6a:	4606      	mov	r6, r0
 801cb6c:	460c      	mov	r4, r1
 801cb6e:	d507      	bpl.n	801cb80 <__smakebuf_r+0x1c>
 801cb70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cb74:	6023      	str	r3, [r4, #0]
 801cb76:	6123      	str	r3, [r4, #16]
 801cb78:	2301      	movs	r3, #1
 801cb7a:	6163      	str	r3, [r4, #20]
 801cb7c:	b002      	add	sp, #8
 801cb7e:	bd70      	pop	{r4, r5, r6, pc}
 801cb80:	ab01      	add	r3, sp, #4
 801cb82:	466a      	mov	r2, sp
 801cb84:	f7ff ffc8 	bl	801cb18 <__swhatbuf_r>
 801cb88:	9900      	ldr	r1, [sp, #0]
 801cb8a:	4605      	mov	r5, r0
 801cb8c:	4630      	mov	r0, r6
 801cb8e:	f7fc fb37 	bl	8019200 <_malloc_r>
 801cb92:	b948      	cbnz	r0, 801cba8 <__smakebuf_r+0x44>
 801cb94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cb98:	059a      	lsls	r2, r3, #22
 801cb9a:	d4ef      	bmi.n	801cb7c <__smakebuf_r+0x18>
 801cb9c:	f023 0303 	bic.w	r3, r3, #3
 801cba0:	f043 0302 	orr.w	r3, r3, #2
 801cba4:	81a3      	strh	r3, [r4, #12]
 801cba6:	e7e3      	b.n	801cb70 <__smakebuf_r+0xc>
 801cba8:	4b0d      	ldr	r3, [pc, #52]	; (801cbe0 <__smakebuf_r+0x7c>)
 801cbaa:	62b3      	str	r3, [r6, #40]	; 0x28
 801cbac:	89a3      	ldrh	r3, [r4, #12]
 801cbae:	6020      	str	r0, [r4, #0]
 801cbb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cbb4:	81a3      	strh	r3, [r4, #12]
 801cbb6:	9b00      	ldr	r3, [sp, #0]
 801cbb8:	6163      	str	r3, [r4, #20]
 801cbba:	9b01      	ldr	r3, [sp, #4]
 801cbbc:	6120      	str	r0, [r4, #16]
 801cbbe:	b15b      	cbz	r3, 801cbd8 <__smakebuf_r+0x74>
 801cbc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cbc4:	4630      	mov	r0, r6
 801cbc6:	f001 f811 	bl	801dbec <_isatty_r>
 801cbca:	b128      	cbz	r0, 801cbd8 <__smakebuf_r+0x74>
 801cbcc:	89a3      	ldrh	r3, [r4, #12]
 801cbce:	f023 0303 	bic.w	r3, r3, #3
 801cbd2:	f043 0301 	orr.w	r3, r3, #1
 801cbd6:	81a3      	strh	r3, [r4, #12]
 801cbd8:	89a0      	ldrh	r0, [r4, #12]
 801cbda:	4305      	orrs	r5, r0
 801cbdc:	81a5      	strh	r5, [r4, #12]
 801cbde:	e7cd      	b.n	801cb7c <__smakebuf_r+0x18>
 801cbe0:	08018df9 	.word	0x08018df9

0801cbe4 <__ascii_mbtowc>:
 801cbe4:	b082      	sub	sp, #8
 801cbe6:	b901      	cbnz	r1, 801cbea <__ascii_mbtowc+0x6>
 801cbe8:	a901      	add	r1, sp, #4
 801cbea:	b142      	cbz	r2, 801cbfe <__ascii_mbtowc+0x1a>
 801cbec:	b14b      	cbz	r3, 801cc02 <__ascii_mbtowc+0x1e>
 801cbee:	7813      	ldrb	r3, [r2, #0]
 801cbf0:	600b      	str	r3, [r1, #0]
 801cbf2:	7812      	ldrb	r2, [r2, #0]
 801cbf4:	1e10      	subs	r0, r2, #0
 801cbf6:	bf18      	it	ne
 801cbf8:	2001      	movne	r0, #1
 801cbfa:	b002      	add	sp, #8
 801cbfc:	4770      	bx	lr
 801cbfe:	4610      	mov	r0, r2
 801cc00:	e7fb      	b.n	801cbfa <__ascii_mbtowc+0x16>
 801cc02:	f06f 0001 	mvn.w	r0, #1
 801cc06:	e7f8      	b.n	801cbfa <__ascii_mbtowc+0x16>

0801cc08 <__malloc_lock>:
 801cc08:	4801      	ldr	r0, [pc, #4]	; (801cc10 <__malloc_lock+0x8>)
 801cc0a:	f7fc ba34 	b.w	8019076 <__retarget_lock_acquire_recursive>
 801cc0e:	bf00      	nop
 801cc10:	2000a05d 	.word	0x2000a05d

0801cc14 <__malloc_unlock>:
 801cc14:	4801      	ldr	r0, [pc, #4]	; (801cc1c <__malloc_unlock+0x8>)
 801cc16:	f7fc ba2f 	b.w	8019078 <__retarget_lock_release_recursive>
 801cc1a:	bf00      	nop
 801cc1c:	2000a05d 	.word	0x2000a05d

0801cc20 <_Balloc>:
 801cc20:	b570      	push	{r4, r5, r6, lr}
 801cc22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cc24:	4604      	mov	r4, r0
 801cc26:	460d      	mov	r5, r1
 801cc28:	b976      	cbnz	r6, 801cc48 <_Balloc+0x28>
 801cc2a:	2010      	movs	r0, #16
 801cc2c:	f7fc fa26 	bl	801907c <malloc>
 801cc30:	4602      	mov	r2, r0
 801cc32:	6260      	str	r0, [r4, #36]	; 0x24
 801cc34:	b920      	cbnz	r0, 801cc40 <_Balloc+0x20>
 801cc36:	4b18      	ldr	r3, [pc, #96]	; (801cc98 <_Balloc+0x78>)
 801cc38:	4818      	ldr	r0, [pc, #96]	; (801cc9c <_Balloc+0x7c>)
 801cc3a:	2166      	movs	r1, #102	; 0x66
 801cc3c:	f7fe fc5c 	bl	801b4f8 <__assert_func>
 801cc40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cc44:	6006      	str	r6, [r0, #0]
 801cc46:	60c6      	str	r6, [r0, #12]
 801cc48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801cc4a:	68f3      	ldr	r3, [r6, #12]
 801cc4c:	b183      	cbz	r3, 801cc70 <_Balloc+0x50>
 801cc4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cc50:	68db      	ldr	r3, [r3, #12]
 801cc52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801cc56:	b9b8      	cbnz	r0, 801cc88 <_Balloc+0x68>
 801cc58:	2101      	movs	r1, #1
 801cc5a:	fa01 f605 	lsl.w	r6, r1, r5
 801cc5e:	1d72      	adds	r2, r6, #5
 801cc60:	0092      	lsls	r2, r2, #2
 801cc62:	4620      	mov	r0, r4
 801cc64:	f7fc fa4a 	bl	80190fc <_calloc_r>
 801cc68:	b160      	cbz	r0, 801cc84 <_Balloc+0x64>
 801cc6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cc6e:	e00e      	b.n	801cc8e <_Balloc+0x6e>
 801cc70:	2221      	movs	r2, #33	; 0x21
 801cc72:	2104      	movs	r1, #4
 801cc74:	4620      	mov	r0, r4
 801cc76:	f7fc fa41 	bl	80190fc <_calloc_r>
 801cc7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cc7c:	60f0      	str	r0, [r6, #12]
 801cc7e:	68db      	ldr	r3, [r3, #12]
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d1e4      	bne.n	801cc4e <_Balloc+0x2e>
 801cc84:	2000      	movs	r0, #0
 801cc86:	bd70      	pop	{r4, r5, r6, pc}
 801cc88:	6802      	ldr	r2, [r0, #0]
 801cc8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cc8e:	2300      	movs	r3, #0
 801cc90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cc94:	e7f7      	b.n	801cc86 <_Balloc+0x66>
 801cc96:	bf00      	nop
 801cc98:	0801e939 	.word	0x0801e939
 801cc9c:	0801eb30 	.word	0x0801eb30

0801cca0 <_Bfree>:
 801cca0:	b570      	push	{r4, r5, r6, lr}
 801cca2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cca4:	4605      	mov	r5, r0
 801cca6:	460c      	mov	r4, r1
 801cca8:	b976      	cbnz	r6, 801ccc8 <_Bfree+0x28>
 801ccaa:	2010      	movs	r0, #16
 801ccac:	f7fc f9e6 	bl	801907c <malloc>
 801ccb0:	4602      	mov	r2, r0
 801ccb2:	6268      	str	r0, [r5, #36]	; 0x24
 801ccb4:	b920      	cbnz	r0, 801ccc0 <_Bfree+0x20>
 801ccb6:	4b09      	ldr	r3, [pc, #36]	; (801ccdc <_Bfree+0x3c>)
 801ccb8:	4809      	ldr	r0, [pc, #36]	; (801cce0 <_Bfree+0x40>)
 801ccba:	218a      	movs	r1, #138	; 0x8a
 801ccbc:	f7fe fc1c 	bl	801b4f8 <__assert_func>
 801ccc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ccc4:	6006      	str	r6, [r0, #0]
 801ccc6:	60c6      	str	r6, [r0, #12]
 801ccc8:	b13c      	cbz	r4, 801ccda <_Bfree+0x3a>
 801ccca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801cccc:	6862      	ldr	r2, [r4, #4]
 801ccce:	68db      	ldr	r3, [r3, #12]
 801ccd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ccd4:	6021      	str	r1, [r4, #0]
 801ccd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801ccda:	bd70      	pop	{r4, r5, r6, pc}
 801ccdc:	0801e939 	.word	0x0801e939
 801cce0:	0801eb30 	.word	0x0801eb30

0801cce4 <__multadd>:
 801cce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cce8:	690d      	ldr	r5, [r1, #16]
 801ccea:	4607      	mov	r7, r0
 801ccec:	460c      	mov	r4, r1
 801ccee:	461e      	mov	r6, r3
 801ccf0:	f101 0c14 	add.w	ip, r1, #20
 801ccf4:	2000      	movs	r0, #0
 801ccf6:	f8dc 3000 	ldr.w	r3, [ip]
 801ccfa:	b299      	uxth	r1, r3
 801ccfc:	fb02 6101 	mla	r1, r2, r1, r6
 801cd00:	0c1e      	lsrs	r6, r3, #16
 801cd02:	0c0b      	lsrs	r3, r1, #16
 801cd04:	fb02 3306 	mla	r3, r2, r6, r3
 801cd08:	b289      	uxth	r1, r1
 801cd0a:	3001      	adds	r0, #1
 801cd0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cd10:	4285      	cmp	r5, r0
 801cd12:	f84c 1b04 	str.w	r1, [ip], #4
 801cd16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cd1a:	dcec      	bgt.n	801ccf6 <__multadd+0x12>
 801cd1c:	b30e      	cbz	r6, 801cd62 <__multadd+0x7e>
 801cd1e:	68a3      	ldr	r3, [r4, #8]
 801cd20:	42ab      	cmp	r3, r5
 801cd22:	dc19      	bgt.n	801cd58 <__multadd+0x74>
 801cd24:	6861      	ldr	r1, [r4, #4]
 801cd26:	4638      	mov	r0, r7
 801cd28:	3101      	adds	r1, #1
 801cd2a:	f7ff ff79 	bl	801cc20 <_Balloc>
 801cd2e:	4680      	mov	r8, r0
 801cd30:	b928      	cbnz	r0, 801cd3e <__multadd+0x5a>
 801cd32:	4602      	mov	r2, r0
 801cd34:	4b0c      	ldr	r3, [pc, #48]	; (801cd68 <__multadd+0x84>)
 801cd36:	480d      	ldr	r0, [pc, #52]	; (801cd6c <__multadd+0x88>)
 801cd38:	21b5      	movs	r1, #181	; 0xb5
 801cd3a:	f7fe fbdd 	bl	801b4f8 <__assert_func>
 801cd3e:	6922      	ldr	r2, [r4, #16]
 801cd40:	3202      	adds	r2, #2
 801cd42:	f104 010c 	add.w	r1, r4, #12
 801cd46:	0092      	lsls	r2, r2, #2
 801cd48:	300c      	adds	r0, #12
 801cd4a:	f7fc f9a7 	bl	801909c <memcpy>
 801cd4e:	4621      	mov	r1, r4
 801cd50:	4638      	mov	r0, r7
 801cd52:	f7ff ffa5 	bl	801cca0 <_Bfree>
 801cd56:	4644      	mov	r4, r8
 801cd58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cd5c:	3501      	adds	r5, #1
 801cd5e:	615e      	str	r6, [r3, #20]
 801cd60:	6125      	str	r5, [r4, #16]
 801cd62:	4620      	mov	r0, r4
 801cd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd68:	0801eaa4 	.word	0x0801eaa4
 801cd6c:	0801eb30 	.word	0x0801eb30

0801cd70 <__s2b>:
 801cd70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd74:	460c      	mov	r4, r1
 801cd76:	4615      	mov	r5, r2
 801cd78:	461f      	mov	r7, r3
 801cd7a:	2209      	movs	r2, #9
 801cd7c:	3308      	adds	r3, #8
 801cd7e:	4606      	mov	r6, r0
 801cd80:	fb93 f3f2 	sdiv	r3, r3, r2
 801cd84:	2100      	movs	r1, #0
 801cd86:	2201      	movs	r2, #1
 801cd88:	429a      	cmp	r2, r3
 801cd8a:	db09      	blt.n	801cda0 <__s2b+0x30>
 801cd8c:	4630      	mov	r0, r6
 801cd8e:	f7ff ff47 	bl	801cc20 <_Balloc>
 801cd92:	b940      	cbnz	r0, 801cda6 <__s2b+0x36>
 801cd94:	4602      	mov	r2, r0
 801cd96:	4b19      	ldr	r3, [pc, #100]	; (801cdfc <__s2b+0x8c>)
 801cd98:	4819      	ldr	r0, [pc, #100]	; (801ce00 <__s2b+0x90>)
 801cd9a:	21ce      	movs	r1, #206	; 0xce
 801cd9c:	f7fe fbac 	bl	801b4f8 <__assert_func>
 801cda0:	0052      	lsls	r2, r2, #1
 801cda2:	3101      	adds	r1, #1
 801cda4:	e7f0      	b.n	801cd88 <__s2b+0x18>
 801cda6:	9b08      	ldr	r3, [sp, #32]
 801cda8:	6143      	str	r3, [r0, #20]
 801cdaa:	2d09      	cmp	r5, #9
 801cdac:	f04f 0301 	mov.w	r3, #1
 801cdb0:	6103      	str	r3, [r0, #16]
 801cdb2:	dd16      	ble.n	801cde2 <__s2b+0x72>
 801cdb4:	f104 0909 	add.w	r9, r4, #9
 801cdb8:	46c8      	mov	r8, r9
 801cdba:	442c      	add	r4, r5
 801cdbc:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cdc0:	4601      	mov	r1, r0
 801cdc2:	3b30      	subs	r3, #48	; 0x30
 801cdc4:	220a      	movs	r2, #10
 801cdc6:	4630      	mov	r0, r6
 801cdc8:	f7ff ff8c 	bl	801cce4 <__multadd>
 801cdcc:	45a0      	cmp	r8, r4
 801cdce:	d1f5      	bne.n	801cdbc <__s2b+0x4c>
 801cdd0:	f1a5 0408 	sub.w	r4, r5, #8
 801cdd4:	444c      	add	r4, r9
 801cdd6:	1b2d      	subs	r5, r5, r4
 801cdd8:	1963      	adds	r3, r4, r5
 801cdda:	42bb      	cmp	r3, r7
 801cddc:	db04      	blt.n	801cde8 <__s2b+0x78>
 801cdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cde2:	340a      	adds	r4, #10
 801cde4:	2509      	movs	r5, #9
 801cde6:	e7f6      	b.n	801cdd6 <__s2b+0x66>
 801cde8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cdec:	4601      	mov	r1, r0
 801cdee:	3b30      	subs	r3, #48	; 0x30
 801cdf0:	220a      	movs	r2, #10
 801cdf2:	4630      	mov	r0, r6
 801cdf4:	f7ff ff76 	bl	801cce4 <__multadd>
 801cdf8:	e7ee      	b.n	801cdd8 <__s2b+0x68>
 801cdfa:	bf00      	nop
 801cdfc:	0801eaa4 	.word	0x0801eaa4
 801ce00:	0801eb30 	.word	0x0801eb30

0801ce04 <__hi0bits>:
 801ce04:	0c03      	lsrs	r3, r0, #16
 801ce06:	041b      	lsls	r3, r3, #16
 801ce08:	b9d3      	cbnz	r3, 801ce40 <__hi0bits+0x3c>
 801ce0a:	0400      	lsls	r0, r0, #16
 801ce0c:	2310      	movs	r3, #16
 801ce0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ce12:	bf04      	itt	eq
 801ce14:	0200      	lsleq	r0, r0, #8
 801ce16:	3308      	addeq	r3, #8
 801ce18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ce1c:	bf04      	itt	eq
 801ce1e:	0100      	lsleq	r0, r0, #4
 801ce20:	3304      	addeq	r3, #4
 801ce22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ce26:	bf04      	itt	eq
 801ce28:	0080      	lsleq	r0, r0, #2
 801ce2a:	3302      	addeq	r3, #2
 801ce2c:	2800      	cmp	r0, #0
 801ce2e:	db05      	blt.n	801ce3c <__hi0bits+0x38>
 801ce30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ce34:	f103 0301 	add.w	r3, r3, #1
 801ce38:	bf08      	it	eq
 801ce3a:	2320      	moveq	r3, #32
 801ce3c:	4618      	mov	r0, r3
 801ce3e:	4770      	bx	lr
 801ce40:	2300      	movs	r3, #0
 801ce42:	e7e4      	b.n	801ce0e <__hi0bits+0xa>

0801ce44 <__lo0bits>:
 801ce44:	6803      	ldr	r3, [r0, #0]
 801ce46:	f013 0207 	ands.w	r2, r3, #7
 801ce4a:	4601      	mov	r1, r0
 801ce4c:	d00b      	beq.n	801ce66 <__lo0bits+0x22>
 801ce4e:	07da      	lsls	r2, r3, #31
 801ce50:	d423      	bmi.n	801ce9a <__lo0bits+0x56>
 801ce52:	0798      	lsls	r0, r3, #30
 801ce54:	bf49      	itett	mi
 801ce56:	085b      	lsrmi	r3, r3, #1
 801ce58:	089b      	lsrpl	r3, r3, #2
 801ce5a:	2001      	movmi	r0, #1
 801ce5c:	600b      	strmi	r3, [r1, #0]
 801ce5e:	bf5c      	itt	pl
 801ce60:	600b      	strpl	r3, [r1, #0]
 801ce62:	2002      	movpl	r0, #2
 801ce64:	4770      	bx	lr
 801ce66:	b298      	uxth	r0, r3
 801ce68:	b9a8      	cbnz	r0, 801ce96 <__lo0bits+0x52>
 801ce6a:	0c1b      	lsrs	r3, r3, #16
 801ce6c:	2010      	movs	r0, #16
 801ce6e:	b2da      	uxtb	r2, r3
 801ce70:	b90a      	cbnz	r2, 801ce76 <__lo0bits+0x32>
 801ce72:	3008      	adds	r0, #8
 801ce74:	0a1b      	lsrs	r3, r3, #8
 801ce76:	071a      	lsls	r2, r3, #28
 801ce78:	bf04      	itt	eq
 801ce7a:	091b      	lsreq	r3, r3, #4
 801ce7c:	3004      	addeq	r0, #4
 801ce7e:	079a      	lsls	r2, r3, #30
 801ce80:	bf04      	itt	eq
 801ce82:	089b      	lsreq	r3, r3, #2
 801ce84:	3002      	addeq	r0, #2
 801ce86:	07da      	lsls	r2, r3, #31
 801ce88:	d403      	bmi.n	801ce92 <__lo0bits+0x4e>
 801ce8a:	085b      	lsrs	r3, r3, #1
 801ce8c:	f100 0001 	add.w	r0, r0, #1
 801ce90:	d005      	beq.n	801ce9e <__lo0bits+0x5a>
 801ce92:	600b      	str	r3, [r1, #0]
 801ce94:	4770      	bx	lr
 801ce96:	4610      	mov	r0, r2
 801ce98:	e7e9      	b.n	801ce6e <__lo0bits+0x2a>
 801ce9a:	2000      	movs	r0, #0
 801ce9c:	4770      	bx	lr
 801ce9e:	2020      	movs	r0, #32
 801cea0:	4770      	bx	lr
	...

0801cea4 <__i2b>:
 801cea4:	b510      	push	{r4, lr}
 801cea6:	460c      	mov	r4, r1
 801cea8:	2101      	movs	r1, #1
 801ceaa:	f7ff feb9 	bl	801cc20 <_Balloc>
 801ceae:	4602      	mov	r2, r0
 801ceb0:	b928      	cbnz	r0, 801cebe <__i2b+0x1a>
 801ceb2:	4b05      	ldr	r3, [pc, #20]	; (801cec8 <__i2b+0x24>)
 801ceb4:	4805      	ldr	r0, [pc, #20]	; (801cecc <__i2b+0x28>)
 801ceb6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801ceba:	f7fe fb1d 	bl	801b4f8 <__assert_func>
 801cebe:	2301      	movs	r3, #1
 801cec0:	6144      	str	r4, [r0, #20]
 801cec2:	6103      	str	r3, [r0, #16]
 801cec4:	bd10      	pop	{r4, pc}
 801cec6:	bf00      	nop
 801cec8:	0801eaa4 	.word	0x0801eaa4
 801cecc:	0801eb30 	.word	0x0801eb30

0801ced0 <__multiply>:
 801ced0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ced4:	4691      	mov	r9, r2
 801ced6:	690a      	ldr	r2, [r1, #16]
 801ced8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cedc:	429a      	cmp	r2, r3
 801cede:	bfb8      	it	lt
 801cee0:	460b      	movlt	r3, r1
 801cee2:	460c      	mov	r4, r1
 801cee4:	bfbc      	itt	lt
 801cee6:	464c      	movlt	r4, r9
 801cee8:	4699      	movlt	r9, r3
 801ceea:	6927      	ldr	r7, [r4, #16]
 801ceec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801cef0:	68a3      	ldr	r3, [r4, #8]
 801cef2:	6861      	ldr	r1, [r4, #4]
 801cef4:	eb07 060a 	add.w	r6, r7, sl
 801cef8:	42b3      	cmp	r3, r6
 801cefa:	b085      	sub	sp, #20
 801cefc:	bfb8      	it	lt
 801cefe:	3101      	addlt	r1, #1
 801cf00:	f7ff fe8e 	bl	801cc20 <_Balloc>
 801cf04:	b930      	cbnz	r0, 801cf14 <__multiply+0x44>
 801cf06:	4602      	mov	r2, r0
 801cf08:	4b44      	ldr	r3, [pc, #272]	; (801d01c <__multiply+0x14c>)
 801cf0a:	4845      	ldr	r0, [pc, #276]	; (801d020 <__multiply+0x150>)
 801cf0c:	f240 115d 	movw	r1, #349	; 0x15d
 801cf10:	f7fe faf2 	bl	801b4f8 <__assert_func>
 801cf14:	f100 0514 	add.w	r5, r0, #20
 801cf18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cf1c:	462b      	mov	r3, r5
 801cf1e:	2200      	movs	r2, #0
 801cf20:	4543      	cmp	r3, r8
 801cf22:	d321      	bcc.n	801cf68 <__multiply+0x98>
 801cf24:	f104 0314 	add.w	r3, r4, #20
 801cf28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801cf2c:	f109 0314 	add.w	r3, r9, #20
 801cf30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801cf34:	9202      	str	r2, [sp, #8]
 801cf36:	1b3a      	subs	r2, r7, r4
 801cf38:	3a15      	subs	r2, #21
 801cf3a:	f022 0203 	bic.w	r2, r2, #3
 801cf3e:	3204      	adds	r2, #4
 801cf40:	f104 0115 	add.w	r1, r4, #21
 801cf44:	428f      	cmp	r7, r1
 801cf46:	bf38      	it	cc
 801cf48:	2204      	movcc	r2, #4
 801cf4a:	9201      	str	r2, [sp, #4]
 801cf4c:	9a02      	ldr	r2, [sp, #8]
 801cf4e:	9303      	str	r3, [sp, #12]
 801cf50:	429a      	cmp	r2, r3
 801cf52:	d80c      	bhi.n	801cf6e <__multiply+0x9e>
 801cf54:	2e00      	cmp	r6, #0
 801cf56:	dd03      	ble.n	801cf60 <__multiply+0x90>
 801cf58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	d05a      	beq.n	801d016 <__multiply+0x146>
 801cf60:	6106      	str	r6, [r0, #16]
 801cf62:	b005      	add	sp, #20
 801cf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf68:	f843 2b04 	str.w	r2, [r3], #4
 801cf6c:	e7d8      	b.n	801cf20 <__multiply+0x50>
 801cf6e:	f8b3 a000 	ldrh.w	sl, [r3]
 801cf72:	f1ba 0f00 	cmp.w	sl, #0
 801cf76:	d024      	beq.n	801cfc2 <__multiply+0xf2>
 801cf78:	f104 0e14 	add.w	lr, r4, #20
 801cf7c:	46a9      	mov	r9, r5
 801cf7e:	f04f 0c00 	mov.w	ip, #0
 801cf82:	f85e 2b04 	ldr.w	r2, [lr], #4
 801cf86:	f8d9 1000 	ldr.w	r1, [r9]
 801cf8a:	fa1f fb82 	uxth.w	fp, r2
 801cf8e:	b289      	uxth	r1, r1
 801cf90:	fb0a 110b 	mla	r1, sl, fp, r1
 801cf94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801cf98:	f8d9 2000 	ldr.w	r2, [r9]
 801cf9c:	4461      	add	r1, ip
 801cf9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cfa2:	fb0a c20b 	mla	r2, sl, fp, ip
 801cfa6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801cfaa:	b289      	uxth	r1, r1
 801cfac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801cfb0:	4577      	cmp	r7, lr
 801cfb2:	f849 1b04 	str.w	r1, [r9], #4
 801cfb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cfba:	d8e2      	bhi.n	801cf82 <__multiply+0xb2>
 801cfbc:	9a01      	ldr	r2, [sp, #4]
 801cfbe:	f845 c002 	str.w	ip, [r5, r2]
 801cfc2:	9a03      	ldr	r2, [sp, #12]
 801cfc4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801cfc8:	3304      	adds	r3, #4
 801cfca:	f1b9 0f00 	cmp.w	r9, #0
 801cfce:	d020      	beq.n	801d012 <__multiply+0x142>
 801cfd0:	6829      	ldr	r1, [r5, #0]
 801cfd2:	f104 0c14 	add.w	ip, r4, #20
 801cfd6:	46ae      	mov	lr, r5
 801cfd8:	f04f 0a00 	mov.w	sl, #0
 801cfdc:	f8bc b000 	ldrh.w	fp, [ip]
 801cfe0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801cfe4:	fb09 220b 	mla	r2, r9, fp, r2
 801cfe8:	4492      	add	sl, r2
 801cfea:	b289      	uxth	r1, r1
 801cfec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801cff0:	f84e 1b04 	str.w	r1, [lr], #4
 801cff4:	f85c 2b04 	ldr.w	r2, [ip], #4
 801cff8:	f8be 1000 	ldrh.w	r1, [lr]
 801cffc:	0c12      	lsrs	r2, r2, #16
 801cffe:	fb09 1102 	mla	r1, r9, r2, r1
 801d002:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801d006:	4567      	cmp	r7, ip
 801d008:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d00c:	d8e6      	bhi.n	801cfdc <__multiply+0x10c>
 801d00e:	9a01      	ldr	r2, [sp, #4]
 801d010:	50a9      	str	r1, [r5, r2]
 801d012:	3504      	adds	r5, #4
 801d014:	e79a      	b.n	801cf4c <__multiply+0x7c>
 801d016:	3e01      	subs	r6, #1
 801d018:	e79c      	b.n	801cf54 <__multiply+0x84>
 801d01a:	bf00      	nop
 801d01c:	0801eaa4 	.word	0x0801eaa4
 801d020:	0801eb30 	.word	0x0801eb30

0801d024 <__pow5mult>:
 801d024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d028:	4615      	mov	r5, r2
 801d02a:	f012 0203 	ands.w	r2, r2, #3
 801d02e:	4606      	mov	r6, r0
 801d030:	460f      	mov	r7, r1
 801d032:	d007      	beq.n	801d044 <__pow5mult+0x20>
 801d034:	4c25      	ldr	r4, [pc, #148]	; (801d0cc <__pow5mult+0xa8>)
 801d036:	3a01      	subs	r2, #1
 801d038:	2300      	movs	r3, #0
 801d03a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d03e:	f7ff fe51 	bl	801cce4 <__multadd>
 801d042:	4607      	mov	r7, r0
 801d044:	10ad      	asrs	r5, r5, #2
 801d046:	d03d      	beq.n	801d0c4 <__pow5mult+0xa0>
 801d048:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d04a:	b97c      	cbnz	r4, 801d06c <__pow5mult+0x48>
 801d04c:	2010      	movs	r0, #16
 801d04e:	f7fc f815 	bl	801907c <malloc>
 801d052:	4602      	mov	r2, r0
 801d054:	6270      	str	r0, [r6, #36]	; 0x24
 801d056:	b928      	cbnz	r0, 801d064 <__pow5mult+0x40>
 801d058:	4b1d      	ldr	r3, [pc, #116]	; (801d0d0 <__pow5mult+0xac>)
 801d05a:	481e      	ldr	r0, [pc, #120]	; (801d0d4 <__pow5mult+0xb0>)
 801d05c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801d060:	f7fe fa4a 	bl	801b4f8 <__assert_func>
 801d064:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d068:	6004      	str	r4, [r0, #0]
 801d06a:	60c4      	str	r4, [r0, #12]
 801d06c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d070:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d074:	b94c      	cbnz	r4, 801d08a <__pow5mult+0x66>
 801d076:	f240 2171 	movw	r1, #625	; 0x271
 801d07a:	4630      	mov	r0, r6
 801d07c:	f7ff ff12 	bl	801cea4 <__i2b>
 801d080:	2300      	movs	r3, #0
 801d082:	f8c8 0008 	str.w	r0, [r8, #8]
 801d086:	4604      	mov	r4, r0
 801d088:	6003      	str	r3, [r0, #0]
 801d08a:	f04f 0900 	mov.w	r9, #0
 801d08e:	07eb      	lsls	r3, r5, #31
 801d090:	d50a      	bpl.n	801d0a8 <__pow5mult+0x84>
 801d092:	4639      	mov	r1, r7
 801d094:	4622      	mov	r2, r4
 801d096:	4630      	mov	r0, r6
 801d098:	f7ff ff1a 	bl	801ced0 <__multiply>
 801d09c:	4639      	mov	r1, r7
 801d09e:	4680      	mov	r8, r0
 801d0a0:	4630      	mov	r0, r6
 801d0a2:	f7ff fdfd 	bl	801cca0 <_Bfree>
 801d0a6:	4647      	mov	r7, r8
 801d0a8:	106d      	asrs	r5, r5, #1
 801d0aa:	d00b      	beq.n	801d0c4 <__pow5mult+0xa0>
 801d0ac:	6820      	ldr	r0, [r4, #0]
 801d0ae:	b938      	cbnz	r0, 801d0c0 <__pow5mult+0x9c>
 801d0b0:	4622      	mov	r2, r4
 801d0b2:	4621      	mov	r1, r4
 801d0b4:	4630      	mov	r0, r6
 801d0b6:	f7ff ff0b 	bl	801ced0 <__multiply>
 801d0ba:	6020      	str	r0, [r4, #0]
 801d0bc:	f8c0 9000 	str.w	r9, [r0]
 801d0c0:	4604      	mov	r4, r0
 801d0c2:	e7e4      	b.n	801d08e <__pow5mult+0x6a>
 801d0c4:	4638      	mov	r0, r7
 801d0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d0ca:	bf00      	nop
 801d0cc:	0801ec80 	.word	0x0801ec80
 801d0d0:	0801e939 	.word	0x0801e939
 801d0d4:	0801eb30 	.word	0x0801eb30

0801d0d8 <__lshift>:
 801d0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d0dc:	460c      	mov	r4, r1
 801d0de:	6849      	ldr	r1, [r1, #4]
 801d0e0:	6923      	ldr	r3, [r4, #16]
 801d0e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d0e6:	68a3      	ldr	r3, [r4, #8]
 801d0e8:	4607      	mov	r7, r0
 801d0ea:	4691      	mov	r9, r2
 801d0ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d0f0:	f108 0601 	add.w	r6, r8, #1
 801d0f4:	42b3      	cmp	r3, r6
 801d0f6:	db0b      	blt.n	801d110 <__lshift+0x38>
 801d0f8:	4638      	mov	r0, r7
 801d0fa:	f7ff fd91 	bl	801cc20 <_Balloc>
 801d0fe:	4605      	mov	r5, r0
 801d100:	b948      	cbnz	r0, 801d116 <__lshift+0x3e>
 801d102:	4602      	mov	r2, r0
 801d104:	4b2a      	ldr	r3, [pc, #168]	; (801d1b0 <__lshift+0xd8>)
 801d106:	482b      	ldr	r0, [pc, #172]	; (801d1b4 <__lshift+0xdc>)
 801d108:	f240 11d9 	movw	r1, #473	; 0x1d9
 801d10c:	f7fe f9f4 	bl	801b4f8 <__assert_func>
 801d110:	3101      	adds	r1, #1
 801d112:	005b      	lsls	r3, r3, #1
 801d114:	e7ee      	b.n	801d0f4 <__lshift+0x1c>
 801d116:	2300      	movs	r3, #0
 801d118:	f100 0114 	add.w	r1, r0, #20
 801d11c:	f100 0210 	add.w	r2, r0, #16
 801d120:	4618      	mov	r0, r3
 801d122:	4553      	cmp	r3, sl
 801d124:	db37      	blt.n	801d196 <__lshift+0xbe>
 801d126:	6920      	ldr	r0, [r4, #16]
 801d128:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d12c:	f104 0314 	add.w	r3, r4, #20
 801d130:	f019 091f 	ands.w	r9, r9, #31
 801d134:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d138:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801d13c:	d02f      	beq.n	801d19e <__lshift+0xc6>
 801d13e:	f1c9 0e20 	rsb	lr, r9, #32
 801d142:	468a      	mov	sl, r1
 801d144:	f04f 0c00 	mov.w	ip, #0
 801d148:	681a      	ldr	r2, [r3, #0]
 801d14a:	fa02 f209 	lsl.w	r2, r2, r9
 801d14e:	ea42 020c 	orr.w	r2, r2, ip
 801d152:	f84a 2b04 	str.w	r2, [sl], #4
 801d156:	f853 2b04 	ldr.w	r2, [r3], #4
 801d15a:	4298      	cmp	r0, r3
 801d15c:	fa22 fc0e 	lsr.w	ip, r2, lr
 801d160:	d8f2      	bhi.n	801d148 <__lshift+0x70>
 801d162:	1b03      	subs	r3, r0, r4
 801d164:	3b15      	subs	r3, #21
 801d166:	f023 0303 	bic.w	r3, r3, #3
 801d16a:	3304      	adds	r3, #4
 801d16c:	f104 0215 	add.w	r2, r4, #21
 801d170:	4290      	cmp	r0, r2
 801d172:	bf38      	it	cc
 801d174:	2304      	movcc	r3, #4
 801d176:	f841 c003 	str.w	ip, [r1, r3]
 801d17a:	f1bc 0f00 	cmp.w	ip, #0
 801d17e:	d001      	beq.n	801d184 <__lshift+0xac>
 801d180:	f108 0602 	add.w	r6, r8, #2
 801d184:	3e01      	subs	r6, #1
 801d186:	4638      	mov	r0, r7
 801d188:	612e      	str	r6, [r5, #16]
 801d18a:	4621      	mov	r1, r4
 801d18c:	f7ff fd88 	bl	801cca0 <_Bfree>
 801d190:	4628      	mov	r0, r5
 801d192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d196:	f842 0f04 	str.w	r0, [r2, #4]!
 801d19a:	3301      	adds	r3, #1
 801d19c:	e7c1      	b.n	801d122 <__lshift+0x4a>
 801d19e:	3904      	subs	r1, #4
 801d1a0:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1a4:	f841 2f04 	str.w	r2, [r1, #4]!
 801d1a8:	4298      	cmp	r0, r3
 801d1aa:	d8f9      	bhi.n	801d1a0 <__lshift+0xc8>
 801d1ac:	e7ea      	b.n	801d184 <__lshift+0xac>
 801d1ae:	bf00      	nop
 801d1b0:	0801eaa4 	.word	0x0801eaa4
 801d1b4:	0801eb30 	.word	0x0801eb30

0801d1b8 <__mcmp>:
 801d1b8:	b530      	push	{r4, r5, lr}
 801d1ba:	6902      	ldr	r2, [r0, #16]
 801d1bc:	690c      	ldr	r4, [r1, #16]
 801d1be:	1b12      	subs	r2, r2, r4
 801d1c0:	d10e      	bne.n	801d1e0 <__mcmp+0x28>
 801d1c2:	f100 0314 	add.w	r3, r0, #20
 801d1c6:	3114      	adds	r1, #20
 801d1c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d1cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d1d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d1d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d1d8:	42a5      	cmp	r5, r4
 801d1da:	d003      	beq.n	801d1e4 <__mcmp+0x2c>
 801d1dc:	d305      	bcc.n	801d1ea <__mcmp+0x32>
 801d1de:	2201      	movs	r2, #1
 801d1e0:	4610      	mov	r0, r2
 801d1e2:	bd30      	pop	{r4, r5, pc}
 801d1e4:	4283      	cmp	r3, r0
 801d1e6:	d3f3      	bcc.n	801d1d0 <__mcmp+0x18>
 801d1e8:	e7fa      	b.n	801d1e0 <__mcmp+0x28>
 801d1ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d1ee:	e7f7      	b.n	801d1e0 <__mcmp+0x28>

0801d1f0 <__mdiff>:
 801d1f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1f4:	460c      	mov	r4, r1
 801d1f6:	4606      	mov	r6, r0
 801d1f8:	4611      	mov	r1, r2
 801d1fa:	4620      	mov	r0, r4
 801d1fc:	4690      	mov	r8, r2
 801d1fe:	f7ff ffdb 	bl	801d1b8 <__mcmp>
 801d202:	1e05      	subs	r5, r0, #0
 801d204:	d110      	bne.n	801d228 <__mdiff+0x38>
 801d206:	4629      	mov	r1, r5
 801d208:	4630      	mov	r0, r6
 801d20a:	f7ff fd09 	bl	801cc20 <_Balloc>
 801d20e:	b930      	cbnz	r0, 801d21e <__mdiff+0x2e>
 801d210:	4b3a      	ldr	r3, [pc, #232]	; (801d2fc <__mdiff+0x10c>)
 801d212:	4602      	mov	r2, r0
 801d214:	f240 2132 	movw	r1, #562	; 0x232
 801d218:	4839      	ldr	r0, [pc, #228]	; (801d300 <__mdiff+0x110>)
 801d21a:	f7fe f96d 	bl	801b4f8 <__assert_func>
 801d21e:	2301      	movs	r3, #1
 801d220:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d228:	bfa4      	itt	ge
 801d22a:	4643      	movge	r3, r8
 801d22c:	46a0      	movge	r8, r4
 801d22e:	4630      	mov	r0, r6
 801d230:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d234:	bfa6      	itte	ge
 801d236:	461c      	movge	r4, r3
 801d238:	2500      	movge	r5, #0
 801d23a:	2501      	movlt	r5, #1
 801d23c:	f7ff fcf0 	bl	801cc20 <_Balloc>
 801d240:	b920      	cbnz	r0, 801d24c <__mdiff+0x5c>
 801d242:	4b2e      	ldr	r3, [pc, #184]	; (801d2fc <__mdiff+0x10c>)
 801d244:	4602      	mov	r2, r0
 801d246:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d24a:	e7e5      	b.n	801d218 <__mdiff+0x28>
 801d24c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d250:	6926      	ldr	r6, [r4, #16]
 801d252:	60c5      	str	r5, [r0, #12]
 801d254:	f104 0914 	add.w	r9, r4, #20
 801d258:	f108 0514 	add.w	r5, r8, #20
 801d25c:	f100 0e14 	add.w	lr, r0, #20
 801d260:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d264:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d268:	f108 0210 	add.w	r2, r8, #16
 801d26c:	46f2      	mov	sl, lr
 801d26e:	2100      	movs	r1, #0
 801d270:	f859 3b04 	ldr.w	r3, [r9], #4
 801d274:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d278:	fa1f f883 	uxth.w	r8, r3
 801d27c:	fa11 f18b 	uxtah	r1, r1, fp
 801d280:	0c1b      	lsrs	r3, r3, #16
 801d282:	eba1 0808 	sub.w	r8, r1, r8
 801d286:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d28a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d28e:	fa1f f888 	uxth.w	r8, r8
 801d292:	1419      	asrs	r1, r3, #16
 801d294:	454e      	cmp	r6, r9
 801d296:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d29a:	f84a 3b04 	str.w	r3, [sl], #4
 801d29e:	d8e7      	bhi.n	801d270 <__mdiff+0x80>
 801d2a0:	1b33      	subs	r3, r6, r4
 801d2a2:	3b15      	subs	r3, #21
 801d2a4:	f023 0303 	bic.w	r3, r3, #3
 801d2a8:	3304      	adds	r3, #4
 801d2aa:	3415      	adds	r4, #21
 801d2ac:	42a6      	cmp	r6, r4
 801d2ae:	bf38      	it	cc
 801d2b0:	2304      	movcc	r3, #4
 801d2b2:	441d      	add	r5, r3
 801d2b4:	4473      	add	r3, lr
 801d2b6:	469e      	mov	lr, r3
 801d2b8:	462e      	mov	r6, r5
 801d2ba:	4566      	cmp	r6, ip
 801d2bc:	d30e      	bcc.n	801d2dc <__mdiff+0xec>
 801d2be:	f10c 0203 	add.w	r2, ip, #3
 801d2c2:	1b52      	subs	r2, r2, r5
 801d2c4:	f022 0203 	bic.w	r2, r2, #3
 801d2c8:	3d03      	subs	r5, #3
 801d2ca:	45ac      	cmp	ip, r5
 801d2cc:	bf38      	it	cc
 801d2ce:	2200      	movcc	r2, #0
 801d2d0:	441a      	add	r2, r3
 801d2d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d2d6:	b17b      	cbz	r3, 801d2f8 <__mdiff+0x108>
 801d2d8:	6107      	str	r7, [r0, #16]
 801d2da:	e7a3      	b.n	801d224 <__mdiff+0x34>
 801d2dc:	f856 8b04 	ldr.w	r8, [r6], #4
 801d2e0:	fa11 f288 	uxtah	r2, r1, r8
 801d2e4:	1414      	asrs	r4, r2, #16
 801d2e6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d2ea:	b292      	uxth	r2, r2
 801d2ec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d2f0:	f84e 2b04 	str.w	r2, [lr], #4
 801d2f4:	1421      	asrs	r1, r4, #16
 801d2f6:	e7e0      	b.n	801d2ba <__mdiff+0xca>
 801d2f8:	3f01      	subs	r7, #1
 801d2fa:	e7ea      	b.n	801d2d2 <__mdiff+0xe2>
 801d2fc:	0801eaa4 	.word	0x0801eaa4
 801d300:	0801eb30 	.word	0x0801eb30

0801d304 <__ulp>:
 801d304:	b082      	sub	sp, #8
 801d306:	ed8d 0b00 	vstr	d0, [sp]
 801d30a:	9b01      	ldr	r3, [sp, #4]
 801d30c:	4912      	ldr	r1, [pc, #72]	; (801d358 <__ulp+0x54>)
 801d30e:	4019      	ands	r1, r3
 801d310:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801d314:	2900      	cmp	r1, #0
 801d316:	dd05      	ble.n	801d324 <__ulp+0x20>
 801d318:	2200      	movs	r2, #0
 801d31a:	460b      	mov	r3, r1
 801d31c:	ec43 2b10 	vmov	d0, r2, r3
 801d320:	b002      	add	sp, #8
 801d322:	4770      	bx	lr
 801d324:	4249      	negs	r1, r1
 801d326:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801d32a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801d32e:	f04f 0200 	mov.w	r2, #0
 801d332:	f04f 0300 	mov.w	r3, #0
 801d336:	da04      	bge.n	801d342 <__ulp+0x3e>
 801d338:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801d33c:	fa41 f300 	asr.w	r3, r1, r0
 801d340:	e7ec      	b.n	801d31c <__ulp+0x18>
 801d342:	f1a0 0114 	sub.w	r1, r0, #20
 801d346:	291e      	cmp	r1, #30
 801d348:	bfda      	itte	le
 801d34a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801d34e:	fa20 f101 	lsrle.w	r1, r0, r1
 801d352:	2101      	movgt	r1, #1
 801d354:	460a      	mov	r2, r1
 801d356:	e7e1      	b.n	801d31c <__ulp+0x18>
 801d358:	7ff00000 	.word	0x7ff00000

0801d35c <__b2d>:
 801d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d35e:	6905      	ldr	r5, [r0, #16]
 801d360:	f100 0714 	add.w	r7, r0, #20
 801d364:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801d368:	1f2e      	subs	r6, r5, #4
 801d36a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801d36e:	4620      	mov	r0, r4
 801d370:	f7ff fd48 	bl	801ce04 <__hi0bits>
 801d374:	f1c0 0320 	rsb	r3, r0, #32
 801d378:	280a      	cmp	r0, #10
 801d37a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801d3f8 <__b2d+0x9c>
 801d37e:	600b      	str	r3, [r1, #0]
 801d380:	dc14      	bgt.n	801d3ac <__b2d+0x50>
 801d382:	f1c0 0e0b 	rsb	lr, r0, #11
 801d386:	fa24 f10e 	lsr.w	r1, r4, lr
 801d38a:	42b7      	cmp	r7, r6
 801d38c:	ea41 030c 	orr.w	r3, r1, ip
 801d390:	bf34      	ite	cc
 801d392:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d396:	2100      	movcs	r1, #0
 801d398:	3015      	adds	r0, #21
 801d39a:	fa04 f000 	lsl.w	r0, r4, r0
 801d39e:	fa21 f10e 	lsr.w	r1, r1, lr
 801d3a2:	ea40 0201 	orr.w	r2, r0, r1
 801d3a6:	ec43 2b10 	vmov	d0, r2, r3
 801d3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d3ac:	42b7      	cmp	r7, r6
 801d3ae:	bf3a      	itte	cc
 801d3b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d3b4:	f1a5 0608 	subcc.w	r6, r5, #8
 801d3b8:	2100      	movcs	r1, #0
 801d3ba:	380b      	subs	r0, #11
 801d3bc:	d017      	beq.n	801d3ee <__b2d+0x92>
 801d3be:	f1c0 0c20 	rsb	ip, r0, #32
 801d3c2:	fa04 f500 	lsl.w	r5, r4, r0
 801d3c6:	42be      	cmp	r6, r7
 801d3c8:	fa21 f40c 	lsr.w	r4, r1, ip
 801d3cc:	ea45 0504 	orr.w	r5, r5, r4
 801d3d0:	bf8c      	ite	hi
 801d3d2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801d3d6:	2400      	movls	r4, #0
 801d3d8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801d3dc:	fa01 f000 	lsl.w	r0, r1, r0
 801d3e0:	fa24 f40c 	lsr.w	r4, r4, ip
 801d3e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d3e8:	ea40 0204 	orr.w	r2, r0, r4
 801d3ec:	e7db      	b.n	801d3a6 <__b2d+0x4a>
 801d3ee:	ea44 030c 	orr.w	r3, r4, ip
 801d3f2:	460a      	mov	r2, r1
 801d3f4:	e7d7      	b.n	801d3a6 <__b2d+0x4a>
 801d3f6:	bf00      	nop
 801d3f8:	3ff00000 	.word	0x3ff00000

0801d3fc <__d2b>:
 801d3fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d400:	4689      	mov	r9, r1
 801d402:	2101      	movs	r1, #1
 801d404:	ec57 6b10 	vmov	r6, r7, d0
 801d408:	4690      	mov	r8, r2
 801d40a:	f7ff fc09 	bl	801cc20 <_Balloc>
 801d40e:	4604      	mov	r4, r0
 801d410:	b930      	cbnz	r0, 801d420 <__d2b+0x24>
 801d412:	4602      	mov	r2, r0
 801d414:	4b25      	ldr	r3, [pc, #148]	; (801d4ac <__d2b+0xb0>)
 801d416:	4826      	ldr	r0, [pc, #152]	; (801d4b0 <__d2b+0xb4>)
 801d418:	f240 310a 	movw	r1, #778	; 0x30a
 801d41c:	f7fe f86c 	bl	801b4f8 <__assert_func>
 801d420:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d424:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d428:	bb35      	cbnz	r5, 801d478 <__d2b+0x7c>
 801d42a:	2e00      	cmp	r6, #0
 801d42c:	9301      	str	r3, [sp, #4]
 801d42e:	d028      	beq.n	801d482 <__d2b+0x86>
 801d430:	4668      	mov	r0, sp
 801d432:	9600      	str	r6, [sp, #0]
 801d434:	f7ff fd06 	bl	801ce44 <__lo0bits>
 801d438:	9900      	ldr	r1, [sp, #0]
 801d43a:	b300      	cbz	r0, 801d47e <__d2b+0x82>
 801d43c:	9a01      	ldr	r2, [sp, #4]
 801d43e:	f1c0 0320 	rsb	r3, r0, #32
 801d442:	fa02 f303 	lsl.w	r3, r2, r3
 801d446:	430b      	orrs	r3, r1
 801d448:	40c2      	lsrs	r2, r0
 801d44a:	6163      	str	r3, [r4, #20]
 801d44c:	9201      	str	r2, [sp, #4]
 801d44e:	9b01      	ldr	r3, [sp, #4]
 801d450:	61a3      	str	r3, [r4, #24]
 801d452:	2b00      	cmp	r3, #0
 801d454:	bf14      	ite	ne
 801d456:	2202      	movne	r2, #2
 801d458:	2201      	moveq	r2, #1
 801d45a:	6122      	str	r2, [r4, #16]
 801d45c:	b1d5      	cbz	r5, 801d494 <__d2b+0x98>
 801d45e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d462:	4405      	add	r5, r0
 801d464:	f8c9 5000 	str.w	r5, [r9]
 801d468:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d46c:	f8c8 0000 	str.w	r0, [r8]
 801d470:	4620      	mov	r0, r4
 801d472:	b003      	add	sp, #12
 801d474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d478:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d47c:	e7d5      	b.n	801d42a <__d2b+0x2e>
 801d47e:	6161      	str	r1, [r4, #20]
 801d480:	e7e5      	b.n	801d44e <__d2b+0x52>
 801d482:	a801      	add	r0, sp, #4
 801d484:	f7ff fcde 	bl	801ce44 <__lo0bits>
 801d488:	9b01      	ldr	r3, [sp, #4]
 801d48a:	6163      	str	r3, [r4, #20]
 801d48c:	2201      	movs	r2, #1
 801d48e:	6122      	str	r2, [r4, #16]
 801d490:	3020      	adds	r0, #32
 801d492:	e7e3      	b.n	801d45c <__d2b+0x60>
 801d494:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d498:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d49c:	f8c9 0000 	str.w	r0, [r9]
 801d4a0:	6918      	ldr	r0, [r3, #16]
 801d4a2:	f7ff fcaf 	bl	801ce04 <__hi0bits>
 801d4a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d4aa:	e7df      	b.n	801d46c <__d2b+0x70>
 801d4ac:	0801eaa4 	.word	0x0801eaa4
 801d4b0:	0801eb30 	.word	0x0801eb30

0801d4b4 <__ratio>:
 801d4b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4b8:	4688      	mov	r8, r1
 801d4ba:	4669      	mov	r1, sp
 801d4bc:	4681      	mov	r9, r0
 801d4be:	f7ff ff4d 	bl	801d35c <__b2d>
 801d4c2:	a901      	add	r1, sp, #4
 801d4c4:	4640      	mov	r0, r8
 801d4c6:	ec55 4b10 	vmov	r4, r5, d0
 801d4ca:	f7ff ff47 	bl	801d35c <__b2d>
 801d4ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d4d2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d4d6:	eba3 0c02 	sub.w	ip, r3, r2
 801d4da:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d4de:	1a9b      	subs	r3, r3, r2
 801d4e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d4e4:	ec51 0b10 	vmov	r0, r1, d0
 801d4e8:	2b00      	cmp	r3, #0
 801d4ea:	bfd6      	itet	le
 801d4ec:	460a      	movle	r2, r1
 801d4ee:	462a      	movgt	r2, r5
 801d4f0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d4f4:	468b      	mov	fp, r1
 801d4f6:	462f      	mov	r7, r5
 801d4f8:	bfd4      	ite	le
 801d4fa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d4fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d502:	4620      	mov	r0, r4
 801d504:	ee10 2a10 	vmov	r2, s0
 801d508:	465b      	mov	r3, fp
 801d50a:	4639      	mov	r1, r7
 801d50c:	f7e3 f9b6 	bl	800087c <__aeabi_ddiv>
 801d510:	ec41 0b10 	vmov	d0, r0, r1
 801d514:	b003      	add	sp, #12
 801d516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d51a <__copybits>:
 801d51a:	3901      	subs	r1, #1
 801d51c:	b570      	push	{r4, r5, r6, lr}
 801d51e:	1149      	asrs	r1, r1, #5
 801d520:	6914      	ldr	r4, [r2, #16]
 801d522:	3101      	adds	r1, #1
 801d524:	f102 0314 	add.w	r3, r2, #20
 801d528:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d52c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d530:	1f05      	subs	r5, r0, #4
 801d532:	42a3      	cmp	r3, r4
 801d534:	d30c      	bcc.n	801d550 <__copybits+0x36>
 801d536:	1aa3      	subs	r3, r4, r2
 801d538:	3b11      	subs	r3, #17
 801d53a:	f023 0303 	bic.w	r3, r3, #3
 801d53e:	3211      	adds	r2, #17
 801d540:	42a2      	cmp	r2, r4
 801d542:	bf88      	it	hi
 801d544:	2300      	movhi	r3, #0
 801d546:	4418      	add	r0, r3
 801d548:	2300      	movs	r3, #0
 801d54a:	4288      	cmp	r0, r1
 801d54c:	d305      	bcc.n	801d55a <__copybits+0x40>
 801d54e:	bd70      	pop	{r4, r5, r6, pc}
 801d550:	f853 6b04 	ldr.w	r6, [r3], #4
 801d554:	f845 6f04 	str.w	r6, [r5, #4]!
 801d558:	e7eb      	b.n	801d532 <__copybits+0x18>
 801d55a:	f840 3b04 	str.w	r3, [r0], #4
 801d55e:	e7f4      	b.n	801d54a <__copybits+0x30>

0801d560 <__any_on>:
 801d560:	f100 0214 	add.w	r2, r0, #20
 801d564:	6900      	ldr	r0, [r0, #16]
 801d566:	114b      	asrs	r3, r1, #5
 801d568:	4298      	cmp	r0, r3
 801d56a:	b510      	push	{r4, lr}
 801d56c:	db11      	blt.n	801d592 <__any_on+0x32>
 801d56e:	dd0a      	ble.n	801d586 <__any_on+0x26>
 801d570:	f011 011f 	ands.w	r1, r1, #31
 801d574:	d007      	beq.n	801d586 <__any_on+0x26>
 801d576:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d57a:	fa24 f001 	lsr.w	r0, r4, r1
 801d57e:	fa00 f101 	lsl.w	r1, r0, r1
 801d582:	428c      	cmp	r4, r1
 801d584:	d10b      	bne.n	801d59e <__any_on+0x3e>
 801d586:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d58a:	4293      	cmp	r3, r2
 801d58c:	d803      	bhi.n	801d596 <__any_on+0x36>
 801d58e:	2000      	movs	r0, #0
 801d590:	bd10      	pop	{r4, pc}
 801d592:	4603      	mov	r3, r0
 801d594:	e7f7      	b.n	801d586 <__any_on+0x26>
 801d596:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d59a:	2900      	cmp	r1, #0
 801d59c:	d0f5      	beq.n	801d58a <__any_on+0x2a>
 801d59e:	2001      	movs	r0, #1
 801d5a0:	e7f6      	b.n	801d590 <__any_on+0x30>

0801d5a2 <_realloc_r>:
 801d5a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5a6:	4680      	mov	r8, r0
 801d5a8:	4614      	mov	r4, r2
 801d5aa:	460e      	mov	r6, r1
 801d5ac:	b921      	cbnz	r1, 801d5b8 <_realloc_r+0x16>
 801d5ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d5b2:	4611      	mov	r1, r2
 801d5b4:	f7fb be24 	b.w	8019200 <_malloc_r>
 801d5b8:	b92a      	cbnz	r2, 801d5c6 <_realloc_r+0x24>
 801d5ba:	f7fb fdb5 	bl	8019128 <_free_r>
 801d5be:	4625      	mov	r5, r4
 801d5c0:	4628      	mov	r0, r5
 801d5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5c6:	f000 fb21 	bl	801dc0c <_malloc_usable_size_r>
 801d5ca:	4284      	cmp	r4, r0
 801d5cc:	4607      	mov	r7, r0
 801d5ce:	d802      	bhi.n	801d5d6 <_realloc_r+0x34>
 801d5d0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d5d4:	d812      	bhi.n	801d5fc <_realloc_r+0x5a>
 801d5d6:	4621      	mov	r1, r4
 801d5d8:	4640      	mov	r0, r8
 801d5da:	f7fb fe11 	bl	8019200 <_malloc_r>
 801d5de:	4605      	mov	r5, r0
 801d5e0:	2800      	cmp	r0, #0
 801d5e2:	d0ed      	beq.n	801d5c0 <_realloc_r+0x1e>
 801d5e4:	42bc      	cmp	r4, r7
 801d5e6:	4622      	mov	r2, r4
 801d5e8:	4631      	mov	r1, r6
 801d5ea:	bf28      	it	cs
 801d5ec:	463a      	movcs	r2, r7
 801d5ee:	f7fb fd55 	bl	801909c <memcpy>
 801d5f2:	4631      	mov	r1, r6
 801d5f4:	4640      	mov	r0, r8
 801d5f6:	f7fb fd97 	bl	8019128 <_free_r>
 801d5fa:	e7e1      	b.n	801d5c0 <_realloc_r+0x1e>
 801d5fc:	4635      	mov	r5, r6
 801d5fe:	e7df      	b.n	801d5c0 <_realloc_r+0x1e>

0801d600 <__ssputs_r>:
 801d600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d604:	688e      	ldr	r6, [r1, #8]
 801d606:	429e      	cmp	r6, r3
 801d608:	4682      	mov	sl, r0
 801d60a:	460c      	mov	r4, r1
 801d60c:	4690      	mov	r8, r2
 801d60e:	461f      	mov	r7, r3
 801d610:	d838      	bhi.n	801d684 <__ssputs_r+0x84>
 801d612:	898a      	ldrh	r2, [r1, #12]
 801d614:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d618:	d032      	beq.n	801d680 <__ssputs_r+0x80>
 801d61a:	6825      	ldr	r5, [r4, #0]
 801d61c:	6909      	ldr	r1, [r1, #16]
 801d61e:	eba5 0901 	sub.w	r9, r5, r1
 801d622:	6965      	ldr	r5, [r4, #20]
 801d624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d628:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d62c:	3301      	adds	r3, #1
 801d62e:	444b      	add	r3, r9
 801d630:	106d      	asrs	r5, r5, #1
 801d632:	429d      	cmp	r5, r3
 801d634:	bf38      	it	cc
 801d636:	461d      	movcc	r5, r3
 801d638:	0553      	lsls	r3, r2, #21
 801d63a:	d531      	bpl.n	801d6a0 <__ssputs_r+0xa0>
 801d63c:	4629      	mov	r1, r5
 801d63e:	f7fb fddf 	bl	8019200 <_malloc_r>
 801d642:	4606      	mov	r6, r0
 801d644:	b950      	cbnz	r0, 801d65c <__ssputs_r+0x5c>
 801d646:	230c      	movs	r3, #12
 801d648:	f8ca 3000 	str.w	r3, [sl]
 801d64c:	89a3      	ldrh	r3, [r4, #12]
 801d64e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d652:	81a3      	strh	r3, [r4, #12]
 801d654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d65c:	6921      	ldr	r1, [r4, #16]
 801d65e:	464a      	mov	r2, r9
 801d660:	f7fb fd1c 	bl	801909c <memcpy>
 801d664:	89a3      	ldrh	r3, [r4, #12]
 801d666:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d66a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d66e:	81a3      	strh	r3, [r4, #12]
 801d670:	6126      	str	r6, [r4, #16]
 801d672:	6165      	str	r5, [r4, #20]
 801d674:	444e      	add	r6, r9
 801d676:	eba5 0509 	sub.w	r5, r5, r9
 801d67a:	6026      	str	r6, [r4, #0]
 801d67c:	60a5      	str	r5, [r4, #8]
 801d67e:	463e      	mov	r6, r7
 801d680:	42be      	cmp	r6, r7
 801d682:	d900      	bls.n	801d686 <__ssputs_r+0x86>
 801d684:	463e      	mov	r6, r7
 801d686:	6820      	ldr	r0, [r4, #0]
 801d688:	4632      	mov	r2, r6
 801d68a:	4641      	mov	r1, r8
 801d68c:	f7fb fd14 	bl	80190b8 <memmove>
 801d690:	68a3      	ldr	r3, [r4, #8]
 801d692:	1b9b      	subs	r3, r3, r6
 801d694:	60a3      	str	r3, [r4, #8]
 801d696:	6823      	ldr	r3, [r4, #0]
 801d698:	4433      	add	r3, r6
 801d69a:	6023      	str	r3, [r4, #0]
 801d69c:	2000      	movs	r0, #0
 801d69e:	e7db      	b.n	801d658 <__ssputs_r+0x58>
 801d6a0:	462a      	mov	r2, r5
 801d6a2:	f7ff ff7e 	bl	801d5a2 <_realloc_r>
 801d6a6:	4606      	mov	r6, r0
 801d6a8:	2800      	cmp	r0, #0
 801d6aa:	d1e1      	bne.n	801d670 <__ssputs_r+0x70>
 801d6ac:	6921      	ldr	r1, [r4, #16]
 801d6ae:	4650      	mov	r0, sl
 801d6b0:	f7fb fd3a 	bl	8019128 <_free_r>
 801d6b4:	e7c7      	b.n	801d646 <__ssputs_r+0x46>
	...

0801d6b8 <_svfiprintf_r>:
 801d6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6bc:	4698      	mov	r8, r3
 801d6be:	898b      	ldrh	r3, [r1, #12]
 801d6c0:	061b      	lsls	r3, r3, #24
 801d6c2:	b09d      	sub	sp, #116	; 0x74
 801d6c4:	4607      	mov	r7, r0
 801d6c6:	460d      	mov	r5, r1
 801d6c8:	4614      	mov	r4, r2
 801d6ca:	d50e      	bpl.n	801d6ea <_svfiprintf_r+0x32>
 801d6cc:	690b      	ldr	r3, [r1, #16]
 801d6ce:	b963      	cbnz	r3, 801d6ea <_svfiprintf_r+0x32>
 801d6d0:	2140      	movs	r1, #64	; 0x40
 801d6d2:	f7fb fd95 	bl	8019200 <_malloc_r>
 801d6d6:	6028      	str	r0, [r5, #0]
 801d6d8:	6128      	str	r0, [r5, #16]
 801d6da:	b920      	cbnz	r0, 801d6e6 <_svfiprintf_r+0x2e>
 801d6dc:	230c      	movs	r3, #12
 801d6de:	603b      	str	r3, [r7, #0]
 801d6e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d6e4:	e0d1      	b.n	801d88a <_svfiprintf_r+0x1d2>
 801d6e6:	2340      	movs	r3, #64	; 0x40
 801d6e8:	616b      	str	r3, [r5, #20]
 801d6ea:	2300      	movs	r3, #0
 801d6ec:	9309      	str	r3, [sp, #36]	; 0x24
 801d6ee:	2320      	movs	r3, #32
 801d6f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d6f4:	f8cd 800c 	str.w	r8, [sp, #12]
 801d6f8:	2330      	movs	r3, #48	; 0x30
 801d6fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d8a4 <_svfiprintf_r+0x1ec>
 801d6fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d702:	f04f 0901 	mov.w	r9, #1
 801d706:	4623      	mov	r3, r4
 801d708:	469a      	mov	sl, r3
 801d70a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d70e:	b10a      	cbz	r2, 801d714 <_svfiprintf_r+0x5c>
 801d710:	2a25      	cmp	r2, #37	; 0x25
 801d712:	d1f9      	bne.n	801d708 <_svfiprintf_r+0x50>
 801d714:	ebba 0b04 	subs.w	fp, sl, r4
 801d718:	d00b      	beq.n	801d732 <_svfiprintf_r+0x7a>
 801d71a:	465b      	mov	r3, fp
 801d71c:	4622      	mov	r2, r4
 801d71e:	4629      	mov	r1, r5
 801d720:	4638      	mov	r0, r7
 801d722:	f7ff ff6d 	bl	801d600 <__ssputs_r>
 801d726:	3001      	adds	r0, #1
 801d728:	f000 80aa 	beq.w	801d880 <_svfiprintf_r+0x1c8>
 801d72c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d72e:	445a      	add	r2, fp
 801d730:	9209      	str	r2, [sp, #36]	; 0x24
 801d732:	f89a 3000 	ldrb.w	r3, [sl]
 801d736:	2b00      	cmp	r3, #0
 801d738:	f000 80a2 	beq.w	801d880 <_svfiprintf_r+0x1c8>
 801d73c:	2300      	movs	r3, #0
 801d73e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d746:	f10a 0a01 	add.w	sl, sl, #1
 801d74a:	9304      	str	r3, [sp, #16]
 801d74c:	9307      	str	r3, [sp, #28]
 801d74e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d752:	931a      	str	r3, [sp, #104]	; 0x68
 801d754:	4654      	mov	r4, sl
 801d756:	2205      	movs	r2, #5
 801d758:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d75c:	4851      	ldr	r0, [pc, #324]	; (801d8a4 <_svfiprintf_r+0x1ec>)
 801d75e:	f7e2 fd57 	bl	8000210 <memchr>
 801d762:	9a04      	ldr	r2, [sp, #16]
 801d764:	b9d8      	cbnz	r0, 801d79e <_svfiprintf_r+0xe6>
 801d766:	06d0      	lsls	r0, r2, #27
 801d768:	bf44      	itt	mi
 801d76a:	2320      	movmi	r3, #32
 801d76c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d770:	0711      	lsls	r1, r2, #28
 801d772:	bf44      	itt	mi
 801d774:	232b      	movmi	r3, #43	; 0x2b
 801d776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d77a:	f89a 3000 	ldrb.w	r3, [sl]
 801d77e:	2b2a      	cmp	r3, #42	; 0x2a
 801d780:	d015      	beq.n	801d7ae <_svfiprintf_r+0xf6>
 801d782:	9a07      	ldr	r2, [sp, #28]
 801d784:	4654      	mov	r4, sl
 801d786:	2000      	movs	r0, #0
 801d788:	f04f 0c0a 	mov.w	ip, #10
 801d78c:	4621      	mov	r1, r4
 801d78e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d792:	3b30      	subs	r3, #48	; 0x30
 801d794:	2b09      	cmp	r3, #9
 801d796:	d94e      	bls.n	801d836 <_svfiprintf_r+0x17e>
 801d798:	b1b0      	cbz	r0, 801d7c8 <_svfiprintf_r+0x110>
 801d79a:	9207      	str	r2, [sp, #28]
 801d79c:	e014      	b.n	801d7c8 <_svfiprintf_r+0x110>
 801d79e:	eba0 0308 	sub.w	r3, r0, r8
 801d7a2:	fa09 f303 	lsl.w	r3, r9, r3
 801d7a6:	4313      	orrs	r3, r2
 801d7a8:	9304      	str	r3, [sp, #16]
 801d7aa:	46a2      	mov	sl, r4
 801d7ac:	e7d2      	b.n	801d754 <_svfiprintf_r+0x9c>
 801d7ae:	9b03      	ldr	r3, [sp, #12]
 801d7b0:	1d19      	adds	r1, r3, #4
 801d7b2:	681b      	ldr	r3, [r3, #0]
 801d7b4:	9103      	str	r1, [sp, #12]
 801d7b6:	2b00      	cmp	r3, #0
 801d7b8:	bfbb      	ittet	lt
 801d7ba:	425b      	neglt	r3, r3
 801d7bc:	f042 0202 	orrlt.w	r2, r2, #2
 801d7c0:	9307      	strge	r3, [sp, #28]
 801d7c2:	9307      	strlt	r3, [sp, #28]
 801d7c4:	bfb8      	it	lt
 801d7c6:	9204      	strlt	r2, [sp, #16]
 801d7c8:	7823      	ldrb	r3, [r4, #0]
 801d7ca:	2b2e      	cmp	r3, #46	; 0x2e
 801d7cc:	d10c      	bne.n	801d7e8 <_svfiprintf_r+0x130>
 801d7ce:	7863      	ldrb	r3, [r4, #1]
 801d7d0:	2b2a      	cmp	r3, #42	; 0x2a
 801d7d2:	d135      	bne.n	801d840 <_svfiprintf_r+0x188>
 801d7d4:	9b03      	ldr	r3, [sp, #12]
 801d7d6:	1d1a      	adds	r2, r3, #4
 801d7d8:	681b      	ldr	r3, [r3, #0]
 801d7da:	9203      	str	r2, [sp, #12]
 801d7dc:	2b00      	cmp	r3, #0
 801d7de:	bfb8      	it	lt
 801d7e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d7e4:	3402      	adds	r4, #2
 801d7e6:	9305      	str	r3, [sp, #20]
 801d7e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d8b4 <_svfiprintf_r+0x1fc>
 801d7ec:	7821      	ldrb	r1, [r4, #0]
 801d7ee:	2203      	movs	r2, #3
 801d7f0:	4650      	mov	r0, sl
 801d7f2:	f7e2 fd0d 	bl	8000210 <memchr>
 801d7f6:	b140      	cbz	r0, 801d80a <_svfiprintf_r+0x152>
 801d7f8:	2340      	movs	r3, #64	; 0x40
 801d7fa:	eba0 000a 	sub.w	r0, r0, sl
 801d7fe:	fa03 f000 	lsl.w	r0, r3, r0
 801d802:	9b04      	ldr	r3, [sp, #16]
 801d804:	4303      	orrs	r3, r0
 801d806:	3401      	adds	r4, #1
 801d808:	9304      	str	r3, [sp, #16]
 801d80a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d80e:	4826      	ldr	r0, [pc, #152]	; (801d8a8 <_svfiprintf_r+0x1f0>)
 801d810:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d814:	2206      	movs	r2, #6
 801d816:	f7e2 fcfb 	bl	8000210 <memchr>
 801d81a:	2800      	cmp	r0, #0
 801d81c:	d038      	beq.n	801d890 <_svfiprintf_r+0x1d8>
 801d81e:	4b23      	ldr	r3, [pc, #140]	; (801d8ac <_svfiprintf_r+0x1f4>)
 801d820:	bb1b      	cbnz	r3, 801d86a <_svfiprintf_r+0x1b2>
 801d822:	9b03      	ldr	r3, [sp, #12]
 801d824:	3307      	adds	r3, #7
 801d826:	f023 0307 	bic.w	r3, r3, #7
 801d82a:	3308      	adds	r3, #8
 801d82c:	9303      	str	r3, [sp, #12]
 801d82e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d830:	4433      	add	r3, r6
 801d832:	9309      	str	r3, [sp, #36]	; 0x24
 801d834:	e767      	b.n	801d706 <_svfiprintf_r+0x4e>
 801d836:	fb0c 3202 	mla	r2, ip, r2, r3
 801d83a:	460c      	mov	r4, r1
 801d83c:	2001      	movs	r0, #1
 801d83e:	e7a5      	b.n	801d78c <_svfiprintf_r+0xd4>
 801d840:	2300      	movs	r3, #0
 801d842:	3401      	adds	r4, #1
 801d844:	9305      	str	r3, [sp, #20]
 801d846:	4619      	mov	r1, r3
 801d848:	f04f 0c0a 	mov.w	ip, #10
 801d84c:	4620      	mov	r0, r4
 801d84e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d852:	3a30      	subs	r2, #48	; 0x30
 801d854:	2a09      	cmp	r2, #9
 801d856:	d903      	bls.n	801d860 <_svfiprintf_r+0x1a8>
 801d858:	2b00      	cmp	r3, #0
 801d85a:	d0c5      	beq.n	801d7e8 <_svfiprintf_r+0x130>
 801d85c:	9105      	str	r1, [sp, #20]
 801d85e:	e7c3      	b.n	801d7e8 <_svfiprintf_r+0x130>
 801d860:	fb0c 2101 	mla	r1, ip, r1, r2
 801d864:	4604      	mov	r4, r0
 801d866:	2301      	movs	r3, #1
 801d868:	e7f0      	b.n	801d84c <_svfiprintf_r+0x194>
 801d86a:	ab03      	add	r3, sp, #12
 801d86c:	9300      	str	r3, [sp, #0]
 801d86e:	462a      	mov	r2, r5
 801d870:	4b0f      	ldr	r3, [pc, #60]	; (801d8b0 <_svfiprintf_r+0x1f8>)
 801d872:	a904      	add	r1, sp, #16
 801d874:	4638      	mov	r0, r7
 801d876:	f7fb fdd7 	bl	8019428 <_printf_float>
 801d87a:	1c42      	adds	r2, r0, #1
 801d87c:	4606      	mov	r6, r0
 801d87e:	d1d6      	bne.n	801d82e <_svfiprintf_r+0x176>
 801d880:	89ab      	ldrh	r3, [r5, #12]
 801d882:	065b      	lsls	r3, r3, #25
 801d884:	f53f af2c 	bmi.w	801d6e0 <_svfiprintf_r+0x28>
 801d888:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d88a:	b01d      	add	sp, #116	; 0x74
 801d88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d890:	ab03      	add	r3, sp, #12
 801d892:	9300      	str	r3, [sp, #0]
 801d894:	462a      	mov	r2, r5
 801d896:	4b06      	ldr	r3, [pc, #24]	; (801d8b0 <_svfiprintf_r+0x1f8>)
 801d898:	a904      	add	r1, sp, #16
 801d89a:	4638      	mov	r0, r7
 801d89c:	f7fc f868 	bl	8019970 <_printf_i>
 801d8a0:	e7eb      	b.n	801d87a <_svfiprintf_r+0x1c2>
 801d8a2:	bf00      	nop
 801d8a4:	0801ec8c 	.word	0x0801ec8c
 801d8a8:	0801ec96 	.word	0x0801ec96
 801d8ac:	08019429 	.word	0x08019429
 801d8b0:	0801d601 	.word	0x0801d601
 801d8b4:	0801ec92 	.word	0x0801ec92

0801d8b8 <__sfputc_r>:
 801d8b8:	6893      	ldr	r3, [r2, #8]
 801d8ba:	3b01      	subs	r3, #1
 801d8bc:	2b00      	cmp	r3, #0
 801d8be:	b410      	push	{r4}
 801d8c0:	6093      	str	r3, [r2, #8]
 801d8c2:	da08      	bge.n	801d8d6 <__sfputc_r+0x1e>
 801d8c4:	6994      	ldr	r4, [r2, #24]
 801d8c6:	42a3      	cmp	r3, r4
 801d8c8:	db01      	blt.n	801d8ce <__sfputc_r+0x16>
 801d8ca:	290a      	cmp	r1, #10
 801d8cc:	d103      	bne.n	801d8d6 <__sfputc_r+0x1e>
 801d8ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8d2:	f7fd bd3f 	b.w	801b354 <__swbuf_r>
 801d8d6:	6813      	ldr	r3, [r2, #0]
 801d8d8:	1c58      	adds	r0, r3, #1
 801d8da:	6010      	str	r0, [r2, #0]
 801d8dc:	7019      	strb	r1, [r3, #0]
 801d8de:	4608      	mov	r0, r1
 801d8e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8e4:	4770      	bx	lr

0801d8e6 <__sfputs_r>:
 801d8e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8e8:	4606      	mov	r6, r0
 801d8ea:	460f      	mov	r7, r1
 801d8ec:	4614      	mov	r4, r2
 801d8ee:	18d5      	adds	r5, r2, r3
 801d8f0:	42ac      	cmp	r4, r5
 801d8f2:	d101      	bne.n	801d8f8 <__sfputs_r+0x12>
 801d8f4:	2000      	movs	r0, #0
 801d8f6:	e007      	b.n	801d908 <__sfputs_r+0x22>
 801d8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8fc:	463a      	mov	r2, r7
 801d8fe:	4630      	mov	r0, r6
 801d900:	f7ff ffda 	bl	801d8b8 <__sfputc_r>
 801d904:	1c43      	adds	r3, r0, #1
 801d906:	d1f3      	bne.n	801d8f0 <__sfputs_r+0xa>
 801d908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d90c <_vfiprintf_r>:
 801d90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d910:	460d      	mov	r5, r1
 801d912:	b09d      	sub	sp, #116	; 0x74
 801d914:	4614      	mov	r4, r2
 801d916:	4698      	mov	r8, r3
 801d918:	4606      	mov	r6, r0
 801d91a:	b118      	cbz	r0, 801d924 <_vfiprintf_r+0x18>
 801d91c:	6983      	ldr	r3, [r0, #24]
 801d91e:	b90b      	cbnz	r3, 801d924 <_vfiprintf_r+0x18>
 801d920:	f7fb fa9e 	bl	8018e60 <__sinit>
 801d924:	4b89      	ldr	r3, [pc, #548]	; (801db4c <_vfiprintf_r+0x240>)
 801d926:	429d      	cmp	r5, r3
 801d928:	d11b      	bne.n	801d962 <_vfiprintf_r+0x56>
 801d92a:	6875      	ldr	r5, [r6, #4]
 801d92c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d92e:	07d9      	lsls	r1, r3, #31
 801d930:	d405      	bmi.n	801d93e <_vfiprintf_r+0x32>
 801d932:	89ab      	ldrh	r3, [r5, #12]
 801d934:	059a      	lsls	r2, r3, #22
 801d936:	d402      	bmi.n	801d93e <_vfiprintf_r+0x32>
 801d938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d93a:	f7fb fb9c 	bl	8019076 <__retarget_lock_acquire_recursive>
 801d93e:	89ab      	ldrh	r3, [r5, #12]
 801d940:	071b      	lsls	r3, r3, #28
 801d942:	d501      	bpl.n	801d948 <_vfiprintf_r+0x3c>
 801d944:	692b      	ldr	r3, [r5, #16]
 801d946:	b9eb      	cbnz	r3, 801d984 <_vfiprintf_r+0x78>
 801d948:	4629      	mov	r1, r5
 801d94a:	4630      	mov	r0, r6
 801d94c:	f7fd fd66 	bl	801b41c <__swsetup_r>
 801d950:	b1c0      	cbz	r0, 801d984 <_vfiprintf_r+0x78>
 801d952:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d954:	07dc      	lsls	r4, r3, #31
 801d956:	d50e      	bpl.n	801d976 <_vfiprintf_r+0x6a>
 801d958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d95c:	b01d      	add	sp, #116	; 0x74
 801d95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d962:	4b7b      	ldr	r3, [pc, #492]	; (801db50 <_vfiprintf_r+0x244>)
 801d964:	429d      	cmp	r5, r3
 801d966:	d101      	bne.n	801d96c <_vfiprintf_r+0x60>
 801d968:	68b5      	ldr	r5, [r6, #8]
 801d96a:	e7df      	b.n	801d92c <_vfiprintf_r+0x20>
 801d96c:	4b79      	ldr	r3, [pc, #484]	; (801db54 <_vfiprintf_r+0x248>)
 801d96e:	429d      	cmp	r5, r3
 801d970:	bf08      	it	eq
 801d972:	68f5      	ldreq	r5, [r6, #12]
 801d974:	e7da      	b.n	801d92c <_vfiprintf_r+0x20>
 801d976:	89ab      	ldrh	r3, [r5, #12]
 801d978:	0598      	lsls	r0, r3, #22
 801d97a:	d4ed      	bmi.n	801d958 <_vfiprintf_r+0x4c>
 801d97c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d97e:	f7fb fb7b 	bl	8019078 <__retarget_lock_release_recursive>
 801d982:	e7e9      	b.n	801d958 <_vfiprintf_r+0x4c>
 801d984:	2300      	movs	r3, #0
 801d986:	9309      	str	r3, [sp, #36]	; 0x24
 801d988:	2320      	movs	r3, #32
 801d98a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d98e:	f8cd 800c 	str.w	r8, [sp, #12]
 801d992:	2330      	movs	r3, #48	; 0x30
 801d994:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801db58 <_vfiprintf_r+0x24c>
 801d998:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d99c:	f04f 0901 	mov.w	r9, #1
 801d9a0:	4623      	mov	r3, r4
 801d9a2:	469a      	mov	sl, r3
 801d9a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d9a8:	b10a      	cbz	r2, 801d9ae <_vfiprintf_r+0xa2>
 801d9aa:	2a25      	cmp	r2, #37	; 0x25
 801d9ac:	d1f9      	bne.n	801d9a2 <_vfiprintf_r+0x96>
 801d9ae:	ebba 0b04 	subs.w	fp, sl, r4
 801d9b2:	d00b      	beq.n	801d9cc <_vfiprintf_r+0xc0>
 801d9b4:	465b      	mov	r3, fp
 801d9b6:	4622      	mov	r2, r4
 801d9b8:	4629      	mov	r1, r5
 801d9ba:	4630      	mov	r0, r6
 801d9bc:	f7ff ff93 	bl	801d8e6 <__sfputs_r>
 801d9c0:	3001      	adds	r0, #1
 801d9c2:	f000 80aa 	beq.w	801db1a <_vfiprintf_r+0x20e>
 801d9c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d9c8:	445a      	add	r2, fp
 801d9ca:	9209      	str	r2, [sp, #36]	; 0x24
 801d9cc:	f89a 3000 	ldrb.w	r3, [sl]
 801d9d0:	2b00      	cmp	r3, #0
 801d9d2:	f000 80a2 	beq.w	801db1a <_vfiprintf_r+0x20e>
 801d9d6:	2300      	movs	r3, #0
 801d9d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d9dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d9e0:	f10a 0a01 	add.w	sl, sl, #1
 801d9e4:	9304      	str	r3, [sp, #16]
 801d9e6:	9307      	str	r3, [sp, #28]
 801d9e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d9ec:	931a      	str	r3, [sp, #104]	; 0x68
 801d9ee:	4654      	mov	r4, sl
 801d9f0:	2205      	movs	r2, #5
 801d9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d9f6:	4858      	ldr	r0, [pc, #352]	; (801db58 <_vfiprintf_r+0x24c>)
 801d9f8:	f7e2 fc0a 	bl	8000210 <memchr>
 801d9fc:	9a04      	ldr	r2, [sp, #16]
 801d9fe:	b9d8      	cbnz	r0, 801da38 <_vfiprintf_r+0x12c>
 801da00:	06d1      	lsls	r1, r2, #27
 801da02:	bf44      	itt	mi
 801da04:	2320      	movmi	r3, #32
 801da06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801da0a:	0713      	lsls	r3, r2, #28
 801da0c:	bf44      	itt	mi
 801da0e:	232b      	movmi	r3, #43	; 0x2b
 801da10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801da14:	f89a 3000 	ldrb.w	r3, [sl]
 801da18:	2b2a      	cmp	r3, #42	; 0x2a
 801da1a:	d015      	beq.n	801da48 <_vfiprintf_r+0x13c>
 801da1c:	9a07      	ldr	r2, [sp, #28]
 801da1e:	4654      	mov	r4, sl
 801da20:	2000      	movs	r0, #0
 801da22:	f04f 0c0a 	mov.w	ip, #10
 801da26:	4621      	mov	r1, r4
 801da28:	f811 3b01 	ldrb.w	r3, [r1], #1
 801da2c:	3b30      	subs	r3, #48	; 0x30
 801da2e:	2b09      	cmp	r3, #9
 801da30:	d94e      	bls.n	801dad0 <_vfiprintf_r+0x1c4>
 801da32:	b1b0      	cbz	r0, 801da62 <_vfiprintf_r+0x156>
 801da34:	9207      	str	r2, [sp, #28]
 801da36:	e014      	b.n	801da62 <_vfiprintf_r+0x156>
 801da38:	eba0 0308 	sub.w	r3, r0, r8
 801da3c:	fa09 f303 	lsl.w	r3, r9, r3
 801da40:	4313      	orrs	r3, r2
 801da42:	9304      	str	r3, [sp, #16]
 801da44:	46a2      	mov	sl, r4
 801da46:	e7d2      	b.n	801d9ee <_vfiprintf_r+0xe2>
 801da48:	9b03      	ldr	r3, [sp, #12]
 801da4a:	1d19      	adds	r1, r3, #4
 801da4c:	681b      	ldr	r3, [r3, #0]
 801da4e:	9103      	str	r1, [sp, #12]
 801da50:	2b00      	cmp	r3, #0
 801da52:	bfbb      	ittet	lt
 801da54:	425b      	neglt	r3, r3
 801da56:	f042 0202 	orrlt.w	r2, r2, #2
 801da5a:	9307      	strge	r3, [sp, #28]
 801da5c:	9307      	strlt	r3, [sp, #28]
 801da5e:	bfb8      	it	lt
 801da60:	9204      	strlt	r2, [sp, #16]
 801da62:	7823      	ldrb	r3, [r4, #0]
 801da64:	2b2e      	cmp	r3, #46	; 0x2e
 801da66:	d10c      	bne.n	801da82 <_vfiprintf_r+0x176>
 801da68:	7863      	ldrb	r3, [r4, #1]
 801da6a:	2b2a      	cmp	r3, #42	; 0x2a
 801da6c:	d135      	bne.n	801dada <_vfiprintf_r+0x1ce>
 801da6e:	9b03      	ldr	r3, [sp, #12]
 801da70:	1d1a      	adds	r2, r3, #4
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	9203      	str	r2, [sp, #12]
 801da76:	2b00      	cmp	r3, #0
 801da78:	bfb8      	it	lt
 801da7a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801da7e:	3402      	adds	r4, #2
 801da80:	9305      	str	r3, [sp, #20]
 801da82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801db68 <_vfiprintf_r+0x25c>
 801da86:	7821      	ldrb	r1, [r4, #0]
 801da88:	2203      	movs	r2, #3
 801da8a:	4650      	mov	r0, sl
 801da8c:	f7e2 fbc0 	bl	8000210 <memchr>
 801da90:	b140      	cbz	r0, 801daa4 <_vfiprintf_r+0x198>
 801da92:	2340      	movs	r3, #64	; 0x40
 801da94:	eba0 000a 	sub.w	r0, r0, sl
 801da98:	fa03 f000 	lsl.w	r0, r3, r0
 801da9c:	9b04      	ldr	r3, [sp, #16]
 801da9e:	4303      	orrs	r3, r0
 801daa0:	3401      	adds	r4, #1
 801daa2:	9304      	str	r3, [sp, #16]
 801daa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801daa8:	482c      	ldr	r0, [pc, #176]	; (801db5c <_vfiprintf_r+0x250>)
 801daaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801daae:	2206      	movs	r2, #6
 801dab0:	f7e2 fbae 	bl	8000210 <memchr>
 801dab4:	2800      	cmp	r0, #0
 801dab6:	d03f      	beq.n	801db38 <_vfiprintf_r+0x22c>
 801dab8:	4b29      	ldr	r3, [pc, #164]	; (801db60 <_vfiprintf_r+0x254>)
 801daba:	bb1b      	cbnz	r3, 801db04 <_vfiprintf_r+0x1f8>
 801dabc:	9b03      	ldr	r3, [sp, #12]
 801dabe:	3307      	adds	r3, #7
 801dac0:	f023 0307 	bic.w	r3, r3, #7
 801dac4:	3308      	adds	r3, #8
 801dac6:	9303      	str	r3, [sp, #12]
 801dac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801daca:	443b      	add	r3, r7
 801dacc:	9309      	str	r3, [sp, #36]	; 0x24
 801dace:	e767      	b.n	801d9a0 <_vfiprintf_r+0x94>
 801dad0:	fb0c 3202 	mla	r2, ip, r2, r3
 801dad4:	460c      	mov	r4, r1
 801dad6:	2001      	movs	r0, #1
 801dad8:	e7a5      	b.n	801da26 <_vfiprintf_r+0x11a>
 801dada:	2300      	movs	r3, #0
 801dadc:	3401      	adds	r4, #1
 801dade:	9305      	str	r3, [sp, #20]
 801dae0:	4619      	mov	r1, r3
 801dae2:	f04f 0c0a 	mov.w	ip, #10
 801dae6:	4620      	mov	r0, r4
 801dae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801daec:	3a30      	subs	r2, #48	; 0x30
 801daee:	2a09      	cmp	r2, #9
 801daf0:	d903      	bls.n	801dafa <_vfiprintf_r+0x1ee>
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	d0c5      	beq.n	801da82 <_vfiprintf_r+0x176>
 801daf6:	9105      	str	r1, [sp, #20]
 801daf8:	e7c3      	b.n	801da82 <_vfiprintf_r+0x176>
 801dafa:	fb0c 2101 	mla	r1, ip, r1, r2
 801dafe:	4604      	mov	r4, r0
 801db00:	2301      	movs	r3, #1
 801db02:	e7f0      	b.n	801dae6 <_vfiprintf_r+0x1da>
 801db04:	ab03      	add	r3, sp, #12
 801db06:	9300      	str	r3, [sp, #0]
 801db08:	462a      	mov	r2, r5
 801db0a:	4b16      	ldr	r3, [pc, #88]	; (801db64 <_vfiprintf_r+0x258>)
 801db0c:	a904      	add	r1, sp, #16
 801db0e:	4630      	mov	r0, r6
 801db10:	f7fb fc8a 	bl	8019428 <_printf_float>
 801db14:	4607      	mov	r7, r0
 801db16:	1c78      	adds	r0, r7, #1
 801db18:	d1d6      	bne.n	801dac8 <_vfiprintf_r+0x1bc>
 801db1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801db1c:	07d9      	lsls	r1, r3, #31
 801db1e:	d405      	bmi.n	801db2c <_vfiprintf_r+0x220>
 801db20:	89ab      	ldrh	r3, [r5, #12]
 801db22:	059a      	lsls	r2, r3, #22
 801db24:	d402      	bmi.n	801db2c <_vfiprintf_r+0x220>
 801db26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801db28:	f7fb faa6 	bl	8019078 <__retarget_lock_release_recursive>
 801db2c:	89ab      	ldrh	r3, [r5, #12]
 801db2e:	065b      	lsls	r3, r3, #25
 801db30:	f53f af12 	bmi.w	801d958 <_vfiprintf_r+0x4c>
 801db34:	9809      	ldr	r0, [sp, #36]	; 0x24
 801db36:	e711      	b.n	801d95c <_vfiprintf_r+0x50>
 801db38:	ab03      	add	r3, sp, #12
 801db3a:	9300      	str	r3, [sp, #0]
 801db3c:	462a      	mov	r2, r5
 801db3e:	4b09      	ldr	r3, [pc, #36]	; (801db64 <_vfiprintf_r+0x258>)
 801db40:	a904      	add	r1, sp, #16
 801db42:	4630      	mov	r0, r6
 801db44:	f7fb ff14 	bl	8019970 <_printf_i>
 801db48:	e7e4      	b.n	801db14 <_vfiprintf_r+0x208>
 801db4a:	bf00      	nop
 801db4c:	0801e8bc 	.word	0x0801e8bc
 801db50:	0801e8dc 	.word	0x0801e8dc
 801db54:	0801e89c 	.word	0x0801e89c
 801db58:	0801ec8c 	.word	0x0801ec8c
 801db5c:	0801ec96 	.word	0x0801ec96
 801db60:	08019429 	.word	0x08019429
 801db64:	0801d8e7 	.word	0x0801d8e7
 801db68:	0801ec92 	.word	0x0801ec92

0801db6c <_read_r>:
 801db6c:	b538      	push	{r3, r4, r5, lr}
 801db6e:	4d07      	ldr	r5, [pc, #28]	; (801db8c <_read_r+0x20>)
 801db70:	4604      	mov	r4, r0
 801db72:	4608      	mov	r0, r1
 801db74:	4611      	mov	r1, r2
 801db76:	2200      	movs	r2, #0
 801db78:	602a      	str	r2, [r5, #0]
 801db7a:	461a      	mov	r2, r3
 801db7c:	f7e6 f8bc 	bl	8003cf8 <_read>
 801db80:	1c43      	adds	r3, r0, #1
 801db82:	d102      	bne.n	801db8a <_read_r+0x1e>
 801db84:	682b      	ldr	r3, [r5, #0]
 801db86:	b103      	cbz	r3, 801db8a <_read_r+0x1e>
 801db88:	6023      	str	r3, [r4, #0]
 801db8a:	bd38      	pop	{r3, r4, r5, pc}
 801db8c:	2000a068 	.word	0x2000a068

0801db90 <nan>:
 801db90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801db98 <nan+0x8>
 801db94:	4770      	bx	lr
 801db96:	bf00      	nop
 801db98:	00000000 	.word	0x00000000
 801db9c:	7ff80000 	.word	0x7ff80000

0801dba0 <__ascii_wctomb>:
 801dba0:	b149      	cbz	r1, 801dbb6 <__ascii_wctomb+0x16>
 801dba2:	2aff      	cmp	r2, #255	; 0xff
 801dba4:	bf85      	ittet	hi
 801dba6:	238a      	movhi	r3, #138	; 0x8a
 801dba8:	6003      	strhi	r3, [r0, #0]
 801dbaa:	700a      	strbls	r2, [r1, #0]
 801dbac:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801dbb0:	bf98      	it	ls
 801dbb2:	2001      	movls	r0, #1
 801dbb4:	4770      	bx	lr
 801dbb6:	4608      	mov	r0, r1
 801dbb8:	4770      	bx	lr

0801dbba <abort>:
 801dbba:	b508      	push	{r3, lr}
 801dbbc:	2006      	movs	r0, #6
 801dbbe:	f000 f855 	bl	801dc6c <raise>
 801dbc2:	2001      	movs	r0, #1
 801dbc4:	f7e6 f88e 	bl	8003ce4 <_exit>

0801dbc8 <_fstat_r>:
 801dbc8:	b538      	push	{r3, r4, r5, lr}
 801dbca:	4d07      	ldr	r5, [pc, #28]	; (801dbe8 <_fstat_r+0x20>)
 801dbcc:	2300      	movs	r3, #0
 801dbce:	4604      	mov	r4, r0
 801dbd0:	4608      	mov	r0, r1
 801dbd2:	4611      	mov	r1, r2
 801dbd4:	602b      	str	r3, [r5, #0]
 801dbd6:	f7e6 f8d4 	bl	8003d82 <_fstat>
 801dbda:	1c43      	adds	r3, r0, #1
 801dbdc:	d102      	bne.n	801dbe4 <_fstat_r+0x1c>
 801dbde:	682b      	ldr	r3, [r5, #0]
 801dbe0:	b103      	cbz	r3, 801dbe4 <_fstat_r+0x1c>
 801dbe2:	6023      	str	r3, [r4, #0]
 801dbe4:	bd38      	pop	{r3, r4, r5, pc}
 801dbe6:	bf00      	nop
 801dbe8:	2000a068 	.word	0x2000a068

0801dbec <_isatty_r>:
 801dbec:	b538      	push	{r3, r4, r5, lr}
 801dbee:	4d06      	ldr	r5, [pc, #24]	; (801dc08 <_isatty_r+0x1c>)
 801dbf0:	2300      	movs	r3, #0
 801dbf2:	4604      	mov	r4, r0
 801dbf4:	4608      	mov	r0, r1
 801dbf6:	602b      	str	r3, [r5, #0]
 801dbf8:	f7e6 f8d3 	bl	8003da2 <_isatty>
 801dbfc:	1c43      	adds	r3, r0, #1
 801dbfe:	d102      	bne.n	801dc06 <_isatty_r+0x1a>
 801dc00:	682b      	ldr	r3, [r5, #0]
 801dc02:	b103      	cbz	r3, 801dc06 <_isatty_r+0x1a>
 801dc04:	6023      	str	r3, [r4, #0]
 801dc06:	bd38      	pop	{r3, r4, r5, pc}
 801dc08:	2000a068 	.word	0x2000a068

0801dc0c <_malloc_usable_size_r>:
 801dc0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dc10:	1f18      	subs	r0, r3, #4
 801dc12:	2b00      	cmp	r3, #0
 801dc14:	bfbc      	itt	lt
 801dc16:	580b      	ldrlt	r3, [r1, r0]
 801dc18:	18c0      	addlt	r0, r0, r3
 801dc1a:	4770      	bx	lr

0801dc1c <_raise_r>:
 801dc1c:	291f      	cmp	r1, #31
 801dc1e:	b538      	push	{r3, r4, r5, lr}
 801dc20:	4604      	mov	r4, r0
 801dc22:	460d      	mov	r5, r1
 801dc24:	d904      	bls.n	801dc30 <_raise_r+0x14>
 801dc26:	2316      	movs	r3, #22
 801dc28:	6003      	str	r3, [r0, #0]
 801dc2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801dc2e:	bd38      	pop	{r3, r4, r5, pc}
 801dc30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801dc32:	b112      	cbz	r2, 801dc3a <_raise_r+0x1e>
 801dc34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dc38:	b94b      	cbnz	r3, 801dc4e <_raise_r+0x32>
 801dc3a:	4620      	mov	r0, r4
 801dc3c:	f000 f830 	bl	801dca0 <_getpid_r>
 801dc40:	462a      	mov	r2, r5
 801dc42:	4601      	mov	r1, r0
 801dc44:	4620      	mov	r0, r4
 801dc46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dc4a:	f000 b817 	b.w	801dc7c <_kill_r>
 801dc4e:	2b01      	cmp	r3, #1
 801dc50:	d00a      	beq.n	801dc68 <_raise_r+0x4c>
 801dc52:	1c59      	adds	r1, r3, #1
 801dc54:	d103      	bne.n	801dc5e <_raise_r+0x42>
 801dc56:	2316      	movs	r3, #22
 801dc58:	6003      	str	r3, [r0, #0]
 801dc5a:	2001      	movs	r0, #1
 801dc5c:	e7e7      	b.n	801dc2e <_raise_r+0x12>
 801dc5e:	2400      	movs	r4, #0
 801dc60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801dc64:	4628      	mov	r0, r5
 801dc66:	4798      	blx	r3
 801dc68:	2000      	movs	r0, #0
 801dc6a:	e7e0      	b.n	801dc2e <_raise_r+0x12>

0801dc6c <raise>:
 801dc6c:	4b02      	ldr	r3, [pc, #8]	; (801dc78 <raise+0xc>)
 801dc6e:	4601      	mov	r1, r0
 801dc70:	6818      	ldr	r0, [r3, #0]
 801dc72:	f7ff bfd3 	b.w	801dc1c <_raise_r>
 801dc76:	bf00      	nop
 801dc78:	20000080 	.word	0x20000080

0801dc7c <_kill_r>:
 801dc7c:	b538      	push	{r3, r4, r5, lr}
 801dc7e:	4d07      	ldr	r5, [pc, #28]	; (801dc9c <_kill_r+0x20>)
 801dc80:	2300      	movs	r3, #0
 801dc82:	4604      	mov	r4, r0
 801dc84:	4608      	mov	r0, r1
 801dc86:	4611      	mov	r1, r2
 801dc88:	602b      	str	r3, [r5, #0]
 801dc8a:	f7e6 f81b 	bl	8003cc4 <_kill>
 801dc8e:	1c43      	adds	r3, r0, #1
 801dc90:	d102      	bne.n	801dc98 <_kill_r+0x1c>
 801dc92:	682b      	ldr	r3, [r5, #0]
 801dc94:	b103      	cbz	r3, 801dc98 <_kill_r+0x1c>
 801dc96:	6023      	str	r3, [r4, #0]
 801dc98:	bd38      	pop	{r3, r4, r5, pc}
 801dc9a:	bf00      	nop
 801dc9c:	2000a068 	.word	0x2000a068

0801dca0 <_getpid_r>:
 801dca0:	f7e6 b808 	b.w	8003cb4 <_getpid>

0801dca4 <_init>:
 801dca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dca6:	bf00      	nop
 801dca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dcaa:	bc08      	pop	{r3}
 801dcac:	469e      	mov	lr, r3
 801dcae:	4770      	bx	lr

0801dcb0 <_fini>:
 801dcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcb2:	bf00      	nop
 801dcb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dcb6:	bc08      	pop	{r3}
 801dcb8:	469e      	mov	lr, r3
 801dcba:	4770      	bx	lr
