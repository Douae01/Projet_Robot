
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001db0c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f9c  0801dcb0  0801dcb0  0001ecb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ec4c  0801ec4c  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0801ec4c  0801ec4c  0001fc4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ec54  0801ec54  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ec54  0801ec54  0001fc54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ec58  0801ec58  0001fc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0801ec5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e770  20000248  0801eea4  00020248  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000e9b8  0801eea4  000209b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .debug_info   000e4c57  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00018153  00000000  00000000  00104ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000043a0  00000000  00000000  0011d028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000172d  00000000  00000000  001213c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002425e  00000000  00000000  00122af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0006f71d  00000000  00000000  00146d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8665  00000000  00000000  001b6470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009c  00000000  00000000  0026ead5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000115ac  00000000  00000000  0026eb74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00280120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00057bbf  00000000  00000000  0028018f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00009b70  00000000  00000000  002d7d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000248 	.word	0x20000248
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801dc94 	.word	0x0801dc94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000024c 	.word	0x2000024c
 80001dc:	0801dc94 	.word	0x0801dc94

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cd6:	f000 b9eb 	b.w	80010b0 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d6c:	f000 b9a0 	b.w	80010b0 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14e      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e00:	4694      	mov	ip, r2
 8000e02:	458c      	cmp	ip, r1
 8000e04:	4686      	mov	lr, r0
 8000e06:	fab2 f282 	clz	r2, r2
 8000e0a:	d962      	bls.n	8000ed2 <__udivmoddi4+0xde>
 8000e0c:	b14a      	cbz	r2, 8000e22 <__udivmoddi4+0x2e>
 8000e0e:	f1c2 0320 	rsb	r3, r2, #32
 8000e12:	4091      	lsls	r1, r2
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	4319      	orrs	r1, r3
 8000e1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f f68c 	uxth.w	r6, ip
 8000e2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb07 1114 	mls	r1, r7, r4, r1
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb04 f106 	mul.w	r1, r4, r6
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e4a:	f080 8112 	bcs.w	8001072 <__udivmoddi4+0x27e>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 810f 	bls.w	8001072 <__udivmoddi4+0x27e>
 8000e54:	3c02      	subs	r4, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a59      	subs	r1, r3, r1
 8000e5a:	fa1f f38e 	uxth.w	r3, lr
 8000e5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e62:	fb07 1110 	mls	r1, r7, r0, r1
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f606 	mul.w	r6, r0, r6
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x94>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000e7a:	f080 80fc 	bcs.w	8001076 <__udivmoddi4+0x282>
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	f240 80f9 	bls.w	8001076 <__udivmoddi4+0x282>
 8000e84:	4463      	add	r3, ip
 8000e86:	3802      	subs	r0, #2
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e8e:	2100      	movs	r1, #0
 8000e90:	b11d      	cbz	r5, 8000e9a <__udivmoddi4+0xa6>
 8000e92:	40d3      	lsrs	r3, r2
 8000e94:	2200      	movs	r2, #0
 8000e96:	e9c5 3200 	strd	r3, r2, [r5]
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d905      	bls.n	8000eae <__udivmoddi4+0xba>
 8000ea2:	b10d      	cbz	r5, 8000ea8 <__udivmoddi4+0xb4>
 8000ea4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e7f5      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000eae:	fab3 f183 	clz	r1, r3
 8000eb2:	2900      	cmp	r1, #0
 8000eb4:	d146      	bne.n	8000f44 <__udivmoddi4+0x150>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0xcc>
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	f0c0 80f0 	bcc.w	80010a0 <__udivmoddi4+0x2ac>
 8000ec0:	1a86      	subs	r6, r0, r2
 8000ec2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d0e6      	beq.n	8000e9a <__udivmoddi4+0xa6>
 8000ecc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ed0:	e7e3      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	f040 8090 	bne.w	8000ff8 <__udivmoddi4+0x204>
 8000ed8:	eba1 040c 	sub.w	r4, r1, ip
 8000edc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee0:	fa1f f78c 	uxth.w	r7, ip
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eee:	fb08 4416 	mls	r4, r8, r6, r4
 8000ef2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ef6:	fb07 f006 	mul.w	r0, r7, r6
 8000efa:	4298      	cmp	r0, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x11c>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x11a>
 8000f08:	4298      	cmp	r0, r3
 8000f0a:	f200 80cd 	bhi.w	80010a8 <__udivmoddi4+0x2b4>
 8000f0e:	4626      	mov	r6, r4
 8000f10:	1a1c      	subs	r4, r3, r0
 8000f12:	fa1f f38e 	uxth.w	r3, lr
 8000f16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f22:	fb00 f707 	mul.w	r7, r0, r7
 8000f26:	429f      	cmp	r7, r3
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x148>
 8000f2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f32:	d202      	bcs.n	8000f3a <__udivmoddi4+0x146>
 8000f34:	429f      	cmp	r7, r3
 8000f36:	f200 80b0 	bhi.w	800109a <__udivmoddi4+0x2a6>
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	1bdb      	subs	r3, r3, r7
 8000f3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f42:	e7a5      	b.n	8000e90 <__udivmoddi4+0x9c>
 8000f44:	f1c1 0620 	rsb	r6, r1, #32
 8000f48:	408b      	lsls	r3, r1
 8000f4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f54:	fa04 f301 	lsl.w	r3, r4, r1
 8000f58:	ea43 030c 	orr.w	r3, r3, ip
 8000f5c:	40f4      	lsrs	r4, r6
 8000f5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f62:	0c38      	lsrs	r0, r7, #16
 8000f64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f68:	fbb4 fef0 	udiv	lr, r4, r0
 8000f6c:	fa1f fc87 	uxth.w	ip, r7
 8000f70:	fb00 441e 	mls	r4, r0, lr, r4
 8000f74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f78:	fb0e f90c 	mul.w	r9, lr, ip
 8000f7c:	45a1      	cmp	r9, r4
 8000f7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f82:	d90a      	bls.n	8000f9a <__udivmoddi4+0x1a6>
 8000f84:	193c      	adds	r4, r7, r4
 8000f86:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f8a:	f080 8084 	bcs.w	8001096 <__udivmoddi4+0x2a2>
 8000f8e:	45a1      	cmp	r9, r4
 8000f90:	f240 8081 	bls.w	8001096 <__udivmoddi4+0x2a2>
 8000f94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f98:	443c      	add	r4, r7
 8000f9a:	eba4 0409 	sub.w	r4, r4, r9
 8000f9e:	fa1f f983 	uxth.w	r9, r3
 8000fa2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fa6:	fb00 4413 	mls	r4, r0, r3, r4
 8000faa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fb2:	45a4      	cmp	ip, r4
 8000fb4:	d907      	bls.n	8000fc6 <__udivmoddi4+0x1d2>
 8000fb6:	193c      	adds	r4, r7, r4
 8000fb8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000fbc:	d267      	bcs.n	800108e <__udivmoddi4+0x29a>
 8000fbe:	45a4      	cmp	ip, r4
 8000fc0:	d965      	bls.n	800108e <__udivmoddi4+0x29a>
 8000fc2:	3b02      	subs	r3, #2
 8000fc4:	443c      	add	r4, r7
 8000fc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fca:	fba0 9302 	umull	r9, r3, r0, r2
 8000fce:	eba4 040c 	sub.w	r4, r4, ip
 8000fd2:	429c      	cmp	r4, r3
 8000fd4:	46ce      	mov	lr, r9
 8000fd6:	469c      	mov	ip, r3
 8000fd8:	d351      	bcc.n	800107e <__udivmoddi4+0x28a>
 8000fda:	d04e      	beq.n	800107a <__udivmoddi4+0x286>
 8000fdc:	b155      	cbz	r5, 8000ff4 <__udivmoddi4+0x200>
 8000fde:	ebb8 030e 	subs.w	r3, r8, lr
 8000fe2:	eb64 040c 	sbc.w	r4, r4, ip
 8000fe6:	fa04 f606 	lsl.w	r6, r4, r6
 8000fea:	40cb      	lsrs	r3, r1
 8000fec:	431e      	orrs	r6, r3
 8000fee:	40cc      	lsrs	r4, r1
 8000ff0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	e750      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ff8:	f1c2 0320 	rsb	r3, r2, #32
 8000ffc:	fa20 f103 	lsr.w	r1, r0, r3
 8001000:	fa0c fc02 	lsl.w	ip, ip, r2
 8001004:	fa24 f303 	lsr.w	r3, r4, r3
 8001008:	4094      	lsls	r4, r2
 800100a:	430c      	orrs	r4, r1
 800100c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001010:	fa00 fe02 	lsl.w	lr, r0, r2
 8001014:	fa1f f78c 	uxth.w	r7, ip
 8001018:	fbb3 f0f8 	udiv	r0, r3, r8
 800101c:	fb08 3110 	mls	r1, r8, r0, r3
 8001020:	0c23      	lsrs	r3, r4, #16
 8001022:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001026:	fb00 f107 	mul.w	r1, r0, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d908      	bls.n	8001040 <__udivmoddi4+0x24c>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001036:	d22c      	bcs.n	8001092 <__udivmoddi4+0x29e>
 8001038:	4299      	cmp	r1, r3
 800103a:	d92a      	bls.n	8001092 <__udivmoddi4+0x29e>
 800103c:	3802      	subs	r0, #2
 800103e:	4463      	add	r3, ip
 8001040:	1a5b      	subs	r3, r3, r1
 8001042:	b2a4      	uxth	r4, r4
 8001044:	fbb3 f1f8 	udiv	r1, r3, r8
 8001048:	fb08 3311 	mls	r3, r8, r1, r3
 800104c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001050:	fb01 f307 	mul.w	r3, r1, r7
 8001054:	42a3      	cmp	r3, r4
 8001056:	d908      	bls.n	800106a <__udivmoddi4+0x276>
 8001058:	eb1c 0404 	adds.w	r4, ip, r4
 800105c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001060:	d213      	bcs.n	800108a <__udivmoddi4+0x296>
 8001062:	42a3      	cmp	r3, r4
 8001064:	d911      	bls.n	800108a <__udivmoddi4+0x296>
 8001066:	3902      	subs	r1, #2
 8001068:	4464      	add	r4, ip
 800106a:	1ae4      	subs	r4, r4, r3
 800106c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001070:	e739      	b.n	8000ee6 <__udivmoddi4+0xf2>
 8001072:	4604      	mov	r4, r0
 8001074:	e6f0      	b.n	8000e58 <__udivmoddi4+0x64>
 8001076:	4608      	mov	r0, r1
 8001078:	e706      	b.n	8000e88 <__udivmoddi4+0x94>
 800107a:	45c8      	cmp	r8, r9
 800107c:	d2ae      	bcs.n	8000fdc <__udivmoddi4+0x1e8>
 800107e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001082:	eb63 0c07 	sbc.w	ip, r3, r7
 8001086:	3801      	subs	r0, #1
 8001088:	e7a8      	b.n	8000fdc <__udivmoddi4+0x1e8>
 800108a:	4631      	mov	r1, r6
 800108c:	e7ed      	b.n	800106a <__udivmoddi4+0x276>
 800108e:	4603      	mov	r3, r0
 8001090:	e799      	b.n	8000fc6 <__udivmoddi4+0x1d2>
 8001092:	4630      	mov	r0, r6
 8001094:	e7d4      	b.n	8001040 <__udivmoddi4+0x24c>
 8001096:	46d6      	mov	lr, sl
 8001098:	e77f      	b.n	8000f9a <__udivmoddi4+0x1a6>
 800109a:	4463      	add	r3, ip
 800109c:	3802      	subs	r0, #2
 800109e:	e74d      	b.n	8000f3c <__udivmoddi4+0x148>
 80010a0:	4606      	mov	r6, r0
 80010a2:	4623      	mov	r3, r4
 80010a4:	4608      	mov	r0, r1
 80010a6:	e70f      	b.n	8000ec8 <__udivmoddi4+0xd4>
 80010a8:	3e02      	subs	r6, #2
 80010aa:	4463      	add	r3, ip
 80010ac:	e730      	b.n	8000f10 <__udivmoddi4+0x11c>
 80010ae:	bf00      	nop

080010b0 <__aeabi_idiv0>:
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <millis>:
// Locally used functions (private)
//---------------------------------------------------------
uint8_t VL53L0X_performSingleRefCalibration(uint8_t vhv_init_byte);

uint8_t millis()
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]
	i2c1_WriteRegBuffer(0x53,reg,&value,1);
 80010d4:	1dba      	adds	r2, r7, #6
 80010d6:	79f9      	ldrb	r1, [r7, #7]
 80010d8:	2301      	movs	r3, #1
 80010da:	2053      	movs	r0, #83	@ 0x53
 80010dc:	f001 f818 	bl	8002110 <i2c1_WriteRegBuffer>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <writeReg16Bit>:
// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	80bb      	strh	r3, [r7, #4]
	uint8_t tab[2];
	tab[0]= ((value >> 8));
 80010f8:	88bb      	ldrh	r3, [r7, #4]
 80010fa:	0a1b      	lsrs	r3, r3, #8
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	733b      	strb	r3, [r7, #12]
	tab[1] = ((value ) & 0xFF);
 8001102:	88bb      	ldrh	r3, [r7, #4]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	737b      	strb	r3, [r7, #13]
	i2c1_WriteRegBuffer(0x53,reg,tab,2);
 8001108:	f107 020c 	add.w	r2, r7, #12
 800110c:	79f9      	ldrb	r1, [r7, #7]
 800110e:	2302      	movs	r3, #2
 8001110:	2053      	movs	r0, #83	@ 0x53
 8001112:	f000 fffd 	bl	8002110 <i2c1_WriteRegBuffer>
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <writeReg32Bit>:
// Write a 32-bit register
void writeReg32Bit(uint8_t reg, uint32_t value){
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	6039      	str	r1, [r7, #0]
 8001128:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[4];
		tab[3]= ((value >> 24) & 0xFF);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	0e1b      	lsrs	r3, r3, #24
 800112e:	b2db      	uxtb	r3, r3
 8001130:	73fb      	strb	r3, [r7, #15]
		tab[2]= ((value >> 16) & 0xFF);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	0c1b      	lsrs	r3, r3, #16
 8001136:	b2db      	uxtb	r3, r3
 8001138:	73bb      	strb	r3, [r7, #14]
		tab[1]= ((value >> 8) & 0xFF);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	b2db      	uxtb	r3, r3
 8001140:	737b      	strb	r3, [r7, #13]
		tab[0] = ((value ) & 0xFF);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	733b      	strb	r3, [r7, #12]
		i2c1_WriteRegBuffer(0x53,reg,tab,4);
 8001148:	f107 020c 	add.w	r2, r7, #12
 800114c:	79f9      	ldrb	r1, [r7, #7]
 800114e:	2304      	movs	r3, #4
 8001150:	2053      	movs	r0, #83	@ 0x53
 8001152:	f000 ffdd 	bl	8002110 <i2c1_WriteRegBuffer>
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <readReg>:
// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
  	uint8_t value=0;
 8001168:	2300      	movs	r3, #0
 800116a:	73fb      	strb	r3, [r7, #15]
  	i2c1_ReadRegBuffer(0x53,reg,&value,1);
 800116c:	f107 020f 	add.w	r2, r7, #15
 8001170:	79f9      	ldrb	r1, [r7, #7]
 8001172:	2301      	movs	r3, #1
 8001174:	2053      	movs	r0, #83	@ 0x53
 8001176:	f000 ff99 	bl	80020ac <i2c1_ReadRegBuffer>
  	return value;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <readReg16Bit>:
// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[2];
	i2c1_ReadRegBuffer(0x53,reg,tab,2);
 800118e:	f107 020c 	add.w	r2, r7, #12
 8001192:	79f9      	ldrb	r1, [r7, #7]
 8001194:	2302      	movs	r3, #2
 8001196:	2053      	movs	r0, #83	@ 0x53
 8001198:	f000 ff88 	bl	80020ac <i2c1_ReadRegBuffer>
  	uint16_t value= ((uint16_t)tab[0] << 8) | (uint16_t)tab[1];
 800119c:	7b3b      	ldrb	r3, [r7, #12]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7b7b      	ldrb	r3, [r7, #13]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	81fb      	strh	r3, [r7, #14]
  	return value;
 80011ac:	89fb      	ldrh	r3, [r7, #14]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <readMulti>:


// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	6039      	str	r1, [r7, #0]
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	4613      	mov	r3, r2
 80011c4:	71bb      	strb	r3, [r7, #6]
	uint8_t value=0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]

  while (count-- > 0)
 80011ca:	e00b      	b.n	80011e4 <readMulti+0x2e>
  {
	  i2c1_ReadRegBuffer(0x53,reg,&value,1);
 80011cc:	f107 020f 	add.w	r2, r7, #15
 80011d0:	79f9      	ldrb	r1, [r7, #7]
 80011d2:	2301      	movs	r3, #1
 80011d4:	2053      	movs	r0, #83	@ 0x53
 80011d6:	f000 ff69 	bl	80020ac <i2c1_ReadRegBuffer>
    *(dst++) = value;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	603a      	str	r2, [r7, #0]
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	701a      	strb	r2, [r3, #0]
  while (count-- > 0)
 80011e4:	79bb      	ldrb	r3, [r7, #6]
 80011e6:	1e5a      	subs	r2, r3, #1
 80011e8:	71ba      	strb	r2, [r7, #6]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1ee      	bne.n	80011cc <readMulti+0x16>
  }
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <VL53L0X_validateInterface>:
uint8_t VL53L0X_getAddress() {
  return g_i2cAddr;
}
//===========================================================================
uint8_t VL53L0X_validateInterface()
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	uint16_t var=0;
 80011fe:	2300      	movs	r3, #0
 8001200:	80fb      	strh	r3, [r7, #6]
	var = readReg(0xC0);
 8001202:	20c0      	movs	r0, #192	@ 0xc0
 8001204:	f7ff ffab 	bl	800115e <readReg>
 8001208:	4603      	mov	r3, r0
 800120a:	80fb      	strh	r3, [r7, #6]
	if ( var == 0xEE)
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	2bee      	cmp	r3, #238	@ 0xee
 8001210:	d121      	bne.n	8001256 <VL53L0X_validateInterface+0x5e>
	{
		var =readReg(0xC1);
 8001212:	20c1      	movs	r0, #193	@ 0xc1
 8001214:	f7ff ffa3 	bl	800115e <readReg>
 8001218:	4603      	mov	r3, r0
 800121a:	80fb      	strh	r3, [r7, #6]
		if ( var == 0xAA)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	2baa      	cmp	r3, #170	@ 0xaa
 8001220:	d119      	bne.n	8001256 <VL53L0X_validateInterface+0x5e>
		{
			var =readReg(0xC2);
 8001222:	20c2      	movs	r0, #194	@ 0xc2
 8001224:	f7ff ff9b 	bl	800115e <readReg>
 8001228:	4603      	mov	r3, r0
 800122a:	80fb      	strh	r3, [r7, #6]
			if ( var == 0x10)
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	2b10      	cmp	r3, #16
 8001230:	d111      	bne.n	8001256 <VL53L0X_validateInterface+0x5e>
			{
				var =readReg16Bit(0x51);
 8001232:	2051      	movs	r0, #81	@ 0x51
 8001234:	f7ff ffa6 	bl	8001184 <readReg16Bit>
 8001238:	4603      	mov	r3, r0
 800123a:	80fb      	strh	r3, [r7, #6]
				if ( var == 0x0096) // doc 0x0099 ??
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	2b96      	cmp	r3, #150	@ 0x96
 8001240:	d109      	bne.n	8001256 <VL53L0X_validateInterface+0x5e>
				{
					var =readReg16Bit(0x61);
 8001242:	2061      	movs	r0, #97	@ 0x61
 8001244:	f7ff ff9e 	bl	8001184 <readReg16Bit>
 8001248:	4603      	mov	r3, r0
 800124a:	80fb      	strh	r3, [r7, #6]
					if ( var == 0x0000)
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <VL53L0X_validateInterface+0x5e>
					{
						return 0;
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <VL53L0X_validateInterface+0x60>
					}
				}
			}
		}
	}
	return -1;
 8001256:	23ff      	movs	r3, #255	@ 0xff
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <VL53L0X_init>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
uint8_t VL53L0X_init( ){
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
  //****************************************************************************
  // DATA INIT
  // "Set I2C standard mode"
  writeReg(I2C_MODE, 0x00);
 8001266:	2100      	movs	r1, #0
 8001268:	2088      	movs	r0, #136	@ 0x88
 800126a:	f7ff ff2b 	bl	80010c4 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 800126e:	2101      	movs	r1, #1
 8001270:	2080      	movs	r0, #128	@ 0x80
 8001272:	f7ff ff27 	bl	80010c4 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x01);
 8001276:	2101      	movs	r1, #1
 8001278:	20ff      	movs	r0, #255	@ 0xff
 800127a:	f7ff ff23 	bl	80010c4 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 800127e:	2100      	movs	r1, #0
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff ff1f 	bl	80010c4 <writeReg>
  g_stopVariable = readReg(0x91);
 8001286:	2091      	movs	r0, #145	@ 0x91
 8001288:	f7ff ff69 	bl	800115e <readReg>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4bde      	ldr	r3, [pc, #888]	@ (800160c <VL53L0X_init+0x3ac>)
 8001292:	701a      	strb	r2, [r3, #0]
  writeReg(SYSRANGE_START, 0x01);
 8001294:	2101      	movs	r1, #1
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff ff14 	bl	80010c4 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 800129c:	2100      	movs	r1, #0
 800129e:	20ff      	movs	r0, #255	@ 0xff
 80012a0:	f7ff ff10 	bl	80010c4 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 80012a4:	2100      	movs	r1, #0
 80012a6:	2080      	movs	r0, #128	@ 0x80
 80012a8:	f7ff ff0c 	bl	80010c4 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80012ac:	2060      	movs	r0, #96	@ 0x60
 80012ae:	f7ff ff56 	bl	800115e <readReg>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f043 0312 	orr.w	r3, r3, #18
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4619      	mov	r1, r3
 80012bc:	2060      	movs	r0, #96	@ 0x60
 80012be:	f7ff ff01 	bl	80010c4 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  VL53L0X_setSignalRateLimit(0.25);
 80012c2:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 80012c6:	f000 f9a3 	bl	8001610 <VL53L0X_setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80012ca:	21ff      	movs	r1, #255	@ 0xff
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff fef9 	bl	80010c4 <writeReg>
  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!VL53L0X_getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80012d2:	1dba      	adds	r2, r7, #6
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f9e9 	bl	80016b0 <VL53L0X_getSpadInfo>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <VL53L0X_init+0x88>
 80012e4:	2300      	movs	r3, #0
 80012e6:	e18d      	b.n	8001604 <VL53L0X_init+0x3a4>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80012e8:	463b      	mov	r3, r7
 80012ea:	2206      	movs	r2, #6
 80012ec:	4619      	mov	r1, r3
 80012ee:	20b0      	movs	r0, #176	@ 0xb0
 80012f0:	f7ff ff61 	bl	80011b6 <readMulti>
  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)
  writeReg(INTERNAL_TUNING_2, 0x01);
 80012f4:	2101      	movs	r1, #1
 80012f6:	20ff      	movs	r0, #255	@ 0xff
 80012f8:	f7ff fee4 	bl	80010c4 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80012fc:	2100      	movs	r1, #0
 80012fe:	204f      	movs	r0, #79	@ 0x4f
 8001300:	f7ff fee0 	bl	80010c4 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8001304:	212c      	movs	r1, #44	@ 0x2c
 8001306:	204e      	movs	r0, #78	@ 0x4e
 8001308:	f7ff fedc 	bl	80010c4 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 800130c:	2100      	movs	r1, #0
 800130e:	20ff      	movs	r0, #255	@ 0xff
 8001310:	f7ff fed8 	bl	80010c4 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001314:	21b4      	movs	r1, #180	@ 0xb4
 8001316:	20b6      	movs	r0, #182	@ 0xb6
 8001318:	f7ff fed4 	bl	80010c4 <writeReg>
  // -- VL53L0X_set_reference_spads() end
  //****************************************************************************
  // LOAD TUNING SETTINGS
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(INTERNAL_TUNING_2, 0x01);
 800131c:	2101      	movs	r1, #1
 800131e:	20ff      	movs	r0, #255	@ 0xff
 8001320:	f7ff fed0 	bl	80010c4 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 8001324:	2100      	movs	r1, #0
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff fecc 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 800132c:	2100      	movs	r1, #0
 800132e:	20ff      	movs	r0, #255	@ 0xff
 8001330:	f7ff fec8 	bl	80010c4 <writeReg>
  writeReg(SYSTEM_RANGE_CONFIG, 0x00);
 8001334:	2100      	movs	r1, #0
 8001336:	2009      	movs	r0, #9
 8001338:	f7ff fec4 	bl	80010c4 <writeReg>
  writeReg(0x10, 0x00);
 800133c:	2100      	movs	r1, #0
 800133e:	2010      	movs	r0, #16
 8001340:	f7ff fec0 	bl	80010c4 <writeReg>
  writeReg(0x11, 0x00);
 8001344:	2100      	movs	r1, #0
 8001346:	2011      	movs	r0, #17
 8001348:	f7ff febc 	bl	80010c4 <writeReg>

  writeReg(0x24, 0x01);
 800134c:	2101      	movs	r1, #1
 800134e:	2024      	movs	r0, #36	@ 0x24
 8001350:	f7ff feb8 	bl	80010c4 <writeReg>
  writeReg(0x25, 0xFF);
 8001354:	21ff      	movs	r1, #255	@ 0xff
 8001356:	2025      	movs	r0, #37	@ 0x25
 8001358:	f7ff feb4 	bl	80010c4 <writeReg>
  writeReg(0x75, 0x00);
 800135c:	2100      	movs	r1, #0
 800135e:	2075      	movs	r0, #117	@ 0x75
 8001360:	f7ff feb0 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001364:	2101      	movs	r1, #1
 8001366:	20ff      	movs	r0, #255	@ 0xff
 8001368:	f7ff feac 	bl	80010c4 <writeReg>
  writeReg(0x4E, 0x2C);
 800136c:	212c      	movs	r1, #44	@ 0x2c
 800136e:	204e      	movs	r0, #78	@ 0x4e
 8001370:	f7ff fea8 	bl	80010c4 <writeReg>
  writeReg(0x48, 0x00);
 8001374:	2100      	movs	r1, #0
 8001376:	2048      	movs	r0, #72	@ 0x48
 8001378:	f7ff fea4 	bl	80010c4 <writeReg>
  writeReg(0x30, 0x20);
 800137c:	2120      	movs	r1, #32
 800137e:	2030      	movs	r0, #48	@ 0x30
 8001380:	f7ff fea0 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001384:	2100      	movs	r1, #0
 8001386:	20ff      	movs	r0, #255	@ 0xff
 8001388:	f7ff fe9c 	bl	80010c4 <writeReg>
  writeReg(0x30, 0x09);
 800138c:	2109      	movs	r1, #9
 800138e:	2030      	movs	r0, #48	@ 0x30
 8001390:	f7ff fe98 	bl	80010c4 <writeReg>
  writeReg(0x54, 0x00);
 8001394:	2100      	movs	r1, #0
 8001396:	2054      	movs	r0, #84	@ 0x54
 8001398:	f7ff fe94 	bl	80010c4 <writeReg>
  writeReg(0x31, 0x04);
 800139c:	2104      	movs	r1, #4
 800139e:	2031      	movs	r0, #49	@ 0x31
 80013a0:	f7ff fe90 	bl	80010c4 <writeReg>
  writeReg(0x32, 0x03);
 80013a4:	2103      	movs	r1, #3
 80013a6:	2032      	movs	r0, #50	@ 0x32
 80013a8:	f7ff fe8c 	bl	80010c4 <writeReg>
  writeReg(0x40, 0x83);
 80013ac:	2183      	movs	r1, #131	@ 0x83
 80013ae:	2040      	movs	r0, #64	@ 0x40
 80013b0:	f7ff fe88 	bl	80010c4 <writeReg>
  writeReg(0x46, 0x25);
 80013b4:	2125      	movs	r1, #37	@ 0x25
 80013b6:	2046      	movs	r0, #70	@ 0x46
 80013b8:	f7ff fe84 	bl	80010c4 <writeReg>
  writeReg(0x60, 0x00);
 80013bc:	2100      	movs	r1, #0
 80013be:	2060      	movs	r0, #96	@ 0x60
 80013c0:	f7ff fe80 	bl	80010c4 <writeReg>
  writeReg(0x27, 0x00);
 80013c4:	2100      	movs	r1, #0
 80013c6:	2027      	movs	r0, #39	@ 0x27
 80013c8:	f7ff fe7c 	bl	80010c4 <writeReg>
  writeReg(0x50, 0x06);
 80013cc:	2106      	movs	r1, #6
 80013ce:	2050      	movs	r0, #80	@ 0x50
 80013d0:	f7ff fe78 	bl	80010c4 <writeReg>
  writeReg(0x51, 0x00);
 80013d4:	2100      	movs	r1, #0
 80013d6:	2051      	movs	r0, #81	@ 0x51
 80013d8:	f7ff fe74 	bl	80010c4 <writeReg>
  writeReg(0x52, 0x96);
 80013dc:	2196      	movs	r1, #150	@ 0x96
 80013de:	2052      	movs	r0, #82	@ 0x52
 80013e0:	f7ff fe70 	bl	80010c4 <writeReg>
  writeReg(0x56, 0x08);
 80013e4:	2108      	movs	r1, #8
 80013e6:	2056      	movs	r0, #86	@ 0x56
 80013e8:	f7ff fe6c 	bl	80010c4 <writeReg>
  writeReg(0x57, 0x30);
 80013ec:	2130      	movs	r1, #48	@ 0x30
 80013ee:	2057      	movs	r0, #87	@ 0x57
 80013f0:	f7ff fe68 	bl	80010c4 <writeReg>
  writeReg(0x61, 0x00);
 80013f4:	2100      	movs	r1, #0
 80013f6:	2061      	movs	r0, #97	@ 0x61
 80013f8:	f7ff fe64 	bl	80010c4 <writeReg>
  writeReg(0x62, 0x00);
 80013fc:	2100      	movs	r1, #0
 80013fe:	2062      	movs	r0, #98	@ 0x62
 8001400:	f7ff fe60 	bl	80010c4 <writeReg>
  writeReg(0x64, 0x00);
 8001404:	2100      	movs	r1, #0
 8001406:	2064      	movs	r0, #100	@ 0x64
 8001408:	f7ff fe5c 	bl	80010c4 <writeReg>
  writeReg(0x65, 0x00);
 800140c:	2100      	movs	r1, #0
 800140e:	2065      	movs	r0, #101	@ 0x65
 8001410:	f7ff fe58 	bl	80010c4 <writeReg>
  writeReg(0x66, 0xA0);
 8001414:	21a0      	movs	r1, #160	@ 0xa0
 8001416:	2066      	movs	r0, #102	@ 0x66
 8001418:	f7ff fe54 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 800141c:	2101      	movs	r1, #1
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	f7ff fe50 	bl	80010c4 <writeReg>
  writeReg(0x22, 0x32);
 8001424:	2132      	movs	r1, #50	@ 0x32
 8001426:	2022      	movs	r0, #34	@ 0x22
 8001428:	f7ff fe4c 	bl	80010c4 <writeReg>
  writeReg(0x47, 0x14);
 800142c:	2114      	movs	r1, #20
 800142e:	2047      	movs	r0, #71	@ 0x47
 8001430:	f7ff fe48 	bl	80010c4 <writeReg>
  writeReg(0x49, 0xFF);
 8001434:	21ff      	movs	r1, #255	@ 0xff
 8001436:	2049      	movs	r0, #73	@ 0x49
 8001438:	f7ff fe44 	bl	80010c4 <writeReg>
  writeReg(0x4A, 0x00);
 800143c:	2100      	movs	r1, #0
 800143e:	204a      	movs	r0, #74	@ 0x4a
 8001440:	f7ff fe40 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001444:	2100      	movs	r1, #0
 8001446:	20ff      	movs	r0, #255	@ 0xff
 8001448:	f7ff fe3c 	bl	80010c4 <writeReg>
  writeReg(0x7A, 0x0A);
 800144c:	210a      	movs	r1, #10
 800144e:	207a      	movs	r0, #122	@ 0x7a
 8001450:	f7ff fe38 	bl	80010c4 <writeReg>
  writeReg(0x7B, 0x00);
 8001454:	2100      	movs	r1, #0
 8001456:	207b      	movs	r0, #123	@ 0x7b
 8001458:	f7ff fe34 	bl	80010c4 <writeReg>
  writeReg(0x78, 0x21);
 800145c:	2121      	movs	r1, #33	@ 0x21
 800145e:	2078      	movs	r0, #120	@ 0x78
 8001460:	f7ff fe30 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001464:	2101      	movs	r1, #1
 8001466:	20ff      	movs	r0, #255	@ 0xff
 8001468:	f7ff fe2c 	bl	80010c4 <writeReg>
  writeReg(0x23, 0x34);
 800146c:	2134      	movs	r1, #52	@ 0x34
 800146e:	2023      	movs	r0, #35	@ 0x23
 8001470:	f7ff fe28 	bl	80010c4 <writeReg>
  writeReg(0x42, 0x00);
 8001474:	2100      	movs	r1, #0
 8001476:	2042      	movs	r0, #66	@ 0x42
 8001478:	f7ff fe24 	bl	80010c4 <writeReg>
  writeReg(0x44, 0xFF);
 800147c:	21ff      	movs	r1, #255	@ 0xff
 800147e:	2044      	movs	r0, #68	@ 0x44
 8001480:	f7ff fe20 	bl	80010c4 <writeReg>
  writeReg(0x45, 0x26);
 8001484:	2126      	movs	r1, #38	@ 0x26
 8001486:	2045      	movs	r0, #69	@ 0x45
 8001488:	f7ff fe1c 	bl	80010c4 <writeReg>
  writeReg(0x46, 0x05);
 800148c:	2105      	movs	r1, #5
 800148e:	2046      	movs	r0, #70	@ 0x46
 8001490:	f7ff fe18 	bl	80010c4 <writeReg>
  writeReg(0x40, 0x40);
 8001494:	2140      	movs	r1, #64	@ 0x40
 8001496:	2040      	movs	r0, #64	@ 0x40
 8001498:	f7ff fe14 	bl	80010c4 <writeReg>
  writeReg(0x0E, 0x06);
 800149c:	2106      	movs	r1, #6
 800149e:	200e      	movs	r0, #14
 80014a0:	f7ff fe10 	bl	80010c4 <writeReg>
  writeReg(0x20, 0x1A);
 80014a4:	211a      	movs	r1, #26
 80014a6:	2020      	movs	r0, #32
 80014a8:	f7ff fe0c 	bl	80010c4 <writeReg>
  writeReg(0x43, 0x40);
 80014ac:	2140      	movs	r1, #64	@ 0x40
 80014ae:	2043      	movs	r0, #67	@ 0x43
 80014b0:	f7ff fe08 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 80014b4:	2100      	movs	r1, #0
 80014b6:	20ff      	movs	r0, #255	@ 0xff
 80014b8:	f7ff fe04 	bl	80010c4 <writeReg>
  writeReg(0x34, 0x03);
 80014bc:	2103      	movs	r1, #3
 80014be:	2034      	movs	r0, #52	@ 0x34
 80014c0:	f7ff fe00 	bl	80010c4 <writeReg>
  writeReg(0x35, 0x44);
 80014c4:	2144      	movs	r1, #68	@ 0x44
 80014c6:	2035      	movs	r0, #53	@ 0x35
 80014c8:	f7ff fdfc 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 80014cc:	2101      	movs	r1, #1
 80014ce:	20ff      	movs	r0, #255	@ 0xff
 80014d0:	f7ff fdf8 	bl	80010c4 <writeReg>
  writeReg(0x31, 0x04);
 80014d4:	2104      	movs	r1, #4
 80014d6:	2031      	movs	r0, #49	@ 0x31
 80014d8:	f7ff fdf4 	bl	80010c4 <writeReg>
  writeReg(0x4B, 0x09);
 80014dc:	2109      	movs	r1, #9
 80014de:	204b      	movs	r0, #75	@ 0x4b
 80014e0:	f7ff fdf0 	bl	80010c4 <writeReg>
  writeReg(0x4C, 0x05);
 80014e4:	2105      	movs	r1, #5
 80014e6:	204c      	movs	r0, #76	@ 0x4c
 80014e8:	f7ff fdec 	bl	80010c4 <writeReg>
  writeReg(0x4D, 0x04);
 80014ec:	2104      	movs	r1, #4
 80014ee:	204d      	movs	r0, #77	@ 0x4d
 80014f0:	f7ff fde8 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 80014f4:	2100      	movs	r1, #0
 80014f6:	20ff      	movs	r0, #255	@ 0xff
 80014f8:	f7ff fde4 	bl	80010c4 <writeReg>
  writeReg(0x44, 0x00);
 80014fc:	2100      	movs	r1, #0
 80014fe:	2044      	movs	r0, #68	@ 0x44
 8001500:	f7ff fde0 	bl	80010c4 <writeReg>
  writeReg(0x45, 0x20);
 8001504:	2120      	movs	r1, #32
 8001506:	2045      	movs	r0, #69	@ 0x45
 8001508:	f7ff fddc 	bl	80010c4 <writeReg>
  writeReg(0x47, 0x08);
 800150c:	2108      	movs	r1, #8
 800150e:	2047      	movs	r0, #71	@ 0x47
 8001510:	f7ff fdd8 	bl	80010c4 <writeReg>
  writeReg(0x48, 0x28);
 8001514:	2128      	movs	r1, #40	@ 0x28
 8001516:	2048      	movs	r0, #72	@ 0x48
 8001518:	f7ff fdd4 	bl	80010c4 <writeReg>
  writeReg(0x67, 0x00);
 800151c:	2100      	movs	r1, #0
 800151e:	2067      	movs	r0, #103	@ 0x67
 8001520:	f7ff fdd0 	bl	80010c4 <writeReg>
  writeReg(0x70, 0x04);
 8001524:	2104      	movs	r1, #4
 8001526:	2070      	movs	r0, #112	@ 0x70
 8001528:	f7ff fdcc 	bl	80010c4 <writeReg>
  writeReg(0x71, 0x01);
 800152c:	2101      	movs	r1, #1
 800152e:	2071      	movs	r0, #113	@ 0x71
 8001530:	f7ff fdc8 	bl	80010c4 <writeReg>
  writeReg(0x72, 0xFE);
 8001534:	21fe      	movs	r1, #254	@ 0xfe
 8001536:	2072      	movs	r0, #114	@ 0x72
 8001538:	f7ff fdc4 	bl	80010c4 <writeReg>
  writeReg(0x76, 0x00);
 800153c:	2100      	movs	r1, #0
 800153e:	2076      	movs	r0, #118	@ 0x76
 8001540:	f7ff fdc0 	bl	80010c4 <writeReg>
  writeReg(0x77, 0x00);
 8001544:	2100      	movs	r1, #0
 8001546:	2077      	movs	r0, #119	@ 0x77
 8001548:	f7ff fdbc 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 800154c:	2101      	movs	r1, #1
 800154e:	20ff      	movs	r0, #255	@ 0xff
 8001550:	f7ff fdb8 	bl	80010c4 <writeReg>
  writeReg(0x0D, 0x01);
 8001554:	2101      	movs	r1, #1
 8001556:	200d      	movs	r0, #13
 8001558:	f7ff fdb4 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 800155c:	2100      	movs	r1, #0
 800155e:	20ff      	movs	r0, #255	@ 0xff
 8001560:	f7ff fdb0 	bl	80010c4 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 8001564:	2101      	movs	r1, #1
 8001566:	2080      	movs	r0, #128	@ 0x80
 8001568:	f7ff fdac 	bl	80010c4 <writeReg>
  writeReg(0x01, 0xF8);
 800156c:	21f8      	movs	r1, #248	@ 0xf8
 800156e:	2001      	movs	r0, #1
 8001570:	f7ff fda8 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001574:	2101      	movs	r1, #1
 8001576:	20ff      	movs	r0, #255	@ 0xff
 8001578:	f7ff fda4 	bl	80010c4 <writeReg>
  writeReg(0x8E, 0x01);
 800157c:	2101      	movs	r1, #1
 800157e:	208e      	movs	r0, #142	@ 0x8e
 8001580:	f7ff fda0 	bl	80010c4 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 8001584:	2101      	movs	r1, #1
 8001586:	2000      	movs	r0, #0
 8001588:	f7ff fd9c 	bl	80010c4 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 800158c:	2100      	movs	r1, #0
 800158e:	20ff      	movs	r0, #255	@ 0xff
 8001590:	f7ff fd98 	bl	80010c4 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 8001594:	2100      	movs	r1, #0
 8001596:	2080      	movs	r0, #128	@ 0x80
 8001598:	f7ff fd94 	bl	80010c4 <writeReg>
  //***************************************************************************
  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 800159c:	2104      	movs	r1, #4
 800159e:	200a      	movs	r0, #10
 80015a0:	f7ff fd90 	bl	80010c4 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80015a4:	2084      	movs	r0, #132	@ 0x84
 80015a6:	f7ff fdda 	bl	800115e <readReg>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f023 0310 	bic.w	r3, r3, #16
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4619      	mov	r1, r3
 80015b4:	2084      	movs	r0, #132	@ 0x84
 80015b6:	f7ff fd85 	bl	80010c4 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80015ba:	2101      	movs	r1, #1
 80015bc:	200b      	movs	r0, #11
 80015be:	f7ff fd81 	bl	80010c4 <writeReg>
  //***************************************************************************
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80015c2:	21e8      	movs	r1, #232	@ 0xe8
 80015c4:	2001      	movs	r0, #1
 80015c6:	f7ff fd7d 	bl	80010c4 <writeReg>
  //***************************************************************************
  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())
  // -- VL53L0X_perform_vhv_calibration() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80015ca:	2101      	movs	r1, #1
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff fd79 	bl	80010c4 <writeReg>
  if (!VL53L0X_performSingleRefCalibration(0x40)) { return false; }
 80015d2:	2040      	movs	r0, #64	@ 0x40
 80015d4:	f000 f852 	bl	800167c <VL53L0X_performSingleRefCalibration>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <VL53L0X_init+0x382>
 80015de:	2300      	movs	r3, #0
 80015e0:	e010      	b.n	8001604 <VL53L0X_init+0x3a4>
  //***************************************************************************
  // -- VL53L0X_perform_phase_calibration() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80015e2:	2102      	movs	r1, #2
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff fd6d 	bl	80010c4 <writeReg>
  if (!VL53L0X_performSingleRefCalibration(0x00)) { return false; }
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 f846 	bl	800167c <VL53L0X_performSingleRefCalibration>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <VL53L0X_init+0x39a>
 80015f6:	2300      	movs	r3, #0
 80015f8:	e004      	b.n	8001604 <VL53L0X_init+0x3a4>
  //***************************************************************************
  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80015fa:	21e8      	movs	r1, #232	@ 0xe8
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff fd61 	bl	80010c4 <writeReg>
  //***************************************************************************
  return true;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000264 	.word	0x20000264

08001610 <VL53L0X_setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
uint8_t VL53L0X_setSignalRateLimit(float limit_Mcps)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 800161a:	edd7 7a01 	vldr	s15, [r7, #4]
 800161e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001626:	d40a      	bmi.n	800163e <VL53L0X_setSignalRateLimit+0x2e>
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7fe ffa5 	bl	8000578 <__aeabi_f2d>
 800162e:	a311      	add	r3, pc, #68	@ (adr r3, 8001674 <VL53L0X_setSignalRateLimit+0x64>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff fa88 	bl	8000b48 <__aeabi_dcmpgt>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <VL53L0X_setSignalRateLimit+0x32>
 800163e:	2300      	movs	r3, #0
 8001640:	e00f      	b.n	8001662 <VL53L0X_setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8001642:	edd7 7a01 	vldr	s15, [r7, #4]
 8001646:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001670 <VL53L0X_setSignalRateLimit+0x60>
 800164a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800164e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001652:	ee17 3a90 	vmov	r3, s15
 8001656:	b29b      	uxth	r3, r3
 8001658:	4619      	mov	r1, r3
 800165a:	2044      	movs	r0, #68	@ 0x44
 800165c:	f7ff fd44 	bl	80010e8 <writeReg16Bit>
  return true;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	f3af 8000 	nop.w
 8001670:	43000000 	.word	0x43000000
 8001674:	0a3d70a4 	.word	0x0a3d70a4
 8001678:	407fffd7 	.word	0x407fffd7

0800167c <VL53L0X_performSingleRefCalibration>:
  return temp;
}
//=============================================================================
// based on VL53L0X_perform_single_ref_calibration()
uint8_t VL53L0X_performSingleRefCalibration(uint8_t vhv_init_byte)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4619      	mov	r1, r3
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff fd17 	bl	80010c4 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001696:	2101      	movs	r1, #1
 8001698:	200b      	movs	r0, #11
 800169a:	f7ff fd13 	bl	80010c4 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 800169e:	2100      	movs	r1, #0
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff fd0f 	bl	80010c4 <writeReg>
  return true;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <VL53L0X_getSpadInfo>:
//=============================================================================
// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
uint8_t VL53L0X_getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80016ba:	2101      	movs	r1, #1
 80016bc:	2080      	movs	r0, #128	@ 0x80
 80016be:	f7ff fd01 	bl	80010c4 <writeReg>
  writeReg(0xFF, 0x01);
 80016c2:	2101      	movs	r1, #1
 80016c4:	20ff      	movs	r0, #255	@ 0xff
 80016c6:	f7ff fcfd 	bl	80010c4 <writeReg>
  writeReg(0x00, 0x00);
 80016ca:	2100      	movs	r1, #0
 80016cc:	2000      	movs	r0, #0
 80016ce:	f7ff fcf9 	bl	80010c4 <writeReg>

  writeReg(0xFF, 0x06);
 80016d2:	2106      	movs	r1, #6
 80016d4:	20ff      	movs	r0, #255	@ 0xff
 80016d6:	f7ff fcf5 	bl	80010c4 <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 80016da:	2083      	movs	r0, #131	@ 0x83
 80016dc:	f7ff fd3f 	bl	800115e <readReg>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	4619      	mov	r1, r3
 80016ea:	2083      	movs	r0, #131	@ 0x83
 80016ec:	f7ff fcea 	bl	80010c4 <writeReg>
  writeReg(0xFF, 0x07);
 80016f0:	2107      	movs	r1, #7
 80016f2:	20ff      	movs	r0, #255	@ 0xff
 80016f4:	f7ff fce6 	bl	80010c4 <writeReg>
  writeReg(0x81, 0x01);
 80016f8:	2101      	movs	r1, #1
 80016fa:	2081      	movs	r0, #129	@ 0x81
 80016fc:	f7ff fce2 	bl	80010c4 <writeReg>

  writeReg(0x80, 0x01);
 8001700:	2101      	movs	r1, #1
 8001702:	2080      	movs	r0, #128	@ 0x80
 8001704:	f7ff fcde 	bl	80010c4 <writeReg>

  writeReg(0x94, 0x6b);
 8001708:	216b      	movs	r1, #107	@ 0x6b
 800170a:	2094      	movs	r0, #148	@ 0x94
 800170c:	f7ff fcda 	bl	80010c4 <writeReg>
  writeReg(0x83, 0x00);
 8001710:	2100      	movs	r1, #0
 8001712:	2083      	movs	r0, #131	@ 0x83
 8001714:	f7ff fcd6 	bl	80010c4 <writeReg>
  startTimeout();
 8001718:	f7ff fccc 	bl	80010b4 <millis>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	4b2e      	ldr	r3, [pc, #184]	@ (80017dc <VL53L0X_getSpadInfo+0x12c>)
 8001722:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83) == 0x00)
 8001724:	e010      	b.n	8001748 <VL53L0X_getSpadInfo+0x98>
  {
    if (checkTimeoutExpired()) { return false; }
 8001726:	4b2e      	ldr	r3, [pc, #184]	@ (80017e0 <VL53L0X_getSpadInfo+0x130>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00c      	beq.n	8001748 <VL53L0X_getSpadInfo+0x98>
 800172e:	f7ff fcc1 	bl	80010b4 <millis>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <VL53L0X_getSpadInfo+0x12c>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	4a28      	ldr	r2, [pc, #160]	@ (80017e0 <VL53L0X_getSpadInfo+0x130>)
 800173e:	8812      	ldrh	r2, [r2, #0]
 8001740:	4293      	cmp	r3, r2
 8001742:	dd01      	ble.n	8001748 <VL53L0X_getSpadInfo+0x98>
 8001744:	2300      	movs	r3, #0
 8001746:	e044      	b.n	80017d2 <VL53L0X_getSpadInfo+0x122>
  while (readReg(0x83) == 0x00)
 8001748:	2083      	movs	r0, #131	@ 0x83
 800174a:	f7ff fd08 	bl	800115e <readReg>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0e8      	beq.n	8001726 <VL53L0X_getSpadInfo+0x76>
  }
  writeReg(0x83, 0x01);
 8001754:	2101      	movs	r1, #1
 8001756:	2083      	movs	r0, #131	@ 0x83
 8001758:	f7ff fcb4 	bl	80010c4 <writeReg>
  tmp = readReg(0x92);
 800175c:	2092      	movs	r0, #146	@ 0x92
 800175e:	f7ff fcfe 	bl	800115e <readReg>
 8001762:	4603      	mov	r3, r0
 8001764:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800176c:	b2da      	uxtb	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	09db      	lsrs	r3, r3, #7
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf14      	ite	ne
 8001780:	2301      	movne	r3, #1
 8001782:	2300      	moveq	r3, #0
 8001784:	b2da      	uxtb	r2, r3
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 800178a:	2100      	movs	r1, #0
 800178c:	2081      	movs	r0, #129	@ 0x81
 800178e:	f7ff fc99 	bl	80010c4 <writeReg>
  writeReg(0xFF, 0x06);
 8001792:	2106      	movs	r1, #6
 8001794:	20ff      	movs	r0, #255	@ 0xff
 8001796:	f7ff fc95 	bl	80010c4 <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 800179a:	2083      	movs	r0, #131	@ 0x83
 800179c:	f7ff fcdf 	bl	800115e <readReg>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f023 0304 	bic.w	r3, r3, #4
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	4619      	mov	r1, r3
 80017aa:	2083      	movs	r0, #131	@ 0x83
 80017ac:	f7ff fc8a 	bl	80010c4 <writeReg>
  writeReg(0xFF, 0x01);
 80017b0:	2101      	movs	r1, #1
 80017b2:	20ff      	movs	r0, #255	@ 0xff
 80017b4:	f7ff fc86 	bl	80010c4 <writeReg>
  writeReg(0x00, 0x01);
 80017b8:	2101      	movs	r1, #1
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff fc82 	bl	80010c4 <writeReg>

  writeReg(0xFF, 0x00);
 80017c0:	2100      	movs	r1, #0
 80017c2:	20ff      	movs	r0, #255	@ 0xff
 80017c4:	f7ff fc7e 	bl	80010c4 <writeReg>
  writeReg(0x80, 0x00);
 80017c8:	2100      	movs	r1, #0
 80017ca:	2080      	movs	r0, #128	@ 0x80
 80017cc:	f7ff fc7a 	bl	80010c4 <writeReg>

  return true;
 80017d0:	2301      	movs	r3, #1
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000266 	.word	0x20000266
 80017e0:	20000268 	.word	0x20000268

080017e4 <VL53L0X_startContinuous>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X_startContinuous(uint32_t period_ms)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  writeReg(0x80, 0x01);
 80017ec:	2101      	movs	r1, #1
 80017ee:	2080      	movs	r0, #128	@ 0x80
 80017f0:	f7ff fc68 	bl	80010c4 <writeReg>
  writeReg(0xFF, 0x01);
 80017f4:	2101      	movs	r1, #1
 80017f6:	20ff      	movs	r0, #255	@ 0xff
 80017f8:	f7ff fc64 	bl	80010c4 <writeReg>
  writeReg(0x00, 0x00);
 80017fc:	2100      	movs	r1, #0
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff fc60 	bl	80010c4 <writeReg>
  writeReg(0x91, g_stopVariable);
 8001804:	4b19      	ldr	r3, [pc, #100]	@ (800186c <VL53L0X_startContinuous+0x88>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	2091      	movs	r0, #145	@ 0x91
 800180c:	f7ff fc5a 	bl	80010c4 <writeReg>
  writeReg(0x00, 0x01);
 8001810:	2101      	movs	r1, #1
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff fc56 	bl	80010c4 <writeReg>
  writeReg(0xFF, 0x00);
 8001818:	2100      	movs	r1, #0
 800181a:	20ff      	movs	r0, #255	@ 0xff
 800181c:	f7ff fc52 	bl	80010c4 <writeReg>
  writeReg(0x80, 0x00);
 8001820:	2100      	movs	r1, #0
 8001822:	2080      	movs	r0, #128	@ 0x80
 8001824:	f7ff fc4e 	bl	80010c4 <writeReg>

  if (period_ms != 0)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d015      	beq.n	800185a <VL53L0X_startContinuous+0x76>
  {
    // continuous timed mode
    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 800182e:	20f8      	movs	r0, #248	@ 0xf8
 8001830:	f7ff fca8 	bl	8001184 <readReg16Bit>
 8001834:	4603      	mov	r3, r0
 8001836:	81fb      	strh	r3, [r7, #14]

    if (osc_calibrate_val != 0)
 8001838:	89fb      	ldrh	r3, [r7, #14]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d004      	beq.n	8001848 <VL53L0X_startContinuous+0x64>
    {
      period_ms *= osc_calibrate_val;
 800183e:	89fa      	ldrh	r2, [r7, #14]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	fb02 f303 	mul.w	r3, r2, r3
 8001846:	607b      	str	r3, [r7, #4]
    }
    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	2004      	movs	r0, #4
 800184c:	f7ff fc67 	bl	800111e <writeReg32Bit>
    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 8001850:	2104      	movs	r1, #4
 8001852:	2000      	movs	r0, #0
 8001854:	f7ff fc36 	bl	80010c4 <writeReg>
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
  }
}
 8001858:	e003      	b.n	8001862 <VL53L0X_startContinuous+0x7e>
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 800185a:	2102      	movs	r1, #2
 800185c:	2000      	movs	r0, #0
 800185e:	f7ff fc31 	bl	80010c4 <writeReg>
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000264 	.word	0x20000264

08001870 <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <captDistIR_Init+0x5c>)
 8001876:	4a16      	ldr	r2, [pc, #88]	@ (80018d0 <captDistIR_Init+0x60>)
 8001878:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 800187a:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <captDistIR_Init+0x5c>)
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <captDistIR_Init+0x5c>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <captDistIR_Init+0x5c>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <captDistIR_Init+0x5c>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <captDistIR_Init+0x5c>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 8001898:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <captDistIR_Init+0x5c>)
 800189a:	2202      	movs	r2, #2
 800189c:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <captDistIR_Init+0x5c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	@ 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 80018a4:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <captDistIR_Init+0x5c>)
 80018a6:	2202      	movs	r2, #2
 80018a8:	629a      	str	r2, [r3, #40]	@ 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 80018aa:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <captDistIR_Init+0x5c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <captDistIR_Init+0x5c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	631a      	str	r2, [r3, #48]	@ 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 80018b6:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <captDistIR_Init+0x5c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 80018bc:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <captDistIR_Init+0x5c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 80018c2:	4802      	ldr	r0, [pc, #8]	@ (80018cc <captDistIR_Init+0x5c>)
 80018c4:	f002 ff6a 	bl	800479c <HAL_ADC_Init>
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	2000026c 	.word	0x2000026c
 80018d0:	40012000 	.word	0x40012000

080018d4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	@ 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80018e0:	f00a fcce 	bl	800c280 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80018e4:	4b5a      	ldr	r3, [pc, #360]	@ (8001a50 <pvPortMallocMicroROS+0x17c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80018ec:	f000 f992 	bl	8001c14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80018f0:	4b58      	ldr	r3, [pc, #352]	@ (8001a54 <pvPortMallocMicroROS+0x180>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f040 8090 	bne.w	8001a1e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d01e      	beq.n	8001942 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001904:	2208      	movs	r2, #8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	2b00      	cmp	r3, #0
 8001914:	d015      	beq.n	8001942 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f023 0307 	bic.w	r3, r3, #7
 800191c:	3308      	adds	r3, #8
 800191e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00b      	beq.n	8001942 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800192a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800192e:	f383 8811 	msr	BASEPRI, r3
 8001932:	f3bf 8f6f 	isb	sy
 8001936:	f3bf 8f4f 	dsb	sy
 800193a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	e7fd      	b.n	800193e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d06a      	beq.n	8001a1e <pvPortMallocMicroROS+0x14a>
 8001948:	4b43      	ldr	r3, [pc, #268]	@ (8001a58 <pvPortMallocMicroROS+0x184>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	d865      	bhi.n	8001a1e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001952:	4b42      	ldr	r3, [pc, #264]	@ (8001a5c <pvPortMallocMicroROS+0x188>)
 8001954:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001956:	4b41      	ldr	r3, [pc, #260]	@ (8001a5c <pvPortMallocMicroROS+0x188>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800195c:	e004      	b.n	8001968 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	429a      	cmp	r2, r3
 8001970:	d903      	bls.n	800197a <pvPortMallocMicroROS+0xa6>
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f1      	bne.n	800195e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800197a:	4b35      	ldr	r3, [pc, #212]	@ (8001a50 <pvPortMallocMicroROS+0x17c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001980:	429a      	cmp	r2, r3
 8001982:	d04c      	beq.n	8001a1e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2208      	movs	r2, #8
 800198a:	4413      	add	r3, r2
 800198c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	1ad2      	subs	r2, r2, r3
 800199e:	2308      	movs	r3, #8
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d920      	bls.n	80019e8 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80019a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4413      	add	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00b      	beq.n	80019d0 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80019b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019bc:	f383 8811 	msr	BASEPRI, r3
 80019c0:	f3bf 8f6f 	isb	sy
 80019c4:	f3bf 8f4f 	dsb	sy
 80019c8:	613b      	str	r3, [r7, #16]
}
 80019ca:	bf00      	nop
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	1ad2      	subs	r2, r2, r3
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80019e2:	69b8      	ldr	r0, [r7, #24]
 80019e4:	f000 f978 	bl	8001cd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <pvPortMallocMicroROS+0x184>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	4a19      	ldr	r2, [pc, #100]	@ (8001a58 <pvPortMallocMicroROS+0x184>)
 80019f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80019f6:	4b18      	ldr	r3, [pc, #96]	@ (8001a58 <pvPortMallocMicroROS+0x184>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <pvPortMallocMicroROS+0x18c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d203      	bcs.n	8001a0a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001a02:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <pvPortMallocMicroROS+0x184>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a16      	ldr	r2, [pc, #88]	@ (8001a60 <pvPortMallocMicroROS+0x18c>)
 8001a08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <pvPortMallocMicroROS+0x180>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001a1e:	f00a fc3d 	bl	800c29c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00b      	beq.n	8001a44 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a30:	f383 8811 	msr	BASEPRI, r3
 8001a34:	f3bf 8f6f 	isb	sy
 8001a38:	f3bf 8f4f 	dsb	sy
 8001a3c:	60fb      	str	r3, [r7, #12]
}
 8001a3e:	bf00      	nop
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001a44:	69fb      	ldr	r3, [r7, #28]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3728      	adds	r7, #40	@ 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200042b8 	.word	0x200042b8
 8001a54:	200042c4 	.word	0x200042c4
 8001a58:	200042bc 	.word	0x200042bc
 8001a5c:	200042b0 	.word	0x200042b0
 8001a60:	200042c0 	.word	0x200042c0

08001a64 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d04a      	beq.n	8001b0c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001a76:	2308      	movs	r3, #8
 8001a78:	425b      	negs	r3, r3
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	4b22      	ldr	r3, [pc, #136]	@ (8001b14 <vPortFreeMicroROS+0xb0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10b      	bne.n	8001aaa <vPortFreeMicroROS+0x46>
	__asm volatile
 8001a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a96:	f383 8811 	msr	BASEPRI, r3
 8001a9a:	f3bf 8f6f 	isb	sy
 8001a9e:	f3bf 8f4f 	dsb	sy
 8001aa2:	60fb      	str	r3, [r7, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	e7fd      	b.n	8001aa6 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00b      	beq.n	8001aca <vPortFreeMicroROS+0x66>
	__asm volatile
 8001ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ab6:	f383 8811 	msr	BASEPRI, r3
 8001aba:	f3bf 8f6f 	isb	sy
 8001abe:	f3bf 8f4f 	dsb	sy
 8001ac2:	60bb      	str	r3, [r7, #8]
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	e7fd      	b.n	8001ac6 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <vPortFreeMicroROS+0xb0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d019      	beq.n	8001b0c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d115      	bne.n	8001b0c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <vPortFreeMicroROS+0xb0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	401a      	ands	r2, r3
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001af0:	f00a fbc6 	bl	800c280 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <vPortFreeMicroROS+0xb4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a06      	ldr	r2, [pc, #24]	@ (8001b18 <vPortFreeMicroROS+0xb4>)
 8001b00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001b02:	6938      	ldr	r0, [r7, #16]
 8001b04:	f000 f8e8 	bl	8001cd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001b08:	f00a fbc8 	bl	800c29c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001b0c:	bf00      	nop
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200042c4 	.word	0x200042c4
 8001b18:	200042bc 	.word	0x200042bc

08001b1c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001b28:	2308      	movs	r3, #8
 8001b2a:	425b      	negs	r3, r3
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	4413      	add	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <getBlockSize+0x38>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]

	return count;
 8001b44:	68fb      	ldr	r3, [r7, #12]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200042c4 	.word	0x200042c4

08001b58 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001b62:	f00a fb8d 	bl	800c280 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001b66:	6838      	ldr	r0, [r7, #0]
 8001b68:	f7ff feb4 	bl	80018d4 <pvPortMallocMicroROS>
 8001b6c:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001b72:	2308      	movs	r3, #8
 8001b74:	425b      	negs	r3, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <pvPortReallocMicroROS+0x70>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	4013      	ands	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]

  	while(count--)
 8001b96:	e007      	b.n	8001ba8 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8001b98:	69fa      	ldr	r2, [r7, #28]
 8001b9a:	1c53      	adds	r3, r2, #1
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	1c59      	adds	r1, r3, #1
 8001ba2:	61b9      	str	r1, [r7, #24]
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	1e5a      	subs	r2, r3, #1
 8001bac:	617a      	str	r2, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f2      	bne.n	8001b98 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff56 	bl	8001a64 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8001bb8:	f00a fb70 	bl	800c29c <xTaskResumeAll>

	return newmem;
 8001bbc:	693b      	ldr	r3, [r7, #16]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200042c4 	.word	0x200042c4

08001bcc <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001bd6:	f00a fb53 	bl	800c280 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001be4:	6978      	ldr	r0, [r7, #20]
 8001be6:	f7ff fe75 	bl	80018d4 <pvPortMallocMicroROS>
 8001bea:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001bf0:	e004      	b.n	8001bfc <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	613a      	str	r2, [r7, #16]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	1e5a      	subs	r2, r3, #1
 8001c00:	617a      	str	r2, [r7, #20]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f5      	bne.n	8001bf2 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001c06:	f00a fb49 	bl	800c29c <xTaskResumeAll>
  	return mem;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001c1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001c20:	4b27      	ldr	r3, [pc, #156]	@ (8001cc0 <prvHeapInit+0xac>)
 8001c22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00c      	beq.n	8001c48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3307      	adds	r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f023 0307 	bic.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc0 <prvHeapInit+0xac>)
 8001c44:	4413      	add	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cc4 <prvHeapInit+0xb0>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001c52:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc4 <prvHeapInit+0xb0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001c60:	2208      	movs	r2, #8
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f023 0307 	bic.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4a15      	ldr	r2, [pc, #84]	@ (8001cc8 <prvHeapInit+0xb4>)
 8001c74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001c76:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <prvHeapInit+0xb4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001c7e:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <prvHeapInit+0xb4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	1ad2      	subs	r2, r2, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <prvHeapInit+0xb4>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <prvHeapInit+0xb8>)
 8001ca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a09      	ldr	r2, [pc, #36]	@ (8001cd0 <prvHeapInit+0xbc>)
 8001caa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001cac:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <prvHeapInit+0xc0>)
 8001cae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001cb2:	601a      	str	r2, [r3, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	200002b0 	.word	0x200002b0
 8001cc4:	200042b0 	.word	0x200042b0
 8001cc8:	200042b8 	.word	0x200042b8
 8001ccc:	200042c0 	.word	0x200042c0
 8001cd0:	200042bc 	.word	0x200042bc
 8001cd4:	200042c4 	.word	0x200042c4

08001cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001ce0:	4b28      	ldr	r3, [pc, #160]	@ (8001d84 <prvInsertBlockIntoFreeList+0xac>)
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	e002      	b.n	8001cec <prvInsertBlockIntoFreeList+0x14>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d8f7      	bhi.n	8001ce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	4413      	add	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d108      	bne.n	8001d1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	441a      	add	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	441a      	add	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d118      	bne.n	8001d60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <prvInsertBlockIntoFreeList+0xb0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d00d      	beq.n	8001d56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	441a      	add	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	e008      	b.n	8001d68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001d56:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <prvInsertBlockIntoFreeList+0xb0>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	e003      	b.n	8001d68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d002      	beq.n	8001d76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	200042b0 	.word	0x200042b0
 8001d88:	200042b8 	.word	0x200042b8

08001d8c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001d9a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001d9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001da0:	4904      	ldr	r1, [pc, #16]	@ (8001db4 <cubemx_transport_open+0x28>)
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f007 fe06 	bl	80099b4 <HAL_UART_Receive_DMA>
    return true;
 8001da8:	2301      	movs	r3, #1
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200042c8 	.word	0x200042c8

08001db8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001dc6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f007 fe23 	bl	8009a14 <HAL_UART_DMAStop>
    return true;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001dec:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d11c      	bne.n	8001e34 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f007 fd58 	bl	80098b8 <HAL_UART_Transmit_DMA>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001e0c:	e002      	b.n	8001e14 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f009 f870 	bl	800aef4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001e14:	7cfb      	ldrb	r3, [r7, #19]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d105      	bne.n	8001e26 <cubemx_transport_write+0x4e>
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d1f3      	bne.n	8001e0e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001e26:	7cfb      	ldrb	r3, [r7, #19]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <cubemx_transport_write+0x58>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	e002      	b.n	8001e36 <cubemx_transport_write+0x5e>
 8001e30:	2300      	movs	r3, #0
 8001e32:	e000      	b.n	8001e36 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001e34:	2300      	movs	r3, #0
    }
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001e54:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e5a:	b672      	cpsid	i
}
 8001e5c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001edc <cubemx_transport_read+0x9c>)
 8001e6c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e6e:	b662      	cpsie	i
}
 8001e70:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3301      	adds	r3, #1
 8001e76:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f009 f83b 	bl	800aef4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001e7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ee0 <cubemx_transport_read+0xa0>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b16      	ldr	r3, [pc, #88]	@ (8001edc <cubemx_transport_read+0x9c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d103      	bne.n	8001e92 <cubemx_transport_read+0x52>
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	dbe3      	blt.n	8001e5a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001e96:	e011      	b.n	8001ebc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <cubemx_transport_read+0xa0>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	440b      	add	r3, r1
 8001ea2:	4910      	ldr	r1, [pc, #64]	@ (8001ee4 <cubemx_transport_read+0xa4>)
 8001ea4:	5c8a      	ldrb	r2, [r1, r2]
 8001ea6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <cubemx_transport_read+0xa0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3301      	adds	r3, #1
 8001eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee0 <cubemx_transport_read+0xa0>)
 8001eb4:	6013      	str	r3, [r2, #0]
        wrote++;
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <cubemx_transport_read+0xa0>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <cubemx_transport_read+0x9c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d003      	beq.n	8001ed0 <cubemx_transport_read+0x90>
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d3e3      	bcc.n	8001e98 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3720      	adds	r7, #32
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20004acc 	.word	0x20004acc
 8001ee0:	20004ac8 	.word	0x20004ac8
 8001ee4:	200042c8 	.word	0x200042c8

08001ee8 <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	@ 0x28
 8001eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	4a2c      	ldr	r2, [pc, #176]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b26      	ldr	r3, [pc, #152]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	4a25      	ldr	r2, [pc, #148]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2a:	4b23      	ldr	r3, [pc, #140]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f46:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4a17      	ldr	r2, [pc, #92]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2120      	movs	r1, #32
 8001f72:	4812      	ldr	r0, [pc, #72]	@ (8001fbc <MX_GPIO_Init+0xd4>)
 8001f74:	f003 fb9c 	bl	80056b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f7e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480c      	ldr	r0, [pc, #48]	@ (8001fc0 <MX_GPIO_Init+0xd8>)
 8001f90:	f003 fa0a 	bl	80053a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f94:	2320      	movs	r3, #32
 8001f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4804      	ldr	r0, [pc, #16]	@ (8001fbc <MX_GPIO_Init+0xd4>)
 8001fac:	f003 f9fc 	bl	80053a8 <HAL_GPIO_Init>

}
 8001fb0:	bf00      	nop
 8001fb2:	3728      	adds	r7, #40	@ 0x28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	40020800 	.word	0x40020800

08001fc4 <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fd4:	d017      	beq.n	8002006 <HAL_GPIO_EXTI_Callback+0x42>
 8001fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fda:	dc16      	bgt.n	800200a <HAL_GPIO_EXTI_Callback+0x46>
 8001fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe0:	d00e      	beq.n	8002000 <HAL_GPIO_EXTI_Callback+0x3c>
 8001fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe6:	dc10      	bgt.n	800200a <HAL_GPIO_EXTI_Callback+0x46>
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d010      	beq.n	800200e <HAL_GPIO_EXTI_Callback+0x4a>
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	dc0c      	bgt.n	800200a <HAL_GPIO_EXTI_Callback+0x46>
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d002      	beq.n	8001ffa <HAL_GPIO_EXTI_Callback+0x36>
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d00c      	beq.n	8002012 <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 8001ff8:	e007      	b.n	800200a <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 8001ffa:	f001 fb9d 	bl	8003738 <quadEncoder_CallbackIndexR>
					break;
 8001ffe:	e009      	b.n	8002014 <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 8002000:	f001 fb6e 	bl	80036e0 <quadEncoder_CallbackIndexL>
					break;
 8002004:	e006      	b.n	8002014 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8002006:	bf00      	nop
 8002008:	e004      	b.n	8002014 <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 800200a:	bf00      	nop
 800200c:	e002      	b.n	8002014 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 800200e:	bf00      	nop
 8002010:	e000      	b.n	8002014 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8002012:	bf00      	nop


	}
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002020:	4b12      	ldr	r3, [pc, #72]	@ (800206c <MX_I2C1_Init+0x50>)
 8002022:	4a13      	ldr	r2, [pc, #76]	@ (8002070 <MX_I2C1_Init+0x54>)
 8002024:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002026:	4b11      	ldr	r3, [pc, #68]	@ (800206c <MX_I2C1_Init+0x50>)
 8002028:	4a12      	ldr	r2, [pc, #72]	@ (8002074 <MX_I2C1_Init+0x58>)
 800202a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800202c:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <MX_I2C1_Init+0x50>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002032:	4b0e      	ldr	r3, [pc, #56]	@ (800206c <MX_I2C1_Init+0x50>)
 8002034:	2200      	movs	r2, #0
 8002036:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002038:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <MX_I2C1_Init+0x50>)
 800203a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800203e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002040:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <MX_I2C1_Init+0x50>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002046:	4b09      	ldr	r3, [pc, #36]	@ (800206c <MX_I2C1_Init+0x50>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800204c:	4b07      	ldr	r3, [pc, #28]	@ (800206c <MX_I2C1_Init+0x50>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <MX_I2C1_Init+0x50>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002058:	4804      	ldr	r0, [pc, #16]	@ (800206c <MX_I2C1_Init+0x50>)
 800205a:	f003 fb5b 	bl	8005714 <HAL_I2C_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002064:	f000 ffd0 	bl	8003008 <Error_Handler>
  }

}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20004ad0 	.word	0x20004ad0
 8002070:	40005400 	.word	0x40005400
 8002074:	00061a80 	.word	0x00061a80

08002078 <i2c1_WriteBuffer>:

//======================================================================
// Transmit n_data bytes to i2c slave
//======================================================================
int i2c1_WriteBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af02      	add	r7, sp, #8
 800207e:	4603      	mov	r3, r0
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, data, n_data , 100);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	b29b      	uxth	r3, r3
 800208a:	89f9      	ldrh	r1, [r7, #14]
 800208c:	2264      	movs	r2, #100	@ 0x64
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <i2c1_WriteBuffer+0x30>)
 8002094:	f003 fc82 	bl	800599c <HAL_I2C_Master_Transmit>
 8002098:	4603      	mov	r3, r0
 800209a:	617b      	str	r3, [r7, #20]
	return status;
 800209c:	697b      	ldr	r3, [r7, #20]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20004ad0 	.word	0x20004ad0

080020ac <i2c1_ReadRegBuffer>:
}
//======================================================================
// Receive n_data bytes - located at regAddr - from i2c slave
//======================================================================
int i2c1_ReadRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	60ba      	str	r2, [r7, #8]
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	4603      	mov	r3, r0
 80020b8:	81fb      	strh	r3, [r7, #14]
 80020ba:	460b      	mov	r3, r1
 80020bc:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr;
    RegAddr=regAddr;
 80020be:	7b7b      	ldrb	r3, [r7, #13]
 80020c0:	74fb      	strb	r3, [r7, #19]
    do{
        status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, &RegAddr, 1, 100);
 80020c2:	f107 0213 	add.w	r2, r7, #19
 80020c6:	89f9      	ldrh	r1, [r7, #14]
 80020c8:	2364      	movs	r3, #100	@ 0x64
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2301      	movs	r3, #1
 80020ce:	480f      	ldr	r0, [pc, #60]	@ (800210c <i2c1_ReadRegBuffer+0x60>)
 80020d0:	f003 fc64 	bl	800599c <HAL_I2C_Master_Transmit>
 80020d4:	4603      	mov	r3, r0
 80020d6:	617b      	str	r3, [r7, #20]
        if( status )
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10f      	bne.n	80020fe <i2c1_ReadRegBuffer+0x52>
            break;
        status =HAL_I2C_Master_Receive(&hi2c1, addrSlave, data, n_data, n_data*100);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2164      	movs	r1, #100	@ 0x64
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	89f9      	ldrh	r1, [r7, #14]
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	4613      	mov	r3, r2
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	4806      	ldr	r0, [pc, #24]	@ (800210c <i2c1_ReadRegBuffer+0x60>)
 80020f4:	f003 fd50 	bl	8005b98 <HAL_I2C_Master_Receive>
 80020f8:	4603      	mov	r3, r0
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	e000      	b.n	8002100 <i2c1_ReadRegBuffer+0x54>
            break;
 80020fe:	bf00      	nop
    }while(0);
    return status;
 8002100:	697b      	ldr	r3, [r7, #20]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20004ad0 	.word	0x20004ad0

08002110 <i2c1_WriteRegBuffer>:

//======================================================================
// Write n_data bytes - have to be written at regAddr - to i2c slave
//======================================================================
int i2c1_WriteRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08c      	sub	sp, #48	@ 0x30
 8002114:	af02      	add	r7, sp, #8
 8002116:	60ba      	str	r2, [r7, #8]
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	4603      	mov	r3, r0
 800211c:	81fb      	strh	r3, [r7, #14]
 800211e:	460b      	mov	r3, r1
 8002120:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0]=regAddr;
 8002122:	7b7b      	ldrb	r3, [r7, #13]
 8002124:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr+1, data, n_data);
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	3301      	adds	r3, #1
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	4618      	mov	r0, r3
 8002132:	f018 fc12 	bl	801a95a <memcpy>
   status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, RegAddr, n_data+1, 100);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	b29b      	uxth	r3, r3
 800213a:	3301      	adds	r3, #1
 800213c:	b29b      	uxth	r3, r3
 800213e:	f107 0214 	add.w	r2, r7, #20
 8002142:	89f9      	ldrh	r1, [r7, #14]
 8002144:	2064      	movs	r0, #100	@ 0x64
 8002146:	9000      	str	r0, [sp, #0]
 8002148:	4804      	ldr	r0, [pc, #16]	@ (800215c <i2c1_WriteRegBuffer+0x4c>)
 800214a:	f003 fc27 	bl	800599c <HAL_I2C_Master_Transmit>
 800214e:	4603      	mov	r3, r0
 8002150:	627b      	str	r3, [r7, #36]	@ 0x24
     return status;
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002154:	4618      	mov	r0, r3
 8002156:	3728      	adds	r7, #40	@ 0x28
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20004ad0 	.word	0x20004ad0

08002160 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif


PUTCHAR_PROTOTYPE
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002168:	1d39      	adds	r1, r7, #4
 800216a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800216e:	2201      	movs	r2, #1
 8002170:	4803      	ldr	r0, [pc, #12]	@ (8002180 <__io_putchar+0x20>)
 8002172:	f007 fb0f 	bl	8009794 <HAL_UART_Transmit>
  return ch;
 8002176:	687b      	ldr	r3, [r7, #4]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20004b68 	.word	0x20004b68

08002184 <MX_USART1_UART_Init>:


void MX_USART1_UART_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8002188:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 800218a:	4a12      	ldr	r2, [pc, #72]	@ (80021d4 <MX_USART1_UART_Init+0x50>)
 800218c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 8002190:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002194:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002196:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021a2:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021a8:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 80021aa:	220c      	movs	r2, #12
 80021ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ae:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ba:	4805      	ldr	r0, [pc, #20]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 80021bc:	f007 fa9d 	bl	80096fa <HAL_UART_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021c6:	f000 ff1f 	bl	8003008 <Error_Handler>
  }
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20004b24 	.word	0x20004b24
 80021d4:	40011000 	.word	0x40011000

080021d8 <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80021dc:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 80021de:	4a12      	ldr	r2, [pc, #72]	@ (8002228 <MX_USART2_UART_Init+0x50>)
 80021e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021e2:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 80021e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021fc:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 80021fe:	220c      	movs	r2, #12
 8002200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002202:	4b08      	ldr	r3, [pc, #32]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800220e:	4805      	ldr	r0, [pc, #20]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 8002210:	f007 fa73 	bl	80096fa <HAL_UART_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800221a:	f000 fef5 	bl	8003008 <Error_Handler>
  }
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20004b68 	.word	0x20004b68
 8002228:	40004400 	.word	0x40004400

0800222c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	4b1f      	ldr	r3, [pc, #124]	@ (80022b4 <MX_DMA_Init+0x88>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	4a1e      	ldr	r2, [pc, #120]	@ (80022b4 <MX_DMA_Init+0x88>)
 800223c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002240:	6313      	str	r3, [r2, #48]	@ 0x30
 8002242:	4b1c      	ldr	r3, [pc, #112]	@ (80022b4 <MX_DMA_Init+0x88>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4b18      	ldr	r3, [pc, #96]	@ (80022b4 <MX_DMA_Init+0x88>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	4a17      	ldr	r2, [pc, #92]	@ (80022b4 <MX_DMA_Init+0x88>)
 8002258:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800225c:	6313      	str	r3, [r2, #48]	@ 0x30
 800225e:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <MX_DMA_Init+0x88>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2105      	movs	r1, #5
 800226e:	2010      	movs	r0, #16
 8002270:	f002 fc60 	bl	8004b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002274:	2010      	movs	r0, #16
 8002276:	f002 fc79 	bl	8004b6c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2105      	movs	r1, #5
 800227e:	2011      	movs	r0, #17
 8002280:	f002 fc58 	bl	8004b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002284:	2011      	movs	r0, #17
 8002286:	f002 fc71 	bl	8004b6c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2105      	movs	r1, #5
 800228e:	203a      	movs	r0, #58	@ 0x3a
 8002290:	f002 fc50 	bl	8004b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002294:	203a      	movs	r0, #58	@ 0x3a
 8002296:	f002 fc69 	bl	8004b6c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2105      	movs	r1, #5
 800229e:	2046      	movs	r0, #70	@ 0x46
 80022a0:	f002 fc48 	bl	8004b34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80022a4:	2046      	movs	r0, #70	@ 0x46
 80022a6:	f002 fc61 	bl	8004b6c <HAL_NVIC_EnableIRQ>

}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800

080022b8 <i2c_send_byteS>:
{
	i2c1_WriteBuffer(LCD_ADDRESS, &dta, 1);
}
//=================================================================
void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	70fb      	strb	r3, [r7, #3]
	i2c1_WriteBuffer(LCD_ADDRESS, dta, len);
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	461a      	mov	r2, r3
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	207c      	movs	r0, #124	@ 0x7c
 80022cc:	f7ff fed4 	bl	8002078 <i2c1_WriteBuffer>
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <groveLCD_begin>:
//=================================================================
void groveLCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
 80022e2:	460b      	mov	r3, r1
 80022e4:	71bb      	strb	r3, [r7, #6]
 80022e6:	4613      	mov	r3, r2
 80022e8:	717b      	strb	r3, [r7, #5]
    if (lines > 1) {
 80022ea:	79bb      	ldrb	r3, [r7, #6]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d906      	bls.n	80022fe <groveLCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 80022f0:	4b33      	ldr	r3, [pc, #204]	@ (80023c0 <groveLCD_begin+0xe8>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	f043 0308 	orr.w	r3, r3, #8
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b31      	ldr	r3, [pc, #196]	@ (80023c0 <groveLCD_begin+0xe8>)
 80022fc:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 80022fe:	4a31      	ldr	r2, [pc, #196]	@ (80023c4 <groveLCD_begin+0xec>)
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 8002304:	4b30      	ldr	r3, [pc, #192]	@ (80023c8 <groveLCD_begin+0xf0>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 800230a:	797b      	ldrb	r3, [r7, #5]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d009      	beq.n	8002324 <groveLCD_begin+0x4c>
 8002310:	79bb      	ldrb	r3, [r7, #6]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d106      	bne.n	8002324 <groveLCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 8002316:	4b2a      	ldr	r3, [pc, #168]	@ (80023c0 <groveLCD_begin+0xe8>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b27      	ldr	r3, [pc, #156]	@ (80023c0 <groveLCD_begin+0xe8>)
 8002322:	701a      	strb	r2, [r3, #0]
    }

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
    HAL_Delay(50);
 8002324:	2032      	movs	r0, #50	@ 0x32
 8002326:	f002 fa15 	bl	8004754 <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800232a:	4b25      	ldr	r3, [pc, #148]	@ (80023c0 <groveLCD_begin+0xe8>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	f043 0320 	orr.w	r3, r3, #32
 8002332:	b2db      	uxtb	r3, r3
 8002334:	4618      	mov	r0, r3
 8002336:	f000 f89b 	bl	8002470 <groveLCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 800233a:	2005      	movs	r0, #5
 800233c:	f002 fa0a 	bl	8004754 <HAL_Delay>

    // second try
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002340:	4b1f      	ldr	r3, [pc, #124]	@ (80023c0 <groveLCD_begin+0xe8>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	f043 0320 	orr.w	r3, r3, #32
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f890 	bl	8002470 <groveLCD_command>
    HAL_Delay(5);
 8002350:	2005      	movs	r0, #5
 8002352:	f002 f9ff 	bl	8004754 <HAL_Delay>

    // third go
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002356:	4b1a      	ldr	r3, [pc, #104]	@ (80023c0 <groveLCD_begin+0xe8>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	f043 0320 	orr.w	r3, r3, #32
 800235e:	b2db      	uxtb	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f885 	bl	8002470 <groveLCD_command>


    // finally, set # lines, font size, etc.
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002366:	4b16      	ldr	r3, [pc, #88]	@ (80023c0 <groveLCD_begin+0xe8>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	f043 0320 	orr.w	r3, r3, #32
 800236e:	b2db      	uxtb	r3, r3
 8002370:	4618      	mov	r0, r3
 8002372:	f000 f87d 	bl	8002470 <groveLCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002376:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <groveLCD_begin+0xf4>)
 8002378:	2204      	movs	r2, #4
 800237a:	701a      	strb	r2, [r3, #0]
    groveLCD_display();
 800237c:	f000 f862 	bl	8002444 <groveLCD_display>

    // clear it off
    groveLCD_clear();
 8002380:	f000 f831 	bl	80023e6 <groveLCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002384:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <groveLCD_begin+0xf8>)
 8002386:	2202      	movs	r2, #2
 8002388:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    groveLCD_command(LCD_ENTRYMODESET | _displaymode);
 800238a:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <groveLCD_begin+0xf8>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	b2db      	uxtb	r3, r3
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f86b 	bl	8002470 <groveLCD_command>


    // backlight init
    groveLCD_setReg(REG_MODE1, 0);
 800239a:	2100      	movs	r1, #0
 800239c:	2000      	movs	r0, #0
 800239e:	f000 f8a4 	bl	80024ea <groveLCD_setReg>
    // set LEDs controllable by both PWM and GRPPWM registers
    groveLCD_setReg(REG_OUTPUT, 0xFF);
 80023a2:	21ff      	movs	r1, #255	@ 0xff
 80023a4:	2008      	movs	r0, #8
 80023a6:	f000 f8a0 	bl	80024ea <groveLCD_setReg>
    // set MODE2 values
    // 0010 0000 -> 0x20  (DMBLNK to 1, ie blinky mode)
    groveLCD_setReg(REG_MODE2, 0x20);
 80023aa:	2120      	movs	r1, #32
 80023ac:	2001      	movs	r0, #1
 80023ae:	f000 f89c 	bl	80024ea <groveLCD_setReg>

    groveLCD_setColorWhite();
 80023b2:	f000 f80f 	bl	80023d4 <groveLCD_setColorWhite>

}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20004d2c 	.word	0x20004d2c
 80023c4:	20004d2f 	.word	0x20004d2f
 80023c8:	20004d30 	.word	0x20004d30
 80023cc:	20004d2d 	.word	0x20004d2d
 80023d0:	20004d2e 	.word	0x20004d2e

080023d4 <groveLCD_setColorWhite>:
//=================================================================
void groveLCD_setColorAll(){groveLCD_setRGB(0, 0, 0);}
void groveLCD_setColorWhite(){groveLCD_setRGB(255, 255, 255);}
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	22ff      	movs	r2, #255	@ 0xff
 80023da:	21ff      	movs	r1, #255	@ 0xff
 80023dc:	20ff      	movs	r0, #255	@ 0xff
 80023de:	f000 f896 	bl	800250e <groveLCD_setRGB>
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <groveLCD_clear>:
//=================================================================

/********** high level commands, for the user! */
void groveLCD_clear()
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	af00      	add	r7, sp, #0
	groveLCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 80023ea:	2001      	movs	r0, #1
 80023ec:	f000 f840 	bl	8002470 <groveLCD_command>
    HAL_Delay(2000);          // this command takes a long time!
 80023f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80023f4:	f002 f9ae 	bl	8004754 <HAL_Delay>
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}

080023fc <groveLCD_setCursor>:
	groveLCD_command(LCD_RETURNHOME);        // set cursor position to zero
    HAL_Delay(2000);        // this command takes a long time!
}
//=================================================================
void groveLCD_setCursor(uint8_t col, uint8_t row)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	460a      	mov	r2, r1
 8002406:	71fb      	strb	r3, [r7, #7]
 8002408:	4613      	mov	r3, r2
 800240a:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 800240c:	79bb      	ldrb	r3, [r7, #6]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d104      	bne.n	800241c <groveLCD_setCursor+0x20>
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002418:	b2db      	uxtb	r3, r3
 800241a:	e003      	b.n	8002424 <groveLCD_setCursor+0x28>
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8002422:	b2db      	uxtb	r3, r3
 8002424:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 8002426:	2380      	movs	r3, #128	@ 0x80
 8002428:	733b      	strb	r3, [r7, #12]
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 800242e:	f107 030c 	add.w	r3, r7, #12
 8002432:	2102      	movs	r1, #2
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff3f 	bl	80022b8 <i2c_send_byteS>
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <groveLCD_display>:
{
    _displaycontrol &= ~LCD_DISPLAYON;
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
//=================================================================
void groveLCD_display() {
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 8002448:	4b08      	ldr	r3, [pc, #32]	@ (800246c <groveLCD_display+0x28>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <groveLCD_display+0x28>)
 8002454:	701a      	strb	r2, [r3, #0]
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 8002456:	4b05      	ldr	r3, [pc, #20]	@ (800246c <groveLCD_display+0x28>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	f043 0308 	orr.w	r3, r3, #8
 800245e:	b2db      	uxtb	r3, r3
 8002460:	4618      	mov	r0, r3
 8002462:	f000 f805 	bl	8002470 <groveLCD_command>
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20004d2d 	.word	0x20004d2d

08002470 <groveLCD_command>:
//=================================================================
/*********** mid level commands, for sending data/cmds */

// send command
void groveLCD_command(uint8_t value)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 800247a:	2380      	movs	r3, #128	@ 0x80
 800247c:	733b      	strb	r3, [r7, #12]
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	2102      	movs	r1, #2
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff15 	bl	80022b8 <i2c_send_byteS>
}
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <groveLCD_write>:
//=================================================================
// send data
int groveLCD_write(uint8_t value)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 80024a0:	2340      	movs	r3, #64	@ 0x40
 80024a2:	733b      	strb	r3, [r7, #12]
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	2102      	movs	r1, #2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ff02 	bl	80022b8 <i2c_send_byteS>
    return 1; // assume sucess
 80024b4:	2301      	movs	r3, #1
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <groveLCD_putString>:
//=================================================================
void groveLCD_putString(char* s)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 80024c6:	e007      	b.n	80024d8 <groveLCD_putString+0x1a>
	{
		groveLCD_write(*s);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ffe2 	bl	8002496 <groveLCD_write>
		s++;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3301      	adds	r3, #1
 80024d6:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f3      	bne.n	80024c8 <groveLCD_putString+0xa>
	}
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <groveLCD_setReg>:
//=================================================================
void groveLCD_setReg(unsigned char addr, unsigned char dta)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	460a      	mov	r2, r1
 80024f4:	71fb      	strb	r3, [r7, #7]
 80024f6:	4613      	mov	r3, r2
 80024f8:	71bb      	strb	r3, [r7, #6]
    i2c1_WriteRegBuffer(RGB_ADDRESS, addr,  &dta, 1);
 80024fa:	1dba      	adds	r2, r7, #6
 80024fc:	79f9      	ldrb	r1, [r7, #7]
 80024fe:	2301      	movs	r3, #1
 8002500:	20c4      	movs	r0, #196	@ 0xc4
 8002502:	f7ff fe05 	bl	8002110 <i2c1_WriteRegBuffer>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <groveLCD_setRGB>:
//=================================================================
void groveLCD_setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	71fb      	strb	r3, [r7, #7]
 8002518:	460b      	mov	r3, r1
 800251a:	71bb      	strb	r3, [r7, #6]
 800251c:	4613      	mov	r3, r2
 800251e:	717b      	strb	r3, [r7, #5]
	groveLCD_setReg(REG_RED, r);
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	4619      	mov	r1, r3
 8002524:	2004      	movs	r0, #4
 8002526:	f7ff ffe0 	bl	80024ea <groveLCD_setReg>
	groveLCD_setReg(REG_GREEN, g);
 800252a:	79bb      	ldrb	r3, [r7, #6]
 800252c:	4619      	mov	r1, r3
 800252e:	2003      	movs	r0, #3
 8002530:	f7ff ffdb 	bl	80024ea <groveLCD_setReg>
	groveLCD_setReg(REG_BLUE, b);
 8002534:	797b      	ldrb	r3, [r7, #5]
 8002536:	4619      	mov	r1, r3
 8002538:	2002      	movs	r0, #2
 800253a:	f7ff ffd6 	bl	80024ea <groveLCD_setReg>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <groveLCD_term_printf>:
    if(color > 3)return ;
    groveLCD_setRGB(color_define[color][0], color_define[color][1], color_define[color][2]);
}
//============================================================
void groveLCD_term_printf(const char* fmt, ...)
{
 8002548:	b40f      	push	{r0, r1, r2, r3}
 800254a:	b5b0      	push	{r4, r5, r7, lr}
 800254c:	b0a4      	sub	sp, #144	@ 0x90
 800254e:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 8002550:	2300      	movs	r3, #0
 8002552:	677b      	str	r3, [r7, #116]	@ 0x74

	va_start(ap, fmt);
 8002554:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002558:	64bb      	str	r3, [r7, #72]	@ 0x48

	while (*fmt != '\0') {
 800255a:	e1cd      	b.n	80028f8 <groveLCD_term_printf+0x3b0>
		if (*fmt =='%') {
 800255c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b25      	cmp	r3, #37	@ 0x25
 8002564:	f040 81bd 	bne.w	80028e2 <groveLCD_term_printf+0x39a>
			size=0; sp=1;
 8002568:	2300      	movs	r3, #0
 800256a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800256c:	2301      	movs	r3, #1
 800256e:	67bb      	str	r3, [r7, #120]	@ 0x78
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 8002570:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002574:	3301      	adds	r3, #1
 8002576:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800257a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b30      	cmp	r3, #48	@ 0x30
 8002582:	d106      	bne.n	8002592 <groveLCD_term_printf+0x4a>
 8002584:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002588:	3301      	adds	r3, #1
 800258a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800258e:	2300      	movs	r3, #0
 8002590:	67bb      	str	r3, [r7, #120]	@ 0x78
			ch=*fmt;
 8002592:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 800259c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80025a0:	2b30      	cmp	r3, #48	@ 0x30
 80025a2:	d92c      	bls.n	80025fe <groveLCD_term_printf+0xb6>
 80025a4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80025a8:	2b39      	cmp	r3, #57	@ 0x39
 80025aa:	d828      	bhi.n	80025fe <groveLCD_term_printf+0xb6>
				char tmp[10];
				int i=0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	673b      	str	r3, [r7, #112]	@ 0x70
				while ((ch>='0') && (ch<='9')) {
 80025b0:	e012      	b.n	80025d8 <groveLCD_term_printf+0x90>
					tmp[i++]=ch;
 80025b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	673a      	str	r2, [r7, #112]	@ 0x70
 80025b8:	3388      	adds	r3, #136	@ 0x88
 80025ba:	443b      	add	r3, r7
 80025bc:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80025c0:	f803 2c88 	strb.w	r2, [r3, #-136]
					ch=*++fmt;
 80025c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025c8:	3301      	adds	r3, #1
 80025ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
				while ((ch>='0') && (ch<='9')) {
 80025d8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80025dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80025de:	d903      	bls.n	80025e8 <groveLCD_term_printf+0xa0>
 80025e0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80025e4:	2b39      	cmp	r3, #57	@ 0x39
 80025e6:	d9e4      	bls.n	80025b2 <groveLCD_term_printf+0x6a>
				}
				tmp[i]='\0';
 80025e8:	463a      	mov	r2, r7
 80025ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025ec:	4413      	add	r3, r2
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 80025f2:	463b      	mov	r3, r7
 80025f4:	210a      	movs	r1, #10
 80025f6:	4618      	mov	r0, r3
 80025f8:	f001 fee6 	bl	80043c8 <str2num>
 80025fc:	67f8      	str	r0, [r7, #124]	@ 0x7c
			}
			switch (ch) {
 80025fe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002602:	2b25      	cmp	r3, #37	@ 0x25
 8002604:	d03c      	beq.n	8002680 <groveLCD_term_printf+0x138>
 8002606:	2b25      	cmp	r3, #37	@ 0x25
 8002608:	f2c0 8164 	blt.w	80028d4 <groveLCD_term_printf+0x38c>
 800260c:	2b78      	cmp	r3, #120	@ 0x78
 800260e:	f300 8161 	bgt.w	80028d4 <groveLCD_term_printf+0x38c>
 8002612:	2b63      	cmp	r3, #99	@ 0x63
 8002614:	f2c0 815e 	blt.w	80028d4 <groveLCD_term_printf+0x38c>
 8002618:	3b63      	subs	r3, #99	@ 0x63
 800261a:	2b15      	cmp	r3, #21
 800261c:	f200 815a 	bhi.w	80028d4 <groveLCD_term_printf+0x38c>
 8002620:	a201      	add	r2, pc, #4	@ (adr r2, 8002628 <groveLCD_term_printf+0xe0>)
 8002622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002626:	bf00      	nop
 8002628:	08002689 	.word	0x08002689
 800262c:	080026b3 	.word	0x080026b3
 8002630:	080028d5 	.word	0x080028d5
 8002634:	080027b3 	.word	0x080027b3
 8002638:	080028d5 	.word	0x080028d5
 800263c:	080028d5 	.word	0x080028d5
 8002640:	080028d5 	.word	0x080028d5
 8002644:	080028d5 	.word	0x080028d5
 8002648:	080028d5 	.word	0x080028d5
 800264c:	080028d5 	.word	0x080028d5
 8002650:	080028d5 	.word	0x080028d5
 8002654:	080028d5 	.word	0x080028d5
 8002658:	08002723 	.word	0x08002723
 800265c:	0800274f 	.word	0x0800274f
 8002660:	080028d5 	.word	0x080028d5
 8002664:	080028d5 	.word	0x080028d5
 8002668:	080026a1 	.word	0x080026a1
 800266c:	080028d5 	.word	0x080028d5
 8002670:	080026f7 	.word	0x080026f7
 8002674:	080028d5 	.word	0x080028d5
 8002678:	080028d5 	.word	0x080028d5
 800267c:	08002787 	.word	0x08002787
				case '%':
					groveLCD_write('%');
 8002680:	2025      	movs	r0, #37	@ 0x25
 8002682:	f7ff ff08 	bl	8002496 <groveLCD_write>
					break;
 8002686:	e132      	b.n	80028ee <groveLCD_term_printf+0x3a6>
				case 'c':
					ch = va_arg(ap, int);
 8002688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800268a:	1d1a      	adds	r2, r3, #4
 800268c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
					groveLCD_write(ch);
 8002694:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fefc 	bl	8002496 <groveLCD_write>
					break;
 800269e:	e126      	b.n	80028ee <groveLCD_term_printf+0x3a6>
				case 's':
					p = va_arg(ap, char *);
 80026a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026a2:	1d1a      	adds	r2, r3, #4
 80026a4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
					groveLCD_putString(p);
 80026aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80026ac:	f7ff ff07 	bl	80024be <groveLCD_putString>
					break;
 80026b0:	e11d      	b.n	80028ee <groveLCD_term_printf+0x3a6>
				case 'd':
					ul = va_arg(ap, long);
 80026b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026b4:	1d1a      	adds	r2, r3, #4
 80026b6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					if ((long)ul < 0) {
 80026be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	da07      	bge.n	80026d6 <groveLCD_term_printf+0x18e>
						groveLCD_write('-');
 80026c6:	202d      	movs	r0, #45	@ 0x2d
 80026c8:	f7ff fee5 	bl	8002496 <groveLCD_write>
						ul = -(long)ul;
 80026cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026d0:	425b      	negs	r3, r3
 80026d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 80026d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026d8:	f107 000c 	add.w	r0, r7, #12
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026e0:	220a      	movs	r2, #10
 80026e2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80026e6:	f001 fdeb 	bl	80042c0 <num2str>
					groveLCD_putString(s);
 80026ea:	f107 030c 	add.w	r3, r7, #12
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fee5 	bl	80024be <groveLCD_putString>
					break;
 80026f4:	e0fb      	b.n	80028ee <groveLCD_term_printf+0x3a6>
				case 'u':
					ul = va_arg(ap, unsigned int);
 80026f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026f8:	1d1a      	adds	r2, r3, #4
 80026fa:	64ba      	str	r2, [r7, #72]	@ 0x48
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					num2str(s, ul, 10, size, sp);
 8002702:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002704:	f107 000c 	add.w	r0, r7, #12
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800270c:	220a      	movs	r2, #10
 800270e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8002712:	f001 fdd5 	bl	80042c0 <num2str>
					groveLCD_putString(s);
 8002716:	f107 030c 	add.w	r3, r7, #12
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fecf 	bl	80024be <groveLCD_putString>
					break;
 8002720:	e0e5      	b.n	80028ee <groveLCD_term_printf+0x3a6>
				case 'o':
					ul = va_arg(ap, unsigned int);
 8002722:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002724:	1d1a      	adds	r2, r3, #4
 8002726:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					num2str(s, ul, 8, size, sp);
 800272e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002730:	f107 000c 	add.w	r0, r7, #12
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002738:	2208      	movs	r2, #8
 800273a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800273e:	f001 fdbf 	bl	80042c0 <num2str>
					groveLCD_putString(s);
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff feb9 	bl	80024be <groveLCD_putString>
					break;
 800274c:	e0cf      	b.n	80028ee <groveLCD_term_printf+0x3a6>
				case 'p':
					groveLCD_write('0');
 800274e:	2030      	movs	r0, #48	@ 0x30
 8002750:	f7ff fea1 	bl	8002496 <groveLCD_write>
					groveLCD_write('x');
 8002754:	2078      	movs	r0, #120	@ 0x78
 8002756:	f7ff fe9e 	bl	8002496 <groveLCD_write>
					ul = va_arg(ap, unsigned int);
 800275a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800275c:	1d1a      	adds	r2, r3, #4
 800275e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					num2str(s, ul, 16, size, sp);
 8002766:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002768:	f107 000c 	add.w	r0, r7, #12
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002770:	2210      	movs	r2, #16
 8002772:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8002776:	f001 fda3 	bl	80042c0 <num2str>
					groveLCD_putString(s);
 800277a:	f107 030c 	add.w	r3, r7, #12
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fe9d 	bl	80024be <groveLCD_putString>
					break;
 8002784:	e0b3      	b.n	80028ee <groveLCD_term_printf+0x3a6>
				case 'x':
					ul = va_arg(ap, unsigned int);
 8002786:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002788:	1d1a      	adds	r2, r3, #4
 800278a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					num2str(s, ul, 16, size, sp);
 8002792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002794:	f107 000c 	add.w	r0, r7, #12
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800279c:	2210      	movs	r2, #16
 800279e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80027a2:	f001 fd8d 	bl	80042c0 <num2str>
					groveLCD_putString(s);
 80027a6:	f107 030c 	add.w	r3, r7, #12
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fe87 	bl	80024be <groveLCD_putString>
					break;
 80027b0:	e09d      	b.n	80028ee <groveLCD_term_printf+0x3a6>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 80027b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10c      	bne.n	80027d2 <groveLCD_term_printf+0x28a>
 80027b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027ba:	3307      	adds	r3, #7
 80027bc:	f023 0307 	bic.w	r3, r3, #7
 80027c0:	f103 0208 	add.w	r2, r3, #8
 80027c4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 80027ce:	2301      	movs	r3, #1
 80027d0:	677b      	str	r3, [r7, #116]	@ 0x74
					ull = va_arg(ap, long long unsigned int);
 80027d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027d4:	3307      	adds	r3, #7
 80027d6:	f023 0307 	bic.w	r3, r3, #7
 80027da:	f103 0208 	add.w	r2, r3, #8
 80027de:	64ba      	str	r2, [r7, #72]	@ 0x48
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
					int sign = ( ull & 0x80000000 ) >> 31;
 80027e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	0fc2      	lsrs	r2, r0, #31
 80027f6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80027fa:	0fcb      	lsrs	r3, r1, #31
 80027fc:	4613      	mov	r3, r2
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	65fb      	str	r3, [r7, #92]	@ 0x5c
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 8002804:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002806:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800280a:	65bb      	str	r3, [r7, #88]	@ 0x58
					float mf = (float)m ;
 800280c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002816:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
					mf = mf / pow(2.0,20.0);
 800281a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800281e:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8002920 <groveLCD_term_printf+0x3d8>
 8002822:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002826:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
					mf = mf + 1.0;
 800282a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800282e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002832:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002836:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 800283a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	0dc2      	lsrs	r2, r0, #23
 8002848:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800284c:	0dcb      	lsrs	r3, r1, #23
 800284e:	4613      	mov	r3, r2
 8002850:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002854:	653b      	str	r3, [r7, #80]	@ 0x50
					e = e | (( ull & 0x000F00000 ) >> 20);
 8002856:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	0d02      	lsrs	r2, r0, #20
 8002864:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002868:	0d0b      	lsrs	r3, r1, #20
 800286a:	4613      	mov	r3, r2
 800286c:	f003 020f 	and.w	r2, r3, #15
 8002870:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002872:	4313      	orrs	r3, r2
 8002874:	653b      	str	r3, [r7, #80]	@ 0x50
					e = e - 127;
 8002876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002878:	3b7f      	subs	r3, #127	@ 0x7f
 800287a:	653b      	str	r3, [r7, #80]	@ 0x50
					float f = mf*myPow(2.0,e);
 800287c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800287e:	f7fd fe7b 	bl	8000578 <__aeabi_f2d>
 8002882:	4604      	mov	r4, r0
 8002884:	460d      	mov	r5, r1
 8002886:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002888:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 8002918 <groveLCD_term_printf+0x3d0>
 800288c:	f001 feac 	bl	80045e8 <myPow>
 8002890:	ec53 2b10 	vmov	r2, r3, d0
 8002894:	4620      	mov	r0, r4
 8002896:	4629      	mov	r1, r5
 8002898:	f7fd fec6 	bl	8000628 <__aeabi_dmul>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	f7fe f9b8 	bl	8000c18 <__aeabi_d2f>
 80028a8:	4603      	mov	r3, r0
 80028aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
					if(sign==1){ groveLCD_write('-'); }
 80028ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d102      	bne.n	80028b8 <groveLCD_term_printf+0x370>
 80028b2:	202d      	movs	r0, #45	@ 0x2d
 80028b4:	f7ff fdef 	bl	8002496 <groveLCD_write>
					float2str((char*)s, f, 5);
 80028b8:	f107 030c 	add.w	r3, r7, #12
 80028bc:	2105      	movs	r1, #5
 80028be:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 80028c2:	4618      	mov	r0, r3
 80028c4:	f001 fe40 	bl	8004548 <float2str>
					groveLCD_putString((char*)s);
 80028c8:	f107 030c 	add.w	r3, r7, #12
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fdf6 	bl	80024be <groveLCD_putString>
					break;
 80028d2:	e00c      	b.n	80028ee <groveLCD_term_printf+0x3a6>

				default:
					groveLCD_write(*fmt);
 80028d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fddb 	bl	8002496 <groveLCD_write>
 80028e0:	e005      	b.n	80028ee <groveLCD_term_printf+0x3a6>
			}
		} else groveLCD_write(*fmt);
 80028e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fdd4 	bl	8002496 <groveLCD_write>
		fmt++;
 80028ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028f2:	3301      	adds	r3, #1
 80028f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	while (*fmt != '\0') {
 80028f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f47f ae2c 	bne.w	800255c <groveLCD_term_printf+0x14>
	}
	va_end(ap);
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3788      	adds	r7, #136	@ 0x88
 800290a:	46bd      	mov	sp, r7
 800290c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002910:	b004      	add	sp, #16
 8002912:	4770      	bx	lr
 8002914:	f3af 8000 	nop.w
 8002918:	00000000 	.word	0x00000000
 800291c:	40000000 	.word	0x40000000
 8002920:	49800000 	.word	0x49800000
 8002924:	00000000 	.word	0x00000000

08002928 <task_A>:
int tab_speed[100];
int speed;

// Fonction de contrôle pour la roue gauche
static void task_A(void *pvParameters)
{
 8002928:	b5b0      	push	{r4, r5, r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	int consigne = 0; // La vitesse à laquelle je souhaite rouler
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
	int speed_L=0; // vitesse roue gauche
 8002934:	2300      	movs	r3, #0
 8002936:	61bb      	str	r3, [r7, #24]


	for (;;)
	{
		// Synchronisation de l’asservissement
		xQueueReceive( qhL,  &( pxLxedMessage ) , portMAX_DELAY );
 8002938:	4b45      	ldr	r3, [pc, #276]	@ (8002a50 <task_A+0x128>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f107 0108 	add.w	r1, r7, #8
 8002940:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002944:	4618      	mov	r0, r3
 8002946:	f008 febf 	bl	800b6c8 <xQueueReceive>
		printf("TASK A \r\n");
 800294a:	4842      	ldr	r0, [pc, #264]	@ (8002a54 <task_A+0x12c>)
 800294c:	f017 fd5c 	bl	801a408 <puts>
		// Vitesse moteur gauche
		speed_L = quadEncoder_GetSpeedL();
 8002950:	f000 fe22 	bl	8003598 <quadEncoder_GetSpeedL>
 8002954:	4603      	mov	r3, r0
 8002956:	61bb      	str	r3, [r7, #24]
		err_L=500-speed_L;
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 800295e:	617b      	str	r3, [r7, #20]
		proportionalComponent_L=Kp_L*(float)err_L;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800296a:	ee17 0a90 	vmov	r0, s15
 800296e:	f7fd fe03 	bl	8000578 <__aeabi_f2d>
 8002972:	a333      	add	r3, pc, #204	@ (adr r3, 8002a40 <task_A+0x118>)
 8002974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002978:	f7fd fe56 	bl	8000628 <__aeabi_dmul>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	f7fe f948 	bl	8000c18 <__aeabi_d2f>
 8002988:	4603      	mov	r3, r0
 800298a:	613b      	str	r3, [r7, #16]
		integralComponent_L=integralComponent_L+Kp_L*Ki_L*(float)err_L;
 800298c:	4b32      	ldr	r3, [pc, #200]	@ (8002a58 <task_A+0x130>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fdf1 	bl	8000578 <__aeabi_f2d>
 8002996:	4604      	mov	r4, r0
 8002998:	460d      	mov	r5, r1
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a4:	ee17 0a90 	vmov	r0, s15
 80029a8:	f7fd fde6 	bl	8000578 <__aeabi_f2d>
 80029ac:	a326      	add	r3, pc, #152	@ (adr r3, 8002a48 <task_A+0x120>)
 80029ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b2:	f7fd fe39 	bl	8000628 <__aeabi_dmul>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4620      	mov	r0, r4
 80029bc:	4629      	mov	r1, r5
 80029be:	f7fd fc7d 	bl	80002bc <__adddf3>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4610      	mov	r0, r2
 80029c8:	4619      	mov	r1, r3
 80029ca:	f7fe f925 	bl	8000c18 <__aeabi_d2f>
 80029ce:	4603      	mov	r3, r0
 80029d0:	4a21      	ldr	r2, [pc, #132]	@ (8002a58 <task_A+0x130>)
 80029d2:	6013      	str	r3, [r2, #0]
		consigne = (int)(proportionalComponent_L+integralComponent_L);
 80029d4:	4b20      	ldr	r3, [pc, #128]	@ (8002a58 <task_A+0x130>)
 80029d6:	ed93 7a00 	vldr	s14, [r3]
 80029da:	edd7 7a04 	vldr	s15, [r7, #16]
 80029de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029e6:	ee17 3a90 	vmov	r3, s15
 80029ea:	61fb      	str	r3, [r7, #28]
		motorLeft_SetDuty(consigne+100); //centrer le rapport cyclique, ce qui place les moteurs au repos si duty = 100
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	3364      	adds	r3, #100	@ 0x64
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fcd1 	bl	8003398 <motorLeft_SetDuty>

		switch(pxLxedMessage.command){
 80029f6:	7a3b      	ldrb	r3, [r7, #8]
 80029f8:	2b73      	cmp	r3, #115	@ 0x73
 80029fa:	d00f      	beq.n	8002a1c <task_A+0xf4>
 80029fc:	2b73      	cmp	r3, #115	@ 0x73
 80029fe:	dc11      	bgt.n	8002a24 <task_A+0xfc>
 8002a00:	2b62      	cmp	r3, #98	@ 0x62
 8002a02:	d006      	beq.n	8002a12 <task_A+0xea>
 8002a04:	2b66      	cmp	r3, #102	@ 0x66
 8002a06:	d10d      	bne.n	8002a24 <task_A+0xfc>
			case 'f':
				onMoveForward(2, consigne);
 8002a08:	69f9      	ldr	r1, [r7, #28]
 8002a0a:	2002      	movs	r0, #2
 8002a0c:	f000 fce4 	bl	80033d8 <onMoveForward>
				break;
 8002a10:	e009      	b.n	8002a26 <task_A+0xfe>
			case 'b' :
				onMoveBackward(2, consigne);
 8002a12:	69f9      	ldr	r1, [r7, #28]
 8002a14:	2002      	movs	r0, #2
 8002a16:	f000 fced 	bl	80033f4 <onMoveBackward>
				break;
 8002a1a:	e004      	b.n	8002a26 <task_A+0xfe>
			case 's' :
				stopMoving(2);
 8002a1c:	2002      	movs	r0, #2
 8002a1e:	f000 fcf4 	bl	800340a <stopMoving>
				break;
 8002a22:	e000      	b.n	8002a26 <task_A+0xfe>
			default :
				break;
 8002a24:	bf00      	nop
		}

		// Libère un sémaphore
		xSemaphoreGive( xSemaphore );
 8002a26:	4b0d      	ldr	r3, [pc, #52]	@ (8002a5c <task_A+0x134>)
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2100      	movs	r1, #0
 8002a30:	f008 fcaa 	bl	800b388 <xQueueGenericSend>
		vTaskDelay(5);
 8002a34:	2005      	movs	r0, #5
 8002a36:	f009 fb7d 	bl	800c134 <vTaskDelay>
		xQueueReceive( qhL,  &( pxLxedMessage ) , portMAX_DELAY );
 8002a3a:	e77d      	b.n	8002938 <task_A+0x10>
 8002a3c:	f3af 8000 	nop.w
 8002a40:	47ae147b 	.word	0x47ae147b
 8002a44:	3f847ae1 	.word	0x3f847ae1
 8002a48:	ada2811d 	.word	0xada2811d
 8002a4c:	3f61cf06 	.word	0x3f61cf06
 8002a50:	20004d48 	.word	0x20004d48
 8002a54:	0801dcbc 	.word	0x0801dcbc
 8002a58:	20004d50 	.word	0x20004d50
 8002a5c:	20004d34 	.word	0x20004d34

08002a60 <task_B>:
	}
}

// Fonction de contrôle pour la roue droite
static void task_B(void *pvParameters)
{
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	int consigne = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
	int speed_R=0; // vitesse roue droite
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61bb      	str	r3, [r7, #24]
	struct AMessage pxRxedMessage;
	int i;

	for (;;)
	{
		xQueueReceive( qhR,  &( pxRxedMessage ) , portMAX_DELAY );
 8002a70:	4b45      	ldr	r3, [pc, #276]	@ (8002b88 <task_B+0x128>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f107 0108 	add.w	r1, r7, #8
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f008 fe23 	bl	800b6c8 <xQueueReceive>
		printf("TASK B \r\n");
 8002a82:	4842      	ldr	r0, [pc, #264]	@ (8002b8c <task_B+0x12c>)
 8002a84:	f017 fcc0 	bl	801a408 <puts>

		speed_R = quadEncoder_GetSpeedR();
 8002a88:	f000 fdd8 	bl	800363c <quadEncoder_GetSpeedR>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	61bb      	str	r3, [r7, #24]
		err_R=500-speed_R;
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	f5c3 73fa 	rsb	r3, r3, #500	@ 0x1f4
 8002a96:	617b      	str	r3, [r7, #20]
		proportionalComponent_R=Kp_R*(float)err_R;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aa2:	ee17 0a90 	vmov	r0, s15
 8002aa6:	f7fd fd67 	bl	8000578 <__aeabi_f2d>
 8002aaa:	a333      	add	r3, pc, #204	@ (adr r3, 8002b78 <task_B+0x118>)
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	f7fd fdba 	bl	8000628 <__aeabi_dmul>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7fe f8ac 	bl	8000c18 <__aeabi_d2f>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	613b      	str	r3, [r7, #16]
		integralComponent_R=integralComponent_R+Kp_R*Ki_R*(float)err_R;
 8002ac4:	4b32      	ldr	r3, [pc, #200]	@ (8002b90 <task_B+0x130>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fd fd55 	bl	8000578 <__aeabi_f2d>
 8002ace:	4604      	mov	r4, r0
 8002ad0:	460d      	mov	r5, r1
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	ee07 3a90 	vmov	s15, r3
 8002ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002adc:	ee17 0a90 	vmov	r0, s15
 8002ae0:	f7fd fd4a 	bl	8000578 <__aeabi_f2d>
 8002ae4:	a326      	add	r3, pc, #152	@ (adr r3, 8002b80 <task_B+0x120>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fd9d 	bl	8000628 <__aeabi_dmul>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4620      	mov	r0, r4
 8002af4:	4629      	mov	r1, r5
 8002af6:	f7fd fbe1 	bl	80002bc <__adddf3>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4610      	mov	r0, r2
 8002b00:	4619      	mov	r1, r3
 8002b02:	f7fe f889 	bl	8000c18 <__aeabi_d2f>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4a21      	ldr	r2, [pc, #132]	@ (8002b90 <task_B+0x130>)
 8002b0a:	6013      	str	r3, [r2, #0]
		consigne = (int)(proportionalComponent_R+integralComponent_R);
 8002b0c:	4b20      	ldr	r3, [pc, #128]	@ (8002b90 <task_B+0x130>)
 8002b0e:	ed93 7a00 	vldr	s14, [r3]
 8002b12:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b1e:	ee17 3a90 	vmov	r3, s15
 8002b22:	61fb      	str	r3, [r7, #28]
		motorRight_SetDuty(consigne+100);
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	3364      	adds	r3, #100	@ 0x64
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fc45 	bl	80033b8 <motorRight_SetDuty>

		switch(pxRxedMessage.command){
 8002b2e:	7a3b      	ldrb	r3, [r7, #8]
 8002b30:	2b73      	cmp	r3, #115	@ 0x73
 8002b32:	d00f      	beq.n	8002b54 <task_B+0xf4>
 8002b34:	2b73      	cmp	r3, #115	@ 0x73
 8002b36:	dc11      	bgt.n	8002b5c <task_B+0xfc>
 8002b38:	2b62      	cmp	r3, #98	@ 0x62
 8002b3a:	d006      	beq.n	8002b4a <task_B+0xea>
 8002b3c:	2b66      	cmp	r3, #102	@ 0x66
 8002b3e:	d10d      	bne.n	8002b5c <task_B+0xfc>
			case 'f':
				onMoveForward(1, consigne);
 8002b40:	69f9      	ldr	r1, [r7, #28]
 8002b42:	2001      	movs	r0, #1
 8002b44:	f000 fc48 	bl	80033d8 <onMoveForward>
				break;
 8002b48:	e009      	b.n	8002b5e <task_B+0xfe>
			case 'b' :
				onMoveBackward(1, consigne);
 8002b4a:	69f9      	ldr	r1, [r7, #28]
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	f000 fc51 	bl	80033f4 <onMoveBackward>
				break;
 8002b52:	e004      	b.n	8002b5e <task_B+0xfe>
			case 's' :
				stopMoving(1);
 8002b54:	2001      	movs	r0, #1
 8002b56:	f000 fc58 	bl	800340a <stopMoving>
				break;
 8002b5a:	e000      	b.n	8002b5e <task_B+0xfe>
			default :
				break;
 8002b5c:	bf00      	nop
		}

		xSemaphoreGive( xSemaphore );
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b94 <task_B+0x134>)
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	2300      	movs	r3, #0
 8002b64:	2200      	movs	r2, #0
 8002b66:	2100      	movs	r1, #0
 8002b68:	f008 fc0e 	bl	800b388 <xQueueGenericSend>
		vTaskDelay(5);
 8002b6c:	2005      	movs	r0, #5
 8002b6e:	f009 fae1 	bl	800c134 <vTaskDelay>
		xQueueReceive( qhR,  &( pxRxedMessage ) , portMAX_DELAY );
 8002b72:	e77d      	b.n	8002a70 <task_B+0x10>
 8002b74:	f3af 8000 	nop.w
 8002b78:	47ae147b 	.word	0x47ae147b
 8002b7c:	3f847ae1 	.word	0x3f847ae1
 8002b80:	13813813 	.word	0x13813813
 8002b84:	3f638138 	.word	0x3f638138
 8002b88:	20004d4c 	.word	0x20004d4c
 8002b8c:	0801dcc8 	.word	0x0801dcc8
 8002b90:	20004d54 	.word	0x20004d54
 8002b94:	20004d34 	.word	0x20004d34

08002b98 <task_C>:
	}
}

// Générateur d'ordres pour le contrôle des moteurs du robot
static void task_C( void *pvParameters )
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	struct AMessage pxMessage;
	pxMessage.command='a';
 8002ba0:	2361      	movs	r3, #97	@ 0x61
 8002ba2:	723b      	strb	r3, [r7, #8]
	pxMessage.data=1000;
 8002ba4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ba8:	60fb      	str	r3, [r7, #12]
	vTaskDelay(1000); // attendre 1s
 8002baa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bae:	f009 fac1 	bl	800c134 <vTaskDelay>

	// envoi régulier des ordres de mise à jour
	for (;;)
	{
	    printf("TASK C \r\n");
 8002bb2:	4814      	ldr	r0, [pc, #80]	@ (8002c04 <task_C+0x6c>)
 8002bb4:	f017 fc28 	bl	801a408 <puts>
	    xQueueSend( qhL, ( void * ) &pxMessage,  portMAX_DELAY ); // envoi queue gauche
 8002bb8:	4b13      	ldr	r3, [pc, #76]	@ (8002c08 <task_C+0x70>)
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	f107 0108 	add.w	r1, r7, #8
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bc6:	f008 fbdf 	bl	800b388 <xQueueGenericSend>
	    xSemaphoreTake( xSemaphore, portMAX_DELAY );
 8002bca:	4b10      	ldr	r3, [pc, #64]	@ (8002c0c <task_C+0x74>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f008 fe5a 	bl	800b88c <xQueueSemaphoreTake>

	    xQueueSend( qhR, ( void * ) &pxMessage,  portMAX_DELAY ); // envoi queue droite
 8002bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8002c10 <task_C+0x78>)
 8002bda:	6818      	ldr	r0, [r3, #0]
 8002bdc:	f107 0108 	add.w	r1, r7, #8
 8002be0:	2300      	movs	r3, #0
 8002be2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002be6:	f008 fbcf 	bl	800b388 <xQueueGenericSend>
	    xSemaphoreTake( xSemaphore, portMAX_DELAY );
 8002bea:	4b08      	ldr	r3, [pc, #32]	@ (8002c0c <task_C+0x74>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f008 fe4a 	bl	800b88c <xQueueSemaphoreTake>

	    vTaskDelay(SAMPLING_PERIOD_ms);
 8002bf8:	2005      	movs	r0, #5
 8002bfa:	f009 fa9b 	bl	800c134 <vTaskDelay>
	    printf("TASK C \r\n");
 8002bfe:	bf00      	nop
 8002c00:	e7d7      	b.n	8002bb2 <task_C+0x1a>
 8002c02:	bf00      	nop
 8002c04:	0801dcd4 	.word	0x0801dcd4
 8002c08:	20004d48 	.word	0x20004d48
 8002c0c:	20004d34 	.word	0x20004d34
 8002c10:	20004d4c 	.word	0x20004d4c

08002c14 <main>:
#endif


//=========================================================================
int main(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af02      	add	r7, sp, #8
  int ret=0;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
  int tab_dist[2];

  HAL_Init();
 8002c1e:	f001 fd57 	bl	80046d0 <HAL_Init>
  SystemClock_Config();
 8002c22:	f001 fae3 	bl	80041ec <SystemClock_Config>
  MX_GPIO_Init();
 8002c26:	f7ff f95f 	bl	8001ee8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c2a:	f7ff faff 	bl	800222c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002c2e:	f7ff faa9 	bl	8002184 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002c32:	f7ff fad1 	bl	80021d8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002c36:	f7ff f9f1 	bl	800201c <MX_I2C1_Init>

  motorCommand_Init();
 8002c3a:	f000 fb51 	bl	80032e0 <motorCommand_Init>
  quadEncoder_Init();
 8002c3e:	f000 fbef 	bl	8003420 <quadEncoder_Init>
  captDistIR_Init();
 8002c42:	f7fe fe15 	bl	8001870 <captDistIR_Init>

  HAL_Delay(500);
 8002c46:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c4a:	f001 fd83 	bl	8004754 <HAL_Delay>

  // Affichage via UART2 sur Terminal série $ minicom -D /dev/ttyACM0
  printf("hello\r\n"); // REM : ne pas oublier le \n
 8002c4e:	484b      	ldr	r0, [pc, #300]	@ (8002d7c <main+0x168>)
 8002c50:	f017 fbda 	bl	801a408 <puts>

  VL53L0X_init();
 8002c54:	f7fe fb04 	bl	8001260 <VL53L0X_init>

  ret = VL53L0X_validateInterface();
 8002c58:	f7fe face 	bl	80011f8 <VL53L0X_validateInterface>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	617b      	str	r3, [r7, #20]
  if(ret ==0)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d103      	bne.n	8002c6e <main+0x5a>
  {
	  printf("VL53L0X OK\r\n");
 8002c66:	4846      	ldr	r0, [pc, #280]	@ (8002d80 <main+0x16c>)
 8002c68:	f017 fbce 	bl	801a408 <puts>
 8002c6c:	e002      	b.n	8002c74 <main+0x60>
  }
  else
  {
	  printf("!! PROBLEME VL53L0X !!\r\n");
 8002c6e:	4845      	ldr	r0, [pc, #276]	@ (8002d84 <main+0x170>)
 8002c70:	f017 fbca 	bl	801a408 <puts>
  }
  VL53L0X_startContinuous(0);
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fe fdb5 	bl	80017e4 <VL53L0X_startContinuous>

  int a, b;
  groveLCD_begin(16,2,0); // !! cette fonction prend du temps
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	2010      	movs	r0, #16
 8002c80:	f7ff fb2a 	bl	80022d8 <groveLCD_begin>
  HAL_Delay(100);
 8002c84:	2064      	movs	r0, #100	@ 0x64
 8002c86:	f001 fd65 	bl	8004754 <HAL_Delay>
  groveLCD_display();
 8002c8a:	f7ff fbdb 	bl	8002444 <groveLCD_display>
  a=5; b=2;
 8002c8e:	2305      	movs	r3, #5
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	2302      	movs	r3, #2
 8002c94:	60fb      	str	r3, [r7, #12]
  groveLCD_term_printf("%d+%d=%d",a,b,a+b);
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	6939      	ldr	r1, [r7, #16]
 8002ca0:	4839      	ldr	r0, [pc, #228]	@ (8002d88 <main+0x174>)
 8002ca2:	f7ff fc51 	bl	8002548 <groveLCD_term_printf>
  groveLCD_setCursor(0,0);
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f7ff fba7 	bl	80023fc <groveLCD_setCursor>
  groveLCD_term_printf("hello");
 8002cae:	4837      	ldr	r0, [pc, #220]	@ (8002d8c <main+0x178>)
 8002cb0:	f7ff fc4a 	bl	8002548 <groveLCD_term_printf>


  HAL_Delay(50);
 8002cb4:	2032      	movs	r0, #50	@ 0x32
 8002cb6:	f001 fd4d 	bl	8004754 <HAL_Delay>

	 speed = quadEncoder_GetSpeedL();
	 speed = quadEncoder_GetSpeedR();
#endif

  osKernelInitialize();
 8002cba:	f008 f8d1 	bl	800ae60 <osKernelInitialize>

  xTaskCreate( microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	2318      	movs	r3, #24
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002ccc:	4930      	ldr	r1, [pc, #192]	@ (8002d90 <main+0x17c>)
 8002cce:	4831      	ldr	r0, [pc, #196]	@ (8002d94 <main+0x180>)
 8002cd0:	f009 f8d2 	bl	800be78 <xTaskCreate>
#if SYNCHRO_EX == EX1
	xTaskCreate( task_A, ( const portCHAR * ) "task A", 128 /* stack size */, NULL, 26, NULL );
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	231a      	movs	r3, #26
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	2280      	movs	r2, #128	@ 0x80
 8002ce0:	492d      	ldr	r1, [pc, #180]	@ (8002d98 <main+0x184>)
 8002ce2:	482e      	ldr	r0, [pc, #184]	@ (8002d9c <main+0x188>)
 8002ce4:	f009 f8c8 	bl	800be78 <xTaskCreate>
	xTaskCreate( task_B, ( const portCHAR * ) "task B", 128 /* stack size */, NULL, 25, NULL );
 8002ce8:	2300      	movs	r3, #0
 8002cea:	9301      	str	r3, [sp, #4]
 8002cec:	2319      	movs	r3, #25
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2280      	movs	r2, #128	@ 0x80
 8002cf4:	492a      	ldr	r1, [pc, #168]	@ (8002da0 <main+0x18c>)
 8002cf6:	482b      	ldr	r0, [pc, #172]	@ (8002da4 <main+0x190>)
 8002cf8:	f009 f8be 	bl	800be78 <xTaskCreate>
	xTaskCreate( task_C, ( signed portCHAR * ) "task C", 128 /* stack size */, NULL, 28, NULL );
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	231c      	movs	r3, #28
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2300      	movs	r3, #0
 8002d06:	2280      	movs	r2, #128	@ 0x80
 8002d08:	4927      	ldr	r1, [pc, #156]	@ (8002da8 <main+0x194>)
 8002d0a:	4828      	ldr	r0, [pc, #160]	@ (8002dac <main+0x198>)
 8002d0c:	f009 f8b4 	bl	800be78 <xTaskCreate>
#elif SYNCHRO_EX == EX3
	xTaskCreate( task_E, ( signed portCHAR * ) "task E", 128 /* stack size */, NULL, 30, NULL );
	xTaskCreate( task_F, ( signed portCHAR * ) "task F", 128 /* stack size */, NULL, 29, NULL );
#endif

	vSemaphoreCreateBinary(xSemaphore);
 8002d10:	2203      	movs	r2, #3
 8002d12:	2100      	movs	r1, #0
 8002d14:	2001      	movs	r0, #1
 8002d16:	f008 fad8 	bl	800b2ca <xQueueGenericCreate>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4a24      	ldr	r2, [pc, #144]	@ (8002db0 <main+0x19c>)
 8002d1e:	6013      	str	r3, [r2, #0]
 8002d20:	4b23      	ldr	r3, [pc, #140]	@ (8002db0 <main+0x19c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d006      	beq.n	8002d36 <main+0x122>
 8002d28:	4b21      	ldr	r3, [pc, #132]	@ (8002db0 <main+0x19c>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2100      	movs	r1, #0
 8002d32:	f008 fb29 	bl	800b388 <xQueueGenericSend>
	xSemaphoreTake( xSemaphore, portMAX_DELAY );
 8002d36:	4b1e      	ldr	r3, [pc, #120]	@ (8002db0 <main+0x19c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f008 fda4 	bl	800b88c <xQueueSemaphoreTake>

	qh = xQueueCreate( 1, sizeof(struct AMessage ) );
 8002d44:	2200      	movs	r2, #0
 8002d46:	2108      	movs	r1, #8
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f008 fabe 	bl	800b2ca <xQueueGenericCreate>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4a18      	ldr	r2, [pc, #96]	@ (8002db4 <main+0x1a0>)
 8002d52:	6013      	str	r3, [r2, #0]

#if SYNCHRO_EX == EX1
	qhL = xQueueCreate( 1, sizeof(struct AMessage ) ); //queue gauche
 8002d54:	2200      	movs	r2, #0
 8002d56:	2108      	movs	r1, #8
 8002d58:	2001      	movs	r0, #1
 8002d5a:	f008 fab6 	bl	800b2ca <xQueueGenericCreate>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4a15      	ldr	r2, [pc, #84]	@ (8002db8 <main+0x1a4>)
 8002d62:	6013      	str	r3, [r2, #0]
	qhR = xQueueCreate( 1, sizeof(struct AMessage ) ); //queue droite
 8002d64:	2200      	movs	r2, #0
 8002d66:	2108      	movs	r1, #8
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f008 faae 	bl	800b2ca <xQueueGenericCreate>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4a12      	ldr	r2, [pc, #72]	@ (8002dbc <main+0x1a8>)
 8002d72:	6013      	str	r3, [r2, #0]
#endif

  osKernelStart();
 8002d74:	f008 f898 	bl	800aea8 <osKernelStart>

  while (1)
 8002d78:	bf00      	nop
 8002d7a:	e7fd      	b.n	8002d78 <main+0x164>
 8002d7c:	0801dce0 	.word	0x0801dce0
 8002d80:	0801dce8 	.word	0x0801dce8
 8002d84:	0801dcf4 	.word	0x0801dcf4
 8002d88:	0801dd0c 	.word	0x0801dd0c
 8002d8c:	0801dd18 	.word	0x0801dd18
 8002d90:	0801dd20 	.word	0x0801dd20
 8002d94:	08002de5 	.word	0x08002de5
 8002d98:	0801dd30 	.word	0x0801dd30
 8002d9c:	08002929 	.word	0x08002929
 8002da0:	0801dd38 	.word	0x0801dd38
 8002da4:	08002a61 	.word	0x08002a61
 8002da8:	0801dd40 	.word	0x0801dd40
 8002dac:	08002b99 	.word	0x08002b99
 8002db0:	20004d34 	.word	0x20004d34
 8002db4:	20004d38 	.word	0x20004d38
 8002db8:	20004d48 	.word	0x20004d48
 8002dbc:	20004d4c 	.word	0x20004d4c

08002dc0 <subscription_callback>:
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);


void subscription_callback(const void * msgin)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__String * msg = (const std_msgs__msg__String *)msgin;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	60fb      	str	r3, [r7, #12]

  // Process message
  printf("Received from HOST: %s\n\r", msg->data);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dd0:	4803      	ldr	r0, [pc, #12]	@ (8002de0 <subscription_callback+0x20>)
 8002dd2:	f017 fab1 	bl	801a338 <iprintf>
}
 8002dd6:	bf00      	nop
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	0801dd48 	.word	0x0801dd48

08002de4 <microros_task>:


void microros_task(void *argument)
{
 8002de4:	b5b0      	push	{r4, r5, r7, lr}
 8002de6:	b0d6      	sub	sp, #344	@ 0x158
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002dee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002df2:	6018      	str	r0, [r3, #0]
  rmw_uros_set_custom_transport( true, (void *) &huart1, cubemx_transport_open,  cubemx_transport_close,  cubemx_transport_write, cubemx_transport_read);
 8002df4:	4b68      	ldr	r3, [pc, #416]	@ (8002f98 <microros_task+0x1b4>)
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	4b68      	ldr	r3, [pc, #416]	@ (8002f9c <microros_task+0x1b8>)
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	4b68      	ldr	r3, [pc, #416]	@ (8002fa0 <microros_task+0x1bc>)
 8002dfe:	4a69      	ldr	r2, [pc, #420]	@ (8002fa4 <microros_task+0x1c0>)
 8002e00:	4969      	ldr	r1, [pc, #420]	@ (8002fa8 <microros_task+0x1c4>)
 8002e02:	2001      	movs	r0, #1
 8002e04:	f00c f94a 	bl	800f09c <rmw_uros_set_custom_transport>

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002e08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f00b feb1 	bl	800eb74 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8002e12:	4b66      	ldr	r3, [pc, #408]	@ (8002fac <microros_task+0x1c8>)
 8002e14:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  freeRTOS_allocator.deallocate = microros_deallocate;
 8002e18:	4b65      	ldr	r3, [pc, #404]	@ (8002fb0 <microros_task+0x1cc>)
 8002e1a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  freeRTOS_allocator.reallocate = microros_reallocate;
 8002e1e:	4b65      	ldr	r3, [pc, #404]	@ (8002fb4 <microros_task+0x1d0>)
 8002e20:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002e24:	4b64      	ldr	r3, [pc, #400]	@ (8002fb8 <microros_task+0x1d4>)
 8002e26:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002e2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f00b feae 	bl	800eb90 <rcutils_set_default_allocator>
 8002e34:	4603      	mov	r3, r0
 8002e36:	f083 0301 	eor.w	r3, r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d004      	beq.n	8002e4a <microros_task+0x66>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8002e40:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
 8002e44:	485d      	ldr	r0, [pc, #372]	@ (8002fbc <microros_task+0x1d8>)
 8002e46:	f017 fa77 	bl	801a338 <iprintf>
  }

  // micro-ROS app
  rclc_support_t support;
  rcl_allocator_t allocator;
  allocator = rcl_get_default_allocator();
 8002e4a:	463b      	mov	r3, r7
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f00b febf 	bl	800ebd0 <rcutils_get_default_allocator>
 8002e52:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002e56:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002e5a:	f107 04ec 	add.w	r4, r7, #236	@ 0xec
 8002e5e:	461d      	mov	r5, r3
 8002e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e64:	682b      	ldr	r3, [r5, #0]
 8002e66:	6023      	str	r3, [r4, #0]

  // create node
  rcl_node_t node;
  rcl_node_options_t node_ops = rcl_node_get_default_options();
 8002e68:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f00b f8c9 	bl	800e004 <rcl_node_get_default_options>
  rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8002e72:	f00a ffa1 	bl	800ddb8 <rcl_get_zero_initialized_init_options>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  rcl_init_options_init(&init_options, allocator);
 8002e7c:	f107 04c4 	add.w	r4, r7, #196	@ 0xc4
 8002e80:	466a      	mov	r2, sp
 8002e82:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002e86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e8a:	e882 0003 	stmia.w	r2, {r0, r1}
 8002e8e:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e94:	4620      	mov	r0, r4
 8002e96:	f00a ff91 	bl	800ddbc <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, ROS_DOMAIN_ID);
 8002e9a:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002e9e:	2106      	movs	r1, #6
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f00b f8a7 	bl	800dff4 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8002ea6:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8002eaa:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8002eae:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2100      	movs	r1, #0
 8002eba:	f00b fd73 	bl	800e9a4 <rclc_support_init_with_options>
  rclc_node_init_default(&node, "STM32_Node","", &support);
 8002ebe:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002ec2:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8002ec6:	4a3e      	ldr	r2, [pc, #248]	@ (8002fc0 <microros_task+0x1dc>)
 8002ec8:	493e      	ldr	r1, [pc, #248]	@ (8002fc4 <microros_task+0x1e0>)
 8002eca:	f00b fda7 	bl	800ea1c <rclc_node_init_default>

  // create publisher
  rcl_publisher_t publisher;
  std_msgs__msg__String sensor_dist_back_msg;
  rclc_publisher_init_default(&publisher, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),"/sensor/dist_back");
 8002ece:	f00d fab5 	bl	801043c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 8002ed8:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8002edc:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc8 <microros_task+0x1e4>)
 8002ede:	f00b fdd9 	bl	800ea94 <rclc_publisher_init_default>

  // create subscriber
  rcl_subscription_t subscriber;
  std_msgs__msg__String str_msg;
  rclc_subscription_init_default(&subscriber,&node,ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),"/command/move");
 8002ee2:	f00d faab 	bl	801043c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 8002eec:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8002ef0:	4b36      	ldr	r3, [pc, #216]	@ (8002fcc <microros_task+0x1e8>)
 8002ef2:	f00b fe03 	bl	800eafc <rclc_subscription_init_default>
  // Add subscription to the executor
  rclc_executor_t executor;
  rclc_executor_init(&executor, &support.context, 1, &allocator); // ! 'NUMBER OF HANDLES' A MODIFIER EN FONCTION DU NOMBRE DE TOPICS
 8002ef6:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 8002efa:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002efe:	1d19      	adds	r1, r3, #4
 8002f00:	f107 0020 	add.w	r0, r7, #32
 8002f04:	4613      	mov	r3, r2
 8002f06:	2201      	movs	r2, #1
 8002f08:	f00b faee 	bl	800e4e8 <rclc_executor_init>
  rclc_executor_add_subscription(&executor, &subscriber, &str_msg, &subscription_callback, ON_NEW_DATA);
 8002f0c:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8002f10:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8002f14:	f107 0020 	add.w	r0, r7, #32
 8002f18:	2300      	movs	r3, #0
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd0 <microros_task+0x1ec>)
 8002f1e:	f00b fb57 	bl	800e5d0 <rclc_executor_add_subscription>

  str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8002f22:	2064      	movs	r0, #100	@ 0x64
 8002f24:	f016 f902 	bl	801912c <malloc>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  str_msg.data.size = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  str_msg.data.capacity = ARRAY_LEN;
 8002f34:	2364      	movs	r3, #100	@ 0x64
 8002f36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  for(;;)
  {
	  sprintf(str_msg.data.data, "from STM32 : mes_vl53 : #%d", (int32_t)mes_vl53);
 8002f3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f3e:	4a25      	ldr	r2, [pc, #148]	@ (8002fd4 <microros_task+0x1f0>)
 8002f40:	8812      	ldrh	r2, [r2, #0]
 8002f42:	4925      	ldr	r1, [pc, #148]	@ (8002fd8 <microros_task+0x1f4>)
 8002f44:	4618      	mov	r0, r3
 8002f46:	f017 fa9b 	bl	801a480 <siprintf>
	  str_msg.data.size = strlen(str_msg.data.data);
 8002f4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd f9a6 	bl	80002a0 <strlen>
 8002f54:	4603      	mov	r3, r0
 8002f56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      rcl_ret_t ret = rcl_publish(&publisher, &str_msg, NULL);
 8002f5a:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8002f5e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002f62:	2200      	movs	r2, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f00b f9a5 	bl	800e2b4 <rcl_publish>
 8002f6a:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

		if (ret != RCL_RET_OK)
 8002f6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d004      	beq.n	8002f80 <microros_task+0x19c>
		{
		  printf("Error publishing (line %d)\n\r", __LINE__);
 8002f76:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8002f7a:	4818      	ldr	r0, [pc, #96]	@ (8002fdc <microros_task+0x1f8>)
 8002f7c:	f017 f9dc 	bl	801a338 <iprintf>
		}
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 8002f80:	f107 0120 	add.w	r1, r7, #32
 8002f84:	4a16      	ldr	r2, [pc, #88]	@ (8002fe0 <microros_task+0x1fc>)
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	4608      	mov	r0, r1
 8002f8c:	f00b fcd4 	bl	800e938 <rclc_executor_spin_some>
    osDelay(10);
 8002f90:	200a      	movs	r0, #10
 8002f92:	f007 ffaf 	bl	800aef4 <osDelay>
  {
 8002f96:	e7d0      	b.n	8002f3a <microros_task+0x156>
 8002f98:	08001e41 	.word	0x08001e41
 8002f9c:	08001dd9 	.word	0x08001dd9
 8002fa0:	08001db9 	.word	0x08001db9
 8002fa4:	08001d8d 	.word	0x08001d8d
 8002fa8:	20004b24 	.word	0x20004b24
 8002fac:	08003015 	.word	0x08003015
 8002fb0:	08003059 	.word	0x08003059
 8002fb4:	08003091 	.word	0x08003091
 8002fb8:	080030fd 	.word	0x080030fd
 8002fbc:	0801dd64 	.word	0x0801dd64
 8002fc0:	0801dd8c 	.word	0x0801dd8c
 8002fc4:	0801dd90 	.word	0x0801dd90
 8002fc8:	0801dd9c 	.word	0x0801dd9c
 8002fcc:	0801ddb0 	.word	0x0801ddb0
 8002fd0:	08002dc1 	.word	0x08002dc1
 8002fd4:	20004d3c 	.word	0x20004d3c
 8002fd8:	0801ddc0 	.word	0x0801ddc0
 8002fdc:	0801dddc 	.word	0x0801dddc
 8002fe0:	00989680 	.word	0x00989680

08002fe4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a04      	ldr	r2, [pc, #16]	@ (8003004 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d101      	bne.n	8002ffa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002ff6:	f001 fb8d 	bl	8004714 <HAL_IncTick>
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40000800 	.word	0x40000800

08003008 <Error_Handler>:

//=========================================================================
void Error_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800300c:	b672      	cpsid	i
}
 800300e:	bf00      	nop
  __disable_irq();
  while (1)
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <Error_Handler+0x8>

08003014 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800301e:	4b0c      	ldr	r3, [pc, #48]	@ (8003050 <microros_allocate+0x3c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4413      	add	r3, r2
 8003028:	461a      	mov	r2, r3
 800302a:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <microros_allocate+0x3c>)
 800302c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800302e:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <microros_allocate+0x40>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4413      	add	r3, r2
 8003038:	461a      	mov	r2, r3
 800303a:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <microros_allocate+0x40>)
 800303c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fe fc48 	bl	80018d4 <pvPortMallocMicroROS>
 8003044:	4603      	mov	r3, r0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20004d58 	.word	0x20004d58
 8003054:	20004d5c 	.word	0x20004d5c

08003058 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00c      	beq.n	8003082 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7fe fd57 	bl	8001b1c <getBlockSize>
 800306e:	4603      	mov	r3, r0
 8003070:	4a06      	ldr	r2, [pc, #24]	@ (800308c <microros_deallocate+0x34>)
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	461a      	mov	r2, r3
 8003078:	4b04      	ldr	r3, [pc, #16]	@ (800308c <microros_deallocate+0x34>)
 800307a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7fe fcf1 	bl	8001a64 <vPortFreeMicroROS>
  }
}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20004d5c 	.word	0x20004d5c

08003090 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800309c:	4b15      	ldr	r3, [pc, #84]	@ (80030f4 <microros_reallocate+0x64>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4413      	add	r3, r2
 80030a6:	461a      	mov	r2, r3
 80030a8:	4b12      	ldr	r3, [pc, #72]	@ (80030f4 <microros_reallocate+0x64>)
 80030aa:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80030ac:	4b12      	ldr	r3, [pc, #72]	@ (80030f8 <microros_reallocate+0x68>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4413      	add	r3, r2
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b0f      	ldr	r3, [pc, #60]	@ (80030f8 <microros_reallocate+0x68>)
 80030ba:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d104      	bne.n	80030cc <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80030c2:	68b8      	ldr	r0, [r7, #8]
 80030c4:	f7fe fc06 	bl	80018d4 <pvPortMallocMicroROS>
 80030c8:	4603      	mov	r3, r0
 80030ca:	e00e      	b.n	80030ea <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f7fe fd25 	bl	8001b1c <getBlockSize>
 80030d2:	4603      	mov	r3, r0
 80030d4:	4a08      	ldr	r2, [pc, #32]	@ (80030f8 <microros_reallocate+0x68>)
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	4b06      	ldr	r3, [pc, #24]	@ (80030f8 <microros_reallocate+0x68>)
 80030de:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80030e0:	68b9      	ldr	r1, [r7, #8]
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f7fe fd38 	bl	8001b58 <pvPortReallocMicroROS>
 80030e8:	4603      	mov	r3, r0
  }
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20004d58 	.word	0x20004d58
 80030f8:	20004d5c 	.word	0x20004d5c

080030fc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	fb02 f303 	mul.w	r3, r2, r3
 8003110:	4a0c      	ldr	r2, [pc, #48]	@ (8003144 <microros_zero_allocate+0x48>)
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	4413      	add	r3, r2
 8003116:	461a      	mov	r2, r3
 8003118:	4b0a      	ldr	r3, [pc, #40]	@ (8003144 <microros_zero_allocate+0x48>)
 800311a:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	fb02 f303 	mul.w	r3, r2, r3
 8003124:	4a08      	ldr	r2, [pc, #32]	@ (8003148 <microros_zero_allocate+0x4c>)
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	4413      	add	r3, r2
 800312a:	461a      	mov	r2, r3
 800312c:	4b06      	ldr	r3, [pc, #24]	@ (8003148 <microros_zero_allocate+0x4c>)
 800312e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f7fe fd4a 	bl	8001bcc <pvPortCallocMicroROS>
 8003138:	4603      	mov	r3, r0
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20004d58 	.word	0x20004d58
 8003148:	20004d5c 	.word	0x20004d5c
 800314c:	00000000 	.word	0x00000000

08003150 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003150:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003154:	b086      	sub	sp, #24
 8003156:	af00      	add	r7, sp, #0
 8003158:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8003162:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003166:	a320      	add	r3, pc, #128	@ (adr r3, 80031e8 <UTILS_NanosecondsToTimespec+0x98>)
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	f7fd fda4 	bl	8000cb8 <__aeabi_ldivmod>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800317a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800317e:	a31a      	add	r3, pc, #104	@ (adr r3, 80031e8 <UTILS_NanosecondsToTimespec+0x98>)
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f7fd fd98 	bl	8000cb8 <__aeabi_ldivmod>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	da20      	bge.n	80031d6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	4a11      	ldr	r2, [pc, #68]	@ (80031e0 <UTILS_NanosecondsToTimespec+0x90>)
 800319a:	fb82 1203 	smull	r1, r2, r2, r3
 800319e:	1712      	asrs	r2, r2, #28
 80031a0:	17db      	asrs	r3, r3, #31
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	3301      	adds	r3, #1
 80031a6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ae:	6979      	ldr	r1, [r7, #20]
 80031b0:	17c8      	asrs	r0, r1, #31
 80031b2:	460c      	mov	r4, r1
 80031b4:	4605      	mov	r5, r0
 80031b6:	ebb2 0804 	subs.w	r8, r2, r4
 80031ba:	eb63 0905 	sbc.w	r9, r3, r5
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	4906      	ldr	r1, [pc, #24]	@ (80031e4 <UTILS_NanosecondsToTimespec+0x94>)
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	441a      	add	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	609a      	str	r2, [r3, #8]
    }
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031e0:	44b82fa1 	.word	0x44b82fa1
 80031e4:	3b9aca00 	.word	0x3b9aca00
 80031e8:	3b9aca00 	.word	0x3b9aca00
 80031ec:	00000000 	.word	0x00000000

080031f0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80031f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f4:	b08e      	sub	sp, #56	@ 0x38
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80031fa:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80031fc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003200:	2300      	movs	r3, #0
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8003212:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003216:	4618      	mov	r0, r3
 8003218:	f009 fac4 	bl	800c7a4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800321c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321e:	17da      	asrs	r2, r3, #31
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	61fa      	str	r2, [r7, #28]
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	69b9      	ldr	r1, [r7, #24]
 800322e:	000b      	movs	r3, r1
 8003230:	2200      	movs	r2, #0
 8003232:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8003236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003238:	2200      	movs	r2, #0
 800323a:	461c      	mov	r4, r3
 800323c:	4615      	mov	r5, r2
 800323e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003242:	1911      	adds	r1, r2, r4
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	416b      	adcs	r3, r5
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800324e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8003252:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	f04f 0400 	mov.w	r4, #0
 800325e:	f04f 0500 	mov.w	r5, #0
 8003262:	015d      	lsls	r5, r3, #5
 8003264:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8003268:	0154      	lsls	r4, r2, #5
 800326a:	4622      	mov	r2, r4
 800326c:	462b      	mov	r3, r5
 800326e:	ebb2 0800 	subs.w	r8, r2, r0
 8003272:	eb63 0901 	sbc.w	r9, r3, r1
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003282:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003286:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800328a:	4690      	mov	r8, r2
 800328c:	4699      	mov	r9, r3
 800328e:	eb18 0a00 	adds.w	sl, r8, r0
 8003292:	eb49 0b01 	adc.w	fp, r9, r1
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032a2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032a6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032aa:	ebb2 040a 	subs.w	r4, r2, sl
 80032ae:	603c      	str	r4, [r7, #0]
 80032b0:	eb63 030b 	sbc.w	r3, r3, fp
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032ba:	4623      	mov	r3, r4
 80032bc:	181b      	adds	r3, r3, r0
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	462b      	mov	r3, r5
 80032c2:	eb41 0303 	adc.w	r3, r1, r3
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	6a3a      	ldr	r2, [r7, #32]
 80032ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032ce:	f7ff ff3f 	bl	8003150 <UTILS_NanosecondsToTimespec>

    return 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	3738      	adds	r7, #56	@ 0x38
 80032d8:	46bd      	mov	sp, r7
 80032da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080032e0 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 80032ea:	4b25      	ldr	r3, [pc, #148]	@ (8003380 <motorCommand_Init+0xa0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a25      	ldr	r2, [pc, #148]	@ (8003384 <motorCommand_Init+0xa4>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	0d9b      	lsrs	r3, r3, #22
 80032f6:	3b01      	subs	r3, #1
 80032f8:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 80032fa:	4b23      	ldr	r3, [pc, #140]	@ (8003388 <motorCommand_Init+0xa8>)
 80032fc:	4a23      	ldr	r2, [pc, #140]	@ (800338c <motorCommand_Init+0xac>)
 80032fe:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 8003300:	4b21      	ldr	r3, [pc, #132]	@ (8003388 <motorCommand_Init+0xa8>)
 8003302:	22c7      	movs	r2, #199	@ 0xc7
 8003304:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 8003306:	4a20      	ldr	r2, [pc, #128]	@ (8003388 <motorCommand_Init+0xa8>)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 800330c:	4b1e      	ldr	r3, [pc, #120]	@ (8003388 <motorCommand_Init+0xa8>)
 800330e:	2200      	movs	r2, #0
 8003310:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003312:	4b1d      	ldr	r3, [pc, #116]	@ (8003388 <motorCommand_Init+0xa8>)
 8003314:	2200      	movs	r2, #0
 8003316:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 8003318:	481b      	ldr	r0, [pc, #108]	@ (8003388 <motorCommand_Init+0xa8>)
 800331a:	f005 fb0d 	bl	8008938 <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800331e:	4b1c      	ldr	r3, [pc, #112]	@ (8003390 <motorCommand_Init+0xb0>)
 8003320:	2260      	movs	r2, #96	@ 0x60
 8003322:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 8003324:	4b1a      	ldr	r3, [pc, #104]	@ (8003390 <motorCommand_Init+0xb0>)
 8003326:	2205      	movs	r2, #5
 8003328:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800332a:	4b19      	ldr	r3, [pc, #100]	@ (8003390 <motorCommand_Init+0xb0>)
 800332c:	2200      	movs	r2, #0
 800332e:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003330:	4b17      	ldr	r3, [pc, #92]	@ (8003390 <motorCommand_Init+0xb0>)
 8003332:	2200      	movs	r2, #0
 8003334:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 8003336:	2200      	movs	r2, #0
 8003338:	4915      	ldr	r1, [pc, #84]	@ (8003390 <motorCommand_Init+0xb0>)
 800333a:	4813      	ldr	r0, [pc, #76]	@ (8003388 <motorCommand_Init+0xa8>)
 800333c:	f005 feae 	bl	800909c <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 8003340:	2204      	movs	r2, #4
 8003342:	4913      	ldr	r1, [pc, #76]	@ (8003390 <motorCommand_Init+0xb0>)
 8003344:	4810      	ldr	r0, [pc, #64]	@ (8003388 <motorCommand_Init+0xa8>)
 8003346:	f005 fea9 	bl	800909c <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 800334a:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <motorCommand_Init+0xa8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2264      	movs	r2, #100	@ 0x64
 8003350:	635a      	str	r2, [r3, #52]	@ 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 8003352:	4b0d      	ldr	r3, [pc, #52]	@ (8003388 <motorCommand_Init+0xa8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2264      	movs	r2, #100	@ 0x64
 8003358:	639a      	str	r2, [r3, #56]	@ 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 800335a:	2100      	movs	r1, #0
 800335c:	480a      	ldr	r0, [pc, #40]	@ (8003388 <motorCommand_Init+0xa8>)
 800335e:	f005 fba7 	bl	8008ab0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 8003362:	2104      	movs	r1, #4
 8003364:	4808      	ldr	r0, [pc, #32]	@ (8003388 <motorCommand_Init+0xa8>)
 8003366:	f005 fba3 	bl	8008ab0 <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800336a:	2200      	movs	r2, #0
 800336c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003370:	4808      	ldr	r0, [pc, #32]	@ (8003394 <motorCommand_Init+0xb4>)
 8003372:	f002 f99d 	bl	80056b0 <HAL_GPIO_WritePin>
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000004 	.word	0x20000004
 8003384:	6b5fca6b 	.word	0x6b5fca6b
 8003388:	20004d60 	.word	0x20004d60
 800338c:	40000400 	.word	0x40000400
 8003390:	20004da8 	.word	0x20004da8
 8003394:	40020000 	.word	0x40020000

08003398 <motorLeft_SetDuty>:

//=================================================================
//			SET DUTY CYCLE LEFT
//=================================================================
void motorLeft_SetDuty(int duty)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, duty);
 80033a0:	4b04      	ldr	r3, [pc, #16]	@ (80033b4 <motorLeft_SetDuty+0x1c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	20004d60 	.word	0x20004d60

080033b8 <motorRight_SetDuty>:
//=================================================================
//			SET DUTY CYCLE RIGHT
//=================================================================
void motorRight_SetDuty(int duty)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, duty);
 80033c0:	4b04      	ldr	r3, [pc, #16]	@ (80033d4 <motorRight_SetDuty+0x1c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	20004d60 	.word	0x20004d60

080033d8 <onMoveForward>:
//=================================================================


//RobotState robot_state = STOPPED;

void onMoveForward(int index,int consigne) {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
    //dxl_setGoalVelocity(1, velocity);
    //dxl_setGoalVelocity(2, -velocity);
   // robot_state = MOVING_FORWARD;
	printf("moving forward \n\r");
 80033e2:	4803      	ldr	r0, [pc, #12]	@ (80033f0 <onMoveForward+0x18>)
 80033e4:	f016 ffa8 	bl	801a338 <iprintf>
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	0801ddfc 	.word	0x0801ddfc

080033f4 <onMoveBackward>:

void onMoveBackward(int index,int consigne) {
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
    //dxl_setGoalVelocity(1, -velocity);
    //dxl_setGoalVelocity(2, velocity);
    //robot_state = MOVING_BACKWARD;
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <stopMoving>:

void stopMoving(int index) {
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
   //dxl_setGoalVelocity(1, velocity);
   //dxl_setGoalVelocity(2, velocity);
   // robot_state = STOPPED;
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b08a      	sub	sp, #40	@ 0x28
 8003424:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 8003426:	4b35      	ldr	r3, [pc, #212]	@ (80034fc <quadEncoder_Init+0xdc>)
 8003428:	4a35      	ldr	r2, [pc, #212]	@ (8003500 <quadEncoder_Init+0xe0>)
 800342a:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 800342c:	4b33      	ldr	r3, [pc, #204]	@ (80034fc <quadEncoder_Init+0xdc>)
 800342e:	2200      	movs	r2, #0
 8003430:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003432:	4b32      	ldr	r3, [pc, #200]	@ (80034fc <quadEncoder_Init+0xdc>)
 8003434:	2200      	movs	r2, #0
 8003436:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 8003438:	4b30      	ldr	r3, [pc, #192]	@ (80034fc <quadEncoder_Init+0xdc>)
 800343a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800343e:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003440:	4b2e      	ldr	r3, [pc, #184]	@ (80034fc <quadEncoder_Init+0xdc>)
 8003442:	2200      	movs	r2, #0
 8003444:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003446:	2303      	movs	r3, #3
 8003448:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800344a:	2300      	movs	r3, #0
 800344c:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800344e:	2301      	movs	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8003452:	2308      	movs	r3, #8
 8003454:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8003456:	230f      	movs	r3, #15
 8003458:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800345a:	2300      	movs	r3, #0
 800345c:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 800345e:	2301      	movs	r3, #1
 8003460:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8003462:	2308      	movs	r3, #8
 8003464:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8003466:	230f      	movs	r3, #15
 8003468:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4823      	ldr	r0, [pc, #140]	@ (80034fc <quadEncoder_Init+0xdc>)
 8003470:	f005 fbce 	bl	8008c10 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 8003474:	4b21      	ldr	r3, [pc, #132]	@ (80034fc <quadEncoder_Init+0xdc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2200      	movs	r2, #0
 800347a:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 800347c:	2100      	movs	r1, #0
 800347e:	481f      	ldr	r0, [pc, #124]	@ (80034fc <quadEncoder_Init+0xdc>)
 8003480:	f005 fc76 	bl	8008d70 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8003484:	2104      	movs	r1, #4
 8003486:	481d      	ldr	r0, [pc, #116]	@ (80034fc <quadEncoder_Init+0xdc>)
 8003488:	f005 fc72 	bl	8008d70 <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 800348c:	4b1d      	ldr	r3, [pc, #116]	@ (8003504 <quadEncoder_Init+0xe4>)
 800348e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003492:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 8003494:	4b1b      	ldr	r3, [pc, #108]	@ (8003504 <quadEncoder_Init+0xe4>)
 8003496:	2200      	movs	r2, #0
 8003498:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 800349a:	4b1a      	ldr	r3, [pc, #104]	@ (8003504 <quadEncoder_Init+0xe4>)
 800349c:	2200      	movs	r2, #0
 800349e:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 80034a0:	4b18      	ldr	r3, [pc, #96]	@ (8003504 <quadEncoder_Init+0xe4>)
 80034a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a6:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a8:	4b16      	ldr	r3, [pc, #88]	@ (8003504 <quadEncoder_Init+0xe4>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80034ae:	2303      	movs	r3, #3
 80034b0:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80034b6:	2301      	movs	r3, #1
 80034b8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 80034ba:	2308      	movs	r3, #8
 80034bc:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 80034be:	230f      	movs	r3, #15
 80034c0:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 80034c6:	2301      	movs	r3, #1
 80034c8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 80034ca:	2308      	movs	r3, #8
 80034cc:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 80034ce:	230f      	movs	r3, #15
 80034d0:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 80034d2:	1d3b      	adds	r3, r7, #4
 80034d4:	4619      	mov	r1, r3
 80034d6:	480b      	ldr	r0, [pc, #44]	@ (8003504 <quadEncoder_Init+0xe4>)
 80034d8:	f005 fb9a 	bl	8008c10 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 80034dc:	4b09      	ldr	r3, [pc, #36]	@ (8003504 <quadEncoder_Init+0xe4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2200      	movs	r2, #0
 80034e2:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 80034e4:	2100      	movs	r1, #0
 80034e6:	4807      	ldr	r0, [pc, #28]	@ (8003504 <quadEncoder_Init+0xe4>)
 80034e8:	f005 fc42 	bl	8008d70 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 80034ec:	2104      	movs	r1, #4
 80034ee:	4805      	ldr	r0, [pc, #20]	@ (8003504 <quadEncoder_Init+0xe4>)
 80034f0:	f005 fc3e 	bl	8008d70 <HAL_TIM_Encoder_Start>
}
 80034f4:	bf00      	nop
 80034f6:	3728      	adds	r7, #40	@ 0x28
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	20004dc4 	.word	0x20004dc4
 8003500:	40010000 	.word	0x40010000
 8003504:	20004e0c 	.word	0x20004e0c

08003508 <quadEncoder_PosCalcL>:
//================================================================
//		POSITION LEFT CALC
//================================================================

void quadEncoder_PosCalcL(int* AngPos)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM1->CNT;
 8003514:	4b0c      	ldr	r3, [pc, #48]	@ (8003548 <quadEncoder_PosCalcL+0x40>)
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3304      	adds	r3, #4
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f641 129b 	movw	r2, #6555	@ 0x199b
 800352a:	fb02 f303 	mul.w	r3, r2, r3
 800352e:	4a07      	ldr	r2, [pc, #28]	@ (800354c <quadEncoder_PosCalcL+0x44>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	099b      	lsrs	r3, r3, #6
 8003536:	461a      	mov	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	601a      	str	r2, [r3, #0]
}
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	40010000 	.word	0x40010000
 800354c:	10624dd3 	.word	0x10624dd3

08003550 <quadEncoder_PosCalcR>:
//================================================================
//		POSITION RIGHT CALC
//================================================================

void quadEncoder_PosCalcR(int* AngPos)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM2->CNT;
 800355c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f641 129b 	movw	r2, #6555	@ 0x199b
 8003574:	fb02 f303 	mul.w	r3, r2, r3
 8003578:	4a06      	ldr	r2, [pc, #24]	@ (8003594 <quadEncoder_PosCalcR+0x44>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	099b      	lsrs	r3, r3, #6
 8003580:	461a      	mov	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	601a      	str	r2, [r3, #0]
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	10624dd3 	.word	0x10624dd3

08003598 <quadEncoder_GetSpeedL>:
//		SPEED LEFT
//--> must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedL(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedL=0;

	quadEncoder_PosCalcL(AngPos);
 800359c:	4824      	ldr	r0, [pc, #144]	@ (8003630 <quadEncoder_GetSpeedL+0x98>)
 800359e:	f7ff ffb3 	bl	8003508 <quadEncoder_PosCalcL>
	SpeedL = AngPos[0] - AngPos[1];
 80035a2:	4b23      	ldr	r3, [pc, #140]	@ (8003630 <quadEncoder_GetSpeedL+0x98>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	4b21      	ldr	r3, [pc, #132]	@ (8003630 <quadEncoder_GetSpeedL+0x98>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	b21a      	sxth	r2, r3
 80035b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003634 <quadEncoder_GetSpeedL+0x9c>)
 80035b6:	801a      	strh	r2, [r3, #0]
	if (SpeedL >= 0)
 80035b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003634 <quadEncoder_GetSpeedL+0x9c>)
 80035ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	db10      	blt.n	80035e4 <quadEncoder_GetSpeedL+0x4c>
	{
		if (SpeedL >= HALF_MAX_COUNT)
 80035c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003634 <quadEncoder_GetSpeedL+0x9c>)
 80035c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035cc:	db1a      	blt.n	8003604 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL - MAX_COUNT;
 80035ce:	4b19      	ldr	r3, [pc, #100]	@ (8003634 <quadEncoder_GetSpeedL+0x9c>)
 80035d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80035da:	b29b      	uxth	r3, r3
 80035dc:	b21a      	sxth	r2, r3
 80035de:	4b15      	ldr	r3, [pc, #84]	@ (8003634 <quadEncoder_GetSpeedL+0x9c>)
 80035e0:	801a      	strh	r2, [r3, #0]
 80035e2:	e00f      	b.n	8003604 <quadEncoder_GetSpeedL+0x6c>
			}
	}
	else
	{
		if (SpeedL < -HALF_MAX_COUNT)
 80035e4:	4b13      	ldr	r3, [pc, #76]	@ (8003634 <quadEncoder_GetSpeedL+0x9c>)
 80035e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ea:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 80035ee:	da09      	bge.n	8003604 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL + MAX_COUNT;
 80035f0:	4b10      	ldr	r3, [pc, #64]	@ (8003634 <quadEncoder_GetSpeedL+0x9c>)
 80035f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	b21a      	sxth	r2, r3
 8003600:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <quadEncoder_GetSpeedL+0x9c>)
 8003602:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedL=(SpeedL*60*1000)/(32767*TE_ms);
 8003604:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <quadEncoder_GetSpeedL+0x9c>)
 8003606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800360a:	461a      	mov	r2, r3
 800360c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	4a08      	ldr	r2, [pc, #32]	@ (8003638 <quadEncoder_GetSpeedL+0xa0>)
 8003616:	fb82 1203 	smull	r1, r2, r2, r3
 800361a:	1412      	asrs	r2, r2, #16
 800361c:	17db      	asrs	r3, r3, #31
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	b21a      	sxth	r2, r3
 8003622:	4b04      	ldr	r3, [pc, #16]	@ (8003634 <quadEncoder_GetSpeedL+0x9c>)
 8003624:	801a      	strh	r2, [r3, #0]
	return SpeedL;
 8003626:	4b03      	ldr	r3, [pc, #12]	@ (8003634 <quadEncoder_GetSpeedL+0x9c>)
 8003628:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20004e5c 	.word	0x20004e5c
 8003634:	20004e64 	.word	0x20004e64
 8003638:	66673335 	.word	0x66673335

0800363c <quadEncoder_GetSpeedR>:
//		SPEED RIGHT
//-->  must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedR(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedR=0;


	quadEncoder_PosCalcR(AngPos);
 8003640:	4824      	ldr	r0, [pc, #144]	@ (80036d4 <quadEncoder_GetSpeedR+0x98>)
 8003642:	f7ff ff85 	bl	8003550 <quadEncoder_PosCalcR>
	SpeedR = AngPos[0] - AngPos[1];
 8003646:	4b23      	ldr	r3, [pc, #140]	@ (80036d4 <quadEncoder_GetSpeedR+0x98>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	b29a      	uxth	r2, r3
 800364c:	4b21      	ldr	r3, [pc, #132]	@ (80036d4 <quadEncoder_GetSpeedR+0x98>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	b29b      	uxth	r3, r3
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	b29b      	uxth	r3, r3
 8003656:	b21a      	sxth	r2, r3
 8003658:	4b1f      	ldr	r3, [pc, #124]	@ (80036d8 <quadEncoder_GetSpeedR+0x9c>)
 800365a:	801a      	strh	r2, [r3, #0]
	if (SpeedR >= 0)
 800365c:	4b1e      	ldr	r3, [pc, #120]	@ (80036d8 <quadEncoder_GetSpeedR+0x9c>)
 800365e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003662:	2b00      	cmp	r3, #0
 8003664:	db10      	blt.n	8003688 <quadEncoder_GetSpeedR+0x4c>
	{
		if (SpeedR >= HALF_MAX_COUNT)
 8003666:	4b1c      	ldr	r3, [pc, #112]	@ (80036d8 <quadEncoder_GetSpeedR+0x9c>)
 8003668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800366c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003670:	db1a      	blt.n	80036a8 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR - MAX_COUNT;
 8003672:	4b19      	ldr	r3, [pc, #100]	@ (80036d8 <quadEncoder_GetSpeedR+0x9c>)
 8003674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003678:	b29b      	uxth	r3, r3
 800367a:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800367e:	b29b      	uxth	r3, r3
 8003680:	b21a      	sxth	r2, r3
 8003682:	4b15      	ldr	r3, [pc, #84]	@ (80036d8 <quadEncoder_GetSpeedR+0x9c>)
 8003684:	801a      	strh	r2, [r3, #0]
 8003686:	e00f      	b.n	80036a8 <quadEncoder_GetSpeedR+0x6c>
			}
	}
	else
	{
		if (SpeedR < -HALF_MAX_COUNT)
 8003688:	4b13      	ldr	r3, [pc, #76]	@ (80036d8 <quadEncoder_GetSpeedR+0x9c>)
 800368a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800368e:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8003692:	da09      	bge.n	80036a8 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR + MAX_COUNT;
 8003694:	4b10      	ldr	r3, [pc, #64]	@ (80036d8 <quadEncoder_GetSpeedR+0x9c>)
 8003696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800369a:	b29b      	uxth	r3, r3
 800369c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	b21a      	sxth	r2, r3
 80036a4:	4b0c      	ldr	r3, [pc, #48]	@ (80036d8 <quadEncoder_GetSpeedR+0x9c>)
 80036a6:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedR=(SpeedR*60*1000)/(32767*TE_ms);
 80036a8:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <quadEncoder_GetSpeedR+0x9c>)
 80036aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ae:	461a      	mov	r2, r3
 80036b0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	4a08      	ldr	r2, [pc, #32]	@ (80036dc <quadEncoder_GetSpeedR+0xa0>)
 80036ba:	fb82 1203 	smull	r1, r2, r2, r3
 80036be:	1412      	asrs	r2, r2, #16
 80036c0:	17db      	asrs	r3, r3, #31
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	b21a      	sxth	r2, r3
 80036c6:	4b04      	ldr	r3, [pc, #16]	@ (80036d8 <quadEncoder_GetSpeedR+0x9c>)
 80036c8:	801a      	strh	r2, [r3, #0]
	return SpeedR;
 80036ca:	4b03      	ldr	r3, [pc, #12]	@ (80036d8 <quadEncoder_GetSpeedR+0x9c>)
 80036cc:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20004e68 	.word	0x20004e68
 80036d8:	20004e70 	.word	0x20004e70
 80036dc:	66673335 	.word	0x66673335

080036e0 <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 80036e4:	4b11      	ldr	r3, [pc, #68]	@ (800372c <quadEncoder_CallbackIndexL+0x4c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d105      	bne.n	80036fe <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 80036f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003730 <quadEncoder_CallbackIndexL+0x50>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003730 <quadEncoder_CallbackIndexL+0x50>)
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	e004      	b.n	8003708 <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 80036fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003730 <quadEncoder_CallbackIndexL+0x50>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3301      	adds	r3, #1
 8003704:	4a0a      	ldr	r2, [pc, #40]	@ (8003730 <quadEncoder_CallbackIndexL+0x50>)
 8003706:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 8003708:	4b08      	ldr	r3, [pc, #32]	@ (800372c <quadEncoder_CallbackIndexL+0x4c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2200      	movs	r2, #0
 800370e:	625a      	str	r2, [r3, #36]	@ 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8003710:	2100      	movs	r1, #0
 8003712:	4806      	ldr	r0, [pc, #24]	@ (800372c <quadEncoder_CallbackIndexL+0x4c>)
 8003714:	f005 fb2c 	bl	8008d70 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8003718:	2104      	movs	r1, #4
 800371a:	4804      	ldr	r0, [pc, #16]	@ (800372c <quadEncoder_CallbackIndexL+0x4c>)
 800371c:	f005 fb28 	bl	8008d70 <HAL_TIM_Encoder_Start>

				Left_first_index_reached = 1;
 8003720:	4b04      	ldr	r3, [pc, #16]	@ (8003734 <quadEncoder_CallbackIndexL+0x54>)
 8003722:	2201      	movs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]

}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20004dc4 	.word	0x20004dc4
 8003730:	20004e54 	.word	0x20004e54
 8003734:	20004d40 	.word	0x20004d40

08003738 <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 800373c:	4b11      	ldr	r3, [pc, #68]	@ (8003784 <quadEncoder_CallbackIndexR+0x4c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b10      	cmp	r3, #16
 8003748:	d105      	bne.n	8003756 <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 800374a:	4b0f      	ldr	r3, [pc, #60]	@ (8003788 <quadEncoder_CallbackIndexR+0x50>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3b01      	subs	r3, #1
 8003750:	4a0d      	ldr	r2, [pc, #52]	@ (8003788 <quadEncoder_CallbackIndexR+0x50>)
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	e004      	b.n	8003760 <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 8003756:	4b0c      	ldr	r3, [pc, #48]	@ (8003788 <quadEncoder_CallbackIndexR+0x50>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3301      	adds	r3, #1
 800375c:	4a0a      	ldr	r2, [pc, #40]	@ (8003788 <quadEncoder_CallbackIndexR+0x50>)
 800375e:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 8003760:	4b08      	ldr	r3, [pc, #32]	@ (8003784 <quadEncoder_CallbackIndexR+0x4c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2200      	movs	r2, #0
 8003766:	625a      	str	r2, [r3, #36]	@ 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8003768:	2100      	movs	r1, #0
 800376a:	4806      	ldr	r0, [pc, #24]	@ (8003784 <quadEncoder_CallbackIndexR+0x4c>)
 800376c:	f005 fb00 	bl	8008d70 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8003770:	2104      	movs	r1, #4
 8003772:	4804      	ldr	r0, [pc, #16]	@ (8003784 <quadEncoder_CallbackIndexR+0x4c>)
 8003774:	f005 fafc 	bl	8008d70 <HAL_TIM_Encoder_Start>

				Right_first_index_reached = 1;
 8003778:	4b04      	ldr	r3, [pc, #16]	@ (800378c <quadEncoder_CallbackIndexR+0x54>)
 800377a:	2201      	movs	r2, #1
 800377c:	601a      	str	r2, [r3, #0]

}
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20004e0c 	.word	0x20004e0c
 8003788:	20004e58 	.word	0x20004e58
 800378c:	20004d44 	.word	0x20004d44

08003790 <HAL_MspInit>:
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);
void HAL_GPIO_MspInit(void);

void HAL_MspInit(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	4b33      	ldr	r3, [pc, #204]	@ (8003868 <HAL_MspInit+0xd8>)
 800379c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379e:	4a32      	ldr	r2, [pc, #200]	@ (8003868 <HAL_MspInit+0xd8>)
 80037a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037a6:	4b30      	ldr	r3, [pc, #192]	@ (8003868 <HAL_MspInit+0xd8>)
 80037a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003868 <HAL_MspInit+0xd8>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003868 <HAL_MspInit+0xd8>)
 80037bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037c2:	4b29      	ldr	r3, [pc, #164]	@ (8003868 <HAL_MspInit+0xd8>)
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	4b25      	ldr	r3, [pc, #148]	@ (8003868 <HAL_MspInit+0xd8>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d6:	4a24      	ldr	r2, [pc, #144]	@ (8003868 <HAL_MspInit+0xd8>)
 80037d8:	f043 0304 	orr.w	r3, r3, #4
 80037dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037de:	4b22      	ldr	r3, [pc, #136]	@ (8003868 <HAL_MspInit+0xd8>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003868 <HAL_MspInit+0xd8>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	4a1d      	ldr	r2, [pc, #116]	@ (8003868 <HAL_MspInit+0xd8>)
 80037f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003868 <HAL_MspInit+0xd8>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	607b      	str	r3, [r7, #4]
 800380a:	4b17      	ldr	r3, [pc, #92]	@ (8003868 <HAL_MspInit+0xd8>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380e:	4a16      	ldr	r2, [pc, #88]	@ (8003868 <HAL_MspInit+0xd8>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6313      	str	r3, [r2, #48]	@ 0x30
 8003816:	4b14      	ldr	r3, [pc, #80]	@ (8003868 <HAL_MspInit+0xd8>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	607b      	str	r3, [r7, #4]
 8003820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	603b      	str	r3, [r7, #0]
 8003826:	4b10      	ldr	r3, [pc, #64]	@ (8003868 <HAL_MspInit+0xd8>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	4a0f      	ldr	r2, [pc, #60]	@ (8003868 <HAL_MspInit+0xd8>)
 800382c:	f043 0302 	orr.w	r3, r3, #2
 8003830:	6313      	str	r3, [r2, #48]	@ 0x30
 8003832:	4b0d      	ldr	r3, [pc, #52]	@ (8003868 <HAL_MspInit+0xd8>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800383e:	2200      	movs	r2, #0
 8003840:	210f      	movs	r1, #15
 8003842:	f06f 0001 	mvn.w	r0, #1
 8003846:	f001 f975 	bl	8004b34 <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 800384a:	f000 f8a3 	bl	8003994 <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 800384e:	f000 f823 	bl	8003898 <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 8003852:	f000 f861 	bl	8003918 <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 8003856:	f000 f8ff 	bl	8003a58 <HAL_adcir_MspInit>
  HAL_GPIO_MspInit();
 800385a:	f000 f807 	bl	800386c <HAL_GPIO_MspInit>

}
 800385e:	bf00      	nop
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800

0800386c <HAL_GPIO_MspInit>:
/******************************************************************
			GPIO : contrôle période d'échantillonage
GPIO OUTPUT	-->	PB4
******************************************************************/
void HAL_GPIO_MspInit(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003872:	2310      	movs	r3, #16
 8003874:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // hal_gpio.h
 8003876:	2301      	movs	r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800387e:	2301      	movs	r3, #1
 8003880:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003882:	1d3b      	adds	r3, r7, #4
 8003884:	4619      	mov	r1, r3
 8003886:	4803      	ldr	r0, [pc, #12]	@ (8003894 <HAL_GPIO_MspInit+0x28>)
 8003888:	f001 fd8e 	bl	80053a8 <HAL_GPIO_Init>

}
 800388c:	bf00      	nop
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40020400 	.word	0x40020400

08003898 <HAL_Encoder_Timer1_MspInit>:
PWM1/1	-->	PA8		-- Encodeur Voie A
PWM1/2	--> PA9		-- Encodeur Voie B
EXTI1	--> PB10		-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	603b      	str	r3, [r7, #0]
 80038a2:	4b1a      	ldr	r3, [pc, #104]	@ (800390c <HAL_Encoder_Timer1_MspInit+0x74>)
 80038a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a6:	4a19      	ldr	r2, [pc, #100]	@ (800390c <HAL_Encoder_Timer1_MspInit+0x74>)
 80038a8:	f043 0301 	orr.w	r3, r3, #1
 80038ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80038ae:	4b17      	ldr	r3, [pc, #92]	@ (800390c <HAL_Encoder_Timer1_MspInit+0x74>)
 80038b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	603b      	str	r3, [r7, #0]
 80038b8:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 80038ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80038be:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 80038c0:	2302      	movs	r3, #2
 80038c2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038c4:	2301      	movs	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80038c8:	2301      	movs	r3, #1
 80038ca:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 80038cc:	2301      	movs	r3, #1
 80038ce:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d0:	1d3b      	adds	r3, r7, #4
 80038d2:	4619      	mov	r1, r3
 80038d4:	480e      	ldr	r0, [pc, #56]	@ (8003910 <HAL_Encoder_Timer1_MspInit+0x78>)
 80038d6:	f001 fd67 	bl	80053a8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80038da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038de:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80038e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80038e4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ea:	1d3b      	adds	r3, r7, #4
 80038ec:	4619      	mov	r1, r3
 80038ee:	4809      	ldr	r0, [pc, #36]	@ (8003914 <HAL_Encoder_Timer1_MspInit+0x7c>)
 80038f0:	f001 fd5a 	bl	80053a8 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 80038f4:	2200      	movs	r2, #0
 80038f6:	2107      	movs	r1, #7
 80038f8:	2028      	movs	r0, #40	@ 0x28
 80038fa:	f001 f91b 	bl	8004b34 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80038fe:	2028      	movs	r0, #40	@ 0x28
 8003900:	f001 f934 	bl	8004b6c <HAL_NVIC_EnableIRQ>
}
 8003904:	bf00      	nop
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40023800 	.word	0x40023800
 8003910:	40020000 	.word	0x40020000
 8003914:	40020400 	.word	0x40020400

08003918 <HAL_Encoder_Timer2_MspInit>:
PWM2/1	-->	PA0		-- Encodeur Voie A
PWM2/2	--> PA1		-- Encodeur Voie B
EXTI 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE();
 800391e:	2300      	movs	r3, #0
 8003920:	603b      	str	r3, [r7, #0]
 8003922:	4b19      	ldr	r3, [pc, #100]	@ (8003988 <HAL_Encoder_Timer2_MspInit+0x70>)
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	4a18      	ldr	r2, [pc, #96]	@ (8003988 <HAL_Encoder_Timer2_MspInit+0x70>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6413      	str	r3, [r2, #64]	@ 0x40
 800392e:	4b16      	ldr	r3, [pc, #88]	@ (8003988 <HAL_Encoder_Timer2_MspInit+0x70>)
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	603b      	str	r3, [r7, #0]
 8003938:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800393a:	2303      	movs	r3, #3
 800393c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 800393e:	2302      	movs	r3, #2
 8003940:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003942:	2301      	movs	r3, #1
 8003944:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003946:	2301      	movs	r3, #1
 8003948:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 800394a:	2301      	movs	r3, #1
 800394c:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394e:	1d3b      	adds	r3, r7, #4
 8003950:	4619      	mov	r1, r3
 8003952:	480e      	ldr	r0, [pc, #56]	@ (800398c <HAL_Encoder_Timer2_MspInit+0x74>)
 8003954:	f001 fd28 	bl	80053a8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003958:	2301      	movs	r3, #1
 800395a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800395c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003960:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003966:	1d3b      	adds	r3, r7, #4
 8003968:	4619      	mov	r1, r3
 800396a:	4809      	ldr	r0, [pc, #36]	@ (8003990 <HAL_Encoder_Timer2_MspInit+0x78>)
 800396c:	f001 fd1c 	bl	80053a8 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 8003970:	2200      	movs	r2, #0
 8003972:	2106      	movs	r1, #6
 8003974:	2006      	movs	r0, #6
 8003976:	f001 f8dd 	bl	8004b34 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800397a:	2006      	movs	r0, #6
 800397c:	f001 f8f6 	bl	8004b6c <HAL_NVIC_EnableIRQ>
}
 8003980:	bf00      	nop
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40023800 	.word	0x40023800
 800398c:	40020000 	.word	0x40020000
 8003990:	40020800 	.word	0x40020800

08003994 <HAL_PWM_Timer3_MspInit>:
PA6 --> PWM3/1
PC7 --> PWM3/2
PB3 --> ENABLE MOTEUR (actif état Bas)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a48 <HAL_PWM_Timer3_MspInit+0xb4>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a2:	4a29      	ldr	r2, [pc, #164]	@ (8003a48 <HAL_PWM_Timer3_MspInit+0xb4>)
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039aa:	4b27      	ldr	r3, [pc, #156]	@ (8003a48 <HAL_PWM_Timer3_MspInit+0xb4>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80039b6:	2340      	movs	r3, #64	@ 0x40
 80039b8:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ba:	2302      	movs	r3, #2
 80039bc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039be:	2301      	movs	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80039c2:	2301      	movs	r3, #1
 80039c4:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80039c6:	2302      	movs	r3, #2
 80039c8:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ca:	1d3b      	adds	r3, r7, #4
 80039cc:	4619      	mov	r1, r3
 80039ce:	481f      	ldr	r0, [pc, #124]	@ (8003a4c <HAL_PWM_Timer3_MspInit+0xb8>)
 80039d0:	f001 fcea 	bl	80053a8 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80039d4:	2380      	movs	r3, #128	@ 0x80
 80039d6:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d8:	2302      	movs	r3, #2
 80039da:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039dc:	2301      	movs	r3, #1
 80039de:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 80039e0:	2301      	movs	r3, #1
 80039e2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 80039e4:	2302      	movs	r3, #2
 80039e6:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039e8:	1d3b      	adds	r3, r7, #4
 80039ea:	4619      	mov	r1, r3
 80039ec:	4818      	ldr	r0, [pc, #96]	@ (8003a50 <HAL_PWM_Timer3_MspInit+0xbc>)
 80039ee:	f001 fcdb 	bl	80053a8 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pull = GPIO_NOPULL;

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);*/

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039f2:	2308      	movs	r3, #8
 80039f4:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80039fe:	2302      	movs	r3, #2
 8003a00:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a02:	1d3b      	adds	r3, r7, #4
 8003a04:	4619      	mov	r1, r3
 8003a06:	4813      	ldr	r0, [pc, #76]	@ (8003a54 <HAL_PWM_Timer3_MspInit+0xc0>)
 8003a08:	f001 fcce 	bl	80053a8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	2108      	movs	r1, #8
 8003a10:	4810      	ldr	r0, [pc, #64]	@ (8003a54 <HAL_PWM_Timer3_MspInit+0xc0>)
 8003a12:	f001 fe4d 	bl	80056b0 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a1a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003a24:	2302      	movs	r3, #2
 8003a26:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4807      	ldr	r0, [pc, #28]	@ (8003a4c <HAL_PWM_Timer3_MspInit+0xb8>)
 8003a2e:	f001 fcbb 	bl	80053a8 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8003a32:	2201      	movs	r2, #1
 8003a34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a38:	4804      	ldr	r0, [pc, #16]	@ (8003a4c <HAL_PWM_Timer3_MspInit+0xb8>)
 8003a3a:	f001 fe39 	bl	80056b0 <HAL_GPIO_WritePin>




}
 8003a3e:	bf00      	nop
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40020000 	.word	0x40020000
 8003a50:	40020800 	.word	0x40020800
 8003a54:	40020400 	.word	0x40020400

08003a58 <HAL_adcir_MspInit>:
ADC1_4	--> PA4
ADC1_8	--> PB0
http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	603b      	str	r3, [r7, #0]
 8003a62:	4b13      	ldr	r3, [pc, #76]	@ (8003ab0 <HAL_adcir_MspInit+0x58>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a66:	4a12      	ldr	r2, [pc, #72]	@ (8003ab0 <HAL_adcir_MspInit+0x58>)
 8003a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a6e:	4b10      	ldr	r3, [pc, #64]	@ (8003ab0 <HAL_adcir_MspInit+0x58>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 8003a7a:	2310      	movs	r3, #16
 8003a7c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	4619      	mov	r1, r3
 8003a8a:	480a      	ldr	r0, [pc, #40]	@ (8003ab4 <HAL_adcir_MspInit+0x5c>)
 8003a8c:	f001 fc8c 	bl	80053a8 <HAL_GPIO_Init>


	  GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 8003a90:	2301      	movs	r3, #1
 8003a92:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a94:	2303      	movs	r3, #3
 8003a96:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4805      	ldr	r0, [pc, #20]	@ (8003ab8 <HAL_adcir_MspInit+0x60>)
 8003aa2:	f001 fc81 	bl	80053a8 <HAL_GPIO_Init>

}
 8003aa6:	bf00      	nop
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40020000 	.word	0x40020000
 8003ab8:	40020400 	.word	0x40020400

08003abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
******************************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	@ 0x28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	60da      	str	r2, [r3, #12]
 8003ad2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a21      	ldr	r2, [pc, #132]	@ (8003b60 <HAL_I2C_MspInit+0xa4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d13c      	bne.n	8003b58 <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	4b20      	ldr	r3, [pc, #128]	@ (8003b64 <HAL_I2C_MspInit+0xa8>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b64 <HAL_I2C_MspInit+0xa8>)
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aee:	4b1d      	ldr	r3, [pc, #116]	@ (8003b64 <HAL_I2C_MspInit+0xa8>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003afa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b00:	2312      	movs	r3, #18
 8003b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b0c:	2304      	movs	r3, #4
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	4619      	mov	r1, r3
 8003b16:	4814      	ldr	r0, [pc, #80]	@ (8003b68 <HAL_I2C_MspInit+0xac>)
 8003b18:	f001 fc46 	bl	80053a8 <HAL_GPIO_Init>

    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	4b10      	ldr	r3, [pc, #64]	@ (8003b64 <HAL_I2C_MspInit+0xa8>)
 8003b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b24:	4a0f      	ldr	r2, [pc, #60]	@ (8003b64 <HAL_I2C_MspInit+0xa8>)
 8003b26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003b2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <HAL_I2C_MspInit+0xa8>)
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	2020      	movs	r0, #32
 8003b3e:	f000 fff9 	bl	8004b34 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003b42:	2020      	movs	r0, #32
 8003b44:	f001 f812 	bl	8004b6c <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 8003b48:	2200      	movs	r2, #0
 8003b4a:	210b      	movs	r1, #11
 8003b4c:	201f      	movs	r0, #31
 8003b4e:	f000 fff1 	bl	8004b34 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003b52:	201f      	movs	r0, #31
 8003b54:	f001 f80a 	bl	8004b6c <HAL_NVIC_EnableIRQ>
  }

}
 8003b58:	bf00      	nop
 8003b5a:	3728      	adds	r7, #40	@ 0x28
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40005400 	.word	0x40005400
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40020400 	.word	0x40020400

08003b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
******************************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08c      	sub	sp, #48	@ 0x30
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	f107 031c 	add.w	r3, r7, #28
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4aa2      	ldr	r2, [pc, #648]	@ (8003e14 <HAL_UART_MspInit+0x2a8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	f040 80a5 	bne.w	8003cda <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	4ba0      	ldr	r3, [pc, #640]	@ (8003e18 <HAL_UART_MspInit+0x2ac>)
 8003b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b98:	4a9f      	ldr	r2, [pc, #636]	@ (8003e18 <HAL_UART_MspInit+0x2ac>)
 8003b9a:	f043 0310 	orr.w	r3, r3, #16
 8003b9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ba0:	4b9d      	ldr	r3, [pc, #628]	@ (8003e18 <HAL_UART_MspInit+0x2ac>)
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	4b99      	ldr	r3, [pc, #612]	@ (8003e18 <HAL_UART_MspInit+0x2ac>)
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb4:	4a98      	ldr	r2, [pc, #608]	@ (8003e18 <HAL_UART_MspInit+0x2ac>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bbc:	4b96      	ldr	r3, [pc, #600]	@ (8003e18 <HAL_UART_MspInit+0x2ac>)
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003bc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bda:	2307      	movs	r3, #7
 8003bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bde:	f107 031c 	add.w	r3, r7, #28
 8003be2:	4619      	mov	r1, r3
 8003be4:	488d      	ldr	r0, [pc, #564]	@ (8003e1c <HAL_UART_MspInit+0x2b0>)
 8003be6:	f001 fbdf 	bl	80053a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003bea:	2340      	movs	r3, #64	@ 0x40
 8003bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bee:	2302      	movs	r3, #2
 8003bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003bfa:	2307      	movs	r3, #7
 8003bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfe:	f107 031c 	add.w	r3, r7, #28
 8003c02:	4619      	mov	r1, r3
 8003c04:	4886      	ldr	r0, [pc, #536]	@ (8003e20 <HAL_UART_MspInit+0x2b4>)
 8003c06:	f001 fbcf 	bl	80053a8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003c0a:	4b86      	ldr	r3, [pc, #536]	@ (8003e24 <HAL_UART_MspInit+0x2b8>)
 8003c0c:	4a86      	ldr	r2, [pc, #536]	@ (8003e28 <HAL_UART_MspInit+0x2bc>)
 8003c0e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003c10:	4b84      	ldr	r3, [pc, #528]	@ (8003e24 <HAL_UART_MspInit+0x2b8>)
 8003c12:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c16:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c18:	4b82      	ldr	r3, [pc, #520]	@ (8003e24 <HAL_UART_MspInit+0x2b8>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c1e:	4b81      	ldr	r3, [pc, #516]	@ (8003e24 <HAL_UART_MspInit+0x2b8>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c24:	4b7f      	ldr	r3, [pc, #508]	@ (8003e24 <HAL_UART_MspInit+0x2b8>)
 8003c26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c2a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c2c:	4b7d      	ldr	r3, [pc, #500]	@ (8003e24 <HAL_UART_MspInit+0x2b8>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c32:	4b7c      	ldr	r3, [pc, #496]	@ (8003e24 <HAL_UART_MspInit+0x2b8>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003c38:	4b7a      	ldr	r3, [pc, #488]	@ (8003e24 <HAL_UART_MspInit+0x2b8>)
 8003c3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003c40:	4b78      	ldr	r3, [pc, #480]	@ (8003e24 <HAL_UART_MspInit+0x2b8>)
 8003c42:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003c46:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c48:	4b76      	ldr	r3, [pc, #472]	@ (8003e24 <HAL_UART_MspInit+0x2b8>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003c4e:	4875      	ldr	r0, [pc, #468]	@ (8003e24 <HAL_UART_MspInit+0x2b8>)
 8003c50:	f000 ff9a 	bl	8004b88 <HAL_DMA_Init>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8003c5a:	f7ff f9d5 	bl	8003008 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a70      	ldr	r2, [pc, #448]	@ (8003e24 <HAL_UART_MspInit+0x2b8>)
 8003c62:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c64:	4a6f      	ldr	r2, [pc, #444]	@ (8003e24 <HAL_UART_MspInit+0x2b8>)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003c6a:	4b70      	ldr	r3, [pc, #448]	@ (8003e2c <HAL_UART_MspInit+0x2c0>)
 8003c6c:	4a70      	ldr	r2, [pc, #448]	@ (8003e30 <HAL_UART_MspInit+0x2c4>)
 8003c6e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003c70:	4b6e      	ldr	r3, [pc, #440]	@ (8003e2c <HAL_UART_MspInit+0x2c0>)
 8003c72:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c76:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c78:	4b6c      	ldr	r3, [pc, #432]	@ (8003e2c <HAL_UART_MspInit+0x2c0>)
 8003c7a:	2240      	movs	r2, #64	@ 0x40
 8003c7c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c7e:	4b6b      	ldr	r3, [pc, #428]	@ (8003e2c <HAL_UART_MspInit+0x2c0>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c84:	4b69      	ldr	r3, [pc, #420]	@ (8003e2c <HAL_UART_MspInit+0x2c0>)
 8003c86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c8c:	4b67      	ldr	r3, [pc, #412]	@ (8003e2c <HAL_UART_MspInit+0x2c0>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c92:	4b66      	ldr	r3, [pc, #408]	@ (8003e2c <HAL_UART_MspInit+0x2c0>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003c98:	4b64      	ldr	r3, [pc, #400]	@ (8003e2c <HAL_UART_MspInit+0x2c0>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003c9e:	4b63      	ldr	r3, [pc, #396]	@ (8003e2c <HAL_UART_MspInit+0x2c0>)
 8003ca0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003ca4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ca6:	4b61      	ldr	r3, [pc, #388]	@ (8003e2c <HAL_UART_MspInit+0x2c0>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003cac:	485f      	ldr	r0, [pc, #380]	@ (8003e2c <HAL_UART_MspInit+0x2c0>)
 8003cae:	f000 ff6b 	bl	8004b88 <HAL_DMA_Init>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8003cb8:	f7ff f9a6 	bl	8003008 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a5b      	ldr	r2, [pc, #364]	@ (8003e2c <HAL_UART_MspInit+0x2c0>)
 8003cc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cc2:	4a5a      	ldr	r2, [pc, #360]	@ (8003e2c <HAL_UART_MspInit+0x2c0>)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2105      	movs	r1, #5
 8003ccc:	2025      	movs	r0, #37	@ 0x25
 8003cce:	f000 ff31 	bl	8004b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003cd2:	2025      	movs	r0, #37	@ 0x25
 8003cd4:	f000 ff4a 	bl	8004b6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003cd8:	e098      	b.n	8003e0c <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a55      	ldr	r2, [pc, #340]	@ (8003e34 <HAL_UART_MspInit+0x2c8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	f040 8093 	bne.w	8003e0c <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	4b4b      	ldr	r3, [pc, #300]	@ (8003e18 <HAL_UART_MspInit+0x2ac>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	4a4a      	ldr	r2, [pc, #296]	@ (8003e18 <HAL_UART_MspInit+0x2ac>)
 8003cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cf6:	4b48      	ldr	r3, [pc, #288]	@ (8003e18 <HAL_UART_MspInit+0x2ac>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	613b      	str	r3, [r7, #16]
 8003d00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	4b44      	ldr	r3, [pc, #272]	@ (8003e18 <HAL_UART_MspInit+0x2ac>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	4a43      	ldr	r2, [pc, #268]	@ (8003e18 <HAL_UART_MspInit+0x2ac>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d12:	4b41      	ldr	r3, [pc, #260]	@ (8003e18 <HAL_UART_MspInit+0x2ac>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003d1e:	230c      	movs	r3, #12
 8003d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d22:	2302      	movs	r3, #2
 8003d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d2e:	2307      	movs	r3, #7
 8003d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d32:	f107 031c 	add.w	r3, r7, #28
 8003d36:	4619      	mov	r1, r3
 8003d38:	4838      	ldr	r0, [pc, #224]	@ (8003e1c <HAL_UART_MspInit+0x2b0>)
 8003d3a:	f001 fb35 	bl	80053a8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003d3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e38 <HAL_UART_MspInit+0x2cc>)
 8003d40:	4a3e      	ldr	r2, [pc, #248]	@ (8003e3c <HAL_UART_MspInit+0x2d0>)
 8003d42:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003d44:	4b3c      	ldr	r3, [pc, #240]	@ (8003e38 <HAL_UART_MspInit+0x2cc>)
 8003d46:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003d4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e38 <HAL_UART_MspInit+0x2cc>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d52:	4b39      	ldr	r3, [pc, #228]	@ (8003e38 <HAL_UART_MspInit+0x2cc>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d58:	4b37      	ldr	r3, [pc, #220]	@ (8003e38 <HAL_UART_MspInit+0x2cc>)
 8003d5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d5e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d60:	4b35      	ldr	r3, [pc, #212]	@ (8003e38 <HAL_UART_MspInit+0x2cc>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d66:	4b34      	ldr	r3, [pc, #208]	@ (8003e38 <HAL_UART_MspInit+0x2cc>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003d6c:	4b32      	ldr	r3, [pc, #200]	@ (8003e38 <HAL_UART_MspInit+0x2cc>)
 8003d6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d72:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003d74:	4b30      	ldr	r3, [pc, #192]	@ (8003e38 <HAL_UART_MspInit+0x2cc>)
 8003d76:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003d7a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003e38 <HAL_UART_MspInit+0x2cc>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003d82:	482d      	ldr	r0, [pc, #180]	@ (8003e38 <HAL_UART_MspInit+0x2cc>)
 8003d84:	f000 ff00 	bl	8004b88 <HAL_DMA_Init>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_UART_MspInit+0x226>
      Error_Handler();
 8003d8e:	f7ff f93b 	bl	8003008 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a28      	ldr	r2, [pc, #160]	@ (8003e38 <HAL_UART_MspInit+0x2cc>)
 8003d96:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d98:	4a27      	ldr	r2, [pc, #156]	@ (8003e38 <HAL_UART_MspInit+0x2cc>)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003d9e:	4b28      	ldr	r3, [pc, #160]	@ (8003e40 <HAL_UART_MspInit+0x2d4>)
 8003da0:	4a28      	ldr	r2, [pc, #160]	@ (8003e44 <HAL_UART_MspInit+0x2d8>)
 8003da2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003da4:	4b26      	ldr	r3, [pc, #152]	@ (8003e40 <HAL_UART_MspInit+0x2d4>)
 8003da6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003daa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dac:	4b24      	ldr	r3, [pc, #144]	@ (8003e40 <HAL_UART_MspInit+0x2d4>)
 8003dae:	2240      	movs	r2, #64	@ 0x40
 8003db0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003db2:	4b23      	ldr	r3, [pc, #140]	@ (8003e40 <HAL_UART_MspInit+0x2d4>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003db8:	4b21      	ldr	r3, [pc, #132]	@ (8003e40 <HAL_UART_MspInit+0x2d4>)
 8003dba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dbe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e40 <HAL_UART_MspInit+0x2d4>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e40 <HAL_UART_MspInit+0x2d4>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8003e40 <HAL_UART_MspInit+0x2d4>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8003e40 <HAL_UART_MspInit+0x2d4>)
 8003dd4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003dd8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003dda:	4b19      	ldr	r3, [pc, #100]	@ (8003e40 <HAL_UART_MspInit+0x2d4>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003de0:	4817      	ldr	r0, [pc, #92]	@ (8003e40 <HAL_UART_MspInit+0x2d4>)
 8003de2:	f000 fed1 	bl	8004b88 <HAL_DMA_Init>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_UART_MspInit+0x284>
      Error_Handler();
 8003dec:	f7ff f90c 	bl	8003008 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a13      	ldr	r2, [pc, #76]	@ (8003e40 <HAL_UART_MspInit+0x2d4>)
 8003df4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003df6:	4a12      	ldr	r2, [pc, #72]	@ (8003e40 <HAL_UART_MspInit+0x2d4>)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2105      	movs	r1, #5
 8003e00:	2026      	movs	r0, #38	@ 0x26
 8003e02:	f000 fe97 	bl	8004b34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e06:	2026      	movs	r0, #38	@ 0x26
 8003e08:	f000 feb0 	bl	8004b6c <HAL_NVIC_EnableIRQ>
}
 8003e0c:	bf00      	nop
 8003e0e:	3730      	adds	r7, #48	@ 0x30
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40011000 	.word	0x40011000
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40020000 	.word	0x40020000
 8003e20:	40020400 	.word	0x40020400
 8003e24:	20004bac 	.word	0x20004bac
 8003e28:	40026440 	.word	0x40026440
 8003e2c:	20004c0c 	.word	0x20004c0c
 8003e30:	400264b8 	.word	0x400264b8
 8003e34:	40004400 	.word	0x40004400
 8003e38:	20004c6c 	.word	0x20004c6c
 8003e3c:	40026088 	.word	0x40026088
 8003e40:	20004ccc 	.word	0x20004ccc
 8003e44:	400260a0 	.word	0x400260a0

08003e48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	@ 0x30
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	4b2f      	ldr	r3, [pc, #188]	@ (8003f1c <HAL_InitTick+0xd4>)
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e60:	4a2e      	ldr	r2, [pc, #184]	@ (8003f1c <HAL_InitTick+0xd4>)
 8003e62:	f043 0304 	orr.w	r3, r3, #4
 8003e66:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e68:	4b2c      	ldr	r3, [pc, #176]	@ (8003f1c <HAL_InitTick+0xd4>)
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003e74:	f107 020c 	add.w	r2, r7, #12
 8003e78:	f107 0310 	add.w	r3, r7, #16
 8003e7c:	4611      	mov	r1, r2
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f004 fd28 	bl	80088d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003e84:	f004 fd12 	bl	80088ac <HAL_RCC_GetPCLK2Freq>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e90:	4a23      	ldr	r2, [pc, #140]	@ (8003f20 <HAL_InitTick+0xd8>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	0c9b      	lsrs	r3, r3, #18
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 8003e9c:	4b21      	ldr	r3, [pc, #132]	@ (8003f24 <HAL_InitTick+0xdc>)
 8003e9e:	4a22      	ldr	r2, [pc, #136]	@ (8003f28 <HAL_InitTick+0xe0>)
 8003ea0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003ea2:	4b20      	ldr	r3, [pc, #128]	@ (8003f24 <HAL_InitTick+0xdc>)
 8003ea4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003ea8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8003f24 <HAL_InitTick+0xdc>)
 8003eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eae:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f24 <HAL_InitTick+0xdc>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f24 <HAL_InitTick+0xdc>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ebc:	4b19      	ldr	r3, [pc, #100]	@ (8003f24 <HAL_InitTick+0xdc>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003ec2:	4818      	ldr	r0, [pc, #96]	@ (8003f24 <HAL_InitTick+0xdc>)
 8003ec4:	f004 fd38 	bl	8008938 <HAL_TIM_Base_Init>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003ece:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d11b      	bne.n	8003f0e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003ed6:	4813      	ldr	r0, [pc, #76]	@ (8003f24 <HAL_InitTick+0xdc>)
 8003ed8:	f004 fd88 	bl	80089ec <HAL_TIM_Base_Start_IT>
 8003edc:	4603      	mov	r3, r0
 8003ede:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d111      	bne.n	8003f0e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003eea:	201e      	movs	r0, #30
 8003eec:	f000 fe3e 	bl	8004b6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b0f      	cmp	r3, #15
 8003ef4:	d808      	bhi.n	8003f08 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	201e      	movs	r0, #30
 8003efc:	f000 fe1a 	bl	8004b34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f00:	4a0a      	ldr	r2, [pc, #40]	@ (8003f2c <HAL_InitTick+0xe4>)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	e002      	b.n	8003f0e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3730      	adds	r7, #48	@ 0x30
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	431bde83 	.word	0x431bde83
 8003f24:	20004e74 	.word	0x20004e74
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	2000001c 	.word	0x2000001c

08003f30 <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  while (1)
 8003f34:	bf00      	nop
 8003f36:	e7fd      	b.n	8003f34 <NMI_Handler+0x4>

08003f38 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0

  while (1)
 8003f3c:	bf00      	nop
 8003f3e:	e7fd      	b.n	8003f3c <HardFault_Handler+0x4>

08003f40 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  while (1)
 8003f44:	bf00      	nop
 8003f46:	e7fd      	b.n	8003f44 <MemManage_Handler+0x4>

08003f48 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  while (1)
 8003f4c:	bf00      	nop
 8003f4e:	e7fd      	b.n	8003f4c <BusFault_Handler+0x4>

08003f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  while (1)
 8003f54:	bf00      	nop
 8003f56:	e7fd      	b.n	8003f54 <UsageFault_Handler+0x4>

08003f58 <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
}
 8003f5c:	bf00      	nop
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003f6c:	4802      	ldr	r0, [pc, #8]	@ (8003f78 <DMA1_Stream5_IRQHandler+0x10>)
 8003f6e:	f000 ffa3 	bl	8004eb8 <HAL_DMA_IRQHandler>
}
 8003f72:	bf00      	nop
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20004c6c 	.word	0x20004c6c

08003f7c <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003f80:	4802      	ldr	r0, [pc, #8]	@ (8003f8c <DMA1_Stream6_IRQHandler+0x10>)
 8003f82:	f000 ff99 	bl	8004eb8 <HAL_DMA_IRQHandler>
}
 8003f86:	bf00      	nop
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20004ccc 	.word	0x20004ccc

08003f90 <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8003f94:	4802      	ldr	r0, [pc, #8]	@ (8003fa0 <TIM4_IRQHandler+0x10>)
 8003f96:	f004 ff79 	bl	8008e8c <HAL_TIM_IRQHandler>
}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	20004e74 	.word	0x20004e74

08003fa4 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8003fa8:	4802      	ldr	r0, [pc, #8]	@ (8003fb4 <USART1_IRQHandler+0x10>)
 8003faa:	f005 fdb3 	bl	8009b14 <HAL_UART_IRQHandler>
}
 8003fae:	bf00      	nop
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20004b24 	.word	0x20004b24

08003fb8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8003fbc:	4802      	ldr	r0, [pc, #8]	@ (8003fc8 <USART2_IRQHandler+0x10>)
 8003fbe:	f005 fda9 	bl	8009b14 <HAL_UART_IRQHandler>
}
 8003fc2:	bf00      	nop
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20004b68 	.word	0x20004b68

08003fcc <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003fd0:	4802      	ldr	r0, [pc, #8]	@ (8003fdc <DMA2_Stream2_IRQHandler+0x10>)
 8003fd2:	f000 ff71 	bl	8004eb8 <HAL_DMA_IRQHandler>
}
 8003fd6:	bf00      	nop
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20004bac 	.word	0x20004bac

08003fe0 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003fe4:	4802      	ldr	r0, [pc, #8]	@ (8003ff0 <DMA2_Stream7_IRQHandler+0x10>)
 8003fe6:	f000 ff67 	bl	8004eb8 <HAL_DMA_IRQHandler>
}
 8003fea:	bf00      	nop
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20004c0c 	.word	0x20004c0c

08003ff4 <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003ff8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003ffc:	f001 fb72 	bl	80056e4 <HAL_GPIO_EXTI_IRQHandler>
}
 8004000:	bf00      	nop
 8004002:	bd80      	pop	{r7, pc}

08004004 <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004008:	2001      	movs	r0, #1
 800400a:	f001 fb6b 	bl	80056e4 <HAL_GPIO_EXTI_IRQHandler>
}
 800400e:	bf00      	nop
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004018:	4802      	ldr	r0, [pc, #8]	@ (8004024 <I2C1_EV_IRQHandler+0x10>)
 800401a:	f001 ffe3 	bl	8005fe4 <HAL_I2C_EV_IRQHandler>
}
 800401e:	bf00      	nop
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20004ad0 	.word	0x20004ad0

08004028 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 800402c:	4802      	ldr	r0, [pc, #8]	@ (8004038 <I2C1_ER_IRQHandler+0x10>)
 800402e:	f002 f92c 	bl	800628a <HAL_I2C_ER_IRQHandler>
}
 8004032:	bf00      	nop
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20004ad0 	.word	0x20004ad0

0800403c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
	return 1;
 8004040:	2301      	movs	r3, #1
}
 8004042:	4618      	mov	r0, r3
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <_kill>:

int _kill(int pid, int sig)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004056:	f016 fc4b 	bl	801a8f0 <__errno>
 800405a:	4603      	mov	r3, r0
 800405c:	2216      	movs	r2, #22
 800405e:	601a      	str	r2, [r3, #0]
	return -1;
 8004060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <_exit>:

void _exit (int status)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004074:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff ffe7 	bl	800404c <_kill>
	while (1) {}		/* Make sure we hang here */
 800407e:	bf00      	nop
 8004080:	e7fd      	b.n	800407e <_exit+0x12>

08004082 <_read>:
}

//__attribute__((weak)) int _read(int file, char *ptr, int len)
int _read(int file, char *ptr, int len)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b086      	sub	sp, #24
 8004086:	af00      	add	r7, sp, #0
 8004088:	60f8      	str	r0, [r7, #12]
 800408a:	60b9      	str	r1, [r7, #8]
 800408c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800408e:	2300      	movs	r3, #0
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	e00a      	b.n	80040aa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004094:	f3af 8000 	nop.w
 8004098:	4601      	mov	r1, r0
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	60ba      	str	r2, [r7, #8]
 80040a0:	b2ca      	uxtb	r2, r1
 80040a2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	3301      	adds	r3, #1
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	dbf0      	blt.n	8004094 <_read+0x12>
	}

return len;
 80040b2:	687b      	ldr	r3, [r7, #4]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <_write>:

//__attribute__((weak)) int _write(int file, char *ptr, int len)
int _write(int file, char *ptr, int len)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040c8:	2300      	movs	r3, #0
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	e009      	b.n	80040e2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	60ba      	str	r2, [r7, #8]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe f842 	bl	8002160 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	3301      	adds	r3, #1
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	dbf1      	blt.n	80040ce <_write+0x12>
	}
	return len;
 80040ea:	687b      	ldr	r3, [r7, #4]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <_close>:

int _close(int file)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	return -1;
 80040fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800411c:	605a      	str	r2, [r3, #4]
	return 0;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <_isatty>:

int _isatty(int file)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	return 1;
 8004134:	2301      	movs	r3, #1
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004142:	b480      	push	{r7}
 8004144:	b085      	sub	sp, #20
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
	return 0;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004164:	4a14      	ldr	r2, [pc, #80]	@ (80041b8 <_sbrk+0x5c>)
 8004166:	4b15      	ldr	r3, [pc, #84]	@ (80041bc <_sbrk+0x60>)
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004170:	4b13      	ldr	r3, [pc, #76]	@ (80041c0 <_sbrk+0x64>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d102      	bne.n	800417e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004178:	4b11      	ldr	r3, [pc, #68]	@ (80041c0 <_sbrk+0x64>)
 800417a:	4a12      	ldr	r2, [pc, #72]	@ (80041c4 <_sbrk+0x68>)
 800417c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800417e:	4b10      	ldr	r3, [pc, #64]	@ (80041c0 <_sbrk+0x64>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4413      	add	r3, r2
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	429a      	cmp	r2, r3
 800418a:	d207      	bcs.n	800419c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800418c:	f016 fbb0 	bl	801a8f0 <__errno>
 8004190:	4603      	mov	r3, r0
 8004192:	220c      	movs	r2, #12
 8004194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004196:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800419a:	e009      	b.n	80041b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800419c:	4b08      	ldr	r3, [pc, #32]	@ (80041c0 <_sbrk+0x64>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041a2:	4b07      	ldr	r3, [pc, #28]	@ (80041c0 <_sbrk+0x64>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4413      	add	r3, r2
 80041aa:	4a05      	ldr	r2, [pc, #20]	@ (80041c0 <_sbrk+0x64>)
 80041ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041ae:	68fb      	ldr	r3, [r7, #12]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20020000 	.word	0x20020000
 80041bc:	00000400 	.word	0x00000400
 80041c0:	20004ec0 	.word	0x20004ec0
 80041c4:	2000e9b8 	.word	0x2000e9b8

080041c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041cc:	4b06      	ldr	r3, [pc, #24]	@ (80041e8 <SystemInit+0x20>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d2:	4a05      	ldr	r2, [pc, #20]	@ (80041e8 <SystemInit+0x20>)
 80041d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041dc:	bf00      	nop
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	e000ed00 	.word	0xe000ed00

080041ec <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b094      	sub	sp, #80	@ 0x50
 80041f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041f2:	f107 0320 	add.w	r3, r7, #32
 80041f6:	2230      	movs	r2, #48	@ 0x30
 80041f8:	2100      	movs	r1, #0
 80041fa:	4618      	mov	r0, r3
 80041fc:	f016 fa8a 	bl	801a714 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004200:	f107 030c 	add.w	r3, r7, #12
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	609a      	str	r2, [r3, #8]
 800420c:	60da      	str	r2, [r3, #12]
 800420e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004210:	2300      	movs	r3, #0
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	4b28      	ldr	r3, [pc, #160]	@ (80042b8 <SystemClock_Config+0xcc>)
 8004216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004218:	4a27      	ldr	r2, [pc, #156]	@ (80042b8 <SystemClock_Config+0xcc>)
 800421a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800421e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004220:	4b25      	ldr	r3, [pc, #148]	@ (80042b8 <SystemClock_Config+0xcc>)
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800422c:	2300      	movs	r3, #0
 800422e:	607b      	str	r3, [r7, #4]
 8004230:	4b22      	ldr	r3, [pc, #136]	@ (80042bc <SystemClock_Config+0xd0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a21      	ldr	r2, [pc, #132]	@ (80042bc <SystemClock_Config+0xd0>)
 8004236:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	4b1f      	ldr	r3, [pc, #124]	@ (80042bc <SystemClock_Config+0xd0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004244:	607b      	str	r3, [r7, #4]
 8004246:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004248:	2301      	movs	r3, #1
 800424a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800424c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8004250:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004252:	2302      	movs	r3, #2
 8004254:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004256:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800425a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800425c:	2308      	movs	r3, #8
 800425e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8004260:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8004264:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8004266:	2306      	movs	r3, #6
 8004268:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800426a:	2304      	movs	r3, #4
 800426c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800426e:	f107 0320 	add.w	r3, r7, #32
 8004272:	4618      	mov	r0, r3
 8004274:	f003 fe96 	bl	8007fa4 <HAL_RCC_OscConfig>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800427e:	f7fe fec3 	bl	8003008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004282:	230f      	movs	r3, #15
 8004284:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004286:	2302      	movs	r3, #2
 8004288:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800428e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004292:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004294:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004298:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800429a:	f107 030c 	add.w	r3, r7, #12
 800429e:	2102      	movs	r1, #2
 80042a0:	4618      	mov	r0, r3
 80042a2:	f004 f8f7 	bl	8008494 <HAL_RCC_ClockConfig>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80042ac:	f7fe feac 	bl	8003008 <Error_Handler>
  }
}
 80042b0:	bf00      	nop
 80042b2:	3750      	adds	r7, #80	@ 0x50
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40007000 	.word	0x40007000

080042c0 <num2str>:
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b089      	sub	sp, #36	@ 0x24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
 80042cc:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	fb01 f202 	mul.w	r2, r1, r2
 80042e0:	1a9a      	subs	r2, r3, r2
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1c59      	adds	r1, r3, #1
 80042e6:	60f9      	str	r1, [r7, #12]
 80042e8:	4936      	ldr	r1, [pc, #216]	@ (80043c4 <num2str+0x104>)
 80042ea:	5c8a      	ldrb	r2, [r1, r2]
 80042ec:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e9      	bne.n	80042d2 <num2str+0x12>
        *s='\0';
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 800430c:	2300      	movs	r3, #0
 800430e:	61fb      	str	r3, [r7, #28]
 8004310:	e01a      	b.n	8004348 <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	4413      	add	r3, r2
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	76fb      	strb	r3, [r7, #27]
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	441a      	add	r2, r3
 8004328:	6979      	ldr	r1, [r7, #20]
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	440b      	add	r3, r1
 800432e:	7812      	ldrb	r2, [r2, #0]
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4413      	add	r3, r2
 800433e:	7efa      	ldrb	r2, [r7, #27]
 8004340:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3301      	adds	r3, #1
 8004346:	61fb      	str	r3, [r7, #28]
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	085b      	lsrs	r3, r3, #1
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	429a      	cmp	r2, r3
 8004350:	d3df      	bcc.n	8004312 <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d22d      	bcs.n	80043b6 <num2str+0xf6>
                for (i=cnt;i==0;i--)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	e00e      	b.n	800437e <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 8004360:	697a      	ldr	r2, [r7, #20]
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	441a      	add	r2, r3
 8004366:	69f9      	ldr	r1, [r7, #28]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	4419      	add	r1, r3
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1acb      	subs	r3, r1, r3
 8004370:	6979      	ldr	r1, [r7, #20]
 8004372:	440b      	add	r3, r1
 8004374:	7812      	ldrb	r2, [r2, #0]
 8004376:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	3b01      	subs	r3, #1
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0ed      	beq.n	8004360 <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 8004384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <num2str+0xd0>
 800438a:	2320      	movs	r3, #32
 800438c:	76fb      	strb	r3, [r7, #27]
 800438e:	e001      	b.n	8004394 <num2str+0xd4>
 8004390:	2330      	movs	r3, #48	@ 0x30
 8004392:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
 8004398:	e007      	b.n	80043aa <num2str+0xea>
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	4413      	add	r3, r2
 80043a0:	7efa      	ldrb	r2, [r7, #27]
 80043a2:	701a      	strb	r2, [r3, #0]
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	3301      	adds	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d3f1      	bcc.n	800439a <num2str+0xda>
        }
}
 80043b6:	bf00      	nop
 80043b8:	3724      	adds	r7, #36	@ 0x24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20000008 	.word	0x20000008

080043c8 <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 80043e0:	e02e      	b.n	8004440 <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
 80043e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80043e6:	d906      	bls.n	80043f6 <str2num+0x2e>
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	2b39      	cmp	r3, #57	@ 0x39
 80043ec:	d803      	bhi.n	80043f6 <str2num+0x2e>
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	3b30      	subs	r3, #48	@ 0x30
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	e018      	b.n	8004428 <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b10      	cmp	r3, #16
 80043fa:	d109      	bne.n	8004410 <str2num+0x48>
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
 80043fe:	2b40      	cmp	r3, #64	@ 0x40
 8004400:	d906      	bls.n	8004410 <str2num+0x48>
 8004402:	7bfb      	ldrb	r3, [r7, #15]
 8004404:	2b46      	cmp	r3, #70	@ 0x46
 8004406:	d803      	bhi.n	8004410 <str2num+0x48>
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	3b37      	subs	r3, #55	@ 0x37
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	e00b      	b.n	8004428 <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b10      	cmp	r3, #16
 8004414:	d117      	bne.n	8004446 <str2num+0x7e>
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	2b60      	cmp	r3, #96	@ 0x60
 800441a:	d914      	bls.n	8004446 <str2num+0x7e>
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	2b66      	cmp	r3, #102	@ 0x66
 8004420:	d811      	bhi.n	8004446 <str2num+0x7e>
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	3b57      	subs	r3, #87	@ 0x57
 8004426:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	fb02 f303 	mul.w	r3, r2, r3
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4413      	add	r3, r2
 8004434:	617b      	str	r3, [r7, #20]
		ch=*s++;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1cd      	bne.n	80043e2 <str2num+0x1a>
	}
	return u;
 8004446:	697b      	ldr	r3, [r7, #20]
}
 8004448:	4618      	mov	r0, r3
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	3b01      	subs	r3, #1
 8004466:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004468:	e018      	b.n	800449c <reverse+0x48>
    {
        temp = str[i];
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	4413      	add	r3, r2
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	441a      	add	r2, r3
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	440b      	add	r3, r1
 8004480:	7812      	ldrb	r2, [r2, #0]
 8004482:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	4413      	add	r3, r2
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	3301      	adds	r3, #1
 8004494:	617b      	str	r3, [r7, #20]
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	3b01      	subs	r3, #1
 800449a:	613b      	str	r3, [r7, #16]
    while (i<j)
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	dbe2      	blt.n	800446a <reverse+0x16>
    }
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
	...

080044b4 <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
    int i = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]
    while (x)
 80044c4:	e01d      	b.n	8004502 <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004540 <intToStr+0x8c>)
 80044ca:	fb83 1302 	smull	r1, r3, r3, r2
 80044ce:	1099      	asrs	r1, r3, #2
 80044d0:	17d3      	asrs	r3, r2, #31
 80044d2:	1ac9      	subs	r1, r1, r3
 80044d4:	460b      	mov	r3, r1
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	1ad1      	subs	r1, r2, r3
 80044de:	b2ca      	uxtb	r2, r1
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	1c59      	adds	r1, r3, #1
 80044e4:	6179      	str	r1, [r7, #20]
 80044e6:	4619      	mov	r1, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	440b      	add	r3, r1
 80044ec:	3230      	adds	r2, #48	@ 0x30
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]
        x = x/10;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4a12      	ldr	r2, [pc, #72]	@ (8004540 <intToStr+0x8c>)
 80044f6:	fb82 1203 	smull	r1, r2, r2, r3
 80044fa:	1092      	asrs	r2, r2, #2
 80044fc:	17db      	asrs	r3, r3, #31
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	60fb      	str	r3, [r7, #12]
    while (x)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1de      	bne.n	80044c6 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8004508:	e007      	b.n	800451a <intToStr+0x66>
        str[i++] = '0';
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	617a      	str	r2, [r7, #20]
 8004510:	461a      	mov	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4413      	add	r3, r2
 8004516:	2230      	movs	r2, #48	@ 0x30
 8004518:	701a      	strb	r2, [r3, #0]
    while (i < d)
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	dbf3      	blt.n	800450a <intToStr+0x56>

    reverse(str, i);
 8004522:	6979      	ldr	r1, [r7, #20]
 8004524:	68b8      	ldr	r0, [r7, #8]
 8004526:	f7ff ff95 	bl	8004454 <reverse>
    str[i] = '\0';
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	4413      	add	r3, r2
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
    return i;
 8004534:	697b      	ldr	r3, [r7, #20]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	66666667 	.word	0x66666667
 8004544:	00000000 	.word	0x00000000

08004548 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	ed87 0a02 	vstr	s0, [r7, #8]
 8004554:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8004556:	edd7 7a02 	vldr	s15, [r7, #8]
 800455a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800455e:	ee17 3a90 	vmov	r3, s15
 8004562:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800456e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004572:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004576:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 800457a:	2200      	movs	r2, #0
 800457c:	68f9      	ldr	r1, [r7, #12]
 800457e:	69f8      	ldr	r0, [r7, #28]
 8004580:	f7ff ff98 	bl	80044b4 <intToStr>
 8004584:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d025      	beq.n	80045d8 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4413      	add	r3, r2
 8004592:	222e      	movs	r2, #46	@ 0x2e
 8004594:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 80045e0 <float2str+0x98>
 800459c:	f000 f824 	bl	80045e8 <myPow>
 80045a0:	ec53 2b10 	vmov	r2, r3, d0
 80045a4:	4610      	mov	r0, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	f7fc fb36 	bl	8000c18 <__aeabi_d2f>
 80045ac:	ee07 0a10 	vmov	s14, r0
 80045b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80045b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045b8:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80045bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80045c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	3301      	adds	r3, #1
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4413      	add	r3, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	4619      	mov	r1, r3
 80045d0:	ee17 0a90 	vmov	r0, s15
 80045d4:	f7ff ff6e 	bl	80044b4 <intToStr>
    }
}
 80045d8:	bf00      	nop
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	00000000 	.word	0x00000000
 80045e4:	40240000 	.word	0x40240000

080045e8 <myPow>:
//=================================================================
double myPow(double x, int n) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	ed87 0b02 	vstr	d0, [r7, #8]
 80045f2:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	bfb8      	it	lt
 80045fa:	425b      	neglt	r3, r3
 80045fc:	61fb      	str	r3, [r7, #28]
    double result = 1;
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	4b1d      	ldr	r3, [pc, #116]	@ (8004678 <myPow+0x90>)
 8004604:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 8004608:	e01b      	b.n	8004642 <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d009      	beq.n	8004628 <myPow+0x40>
        {
            result = result * x;
 8004614:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004618:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800461c:	f7fc f804 	bl	8000628 <__aeabi_dmul>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	085b      	lsrs	r3, r3, #1
 800462c:	61fb      	str	r3, [r7, #28]
        x = x * x;
 800462e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004632:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004636:	f7fb fff7 	bl	8000628 <__aeabi_dmul>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1e0      	bne.n	800460a <myPow+0x22>
    }

    if(n < 0)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	da09      	bge.n	8004662 <myPow+0x7a>
    {
        return 1/result;
 800464e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	4908      	ldr	r1, [pc, #32]	@ (8004678 <myPow+0x90>)
 8004658:	f7fc f910 	bl	800087c <__aeabi_ddiv>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	e001      	b.n	8004666 <myPow+0x7e>
    }
    return result;
 8004662:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8004666:	ec43 2b17 	vmov	d7, r2, r3
 800466a:	eeb0 0a47 	vmov.f32	s0, s14
 800466e:	eef0 0a67 	vmov.f32	s1, s15
 8004672:	3720      	adds	r7, #32
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	3ff00000 	.word	0x3ff00000

0800467c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800467c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004680:	480d      	ldr	r0, [pc, #52]	@ (80046b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004682:	490e      	ldr	r1, [pc, #56]	@ (80046bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004684:	4a0e      	ldr	r2, [pc, #56]	@ (80046c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004688:	e002      	b.n	8004690 <LoopCopyDataInit>

0800468a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800468a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800468c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800468e:	3304      	adds	r3, #4

08004690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004694:	d3f9      	bcc.n	800468a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004696:	4a0b      	ldr	r2, [pc, #44]	@ (80046c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004698:	4c0b      	ldr	r4, [pc, #44]	@ (80046c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800469a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800469c:	e001      	b.n	80046a2 <LoopFillZerobss>

0800469e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800469e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046a0:	3204      	adds	r2, #4

080046a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046a4:	d3fb      	bcc.n	800469e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80046a6:	f7ff fd8f 	bl	80041c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046aa:	f016 f927 	bl	801a8fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046ae:	f7fe fab1 	bl	8002c14 <main>
  bx  lr    
 80046b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80046b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80046b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046bc:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 80046c0:	0801ec5c 	.word	0x0801ec5c
  ldr r2, =_sbss
 80046c4:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 80046c8:	2000e9b8 	.word	0x2000e9b8

080046cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046cc:	e7fe      	b.n	80046cc <ADC_IRQHandler>
	...

080046d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004710 <HAL_Init+0x40>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004710 <HAL_Init+0x40>)
 80046da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80046e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004710 <HAL_Init+0x40>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a0a      	ldr	r2, [pc, #40]	@ (8004710 <HAL_Init+0x40>)
 80046e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046ec:	4b08      	ldr	r3, [pc, #32]	@ (8004710 <HAL_Init+0x40>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a07      	ldr	r2, [pc, #28]	@ (8004710 <HAL_Init+0x40>)
 80046f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046f8:	2003      	movs	r0, #3
 80046fa:	f000 fa10 	bl	8004b1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046fe:	200f      	movs	r0, #15
 8004700:	f7ff fba2 	bl	8003e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004704:	f7ff f844 	bl	8003790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40023c00 	.word	0x40023c00

08004714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004718:	4b06      	ldr	r3, [pc, #24]	@ (8004734 <HAL_IncTick+0x20>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	4b06      	ldr	r3, [pc, #24]	@ (8004738 <HAL_IncTick+0x24>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4413      	add	r3, r2
 8004724:	4a04      	ldr	r2, [pc, #16]	@ (8004738 <HAL_IncTick+0x24>)
 8004726:	6013      	str	r3, [r2, #0]
}
 8004728:	bf00      	nop
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	20000020 	.word	0x20000020
 8004738:	20004ec4 	.word	0x20004ec4

0800473c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  return uwTick;
 8004740:	4b03      	ldr	r3, [pc, #12]	@ (8004750 <HAL_GetTick+0x14>)
 8004742:	681b      	ldr	r3, [r3, #0]
}
 8004744:	4618      	mov	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	20004ec4 	.word	0x20004ec4

08004754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800475c:	f7ff ffee 	bl	800473c <HAL_GetTick>
 8004760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800476c:	d005      	beq.n	800477a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800476e:	4b0a      	ldr	r3, [pc, #40]	@ (8004798 <HAL_Delay+0x44>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800477a:	bf00      	nop
 800477c:	f7ff ffde 	bl	800473c <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	429a      	cmp	r2, r3
 800478a:	d8f7      	bhi.n	800477c <HAL_Delay+0x28>
  {
  }
}
 800478c:	bf00      	nop
 800478e:	bf00      	nop
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20000020 	.word	0x20000020

0800479c <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e01b      	b.n	80047e6 <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f817 	bl	80047ee <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 f81b 	bl	8004804 <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b083      	sub	sp, #12
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
	...

08004804 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800480c:	4b6c      	ldr	r3, [pc, #432]	@ (80049c0 <ADC_Init+0x1bc>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	4a6b      	ldr	r2, [pc, #428]	@ (80049c0 <ADC_Init+0x1bc>)
 8004812:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004816:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004818:	4b69      	ldr	r3, [pc, #420]	@ (80049c0 <ADC_Init+0x1bc>)
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	4967      	ldr	r1, [pc, #412]	@ (80049c0 <ADC_Init+0x1bc>)
 8004822:	4313      	orrs	r3, r2
 8004824:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004834:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6859      	ldr	r1, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	021a      	lsls	r2, r3, #8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004858:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6859      	ldr	r1, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800487a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6899      	ldr	r1, [r3, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800489c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6899      	ldr	r1, [r3, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80048be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6899      	ldr	r1, [r3, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0202 	bic.w	r2, r2, #2
 80048e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6899      	ldr	r1, [r3, #8]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	005a      	lsls	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d01b      	beq.n	8004936 <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800490c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800491c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6859      	ldr	r1, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004928:	3b01      	subs	r3, #1
 800492a:	035a      	lsls	r2, r3, #13
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	605a      	str	r2, [r3, #4]
 8004934:	e007      	b.n	8004946 <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004944:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004954:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	3b01      	subs	r3, #1
 8004962:	051a      	lsls	r2, r3, #20
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800497a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6899      	ldr	r1, [r3, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	025a      	lsls	r2, r3, #9
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800499e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6899      	ldr	r1, [r3, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	029a      	lsls	r2, r3, #10
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	609a      	str	r2, [r3, #8]
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	40012300 	.word	0x40012300

080049c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f003 0307 	and.w	r3, r3, #7
 80049d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004a08 <__NVIC_SetPriorityGrouping+0x44>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049e0:	4013      	ands	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049f6:	4a04      	ldr	r2, [pc, #16]	@ (8004a08 <__NVIC_SetPriorityGrouping+0x44>)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	60d3      	str	r3, [r2, #12]
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	e000ed00 	.word	0xe000ed00

08004a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a10:	4b04      	ldr	r3, [pc, #16]	@ (8004a24 <__NVIC_GetPriorityGrouping+0x18>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	0a1b      	lsrs	r3, r3, #8
 8004a16:	f003 0307 	and.w	r3, r3, #7
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	e000ed00 	.word	0xe000ed00

08004a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	db0b      	blt.n	8004a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	f003 021f 	and.w	r2, r3, #31
 8004a40:	4907      	ldr	r1, [pc, #28]	@ (8004a60 <__NVIC_EnableIRQ+0x38>)
 8004a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	2001      	movs	r0, #1
 8004a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	e000e100 	.word	0xe000e100

08004a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	6039      	str	r1, [r7, #0]
 8004a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	db0a      	blt.n	8004a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	490c      	ldr	r1, [pc, #48]	@ (8004ab0 <__NVIC_SetPriority+0x4c>)
 8004a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a82:	0112      	lsls	r2, r2, #4
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	440b      	add	r3, r1
 8004a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a8c:	e00a      	b.n	8004aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	4908      	ldr	r1, [pc, #32]	@ (8004ab4 <__NVIC_SetPriority+0x50>)
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	3b04      	subs	r3, #4
 8004a9c:	0112      	lsls	r2, r2, #4
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	761a      	strb	r2, [r3, #24]
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	e000e100 	.word	0xe000e100
 8004ab4:	e000ed00 	.word	0xe000ed00

08004ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b089      	sub	sp, #36	@ 0x24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f1c3 0307 	rsb	r3, r3, #7
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	bf28      	it	cs
 8004ad6:	2304      	movcs	r3, #4
 8004ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	3304      	adds	r3, #4
 8004ade:	2b06      	cmp	r3, #6
 8004ae0:	d902      	bls.n	8004ae8 <NVIC_EncodePriority+0x30>
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	3b03      	subs	r3, #3
 8004ae6:	e000      	b.n	8004aea <NVIC_EncodePriority+0x32>
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	fa02 f303 	lsl.w	r3, r2, r3
 8004af6:	43da      	mvns	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	401a      	ands	r2, r3
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0a:	43d9      	mvns	r1, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b10:	4313      	orrs	r3, r2
         );
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3724      	adds	r7, #36	@ 0x24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff ff4c 	bl	80049c4 <__NVIC_SetPriorityGrouping>
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b46:	f7ff ff61 	bl	8004a0c <__NVIC_GetPriorityGrouping>
 8004b4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	68b9      	ldr	r1, [r7, #8]
 8004b50:	6978      	ldr	r0, [r7, #20]
 8004b52:	f7ff ffb1 	bl	8004ab8 <NVIC_EncodePriority>
 8004b56:	4602      	mov	r2, r0
 8004b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff ff80 	bl	8004a64 <__NVIC_SetPriority>
}
 8004b64:	bf00      	nop
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff ff54 	bl	8004a28 <__NVIC_EnableIRQ>
}
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b94:	f7ff fdd2 	bl	800473c <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e099      	b.n	8004cd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bc4:	e00f      	b.n	8004be6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bc6:	f7ff fdb9 	bl	800473c <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b05      	cmp	r3, #5
 8004bd2:	d908      	bls.n	8004be6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2203      	movs	r2, #3
 8004bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e078      	b.n	8004cd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e8      	bne.n	8004bc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	4b38      	ldr	r3, [pc, #224]	@ (8004ce0 <HAL_DMA_Init+0x158>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d107      	bne.n	8004c50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f023 0307 	bic.w	r3, r3, #7
 8004c66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d117      	bne.n	8004caa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00e      	beq.n	8004caa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fb0f 	bl	80052b0 <DMA_CheckFifoParam>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d008      	beq.n	8004caa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2240      	movs	r2, #64	@ 0x40
 8004c9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e016      	b.n	8004cd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fac6 	bl	8005244 <DMA_CalcBaseAndBitshift>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc0:	223f      	movs	r2, #63	@ 0x3f
 8004cc2:	409a      	lsls	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	f010803f 	.word	0xf010803f

08004ce4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cfa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <HAL_DMA_Start_IT+0x26>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e040      	b.n	8004d8c <HAL_DMA_Start_IT+0xa8>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d12f      	bne.n	8004d7e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2202      	movs	r2, #2
 8004d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 fa58 	bl	80051e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d3c:	223f      	movs	r2, #63	@ 0x3f
 8004d3e:	409a      	lsls	r2, r3
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0216 	orr.w	r2, r2, #22
 8004d52:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d007      	beq.n	8004d6c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0208 	orr.w	r2, r2, #8
 8004d6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]
 8004d7c:	e005      	b.n	8004d8a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d86:	2302      	movs	r3, #2
 8004d88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004da2:	f7ff fccb 	bl	800473c <HAL_GetTick>
 8004da6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d008      	beq.n	8004dc6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2280      	movs	r2, #128	@ 0x80
 8004db8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e052      	b.n	8004e6c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0216 	bic.w	r2, r2, #22
 8004dd4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695a      	ldr	r2, [r3, #20]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004de4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d103      	bne.n	8004df6 <HAL_DMA_Abort+0x62>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d007      	beq.n	8004e06 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0208 	bic.w	r2, r2, #8
 8004e04:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0201 	bic.w	r2, r2, #1
 8004e14:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e16:	e013      	b.n	8004e40 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e18:	f7ff fc90 	bl	800473c <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b05      	cmp	r3, #5
 8004e24:	d90c      	bls.n	8004e40 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2203      	movs	r2, #3
 8004e30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e015      	b.n	8004e6c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e4      	bne.n	8004e18 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e52:	223f      	movs	r2, #63	@ 0x3f
 8004e54:	409a      	lsls	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d004      	beq.n	8004e92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2280      	movs	r2, #128	@ 0x80
 8004e8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e00c      	b.n	8004eac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2205      	movs	r2, #5
 8004e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0201 	bic.w	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ec4:	4b8e      	ldr	r3, [pc, #568]	@ (8005100 <HAL_DMA_IRQHandler+0x248>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a8e      	ldr	r2, [pc, #568]	@ (8005104 <HAL_DMA_IRQHandler+0x24c>)
 8004eca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ece:	0a9b      	lsrs	r3, r3, #10
 8004ed0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee2:	2208      	movs	r2, #8
 8004ee4:	409a      	lsls	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01a      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d013      	beq.n	8004f24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0204 	bic.w	r2, r2, #4
 8004f0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f10:	2208      	movs	r2, #8
 8004f12:	409a      	lsls	r2, r3
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f1c:	f043 0201 	orr.w	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f28:	2201      	movs	r2, #1
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d012      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f46:	2201      	movs	r2, #1
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f52:	f043 0202 	orr.w	r2, r3, #2
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5e:	2204      	movs	r2, #4
 8004f60:	409a      	lsls	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4013      	ands	r3, r2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d012      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00b      	beq.n	8004f90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f7c:	2204      	movs	r2, #4
 8004f7e:	409a      	lsls	r2, r3
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f88:	f043 0204 	orr.w	r2, r3, #4
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f94:	2210      	movs	r2, #16
 8004f96:	409a      	lsls	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d043      	beq.n	8005028 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d03c      	beq.n	8005028 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb2:	2210      	movs	r2, #16
 8004fb4:	409a      	lsls	r2, r3
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d018      	beq.n	8004ffa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d108      	bne.n	8004fe8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d024      	beq.n	8005028 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	4798      	blx	r3
 8004fe6:	e01f      	b.n	8005028 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01b      	beq.n	8005028 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	4798      	blx	r3
 8004ff8:	e016      	b.n	8005028 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005004:	2b00      	cmp	r3, #0
 8005006:	d107      	bne.n	8005018 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0208 	bic.w	r2, r2, #8
 8005016:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800502c:	2220      	movs	r2, #32
 800502e:	409a      	lsls	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 808f 	beq.w	8005158 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	2b00      	cmp	r3, #0
 8005046:	f000 8087 	beq.w	8005158 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800504e:	2220      	movs	r2, #32
 8005050:	409a      	lsls	r2, r3
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b05      	cmp	r3, #5
 8005060:	d136      	bne.n	80050d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0216 	bic.w	r2, r2, #22
 8005070:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695a      	ldr	r2, [r3, #20]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005080:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005086:	2b00      	cmp	r3, #0
 8005088:	d103      	bne.n	8005092 <HAL_DMA_IRQHandler+0x1da>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800508e:	2b00      	cmp	r3, #0
 8005090:	d007      	beq.n	80050a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0208 	bic.w	r2, r2, #8
 80050a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a6:	223f      	movs	r2, #63	@ 0x3f
 80050a8:	409a      	lsls	r2, r3
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d07e      	beq.n	80051c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	4798      	blx	r3
        }
        return;
 80050ce:	e079      	b.n	80051c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01d      	beq.n	800511a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10d      	bne.n	8005108 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d031      	beq.n	8005158 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	4798      	blx	r3
 80050fc:	e02c      	b.n	8005158 <HAL_DMA_IRQHandler+0x2a0>
 80050fe:	bf00      	nop
 8005100:	20000004 	.word	0x20000004
 8005104:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800510c:	2b00      	cmp	r3, #0
 800510e:	d023      	beq.n	8005158 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	4798      	blx	r3
 8005118:	e01e      	b.n	8005158 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10f      	bne.n	8005148 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0210 	bic.w	r2, r2, #16
 8005136:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800515c:	2b00      	cmp	r3, #0
 800515e:	d032      	beq.n	80051c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d022      	beq.n	80051b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2205      	movs	r2, #5
 8005170:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 0201 	bic.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	3301      	adds	r3, #1
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	429a      	cmp	r2, r3
 800518e:	d307      	bcc.n	80051a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f2      	bne.n	8005184 <HAL_DMA_IRQHandler+0x2cc>
 800519e:	e000      	b.n	80051a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80051a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	4798      	blx	r3
 80051c2:	e000      	b.n	80051c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80051c4:	bf00      	nop
    }
  }
}
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80051da:	b2db      	uxtb	r3, r3
}
 80051dc:	4618      	mov	r0, r3
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005204:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	2b40      	cmp	r3, #64	@ 0x40
 8005214:	d108      	bne.n	8005228 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005226:	e007      	b.n	8005238 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	60da      	str	r2, [r3, #12]
}
 8005238:	bf00      	nop
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	3b10      	subs	r3, #16
 8005254:	4a14      	ldr	r2, [pc, #80]	@ (80052a8 <DMA_CalcBaseAndBitshift+0x64>)
 8005256:	fba2 2303 	umull	r2, r3, r2, r3
 800525a:	091b      	lsrs	r3, r3, #4
 800525c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800525e:	4a13      	ldr	r2, [pc, #76]	@ (80052ac <DMA_CalcBaseAndBitshift+0x68>)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4413      	add	r3, r2
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b03      	cmp	r3, #3
 8005270:	d909      	bls.n	8005286 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800527a:	f023 0303 	bic.w	r3, r3, #3
 800527e:	1d1a      	adds	r2, r3, #4
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	659a      	str	r2, [r3, #88]	@ 0x58
 8005284:	e007      	b.n	8005296 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800528e:	f023 0303 	bic.w	r3, r3, #3
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800529a:	4618      	mov	r0, r3
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	aaaaaaab 	.word	0xaaaaaaab
 80052ac:	0801de80 	.word	0x0801de80

080052b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d11f      	bne.n	800530a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d856      	bhi.n	800537e <DMA_CheckFifoParam+0xce>
 80052d0:	a201      	add	r2, pc, #4	@ (adr r2, 80052d8 <DMA_CheckFifoParam+0x28>)
 80052d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d6:	bf00      	nop
 80052d8:	080052e9 	.word	0x080052e9
 80052dc:	080052fb 	.word	0x080052fb
 80052e0:	080052e9 	.word	0x080052e9
 80052e4:	0800537f 	.word	0x0800537f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d046      	beq.n	8005382 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052f8:	e043      	b.n	8005382 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005302:	d140      	bne.n	8005386 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005308:	e03d      	b.n	8005386 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005312:	d121      	bne.n	8005358 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b03      	cmp	r3, #3
 8005318:	d837      	bhi.n	800538a <DMA_CheckFifoParam+0xda>
 800531a:	a201      	add	r2, pc, #4	@ (adr r2, 8005320 <DMA_CheckFifoParam+0x70>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005331 	.word	0x08005331
 8005324:	08005337 	.word	0x08005337
 8005328:	08005331 	.word	0x08005331
 800532c:	08005349 	.word	0x08005349
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	73fb      	strb	r3, [r7, #15]
      break;
 8005334:	e030      	b.n	8005398 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d025      	beq.n	800538e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005346:	e022      	b.n	800538e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005350:	d11f      	bne.n	8005392 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005356:	e01c      	b.n	8005392 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d903      	bls.n	8005366 <DMA_CheckFifoParam+0xb6>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b03      	cmp	r3, #3
 8005362:	d003      	beq.n	800536c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005364:	e018      	b.n	8005398 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	73fb      	strb	r3, [r7, #15]
      break;
 800536a:	e015      	b.n	8005398 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005370:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00e      	beq.n	8005396 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	73fb      	strb	r3, [r7, #15]
      break;
 800537c:	e00b      	b.n	8005396 <DMA_CheckFifoParam+0xe6>
      break;
 800537e:	bf00      	nop
 8005380:	e00a      	b.n	8005398 <DMA_CheckFifoParam+0xe8>
      break;
 8005382:	bf00      	nop
 8005384:	e008      	b.n	8005398 <DMA_CheckFifoParam+0xe8>
      break;
 8005386:	bf00      	nop
 8005388:	e006      	b.n	8005398 <DMA_CheckFifoParam+0xe8>
      break;
 800538a:	bf00      	nop
 800538c:	e004      	b.n	8005398 <DMA_CheckFifoParam+0xe8>
      break;
 800538e:	bf00      	nop
 8005390:	e002      	b.n	8005398 <DMA_CheckFifoParam+0xe8>
      break;   
 8005392:	bf00      	nop
 8005394:	e000      	b.n	8005398 <DMA_CheckFifoParam+0xe8>
      break;
 8005396:	bf00      	nop
    }
  } 
  
  return status; 
 8005398:	7bfb      	ldrb	r3, [r7, #15]
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop

080053a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b089      	sub	sp, #36	@ 0x24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053be:	2300      	movs	r3, #0
 80053c0:	61fb      	str	r3, [r7, #28]
 80053c2:	e159      	b.n	8005678 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053c4:	2201      	movs	r2, #1
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4013      	ands	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	429a      	cmp	r2, r3
 80053de:	f040 8148 	bne.w	8005672 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d005      	beq.n	80053fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d130      	bne.n	800545c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	2203      	movs	r2, #3
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	43db      	mvns	r3, r3
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	4013      	ands	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	fa02 f303 	lsl.w	r3, r2, r3
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	4313      	orrs	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005430:	2201      	movs	r2, #1
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	43db      	mvns	r3, r3
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	4013      	ands	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	091b      	lsrs	r3, r3, #4
 8005446:	f003 0201 	and.w	r2, r3, #1
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	fa02 f303 	lsl.w	r3, r2, r3
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	4313      	orrs	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 0303 	and.w	r3, r3, #3
 8005464:	2b03      	cmp	r3, #3
 8005466:	d017      	beq.n	8005498 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	2203      	movs	r2, #3
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	43db      	mvns	r3, r3
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	4013      	ands	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	4313      	orrs	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d123      	bne.n	80054ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	08da      	lsrs	r2, r3, #3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	3208      	adds	r2, #8
 80054ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	220f      	movs	r2, #15
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	43db      	mvns	r3, r3
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	4013      	ands	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4313      	orrs	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	08da      	lsrs	r2, r3, #3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3208      	adds	r2, #8
 80054e6:	69b9      	ldr	r1, [r7, #24]
 80054e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	2203      	movs	r2, #3
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	43db      	mvns	r3, r3
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	4013      	ands	r3, r2
 8005502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	f003 0203 	and.w	r2, r3, #3
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	4313      	orrs	r3, r2
 8005518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005528:	2b00      	cmp	r3, #0
 800552a:	f000 80a2 	beq.w	8005672 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800552e:	2300      	movs	r3, #0
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	4b57      	ldr	r3, [pc, #348]	@ (8005690 <HAL_GPIO_Init+0x2e8>)
 8005534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005536:	4a56      	ldr	r2, [pc, #344]	@ (8005690 <HAL_GPIO_Init+0x2e8>)
 8005538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800553c:	6453      	str	r3, [r2, #68]	@ 0x44
 800553e:	4b54      	ldr	r3, [pc, #336]	@ (8005690 <HAL_GPIO_Init+0x2e8>)
 8005540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800554a:	4a52      	ldr	r2, [pc, #328]	@ (8005694 <HAL_GPIO_Init+0x2ec>)
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	089b      	lsrs	r3, r3, #2
 8005550:	3302      	adds	r3, #2
 8005552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	220f      	movs	r2, #15
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	43db      	mvns	r3, r3
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	4013      	ands	r3, r2
 800556c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a49      	ldr	r2, [pc, #292]	@ (8005698 <HAL_GPIO_Init+0x2f0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d019      	beq.n	80055aa <HAL_GPIO_Init+0x202>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a48      	ldr	r2, [pc, #288]	@ (800569c <HAL_GPIO_Init+0x2f4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <HAL_GPIO_Init+0x1fe>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a47      	ldr	r2, [pc, #284]	@ (80056a0 <HAL_GPIO_Init+0x2f8>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00d      	beq.n	80055a2 <HAL_GPIO_Init+0x1fa>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a46      	ldr	r2, [pc, #280]	@ (80056a4 <HAL_GPIO_Init+0x2fc>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d007      	beq.n	800559e <HAL_GPIO_Init+0x1f6>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a45      	ldr	r2, [pc, #276]	@ (80056a8 <HAL_GPIO_Init+0x300>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d101      	bne.n	800559a <HAL_GPIO_Init+0x1f2>
 8005596:	2304      	movs	r3, #4
 8005598:	e008      	b.n	80055ac <HAL_GPIO_Init+0x204>
 800559a:	2307      	movs	r3, #7
 800559c:	e006      	b.n	80055ac <HAL_GPIO_Init+0x204>
 800559e:	2303      	movs	r3, #3
 80055a0:	e004      	b.n	80055ac <HAL_GPIO_Init+0x204>
 80055a2:	2302      	movs	r3, #2
 80055a4:	e002      	b.n	80055ac <HAL_GPIO_Init+0x204>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <HAL_GPIO_Init+0x204>
 80055aa:	2300      	movs	r3, #0
 80055ac:	69fa      	ldr	r2, [r7, #28]
 80055ae:	f002 0203 	and.w	r2, r2, #3
 80055b2:	0092      	lsls	r2, r2, #2
 80055b4:	4093      	lsls	r3, r2
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055bc:	4935      	ldr	r1, [pc, #212]	@ (8005694 <HAL_GPIO_Init+0x2ec>)
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	089b      	lsrs	r3, r3, #2
 80055c2:	3302      	adds	r3, #2
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055ca:	4b38      	ldr	r3, [pc, #224]	@ (80056ac <HAL_GPIO_Init+0x304>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	43db      	mvns	r3, r3
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	4013      	ands	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055ee:	4a2f      	ldr	r2, [pc, #188]	@ (80056ac <HAL_GPIO_Init+0x304>)
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055f4:	4b2d      	ldr	r3, [pc, #180]	@ (80056ac <HAL_GPIO_Init+0x304>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	43db      	mvns	r3, r3
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	4013      	ands	r3, r2
 8005602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005618:	4a24      	ldr	r2, [pc, #144]	@ (80056ac <HAL_GPIO_Init+0x304>)
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800561e:	4b23      	ldr	r3, [pc, #140]	@ (80056ac <HAL_GPIO_Init+0x304>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	43db      	mvns	r3, r3
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	4013      	ands	r3, r2
 800562c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005642:	4a1a      	ldr	r2, [pc, #104]	@ (80056ac <HAL_GPIO_Init+0x304>)
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005648:	4b18      	ldr	r3, [pc, #96]	@ (80056ac <HAL_GPIO_Init+0x304>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	43db      	mvns	r3, r3
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	4013      	ands	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800566c:	4a0f      	ldr	r2, [pc, #60]	@ (80056ac <HAL_GPIO_Init+0x304>)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	3301      	adds	r3, #1
 8005676:	61fb      	str	r3, [r7, #28]
 8005678:	69fb      	ldr	r3, [r7, #28]
 800567a:	2b0f      	cmp	r3, #15
 800567c:	f67f aea2 	bls.w	80053c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005680:	bf00      	nop
 8005682:	bf00      	nop
 8005684:	3724      	adds	r7, #36	@ 0x24
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40023800 	.word	0x40023800
 8005694:	40013800 	.word	0x40013800
 8005698:	40020000 	.word	0x40020000
 800569c:	40020400 	.word	0x40020400
 80056a0:	40020800 	.word	0x40020800
 80056a4:	40020c00 	.word	0x40020c00
 80056a8:	40021000 	.word	0x40021000
 80056ac:	40013c00 	.word	0x40013c00

080056b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	460b      	mov	r3, r1
 80056ba:	807b      	strh	r3, [r7, #2]
 80056bc:	4613      	mov	r3, r2
 80056be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056c0:	787b      	ldrb	r3, [r7, #1]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056c6:	887a      	ldrh	r2, [r7, #2]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80056cc:	e003      	b.n	80056d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80056ce:	887b      	ldrh	r3, [r7, #2]
 80056d0:	041a      	lsls	r2, r3, #16
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	619a      	str	r2, [r3, #24]
}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
	...

080056e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	4603      	mov	r3, r0
 80056ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80056ee:	4b08      	ldr	r3, [pc, #32]	@ (8005710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056f0:	695a      	ldr	r2, [r3, #20]
 80056f2:	88fb      	ldrh	r3, [r7, #6]
 80056f4:	4013      	ands	r3, r2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d006      	beq.n	8005708 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80056fa:	4a05      	ldr	r2, [pc, #20]	@ (8005710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056fc:	88fb      	ldrh	r3, [r7, #6]
 80056fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005700:	88fb      	ldrh	r3, [r7, #6]
 8005702:	4618      	mov	r0, r3
 8005704:	f7fc fc5e 	bl	8001fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005708:	bf00      	nop
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40013c00 	.word	0x40013c00

08005714 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e12b      	b.n	800597e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d106      	bne.n	8005740 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fe f9be 	bl	8003abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2224      	movs	r2, #36	@ 0x24
 8005744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 0201 	bic.w	r2, r2, #1
 8005756:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005766:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005776:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005778:	f003 f884 	bl	8008884 <HAL_RCC_GetPCLK1Freq>
 800577c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	4a81      	ldr	r2, [pc, #516]	@ (8005988 <HAL_I2C_Init+0x274>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d807      	bhi.n	8005798 <HAL_I2C_Init+0x84>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	4a80      	ldr	r2, [pc, #512]	@ (800598c <HAL_I2C_Init+0x278>)
 800578c:	4293      	cmp	r3, r2
 800578e:	bf94      	ite	ls
 8005790:	2301      	movls	r3, #1
 8005792:	2300      	movhi	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	e006      	b.n	80057a6 <HAL_I2C_Init+0x92>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4a7d      	ldr	r2, [pc, #500]	@ (8005990 <HAL_I2C_Init+0x27c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	bf94      	ite	ls
 80057a0:	2301      	movls	r3, #1
 80057a2:	2300      	movhi	r3, #0
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e0e7      	b.n	800597e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a78      	ldr	r2, [pc, #480]	@ (8005994 <HAL_I2C_Init+0x280>)
 80057b2:	fba2 2303 	umull	r2, r3, r2, r3
 80057b6:	0c9b      	lsrs	r3, r3, #18
 80057b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	4a6a      	ldr	r2, [pc, #424]	@ (8005988 <HAL_I2C_Init+0x274>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d802      	bhi.n	80057e8 <HAL_I2C_Init+0xd4>
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	3301      	adds	r3, #1
 80057e6:	e009      	b.n	80057fc <HAL_I2C_Init+0xe8>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80057ee:	fb02 f303 	mul.w	r3, r2, r3
 80057f2:	4a69      	ldr	r2, [pc, #420]	@ (8005998 <HAL_I2C_Init+0x284>)
 80057f4:	fba2 2303 	umull	r2, r3, r2, r3
 80057f8:	099b      	lsrs	r3, r3, #6
 80057fa:	3301      	adds	r3, #1
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6812      	ldr	r2, [r2, #0]
 8005800:	430b      	orrs	r3, r1
 8005802:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800580e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	495c      	ldr	r1, [pc, #368]	@ (8005988 <HAL_I2C_Init+0x274>)
 8005818:	428b      	cmp	r3, r1
 800581a:	d819      	bhi.n	8005850 <HAL_I2C_Init+0x13c>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	1e59      	subs	r1, r3, #1
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	fbb1 f3f3 	udiv	r3, r1, r3
 800582a:	1c59      	adds	r1, r3, #1
 800582c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005830:	400b      	ands	r3, r1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <HAL_I2C_Init+0x138>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	1e59      	subs	r1, r3, #1
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	fbb1 f3f3 	udiv	r3, r1, r3
 8005844:	3301      	adds	r3, #1
 8005846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800584a:	e051      	b.n	80058f0 <HAL_I2C_Init+0x1dc>
 800584c:	2304      	movs	r3, #4
 800584e:	e04f      	b.n	80058f0 <HAL_I2C_Init+0x1dc>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d111      	bne.n	800587c <HAL_I2C_Init+0x168>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	1e58      	subs	r0, r3, #1
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6859      	ldr	r1, [r3, #4]
 8005860:	460b      	mov	r3, r1
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	440b      	add	r3, r1
 8005866:	fbb0 f3f3 	udiv	r3, r0, r3
 800586a:	3301      	adds	r3, #1
 800586c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	e012      	b.n	80058a2 <HAL_I2C_Init+0x18e>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	1e58      	subs	r0, r3, #1
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6859      	ldr	r1, [r3, #4]
 8005884:	460b      	mov	r3, r1
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	440b      	add	r3, r1
 800588a:	0099      	lsls	r1, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005892:	3301      	adds	r3, #1
 8005894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005898:	2b00      	cmp	r3, #0
 800589a:	bf0c      	ite	eq
 800589c:	2301      	moveq	r3, #1
 800589e:	2300      	movne	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <HAL_I2C_Init+0x196>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e022      	b.n	80058f0 <HAL_I2C_Init+0x1dc>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10e      	bne.n	80058d0 <HAL_I2C_Init+0x1bc>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1e58      	subs	r0, r3, #1
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6859      	ldr	r1, [r3, #4]
 80058ba:	460b      	mov	r3, r1
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	440b      	add	r3, r1
 80058c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80058c4:	3301      	adds	r3, #1
 80058c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058ce:	e00f      	b.n	80058f0 <HAL_I2C_Init+0x1dc>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	1e58      	subs	r0, r3, #1
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6859      	ldr	r1, [r3, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	440b      	add	r3, r1
 80058de:	0099      	lsls	r1, r3, #2
 80058e0:	440b      	add	r3, r1
 80058e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80058e6:	3301      	adds	r3, #1
 80058e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	6809      	ldr	r1, [r1, #0]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69da      	ldr	r2, [r3, #28]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	431a      	orrs	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	430a      	orrs	r2, r1
 8005912:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800591e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6911      	ldr	r1, [r2, #16]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	68d2      	ldr	r2, [r2, #12]
 800592a:	4311      	orrs	r1, r2
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6812      	ldr	r2, [r2, #0]
 8005930:	430b      	orrs	r3, r1
 8005932:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695a      	ldr	r2, [r3, #20]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	431a      	orrs	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	000186a0 	.word	0x000186a0
 800598c:	001e847f 	.word	0x001e847f
 8005990:	003d08ff 	.word	0x003d08ff
 8005994:	431bde83 	.word	0x431bde83
 8005998:	10624dd3 	.word	0x10624dd3

0800599c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	607a      	str	r2, [r7, #4]
 80059a6:	461a      	mov	r2, r3
 80059a8:	460b      	mov	r3, r1
 80059aa:	817b      	strh	r3, [r7, #10]
 80059ac:	4613      	mov	r3, r2
 80059ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80059b0:	f7fe fec4 	bl	800473c <HAL_GetTick>
 80059b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b20      	cmp	r3, #32
 80059c0:	f040 80e0 	bne.w	8005b84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	2319      	movs	r3, #25
 80059ca:	2201      	movs	r2, #1
 80059cc:	4970      	ldr	r1, [pc, #448]	@ (8005b90 <HAL_I2C_Master_Transmit+0x1f4>)
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f002 f8be 	bl	8007b50 <I2C_WaitOnFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80059da:	2302      	movs	r3, #2
 80059dc:	e0d3      	b.n	8005b86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_I2C_Master_Transmit+0x50>
 80059e8:	2302      	movs	r3, #2
 80059ea:	e0cc      	b.n	8005b86 <HAL_I2C_Master_Transmit+0x1ea>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d007      	beq.n	8005a12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0201 	orr.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2221      	movs	r2, #33	@ 0x21
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2210      	movs	r2, #16
 8005a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	893a      	ldrh	r2, [r7, #8]
 8005a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4a50      	ldr	r2, [pc, #320]	@ (8005b94 <HAL_I2C_Master_Transmit+0x1f8>)
 8005a52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005a54:	8979      	ldrh	r1, [r7, #10]
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	6a3a      	ldr	r2, [r7, #32]
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f001 fe80 	bl	8007760 <I2C_MasterRequestWrite>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e08d      	b.n	8005b86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	613b      	str	r3, [r7, #16]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	613b      	str	r3, [r7, #16]
 8005a7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005a80:	e066      	b.n	8005b50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	6a39      	ldr	r1, [r7, #32]
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f002 f938 	bl	8007cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00d      	beq.n	8005aae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d107      	bne.n	8005aaa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e06b      	b.n	8005b86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab2:	781a      	ldrb	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d11b      	bne.n	8005b24 <HAL_I2C_Master_Transmit+0x188>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d017      	beq.n	8005b24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af8:	781a      	ldrb	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	6a39      	ldr	r1, [r7, #32]
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f002 f928 	bl	8007d7e <I2C_WaitOnBTFFlagUntilTimeout>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00d      	beq.n	8005b50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d107      	bne.n	8005b4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e01a      	b.n	8005b86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d194      	bne.n	8005a82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b80:	2300      	movs	r3, #0
 8005b82:	e000      	b.n	8005b86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005b84:	2302      	movs	r3, #2
  }
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	00100002 	.word	0x00100002
 8005b94:	ffff0000 	.word	0xffff0000

08005b98 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b08c      	sub	sp, #48	@ 0x30
 8005b9c:	af02      	add	r7, sp, #8
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	817b      	strh	r3, [r7, #10]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bac:	f7fe fdc6 	bl	800473c <HAL_GetTick>
 8005bb0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	f040 820b 	bne.w	8005fd6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	2319      	movs	r3, #25
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	497c      	ldr	r1, [pc, #496]	@ (8005dbc <HAL_I2C_Master_Receive+0x224>)
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f001 ffc0 	bl	8007b50 <I2C_WaitOnFlagUntilTimeout>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e1fe      	b.n	8005fd8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_I2C_Master_Receive+0x50>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e1f7      	b.n	8005fd8 <HAL_I2C_Master_Receive+0x440>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d007      	beq.n	8005c0e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0201 	orr.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2222      	movs	r2, #34	@ 0x22
 8005c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2210      	movs	r2, #16
 8005c2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	893a      	ldrh	r2, [r7, #8]
 8005c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4a5c      	ldr	r2, [pc, #368]	@ (8005dc0 <HAL_I2C_Master_Receive+0x228>)
 8005c4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c50:	8979      	ldrh	r1, [r7, #10]
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c56:	68f8      	ldr	r0, [r7, #12]
 8005c58:	f001 fe04 	bl	8007864 <I2C_MasterRequestRead>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e1b8      	b.n	8005fd8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d113      	bne.n	8005c96 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c6e:	2300      	movs	r3, #0
 8005c70:	623b      	str	r3, [r7, #32]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	623b      	str	r3, [r7, #32]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	623b      	str	r3, [r7, #32]
 8005c82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	e18c      	b.n	8005fb0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d11b      	bne.n	8005cd6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cae:	2300      	movs	r3, #0
 8005cb0:	61fb      	str	r3, [r7, #28]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	61fb      	str	r3, [r7, #28]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	61fb      	str	r3, [r7, #28]
 8005cc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	e16c      	b.n	8005fb0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d11b      	bne.n	8005d16 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	61bb      	str	r3, [r7, #24]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	61bb      	str	r3, [r7, #24]
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	e14c      	b.n	8005fb0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005d3c:	e138      	b.n	8005fb0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d42:	2b03      	cmp	r3, #3
 8005d44:	f200 80f1 	bhi.w	8005f2a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d123      	bne.n	8005d98 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f002 f885 	bl	8007e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d001      	beq.n	8005d64 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e139      	b.n	8005fd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	691a      	ldr	r2, [r3, #16]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d76:	1c5a      	adds	r2, r3, #1
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d96:	e10b      	b.n	8005fb0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d14e      	bne.n	8005e3e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da6:	2200      	movs	r2, #0
 8005da8:	4906      	ldr	r1, [pc, #24]	@ (8005dc4 <HAL_I2C_Master_Receive+0x22c>)
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f001 fed0 	bl	8007b50 <I2C_WaitOnFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e10e      	b.n	8005fd8 <HAL_I2C_Master_Receive+0x440>
 8005dba:	bf00      	nop
 8005dbc:	00100002 	.word	0x00100002
 8005dc0:	ffff0000 	.word	0xffff0000
 8005dc4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691a      	ldr	r2, [r3, #16]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e3c:	e0b8      	b.n	8005fb0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e44:	2200      	movs	r2, #0
 8005e46:	4966      	ldr	r1, [pc, #408]	@ (8005fe0 <HAL_I2C_Master_Receive+0x448>)
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f001 fe81 	bl	8007b50 <I2C_WaitOnFlagUntilTimeout>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e0bf      	b.n	8005fd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691a      	ldr	r2, [r3, #16]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	3b01      	subs	r3, #1
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	494f      	ldr	r1, [pc, #316]	@ (8005fe0 <HAL_I2C_Master_Receive+0x448>)
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f001 fe53 	bl	8007b50 <I2C_WaitOnFlagUntilTimeout>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e091      	b.n	8005fd8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ec2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691a      	ldr	r2, [r3, #16]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	691a      	ldr	r2, [r3, #16]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	3b01      	subs	r3, #1
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f28:	e042      	b.n	8005fb0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f001 ff98 	bl	8007e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e04c      	b.n	8005fd8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	f003 0304 	and.w	r3, r3, #4
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d118      	bne.n	8005fb0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f47f aec2 	bne.w	8005d3e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e000      	b.n	8005fd8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005fd6:	2302      	movs	r3, #2
  }
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3728      	adds	r7, #40	@ 0x28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	00010004 	.word	0x00010004

08005fe4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006004:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800600c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800600e:	7bfb      	ldrb	r3, [r7, #15]
 8006010:	2b10      	cmp	r3, #16
 8006012:	d003      	beq.n	800601c <HAL_I2C_EV_IRQHandler+0x38>
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b40      	cmp	r3, #64	@ 0x40
 8006018:	f040 80b1 	bne.w	800617e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10d      	bne.n	8006052 <HAL_I2C_EV_IRQHandler+0x6e>
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800603c:	d003      	beq.n	8006046 <HAL_I2C_EV_IRQHandler+0x62>
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006044:	d101      	bne.n	800604a <HAL_I2C_EV_IRQHandler+0x66>
 8006046:	2301      	movs	r3, #1
 8006048:	e000      	b.n	800604c <HAL_I2C_EV_IRQHandler+0x68>
 800604a:	2300      	movs	r3, #0
 800604c:	2b01      	cmp	r3, #1
 800604e:	f000 8114 	beq.w	800627a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <HAL_I2C_EV_IRQHandler+0x90>
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006062:	2b00      	cmp	r3, #0
 8006064:	d006      	beq.n	8006074 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f001 ff81 	bl	8007f6e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 fd5e 	bl	8006b2e <I2C_Master_SB>
 8006072:	e083      	b.n	800617c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d008      	beq.n	8006090 <HAL_I2C_EV_IRQHandler+0xac>
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 fdd6 	bl	8006c3a <I2C_Master_ADD10>
 800608e:	e075      	b.n	800617c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	f003 0302 	and.w	r3, r3, #2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d008      	beq.n	80060ac <HAL_I2C_EV_IRQHandler+0xc8>
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 fdf2 	bl	8006c8e <I2C_Master_ADDR>
 80060aa:	e067      	b.n	800617c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d036      	beq.n	8006124 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060c4:	f000 80db 	beq.w	800627e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00d      	beq.n	80060ee <HAL_I2C_EV_IRQHandler+0x10a>
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d008      	beq.n	80060ee <HAL_I2C_EV_IRQHandler+0x10a>
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d103      	bne.n	80060ee <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f9d6 	bl	8006498 <I2C_MasterTransmit_TXE>
 80060ec:	e046      	b.n	800617c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 80c2 	beq.w	800627e <HAL_I2C_EV_IRQHandler+0x29a>
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80bc 	beq.w	800627e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006106:	7bbb      	ldrb	r3, [r7, #14]
 8006108:	2b21      	cmp	r3, #33	@ 0x21
 800610a:	d103      	bne.n	8006114 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fa5f 	bl	80065d0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006112:	e0b4      	b.n	800627e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	2b40      	cmp	r3, #64	@ 0x40
 8006118:	f040 80b1 	bne.w	800627e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 facd 	bl	80066bc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006122:	e0ac      	b.n	800627e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800612e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006132:	f000 80a4 	beq.w	800627e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00d      	beq.n	800615c <HAL_I2C_EV_IRQHandler+0x178>
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006146:	2b00      	cmp	r3, #0
 8006148:	d008      	beq.n	800615c <HAL_I2C_EV_IRQHandler+0x178>
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d103      	bne.n	800615c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fb45 	bl	80067e4 <I2C_MasterReceive_RXNE>
 800615a:	e00f      	b.n	800617c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f003 0304 	and.w	r3, r3, #4
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 808b 	beq.w	800627e <HAL_I2C_EV_IRQHandler+0x29a>
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 8085 	beq.w	800627e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fbf0 	bl	800695a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800617a:	e080      	b.n	800627e <HAL_I2C_EV_IRQHandler+0x29a>
 800617c:	e07f      	b.n	800627e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006182:	2b00      	cmp	r3, #0
 8006184:	d004      	beq.n	8006190 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	e007      	b.n	80061a0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d011      	beq.n	80061ce <HAL_I2C_EV_IRQHandler+0x1ea>
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00c      	beq.n	80061ce <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80061c4:	69b9      	ldr	r1, [r7, #24]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 ffb0 	bl	800712c <I2C_Slave_ADDR>
 80061cc:	e05a      	b.n	8006284 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d008      	beq.n	80061ea <HAL_I2C_EV_IRQHandler+0x206>
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 ffea 	bl	80071bc <I2C_Slave_STOPF>
 80061e8:	e04c      	b.n	8006284 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80061ea:	7bbb      	ldrb	r3, [r7, #14]
 80061ec:	2b21      	cmp	r3, #33	@ 0x21
 80061ee:	d002      	beq.n	80061f6 <HAL_I2C_EV_IRQHandler+0x212>
 80061f0:	7bbb      	ldrb	r3, [r7, #14]
 80061f2:	2b29      	cmp	r3, #41	@ 0x29
 80061f4:	d120      	bne.n	8006238 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00d      	beq.n	800621c <HAL_I2C_EV_IRQHandler+0x238>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006206:	2b00      	cmp	r3, #0
 8006208:	d008      	beq.n	800621c <HAL_I2C_EV_IRQHandler+0x238>
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d103      	bne.n	800621c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fecb 	bl	8006fb0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800621a:	e032      	b.n	8006282 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	f003 0304 	and.w	r3, r3, #4
 8006222:	2b00      	cmp	r3, #0
 8006224:	d02d      	beq.n	8006282 <HAL_I2C_EV_IRQHandler+0x29e>
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800622c:	2b00      	cmp	r3, #0
 800622e:	d028      	beq.n	8006282 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fefa 	bl	800702a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006236:	e024      	b.n	8006282 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00d      	beq.n	800625e <HAL_I2C_EV_IRQHandler+0x27a>
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006248:	2b00      	cmp	r3, #0
 800624a:	d008      	beq.n	800625e <HAL_I2C_EV_IRQHandler+0x27a>
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	f003 0304 	and.w	r3, r3, #4
 8006252:	2b00      	cmp	r3, #0
 8006254:	d103      	bne.n	800625e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 ff08 	bl	800706c <I2C_SlaveReceive_RXNE>
 800625c:	e012      	b.n	8006284 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00d      	beq.n	8006284 <HAL_I2C_EV_IRQHandler+0x2a0>
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800626e:	2b00      	cmp	r3, #0
 8006270:	d008      	beq.n	8006284 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 ff38 	bl	80070e8 <I2C_SlaveReceive_BTF>
 8006278:	e004      	b.n	8006284 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800627a:	bf00      	nop
 800627c:	e002      	b.n	8006284 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800627e:	bf00      	nop
 8006280:	e000      	b.n	8006284 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006282:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006284:	3720      	adds	r7, #32
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b08a      	sub	sp, #40	@ 0x28
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80062a2:	2300      	movs	r3, #0
 80062a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062ac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00d      	beq.n	80062d4 <HAL_I2C_ER_IRQHandler+0x4a>
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d008      	beq.n	80062d4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80062c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c4:	f043 0301 	orr.w	r3, r3, #1
 80062c8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80062d2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00d      	beq.n	80062fa <HAL_I2C_ER_IRQHandler+0x70>
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d008      	beq.n	80062fa <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80062e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ea:	f043 0302 	orr.w	r3, r3, #2
 80062ee:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80062f8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006300:	2b00      	cmp	r3, #0
 8006302:	d03e      	beq.n	8006382 <HAL_I2C_ER_IRQHandler+0xf8>
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800630a:	2b00      	cmp	r3, #0
 800630c:	d039      	beq.n	8006382 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800630e:	7efb      	ldrb	r3, [r7, #27]
 8006310:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006316:	b29b      	uxth	r3, r3
 8006318:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006320:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006326:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006328:	7ebb      	ldrb	r3, [r7, #26]
 800632a:	2b20      	cmp	r3, #32
 800632c:	d112      	bne.n	8006354 <HAL_I2C_ER_IRQHandler+0xca>
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10f      	bne.n	8006354 <HAL_I2C_ER_IRQHandler+0xca>
 8006334:	7cfb      	ldrb	r3, [r7, #19]
 8006336:	2b21      	cmp	r3, #33	@ 0x21
 8006338:	d008      	beq.n	800634c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800633a:	7cfb      	ldrb	r3, [r7, #19]
 800633c:	2b29      	cmp	r3, #41	@ 0x29
 800633e:	d005      	beq.n	800634c <HAL_I2C_ER_IRQHandler+0xc2>
 8006340:	7cfb      	ldrb	r3, [r7, #19]
 8006342:	2b28      	cmp	r3, #40	@ 0x28
 8006344:	d106      	bne.n	8006354 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b21      	cmp	r3, #33	@ 0x21
 800634a:	d103      	bne.n	8006354 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 f865 	bl	800741c <I2C_Slave_AF>
 8006352:	e016      	b.n	8006382 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800635c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	f043 0304 	orr.w	r3, r3, #4
 8006364:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006366:	7efb      	ldrb	r3, [r7, #27]
 8006368:	2b10      	cmp	r3, #16
 800636a:	d002      	beq.n	8006372 <HAL_I2C_ER_IRQHandler+0xe8>
 800636c:	7efb      	ldrb	r3, [r7, #27]
 800636e:	2b40      	cmp	r3, #64	@ 0x40
 8006370:	d107      	bne.n	8006382 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006380:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006382:	6a3b      	ldr	r3, [r7, #32]
 8006384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00d      	beq.n	80063a8 <HAL_I2C_ER_IRQHandler+0x11e>
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006392:	2b00      	cmp	r3, #0
 8006394:	d008      	beq.n	80063a8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	f043 0308 	orr.w	r3, r3, #8
 800639c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80063a6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80063a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d008      	beq.n	80063c0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	431a      	orrs	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f001 f89e 	bl	80074fc <I2C_ITError>
  }
}
 80063c0:	bf00      	nop
 80063c2:	3728      	adds	r7, #40	@ 0x28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	460b      	mov	r3, r1
 8006422:	70fb      	strb	r3, [r7, #3]
 8006424:	4613      	mov	r3, r2
 8006426:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d150      	bne.n	8006560 <I2C_MasterTransmit_TXE+0xc8>
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	2b21      	cmp	r3, #33	@ 0x21
 80064c2:	d14d      	bne.n	8006560 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d01d      	beq.n	8006506 <I2C_MasterTransmit_TXE+0x6e>
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2b20      	cmp	r3, #32
 80064ce:	d01a      	beq.n	8006506 <I2C_MasterTransmit_TXE+0x6e>
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80064d6:	d016      	beq.n	8006506 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80064e6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2211      	movs	r2, #17
 80064ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff ff62 	bl	80063c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006504:	e060      	b.n	80065c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006514:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006524:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b40      	cmp	r3, #64	@ 0x40
 800653e:	d107      	bne.n	8006550 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff ff7d 	bl	8006448 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800654e:	e03b      	b.n	80065c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff ff35 	bl	80063c8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800655e:	e033      	b.n	80065c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	2b21      	cmp	r3, #33	@ 0x21
 8006564:	d005      	beq.n	8006572 <I2C_MasterTransmit_TXE+0xda>
 8006566:	7bbb      	ldrb	r3, [r7, #14]
 8006568:	2b40      	cmp	r3, #64	@ 0x40
 800656a:	d12d      	bne.n	80065c8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	2b22      	cmp	r3, #34	@ 0x22
 8006570:	d12a      	bne.n	80065c8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d108      	bne.n	800658e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800658a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800658c:	e01c      	b.n	80065c8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b40      	cmp	r3, #64	@ 0x40
 8006598:	d103      	bne.n	80065a2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f88e 	bl	80066bc <I2C_MemoryTransmit_TXE_BTF>
}
 80065a0:	e012      	b.n	80065c8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a6:	781a      	ldrb	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065bc:	b29b      	uxth	r3, r3
 80065be:	3b01      	subs	r3, #1
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80065c6:	e7ff      	b.n	80065c8 <I2C_MasterTransmit_TXE+0x130>
 80065c8:	bf00      	nop
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065dc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b21      	cmp	r3, #33	@ 0x21
 80065e8:	d164      	bne.n	80066b4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d012      	beq.n	800661a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f8:	781a      	ldrb	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800660e:	b29b      	uxth	r3, r3
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006618:	e04c      	b.n	80066b4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b08      	cmp	r3, #8
 800661e:	d01d      	beq.n	800665c <I2C_MasterTransmit_BTF+0x8c>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b20      	cmp	r3, #32
 8006624:	d01a      	beq.n	800665c <I2C_MasterTransmit_BTF+0x8c>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800662c:	d016      	beq.n	800665c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800663c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2211      	movs	r2, #17
 8006642:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7ff feb7 	bl	80063c8 <HAL_I2C_MasterTxCpltCallback>
}
 800665a:	e02b      	b.n	80066b4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800666a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800667a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2220      	movs	r2, #32
 8006686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b40      	cmp	r3, #64	@ 0x40
 8006694:	d107      	bne.n	80066a6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff fed2 	bl	8006448 <HAL_I2C_MemTxCpltCallback>
}
 80066a4:	e006      	b.n	80066b4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff fe8a 	bl	80063c8 <HAL_I2C_MasterTxCpltCallback>
}
 80066b4:	bf00      	nop
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d11d      	bne.n	8006710 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d10b      	bne.n	80066f4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ec:	1c9a      	adds	r2, r3, #2
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80066f2:	e073      	b.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	121b      	asrs	r3, r3, #8
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800670e:	e065      	b.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006714:	2b01      	cmp	r3, #1
 8006716:	d10b      	bne.n	8006730 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800671c:	b2da      	uxtb	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800672e:	e055      	b.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006734:	2b02      	cmp	r3, #2
 8006736:	d151      	bne.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	2b22      	cmp	r3, #34	@ 0x22
 800673c:	d10d      	bne.n	800675a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800674c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006758:	e040      	b.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800675e:	b29b      	uxth	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d015      	beq.n	8006790 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006764:	7bfb      	ldrb	r3, [r7, #15]
 8006766:	2b21      	cmp	r3, #33	@ 0x21
 8006768:	d112      	bne.n	8006790 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676e:	781a      	ldrb	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006784:	b29b      	uxth	r3, r3
 8006786:	3b01      	subs	r3, #1
 8006788:	b29a      	uxth	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800678e:	e025      	b.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006794:	b29b      	uxth	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d120      	bne.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x120>
 800679a:	7bfb      	ldrb	r3, [r7, #15]
 800679c:	2b21      	cmp	r3, #33	@ 0x21
 800679e:	d11d      	bne.n	80067dc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80067ae:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7ff fe36 	bl	8006448 <HAL_I2C_MemTxCpltCallback>
}
 80067dc:	bf00      	nop
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	2b22      	cmp	r3, #34	@ 0x22
 80067f6:	f040 80ac 	bne.w	8006952 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067fe:	b29b      	uxth	r3, r3
 8006800:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b03      	cmp	r3, #3
 8006806:	d921      	bls.n	800684c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	691a      	ldr	r2, [r3, #16]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006832:	b29b      	uxth	r3, r3
 8006834:	2b03      	cmp	r3, #3
 8006836:	f040 808c 	bne.w	8006952 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006848:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800684a:	e082      	b.n	8006952 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006850:	2b02      	cmp	r3, #2
 8006852:	d075      	beq.n	8006940 <I2C_MasterReceive_RXNE+0x15c>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d002      	beq.n	8006860 <I2C_MasterReceive_RXNE+0x7c>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d16f      	bne.n	8006940 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 facd 	bl	8007e00 <I2C_WaitOnSTOPRequestThroughIT>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d142      	bne.n	80068f2 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800687a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800688a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	691a      	ldr	r2, [r3, #16]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006896:	b2d2      	uxtb	r2, r2
 8006898:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b40      	cmp	r3, #64	@ 0x40
 80068c4:	d10a      	bne.n	80068dc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff fdc1 	bl	800645c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80068da:	e03a      	b.n	8006952 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2212      	movs	r2, #18
 80068e8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7ff fd76 	bl	80063dc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80068f0:	e02f      	b.n	8006952 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006900:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	691a      	ldr	r2, [r3, #16]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f7ff fd99 	bl	8006470 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800693e:	e008      	b.n	8006952 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800694e:	605a      	str	r2, [r3, #4]
}
 8006950:	e7ff      	b.n	8006952 <I2C_MasterReceive_RXNE+0x16e>
 8006952:	bf00      	nop
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006966:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800696c:	b29b      	uxth	r3, r3
 800696e:	2b04      	cmp	r3, #4
 8006970:	d11b      	bne.n	80069aa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006980:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80069a8:	e0bd      	b.n	8006b26 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d129      	bne.n	8006a08 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069c2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d00a      	beq.n	80069e0 <I2C_MasterReceive_BTF+0x86>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2b02      	cmp	r3, #2
 80069ce:	d007      	beq.n	80069e0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f2:	1c5a      	adds	r2, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	3b01      	subs	r3, #1
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006a06:	e08e      	b.n	8006b26 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d176      	bne.n	8006b00 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d002      	beq.n	8006a1e <I2C_MasterReceive_BTF+0xc4>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b10      	cmp	r3, #16
 8006a1c:	d108      	bne.n	8006a30 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	e019      	b.n	8006a64 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d002      	beq.n	8006a3c <I2C_MasterReceive_BTF+0xe2>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d108      	bne.n	8006a4e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	e00a      	b.n	8006a64 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2b10      	cmp	r3, #16
 8006a52:	d007      	beq.n	8006a64 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a62:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691a      	ldr	r2, [r3, #16]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6e:	b2d2      	uxtb	r2, r2
 8006a70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691a      	ldr	r2, [r3, #16]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9c:	1c5a      	adds	r2, r3, #1
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006abe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b40      	cmp	r3, #64	@ 0x40
 8006ad2:	d10a      	bne.n	8006aea <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7ff fcba 	bl	800645c <HAL_I2C_MemRxCpltCallback>
}
 8006ae8:	e01d      	b.n	8006b26 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2212      	movs	r2, #18
 8006af6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff fc6f 	bl	80063dc <HAL_I2C_MasterRxCpltCallback>
}
 8006afe:	e012      	b.n	8006b26 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691a      	ldr	r2, [r3, #16]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006b26:	bf00      	nop
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b40      	cmp	r3, #64	@ 0x40
 8006b40:	d117      	bne.n	8006b72 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d109      	bne.n	8006b5e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	461a      	mov	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b5a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006b5c:	e067      	b.n	8006c2e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	f043 0301 	orr.w	r3, r3, #1
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	611a      	str	r2, [r3, #16]
}
 8006b70:	e05d      	b.n	8006c2e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b7a:	d133      	bne.n	8006be4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b21      	cmp	r3, #33	@ 0x21
 8006b86:	d109      	bne.n	8006b9c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b98:	611a      	str	r2, [r3, #16]
 8006b9a:	e008      	b.n	8006bae <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	f043 0301 	orr.w	r3, r3, #1
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d004      	beq.n	8006bc0 <I2C_Master_SB+0x92>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d108      	bne.n	8006bd2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d032      	beq.n	8006c2e <I2C_Master_SB+0x100>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d02d      	beq.n	8006c2e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006be0:	605a      	str	r2, [r3, #4]
}
 8006be2:	e024      	b.n	8006c2e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d10e      	bne.n	8006c0a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	11db      	asrs	r3, r3, #7
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	f003 0306 	and.w	r3, r3, #6
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	f063 030f 	orn	r3, r3, #15
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	611a      	str	r2, [r3, #16]
}
 8006c08:	e011      	b.n	8006c2e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d10d      	bne.n	8006c2e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	11db      	asrs	r3, r3, #7
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	f003 0306 	and.w	r3, r3, #6
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	f063 030e 	orn	r3, r3, #14
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	611a      	str	r2, [r3, #16]
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d004      	beq.n	8006c60 <I2C_Master_ADD10+0x26>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d108      	bne.n	8006c72 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00c      	beq.n	8006c82 <I2C_Master_ADD10+0x48>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c80:	605a      	str	r2, [r3, #4]
  }
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b091      	sub	sp, #68	@ 0x44
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c9c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006caa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	2b22      	cmp	r3, #34	@ 0x22
 8006cb6:	f040 8169 	bne.w	8006f8c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d10f      	bne.n	8006ce2 <I2C_Master_ADDR+0x54>
 8006cc2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006cc6:	2b40      	cmp	r3, #64	@ 0x40
 8006cc8:	d10b      	bne.n	8006ce2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cca:	2300      	movs	r3, #0
 8006ccc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce0:	e160      	b.n	8006fa4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d11d      	bne.n	8006d26 <I2C_Master_ADDR+0x98>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006cf2:	d118      	bne.n	8006d26 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d18:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	651a      	str	r2, [r3, #80]	@ 0x50
 8006d24:	e13e      	b.n	8006fa4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d113      	bne.n	8006d58 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d30:	2300      	movs	r3, #0
 8006d32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	e115      	b.n	8006f84 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	f040 808a 	bne.w	8006e78 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d66:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d6a:	d137      	bne.n	8006ddc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d7a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d8a:	d113      	bne.n	8006db4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d9a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8006db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db2:	e0e7      	b.n	8006f84 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006db4:	2300      	movs	r3, #0
 8006db6:	623b      	str	r3, [r7, #32]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	623b      	str	r3, [r7, #32]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	623b      	str	r3, [r7, #32]
 8006dc8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	e0d3      	b.n	8006f84 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dde:	2b08      	cmp	r3, #8
 8006de0:	d02e      	beq.n	8006e40 <I2C_Master_ADDR+0x1b2>
 8006de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d02b      	beq.n	8006e40 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dea:	2b12      	cmp	r3, #18
 8006dec:	d102      	bne.n	8006df4 <I2C_Master_ADDR+0x166>
 8006dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d125      	bne.n	8006e40 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df6:	2b04      	cmp	r3, #4
 8006df8:	d00e      	beq.n	8006e18 <I2C_Master_ADDR+0x18a>
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d00b      	beq.n	8006e18 <I2C_Master_ADDR+0x18a>
 8006e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e02:	2b10      	cmp	r3, #16
 8006e04:	d008      	beq.n	8006e18 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	e007      	b.n	8006e28 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006e26:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61fb      	str	r3, [r7, #28]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	61fb      	str	r3, [r7, #28]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	61fb      	str	r3, [r7, #28]
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	e0a1      	b.n	8006f84 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e4e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e50:	2300      	movs	r3, #0
 8006e52:	61bb      	str	r3, [r7, #24]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	61bb      	str	r3, [r7, #24]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	61bb      	str	r3, [r7, #24]
 8006e64:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	e085      	b.n	8006f84 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d14d      	bne.n	8006f1e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d016      	beq.n	8006eb6 <I2C_Master_ADDR+0x228>
 8006e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d013      	beq.n	8006eb6 <I2C_Master_ADDR+0x228>
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e90:	2b10      	cmp	r3, #16
 8006e92:	d010      	beq.n	8006eb6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ea2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	e007      	b.n	8006ec6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ec4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ed0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ed4:	d117      	bne.n	8006f06 <I2C_Master_ADDR+0x278>
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006edc:	d00b      	beq.n	8006ef6 <I2C_Master_ADDR+0x268>
 8006ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d008      	beq.n	8006ef6 <I2C_Master_ADDR+0x268>
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee6:	2b08      	cmp	r3, #8
 8006ee8:	d005      	beq.n	8006ef6 <I2C_Master_ADDR+0x268>
 8006eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eec:	2b10      	cmp	r3, #16
 8006eee:	d002      	beq.n	8006ef6 <I2C_Master_ADDR+0x268>
 8006ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	d107      	bne.n	8006f06 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f04:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f06:	2300      	movs	r3, #0
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	617b      	str	r3, [r7, #20]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	617b      	str	r3, [r7, #20]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	e032      	b.n	8006f84 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f2c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f3c:	d117      	bne.n	8006f6e <I2C_Master_ADDR+0x2e0>
 8006f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f44:	d00b      	beq.n	8006f5e <I2C_Master_ADDR+0x2d0>
 8006f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d008      	beq.n	8006f5e <I2C_Master_ADDR+0x2d0>
 8006f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4e:	2b08      	cmp	r3, #8
 8006f50:	d005      	beq.n	8006f5e <I2C_Master_ADDR+0x2d0>
 8006f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f54:	2b10      	cmp	r3, #16
 8006f56:	d002      	beq.n	8006f5e <I2C_Master_ADDR+0x2d0>
 8006f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d107      	bne.n	8006f6e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685a      	ldr	r2, [r3, #4]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f6c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f6e:	2300      	movs	r3, #0
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	613b      	str	r3, [r7, #16]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006f8a:	e00b      	b.n	8006fa4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
}
 8006fa2:	e7ff      	b.n	8006fa4 <I2C_Master_ADDR+0x316>
 8006fa4:	bf00      	nop
 8006fa6:	3744      	adds	r7, #68	@ 0x44
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fbe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d02b      	beq.n	8007022 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fce:	781a      	ldrb	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d114      	bne.n	8007022 <I2C_SlaveTransmit_TXE+0x72>
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	2b29      	cmp	r3, #41	@ 0x29
 8006ffc:	d111      	bne.n	8007022 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800700c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2221      	movs	r2, #33	@ 0x21
 8007012:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2228      	movs	r2, #40	@ 0x28
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff f9e7 	bl	80063f0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007022:	bf00      	nop
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007036:	b29b      	uxth	r3, r3
 8007038:	2b00      	cmp	r3, #0
 800703a:	d011      	beq.n	8007060 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007040:	781a      	ldrb	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007056:	b29b      	uxth	r3, r3
 8007058:	3b01      	subs	r3, #1
 800705a:	b29a      	uxth	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800707a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007080:	b29b      	uxth	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d02c      	beq.n	80070e0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	3b01      	subs	r3, #1
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d114      	bne.n	80070e0 <I2C_SlaveReceive_RXNE+0x74>
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80070ba:	d111      	bne.n	80070e0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070ca:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2222      	movs	r2, #34	@ 0x22
 80070d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2228      	movs	r2, #40	@ 0x28
 80070d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7ff f992 	bl	8006404 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80070e0:	bf00      	nop
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d012      	beq.n	8007120 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	691a      	ldr	r2, [r3, #16]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007104:	b2d2      	uxtb	r2, r2
 8007106:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007116:	b29b      	uxth	r3, r3
 8007118:	3b01      	subs	r3, #1
 800711a:	b29a      	uxth	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007136:	2300      	movs	r3, #0
 8007138:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007140:	b2db      	uxtb	r3, r3
 8007142:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007146:	2b28      	cmp	r3, #40	@ 0x28
 8007148:	d125      	bne.n	8007196 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007158:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007164:	2301      	movs	r3, #1
 8007166:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800716e:	2b00      	cmp	r3, #0
 8007170:	d103      	bne.n	800717a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	81bb      	strh	r3, [r7, #12]
 8007178:	e002      	b.n	8007180 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007188:	89ba      	ldrh	r2, [r7, #12]
 800718a:	7bfb      	ldrb	r3, [r7, #15]
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff f942 	bl	8006418 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007194:	e00e      	b.n	80071b4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007196:	2300      	movs	r3, #0
 8007198:	60bb      	str	r3, [r7, #8]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	60bb      	str	r3, [r7, #8]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	60bb      	str	r3, [r7, #8]
 80071aa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80071b4:	bf00      	nop
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071ca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685a      	ldr	r2, [r3, #4]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80071da:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80071dc:	2300      	movs	r3, #0
 80071de:	60bb      	str	r3, [r7, #8]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	60bb      	str	r3, [r7, #8]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0201 	orr.w	r2, r2, #1
 80071f6:	601a      	str	r2, [r3, #0]
 80071f8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007208:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007214:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007218:	d172      	bne.n	8007300 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	2b22      	cmp	r3, #34	@ 0x22
 800721e:	d002      	beq.n	8007226 <I2C_Slave_STOPF+0x6a>
 8007220:	7bfb      	ldrb	r3, [r7, #15]
 8007222:	2b2a      	cmp	r3, #42	@ 0x2a
 8007224:	d135      	bne.n	8007292 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	b29a      	uxth	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007238:	b29b      	uxth	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d005      	beq.n	800724a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007242:	f043 0204 	orr.w	r2, r3, #4
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685a      	ldr	r2, [r3, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007258:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725e:	4618      	mov	r0, r3
 8007260:	f7fd ffb4 	bl	80051cc <HAL_DMA_GetState>
 8007264:	4603      	mov	r3, r0
 8007266:	2b01      	cmp	r3, #1
 8007268:	d049      	beq.n	80072fe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726e:	4a69      	ldr	r2, [pc, #420]	@ (8007414 <I2C_Slave_STOPF+0x258>)
 8007270:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007276:	4618      	mov	r0, r3
 8007278:	f7fd fdfc 	bl	8004e74 <HAL_DMA_Abort_IT>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d03d      	beq.n	80072fe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800728c:	4610      	mov	r0, r2
 800728e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007290:	e035      	b.n	80072fe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	b29a      	uxth	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d005      	beq.n	80072b6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ae:	f043 0204 	orr.w	r2, r3, #4
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80072c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fd ff7e 	bl	80051cc <HAL_DMA_GetState>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d014      	beq.n	8007300 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072da:	4a4e      	ldr	r2, [pc, #312]	@ (8007414 <I2C_Slave_STOPF+0x258>)
 80072dc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fd fdc6 	bl	8004e74 <HAL_DMA_Abort_IT>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d008      	beq.n	8007300 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80072f8:	4610      	mov	r0, r2
 80072fa:	4798      	blx	r3
 80072fc:	e000      	b.n	8007300 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072fe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007304:	b29b      	uxth	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	d03e      	beq.n	8007388 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b04      	cmp	r3, #4
 8007316:	d112      	bne.n	800733e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691a      	ldr	r2, [r3, #16]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007334:	b29b      	uxth	r3, r3
 8007336:	3b01      	subs	r3, #1
 8007338:	b29a      	uxth	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007348:	2b40      	cmp	r3, #64	@ 0x40
 800734a:	d112      	bne.n	8007372 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	691a      	ldr	r2, [r3, #16]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007356:	b2d2      	uxtb	r2, r2
 8007358:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735e:	1c5a      	adds	r2, r3, #1
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007368:	b29b      	uxth	r3, r3
 800736a:	3b01      	subs	r3, #1
 800736c:	b29a      	uxth	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007376:	b29b      	uxth	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d005      	beq.n	8007388 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007380:	f043 0204 	orr.w	r2, r3, #4
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f8b3 	bl	80074fc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007396:	e039      	b.n	800740c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	2b2a      	cmp	r3, #42	@ 0x2a
 800739c:	d109      	bne.n	80073b2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2228      	movs	r2, #40	@ 0x28
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f7ff f829 	bl	8006404 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b28      	cmp	r3, #40	@ 0x28
 80073bc:	d111      	bne.n	80073e2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a15      	ldr	r2, [pc, #84]	@ (8007418 <I2C_Slave_STOPF+0x25c>)
 80073c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2220      	movs	r2, #32
 80073ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff f82a 	bl	8006434 <HAL_I2C_ListenCpltCallback>
}
 80073e0:	e014      	b.n	800740c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e6:	2b22      	cmp	r3, #34	@ 0x22
 80073e8:	d002      	beq.n	80073f0 <I2C_Slave_STOPF+0x234>
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
 80073ec:	2b22      	cmp	r3, #34	@ 0x22
 80073ee:	d10d      	bne.n	800740c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fe fffc 	bl	8006404 <HAL_I2C_SlaveRxCpltCallback>
}
 800740c:	bf00      	nop
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	08007a01 	.word	0x08007a01
 8007418:	ffff0000 	.word	0xffff0000

0800741c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800742a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007430:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2b08      	cmp	r3, #8
 8007436:	d002      	beq.n	800743e <I2C_Slave_AF+0x22>
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	2b20      	cmp	r3, #32
 800743c:	d129      	bne.n	8007492 <I2C_Slave_AF+0x76>
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	2b28      	cmp	r3, #40	@ 0x28
 8007442:	d126      	bne.n	8007492 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a2c      	ldr	r2, [pc, #176]	@ (80074f8 <I2C_Slave_AF+0xdc>)
 8007448:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007458:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007462:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007472:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2220      	movs	r2, #32
 800747e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7fe ffd2 	bl	8006434 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007490:	e02e      	b.n	80074f0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	2b21      	cmp	r3, #33	@ 0x21
 8007496:	d126      	bne.n	80074e6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a17      	ldr	r2, [pc, #92]	@ (80074f8 <I2C_Slave_AF+0xdc>)
 800749c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2221      	movs	r2, #33	@ 0x21
 80074a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2220      	movs	r2, #32
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80074c2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80074cc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80074dc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7fe ff86 	bl	80063f0 <HAL_I2C_SlaveTxCpltCallback>
}
 80074e4:	e004      	b.n	80074f0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80074ee:	615a      	str	r2, [r3, #20]
}
 80074f0:	bf00      	nop
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	ffff0000 	.word	0xffff0000

080074fc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800750a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007512:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007514:	7bbb      	ldrb	r3, [r7, #14]
 8007516:	2b10      	cmp	r3, #16
 8007518:	d002      	beq.n	8007520 <I2C_ITError+0x24>
 800751a:	7bbb      	ldrb	r3, [r7, #14]
 800751c:	2b40      	cmp	r3, #64	@ 0x40
 800751e:	d10a      	bne.n	8007536 <I2C_ITError+0x3a>
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	2b22      	cmp	r3, #34	@ 0x22
 8007524:	d107      	bne.n	8007536 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007534:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800753c:	2b28      	cmp	r3, #40	@ 0x28
 800753e:	d107      	bne.n	8007550 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2228      	movs	r2, #40	@ 0x28
 800754a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800754e:	e015      	b.n	800757c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800755a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800755e:	d00a      	beq.n	8007576 <I2C_ITError+0x7a>
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	2b60      	cmp	r3, #96	@ 0x60
 8007564:	d007      	beq.n	8007576 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2220      	movs	r2, #32
 800756a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800758a:	d162      	bne.n	8007652 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800759a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d020      	beq.n	80075ec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075ae:	4a6a      	ldr	r2, [pc, #424]	@ (8007758 <I2C_ITError+0x25c>)
 80075b0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fd fc5c 	bl	8004e74 <HAL_DMA_Abort_IT>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 8089 	beq.w	80076d6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f022 0201 	bic.w	r2, r2, #1
 80075d2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80075e6:	4610      	mov	r0, r2
 80075e8:	4798      	blx	r3
 80075ea:	e074      	b.n	80076d6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f0:	4a59      	ldr	r2, [pc, #356]	@ (8007758 <I2C_ITError+0x25c>)
 80075f2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f8:	4618      	mov	r0, r3
 80075fa:	f7fd fc3b 	bl	8004e74 <HAL_DMA_Abort_IT>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d068      	beq.n	80076d6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760e:	2b40      	cmp	r3, #64	@ 0x40
 8007610:	d10b      	bne.n	800762a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	691a      	ldr	r2, [r3, #16]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800761c:	b2d2      	uxtb	r2, r2
 800761e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 0201 	bic.w	r2, r2, #1
 8007638:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2220      	movs	r2, #32
 800763e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800764c:	4610      	mov	r0, r2
 800764e:	4798      	blx	r3
 8007650:	e041      	b.n	80076d6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007658:	b2db      	uxtb	r3, r3
 800765a:	2b60      	cmp	r3, #96	@ 0x60
 800765c:	d125      	bne.n	80076aa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2220      	movs	r2, #32
 8007662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007676:	2b40      	cmp	r3, #64	@ 0x40
 8007678:	d10b      	bne.n	8007692 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	691a      	ldr	r2, [r3, #16]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007684:	b2d2      	uxtb	r2, r2
 8007686:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0201 	bic.w	r2, r2, #1
 80076a0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7fe feee 	bl	8006484 <HAL_I2C_AbortCpltCallback>
 80076a8:	e015      	b.n	80076d6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b4:	2b40      	cmp	r3, #64	@ 0x40
 80076b6:	d10b      	bne.n	80076d0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	691a      	ldr	r2, [r3, #16]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c2:	b2d2      	uxtb	r2, r2
 80076c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ca:	1c5a      	adds	r2, r3, #1
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7fe fecd 	bl	8006470 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076da:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10e      	bne.n	8007704 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d109      	bne.n	8007704 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d104      	bne.n	8007704 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007700:	2b00      	cmp	r3, #0
 8007702:	d007      	beq.n	8007714 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007712:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800771a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007720:	f003 0304 	and.w	r3, r3, #4
 8007724:	2b04      	cmp	r3, #4
 8007726:	d113      	bne.n	8007750 <I2C_ITError+0x254>
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	2b28      	cmp	r3, #40	@ 0x28
 800772c:	d110      	bne.n	8007750 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a0a      	ldr	r2, [pc, #40]	@ (800775c <I2C_ITError+0x260>)
 8007732:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2220      	movs	r2, #32
 800773e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7fe fe72 	bl	8006434 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007750:	bf00      	nop
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	08007a01 	.word	0x08007a01
 800775c:	ffff0000 	.word	0xffff0000

08007760 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b088      	sub	sp, #32
 8007764:	af02      	add	r7, sp, #8
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	607a      	str	r2, [r7, #4]
 800776a:	603b      	str	r3, [r7, #0]
 800776c:	460b      	mov	r3, r1
 800776e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007774:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2b08      	cmp	r3, #8
 800777a:	d006      	beq.n	800778a <I2C_MasterRequestWrite+0x2a>
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d003      	beq.n	800778a <I2C_MasterRequestWrite+0x2a>
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007788:	d108      	bne.n	800779c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	e00b      	b.n	80077b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077a0:	2b12      	cmp	r3, #18
 80077a2:	d107      	bne.n	80077b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 f9c5 	bl	8007b50 <I2C_WaitOnFlagUntilTimeout>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d00d      	beq.n	80077e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077da:	d103      	bne.n	80077e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e035      	b.n	8007854 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077f0:	d108      	bne.n	8007804 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80077f2:	897b      	ldrh	r3, [r7, #10]
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	461a      	mov	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007800:	611a      	str	r2, [r3, #16]
 8007802:	e01b      	b.n	800783c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007804:	897b      	ldrh	r3, [r7, #10]
 8007806:	11db      	asrs	r3, r3, #7
 8007808:	b2db      	uxtb	r3, r3
 800780a:	f003 0306 	and.w	r3, r3, #6
 800780e:	b2db      	uxtb	r3, r3
 8007810:	f063 030f 	orn	r3, r3, #15
 8007814:	b2da      	uxtb	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	490e      	ldr	r1, [pc, #56]	@ (800785c <I2C_MasterRequestWrite+0xfc>)
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 f9eb 	bl	8007bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d001      	beq.n	8007832 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e010      	b.n	8007854 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007832:	897b      	ldrh	r3, [r7, #10]
 8007834:	b2da      	uxtb	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	4907      	ldr	r1, [pc, #28]	@ (8007860 <I2C_MasterRequestWrite+0x100>)
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 f9db 	bl	8007bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e000      	b.n	8007854 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007852:	2300      	movs	r3, #0
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	00010008 	.word	0x00010008
 8007860:	00010002 	.word	0x00010002

08007864 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af02      	add	r7, sp, #8
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	607a      	str	r2, [r7, #4]
 800786e:	603b      	str	r3, [r7, #0]
 8007870:	460b      	mov	r3, r1
 8007872:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007878:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007888:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2b08      	cmp	r3, #8
 800788e:	d006      	beq.n	800789e <I2C_MasterRequestRead+0x3a>
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d003      	beq.n	800789e <I2C_MasterRequestRead+0x3a>
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800789c:	d108      	bne.n	80078b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	e00b      	b.n	80078c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b4:	2b11      	cmp	r3, #17
 80078b6:	d107      	bne.n	80078c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f000 f93b 	bl	8007b50 <I2C_WaitOnFlagUntilTimeout>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00d      	beq.n	80078fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ee:	d103      	bne.n	80078f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e079      	b.n	80079f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007904:	d108      	bne.n	8007918 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007906:	897b      	ldrh	r3, [r7, #10]
 8007908:	b2db      	uxtb	r3, r3
 800790a:	f043 0301 	orr.w	r3, r3, #1
 800790e:	b2da      	uxtb	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	611a      	str	r2, [r3, #16]
 8007916:	e05f      	b.n	80079d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007918:	897b      	ldrh	r3, [r7, #10]
 800791a:	11db      	asrs	r3, r3, #7
 800791c:	b2db      	uxtb	r3, r3
 800791e:	f003 0306 	and.w	r3, r3, #6
 8007922:	b2db      	uxtb	r3, r3
 8007924:	f063 030f 	orn	r3, r3, #15
 8007928:	b2da      	uxtb	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	4930      	ldr	r1, [pc, #192]	@ (80079f8 <I2C_MasterRequestRead+0x194>)
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f000 f961 	bl	8007bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e054      	b.n	80079f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007946:	897b      	ldrh	r3, [r7, #10]
 8007948:	b2da      	uxtb	r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	4929      	ldr	r1, [pc, #164]	@ (80079fc <I2C_MasterRequestRead+0x198>)
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 f951 	bl	8007bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e044      	b.n	80079f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007966:	2300      	movs	r3, #0
 8007968:	613b      	str	r3, [r7, #16]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	613b      	str	r3, [r7, #16]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	613b      	str	r3, [r7, #16]
 800797a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800798a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 f8d9 	bl	8007b50 <I2C_WaitOnFlagUntilTimeout>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00d      	beq.n	80079c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079b2:	d103      	bne.n	80079bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079ba:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e017      	b.n	80079f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80079c0:	897b      	ldrh	r3, [r7, #10]
 80079c2:	11db      	asrs	r3, r3, #7
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	f003 0306 	and.w	r3, r3, #6
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	f063 030e 	orn	r3, r3, #14
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	4907      	ldr	r1, [pc, #28]	@ (80079fc <I2C_MasterRequestRead+0x198>)
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 f90d 	bl	8007bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e000      	b.n	80079f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	00010008 	.word	0x00010008
 80079fc:	00010002 	.word	0x00010002

08007a00 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a10:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a18:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007a1a:	4b4b      	ldr	r3, [pc, #300]	@ (8007b48 <I2C_DMAAbort+0x148>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	08db      	lsrs	r3, r3, #3
 8007a20:	4a4a      	ldr	r2, [pc, #296]	@ (8007b4c <I2C_DMAAbort+0x14c>)
 8007a22:	fba2 2303 	umull	r2, r3, r2, r3
 8007a26:	0a1a      	lsrs	r2, r3, #8
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	00da      	lsls	r2, r3, #3
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d106      	bne.n	8007a48 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3e:	f043 0220 	orr.w	r2, r3, #32
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8007a46:	e00a      	b.n	8007a5e <I2C_DMAAbort+0x5e>
    }
    count--;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a5c:	d0ea      	beq.n	8007a34 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a8c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2200      	movs	r2, #0
 8007a92:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f022 0201 	bic.w	r2, r2, #1
 8007ac2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b60      	cmp	r3, #96	@ 0x60
 8007ace:	d10e      	bne.n	8007aee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007ae6:	6978      	ldr	r0, [r7, #20]
 8007ae8:	f7fe fccc 	bl	8006484 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007aec:	e027      	b.n	8007b3e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007aee:	7cfb      	ldrb	r3, [r7, #19]
 8007af0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007af4:	2b28      	cmp	r3, #40	@ 0x28
 8007af6:	d117      	bne.n	8007b28 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f042 0201 	orr.w	r2, r2, #1
 8007b06:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007b16:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2228      	movs	r2, #40	@ 0x28
 8007b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007b26:	e007      	b.n	8007b38 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007b38:	6978      	ldr	r0, [r7, #20]
 8007b3a:	f7fe fc99 	bl	8006470 <HAL_I2C_ErrorCallback>
}
 8007b3e:	bf00      	nop
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000004 	.word	0x20000004
 8007b4c:	14f8b589 	.word	0x14f8b589

08007b50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b60:	e025      	b.n	8007bae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b68:	d021      	beq.n	8007bae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b6a:	f7fc fde7 	bl	800473c <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	683a      	ldr	r2, [r7, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d302      	bcc.n	8007b80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d116      	bne.n	8007bae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2220      	movs	r2, #32
 8007b8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b9a:	f043 0220 	orr.w	r2, r3, #32
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e023      	b.n	8007bf6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	0c1b      	lsrs	r3, r3, #16
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d10d      	bne.n	8007bd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	43da      	mvns	r2, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bf0c      	ite	eq
 8007bca:	2301      	moveq	r3, #1
 8007bcc:	2300      	movne	r3, #0
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	e00c      	b.n	8007bee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	43da      	mvns	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4013      	ands	r3, r2
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bf0c      	ite	eq
 8007be6:	2301      	moveq	r3, #1
 8007be8:	2300      	movne	r3, #0
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	461a      	mov	r2, r3
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d0b6      	beq.n	8007b62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	60f8      	str	r0, [r7, #12]
 8007c06:	60b9      	str	r1, [r7, #8]
 8007c08:	607a      	str	r2, [r7, #4]
 8007c0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c0c:	e051      	b.n	8007cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c1c:	d123      	bne.n	8007c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007c36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c52:	f043 0204 	orr.w	r2, r3, #4
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e046      	b.n	8007cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c6c:	d021      	beq.n	8007cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c6e:	f7fc fd65 	bl	800473c <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d302      	bcc.n	8007c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d116      	bne.n	8007cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9e:	f043 0220 	orr.w	r2, r3, #32
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e020      	b.n	8007cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	0c1b      	lsrs	r3, r3, #16
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d10c      	bne.n	8007cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	43da      	mvns	r2, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bf14      	ite	ne
 8007cce:	2301      	movne	r3, #1
 8007cd0:	2300      	moveq	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	e00b      	b.n	8007cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	43da      	mvns	r2, r3
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	bf14      	ite	ne
 8007ce8:	2301      	movne	r3, #1
 8007cea:	2300      	moveq	r3, #0
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d18d      	bne.n	8007c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d08:	e02d      	b.n	8007d66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 f900 	bl	8007f10 <I2C_IsAcknowledgeFailed>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e02d      	b.n	8007d76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d20:	d021      	beq.n	8007d66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d22:	f7fc fd0b 	bl	800473c <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d302      	bcc.n	8007d38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d116      	bne.n	8007d66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2220      	movs	r2, #32
 8007d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d52:	f043 0220 	orr.w	r2, r3, #32
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e007      	b.n	8007d76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d70:	2b80      	cmp	r3, #128	@ 0x80
 8007d72:	d1ca      	bne.n	8007d0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d8a:	e02d      	b.n	8007de8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 f8bf 	bl	8007f10 <I2C_IsAcknowledgeFailed>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e02d      	b.n	8007df8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007da2:	d021      	beq.n	8007de8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007da4:	f7fc fcca 	bl	800473c <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d302      	bcc.n	8007dba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d116      	bne.n	8007de8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd4:	f043 0220 	orr.w	r2, r3, #32
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e007      	b.n	8007df8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	695b      	ldr	r3, [r3, #20]
 8007dee:	f003 0304 	and.w	r3, r3, #4
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d1ca      	bne.n	8007d8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007e0c:	4b13      	ldr	r3, [pc, #76]	@ (8007e5c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	08db      	lsrs	r3, r3, #3
 8007e12:	4a13      	ldr	r2, [pc, #76]	@ (8007e60 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007e14:	fba2 2303 	umull	r2, r3, r2, r3
 8007e18:	0a1a      	lsrs	r2, r3, #8
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	3b01      	subs	r3, #1
 8007e26:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d107      	bne.n	8007e3e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e32:	f043 0220 	orr.w	r2, r3, #32
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e008      	b.n	8007e50 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e4c:	d0e9      	beq.n	8007e22 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	20000004 	.word	0x20000004
 8007e60:	14f8b589 	.word	0x14f8b589

08007e64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e70:	e042      	b.n	8007ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	f003 0310 	and.w	r3, r3, #16
 8007e7c:	2b10      	cmp	r3, #16
 8007e7e:	d119      	bne.n	8007eb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f06f 0210 	mvn.w	r2, #16
 8007e88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2220      	movs	r2, #32
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e029      	b.n	8007f08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eb4:	f7fc fc42 	bl	800473c <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d302      	bcc.n	8007eca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d116      	bne.n	8007ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2220      	movs	r2, #32
 8007ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee4:	f043 0220 	orr.w	r2, r3, #32
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e007      	b.n	8007f08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f02:	2b40      	cmp	r3, #64	@ 0x40
 8007f04:	d1b5      	bne.n	8007e72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f26:	d11b      	bne.n	8007f60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007f30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f4c:	f043 0204 	orr.w	r2, r3, #4
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e000      	b.n	8007f62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007f7e:	d103      	bne.n	8007f88 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007f86:	e007      	b.n	8007f98 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007f90:	d102      	bne.n	8007f98 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2208      	movs	r2, #8
 8007f96:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e267      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d075      	beq.n	80080ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007fc2:	4b88      	ldr	r3, [pc, #544]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f003 030c 	and.w	r3, r3, #12
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d00c      	beq.n	8007fe8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fce:	4b85      	ldr	r3, [pc, #532]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007fd6:	2b08      	cmp	r3, #8
 8007fd8:	d112      	bne.n	8008000 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fda:	4b82      	ldr	r3, [pc, #520]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fe6:	d10b      	bne.n	8008000 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fe8:	4b7e      	ldr	r3, [pc, #504]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d05b      	beq.n	80080ac <HAL_RCC_OscConfig+0x108>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d157      	bne.n	80080ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e242      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008008:	d106      	bne.n	8008018 <HAL_RCC_OscConfig+0x74>
 800800a:	4b76      	ldr	r3, [pc, #472]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a75      	ldr	r2, [pc, #468]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	e01d      	b.n	8008054 <HAL_RCC_OscConfig+0xb0>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008020:	d10c      	bne.n	800803c <HAL_RCC_OscConfig+0x98>
 8008022:	4b70      	ldr	r3, [pc, #448]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a6f      	ldr	r2, [pc, #444]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	4b6d      	ldr	r3, [pc, #436]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a6c      	ldr	r2, [pc, #432]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008038:	6013      	str	r3, [r2, #0]
 800803a:	e00b      	b.n	8008054 <HAL_RCC_OscConfig+0xb0>
 800803c:	4b69      	ldr	r3, [pc, #420]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a68      	ldr	r2, [pc, #416]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	4b66      	ldr	r3, [pc, #408]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a65      	ldr	r2, [pc, #404]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 800804e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d013      	beq.n	8008084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800805c:	f7fc fb6e 	bl	800473c <HAL_GetTick>
 8008060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008062:	e008      	b.n	8008076 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008064:	f7fc fb6a 	bl	800473c <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b64      	cmp	r3, #100	@ 0x64
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e207      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008076:	4b5b      	ldr	r3, [pc, #364]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0f0      	beq.n	8008064 <HAL_RCC_OscConfig+0xc0>
 8008082:	e014      	b.n	80080ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008084:	f7fc fb5a 	bl	800473c <HAL_GetTick>
 8008088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800808a:	e008      	b.n	800809e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800808c:	f7fc fb56 	bl	800473c <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	2b64      	cmp	r3, #100	@ 0x64
 8008098:	d901      	bls.n	800809e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e1f3      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800809e:	4b51      	ldr	r3, [pc, #324]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1f0      	bne.n	800808c <HAL_RCC_OscConfig+0xe8>
 80080aa:	e000      	b.n	80080ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d063      	beq.n	8008182 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080ba:	4b4a      	ldr	r3, [pc, #296]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	f003 030c 	and.w	r3, r3, #12
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00b      	beq.n	80080de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080c6:	4b47      	ldr	r3, [pc, #284]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080ce:	2b08      	cmp	r3, #8
 80080d0:	d11c      	bne.n	800810c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080d2:	4b44      	ldr	r3, [pc, #272]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d116      	bne.n	800810c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080de:	4b41      	ldr	r3, [pc, #260]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <HAL_RCC_OscConfig+0x152>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d001      	beq.n	80080f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e1c7      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080f6:	4b3b      	ldr	r3, [pc, #236]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	4937      	ldr	r1, [pc, #220]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008106:	4313      	orrs	r3, r2
 8008108:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800810a:	e03a      	b.n	8008182 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d020      	beq.n	8008156 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008114:	4b34      	ldr	r3, [pc, #208]	@ (80081e8 <HAL_RCC_OscConfig+0x244>)
 8008116:	2201      	movs	r2, #1
 8008118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800811a:	f7fc fb0f 	bl	800473c <HAL_GetTick>
 800811e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008120:	e008      	b.n	8008134 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008122:	f7fc fb0b 	bl	800473c <HAL_GetTick>
 8008126:	4602      	mov	r2, r0
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	2b02      	cmp	r3, #2
 800812e:	d901      	bls.n	8008134 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e1a8      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008134:	4b2b      	ldr	r3, [pc, #172]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0302 	and.w	r3, r3, #2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d0f0      	beq.n	8008122 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008140:	4b28      	ldr	r3, [pc, #160]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	00db      	lsls	r3, r3, #3
 800814e:	4925      	ldr	r1, [pc, #148]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008150:	4313      	orrs	r3, r2
 8008152:	600b      	str	r3, [r1, #0]
 8008154:	e015      	b.n	8008182 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008156:	4b24      	ldr	r3, [pc, #144]	@ (80081e8 <HAL_RCC_OscConfig+0x244>)
 8008158:	2200      	movs	r2, #0
 800815a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800815c:	f7fc faee 	bl	800473c <HAL_GetTick>
 8008160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008162:	e008      	b.n	8008176 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008164:	f7fc faea 	bl	800473c <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d901      	bls.n	8008176 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e187      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008176:	4b1b      	ldr	r3, [pc, #108]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1f0      	bne.n	8008164 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0308 	and.w	r3, r3, #8
 800818a:	2b00      	cmp	r3, #0
 800818c:	d036      	beq.n	80081fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	695b      	ldr	r3, [r3, #20]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d016      	beq.n	80081c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008196:	4b15      	ldr	r3, [pc, #84]	@ (80081ec <HAL_RCC_OscConfig+0x248>)
 8008198:	2201      	movs	r2, #1
 800819a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800819c:	f7fc face 	bl	800473c <HAL_GetTick>
 80081a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081a2:	e008      	b.n	80081b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081a4:	f7fc faca 	bl	800473c <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d901      	bls.n	80081b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e167      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081b6:	4b0b      	ldr	r3, [pc, #44]	@ (80081e4 <HAL_RCC_OscConfig+0x240>)
 80081b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0f0      	beq.n	80081a4 <HAL_RCC_OscConfig+0x200>
 80081c2:	e01b      	b.n	80081fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081c4:	4b09      	ldr	r3, [pc, #36]	@ (80081ec <HAL_RCC_OscConfig+0x248>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081ca:	f7fc fab7 	bl	800473c <HAL_GetTick>
 80081ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081d0:	e00e      	b.n	80081f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081d2:	f7fc fab3 	bl	800473c <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d907      	bls.n	80081f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e150      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
 80081e4:	40023800 	.word	0x40023800
 80081e8:	42470000 	.word	0x42470000
 80081ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081f0:	4b88      	ldr	r3, [pc, #544]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80081f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081f4:	f003 0302 	and.w	r3, r3, #2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1ea      	bne.n	80081d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0304 	and.w	r3, r3, #4
 8008204:	2b00      	cmp	r3, #0
 8008206:	f000 8097 	beq.w	8008338 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800820a:	2300      	movs	r3, #0
 800820c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800820e:	4b81      	ldr	r3, [pc, #516]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10f      	bne.n	800823a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800821a:	2300      	movs	r3, #0
 800821c:	60bb      	str	r3, [r7, #8]
 800821e:	4b7d      	ldr	r3, [pc, #500]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008222:	4a7c      	ldr	r2, [pc, #496]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008228:	6413      	str	r3, [r2, #64]	@ 0x40
 800822a:	4b7a      	ldr	r3, [pc, #488]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 800822c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800822e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008232:	60bb      	str	r3, [r7, #8]
 8008234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008236:	2301      	movs	r3, #1
 8008238:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800823a:	4b77      	ldr	r3, [pc, #476]	@ (8008418 <HAL_RCC_OscConfig+0x474>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008242:	2b00      	cmp	r3, #0
 8008244:	d118      	bne.n	8008278 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008246:	4b74      	ldr	r3, [pc, #464]	@ (8008418 <HAL_RCC_OscConfig+0x474>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a73      	ldr	r2, [pc, #460]	@ (8008418 <HAL_RCC_OscConfig+0x474>)
 800824c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008252:	f7fc fa73 	bl	800473c <HAL_GetTick>
 8008256:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008258:	e008      	b.n	800826c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800825a:	f7fc fa6f 	bl	800473c <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	2b02      	cmp	r3, #2
 8008266:	d901      	bls.n	800826c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008268:	2303      	movs	r3, #3
 800826a:	e10c      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800826c:	4b6a      	ldr	r3, [pc, #424]	@ (8008418 <HAL_RCC_OscConfig+0x474>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008274:	2b00      	cmp	r3, #0
 8008276:	d0f0      	beq.n	800825a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d106      	bne.n	800828e <HAL_RCC_OscConfig+0x2ea>
 8008280:	4b64      	ldr	r3, [pc, #400]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008284:	4a63      	ldr	r2, [pc, #396]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008286:	f043 0301 	orr.w	r3, r3, #1
 800828a:	6713      	str	r3, [r2, #112]	@ 0x70
 800828c:	e01c      	b.n	80082c8 <HAL_RCC_OscConfig+0x324>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	2b05      	cmp	r3, #5
 8008294:	d10c      	bne.n	80082b0 <HAL_RCC_OscConfig+0x30c>
 8008296:	4b5f      	ldr	r3, [pc, #380]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800829a:	4a5e      	ldr	r2, [pc, #376]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 800829c:	f043 0304 	orr.w	r3, r3, #4
 80082a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80082a2:	4b5c      	ldr	r3, [pc, #368]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80082a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082a6:	4a5b      	ldr	r2, [pc, #364]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80082a8:	f043 0301 	orr.w	r3, r3, #1
 80082ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80082ae:	e00b      	b.n	80082c8 <HAL_RCC_OscConfig+0x324>
 80082b0:	4b58      	ldr	r3, [pc, #352]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80082b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082b4:	4a57      	ldr	r2, [pc, #348]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80082b6:	f023 0301 	bic.w	r3, r3, #1
 80082ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80082bc:	4b55      	ldr	r3, [pc, #340]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80082be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082c0:	4a54      	ldr	r2, [pc, #336]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80082c2:	f023 0304 	bic.w	r3, r3, #4
 80082c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d015      	beq.n	80082fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082d0:	f7fc fa34 	bl	800473c <HAL_GetTick>
 80082d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082d6:	e00a      	b.n	80082ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082d8:	f7fc fa30 	bl	800473c <HAL_GetTick>
 80082dc:	4602      	mov	r2, r0
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	1ad3      	subs	r3, r2, r3
 80082e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d901      	bls.n	80082ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e0cb      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082ee:	4b49      	ldr	r3, [pc, #292]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80082f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082f2:	f003 0302 	and.w	r3, r3, #2
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d0ee      	beq.n	80082d8 <HAL_RCC_OscConfig+0x334>
 80082fa:	e014      	b.n	8008326 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082fc:	f7fc fa1e 	bl	800473c <HAL_GetTick>
 8008300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008302:	e00a      	b.n	800831a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008304:	f7fc fa1a 	bl	800473c <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008312:	4293      	cmp	r3, r2
 8008314:	d901      	bls.n	800831a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e0b5      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800831a:	4b3e      	ldr	r3, [pc, #248]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 800831c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1ee      	bne.n	8008304 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008326:	7dfb      	ldrb	r3, [r7, #23]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d105      	bne.n	8008338 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800832c:	4b39      	ldr	r3, [pc, #228]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 800832e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008330:	4a38      	ldr	r2, [pc, #224]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008336:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 80a1 	beq.w	8008484 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008342:	4b34      	ldr	r3, [pc, #208]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f003 030c 	and.w	r3, r3, #12
 800834a:	2b08      	cmp	r3, #8
 800834c:	d05c      	beq.n	8008408 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	2b02      	cmp	r3, #2
 8008354:	d141      	bne.n	80083da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008356:	4b31      	ldr	r3, [pc, #196]	@ (800841c <HAL_RCC_OscConfig+0x478>)
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800835c:	f7fc f9ee 	bl	800473c <HAL_GetTick>
 8008360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008362:	e008      	b.n	8008376 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008364:	f7fc f9ea 	bl	800473c <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b02      	cmp	r3, #2
 8008370:	d901      	bls.n	8008376 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e087      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008376:	4b27      	ldr	r3, [pc, #156]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1f0      	bne.n	8008364 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	69da      	ldr	r2, [r3, #28]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	431a      	orrs	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008390:	019b      	lsls	r3, r3, #6
 8008392:	431a      	orrs	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008398:	085b      	lsrs	r3, r3, #1
 800839a:	3b01      	subs	r3, #1
 800839c:	041b      	lsls	r3, r3, #16
 800839e:	431a      	orrs	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a4:	061b      	lsls	r3, r3, #24
 80083a6:	491b      	ldr	r1, [pc, #108]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083ac:	4b1b      	ldr	r3, [pc, #108]	@ (800841c <HAL_RCC_OscConfig+0x478>)
 80083ae:	2201      	movs	r2, #1
 80083b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083b2:	f7fc f9c3 	bl	800473c <HAL_GetTick>
 80083b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083b8:	e008      	b.n	80083cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083ba:	f7fc f9bf 	bl	800473c <HAL_GetTick>
 80083be:	4602      	mov	r2, r0
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d901      	bls.n	80083cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e05c      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083cc:	4b11      	ldr	r3, [pc, #68]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0f0      	beq.n	80083ba <HAL_RCC_OscConfig+0x416>
 80083d8:	e054      	b.n	8008484 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083da:	4b10      	ldr	r3, [pc, #64]	@ (800841c <HAL_RCC_OscConfig+0x478>)
 80083dc:	2200      	movs	r2, #0
 80083de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083e0:	f7fc f9ac 	bl	800473c <HAL_GetTick>
 80083e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083e6:	e008      	b.n	80083fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083e8:	f7fc f9a8 	bl	800473c <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d901      	bls.n	80083fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e045      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083fa:	4b06      	ldr	r3, [pc, #24]	@ (8008414 <HAL_RCC_OscConfig+0x470>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1f0      	bne.n	80083e8 <HAL_RCC_OscConfig+0x444>
 8008406:	e03d      	b.n	8008484 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d107      	bne.n	8008420 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e038      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
 8008414:	40023800 	.word	0x40023800
 8008418:	40007000 	.word	0x40007000
 800841c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008420:	4b1b      	ldr	r3, [pc, #108]	@ (8008490 <HAL_RCC_OscConfig+0x4ec>)
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d028      	beq.n	8008480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008438:	429a      	cmp	r2, r3
 800843a:	d121      	bne.n	8008480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008446:	429a      	cmp	r2, r3
 8008448:	d11a      	bne.n	8008480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008450:	4013      	ands	r3, r2
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008456:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008458:	4293      	cmp	r3, r2
 800845a:	d111      	bne.n	8008480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008466:	085b      	lsrs	r3, r3, #1
 8008468:	3b01      	subs	r3, #1
 800846a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800846c:	429a      	cmp	r2, r3
 800846e:	d107      	bne.n	8008480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800847a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800847c:	429a      	cmp	r2, r3
 800847e:	d001      	beq.n	8008484 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e000      	b.n	8008486 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3718      	adds	r7, #24
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	40023800 	.word	0x40023800

08008494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d101      	bne.n	80084a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e0cc      	b.n	8008642 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084a8:	4b68      	ldr	r3, [pc, #416]	@ (800864c <HAL_RCC_ClockConfig+0x1b8>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0307 	and.w	r3, r3, #7
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	429a      	cmp	r2, r3
 80084b4:	d90c      	bls.n	80084d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084b6:	4b65      	ldr	r3, [pc, #404]	@ (800864c <HAL_RCC_ClockConfig+0x1b8>)
 80084b8:	683a      	ldr	r2, [r7, #0]
 80084ba:	b2d2      	uxtb	r2, r2
 80084bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084be:	4b63      	ldr	r3, [pc, #396]	@ (800864c <HAL_RCC_ClockConfig+0x1b8>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0307 	and.w	r3, r3, #7
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d001      	beq.n	80084d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	e0b8      	b.n	8008642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0302 	and.w	r3, r3, #2
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d020      	beq.n	800851e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d005      	beq.n	80084f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084e8:	4b59      	ldr	r3, [pc, #356]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	4a58      	ldr	r2, [pc, #352]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 80084ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80084f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0308 	and.w	r3, r3, #8
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d005      	beq.n	800850c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008500:	4b53      	ldr	r3, [pc, #332]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	4a52      	ldr	r2, [pc, #328]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008506:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800850a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800850c:	4b50      	ldr	r3, [pc, #320]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	494d      	ldr	r1, [pc, #308]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 800851a:	4313      	orrs	r3, r2
 800851c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	2b00      	cmp	r3, #0
 8008528:	d044      	beq.n	80085b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d107      	bne.n	8008542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008532:	4b47      	ldr	r3, [pc, #284]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d119      	bne.n	8008572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e07f      	b.n	8008642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	2b02      	cmp	r3, #2
 8008548:	d003      	beq.n	8008552 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800854e:	2b03      	cmp	r3, #3
 8008550:	d107      	bne.n	8008562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008552:	4b3f      	ldr	r3, [pc, #252]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e06f      	b.n	8008642 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008562:	4b3b      	ldr	r3, [pc, #236]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 0302 	and.w	r3, r3, #2
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e067      	b.n	8008642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008572:	4b37      	ldr	r3, [pc, #220]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f023 0203 	bic.w	r2, r3, #3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	4934      	ldr	r1, [pc, #208]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008580:	4313      	orrs	r3, r2
 8008582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008584:	f7fc f8da 	bl	800473c <HAL_GetTick>
 8008588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800858a:	e00a      	b.n	80085a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800858c:	f7fc f8d6 	bl	800473c <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800859a:	4293      	cmp	r3, r2
 800859c:	d901      	bls.n	80085a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e04f      	b.n	8008642 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085a2:	4b2b      	ldr	r3, [pc, #172]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	f003 020c 	and.w	r2, r3, #12
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d1eb      	bne.n	800858c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085b4:	4b25      	ldr	r3, [pc, #148]	@ (800864c <HAL_RCC_ClockConfig+0x1b8>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0307 	and.w	r3, r3, #7
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d20c      	bcs.n	80085dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085c2:	4b22      	ldr	r3, [pc, #136]	@ (800864c <HAL_RCC_ClockConfig+0x1b8>)
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	b2d2      	uxtb	r2, r2
 80085c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085ca:	4b20      	ldr	r3, [pc, #128]	@ (800864c <HAL_RCC_ClockConfig+0x1b8>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d001      	beq.n	80085dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e032      	b.n	8008642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0304 	and.w	r3, r3, #4
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d008      	beq.n	80085fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085e8:	4b19      	ldr	r3, [pc, #100]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	4916      	ldr	r1, [pc, #88]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0308 	and.w	r3, r3, #8
 8008602:	2b00      	cmp	r3, #0
 8008604:	d009      	beq.n	800861a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008606:	4b12      	ldr	r3, [pc, #72]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	490e      	ldr	r1, [pc, #56]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008616:	4313      	orrs	r3, r2
 8008618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800861a:	f000 f821 	bl	8008660 <HAL_RCC_GetSysClockFreq>
 800861e:	4602      	mov	r2, r0
 8008620:	4b0b      	ldr	r3, [pc, #44]	@ (8008650 <HAL_RCC_ClockConfig+0x1bc>)
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	091b      	lsrs	r3, r3, #4
 8008626:	f003 030f 	and.w	r3, r3, #15
 800862a:	490a      	ldr	r1, [pc, #40]	@ (8008654 <HAL_RCC_ClockConfig+0x1c0>)
 800862c:	5ccb      	ldrb	r3, [r1, r3]
 800862e:	fa22 f303 	lsr.w	r3, r2, r3
 8008632:	4a09      	ldr	r2, [pc, #36]	@ (8008658 <HAL_RCC_ClockConfig+0x1c4>)
 8008634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008636:	4b09      	ldr	r3, [pc, #36]	@ (800865c <HAL_RCC_ClockConfig+0x1c8>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f7fb fc04 	bl	8003e48 <HAL_InitTick>

  return HAL_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	40023c00 	.word	0x40023c00
 8008650:	40023800 	.word	0x40023800
 8008654:	0801de68 	.word	0x0801de68
 8008658:	20000004 	.word	0x20000004
 800865c:	2000001c 	.word	0x2000001c

08008660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008664:	b094      	sub	sp, #80	@ 0x50
 8008666:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	647b      	str	r3, [r7, #68]	@ 0x44
 800866c:	2300      	movs	r3, #0
 800866e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008670:	2300      	movs	r3, #0
 8008672:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008674:	2300      	movs	r3, #0
 8008676:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008678:	4b79      	ldr	r3, [pc, #484]	@ (8008860 <HAL_RCC_GetSysClockFreq+0x200>)
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	f003 030c 	and.w	r3, r3, #12
 8008680:	2b08      	cmp	r3, #8
 8008682:	d00d      	beq.n	80086a0 <HAL_RCC_GetSysClockFreq+0x40>
 8008684:	2b08      	cmp	r3, #8
 8008686:	f200 80e1 	bhi.w	800884c <HAL_RCC_GetSysClockFreq+0x1ec>
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <HAL_RCC_GetSysClockFreq+0x34>
 800868e:	2b04      	cmp	r3, #4
 8008690:	d003      	beq.n	800869a <HAL_RCC_GetSysClockFreq+0x3a>
 8008692:	e0db      	b.n	800884c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008694:	4b73      	ldr	r3, [pc, #460]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x204>)
 8008696:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8008698:	e0db      	b.n	8008852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800869a:	4b73      	ldr	r3, [pc, #460]	@ (8008868 <HAL_RCC_GetSysClockFreq+0x208>)
 800869c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800869e:	e0d8      	b.n	8008852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80086a0:	4b6f      	ldr	r3, [pc, #444]	@ (8008860 <HAL_RCC_GetSysClockFreq+0x200>)
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80086a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80086aa:	4b6d      	ldr	r3, [pc, #436]	@ (8008860 <HAL_RCC_GetSysClockFreq+0x200>)
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d063      	beq.n	800877e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80086b6:	4b6a      	ldr	r3, [pc, #424]	@ (8008860 <HAL_RCC_GetSysClockFreq+0x200>)
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	099b      	lsrs	r3, r3, #6
 80086bc:	2200      	movs	r2, #0
 80086be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80086c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80086c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80086ca:	2300      	movs	r3, #0
 80086cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80086d2:	4622      	mov	r2, r4
 80086d4:	462b      	mov	r3, r5
 80086d6:	f04f 0000 	mov.w	r0, #0
 80086da:	f04f 0100 	mov.w	r1, #0
 80086de:	0159      	lsls	r1, r3, #5
 80086e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80086e4:	0150      	lsls	r0, r2, #5
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	4621      	mov	r1, r4
 80086ec:	1a51      	subs	r1, r2, r1
 80086ee:	6139      	str	r1, [r7, #16]
 80086f0:	4629      	mov	r1, r5
 80086f2:	eb63 0301 	sbc.w	r3, r3, r1
 80086f6:	617b      	str	r3, [r7, #20]
 80086f8:	f04f 0200 	mov.w	r2, #0
 80086fc:	f04f 0300 	mov.w	r3, #0
 8008700:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008704:	4659      	mov	r1, fp
 8008706:	018b      	lsls	r3, r1, #6
 8008708:	4651      	mov	r1, sl
 800870a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800870e:	4651      	mov	r1, sl
 8008710:	018a      	lsls	r2, r1, #6
 8008712:	4651      	mov	r1, sl
 8008714:	ebb2 0801 	subs.w	r8, r2, r1
 8008718:	4659      	mov	r1, fp
 800871a:	eb63 0901 	sbc.w	r9, r3, r1
 800871e:	f04f 0200 	mov.w	r2, #0
 8008722:	f04f 0300 	mov.w	r3, #0
 8008726:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800872a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800872e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008732:	4690      	mov	r8, r2
 8008734:	4699      	mov	r9, r3
 8008736:	4623      	mov	r3, r4
 8008738:	eb18 0303 	adds.w	r3, r8, r3
 800873c:	60bb      	str	r3, [r7, #8]
 800873e:	462b      	mov	r3, r5
 8008740:	eb49 0303 	adc.w	r3, r9, r3
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	f04f 0200 	mov.w	r2, #0
 800874a:	f04f 0300 	mov.w	r3, #0
 800874e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008752:	4629      	mov	r1, r5
 8008754:	024b      	lsls	r3, r1, #9
 8008756:	4621      	mov	r1, r4
 8008758:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800875c:	4621      	mov	r1, r4
 800875e:	024a      	lsls	r2, r1, #9
 8008760:	4610      	mov	r0, r2
 8008762:	4619      	mov	r1, r3
 8008764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008766:	2200      	movs	r2, #0
 8008768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800876a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800876c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008770:	f7f8 faf2 	bl	8000d58 <__aeabi_uldivmod>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4613      	mov	r3, r2
 800877a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800877c:	e058      	b.n	8008830 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800877e:	4b38      	ldr	r3, [pc, #224]	@ (8008860 <HAL_RCC_GetSysClockFreq+0x200>)
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	099b      	lsrs	r3, r3, #6
 8008784:	2200      	movs	r2, #0
 8008786:	4618      	mov	r0, r3
 8008788:	4611      	mov	r1, r2
 800878a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800878e:	623b      	str	r3, [r7, #32]
 8008790:	2300      	movs	r3, #0
 8008792:	627b      	str	r3, [r7, #36]	@ 0x24
 8008794:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008798:	4642      	mov	r2, r8
 800879a:	464b      	mov	r3, r9
 800879c:	f04f 0000 	mov.w	r0, #0
 80087a0:	f04f 0100 	mov.w	r1, #0
 80087a4:	0159      	lsls	r1, r3, #5
 80087a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087aa:	0150      	lsls	r0, r2, #5
 80087ac:	4602      	mov	r2, r0
 80087ae:	460b      	mov	r3, r1
 80087b0:	4641      	mov	r1, r8
 80087b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80087b6:	4649      	mov	r1, r9
 80087b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80087bc:	f04f 0200 	mov.w	r2, #0
 80087c0:	f04f 0300 	mov.w	r3, #0
 80087c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80087c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80087cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80087d0:	ebb2 040a 	subs.w	r4, r2, sl
 80087d4:	eb63 050b 	sbc.w	r5, r3, fp
 80087d8:	f04f 0200 	mov.w	r2, #0
 80087dc:	f04f 0300 	mov.w	r3, #0
 80087e0:	00eb      	lsls	r3, r5, #3
 80087e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087e6:	00e2      	lsls	r2, r4, #3
 80087e8:	4614      	mov	r4, r2
 80087ea:	461d      	mov	r5, r3
 80087ec:	4643      	mov	r3, r8
 80087ee:	18e3      	adds	r3, r4, r3
 80087f0:	603b      	str	r3, [r7, #0]
 80087f2:	464b      	mov	r3, r9
 80087f4:	eb45 0303 	adc.w	r3, r5, r3
 80087f8:	607b      	str	r3, [r7, #4]
 80087fa:	f04f 0200 	mov.w	r2, #0
 80087fe:	f04f 0300 	mov.w	r3, #0
 8008802:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008806:	4629      	mov	r1, r5
 8008808:	028b      	lsls	r3, r1, #10
 800880a:	4621      	mov	r1, r4
 800880c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008810:	4621      	mov	r1, r4
 8008812:	028a      	lsls	r2, r1, #10
 8008814:	4610      	mov	r0, r2
 8008816:	4619      	mov	r1, r3
 8008818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800881a:	2200      	movs	r2, #0
 800881c:	61bb      	str	r3, [r7, #24]
 800881e:	61fa      	str	r2, [r7, #28]
 8008820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008824:	f7f8 fa98 	bl	8000d58 <__aeabi_uldivmod>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	4613      	mov	r3, r2
 800882e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008830:	4b0b      	ldr	r3, [pc, #44]	@ (8008860 <HAL_RCC_GetSysClockFreq+0x200>)
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	0c1b      	lsrs	r3, r3, #16
 8008836:	f003 0303 	and.w	r3, r3, #3
 800883a:	3301      	adds	r3, #1
 800883c:	005b      	lsls	r3, r3, #1
 800883e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8008840:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008844:	fbb2 f3f3 	udiv	r3, r2, r3
 8008848:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800884a:	e002      	b.n	8008852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800884c:	4b05      	ldr	r3, [pc, #20]	@ (8008864 <HAL_RCC_GetSysClockFreq+0x204>)
 800884e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008854:	4618      	mov	r0, r3
 8008856:	3750      	adds	r7, #80	@ 0x50
 8008858:	46bd      	mov	sp, r7
 800885a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800885e:	bf00      	nop
 8008860:	40023800 	.word	0x40023800
 8008864:	00f42400 	.word	0x00f42400
 8008868:	007a1200 	.word	0x007a1200

0800886c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008870:	4b03      	ldr	r3, [pc, #12]	@ (8008880 <HAL_RCC_GetHCLKFreq+0x14>)
 8008872:	681b      	ldr	r3, [r3, #0]
}
 8008874:	4618      	mov	r0, r3
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	20000004 	.word	0x20000004

08008884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008888:	f7ff fff0 	bl	800886c <HAL_RCC_GetHCLKFreq>
 800888c:	4602      	mov	r2, r0
 800888e:	4b05      	ldr	r3, [pc, #20]	@ (80088a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	0a9b      	lsrs	r3, r3, #10
 8008894:	f003 0307 	and.w	r3, r3, #7
 8008898:	4903      	ldr	r1, [pc, #12]	@ (80088a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800889a:	5ccb      	ldrb	r3, [r1, r3]
 800889c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	40023800 	.word	0x40023800
 80088a8:	0801de78 	.word	0x0801de78

080088ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80088b0:	f7ff ffdc 	bl	800886c <HAL_RCC_GetHCLKFreq>
 80088b4:	4602      	mov	r2, r0
 80088b6:	4b05      	ldr	r3, [pc, #20]	@ (80088cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	0b5b      	lsrs	r3, r3, #13
 80088bc:	f003 0307 	and.w	r3, r3, #7
 80088c0:	4903      	ldr	r1, [pc, #12]	@ (80088d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80088c2:	5ccb      	ldrb	r3, [r1, r3]
 80088c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	40023800 	.word	0x40023800
 80088d0:	0801de78 	.word	0x0801de78

080088d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	220f      	movs	r2, #15
 80088e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80088e4:	4b12      	ldr	r3, [pc, #72]	@ (8008930 <HAL_RCC_GetClockConfig+0x5c>)
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f003 0203 	and.w	r2, r3, #3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80088f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008930 <HAL_RCC_GetClockConfig+0x5c>)
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80088fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008930 <HAL_RCC_GetClockConfig+0x5c>)
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008908:	4b09      	ldr	r3, [pc, #36]	@ (8008930 <HAL_RCC_GetClockConfig+0x5c>)
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	08db      	lsrs	r3, r3, #3
 800890e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008916:	4b07      	ldr	r3, [pc, #28]	@ (8008934 <HAL_RCC_GetClockConfig+0x60>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0207 	and.w	r2, r3, #7
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	601a      	str	r2, [r3, #0]
}
 8008922:	bf00      	nop
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	40023800 	.word	0x40023800
 8008934:	40023c00 	.word	0x40023c00

08008938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d101      	bne.n	800894a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e041      	b.n	80089ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d106      	bne.n	8008964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f839 	bl	80089d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681a      	ldr	r2, [r3, #0]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	3304      	adds	r3, #4
 8008974:	4619      	mov	r1, r3
 8008976:	4610      	mov	r0, r2
 8008978:	f000 fc7a 	bl	8009270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80089de:	bf00      	nop
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
	...

080089ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d001      	beq.n	8008a04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e044      	b.n	8008a8e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f042 0201 	orr.w	r2, r2, #1
 8008a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a1e      	ldr	r2, [pc, #120]	@ (8008a9c <HAL_TIM_Base_Start_IT+0xb0>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d018      	beq.n	8008a58 <HAL_TIM_Base_Start_IT+0x6c>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a2e:	d013      	beq.n	8008a58 <HAL_TIM_Base_Start_IT+0x6c>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a1a      	ldr	r2, [pc, #104]	@ (8008aa0 <HAL_TIM_Base_Start_IT+0xb4>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d00e      	beq.n	8008a58 <HAL_TIM_Base_Start_IT+0x6c>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a19      	ldr	r2, [pc, #100]	@ (8008aa4 <HAL_TIM_Base_Start_IT+0xb8>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d009      	beq.n	8008a58 <HAL_TIM_Base_Start_IT+0x6c>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a17      	ldr	r2, [pc, #92]	@ (8008aa8 <HAL_TIM_Base_Start_IT+0xbc>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d004      	beq.n	8008a58 <HAL_TIM_Base_Start_IT+0x6c>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a16      	ldr	r2, [pc, #88]	@ (8008aac <HAL_TIM_Base_Start_IT+0xc0>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d111      	bne.n	8008a7c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f003 0307 	and.w	r3, r3, #7
 8008a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b06      	cmp	r3, #6
 8008a68:	d010      	beq.n	8008a8c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f042 0201 	orr.w	r2, r2, #1
 8008a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a7a:	e007      	b.n	8008a8c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f042 0201 	orr.w	r2, r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3714      	adds	r7, #20
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	40010000 	.word	0x40010000
 8008aa0:	40000400 	.word	0x40000400
 8008aa4:	40000800 	.word	0x40000800
 8008aa8:	40000c00 	.word	0x40000c00
 8008aac:	40014000 	.word	0x40014000

08008ab0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d109      	bne.n	8008ad4 <HAL_TIM_PWM_Start+0x24>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	bf14      	ite	ne
 8008acc:	2301      	movne	r3, #1
 8008ace:	2300      	moveq	r3, #0
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	e022      	b.n	8008b1a <HAL_TIM_PWM_Start+0x6a>
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2b04      	cmp	r3, #4
 8008ad8:	d109      	bne.n	8008aee <HAL_TIM_PWM_Start+0x3e>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	bf14      	ite	ne
 8008ae6:	2301      	movne	r3, #1
 8008ae8:	2300      	moveq	r3, #0
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	e015      	b.n	8008b1a <HAL_TIM_PWM_Start+0x6a>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b08      	cmp	r3, #8
 8008af2:	d109      	bne.n	8008b08 <HAL_TIM_PWM_Start+0x58>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	bf14      	ite	ne
 8008b00:	2301      	movne	r3, #1
 8008b02:	2300      	moveq	r3, #0
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	e008      	b.n	8008b1a <HAL_TIM_PWM_Start+0x6a>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	bf14      	ite	ne
 8008b14:	2301      	movne	r3, #1
 8008b16:	2300      	moveq	r3, #0
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e068      	b.n	8008bf4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d104      	bne.n	8008b32 <HAL_TIM_PWM_Start+0x82>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b30:	e013      	b.n	8008b5a <HAL_TIM_PWM_Start+0xaa>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2b04      	cmp	r3, #4
 8008b36:	d104      	bne.n	8008b42 <HAL_TIM_PWM_Start+0x92>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b40:	e00b      	b.n	8008b5a <HAL_TIM_PWM_Start+0xaa>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	d104      	bne.n	8008b52 <HAL_TIM_PWM_Start+0xa2>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b50:	e003      	b.n	8008b5a <HAL_TIM_PWM_Start+0xaa>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2202      	movs	r2, #2
 8008b56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 fd90 	bl	8009688 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a23      	ldr	r2, [pc, #140]	@ (8008bfc <HAL_TIM_PWM_Start+0x14c>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d107      	bne.n	8008b82 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a1d      	ldr	r2, [pc, #116]	@ (8008bfc <HAL_TIM_PWM_Start+0x14c>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d018      	beq.n	8008bbe <HAL_TIM_PWM_Start+0x10e>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b94:	d013      	beq.n	8008bbe <HAL_TIM_PWM_Start+0x10e>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a19      	ldr	r2, [pc, #100]	@ (8008c00 <HAL_TIM_PWM_Start+0x150>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d00e      	beq.n	8008bbe <HAL_TIM_PWM_Start+0x10e>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a17      	ldr	r2, [pc, #92]	@ (8008c04 <HAL_TIM_PWM_Start+0x154>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d009      	beq.n	8008bbe <HAL_TIM_PWM_Start+0x10e>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a16      	ldr	r2, [pc, #88]	@ (8008c08 <HAL_TIM_PWM_Start+0x158>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d004      	beq.n	8008bbe <HAL_TIM_PWM_Start+0x10e>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a14      	ldr	r2, [pc, #80]	@ (8008c0c <HAL_TIM_PWM_Start+0x15c>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d111      	bne.n	8008be2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f003 0307 	and.w	r3, r3, #7
 8008bc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2b06      	cmp	r3, #6
 8008bce:	d010      	beq.n	8008bf2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f042 0201 	orr.w	r2, r2, #1
 8008bde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008be0:	e007      	b.n	8008bf2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f042 0201 	orr.w	r2, r2, #1
 8008bf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	40010000 	.word	0x40010000
 8008c00:	40000400 	.word	0x40000400
 8008c04:	40000800 	.word	0x40000800
 8008c08:	40000c00 	.word	0x40000c00
 8008c0c:	40014000 	.word	0x40014000

08008c10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e097      	b.n	8008d54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d106      	bne.n	8008c3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f88f 	bl	8008d5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2202      	movs	r2, #2
 8008c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	6812      	ldr	r2, [r2, #0]
 8008c50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c54:	f023 0307 	bic.w	r3, r3, #7
 8008c58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	3304      	adds	r3, #4
 8008c62:	4619      	mov	r1, r3
 8008c64:	4610      	mov	r0, r2
 8008c66:	f000 fb03 	bl	8009270 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c92:	f023 0303 	bic.w	r3, r3, #3
 8008c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	689a      	ldr	r2, [r3, #8]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	021b      	lsls	r3, r3, #8
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008cb0:	f023 030c 	bic.w	r3, r3, #12
 8008cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008cbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008cc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	68da      	ldr	r2, [r3, #12]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	021b      	lsls	r3, r3, #8
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	011a      	lsls	r2, r3, #4
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	031b      	lsls	r3, r3, #12
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008cee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008cf6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	011b      	lsls	r3, r3, #4
 8008d02:	4313      	orrs	r3, r2
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2201      	movs	r2, #1
 8008d36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008d98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d110      	bne.n	8008dc2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d102      	bne.n	8008dac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008da6:	7b7b      	ldrb	r3, [r7, #13]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d001      	beq.n	8008db0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e069      	b.n	8008e84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2202      	movs	r2, #2
 8008db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008dc0:	e031      	b.n	8008e26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b04      	cmp	r3, #4
 8008dc6:	d110      	bne.n	8008dea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d102      	bne.n	8008dd4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008dce:	7b3b      	ldrb	r3, [r7, #12]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d001      	beq.n	8008dd8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e055      	b.n	8008e84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2202      	movs	r2, #2
 8008ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2202      	movs	r2, #2
 8008de4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008de8:	e01d      	b.n	8008e26 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d108      	bne.n	8008e02 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d105      	bne.n	8008e02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008df6:	7b7b      	ldrb	r3, [r7, #13]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d102      	bne.n	8008e02 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008dfc:	7b3b      	ldrb	r3, [r7, #12]
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d001      	beq.n	8008e06 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	e03e      	b.n	8008e84 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2202      	movs	r2, #2
 8008e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2202      	movs	r2, #2
 8008e12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2202      	movs	r2, #2
 8008e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2202      	movs	r2, #2
 8008e22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d003      	beq.n	8008e34 <HAL_TIM_Encoder_Start+0xc4>
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d008      	beq.n	8008e44 <HAL_TIM_Encoder_Start+0xd4>
 8008e32:	e00f      	b.n	8008e54 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	2100      	movs	r1, #0
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 fc23 	bl	8009688 <TIM_CCxChannelCmd>
      break;
 8008e42:	e016      	b.n	8008e72 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	2104      	movs	r1, #4
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 fc1b 	bl	8009688 <TIM_CCxChannelCmd>
      break;
 8008e52:	e00e      	b.n	8008e72 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f000 fc13 	bl	8009688 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2201      	movs	r2, #1
 8008e68:	2104      	movs	r1, #4
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 fc0c 	bl	8009688 <TIM_CCxChannelCmd>
      break;
 8008e70:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f042 0201 	orr.w	r2, r2, #1
 8008e80:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	f003 0302 	and.w	r3, r3, #2
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d122      	bne.n	8008ee8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f003 0302 	and.w	r3, r3, #2
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d11b      	bne.n	8008ee8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f06f 0202 	mvn.w	r2, #2
 8008eb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	f003 0303 	and.w	r3, r3, #3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d003      	beq.n	8008ed6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f9b0 	bl	8009234 <HAL_TIM_IC_CaptureCallback>
 8008ed4:	e005      	b.n	8008ee2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f9a2 	bl	8009220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f9b3 	bl	8009248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	f003 0304 	and.w	r3, r3, #4
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d122      	bne.n	8008f3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b04      	cmp	r3, #4
 8008f02:	d11b      	bne.n	8008f3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f06f 0204 	mvn.w	r2, #4
 8008f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2202      	movs	r2, #2
 8008f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d003      	beq.n	8008f2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f986 	bl	8009234 <HAL_TIM_IC_CaptureCallback>
 8008f28:	e005      	b.n	8008f36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f978 	bl	8009220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f989 	bl	8009248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	f003 0308 	and.w	r3, r3, #8
 8008f46:	2b08      	cmp	r3, #8
 8008f48:	d122      	bne.n	8008f90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	f003 0308 	and.w	r3, r3, #8
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	d11b      	bne.n	8008f90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f06f 0208 	mvn.w	r2, #8
 8008f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2204      	movs	r2, #4
 8008f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	f003 0303 	and.w	r3, r3, #3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f95c 	bl	8009234 <HAL_TIM_IC_CaptureCallback>
 8008f7c:	e005      	b.n	8008f8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f94e 	bl	8009220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f95f 	bl	8009248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	f003 0310 	and.w	r3, r3, #16
 8008f9a:	2b10      	cmp	r3, #16
 8008f9c:	d122      	bne.n	8008fe4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	f003 0310 	and.w	r3, r3, #16
 8008fa8:	2b10      	cmp	r3, #16
 8008faa:	d11b      	bne.n	8008fe4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f06f 0210 	mvn.w	r2, #16
 8008fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2208      	movs	r2, #8
 8008fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 f932 	bl	8009234 <HAL_TIM_IC_CaptureCallback>
 8008fd0:	e005      	b.n	8008fde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f924 	bl	8009220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f935 	bl	8009248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d10e      	bne.n	8009010 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d107      	bne.n	8009010 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f06f 0201 	mvn.w	r2, #1
 8009008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7f9 ffea 	bl	8002fe4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800901a:	2b80      	cmp	r3, #128	@ 0x80
 800901c:	d10e      	bne.n	800903c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009028:	2b80      	cmp	r3, #128	@ 0x80
 800902a:	d107      	bne.n	800903c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 fb55 	bl	80096e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009046:	2b40      	cmp	r3, #64	@ 0x40
 8009048:	d10e      	bne.n	8009068 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009054:	2b40      	cmp	r3, #64	@ 0x40
 8009056:	d107      	bne.n	8009068 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f8fa 	bl	800925c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	f003 0320 	and.w	r3, r3, #32
 8009072:	2b20      	cmp	r3, #32
 8009074:	d10e      	bne.n	8009094 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	f003 0320 	and.w	r3, r3, #32
 8009080:	2b20      	cmp	r3, #32
 8009082:	d107      	bne.n	8009094 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f06f 0220 	mvn.w	r2, #32
 800908c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fb1f 	bl	80096d2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009094:	bf00      	nop
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d101      	bne.n	80090ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80090b6:	2302      	movs	r3, #2
 80090b8:	e0ae      	b.n	8009218 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b0c      	cmp	r3, #12
 80090c6:	f200 809f 	bhi.w	8009208 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80090ca:	a201      	add	r2, pc, #4	@ (adr r2, 80090d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80090cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d0:	08009105 	.word	0x08009105
 80090d4:	08009209 	.word	0x08009209
 80090d8:	08009209 	.word	0x08009209
 80090dc:	08009209 	.word	0x08009209
 80090e0:	08009145 	.word	0x08009145
 80090e4:	08009209 	.word	0x08009209
 80090e8:	08009209 	.word	0x08009209
 80090ec:	08009209 	.word	0x08009209
 80090f0:	08009187 	.word	0x08009187
 80090f4:	08009209 	.word	0x08009209
 80090f8:	08009209 	.word	0x08009209
 80090fc:	08009209 	.word	0x08009209
 8009100:	080091c7 	.word	0x080091c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	68b9      	ldr	r1, [r7, #8]
 800910a:	4618      	mov	r0, r3
 800910c:	f000 f930 	bl	8009370 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	699a      	ldr	r2, [r3, #24]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f042 0208 	orr.w	r2, r2, #8
 800911e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	699a      	ldr	r2, [r3, #24]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f022 0204 	bic.w	r2, r2, #4
 800912e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	6999      	ldr	r1, [r3, #24]
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	691a      	ldr	r2, [r3, #16]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	430a      	orrs	r2, r1
 8009140:	619a      	str	r2, [r3, #24]
      break;
 8009142:	e064      	b.n	800920e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68b9      	ldr	r1, [r7, #8]
 800914a:	4618      	mov	r0, r3
 800914c:	f000 f976 	bl	800943c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	699a      	ldr	r2, [r3, #24]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800915e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	699a      	ldr	r2, [r3, #24]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800916e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6999      	ldr	r1, [r3, #24]
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	021a      	lsls	r2, r3, #8
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	430a      	orrs	r2, r1
 8009182:	619a      	str	r2, [r3, #24]
      break;
 8009184:	e043      	b.n	800920e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68b9      	ldr	r1, [r7, #8]
 800918c:	4618      	mov	r0, r3
 800918e:	f000 f9c1 	bl	8009514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	69da      	ldr	r2, [r3, #28]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f042 0208 	orr.w	r2, r2, #8
 80091a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	69da      	ldr	r2, [r3, #28]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f022 0204 	bic.w	r2, r2, #4
 80091b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69d9      	ldr	r1, [r3, #28]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	691a      	ldr	r2, [r3, #16]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	430a      	orrs	r2, r1
 80091c2:	61da      	str	r2, [r3, #28]
      break;
 80091c4:	e023      	b.n	800920e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 fa0b 	bl	80095e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69da      	ldr	r2, [r3, #28]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	69da      	ldr	r2, [r3, #28]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	69d9      	ldr	r1, [r3, #28]
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	021a      	lsls	r2, r3, #8
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	61da      	str	r2, [r3, #28]
      break;
 8009206:	e002      	b.n	800920e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	75fb      	strb	r3, [r7, #23]
      break;
 800920c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009216:	7dfb      	ldrb	r3, [r7, #23]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3718      	adds	r7, #24
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a34      	ldr	r2, [pc, #208]	@ (8009354 <TIM_Base_SetConfig+0xe4>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d00f      	beq.n	80092a8 <TIM_Base_SetConfig+0x38>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800928e:	d00b      	beq.n	80092a8 <TIM_Base_SetConfig+0x38>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a31      	ldr	r2, [pc, #196]	@ (8009358 <TIM_Base_SetConfig+0xe8>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d007      	beq.n	80092a8 <TIM_Base_SetConfig+0x38>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a30      	ldr	r2, [pc, #192]	@ (800935c <TIM_Base_SetConfig+0xec>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d003      	beq.n	80092a8 <TIM_Base_SetConfig+0x38>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a2f      	ldr	r2, [pc, #188]	@ (8009360 <TIM_Base_SetConfig+0xf0>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d108      	bne.n	80092ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a25      	ldr	r2, [pc, #148]	@ (8009354 <TIM_Base_SetConfig+0xe4>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d01b      	beq.n	80092fa <TIM_Base_SetConfig+0x8a>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092c8:	d017      	beq.n	80092fa <TIM_Base_SetConfig+0x8a>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a22      	ldr	r2, [pc, #136]	@ (8009358 <TIM_Base_SetConfig+0xe8>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d013      	beq.n	80092fa <TIM_Base_SetConfig+0x8a>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	4a21      	ldr	r2, [pc, #132]	@ (800935c <TIM_Base_SetConfig+0xec>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d00f      	beq.n	80092fa <TIM_Base_SetConfig+0x8a>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a20      	ldr	r2, [pc, #128]	@ (8009360 <TIM_Base_SetConfig+0xf0>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d00b      	beq.n	80092fa <TIM_Base_SetConfig+0x8a>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a1f      	ldr	r2, [pc, #124]	@ (8009364 <TIM_Base_SetConfig+0xf4>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d007      	beq.n	80092fa <TIM_Base_SetConfig+0x8a>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a1e      	ldr	r2, [pc, #120]	@ (8009368 <TIM_Base_SetConfig+0xf8>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d003      	beq.n	80092fa <TIM_Base_SetConfig+0x8a>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a1d      	ldr	r2, [pc, #116]	@ (800936c <TIM_Base_SetConfig+0xfc>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d108      	bne.n	800930c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	4313      	orrs	r3, r2
 800930a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	4313      	orrs	r3, r2
 8009318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	689a      	ldr	r2, [r3, #8]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a08      	ldr	r2, [pc, #32]	@ (8009354 <TIM_Base_SetConfig+0xe4>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d103      	bne.n	8009340 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	691a      	ldr	r2, [r3, #16]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	615a      	str	r2, [r3, #20]
}
 8009346:	bf00      	nop
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	40010000 	.word	0x40010000
 8009358:	40000400 	.word	0x40000400
 800935c:	40000800 	.word	0x40000800
 8009360:	40000c00 	.word	0x40000c00
 8009364:	40014000 	.word	0x40014000
 8009368:	40014400 	.word	0x40014400
 800936c:	40014800 	.word	0x40014800

08009370 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009370:	b480      	push	{r7}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	f023 0201 	bic.w	r2, r3, #1
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800939e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f023 0303 	bic.w	r3, r3, #3
 80093a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f023 0302 	bic.w	r3, r3, #2
 80093b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a1c      	ldr	r2, [pc, #112]	@ (8009438 <TIM_OC1_SetConfig+0xc8>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d10c      	bne.n	80093e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	f023 0308 	bic.w	r3, r3, #8
 80093d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	697a      	ldr	r2, [r7, #20]
 80093da:	4313      	orrs	r3, r2
 80093dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f023 0304 	bic.w	r3, r3, #4
 80093e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a13      	ldr	r2, [pc, #76]	@ (8009438 <TIM_OC1_SetConfig+0xc8>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d111      	bne.n	8009412 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80093fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	693a      	ldr	r2, [r7, #16]
 8009404:	4313      	orrs	r3, r2
 8009406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	699b      	ldr	r3, [r3, #24]
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	4313      	orrs	r3, r2
 8009410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	685a      	ldr	r2, [r3, #4]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	621a      	str	r2, [r3, #32]
}
 800942c:	bf00      	nop
 800942e:	371c      	adds	r7, #28
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	40010000 	.word	0x40010000

0800943c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	f023 0210 	bic.w	r2, r3, #16
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	699b      	ldr	r3, [r3, #24]
 8009462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800946a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	021b      	lsls	r3, r3, #8
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	4313      	orrs	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	f023 0320 	bic.w	r3, r3, #32
 8009486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	011b      	lsls	r3, r3, #4
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	4313      	orrs	r3, r2
 8009492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a1e      	ldr	r2, [pc, #120]	@ (8009510 <TIM_OC2_SetConfig+0xd4>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d10d      	bne.n	80094b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	011b      	lsls	r3, r3, #4
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	4313      	orrs	r3, r2
 80094ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a15      	ldr	r2, [pc, #84]	@ (8009510 <TIM_OC2_SetConfig+0xd4>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d113      	bne.n	80094e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80094c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80094ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	693a      	ldr	r2, [r7, #16]
 80094d8:	4313      	orrs	r3, r2
 80094da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	4313      	orrs	r3, r2
 80094e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	621a      	str	r2, [r3, #32]
}
 8009502:	bf00      	nop
 8009504:	371c      	adds	r7, #28
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	40010000 	.word	0x40010000

08009514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	69db      	ldr	r3, [r3, #28]
 800953a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f023 0303 	bic.w	r3, r3, #3
 800954a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	4313      	orrs	r3, r2
 8009554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800955c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	021b      	lsls	r3, r3, #8
 8009564:	697a      	ldr	r2, [r7, #20]
 8009566:	4313      	orrs	r3, r2
 8009568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a1d      	ldr	r2, [pc, #116]	@ (80095e4 <TIM_OC3_SetConfig+0xd0>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d10d      	bne.n	800958e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	68db      	ldr	r3, [r3, #12]
 800957e:	021b      	lsls	r3, r3, #8
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	4313      	orrs	r3, r2
 8009584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800958c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a14      	ldr	r2, [pc, #80]	@ (80095e4 <TIM_OC3_SetConfig+0xd0>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d113      	bne.n	80095be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800959c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80095a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	011b      	lsls	r3, r3, #4
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	699b      	ldr	r3, [r3, #24]
 80095b6:	011b      	lsls	r3, r3, #4
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	685a      	ldr	r2, [r3, #4]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	621a      	str	r2, [r3, #32]
}
 80095d8:	bf00      	nop
 80095da:	371c      	adds	r7, #28
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	40010000 	.word	0x40010000

080095e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b087      	sub	sp, #28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	69db      	ldr	r3, [r3, #28]
 800960e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800961e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	021b      	lsls	r3, r3, #8
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	4313      	orrs	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	031b      	lsls	r3, r3, #12
 800963a:	693a      	ldr	r2, [r7, #16]
 800963c:	4313      	orrs	r3, r2
 800963e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a10      	ldr	r2, [pc, #64]	@ (8009684 <TIM_OC4_SetConfig+0x9c>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d109      	bne.n	800965c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800964e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	695b      	ldr	r3, [r3, #20]
 8009654:	019b      	lsls	r3, r3, #6
 8009656:	697a      	ldr	r2, [r7, #20]
 8009658:	4313      	orrs	r3, r2
 800965a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	697a      	ldr	r2, [r7, #20]
 8009660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	685a      	ldr	r2, [r3, #4]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	621a      	str	r2, [r3, #32]
}
 8009676:	bf00      	nop
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	40010000 	.word	0x40010000

08009688 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009688:	b480      	push	{r7}
 800968a:	b087      	sub	sp, #28
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	f003 031f 	and.w	r3, r3, #31
 800969a:	2201      	movs	r2, #1
 800969c:	fa02 f303 	lsl.w	r3, r2, r3
 80096a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6a1a      	ldr	r2, [r3, #32]
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	43db      	mvns	r3, r3
 80096aa:	401a      	ands	r2, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6a1a      	ldr	r2, [r3, #32]
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	f003 031f 	and.w	r3, r3, #31
 80096ba:	6879      	ldr	r1, [r7, #4]
 80096bc:	fa01 f303 	lsl.w	r3, r1, r3
 80096c0:	431a      	orrs	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	621a      	str	r2, [r3, #32]
}
 80096c6:	bf00      	nop
 80096c8:	371c      	adds	r7, #28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b083      	sub	sp, #12
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096da:	bf00      	nop
 80096dc:	370c      	adds	r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096ee:	bf00      	nop
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e03f      	b.n	800978c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009712:	b2db      	uxtb	r3, r3
 8009714:	2b00      	cmp	r3, #0
 8009716:	d106      	bne.n	8009726 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7fa fa23 	bl	8003b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2224      	movs	r2, #36	@ 0x24
 800972a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68da      	ldr	r2, [r3, #12]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800973c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f001 f8d6 	bl	800a8f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	691a      	ldr	r2, [r3, #16]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009752:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	695a      	ldr	r2, [r3, #20]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009762:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68da      	ldr	r2, [r3, #12]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009772:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2220      	movs	r2, #32
 800977e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2220      	movs	r2, #32
 8009786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b08a      	sub	sp, #40	@ 0x28
 8009798:	af02      	add	r7, sp, #8
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	603b      	str	r3, [r7, #0]
 80097a0:	4613      	mov	r3, r2
 80097a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80097a4:	2300      	movs	r3, #0
 80097a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	2b20      	cmp	r3, #32
 80097b2:	d17c      	bne.n	80098ae <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d002      	beq.n	80097c0 <HAL_UART_Transmit+0x2c>
 80097ba:	88fb      	ldrh	r3, [r7, #6]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d101      	bne.n	80097c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	e075      	b.n	80098b0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d101      	bne.n	80097d2 <HAL_UART_Transmit+0x3e>
 80097ce:	2302      	movs	r3, #2
 80097d0:	e06e      	b.n	80098b0 <HAL_UART_Transmit+0x11c>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2221      	movs	r2, #33	@ 0x21
 80097e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097e8:	f7fa ffa8 	bl	800473c <HAL_GetTick>
 80097ec:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	88fa      	ldrh	r2, [r7, #6]
 80097f2:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	88fa      	ldrh	r2, [r7, #6]
 80097f8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009802:	d108      	bne.n	8009816 <HAL_UART_Transmit+0x82>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d104      	bne.n	8009816 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800980c:	2300      	movs	r3, #0
 800980e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	61bb      	str	r3, [r7, #24]
 8009814:	e003      	b.n	800981e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800981a:	2300      	movs	r3, #0
 800981c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8009826:	e02a      	b.n	800987e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2200      	movs	r2, #0
 8009830:	2180      	movs	r1, #128	@ 0x80
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f000 fd8d 	bl	800a352 <UART_WaitOnFlagUntilTimeout>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	e036      	b.n	80098b0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009842:	69fb      	ldr	r3, [r7, #28]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10b      	bne.n	8009860 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	881b      	ldrh	r3, [r3, #0]
 800984c:	461a      	mov	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009856:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009858:	69bb      	ldr	r3, [r7, #24]
 800985a:	3302      	adds	r3, #2
 800985c:	61bb      	str	r3, [r7, #24]
 800985e:	e007      	b.n	8009870 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	781a      	ldrb	r2, [r3, #0]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	3301      	adds	r3, #1
 800986e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009874:	b29b      	uxth	r3, r3
 8009876:	3b01      	subs	r3, #1
 8009878:	b29a      	uxth	r2, r3
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009882:	b29b      	uxth	r3, r3
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1cf      	bne.n	8009828 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	9300      	str	r3, [sp, #0]
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	2200      	movs	r2, #0
 8009890:	2140      	movs	r1, #64	@ 0x40
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f000 fd5d 	bl	800a352 <UART_WaitOnFlagUntilTimeout>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d001      	beq.n	80098a2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800989e:	2303      	movs	r3, #3
 80098a0:	e006      	b.n	80098b0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2220      	movs	r2, #32
 80098a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	e000      	b.n	80098b0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80098ae:	2302      	movs	r3, #2
  }
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3720      	adds	r7, #32
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08c      	sub	sp, #48	@ 0x30
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	4613      	mov	r3, r2
 80098c4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b20      	cmp	r3, #32
 80098d0:	d165      	bne.n	800999e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d002      	beq.n	80098de <HAL_UART_Transmit_DMA+0x26>
 80098d8:	88fb      	ldrh	r3, [r7, #6]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d101      	bne.n	80098e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e05e      	b.n	80099a0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d101      	bne.n	80098f0 <HAL_UART_Transmit_DMA+0x38>
 80098ec:	2302      	movs	r3, #2
 80098ee:	e057      	b.n	80099a0 <HAL_UART_Transmit_DMA+0xe8>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	88fa      	ldrh	r2, [r7, #6]
 8009902:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	88fa      	ldrh	r2, [r7, #6]
 8009908:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2221      	movs	r2, #33	@ 0x21
 8009914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800991c:	4a22      	ldr	r2, [pc, #136]	@ (80099a8 <HAL_UART_Transmit_DMA+0xf0>)
 800991e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009924:	4a21      	ldr	r2, [pc, #132]	@ (80099ac <HAL_UART_Transmit_DMA+0xf4>)
 8009926:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800992c:	4a20      	ldr	r2, [pc, #128]	@ (80099b0 <HAL_UART_Transmit_DMA+0xf8>)
 800992e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009934:	2200      	movs	r2, #0
 8009936:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8009938:	f107 0308 	add.w	r3, r7, #8
 800993c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8009942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009944:	6819      	ldr	r1, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	3304      	adds	r3, #4
 800994c:	461a      	mov	r2, r3
 800994e:	88fb      	ldrh	r3, [r7, #6]
 8009950:	f7fb f9c8 	bl	8004ce4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800995c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	3314      	adds	r3, #20
 800996c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800996e:	69bb      	ldr	r3, [r7, #24]
 8009970:	e853 3f00 	ldrex	r3, [r3]
 8009974:	617b      	str	r3, [r7, #20]
   return(result);
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800997c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3314      	adds	r3, #20
 8009984:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009986:	627a      	str	r2, [r7, #36]	@ 0x24
 8009988:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800998a:	6a39      	ldr	r1, [r7, #32]
 800998c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800998e:	e841 2300 	strex	r3, r2, [r1]
 8009992:	61fb      	str	r3, [r7, #28]
   return(result);
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d1e5      	bne.n	8009966 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	e000      	b.n	80099a0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800999e:	2302      	movs	r3, #2
  }
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3730      	adds	r7, #48	@ 0x30
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	0800a0ad 	.word	0x0800a0ad
 80099ac:	0800a147 	.word	0x0800a147
 80099b0:	0800a2bf 	.word	0x0800a2bf

080099b4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	4613      	mov	r3, r2
 80099c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b20      	cmp	r3, #32
 80099cc:	d11d      	bne.n	8009a0a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <HAL_UART_Receive_DMA+0x26>
 80099d4:	88fb      	ldrh	r3, [r7, #6]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d101      	bne.n	80099de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e016      	b.n	8009a0c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d101      	bne.n	80099ec <HAL_UART_Receive_DMA+0x38>
 80099e8:	2302      	movs	r3, #2
 80099ea:	e00f      	b.n	8009a0c <HAL_UART_Receive_DMA+0x58>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80099fa:	88fb      	ldrh	r3, [r7, #6]
 80099fc:	461a      	mov	r2, r3
 80099fe:	68b9      	ldr	r1, [r7, #8]
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 fd15 	bl	800a430 <UART_Start_Receive_DMA>
 8009a06:	4603      	mov	r3, r0
 8009a08:	e000      	b.n	8009a0c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009a0a:	2302      	movs	r3, #2
  }
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b090      	sub	sp, #64	@ 0x40
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	695b      	ldr	r3, [r3, #20]
 8009a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a2a:	2b80      	cmp	r3, #128	@ 0x80
 8009a2c:	bf0c      	ite	eq
 8009a2e:	2301      	moveq	r3, #1
 8009a30:	2300      	movne	r3, #0
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b21      	cmp	r3, #33	@ 0x21
 8009a40:	d128      	bne.n	8009a94 <HAL_UART_DMAStop+0x80>
 8009a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d025      	beq.n	8009a94 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3314      	adds	r3, #20
 8009a4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a52:	e853 3f00 	ldrex	r3, [r3]
 8009a56:	623b      	str	r3, [r7, #32]
   return(result);
 8009a58:	6a3b      	ldr	r3, [r7, #32]
 8009a5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	3314      	adds	r3, #20
 8009a66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a68:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a70:	e841 2300 	strex	r3, r2, [r1]
 8009a74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1e5      	bne.n	8009a48 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d004      	beq.n	8009a8e <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fb f983 	bl	8004d94 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 fd6c 	bl	800a56c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	695b      	ldr	r3, [r3, #20]
 8009a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a9e:	2b40      	cmp	r3, #64	@ 0x40
 8009aa0:	bf0c      	ite	eq
 8009aa2:	2301      	moveq	r3, #1
 8009aa4:	2300      	movne	r3, #0
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	2b22      	cmp	r3, #34	@ 0x22
 8009ab4:	d128      	bne.n	8009b08 <HAL_UART_DMAStop+0xf4>
 8009ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d025      	beq.n	8009b08 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3314      	adds	r3, #20
 8009ac2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	e853 3f00 	ldrex	r3, [r3]
 8009aca:	60fb      	str	r3, [r7, #12]
   return(result);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3314      	adds	r3, #20
 8009ada:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009adc:	61fa      	str	r2, [r7, #28]
 8009ade:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae0:	69b9      	ldr	r1, [r7, #24]
 8009ae2:	69fa      	ldr	r2, [r7, #28]
 8009ae4:	e841 2300 	strex	r3, r2, [r1]
 8009ae8:	617b      	str	r3, [r7, #20]
   return(result);
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1e5      	bne.n	8009abc <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d004      	beq.n	8009b02 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fb f949 	bl	8004d94 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 fd5a 	bl	800a5bc <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3740      	adds	r7, #64	@ 0x40
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
	...

08009b14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b0ba      	sub	sp, #232	@ 0xe8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	695b      	ldr	r3, [r3, #20]
 8009b36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009b40:	2300      	movs	r3, #0
 8009b42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b4a:	f003 030f 	and.w	r3, r3, #15
 8009b4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009b52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d10f      	bne.n	8009b7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b5e:	f003 0320 	and.w	r3, r3, #32
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d009      	beq.n	8009b7a <HAL_UART_IRQHandler+0x66>
 8009b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b6a:	f003 0320 	and.w	r3, r3, #32
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fe01 	bl	800a77a <UART_Receive_IT>
      return;
 8009b78:	e256      	b.n	800a028 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009b7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f000 80de 	beq.w	8009d40 <HAL_UART_IRQHandler+0x22c>
 8009b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d106      	bne.n	8009b9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b94:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f000 80d1 	beq.w	8009d40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00b      	beq.n	8009bc2 <HAL_UART_IRQHandler+0xae>
 8009baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d005      	beq.n	8009bc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bba:	f043 0201 	orr.w	r2, r3, #1
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bc6:	f003 0304 	and.w	r3, r3, #4
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00b      	beq.n	8009be6 <HAL_UART_IRQHandler+0xd2>
 8009bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d005      	beq.n	8009be6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bde:	f043 0202 	orr.w	r2, r3, #2
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bea:	f003 0302 	and.w	r3, r3, #2
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00b      	beq.n	8009c0a <HAL_UART_IRQHandler+0xf6>
 8009bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d005      	beq.n	8009c0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c02:	f043 0204 	orr.w	r2, r3, #4
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c0e:	f003 0308 	and.w	r3, r3, #8
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d011      	beq.n	8009c3a <HAL_UART_IRQHandler+0x126>
 8009c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c1a:	f003 0320 	and.w	r3, r3, #32
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d105      	bne.n	8009c2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d005      	beq.n	8009c3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c32:	f043 0208 	orr.w	r2, r3, #8
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f000 81ed 	beq.w	800a01e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c48:	f003 0320 	and.w	r3, r3, #32
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d008      	beq.n	8009c62 <HAL_UART_IRQHandler+0x14e>
 8009c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c54:	f003 0320 	and.w	r3, r3, #32
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d002      	beq.n	8009c62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fd8c 	bl	800a77a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c6c:	2b40      	cmp	r3, #64	@ 0x40
 8009c6e:	bf0c      	ite	eq
 8009c70:	2301      	moveq	r3, #1
 8009c72:	2300      	movne	r3, #0
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c7e:	f003 0308 	and.w	r3, r3, #8
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d103      	bne.n	8009c8e <HAL_UART_IRQHandler+0x17a>
 8009c86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d04f      	beq.n	8009d2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fc94 	bl	800a5bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c9e:	2b40      	cmp	r3, #64	@ 0x40
 8009ca0:	d141      	bne.n	8009d26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3314      	adds	r3, #20
 8009ca8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009cb0:	e853 3f00 	ldrex	r3, [r3]
 8009cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3314      	adds	r3, #20
 8009cca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009cce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009cda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1d9      	bne.n	8009ca2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d013      	beq.n	8009d1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cfa:	4a7d      	ldr	r2, [pc, #500]	@ (8009ef0 <HAL_UART_IRQHandler+0x3dc>)
 8009cfc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fb f8b6 	bl	8004e74 <HAL_DMA_Abort_IT>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d016      	beq.n	8009d3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009d18:	4610      	mov	r0, r2
 8009d1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d1c:	e00e      	b.n	8009d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f9ae 	bl	800a080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d24:	e00a      	b.n	8009d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f9aa 	bl	800a080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d2c:	e006      	b.n	8009d3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f9a6 	bl	800a080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2200      	movs	r2, #0
 8009d38:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8009d3a:	e170      	b.n	800a01e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d3c:	bf00      	nop
    return;
 8009d3e:	e16e      	b.n	800a01e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	f040 814a 	bne.w	8009fde <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d4e:	f003 0310 	and.w	r3, r3, #16
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 8143 	beq.w	8009fde <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d5c:	f003 0310 	and.w	r3, r3, #16
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 813c 	beq.w	8009fde <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009d66:	2300      	movs	r3, #0
 8009d68:	60bb      	str	r3, [r7, #8]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	60bb      	str	r3, [r7, #8]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	60bb      	str	r3, [r7, #8]
 8009d7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d86:	2b40      	cmp	r3, #64	@ 0x40
 8009d88:	f040 80b4 	bne.w	8009ef4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009d98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f000 8140 	beq.w	800a022 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009daa:	429a      	cmp	r2, r3
 8009dac:	f080 8139 	bcs.w	800a022 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009db6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dbc:	69db      	ldr	r3, [r3, #28]
 8009dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dc2:	f000 8088 	beq.w	8009ed6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	330c      	adds	r3, #12
 8009dcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009dd4:	e853 3f00 	ldrex	r3, [r3]
 8009dd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009ddc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009de4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	330c      	adds	r3, #12
 8009dee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009df2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009df6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009dfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e02:	e841 2300 	strex	r3, r2, [r1]
 8009e06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1d9      	bne.n	8009dc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	3314      	adds	r3, #20
 8009e18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e1c:	e853 3f00 	ldrex	r3, [r3]
 8009e20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009e22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e24:	f023 0301 	bic.w	r3, r3, #1
 8009e28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3314      	adds	r3, #20
 8009e32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009e36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009e3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009e3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e42:	e841 2300 	strex	r3, r2, [r1]
 8009e46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1e1      	bne.n	8009e12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	3314      	adds	r3, #20
 8009e54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e58:	e853 3f00 	ldrex	r3, [r3]
 8009e5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3314      	adds	r3, #20
 8009e6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009e72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e7a:	e841 2300 	strex	r3, r2, [r1]
 8009e7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009e80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1e3      	bne.n	8009e4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2220      	movs	r2, #32
 8009e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	330c      	adds	r3, #12
 8009e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e9e:	e853 3f00 	ldrex	r3, [r3]
 8009ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ea4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ea6:	f023 0310 	bic.w	r3, r3, #16
 8009eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	330c      	adds	r3, #12
 8009eb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009eb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009eba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ebe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ec0:	e841 2300 	strex	r3, r2, [r1]
 8009ec4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1e3      	bne.n	8009e94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7fa ff5f 	bl	8004d94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f8d4 	bl	800a094 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009eec:	e099      	b.n	800a022 <HAL_UART_IRQHandler+0x50e>
 8009eee:	bf00      	nop
 8009ef0:	0800a683 	.word	0x0800a683
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f000 808b 	beq.w	800a026 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009f10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f000 8086 	beq.w	800a026 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	330c      	adds	r3, #12
 8009f20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f24:	e853 3f00 	ldrex	r3, [r3]
 8009f28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	330c      	adds	r3, #12
 8009f3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009f3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009f40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f46:	e841 2300 	strex	r3, r2, [r1]
 8009f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1e3      	bne.n	8009f1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3314      	adds	r3, #20
 8009f58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5c:	e853 3f00 	ldrex	r3, [r3]
 8009f60:	623b      	str	r3, [r7, #32]
   return(result);
 8009f62:	6a3b      	ldr	r3, [r7, #32]
 8009f64:	f023 0301 	bic.w	r3, r3, #1
 8009f68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	3314      	adds	r3, #20
 8009f72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009f76:	633a      	str	r2, [r7, #48]	@ 0x30
 8009f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f7e:	e841 2300 	strex	r3, r2, [r1]
 8009f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1e3      	bne.n	8009f52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	330c      	adds	r3, #12
 8009f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	e853 3f00 	ldrex	r3, [r3]
 8009fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f023 0310 	bic.w	r3, r3, #16
 8009fae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	330c      	adds	r3, #12
 8009fb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009fbc:	61fa      	str	r2, [r7, #28]
 8009fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc0:	69b9      	ldr	r1, [r7, #24]
 8009fc2:	69fa      	ldr	r2, [r7, #28]
 8009fc4:	e841 2300 	strex	r3, r2, [r1]
 8009fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1e3      	bne.n	8009f98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f85c 	bl	800a094 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009fdc:	e023      	b.n	800a026 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d009      	beq.n	8009ffe <HAL_UART_IRQHandler+0x4ea>
 8009fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d003      	beq.n	8009ffe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 fb57 	bl	800a6aa <UART_Transmit_IT>
    return;
 8009ffc:	e014      	b.n	800a028 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00e      	beq.n	800a028 <HAL_UART_IRQHandler+0x514>
 800a00a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a00e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a012:	2b00      	cmp	r3, #0
 800a014:	d008      	beq.n	800a028 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 fb97 	bl	800a74a <UART_EndTransmit_IT>
    return;
 800a01c:	e004      	b.n	800a028 <HAL_UART_IRQHandler+0x514>
    return;
 800a01e:	bf00      	nop
 800a020:	e002      	b.n	800a028 <HAL_UART_IRQHandler+0x514>
      return;
 800a022:	bf00      	nop
 800a024:	e000      	b.n	800a028 <HAL_UART_IRQHandler+0x514>
      return;
 800a026:	bf00      	nop
  }
}
 800a028:	37e8      	adds	r7, #232	@ 0xe8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop

0800a030 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a038:	bf00      	nop
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	460b      	mov	r3, r1
 800a09e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b090      	sub	sp, #64	@ 0x40
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d137      	bne.n	800a138 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a0c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a0ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	3314      	adds	r3, #20
 800a0d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d8:	e853 3f00 	ldrex	r3, [r3]
 800a0dc:	623b      	str	r3, [r7, #32]
   return(result);
 800a0de:	6a3b      	ldr	r3, [r7, #32]
 800a0e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a0e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	3314      	adds	r3, #20
 800a0ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0ee:	633a      	str	r2, [r7, #48]	@ 0x30
 800a0f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0f6:	e841 2300 	strex	r3, r2, [r1]
 800a0fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d1e5      	bne.n	800a0ce <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	330c      	adds	r3, #12
 800a108:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	e853 3f00 	ldrex	r3, [r3]
 800a110:	60fb      	str	r3, [r7, #12]
   return(result);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a118:	637b      	str	r3, [r7, #52]	@ 0x34
 800a11a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	330c      	adds	r3, #12
 800a120:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a122:	61fa      	str	r2, [r7, #28]
 800a124:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a126:	69b9      	ldr	r1, [r7, #24]
 800a128:	69fa      	ldr	r2, [r7, #28]
 800a12a:	e841 2300 	strex	r3, r2, [r1]
 800a12e:	617b      	str	r3, [r7, #20]
   return(result);
 800a130:	697b      	ldr	r3, [r7, #20]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d1e5      	bne.n	800a102 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a136:	e002      	b.n	800a13e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a138:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a13a:	f7ff ff79 	bl	800a030 <HAL_UART_TxCpltCallback>
}
 800a13e:	bf00      	nop
 800a140:	3740      	adds	r7, #64	@ 0x40
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a152:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f7ff ff75 	bl	800a044 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a15a:	bf00      	nop
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b09c      	sub	sp, #112	@ 0x70
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d172      	bne.n	800a264 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a17e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a180:	2200      	movs	r2, #0
 800a182:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a184:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	330c      	adds	r3, #12
 800a18a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a18e:	e853 3f00 	ldrex	r3, [r3]
 800a192:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a196:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a19a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a19c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	330c      	adds	r3, #12
 800a1a2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a1a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a1a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a1aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a1ac:	e841 2300 	strex	r3, r2, [r1]
 800a1b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a1b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1e5      	bne.n	800a184 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3314      	adds	r3, #20
 800a1be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c2:	e853 3f00 	ldrex	r3, [r3]
 800a1c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a1c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ca:	f023 0301 	bic.w	r3, r3, #1
 800a1ce:	667b      	str	r3, [r7, #100]	@ 0x64
 800a1d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	3314      	adds	r3, #20
 800a1d6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a1d8:	647a      	str	r2, [r7, #68]	@ 0x44
 800a1da:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1e0:	e841 2300 	strex	r3, r2, [r1]
 800a1e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1e5      	bne.n	800a1b8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	3314      	adds	r3, #20
 800a1f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f6:	e853 3f00 	ldrex	r3, [r3]
 800a1fa:	623b      	str	r3, [r7, #32]
   return(result);
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a202:	663b      	str	r3, [r7, #96]	@ 0x60
 800a204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	3314      	adds	r3, #20
 800a20a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a20c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a20e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a210:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a214:	e841 2300 	strex	r3, r2, [r1]
 800a218:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1e5      	bne.n	800a1ec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a222:	2220      	movs	r2, #32
 800a224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a22a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d119      	bne.n	800a264 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	330c      	adds	r3, #12
 800a236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	e853 3f00 	ldrex	r3, [r3]
 800a23e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f023 0310 	bic.w	r3, r3, #16
 800a246:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a248:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	330c      	adds	r3, #12
 800a24e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a250:	61fa      	str	r2, [r7, #28]
 800a252:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a254:	69b9      	ldr	r1, [r7, #24]
 800a256:	69fa      	ldr	r2, [r7, #28]
 800a258:	e841 2300 	strex	r3, r2, [r1]
 800a25c:	617b      	str	r3, [r7, #20]
   return(result);
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e5      	bne.n	800a230 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d106      	bne.n	800a27a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a26c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a26e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a270:	4619      	mov	r1, r3
 800a272:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a274:	f7ff ff0e 	bl	800a094 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a278:	e002      	b.n	800a280 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a27a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a27c:	f7ff feec 	bl	800a058 <HAL_UART_RxCpltCallback>
}
 800a280:	bf00      	nop
 800a282:	3770      	adds	r7, #112	@ 0x70
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a294:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d108      	bne.n	800a2b0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a2a2:	085b      	lsrs	r3, r3, #1
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f7ff fef3 	bl	800a094 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a2ae:	e002      	b.n	800a2b6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f7ff fedb 	bl	800a06c <HAL_UART_RxHalfCpltCallback>
}
 800a2b6:	bf00      	nop
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b084      	sub	sp, #16
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2da:	2b80      	cmp	r3, #128	@ 0x80
 800a2dc:	bf0c      	ite	eq
 800a2de:	2301      	moveq	r3, #1
 800a2e0:	2300      	movne	r3, #0
 800a2e2:	b2db      	uxtb	r3, r3
 800a2e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	2b21      	cmp	r3, #33	@ 0x21
 800a2f0:	d108      	bne.n	800a304 <UART_DMAError+0x46>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d005      	beq.n	800a304 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a2fe:	68b8      	ldr	r0, [r7, #8]
 800a300:	f000 f934 	bl	800a56c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a30e:	2b40      	cmp	r3, #64	@ 0x40
 800a310:	bf0c      	ite	eq
 800a312:	2301      	moveq	r3, #1
 800a314:	2300      	movne	r3, #0
 800a316:	b2db      	uxtb	r3, r3
 800a318:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a320:	b2db      	uxtb	r3, r3
 800a322:	2b22      	cmp	r3, #34	@ 0x22
 800a324:	d108      	bne.n	800a338 <UART_DMAError+0x7a>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d005      	beq.n	800a338 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	2200      	movs	r2, #0
 800a330:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a332:	68b8      	ldr	r0, [r7, #8]
 800a334:	f000 f942 	bl	800a5bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a33c:	f043 0210 	orr.w	r2, r3, #16
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a344:	68b8      	ldr	r0, [r7, #8]
 800a346:	f7ff fe9b 	bl	800a080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a34a:	bf00      	nop
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b090      	sub	sp, #64	@ 0x40
 800a356:	af00      	add	r7, sp, #0
 800a358:	60f8      	str	r0, [r7, #12]
 800a35a:	60b9      	str	r1, [r7, #8]
 800a35c:	603b      	str	r3, [r7, #0]
 800a35e:	4613      	mov	r3, r2
 800a360:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a362:	e050      	b.n	800a406 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a366:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a36a:	d04c      	beq.n	800a406 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a36c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d007      	beq.n	800a382 <UART_WaitOnFlagUntilTimeout+0x30>
 800a372:	f7fa f9e3 	bl	800473c <HAL_GetTick>
 800a376:	4602      	mov	r2, r0
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a37e:	429a      	cmp	r2, r3
 800a380:	d241      	bcs.n	800a406 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	330c      	adds	r3, #12
 800a388:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38c:	e853 3f00 	ldrex	r3, [r3]
 800a390:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a394:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a398:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	330c      	adds	r3, #12
 800a3a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a3a2:	637a      	str	r2, [r7, #52]	@ 0x34
 800a3a4:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a3a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e5      	bne.n	800a382 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	3314      	adds	r3, #20
 800a3bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	e853 3f00 	ldrex	r3, [r3]
 800a3c4:	613b      	str	r3, [r7, #16]
   return(result);
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	f023 0301 	bic.w	r3, r3, #1
 800a3cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3314      	adds	r3, #20
 800a3d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3d6:	623a      	str	r2, [r7, #32]
 800a3d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3da:	69f9      	ldr	r1, [r7, #28]
 800a3dc:	6a3a      	ldr	r2, [r7, #32]
 800a3de:	e841 2300 	strex	r3, r2, [r1]
 800a3e2:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1e5      	bne.n	800a3b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2220      	movs	r2, #32
 800a3ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2220      	movs	r2, #32
 800a3f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800a402:	2303      	movs	r3, #3
 800a404:	e00f      	b.n	800a426 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	4013      	ands	r3, r2
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	429a      	cmp	r2, r3
 800a414:	bf0c      	ite	eq
 800a416:	2301      	moveq	r3, #1
 800a418:	2300      	movne	r3, #0
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	461a      	mov	r2, r3
 800a41e:	79fb      	ldrb	r3, [r7, #7]
 800a420:	429a      	cmp	r2, r3
 800a422:	d09f      	beq.n	800a364 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3740      	adds	r7, #64	@ 0x40
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
	...

0800a430 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b098      	sub	sp, #96	@ 0x60
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	4613      	mov	r3, r2
 800a43c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a43e:	68ba      	ldr	r2, [r7, #8]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	88fa      	ldrh	r2, [r7, #6]
 800a448:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2222      	movs	r2, #34	@ 0x22
 800a454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a45c:	4a40      	ldr	r2, [pc, #256]	@ (800a560 <UART_Start_Receive_DMA+0x130>)
 800a45e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a464:	4a3f      	ldr	r2, [pc, #252]	@ (800a564 <UART_Start_Receive_DMA+0x134>)
 800a466:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a46c:	4a3e      	ldr	r2, [pc, #248]	@ (800a568 <UART_Start_Receive_DMA+0x138>)
 800a46e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a474:	2200      	movs	r2, #0
 800a476:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a478:	f107 0308 	add.w	r3, r7, #8
 800a47c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	3304      	adds	r3, #4
 800a488:	4619      	mov	r1, r3
 800a48a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	88fb      	ldrh	r3, [r7, #6]
 800a490:	f7fa fc28 	bl	8004ce4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a494:	2300      	movs	r3, #0
 800a496:	613b      	str	r3, [r7, #16]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	613b      	str	r3, [r7, #16]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	613b      	str	r3, [r7, #16]
 800a4a8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	691b      	ldr	r3, [r3, #16]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d019      	beq.n	800a4ee <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	330c      	adds	r3, #12
 800a4c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a4c4:	e853 3f00 	ldrex	r3, [r3]
 800a4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a4d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	330c      	adds	r3, #12
 800a4d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4da:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a4dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4de:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a4e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a4e2:	e841 2300 	strex	r3, r2, [r1]
 800a4e6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a4e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d1e5      	bne.n	800a4ba <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	3314      	adds	r3, #20
 800a4f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f8:	e853 3f00 	ldrex	r3, [r3]
 800a4fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a500:	f043 0301 	orr.w	r3, r3, #1
 800a504:	657b      	str	r3, [r7, #84]	@ 0x54
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	3314      	adds	r3, #20
 800a50c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a50e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a510:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a512:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a514:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a516:	e841 2300 	strex	r3, r2, [r1]
 800a51a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d1e5      	bne.n	800a4ee <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	3314      	adds	r3, #20
 800a528:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	e853 3f00 	ldrex	r3, [r3]
 800a530:	617b      	str	r3, [r7, #20]
   return(result);
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a538:	653b      	str	r3, [r7, #80]	@ 0x50
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3314      	adds	r3, #20
 800a540:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a542:	627a      	str	r2, [r7, #36]	@ 0x24
 800a544:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a546:	6a39      	ldr	r1, [r7, #32]
 800a548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a54a:	e841 2300 	strex	r3, r2, [r1]
 800a54e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d1e5      	bne.n	800a522 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3760      	adds	r7, #96	@ 0x60
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	0800a163 	.word	0x0800a163
 800a564:	0800a289 	.word	0x0800a289
 800a568:	0800a2bf 	.word	0x0800a2bf

0800a56c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b089      	sub	sp, #36	@ 0x24
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	330c      	adds	r3, #12
 800a57a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	e853 3f00 	ldrex	r3, [r3]
 800a582:	60bb      	str	r3, [r7, #8]
   return(result);
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a58a:	61fb      	str	r3, [r7, #28]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	330c      	adds	r3, #12
 800a592:	69fa      	ldr	r2, [r7, #28]
 800a594:	61ba      	str	r2, [r7, #24]
 800a596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a598:	6979      	ldr	r1, [r7, #20]
 800a59a:	69ba      	ldr	r2, [r7, #24]
 800a59c:	e841 2300 	strex	r3, r2, [r1]
 800a5a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1e5      	bne.n	800a574 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2220      	movs	r2, #32
 800a5ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800a5b0:	bf00      	nop
 800a5b2:	3724      	adds	r7, #36	@ 0x24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b095      	sub	sp, #84	@ 0x54
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	330c      	adds	r3, #12
 800a5ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5ce:	e853 3f00 	ldrex	r3, [r3]
 800a5d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	330c      	adds	r3, #12
 800a5e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a5e4:	643a      	str	r2, [r7, #64]	@ 0x40
 800a5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a5ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a5ec:	e841 2300 	strex	r3, r2, [r1]
 800a5f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d1e5      	bne.n	800a5c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	3314      	adds	r3, #20
 800a5fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a600:	6a3b      	ldr	r3, [r7, #32]
 800a602:	e853 3f00 	ldrex	r3, [r3]
 800a606:	61fb      	str	r3, [r7, #28]
   return(result);
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	f023 0301 	bic.w	r3, r3, #1
 800a60e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	3314      	adds	r3, #20
 800a616:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a618:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a61a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a61e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a620:	e841 2300 	strex	r3, r2, [r1]
 800a624:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1e5      	bne.n	800a5f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a630:	2b01      	cmp	r3, #1
 800a632:	d119      	bne.n	800a668 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	330c      	adds	r3, #12
 800a63a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	e853 3f00 	ldrex	r3, [r3]
 800a642:	60bb      	str	r3, [r7, #8]
   return(result);
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	f023 0310 	bic.w	r3, r3, #16
 800a64a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	330c      	adds	r3, #12
 800a652:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a654:	61ba      	str	r2, [r7, #24]
 800a656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a658:	6979      	ldr	r1, [r7, #20]
 800a65a:	69ba      	ldr	r2, [r7, #24]
 800a65c:	e841 2300 	strex	r3, r2, [r1]
 800a660:	613b      	str	r3, [r7, #16]
   return(result);
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1e5      	bne.n	800a634 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2220      	movs	r2, #32
 800a66c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a676:	bf00      	nop
 800a678:	3754      	adds	r7, #84	@ 0x54
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr

0800a682 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b084      	sub	sp, #16
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a68e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2200      	movs	r2, #0
 800a694:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f7ff fcef 	bl	800a080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6a2:	bf00      	nop
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b085      	sub	sp, #20
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	2b21      	cmp	r3, #33	@ 0x21
 800a6bc:	d13e      	bne.n	800a73c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a6c6:	d114      	bne.n	800a6f2 <UART_Transmit_IT+0x48>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d110      	bne.n	800a6f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6a1b      	ldr	r3, [r3, #32]
 800a6d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	881b      	ldrh	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	1c9a      	adds	r2, r3, #2
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	621a      	str	r2, [r3, #32]
 800a6f0:	e008      	b.n	800a704 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a1b      	ldr	r3, [r3, #32]
 800a6f6:	1c59      	adds	r1, r3, #1
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	6211      	str	r1, [r2, #32]
 800a6fc:	781a      	ldrb	r2, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a708:	b29b      	uxth	r3, r3
 800a70a:	3b01      	subs	r3, #1
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	4619      	mov	r1, r3
 800a712:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10f      	bne.n	800a738 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	68da      	ldr	r2, [r3, #12]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a726:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68da      	ldr	r2, [r3, #12]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a736:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a738:	2300      	movs	r3, #0
 800a73a:	e000      	b.n	800a73e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a73c:	2302      	movs	r3, #2
  }
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3714      	adds	r7, #20
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b082      	sub	sp, #8
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	68da      	ldr	r2, [r3, #12]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a760:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2220      	movs	r2, #32
 800a766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f7ff fc60 	bl	800a030 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b08c      	sub	sp, #48	@ 0x30
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	2b22      	cmp	r3, #34	@ 0x22
 800a78c:	f040 80ab 	bne.w	800a8e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a798:	d117      	bne.n	800a7ca <UART_Receive_IT+0x50>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d113      	bne.n	800a7ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7c2:	1c9a      	adds	r2, r3, #2
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	629a      	str	r2, [r3, #40]	@ 0x28
 800a7c8:	e026      	b.n	800a818 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a7dc:	d007      	beq.n	800a7ee <UART_Receive_IT+0x74>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10a      	bne.n	800a7fc <UART_Receive_IT+0x82>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d106      	bne.n	800a7fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	b2da      	uxtb	r2, r3
 800a7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f8:	701a      	strb	r2, [r3, #0]
 800a7fa:	e008      	b.n	800a80e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	b2db      	uxtb	r3, r3
 800a804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a808:	b2da      	uxtb	r2, r3
 800a80a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a812:	1c5a      	adds	r2, r3, #1
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	3b01      	subs	r3, #1
 800a820:	b29b      	uxth	r3, r3
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	4619      	mov	r1, r3
 800a826:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d15a      	bne.n	800a8e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68da      	ldr	r2, [r3, #12]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f022 0220 	bic.w	r2, r2, #32
 800a83a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68da      	ldr	r2, [r3, #12]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a84a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	695a      	ldr	r2, [r3, #20]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f022 0201 	bic.w	r2, r2, #1
 800a85a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2220      	movs	r2, #32
 800a860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d135      	bne.n	800a8d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	330c      	adds	r3, #12
 800a878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	e853 3f00 	ldrex	r3, [r3]
 800a880:	613b      	str	r3, [r7, #16]
   return(result);
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	f023 0310 	bic.w	r3, r3, #16
 800a888:	627b      	str	r3, [r7, #36]	@ 0x24
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	330c      	adds	r3, #12
 800a890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a892:	623a      	str	r2, [r7, #32]
 800a894:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a896:	69f9      	ldr	r1, [r7, #28]
 800a898:	6a3a      	ldr	r2, [r7, #32]
 800a89a:	e841 2300 	strex	r3, r2, [r1]
 800a89e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8a0:	69bb      	ldr	r3, [r7, #24]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1e5      	bne.n	800a872 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 0310 	and.w	r3, r3, #16
 800a8b0:	2b10      	cmp	r3, #16
 800a8b2:	d10a      	bne.n	800a8ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	60fb      	str	r3, [r7, #12]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	60fb      	str	r3, [r7, #12]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	60fb      	str	r3, [r7, #12]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7ff fbdf 	bl	800a094 <HAL_UARTEx_RxEventCallback>
 800a8d6:	e002      	b.n	800a8de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f7ff fbbd 	bl	800a058 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	e002      	b.n	800a8e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	e000      	b.n	800a8e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a8e6:	2302      	movs	r3, #2
  }
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3730      	adds	r7, #48	@ 0x30
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8f4:	b0c0      	sub	sp, #256	@ 0x100
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a90c:	68d9      	ldr	r1, [r3, #12]
 800a90e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	ea40 0301 	orr.w	r3, r0, r1
 800a918:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a91a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a91e:	689a      	ldr	r2, [r3, #8]
 800a920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	431a      	orrs	r2, r3
 800a928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a92c:	695b      	ldr	r3, [r3, #20]
 800a92e:	431a      	orrs	r2, r3
 800a930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	4313      	orrs	r3, r2
 800a938:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a93c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a948:	f021 010c 	bic.w	r1, r1, #12
 800a94c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a956:	430b      	orrs	r3, r1
 800a958:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a95a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a96a:	6999      	ldr	r1, [r3, #24]
 800a96c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	ea40 0301 	orr.w	r3, r0, r1
 800a976:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	4b8f      	ldr	r3, [pc, #572]	@ (800abbc <UART_SetConfig+0x2cc>)
 800a980:	429a      	cmp	r2, r3
 800a982:	d005      	beq.n	800a990 <UART_SetConfig+0xa0>
 800a984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	4b8d      	ldr	r3, [pc, #564]	@ (800abc0 <UART_SetConfig+0x2d0>)
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d104      	bne.n	800a99a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a990:	f7fd ff8c 	bl	80088ac <HAL_RCC_GetPCLK2Freq>
 800a994:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a998:	e003      	b.n	800a9a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a99a:	f7fd ff73 	bl	8008884 <HAL_RCC_GetPCLK1Freq>
 800a99e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a9a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9a6:	69db      	ldr	r3, [r3, #28]
 800a9a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9ac:	f040 810c 	bne.w	800abc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a9b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a9ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a9be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a9c2:	4622      	mov	r2, r4
 800a9c4:	462b      	mov	r3, r5
 800a9c6:	1891      	adds	r1, r2, r2
 800a9c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a9ca:	415b      	adcs	r3, r3
 800a9cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a9ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a9d2:	4621      	mov	r1, r4
 800a9d4:	eb12 0801 	adds.w	r8, r2, r1
 800a9d8:	4629      	mov	r1, r5
 800a9da:	eb43 0901 	adc.w	r9, r3, r1
 800a9de:	f04f 0200 	mov.w	r2, #0
 800a9e2:	f04f 0300 	mov.w	r3, #0
 800a9e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a9ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a9ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a9f2:	4690      	mov	r8, r2
 800a9f4:	4699      	mov	r9, r3
 800a9f6:	4623      	mov	r3, r4
 800a9f8:	eb18 0303 	adds.w	r3, r8, r3
 800a9fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800aa00:	462b      	mov	r3, r5
 800aa02:	eb49 0303 	adc.w	r3, r9, r3
 800aa06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aa0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aa16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800aa1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800aa1e:	460b      	mov	r3, r1
 800aa20:	18db      	adds	r3, r3, r3
 800aa22:	653b      	str	r3, [r7, #80]	@ 0x50
 800aa24:	4613      	mov	r3, r2
 800aa26:	eb42 0303 	adc.w	r3, r2, r3
 800aa2a:	657b      	str	r3, [r7, #84]	@ 0x54
 800aa2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800aa30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800aa34:	f7f6 f990 	bl	8000d58 <__aeabi_uldivmod>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	4b61      	ldr	r3, [pc, #388]	@ (800abc4 <UART_SetConfig+0x2d4>)
 800aa3e:	fba3 2302 	umull	r2, r3, r3, r2
 800aa42:	095b      	lsrs	r3, r3, #5
 800aa44:	011c      	lsls	r4, r3, #4
 800aa46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aa50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800aa54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800aa58:	4642      	mov	r2, r8
 800aa5a:	464b      	mov	r3, r9
 800aa5c:	1891      	adds	r1, r2, r2
 800aa5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800aa60:	415b      	adcs	r3, r3
 800aa62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800aa68:	4641      	mov	r1, r8
 800aa6a:	eb12 0a01 	adds.w	sl, r2, r1
 800aa6e:	4649      	mov	r1, r9
 800aa70:	eb43 0b01 	adc.w	fp, r3, r1
 800aa74:	f04f 0200 	mov.w	r2, #0
 800aa78:	f04f 0300 	mov.w	r3, #0
 800aa7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa88:	4692      	mov	sl, r2
 800aa8a:	469b      	mov	fp, r3
 800aa8c:	4643      	mov	r3, r8
 800aa8e:	eb1a 0303 	adds.w	r3, sl, r3
 800aa92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aa96:	464b      	mov	r3, r9
 800aa98:	eb4b 0303 	adc.w	r3, fp, r3
 800aa9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aaa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aaac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800aab0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800aab4:	460b      	mov	r3, r1
 800aab6:	18db      	adds	r3, r3, r3
 800aab8:	643b      	str	r3, [r7, #64]	@ 0x40
 800aaba:	4613      	mov	r3, r2
 800aabc:	eb42 0303 	adc.w	r3, r2, r3
 800aac0:	647b      	str	r3, [r7, #68]	@ 0x44
 800aac2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800aac6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800aaca:	f7f6 f945 	bl	8000d58 <__aeabi_uldivmod>
 800aace:	4602      	mov	r2, r0
 800aad0:	460b      	mov	r3, r1
 800aad2:	4611      	mov	r1, r2
 800aad4:	4b3b      	ldr	r3, [pc, #236]	@ (800abc4 <UART_SetConfig+0x2d4>)
 800aad6:	fba3 2301 	umull	r2, r3, r3, r1
 800aada:	095b      	lsrs	r3, r3, #5
 800aadc:	2264      	movs	r2, #100	@ 0x64
 800aade:	fb02 f303 	mul.w	r3, r2, r3
 800aae2:	1acb      	subs	r3, r1, r3
 800aae4:	00db      	lsls	r3, r3, #3
 800aae6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800aaea:	4b36      	ldr	r3, [pc, #216]	@ (800abc4 <UART_SetConfig+0x2d4>)
 800aaec:	fba3 2302 	umull	r2, r3, r3, r2
 800aaf0:	095b      	lsrs	r3, r3, #5
 800aaf2:	005b      	lsls	r3, r3, #1
 800aaf4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800aaf8:	441c      	add	r4, r3
 800aafa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aafe:	2200      	movs	r2, #0
 800ab00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ab04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ab08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ab0c:	4642      	mov	r2, r8
 800ab0e:	464b      	mov	r3, r9
 800ab10:	1891      	adds	r1, r2, r2
 800ab12:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ab14:	415b      	adcs	r3, r3
 800ab16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ab1c:	4641      	mov	r1, r8
 800ab1e:	1851      	adds	r1, r2, r1
 800ab20:	6339      	str	r1, [r7, #48]	@ 0x30
 800ab22:	4649      	mov	r1, r9
 800ab24:	414b      	adcs	r3, r1
 800ab26:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab28:	f04f 0200 	mov.w	r2, #0
 800ab2c:	f04f 0300 	mov.w	r3, #0
 800ab30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ab34:	4659      	mov	r1, fp
 800ab36:	00cb      	lsls	r3, r1, #3
 800ab38:	4651      	mov	r1, sl
 800ab3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab3e:	4651      	mov	r1, sl
 800ab40:	00ca      	lsls	r2, r1, #3
 800ab42:	4610      	mov	r0, r2
 800ab44:	4619      	mov	r1, r3
 800ab46:	4603      	mov	r3, r0
 800ab48:	4642      	mov	r2, r8
 800ab4a:	189b      	adds	r3, r3, r2
 800ab4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ab50:	464b      	mov	r3, r9
 800ab52:	460a      	mov	r2, r1
 800ab54:	eb42 0303 	adc.w	r3, r2, r3
 800ab58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ab5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ab68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ab6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ab70:	460b      	mov	r3, r1
 800ab72:	18db      	adds	r3, r3, r3
 800ab74:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab76:	4613      	mov	r3, r2
 800ab78:	eb42 0303 	adc.w	r3, r2, r3
 800ab7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ab82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ab86:	f7f6 f8e7 	bl	8000d58 <__aeabi_uldivmod>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	4b0d      	ldr	r3, [pc, #52]	@ (800abc4 <UART_SetConfig+0x2d4>)
 800ab90:	fba3 1302 	umull	r1, r3, r3, r2
 800ab94:	095b      	lsrs	r3, r3, #5
 800ab96:	2164      	movs	r1, #100	@ 0x64
 800ab98:	fb01 f303 	mul.w	r3, r1, r3
 800ab9c:	1ad3      	subs	r3, r2, r3
 800ab9e:	00db      	lsls	r3, r3, #3
 800aba0:	3332      	adds	r3, #50	@ 0x32
 800aba2:	4a08      	ldr	r2, [pc, #32]	@ (800abc4 <UART_SetConfig+0x2d4>)
 800aba4:	fba2 2303 	umull	r2, r3, r2, r3
 800aba8:	095b      	lsrs	r3, r3, #5
 800abaa:	f003 0207 	and.w	r2, r3, #7
 800abae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4422      	add	r2, r4
 800abb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800abb8:	e106      	b.n	800adc8 <UART_SetConfig+0x4d8>
 800abba:	bf00      	nop
 800abbc:	40011000 	.word	0x40011000
 800abc0:	40011400 	.word	0x40011400
 800abc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800abc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800abcc:	2200      	movs	r2, #0
 800abce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800abd2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800abd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800abda:	4642      	mov	r2, r8
 800abdc:	464b      	mov	r3, r9
 800abde:	1891      	adds	r1, r2, r2
 800abe0:	6239      	str	r1, [r7, #32]
 800abe2:	415b      	adcs	r3, r3
 800abe4:	627b      	str	r3, [r7, #36]	@ 0x24
 800abe6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800abea:	4641      	mov	r1, r8
 800abec:	1854      	adds	r4, r2, r1
 800abee:	4649      	mov	r1, r9
 800abf0:	eb43 0501 	adc.w	r5, r3, r1
 800abf4:	f04f 0200 	mov.w	r2, #0
 800abf8:	f04f 0300 	mov.w	r3, #0
 800abfc:	00eb      	lsls	r3, r5, #3
 800abfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ac02:	00e2      	lsls	r2, r4, #3
 800ac04:	4614      	mov	r4, r2
 800ac06:	461d      	mov	r5, r3
 800ac08:	4643      	mov	r3, r8
 800ac0a:	18e3      	adds	r3, r4, r3
 800ac0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ac10:	464b      	mov	r3, r9
 800ac12:	eb45 0303 	adc.w	r3, r5, r3
 800ac16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ac1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ac26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ac2a:	f04f 0200 	mov.w	r2, #0
 800ac2e:	f04f 0300 	mov.w	r3, #0
 800ac32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ac36:	4629      	mov	r1, r5
 800ac38:	008b      	lsls	r3, r1, #2
 800ac3a:	4621      	mov	r1, r4
 800ac3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac40:	4621      	mov	r1, r4
 800ac42:	008a      	lsls	r2, r1, #2
 800ac44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ac48:	f7f6 f886 	bl	8000d58 <__aeabi_uldivmod>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	460b      	mov	r3, r1
 800ac50:	4b60      	ldr	r3, [pc, #384]	@ (800add4 <UART_SetConfig+0x4e4>)
 800ac52:	fba3 2302 	umull	r2, r3, r3, r2
 800ac56:	095b      	lsrs	r3, r3, #5
 800ac58:	011c      	lsls	r4, r3, #4
 800ac5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ac64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ac68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ac6c:	4642      	mov	r2, r8
 800ac6e:	464b      	mov	r3, r9
 800ac70:	1891      	adds	r1, r2, r2
 800ac72:	61b9      	str	r1, [r7, #24]
 800ac74:	415b      	adcs	r3, r3
 800ac76:	61fb      	str	r3, [r7, #28]
 800ac78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac7c:	4641      	mov	r1, r8
 800ac7e:	1851      	adds	r1, r2, r1
 800ac80:	6139      	str	r1, [r7, #16]
 800ac82:	4649      	mov	r1, r9
 800ac84:	414b      	adcs	r3, r1
 800ac86:	617b      	str	r3, [r7, #20]
 800ac88:	f04f 0200 	mov.w	r2, #0
 800ac8c:	f04f 0300 	mov.w	r3, #0
 800ac90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac94:	4659      	mov	r1, fp
 800ac96:	00cb      	lsls	r3, r1, #3
 800ac98:	4651      	mov	r1, sl
 800ac9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac9e:	4651      	mov	r1, sl
 800aca0:	00ca      	lsls	r2, r1, #3
 800aca2:	4610      	mov	r0, r2
 800aca4:	4619      	mov	r1, r3
 800aca6:	4603      	mov	r3, r0
 800aca8:	4642      	mov	r2, r8
 800acaa:	189b      	adds	r3, r3, r2
 800acac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800acb0:	464b      	mov	r3, r9
 800acb2:	460a      	mov	r2, r1
 800acb4:	eb42 0303 	adc.w	r3, r2, r3
 800acb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800acbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	2200      	movs	r2, #0
 800acc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800acc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800acc8:	f04f 0200 	mov.w	r2, #0
 800accc:	f04f 0300 	mov.w	r3, #0
 800acd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800acd4:	4649      	mov	r1, r9
 800acd6:	008b      	lsls	r3, r1, #2
 800acd8:	4641      	mov	r1, r8
 800acda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800acde:	4641      	mov	r1, r8
 800ace0:	008a      	lsls	r2, r1, #2
 800ace2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ace6:	f7f6 f837 	bl	8000d58 <__aeabi_uldivmod>
 800acea:	4602      	mov	r2, r0
 800acec:	460b      	mov	r3, r1
 800acee:	4611      	mov	r1, r2
 800acf0:	4b38      	ldr	r3, [pc, #224]	@ (800add4 <UART_SetConfig+0x4e4>)
 800acf2:	fba3 2301 	umull	r2, r3, r3, r1
 800acf6:	095b      	lsrs	r3, r3, #5
 800acf8:	2264      	movs	r2, #100	@ 0x64
 800acfa:	fb02 f303 	mul.w	r3, r2, r3
 800acfe:	1acb      	subs	r3, r1, r3
 800ad00:	011b      	lsls	r3, r3, #4
 800ad02:	3332      	adds	r3, #50	@ 0x32
 800ad04:	4a33      	ldr	r2, [pc, #204]	@ (800add4 <UART_SetConfig+0x4e4>)
 800ad06:	fba2 2303 	umull	r2, r3, r2, r3
 800ad0a:	095b      	lsrs	r3, r3, #5
 800ad0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ad10:	441c      	add	r4, r3
 800ad12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad16:	2200      	movs	r2, #0
 800ad18:	673b      	str	r3, [r7, #112]	@ 0x70
 800ad1a:	677a      	str	r2, [r7, #116]	@ 0x74
 800ad1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ad20:	4642      	mov	r2, r8
 800ad22:	464b      	mov	r3, r9
 800ad24:	1891      	adds	r1, r2, r2
 800ad26:	60b9      	str	r1, [r7, #8]
 800ad28:	415b      	adcs	r3, r3
 800ad2a:	60fb      	str	r3, [r7, #12]
 800ad2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ad30:	4641      	mov	r1, r8
 800ad32:	1851      	adds	r1, r2, r1
 800ad34:	6039      	str	r1, [r7, #0]
 800ad36:	4649      	mov	r1, r9
 800ad38:	414b      	adcs	r3, r1
 800ad3a:	607b      	str	r3, [r7, #4]
 800ad3c:	f04f 0200 	mov.w	r2, #0
 800ad40:	f04f 0300 	mov.w	r3, #0
 800ad44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ad48:	4659      	mov	r1, fp
 800ad4a:	00cb      	lsls	r3, r1, #3
 800ad4c:	4651      	mov	r1, sl
 800ad4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad52:	4651      	mov	r1, sl
 800ad54:	00ca      	lsls	r2, r1, #3
 800ad56:	4610      	mov	r0, r2
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	4642      	mov	r2, r8
 800ad5e:	189b      	adds	r3, r3, r2
 800ad60:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad62:	464b      	mov	r3, r9
 800ad64:	460a      	mov	r2, r1
 800ad66:	eb42 0303 	adc.w	r3, r2, r3
 800ad6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ad6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad76:	667a      	str	r2, [r7, #100]	@ 0x64
 800ad78:	f04f 0200 	mov.w	r2, #0
 800ad7c:	f04f 0300 	mov.w	r3, #0
 800ad80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ad84:	4649      	mov	r1, r9
 800ad86:	008b      	lsls	r3, r1, #2
 800ad88:	4641      	mov	r1, r8
 800ad8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad8e:	4641      	mov	r1, r8
 800ad90:	008a      	lsls	r2, r1, #2
 800ad92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ad96:	f7f5 ffdf 	bl	8000d58 <__aeabi_uldivmod>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	4b0d      	ldr	r3, [pc, #52]	@ (800add4 <UART_SetConfig+0x4e4>)
 800ada0:	fba3 1302 	umull	r1, r3, r3, r2
 800ada4:	095b      	lsrs	r3, r3, #5
 800ada6:	2164      	movs	r1, #100	@ 0x64
 800ada8:	fb01 f303 	mul.w	r3, r1, r3
 800adac:	1ad3      	subs	r3, r2, r3
 800adae:	011b      	lsls	r3, r3, #4
 800adb0:	3332      	adds	r3, #50	@ 0x32
 800adb2:	4a08      	ldr	r2, [pc, #32]	@ (800add4 <UART_SetConfig+0x4e4>)
 800adb4:	fba2 2303 	umull	r2, r3, r2, r3
 800adb8:	095b      	lsrs	r3, r3, #5
 800adba:	f003 020f 	and.w	r2, r3, #15
 800adbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4422      	add	r2, r4
 800adc6:	609a      	str	r2, [r3, #8]
}
 800adc8:	bf00      	nop
 800adca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800adce:	46bd      	mov	sp, r7
 800add0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800add4:	51eb851f 	.word	0x51eb851f

0800add8 <__NVIC_SetPriority>:
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	4603      	mov	r3, r0
 800ade0:	6039      	str	r1, [r7, #0]
 800ade2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ade4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	db0a      	blt.n	800ae02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	b2da      	uxtb	r2, r3
 800adf0:	490c      	ldr	r1, [pc, #48]	@ (800ae24 <__NVIC_SetPriority+0x4c>)
 800adf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adf6:	0112      	lsls	r2, r2, #4
 800adf8:	b2d2      	uxtb	r2, r2
 800adfa:	440b      	add	r3, r1
 800adfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800ae00:	e00a      	b.n	800ae18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	b2da      	uxtb	r2, r3
 800ae06:	4908      	ldr	r1, [pc, #32]	@ (800ae28 <__NVIC_SetPriority+0x50>)
 800ae08:	79fb      	ldrb	r3, [r7, #7]
 800ae0a:	f003 030f 	and.w	r3, r3, #15
 800ae0e:	3b04      	subs	r3, #4
 800ae10:	0112      	lsls	r2, r2, #4
 800ae12:	b2d2      	uxtb	r2, r2
 800ae14:	440b      	add	r3, r1
 800ae16:	761a      	strb	r2, [r3, #24]
}
 800ae18:	bf00      	nop
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr
 800ae24:	e000e100 	.word	0xe000e100
 800ae28:	e000ed00 	.word	0xe000ed00

0800ae2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ae30:	4b05      	ldr	r3, [pc, #20]	@ (800ae48 <SysTick_Handler+0x1c>)
 800ae32:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ae34:	f001 fe40 	bl	800cab8 <xTaskGetSchedulerState>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b01      	cmp	r3, #1
 800ae3c:	d001      	beq.n	800ae42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ae3e:	f002 fd3b 	bl	800d8b8 <xPortSysTickHandler>
  }
}
 800ae42:	bf00      	nop
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	e000e010 	.word	0xe000e010

0800ae4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ae50:	2100      	movs	r1, #0
 800ae52:	f06f 0004 	mvn.w	r0, #4
 800ae56:	f7ff ffbf 	bl	800add8 <__NVIC_SetPriority>
#endif
}
 800ae5a:	bf00      	nop
 800ae5c:	bd80      	pop	{r7, pc}
	...

0800ae60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae66:	f3ef 8305 	mrs	r3, IPSR
 800ae6a:	603b      	str	r3, [r7, #0]
  return(result);
 800ae6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d003      	beq.n	800ae7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ae72:	f06f 0305 	mvn.w	r3, #5
 800ae76:	607b      	str	r3, [r7, #4]
 800ae78:	e00c      	b.n	800ae94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ae7a:	4b0a      	ldr	r3, [pc, #40]	@ (800aea4 <osKernelInitialize+0x44>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d105      	bne.n	800ae8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ae82:	4b08      	ldr	r3, [pc, #32]	@ (800aea4 <osKernelInitialize+0x44>)
 800ae84:	2201      	movs	r2, #1
 800ae86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	607b      	str	r3, [r7, #4]
 800ae8c:	e002      	b.n	800ae94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ae8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae94:	687b      	ldr	r3, [r7, #4]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	370c      	adds	r7, #12
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr
 800aea2:	bf00      	nop
 800aea4:	20004ec8 	.word	0x20004ec8

0800aea8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeae:	f3ef 8305 	mrs	r3, IPSR
 800aeb2:	603b      	str	r3, [r7, #0]
  return(result);
 800aeb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d003      	beq.n	800aec2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800aeba:	f06f 0305 	mvn.w	r3, #5
 800aebe:	607b      	str	r3, [r7, #4]
 800aec0:	e010      	b.n	800aee4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800aec2:	4b0b      	ldr	r3, [pc, #44]	@ (800aef0 <osKernelStart+0x48>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d109      	bne.n	800aede <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800aeca:	f7ff ffbf 	bl	800ae4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aece:	4b08      	ldr	r3, [pc, #32]	@ (800aef0 <osKernelStart+0x48>)
 800aed0:	2202      	movs	r2, #2
 800aed2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aed4:	f001 f964 	bl	800c1a0 <vTaskStartScheduler>
      stat = osOK;
 800aed8:	2300      	movs	r3, #0
 800aeda:	607b      	str	r3, [r7, #4]
 800aedc:	e002      	b.n	800aee4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aede:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aee2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aee4:	687b      	ldr	r3, [r7, #4]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3708      	adds	r7, #8
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	20004ec8 	.word	0x20004ec8

0800aef4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aefc:	f3ef 8305 	mrs	r3, IPSR
 800af00:	60bb      	str	r3, [r7, #8]
  return(result);
 800af02:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af04:	2b00      	cmp	r3, #0
 800af06:	d003      	beq.n	800af10 <osDelay+0x1c>
    stat = osErrorISR;
 800af08:	f06f 0305 	mvn.w	r3, #5
 800af0c:	60fb      	str	r3, [r7, #12]
 800af0e:	e007      	b.n	800af20 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800af10:	2300      	movs	r3, #0
 800af12:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d002      	beq.n	800af20 <osDelay+0x2c>
      vTaskDelay(ticks);
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f001 f90a 	bl	800c134 <vTaskDelay>
    }
  }

  return (stat);
 800af20:	68fb      	ldr	r3, [r7, #12]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
	...

0800af2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800af2c:	b480      	push	{r7}
 800af2e:	b085      	sub	sp, #20
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	4a07      	ldr	r2, [pc, #28]	@ (800af58 <vApplicationGetIdleTaskMemory+0x2c>)
 800af3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	4a06      	ldr	r2, [pc, #24]	@ (800af5c <vApplicationGetIdleTaskMemory+0x30>)
 800af42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2280      	movs	r2, #128	@ 0x80
 800af48:	601a      	str	r2, [r3, #0]
}
 800af4a:	bf00      	nop
 800af4c:	3714      	adds	r7, #20
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	20004ecc 	.word	0x20004ecc
 800af5c:	20004f74 	.word	0x20004f74

0800af60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800af60:	b480      	push	{r7}
 800af62:	b085      	sub	sp, #20
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	4a07      	ldr	r2, [pc, #28]	@ (800af8c <vApplicationGetTimerTaskMemory+0x2c>)
 800af70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	4a06      	ldr	r2, [pc, #24]	@ (800af90 <vApplicationGetTimerTaskMemory+0x30>)
 800af76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af7e:	601a      	str	r2, [r3, #0]
}
 800af80:	bf00      	nop
 800af82:	3714      	adds	r7, #20
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr
 800af8c:	20005174 	.word	0x20005174
 800af90:	2000521c 	.word	0x2000521c

0800af94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f103 0208 	add.w	r2, r3, #8
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800afac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f103 0208 	add.w	r2, r3, #8
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f103 0208 	add.w	r2, r3, #8
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800afe2:	bf00      	nop
 800afe4:	370c      	adds	r7, #12
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800afee:	b480      	push	{r7}
 800aff0:	b085      	sub	sp, #20
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
 800aff6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	685b      	ldr	r3, [r3, #4]
 800affc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	68fa      	ldr	r2, [r7, #12]
 800b002:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	689a      	ldr	r2, [r3, #8]
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	683a      	ldr	r2, [r7, #0]
 800b012:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	1c5a      	adds	r2, r3, #1
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	601a      	str	r2, [r3, #0]
}
 800b02a:	bf00      	nop
 800b02c:	3714      	adds	r7, #20
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr

0800b036 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b036:	b480      	push	{r7}
 800b038:	b085      	sub	sp, #20
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b04c:	d103      	bne.n	800b056 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	60fb      	str	r3, [r7, #12]
 800b054:	e00c      	b.n	800b070 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	3308      	adds	r3, #8
 800b05a:	60fb      	str	r3, [r7, #12]
 800b05c:	e002      	b.n	800b064 <vListInsert+0x2e>
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	60fb      	str	r3, [r7, #12]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68ba      	ldr	r2, [r7, #8]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d2f6      	bcs.n	800b05e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	685a      	ldr	r2, [r3, #4]
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	683a      	ldr	r2, [r7, #0]
 800b07e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	683a      	ldr	r2, [r7, #0]
 800b08a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	1c5a      	adds	r2, r3, #1
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	601a      	str	r2, [r3, #0]
}
 800b09c:	bf00      	nop
 800b09e:	3714      	adds	r7, #20
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b085      	sub	sp, #20
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	6892      	ldr	r2, [r2, #8]
 800b0be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	6852      	ldr	r2, [r2, #4]
 800b0c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d103      	bne.n	800b0dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	689a      	ldr	r2, [r3, #8]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	1e5a      	subs	r2, r3, #1
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10b      	bne.n	800b128 <xQueueGenericReset+0x2c>
	__asm volatile
 800b110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b114:	f383 8811 	msr	BASEPRI, r3
 800b118:	f3bf 8f6f 	isb	sy
 800b11c:	f3bf 8f4f 	dsb	sy
 800b120:	60bb      	str	r3, [r7, #8]
}
 800b122:	bf00      	nop
 800b124:	bf00      	nop
 800b126:	e7fd      	b.n	800b124 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b128:	f002 fb36 	bl	800d798 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b134:	68f9      	ldr	r1, [r7, #12]
 800b136:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b138:	fb01 f303 	mul.w	r3, r1, r3
 800b13c:	441a      	add	r2, r3
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2200      	movs	r2, #0
 800b146:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b158:	3b01      	subs	r3, #1
 800b15a:	68f9      	ldr	r1, [r7, #12]
 800b15c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b15e:	fb01 f303 	mul.w	r3, r1, r3
 800b162:	441a      	add	r2, r3
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	22ff      	movs	r2, #255	@ 0xff
 800b16c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	22ff      	movs	r2, #255	@ 0xff
 800b174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d114      	bne.n	800b1a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d01a      	beq.n	800b1bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	3310      	adds	r3, #16
 800b18a:	4618      	mov	r0, r3
 800b18c:	f001 faa6 	bl	800c6dc <xTaskRemoveFromEventList>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d012      	beq.n	800b1bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b196:	4b0d      	ldr	r3, [pc, #52]	@ (800b1cc <xQueueGenericReset+0xd0>)
 800b198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	f3bf 8f6f 	isb	sy
 800b1a6:	e009      	b.n	800b1bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	3310      	adds	r3, #16
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7ff fef1 	bl	800af94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	3324      	adds	r3, #36	@ 0x24
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7ff feec 	bl	800af94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b1bc:	f002 fb1e 	bl	800d7fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b1c0:	2301      	movs	r3, #1
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	e000ed04 	.word	0xe000ed04

0800b1d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b08e      	sub	sp, #56	@ 0x38
 800b1d4:	af02      	add	r7, sp, #8
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
 800b1dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d10b      	bne.n	800b1fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b1e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e8:	f383 8811 	msr	BASEPRI, r3
 800b1ec:	f3bf 8f6f 	isb	sy
 800b1f0:	f3bf 8f4f 	dsb	sy
 800b1f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b1f6:	bf00      	nop
 800b1f8:	bf00      	nop
 800b1fa:	e7fd      	b.n	800b1f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10b      	bne.n	800b21a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b206:	f383 8811 	msr	BASEPRI, r3
 800b20a:	f3bf 8f6f 	isb	sy
 800b20e:	f3bf 8f4f 	dsb	sy
 800b212:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b214:	bf00      	nop
 800b216:	bf00      	nop
 800b218:	e7fd      	b.n	800b216 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d002      	beq.n	800b226 <xQueueGenericCreateStatic+0x56>
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d001      	beq.n	800b22a <xQueueGenericCreateStatic+0x5a>
 800b226:	2301      	movs	r3, #1
 800b228:	e000      	b.n	800b22c <xQueueGenericCreateStatic+0x5c>
 800b22a:	2300      	movs	r3, #0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d10b      	bne.n	800b248 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	623b      	str	r3, [r7, #32]
}
 800b242:	bf00      	nop
 800b244:	bf00      	nop
 800b246:	e7fd      	b.n	800b244 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d102      	bne.n	800b254 <xQueueGenericCreateStatic+0x84>
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d101      	bne.n	800b258 <xQueueGenericCreateStatic+0x88>
 800b254:	2301      	movs	r3, #1
 800b256:	e000      	b.n	800b25a <xQueueGenericCreateStatic+0x8a>
 800b258:	2300      	movs	r3, #0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d10b      	bne.n	800b276 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	61fb      	str	r3, [r7, #28]
}
 800b270:	bf00      	nop
 800b272:	bf00      	nop
 800b274:	e7fd      	b.n	800b272 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b276:	2350      	movs	r3, #80	@ 0x50
 800b278:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	2b50      	cmp	r3, #80	@ 0x50
 800b27e:	d00b      	beq.n	800b298 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b284:	f383 8811 	msr	BASEPRI, r3
 800b288:	f3bf 8f6f 	isb	sy
 800b28c:	f3bf 8f4f 	dsb	sy
 800b290:	61bb      	str	r3, [r7, #24]
}
 800b292:	bf00      	nop
 800b294:	bf00      	nop
 800b296:	e7fd      	b.n	800b294 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b298:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d00d      	beq.n	800b2c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b2a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b2ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	68b9      	ldr	r1, [r7, #8]
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f000 f840 	bl	800b340 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3730      	adds	r7, #48	@ 0x30
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b08a      	sub	sp, #40	@ 0x28
 800b2ce:	af02      	add	r7, sp, #8
 800b2d0:	60f8      	str	r0, [r7, #12]
 800b2d2:	60b9      	str	r1, [r7, #8]
 800b2d4:	4613      	mov	r3, r2
 800b2d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10b      	bne.n	800b2f6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800b2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	613b      	str	r3, [r7, #16]
}
 800b2f0:	bf00      	nop
 800b2f2:	bf00      	nop
 800b2f4:	e7fd      	b.n	800b2f2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	68ba      	ldr	r2, [r7, #8]
 800b2fa:	fb02 f303 	mul.w	r3, r2, r3
 800b2fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	3350      	adds	r3, #80	@ 0x50
 800b304:	4618      	mov	r0, r3
 800b306:	f002 fb69 	bl	800d9dc <pvPortMalloc>
 800b30a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d011      	beq.n	800b336 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	3350      	adds	r3, #80	@ 0x50
 800b31a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	2200      	movs	r2, #0
 800b320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b324:	79fa      	ldrb	r2, [r7, #7]
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	4613      	mov	r3, r2
 800b32c:	697a      	ldr	r2, [r7, #20]
 800b32e:	68b9      	ldr	r1, [r7, #8]
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f000 f805 	bl	800b340 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b336:	69bb      	ldr	r3, [r7, #24]
	}
 800b338:	4618      	mov	r0, r3
 800b33a:	3720      	adds	r7, #32
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	607a      	str	r2, [r7, #4]
 800b34c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d103      	bne.n	800b35c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b354:	69bb      	ldr	r3, [r7, #24]
 800b356:	69ba      	ldr	r2, [r7, #24]
 800b358:	601a      	str	r2, [r3, #0]
 800b35a:	e002      	b.n	800b362 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b36e:	2101      	movs	r1, #1
 800b370:	69b8      	ldr	r0, [r7, #24]
 800b372:	f7ff fec3 	bl	800b0fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	78fa      	ldrb	r2, [r7, #3]
 800b37a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b37e:	bf00      	nop
 800b380:	3710      	adds	r7, #16
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
	...

0800b388 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b08e      	sub	sp, #56	@ 0x38
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
 800b394:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b396:	2300      	movs	r3, #0
 800b398:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10b      	bne.n	800b3bc <xQueueGenericSend+0x34>
	__asm volatile
 800b3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a8:	f383 8811 	msr	BASEPRI, r3
 800b3ac:	f3bf 8f6f 	isb	sy
 800b3b0:	f3bf 8f4f 	dsb	sy
 800b3b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b3b6:	bf00      	nop
 800b3b8:	bf00      	nop
 800b3ba:	e7fd      	b.n	800b3b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d103      	bne.n	800b3ca <xQueueGenericSend+0x42>
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d101      	bne.n	800b3ce <xQueueGenericSend+0x46>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e000      	b.n	800b3d0 <xQueueGenericSend+0x48>
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d10b      	bne.n	800b3ec <xQueueGenericSend+0x64>
	__asm volatile
 800b3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d8:	f383 8811 	msr	BASEPRI, r3
 800b3dc:	f3bf 8f6f 	isb	sy
 800b3e0:	f3bf 8f4f 	dsb	sy
 800b3e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b3e6:	bf00      	nop
 800b3e8:	bf00      	nop
 800b3ea:	e7fd      	b.n	800b3e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	d103      	bne.n	800b3fa <xQueueGenericSend+0x72>
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d101      	bne.n	800b3fe <xQueueGenericSend+0x76>
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e000      	b.n	800b400 <xQueueGenericSend+0x78>
 800b3fe:	2300      	movs	r3, #0
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10b      	bne.n	800b41c <xQueueGenericSend+0x94>
	__asm volatile
 800b404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	623b      	str	r3, [r7, #32]
}
 800b416:	bf00      	nop
 800b418:	bf00      	nop
 800b41a:	e7fd      	b.n	800b418 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b41c:	f001 fb4c 	bl	800cab8 <xTaskGetSchedulerState>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d102      	bne.n	800b42c <xQueueGenericSend+0xa4>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d101      	bne.n	800b430 <xQueueGenericSend+0xa8>
 800b42c:	2301      	movs	r3, #1
 800b42e:	e000      	b.n	800b432 <xQueueGenericSend+0xaa>
 800b430:	2300      	movs	r3, #0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10b      	bne.n	800b44e <xQueueGenericSend+0xc6>
	__asm volatile
 800b436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b43a:	f383 8811 	msr	BASEPRI, r3
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	61fb      	str	r3, [r7, #28]
}
 800b448:	bf00      	nop
 800b44a:	bf00      	nop
 800b44c:	e7fd      	b.n	800b44a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b44e:	f002 f9a3 	bl	800d798 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b454:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d302      	bcc.n	800b464 <xQueueGenericSend+0xdc>
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	2b02      	cmp	r3, #2
 800b462:	d129      	bne.n	800b4b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b464:	683a      	ldr	r2, [r7, #0]
 800b466:	68b9      	ldr	r1, [r7, #8]
 800b468:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b46a:	f000 fb37 	bl	800badc <prvCopyDataToQueue>
 800b46e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b474:	2b00      	cmp	r3, #0
 800b476:	d010      	beq.n	800b49a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47a:	3324      	adds	r3, #36	@ 0x24
 800b47c:	4618      	mov	r0, r3
 800b47e:	f001 f92d 	bl	800c6dc <xTaskRemoveFromEventList>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d013      	beq.n	800b4b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b488:	4b3f      	ldr	r3, [pc, #252]	@ (800b588 <xQueueGenericSend+0x200>)
 800b48a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b48e:	601a      	str	r2, [r3, #0]
 800b490:	f3bf 8f4f 	dsb	sy
 800b494:	f3bf 8f6f 	isb	sy
 800b498:	e00a      	b.n	800b4b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d007      	beq.n	800b4b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b4a0:	4b39      	ldr	r3, [pc, #228]	@ (800b588 <xQueueGenericSend+0x200>)
 800b4a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4a6:	601a      	str	r2, [r3, #0]
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b4b0:	f002 f9a4 	bl	800d7fc <vPortExitCritical>
				return pdPASS;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e063      	b.n	800b580 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d103      	bne.n	800b4c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b4be:	f002 f99d 	bl	800d7fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	e05c      	b.n	800b580 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b4c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d106      	bne.n	800b4da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b4cc:	f107 0314 	add.w	r3, r7, #20
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f001 f98f 	bl	800c7f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b4da:	f002 f98f 	bl	800d7fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b4de:	f000 fecf 	bl	800c280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b4e2:	f002 f959 	bl	800d798 <vPortEnterCritical>
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b4ec:	b25b      	sxtb	r3, r3
 800b4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4f2:	d103      	bne.n	800b4fc <xQueueGenericSend+0x174>
 800b4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b502:	b25b      	sxtb	r3, r3
 800b504:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b508:	d103      	bne.n	800b512 <xQueueGenericSend+0x18a>
 800b50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b50c:	2200      	movs	r2, #0
 800b50e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b512:	f002 f973 	bl	800d7fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b516:	1d3a      	adds	r2, r7, #4
 800b518:	f107 0314 	add.w	r3, r7, #20
 800b51c:	4611      	mov	r1, r2
 800b51e:	4618      	mov	r0, r3
 800b520:	f001 f97e 	bl	800c820 <xTaskCheckForTimeOut>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d124      	bne.n	800b574 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b52a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b52c:	f000 fbce 	bl	800bccc <prvIsQueueFull>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d018      	beq.n	800b568 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b538:	3310      	adds	r3, #16
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	4611      	mov	r1, r2
 800b53e:	4618      	mov	r0, r3
 800b540:	f001 f87a 	bl	800c638 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b544:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b546:	f000 fb59 	bl	800bbfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b54a:	f000 fea7 	bl	800c29c <xTaskResumeAll>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	f47f af7c 	bne.w	800b44e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b556:	4b0c      	ldr	r3, [pc, #48]	@ (800b588 <xQueueGenericSend+0x200>)
 800b558:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b55c:	601a      	str	r2, [r3, #0]
 800b55e:	f3bf 8f4f 	dsb	sy
 800b562:	f3bf 8f6f 	isb	sy
 800b566:	e772      	b.n	800b44e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b56a:	f000 fb47 	bl	800bbfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b56e:	f000 fe95 	bl	800c29c <xTaskResumeAll>
 800b572:	e76c      	b.n	800b44e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b576:	f000 fb41 	bl	800bbfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b57a:	f000 fe8f 	bl	800c29c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b57e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b580:	4618      	mov	r0, r3
 800b582:	3738      	adds	r7, #56	@ 0x38
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	e000ed04 	.word	0xe000ed04

0800b58c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b090      	sub	sp, #64	@ 0x40
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	607a      	str	r2, [r7, #4]
 800b598:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10b      	bne.n	800b5bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a8:	f383 8811 	msr	BASEPRI, r3
 800b5ac:	f3bf 8f6f 	isb	sy
 800b5b0:	f3bf 8f4f 	dsb	sy
 800b5b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b5b6:	bf00      	nop
 800b5b8:	bf00      	nop
 800b5ba:	e7fd      	b.n	800b5b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d103      	bne.n	800b5ca <xQueueGenericSendFromISR+0x3e>
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d101      	bne.n	800b5ce <xQueueGenericSendFromISR+0x42>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e000      	b.n	800b5d0 <xQueueGenericSendFromISR+0x44>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d10b      	bne.n	800b5ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d8:	f383 8811 	msr	BASEPRI, r3
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f3bf 8f4f 	dsb	sy
 800b5e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b5e6:	bf00      	nop
 800b5e8:	bf00      	nop
 800b5ea:	e7fd      	b.n	800b5e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d103      	bne.n	800b5fa <xQueueGenericSendFromISR+0x6e>
 800b5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d101      	bne.n	800b5fe <xQueueGenericSendFromISR+0x72>
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	e000      	b.n	800b600 <xQueueGenericSendFromISR+0x74>
 800b5fe:	2300      	movs	r3, #0
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10b      	bne.n	800b61c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	623b      	str	r3, [r7, #32]
}
 800b616:	bf00      	nop
 800b618:	bf00      	nop
 800b61a:	e7fd      	b.n	800b618 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b61c:	f002 f99c 	bl	800d958 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b620:	f3ef 8211 	mrs	r2, BASEPRI
 800b624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b628:	f383 8811 	msr	BASEPRI, r3
 800b62c:	f3bf 8f6f 	isb	sy
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	61fa      	str	r2, [r7, #28]
 800b636:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b638:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b63a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b63c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b63e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b644:	429a      	cmp	r2, r3
 800b646:	d302      	bcc.n	800b64e <xQueueGenericSendFromISR+0xc2>
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	2b02      	cmp	r3, #2
 800b64c:	d12f      	bne.n	800b6ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b650:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b654:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b65a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b65c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b65e:	683a      	ldr	r2, [r7, #0]
 800b660:	68b9      	ldr	r1, [r7, #8]
 800b662:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b664:	f000 fa3a 	bl	800badc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b668:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b66c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b670:	d112      	bne.n	800b698 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b676:	2b00      	cmp	r3, #0
 800b678:	d016      	beq.n	800b6a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b67c:	3324      	adds	r3, #36	@ 0x24
 800b67e:	4618      	mov	r0, r3
 800b680:	f001 f82c 	bl	800c6dc <xTaskRemoveFromEventList>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00e      	beq.n	800b6a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00b      	beq.n	800b6a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2201      	movs	r2, #1
 800b694:	601a      	str	r2, [r3, #0]
 800b696:	e007      	b.n	800b6a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b698:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b69c:	3301      	adds	r3, #1
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	b25a      	sxtb	r2, r3
 800b6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b6ac:	e001      	b.n	800b6b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6b4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b6bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b6be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3740      	adds	r7, #64	@ 0x40
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b08c      	sub	sp, #48	@ 0x30
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b6dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d10b      	bne.n	800b6fa <xQueueReceive+0x32>
	__asm volatile
 800b6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e6:	f383 8811 	msr	BASEPRI, r3
 800b6ea:	f3bf 8f6f 	isb	sy
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	623b      	str	r3, [r7, #32]
}
 800b6f4:	bf00      	nop
 800b6f6:	bf00      	nop
 800b6f8:	e7fd      	b.n	800b6f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d103      	bne.n	800b708 <xQueueReceive+0x40>
 800b700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b704:	2b00      	cmp	r3, #0
 800b706:	d101      	bne.n	800b70c <xQueueReceive+0x44>
 800b708:	2301      	movs	r3, #1
 800b70a:	e000      	b.n	800b70e <xQueueReceive+0x46>
 800b70c:	2300      	movs	r3, #0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d10b      	bne.n	800b72a <xQueueReceive+0x62>
	__asm volatile
 800b712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b716:	f383 8811 	msr	BASEPRI, r3
 800b71a:	f3bf 8f6f 	isb	sy
 800b71e:	f3bf 8f4f 	dsb	sy
 800b722:	61fb      	str	r3, [r7, #28]
}
 800b724:	bf00      	nop
 800b726:	bf00      	nop
 800b728:	e7fd      	b.n	800b726 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b72a:	f001 f9c5 	bl	800cab8 <xTaskGetSchedulerState>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d102      	bne.n	800b73a <xQueueReceive+0x72>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d101      	bne.n	800b73e <xQueueReceive+0x76>
 800b73a:	2301      	movs	r3, #1
 800b73c:	e000      	b.n	800b740 <xQueueReceive+0x78>
 800b73e:	2300      	movs	r3, #0
 800b740:	2b00      	cmp	r3, #0
 800b742:	d10b      	bne.n	800b75c <xQueueReceive+0x94>
	__asm volatile
 800b744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	61bb      	str	r3, [r7, #24]
}
 800b756:	bf00      	nop
 800b758:	bf00      	nop
 800b75a:	e7fd      	b.n	800b758 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b75c:	f002 f81c 	bl	800d798 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b764:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d01f      	beq.n	800b7ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b76c:	68b9      	ldr	r1, [r7, #8]
 800b76e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b770:	f000 fa1e 	bl	800bbb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b776:	1e5a      	subs	r2, r3, #1
 800b778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b77a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00f      	beq.n	800b7a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b786:	3310      	adds	r3, #16
 800b788:	4618      	mov	r0, r3
 800b78a:	f000 ffa7 	bl	800c6dc <xTaskRemoveFromEventList>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d007      	beq.n	800b7a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b794:	4b3c      	ldr	r3, [pc, #240]	@ (800b888 <xQueueReceive+0x1c0>)
 800b796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b79a:	601a      	str	r2, [r3, #0]
 800b79c:	f3bf 8f4f 	dsb	sy
 800b7a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b7a4:	f002 f82a 	bl	800d7fc <vPortExitCritical>
				return pdPASS;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	e069      	b.n	800b880 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d103      	bne.n	800b7ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b7b2:	f002 f823 	bl	800d7fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	e062      	b.n	800b880 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d106      	bne.n	800b7ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b7c0:	f107 0310 	add.w	r3, r7, #16
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f001 f815 	bl	800c7f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b7ce:	f002 f815 	bl	800d7fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b7d2:	f000 fd55 	bl	800c280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b7d6:	f001 ffdf 	bl	800d798 <vPortEnterCritical>
 800b7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b7e0:	b25b      	sxtb	r3, r3
 800b7e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7e6:	d103      	bne.n	800b7f0 <xQueueReceive+0x128>
 800b7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b7f6:	b25b      	sxtb	r3, r3
 800b7f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7fc:	d103      	bne.n	800b806 <xQueueReceive+0x13e>
 800b7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b800:	2200      	movs	r2, #0
 800b802:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b806:	f001 fff9 	bl	800d7fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b80a:	1d3a      	adds	r2, r7, #4
 800b80c:	f107 0310 	add.w	r3, r7, #16
 800b810:	4611      	mov	r1, r2
 800b812:	4618      	mov	r0, r3
 800b814:	f001 f804 	bl	800c820 <xTaskCheckForTimeOut>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d123      	bne.n	800b866 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b81e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b820:	f000 fa3e 	bl	800bca0 <prvIsQueueEmpty>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d017      	beq.n	800b85a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82c:	3324      	adds	r3, #36	@ 0x24
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	4611      	mov	r1, r2
 800b832:	4618      	mov	r0, r3
 800b834:	f000 ff00 	bl	800c638 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b838:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b83a:	f000 f9df 	bl	800bbfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b83e:	f000 fd2d 	bl	800c29c <xTaskResumeAll>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d189      	bne.n	800b75c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b848:	4b0f      	ldr	r3, [pc, #60]	@ (800b888 <xQueueReceive+0x1c0>)
 800b84a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b84e:	601a      	str	r2, [r3, #0]
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	e780      	b.n	800b75c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b85a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b85c:	f000 f9ce 	bl	800bbfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b860:	f000 fd1c 	bl	800c29c <xTaskResumeAll>
 800b864:	e77a      	b.n	800b75c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b866:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b868:	f000 f9c8 	bl	800bbfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b86c:	f000 fd16 	bl	800c29c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b870:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b872:	f000 fa15 	bl	800bca0 <prvIsQueueEmpty>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f43f af6f 	beq.w	800b75c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b87e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b880:	4618      	mov	r0, r3
 800b882:	3730      	adds	r7, #48	@ 0x30
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	e000ed04 	.word	0xe000ed04

0800b88c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b08e      	sub	sp, #56	@ 0x38
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b896:	2300      	movs	r3, #0
 800b898:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d10b      	bne.n	800b8c0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b8a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ac:	f383 8811 	msr	BASEPRI, r3
 800b8b0:	f3bf 8f6f 	isb	sy
 800b8b4:	f3bf 8f4f 	dsb	sy
 800b8b8:	623b      	str	r3, [r7, #32]
}
 800b8ba:	bf00      	nop
 800b8bc:	bf00      	nop
 800b8be:	e7fd      	b.n	800b8bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00b      	beq.n	800b8e0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8cc:	f383 8811 	msr	BASEPRI, r3
 800b8d0:	f3bf 8f6f 	isb	sy
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	61fb      	str	r3, [r7, #28]
}
 800b8da:	bf00      	nop
 800b8dc:	bf00      	nop
 800b8de:	e7fd      	b.n	800b8dc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b8e0:	f001 f8ea 	bl	800cab8 <xTaskGetSchedulerState>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d102      	bne.n	800b8f0 <xQueueSemaphoreTake+0x64>
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d101      	bne.n	800b8f4 <xQueueSemaphoreTake+0x68>
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e000      	b.n	800b8f6 <xQueueSemaphoreTake+0x6a>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d10b      	bne.n	800b912 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b8fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8fe:	f383 8811 	msr	BASEPRI, r3
 800b902:	f3bf 8f6f 	isb	sy
 800b906:	f3bf 8f4f 	dsb	sy
 800b90a:	61bb      	str	r3, [r7, #24]
}
 800b90c:	bf00      	nop
 800b90e:	bf00      	nop
 800b910:	e7fd      	b.n	800b90e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b912:	f001 ff41 	bl	800d798 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b91a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d024      	beq.n	800b96c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b924:	1e5a      	subs	r2, r3, #1
 800b926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b928:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d104      	bne.n	800b93c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b932:	f001 fa3b 	bl	800cdac <pvTaskIncrementMutexHeldCount>
 800b936:	4602      	mov	r2, r0
 800b938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b93a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b93c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b93e:	691b      	ldr	r3, [r3, #16]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d00f      	beq.n	800b964 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b946:	3310      	adds	r3, #16
 800b948:	4618      	mov	r0, r3
 800b94a:	f000 fec7 	bl	800c6dc <xTaskRemoveFromEventList>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d007      	beq.n	800b964 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b954:	4b54      	ldr	r3, [pc, #336]	@ (800baa8 <xQueueSemaphoreTake+0x21c>)
 800b956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b95a:	601a      	str	r2, [r3, #0]
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b964:	f001 ff4a 	bl	800d7fc <vPortExitCritical>
				return pdPASS;
 800b968:	2301      	movs	r3, #1
 800b96a:	e098      	b.n	800ba9e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d112      	bne.n	800b998 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00b      	beq.n	800b990 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800b978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b97c:	f383 8811 	msr	BASEPRI, r3
 800b980:	f3bf 8f6f 	isb	sy
 800b984:	f3bf 8f4f 	dsb	sy
 800b988:	617b      	str	r3, [r7, #20]
}
 800b98a:	bf00      	nop
 800b98c:	bf00      	nop
 800b98e:	e7fd      	b.n	800b98c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b990:	f001 ff34 	bl	800d7fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b994:	2300      	movs	r3, #0
 800b996:	e082      	b.n	800ba9e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d106      	bne.n	800b9ac <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b99e:	f107 030c 	add.w	r3, r7, #12
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 ff26 	bl	800c7f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b9ac:	f001 ff26 	bl	800d7fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b9b0:	f000 fc66 	bl	800c280 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b9b4:	f001 fef0 	bl	800d798 <vPortEnterCritical>
 800b9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b9be:	b25b      	sxtb	r3, r3
 800b9c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b9c4:	d103      	bne.n	800b9ce <xQueueSemaphoreTake+0x142>
 800b9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b9d4:	b25b      	sxtb	r3, r3
 800b9d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b9da:	d103      	bne.n	800b9e4 <xQueueSemaphoreTake+0x158>
 800b9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9e4:	f001 ff0a 	bl	800d7fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9e8:	463a      	mov	r2, r7
 800b9ea:	f107 030c 	add.w	r3, r7, #12
 800b9ee:	4611      	mov	r1, r2
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f000 ff15 	bl	800c820 <xTaskCheckForTimeOut>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d132      	bne.n	800ba62 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b9fe:	f000 f94f 	bl	800bca0 <prvIsQueueEmpty>
 800ba02:	4603      	mov	r3, r0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d026      	beq.n	800ba56 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d109      	bne.n	800ba24 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ba10:	f001 fec2 	bl	800d798 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ba14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f001 f86b 	bl	800caf4 <xTaskPriorityInherit>
 800ba1e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ba20:	f001 feec 	bl	800d7fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ba24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba26:	3324      	adds	r3, #36	@ 0x24
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	4611      	mov	r1, r2
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f000 fe03 	bl	800c638 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ba32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ba34:	f000 f8e2 	bl	800bbfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ba38:	f000 fc30 	bl	800c29c <xTaskResumeAll>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	f47f af67 	bne.w	800b912 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ba44:	4b18      	ldr	r3, [pc, #96]	@ (800baa8 <xQueueSemaphoreTake+0x21c>)
 800ba46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba4a:	601a      	str	r2, [r3, #0]
 800ba4c:	f3bf 8f4f 	dsb	sy
 800ba50:	f3bf 8f6f 	isb	sy
 800ba54:	e75d      	b.n	800b912 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ba56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ba58:	f000 f8d0 	bl	800bbfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba5c:	f000 fc1e 	bl	800c29c <xTaskResumeAll>
 800ba60:	e757      	b.n	800b912 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ba62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ba64:	f000 f8ca 	bl	800bbfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba68:	f000 fc18 	bl	800c29c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ba6e:	f000 f917 	bl	800bca0 <prvIsQueueEmpty>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f43f af4c 	beq.w	800b912 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ba7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00d      	beq.n	800ba9c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ba80:	f001 fe8a 	bl	800d798 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ba84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ba86:	f000 f811 	bl	800baac <prvGetDisinheritPriorityAfterTimeout>
 800ba8a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ba8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ba92:	4618      	mov	r0, r3
 800ba94:	f001 f906 	bl	800cca4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ba98:	f001 feb0 	bl	800d7fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3738      	adds	r7, #56	@ 0x38
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	e000ed04 	.word	0xe000ed04

0800baac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d006      	beq.n	800baca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800bac6:	60fb      	str	r3, [r7, #12]
 800bac8:	e001      	b.n	800bace <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800baca:	2300      	movs	r3, #0
 800bacc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bace:	68fb      	ldr	r3, [r7, #12]
	}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3714      	adds	r7, #20
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr

0800badc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b086      	sub	sp, #24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bae8:	2300      	movs	r3, #0
 800baea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10d      	bne.n	800bb16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d14d      	bne.n	800bb9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	4618      	mov	r0, r3
 800bb08:	f001 f85c 	bl	800cbc4 <xTaskPriorityDisinherit>
 800bb0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	609a      	str	r2, [r3, #8]
 800bb14:	e043      	b.n	800bb9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d119      	bne.n	800bb50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6858      	ldr	r0, [r3, #4]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb24:	461a      	mov	r2, r3
 800bb26:	68b9      	ldr	r1, [r7, #8]
 800bb28:	f00e ff17 	bl	801a95a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	685a      	ldr	r2, [r3, #4]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb34:	441a      	add	r2, r3
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	685a      	ldr	r2, [r3, #4]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	689b      	ldr	r3, [r3, #8]
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d32b      	bcc.n	800bb9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	605a      	str	r2, [r3, #4]
 800bb4e:	e026      	b.n	800bb9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	68d8      	ldr	r0, [r3, #12]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb58:	461a      	mov	r2, r3
 800bb5a:	68b9      	ldr	r1, [r7, #8]
 800bb5c:	f00e fefd 	bl	801a95a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	68da      	ldr	r2, [r3, #12]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb68:	425b      	negs	r3, r3
 800bb6a:	441a      	add	r2, r3
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	68da      	ldr	r2, [r3, #12]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d207      	bcs.n	800bb8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	689a      	ldr	r2, [r3, #8]
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb84:	425b      	negs	r3, r3
 800bb86:	441a      	add	r2, r3
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2b02      	cmp	r3, #2
 800bb90:	d105      	bne.n	800bb9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d002      	beq.n	800bb9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	1c5a      	adds	r2, r3, #1
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bba6:	697b      	ldr	r3, [r7, #20]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3718      	adds	r7, #24
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d018      	beq.n	800bbf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	68da      	ldr	r2, [r3, #12]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbca:	441a      	add	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	68da      	ldr	r2, [r3, #12]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d303      	bcc.n	800bbe4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	68d9      	ldr	r1, [r3, #12]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbec:	461a      	mov	r2, r3
 800bbee:	6838      	ldr	r0, [r7, #0]
 800bbf0:	f00e feb3 	bl	801a95a <memcpy>
	}
}
 800bbf4:	bf00      	nop
 800bbf6:	3708      	adds	r7, #8
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bc04:	f001 fdc8 	bl	800d798 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bc0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc10:	e011      	b.n	800bc36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d012      	beq.n	800bc40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	3324      	adds	r3, #36	@ 0x24
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f000 fd5c 	bl	800c6dc <xTaskRemoveFromEventList>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d001      	beq.n	800bc2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bc2a:	f000 fe5d 	bl	800c8e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bc2e:	7bfb      	ldrb	r3, [r7, #15]
 800bc30:	3b01      	subs	r3, #1
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bc36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	dce9      	bgt.n	800bc12 <prvUnlockQueue+0x16>
 800bc3e:	e000      	b.n	800bc42 <prvUnlockQueue+0x46>
					break;
 800bc40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	22ff      	movs	r2, #255	@ 0xff
 800bc46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bc4a:	f001 fdd7 	bl	800d7fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bc4e:	f001 fda3 	bl	800d798 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bc58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc5a:	e011      	b.n	800bc80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	691b      	ldr	r3, [r3, #16]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d012      	beq.n	800bc8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	3310      	adds	r3, #16
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f000 fd37 	bl	800c6dc <xTaskRemoveFromEventList>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d001      	beq.n	800bc78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bc74:	f000 fe38 	bl	800c8e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bc78:	7bbb      	ldrb	r3, [r7, #14]
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	dce9      	bgt.n	800bc5c <prvUnlockQueue+0x60>
 800bc88:	e000      	b.n	800bc8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bc8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	22ff      	movs	r2, #255	@ 0xff
 800bc90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bc94:	f001 fdb2 	bl	800d7fc <vPortExitCritical>
}
 800bc98:	bf00      	nop
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bca8:	f001 fd76 	bl	800d798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d102      	bne.n	800bcba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	e001      	b.n	800bcbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bcbe:	f001 fd9d 	bl	800d7fc <vPortExitCritical>

	return xReturn;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bcd4:	f001 fd60 	bl	800d798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d102      	bne.n	800bcea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bce4:	2301      	movs	r3, #1
 800bce6:	60fb      	str	r3, [r7, #12]
 800bce8:	e001      	b.n	800bcee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bcea:	2300      	movs	r3, #0
 800bcec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bcee:	f001 fd85 	bl	800d7fc <vPortExitCritical>

	return xReturn;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3710      	adds	r7, #16
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd06:	2300      	movs	r3, #0
 800bd08:	60fb      	str	r3, [r7, #12]
 800bd0a:	e014      	b.n	800bd36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bd0c:	4a0f      	ldr	r2, [pc, #60]	@ (800bd4c <vQueueAddToRegistry+0x50>)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d10b      	bne.n	800bd30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bd18:	490c      	ldr	r1, [pc, #48]	@ (800bd4c <vQueueAddToRegistry+0x50>)
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	683a      	ldr	r2, [r7, #0]
 800bd1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bd22:	4a0a      	ldr	r2, [pc, #40]	@ (800bd4c <vQueueAddToRegistry+0x50>)
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	00db      	lsls	r3, r3, #3
 800bd28:	4413      	add	r3, r2
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bd2e:	e006      	b.n	800bd3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	3301      	adds	r3, #1
 800bd34:	60fb      	str	r3, [r7, #12]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2b07      	cmp	r3, #7
 800bd3a:	d9e7      	bls.n	800bd0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bd3c:	bf00      	nop
 800bd3e:	bf00      	nop
 800bd40:	3714      	adds	r7, #20
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop
 800bd4c:	2000561c 	.word	0x2000561c

0800bd50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bd60:	f001 fd1a 	bl	800d798 <vPortEnterCritical>
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bd6a:	b25b      	sxtb	r3, r3
 800bd6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd70:	d103      	bne.n	800bd7a <vQueueWaitForMessageRestricted+0x2a>
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	2200      	movs	r2, #0
 800bd76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bd80:	b25b      	sxtb	r3, r3
 800bd82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd86:	d103      	bne.n	800bd90 <vQueueWaitForMessageRestricted+0x40>
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd90:	f001 fd34 	bl	800d7fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d106      	bne.n	800bdaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	3324      	adds	r3, #36	@ 0x24
 800bda0:	687a      	ldr	r2, [r7, #4]
 800bda2:	68b9      	ldr	r1, [r7, #8]
 800bda4:	4618      	mov	r0, r3
 800bda6:	f000 fc6d 	bl	800c684 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bdaa:	6978      	ldr	r0, [r7, #20]
 800bdac:	f7ff ff26 	bl	800bbfc <prvUnlockQueue>
	}
 800bdb0:	bf00      	nop
 800bdb2:	3718      	adds	r7, #24
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b08e      	sub	sp, #56	@ 0x38
 800bdbc:	af04      	add	r7, sp, #16
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	60b9      	str	r1, [r7, #8]
 800bdc2:	607a      	str	r2, [r7, #4]
 800bdc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bdc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d10b      	bne.n	800bde4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800bdcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdd0:	f383 8811 	msr	BASEPRI, r3
 800bdd4:	f3bf 8f6f 	isb	sy
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	623b      	str	r3, [r7, #32]
}
 800bdde:	bf00      	nop
 800bde0:	bf00      	nop
 800bde2:	e7fd      	b.n	800bde0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bde4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d10b      	bne.n	800be02 <xTaskCreateStatic+0x4a>
	__asm volatile
 800bdea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdee:	f383 8811 	msr	BASEPRI, r3
 800bdf2:	f3bf 8f6f 	isb	sy
 800bdf6:	f3bf 8f4f 	dsb	sy
 800bdfa:	61fb      	str	r3, [r7, #28]
}
 800bdfc:	bf00      	nop
 800bdfe:	bf00      	nop
 800be00:	e7fd      	b.n	800bdfe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800be02:	23a8      	movs	r3, #168	@ 0xa8
 800be04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	2ba8      	cmp	r3, #168	@ 0xa8
 800be0a:	d00b      	beq.n	800be24 <xTaskCreateStatic+0x6c>
	__asm volatile
 800be0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	61bb      	str	r3, [r7, #24]
}
 800be1e:	bf00      	nop
 800be20:	bf00      	nop
 800be22:	e7fd      	b.n	800be20 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800be24:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800be26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d01e      	beq.n	800be6a <xTaskCreateStatic+0xb2>
 800be2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d01b      	beq.n	800be6a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be34:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be3a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be3e:	2202      	movs	r2, #2
 800be40:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800be44:	2300      	movs	r3, #0
 800be46:	9303      	str	r3, [sp, #12]
 800be48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be4a:	9302      	str	r3, [sp, #8]
 800be4c:	f107 0314 	add.w	r3, r7, #20
 800be50:	9301      	str	r3, [sp, #4]
 800be52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be54:	9300      	str	r3, [sp, #0]
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	68b9      	ldr	r1, [r7, #8]
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	f000 f851 	bl	800bf04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800be62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800be64:	f000 f8f6 	bl	800c054 <prvAddNewTaskToReadyList>
 800be68:	e001      	b.n	800be6e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800be6a:	2300      	movs	r3, #0
 800be6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800be6e:	697b      	ldr	r3, [r7, #20]
	}
 800be70:	4618      	mov	r0, r3
 800be72:	3728      	adds	r7, #40	@ 0x28
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b08c      	sub	sp, #48	@ 0x30
 800be7c:	af04      	add	r7, sp, #16
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	603b      	str	r3, [r7, #0]
 800be84:	4613      	mov	r3, r2
 800be86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800be88:	88fb      	ldrh	r3, [r7, #6]
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	4618      	mov	r0, r3
 800be8e:	f001 fda5 	bl	800d9dc <pvPortMalloc>
 800be92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00e      	beq.n	800beb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800be9a:	20a8      	movs	r0, #168	@ 0xa8
 800be9c:	f001 fd9e 	bl	800d9dc <pvPortMalloc>
 800bea0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d003      	beq.n	800beb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	697a      	ldr	r2, [r7, #20]
 800beac:	631a      	str	r2, [r3, #48]	@ 0x30
 800beae:	e005      	b.n	800bebc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800beb0:	6978      	ldr	r0, [r7, #20]
 800beb2:	f001 fe61 	bl	800db78 <vPortFree>
 800beb6:	e001      	b.n	800bebc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800beb8:	2300      	movs	r3, #0
 800beba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d017      	beq.n	800bef2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	2200      	movs	r2, #0
 800bec6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800beca:	88fa      	ldrh	r2, [r7, #6]
 800becc:	2300      	movs	r3, #0
 800bece:	9303      	str	r3, [sp, #12]
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	9302      	str	r3, [sp, #8]
 800bed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed6:	9301      	str	r3, [sp, #4]
 800bed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	68b9      	ldr	r1, [r7, #8]
 800bee0:	68f8      	ldr	r0, [r7, #12]
 800bee2:	f000 f80f 	bl	800bf04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bee6:	69f8      	ldr	r0, [r7, #28]
 800bee8:	f000 f8b4 	bl	800c054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800beec:	2301      	movs	r3, #1
 800beee:	61bb      	str	r3, [r7, #24]
 800bef0:	e002      	b.n	800bef8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bef2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bef6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bef8:	69bb      	ldr	r3, [r7, #24]
	}
 800befa:	4618      	mov	r0, r3
 800befc:	3720      	adds	r7, #32
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
	...

0800bf04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b088      	sub	sp, #32
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	607a      	str	r2, [r7, #4]
 800bf10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bf12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf14:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	21a5      	movs	r1, #165	@ 0xa5
 800bf1e:	f00e fbf9 	bl	801a714 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bf22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	4413      	add	r3, r2
 800bf32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	f023 0307 	bic.w	r3, r3, #7
 800bf3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	f003 0307 	and.w	r3, r3, #7
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00b      	beq.n	800bf5e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bf46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf4a:	f383 8811 	msr	BASEPRI, r3
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f3bf 8f4f 	dsb	sy
 800bf56:	617b      	str	r3, [r7, #20]
}
 800bf58:	bf00      	nop
 800bf5a:	bf00      	nop
 800bf5c:	e7fd      	b.n	800bf5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d01f      	beq.n	800bfa4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf64:	2300      	movs	r3, #0
 800bf66:	61fb      	str	r3, [r7, #28]
 800bf68:	e012      	b.n	800bf90 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	4413      	add	r3, r2
 800bf70:	7819      	ldrb	r1, [r3, #0]
 800bf72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	4413      	add	r3, r2
 800bf78:	3334      	adds	r3, #52	@ 0x34
 800bf7a:	460a      	mov	r2, r1
 800bf7c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bf7e:	68ba      	ldr	r2, [r7, #8]
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	4413      	add	r3, r2
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d006      	beq.n	800bf98 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	61fb      	str	r3, [r7, #28]
 800bf90:	69fb      	ldr	r3, [r7, #28]
 800bf92:	2b0f      	cmp	r3, #15
 800bf94:	d9e9      	bls.n	800bf6a <prvInitialiseNewTask+0x66>
 800bf96:	e000      	b.n	800bf9a <prvInitialiseNewTask+0x96>
			{
				break;
 800bf98:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bfa2:	e003      	b.n	800bfac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bfa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfae:	2b37      	cmp	r3, #55	@ 0x37
 800bfb0:	d901      	bls.n	800bfb6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bfb2:	2337      	movs	r3, #55	@ 0x37
 800bfb4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfc0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bfc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bfc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfca:	3304      	adds	r3, #4
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7ff f801 	bl	800afd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bfd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd4:	3318      	adds	r3, #24
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7fe fffc 	bl	800afd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bfdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfe0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bfe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bfec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bff0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff4:	2200      	movs	r2, #0
 800bff6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c004:	3354      	adds	r3, #84	@ 0x54
 800c006:	224c      	movs	r2, #76	@ 0x4c
 800c008:	2100      	movs	r1, #0
 800c00a:	4618      	mov	r0, r3
 800c00c:	f00e fb82 	bl	801a714 <memset>
 800c010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c012:	4a0d      	ldr	r2, [pc, #52]	@ (800c048 <prvInitialiseNewTask+0x144>)
 800c014:	659a      	str	r2, [r3, #88]	@ 0x58
 800c016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c018:	4a0c      	ldr	r2, [pc, #48]	@ (800c04c <prvInitialiseNewTask+0x148>)
 800c01a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c01e:	4a0c      	ldr	r2, [pc, #48]	@ (800c050 <prvInitialiseNewTask+0x14c>)
 800c020:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c022:	683a      	ldr	r2, [r7, #0]
 800c024:	68f9      	ldr	r1, [r7, #12]
 800c026:	69b8      	ldr	r0, [r7, #24]
 800c028:	f001 fa82 	bl	800d530 <pxPortInitialiseStack>
 800c02c:	4602      	mov	r2, r0
 800c02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c030:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c03a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c03c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c03e:	bf00      	nop
 800c040:	3720      	adds	r7, #32
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}
 800c046:	bf00      	nop
 800c048:	20009eac 	.word	0x20009eac
 800c04c:	20009f14 	.word	0x20009f14
 800c050:	20009f7c 	.word	0x20009f7c

0800c054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c05c:	f001 fb9c 	bl	800d798 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c060:	4b2d      	ldr	r3, [pc, #180]	@ (800c118 <prvAddNewTaskToReadyList+0xc4>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	3301      	adds	r3, #1
 800c066:	4a2c      	ldr	r2, [pc, #176]	@ (800c118 <prvAddNewTaskToReadyList+0xc4>)
 800c068:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c06a:	4b2c      	ldr	r3, [pc, #176]	@ (800c11c <prvAddNewTaskToReadyList+0xc8>)
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d109      	bne.n	800c086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c072:	4a2a      	ldr	r2, [pc, #168]	@ (800c11c <prvAddNewTaskToReadyList+0xc8>)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c078:	4b27      	ldr	r3, [pc, #156]	@ (800c118 <prvAddNewTaskToReadyList+0xc4>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d110      	bne.n	800c0a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c080:	f000 fc56 	bl	800c930 <prvInitialiseTaskLists>
 800c084:	e00d      	b.n	800c0a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c086:	4b26      	ldr	r3, [pc, #152]	@ (800c120 <prvAddNewTaskToReadyList+0xcc>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d109      	bne.n	800c0a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c08e:	4b23      	ldr	r3, [pc, #140]	@ (800c11c <prvAddNewTaskToReadyList+0xc8>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c098:	429a      	cmp	r2, r3
 800c09a:	d802      	bhi.n	800c0a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c09c:	4a1f      	ldr	r2, [pc, #124]	@ (800c11c <prvAddNewTaskToReadyList+0xc8>)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c0a2:	4b20      	ldr	r3, [pc, #128]	@ (800c124 <prvAddNewTaskToReadyList+0xd0>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	4a1e      	ldr	r2, [pc, #120]	@ (800c124 <prvAddNewTaskToReadyList+0xd0>)
 800c0aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c0ac:	4b1d      	ldr	r3, [pc, #116]	@ (800c124 <prvAddNewTaskToReadyList+0xd0>)
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0b8:	4b1b      	ldr	r3, [pc, #108]	@ (800c128 <prvAddNewTaskToReadyList+0xd4>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d903      	bls.n	800c0c8 <prvAddNewTaskToReadyList+0x74>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0c4:	4a18      	ldr	r2, [pc, #96]	@ (800c128 <prvAddNewTaskToReadyList+0xd4>)
 800c0c6:	6013      	str	r3, [r2, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	4413      	add	r3, r2
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4a15      	ldr	r2, [pc, #84]	@ (800c12c <prvAddNewTaskToReadyList+0xd8>)
 800c0d6:	441a      	add	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	3304      	adds	r3, #4
 800c0dc:	4619      	mov	r1, r3
 800c0de:	4610      	mov	r0, r2
 800c0e0:	f7fe ff85 	bl	800afee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c0e4:	f001 fb8a 	bl	800d7fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c0e8:	4b0d      	ldr	r3, [pc, #52]	@ (800c120 <prvAddNewTaskToReadyList+0xcc>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00e      	beq.n	800c10e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c0f0:	4b0a      	ldr	r3, [pc, #40]	@ (800c11c <prvAddNewTaskToReadyList+0xc8>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d207      	bcs.n	800c10e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c0fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c130 <prvAddNewTaskToReadyList+0xdc>)
 800c100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c104:	601a      	str	r2, [r3, #0]
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c10e:	bf00      	nop
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}
 800c116:	bf00      	nop
 800c118:	20005b30 	.word	0x20005b30
 800c11c:	2000565c 	.word	0x2000565c
 800c120:	20005b3c 	.word	0x20005b3c
 800c124:	20005b4c 	.word	0x20005b4c
 800c128:	20005b38 	.word	0x20005b38
 800c12c:	20005660 	.word	0x20005660
 800c130:	e000ed04 	.word	0xe000ed04

0800c134 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c13c:	2300      	movs	r3, #0
 800c13e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d018      	beq.n	800c178 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c146:	4b14      	ldr	r3, [pc, #80]	@ (800c198 <vTaskDelay+0x64>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00b      	beq.n	800c166 <vTaskDelay+0x32>
	__asm volatile
 800c14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c152:	f383 8811 	msr	BASEPRI, r3
 800c156:	f3bf 8f6f 	isb	sy
 800c15a:	f3bf 8f4f 	dsb	sy
 800c15e:	60bb      	str	r3, [r7, #8]
}
 800c160:	bf00      	nop
 800c162:	bf00      	nop
 800c164:	e7fd      	b.n	800c162 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c166:	f000 f88b 	bl	800c280 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c16a:	2100      	movs	r1, #0
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fe31 	bl	800cdd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c172:	f000 f893 	bl	800c29c <xTaskResumeAll>
 800c176:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d107      	bne.n	800c18e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c17e:	4b07      	ldr	r3, [pc, #28]	@ (800c19c <vTaskDelay+0x68>)
 800c180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c184:	601a      	str	r2, [r3, #0]
 800c186:	f3bf 8f4f 	dsb	sy
 800c18a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c18e:	bf00      	nop
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	20005b58 	.word	0x20005b58
 800c19c:	e000ed04 	.word	0xe000ed04

0800c1a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b08a      	sub	sp, #40	@ 0x28
 800c1a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c1ae:	463a      	mov	r2, r7
 800c1b0:	1d39      	adds	r1, r7, #4
 800c1b2:	f107 0308 	add.w	r3, r7, #8
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fe feb8 	bl	800af2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c1bc:	6839      	ldr	r1, [r7, #0]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	9202      	str	r2, [sp, #8]
 800c1c4:	9301      	str	r3, [sp, #4]
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	460a      	mov	r2, r1
 800c1ce:	4924      	ldr	r1, [pc, #144]	@ (800c260 <vTaskStartScheduler+0xc0>)
 800c1d0:	4824      	ldr	r0, [pc, #144]	@ (800c264 <vTaskStartScheduler+0xc4>)
 800c1d2:	f7ff fdf1 	bl	800bdb8 <xTaskCreateStatic>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	4a23      	ldr	r2, [pc, #140]	@ (800c268 <vTaskStartScheduler+0xc8>)
 800c1da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c1dc:	4b22      	ldr	r3, [pc, #136]	@ (800c268 <vTaskStartScheduler+0xc8>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d002      	beq.n	800c1ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	617b      	str	r3, [r7, #20]
 800c1e8:	e001      	b.n	800c1ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d102      	bne.n	800c1fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c1f4:	f000 fe42 	bl	800ce7c <xTimerCreateTimerTask>
 800c1f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d11b      	bne.n	800c238 <vTaskStartScheduler+0x98>
	__asm volatile
 800c200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c204:	f383 8811 	msr	BASEPRI, r3
 800c208:	f3bf 8f6f 	isb	sy
 800c20c:	f3bf 8f4f 	dsb	sy
 800c210:	613b      	str	r3, [r7, #16]
}
 800c212:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c214:	4b15      	ldr	r3, [pc, #84]	@ (800c26c <vTaskStartScheduler+0xcc>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	3354      	adds	r3, #84	@ 0x54
 800c21a:	4a15      	ldr	r2, [pc, #84]	@ (800c270 <vTaskStartScheduler+0xd0>)
 800c21c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c21e:	4b15      	ldr	r3, [pc, #84]	@ (800c274 <vTaskStartScheduler+0xd4>)
 800c220:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c224:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c226:	4b14      	ldr	r3, [pc, #80]	@ (800c278 <vTaskStartScheduler+0xd8>)
 800c228:	2201      	movs	r2, #1
 800c22a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c22c:	4b13      	ldr	r3, [pc, #76]	@ (800c27c <vTaskStartScheduler+0xdc>)
 800c22e:	2200      	movs	r2, #0
 800c230:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c232:	f001 fa0d 	bl	800d650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c236:	e00f      	b.n	800c258 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c23e:	d10b      	bne.n	800c258 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	60fb      	str	r3, [r7, #12]
}
 800c252:	bf00      	nop
 800c254:	bf00      	nop
 800c256:	e7fd      	b.n	800c254 <vTaskStartScheduler+0xb4>
}
 800c258:	bf00      	nop
 800c25a:	3718      	adds	r7, #24
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}
 800c260:	0801de10 	.word	0x0801de10
 800c264:	0800c901 	.word	0x0800c901
 800c268:	20005b54 	.word	0x20005b54
 800c26c:	2000565c 	.word	0x2000565c
 800c270:	2000008c 	.word	0x2000008c
 800c274:	20005b50 	.word	0x20005b50
 800c278:	20005b3c 	.word	0x20005b3c
 800c27c:	20005b34 	.word	0x20005b34

0800c280 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c280:	b480      	push	{r7}
 800c282:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c284:	4b04      	ldr	r3, [pc, #16]	@ (800c298 <vTaskSuspendAll+0x18>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	3301      	adds	r3, #1
 800c28a:	4a03      	ldr	r2, [pc, #12]	@ (800c298 <vTaskSuspendAll+0x18>)
 800c28c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c28e:	bf00      	nop
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr
 800c298:	20005b58 	.word	0x20005b58

0800c29c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b084      	sub	sp, #16
 800c2a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c2aa:	4b42      	ldr	r3, [pc, #264]	@ (800c3b4 <xTaskResumeAll+0x118>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d10b      	bne.n	800c2ca <xTaskResumeAll+0x2e>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b6:	f383 8811 	msr	BASEPRI, r3
 800c2ba:	f3bf 8f6f 	isb	sy
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	603b      	str	r3, [r7, #0]
}
 800c2c4:	bf00      	nop
 800c2c6:	bf00      	nop
 800c2c8:	e7fd      	b.n	800c2c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c2ca:	f001 fa65 	bl	800d798 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c2ce:	4b39      	ldr	r3, [pc, #228]	@ (800c3b4 <xTaskResumeAll+0x118>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	4a37      	ldr	r2, [pc, #220]	@ (800c3b4 <xTaskResumeAll+0x118>)
 800c2d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2d8:	4b36      	ldr	r3, [pc, #216]	@ (800c3b4 <xTaskResumeAll+0x118>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d162      	bne.n	800c3a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c2e0:	4b35      	ldr	r3, [pc, #212]	@ (800c3b8 <xTaskResumeAll+0x11c>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d05e      	beq.n	800c3a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c2e8:	e02f      	b.n	800c34a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ea:	4b34      	ldr	r3, [pc, #208]	@ (800c3bc <xTaskResumeAll+0x120>)
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	3318      	adds	r3, #24
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7fe fed6 	bl	800b0a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	3304      	adds	r3, #4
 800c300:	4618      	mov	r0, r3
 800c302:	f7fe fed1 	bl	800b0a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c30a:	4b2d      	ldr	r3, [pc, #180]	@ (800c3c0 <xTaskResumeAll+0x124>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	429a      	cmp	r2, r3
 800c310:	d903      	bls.n	800c31a <xTaskResumeAll+0x7e>
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c316:	4a2a      	ldr	r2, [pc, #168]	@ (800c3c0 <xTaskResumeAll+0x124>)
 800c318:	6013      	str	r3, [r2, #0]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c31e:	4613      	mov	r3, r2
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	4413      	add	r3, r2
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4a27      	ldr	r2, [pc, #156]	@ (800c3c4 <xTaskResumeAll+0x128>)
 800c328:	441a      	add	r2, r3
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	3304      	adds	r3, #4
 800c32e:	4619      	mov	r1, r3
 800c330:	4610      	mov	r0, r2
 800c332:	f7fe fe5c 	bl	800afee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c33a:	4b23      	ldr	r3, [pc, #140]	@ (800c3c8 <xTaskResumeAll+0x12c>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c340:	429a      	cmp	r2, r3
 800c342:	d302      	bcc.n	800c34a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c344:	4b21      	ldr	r3, [pc, #132]	@ (800c3cc <xTaskResumeAll+0x130>)
 800c346:	2201      	movs	r2, #1
 800c348:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c34a:	4b1c      	ldr	r3, [pc, #112]	@ (800c3bc <xTaskResumeAll+0x120>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1cb      	bne.n	800c2ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d001      	beq.n	800c35c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c358:	f000 fb8e 	bl	800ca78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c35c:	4b1c      	ldr	r3, [pc, #112]	@ (800c3d0 <xTaskResumeAll+0x134>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d010      	beq.n	800c38a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c368:	f000 f846 	bl	800c3f8 <xTaskIncrementTick>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d002      	beq.n	800c378 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c372:	4b16      	ldr	r3, [pc, #88]	@ (800c3cc <xTaskResumeAll+0x130>)
 800c374:	2201      	movs	r2, #1
 800c376:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3b01      	subs	r3, #1
 800c37c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d1f1      	bne.n	800c368 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c384:	4b12      	ldr	r3, [pc, #72]	@ (800c3d0 <xTaskResumeAll+0x134>)
 800c386:	2200      	movs	r2, #0
 800c388:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c38a:	4b10      	ldr	r3, [pc, #64]	@ (800c3cc <xTaskResumeAll+0x130>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d009      	beq.n	800c3a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c392:	2301      	movs	r3, #1
 800c394:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c396:	4b0f      	ldr	r3, [pc, #60]	@ (800c3d4 <xTaskResumeAll+0x138>)
 800c398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c39c:	601a      	str	r2, [r3, #0]
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3a6:	f001 fa29 	bl	800d7fc <vPortExitCritical>

	return xAlreadyYielded;
 800c3aa:	68bb      	ldr	r3, [r7, #8]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3710      	adds	r7, #16
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	20005b58 	.word	0x20005b58
 800c3b8:	20005b30 	.word	0x20005b30
 800c3bc:	20005af0 	.word	0x20005af0
 800c3c0:	20005b38 	.word	0x20005b38
 800c3c4:	20005660 	.word	0x20005660
 800c3c8:	2000565c 	.word	0x2000565c
 800c3cc:	20005b44 	.word	0x20005b44
 800c3d0:	20005b40 	.word	0x20005b40
 800c3d4:	e000ed04 	.word	0xe000ed04

0800c3d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c3de:	4b05      	ldr	r3, [pc, #20]	@ (800c3f4 <xTaskGetTickCount+0x1c>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c3e4:	687b      	ldr	r3, [r7, #4]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	370c      	adds	r7, #12
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop
 800c3f4:	20005b34 	.word	0x20005b34

0800c3f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c3fe:	2300      	movs	r3, #0
 800c400:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c402:	4b4f      	ldr	r3, [pc, #316]	@ (800c540 <xTaskIncrementTick+0x148>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	f040 8090 	bne.w	800c52c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c40c:	4b4d      	ldr	r3, [pc, #308]	@ (800c544 <xTaskIncrementTick+0x14c>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	3301      	adds	r3, #1
 800c412:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c414:	4a4b      	ldr	r2, [pc, #300]	@ (800c544 <xTaskIncrementTick+0x14c>)
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d121      	bne.n	800c464 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c420:	4b49      	ldr	r3, [pc, #292]	@ (800c548 <xTaskIncrementTick+0x150>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d00b      	beq.n	800c442 <xTaskIncrementTick+0x4a>
	__asm volatile
 800c42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c42e:	f383 8811 	msr	BASEPRI, r3
 800c432:	f3bf 8f6f 	isb	sy
 800c436:	f3bf 8f4f 	dsb	sy
 800c43a:	603b      	str	r3, [r7, #0]
}
 800c43c:	bf00      	nop
 800c43e:	bf00      	nop
 800c440:	e7fd      	b.n	800c43e <xTaskIncrementTick+0x46>
 800c442:	4b41      	ldr	r3, [pc, #260]	@ (800c548 <xTaskIncrementTick+0x150>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	60fb      	str	r3, [r7, #12]
 800c448:	4b40      	ldr	r3, [pc, #256]	@ (800c54c <xTaskIncrementTick+0x154>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a3e      	ldr	r2, [pc, #248]	@ (800c548 <xTaskIncrementTick+0x150>)
 800c44e:	6013      	str	r3, [r2, #0]
 800c450:	4a3e      	ldr	r2, [pc, #248]	@ (800c54c <xTaskIncrementTick+0x154>)
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	6013      	str	r3, [r2, #0]
 800c456:	4b3e      	ldr	r3, [pc, #248]	@ (800c550 <xTaskIncrementTick+0x158>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	3301      	adds	r3, #1
 800c45c:	4a3c      	ldr	r2, [pc, #240]	@ (800c550 <xTaskIncrementTick+0x158>)
 800c45e:	6013      	str	r3, [r2, #0]
 800c460:	f000 fb0a 	bl	800ca78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c464:	4b3b      	ldr	r3, [pc, #236]	@ (800c554 <xTaskIncrementTick+0x15c>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	693a      	ldr	r2, [r7, #16]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d349      	bcc.n	800c502 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c46e:	4b36      	ldr	r3, [pc, #216]	@ (800c548 <xTaskIncrementTick+0x150>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d104      	bne.n	800c482 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c478:	4b36      	ldr	r3, [pc, #216]	@ (800c554 <xTaskIncrementTick+0x15c>)
 800c47a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c47e:	601a      	str	r2, [r3, #0]
					break;
 800c480:	e03f      	b.n	800c502 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c482:	4b31      	ldr	r3, [pc, #196]	@ (800c548 <xTaskIncrementTick+0x150>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c492:	693a      	ldr	r2, [r7, #16]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	429a      	cmp	r2, r3
 800c498:	d203      	bcs.n	800c4a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c49a:	4a2e      	ldr	r2, [pc, #184]	@ (800c554 <xTaskIncrementTick+0x15c>)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c4a0:	e02f      	b.n	800c502 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	3304      	adds	r3, #4
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7fe fdfe 	bl	800b0a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d004      	beq.n	800c4be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	3318      	adds	r3, #24
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7fe fdf5 	bl	800b0a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4c2:	4b25      	ldr	r3, [pc, #148]	@ (800c558 <xTaskIncrementTick+0x160>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d903      	bls.n	800c4d2 <xTaskIncrementTick+0xda>
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ce:	4a22      	ldr	r2, [pc, #136]	@ (800c558 <xTaskIncrementTick+0x160>)
 800c4d0:	6013      	str	r3, [r2, #0]
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	009b      	lsls	r3, r3, #2
 800c4da:	4413      	add	r3, r2
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	4a1f      	ldr	r2, [pc, #124]	@ (800c55c <xTaskIncrementTick+0x164>)
 800c4e0:	441a      	add	r2, r3
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	3304      	adds	r3, #4
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	4610      	mov	r0, r2
 800c4ea:	f7fe fd80 	bl	800afee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800c560 <xTaskIncrementTick+0x168>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d3b8      	bcc.n	800c46e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c500:	e7b5      	b.n	800c46e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c502:	4b17      	ldr	r3, [pc, #92]	@ (800c560 <xTaskIncrementTick+0x168>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c508:	4914      	ldr	r1, [pc, #80]	@ (800c55c <xTaskIncrementTick+0x164>)
 800c50a:	4613      	mov	r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	4413      	add	r3, r2
 800c510:	009b      	lsls	r3, r3, #2
 800c512:	440b      	add	r3, r1
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	2b01      	cmp	r3, #1
 800c518:	d901      	bls.n	800c51e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c51a:	2301      	movs	r3, #1
 800c51c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c51e:	4b11      	ldr	r3, [pc, #68]	@ (800c564 <xTaskIncrementTick+0x16c>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d007      	beq.n	800c536 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c526:	2301      	movs	r3, #1
 800c528:	617b      	str	r3, [r7, #20]
 800c52a:	e004      	b.n	800c536 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c52c:	4b0e      	ldr	r3, [pc, #56]	@ (800c568 <xTaskIncrementTick+0x170>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	3301      	adds	r3, #1
 800c532:	4a0d      	ldr	r2, [pc, #52]	@ (800c568 <xTaskIncrementTick+0x170>)
 800c534:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c536:	697b      	ldr	r3, [r7, #20]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3718      	adds	r7, #24
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	20005b58 	.word	0x20005b58
 800c544:	20005b34 	.word	0x20005b34
 800c548:	20005ae8 	.word	0x20005ae8
 800c54c:	20005aec 	.word	0x20005aec
 800c550:	20005b48 	.word	0x20005b48
 800c554:	20005b50 	.word	0x20005b50
 800c558:	20005b38 	.word	0x20005b38
 800c55c:	20005660 	.word	0x20005660
 800c560:	2000565c 	.word	0x2000565c
 800c564:	20005b44 	.word	0x20005b44
 800c568:	20005b40 	.word	0x20005b40

0800c56c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c56c:	b480      	push	{r7}
 800c56e:	b085      	sub	sp, #20
 800c570:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c572:	4b2b      	ldr	r3, [pc, #172]	@ (800c620 <vTaskSwitchContext+0xb4>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d003      	beq.n	800c582 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c57a:	4b2a      	ldr	r3, [pc, #168]	@ (800c624 <vTaskSwitchContext+0xb8>)
 800c57c:	2201      	movs	r2, #1
 800c57e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c580:	e047      	b.n	800c612 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c582:	4b28      	ldr	r3, [pc, #160]	@ (800c624 <vTaskSwitchContext+0xb8>)
 800c584:	2200      	movs	r2, #0
 800c586:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c588:	4b27      	ldr	r3, [pc, #156]	@ (800c628 <vTaskSwitchContext+0xbc>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	60fb      	str	r3, [r7, #12]
 800c58e:	e011      	b.n	800c5b4 <vTaskSwitchContext+0x48>
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d10b      	bne.n	800c5ae <vTaskSwitchContext+0x42>
	__asm volatile
 800c596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c59a:	f383 8811 	msr	BASEPRI, r3
 800c59e:	f3bf 8f6f 	isb	sy
 800c5a2:	f3bf 8f4f 	dsb	sy
 800c5a6:	607b      	str	r3, [r7, #4]
}
 800c5a8:	bf00      	nop
 800c5aa:	bf00      	nop
 800c5ac:	e7fd      	b.n	800c5aa <vTaskSwitchContext+0x3e>
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	60fb      	str	r3, [r7, #12]
 800c5b4:	491d      	ldr	r1, [pc, #116]	@ (800c62c <vTaskSwitchContext+0xc0>)
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4413      	add	r3, r2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	440b      	add	r3, r1
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d0e3      	beq.n	800c590 <vTaskSwitchContext+0x24>
 800c5c8:	68fa      	ldr	r2, [r7, #12]
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	4413      	add	r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	4a16      	ldr	r2, [pc, #88]	@ (800c62c <vTaskSwitchContext+0xc0>)
 800c5d4:	4413      	add	r3, r2
 800c5d6:	60bb      	str	r3, [r7, #8]
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	685a      	ldr	r2, [r3, #4]
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	605a      	str	r2, [r3, #4]
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	685a      	ldr	r2, [r3, #4]
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	3308      	adds	r3, #8
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d104      	bne.n	800c5f8 <vTaskSwitchContext+0x8c>
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	685b      	ldr	r3, [r3, #4]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	605a      	str	r2, [r3, #4]
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	68db      	ldr	r3, [r3, #12]
 800c5fe:	4a0c      	ldr	r2, [pc, #48]	@ (800c630 <vTaskSwitchContext+0xc4>)
 800c600:	6013      	str	r3, [r2, #0]
 800c602:	4a09      	ldr	r2, [pc, #36]	@ (800c628 <vTaskSwitchContext+0xbc>)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c608:	4b09      	ldr	r3, [pc, #36]	@ (800c630 <vTaskSwitchContext+0xc4>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	3354      	adds	r3, #84	@ 0x54
 800c60e:	4a09      	ldr	r2, [pc, #36]	@ (800c634 <vTaskSwitchContext+0xc8>)
 800c610:	6013      	str	r3, [r2, #0]
}
 800c612:	bf00      	nop
 800c614:	3714      	adds	r7, #20
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	20005b58 	.word	0x20005b58
 800c624:	20005b44 	.word	0x20005b44
 800c628:	20005b38 	.word	0x20005b38
 800c62c:	20005660 	.word	0x20005660
 800c630:	2000565c 	.word	0x2000565c
 800c634:	2000008c 	.word	0x2000008c

0800c638 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10b      	bne.n	800c660 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c64c:	f383 8811 	msr	BASEPRI, r3
 800c650:	f3bf 8f6f 	isb	sy
 800c654:	f3bf 8f4f 	dsb	sy
 800c658:	60fb      	str	r3, [r7, #12]
}
 800c65a:	bf00      	nop
 800c65c:	bf00      	nop
 800c65e:	e7fd      	b.n	800c65c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c660:	4b07      	ldr	r3, [pc, #28]	@ (800c680 <vTaskPlaceOnEventList+0x48>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	3318      	adds	r3, #24
 800c666:	4619      	mov	r1, r3
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f7fe fce4 	bl	800b036 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c66e:	2101      	movs	r1, #1
 800c670:	6838      	ldr	r0, [r7, #0]
 800c672:	f000 fbaf 	bl	800cdd4 <prvAddCurrentTaskToDelayedList>
}
 800c676:	bf00      	nop
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	2000565c 	.word	0x2000565c

0800c684 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d10b      	bne.n	800c6ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	617b      	str	r3, [r7, #20]
}
 800c6a8:	bf00      	nop
 800c6aa:	bf00      	nop
 800c6ac:	e7fd      	b.n	800c6aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c6ae:	4b0a      	ldr	r3, [pc, #40]	@ (800c6d8 <vTaskPlaceOnEventListRestricted+0x54>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	3318      	adds	r3, #24
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f7fe fc99 	bl	800afee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d002      	beq.n	800c6c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c6c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c6c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c6c8:	6879      	ldr	r1, [r7, #4]
 800c6ca:	68b8      	ldr	r0, [r7, #8]
 800c6cc:	f000 fb82 	bl	800cdd4 <prvAddCurrentTaskToDelayedList>
	}
 800c6d0:	bf00      	nop
 800c6d2:	3718      	adds	r7, #24
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	2000565c 	.word	0x2000565c

0800c6dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b086      	sub	sp, #24
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	68db      	ldr	r3, [r3, #12]
 800c6ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10b      	bne.n	800c70a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6f6:	f383 8811 	msr	BASEPRI, r3
 800c6fa:	f3bf 8f6f 	isb	sy
 800c6fe:	f3bf 8f4f 	dsb	sy
 800c702:	60fb      	str	r3, [r7, #12]
}
 800c704:	bf00      	nop
 800c706:	bf00      	nop
 800c708:	e7fd      	b.n	800c706 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	3318      	adds	r3, #24
 800c70e:	4618      	mov	r0, r3
 800c710:	f7fe fcca 	bl	800b0a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c714:	4b1d      	ldr	r3, [pc, #116]	@ (800c78c <xTaskRemoveFromEventList+0xb0>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d11d      	bne.n	800c758 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	3304      	adds	r3, #4
 800c720:	4618      	mov	r0, r3
 800c722:	f7fe fcc1 	bl	800b0a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c72a:	4b19      	ldr	r3, [pc, #100]	@ (800c790 <xTaskRemoveFromEventList+0xb4>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d903      	bls.n	800c73a <xTaskRemoveFromEventList+0x5e>
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c736:	4a16      	ldr	r2, [pc, #88]	@ (800c790 <xTaskRemoveFromEventList+0xb4>)
 800c738:	6013      	str	r3, [r2, #0]
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c73e:	4613      	mov	r3, r2
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	4413      	add	r3, r2
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	4a13      	ldr	r2, [pc, #76]	@ (800c794 <xTaskRemoveFromEventList+0xb8>)
 800c748:	441a      	add	r2, r3
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	3304      	adds	r3, #4
 800c74e:	4619      	mov	r1, r3
 800c750:	4610      	mov	r0, r2
 800c752:	f7fe fc4c 	bl	800afee <vListInsertEnd>
 800c756:	e005      	b.n	800c764 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	3318      	adds	r3, #24
 800c75c:	4619      	mov	r1, r3
 800c75e:	480e      	ldr	r0, [pc, #56]	@ (800c798 <xTaskRemoveFromEventList+0xbc>)
 800c760:	f7fe fc45 	bl	800afee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c768:	4b0c      	ldr	r3, [pc, #48]	@ (800c79c <xTaskRemoveFromEventList+0xc0>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c76e:	429a      	cmp	r2, r3
 800c770:	d905      	bls.n	800c77e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c772:	2301      	movs	r3, #1
 800c774:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c776:	4b0a      	ldr	r3, [pc, #40]	@ (800c7a0 <xTaskRemoveFromEventList+0xc4>)
 800c778:	2201      	movs	r2, #1
 800c77a:	601a      	str	r2, [r3, #0]
 800c77c:	e001      	b.n	800c782 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c77e:	2300      	movs	r3, #0
 800c780:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c782:	697b      	ldr	r3, [r7, #20]
}
 800c784:	4618      	mov	r0, r3
 800c786:	3718      	adds	r7, #24
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}
 800c78c:	20005b58 	.word	0x20005b58
 800c790:	20005b38 	.word	0x20005b38
 800c794:	20005660 	.word	0x20005660
 800c798:	20005af0 	.word	0x20005af0
 800c79c:	2000565c 	.word	0x2000565c
 800c7a0:	20005b44 	.word	0x20005b44

0800c7a4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d10b      	bne.n	800c7ca <vTaskSetTimeOutState+0x26>
	__asm volatile
 800c7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b6:	f383 8811 	msr	BASEPRI, r3
 800c7ba:	f3bf 8f6f 	isb	sy
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	60fb      	str	r3, [r7, #12]
}
 800c7c4:	bf00      	nop
 800c7c6:	bf00      	nop
 800c7c8:	e7fd      	b.n	800c7c6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800c7ca:	f000 ffe5 	bl	800d798 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c7ce:	4b07      	ldr	r3, [pc, #28]	@ (800c7ec <vTaskSetTimeOutState+0x48>)
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800c7d6:	4b06      	ldr	r3, [pc, #24]	@ (800c7f0 <vTaskSetTimeOutState+0x4c>)
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800c7de:	f001 f80d 	bl	800d7fc <vPortExitCritical>
}
 800c7e2:	bf00      	nop
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	20005b48 	.word	0x20005b48
 800c7f0:	20005b34 	.word	0x20005b34

0800c7f4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b083      	sub	sp, #12
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c7fc:	4b06      	ldr	r3, [pc, #24]	@ (800c818 <vTaskInternalSetTimeOutState+0x24>)
 800c7fe:	681a      	ldr	r2, [r3, #0]
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c804:	4b05      	ldr	r3, [pc, #20]	@ (800c81c <vTaskInternalSetTimeOutState+0x28>)
 800c806:	681a      	ldr	r2, [r3, #0]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	605a      	str	r2, [r3, #4]
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr
 800c818:	20005b48 	.word	0x20005b48
 800c81c:	20005b34 	.word	0x20005b34

0800c820 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b088      	sub	sp, #32
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d10b      	bne.n	800c848 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c834:	f383 8811 	msr	BASEPRI, r3
 800c838:	f3bf 8f6f 	isb	sy
 800c83c:	f3bf 8f4f 	dsb	sy
 800c840:	613b      	str	r3, [r7, #16]
}
 800c842:	bf00      	nop
 800c844:	bf00      	nop
 800c846:	e7fd      	b.n	800c844 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d10b      	bne.n	800c866 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	60fb      	str	r3, [r7, #12]
}
 800c860:	bf00      	nop
 800c862:	bf00      	nop
 800c864:	e7fd      	b.n	800c862 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c866:	f000 ff97 	bl	800d798 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c86a:	4b1d      	ldr	r3, [pc, #116]	@ (800c8e0 <xTaskCheckForTimeOut+0xc0>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	69ba      	ldr	r2, [r7, #24]
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c882:	d102      	bne.n	800c88a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c884:	2300      	movs	r3, #0
 800c886:	61fb      	str	r3, [r7, #28]
 800c888:	e023      	b.n	800c8d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681a      	ldr	r2, [r3, #0]
 800c88e:	4b15      	ldr	r3, [pc, #84]	@ (800c8e4 <xTaskCheckForTimeOut+0xc4>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	429a      	cmp	r2, r3
 800c894:	d007      	beq.n	800c8a6 <xTaskCheckForTimeOut+0x86>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	69ba      	ldr	r2, [r7, #24]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d302      	bcc.n	800c8a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	61fb      	str	r3, [r7, #28]
 800c8a4:	e015      	b.n	800c8d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	697a      	ldr	r2, [r7, #20]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d20b      	bcs.n	800c8c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	1ad2      	subs	r2, r2, r3
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c8bc:	6878      	ldr	r0, [r7, #4]
 800c8be:	f7ff ff99 	bl	800c7f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	61fb      	str	r3, [r7, #28]
 800c8c6:	e004      	b.n	800c8d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c8d2:	f000 ff93 	bl	800d7fc <vPortExitCritical>

	return xReturn;
 800c8d6:	69fb      	ldr	r3, [r7, #28]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3720      	adds	r7, #32
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bd80      	pop	{r7, pc}
 800c8e0:	20005b34 	.word	0x20005b34
 800c8e4:	20005b48 	.word	0x20005b48

0800c8e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c8ec:	4b03      	ldr	r3, [pc, #12]	@ (800c8fc <vTaskMissedYield+0x14>)
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	601a      	str	r2, [r3, #0]
}
 800c8f2:	bf00      	nop
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr
 800c8fc:	20005b44 	.word	0x20005b44

0800c900 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c908:	f000 f852 	bl	800c9b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c90c:	4b06      	ldr	r3, [pc, #24]	@ (800c928 <prvIdleTask+0x28>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2b01      	cmp	r3, #1
 800c912:	d9f9      	bls.n	800c908 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c914:	4b05      	ldr	r3, [pc, #20]	@ (800c92c <prvIdleTask+0x2c>)
 800c916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c91a:	601a      	str	r2, [r3, #0]
 800c91c:	f3bf 8f4f 	dsb	sy
 800c920:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c924:	e7f0      	b.n	800c908 <prvIdleTask+0x8>
 800c926:	bf00      	nop
 800c928:	20005660 	.word	0x20005660
 800c92c:	e000ed04 	.word	0xe000ed04

0800c930 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b082      	sub	sp, #8
 800c934:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c936:	2300      	movs	r3, #0
 800c938:	607b      	str	r3, [r7, #4]
 800c93a:	e00c      	b.n	800c956 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	4613      	mov	r3, r2
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	4413      	add	r3, r2
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	4a12      	ldr	r2, [pc, #72]	@ (800c990 <prvInitialiseTaskLists+0x60>)
 800c948:	4413      	add	r3, r2
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7fe fb22 	bl	800af94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	3301      	adds	r3, #1
 800c954:	607b      	str	r3, [r7, #4]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2b37      	cmp	r3, #55	@ 0x37
 800c95a:	d9ef      	bls.n	800c93c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c95c:	480d      	ldr	r0, [pc, #52]	@ (800c994 <prvInitialiseTaskLists+0x64>)
 800c95e:	f7fe fb19 	bl	800af94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c962:	480d      	ldr	r0, [pc, #52]	@ (800c998 <prvInitialiseTaskLists+0x68>)
 800c964:	f7fe fb16 	bl	800af94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c968:	480c      	ldr	r0, [pc, #48]	@ (800c99c <prvInitialiseTaskLists+0x6c>)
 800c96a:	f7fe fb13 	bl	800af94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c96e:	480c      	ldr	r0, [pc, #48]	@ (800c9a0 <prvInitialiseTaskLists+0x70>)
 800c970:	f7fe fb10 	bl	800af94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c974:	480b      	ldr	r0, [pc, #44]	@ (800c9a4 <prvInitialiseTaskLists+0x74>)
 800c976:	f7fe fb0d 	bl	800af94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c97a:	4b0b      	ldr	r3, [pc, #44]	@ (800c9a8 <prvInitialiseTaskLists+0x78>)
 800c97c:	4a05      	ldr	r2, [pc, #20]	@ (800c994 <prvInitialiseTaskLists+0x64>)
 800c97e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c980:	4b0a      	ldr	r3, [pc, #40]	@ (800c9ac <prvInitialiseTaskLists+0x7c>)
 800c982:	4a05      	ldr	r2, [pc, #20]	@ (800c998 <prvInitialiseTaskLists+0x68>)
 800c984:	601a      	str	r2, [r3, #0]
}
 800c986:	bf00      	nop
 800c988:	3708      	adds	r7, #8
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	20005660 	.word	0x20005660
 800c994:	20005ac0 	.word	0x20005ac0
 800c998:	20005ad4 	.word	0x20005ad4
 800c99c:	20005af0 	.word	0x20005af0
 800c9a0:	20005b04 	.word	0x20005b04
 800c9a4:	20005b1c 	.word	0x20005b1c
 800c9a8:	20005ae8 	.word	0x20005ae8
 800c9ac:	20005aec 	.word	0x20005aec

0800c9b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c9b6:	e019      	b.n	800c9ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c9b8:	f000 feee 	bl	800d798 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9bc:	4b10      	ldr	r3, [pc, #64]	@ (800ca00 <prvCheckTasksWaitingTermination+0x50>)
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	3304      	adds	r3, #4
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fe fb6d 	bl	800b0a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c9ce:	4b0d      	ldr	r3, [pc, #52]	@ (800ca04 <prvCheckTasksWaitingTermination+0x54>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	4a0b      	ldr	r2, [pc, #44]	@ (800ca04 <prvCheckTasksWaitingTermination+0x54>)
 800c9d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c9d8:	4b0b      	ldr	r3, [pc, #44]	@ (800ca08 <prvCheckTasksWaitingTermination+0x58>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	4a0a      	ldr	r2, [pc, #40]	@ (800ca08 <prvCheckTasksWaitingTermination+0x58>)
 800c9e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c9e2:	f000 ff0b 	bl	800d7fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 f810 	bl	800ca0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c9ec:	4b06      	ldr	r3, [pc, #24]	@ (800ca08 <prvCheckTasksWaitingTermination+0x58>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d1e1      	bne.n	800c9b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c9f4:	bf00      	nop
 800c9f6:	bf00      	nop
 800c9f8:	3708      	adds	r7, #8
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20005b04 	.word	0x20005b04
 800ca04:	20005b30 	.word	0x20005b30
 800ca08:	20005b18 	.word	0x20005b18

0800ca0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	3354      	adds	r3, #84	@ 0x54
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f00d fecd 	bl	801a7b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d108      	bne.n	800ca3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f001 f8a3 	bl	800db78 <vPortFree>
				vPortFree( pxTCB );
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f001 f8a0 	bl	800db78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ca38:	e019      	b.n	800ca6e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d103      	bne.n	800ca4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f001 f897 	bl	800db78 <vPortFree>
	}
 800ca4a:	e010      	b.n	800ca6e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ca52:	2b02      	cmp	r3, #2
 800ca54:	d00b      	beq.n	800ca6e <prvDeleteTCB+0x62>
	__asm volatile
 800ca56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca5a:	f383 8811 	msr	BASEPRI, r3
 800ca5e:	f3bf 8f6f 	isb	sy
 800ca62:	f3bf 8f4f 	dsb	sy
 800ca66:	60fb      	str	r3, [r7, #12]
}
 800ca68:	bf00      	nop
 800ca6a:	bf00      	nop
 800ca6c:	e7fd      	b.n	800ca6a <prvDeleteTCB+0x5e>
	}
 800ca6e:	bf00      	nop
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
	...

0800ca78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca7e:	4b0c      	ldr	r3, [pc, #48]	@ (800cab0 <prvResetNextTaskUnblockTime+0x38>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d104      	bne.n	800ca92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ca88:	4b0a      	ldr	r3, [pc, #40]	@ (800cab4 <prvResetNextTaskUnblockTime+0x3c>)
 800ca8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ca90:	e008      	b.n	800caa4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca92:	4b07      	ldr	r3, [pc, #28]	@ (800cab0 <prvResetNextTaskUnblockTime+0x38>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	4a04      	ldr	r2, [pc, #16]	@ (800cab4 <prvResetNextTaskUnblockTime+0x3c>)
 800caa2:	6013      	str	r3, [r2, #0]
}
 800caa4:	bf00      	nop
 800caa6:	370c      	adds	r7, #12
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr
 800cab0:	20005ae8 	.word	0x20005ae8
 800cab4:	20005b50 	.word	0x20005b50

0800cab8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cabe:	4b0b      	ldr	r3, [pc, #44]	@ (800caec <xTaskGetSchedulerState+0x34>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d102      	bne.n	800cacc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cac6:	2301      	movs	r3, #1
 800cac8:	607b      	str	r3, [r7, #4]
 800caca:	e008      	b.n	800cade <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cacc:	4b08      	ldr	r3, [pc, #32]	@ (800caf0 <xTaskGetSchedulerState+0x38>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d102      	bne.n	800cada <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cad4:	2302      	movs	r3, #2
 800cad6:	607b      	str	r3, [r7, #4]
 800cad8:	e001      	b.n	800cade <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cada:	2300      	movs	r3, #0
 800cadc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cade:	687b      	ldr	r3, [r7, #4]
	}
 800cae0:	4618      	mov	r0, r3
 800cae2:	370c      	adds	r7, #12
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr
 800caec:	20005b3c 	.word	0x20005b3c
 800caf0:	20005b58 	.word	0x20005b58

0800caf4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cb00:	2300      	movs	r3, #0
 800cb02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d051      	beq.n	800cbae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb0e:	4b2a      	ldr	r3, [pc, #168]	@ (800cbb8 <xTaskPriorityInherit+0xc4>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d241      	bcs.n	800cb9c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	699b      	ldr	r3, [r3, #24]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	db06      	blt.n	800cb2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb20:	4b25      	ldr	r3, [pc, #148]	@ (800cbb8 <xTaskPriorityInherit+0xc4>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb26:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	6959      	ldr	r1, [r3, #20]
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb36:	4613      	mov	r3, r2
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	4413      	add	r3, r2
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	4a1f      	ldr	r2, [pc, #124]	@ (800cbbc <xTaskPriorityInherit+0xc8>)
 800cb40:	4413      	add	r3, r2
 800cb42:	4299      	cmp	r1, r3
 800cb44:	d122      	bne.n	800cb8c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	3304      	adds	r3, #4
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7fe faac 	bl	800b0a8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cb50:	4b19      	ldr	r3, [pc, #100]	@ (800cbb8 <xTaskPriorityInherit+0xc4>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb5e:	4b18      	ldr	r3, [pc, #96]	@ (800cbc0 <xTaskPriorityInherit+0xcc>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d903      	bls.n	800cb6e <xTaskPriorityInherit+0x7a>
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb6a:	4a15      	ldr	r2, [pc, #84]	@ (800cbc0 <xTaskPriorityInherit+0xcc>)
 800cb6c:	6013      	str	r3, [r2, #0]
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb72:	4613      	mov	r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4413      	add	r3, r2
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	4a10      	ldr	r2, [pc, #64]	@ (800cbbc <xTaskPriorityInherit+0xc8>)
 800cb7c:	441a      	add	r2, r3
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	3304      	adds	r3, #4
 800cb82:	4619      	mov	r1, r3
 800cb84:	4610      	mov	r0, r2
 800cb86:	f7fe fa32 	bl	800afee <vListInsertEnd>
 800cb8a:	e004      	b.n	800cb96 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cb8c:	4b0a      	ldr	r3, [pc, #40]	@ (800cbb8 <xTaskPriorityInherit+0xc4>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cb96:	2301      	movs	r3, #1
 800cb98:	60fb      	str	r3, [r7, #12]
 800cb9a:	e008      	b.n	800cbae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cba0:	4b05      	ldr	r3, [pc, #20]	@ (800cbb8 <xTaskPriorityInherit+0xc4>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d201      	bcs.n	800cbae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cbae:	68fb      	ldr	r3, [r7, #12]
	}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	2000565c 	.word	0x2000565c
 800cbbc:	20005660 	.word	0x20005660
 800cbc0:	20005b38 	.word	0x20005b38

0800cbc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b086      	sub	sp, #24
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d058      	beq.n	800cc8c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cbda:	4b2f      	ldr	r3, [pc, #188]	@ (800cc98 <xTaskPriorityDisinherit+0xd4>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	693a      	ldr	r2, [r7, #16]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d00b      	beq.n	800cbfc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cbe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbe8:	f383 8811 	msr	BASEPRI, r3
 800cbec:	f3bf 8f6f 	isb	sy
 800cbf0:	f3bf 8f4f 	dsb	sy
 800cbf4:	60fb      	str	r3, [r7, #12]
}
 800cbf6:	bf00      	nop
 800cbf8:	bf00      	nop
 800cbfa:	e7fd      	b.n	800cbf8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d10b      	bne.n	800cc1c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800cc04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc08:	f383 8811 	msr	BASEPRI, r3
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	f3bf 8f4f 	dsb	sy
 800cc14:	60bb      	str	r3, [r7, #8]
}
 800cc16:	bf00      	nop
 800cc18:	bf00      	nop
 800cc1a:	e7fd      	b.n	800cc18 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc20:	1e5a      	subs	r2, r3, #1
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cc26:	693b      	ldr	r3, [r7, #16]
 800cc28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d02c      	beq.n	800cc8c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d128      	bne.n	800cc8c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	3304      	adds	r3, #4
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7fe fa32 	bl	800b0a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc5c:	4b0f      	ldr	r3, [pc, #60]	@ (800cc9c <xTaskPriorityDisinherit+0xd8>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d903      	bls.n	800cc6c <xTaskPriorityDisinherit+0xa8>
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc68:	4a0c      	ldr	r2, [pc, #48]	@ (800cc9c <xTaskPriorityDisinherit+0xd8>)
 800cc6a:	6013      	str	r3, [r2, #0]
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc70:	4613      	mov	r3, r2
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	4413      	add	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4a09      	ldr	r2, [pc, #36]	@ (800cca0 <xTaskPriorityDisinherit+0xdc>)
 800cc7a:	441a      	add	r2, r3
 800cc7c:	693b      	ldr	r3, [r7, #16]
 800cc7e:	3304      	adds	r3, #4
 800cc80:	4619      	mov	r1, r3
 800cc82:	4610      	mov	r0, r2
 800cc84:	f7fe f9b3 	bl	800afee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc8c:	697b      	ldr	r3, [r7, #20]
	}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3718      	adds	r7, #24
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	2000565c 	.word	0x2000565c
 800cc9c:	20005b38 	.word	0x20005b38
 800cca0:	20005660 	.word	0x20005660

0800cca4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b088      	sub	sp, #32
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d06c      	beq.n	800cd96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ccbc:	69bb      	ldr	r3, [r7, #24]
 800ccbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10b      	bne.n	800ccdc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ccc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	60fb      	str	r3, [r7, #12]
}
 800ccd6:	bf00      	nop
 800ccd8:	bf00      	nop
 800ccda:	e7fd      	b.n	800ccd8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cce0:	683a      	ldr	r2, [r7, #0]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d902      	bls.n	800ccec <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	61fb      	str	r3, [r7, #28]
 800ccea:	e002      	b.n	800ccf2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ccec:	69bb      	ldr	r3, [r7, #24]
 800ccee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ccf0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccf6:	69fa      	ldr	r2, [r7, #28]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d04c      	beq.n	800cd96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd00:	697a      	ldr	r2, [r7, #20]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d147      	bne.n	800cd96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cd06:	4b26      	ldr	r3, [pc, #152]	@ (800cda0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	69ba      	ldr	r2, [r7, #24]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d10b      	bne.n	800cd28 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	60bb      	str	r3, [r7, #8]
}
 800cd22:	bf00      	nop
 800cd24:	bf00      	nop
 800cd26:	e7fd      	b.n	800cd24 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd2c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cd2e:	69bb      	ldr	r3, [r7, #24]
 800cd30:	69fa      	ldr	r2, [r7, #28]
 800cd32:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd34:	69bb      	ldr	r3, [r7, #24]
 800cd36:	699b      	ldr	r3, [r3, #24]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	db04      	blt.n	800cd46 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd3c:	69fb      	ldr	r3, [r7, #28]
 800cd3e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cd42:	69bb      	ldr	r3, [r7, #24]
 800cd44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cd46:	69bb      	ldr	r3, [r7, #24]
 800cd48:	6959      	ldr	r1, [r3, #20]
 800cd4a:	693a      	ldr	r2, [r7, #16]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	4413      	add	r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	4a13      	ldr	r2, [pc, #76]	@ (800cda4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cd56:	4413      	add	r3, r2
 800cd58:	4299      	cmp	r1, r3
 800cd5a:	d11c      	bne.n	800cd96 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd5c:	69bb      	ldr	r3, [r7, #24]
 800cd5e:	3304      	adds	r3, #4
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7fe f9a1 	bl	800b0a8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cd66:	69bb      	ldr	r3, [r7, #24]
 800cd68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd6a:	4b0f      	ldr	r3, [pc, #60]	@ (800cda8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d903      	bls.n	800cd7a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd76:	4a0c      	ldr	r2, [pc, #48]	@ (800cda8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cd78:	6013      	str	r3, [r2, #0]
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd7e:	4613      	mov	r3, r2
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	4413      	add	r3, r2
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	4a07      	ldr	r2, [pc, #28]	@ (800cda4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cd88:	441a      	add	r2, r3
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	3304      	adds	r3, #4
 800cd8e:	4619      	mov	r1, r3
 800cd90:	4610      	mov	r0, r2
 800cd92:	f7fe f92c 	bl	800afee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd96:	bf00      	nop
 800cd98:	3720      	adds	r7, #32
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	2000565c 	.word	0x2000565c
 800cda4:	20005660 	.word	0x20005660
 800cda8:	20005b38 	.word	0x20005b38

0800cdac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cdac:	b480      	push	{r7}
 800cdae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cdb0:	4b07      	ldr	r3, [pc, #28]	@ (800cdd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d004      	beq.n	800cdc2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cdb8:	4b05      	ldr	r3, [pc, #20]	@ (800cdd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cdbe:	3201      	adds	r2, #1
 800cdc0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800cdc2:	4b03      	ldr	r3, [pc, #12]	@ (800cdd0 <pvTaskIncrementMutexHeldCount+0x24>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
	}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr
 800cdd0:	2000565c 	.word	0x2000565c

0800cdd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cdde:	4b21      	ldr	r3, [pc, #132]	@ (800ce64 <prvAddCurrentTaskToDelayedList+0x90>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cde4:	4b20      	ldr	r3, [pc, #128]	@ (800ce68 <prvAddCurrentTaskToDelayedList+0x94>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	3304      	adds	r3, #4
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fe f95c 	bl	800b0a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cdf6:	d10a      	bne.n	800ce0e <prvAddCurrentTaskToDelayedList+0x3a>
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d007      	beq.n	800ce0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cdfe:	4b1a      	ldr	r3, [pc, #104]	@ (800ce68 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	3304      	adds	r3, #4
 800ce04:	4619      	mov	r1, r3
 800ce06:	4819      	ldr	r0, [pc, #100]	@ (800ce6c <prvAddCurrentTaskToDelayedList+0x98>)
 800ce08:	f7fe f8f1 	bl	800afee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ce0c:	e026      	b.n	800ce5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ce0e:	68fa      	ldr	r2, [r7, #12]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4413      	add	r3, r2
 800ce14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ce16:	4b14      	ldr	r3, [pc, #80]	@ (800ce68 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	68ba      	ldr	r2, [r7, #8]
 800ce1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ce1e:	68ba      	ldr	r2, [r7, #8]
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	429a      	cmp	r2, r3
 800ce24:	d209      	bcs.n	800ce3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce26:	4b12      	ldr	r3, [pc, #72]	@ (800ce70 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ce68 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	3304      	adds	r3, #4
 800ce30:	4619      	mov	r1, r3
 800ce32:	4610      	mov	r0, r2
 800ce34:	f7fe f8ff 	bl	800b036 <vListInsert>
}
 800ce38:	e010      	b.n	800ce5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce3a:	4b0e      	ldr	r3, [pc, #56]	@ (800ce74 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	4b0a      	ldr	r3, [pc, #40]	@ (800ce68 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	3304      	adds	r3, #4
 800ce44:	4619      	mov	r1, r3
 800ce46:	4610      	mov	r0, r2
 800ce48:	f7fe f8f5 	bl	800b036 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ce4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ce78 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	68ba      	ldr	r2, [r7, #8]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d202      	bcs.n	800ce5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ce56:	4a08      	ldr	r2, [pc, #32]	@ (800ce78 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	6013      	str	r3, [r2, #0]
}
 800ce5c:	bf00      	nop
 800ce5e:	3710      	adds	r7, #16
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	20005b34 	.word	0x20005b34
 800ce68:	2000565c 	.word	0x2000565c
 800ce6c:	20005b1c 	.word	0x20005b1c
 800ce70:	20005aec 	.word	0x20005aec
 800ce74:	20005ae8 	.word	0x20005ae8
 800ce78:	20005b50 	.word	0x20005b50

0800ce7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b08a      	sub	sp, #40	@ 0x28
 800ce80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ce82:	2300      	movs	r3, #0
 800ce84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ce86:	f000 fb13 	bl	800d4b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ce8a:	4b1d      	ldr	r3, [pc, #116]	@ (800cf00 <xTimerCreateTimerTask+0x84>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d021      	beq.n	800ced6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ce92:	2300      	movs	r3, #0
 800ce94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ce96:	2300      	movs	r3, #0
 800ce98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ce9a:	1d3a      	adds	r2, r7, #4
 800ce9c:	f107 0108 	add.w	r1, r7, #8
 800cea0:	f107 030c 	add.w	r3, r7, #12
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7fe f85b 	bl	800af60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ceaa:	6879      	ldr	r1, [r7, #4]
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	9202      	str	r2, [sp, #8]
 800ceb2:	9301      	str	r3, [sp, #4]
 800ceb4:	2302      	movs	r3, #2
 800ceb6:	9300      	str	r3, [sp, #0]
 800ceb8:	2300      	movs	r3, #0
 800ceba:	460a      	mov	r2, r1
 800cebc:	4911      	ldr	r1, [pc, #68]	@ (800cf04 <xTimerCreateTimerTask+0x88>)
 800cebe:	4812      	ldr	r0, [pc, #72]	@ (800cf08 <xTimerCreateTimerTask+0x8c>)
 800cec0:	f7fe ff7a 	bl	800bdb8 <xTaskCreateStatic>
 800cec4:	4603      	mov	r3, r0
 800cec6:	4a11      	ldr	r2, [pc, #68]	@ (800cf0c <xTimerCreateTimerTask+0x90>)
 800cec8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ceca:	4b10      	ldr	r3, [pc, #64]	@ (800cf0c <xTimerCreateTimerTask+0x90>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d001      	beq.n	800ced6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ced2:	2301      	movs	r3, #1
 800ced4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d10b      	bne.n	800cef4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800cedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cee0:	f383 8811 	msr	BASEPRI, r3
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	613b      	str	r3, [r7, #16]
}
 800ceee:	bf00      	nop
 800cef0:	bf00      	nop
 800cef2:	e7fd      	b.n	800cef0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cef4:	697b      	ldr	r3, [r7, #20]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3718      	adds	r7, #24
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
 800cefe:	bf00      	nop
 800cf00:	20005b8c 	.word	0x20005b8c
 800cf04:	0801de18 	.word	0x0801de18
 800cf08:	0800d049 	.word	0x0800d049
 800cf0c:	20005b90 	.word	0x20005b90

0800cf10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b08a      	sub	sp, #40	@ 0x28
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	607a      	str	r2, [r7, #4]
 800cf1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d10b      	bne.n	800cf40 <xTimerGenericCommand+0x30>
	__asm volatile
 800cf28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf2c:	f383 8811 	msr	BASEPRI, r3
 800cf30:	f3bf 8f6f 	isb	sy
 800cf34:	f3bf 8f4f 	dsb	sy
 800cf38:	623b      	str	r3, [r7, #32]
}
 800cf3a:	bf00      	nop
 800cf3c:	bf00      	nop
 800cf3e:	e7fd      	b.n	800cf3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cf40:	4b19      	ldr	r3, [pc, #100]	@ (800cfa8 <xTimerGenericCommand+0x98>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d02a      	beq.n	800cf9e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	2b05      	cmp	r3, #5
 800cf58:	dc18      	bgt.n	800cf8c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cf5a:	f7ff fdad 	bl	800cab8 <xTaskGetSchedulerState>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	2b02      	cmp	r3, #2
 800cf62:	d109      	bne.n	800cf78 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cf64:	4b10      	ldr	r3, [pc, #64]	@ (800cfa8 <xTimerGenericCommand+0x98>)
 800cf66:	6818      	ldr	r0, [r3, #0]
 800cf68:	f107 0110 	add.w	r1, r7, #16
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf70:	f7fe fa0a 	bl	800b388 <xQueueGenericSend>
 800cf74:	6278      	str	r0, [r7, #36]	@ 0x24
 800cf76:	e012      	b.n	800cf9e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cf78:	4b0b      	ldr	r3, [pc, #44]	@ (800cfa8 <xTimerGenericCommand+0x98>)
 800cf7a:	6818      	ldr	r0, [r3, #0]
 800cf7c:	f107 0110 	add.w	r1, r7, #16
 800cf80:	2300      	movs	r3, #0
 800cf82:	2200      	movs	r2, #0
 800cf84:	f7fe fa00 	bl	800b388 <xQueueGenericSend>
 800cf88:	6278      	str	r0, [r7, #36]	@ 0x24
 800cf8a:	e008      	b.n	800cf9e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cf8c:	4b06      	ldr	r3, [pc, #24]	@ (800cfa8 <xTimerGenericCommand+0x98>)
 800cf8e:	6818      	ldr	r0, [r3, #0]
 800cf90:	f107 0110 	add.w	r1, r7, #16
 800cf94:	2300      	movs	r3, #0
 800cf96:	683a      	ldr	r2, [r7, #0]
 800cf98:	f7fe faf8 	bl	800b58c <xQueueGenericSendFromISR>
 800cf9c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cf9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3728      	adds	r7, #40	@ 0x28
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}
 800cfa8:	20005b8c 	.word	0x20005b8c

0800cfac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b088      	sub	sp, #32
 800cfb0:	af02      	add	r7, sp, #8
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfb6:	4b23      	ldr	r3, [pc, #140]	@ (800d044 <prvProcessExpiredTimer+0x98>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	68db      	ldr	r3, [r3, #12]
 800cfbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	3304      	adds	r3, #4
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7fe f86f 	bl	800b0a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cfd0:	f003 0304 	and.w	r3, r3, #4
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d023      	beq.n	800d020 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	699a      	ldr	r2, [r3, #24]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	18d1      	adds	r1, r2, r3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	683a      	ldr	r2, [r7, #0]
 800cfe4:	6978      	ldr	r0, [r7, #20]
 800cfe6:	f000 f8d5 	bl	800d194 <prvInsertTimerInActiveList>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d020      	beq.n	800d032 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cff0:	2300      	movs	r3, #0
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	2300      	movs	r3, #0
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	2100      	movs	r1, #0
 800cffa:	6978      	ldr	r0, [r7, #20]
 800cffc:	f7ff ff88 	bl	800cf10 <xTimerGenericCommand>
 800d000:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d114      	bne.n	800d032 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d00c:	f383 8811 	msr	BASEPRI, r3
 800d010:	f3bf 8f6f 	isb	sy
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	60fb      	str	r3, [r7, #12]
}
 800d01a:	bf00      	nop
 800d01c:	bf00      	nop
 800d01e:	e7fd      	b.n	800d01c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d020:	697b      	ldr	r3, [r7, #20]
 800d022:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d026:	f023 0301 	bic.w	r3, r3, #1
 800d02a:	b2da      	uxtb	r2, r3
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	6a1b      	ldr	r3, [r3, #32]
 800d036:	6978      	ldr	r0, [r7, #20]
 800d038:	4798      	blx	r3
}
 800d03a:	bf00      	nop
 800d03c:	3718      	adds	r7, #24
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	20005b84 	.word	0x20005b84

0800d048 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d050:	f107 0308 	add.w	r3, r7, #8
 800d054:	4618      	mov	r0, r3
 800d056:	f000 f859 	bl	800d10c <prvGetNextExpireTime>
 800d05a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	4619      	mov	r1, r3
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f000 f805 	bl	800d070 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d066:	f000 f8d7 	bl	800d218 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d06a:	bf00      	nop
 800d06c:	e7f0      	b.n	800d050 <prvTimerTask+0x8>
	...

0800d070 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d07a:	f7ff f901 	bl	800c280 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d07e:	f107 0308 	add.w	r3, r7, #8
 800d082:	4618      	mov	r0, r3
 800d084:	f000 f866 	bl	800d154 <prvSampleTimeNow>
 800d088:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d130      	bne.n	800d0f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d10a      	bne.n	800d0ac <prvProcessTimerOrBlockTask+0x3c>
 800d096:	687a      	ldr	r2, [r7, #4]
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d806      	bhi.n	800d0ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d09e:	f7ff f8fd 	bl	800c29c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d0a2:	68f9      	ldr	r1, [r7, #12]
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f7ff ff81 	bl	800cfac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d0aa:	e024      	b.n	800d0f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d008      	beq.n	800d0c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d0b2:	4b13      	ldr	r3, [pc, #76]	@ (800d100 <prvProcessTimerOrBlockTask+0x90>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d101      	bne.n	800d0c0 <prvProcessTimerOrBlockTask+0x50>
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e000      	b.n	800d0c2 <prvProcessTimerOrBlockTask+0x52>
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d0c4:	4b0f      	ldr	r3, [pc, #60]	@ (800d104 <prvProcessTimerOrBlockTask+0x94>)
 800d0c6:	6818      	ldr	r0, [r3, #0]
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	1ad3      	subs	r3, r2, r3
 800d0ce:	683a      	ldr	r2, [r7, #0]
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	f7fe fe3d 	bl	800bd50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d0d6:	f7ff f8e1 	bl	800c29c <xTaskResumeAll>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d10a      	bne.n	800d0f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d0e0:	4b09      	ldr	r3, [pc, #36]	@ (800d108 <prvProcessTimerOrBlockTask+0x98>)
 800d0e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0e6:	601a      	str	r2, [r3, #0]
 800d0e8:	f3bf 8f4f 	dsb	sy
 800d0ec:	f3bf 8f6f 	isb	sy
}
 800d0f0:	e001      	b.n	800d0f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d0f2:	f7ff f8d3 	bl	800c29c <xTaskResumeAll>
}
 800d0f6:	bf00      	nop
 800d0f8:	3710      	adds	r7, #16
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	20005b88 	.word	0x20005b88
 800d104:	20005b8c 	.word	0x20005b8c
 800d108:	e000ed04 	.word	0xe000ed04

0800d10c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d10c:	b480      	push	{r7}
 800d10e:	b085      	sub	sp, #20
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d114:	4b0e      	ldr	r3, [pc, #56]	@ (800d150 <prvGetNextExpireTime+0x44>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d101      	bne.n	800d122 <prvGetNextExpireTime+0x16>
 800d11e:	2201      	movs	r2, #1
 800d120:	e000      	b.n	800d124 <prvGetNextExpireTime+0x18>
 800d122:	2200      	movs	r2, #0
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d105      	bne.n	800d13c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d130:	4b07      	ldr	r3, [pc, #28]	@ (800d150 <prvGetNextExpireTime+0x44>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	60fb      	str	r3, [r7, #12]
 800d13a:	e001      	b.n	800d140 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d13c:	2300      	movs	r3, #0
 800d13e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d140:	68fb      	ldr	r3, [r7, #12]
}
 800d142:	4618      	mov	r0, r3
 800d144:	3714      	adds	r7, #20
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop
 800d150:	20005b84 	.word	0x20005b84

0800d154 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d15c:	f7ff f93c 	bl	800c3d8 <xTaskGetTickCount>
 800d160:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d162:	4b0b      	ldr	r3, [pc, #44]	@ (800d190 <prvSampleTimeNow+0x3c>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	68fa      	ldr	r2, [r7, #12]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d205      	bcs.n	800d178 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d16c:	f000 f93a 	bl	800d3e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2201      	movs	r2, #1
 800d174:	601a      	str	r2, [r3, #0]
 800d176:	e002      	b.n	800d17e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d17e:	4a04      	ldr	r2, [pc, #16]	@ (800d190 <prvSampleTimeNow+0x3c>)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d184:	68fb      	ldr	r3, [r7, #12]
}
 800d186:	4618      	mov	r0, r3
 800d188:	3710      	adds	r7, #16
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	20005b94 	.word	0x20005b94

0800d194 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b086      	sub	sp, #24
 800d198:	af00      	add	r7, sp, #0
 800d19a:	60f8      	str	r0, [r7, #12]
 800d19c:	60b9      	str	r1, [r7, #8]
 800d19e:	607a      	str	r2, [r7, #4]
 800d1a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	68ba      	ldr	r2, [r7, #8]
 800d1aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	68fa      	ldr	r2, [r7, #12]
 800d1b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d1b2:	68ba      	ldr	r2, [r7, #8]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d812      	bhi.n	800d1e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	1ad2      	subs	r2, r2, r3
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	699b      	ldr	r3, [r3, #24]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	d302      	bcc.n	800d1ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	617b      	str	r3, [r7, #20]
 800d1cc:	e01b      	b.n	800d206 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d1ce:	4b10      	ldr	r3, [pc, #64]	@ (800d210 <prvInsertTimerInActiveList+0x7c>)
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	3304      	adds	r3, #4
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	4610      	mov	r0, r2
 800d1da:	f7fd ff2c 	bl	800b036 <vListInsert>
 800d1de:	e012      	b.n	800d206 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d206      	bcs.n	800d1f6 <prvInsertTimerInActiveList+0x62>
 800d1e8:	68ba      	ldr	r2, [r7, #8]
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d302      	bcc.n	800d1f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	617b      	str	r3, [r7, #20]
 800d1f4:	e007      	b.n	800d206 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d1f6:	4b07      	ldr	r3, [pc, #28]	@ (800d214 <prvInsertTimerInActiveList+0x80>)
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	3304      	adds	r3, #4
 800d1fe:	4619      	mov	r1, r3
 800d200:	4610      	mov	r0, r2
 800d202:	f7fd ff18 	bl	800b036 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d206:	697b      	ldr	r3, [r7, #20]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3718      	adds	r7, #24
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}
 800d210:	20005b88 	.word	0x20005b88
 800d214:	20005b84 	.word	0x20005b84

0800d218 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b08e      	sub	sp, #56	@ 0x38
 800d21c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d21e:	e0ce      	b.n	800d3be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2b00      	cmp	r3, #0
 800d224:	da19      	bge.n	800d25a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d226:	1d3b      	adds	r3, r7, #4
 800d228:	3304      	adds	r3, #4
 800d22a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d10b      	bne.n	800d24a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d236:	f383 8811 	msr	BASEPRI, r3
 800d23a:	f3bf 8f6f 	isb	sy
 800d23e:	f3bf 8f4f 	dsb	sy
 800d242:	61fb      	str	r3, [r7, #28]
}
 800d244:	bf00      	nop
 800d246:	bf00      	nop
 800d248:	e7fd      	b.n	800d246 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d250:	6850      	ldr	r0, [r2, #4]
 800d252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d254:	6892      	ldr	r2, [r2, #8]
 800d256:	4611      	mov	r1, r2
 800d258:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f2c0 80ae 	blt.w	800d3be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d268:	695b      	ldr	r3, [r3, #20]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d004      	beq.n	800d278 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d270:	3304      	adds	r3, #4
 800d272:	4618      	mov	r0, r3
 800d274:	f7fd ff18 	bl	800b0a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d278:	463b      	mov	r3, r7
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7ff ff6a 	bl	800d154 <prvSampleTimeNow>
 800d280:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2b09      	cmp	r3, #9
 800d286:	f200 8097 	bhi.w	800d3b8 <prvProcessReceivedCommands+0x1a0>
 800d28a:	a201      	add	r2, pc, #4	@ (adr r2, 800d290 <prvProcessReceivedCommands+0x78>)
 800d28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d290:	0800d2b9 	.word	0x0800d2b9
 800d294:	0800d2b9 	.word	0x0800d2b9
 800d298:	0800d2b9 	.word	0x0800d2b9
 800d29c:	0800d32f 	.word	0x0800d32f
 800d2a0:	0800d343 	.word	0x0800d343
 800d2a4:	0800d38f 	.word	0x0800d38f
 800d2a8:	0800d2b9 	.word	0x0800d2b9
 800d2ac:	0800d2b9 	.word	0x0800d2b9
 800d2b0:	0800d32f 	.word	0x0800d32f
 800d2b4:	0800d343 	.word	0x0800d343
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d2be:	f043 0301 	orr.w	r3, r3, #1
 800d2c2:	b2da      	uxtb	r2, r3
 800d2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d2ca:	68ba      	ldr	r2, [r7, #8]
 800d2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ce:	699b      	ldr	r3, [r3, #24]
 800d2d0:	18d1      	adds	r1, r2, r3
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2d8:	f7ff ff5c 	bl	800d194 <prvInsertTimerInActiveList>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d06c      	beq.n	800d3bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2e4:	6a1b      	ldr	r3, [r3, #32]
 800d2e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d2e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d2f0:	f003 0304 	and.w	r3, r3, #4
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d061      	beq.n	800d3bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d2f8:	68ba      	ldr	r2, [r7, #8]
 800d2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2fc:	699b      	ldr	r3, [r3, #24]
 800d2fe:	441a      	add	r2, r3
 800d300:	2300      	movs	r3, #0
 800d302:	9300      	str	r3, [sp, #0]
 800d304:	2300      	movs	r3, #0
 800d306:	2100      	movs	r1, #0
 800d308:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d30a:	f7ff fe01 	bl	800cf10 <xTimerGenericCommand>
 800d30e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d310:	6a3b      	ldr	r3, [r7, #32]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d152      	bne.n	800d3bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d31a:	f383 8811 	msr	BASEPRI, r3
 800d31e:	f3bf 8f6f 	isb	sy
 800d322:	f3bf 8f4f 	dsb	sy
 800d326:	61bb      	str	r3, [r7, #24]
}
 800d328:	bf00      	nop
 800d32a:	bf00      	nop
 800d32c:	e7fd      	b.n	800d32a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d334:	f023 0301 	bic.w	r3, r3, #1
 800d338:	b2da      	uxtb	r2, r3
 800d33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d33c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d340:	e03d      	b.n	800d3be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d348:	f043 0301 	orr.w	r3, r3, #1
 800d34c:	b2da      	uxtb	r2, r3
 800d34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d350:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d354:	68ba      	ldr	r2, [r7, #8]
 800d356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d358:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d35c:	699b      	ldr	r3, [r3, #24]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d10b      	bne.n	800d37a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d366:	f383 8811 	msr	BASEPRI, r3
 800d36a:	f3bf 8f6f 	isb	sy
 800d36e:	f3bf 8f4f 	dsb	sy
 800d372:	617b      	str	r3, [r7, #20]
}
 800d374:	bf00      	nop
 800d376:	bf00      	nop
 800d378:	e7fd      	b.n	800d376 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d37c:	699a      	ldr	r2, [r3, #24]
 800d37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d380:	18d1      	adds	r1, r2, r3
 800d382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d386:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d388:	f7ff ff04 	bl	800d194 <prvInsertTimerInActiveList>
					break;
 800d38c:	e017      	b.n	800d3be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d394:	f003 0302 	and.w	r3, r3, #2
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d103      	bne.n	800d3a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d39c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d39e:	f000 fbeb 	bl	800db78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d3a2:	e00c      	b.n	800d3be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d3aa:	f023 0301 	bic.w	r3, r3, #1
 800d3ae:	b2da      	uxtb	r2, r3
 800d3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d3b6:	e002      	b.n	800d3be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d3b8:	bf00      	nop
 800d3ba:	e000      	b.n	800d3be <prvProcessReceivedCommands+0x1a6>
					break;
 800d3bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d3be:	4b08      	ldr	r3, [pc, #32]	@ (800d3e0 <prvProcessReceivedCommands+0x1c8>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	1d39      	adds	r1, r7, #4
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7fe f97e 	bl	800b6c8 <xQueueReceive>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f47f af26 	bne.w	800d220 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d3d4:	bf00      	nop
 800d3d6:	bf00      	nop
 800d3d8:	3730      	adds	r7, #48	@ 0x30
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	20005b8c 	.word	0x20005b8c

0800d3e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b088      	sub	sp, #32
 800d3e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d3ea:	e049      	b.n	800d480 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d3ec:	4b2e      	ldr	r3, [pc, #184]	@ (800d4a8 <prvSwitchTimerLists+0xc4>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	68db      	ldr	r3, [r3, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3f6:	4b2c      	ldr	r3, [pc, #176]	@ (800d4a8 <prvSwitchTimerLists+0xc4>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	3304      	adds	r3, #4
 800d404:	4618      	mov	r0, r3
 800d406:	f7fd fe4f 	bl	800b0a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	6a1b      	ldr	r3, [r3, #32]
 800d40e:	68f8      	ldr	r0, [r7, #12]
 800d410:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d418:	f003 0304 	and.w	r3, r3, #4
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d02f      	beq.n	800d480 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	699b      	ldr	r3, [r3, #24]
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	4413      	add	r3, r2
 800d428:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d42a:	68ba      	ldr	r2, [r7, #8]
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d90e      	bls.n	800d450 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	68ba      	ldr	r2, [r7, #8]
 800d436:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	68fa      	ldr	r2, [r7, #12]
 800d43c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d43e:	4b1a      	ldr	r3, [pc, #104]	@ (800d4a8 <prvSwitchTimerLists+0xc4>)
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	3304      	adds	r3, #4
 800d446:	4619      	mov	r1, r3
 800d448:	4610      	mov	r0, r2
 800d44a:	f7fd fdf4 	bl	800b036 <vListInsert>
 800d44e:	e017      	b.n	800d480 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d450:	2300      	movs	r3, #0
 800d452:	9300      	str	r3, [sp, #0]
 800d454:	2300      	movs	r3, #0
 800d456:	693a      	ldr	r2, [r7, #16]
 800d458:	2100      	movs	r1, #0
 800d45a:	68f8      	ldr	r0, [r7, #12]
 800d45c:	f7ff fd58 	bl	800cf10 <xTimerGenericCommand>
 800d460:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d10b      	bne.n	800d480 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	603b      	str	r3, [r7, #0]
}
 800d47a:	bf00      	nop
 800d47c:	bf00      	nop
 800d47e:	e7fd      	b.n	800d47c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d480:	4b09      	ldr	r3, [pc, #36]	@ (800d4a8 <prvSwitchTimerLists+0xc4>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d1b0      	bne.n	800d3ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d48a:	4b07      	ldr	r3, [pc, #28]	@ (800d4a8 <prvSwitchTimerLists+0xc4>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d490:	4b06      	ldr	r3, [pc, #24]	@ (800d4ac <prvSwitchTimerLists+0xc8>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4a04      	ldr	r2, [pc, #16]	@ (800d4a8 <prvSwitchTimerLists+0xc4>)
 800d496:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d498:	4a04      	ldr	r2, [pc, #16]	@ (800d4ac <prvSwitchTimerLists+0xc8>)
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	6013      	str	r3, [r2, #0]
}
 800d49e:	bf00      	nop
 800d4a0:	3718      	adds	r7, #24
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	20005b84 	.word	0x20005b84
 800d4ac:	20005b88 	.word	0x20005b88

0800d4b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d4b6:	f000 f96f 	bl	800d798 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d4ba:	4b15      	ldr	r3, [pc, #84]	@ (800d510 <prvCheckForValidListAndQueue+0x60>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d120      	bne.n	800d504 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d4c2:	4814      	ldr	r0, [pc, #80]	@ (800d514 <prvCheckForValidListAndQueue+0x64>)
 800d4c4:	f7fd fd66 	bl	800af94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d4c8:	4813      	ldr	r0, [pc, #76]	@ (800d518 <prvCheckForValidListAndQueue+0x68>)
 800d4ca:	f7fd fd63 	bl	800af94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d4ce:	4b13      	ldr	r3, [pc, #76]	@ (800d51c <prvCheckForValidListAndQueue+0x6c>)
 800d4d0:	4a10      	ldr	r2, [pc, #64]	@ (800d514 <prvCheckForValidListAndQueue+0x64>)
 800d4d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d4d4:	4b12      	ldr	r3, [pc, #72]	@ (800d520 <prvCheckForValidListAndQueue+0x70>)
 800d4d6:	4a10      	ldr	r2, [pc, #64]	@ (800d518 <prvCheckForValidListAndQueue+0x68>)
 800d4d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d4da:	2300      	movs	r3, #0
 800d4dc:	9300      	str	r3, [sp, #0]
 800d4de:	4b11      	ldr	r3, [pc, #68]	@ (800d524 <prvCheckForValidListAndQueue+0x74>)
 800d4e0:	4a11      	ldr	r2, [pc, #68]	@ (800d528 <prvCheckForValidListAndQueue+0x78>)
 800d4e2:	2110      	movs	r1, #16
 800d4e4:	200a      	movs	r0, #10
 800d4e6:	f7fd fe73 	bl	800b1d0 <xQueueGenericCreateStatic>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	4a08      	ldr	r2, [pc, #32]	@ (800d510 <prvCheckForValidListAndQueue+0x60>)
 800d4ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d4f0:	4b07      	ldr	r3, [pc, #28]	@ (800d510 <prvCheckForValidListAndQueue+0x60>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d005      	beq.n	800d504 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d4f8:	4b05      	ldr	r3, [pc, #20]	@ (800d510 <prvCheckForValidListAndQueue+0x60>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	490b      	ldr	r1, [pc, #44]	@ (800d52c <prvCheckForValidListAndQueue+0x7c>)
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fe fbfc 	bl	800bcfc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d504:	f000 f97a 	bl	800d7fc <vPortExitCritical>
}
 800d508:	bf00      	nop
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	20005b8c 	.word	0x20005b8c
 800d514:	20005b5c 	.word	0x20005b5c
 800d518:	20005b70 	.word	0x20005b70
 800d51c:	20005b84 	.word	0x20005b84
 800d520:	20005b88 	.word	0x20005b88
 800d524:	20005c38 	.word	0x20005c38
 800d528:	20005b98 	.word	0x20005b98
 800d52c:	0801de20 	.word	0x0801de20

0800d530 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d530:	b480      	push	{r7}
 800d532:	b085      	sub	sp, #20
 800d534:	af00      	add	r7, sp, #0
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	60b9      	str	r1, [r7, #8]
 800d53a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	3b04      	subs	r3, #4
 800d540:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	3b04      	subs	r3, #4
 800d54e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	f023 0201 	bic.w	r2, r3, #1
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	3b04      	subs	r3, #4
 800d55e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d560:	4a0c      	ldr	r2, [pc, #48]	@ (800d594 <pxPortInitialiseStack+0x64>)
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	3b14      	subs	r3, #20
 800d56a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	3b04      	subs	r3, #4
 800d576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f06f 0202 	mvn.w	r2, #2
 800d57e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	3b20      	subs	r3, #32
 800d584:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d586:	68fb      	ldr	r3, [r7, #12]
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3714      	adds	r7, #20
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr
 800d594:	0800d599 	.word	0x0800d599

0800d598 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d598:	b480      	push	{r7}
 800d59a:	b085      	sub	sp, #20
 800d59c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d5a2:	4b13      	ldr	r3, [pc, #76]	@ (800d5f0 <prvTaskExitError+0x58>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d5aa:	d00b      	beq.n	800d5c4 <prvTaskExitError+0x2c>
	__asm volatile
 800d5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b0:	f383 8811 	msr	BASEPRI, r3
 800d5b4:	f3bf 8f6f 	isb	sy
 800d5b8:	f3bf 8f4f 	dsb	sy
 800d5bc:	60fb      	str	r3, [r7, #12]
}
 800d5be:	bf00      	nop
 800d5c0:	bf00      	nop
 800d5c2:	e7fd      	b.n	800d5c0 <prvTaskExitError+0x28>
	__asm volatile
 800d5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c8:	f383 8811 	msr	BASEPRI, r3
 800d5cc:	f3bf 8f6f 	isb	sy
 800d5d0:	f3bf 8f4f 	dsb	sy
 800d5d4:	60bb      	str	r3, [r7, #8]
}
 800d5d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d5d8:	bf00      	nop
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d0fc      	beq.n	800d5da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d5e0:	bf00      	nop
 800d5e2:	bf00      	nop
 800d5e4:	3714      	adds	r7, #20
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr
 800d5ee:	bf00      	nop
 800d5f0:	20000024 	.word	0x20000024
	...

0800d600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d600:	4b07      	ldr	r3, [pc, #28]	@ (800d620 <pxCurrentTCBConst2>)
 800d602:	6819      	ldr	r1, [r3, #0]
 800d604:	6808      	ldr	r0, [r1, #0]
 800d606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d60a:	f380 8809 	msr	PSP, r0
 800d60e:	f3bf 8f6f 	isb	sy
 800d612:	f04f 0000 	mov.w	r0, #0
 800d616:	f380 8811 	msr	BASEPRI, r0
 800d61a:	4770      	bx	lr
 800d61c:	f3af 8000 	nop.w

0800d620 <pxCurrentTCBConst2>:
 800d620:	2000565c 	.word	0x2000565c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d624:	bf00      	nop
 800d626:	bf00      	nop

0800d628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d628:	4808      	ldr	r0, [pc, #32]	@ (800d64c <prvPortStartFirstTask+0x24>)
 800d62a:	6800      	ldr	r0, [r0, #0]
 800d62c:	6800      	ldr	r0, [r0, #0]
 800d62e:	f380 8808 	msr	MSP, r0
 800d632:	f04f 0000 	mov.w	r0, #0
 800d636:	f380 8814 	msr	CONTROL, r0
 800d63a:	b662      	cpsie	i
 800d63c:	b661      	cpsie	f
 800d63e:	f3bf 8f4f 	dsb	sy
 800d642:	f3bf 8f6f 	isb	sy
 800d646:	df00      	svc	0
 800d648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d64a:	bf00      	nop
 800d64c:	e000ed08 	.word	0xe000ed08

0800d650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d656:	4b47      	ldr	r3, [pc, #284]	@ (800d774 <xPortStartScheduler+0x124>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a47      	ldr	r2, [pc, #284]	@ (800d778 <xPortStartScheduler+0x128>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d10b      	bne.n	800d678 <xPortStartScheduler+0x28>
	__asm volatile
 800d660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d664:	f383 8811 	msr	BASEPRI, r3
 800d668:	f3bf 8f6f 	isb	sy
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	613b      	str	r3, [r7, #16]
}
 800d672:	bf00      	nop
 800d674:	bf00      	nop
 800d676:	e7fd      	b.n	800d674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d678:	4b3e      	ldr	r3, [pc, #248]	@ (800d774 <xPortStartScheduler+0x124>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4a3f      	ldr	r2, [pc, #252]	@ (800d77c <xPortStartScheduler+0x12c>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d10b      	bne.n	800d69a <xPortStartScheduler+0x4a>
	__asm volatile
 800d682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d686:	f383 8811 	msr	BASEPRI, r3
 800d68a:	f3bf 8f6f 	isb	sy
 800d68e:	f3bf 8f4f 	dsb	sy
 800d692:	60fb      	str	r3, [r7, #12]
}
 800d694:	bf00      	nop
 800d696:	bf00      	nop
 800d698:	e7fd      	b.n	800d696 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d69a:	4b39      	ldr	r3, [pc, #228]	@ (800d780 <xPortStartScheduler+0x130>)
 800d69c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	22ff      	movs	r2, #255	@ 0xff
 800d6aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d6b4:	78fb      	ldrb	r3, [r7, #3]
 800d6b6:	b2db      	uxtb	r3, r3
 800d6b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d6bc:	b2da      	uxtb	r2, r3
 800d6be:	4b31      	ldr	r3, [pc, #196]	@ (800d784 <xPortStartScheduler+0x134>)
 800d6c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d6c2:	4b31      	ldr	r3, [pc, #196]	@ (800d788 <xPortStartScheduler+0x138>)
 800d6c4:	2207      	movs	r2, #7
 800d6c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d6c8:	e009      	b.n	800d6de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d6ca:	4b2f      	ldr	r3, [pc, #188]	@ (800d788 <xPortStartScheduler+0x138>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	3b01      	subs	r3, #1
 800d6d0:	4a2d      	ldr	r2, [pc, #180]	@ (800d788 <xPortStartScheduler+0x138>)
 800d6d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d6d4:	78fb      	ldrb	r3, [r7, #3]
 800d6d6:	b2db      	uxtb	r3, r3
 800d6d8:	005b      	lsls	r3, r3, #1
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d6de:	78fb      	ldrb	r3, [r7, #3]
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6e6:	2b80      	cmp	r3, #128	@ 0x80
 800d6e8:	d0ef      	beq.n	800d6ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d6ea:	4b27      	ldr	r3, [pc, #156]	@ (800d788 <xPortStartScheduler+0x138>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f1c3 0307 	rsb	r3, r3, #7
 800d6f2:	2b04      	cmp	r3, #4
 800d6f4:	d00b      	beq.n	800d70e <xPortStartScheduler+0xbe>
	__asm volatile
 800d6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6fa:	f383 8811 	msr	BASEPRI, r3
 800d6fe:	f3bf 8f6f 	isb	sy
 800d702:	f3bf 8f4f 	dsb	sy
 800d706:	60bb      	str	r3, [r7, #8]
}
 800d708:	bf00      	nop
 800d70a:	bf00      	nop
 800d70c:	e7fd      	b.n	800d70a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d70e:	4b1e      	ldr	r3, [pc, #120]	@ (800d788 <xPortStartScheduler+0x138>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	021b      	lsls	r3, r3, #8
 800d714:	4a1c      	ldr	r2, [pc, #112]	@ (800d788 <xPortStartScheduler+0x138>)
 800d716:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d718:	4b1b      	ldr	r3, [pc, #108]	@ (800d788 <xPortStartScheduler+0x138>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d720:	4a19      	ldr	r2, [pc, #100]	@ (800d788 <xPortStartScheduler+0x138>)
 800d722:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	b2da      	uxtb	r2, r3
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d72c:	4b17      	ldr	r3, [pc, #92]	@ (800d78c <xPortStartScheduler+0x13c>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a16      	ldr	r2, [pc, #88]	@ (800d78c <xPortStartScheduler+0x13c>)
 800d732:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d736:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d738:	4b14      	ldr	r3, [pc, #80]	@ (800d78c <xPortStartScheduler+0x13c>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a13      	ldr	r2, [pc, #76]	@ (800d78c <xPortStartScheduler+0x13c>)
 800d73e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d742:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d744:	f000 f8da 	bl	800d8fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d748:	4b11      	ldr	r3, [pc, #68]	@ (800d790 <xPortStartScheduler+0x140>)
 800d74a:	2200      	movs	r2, #0
 800d74c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d74e:	f000 f8f9 	bl	800d944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d752:	4b10      	ldr	r3, [pc, #64]	@ (800d794 <xPortStartScheduler+0x144>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4a0f      	ldr	r2, [pc, #60]	@ (800d794 <xPortStartScheduler+0x144>)
 800d758:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d75c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d75e:	f7ff ff63 	bl	800d628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d762:	f7fe ff03 	bl	800c56c <vTaskSwitchContext>
	prvTaskExitError();
 800d766:	f7ff ff17 	bl	800d598 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3718      	adds	r7, #24
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}
 800d774:	e000ed00 	.word	0xe000ed00
 800d778:	410fc271 	.word	0x410fc271
 800d77c:	410fc270 	.word	0x410fc270
 800d780:	e000e400 	.word	0xe000e400
 800d784:	20005c88 	.word	0x20005c88
 800d788:	20005c8c 	.word	0x20005c8c
 800d78c:	e000ed20 	.word	0xe000ed20
 800d790:	20000024 	.word	0x20000024
 800d794:	e000ef34 	.word	0xe000ef34

0800d798 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
	__asm volatile
 800d79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	607b      	str	r3, [r7, #4]
}
 800d7b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d7b2:	4b10      	ldr	r3, [pc, #64]	@ (800d7f4 <vPortEnterCritical+0x5c>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	4a0e      	ldr	r2, [pc, #56]	@ (800d7f4 <vPortEnterCritical+0x5c>)
 800d7ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d7bc:	4b0d      	ldr	r3, [pc, #52]	@ (800d7f4 <vPortEnterCritical+0x5c>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d110      	bne.n	800d7e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d7c4:	4b0c      	ldr	r3, [pc, #48]	@ (800d7f8 <vPortEnterCritical+0x60>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d00b      	beq.n	800d7e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800d7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7d2:	f383 8811 	msr	BASEPRI, r3
 800d7d6:	f3bf 8f6f 	isb	sy
 800d7da:	f3bf 8f4f 	dsb	sy
 800d7de:	603b      	str	r3, [r7, #0]
}
 800d7e0:	bf00      	nop
 800d7e2:	bf00      	nop
 800d7e4:	e7fd      	b.n	800d7e2 <vPortEnterCritical+0x4a>
	}
}
 800d7e6:	bf00      	nop
 800d7e8:	370c      	adds	r7, #12
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr
 800d7f2:	bf00      	nop
 800d7f4:	20000024 	.word	0x20000024
 800d7f8:	e000ed04 	.word	0xe000ed04

0800d7fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d802:	4b12      	ldr	r3, [pc, #72]	@ (800d84c <vPortExitCritical+0x50>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d10b      	bne.n	800d822 <vPortExitCritical+0x26>
	__asm volatile
 800d80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d80e:	f383 8811 	msr	BASEPRI, r3
 800d812:	f3bf 8f6f 	isb	sy
 800d816:	f3bf 8f4f 	dsb	sy
 800d81a:	607b      	str	r3, [r7, #4]
}
 800d81c:	bf00      	nop
 800d81e:	bf00      	nop
 800d820:	e7fd      	b.n	800d81e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d822:	4b0a      	ldr	r3, [pc, #40]	@ (800d84c <vPortExitCritical+0x50>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	3b01      	subs	r3, #1
 800d828:	4a08      	ldr	r2, [pc, #32]	@ (800d84c <vPortExitCritical+0x50>)
 800d82a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d82c:	4b07      	ldr	r3, [pc, #28]	@ (800d84c <vPortExitCritical+0x50>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d105      	bne.n	800d840 <vPortExitCritical+0x44>
 800d834:	2300      	movs	r3, #0
 800d836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	f383 8811 	msr	BASEPRI, r3
}
 800d83e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d840:	bf00      	nop
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	20000024 	.word	0x20000024

0800d850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d850:	f3ef 8009 	mrs	r0, PSP
 800d854:	f3bf 8f6f 	isb	sy
 800d858:	4b15      	ldr	r3, [pc, #84]	@ (800d8b0 <pxCurrentTCBConst>)
 800d85a:	681a      	ldr	r2, [r3, #0]
 800d85c:	f01e 0f10 	tst.w	lr, #16
 800d860:	bf08      	it	eq
 800d862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86a:	6010      	str	r0, [r2, #0]
 800d86c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d870:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d874:	f380 8811 	msr	BASEPRI, r0
 800d878:	f3bf 8f4f 	dsb	sy
 800d87c:	f3bf 8f6f 	isb	sy
 800d880:	f7fe fe74 	bl	800c56c <vTaskSwitchContext>
 800d884:	f04f 0000 	mov.w	r0, #0
 800d888:	f380 8811 	msr	BASEPRI, r0
 800d88c:	bc09      	pop	{r0, r3}
 800d88e:	6819      	ldr	r1, [r3, #0]
 800d890:	6808      	ldr	r0, [r1, #0]
 800d892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d896:	f01e 0f10 	tst.w	lr, #16
 800d89a:	bf08      	it	eq
 800d89c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d8a0:	f380 8809 	msr	PSP, r0
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop
 800d8ac:	f3af 8000 	nop.w

0800d8b0 <pxCurrentTCBConst>:
 800d8b0:	2000565c 	.word	0x2000565c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d8b4:	bf00      	nop
 800d8b6:	bf00      	nop

0800d8b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
	__asm volatile
 800d8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c2:	f383 8811 	msr	BASEPRI, r3
 800d8c6:	f3bf 8f6f 	isb	sy
 800d8ca:	f3bf 8f4f 	dsb	sy
 800d8ce:	607b      	str	r3, [r7, #4]
}
 800d8d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d8d2:	f7fe fd91 	bl	800c3f8 <xTaskIncrementTick>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d003      	beq.n	800d8e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d8dc:	4b06      	ldr	r3, [pc, #24]	@ (800d8f8 <xPortSysTickHandler+0x40>)
 800d8de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8e2:	601a      	str	r2, [r3, #0]
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	f383 8811 	msr	BASEPRI, r3
}
 800d8ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d8f0:	bf00      	nop
 800d8f2:	3708      	adds	r7, #8
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	e000ed04 	.word	0xe000ed04

0800d8fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d900:	4b0b      	ldr	r3, [pc, #44]	@ (800d930 <vPortSetupTimerInterrupt+0x34>)
 800d902:	2200      	movs	r2, #0
 800d904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d906:	4b0b      	ldr	r3, [pc, #44]	@ (800d934 <vPortSetupTimerInterrupt+0x38>)
 800d908:	2200      	movs	r2, #0
 800d90a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d90c:	4b0a      	ldr	r3, [pc, #40]	@ (800d938 <vPortSetupTimerInterrupt+0x3c>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4a0a      	ldr	r2, [pc, #40]	@ (800d93c <vPortSetupTimerInterrupt+0x40>)
 800d912:	fba2 2303 	umull	r2, r3, r2, r3
 800d916:	099b      	lsrs	r3, r3, #6
 800d918:	4a09      	ldr	r2, [pc, #36]	@ (800d940 <vPortSetupTimerInterrupt+0x44>)
 800d91a:	3b01      	subs	r3, #1
 800d91c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d91e:	4b04      	ldr	r3, [pc, #16]	@ (800d930 <vPortSetupTimerInterrupt+0x34>)
 800d920:	2207      	movs	r2, #7
 800d922:	601a      	str	r2, [r3, #0]
}
 800d924:	bf00      	nop
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	e000e010 	.word	0xe000e010
 800d934:	e000e018 	.word	0xe000e018
 800d938:	20000004 	.word	0x20000004
 800d93c:	10624dd3 	.word	0x10624dd3
 800d940:	e000e014 	.word	0xe000e014

0800d944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d944:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d954 <vPortEnableVFP+0x10>
 800d948:	6801      	ldr	r1, [r0, #0]
 800d94a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d94e:	6001      	str	r1, [r0, #0]
 800d950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d952:	bf00      	nop
 800d954:	e000ed88 	.word	0xe000ed88

0800d958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d95e:	f3ef 8305 	mrs	r3, IPSR
 800d962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2b0f      	cmp	r3, #15
 800d968:	d915      	bls.n	800d996 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d96a:	4a18      	ldr	r2, [pc, #96]	@ (800d9cc <vPortValidateInterruptPriority+0x74>)
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	4413      	add	r3, r2
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d974:	4b16      	ldr	r3, [pc, #88]	@ (800d9d0 <vPortValidateInterruptPriority+0x78>)
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	7afa      	ldrb	r2, [r7, #11]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d20b      	bcs.n	800d996 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d982:	f383 8811 	msr	BASEPRI, r3
 800d986:	f3bf 8f6f 	isb	sy
 800d98a:	f3bf 8f4f 	dsb	sy
 800d98e:	607b      	str	r3, [r7, #4]
}
 800d990:	bf00      	nop
 800d992:	bf00      	nop
 800d994:	e7fd      	b.n	800d992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d996:	4b0f      	ldr	r3, [pc, #60]	@ (800d9d4 <vPortValidateInterruptPriority+0x7c>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d99e:	4b0e      	ldr	r3, [pc, #56]	@ (800d9d8 <vPortValidateInterruptPriority+0x80>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d90b      	bls.n	800d9be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9aa:	f383 8811 	msr	BASEPRI, r3
 800d9ae:	f3bf 8f6f 	isb	sy
 800d9b2:	f3bf 8f4f 	dsb	sy
 800d9b6:	603b      	str	r3, [r7, #0]
}
 800d9b8:	bf00      	nop
 800d9ba:	bf00      	nop
 800d9bc:	e7fd      	b.n	800d9ba <vPortValidateInterruptPriority+0x62>
	}
 800d9be:	bf00      	nop
 800d9c0:	3714      	adds	r7, #20
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr
 800d9ca:	bf00      	nop
 800d9cc:	e000e3f0 	.word	0xe000e3f0
 800d9d0:	20005c88 	.word	0x20005c88
 800d9d4:	e000ed0c 	.word	0xe000ed0c
 800d9d8:	20005c8c 	.word	0x20005c8c

0800d9dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b08a      	sub	sp, #40	@ 0x28
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d9e8:	f7fe fc4a 	bl	800c280 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d9ec:	4b5c      	ldr	r3, [pc, #368]	@ (800db60 <pvPortMalloc+0x184>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d101      	bne.n	800d9f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d9f4:	f000 f924 	bl	800dc40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d9f8:	4b5a      	ldr	r3, [pc, #360]	@ (800db64 <pvPortMalloc+0x188>)
 800d9fa:	681a      	ldr	r2, [r3, #0]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	4013      	ands	r3, r2
 800da00:	2b00      	cmp	r3, #0
 800da02:	f040 8095 	bne.w	800db30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d01e      	beq.n	800da4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800da0c:	2208      	movs	r2, #8
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	4413      	add	r3, r2
 800da12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f003 0307 	and.w	r3, r3, #7
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d015      	beq.n	800da4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f023 0307 	bic.w	r3, r3, #7
 800da24:	3308      	adds	r3, #8
 800da26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f003 0307 	and.w	r3, r3, #7
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d00b      	beq.n	800da4a <pvPortMalloc+0x6e>
	__asm volatile
 800da32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da36:	f383 8811 	msr	BASEPRI, r3
 800da3a:	f3bf 8f6f 	isb	sy
 800da3e:	f3bf 8f4f 	dsb	sy
 800da42:	617b      	str	r3, [r7, #20]
}
 800da44:	bf00      	nop
 800da46:	bf00      	nop
 800da48:	e7fd      	b.n	800da46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d06f      	beq.n	800db30 <pvPortMalloc+0x154>
 800da50:	4b45      	ldr	r3, [pc, #276]	@ (800db68 <pvPortMalloc+0x18c>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	429a      	cmp	r2, r3
 800da58:	d86a      	bhi.n	800db30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800da5a:	4b44      	ldr	r3, [pc, #272]	@ (800db6c <pvPortMalloc+0x190>)
 800da5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800da5e:	4b43      	ldr	r3, [pc, #268]	@ (800db6c <pvPortMalloc+0x190>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da64:	e004      	b.n	800da70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800da66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800da6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	687a      	ldr	r2, [r7, #4]
 800da76:	429a      	cmp	r2, r3
 800da78:	d903      	bls.n	800da82 <pvPortMalloc+0xa6>
 800da7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d1f1      	bne.n	800da66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800da82:	4b37      	ldr	r3, [pc, #220]	@ (800db60 <pvPortMalloc+0x184>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da88:	429a      	cmp	r2, r3
 800da8a:	d051      	beq.n	800db30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da8c:	6a3b      	ldr	r3, [r7, #32]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	2208      	movs	r2, #8
 800da92:	4413      	add	r3, r2
 800da94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	6a3b      	ldr	r3, [r7, #32]
 800da9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800da9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa0:	685a      	ldr	r2, [r3, #4]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	1ad2      	subs	r2, r2, r3
 800daa6:	2308      	movs	r3, #8
 800daa8:	005b      	lsls	r3, r3, #1
 800daaa:	429a      	cmp	r2, r3
 800daac:	d920      	bls.n	800daf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800daae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	4413      	add	r3, r2
 800dab4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	f003 0307 	and.w	r3, r3, #7
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00b      	beq.n	800dad8 <pvPortMalloc+0xfc>
	__asm volatile
 800dac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dac4:	f383 8811 	msr	BASEPRI, r3
 800dac8:	f3bf 8f6f 	isb	sy
 800dacc:	f3bf 8f4f 	dsb	sy
 800dad0:	613b      	str	r3, [r7, #16]
}
 800dad2:	bf00      	nop
 800dad4:	bf00      	nop
 800dad6:	e7fd      	b.n	800dad4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dada:	685a      	ldr	r2, [r3, #4]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	1ad2      	subs	r2, r2, r3
 800dae0:	69bb      	ldr	r3, [r7, #24]
 800dae2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800daea:	69b8      	ldr	r0, [r7, #24]
 800daec:	f000 f90a 	bl	800dd04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800daf0:	4b1d      	ldr	r3, [pc, #116]	@ (800db68 <pvPortMalloc+0x18c>)
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	1ad3      	subs	r3, r2, r3
 800dafa:	4a1b      	ldr	r2, [pc, #108]	@ (800db68 <pvPortMalloc+0x18c>)
 800dafc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dafe:	4b1a      	ldr	r3, [pc, #104]	@ (800db68 <pvPortMalloc+0x18c>)
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	4b1b      	ldr	r3, [pc, #108]	@ (800db70 <pvPortMalloc+0x194>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	429a      	cmp	r2, r3
 800db08:	d203      	bcs.n	800db12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db0a:	4b17      	ldr	r3, [pc, #92]	@ (800db68 <pvPortMalloc+0x18c>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	4a18      	ldr	r2, [pc, #96]	@ (800db70 <pvPortMalloc+0x194>)
 800db10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db14:	685a      	ldr	r2, [r3, #4]
 800db16:	4b13      	ldr	r3, [pc, #76]	@ (800db64 <pvPortMalloc+0x188>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	431a      	orrs	r2, r3
 800db1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800db20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db22:	2200      	movs	r2, #0
 800db24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800db26:	4b13      	ldr	r3, [pc, #76]	@ (800db74 <pvPortMalloc+0x198>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	3301      	adds	r3, #1
 800db2c:	4a11      	ldr	r2, [pc, #68]	@ (800db74 <pvPortMalloc+0x198>)
 800db2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800db30:	f7fe fbb4 	bl	800c29c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800db34:	69fb      	ldr	r3, [r7, #28]
 800db36:	f003 0307 	and.w	r3, r3, #7
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00b      	beq.n	800db56 <pvPortMalloc+0x17a>
	__asm volatile
 800db3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db42:	f383 8811 	msr	BASEPRI, r3
 800db46:	f3bf 8f6f 	isb	sy
 800db4a:	f3bf 8f4f 	dsb	sy
 800db4e:	60fb      	str	r3, [r7, #12]
}
 800db50:	bf00      	nop
 800db52:	bf00      	nop
 800db54:	e7fd      	b.n	800db52 <pvPortMalloc+0x176>
	return pvReturn;
 800db56:	69fb      	ldr	r3, [r7, #28]
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3728      	adds	r7, #40	@ 0x28
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	20009c98 	.word	0x20009c98
 800db64:	20009cac 	.word	0x20009cac
 800db68:	20009c9c 	.word	0x20009c9c
 800db6c:	20009c90 	.word	0x20009c90
 800db70:	20009ca0 	.word	0x20009ca0
 800db74:	20009ca4 	.word	0x20009ca4

0800db78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b086      	sub	sp, #24
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d04f      	beq.n	800dc2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800db8a:	2308      	movs	r3, #8
 800db8c:	425b      	negs	r3, r3
 800db8e:	697a      	ldr	r2, [r7, #20]
 800db90:	4413      	add	r3, r2
 800db92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	685a      	ldr	r2, [r3, #4]
 800db9c:	4b25      	ldr	r3, [pc, #148]	@ (800dc34 <vPortFree+0xbc>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4013      	ands	r3, r2
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d10b      	bne.n	800dbbe <vPortFree+0x46>
	__asm volatile
 800dba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbaa:	f383 8811 	msr	BASEPRI, r3
 800dbae:	f3bf 8f6f 	isb	sy
 800dbb2:	f3bf 8f4f 	dsb	sy
 800dbb6:	60fb      	str	r3, [r7, #12]
}
 800dbb8:	bf00      	nop
 800dbba:	bf00      	nop
 800dbbc:	e7fd      	b.n	800dbba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d00b      	beq.n	800dbde <vPortFree+0x66>
	__asm volatile
 800dbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbca:	f383 8811 	msr	BASEPRI, r3
 800dbce:	f3bf 8f6f 	isb	sy
 800dbd2:	f3bf 8f4f 	dsb	sy
 800dbd6:	60bb      	str	r3, [r7, #8]
}
 800dbd8:	bf00      	nop
 800dbda:	bf00      	nop
 800dbdc:	e7fd      	b.n	800dbda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	685a      	ldr	r2, [r3, #4]
 800dbe2:	4b14      	ldr	r3, [pc, #80]	@ (800dc34 <vPortFree+0xbc>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	4013      	ands	r3, r2
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d01e      	beq.n	800dc2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d11a      	bne.n	800dc2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	685a      	ldr	r2, [r3, #4]
 800dbf8:	4b0e      	ldr	r3, [pc, #56]	@ (800dc34 <vPortFree+0xbc>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	43db      	mvns	r3, r3
 800dbfe:	401a      	ands	r2, r3
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dc04:	f7fe fb3c 	bl	800c280 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	685a      	ldr	r2, [r3, #4]
 800dc0c:	4b0a      	ldr	r3, [pc, #40]	@ (800dc38 <vPortFree+0xc0>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4413      	add	r3, r2
 800dc12:	4a09      	ldr	r2, [pc, #36]	@ (800dc38 <vPortFree+0xc0>)
 800dc14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc16:	6938      	ldr	r0, [r7, #16]
 800dc18:	f000 f874 	bl	800dd04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dc1c:	4b07      	ldr	r3, [pc, #28]	@ (800dc3c <vPortFree+0xc4>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	3301      	adds	r3, #1
 800dc22:	4a06      	ldr	r2, [pc, #24]	@ (800dc3c <vPortFree+0xc4>)
 800dc24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dc26:	f7fe fb39 	bl	800c29c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dc2a:	bf00      	nop
 800dc2c:	3718      	adds	r7, #24
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	20009cac 	.word	0x20009cac
 800dc38:	20009c9c 	.word	0x20009c9c
 800dc3c:	20009ca8 	.word	0x20009ca8

0800dc40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dc40:	b480      	push	{r7}
 800dc42:	b085      	sub	sp, #20
 800dc44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dc46:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800dc4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dc4c:	4b27      	ldr	r3, [pc, #156]	@ (800dcec <prvHeapInit+0xac>)
 800dc4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f003 0307 	and.w	r3, r3, #7
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00c      	beq.n	800dc74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	3307      	adds	r3, #7
 800dc5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	f023 0307 	bic.w	r3, r3, #7
 800dc66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dc68:	68ba      	ldr	r2, [r7, #8]
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	1ad3      	subs	r3, r2, r3
 800dc6e:	4a1f      	ldr	r2, [pc, #124]	@ (800dcec <prvHeapInit+0xac>)
 800dc70:	4413      	add	r3, r2
 800dc72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dc78:	4a1d      	ldr	r2, [pc, #116]	@ (800dcf0 <prvHeapInit+0xb0>)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dc7e:	4b1c      	ldr	r3, [pc, #112]	@ (800dcf0 <prvHeapInit+0xb0>)
 800dc80:	2200      	movs	r2, #0
 800dc82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	68ba      	ldr	r2, [r7, #8]
 800dc88:	4413      	add	r3, r2
 800dc8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dc8c:	2208      	movs	r2, #8
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	1a9b      	subs	r3, r3, r2
 800dc92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f023 0307 	bic.w	r3, r3, #7
 800dc9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	4a15      	ldr	r2, [pc, #84]	@ (800dcf4 <prvHeapInit+0xb4>)
 800dca0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dca2:	4b14      	ldr	r3, [pc, #80]	@ (800dcf4 <prvHeapInit+0xb4>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2200      	movs	r2, #0
 800dca8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dcaa:	4b12      	ldr	r3, [pc, #72]	@ (800dcf4 <prvHeapInit+0xb4>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	1ad2      	subs	r2, r2, r3
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dcc0:	4b0c      	ldr	r3, [pc, #48]	@ (800dcf4 <prvHeapInit+0xb4>)
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	4a0a      	ldr	r2, [pc, #40]	@ (800dcf8 <prvHeapInit+0xb8>)
 800dcce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	4a09      	ldr	r2, [pc, #36]	@ (800dcfc <prvHeapInit+0xbc>)
 800dcd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dcd8:	4b09      	ldr	r3, [pc, #36]	@ (800dd00 <prvHeapInit+0xc0>)
 800dcda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800dcde:	601a      	str	r2, [r3, #0]
}
 800dce0:	bf00      	nop
 800dce2:	3714      	adds	r7, #20
 800dce4:	46bd      	mov	sp, r7
 800dce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcea:	4770      	bx	lr
 800dcec:	20005c90 	.word	0x20005c90
 800dcf0:	20009c90 	.word	0x20009c90
 800dcf4:	20009c98 	.word	0x20009c98
 800dcf8:	20009ca0 	.word	0x20009ca0
 800dcfc:	20009c9c 	.word	0x20009c9c
 800dd00:	20009cac 	.word	0x20009cac

0800dd04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dd04:	b480      	push	{r7}
 800dd06:	b085      	sub	sp, #20
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dd0c:	4b28      	ldr	r3, [pc, #160]	@ (800ddb0 <prvInsertBlockIntoFreeList+0xac>)
 800dd0e:	60fb      	str	r3, [r7, #12]
 800dd10:	e002      	b.n	800dd18 <prvInsertBlockIntoFreeList+0x14>
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	60fb      	str	r3, [r7, #12]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	687a      	ldr	r2, [r7, #4]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d8f7      	bhi.n	800dd12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	68ba      	ldr	r2, [r7, #8]
 800dd2c:	4413      	add	r3, r2
 800dd2e:	687a      	ldr	r2, [r7, #4]
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d108      	bne.n	800dd46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	685a      	ldr	r2, [r3, #4]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	441a      	add	r2, r3
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	68ba      	ldr	r2, [r7, #8]
 800dd50:	441a      	add	r2, r3
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d118      	bne.n	800dd8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	4b15      	ldr	r3, [pc, #84]	@ (800ddb4 <prvInsertBlockIntoFreeList+0xb0>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d00d      	beq.n	800dd82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	685a      	ldr	r2, [r3, #4]
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	441a      	add	r2, r3
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	601a      	str	r2, [r3, #0]
 800dd80:	e008      	b.n	800dd94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dd82:	4b0c      	ldr	r3, [pc, #48]	@ (800ddb4 <prvInsertBlockIntoFreeList+0xb0>)
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	601a      	str	r2, [r3, #0]
 800dd8a:	e003      	b.n	800dd94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681a      	ldr	r2, [r3, #0]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dd94:	68fa      	ldr	r2, [r7, #12]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d002      	beq.n	800dda2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	687a      	ldr	r2, [r7, #4]
 800dda0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dda2:	bf00      	nop
 800dda4:	3714      	adds	r7, #20
 800dda6:	46bd      	mov	sp, r7
 800dda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddac:	4770      	bx	lr
 800ddae:	bf00      	nop
 800ddb0:	20009c90 	.word	0x20009c90
 800ddb4:	20009c98 	.word	0x20009c98

0800ddb8 <rcl_get_zero_initialized_init_options>:
 800ddb8:	2000      	movs	r0, #0
 800ddba:	4770      	bx	lr

0800ddbc <rcl_init_options_init>:
 800ddbc:	b084      	sub	sp, #16
 800ddbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddc0:	b091      	sub	sp, #68	@ 0x44
 800ddc2:	af17      	add	r7, sp, #92	@ 0x5c
 800ddc4:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	d044      	beq.n	800de56 <rcl_init_options_init+0x9a>
 800ddcc:	6803      	ldr	r3, [r0, #0]
 800ddce:	4606      	mov	r6, r0
 800ddd0:	b133      	cbz	r3, 800dde0 <rcl_init_options_init+0x24>
 800ddd2:	2464      	movs	r4, #100	@ 0x64
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	b011      	add	sp, #68	@ 0x44
 800ddd8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dddc:	b004      	add	sp, #16
 800ddde:	4770      	bx	lr
 800dde0:	4638      	mov	r0, r7
 800dde2:	f000 ff03 	bl	800ebec <rcutils_allocator_is_valid>
 800dde6:	2800      	cmp	r0, #0
 800dde8:	d035      	beq.n	800de56 <rcl_init_options_init+0x9a>
 800ddea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ddec:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800ddee:	2050      	movs	r0, #80	@ 0x50
 800ddf0:	4798      	blx	r3
 800ddf2:	4604      	mov	r4, r0
 800ddf4:	6030      	str	r0, [r6, #0]
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	d02f      	beq.n	800de5a <rcl_init_options_init+0x9e>
 800ddfa:	46bc      	mov	ip, r7
 800ddfc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800de00:	4625      	mov	r5, r4
 800de02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800de04:	f8dc 3000 	ldr.w	r3, [ip]
 800de08:	602b      	str	r3, [r5, #0]
 800de0a:	a802      	add	r0, sp, #8
 800de0c:	ad02      	add	r5, sp, #8
 800de0e:	f001 f8a9 	bl	800ef64 <rmw_get_zero_initialized_init_options>
 800de12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de14:	3418      	adds	r4, #24
 800de16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de20:	e895 0003 	ldmia.w	r5, {r0, r1}
 800de24:	6833      	ldr	r3, [r6, #0]
 800de26:	e884 0003 	stmia.w	r4, {r0, r1}
 800de2a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800de2e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800de32:	f103 0018 	add.w	r0, r3, #24
 800de36:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800de3a:	f001 f945 	bl	800f0c8 <rmw_init_options_init>
 800de3e:	4604      	mov	r4, r0
 800de40:	2800      	cmp	r0, #0
 800de42:	d0c7      	beq.n	800ddd4 <rcl_init_options_init+0x18>
 800de44:	6830      	ldr	r0, [r6, #0]
 800de46:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800de48:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800de4a:	4798      	blx	r3
 800de4c:	4620      	mov	r0, r4
 800de4e:	f006 f99d 	bl	801418c <rcl_convert_rmw_ret_to_rcl_ret>
 800de52:	4604      	mov	r4, r0
 800de54:	e7be      	b.n	800ddd4 <rcl_init_options_init+0x18>
 800de56:	240b      	movs	r4, #11
 800de58:	e7bc      	b.n	800ddd4 <rcl_init_options_init+0x18>
 800de5a:	240a      	movs	r4, #10
 800de5c:	e7ba      	b.n	800ddd4 <rcl_init_options_init+0x18>
 800de5e:	bf00      	nop

0800de60 <rcl_init_options_fini>:
 800de60:	b570      	push	{r4, r5, r6, lr}
 800de62:	b086      	sub	sp, #24
 800de64:	b1c0      	cbz	r0, 800de98 <rcl_init_options_fini+0x38>
 800de66:	6804      	ldr	r4, [r0, #0]
 800de68:	4606      	mov	r6, r0
 800de6a:	b1ac      	cbz	r4, 800de98 <rcl_init_options_fini+0x38>
 800de6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800de6e:	ad01      	add	r5, sp, #4
 800de70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800de72:	6823      	ldr	r3, [r4, #0]
 800de74:	602b      	str	r3, [r5, #0]
 800de76:	a801      	add	r0, sp, #4
 800de78:	f000 feb8 	bl	800ebec <rcutils_allocator_is_valid>
 800de7c:	b160      	cbz	r0, 800de98 <rcl_init_options_fini+0x38>
 800de7e:	6830      	ldr	r0, [r6, #0]
 800de80:	3018      	adds	r0, #24
 800de82:	f001 f9bb 	bl	800f1fc <rmw_init_options_fini>
 800de86:	4604      	mov	r4, r0
 800de88:	b950      	cbnz	r0, 800dea0 <rcl_init_options_fini+0x40>
 800de8a:	6830      	ldr	r0, [r6, #0]
 800de8c:	9b02      	ldr	r3, [sp, #8]
 800de8e:	9905      	ldr	r1, [sp, #20]
 800de90:	4798      	blx	r3
 800de92:	4620      	mov	r0, r4
 800de94:	b006      	add	sp, #24
 800de96:	bd70      	pop	{r4, r5, r6, pc}
 800de98:	240b      	movs	r4, #11
 800de9a:	4620      	mov	r0, r4
 800de9c:	b006      	add	sp, #24
 800de9e:	bd70      	pop	{r4, r5, r6, pc}
 800dea0:	f006 f974 	bl	801418c <rcl_convert_rmw_ret_to_rcl_ret>
 800dea4:	4604      	mov	r4, r0
 800dea6:	e7f8      	b.n	800de9a <rcl_init_options_fini+0x3a>

0800dea8 <rcl_init_options_copy>:
 800dea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deac:	b096      	sub	sp, #88	@ 0x58
 800deae:	2800      	cmp	r0, #0
 800deb0:	d063      	beq.n	800df7a <rcl_init_options_copy+0xd2>
 800deb2:	6806      	ldr	r6, [r0, #0]
 800deb4:	4605      	mov	r5, r0
 800deb6:	2e00      	cmp	r6, #0
 800deb8:	d05f      	beq.n	800df7a <rcl_init_options_copy+0xd2>
 800deba:	460c      	mov	r4, r1
 800debc:	2900      	cmp	r1, #0
 800debe:	d05c      	beq.n	800df7a <rcl_init_options_copy+0xd2>
 800dec0:	680b      	ldr	r3, [r1, #0]
 800dec2:	b123      	cbz	r3, 800dece <rcl_init_options_copy+0x26>
 800dec4:	2664      	movs	r6, #100	@ 0x64
 800dec6:	4630      	mov	r0, r6
 800dec8:	b016      	add	sp, #88	@ 0x58
 800deca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dece:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ded0:	af11      	add	r7, sp, #68	@ 0x44
 800ded2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800ded4:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 800ded8:	6833      	ldr	r3, [r6, #0]
 800deda:	603b      	str	r3, [r7, #0]
 800dedc:	4640      	mov	r0, r8
 800dede:	f000 fe85 	bl	800ebec <rcutils_allocator_is_valid>
 800dee2:	2800      	cmp	r0, #0
 800dee4:	d049      	beq.n	800df7a <rcl_init_options_copy+0xd2>
 800dee6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dee8:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800deea:	2050      	movs	r0, #80	@ 0x50
 800deec:	4798      	blx	r3
 800deee:	4606      	mov	r6, r0
 800def0:	6020      	str	r0, [r4, #0]
 800def2:	2800      	cmp	r0, #0
 800def4:	d077      	beq.n	800dfe6 <rcl_init_options_copy+0x13e>
 800def6:	46c4      	mov	ip, r8
 800def8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800defc:	4637      	mov	r7, r6
 800defe:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800df00:	f8dc 3000 	ldr.w	r3, [ip]
 800df04:	603b      	str	r3, [r7, #0]
 800df06:	a802      	add	r0, sp, #8
 800df08:	af02      	add	r7, sp, #8
 800df0a:	f001 f82b 	bl	800ef64 <rmw_get_zero_initialized_init_options>
 800df0e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800df10:	3618      	adds	r6, #24
 800df12:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800df14:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800df16:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800df18:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800df1a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800df1c:	e897 0003 	ldmia.w	r7, {r0, r1}
 800df20:	ab16      	add	r3, sp, #88	@ 0x58
 800df22:	e886 0003 	stmia.w	r6, {r0, r1}
 800df26:	e913 0003 	ldmdb	r3, {r0, r1}
 800df2a:	6823      	ldr	r3, [r4, #0]
 800df2c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800df30:	f103 0018 	add.w	r0, r3, #24
 800df34:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800df38:	f001 f8c6 	bl	800f0c8 <rmw_init_options_init>
 800df3c:	4606      	mov	r6, r0
 800df3e:	bb08      	cbnz	r0, 800df84 <rcl_init_options_copy+0xdc>
 800df40:	682f      	ldr	r7, [r5, #0]
 800df42:	f8d4 c000 	ldr.w	ip, [r4]
 800df46:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800df48:	4666      	mov	r6, ip
 800df4a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	6033      	str	r3, [r6, #0]
 800df50:	f10c 0018 	add.w	r0, ip, #24
 800df54:	f001 f952 	bl	800f1fc <rmw_init_options_fini>
 800df58:	4607      	mov	r7, r0
 800df5a:	b1f0      	cbz	r0, 800df9a <rcl_init_options_copy+0xf2>
 800df5c:	f000 fe54 	bl	800ec08 <rcutils_get_error_string>
 800df60:	f000 fe68 	bl	800ec34 <rcutils_reset_error>
 800df64:	4620      	mov	r0, r4
 800df66:	f7ff ff7b 	bl	800de60 <rcl_init_options_fini>
 800df6a:	4606      	mov	r6, r0
 800df6c:	2800      	cmp	r0, #0
 800df6e:	d1aa      	bne.n	800dec6 <rcl_init_options_copy+0x1e>
 800df70:	4638      	mov	r0, r7
 800df72:	f006 f90b 	bl	801418c <rcl_convert_rmw_ret_to_rcl_ret>
 800df76:	4606      	mov	r6, r0
 800df78:	e7a5      	b.n	800dec6 <rcl_init_options_copy+0x1e>
 800df7a:	260b      	movs	r6, #11
 800df7c:	4630      	mov	r0, r6
 800df7e:	b016      	add	sp, #88	@ 0x58
 800df80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df86:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800df88:	6820      	ldr	r0, [r4, #0]
 800df8a:	4798      	blx	r3
 800df8c:	4630      	mov	r0, r6
 800df8e:	f006 f8fd 	bl	801418c <rcl_convert_rmw_ret_to_rcl_ret>
 800df92:	4606      	mov	r6, r0
 800df94:	2800      	cmp	r0, #0
 800df96:	d0d3      	beq.n	800df40 <rcl_init_options_copy+0x98>
 800df98:	e795      	b.n	800dec6 <rcl_init_options_copy+0x1e>
 800df9a:	a802      	add	r0, sp, #8
 800df9c:	ae02      	add	r6, sp, #8
 800df9e:	6827      	ldr	r7, [r4, #0]
 800dfa0:	f000 ffe0 	bl	800ef64 <rmw_get_zero_initialized_init_options>
 800dfa4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dfa6:	3718      	adds	r7, #24
 800dfa8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800dfaa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dfac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800dfae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dfb0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800dfb2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800dfb6:	682a      	ldr	r2, [r5, #0]
 800dfb8:	6823      	ldr	r3, [r4, #0]
 800dfba:	e887 0003 	stmia.w	r7, {r0, r1}
 800dfbe:	f102 0018 	add.w	r0, r2, #24
 800dfc2:	f103 0118 	add.w	r1, r3, #24
 800dfc6:	f001 f8d7 	bl	800f178 <rmw_init_options_copy>
 800dfca:	4606      	mov	r6, r0
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	f43f af7a 	beq.w	800dec6 <rcl_init_options_copy+0x1e>
 800dfd2:	f000 fe19 	bl	800ec08 <rcutils_get_error_string>
 800dfd6:	f000 fe2d 	bl	800ec34 <rcutils_reset_error>
 800dfda:	4620      	mov	r0, r4
 800dfdc:	f7ff ff40 	bl	800de60 <rcl_init_options_fini>
 800dfe0:	b118      	cbz	r0, 800dfea <rcl_init_options_copy+0x142>
 800dfe2:	4606      	mov	r6, r0
 800dfe4:	e76f      	b.n	800dec6 <rcl_init_options_copy+0x1e>
 800dfe6:	260a      	movs	r6, #10
 800dfe8:	e76d      	b.n	800dec6 <rcl_init_options_copy+0x1e>
 800dfea:	4630      	mov	r0, r6
 800dfec:	f006 f8ce 	bl	801418c <rcl_convert_rmw_ret_to_rcl_ret>
 800dff0:	4606      	mov	r6, r0
 800dff2:	e768      	b.n	800dec6 <rcl_init_options_copy+0x1e>

0800dff4 <rcl_init_options_set_domain_id>:
 800dff4:	b120      	cbz	r0, 800e000 <rcl_init_options_set_domain_id+0xc>
 800dff6:	6803      	ldr	r3, [r0, #0]
 800dff8:	b113      	cbz	r3, 800e000 <rcl_init_options_set_domain_id+0xc>
 800dffa:	6259      	str	r1, [r3, #36]	@ 0x24
 800dffc:	2000      	movs	r0, #0
 800dffe:	4770      	bx	lr
 800e000:	200b      	movs	r0, #11
 800e002:	4770      	bx	lr

0800e004 <rcl_node_get_default_options>:
 800e004:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e006:	b087      	sub	sp, #28
 800e008:	4607      	mov	r7, r0
 800e00a:	466d      	mov	r5, sp
 800e00c:	4668      	mov	r0, sp
 800e00e:	f000 fddf 	bl	800ebd0 <rcutils_get_default_allocator>
 800e012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e014:	4c08      	ldr	r4, [pc, #32]	@ (800e038 <rcl_node_get_default_options+0x34>)
 800e016:	f8d5 c000 	ldr.w	ip, [r5]
 800e01a:	1d26      	adds	r6, r4, #4
 800e01c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e01e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e020:	463d      	mov	r5, r7
 800e022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e024:	f8c6 c000 	str.w	ip, [r6]
 800e028:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e02c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e030:	4638      	mov	r0, r7
 800e032:	b007      	add	sp, #28
 800e034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e036:	bf00      	nop
 800e038:	20000028 	.word	0x20000028

0800e03c <rcl_node_options_copy>:
 800e03c:	b1c8      	cbz	r0, 800e072 <rcl_node_options_copy+0x36>
 800e03e:	b4f0      	push	{r4, r5, r6, r7}
 800e040:	460f      	mov	r7, r1
 800e042:	b199      	cbz	r1, 800e06c <rcl_node_options_copy+0x30>
 800e044:	4288      	cmp	r0, r1
 800e046:	4606      	mov	r6, r0
 800e048:	d010      	beq.n	800e06c <rcl_node_options_copy+0x30>
 800e04a:	4605      	mov	r5, r0
 800e04c:	460c      	mov	r4, r1
 800e04e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e052:	f844 3b04 	str.w	r3, [r4], #4
 800e056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e05a:	7e32      	ldrb	r2, [r6, #24]
 800e05c:	6829      	ldr	r1, [r5, #0]
 800e05e:	7e73      	ldrb	r3, [r6, #25]
 800e060:	6021      	str	r1, [r4, #0]
 800e062:	2000      	movs	r0, #0
 800e064:	763a      	strb	r2, [r7, #24]
 800e066:	767b      	strb	r3, [r7, #25]
 800e068:	bcf0      	pop	{r4, r5, r6, r7}
 800e06a:	4770      	bx	lr
 800e06c:	200b      	movs	r0, #11
 800e06e:	bcf0      	pop	{r4, r5, r6, r7}
 800e070:	4770      	bx	lr
 800e072:	200b      	movs	r0, #11
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop

0800e078 <rcl_get_zero_initialized_publisher>:
 800e078:	4b01      	ldr	r3, [pc, #4]	@ (800e080 <rcl_get_zero_initialized_publisher+0x8>)
 800e07a:	6818      	ldr	r0, [r3, #0]
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	0801de88 	.word	0x0801de88

0800e084 <rcl_publisher_init>:
 800e084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e088:	b091      	sub	sp, #68	@ 0x44
 800e08a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800e08c:	b3d7      	cbz	r7, 800e104 <rcl_publisher_init+0x80>
 800e08e:	f107 0950 	add.w	r9, r7, #80	@ 0x50
 800e092:	4604      	mov	r4, r0
 800e094:	4648      	mov	r0, r9
 800e096:	4688      	mov	r8, r1
 800e098:	4616      	mov	r6, r2
 800e09a:	461d      	mov	r5, r3
 800e09c:	f000 fda6 	bl	800ebec <rcutils_allocator_is_valid>
 800e0a0:	b380      	cbz	r0, 800e104 <rcl_publisher_init+0x80>
 800e0a2:	b37c      	cbz	r4, 800e104 <rcl_publisher_init+0x80>
 800e0a4:	f8d4 a000 	ldr.w	sl, [r4]
 800e0a8:	f1ba 0f00 	cmp.w	sl, #0
 800e0ac:	d004      	beq.n	800e0b8 <rcl_publisher_init+0x34>
 800e0ae:	2564      	movs	r5, #100	@ 0x64
 800e0b0:	4628      	mov	r0, r5
 800e0b2:	b011      	add	sp, #68	@ 0x44
 800e0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0b8:	4640      	mov	r0, r8
 800e0ba:	f006 fd01 	bl	8014ac0 <rcl_node_is_valid>
 800e0be:	b330      	cbz	r0, 800e10e <rcl_publisher_init+0x8a>
 800e0c0:	b306      	cbz	r6, 800e104 <rcl_publisher_init+0x80>
 800e0c2:	b1fd      	cbz	r5, 800e104 <rcl_publisher_init+0x80>
 800e0c4:	46ce      	mov	lr, r9
 800e0c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e0ca:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 800e0ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e0d2:	f8de 3000 	ldr.w	r3, [lr]
 800e0d6:	f8cc 3000 	str.w	r3, [ip]
 800e0da:	f000 fdc3 	bl	800ec64 <rcutils_get_zero_initialized_string_map>
 800e0de:	ab10      	add	r3, sp, #64	@ 0x40
 800e0e0:	4684      	mov	ip, r0
 800e0e2:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800e0e6:	f8cd c020 	str.w	ip, [sp, #32]
 800e0ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e0ee:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 800e0f2:	4651      	mov	r1, sl
 800e0f4:	a808      	add	r0, sp, #32
 800e0f6:	f000 fe2f 	bl	800ed58 <rcutils_string_map_init>
 800e0fa:	b150      	cbz	r0, 800e112 <rcl_publisher_init+0x8e>
 800e0fc:	280a      	cmp	r0, #10
 800e0fe:	d013      	beq.n	800e128 <rcl_publisher_init+0xa4>
 800e100:	2501      	movs	r5, #1
 800e102:	e7d5      	b.n	800e0b0 <rcl_publisher_init+0x2c>
 800e104:	250b      	movs	r5, #11
 800e106:	4628      	mov	r0, r5
 800e108:	b011      	add	sp, #68	@ 0x44
 800e10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e10e:	25c8      	movs	r5, #200	@ 0xc8
 800e110:	e7ce      	b.n	800e0b0 <rcl_publisher_init+0x2c>
 800e112:	a808      	add	r0, sp, #32
 800e114:	f006 fa28 	bl	8014568 <rcl_get_default_topic_name_substitutions>
 800e118:	4682      	mov	sl, r0
 800e11a:	b138      	cbz	r0, 800e12c <rcl_publisher_init+0xa8>
 800e11c:	a808      	add	r0, sp, #32
 800e11e:	f000 fe5b 	bl	800edd8 <rcutils_string_map_fini>
 800e122:	f1ba 0f0a 	cmp.w	sl, #10
 800e126:	d1eb      	bne.n	800e100 <rcl_publisher_init+0x7c>
 800e128:	250a      	movs	r5, #10
 800e12a:	e7c1      	b.n	800e0b0 <rcl_publisher_init+0x2c>
 800e12c:	4640      	mov	r0, r8
 800e12e:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800e132:	f006 fccf 	bl	8014ad4 <rcl_node_get_name>
 800e136:	4682      	mov	sl, r0
 800e138:	4640      	mov	r0, r8
 800e13a:	f006 fcd3 	bl	8014ae4 <rcl_node_get_namespace>
 800e13e:	4686      	mov	lr, r0
 800e140:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800e144:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 800e148:	46ec      	mov	ip, sp
 800e14a:	f8cd b014 	str.w	fp, [sp, #20]
 800e14e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e152:	f8d9 3000 	ldr.w	r3, [r9]
 800e156:	f8cc 3000 	str.w	r3, [ip]
 800e15a:	4628      	mov	r0, r5
 800e15c:	4651      	mov	r1, sl
 800e15e:	4672      	mov	r2, lr
 800e160:	ab08      	add	r3, sp, #32
 800e162:	f006 f89b 	bl	801429c <rcl_expand_topic_name>
 800e166:	4605      	mov	r5, r0
 800e168:	a808      	add	r0, sp, #32
 800e16a:	f000 fe35 	bl	800edd8 <rcutils_string_map_fini>
 800e16e:	b920      	cbnz	r0, 800e17a <rcl_publisher_init+0xf6>
 800e170:	b15d      	cbz	r5, 800e18a <rcl_publisher_init+0x106>
 800e172:	2d67      	cmp	r5, #103	@ 0x67
 800e174:	d002      	beq.n	800e17c <rcl_publisher_init+0xf8>
 800e176:	2d69      	cmp	r5, #105	@ 0x69
 800e178:	d05f      	beq.n	800e23a <rcl_publisher_init+0x1b6>
 800e17a:	2501      	movs	r5, #1
 800e17c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e17e:	2800      	cmp	r0, #0
 800e180:	d096      	beq.n	800e0b0 <rcl_publisher_init+0x2c>
 800e182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e184:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e186:	4798      	blx	r3
 800e188:	e792      	b.n	800e0b0 <rcl_publisher_init+0x2c>
 800e18a:	4640      	mov	r0, r8
 800e18c:	f006 fcb2 	bl	8014af4 <rcl_node_get_options>
 800e190:	2800      	cmp	r0, #0
 800e192:	d0f2      	beq.n	800e17a <rcl_publisher_init+0xf6>
 800e194:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e196:	f7f2 f883 	bl	80002a0 <strlen>
 800e19a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e19c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e19e:	3001      	adds	r0, #1
 800e1a0:	4798      	blx	r3
 800e1a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e1a4:	9107      	str	r1, [sp, #28]
 800e1a6:	4681      	mov	r9, r0
 800e1a8:	4608      	mov	r0, r1
 800e1aa:	f7f2 f879 	bl	80002a0 <strlen>
 800e1ae:	9907      	ldr	r1, [sp, #28]
 800e1b0:	1c42      	adds	r2, r0, #1
 800e1b2:	4648      	mov	r0, r9
 800e1b4:	f00c fbd1 	bl	801a95a <memcpy>
 800e1b8:	462a      	mov	r2, r5
 800e1ba:	4648      	mov	r0, r9
 800e1bc:	a90a      	add	r1, sp, #40	@ 0x28
 800e1be:	f000 fee7 	bl	800ef90 <rmw_validate_full_topic_name>
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	d137      	bne.n	800e236 <rcl_publisher_init+0x1b2>
 800e1c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d138      	bne.n	800e23e <rcl_publisher_init+0x1ba>
 800e1cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e1ce:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e1d0:	20c0      	movs	r0, #192	@ 0xc0
 800e1d2:	4798      	blx	r3
 800e1d4:	6020      	str	r0, [r4, #0]
 800e1d6:	b3a0      	cbz	r0, 800e242 <rcl_publisher_init+0x1be>
 800e1d8:	4640      	mov	r0, r8
 800e1da:	f006 fc93 	bl	8014b04 <rcl_node_get_rmw_handle>
 800e1de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800e1e2:	9300      	str	r3, [sp, #0]
 800e1e4:	4631      	mov	r1, r6
 800e1e6:	463b      	mov	r3, r7
 800e1e8:	464a      	mov	r2, r9
 800e1ea:	6825      	ldr	r5, [r4, #0]
 800e1ec:	f001 fb26 	bl	800f83c <rmw_create_publisher>
 800e1f0:	6821      	ldr	r1, [r4, #0]
 800e1f2:	f8c5 00bc 	str.w	r0, [r5, #188]	@ 0xbc
 800e1f6:	f8d1 00bc 	ldr.w	r0, [r1, #188]	@ 0xbc
 800e1fa:	b388      	cbz	r0, 800e260 <rcl_publisher_init+0x1dc>
 800e1fc:	3168      	adds	r1, #104	@ 0x68
 800e1fe:	f001 fbfb 	bl	800f9f8 <rmw_publisher_get_actual_qos>
 800e202:	6823      	ldr	r3, [r4, #0]
 800e204:	4605      	mov	r5, r0
 800e206:	b9f0      	cbnz	r0, 800e246 <rcl_publisher_init+0x1c2>
 800e208:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800e20c:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 800e210:	4618      	mov	r0, r3
 800e212:	2268      	movs	r2, #104	@ 0x68
 800e214:	4639      	mov	r1, r7
 800e216:	f00c fba0 	bl	801a95a <memcpy>
 800e21a:	f8d8 2000 	ldr.w	r2, [r8]
 800e21e:	f8c0 20b8 	str.w	r2, [r0, #184]	@ 0xb8
 800e222:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e224:	b110      	cbz	r0, 800e22c <rcl_publisher_init+0x1a8>
 800e226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e228:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e22a:	4798      	blx	r3
 800e22c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e22e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e230:	4648      	mov	r0, r9
 800e232:	4798      	blx	r3
 800e234:	e73c      	b.n	800e0b0 <rcl_publisher_init+0x2c>
 800e236:	2501      	movs	r5, #1
 800e238:	e7f3      	b.n	800e222 <rcl_publisher_init+0x19e>
 800e23a:	2567      	movs	r5, #103	@ 0x67
 800e23c:	e79e      	b.n	800e17c <rcl_publisher_init+0xf8>
 800e23e:	2567      	movs	r5, #103	@ 0x67
 800e240:	e7ef      	b.n	800e222 <rcl_publisher_init+0x19e>
 800e242:	250a      	movs	r5, #10
 800e244:	e7ed      	b.n	800e222 <rcl_publisher_init+0x19e>
 800e246:	2b00      	cmp	r3, #0
 800e248:	d0f5      	beq.n	800e236 <rcl_publisher_init+0x1b2>
 800e24a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e24e:	b13b      	cbz	r3, 800e260 <rcl_publisher_init+0x1dc>
 800e250:	4640      	mov	r0, r8
 800e252:	f006 fc57 	bl	8014b04 <rcl_node_get_rmw_handle>
 800e256:	6823      	ldr	r3, [r4, #0]
 800e258:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 800e25c:	f001 fbce 	bl	800f9fc <rmw_destroy_publisher>
 800e260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e262:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e264:	6820      	ldr	r0, [r4, #0]
 800e266:	4798      	blx	r3
 800e268:	2300      	movs	r3, #0
 800e26a:	6023      	str	r3, [r4, #0]
 800e26c:	2501      	movs	r5, #1
 800e26e:	e7d8      	b.n	800e222 <rcl_publisher_init+0x19e>

0800e270 <rcl_publisher_get_default_options>:
 800e270:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e272:	4f0e      	ldr	r7, [pc, #56]	@ (800e2ac <rcl_publisher_get_default_options+0x3c>)
 800e274:	490e      	ldr	r1, [pc, #56]	@ (800e2b0 <rcl_publisher_get_default_options+0x40>)
 800e276:	b087      	sub	sp, #28
 800e278:	4606      	mov	r6, r0
 800e27a:	2250      	movs	r2, #80	@ 0x50
 800e27c:	4638      	mov	r0, r7
 800e27e:	f00c fb6c 	bl	801a95a <memcpy>
 800e282:	466c      	mov	r4, sp
 800e284:	4668      	mov	r0, sp
 800e286:	f000 fca3 	bl	800ebd0 <rcutils_get_default_allocator>
 800e28a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e28c:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800e290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e292:	6823      	ldr	r3, [r4, #0]
 800e294:	602b      	str	r3, [r5, #0]
 800e296:	f000 fe75 	bl	800ef84 <rmw_get_default_publisher_options>
 800e29a:	4639      	mov	r1, r7
 800e29c:	6678      	str	r0, [r7, #100]	@ 0x64
 800e29e:	2268      	movs	r2, #104	@ 0x68
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	f00c fb5a 	bl	801a95a <memcpy>
 800e2a6:	4630      	mov	r0, r6
 800e2a8:	b007      	add	sp, #28
 800e2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2ac:	20009cb0 	.word	0x20009cb0
 800e2b0:	0801de90 	.word	0x0801de90

0800e2b4 <rcl_publish>:
 800e2b4:	b1f8      	cbz	r0, 800e2f6 <rcl_publish+0x42>
 800e2b6:	6803      	ldr	r3, [r0, #0]
 800e2b8:	b570      	push	{r4, r5, r6, lr}
 800e2ba:	4604      	mov	r4, r0
 800e2bc:	b1b3      	cbz	r3, 800e2ec <rcl_publish+0x38>
 800e2be:	4616      	mov	r6, r2
 800e2c0:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800e2c4:	b192      	cbz	r2, 800e2ec <rcl_publish+0x38>
 800e2c6:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800e2ca:	460d      	mov	r5, r1
 800e2cc:	f005 ff7c 	bl	80141c8 <rcl_context_is_valid>
 800e2d0:	b160      	cbz	r0, 800e2ec <rcl_publish+0x38>
 800e2d2:	6823      	ldr	r3, [r4, #0]
 800e2d4:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 800e2d8:	b140      	cbz	r0, 800e2ec <rcl_publish+0x38>
 800e2da:	b155      	cbz	r5, 800e2f2 <rcl_publish+0x3e>
 800e2dc:	4632      	mov	r2, r6
 800e2de:	4629      	mov	r1, r5
 800e2e0:	f001 fa4c 	bl	800f77c <rmw_publish>
 800e2e4:	3800      	subs	r0, #0
 800e2e6:	bf18      	it	ne
 800e2e8:	2001      	movne	r0, #1
 800e2ea:	bd70      	pop	{r4, r5, r6, pc}
 800e2ec:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e2f0:	bd70      	pop	{r4, r5, r6, pc}
 800e2f2:	200b      	movs	r0, #11
 800e2f4:	bd70      	pop	{r4, r5, r6, pc}
 800e2f6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e2fa:	4770      	bx	lr

0800e2fc <_rclc_check_for_new_data>:
 800e2fc:	b1e0      	cbz	r0, 800e338 <_rclc_check_for_new_data+0x3c>
 800e2fe:	7803      	ldrb	r3, [r0, #0]
 800e300:	2b08      	cmp	r3, #8
 800e302:	d81b      	bhi.n	800e33c <_rclc_check_for_new_data+0x40>
 800e304:	e8df f003 	tbb	[pc, r3]
 800e308:	12161010 	.word	0x12161010
 800e30c:	05050512 	.word	0x05050512
 800e310:	14          	.byte	0x14
 800e311:	00          	.byte	0x00
 800e312:	6a0b      	ldr	r3, [r1, #32]
 800e314:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e31a:	3b00      	subs	r3, #0
 800e31c:	bf18      	it	ne
 800e31e:	2301      	movne	r3, #1
 800e320:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
 800e324:	2000      	movs	r0, #0
 800e326:	4770      	bx	lr
 800e328:	680b      	ldr	r3, [r1, #0]
 800e32a:	e7f3      	b.n	800e314 <_rclc_check_for_new_data+0x18>
 800e32c:	698b      	ldr	r3, [r1, #24]
 800e32e:	e7f1      	b.n	800e314 <_rclc_check_for_new_data+0x18>
 800e330:	688b      	ldr	r3, [r1, #8]
 800e332:	e7ef      	b.n	800e314 <_rclc_check_for_new_data+0x18>
 800e334:	690b      	ldr	r3, [r1, #16]
 800e336:	e7ed      	b.n	800e314 <_rclc_check_for_new_data+0x18>
 800e338:	200b      	movs	r0, #11
 800e33a:	4770      	bx	lr
 800e33c:	2300      	movs	r3, #0
 800e33e:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
 800e342:	2001      	movs	r0, #1
 800e344:	4770      	bx	lr
 800e346:	bf00      	nop

0800e348 <_rclc_take_new_data>:
 800e348:	2800      	cmp	r0, #0
 800e34a:	d049      	beq.n	800e3e0 <_rclc_take_new_data+0x98>
 800e34c:	b510      	push	{r4, lr}
 800e34e:	7803      	ldrb	r3, [r0, #0]
 800e350:	b08e      	sub	sp, #56	@ 0x38
 800e352:	4604      	mov	r4, r0
 800e354:	2b08      	cmp	r3, #8
 800e356:	d84a      	bhi.n	800e3ee <_rclc_take_new_data+0xa6>
 800e358:	e8df f003 	tbb	[pc, r3]
 800e35c:	2b121515 	.word	0x2b121515
 800e360:	0505052b 	.word	0x0505052b
 800e364:	12          	.byte	0x12
 800e365:	00          	.byte	0x00
 800e366:	6a0b      	ldr	r3, [r1, #32]
 800e368:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e36a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e36e:	b13b      	cbz	r3, 800e380 <_rclc_take_new_data+0x38>
 800e370:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800e374:	f104 0110 	add.w	r1, r4, #16
 800e378:	f006 fcc4 	bl	8014d04 <rcl_take_request>
 800e37c:	2800      	cmp	r0, #0
 800e37e:	d131      	bne.n	800e3e4 <_rclc_take_new_data+0x9c>
 800e380:	2000      	movs	r0, #0
 800e382:	b00e      	add	sp, #56	@ 0x38
 800e384:	bd10      	pop	{r4, pc}
 800e386:	680b      	ldr	r3, [r1, #0]
 800e388:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e38a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d0f6      	beq.n	800e380 <_rclc_take_new_data+0x38>
 800e392:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800e396:	2300      	movs	r3, #0
 800e398:	aa02      	add	r2, sp, #8
 800e39a:	f006 fe29 	bl	8014ff0 <rcl_take>
 800e39e:	2800      	cmp	r0, #0
 800e3a0:	d0ef      	beq.n	800e382 <_rclc_take_new_data+0x3a>
 800e3a2:	f240 1391 	movw	r3, #401	@ 0x191
 800e3a6:	4298      	cmp	r0, r3
 800e3a8:	d115      	bne.n	800e3d6 <_rclc_take_new_data+0x8e>
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800e3b0:	e7e7      	b.n	800e382 <_rclc_take_new_data+0x3a>
 800e3b2:	698b      	ldr	r3, [r1, #24]
 800e3b4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d0e0      	beq.n	800e380 <_rclc_take_new_data+0x38>
 800e3be:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800e3c2:	f104 0110 	add.w	r1, r4, #16
 800e3c6:	f005 fea5 	bl	8014114 <rcl_take_response>
 800e3ca:	2800      	cmp	r0, #0
 800e3cc:	d0d8      	beq.n	800e380 <_rclc_take_new_data+0x38>
 800e3ce:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800e3d2:	4298      	cmp	r0, r3
 800e3d4:	d0d5      	beq.n	800e382 <_rclc_take_new_data+0x3a>
 800e3d6:	9001      	str	r0, [sp, #4]
 800e3d8:	f000 fc2c 	bl	800ec34 <rcutils_reset_error>
 800e3dc:	9801      	ldr	r0, [sp, #4]
 800e3de:	e7d0      	b.n	800e382 <_rclc_take_new_data+0x3a>
 800e3e0:	200b      	movs	r0, #11
 800e3e2:	4770      	bx	lr
 800e3e4:	f240 2359 	movw	r3, #601	@ 0x259
 800e3e8:	4298      	cmp	r0, r3
 800e3ea:	d0de      	beq.n	800e3aa <_rclc_take_new_data+0x62>
 800e3ec:	e7f3      	b.n	800e3d6 <_rclc_take_new_data+0x8e>
 800e3ee:	2001      	movs	r0, #1
 800e3f0:	e7c7      	b.n	800e382 <_rclc_take_new_data+0x3a>
 800e3f2:	bf00      	nop

0800e3f4 <rclc_executor_trigger_any>:
 800e3f4:	b170      	cbz	r0, 800e414 <rclc_executor_trigger_any+0x20>
 800e3f6:	b179      	cbz	r1, 800e418 <rclc_executor_trigger_any+0x24>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	e005      	b.n	800e40a <rclc_executor_trigger_any+0x16>
 800e3fe:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800e402:	3340      	adds	r3, #64	@ 0x40
 800e404:	b930      	cbnz	r0, 800e414 <rclc_executor_trigger_any+0x20>
 800e406:	4291      	cmp	r1, r2
 800e408:	d005      	beq.n	800e416 <rclc_executor_trigger_any+0x22>
 800e40a:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800e40e:	3201      	adds	r2, #1
 800e410:	2800      	cmp	r0, #0
 800e412:	d1f4      	bne.n	800e3fe <rclc_executor_trigger_any+0xa>
 800e414:	4770      	bx	lr
 800e416:	4770      	bx	lr
 800e418:	4608      	mov	r0, r1
 800e41a:	e7fb      	b.n	800e414 <rclc_executor_trigger_any+0x20>

0800e41c <_rclc_execute.part.0>:
 800e41c:	b530      	push	{r4, r5, lr}
 800e41e:	7803      	ldrb	r3, [r0, #0]
 800e420:	b083      	sub	sp, #12
 800e422:	4604      	mov	r4, r0
 800e424:	2b08      	cmp	r3, #8
 800e426:	d85b      	bhi.n	800e4e0 <_rclc_execute.part.0+0xc4>
 800e428:	e8df f003 	tbb	[pc, r3]
 800e42c:	3036271f 	.word	0x3036271f
 800e430:	0505053f 	.word	0x0505053f
 800e434:	1a          	.byte	0x1a
 800e435:	00          	.byte	0x00
 800e436:	2b06      	cmp	r3, #6
 800e438:	d049      	beq.n	800e4ce <_rclc_execute.part.0+0xb2>
 800e43a:	2b07      	cmp	r3, #7
 800e43c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e43e:	d140      	bne.n	800e4c2 <_rclc_execute.part.0+0xa6>
 800e440:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800e444:	6880      	ldr	r0, [r0, #8]
 800e446:	4798      	blx	r3
 800e448:	f104 0110 	add.w	r1, r4, #16
 800e44c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800e44e:	6860      	ldr	r0, [r4, #4]
 800e450:	f006 fc90 	bl	8014d74 <rcl_send_response>
 800e454:	b138      	cbz	r0, 800e466 <_rclc_execute.part.0+0x4a>
 800e456:	9001      	str	r0, [sp, #4]
 800e458:	f000 fbec 	bl	800ec34 <rcutils_reset_error>
 800e45c:	9801      	ldr	r0, [sp, #4]
 800e45e:	e002      	b.n	800e466 <_rclc_execute.part.0+0x4a>
 800e460:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e462:	4798      	blx	r3
 800e464:	2000      	movs	r0, #0
 800e466:	b003      	add	sp, #12
 800e468:	bd30      	pop	{r4, r5, pc}
 800e46a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800e46e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e470:	b96d      	cbnz	r5, 800e48e <_rclc_execute.part.0+0x72>
 800e472:	4628      	mov	r0, r5
 800e474:	4798      	blx	r3
 800e476:	4628      	mov	r0, r5
 800e478:	e7f5      	b.n	800e466 <_rclc_execute.part.0+0x4a>
 800e47a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800e47e:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800e482:	b1d5      	cbz	r5, 800e4ba <_rclc_execute.part.0+0x9e>
 800e484:	6880      	ldr	r0, [r0, #8]
 800e486:	4798      	blx	r3
 800e488:	2000      	movs	r0, #0
 800e48a:	e7ec      	b.n	800e466 <_rclc_execute.part.0+0x4a>
 800e48c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e48e:	68a0      	ldr	r0, [r4, #8]
 800e490:	4798      	blx	r3
 800e492:	2000      	movs	r0, #0
 800e494:	b003      	add	sp, #12
 800e496:	bd30      	pop	{r4, r5, pc}
 800e498:	6840      	ldr	r0, [r0, #4]
 800e49a:	f006 fe9f 	bl	80151dc <rcl_timer_call>
 800e49e:	f240 3321 	movw	r3, #801	@ 0x321
 800e4a2:	4298      	cmp	r0, r3
 800e4a4:	d1d6      	bne.n	800e454 <_rclc_execute.part.0+0x38>
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	e7dd      	b.n	800e466 <_rclc_execute.part.0+0x4a>
 800e4aa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e4ac:	6880      	ldr	r0, [r0, #8]
 800e4ae:	f104 0110 	add.w	r1, r4, #16
 800e4b2:	4798      	blx	r3
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	b003      	add	sp, #12
 800e4b8:	bd30      	pop	{r4, r5, pc}
 800e4ba:	4628      	mov	r0, r5
 800e4bc:	4798      	blx	r3
 800e4be:	4628      	mov	r0, r5
 800e4c0:	e7d1      	b.n	800e466 <_rclc_execute.part.0+0x4a>
 800e4c2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e4c4:	6880      	ldr	r0, [r0, #8]
 800e4c6:	4798      	blx	r3
 800e4c8:	f104 0110 	add.w	r1, r4, #16
 800e4cc:	e7be      	b.n	800e44c <_rclc_execute.part.0+0x30>
 800e4ce:	f100 0110 	add.w	r1, r0, #16
 800e4d2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e4d4:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800e4d6:	6880      	ldr	r0, [r0, #8]
 800e4d8:	9101      	str	r1, [sp, #4]
 800e4da:	4798      	blx	r3
 800e4dc:	9901      	ldr	r1, [sp, #4]
 800e4de:	e7b5      	b.n	800e44c <_rclc_execute.part.0+0x30>
 800e4e0:	2001      	movs	r0, #1
 800e4e2:	e7c0      	b.n	800e466 <_rclc_execute.part.0+0x4a>
 800e4e4:	0000      	movs	r0, r0
	...

0800e4e8 <rclc_executor_init>:
 800e4e8:	2800      	cmp	r0, #0
 800e4ea:	d063      	beq.n	800e5b4 <rclc_executor_init+0xcc>
 800e4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f0:	460f      	mov	r7, r1
 800e4f2:	b0ae      	sub	sp, #184	@ 0xb8
 800e4f4:	2900      	cmp	r1, #0
 800e4f6:	d055      	beq.n	800e5a4 <rclc_executor_init+0xbc>
 800e4f8:	4605      	mov	r5, r0
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	4616      	mov	r6, r2
 800e4fe:	4698      	mov	r8, r3
 800e500:	f000 fb74 	bl	800ebec <rcutils_allocator_is_valid>
 800e504:	2800      	cmp	r0, #0
 800e506:	d04d      	beq.n	800e5a4 <rclc_executor_init+0xbc>
 800e508:	2e00      	cmp	r6, #0
 800e50a:	d04b      	beq.n	800e5a4 <rclc_executor_init+0xbc>
 800e50c:	492e      	ldr	r1, [pc, #184]	@ (800e5c8 <rclc_executor_init+0xe0>)
 800e50e:	2280      	movs	r2, #128	@ 0x80
 800e510:	a80e      	add	r0, sp, #56	@ 0x38
 800e512:	f00c fa22 	bl	801a95a <memcpy>
 800e516:	2400      	movs	r4, #0
 800e518:	a90e      	add	r1, sp, #56	@ 0x38
 800e51a:	2280      	movs	r2, #128	@ 0x80
 800e51c:	4628      	mov	r0, r5
 800e51e:	f00c fa1c 	bl	801a95a <memcpy>
 800e522:	602f      	str	r7, [r5, #0]
 800e524:	4668      	mov	r0, sp
 800e526:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800e52a:	466f      	mov	r7, sp
 800e52c:	f007 f8b0 	bl	8015690 <rcl_get_zero_initialized_wait_set>
 800e530:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e532:	f105 0c14 	add.w	ip, r5, #20
 800e536:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e53a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e53c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e540:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e542:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e546:	a31e      	add	r3, pc, #120	@ (adr r3, 800e5c0 <rclc_executor_init+0xd8>)
 800e548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54c:	6839      	ldr	r1, [r7, #0]
 800e54e:	f8cc 1000 	str.w	r1, [ip]
 800e552:	f8d8 7000 	ldr.w	r7, [r8]
 800e556:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e55a:	f8c5 8010 	str.w	r8, [r5, #16]
 800e55e:	e9c5 2318 	strd	r2, r3, [r5, #96]	@ 0x60
 800e562:	01b0      	lsls	r0, r6, #6
 800e564:	47b8      	blx	r7
 800e566:	6068      	str	r0, [r5, #4]
 800e568:	b908      	cbnz	r0, 800e56e <rclc_executor_init+0x86>
 800e56a:	e025      	b.n	800e5b8 <rclc_executor_init+0xd0>
 800e56c:	6868      	ldr	r0, [r5, #4]
 800e56e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800e572:	4631      	mov	r1, r6
 800e574:	3401      	adds	r4, #1
 800e576:	f000 fa01 	bl	800e97c <rclc_executor_handle_init>
 800e57a:	42a6      	cmp	r6, r4
 800e57c:	d1f6      	bne.n	800e56c <rclc_executor_init+0x84>
 800e57e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800e582:	f000 f9ef 	bl	800e964 <rclc_executor_handle_counters_zero_init>
 800e586:	686b      	ldr	r3, [r5, #4]
 800e588:	4a10      	ldr	r2, [pc, #64]	@ (800e5cc <rclc_executor_init+0xe4>)
 800e58a:	672a      	str	r2, [r5, #112]	@ 0x70
 800e58c:	2000      	movs	r0, #0
 800e58e:	6768      	str	r0, [r5, #116]	@ 0x74
 800e590:	b163      	cbz	r3, 800e5ac <rclc_executor_init+0xc4>
 800e592:	692b      	ldr	r3, [r5, #16]
 800e594:	b153      	cbz	r3, 800e5ac <rclc_executor_init+0xc4>
 800e596:	68ab      	ldr	r3, [r5, #8]
 800e598:	b143      	cbz	r3, 800e5ac <rclc_executor_init+0xc4>
 800e59a:	f885 0078 	strb.w	r0, [r5, #120]	@ 0x78
 800e59e:	b02e      	add	sp, #184	@ 0xb8
 800e5a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5a4:	200b      	movs	r0, #11
 800e5a6:	b02e      	add	sp, #184	@ 0xb8
 800e5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	b02e      	add	sp, #184	@ 0xb8
 800e5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5b4:	200b      	movs	r0, #11
 800e5b6:	4770      	bx	lr
 800e5b8:	200a      	movs	r0, #10
 800e5ba:	e7f4      	b.n	800e5a6 <rclc_executor_init+0xbe>
 800e5bc:	f3af 8000 	nop.w
 800e5c0:	3b9aca00 	.word	0x3b9aca00
 800e5c4:	00000000 	.word	0x00000000
 800e5c8:	0801dee0 	.word	0x0801dee0
 800e5cc:	0800e3f5 	.word	0x0800e3f5

0800e5d0 <rclc_executor_add_subscription>:
 800e5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d4:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800e5d8:	b358      	cbz	r0, 800e632 <rclc_executor_add_subscription+0x62>
 800e5da:	b351      	cbz	r1, 800e632 <rclc_executor_add_subscription+0x62>
 800e5dc:	b34a      	cbz	r2, 800e632 <rclc_executor_add_subscription+0x62>
 800e5de:	b343      	cbz	r3, 800e632 <rclc_executor_add_subscription+0x62>
 800e5e0:	4604      	mov	r4, r0
 800e5e2:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800e5e6:	4285      	cmp	r5, r0
 800e5e8:	d302      	bcc.n	800e5f0 <rclc_executor_add_subscription+0x20>
 800e5ea:	2001      	movs	r0, #1
 800e5ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5f0:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800e5f4:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800e5f8:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800e5fc:	f04f 0c00 	mov.w	ip, #0
 800e600:	f80e c008 	strb.w	ip, [lr, r8]
 800e604:	2001      	movs	r0, #1
 800e606:	3501      	adds	r5, #1
 800e608:	f104 0814 	add.w	r8, r4, #20
 800e60c:	f886 0038 	strb.w	r0, [r6, #56]	@ 0x38
 800e610:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800e614:	6333      	str	r3, [r6, #48]	@ 0x30
 800e616:	7077      	strb	r7, [r6, #1]
 800e618:	f8c6 c02c 	str.w	ip, [r6, #44]	@ 0x2c
 800e61c:	4640      	mov	r0, r8
 800e61e:	60e5      	str	r5, [r4, #12]
 800e620:	f007 f848 	bl	80156b4 <rcl_wait_set_is_valid>
 800e624:	b940      	cbnz	r0, 800e638 <rclc_executor_add_subscription+0x68>
 800e626:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800e628:	3301      	adds	r3, #1
 800e62a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800e62c:	2000      	movs	r0, #0
 800e62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e632:	200b      	movs	r0, #11
 800e634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e638:	4640      	mov	r0, r8
 800e63a:	f007 f841 	bl	80156c0 <rcl_wait_set_fini>
 800e63e:	2800      	cmp	r0, #0
 800e640:	d0f1      	beq.n	800e626 <rclc_executor_add_subscription+0x56>
 800e642:	e7d3      	b.n	800e5ec <rclc_executor_add_subscription+0x1c>

0800e644 <rclc_executor_prepare>:
 800e644:	2800      	cmp	r0, #0
 800e646:	d03d      	beq.n	800e6c4 <rclc_executor_prepare+0x80>
 800e648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e64c:	f100 0814 	add.w	r8, r0, #20
 800e650:	b09a      	sub	sp, #104	@ 0x68
 800e652:	4604      	mov	r4, r0
 800e654:	4640      	mov	r0, r8
 800e656:	f007 f82d 	bl	80156b4 <rcl_wait_set_is_valid>
 800e65a:	b118      	cbz	r0, 800e664 <rclc_executor_prepare+0x20>
 800e65c:	2000      	movs	r0, #0
 800e65e:	b01a      	add	sp, #104	@ 0x68
 800e660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e664:	4640      	mov	r0, r8
 800e666:	f007 f82b 	bl	80156c0 <rcl_wait_set_fini>
 800e66a:	2800      	cmp	r0, #0
 800e66c:	d127      	bne.n	800e6be <rclc_executor_prepare+0x7a>
 800e66e:	a80c      	add	r0, sp, #48	@ 0x30
 800e670:	ad0c      	add	r5, sp, #48	@ 0x30
 800e672:	f007 f80d 	bl	8015690 <rcl_get_zero_initialized_wait_set>
 800e676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e678:	4646      	mov	r6, r8
 800e67a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e67c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e67e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e682:	6927      	ldr	r7, [r4, #16]
 800e684:	682d      	ldr	r5, [r5, #0]
 800e686:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e688:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e68a:	6035      	str	r5, [r6, #0]
 800e68c:	ad04      	add	r5, sp, #16
 800e68e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e690:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800e694:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800e696:	6826      	ldr	r6, [r4, #0]
 800e698:	6838      	ldr	r0, [r7, #0]
 800e69a:	6028      	str	r0, [r5, #0]
 800e69c:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800e6a0:	e9cd 3200 	strd	r3, r2, [sp]
 800e6a4:	4640      	mov	r0, r8
 800e6a6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e6a8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e6aa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e6ac:	f007 fb26 	bl	8015cfc <rcl_wait_set_init>
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	d0d4      	beq.n	800e65e <rclc_executor_prepare+0x1a>
 800e6b4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e6b6:	f000 fabd 	bl	800ec34 <rcutils_reset_error>
 800e6ba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e6bc:	e7cf      	b.n	800e65e <rclc_executor_prepare+0x1a>
 800e6be:	f000 fab9 	bl	800ec34 <rcutils_reset_error>
 800e6c2:	e7d4      	b.n	800e66e <rclc_executor_prepare+0x2a>
 800e6c4:	200b      	movs	r0, #11
 800e6c6:	4770      	bx	lr

0800e6c8 <rclc_executor_spin_some.part.0>:
 800e6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6cc:	f100 0814 	add.w	r8, r0, #20
 800e6d0:	b083      	sub	sp, #12
 800e6d2:	4692      	mov	sl, r2
 800e6d4:	4699      	mov	r9, r3
 800e6d6:	4605      	mov	r5, r0
 800e6d8:	f7ff ffb4 	bl	800e644 <rclc_executor_prepare>
 800e6dc:	4640      	mov	r0, r8
 800e6de:	f007 f8bb 	bl	8015858 <rcl_wait_set_clear>
 800e6e2:	4607      	mov	r7, r0
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	f040 80be 	bne.w	800e866 <rclc_executor_spin_some.part.0+0x19e>
 800e6ea:	68ab      	ldr	r3, [r5, #8]
 800e6ec:	4604      	mov	r4, r0
 800e6ee:	b1eb      	cbz	r3, 800e72c <rclc_executor_spin_some.part.0+0x64>
 800e6f0:	686e      	ldr	r6, [r5, #4]
 800e6f2:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800e6f6:	01a2      	lsls	r2, r4, #6
 800e6f8:	f891 3038 	ldrb.w	r3, [r1, #56]	@ 0x38
 800e6fc:	b1b3      	cbz	r3, 800e72c <rclc_executor_spin_some.part.0+0x64>
 800e6fe:	5cb3      	ldrb	r3, [r6, r2]
 800e700:	2b08      	cmp	r3, #8
 800e702:	f200 80a9 	bhi.w	800e858 <rclc_executor_spin_some.part.0+0x190>
 800e706:	e8df f003 	tbb	[pc, r3]
 800e70a:	8989      	.short	0x8989
 800e70c:	057b7b93 	.word	0x057b7b93
 800e710:	0505      	.short	0x0505
 800e712:	9d          	.byte	0x9d
 800e713:	00          	.byte	0x00
 800e714:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800e718:	4640      	mov	r0, r8
 800e71a:	6849      	ldr	r1, [r1, #4]
 800e71c:	f007 fc04 	bl	8015f28 <rcl_wait_set_add_service>
 800e720:	2800      	cmp	r0, #0
 800e722:	d175      	bne.n	800e810 <rclc_executor_spin_some.part.0+0x148>
 800e724:	68ab      	ldr	r3, [r5, #8]
 800e726:	3401      	adds	r4, #1
 800e728:	429c      	cmp	r4, r3
 800e72a:	d3e1      	bcc.n	800e6f0 <rclc_executor_spin_some.part.0+0x28>
 800e72c:	464b      	mov	r3, r9
 800e72e:	4652      	mov	r2, sl
 800e730:	4640      	mov	r0, r8
 800e732:	f007 fc25 	bl	8015f80 <rcl_wait>
 800e736:	f895 3078 	ldrb.w	r3, [r5, #120]	@ 0x78
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	f000 809b 	beq.w	800e876 <rclc_executor_spin_some.part.0+0x1ae>
 800e740:	2b01      	cmp	r3, #1
 800e742:	f040 8089 	bne.w	800e858 <rclc_executor_spin_some.part.0+0x190>
 800e746:	68ab      	ldr	r3, [r5, #8]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	f000 80ef 	beq.w	800e92c <rclc_executor_spin_some.part.0+0x264>
 800e74e:	2400      	movs	r4, #0
 800e750:	4626      	mov	r6, r4
 800e752:	f240 1991 	movw	r9, #401	@ 0x191
 800e756:	e00a      	b.n	800e76e <rclc_executor_spin_some.part.0+0xa6>
 800e758:	f7ff fdd0 	bl	800e2fc <_rclc_check_for_new_data>
 800e75c:	4604      	mov	r4, r0
 800e75e:	b110      	cbz	r0, 800e766 <rclc_executor_spin_some.part.0+0x9e>
 800e760:	4548      	cmp	r0, r9
 800e762:	f040 8086 	bne.w	800e872 <rclc_executor_spin_some.part.0+0x1aa>
 800e766:	68ab      	ldr	r3, [r5, #8]
 800e768:	429e      	cmp	r6, r3
 800e76a:	f080 80db 	bcs.w	800e924 <rclc_executor_spin_some.part.0+0x25c>
 800e76e:	686a      	ldr	r2, [r5, #4]
 800e770:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800e774:	4641      	mov	r1, r8
 800e776:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800e77a:	3601      	adds	r6, #1
 800e77c:	f1bc 0f00 	cmp.w	ip, #0
 800e780:	d1ea      	bne.n	800e758 <rclc_executor_spin_some.part.0+0x90>
 800e782:	4619      	mov	r1, r3
 800e784:	4610      	mov	r0, r2
 800e786:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 800e78a:	4798      	blx	r3
 800e78c:	2800      	cmp	r0, #0
 800e78e:	d070      	beq.n	800e872 <rclc_executor_spin_some.part.0+0x1aa>
 800e790:	68aa      	ldr	r2, [r5, #8]
 800e792:	2a00      	cmp	r2, #0
 800e794:	d06d      	beq.n	800e872 <rclc_executor_spin_some.part.0+0x1aa>
 800e796:	2600      	movs	r6, #0
 800e798:	f240 1991 	movw	r9, #401	@ 0x191
 800e79c:	e008      	b.n	800e7b0 <rclc_executor_spin_some.part.0+0xe8>
 800e79e:	f7ff fdd3 	bl	800e348 <_rclc_take_new_data>
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	b108      	cbz	r0, 800e7aa <rclc_executor_spin_some.part.0+0xe2>
 800e7a6:	4548      	cmp	r0, r9
 800e7a8:	d163      	bne.n	800e872 <rclc_executor_spin_some.part.0+0x1aa>
 800e7aa:	68aa      	ldr	r2, [r5, #8]
 800e7ac:	4296      	cmp	r6, r2
 800e7ae:	d208      	bcs.n	800e7c2 <rclc_executor_spin_some.part.0+0xfa>
 800e7b0:	6868      	ldr	r0, [r5, #4]
 800e7b2:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800e7b6:	4641      	mov	r1, r8
 800e7b8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800e7bc:	3601      	adds	r6, #1
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d1ed      	bne.n	800e79e <rclc_executor_spin_some.part.0+0xd6>
 800e7c2:	2600      	movs	r6, #0
 800e7c4:	b932      	cbnz	r2, 800e7d4 <rclc_executor_spin_some.part.0+0x10c>
 800e7c6:	e054      	b.n	800e872 <rclc_executor_spin_some.part.0+0x1aa>
 800e7c8:	2901      	cmp	r1, #1
 800e7ca:	d012      	beq.n	800e7f2 <rclc_executor_spin_some.part.0+0x12a>
 800e7cc:	3601      	adds	r6, #1
 800e7ce:	4296      	cmp	r6, r2
 800e7d0:	d245      	bcs.n	800e85e <rclc_executor_spin_some.part.0+0x196>
 800e7d2:	2400      	movs	r4, #0
 800e7d4:	686b      	ldr	r3, [r5, #4]
 800e7d6:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 800e7e0:	2900      	cmp	r1, #0
 800e7e2:	d046      	beq.n	800e872 <rclc_executor_spin_some.part.0+0x1aa>
 800e7e4:	7859      	ldrb	r1, [r3, #1]
 800e7e6:	2900      	cmp	r1, #0
 800e7e8:	d1ee      	bne.n	800e7c8 <rclc_executor_spin_some.part.0+0x100>
 800e7ea:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d0ec      	beq.n	800e7cc <rclc_executor_spin_some.part.0+0x104>
 800e7f2:	f7ff fe13 	bl	800e41c <_rclc_execute.part.0>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	f040 8096 	bne.w	800e928 <rclc_executor_spin_some.part.0+0x260>
 800e7fc:	68aa      	ldr	r2, [r5, #8]
 800e7fe:	e7e5      	b.n	800e7cc <rclc_executor_spin_some.part.0+0x104>
 800e800:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800e804:	4640      	mov	r0, r8
 800e806:	6849      	ldr	r1, [r1, #4]
 800e808:	f007 fb62 	bl	8015ed0 <rcl_wait_set_add_client>
 800e80c:	2800      	cmp	r0, #0
 800e80e:	d089      	beq.n	800e724 <rclc_executor_spin_some.part.0+0x5c>
 800e810:	9001      	str	r0, [sp, #4]
 800e812:	f000 fa0f 	bl	800ec34 <rcutils_reset_error>
 800e816:	9801      	ldr	r0, [sp, #4]
 800e818:	4607      	mov	r7, r0
 800e81a:	e020      	b.n	800e85e <rclc_executor_spin_some.part.0+0x196>
 800e81c:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800e820:	4640      	mov	r0, r8
 800e822:	6849      	ldr	r1, [r1, #4]
 800e824:	f006 ffec 	bl	8015800 <rcl_wait_set_add_subscription>
 800e828:	2800      	cmp	r0, #0
 800e82a:	f43f af7b 	beq.w	800e724 <rclc_executor_spin_some.part.0+0x5c>
 800e82e:	e7ef      	b.n	800e810 <rclc_executor_spin_some.part.0+0x148>
 800e830:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800e834:	4640      	mov	r0, r8
 800e836:	6849      	ldr	r1, [r1, #4]
 800e838:	f007 fb1a 	bl	8015e70 <rcl_wait_set_add_timer>
 800e83c:	2800      	cmp	r0, #0
 800e83e:	f43f af71 	beq.w	800e724 <rclc_executor_spin_some.part.0+0x5c>
 800e842:	e7e5      	b.n	800e810 <rclc_executor_spin_some.part.0+0x148>
 800e844:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800e848:	4640      	mov	r0, r8
 800e84a:	6849      	ldr	r1, [r1, #4]
 800e84c:	f007 fae4 	bl	8015e18 <rcl_wait_set_add_guard_condition>
 800e850:	2800      	cmp	r0, #0
 800e852:	f43f af67 	beq.w	800e724 <rclc_executor_spin_some.part.0+0x5c>
 800e856:	e7db      	b.n	800e810 <rclc_executor_spin_some.part.0+0x148>
 800e858:	f000 f9ec 	bl	800ec34 <rcutils_reset_error>
 800e85c:	2701      	movs	r7, #1
 800e85e:	4638      	mov	r0, r7
 800e860:	b003      	add	sp, #12
 800e862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e866:	f000 f9e5 	bl	800ec34 <rcutils_reset_error>
 800e86a:	4638      	mov	r0, r7
 800e86c:	b003      	add	sp, #12
 800e86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e872:	4627      	mov	r7, r4
 800e874:	e7f3      	b.n	800e85e <rclc_executor_spin_some.part.0+0x196>
 800e876:	68ab      	ldr	r3, [r5, #8]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d05a      	beq.n	800e932 <rclc_executor_spin_some.part.0+0x26a>
 800e87c:	2400      	movs	r4, #0
 800e87e:	4626      	mov	r6, r4
 800e880:	f240 1991 	movw	r9, #401	@ 0x191
 800e884:	e008      	b.n	800e898 <rclc_executor_spin_some.part.0+0x1d0>
 800e886:	f7ff fd39 	bl	800e2fc <_rclc_check_for_new_data>
 800e88a:	4604      	mov	r4, r0
 800e88c:	b108      	cbz	r0, 800e892 <rclc_executor_spin_some.part.0+0x1ca>
 800e88e:	4548      	cmp	r0, r9
 800e890:	d1ef      	bne.n	800e872 <rclc_executor_spin_some.part.0+0x1aa>
 800e892:	68ab      	ldr	r3, [r5, #8]
 800e894:	429e      	cmp	r6, r3
 800e896:	d243      	bcs.n	800e920 <rclc_executor_spin_some.part.0+0x258>
 800e898:	686a      	ldr	r2, [r5, #4]
 800e89a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800e89e:	4641      	mov	r1, r8
 800e8a0:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800e8a4:	3601      	adds	r6, #1
 800e8a6:	f1bc 0f00 	cmp.w	ip, #0
 800e8aa:	d1ec      	bne.n	800e886 <rclc_executor_spin_some.part.0+0x1be>
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	4610      	mov	r0, r2
 800e8b0:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 800e8b4:	4798      	blx	r3
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	d0db      	beq.n	800e872 <rclc_executor_spin_some.part.0+0x1aa>
 800e8ba:	68ab      	ldr	r3, [r5, #8]
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d0d8      	beq.n	800e872 <rclc_executor_spin_some.part.0+0x1aa>
 800e8c0:	f04f 0a00 	mov.w	sl, #0
 800e8c4:	f240 1691 	movw	r6, #401	@ 0x191
 800e8c8:	f240 2959 	movw	r9, #601	@ 0x259
 800e8cc:	e00b      	b.n	800e8e6 <rclc_executor_spin_some.part.0+0x21e>
 800e8ce:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800e8d2:	b113      	cbz	r3, 800e8da <rclc_executor_spin_some.part.0+0x212>
 800e8d4:	f7ff fda2 	bl	800e41c <_rclc_execute.part.0>
 800e8d8:	bb30      	cbnz	r0, 800e928 <rclc_executor_spin_some.part.0+0x260>
 800e8da:	68ab      	ldr	r3, [r5, #8]
 800e8dc:	f10a 0a01 	add.w	sl, sl, #1
 800e8e0:	459a      	cmp	sl, r3
 800e8e2:	d2bc      	bcs.n	800e85e <rclc_executor_spin_some.part.0+0x196>
 800e8e4:	2400      	movs	r4, #0
 800e8e6:	6868      	ldr	r0, [r5, #4]
 800e8e8:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800e8ec:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800e8f0:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d0bc      	beq.n	800e872 <rclc_executor_spin_some.part.0+0x1aa>
 800e8f8:	4641      	mov	r1, r8
 800e8fa:	f7ff fd25 	bl	800e348 <_rclc_take_new_data>
 800e8fe:	b118      	cbz	r0, 800e908 <rclc_executor_spin_some.part.0+0x240>
 800e900:	42b0      	cmp	r0, r6
 800e902:	d001      	beq.n	800e908 <rclc_executor_spin_some.part.0+0x240>
 800e904:	4548      	cmp	r0, r9
 800e906:	d10f      	bne.n	800e928 <rclc_executor_spin_some.part.0+0x260>
 800e908:	6868      	ldr	r0, [r5, #4]
 800e90a:	eb10 000b 	adds.w	r0, r0, fp
 800e90e:	d005      	beq.n	800e91c <rclc_executor_spin_some.part.0+0x254>
 800e910:	7843      	ldrb	r3, [r0, #1]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d0db      	beq.n	800e8ce <rclc_executor_spin_some.part.0+0x206>
 800e916:	2b01      	cmp	r3, #1
 800e918:	d1df      	bne.n	800e8da <rclc_executor_spin_some.part.0+0x212>
 800e91a:	e7db      	b.n	800e8d4 <rclc_executor_spin_some.part.0+0x20c>
 800e91c:	270b      	movs	r7, #11
 800e91e:	e79e      	b.n	800e85e <rclc_executor_spin_some.part.0+0x196>
 800e920:	686a      	ldr	r2, [r5, #4]
 800e922:	e7c3      	b.n	800e8ac <rclc_executor_spin_some.part.0+0x1e4>
 800e924:	686a      	ldr	r2, [r5, #4]
 800e926:	e72c      	b.n	800e782 <rclc_executor_spin_some.part.0+0xba>
 800e928:	4607      	mov	r7, r0
 800e92a:	e798      	b.n	800e85e <rclc_executor_spin_some.part.0+0x196>
 800e92c:	686a      	ldr	r2, [r5, #4]
 800e92e:	461c      	mov	r4, r3
 800e930:	e727      	b.n	800e782 <rclc_executor_spin_some.part.0+0xba>
 800e932:	686a      	ldr	r2, [r5, #4]
 800e934:	461c      	mov	r4, r3
 800e936:	e7b9      	b.n	800e8ac <rclc_executor_spin_some.part.0+0x1e4>

0800e938 <rclc_executor_spin_some>:
 800e938:	b190      	cbz	r0, 800e960 <rclc_executor_spin_some+0x28>
 800e93a:	b570      	push	{r4, r5, r6, lr}
 800e93c:	4604      	mov	r4, r0
 800e93e:	6800      	ldr	r0, [r0, #0]
 800e940:	4616      	mov	r6, r2
 800e942:	461d      	mov	r5, r3
 800e944:	f005 fc40 	bl	80141c8 <rcl_context_is_valid>
 800e948:	b130      	cbz	r0, 800e958 <rclc_executor_spin_some+0x20>
 800e94a:	4632      	mov	r2, r6
 800e94c:	462b      	mov	r3, r5
 800e94e:	4620      	mov	r0, r4
 800e950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e954:	f7ff beb8 	b.w	800e6c8 <rclc_executor_spin_some.part.0>
 800e958:	f000 f96c 	bl	800ec34 <rcutils_reset_error>
 800e95c:	2001      	movs	r0, #1
 800e95e:	bd70      	pop	{r4, r5, r6, pc}
 800e960:	200b      	movs	r0, #11
 800e962:	4770      	bx	lr

0800e964 <rclc_executor_handle_counters_zero_init>:
 800e964:	b140      	cbz	r0, 800e978 <rclc_executor_handle_counters_zero_init+0x14>
 800e966:	2300      	movs	r3, #0
 800e968:	6003      	str	r3, [r0, #0]
 800e96a:	6043      	str	r3, [r0, #4]
 800e96c:	6083      	str	r3, [r0, #8]
 800e96e:	60c3      	str	r3, [r0, #12]
 800e970:	6103      	str	r3, [r0, #16]
 800e972:	6143      	str	r3, [r0, #20]
 800e974:	4618      	mov	r0, r3
 800e976:	4770      	bx	lr
 800e978:	200b      	movs	r0, #11
 800e97a:	4770      	bx	lr

0800e97c <rclc_executor_handle_init>:
 800e97c:	b178      	cbz	r0, 800e99e <rclc_executor_handle_init+0x22>
 800e97e:	b430      	push	{r4, r5}
 800e980:	4603      	mov	r3, r0
 800e982:	2209      	movs	r2, #9
 800e984:	2000      	movs	r0, #0
 800e986:	2400      	movs	r4, #0
 800e988:	2500      	movs	r5, #0
 800e98a:	801a      	strh	r2, [r3, #0]
 800e98c:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
 800e990:	bc30      	pop	{r4, r5}
 800e992:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800e996:	6359      	str	r1, [r3, #52]	@ 0x34
 800e998:	6318      	str	r0, [r3, #48]	@ 0x30
 800e99a:	8718      	strh	r0, [r3, #56]	@ 0x38
 800e99c:	4770      	bx	lr
 800e99e:	200b      	movs	r0, #11
 800e9a0:	4770      	bx	lr
 800e9a2:	bf00      	nop

0800e9a4 <rclc_support_init_with_options>:
 800e9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a8:	b082      	sub	sp, #8
 800e9aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e9ae:	b380      	cbz	r0, 800ea12 <rclc_support_init_with_options+0x6e>
 800e9b0:	461c      	mov	r4, r3
 800e9b2:	b373      	cbz	r3, 800ea12 <rclc_support_init_with_options+0x6e>
 800e9b4:	f1b8 0f00 	cmp.w	r8, #0
 800e9b8:	d02b      	beq.n	800ea12 <rclc_support_init_with_options+0x6e>
 800e9ba:	4605      	mov	r5, r0
 800e9bc:	460e      	mov	r6, r1
 800e9be:	4617      	mov	r7, r2
 800e9c0:	f7ff f9fa 	bl	800ddb8 <rcl_get_zero_initialized_init_options>
 800e9c4:	4629      	mov	r1, r5
 800e9c6:	6028      	str	r0, [r5, #0]
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	f7ff fa6d 	bl	800dea8 <rcl_init_options_copy>
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	b9c8      	cbnz	r0, 800ea06 <rclc_support_init_with_options+0x62>
 800e9d2:	466c      	mov	r4, sp
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	f005 fbed 	bl	80141b4 <rcl_get_zero_initialized_context>
 800e9da:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e9de:	1d2b      	adds	r3, r5, #4
 800e9e0:	e883 0003 	stmia.w	r3, {r0, r1}
 800e9e4:	462a      	mov	r2, r5
 800e9e6:	4639      	mov	r1, r7
 800e9e8:	4630      	mov	r0, r6
 800e9ea:	f005 fdc3 	bl	8014574 <rcl_init>
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	b948      	cbnz	r0, 800ea06 <rclc_support_init_with_options+0x62>
 800e9f2:	f8c5 800c 	str.w	r8, [r5, #12]
 800e9f6:	4642      	mov	r2, r8
 800e9f8:	f105 0110 	add.w	r1, r5, #16
 800e9fc:	2003      	movs	r0, #3
 800e9fe:	f006 fb61 	bl	80150c4 <rcl_clock_init>
 800ea02:	4604      	mov	r4, r0
 800ea04:	b108      	cbz	r0, 800ea0a <rclc_support_init_with_options+0x66>
 800ea06:	f000 f915 	bl	800ec34 <rcutils_reset_error>
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	b002      	add	sp, #8
 800ea0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea12:	240b      	movs	r4, #11
 800ea14:	4620      	mov	r0, r4
 800ea16:	b002      	add	sp, #8
 800ea18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ea1c <rclc_node_init_default>:
 800ea1c:	b3b8      	cbz	r0, 800ea8e <rclc_node_init_default+0x72>
 800ea1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea22:	460d      	mov	r5, r1
 800ea24:	b08f      	sub	sp, #60	@ 0x3c
 800ea26:	b329      	cbz	r1, 800ea74 <rclc_node_init_default+0x58>
 800ea28:	4616      	mov	r6, r2
 800ea2a:	b31a      	cbz	r2, 800ea74 <rclc_node_init_default+0x58>
 800ea2c:	461f      	mov	r7, r3
 800ea2e:	b30b      	cbz	r3, 800ea74 <rclc_node_init_default+0x58>
 800ea30:	f10d 0810 	add.w	r8, sp, #16
 800ea34:	4604      	mov	r4, r0
 800ea36:	4640      	mov	r0, r8
 800ea38:	f005 fec8 	bl	80147cc <rcl_get_zero_initialized_node>
 800ea3c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ea40:	f10d 091c 	add.w	r9, sp, #28
 800ea44:	e884 0003 	stmia.w	r4, {r0, r1}
 800ea48:	4648      	mov	r0, r9
 800ea4a:	f7ff fadb 	bl	800e004 <rcl_node_get_default_options>
 800ea4e:	4640      	mov	r0, r8
 800ea50:	f005 febc 	bl	80147cc <rcl_get_zero_initialized_node>
 800ea54:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ea58:	1d3b      	adds	r3, r7, #4
 800ea5a:	f8cd 9000 	str.w	r9, [sp]
 800ea5e:	4632      	mov	r2, r6
 800ea60:	e884 0003 	stmia.w	r4, {r0, r1}
 800ea64:	4629      	mov	r1, r5
 800ea66:	4620      	mov	r0, r4
 800ea68:	f005 feba 	bl	80147e0 <rcl_node_init>
 800ea6c:	b930      	cbnz	r0, 800ea7c <rclc_node_init_default+0x60>
 800ea6e:	b00f      	add	sp, #60	@ 0x3c
 800ea70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea74:	200b      	movs	r0, #11
 800ea76:	b00f      	add	sp, #60	@ 0x3c
 800ea78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea7c:	9003      	str	r0, [sp, #12]
 800ea7e:	f000 f8d9 	bl	800ec34 <rcutils_reset_error>
 800ea82:	f000 f8d7 	bl	800ec34 <rcutils_reset_error>
 800ea86:	9803      	ldr	r0, [sp, #12]
 800ea88:	b00f      	add	sp, #60	@ 0x3c
 800ea8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea8e:	200b      	movs	r0, #11
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop

0800ea94 <rclc_publisher_init_default>:
 800ea94:	b368      	cbz	r0, 800eaf2 <rclc_publisher_init_default+0x5e>
 800ea96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea9a:	460d      	mov	r5, r1
 800ea9c:	b09e      	sub	sp, #120	@ 0x78
 800ea9e:	b321      	cbz	r1, 800eaea <rclc_publisher_init_default+0x56>
 800eaa0:	4616      	mov	r6, r2
 800eaa2:	b312      	cbz	r2, 800eaea <rclc_publisher_init_default+0x56>
 800eaa4:	461f      	mov	r7, r3
 800eaa6:	b303      	cbz	r3, 800eaea <rclc_publisher_init_default+0x56>
 800eaa8:	4604      	mov	r4, r0
 800eaaa:	f7ff fae5 	bl	800e078 <rcl_get_zero_initialized_publisher>
 800eaae:	f10d 0810 	add.w	r8, sp, #16
 800eab2:	6020      	str	r0, [r4, #0]
 800eab4:	4640      	mov	r0, r8
 800eab6:	f7ff fbdb 	bl	800e270 <rcl_publisher_get_default_options>
 800eaba:	490f      	ldr	r1, [pc, #60]	@ (800eaf8 <rclc_publisher_init_default+0x64>)
 800eabc:	2250      	movs	r2, #80	@ 0x50
 800eabe:	4640      	mov	r0, r8
 800eac0:	f00b ff4b 	bl	801a95a <memcpy>
 800eac4:	f8cd 8000 	str.w	r8, [sp]
 800eac8:	463b      	mov	r3, r7
 800eaca:	4632      	mov	r2, r6
 800eacc:	4629      	mov	r1, r5
 800eace:	4620      	mov	r0, r4
 800ead0:	f7ff fad8 	bl	800e084 <rcl_publisher_init>
 800ead4:	b910      	cbnz	r0, 800eadc <rclc_publisher_init_default+0x48>
 800ead6:	b01e      	add	sp, #120	@ 0x78
 800ead8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eadc:	9003      	str	r0, [sp, #12]
 800eade:	f000 f8a9 	bl	800ec34 <rcutils_reset_error>
 800eae2:	9803      	ldr	r0, [sp, #12]
 800eae4:	b01e      	add	sp, #120	@ 0x78
 800eae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaea:	200b      	movs	r0, #11
 800eaec:	b01e      	add	sp, #120	@ 0x78
 800eaee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf2:	200b      	movs	r0, #11
 800eaf4:	4770      	bx	lr
 800eaf6:	bf00      	nop
 800eaf8:	0801df60 	.word	0x0801df60

0800eafc <rclc_subscription_init_default>:
 800eafc:	b368      	cbz	r0, 800eb5a <rclc_subscription_init_default+0x5e>
 800eafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb02:	460d      	mov	r5, r1
 800eb04:	b0a0      	sub	sp, #128	@ 0x80
 800eb06:	b321      	cbz	r1, 800eb52 <rclc_subscription_init_default+0x56>
 800eb08:	4616      	mov	r6, r2
 800eb0a:	b312      	cbz	r2, 800eb52 <rclc_subscription_init_default+0x56>
 800eb0c:	461f      	mov	r7, r3
 800eb0e:	b303      	cbz	r3, 800eb52 <rclc_subscription_init_default+0x56>
 800eb10:	4604      	mov	r4, r0
 800eb12:	f006 f945 	bl	8014da0 <rcl_get_zero_initialized_subscription>
 800eb16:	f10d 0810 	add.w	r8, sp, #16
 800eb1a:	6020      	str	r0, [r4, #0]
 800eb1c:	4640      	mov	r0, r8
 800eb1e:	f006 fa3b 	bl	8014f98 <rcl_subscription_get_default_options>
 800eb22:	490f      	ldr	r1, [pc, #60]	@ (800eb60 <rclc_subscription_init_default+0x64>)
 800eb24:	2250      	movs	r2, #80	@ 0x50
 800eb26:	4640      	mov	r0, r8
 800eb28:	f00b ff17 	bl	801a95a <memcpy>
 800eb2c:	f8cd 8000 	str.w	r8, [sp]
 800eb30:	463b      	mov	r3, r7
 800eb32:	4632      	mov	r2, r6
 800eb34:	4629      	mov	r1, r5
 800eb36:	4620      	mov	r0, r4
 800eb38:	f006 f938 	bl	8014dac <rcl_subscription_init>
 800eb3c:	b910      	cbnz	r0, 800eb44 <rclc_subscription_init_default+0x48>
 800eb3e:	b020      	add	sp, #128	@ 0x80
 800eb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb44:	9003      	str	r0, [sp, #12]
 800eb46:	f000 f875 	bl	800ec34 <rcutils_reset_error>
 800eb4a:	9803      	ldr	r0, [sp, #12]
 800eb4c:	b020      	add	sp, #128	@ 0x80
 800eb4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb52:	200b      	movs	r0, #11
 800eb54:	b020      	add	sp, #128	@ 0x80
 800eb56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb5a:	200b      	movs	r0, #11
 800eb5c:	4770      	bx	lr
 800eb5e:	bf00      	nop
 800eb60:	0801dfb0 	.word	0x0801dfb0

0800eb64 <__default_zero_allocate>:
 800eb64:	f00a ba7e 	b.w	8019064 <calloc>

0800eb68 <__default_reallocate>:
 800eb68:	f00a bc0a 	b.w	8019380 <realloc>

0800eb6c <__default_deallocate>:
 800eb6c:	f00a bae6 	b.w	801913c <free>

0800eb70 <__default_allocate>:
 800eb70:	f00a badc 	b.w	801912c <malloc>

0800eb74 <rcutils_get_zero_initialized_allocator>:
 800eb74:	b470      	push	{r4, r5, r6}
 800eb76:	4d05      	ldr	r5, [pc, #20]	@ (800eb8c <rcutils_get_zero_initialized_allocator+0x18>)
 800eb78:	4606      	mov	r6, r0
 800eb7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb7c:	4634      	mov	r4, r6
 800eb7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb80:	682b      	ldr	r3, [r5, #0]
 800eb82:	6023      	str	r3, [r4, #0]
 800eb84:	4630      	mov	r0, r6
 800eb86:	bc70      	pop	{r4, r5, r6}
 800eb88:	4770      	bx	lr
 800eb8a:	bf00      	nop
 800eb8c:	0801e000 	.word	0x0801e000

0800eb90 <rcutils_set_default_allocator>:
 800eb90:	b1a0      	cbz	r0, 800ebbc <rcutils_set_default_allocator+0x2c>
 800eb92:	6801      	ldr	r1, [r0, #0]
 800eb94:	b199      	cbz	r1, 800ebbe <rcutils_set_default_allocator+0x2e>
 800eb96:	b430      	push	{r4, r5}
 800eb98:	6844      	ldr	r4, [r0, #4]
 800eb9a:	b194      	cbz	r4, 800ebc2 <rcutils_set_default_allocator+0x32>
 800eb9c:	68c5      	ldr	r5, [r0, #12]
 800eb9e:	b15d      	cbz	r5, 800ebb8 <rcutils_set_default_allocator+0x28>
 800eba0:	6883      	ldr	r3, [r0, #8]
 800eba2:	b18b      	cbz	r3, 800ebc8 <rcutils_set_default_allocator+0x38>
 800eba4:	4a09      	ldr	r2, [pc, #36]	@ (800ebcc <rcutils_set_default_allocator+0x3c>)
 800eba6:	e9c2 1400 	strd	r1, r4, [r2]
 800ebaa:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800ebae:	2000      	movs	r0, #0
 800ebb0:	6110      	str	r0, [r2, #16]
 800ebb2:	2001      	movs	r0, #1
 800ebb4:	bc30      	pop	{r4, r5}
 800ebb6:	4770      	bx	lr
 800ebb8:	4628      	mov	r0, r5
 800ebba:	e7fb      	b.n	800ebb4 <rcutils_set_default_allocator+0x24>
 800ebbc:	4770      	bx	lr
 800ebbe:	4608      	mov	r0, r1
 800ebc0:	4770      	bx	lr
 800ebc2:	4620      	mov	r0, r4
 800ebc4:	bc30      	pop	{r4, r5}
 800ebc6:	4770      	bx	lr
 800ebc8:	4618      	mov	r0, r3
 800ebca:	e7f3      	b.n	800ebb4 <rcutils_set_default_allocator+0x24>
 800ebcc:	20000044 	.word	0x20000044

0800ebd0 <rcutils_get_default_allocator>:
 800ebd0:	b470      	push	{r4, r5, r6}
 800ebd2:	4d05      	ldr	r5, [pc, #20]	@ (800ebe8 <rcutils_get_default_allocator+0x18>)
 800ebd4:	4606      	mov	r6, r0
 800ebd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ebd8:	4634      	mov	r4, r6
 800ebda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ebdc:	682b      	ldr	r3, [r5, #0]
 800ebde:	6023      	str	r3, [r4, #0]
 800ebe0:	4630      	mov	r0, r6
 800ebe2:	bc70      	pop	{r4, r5, r6}
 800ebe4:	4770      	bx	lr
 800ebe6:	bf00      	nop
 800ebe8:	20000044 	.word	0x20000044

0800ebec <rcutils_allocator_is_valid>:
 800ebec:	b158      	cbz	r0, 800ec06 <rcutils_allocator_is_valid+0x1a>
 800ebee:	6803      	ldr	r3, [r0, #0]
 800ebf0:	b143      	cbz	r3, 800ec04 <rcutils_allocator_is_valid+0x18>
 800ebf2:	6843      	ldr	r3, [r0, #4]
 800ebf4:	b133      	cbz	r3, 800ec04 <rcutils_allocator_is_valid+0x18>
 800ebf6:	68c3      	ldr	r3, [r0, #12]
 800ebf8:	b123      	cbz	r3, 800ec04 <rcutils_allocator_is_valid+0x18>
 800ebfa:	6880      	ldr	r0, [r0, #8]
 800ebfc:	3800      	subs	r0, #0
 800ebfe:	bf18      	it	ne
 800ec00:	2001      	movne	r0, #1
 800ec02:	4770      	bx	lr
 800ec04:	4618      	mov	r0, r3
 800ec06:	4770      	bx	lr

0800ec08 <rcutils_get_error_string>:
 800ec08:	4b06      	ldr	r3, [pc, #24]	@ (800ec24 <rcutils_get_error_string+0x1c>)
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	b13b      	cbz	r3, 800ec1e <rcutils_get_error_string+0x16>
 800ec0e:	4b06      	ldr	r3, [pc, #24]	@ (800ec28 <rcutils_get_error_string+0x20>)
 800ec10:	781a      	ldrb	r2, [r3, #0]
 800ec12:	b90a      	cbnz	r2, 800ec18 <rcutils_get_error_string+0x10>
 800ec14:	2201      	movs	r2, #1
 800ec16:	701a      	strb	r2, [r3, #0]
 800ec18:	4b04      	ldr	r3, [pc, #16]	@ (800ec2c <rcutils_get_error_string+0x24>)
 800ec1a:	7818      	ldrb	r0, [r3, #0]
 800ec1c:	4770      	bx	lr
 800ec1e:	4b04      	ldr	r3, [pc, #16]	@ (800ec30 <rcutils_get_error_string+0x28>)
 800ec20:	7818      	ldrb	r0, [r3, #0]
 800ec22:	4770      	bx	lr
 800ec24:	20009d18 	.word	0x20009d18
 800ec28:	20009d19 	.word	0x20009d19
 800ec2c:	20009ff0 	.word	0x20009ff0
 800ec30:	0801e014 	.word	0x0801e014

0800ec34 <rcutils_reset_error>:
 800ec34:	b4d0      	push	{r4, r6, r7}
 800ec36:	4a07      	ldr	r2, [pc, #28]	@ (800ec54 <rcutils_reset_error+0x20>)
 800ec38:	4807      	ldr	r0, [pc, #28]	@ (800ec58 <rcutils_reset_error+0x24>)
 800ec3a:	4c08      	ldr	r4, [pc, #32]	@ (800ec5c <rcutils_reset_error+0x28>)
 800ec3c:	4908      	ldr	r1, [pc, #32]	@ (800ec60 <rcutils_reset_error+0x2c>)
 800ec3e:	2300      	movs	r3, #0
 800ec40:	2600      	movs	r6, #0
 800ec42:	2700      	movs	r7, #0
 800ec44:	8013      	strh	r3, [r2, #0]
 800ec46:	7003      	strb	r3, [r0, #0]
 800ec48:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800ec4c:	7023      	strb	r3, [r4, #0]
 800ec4e:	700b      	strb	r3, [r1, #0]
 800ec50:	bcd0      	pop	{r4, r6, r7}
 800ec52:	4770      	bx	lr
 800ec54:	20009ff8 	.word	0x20009ff8
 800ec58:	20009ff0 	.word	0x20009ff0
 800ec5c:	20009d19 	.word	0x20009d19
 800ec60:	20009d18 	.word	0x20009d18

0800ec64 <rcutils_get_zero_initialized_string_map>:
 800ec64:	4b01      	ldr	r3, [pc, #4]	@ (800ec6c <rcutils_get_zero_initialized_string_map+0x8>)
 800ec66:	2000      	movs	r0, #0
 800ec68:	6018      	str	r0, [r3, #0]
 800ec6a:	4770      	bx	lr
 800ec6c:	20009d1c 	.word	0x20009d1c

0800ec70 <rcutils_string_map_reserve>:
 800ec70:	2800      	cmp	r0, #0
 800ec72:	d061      	beq.n	800ed38 <rcutils_string_map_reserve+0xc8>
 800ec74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec78:	6805      	ldr	r5, [r0, #0]
 800ec7a:	b083      	sub	sp, #12
 800ec7c:	460c      	mov	r4, r1
 800ec7e:	4606      	mov	r6, r0
 800ec80:	b12d      	cbz	r5, 800ec8e <rcutils_string_map_reserve+0x1e>
 800ec82:	68eb      	ldr	r3, [r5, #12]
 800ec84:	42a3      	cmp	r3, r4
 800ec86:	d906      	bls.n	800ec96 <rcutils_string_map_reserve+0x26>
 800ec88:	461c      	mov	r4, r3
 800ec8a:	2d00      	cmp	r5, #0
 800ec8c:	d1f9      	bne.n	800ec82 <rcutils_string_map_reserve+0x12>
 800ec8e:	201f      	movs	r0, #31
 800ec90:	b003      	add	sp, #12
 800ec92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec96:	68ab      	ldr	r3, [r5, #8]
 800ec98:	42a3      	cmp	r3, r4
 800ec9a:	d049      	beq.n	800ed30 <rcutils_string_map_reserve+0xc0>
 800ec9c:	6a2f      	ldr	r7, [r5, #32]
 800ec9e:	2c00      	cmp	r4, #0
 800eca0:	d035      	beq.n	800ed0e <rcutils_string_map_reserve+0x9e>
 800eca2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800eca6:	d245      	bcs.n	800ed34 <rcutils_string_map_reserve+0xc4>
 800eca8:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800ecac:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800ecb0:	6828      	ldr	r0, [r5, #0]
 800ecb2:	4641      	mov	r1, r8
 800ecb4:	463a      	mov	r2, r7
 800ecb6:	47c8      	blx	r9
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	d03b      	beq.n	800ed34 <rcutils_string_map_reserve+0xc4>
 800ecbc:	6833      	ldr	r3, [r6, #0]
 800ecbe:	463a      	mov	r2, r7
 800ecc0:	6018      	str	r0, [r3, #0]
 800ecc2:	4641      	mov	r1, r8
 800ecc4:	6858      	ldr	r0, [r3, #4]
 800ecc6:	47c8      	blx	r9
 800ecc8:	2800      	cmp	r0, #0
 800ecca:	d033      	beq.n	800ed34 <rcutils_string_map_reserve+0xc4>
 800eccc:	6835      	ldr	r5, [r6, #0]
 800ecce:	68ab      	ldr	r3, [r5, #8]
 800ecd0:	6068      	str	r0, [r5, #4]
 800ecd2:	42a3      	cmp	r3, r4
 800ecd4:	d227      	bcs.n	800ed26 <rcutils_string_map_reserve+0xb6>
 800ecd6:	682a      	ldr	r2, [r5, #0]
 800ecd8:	eb00 0108 	add.w	r1, r0, r8
 800ecdc:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800ece0:	428f      	cmp	r7, r1
 800ece2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800ece6:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800ecea:	d203      	bcs.n	800ecf4 <rcutils_string_map_reserve+0x84>
 800ecec:	eb02 0108 	add.w	r1, r2, r8
 800ecf0:	428e      	cmp	r6, r1
 800ecf2:	d323      	bcc.n	800ed3c <rcutils_string_map_reserve+0xcc>
 800ecf4:	1ae3      	subs	r3, r4, r3
 800ecf6:	009a      	lsls	r2, r3, #2
 800ecf8:	4638      	mov	r0, r7
 800ecfa:	2100      	movs	r1, #0
 800ecfc:	9201      	str	r2, [sp, #4]
 800ecfe:	f00b fd09 	bl	801a714 <memset>
 800ed02:	9a01      	ldr	r2, [sp, #4]
 800ed04:	4630      	mov	r0, r6
 800ed06:	2100      	movs	r1, #0
 800ed08:	f00b fd04 	bl	801a714 <memset>
 800ed0c:	e00b      	b.n	800ed26 <rcutils_string_map_reserve+0xb6>
 800ed0e:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800ed12:	6828      	ldr	r0, [r5, #0]
 800ed14:	4639      	mov	r1, r7
 800ed16:	47c0      	blx	r8
 800ed18:	6833      	ldr	r3, [r6, #0]
 800ed1a:	4639      	mov	r1, r7
 800ed1c:	6858      	ldr	r0, [r3, #4]
 800ed1e:	601c      	str	r4, [r3, #0]
 800ed20:	47c0      	blx	r8
 800ed22:	6835      	ldr	r5, [r6, #0]
 800ed24:	606c      	str	r4, [r5, #4]
 800ed26:	2000      	movs	r0, #0
 800ed28:	60ac      	str	r4, [r5, #8]
 800ed2a:	b003      	add	sp, #12
 800ed2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed30:	2000      	movs	r0, #0
 800ed32:	e7ad      	b.n	800ec90 <rcutils_string_map_reserve+0x20>
 800ed34:	200a      	movs	r0, #10
 800ed36:	e7ab      	b.n	800ec90 <rcutils_string_map_reserve+0x20>
 800ed38:	200b      	movs	r0, #11
 800ed3a:	4770      	bx	lr
 800ed3c:	1f13      	subs	r3, r2, #4
 800ed3e:	f1ac 0c04 	sub.w	ip, ip, #4
 800ed42:	4498      	add	r8, r3
 800ed44:	4460      	add	r0, ip
 800ed46:	4462      	add	r2, ip
 800ed48:	2300      	movs	r3, #0
 800ed4a:	f842 3f04 	str.w	r3, [r2, #4]!
 800ed4e:	4542      	cmp	r2, r8
 800ed50:	f840 3f04 	str.w	r3, [r0, #4]!
 800ed54:	d1f9      	bne.n	800ed4a <rcutils_string_map_reserve+0xda>
 800ed56:	e7e6      	b.n	800ed26 <rcutils_string_map_reserve+0xb6>

0800ed58 <rcutils_string_map_init>:
 800ed58:	b082      	sub	sp, #8
 800ed5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed5c:	460e      	mov	r6, r1
 800ed5e:	a906      	add	r1, sp, #24
 800ed60:	e881 000c 	stmia.w	r1, {r2, r3}
 800ed64:	b380      	cbz	r0, 800edc8 <rcutils_string_map_init+0x70>
 800ed66:	6807      	ldr	r7, [r0, #0]
 800ed68:	4604      	mov	r4, r0
 800ed6a:	b12f      	cbz	r7, 800ed78 <rcutils_string_map_init+0x20>
 800ed6c:	251e      	movs	r5, #30
 800ed6e:	4628      	mov	r0, r5
 800ed70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ed74:	b002      	add	sp, #8
 800ed76:	4770      	bx	lr
 800ed78:	a806      	add	r0, sp, #24
 800ed7a:	f7ff ff37 	bl	800ebec <rcutils_allocator_is_valid>
 800ed7e:	b318      	cbz	r0, 800edc8 <rcutils_string_map_init+0x70>
 800ed80:	9b06      	ldr	r3, [sp, #24]
 800ed82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed84:	2024      	movs	r0, #36	@ 0x24
 800ed86:	4798      	blx	r3
 800ed88:	4605      	mov	r5, r0
 800ed8a:	6020      	str	r0, [r4, #0]
 800ed8c:	b310      	cbz	r0, 800edd4 <rcutils_string_map_init+0x7c>
 800ed8e:	f10d 0e18 	add.w	lr, sp, #24
 800ed92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ed96:	f105 0c10 	add.w	ip, r5, #16
 800ed9a:	e9c5 7700 	strd	r7, r7, [r5]
 800ed9e:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800eda2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eda6:	f8de 3000 	ldr.w	r3, [lr]
 800edaa:	f8cc 3000 	str.w	r3, [ip]
 800edae:	4631      	mov	r1, r6
 800edb0:	4620      	mov	r0, r4
 800edb2:	f7ff ff5d 	bl	800ec70 <rcutils_string_map_reserve>
 800edb6:	4605      	mov	r5, r0
 800edb8:	2800      	cmp	r0, #0
 800edba:	d0d8      	beq.n	800ed6e <rcutils_string_map_init+0x16>
 800edbc:	9b07      	ldr	r3, [sp, #28]
 800edbe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800edc0:	6820      	ldr	r0, [r4, #0]
 800edc2:	4798      	blx	r3
 800edc4:	6027      	str	r7, [r4, #0]
 800edc6:	e7d2      	b.n	800ed6e <rcutils_string_map_init+0x16>
 800edc8:	250b      	movs	r5, #11
 800edca:	4628      	mov	r0, r5
 800edcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800edd0:	b002      	add	sp, #8
 800edd2:	4770      	bx	lr
 800edd4:	250a      	movs	r5, #10
 800edd6:	e7ca      	b.n	800ed6e <rcutils_string_map_init+0x16>

0800edd8 <rcutils_string_map_fini>:
 800edd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eddc:	b082      	sub	sp, #8
 800edde:	2800      	cmp	r0, #0
 800ede0:	d039      	beq.n	800ee56 <rcutils_string_map_fini+0x7e>
 800ede2:	6804      	ldr	r4, [r0, #0]
 800ede4:	4606      	mov	r6, r0
 800ede6:	2c00      	cmp	r4, #0
 800ede8:	d031      	beq.n	800ee4e <rcutils_string_map_fini+0x76>
 800edea:	68a3      	ldr	r3, [r4, #8]
 800edec:	b323      	cbz	r3, 800ee38 <rcutils_string_map_fini+0x60>
 800edee:	2500      	movs	r5, #0
 800edf0:	6822      	ldr	r2, [r4, #0]
 800edf2:	46a8      	mov	r8, r5
 800edf4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800edf8:	b1d8      	cbz	r0, 800ee32 <rcutils_string_map_fini+0x5a>
 800edfa:	6a21      	ldr	r1, [r4, #32]
 800edfc:	6967      	ldr	r7, [r4, #20]
 800edfe:	9101      	str	r1, [sp, #4]
 800ee00:	47b8      	blx	r7
 800ee02:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ee06:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800ee0a:	9901      	ldr	r1, [sp, #4]
 800ee0c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ee10:	47b8      	blx	r7
 800ee12:	68e3      	ldr	r3, [r4, #12]
 800ee14:	6862      	ldr	r2, [r4, #4]
 800ee16:	3b01      	subs	r3, #1
 800ee18:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800ee1c:	60e3      	str	r3, [r4, #12]
 800ee1e:	6834      	ldr	r4, [r6, #0]
 800ee20:	68a3      	ldr	r3, [r4, #8]
 800ee22:	3501      	adds	r5, #1
 800ee24:	429d      	cmp	r5, r3
 800ee26:	d207      	bcs.n	800ee38 <rcutils_string_map_fini+0x60>
 800ee28:	6822      	ldr	r2, [r4, #0]
 800ee2a:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800ee2e:	2800      	cmp	r0, #0
 800ee30:	d1e3      	bne.n	800edfa <rcutils_string_map_fini+0x22>
 800ee32:	3501      	adds	r5, #1
 800ee34:	429d      	cmp	r5, r3
 800ee36:	d3dd      	bcc.n	800edf4 <rcutils_string_map_fini+0x1c>
 800ee38:	2100      	movs	r1, #0
 800ee3a:	4630      	mov	r0, r6
 800ee3c:	f7ff ff18 	bl	800ec70 <rcutils_string_map_reserve>
 800ee40:	4604      	mov	r4, r0
 800ee42:	b920      	cbnz	r0, 800ee4e <rcutils_string_map_fini+0x76>
 800ee44:	6830      	ldr	r0, [r6, #0]
 800ee46:	6943      	ldr	r3, [r0, #20]
 800ee48:	6a01      	ldr	r1, [r0, #32]
 800ee4a:	4798      	blx	r3
 800ee4c:	6034      	str	r4, [r6, #0]
 800ee4e:	4620      	mov	r0, r4
 800ee50:	b002      	add	sp, #8
 800ee52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee56:	240b      	movs	r4, #11
 800ee58:	4620      	mov	r0, r4
 800ee5a:	b002      	add	sp, #8
 800ee5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ee60 <rcutils_string_map_getn>:
 800ee60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee64:	b082      	sub	sp, #8
 800ee66:	b308      	cbz	r0, 800eeac <rcutils_string_map_getn+0x4c>
 800ee68:	6804      	ldr	r4, [r0, #0]
 800ee6a:	b304      	cbz	r4, 800eeae <rcutils_string_map_getn+0x4e>
 800ee6c:	460d      	mov	r5, r1
 800ee6e:	b1e9      	cbz	r1, 800eeac <rcutils_string_map_getn+0x4c>
 800ee70:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800ee74:	6827      	ldr	r7, [r4, #0]
 800ee76:	f1b9 0f00 	cmp.w	r9, #0
 800ee7a:	d017      	beq.n	800eeac <rcutils_string_map_getn+0x4c>
 800ee7c:	4690      	mov	r8, r2
 800ee7e:	3f04      	subs	r7, #4
 800ee80:	2600      	movs	r6, #0
 800ee82:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800ee86:	9101      	str	r1, [sp, #4]
 800ee88:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800ee8c:	4608      	mov	r0, r1
 800ee8e:	3601      	adds	r6, #1
 800ee90:	b151      	cbz	r1, 800eea8 <rcutils_string_map_getn+0x48>
 800ee92:	f7f1 fa05 	bl	80002a0 <strlen>
 800ee96:	4540      	cmp	r0, r8
 800ee98:	4602      	mov	r2, r0
 800ee9a:	9901      	ldr	r1, [sp, #4]
 800ee9c:	bf38      	it	cc
 800ee9e:	4642      	movcc	r2, r8
 800eea0:	4628      	mov	r0, r5
 800eea2:	f00b fc4c 	bl	801a73e <strncmp>
 800eea6:	b130      	cbz	r0, 800eeb6 <rcutils_string_map_getn+0x56>
 800eea8:	45b1      	cmp	r9, r6
 800eeaa:	d1ea      	bne.n	800ee82 <rcutils_string_map_getn+0x22>
 800eeac:	2400      	movs	r4, #0
 800eeae:	4620      	mov	r0, r4
 800eeb0:	b002      	add	sp, #8
 800eeb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeb6:	6863      	ldr	r3, [r4, #4]
 800eeb8:	f853 400a 	ldr.w	r4, [r3, sl]
 800eebc:	4620      	mov	r0, r4
 800eebe:	b002      	add	sp, #8
 800eec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800eec4 <rcutils_system_time_now>:
 800eec4:	b310      	cbz	r0, 800ef0c <rcutils_system_time_now+0x48>
 800eec6:	b570      	push	{r4, r5, r6, lr}
 800eec8:	b084      	sub	sp, #16
 800eeca:	4669      	mov	r1, sp
 800eecc:	4604      	mov	r4, r0
 800eece:	2001      	movs	r0, #1
 800eed0:	f7f4 f98e 	bl	80031f0 <clock_gettime>
 800eed4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eed8:	2800      	cmp	r0, #0
 800eeda:	f171 0300 	sbcs.w	r3, r1, #0
 800eede:	db12      	blt.n	800ef06 <rcutils_system_time_now+0x42>
 800eee0:	9d02      	ldr	r5, [sp, #8]
 800eee2:	2d00      	cmp	r5, #0
 800eee4:	db0c      	blt.n	800ef00 <rcutils_system_time_now+0x3c>
 800eee6:	4e0a      	ldr	r6, [pc, #40]	@ (800ef10 <rcutils_system_time_now+0x4c>)
 800eee8:	fba0 2306 	umull	r2, r3, r0, r6
 800eeec:	1952      	adds	r2, r2, r5
 800eeee:	fb06 3301 	mla	r3, r6, r1, r3
 800eef2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800eef6:	2000      	movs	r0, #0
 800eef8:	e9c4 2300 	strd	r2, r3, [r4]
 800eefc:	b004      	add	sp, #16
 800eefe:	bd70      	pop	{r4, r5, r6, pc}
 800ef00:	ea50 0301 	orrs.w	r3, r0, r1
 800ef04:	d1ef      	bne.n	800eee6 <rcutils_system_time_now+0x22>
 800ef06:	2002      	movs	r0, #2
 800ef08:	b004      	add	sp, #16
 800ef0a:	bd70      	pop	{r4, r5, r6, pc}
 800ef0c:	200b      	movs	r0, #11
 800ef0e:	4770      	bx	lr
 800ef10:	3b9aca00 	.word	0x3b9aca00

0800ef14 <rcutils_steady_time_now>:
 800ef14:	b310      	cbz	r0, 800ef5c <rcutils_steady_time_now+0x48>
 800ef16:	b570      	push	{r4, r5, r6, lr}
 800ef18:	b084      	sub	sp, #16
 800ef1a:	4669      	mov	r1, sp
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	2000      	movs	r0, #0
 800ef20:	f7f4 f966 	bl	80031f0 <clock_gettime>
 800ef24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef28:	2800      	cmp	r0, #0
 800ef2a:	f171 0300 	sbcs.w	r3, r1, #0
 800ef2e:	db12      	blt.n	800ef56 <rcutils_steady_time_now+0x42>
 800ef30:	9d02      	ldr	r5, [sp, #8]
 800ef32:	2d00      	cmp	r5, #0
 800ef34:	db0c      	blt.n	800ef50 <rcutils_steady_time_now+0x3c>
 800ef36:	4e0a      	ldr	r6, [pc, #40]	@ (800ef60 <rcutils_steady_time_now+0x4c>)
 800ef38:	fba0 2306 	umull	r2, r3, r0, r6
 800ef3c:	1952      	adds	r2, r2, r5
 800ef3e:	fb06 3301 	mla	r3, r6, r1, r3
 800ef42:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800ef46:	2000      	movs	r0, #0
 800ef48:	e9c4 2300 	strd	r2, r3, [r4]
 800ef4c:	b004      	add	sp, #16
 800ef4e:	bd70      	pop	{r4, r5, r6, pc}
 800ef50:	ea50 0301 	orrs.w	r3, r0, r1
 800ef54:	d1ef      	bne.n	800ef36 <rcutils_steady_time_now+0x22>
 800ef56:	2002      	movs	r0, #2
 800ef58:	b004      	add	sp, #16
 800ef5a:	bd70      	pop	{r4, r5, r6, pc}
 800ef5c:	200b      	movs	r0, #11
 800ef5e:	4770      	bx	lr
 800ef60:	3b9aca00 	.word	0x3b9aca00

0800ef64 <rmw_get_zero_initialized_init_options>:
 800ef64:	b510      	push	{r4, lr}
 800ef66:	2238      	movs	r2, #56	@ 0x38
 800ef68:	4604      	mov	r4, r0
 800ef6a:	2100      	movs	r1, #0
 800ef6c:	f00b fbd2 	bl	801a714 <memset>
 800ef70:	f104 0010 	add.w	r0, r4, #16
 800ef74:	f000 f808 	bl	800ef88 <rmw_get_default_security_options>
 800ef78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ef7c:	60e3      	str	r3, [r4, #12]
 800ef7e:	4620      	mov	r0, r4
 800ef80:	bd10      	pop	{r4, pc}
 800ef82:	bf00      	nop

0800ef84 <rmw_get_default_publisher_options>:
 800ef84:	2000      	movs	r0, #0
 800ef86:	4770      	bx	lr

0800ef88 <rmw_get_default_security_options>:
 800ef88:	2200      	movs	r2, #0
 800ef8a:	7002      	strb	r2, [r0, #0]
 800ef8c:	6042      	str	r2, [r0, #4]
 800ef8e:	4770      	bx	lr

0800ef90 <rmw_validate_full_topic_name>:
 800ef90:	2800      	cmp	r0, #0
 800ef92:	d062      	beq.n	800f05a <rmw_validate_full_topic_name+0xca>
 800ef94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef98:	460d      	mov	r5, r1
 800ef9a:	2900      	cmp	r1, #0
 800ef9c:	d05f      	beq.n	800f05e <rmw_validate_full_topic_name+0xce>
 800ef9e:	4616      	mov	r6, r2
 800efa0:	4604      	mov	r4, r0
 800efa2:	f7f1 f97d 	bl	80002a0 <strlen>
 800efa6:	b148      	cbz	r0, 800efbc <rmw_validate_full_topic_name+0x2c>
 800efa8:	7823      	ldrb	r3, [r4, #0]
 800efaa:	2b2f      	cmp	r3, #47	@ 0x2f
 800efac:	d00d      	beq.n	800efca <rmw_validate_full_topic_name+0x3a>
 800efae:	2302      	movs	r3, #2
 800efb0:	602b      	str	r3, [r5, #0]
 800efb2:	b13e      	cbz	r6, 800efc4 <rmw_validate_full_topic_name+0x34>
 800efb4:	2000      	movs	r0, #0
 800efb6:	6030      	str	r0, [r6, #0]
 800efb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efbc:	2301      	movs	r3, #1
 800efbe:	602b      	str	r3, [r5, #0]
 800efc0:	2e00      	cmp	r6, #0
 800efc2:	d1f7      	bne.n	800efb4 <rmw_validate_full_topic_name+0x24>
 800efc4:	2000      	movs	r0, #0
 800efc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efca:	1e47      	subs	r7, r0, #1
 800efcc:	5de3      	ldrb	r3, [r4, r7]
 800efce:	2b2f      	cmp	r3, #47	@ 0x2f
 800efd0:	d047      	beq.n	800f062 <rmw_validate_full_topic_name+0xd2>
 800efd2:	1e63      	subs	r3, r4, #1
 800efd4:	eb03 0900 	add.w	r9, r3, r0
 800efd8:	f1c4 0e01 	rsb	lr, r4, #1
 800efdc:	eb0e 0803 	add.w	r8, lr, r3
 800efe0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800efe4:	f021 0220 	bic.w	r2, r1, #32
 800efe8:	3a41      	subs	r2, #65	@ 0x41
 800efea:	2a19      	cmp	r2, #25
 800efec:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800eff0:	d90c      	bls.n	800f00c <rmw_validate_full_topic_name+0x7c>
 800eff2:	295f      	cmp	r1, #95	@ 0x5f
 800eff4:	d00a      	beq.n	800f00c <rmw_validate_full_topic_name+0x7c>
 800eff6:	f1bc 0f0a 	cmp.w	ip, #10
 800effa:	d907      	bls.n	800f00c <rmw_validate_full_topic_name+0x7c>
 800effc:	2304      	movs	r3, #4
 800effe:	602b      	str	r3, [r5, #0]
 800f000:	2e00      	cmp	r6, #0
 800f002:	d0df      	beq.n	800efc4 <rmw_validate_full_topic_name+0x34>
 800f004:	f8c6 8000 	str.w	r8, [r6]
 800f008:	2000      	movs	r0, #0
 800f00a:	e7d5      	b.n	800efb8 <rmw_validate_full_topic_name+0x28>
 800f00c:	454b      	cmp	r3, r9
 800f00e:	d1e5      	bne.n	800efdc <rmw_validate_full_topic_name+0x4c>
 800f010:	f8df e084 	ldr.w	lr, [pc, #132]	@ 800f098 <rmw_validate_full_topic_name+0x108>
 800f014:	2300      	movs	r3, #0
 800f016:	f107 0801 	add.w	r8, r7, #1
 800f01a:	e005      	b.n	800f028 <rmw_validate_full_topic_name+0x98>
 800f01c:	4611      	mov	r1, r2
 800f01e:	4288      	cmp	r0, r1
 800f020:	4613      	mov	r3, r2
 800f022:	f104 0401 	add.w	r4, r4, #1
 800f026:	d925      	bls.n	800f074 <rmw_validate_full_topic_name+0xe4>
 800f028:	429f      	cmp	r7, r3
 800f02a:	f103 0201 	add.w	r2, r3, #1
 800f02e:	d01e      	beq.n	800f06e <rmw_validate_full_topic_name+0xde>
 800f030:	7821      	ldrb	r1, [r4, #0]
 800f032:	292f      	cmp	r1, #47	@ 0x2f
 800f034:	d1f2      	bne.n	800f01c <rmw_validate_full_topic_name+0x8c>
 800f036:	f894 c001 	ldrb.w	ip, [r4, #1]
 800f03a:	1c5a      	adds	r2, r3, #1
 800f03c:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 800f040:	4611      	mov	r1, r2
 800f042:	d024      	beq.n	800f08e <rmw_validate_full_topic_name+0xfe>
 800f044:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800f048:	075b      	lsls	r3, r3, #29
 800f04a:	d5e8      	bpl.n	800f01e <rmw_validate_full_topic_name+0x8e>
 800f04c:	2306      	movs	r3, #6
 800f04e:	602b      	str	r3, [r5, #0]
 800f050:	2e00      	cmp	r6, #0
 800f052:	d0b7      	beq.n	800efc4 <rmw_validate_full_topic_name+0x34>
 800f054:	6032      	str	r2, [r6, #0]
 800f056:	2000      	movs	r0, #0
 800f058:	e7ae      	b.n	800efb8 <rmw_validate_full_topic_name+0x28>
 800f05a:	200b      	movs	r0, #11
 800f05c:	4770      	bx	lr
 800f05e:	200b      	movs	r0, #11
 800f060:	e7aa      	b.n	800efb8 <rmw_validate_full_topic_name+0x28>
 800f062:	2303      	movs	r3, #3
 800f064:	602b      	str	r3, [r5, #0]
 800f066:	2e00      	cmp	r6, #0
 800f068:	d0ac      	beq.n	800efc4 <rmw_validate_full_topic_name+0x34>
 800f06a:	6037      	str	r7, [r6, #0]
 800f06c:	e7aa      	b.n	800efc4 <rmw_validate_full_topic_name+0x34>
 800f06e:	4641      	mov	r1, r8
 800f070:	1c7a      	adds	r2, r7, #1
 800f072:	e7d4      	b.n	800f01e <rmw_validate_full_topic_name+0x8e>
 800f074:	28f7      	cmp	r0, #247	@ 0xf7
 800f076:	d802      	bhi.n	800f07e <rmw_validate_full_topic_name+0xee>
 800f078:	2000      	movs	r0, #0
 800f07a:	6028      	str	r0, [r5, #0]
 800f07c:	e79c      	b.n	800efb8 <rmw_validate_full_topic_name+0x28>
 800f07e:	2307      	movs	r3, #7
 800f080:	602b      	str	r3, [r5, #0]
 800f082:	2e00      	cmp	r6, #0
 800f084:	d09e      	beq.n	800efc4 <rmw_validate_full_topic_name+0x34>
 800f086:	23f6      	movs	r3, #246	@ 0xf6
 800f088:	6033      	str	r3, [r6, #0]
 800f08a:	2000      	movs	r0, #0
 800f08c:	e794      	b.n	800efb8 <rmw_validate_full_topic_name+0x28>
 800f08e:	2305      	movs	r3, #5
 800f090:	602b      	str	r3, [r5, #0]
 800f092:	2e00      	cmp	r6, #0
 800f094:	d1de      	bne.n	800f054 <rmw_validate_full_topic_name+0xc4>
 800f096:	e795      	b.n	800efc4 <rmw_validate_full_topic_name+0x34>
 800f098:	0801e838 	.word	0x0801e838

0800f09c <rmw_uros_set_custom_transport>:
 800f09c:	b470      	push	{r4, r5, r6}
 800f09e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800f0a2:	b162      	cbz	r2, 800f0be <rmw_uros_set_custom_transport+0x22>
 800f0a4:	b15b      	cbz	r3, 800f0be <rmw_uros_set_custom_transport+0x22>
 800f0a6:	b155      	cbz	r5, 800f0be <rmw_uros_set_custom_transport+0x22>
 800f0a8:	b14e      	cbz	r6, 800f0be <rmw_uros_set_custom_transport+0x22>
 800f0aa:	4c06      	ldr	r4, [pc, #24]	@ (800f0c4 <rmw_uros_set_custom_transport+0x28>)
 800f0ac:	7020      	strb	r0, [r4, #0]
 800f0ae:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f0b2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f0b6:	6166      	str	r6, [r4, #20]
 800f0b8:	2000      	movs	r0, #0
 800f0ba:	bc70      	pop	{r4, r5, r6}
 800f0bc:	4770      	bx	lr
 800f0be:	200b      	movs	r0, #11
 800f0c0:	bc70      	pop	{r4, r5, r6}
 800f0c2:	4770      	bx	lr
 800f0c4:	2000a008 	.word	0x2000a008

0800f0c8 <rmw_init_options_init>:
 800f0c8:	b084      	sub	sp, #16
 800f0ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0ce:	ad09      	add	r5, sp, #36	@ 0x24
 800f0d0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f0d4:	b130      	cbz	r0, 800f0e4 <rmw_init_options_init+0x1c>
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	4628      	mov	r0, r5
 800f0da:	f7ff fd87 	bl	800ebec <rcutils_allocator_is_valid>
 800f0de:	b108      	cbz	r0, 800f0e4 <rmw_init_options_init+0x1c>
 800f0e0:	68a3      	ldr	r3, [r4, #8]
 800f0e2:	b123      	cbz	r3, 800f0ee <rmw_init_options_init+0x26>
 800f0e4:	200b      	movs	r0, #11
 800f0e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0ea:	b004      	add	sp, #16
 800f0ec:	4770      	bx	lr
 800f0ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0f0:	4f1c      	ldr	r7, [pc, #112]	@ (800f164 <rmw_init_options_init+0x9c>)
 800f0f2:	682e      	ldr	r6, [r5, #0]
 800f0f4:	683d      	ldr	r5, [r7, #0]
 800f0f6:	60a5      	str	r5, [r4, #8]
 800f0f8:	f04f 0800 	mov.w	r8, #0
 800f0fc:	f04f 0900 	mov.w	r9, #0
 800f100:	f104 0520 	add.w	r5, r4, #32
 800f104:	e9c4 8900 	strd	r8, r9, [r4]
 800f108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f10a:	4b17      	ldr	r3, [pc, #92]	@ (800f168 <rmw_init_options_init+0xa0>)
 800f10c:	4817      	ldr	r0, [pc, #92]	@ (800f16c <rmw_init_options_init+0xa4>)
 800f10e:	602e      	str	r6, [r5, #0]
 800f110:	4917      	ldr	r1, [pc, #92]	@ (800f170 <rmw_init_options_init+0xa8>)
 800f112:	61e3      	str	r3, [r4, #28]
 800f114:	2203      	movs	r2, #3
 800f116:	f000 ff37 	bl	800ff88 <rmw_uxrce_init_init_options_impl_memory>
 800f11a:	4814      	ldr	r0, [pc, #80]	@ (800f16c <rmw_init_options_init+0xa4>)
 800f11c:	f007 fc92 	bl	8016a44 <get_memory>
 800f120:	b1e8      	cbz	r0, 800f15e <rmw_init_options_init+0x96>
 800f122:	4a14      	ldr	r2, [pc, #80]	@ (800f174 <rmw_init_options_init+0xac>)
 800f124:	68c3      	ldr	r3, [r0, #12]
 800f126:	6851      	ldr	r1, [r2, #4]
 800f128:	7810      	ldrb	r0, [r2, #0]
 800f12a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f12c:	7418      	strb	r0, [r3, #16]
 800f12e:	6159      	str	r1, [r3, #20]
 800f130:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800f134:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800f138:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800f13c:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800f140:	f003 fdd4 	bl	8012cec <uxr_nanos>
 800f144:	f00a f8b0 	bl	80192a8 <srand>
 800f148:	f00a f8dc 	bl	8019304 <rand>
 800f14c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f14e:	6298      	str	r0, [r3, #40]	@ 0x28
 800f150:	2800      	cmp	r0, #0
 800f152:	d0f9      	beq.n	800f148 <rmw_init_options_init+0x80>
 800f154:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f158:	2000      	movs	r0, #0
 800f15a:	b004      	add	sp, #16
 800f15c:	4770      	bx	lr
 800f15e:	2001      	movs	r0, #1
 800f160:	e7c1      	b.n	800f0e6 <rmw_init_options_init+0x1e>
 800f162:	bf00      	nop
 800f164:	0801e7ac 	.word	0x0801e7ac
 800f168:	0801e018 	.word	0x0801e018
 800f16c:	2000d324 	.word	0x2000d324
 800f170:	2000cf78 	.word	0x2000cf78
 800f174:	2000a008 	.word	0x2000a008

0800f178 <rmw_init_options_copy>:
 800f178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f17a:	b158      	cbz	r0, 800f194 <rmw_init_options_copy+0x1c>
 800f17c:	460e      	mov	r6, r1
 800f17e:	b149      	cbz	r1, 800f194 <rmw_init_options_copy+0x1c>
 800f180:	4604      	mov	r4, r0
 800f182:	6880      	ldr	r0, [r0, #8]
 800f184:	b120      	cbz	r0, 800f190 <rmw_init_options_copy+0x18>
 800f186:	4b1b      	ldr	r3, [pc, #108]	@ (800f1f4 <rmw_init_options_copy+0x7c>)
 800f188:	6819      	ldr	r1, [r3, #0]
 800f18a:	f7f1 f829 	bl	80001e0 <strcmp>
 800f18e:	bb60      	cbnz	r0, 800f1ea <rmw_init_options_copy+0x72>
 800f190:	68b3      	ldr	r3, [r6, #8]
 800f192:	b113      	cbz	r3, 800f19a <rmw_init_options_copy+0x22>
 800f194:	230b      	movs	r3, #11
 800f196:	4618      	mov	r0, r3
 800f198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f19a:	4623      	mov	r3, r4
 800f19c:	4632      	mov	r2, r6
 800f19e:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800f1a2:	681d      	ldr	r5, [r3, #0]
 800f1a4:	6858      	ldr	r0, [r3, #4]
 800f1a6:	6899      	ldr	r1, [r3, #8]
 800f1a8:	68df      	ldr	r7, [r3, #12]
 800f1aa:	60d7      	str	r7, [r2, #12]
 800f1ac:	3310      	adds	r3, #16
 800f1ae:	4563      	cmp	r3, ip
 800f1b0:	6015      	str	r5, [r2, #0]
 800f1b2:	6050      	str	r0, [r2, #4]
 800f1b4:	6091      	str	r1, [r2, #8]
 800f1b6:	f102 0210 	add.w	r2, r2, #16
 800f1ba:	d1f2      	bne.n	800f1a2 <rmw_init_options_copy+0x2a>
 800f1bc:	6819      	ldr	r1, [r3, #0]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	480d      	ldr	r0, [pc, #52]	@ (800f1f8 <rmw_init_options_copy+0x80>)
 800f1c2:	6053      	str	r3, [r2, #4]
 800f1c4:	6011      	str	r1, [r2, #0]
 800f1c6:	f007 fc3d 	bl	8016a44 <get_memory>
 800f1ca:	b188      	cbz	r0, 800f1f0 <rmw_init_options_copy+0x78>
 800f1cc:	68c5      	ldr	r5, [r0, #12]
 800f1ce:	6375      	str	r5, [r6, #52]	@ 0x34
 800f1d0:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800f1d2:	3610      	adds	r6, #16
 800f1d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f1d6:	f105 0410 	add.w	r4, r5, #16
 800f1da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f1dc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1ea:	230c      	movs	r3, #12
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	e7d0      	b.n	800f196 <rmw_init_options_copy+0x1e>
 800f1f4:	0801e7ac 	.word	0x0801e7ac
 800f1f8:	2000d324 	.word	0x2000d324

0800f1fc <rmw_init_options_fini>:
 800f1fc:	2800      	cmp	r0, #0
 800f1fe:	d036      	beq.n	800f26e <rmw_init_options_fini+0x72>
 800f200:	b530      	push	{r4, r5, lr}
 800f202:	4604      	mov	r4, r0
 800f204:	b08f      	sub	sp, #60	@ 0x3c
 800f206:	3020      	adds	r0, #32
 800f208:	f7ff fcf0 	bl	800ebec <rcutils_allocator_is_valid>
 800f20c:	b328      	cbz	r0, 800f25a <rmw_init_options_fini+0x5e>
 800f20e:	68a0      	ldr	r0, [r4, #8]
 800f210:	b120      	cbz	r0, 800f21c <rmw_init_options_fini+0x20>
 800f212:	4b18      	ldr	r3, [pc, #96]	@ (800f274 <rmw_init_options_fini+0x78>)
 800f214:	6819      	ldr	r1, [r3, #0]
 800f216:	f7f0 ffe3 	bl	80001e0 <strcmp>
 800f21a:	bb30      	cbnz	r0, 800f26a <rmw_init_options_fini+0x6e>
 800f21c:	4b16      	ldr	r3, [pc, #88]	@ (800f278 <rmw_init_options_fini+0x7c>)
 800f21e:	6819      	ldr	r1, [r3, #0]
 800f220:	b1f9      	cbz	r1, 800f262 <rmw_init_options_fini+0x66>
 800f222:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800f224:	e001      	b.n	800f22a <rmw_init_options_fini+0x2e>
 800f226:	6889      	ldr	r1, [r1, #8]
 800f228:	b1d9      	cbz	r1, 800f262 <rmw_init_options_fini+0x66>
 800f22a:	68cb      	ldr	r3, [r1, #12]
 800f22c:	429a      	cmp	r2, r3
 800f22e:	d1fa      	bne.n	800f226 <rmw_init_options_fini+0x2a>
 800f230:	4811      	ldr	r0, [pc, #68]	@ (800f278 <rmw_init_options_fini+0x7c>)
 800f232:	f007 fc17 	bl	8016a64 <put_memory>
 800f236:	466d      	mov	r5, sp
 800f238:	4668      	mov	r0, sp
 800f23a:	f7ff fe93 	bl	800ef64 <rmw_get_zero_initialized_init_options>
 800f23e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f24a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f24e:	e884 0003 	stmia.w	r4, {r0, r1}
 800f252:	2300      	movs	r3, #0
 800f254:	4618      	mov	r0, r3
 800f256:	b00f      	add	sp, #60	@ 0x3c
 800f258:	bd30      	pop	{r4, r5, pc}
 800f25a:	230b      	movs	r3, #11
 800f25c:	4618      	mov	r0, r3
 800f25e:	b00f      	add	sp, #60	@ 0x3c
 800f260:	bd30      	pop	{r4, r5, pc}
 800f262:	2301      	movs	r3, #1
 800f264:	4618      	mov	r0, r3
 800f266:	b00f      	add	sp, #60	@ 0x3c
 800f268:	bd30      	pop	{r4, r5, pc}
 800f26a:	230c      	movs	r3, #12
 800f26c:	e7f2      	b.n	800f254 <rmw_init_options_fini+0x58>
 800f26e:	230b      	movs	r3, #11
 800f270:	4618      	mov	r0, r3
 800f272:	4770      	bx	lr
 800f274:	0801e7ac 	.word	0x0801e7ac
 800f278:	2000d324 	.word	0x2000d324

0800f27c <rmw_init>:
 800f27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f280:	b082      	sub	sp, #8
 800f282:	2800      	cmp	r0, #0
 800f284:	f000 80d6 	beq.w	800f434 <rmw_init+0x1b8>
 800f288:	460e      	mov	r6, r1
 800f28a:	2900      	cmp	r1, #0
 800f28c:	f000 80d2 	beq.w	800f434 <rmw_init+0x1b8>
 800f290:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f292:	4605      	mov	r5, r0
 800f294:	2b00      	cmp	r3, #0
 800f296:	f000 80cd 	beq.w	800f434 <rmw_init+0x1b8>
 800f29a:	4b79      	ldr	r3, [pc, #484]	@ (800f480 <rmw_init+0x204>)
 800f29c:	6880      	ldr	r0, [r0, #8]
 800f29e:	f8d3 9000 	ldr.w	r9, [r3]
 800f2a2:	b128      	cbz	r0, 800f2b0 <rmw_init+0x34>
 800f2a4:	4649      	mov	r1, r9
 800f2a6:	f7f0 ff9b 	bl	80001e0 <strcmp>
 800f2aa:	2800      	cmp	r0, #0
 800f2ac:	f040 80cc 	bne.w	800f448 <rmw_init+0x1cc>
 800f2b0:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f2b4:	68eb      	ldr	r3, [r5, #12]
 800f2b6:	61f3      	str	r3, [r6, #28]
 800f2b8:	e9c6 0100 	strd	r0, r1, [r6]
 800f2bc:	2201      	movs	r2, #1
 800f2be:	4971      	ldr	r1, [pc, #452]	@ (800f484 <rmw_init+0x208>)
 800f2c0:	4871      	ldr	r0, [pc, #452]	@ (800f488 <rmw_init+0x20c>)
 800f2c2:	f8c6 9008 	str.w	r9, [r6, #8]
 800f2c6:	f000 fe07 	bl	800fed8 <rmw_uxrce_init_session_memory>
 800f2ca:	4870      	ldr	r0, [pc, #448]	@ (800f48c <rmw_init+0x210>)
 800f2cc:	4970      	ldr	r1, [pc, #448]	@ (800f490 <rmw_init+0x214>)
 800f2ce:	2204      	movs	r2, #4
 800f2d0:	f000 fe3c 	bl	800ff4c <rmw_uxrce_init_static_input_buffer_memory>
 800f2d4:	486c      	ldr	r0, [pc, #432]	@ (800f488 <rmw_init+0x20c>)
 800f2d6:	f007 fbb5 	bl	8016a44 <get_memory>
 800f2da:	2800      	cmp	r0, #0
 800f2dc:	f000 80af 	beq.w	800f43e <rmw_init+0x1c2>
 800f2e0:	6b6f      	ldr	r7, [r5, #52]	@ 0x34
 800f2e2:	68c4      	ldr	r4, [r0, #12]
 800f2e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f2e6:	7c39      	ldrb	r1, [r7, #16]
 800f2e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f2ec:	9001      	str	r0, [sp, #4]
 800f2ee:	6a38      	ldr	r0, [r7, #32]
 800f2f0:	9000      	str	r0, [sp, #0]
 800f2f2:	f104 0a10 	add.w	sl, r4, #16
 800f2f6:	4650      	mov	r0, sl
 800f2f8:	f001 fca0 	bl	8010c3c <uxr_set_custom_transport_callbacks>
 800f2fc:	f241 5294 	movw	r2, #5524	@ 0x1594
 800f300:	f241 5398 	movw	r3, #5528	@ 0x1598
 800f304:	f04f 0800 	mov.w	r8, #0
 800f308:	f241 509c 	movw	r0, #5532	@ 0x159c
 800f30c:	f504 51ad 	add.w	r1, r4, #5536	@ 0x15a0
 800f310:	f844 8002 	str.w	r8, [r4, r2]
 800f314:	f844 8003 	str.w	r8, [r4, r3]
 800f318:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f31c:	f504 735e 	add.w	r3, r4, #888	@ 0x378
 800f320:	f844 8000 	str.w	r8, [r4, r0]
 800f324:	e9c4 33e1 	strd	r3, r3, [r4, #900]	@ 0x384
 800f328:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800f32c:	4859      	ldr	r0, [pc, #356]	@ (800f494 <rmw_init+0x218>)
 800f32e:	f8c1 8000 	str.w	r8, [r1]
 800f332:	2201      	movs	r2, #1
 800f334:	e9c4 98da 	strd	r9, r8, [r4, #872]	@ 0x368
 800f338:	4957      	ldr	r1, [pc, #348]	@ (800f498 <rmw_init+0x21c>)
 800f33a:	64b4      	str	r4, [r6, #72]	@ 0x48
 800f33c:	f000 fdb2 	bl	800fea4 <rmw_uxrce_init_node_memory>
 800f340:	4956      	ldr	r1, [pc, #344]	@ (800f49c <rmw_init+0x220>)
 800f342:	4857      	ldr	r0, [pc, #348]	@ (800f4a0 <rmw_init+0x224>)
 800f344:	2205      	movs	r2, #5
 800f346:	f000 fd93 	bl	800fe70 <rmw_uxrce_init_subscription_memory>
 800f34a:	4956      	ldr	r1, [pc, #344]	@ (800f4a4 <rmw_init+0x228>)
 800f34c:	4856      	ldr	r0, [pc, #344]	@ (800f4a8 <rmw_init+0x22c>)
 800f34e:	220a      	movs	r2, #10
 800f350:	f000 fd74 	bl	800fe3c <rmw_uxrce_init_publisher_memory>
 800f354:	4955      	ldr	r1, [pc, #340]	@ (800f4ac <rmw_init+0x230>)
 800f356:	4856      	ldr	r0, [pc, #344]	@ (800f4b0 <rmw_init+0x234>)
 800f358:	2201      	movs	r2, #1
 800f35a:	f000 fd3b 	bl	800fdd4 <rmw_uxrce_init_service_memory>
 800f35e:	4955      	ldr	r1, [pc, #340]	@ (800f4b4 <rmw_init+0x238>)
 800f360:	4855      	ldr	r0, [pc, #340]	@ (800f4b8 <rmw_init+0x23c>)
 800f362:	2201      	movs	r2, #1
 800f364:	f000 fd50 	bl	800fe08 <rmw_uxrce_init_client_memory>
 800f368:	4954      	ldr	r1, [pc, #336]	@ (800f4bc <rmw_init+0x240>)
 800f36a:	4855      	ldr	r0, [pc, #340]	@ (800f4c0 <rmw_init+0x244>)
 800f36c:	220f      	movs	r2, #15
 800f36e:	f000 fdd1 	bl	800ff14 <rmw_uxrce_init_topic_memory>
 800f372:	4954      	ldr	r1, [pc, #336]	@ (800f4c4 <rmw_init+0x248>)
 800f374:	4854      	ldr	r0, [pc, #336]	@ (800f4c8 <rmw_init+0x24c>)
 800f376:	2203      	movs	r2, #3
 800f378:	f000 fe06 	bl	800ff88 <rmw_uxrce_init_init_options_impl_memory>
 800f37c:	4953      	ldr	r1, [pc, #332]	@ (800f4cc <rmw_init+0x250>)
 800f37e:	4854      	ldr	r0, [pc, #336]	@ (800f4d0 <rmw_init+0x254>)
 800f380:	2204      	movs	r2, #4
 800f382:	f000 fe1b 	bl	800ffbc <rmw_uxrce_init_wait_set_memory>
 800f386:	4953      	ldr	r1, [pc, #332]	@ (800f4d4 <rmw_init+0x258>)
 800f388:	4853      	ldr	r0, [pc, #332]	@ (800f4d8 <rmw_init+0x25c>)
 800f38a:	2204      	movs	r2, #4
 800f38c:	f000 fe32 	bl	800fff4 <rmw_uxrce_init_guard_condition_memory>
 800f390:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800f392:	6cb0      	ldr	r0, [r6, #72]	@ 0x48
 800f394:	4642      	mov	r2, r8
 800f396:	f000 fd05 	bl	800fda4 <rmw_uxrce_transport_init>
 800f39a:	4607      	mov	r7, r0
 800f39c:	2800      	cmp	r0, #0
 800f39e:	d158      	bne.n	800f452 <rmw_init+0x1d6>
 800f3a0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800f3a2:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800f3a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f3a8:	4628      	mov	r0, r5
 800f3aa:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800f3ae:	f001 fe6b 	bl	8011088 <uxr_init_session>
 800f3b2:	494a      	ldr	r1, [pc, #296]	@ (800f4dc <rmw_init+0x260>)
 800f3b4:	4622      	mov	r2, r4
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	f001 fe88 	bl	80110cc <uxr_set_topic_callback>
 800f3bc:	4948      	ldr	r1, [pc, #288]	@ (800f4e0 <rmw_init+0x264>)
 800f3be:	463a      	mov	r2, r7
 800f3c0:	4628      	mov	r0, r5
 800f3c2:	f001 fe7f 	bl	80110c4 <uxr_set_status_callback>
 800f3c6:	4947      	ldr	r1, [pc, #284]	@ (800f4e4 <rmw_init+0x268>)
 800f3c8:	463a      	mov	r2, r7
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	f001 fe82 	bl	80110d4 <uxr_set_request_callback>
 800f3d0:	4945      	ldr	r1, [pc, #276]	@ (800f4e8 <rmw_init+0x26c>)
 800f3d2:	463a      	mov	r2, r7
 800f3d4:	4628      	mov	r0, r5
 800f3d6:	f001 fe81 	bl	80110dc <uxr_set_reply_callback>
 800f3da:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f3de:	2304      	movs	r3, #4
 800f3e0:	0092      	lsls	r2, r2, #2
 800f3e2:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	f001 feb8 	bl	801115c <uxr_create_input_reliable_stream>
 800f3ec:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f3f0:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800f3f4:	0092      	lsls	r2, r2, #2
 800f3f6:	2304      	movs	r3, #4
 800f3f8:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800f3fc:	4628      	mov	r0, r5
 800f3fe:	f001 fe83 	bl	8011108 <uxr_create_output_reliable_stream>
 800f402:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800f406:	4628      	mov	r0, r5
 800f408:	f001 fea2 	bl	8011150 <uxr_create_input_best_effort_stream>
 800f40c:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800f410:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800f414:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f418:	4628      	mov	r0, r5
 800f41a:	3114      	adds	r1, #20
 800f41c:	f001 fe62 	bl	80110e4 <uxr_create_output_best_effort_stream>
 800f420:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800f424:	4628      	mov	r0, r5
 800f426:	f002 faf3 	bl	8011a10 <uxr_create_session>
 800f42a:	b1f8      	cbz	r0, 800f46c <rmw_init+0x1f0>
 800f42c:	4638      	mov	r0, r7
 800f42e:	b002      	add	sp, #8
 800f430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f434:	270b      	movs	r7, #11
 800f436:	4638      	mov	r0, r7
 800f438:	b002      	add	sp, #8
 800f43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f43e:	2701      	movs	r7, #1
 800f440:	4638      	mov	r0, r7
 800f442:	b002      	add	sp, #8
 800f444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f448:	270c      	movs	r7, #12
 800f44a:	4638      	mov	r0, r7
 800f44c:	b002      	add	sp, #8
 800f44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f452:	4650      	mov	r0, sl
 800f454:	f001 fc32 	bl	8010cbc <uxr_close_custom_transport>
 800f458:	480b      	ldr	r0, [pc, #44]	@ (800f488 <rmw_init+0x20c>)
 800f45a:	4621      	mov	r1, r4
 800f45c:	f007 fb02 	bl	8016a64 <put_memory>
 800f460:	4638      	mov	r0, r7
 800f462:	f8c6 8048 	str.w	r8, [r6, #72]	@ 0x48
 800f466:	b002      	add	sp, #8
 800f468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f46c:	4650      	mov	r0, sl
 800f46e:	f001 fc25 	bl	8010cbc <uxr_close_custom_transport>
 800f472:	4805      	ldr	r0, [pc, #20]	@ (800f488 <rmw_init+0x20c>)
 800f474:	4621      	mov	r1, r4
 800f476:	f007 faf5 	bl	8016a64 <put_memory>
 800f47a:	64b7      	str	r7, [r6, #72]	@ 0x48
 800f47c:	2701      	movs	r7, #1
 800f47e:	e7d5      	b.n	800f42c <rmw_init+0x1b0>
 800f480:	0801e7ac 	.word	0x0801e7ac
 800f484:	2000d400 	.word	0x2000d400
 800f488:	2000d1d0 	.word	0x2000d1d0
 800f48c:	2000a028 	.word	0x2000a028
 800f490:	2000ae08 	.word	0x2000ae08
 800f494:	2000cffc 	.word	0x2000cffc
 800f498:	2000d1e0 	.word	0x2000d1e0
 800f49c:	2000a930 	.word	0x2000a930
 800f4a0:	2000d294 	.word	0x2000d294
 800f4a4:	2000a048 	.word	0x2000a048
 800f4a8:	2000a038 	.word	0x2000a038
 800f4ac:	2000d338 	.word	0x2000d338
 800f4b0:	2000d284 	.word	0x2000d284
 800f4b4:	2000ad40 	.word	0x2000ad40
 800f4b8:	2000a8b8 	.word	0x2000a8b8
 800f4bc:	2000d00c 	.word	0x2000d00c
 800f4c0:	2000d1c0 	.word	0x2000d1c0
 800f4c4:	2000cf78 	.word	0x2000cf78
 800f4c8:	2000d324 	.word	0x2000d324
 800f4cc:	2000cf08 	.word	0x2000cf08
 800f4d0:	2000e9a8 	.word	0x2000e9a8
 800f4d4:	2000d2a4 	.word	0x2000d2a4
 800f4d8:	2000d1b0 	.word	0x2000d1b0
 800f4dc:	08016885 	.word	0x08016885
 800f4e0:	0801687d 	.word	0x0801687d
 800f4e4:	08016919 	.word	0x08016919
 800f4e8:	080169b1 	.word	0x080169b1

0800f4ec <rmw_context_fini>:
 800f4ec:	4b17      	ldr	r3, [pc, #92]	@ (800f54c <rmw_context_fini+0x60>)
 800f4ee:	b570      	push	{r4, r5, r6, lr}
 800f4f0:	681c      	ldr	r4, [r3, #0]
 800f4f2:	4605      	mov	r5, r0
 800f4f4:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 800f4f6:	b33c      	cbz	r4, 800f548 <rmw_context_fini+0x5c>
 800f4f8:	2600      	movs	r6, #0
 800f4fa:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 800f4fe:	691a      	ldr	r2, [r3, #16]
 800f500:	4282      	cmp	r2, r0
 800f502:	d018      	beq.n	800f536 <rmw_context_fini+0x4a>
 800f504:	2c00      	cmp	r4, #0
 800f506:	d1f8      	bne.n	800f4fa <rmw_context_fini+0xe>
 800f508:	b188      	cbz	r0, 800f52e <rmw_context_fini+0x42>
 800f50a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f50e:	789b      	ldrb	r3, [r3, #2]
 800f510:	2b01      	cmp	r3, #1
 800f512:	bf14      	ite	ne
 800f514:	210a      	movne	r1, #10
 800f516:	2100      	moveq	r1, #0
 800f518:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f51c:	f002 fc3a 	bl	8011d94 <uxr_delete_session_retries>
 800f520:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f522:	f000 fd81 	bl	8010028 <rmw_uxrce_fini_session_memory>
 800f526:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f528:	3010      	adds	r0, #16
 800f52a:	f001 fbc7 	bl	8010cbc <uxr_close_custom_transport>
 800f52e:	2300      	movs	r3, #0
 800f530:	4630      	mov	r0, r6
 800f532:	64ab      	str	r3, [r5, #72]	@ 0x48
 800f534:	bd70      	pop	{r4, r5, r6, pc}
 800f536:	f103 0018 	add.w	r0, r3, #24
 800f53a:	f000 f89b 	bl	800f674 <rmw_destroy_node>
 800f53e:	4606      	mov	r6, r0
 800f540:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f542:	2c00      	cmp	r4, #0
 800f544:	d1d9      	bne.n	800f4fa <rmw_context_fini+0xe>
 800f546:	e7df      	b.n	800f508 <rmw_context_fini+0x1c>
 800f548:	4626      	mov	r6, r4
 800f54a:	e7dd      	b.n	800f508 <rmw_context_fini+0x1c>
 800f54c:	2000cffc 	.word	0x2000cffc

0800f550 <create_node>:
 800f550:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f554:	b083      	sub	sp, #12
 800f556:	2b00      	cmp	r3, #0
 800f558:	d05f      	beq.n	800f61a <create_node+0xca>
 800f55a:	4606      	mov	r6, r0
 800f55c:	4835      	ldr	r0, [pc, #212]	@ (800f634 <create_node+0xe4>)
 800f55e:	460f      	mov	r7, r1
 800f560:	4690      	mov	r8, r2
 800f562:	461d      	mov	r5, r3
 800f564:	f007 fa6e 	bl	8016a44 <get_memory>
 800f568:	2800      	cmp	r0, #0
 800f56a:	d056      	beq.n	800f61a <create_node+0xca>
 800f56c:	68c4      	ldr	r4, [r0, #12]
 800f56e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800f570:	6123      	str	r3, [r4, #16]
 800f572:	f007 facf 	bl	8016b14 <rmw_get_implementation_identifier>
 800f576:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800f57a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800f57e:	f8c4 9020 	str.w	r9, [r4, #32]
 800f582:	4630      	mov	r0, r6
 800f584:	f7f0 fe8c 	bl	80002a0 <strlen>
 800f588:	1c42      	adds	r2, r0, #1
 800f58a:	2a3c      	cmp	r2, #60	@ 0x3c
 800f58c:	f104 0518 	add.w	r5, r4, #24
 800f590:	d840      	bhi.n	800f614 <create_node+0xc4>
 800f592:	4648      	mov	r0, r9
 800f594:	4631      	mov	r1, r6
 800f596:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800f59a:	f00b f9de 	bl	801a95a <memcpy>
 800f59e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800f5a2:	4638      	mov	r0, r7
 800f5a4:	f7f0 fe7c 	bl	80002a0 <strlen>
 800f5a8:	1c42      	adds	r2, r0, #1
 800f5aa:	2a3c      	cmp	r2, #60	@ 0x3c
 800f5ac:	d832      	bhi.n	800f614 <create_node+0xc4>
 800f5ae:	4639      	mov	r1, r7
 800f5b0:	4648      	mov	r0, r9
 800f5b2:	f00b f9d2 	bl	801a95a <memcpy>
 800f5b6:	f241 5394 	movw	r3, #5524	@ 0x1594
 800f5ba:	6922      	ldr	r2, [r4, #16]
 800f5bc:	5ad0      	ldrh	r0, [r2, r3]
 800f5be:	2101      	movs	r1, #1
 800f5c0:	eb00 0c01 	add.w	ip, r0, r1
 800f5c4:	f822 c003 	strh.w	ip, [r2, r3]
 800f5c8:	f001 fb7c 	bl	8010cc4 <uxr_object_id>
 800f5cc:	6160      	str	r0, [r4, #20]
 800f5ce:	783b      	ldrb	r3, [r7, #0]
 800f5d0:	2b2f      	cmp	r3, #47	@ 0x2f
 800f5d2:	d127      	bne.n	800f624 <create_node+0xd4>
 800f5d4:	787b      	ldrb	r3, [r7, #1]
 800f5d6:	bb2b      	cbnz	r3, 800f624 <create_node+0xd4>
 800f5d8:	4a17      	ldr	r2, [pc, #92]	@ (800f638 <create_node+0xe8>)
 800f5da:	4818      	ldr	r0, [pc, #96]	@ (800f63c <create_node+0xec>)
 800f5dc:	4633      	mov	r3, r6
 800f5de:	213c      	movs	r1, #60	@ 0x3c
 800f5e0:	f00a ff1a 	bl	801a418 <sniprintf>
 800f5e4:	6920      	ldr	r0, [r4, #16]
 800f5e6:	4b15      	ldr	r3, [pc, #84]	@ (800f63c <create_node+0xec>)
 800f5e8:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800f5ec:	9300      	str	r3, [sp, #0]
 800f5ee:	2306      	movs	r3, #6
 800f5f0:	9301      	str	r3, [sp, #4]
 800f5f2:	6811      	ldr	r1, [r2, #0]
 800f5f4:	6962      	ldr	r2, [r4, #20]
 800f5f6:	fa1f f388 	uxth.w	r3, r8
 800f5fa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f5fe:	f001 f8eb 	bl	80107d8 <uxr_buffer_create_participant_bin>
 800f602:	4602      	mov	r2, r0
 800f604:	6920      	ldr	r0, [r4, #16]
 800f606:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f60a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f60e:	f000 fe7b 	bl	8010308 <run_xrce_session>
 800f612:	b918      	cbnz	r0, 800f61c <create_node+0xcc>
 800f614:	4628      	mov	r0, r5
 800f616:	f000 fd0d 	bl	8010034 <rmw_uxrce_fini_node_memory>
 800f61a:	2500      	movs	r5, #0
 800f61c:	4628      	mov	r0, r5
 800f61e:	b003      	add	sp, #12
 800f620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f624:	4a06      	ldr	r2, [pc, #24]	@ (800f640 <create_node+0xf0>)
 800f626:	9600      	str	r6, [sp, #0]
 800f628:	463b      	mov	r3, r7
 800f62a:	213c      	movs	r1, #60	@ 0x3c
 800f62c:	4803      	ldr	r0, [pc, #12]	@ (800f63c <create_node+0xec>)
 800f62e:	f00a fef3 	bl	801a418 <sniprintf>
 800f632:	e7d7      	b.n	800f5e4 <create_node+0x94>
 800f634:	2000cffc 	.word	0x2000cffc
 800f638:	0801e058 	.word	0x0801e058
 800f63c:	20009d20 	.word	0x20009d20
 800f640:	0801e01c 	.word	0x0801e01c

0800f644 <rmw_create_node>:
 800f644:	b199      	cbz	r1, 800f66e <rmw_create_node+0x2a>
 800f646:	b430      	push	{r4, r5}
 800f648:	4615      	mov	r5, r2
 800f64a:	461a      	mov	r2, r3
 800f64c:	780b      	ldrb	r3, [r1, #0]
 800f64e:	460c      	mov	r4, r1
 800f650:	b153      	cbz	r3, 800f668 <rmw_create_node+0x24>
 800f652:	b14d      	cbz	r5, 800f668 <rmw_create_node+0x24>
 800f654:	782b      	ldrb	r3, [r5, #0]
 800f656:	b13b      	cbz	r3, 800f668 <rmw_create_node+0x24>
 800f658:	b902      	cbnz	r2, 800f65c <rmw_create_node+0x18>
 800f65a:	69c2      	ldr	r2, [r0, #28]
 800f65c:	4603      	mov	r3, r0
 800f65e:	4629      	mov	r1, r5
 800f660:	4620      	mov	r0, r4
 800f662:	bc30      	pop	{r4, r5}
 800f664:	f7ff bf74 	b.w	800f550 <create_node>
 800f668:	2000      	movs	r0, #0
 800f66a:	bc30      	pop	{r4, r5}
 800f66c:	4770      	bx	lr
 800f66e:	2000      	movs	r0, #0
 800f670:	4770      	bx	lr
 800f672:	bf00      	nop

0800f674 <rmw_destroy_node>:
 800f674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f676:	2800      	cmp	r0, #0
 800f678:	d066      	beq.n	800f748 <rmw_destroy_node+0xd4>
 800f67a:	4607      	mov	r7, r0
 800f67c:	6800      	ldr	r0, [r0, #0]
 800f67e:	b128      	cbz	r0, 800f68c <rmw_destroy_node+0x18>
 800f680:	4b34      	ldr	r3, [pc, #208]	@ (800f754 <rmw_destroy_node+0xe0>)
 800f682:	6819      	ldr	r1, [r3, #0]
 800f684:	f7f0 fdac 	bl	80001e0 <strcmp>
 800f688:	2800      	cmp	r0, #0
 800f68a:	d15d      	bne.n	800f748 <rmw_destroy_node+0xd4>
 800f68c:	687c      	ldr	r4, [r7, #4]
 800f68e:	2c00      	cmp	r4, #0
 800f690:	d05a      	beq.n	800f748 <rmw_destroy_node+0xd4>
 800f692:	4b31      	ldr	r3, [pc, #196]	@ (800f758 <rmw_destroy_node+0xe4>)
 800f694:	681d      	ldr	r5, [r3, #0]
 800f696:	2d00      	cmp	r5, #0
 800f698:	d059      	beq.n	800f74e <rmw_destroy_node+0xda>
 800f69a:	2600      	movs	r6, #0
 800f69c:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800f6a0:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800f6a4:	429c      	cmp	r4, r3
 800f6a6:	d047      	beq.n	800f738 <rmw_destroy_node+0xc4>
 800f6a8:	2d00      	cmp	r5, #0
 800f6aa:	d1f7      	bne.n	800f69c <rmw_destroy_node+0x28>
 800f6ac:	4b2b      	ldr	r3, [pc, #172]	@ (800f75c <rmw_destroy_node+0xe8>)
 800f6ae:	681d      	ldr	r5, [r3, #0]
 800f6b0:	b15d      	cbz	r5, 800f6ca <rmw_destroy_node+0x56>
 800f6b2:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800f6b6:	6a0b      	ldr	r3, [r1, #32]
 800f6b8:	429c      	cmp	r4, r3
 800f6ba:	d1f9      	bne.n	800f6b0 <rmw_destroy_node+0x3c>
 800f6bc:	317c      	adds	r1, #124	@ 0x7c
 800f6be:	4638      	mov	r0, r7
 800f6c0:	f000 fb12 	bl	800fce8 <rmw_destroy_subscription>
 800f6c4:	4606      	mov	r6, r0
 800f6c6:	2d00      	cmp	r5, #0
 800f6c8:	d1f3      	bne.n	800f6b2 <rmw_destroy_node+0x3e>
 800f6ca:	4b25      	ldr	r3, [pc, #148]	@ (800f760 <rmw_destroy_node+0xec>)
 800f6cc:	681d      	ldr	r5, [r3, #0]
 800f6ce:	b15d      	cbz	r5, 800f6e8 <rmw_destroy_node+0x74>
 800f6d0:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800f6d4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f6d6:	429c      	cmp	r4, r3
 800f6d8:	d1f9      	bne.n	800f6ce <rmw_destroy_node+0x5a>
 800f6da:	317c      	adds	r1, #124	@ 0x7c
 800f6dc:	4638      	mov	r0, r7
 800f6de:	f000 f9dd 	bl	800fa9c <rmw_destroy_service>
 800f6e2:	4606      	mov	r6, r0
 800f6e4:	2d00      	cmp	r5, #0
 800f6e6:	d1f3      	bne.n	800f6d0 <rmw_destroy_node+0x5c>
 800f6e8:	4b1e      	ldr	r3, [pc, #120]	@ (800f764 <rmw_destroy_node+0xf0>)
 800f6ea:	681d      	ldr	r5, [r3, #0]
 800f6ec:	b15d      	cbz	r5, 800f706 <rmw_destroy_node+0x92>
 800f6ee:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800f6f2:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f6f4:	429c      	cmp	r4, r3
 800f6f6:	d1f9      	bne.n	800f6ec <rmw_destroy_node+0x78>
 800f6f8:	317c      	adds	r1, #124	@ 0x7c
 800f6fa:	4638      	mov	r0, r7
 800f6fc:	f007 f9c6 	bl	8016a8c <rmw_destroy_client>
 800f700:	4606      	mov	r6, r0
 800f702:	2d00      	cmp	r5, #0
 800f704:	d1f3      	bne.n	800f6ee <rmw_destroy_node+0x7a>
 800f706:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800f70a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f70e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f712:	6819      	ldr	r1, [r3, #0]
 800f714:	f001 f814 	bl	8010740 <uxr_buffer_delete_entity>
 800f718:	4602      	mov	r2, r0
 800f71a:	6920      	ldr	r0, [r4, #16]
 800f71c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f720:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f724:	f000 fdf0 	bl	8010308 <run_xrce_session>
 800f728:	2800      	cmp	r0, #0
 800f72a:	bf08      	it	eq
 800f72c:	2602      	moveq	r6, #2
 800f72e:	4638      	mov	r0, r7
 800f730:	f000 fc80 	bl	8010034 <rmw_uxrce_fini_node_memory>
 800f734:	4630      	mov	r0, r6
 800f736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f738:	3184      	adds	r1, #132	@ 0x84
 800f73a:	4638      	mov	r0, r7
 800f73c:	f000 f95e 	bl	800f9fc <rmw_destroy_publisher>
 800f740:	4606      	mov	r6, r0
 800f742:	2d00      	cmp	r5, #0
 800f744:	d1aa      	bne.n	800f69c <rmw_destroy_node+0x28>
 800f746:	e7b1      	b.n	800f6ac <rmw_destroy_node+0x38>
 800f748:	2601      	movs	r6, #1
 800f74a:	4630      	mov	r0, r6
 800f74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f74e:	462e      	mov	r6, r5
 800f750:	e7ac      	b.n	800f6ac <rmw_destroy_node+0x38>
 800f752:	bf00      	nop
 800f754:	0801e7ac 	.word	0x0801e7ac
 800f758:	2000a038 	.word	0x2000a038
 800f75c:	2000d294 	.word	0x2000d294
 800f760:	2000d284 	.word	0x2000d284
 800f764:	2000a8b8 	.word	0x2000a8b8

0800f768 <rmw_node_get_graph_guard_condition>:
 800f768:	6843      	ldr	r3, [r0, #4]
 800f76a:	6918      	ldr	r0, [r3, #16]
 800f76c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800f770:	4770      	bx	lr
 800f772:	bf00      	nop

0800f774 <flush_session>:
 800f774:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800f776:	f002 b8d3 	b.w	8011920 <uxr_run_session_until_confirm_delivery>
 800f77a:	bf00      	nop

0800f77c <rmw_publish>:
 800f77c:	2800      	cmp	r0, #0
 800f77e:	d053      	beq.n	800f828 <rmw_publish+0xac>
 800f780:	b570      	push	{r4, r5, r6, lr}
 800f782:	460d      	mov	r5, r1
 800f784:	b08e      	sub	sp, #56	@ 0x38
 800f786:	2900      	cmp	r1, #0
 800f788:	d04b      	beq.n	800f822 <rmw_publish+0xa6>
 800f78a:	4604      	mov	r4, r0
 800f78c:	6800      	ldr	r0, [r0, #0]
 800f78e:	f000 fe3b 	bl	8010408 <is_uxrce_rmw_identifier_valid>
 800f792:	2800      	cmp	r0, #0
 800f794:	d045      	beq.n	800f822 <rmw_publish+0xa6>
 800f796:	6866      	ldr	r6, [r4, #4]
 800f798:	2e00      	cmp	r6, #0
 800f79a:	d042      	beq.n	800f822 <rmw_publish+0xa6>
 800f79c:	69b4      	ldr	r4, [r6, #24]
 800f79e:	4628      	mov	r0, r5
 800f7a0:	6923      	ldr	r3, [r4, #16]
 800f7a2:	4798      	blx	r3
 800f7a4:	69f3      	ldr	r3, [r6, #28]
 800f7a6:	9005      	str	r0, [sp, #20]
 800f7a8:	b113      	cbz	r3, 800f7b0 <rmw_publish+0x34>
 800f7aa:	a805      	add	r0, sp, #20
 800f7ac:	4798      	blx	r3
 800f7ae:	9805      	ldr	r0, [sp, #20]
 800f7b0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f7b4:	691b      	ldr	r3, [r3, #16]
 800f7b6:	9000      	str	r0, [sp, #0]
 800f7b8:	6972      	ldr	r2, [r6, #20]
 800f7ba:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f7bc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f7c0:	ab06      	add	r3, sp, #24
 800f7c2:	f003 fb33 	bl	8012e2c <uxr_prepare_output_stream>
 800f7c6:	b1d8      	cbz	r0, 800f800 <rmw_publish+0x84>
 800f7c8:	68a3      	ldr	r3, [r4, #8]
 800f7ca:	4628      	mov	r0, r5
 800f7cc:	a906      	add	r1, sp, #24
 800f7ce:	4798      	blx	r3
 800f7d0:	6a33      	ldr	r3, [r6, #32]
 800f7d2:	4604      	mov	r4, r0
 800f7d4:	b10b      	cbz	r3, 800f7da <rmw_publish+0x5e>
 800f7d6:	a806      	add	r0, sp, #24
 800f7d8:	4798      	blx	r3
 800f7da:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800f7de:	2b01      	cmp	r3, #1
 800f7e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f7e4:	d022      	beq.n	800f82c <rmw_publish+0xb0>
 800f7e6:	6918      	ldr	r0, [r3, #16]
 800f7e8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800f7ea:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f7ee:	f002 f897 	bl	8011920 <uxr_run_session_until_confirm_delivery>
 800f7f2:	4020      	ands	r0, r4
 800f7f4:	b2c4      	uxtb	r4, r0
 800f7f6:	f084 0001 	eor.w	r0, r4, #1
 800f7fa:	b2c0      	uxtb	r0, r0
 800f7fc:	b00e      	add	sp, #56	@ 0x38
 800f7fe:	bd70      	pop	{r4, r5, r6, pc}
 800f800:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f804:	4a0c      	ldr	r2, [pc, #48]	@ (800f838 <rmw_publish+0xbc>)
 800f806:	6918      	ldr	r0, [r3, #16]
 800f808:	9b05      	ldr	r3, [sp, #20]
 800f80a:	9300      	str	r3, [sp, #0]
 800f80c:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800f810:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f814:	6972      	ldr	r2, [r6, #20]
 800f816:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f818:	ab06      	add	r3, sp, #24
 800f81a:	f003 fb37 	bl	8012e8c <uxr_prepare_output_stream_fragmented>
 800f81e:	2800      	cmp	r0, #0
 800f820:	d1d2      	bne.n	800f7c8 <rmw_publish+0x4c>
 800f822:	2001      	movs	r0, #1
 800f824:	b00e      	add	sp, #56	@ 0x38
 800f826:	bd70      	pop	{r4, r5, r6, pc}
 800f828:	2001      	movs	r0, #1
 800f82a:	4770      	bx	lr
 800f82c:	6918      	ldr	r0, [r3, #16]
 800f82e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f832:	f001 fcb9 	bl	80111a8 <uxr_flash_output_streams>
 800f836:	e7de      	b.n	800f7f6 <rmw_publish+0x7a>
 800f838:	0800f775 	.word	0x0800f775

0800f83c <rmw_create_publisher>:
 800f83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f840:	b087      	sub	sp, #28
 800f842:	2800      	cmp	r0, #0
 800f844:	f000 80cc 	beq.w	800f9e0 <rmw_create_publisher+0x1a4>
 800f848:	460e      	mov	r6, r1
 800f84a:	2900      	cmp	r1, #0
 800f84c:	f000 80c8 	beq.w	800f9e0 <rmw_create_publisher+0x1a4>
 800f850:	4604      	mov	r4, r0
 800f852:	6800      	ldr	r0, [r0, #0]
 800f854:	4615      	mov	r5, r2
 800f856:	4698      	mov	r8, r3
 800f858:	f000 fdd6 	bl	8010408 <is_uxrce_rmw_identifier_valid>
 800f85c:	2800      	cmp	r0, #0
 800f85e:	f000 80bf 	beq.w	800f9e0 <rmw_create_publisher+0x1a4>
 800f862:	2d00      	cmp	r5, #0
 800f864:	f000 80bc 	beq.w	800f9e0 <rmw_create_publisher+0x1a4>
 800f868:	782b      	ldrb	r3, [r5, #0]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	f000 80b8 	beq.w	800f9e0 <rmw_create_publisher+0x1a4>
 800f870:	f1b8 0f00 	cmp.w	r8, #0
 800f874:	f000 80b4 	beq.w	800f9e0 <rmw_create_publisher+0x1a4>
 800f878:	485c      	ldr	r0, [pc, #368]	@ (800f9ec <rmw_create_publisher+0x1b0>)
 800f87a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f87e:	f007 f8e1 	bl	8016a44 <get_memory>
 800f882:	2800      	cmp	r0, #0
 800f884:	f000 80ac 	beq.w	800f9e0 <rmw_create_publisher+0x1a4>
 800f888:	68c4      	ldr	r4, [r0, #12]
 800f88a:	2300      	movs	r3, #0
 800f88c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 800f890:	f007 f940 	bl	8016b14 <rmw_get_implementation_identifier>
 800f894:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 800f898:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800f89c:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	f7f0 fcfd 	bl	80002a0 <strlen>
 800f8a6:	3001      	adds	r0, #1
 800f8a8:	283c      	cmp	r0, #60	@ 0x3c
 800f8aa:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800f8ae:	f200 8094 	bhi.w	800f9da <rmw_create_publisher+0x19e>
 800f8b2:	4a4f      	ldr	r2, [pc, #316]	@ (800f9f0 <rmw_create_publisher+0x1b4>)
 800f8b4:	462b      	mov	r3, r5
 800f8b6:	213c      	movs	r1, #60	@ 0x3c
 800f8b8:	4650      	mov	r0, sl
 800f8ba:	f00a fdad 	bl	801a418 <sniprintf>
 800f8be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f8c2:	e9c4 391f 	strd	r3, r9, [r4, #124]	@ 0x7c
 800f8c6:	4641      	mov	r1, r8
 800f8c8:	2250      	movs	r2, #80	@ 0x50
 800f8ca:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800f8ce:	f00b f844 	bl	801a95a <memcpy>
 800f8d2:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f8d6:	4947      	ldr	r1, [pc, #284]	@ (800f9f4 <rmw_create_publisher+0x1b8>)
 800f8d8:	2b02      	cmp	r3, #2
 800f8da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f8de:	bf0c      	ite	eq
 800f8e0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800f8e4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800f8e8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f8f0:	4630      	mov	r0, r6
 800f8f2:	f000 fd97 	bl	8010424 <get_message_typesupport_handle>
 800f8f6:	2800      	cmp	r0, #0
 800f8f8:	d06f      	beq.n	800f9da <rmw_create_publisher+0x19e>
 800f8fa:	6842      	ldr	r2, [r0, #4]
 800f8fc:	61a2      	str	r2, [r4, #24]
 800f8fe:	2a00      	cmp	r2, #0
 800f900:	d06b      	beq.n	800f9da <rmw_create_publisher+0x19e>
 800f902:	4629      	mov	r1, r5
 800f904:	4643      	mov	r3, r8
 800f906:	4648      	mov	r0, r9
 800f908:	f007 f90a 	bl	8016b20 <create_topic>
 800f90c:	6260      	str	r0, [r4, #36]	@ 0x24
 800f90e:	2800      	cmp	r0, #0
 800f910:	d063      	beq.n	800f9da <rmw_create_publisher+0x19e>
 800f912:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f916:	f241 5398 	movw	r3, #5528	@ 0x1598
 800f91a:	2103      	movs	r1, #3
 800f91c:	5ad0      	ldrh	r0, [r2, r3]
 800f91e:	1c45      	adds	r5, r0, #1
 800f920:	52d5      	strh	r5, [r2, r3]
 800f922:	f001 f9cf 	bl	8010cc4 <uxr_object_id>
 800f926:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f92a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800f92e:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800f932:	6912      	ldr	r2, [r2, #16]
 800f934:	6120      	str	r0, [r4, #16]
 800f936:	f04f 0a06 	mov.w	sl, #6
 800f93a:	f8cd a000 	str.w	sl, [sp]
 800f93e:	6819      	ldr	r1, [r3, #0]
 800f940:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f944:	f502 7028 	add.w	r0, r2, #672	@ 0x2a0
 800f948:	6922      	ldr	r2, [r4, #16]
 800f94a:	f000 ffab 	bl	80108a4 <uxr_buffer_create_publisher_bin>
 800f94e:	4602      	mov	r2, r0
 800f950:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f954:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f958:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f95c:	f000 fcd4 	bl	8010308 <run_xrce_session>
 800f960:	b3b8      	cbz	r0, 800f9d2 <rmw_create_publisher+0x196>
 800f962:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f966:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800f96a:	f241 539a 	movw	r3, #5530	@ 0x159a
 800f96e:	2105      	movs	r1, #5
 800f970:	5ad0      	ldrh	r0, [r2, r3]
 800f972:	1c45      	adds	r5, r0, #1
 800f974:	52d5      	strh	r5, [r2, r3]
 800f976:	f001 f9a5 	bl	8010cc4 <uxr_object_id>
 800f97a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800f97e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f982:	6915      	ldr	r5, [r2, #16]
 800f984:	6160      	str	r0, [r4, #20]
 800f986:	ae04      	add	r6, sp, #16
 800f988:	4641      	mov	r1, r8
 800f98a:	4630      	mov	r0, r6
 800f98c:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800f990:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800f994:	f000 fcd4 	bl	8010340 <convert_qos_profile>
 800f998:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f99c:	f8cd a00c 	str.w	sl, [sp, #12]
 800f9a0:	9001      	str	r0, [sp, #4]
 800f9a2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800f9a6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800f9aa:	9300      	str	r3, [sp, #0]
 800f9ac:	f505 7528 	add.w	r5, r5, #672	@ 0x2a0
 800f9b0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800f9b4:	f8d8 1000 	ldr.w	r1, [r8]
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	f000 ffd1 	bl	8010960 <uxr_buffer_create_datawriter_bin>
 800f9be:	4602      	mov	r2, r0
 800f9c0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800f9c4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f9c8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f9cc:	f000 fc9c 	bl	8010308 <run_xrce_session>
 800f9d0:	b938      	cbnz	r0, 800f9e2 <rmw_create_publisher+0x1a6>
 800f9d2:	4806      	ldr	r0, [pc, #24]	@ (800f9ec <rmw_create_publisher+0x1b0>)
 800f9d4:	4621      	mov	r1, r4
 800f9d6:	f007 f845 	bl	8016a64 <put_memory>
 800f9da:	4638      	mov	r0, r7
 800f9dc:	f000 fb42 	bl	8010064 <rmw_uxrce_fini_publisher_memory>
 800f9e0:	2700      	movs	r7, #0
 800f9e2:	4638      	mov	r0, r7
 800f9e4:	b007      	add	sp, #28
 800f9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ea:	bf00      	nop
 800f9ec:	2000a038 	.word	0x2000a038
 800f9f0:	0801e058 	.word	0x0801e058
 800f9f4:	0801e024 	.word	0x0801e024

0800f9f8 <rmw_publisher_get_actual_qos>:
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	4770      	bx	lr

0800f9fc <rmw_destroy_publisher>:
 800f9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9fe:	b128      	cbz	r0, 800fa0c <rmw_destroy_publisher+0x10>
 800fa00:	4604      	mov	r4, r0
 800fa02:	6800      	ldr	r0, [r0, #0]
 800fa04:	460d      	mov	r5, r1
 800fa06:	f000 fcff 	bl	8010408 <is_uxrce_rmw_identifier_valid>
 800fa0a:	b910      	cbnz	r0, 800fa12 <rmw_destroy_publisher+0x16>
 800fa0c:	2401      	movs	r4, #1
 800fa0e:	4620      	mov	r0, r4
 800fa10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa12:	6863      	ldr	r3, [r4, #4]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d0f9      	beq.n	800fa0c <rmw_destroy_publisher+0x10>
 800fa18:	2d00      	cmp	r5, #0
 800fa1a:	d0f7      	beq.n	800fa0c <rmw_destroy_publisher+0x10>
 800fa1c:	6828      	ldr	r0, [r5, #0]
 800fa1e:	f000 fcf3 	bl	8010408 <is_uxrce_rmw_identifier_valid>
 800fa22:	2800      	cmp	r0, #0
 800fa24:	d0f2      	beq.n	800fa0c <rmw_destroy_publisher+0x10>
 800fa26:	686c      	ldr	r4, [r5, #4]
 800fa28:	2c00      	cmp	r4, #0
 800fa2a:	d0ef      	beq.n	800fa0c <rmw_destroy_publisher+0x10>
 800fa2c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800fa2e:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800fa32:	f007 f8d7 	bl	8016be4 <destroy_topic>
 800fa36:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800fa3a:	6962      	ldr	r2, [r4, #20]
 800fa3c:	6918      	ldr	r0, [r3, #16]
 800fa3e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fa42:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa46:	6819      	ldr	r1, [r3, #0]
 800fa48:	f000 fe7a 	bl	8010740 <uxr_buffer_delete_entity>
 800fa4c:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800fa50:	6922      	ldr	r2, [r4, #16]
 800fa52:	4603      	mov	r3, r0
 800fa54:	6908      	ldr	r0, [r1, #16]
 800fa56:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fa5a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fa5e:	6809      	ldr	r1, [r1, #0]
 800fa60:	461c      	mov	r4, r3
 800fa62:	f000 fe6d 	bl	8010740 <uxr_buffer_delete_entity>
 800fa66:	4606      	mov	r6, r0
 800fa68:	6938      	ldr	r0, [r7, #16]
 800fa6a:	4622      	mov	r2, r4
 800fa6c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fa70:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fa74:	f000 fc48 	bl	8010308 <run_xrce_session>
 800fa78:	4604      	mov	r4, r0
 800fa7a:	6938      	ldr	r0, [r7, #16]
 800fa7c:	4632      	mov	r2, r6
 800fa7e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fa82:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fa86:	f000 fc3f 	bl	8010308 <run_xrce_session>
 800fa8a:	b12c      	cbz	r4, 800fa98 <rmw_destroy_publisher+0x9c>
 800fa8c:	b120      	cbz	r0, 800fa98 <rmw_destroy_publisher+0x9c>
 800fa8e:	2400      	movs	r4, #0
 800fa90:	4628      	mov	r0, r5
 800fa92:	f000 fae7 	bl	8010064 <rmw_uxrce_fini_publisher_memory>
 800fa96:	e7ba      	b.n	800fa0e <rmw_destroy_publisher+0x12>
 800fa98:	2402      	movs	r4, #2
 800fa9a:	e7f9      	b.n	800fa90 <rmw_destroy_publisher+0x94>

0800fa9c <rmw_destroy_service>:
 800fa9c:	b570      	push	{r4, r5, r6, lr}
 800fa9e:	b128      	cbz	r0, 800faac <rmw_destroy_service+0x10>
 800faa0:	4604      	mov	r4, r0
 800faa2:	6800      	ldr	r0, [r0, #0]
 800faa4:	460d      	mov	r5, r1
 800faa6:	f000 fcaf 	bl	8010408 <is_uxrce_rmw_identifier_valid>
 800faaa:	b910      	cbnz	r0, 800fab2 <rmw_destroy_service+0x16>
 800faac:	2401      	movs	r4, #1
 800faae:	4620      	mov	r0, r4
 800fab0:	bd70      	pop	{r4, r5, r6, pc}
 800fab2:	6863      	ldr	r3, [r4, #4]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d0f9      	beq.n	800faac <rmw_destroy_service+0x10>
 800fab8:	2d00      	cmp	r5, #0
 800faba:	d0f7      	beq.n	800faac <rmw_destroy_service+0x10>
 800fabc:	6828      	ldr	r0, [r5, #0]
 800fabe:	f000 fca3 	bl	8010408 <is_uxrce_rmw_identifier_valid>
 800fac2:	2800      	cmp	r0, #0
 800fac4:	d0f2      	beq.n	800faac <rmw_destroy_service+0x10>
 800fac6:	686e      	ldr	r6, [r5, #4]
 800fac8:	2e00      	cmp	r6, #0
 800faca:	d0ef      	beq.n	800faac <rmw_destroy_service+0x10>
 800facc:	6864      	ldr	r4, [r4, #4]
 800face:	6932      	ldr	r2, [r6, #16]
 800fad0:	6920      	ldr	r0, [r4, #16]
 800fad2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fad6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fada:	6819      	ldr	r1, [r3, #0]
 800fadc:	f001 f95a 	bl	8010d94 <uxr_buffer_cancel_data>
 800fae0:	4602      	mov	r2, r0
 800fae2:	6920      	ldr	r0, [r4, #16]
 800fae4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fae8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800faec:	f000 fc0c 	bl	8010308 <run_xrce_session>
 800faf0:	6920      	ldr	r0, [r4, #16]
 800faf2:	6932      	ldr	r2, [r6, #16]
 800faf4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800faf8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fafc:	6819      	ldr	r1, [r3, #0]
 800fafe:	f000 fe1f 	bl	8010740 <uxr_buffer_delete_entity>
 800fb02:	4602      	mov	r2, r0
 800fb04:	6920      	ldr	r0, [r4, #16]
 800fb06:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fb0a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fb0e:	f000 fbfb 	bl	8010308 <run_xrce_session>
 800fb12:	2800      	cmp	r0, #0
 800fb14:	4628      	mov	r0, r5
 800fb16:	bf14      	ite	ne
 800fb18:	2400      	movne	r4, #0
 800fb1a:	2402      	moveq	r4, #2
 800fb1c:	f000 face 	bl	80100bc <rmw_uxrce_fini_service_memory>
 800fb20:	e7c5      	b.n	800faae <rmw_destroy_service+0x12>
 800fb22:	bf00      	nop

0800fb24 <rmw_create_subscription>:
 800fb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb28:	b08d      	sub	sp, #52	@ 0x34
 800fb2a:	2800      	cmp	r0, #0
 800fb2c:	f000 80cf 	beq.w	800fcce <rmw_create_subscription+0x1aa>
 800fb30:	460e      	mov	r6, r1
 800fb32:	2900      	cmp	r1, #0
 800fb34:	f000 80cb 	beq.w	800fcce <rmw_create_subscription+0x1aa>
 800fb38:	4604      	mov	r4, r0
 800fb3a:	6800      	ldr	r0, [r0, #0]
 800fb3c:	4615      	mov	r5, r2
 800fb3e:	4698      	mov	r8, r3
 800fb40:	f000 fc62 	bl	8010408 <is_uxrce_rmw_identifier_valid>
 800fb44:	2800      	cmp	r0, #0
 800fb46:	f000 80c2 	beq.w	800fcce <rmw_create_subscription+0x1aa>
 800fb4a:	2d00      	cmp	r5, #0
 800fb4c:	f000 80bf 	beq.w	800fcce <rmw_create_subscription+0x1aa>
 800fb50:	782b      	ldrb	r3, [r5, #0]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	f000 80bb 	beq.w	800fcce <rmw_create_subscription+0x1aa>
 800fb58:	f1b8 0f00 	cmp.w	r8, #0
 800fb5c:	f000 80b7 	beq.w	800fcce <rmw_create_subscription+0x1aa>
 800fb60:	485d      	ldr	r0, [pc, #372]	@ (800fcd8 <rmw_create_subscription+0x1b4>)
 800fb62:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fb66:	f006 ff6d 	bl	8016a44 <get_memory>
 800fb6a:	4604      	mov	r4, r0
 800fb6c:	2800      	cmp	r0, #0
 800fb6e:	f000 80af 	beq.w	800fcd0 <rmw_create_subscription+0x1ac>
 800fb72:	68c7      	ldr	r7, [r0, #12]
 800fb74:	2300      	movs	r3, #0
 800fb76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fb7a:	f006 ffcb 	bl	8016b14 <rmw_get_implementation_identifier>
 800fb7e:	f107 0a94 	add.w	sl, r7, #148	@ 0x94
 800fb82:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800fb84:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800fb88:	4628      	mov	r0, r5
 800fb8a:	f7f0 fb89 	bl	80002a0 <strlen>
 800fb8e:	3001      	adds	r0, #1
 800fb90:	283c      	cmp	r0, #60	@ 0x3c
 800fb92:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800fb96:	f200 8097 	bhi.w	800fcc8 <rmw_create_subscription+0x1a4>
 800fb9a:	4a50      	ldr	r2, [pc, #320]	@ (800fcdc <rmw_create_subscription+0x1b8>)
 800fb9c:	462b      	mov	r3, r5
 800fb9e:	213c      	movs	r1, #60	@ 0x3c
 800fba0:	4650      	mov	r0, sl
 800fba2:	f00a fc39 	bl	801a418 <sniprintf>
 800fba6:	4641      	mov	r1, r8
 800fba8:	f8c7 9020 	str.w	r9, [r7, #32]
 800fbac:	2250      	movs	r2, #80	@ 0x50
 800fbae:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800fbb2:	f00a fed2 	bl	801a95a <memcpy>
 800fbb6:	494a      	ldr	r1, [pc, #296]	@ (800fce0 <rmw_create_subscription+0x1bc>)
 800fbb8:	4630      	mov	r0, r6
 800fbba:	f000 fc33 	bl	8010424 <get_message_typesupport_handle>
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	f000 8082 	beq.w	800fcc8 <rmw_create_subscription+0x1a4>
 800fbc4:	6842      	ldr	r2, [r0, #4]
 800fbc6:	61ba      	str	r2, [r7, #24]
 800fbc8:	2a00      	cmp	r2, #0
 800fbca:	d07d      	beq.n	800fcc8 <rmw_create_subscription+0x1a4>
 800fbcc:	4629      	mov	r1, r5
 800fbce:	4643      	mov	r3, r8
 800fbd0:	4648      	mov	r0, r9
 800fbd2:	f006 ffa5 	bl	8016b20 <create_topic>
 800fbd6:	61f8      	str	r0, [r7, #28]
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	d075      	beq.n	800fcc8 <rmw_create_subscription+0x1a4>
 800fbdc:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fbe0:	f241 539c 	movw	r3, #5532	@ 0x159c
 800fbe4:	2104      	movs	r1, #4
 800fbe6:	5ad0      	ldrh	r0, [r2, r3]
 800fbe8:	1c45      	adds	r5, r0, #1
 800fbea:	52d5      	strh	r5, [r2, r3]
 800fbec:	f001 f86a 	bl	8010cc4 <uxr_object_id>
 800fbf0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fbf4:	6138      	str	r0, [r7, #16]
 800fbf6:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800fbfa:	2606      	movs	r6, #6
 800fbfc:	9600      	str	r6, [sp, #0]
 800fbfe:	6811      	ldr	r1, [r2, #0]
 800fc00:	693a      	ldr	r2, [r7, #16]
 800fc02:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800fc06:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fc0a:	f000 fe79 	bl	8010900 <uxr_buffer_create_subscriber_bin>
 800fc0e:	4602      	mov	r2, r0
 800fc10:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fc14:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fc18:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fc1c:	f000 fb74 	bl	8010308 <run_xrce_session>
 800fc20:	2800      	cmp	r0, #0
 800fc22:	d04d      	beq.n	800fcc0 <rmw_create_subscription+0x19c>
 800fc24:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fc28:	f241 539e 	movw	r3, #5534	@ 0x159e
 800fc2c:	4631      	mov	r1, r6
 800fc2e:	5ad0      	ldrh	r0, [r2, r3]
 800fc30:	1c45      	adds	r5, r0, #1
 800fc32:	52d5      	strh	r5, [r2, r3]
 800fc34:	f001 f846 	bl	8010cc4 <uxr_object_id>
 800fc38:	ad08      	add	r5, sp, #32
 800fc3a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fc3e:	69fb      	ldr	r3, [r7, #28]
 800fc40:	6178      	str	r0, [r7, #20]
 800fc42:	4641      	mov	r1, r8
 800fc44:	4628      	mov	r0, r5
 800fc46:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800fc4a:	9305      	str	r3, [sp, #20]
 800fc4c:	f000 fb78 	bl	8010340 <convert_qos_profile>
 800fc50:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fc54:	9b05      	ldr	r3, [sp, #20]
 800fc56:	9001      	str	r0, [sp, #4]
 800fc58:	9603      	str	r6, [sp, #12]
 800fc5a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800fc5e:	691b      	ldr	r3, [r3, #16]
 800fc60:	9300      	str	r3, [sp, #0]
 800fc62:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800fc66:	f8db 1000 	ldr.w	r1, [fp]
 800fc6a:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800fc6e:	f000 feef 	bl	8010a50 <uxr_buffer_create_datareader_bin>
 800fc72:	4602      	mov	r2, r0
 800fc74:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fc78:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fc7c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fc80:	f000 fb42 	bl	8010308 <run_xrce_session>
 800fc84:	b1e0      	cbz	r0, 800fcc0 <rmw_create_subscription+0x19c>
 800fc86:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800fc8a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800fc8e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fc92:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fc96:	2200      	movs	r2, #0
 800fc98:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800fc9c:	2b02      	cmp	r3, #2
 800fc9e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fca2:	bf0c      	ite	eq
 800fca4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800fca8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800fcac:	9307      	str	r3, [sp, #28]
 800fcae:	aa0a      	add	r2, sp, #40	@ 0x28
 800fcb0:	9200      	str	r2, [sp, #0]
 800fcb2:	697a      	ldr	r2, [r7, #20]
 800fcb4:	6809      	ldr	r1, [r1, #0]
 800fcb6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fcba:	f001 f831 	bl	8010d20 <uxr_buffer_request_data>
 800fcbe:	e007      	b.n	800fcd0 <rmw_create_subscription+0x1ac>
 800fcc0:	4805      	ldr	r0, [pc, #20]	@ (800fcd8 <rmw_create_subscription+0x1b4>)
 800fcc2:	4639      	mov	r1, r7
 800fcc4:	f006 fece 	bl	8016a64 <put_memory>
 800fcc8:	4620      	mov	r0, r4
 800fcca:	f000 f9e1 	bl	8010090 <rmw_uxrce_fini_subscription_memory>
 800fcce:	2400      	movs	r4, #0
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	b00d      	add	sp, #52	@ 0x34
 800fcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd8:	2000d294 	.word	0x2000d294
 800fcdc:	0801e058 	.word	0x0801e058
 800fce0:	0801e024 	.word	0x0801e024

0800fce4 <rmw_subscription_get_actual_qos>:
 800fce4:	2000      	movs	r0, #0
 800fce6:	4770      	bx	lr

0800fce8 <rmw_destroy_subscription>:
 800fce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcea:	b128      	cbz	r0, 800fcf8 <rmw_destroy_subscription+0x10>
 800fcec:	4604      	mov	r4, r0
 800fcee:	6800      	ldr	r0, [r0, #0]
 800fcf0:	460d      	mov	r5, r1
 800fcf2:	f000 fb89 	bl	8010408 <is_uxrce_rmw_identifier_valid>
 800fcf6:	b910      	cbnz	r0, 800fcfe <rmw_destroy_subscription+0x16>
 800fcf8:	2401      	movs	r4, #1
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcfe:	6863      	ldr	r3, [r4, #4]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d0f9      	beq.n	800fcf8 <rmw_destroy_subscription+0x10>
 800fd04:	2d00      	cmp	r5, #0
 800fd06:	d0f7      	beq.n	800fcf8 <rmw_destroy_subscription+0x10>
 800fd08:	6828      	ldr	r0, [r5, #0]
 800fd0a:	f000 fb7d 	bl	8010408 <is_uxrce_rmw_identifier_valid>
 800fd0e:	2800      	cmp	r0, #0
 800fd10:	d0f2      	beq.n	800fcf8 <rmw_destroy_subscription+0x10>
 800fd12:	686c      	ldr	r4, [r5, #4]
 800fd14:	2c00      	cmp	r4, #0
 800fd16:	d0ef      	beq.n	800fcf8 <rmw_destroy_subscription+0x10>
 800fd18:	6a26      	ldr	r6, [r4, #32]
 800fd1a:	6962      	ldr	r2, [r4, #20]
 800fd1c:	6930      	ldr	r0, [r6, #16]
 800fd1e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fd22:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fd26:	6819      	ldr	r1, [r3, #0]
 800fd28:	f001 f834 	bl	8010d94 <uxr_buffer_cancel_data>
 800fd2c:	4602      	mov	r2, r0
 800fd2e:	6930      	ldr	r0, [r6, #16]
 800fd30:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fd34:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fd38:	f000 fae6 	bl	8010308 <run_xrce_session>
 800fd3c:	69e0      	ldr	r0, [r4, #28]
 800fd3e:	f006 ff51 	bl	8016be4 <destroy_topic>
 800fd42:	6a23      	ldr	r3, [r4, #32]
 800fd44:	6962      	ldr	r2, [r4, #20]
 800fd46:	6918      	ldr	r0, [r3, #16]
 800fd48:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fd4c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fd50:	6819      	ldr	r1, [r3, #0]
 800fd52:	f000 fcf5 	bl	8010740 <uxr_buffer_delete_entity>
 800fd56:	6a21      	ldr	r1, [r4, #32]
 800fd58:	6922      	ldr	r2, [r4, #16]
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	6908      	ldr	r0, [r1, #16]
 800fd5e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fd62:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fd66:	6809      	ldr	r1, [r1, #0]
 800fd68:	461c      	mov	r4, r3
 800fd6a:	f000 fce9 	bl	8010740 <uxr_buffer_delete_entity>
 800fd6e:	4607      	mov	r7, r0
 800fd70:	6930      	ldr	r0, [r6, #16]
 800fd72:	4622      	mov	r2, r4
 800fd74:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fd78:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fd7c:	f000 fac4 	bl	8010308 <run_xrce_session>
 800fd80:	4604      	mov	r4, r0
 800fd82:	6930      	ldr	r0, [r6, #16]
 800fd84:	463a      	mov	r2, r7
 800fd86:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fd8a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fd8e:	f000 fabb 	bl	8010308 <run_xrce_session>
 800fd92:	b12c      	cbz	r4, 800fda0 <rmw_destroy_subscription+0xb8>
 800fd94:	b120      	cbz	r0, 800fda0 <rmw_destroy_subscription+0xb8>
 800fd96:	2400      	movs	r4, #0
 800fd98:	4628      	mov	r0, r5
 800fd9a:	f000 f979 	bl	8010090 <rmw_uxrce_fini_subscription_memory>
 800fd9e:	e7ac      	b.n	800fcfa <rmw_destroy_subscription+0x12>
 800fda0:	2402      	movs	r4, #2
 800fda2:	e7f9      	b.n	800fd98 <rmw_destroy_subscription+0xb0>

0800fda4 <rmw_uxrce_transport_init>:
 800fda4:	b508      	push	{r3, lr}
 800fda6:	b108      	cbz	r0, 800fdac <rmw_uxrce_transport_init+0x8>
 800fda8:	f100 0210 	add.w	r2, r0, #16
 800fdac:	b139      	cbz	r1, 800fdbe <rmw_uxrce_transport_init+0x1a>
 800fdae:	6949      	ldr	r1, [r1, #20]
 800fdb0:	4610      	mov	r0, r2
 800fdb2:	f000 ff4f 	bl	8010c54 <uxr_init_custom_transport>
 800fdb6:	f080 0001 	eor.w	r0, r0, #1
 800fdba:	b2c0      	uxtb	r0, r0
 800fdbc:	bd08      	pop	{r3, pc}
 800fdbe:	4b04      	ldr	r3, [pc, #16]	@ (800fdd0 <rmw_uxrce_transport_init+0x2c>)
 800fdc0:	4610      	mov	r0, r2
 800fdc2:	6859      	ldr	r1, [r3, #4]
 800fdc4:	f000 ff46 	bl	8010c54 <uxr_init_custom_transport>
 800fdc8:	f080 0001 	eor.w	r0, r0, #1
 800fdcc:	b2c0      	uxtb	r0, r0
 800fdce:	bd08      	pop	{r3, pc}
 800fdd0:	2000a008 	.word	0x2000a008

0800fdd4 <rmw_uxrce_init_service_memory>:
 800fdd4:	b1b2      	cbz	r2, 800fe04 <rmw_uxrce_init_service_memory+0x30>
 800fdd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdd8:	7a07      	ldrb	r7, [r0, #8]
 800fdda:	4605      	mov	r5, r0
 800fddc:	b98f      	cbnz	r7, 800fe02 <rmw_uxrce_init_service_memory+0x2e>
 800fdde:	e9c0 7700 	strd	r7, r7, [r0]
 800fde2:	460c      	mov	r4, r1
 800fde4:	23c8      	movs	r3, #200	@ 0xc8
 800fde6:	2101      	movs	r1, #1
 800fde8:	fb03 4602 	mla	r6, r3, r2, r4
 800fdec:	60c3      	str	r3, [r0, #12]
 800fdee:	7201      	strb	r1, [r0, #8]
 800fdf0:	4621      	mov	r1, r4
 800fdf2:	4628      	mov	r0, r5
 800fdf4:	f006 fe36 	bl	8016a64 <put_memory>
 800fdf8:	60e4      	str	r4, [r4, #12]
 800fdfa:	f804 7bc8 	strb.w	r7, [r4], #200
 800fdfe:	42a6      	cmp	r6, r4
 800fe00:	d1f6      	bne.n	800fdf0 <rmw_uxrce_init_service_memory+0x1c>
 800fe02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe04:	4770      	bx	lr
 800fe06:	bf00      	nop

0800fe08 <rmw_uxrce_init_client_memory>:
 800fe08:	b1b2      	cbz	r2, 800fe38 <rmw_uxrce_init_client_memory+0x30>
 800fe0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe0c:	7a07      	ldrb	r7, [r0, #8]
 800fe0e:	4605      	mov	r5, r0
 800fe10:	b98f      	cbnz	r7, 800fe36 <rmw_uxrce_init_client_memory+0x2e>
 800fe12:	e9c0 7700 	strd	r7, r7, [r0]
 800fe16:	460c      	mov	r4, r1
 800fe18:	23c8      	movs	r3, #200	@ 0xc8
 800fe1a:	2101      	movs	r1, #1
 800fe1c:	fb03 4602 	mla	r6, r3, r2, r4
 800fe20:	60c3      	str	r3, [r0, #12]
 800fe22:	7201      	strb	r1, [r0, #8]
 800fe24:	4621      	mov	r1, r4
 800fe26:	4628      	mov	r0, r5
 800fe28:	f006 fe1c 	bl	8016a64 <put_memory>
 800fe2c:	60e4      	str	r4, [r4, #12]
 800fe2e:	f804 7bc8 	strb.w	r7, [r4], #200
 800fe32:	42a6      	cmp	r6, r4
 800fe34:	d1f6      	bne.n	800fe24 <rmw_uxrce_init_client_memory+0x1c>
 800fe36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe38:	4770      	bx	lr
 800fe3a:	bf00      	nop

0800fe3c <rmw_uxrce_init_publisher_memory>:
 800fe3c:	b1b2      	cbz	r2, 800fe6c <rmw_uxrce_init_publisher_memory+0x30>
 800fe3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe40:	7a07      	ldrb	r7, [r0, #8]
 800fe42:	4605      	mov	r5, r0
 800fe44:	b98f      	cbnz	r7, 800fe6a <rmw_uxrce_init_publisher_memory+0x2e>
 800fe46:	e9c0 7700 	strd	r7, r7, [r0]
 800fe4a:	460c      	mov	r4, r1
 800fe4c:	23d8      	movs	r3, #216	@ 0xd8
 800fe4e:	2101      	movs	r1, #1
 800fe50:	fb03 4602 	mla	r6, r3, r2, r4
 800fe54:	60c3      	str	r3, [r0, #12]
 800fe56:	7201      	strb	r1, [r0, #8]
 800fe58:	4621      	mov	r1, r4
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	f006 fe02 	bl	8016a64 <put_memory>
 800fe60:	60e4      	str	r4, [r4, #12]
 800fe62:	f804 7bd8 	strb.w	r7, [r4], #216
 800fe66:	42a6      	cmp	r6, r4
 800fe68:	d1f6      	bne.n	800fe58 <rmw_uxrce_init_publisher_memory+0x1c>
 800fe6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe6c:	4770      	bx	lr
 800fe6e:	bf00      	nop

0800fe70 <rmw_uxrce_init_subscription_memory>:
 800fe70:	b1b2      	cbz	r2, 800fea0 <rmw_uxrce_init_subscription_memory+0x30>
 800fe72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe74:	7a07      	ldrb	r7, [r0, #8]
 800fe76:	4605      	mov	r5, r0
 800fe78:	b98f      	cbnz	r7, 800fe9e <rmw_uxrce_init_subscription_memory+0x2e>
 800fe7a:	e9c0 7700 	strd	r7, r7, [r0]
 800fe7e:	460c      	mov	r4, r1
 800fe80:	23d0      	movs	r3, #208	@ 0xd0
 800fe82:	2101      	movs	r1, #1
 800fe84:	fb03 4602 	mla	r6, r3, r2, r4
 800fe88:	60c3      	str	r3, [r0, #12]
 800fe8a:	7201      	strb	r1, [r0, #8]
 800fe8c:	4621      	mov	r1, r4
 800fe8e:	4628      	mov	r0, r5
 800fe90:	f006 fde8 	bl	8016a64 <put_memory>
 800fe94:	60e4      	str	r4, [r4, #12]
 800fe96:	f804 7bd0 	strb.w	r7, [r4], #208
 800fe9a:	42a6      	cmp	r6, r4
 800fe9c:	d1f6      	bne.n	800fe8c <rmw_uxrce_init_subscription_memory+0x1c>
 800fe9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fea0:	4770      	bx	lr
 800fea2:	bf00      	nop

0800fea4 <rmw_uxrce_init_node_memory>:
 800fea4:	b1b2      	cbz	r2, 800fed4 <rmw_uxrce_init_node_memory+0x30>
 800fea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fea8:	7a07      	ldrb	r7, [r0, #8]
 800feaa:	4605      	mov	r5, r0
 800feac:	b98f      	cbnz	r7, 800fed2 <rmw_uxrce_init_node_memory+0x2e>
 800feae:	e9c0 7700 	strd	r7, r7, [r0]
 800feb2:	460c      	mov	r4, r1
 800feb4:	23a4      	movs	r3, #164	@ 0xa4
 800feb6:	2101      	movs	r1, #1
 800feb8:	fb03 4602 	mla	r6, r3, r2, r4
 800febc:	60c3      	str	r3, [r0, #12]
 800febe:	7201      	strb	r1, [r0, #8]
 800fec0:	4621      	mov	r1, r4
 800fec2:	4628      	mov	r0, r5
 800fec4:	f006 fdce 	bl	8016a64 <put_memory>
 800fec8:	60e4      	str	r4, [r4, #12]
 800feca:	f804 7ba4 	strb.w	r7, [r4], #164
 800fece:	42a6      	cmp	r6, r4
 800fed0:	d1f6      	bne.n	800fec0 <rmw_uxrce_init_node_memory+0x1c>
 800fed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fed4:	4770      	bx	lr
 800fed6:	bf00      	nop

0800fed8 <rmw_uxrce_init_session_memory>:
 800fed8:	b1d2      	cbz	r2, 800ff10 <rmw_uxrce_init_session_memory+0x38>
 800feda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fede:	7a07      	ldrb	r7, [r0, #8]
 800fee0:	4605      	mov	r5, r0
 800fee2:	b99f      	cbnz	r7, 800ff0c <rmw_uxrce_init_session_memory+0x34>
 800fee4:	e9c0 7700 	strd	r7, r7, [r0]
 800fee8:	f241 53a8 	movw	r3, #5544	@ 0x15a8
 800feec:	460c      	mov	r4, r1
 800feee:	2101      	movs	r1, #1
 800fef0:	fb03 4602 	mla	r6, r3, r2, r4
 800fef4:	60c3      	str	r3, [r0, #12]
 800fef6:	4698      	mov	r8, r3
 800fef8:	7201      	strb	r1, [r0, #8]
 800fefa:	4621      	mov	r1, r4
 800fefc:	4628      	mov	r0, r5
 800fefe:	f006 fdb1 	bl	8016a64 <put_memory>
 800ff02:	60e4      	str	r4, [r4, #12]
 800ff04:	7027      	strb	r7, [r4, #0]
 800ff06:	4444      	add	r4, r8
 800ff08:	42a6      	cmp	r6, r4
 800ff0a:	d1f6      	bne.n	800fefa <rmw_uxrce_init_session_memory+0x22>
 800ff0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff10:	4770      	bx	lr
 800ff12:	bf00      	nop

0800ff14 <rmw_uxrce_init_topic_memory>:
 800ff14:	b1c2      	cbz	r2, 800ff48 <rmw_uxrce_init_topic_memory+0x34>
 800ff16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff18:	7a07      	ldrb	r7, [r0, #8]
 800ff1a:	4606      	mov	r6, r0
 800ff1c:	b99f      	cbnz	r7, 800ff46 <rmw_uxrce_init_topic_memory+0x32>
 800ff1e:	e9c0 7700 	strd	r7, r7, [r0]
 800ff22:	460c      	mov	r4, r1
 800ff24:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800ff28:	2101      	movs	r1, #1
 800ff2a:	231c      	movs	r3, #28
 800ff2c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ff30:	7201      	strb	r1, [r0, #8]
 800ff32:	60c3      	str	r3, [r0, #12]
 800ff34:	4621      	mov	r1, r4
 800ff36:	4630      	mov	r0, r6
 800ff38:	f006 fd94 	bl	8016a64 <put_memory>
 800ff3c:	60e4      	str	r4, [r4, #12]
 800ff3e:	f804 7b1c 	strb.w	r7, [r4], #28
 800ff42:	42a5      	cmp	r5, r4
 800ff44:	d1f6      	bne.n	800ff34 <rmw_uxrce_init_topic_memory+0x20>
 800ff46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff48:	4770      	bx	lr
 800ff4a:	bf00      	nop

0800ff4c <rmw_uxrce_init_static_input_buffer_memory>:
 800ff4c:	b1d2      	cbz	r2, 800ff84 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800ff4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff50:	7a07      	ldrb	r7, [r0, #8]
 800ff52:	4606      	mov	r6, r0
 800ff54:	b9af      	cbnz	r7, 800ff82 <rmw_uxrce_init_static_input_buffer_memory+0x36>
 800ff56:	e9c0 7700 	strd	r7, r7, [r0]
 800ff5a:	460c      	mov	r4, r1
 800ff5c:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 800ff60:	2101      	movs	r1, #1
 800ff62:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ff66:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 800ff6a:	7201      	strb	r1, [r0, #8]
 800ff6c:	60c3      	str	r3, [r0, #12]
 800ff6e:	4621      	mov	r1, r4
 800ff70:	4630      	mov	r0, r6
 800ff72:	f006 fd77 	bl	8016a64 <put_memory>
 800ff76:	60e4      	str	r4, [r4, #12]
 800ff78:	7027      	strb	r7, [r4, #0]
 800ff7a:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800ff7e:	42a5      	cmp	r5, r4
 800ff80:	d1f5      	bne.n	800ff6e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ff82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff84:	4770      	bx	lr
 800ff86:	bf00      	nop

0800ff88 <rmw_uxrce_init_init_options_impl_memory>:
 800ff88:	b1b2      	cbz	r2, 800ffb8 <rmw_uxrce_init_init_options_impl_memory+0x30>
 800ff8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff8c:	7a07      	ldrb	r7, [r0, #8]
 800ff8e:	4605      	mov	r5, r0
 800ff90:	b98f      	cbnz	r7, 800ffb6 <rmw_uxrce_init_init_options_impl_memory+0x2e>
 800ff92:	e9c0 7700 	strd	r7, r7, [r0]
 800ff96:	460c      	mov	r4, r1
 800ff98:	232c      	movs	r3, #44	@ 0x2c
 800ff9a:	2101      	movs	r1, #1
 800ff9c:	fb03 4602 	mla	r6, r3, r2, r4
 800ffa0:	60c3      	str	r3, [r0, #12]
 800ffa2:	7201      	strb	r1, [r0, #8]
 800ffa4:	4621      	mov	r1, r4
 800ffa6:	4628      	mov	r0, r5
 800ffa8:	f006 fd5c 	bl	8016a64 <put_memory>
 800ffac:	60e4      	str	r4, [r4, #12]
 800ffae:	f804 7b2c 	strb.w	r7, [r4], #44
 800ffb2:	42a6      	cmp	r6, r4
 800ffb4:	d1f6      	bne.n	800ffa4 <rmw_uxrce_init_init_options_impl_memory+0x1c>
 800ffb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffb8:	4770      	bx	lr
 800ffba:	bf00      	nop

0800ffbc <rmw_uxrce_init_wait_set_memory>:
 800ffbc:	b1c2      	cbz	r2, 800fff0 <rmw_uxrce_init_wait_set_memory+0x34>
 800ffbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffc0:	7a07      	ldrb	r7, [r0, #8]
 800ffc2:	4606      	mov	r6, r0
 800ffc4:	b99f      	cbnz	r7, 800ffee <rmw_uxrce_init_wait_set_memory+0x32>
 800ffc6:	e9c0 7700 	strd	r7, r7, [r0]
 800ffca:	460c      	mov	r4, r1
 800ffcc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800ffd0:	2101      	movs	r1, #1
 800ffd2:	231c      	movs	r3, #28
 800ffd4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ffd8:	7201      	strb	r1, [r0, #8]
 800ffda:	60c3      	str	r3, [r0, #12]
 800ffdc:	4621      	mov	r1, r4
 800ffde:	4630      	mov	r0, r6
 800ffe0:	f006 fd40 	bl	8016a64 <put_memory>
 800ffe4:	60e4      	str	r4, [r4, #12]
 800ffe6:	f804 7b1c 	strb.w	r7, [r4], #28
 800ffea:	42a5      	cmp	r5, r4
 800ffec:	d1f6      	bne.n	800ffdc <rmw_uxrce_init_wait_set_memory+0x20>
 800ffee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fff0:	4770      	bx	lr
 800fff2:	bf00      	nop

0800fff4 <rmw_uxrce_init_guard_condition_memory>:
 800fff4:	b1b2      	cbz	r2, 8010024 <rmw_uxrce_init_guard_condition_memory+0x30>
 800fff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fff8:	7a07      	ldrb	r7, [r0, #8]
 800fffa:	4605      	mov	r5, r0
 800fffc:	b98f      	cbnz	r7, 8010022 <rmw_uxrce_init_guard_condition_memory+0x2e>
 800fffe:	e9c0 7700 	strd	r7, r7, [r0]
 8010002:	460c      	mov	r4, r1
 8010004:	2320      	movs	r3, #32
 8010006:	2101      	movs	r1, #1
 8010008:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 801000c:	7201      	strb	r1, [r0, #8]
 801000e:	60c3      	str	r3, [r0, #12]
 8010010:	4621      	mov	r1, r4
 8010012:	4628      	mov	r0, r5
 8010014:	f006 fd26 	bl	8016a64 <put_memory>
 8010018:	60e4      	str	r4, [r4, #12]
 801001a:	f804 7b20 	strb.w	r7, [r4], #32
 801001e:	42a6      	cmp	r6, r4
 8010020:	d1f6      	bne.n	8010010 <rmw_uxrce_init_guard_condition_memory+0x1c>
 8010022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010024:	4770      	bx	lr
 8010026:	bf00      	nop

08010028 <rmw_uxrce_fini_session_memory>:
 8010028:	4601      	mov	r1, r0
 801002a:	4801      	ldr	r0, [pc, #4]	@ (8010030 <rmw_uxrce_fini_session_memory+0x8>)
 801002c:	f006 bd1a 	b.w	8016a64 <put_memory>
 8010030:	2000d1d0 	.word	0x2000d1d0

08010034 <rmw_uxrce_fini_node_memory>:
 8010034:	b538      	push	{r3, r4, r5, lr}
 8010036:	4604      	mov	r4, r0
 8010038:	6800      	ldr	r0, [r0, #0]
 801003a:	b128      	cbz	r0, 8010048 <rmw_uxrce_fini_node_memory+0x14>
 801003c:	4b07      	ldr	r3, [pc, #28]	@ (801005c <rmw_uxrce_fini_node_memory+0x28>)
 801003e:	6819      	ldr	r1, [r3, #0]
 8010040:	f7f0 f8ce 	bl	80001e0 <strcmp>
 8010044:	b940      	cbnz	r0, 8010058 <rmw_uxrce_fini_node_memory+0x24>
 8010046:	6020      	str	r0, [r4, #0]
 8010048:	6861      	ldr	r1, [r4, #4]
 801004a:	b129      	cbz	r1, 8010058 <rmw_uxrce_fini_node_memory+0x24>
 801004c:	2500      	movs	r5, #0
 801004e:	4804      	ldr	r0, [pc, #16]	@ (8010060 <rmw_uxrce_fini_node_memory+0x2c>)
 8010050:	610d      	str	r5, [r1, #16]
 8010052:	f006 fd07 	bl	8016a64 <put_memory>
 8010056:	6065      	str	r5, [r4, #4]
 8010058:	bd38      	pop	{r3, r4, r5, pc}
 801005a:	bf00      	nop
 801005c:	0801e7ac 	.word	0x0801e7ac
 8010060:	2000cffc 	.word	0x2000cffc

08010064 <rmw_uxrce_fini_publisher_memory>:
 8010064:	b510      	push	{r4, lr}
 8010066:	4604      	mov	r4, r0
 8010068:	6800      	ldr	r0, [r0, #0]
 801006a:	b128      	cbz	r0, 8010078 <rmw_uxrce_fini_publisher_memory+0x14>
 801006c:	4b06      	ldr	r3, [pc, #24]	@ (8010088 <rmw_uxrce_fini_publisher_memory+0x24>)
 801006e:	6819      	ldr	r1, [r3, #0]
 8010070:	f7f0 f8b6 	bl	80001e0 <strcmp>
 8010074:	b938      	cbnz	r0, 8010086 <rmw_uxrce_fini_publisher_memory+0x22>
 8010076:	6020      	str	r0, [r4, #0]
 8010078:	6861      	ldr	r1, [r4, #4]
 801007a:	b121      	cbz	r1, 8010086 <rmw_uxrce_fini_publisher_memory+0x22>
 801007c:	4803      	ldr	r0, [pc, #12]	@ (801008c <rmw_uxrce_fini_publisher_memory+0x28>)
 801007e:	f006 fcf1 	bl	8016a64 <put_memory>
 8010082:	2300      	movs	r3, #0
 8010084:	6063      	str	r3, [r4, #4]
 8010086:	bd10      	pop	{r4, pc}
 8010088:	0801e7ac 	.word	0x0801e7ac
 801008c:	2000a038 	.word	0x2000a038

08010090 <rmw_uxrce_fini_subscription_memory>:
 8010090:	b510      	push	{r4, lr}
 8010092:	4604      	mov	r4, r0
 8010094:	6800      	ldr	r0, [r0, #0]
 8010096:	b128      	cbz	r0, 80100a4 <rmw_uxrce_fini_subscription_memory+0x14>
 8010098:	4b06      	ldr	r3, [pc, #24]	@ (80100b4 <rmw_uxrce_fini_subscription_memory+0x24>)
 801009a:	6819      	ldr	r1, [r3, #0]
 801009c:	f7f0 f8a0 	bl	80001e0 <strcmp>
 80100a0:	b938      	cbnz	r0, 80100b2 <rmw_uxrce_fini_subscription_memory+0x22>
 80100a2:	6020      	str	r0, [r4, #0]
 80100a4:	6861      	ldr	r1, [r4, #4]
 80100a6:	b121      	cbz	r1, 80100b2 <rmw_uxrce_fini_subscription_memory+0x22>
 80100a8:	4803      	ldr	r0, [pc, #12]	@ (80100b8 <rmw_uxrce_fini_subscription_memory+0x28>)
 80100aa:	f006 fcdb 	bl	8016a64 <put_memory>
 80100ae:	2300      	movs	r3, #0
 80100b0:	6063      	str	r3, [r4, #4]
 80100b2:	bd10      	pop	{r4, pc}
 80100b4:	0801e7ac 	.word	0x0801e7ac
 80100b8:	2000d294 	.word	0x2000d294

080100bc <rmw_uxrce_fini_service_memory>:
 80100bc:	b510      	push	{r4, lr}
 80100be:	4604      	mov	r4, r0
 80100c0:	6800      	ldr	r0, [r0, #0]
 80100c2:	b128      	cbz	r0, 80100d0 <rmw_uxrce_fini_service_memory+0x14>
 80100c4:	4b06      	ldr	r3, [pc, #24]	@ (80100e0 <rmw_uxrce_fini_service_memory+0x24>)
 80100c6:	6819      	ldr	r1, [r3, #0]
 80100c8:	f7f0 f88a 	bl	80001e0 <strcmp>
 80100cc:	b938      	cbnz	r0, 80100de <rmw_uxrce_fini_service_memory+0x22>
 80100ce:	6020      	str	r0, [r4, #0]
 80100d0:	6861      	ldr	r1, [r4, #4]
 80100d2:	b121      	cbz	r1, 80100de <rmw_uxrce_fini_service_memory+0x22>
 80100d4:	4803      	ldr	r0, [pc, #12]	@ (80100e4 <rmw_uxrce_fini_service_memory+0x28>)
 80100d6:	f006 fcc5 	bl	8016a64 <put_memory>
 80100da:	2300      	movs	r3, #0
 80100dc:	6063      	str	r3, [r4, #4]
 80100de:	bd10      	pop	{r4, pc}
 80100e0:	0801e7ac 	.word	0x0801e7ac
 80100e4:	2000d284 	.word	0x2000d284

080100e8 <rmw_uxrce_fini_client_memory>:
 80100e8:	b510      	push	{r4, lr}
 80100ea:	4604      	mov	r4, r0
 80100ec:	6800      	ldr	r0, [r0, #0]
 80100ee:	b128      	cbz	r0, 80100fc <rmw_uxrce_fini_client_memory+0x14>
 80100f0:	4b06      	ldr	r3, [pc, #24]	@ (801010c <rmw_uxrce_fini_client_memory+0x24>)
 80100f2:	6819      	ldr	r1, [r3, #0]
 80100f4:	f7f0 f874 	bl	80001e0 <strcmp>
 80100f8:	b938      	cbnz	r0, 801010a <rmw_uxrce_fini_client_memory+0x22>
 80100fa:	6020      	str	r0, [r4, #0]
 80100fc:	6861      	ldr	r1, [r4, #4]
 80100fe:	b121      	cbz	r1, 801010a <rmw_uxrce_fini_client_memory+0x22>
 8010100:	4803      	ldr	r0, [pc, #12]	@ (8010110 <rmw_uxrce_fini_client_memory+0x28>)
 8010102:	f006 fcaf 	bl	8016a64 <put_memory>
 8010106:	2300      	movs	r3, #0
 8010108:	6063      	str	r3, [r4, #4]
 801010a:	bd10      	pop	{r4, pc}
 801010c:	0801e7ac 	.word	0x0801e7ac
 8010110:	2000a8b8 	.word	0x2000a8b8

08010114 <rmw_uxrce_fini_topic_memory>:
 8010114:	b510      	push	{r4, lr}
 8010116:	4601      	mov	r1, r0
 8010118:	4604      	mov	r4, r0
 801011a:	4803      	ldr	r0, [pc, #12]	@ (8010128 <rmw_uxrce_fini_topic_memory+0x14>)
 801011c:	f006 fca2 	bl	8016a64 <put_memory>
 8010120:	2300      	movs	r3, #0
 8010122:	61a3      	str	r3, [r4, #24]
 8010124:	bd10      	pop	{r4, pc}
 8010126:	bf00      	nop
 8010128:	2000d1c0 	.word	0x2000d1c0

0801012c <rmw_uxrce_get_static_input_buffer_for_entity>:
 801012c:	b082      	sub	sp, #8
 801012e:	b4f0      	push	{r4, r5, r6, r7}
 8010130:	4923      	ldr	r1, [pc, #140]	@ (80101c0 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 8010132:	ac04      	add	r4, sp, #16
 8010134:	e884 000c 	stmia.w	r4, {r2, r3}
 8010138:	680d      	ldr	r5, [r1, #0]
 801013a:	9c05      	ldr	r4, [sp, #20]
 801013c:	2d00      	cmp	r5, #0
 801013e:	d03d      	beq.n	80101bc <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 8010140:	462b      	mov	r3, r5
 8010142:	2100      	movs	r1, #0
 8010144:	68da      	ldr	r2, [r3, #12]
 8010146:	689b      	ldr	r3, [r3, #8]
 8010148:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 801014c:	4290      	cmp	r0, r2
 801014e:	bf08      	it	eq
 8010150:	3101      	addeq	r1, #1
 8010152:	2b00      	cmp	r3, #0
 8010154:	d1f6      	bne.n	8010144 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8010156:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801015a:	2b02      	cmp	r3, #2
 801015c:	d026      	beq.n	80101ac <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 801015e:	d906      	bls.n	801016e <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8010160:	2b03      	cmp	r3, #3
 8010162:	d004      	beq.n	801016e <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8010164:	2100      	movs	r1, #0
 8010166:	bcf0      	pop	{r4, r5, r6, r7}
 8010168:	4608      	mov	r0, r1
 801016a:	b002      	add	sp, #8
 801016c:	4770      	bx	lr
 801016e:	b304      	cbz	r4, 80101b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010170:	428c      	cmp	r4, r1
 8010172:	d81e      	bhi.n	80101b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010174:	2d00      	cmp	r5, #0
 8010176:	d0f5      	beq.n	8010164 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010178:	2100      	movs	r1, #0
 801017a:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801017e:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8010182:	e002      	b.n	801018a <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 8010184:	68ad      	ldr	r5, [r5, #8]
 8010186:	2d00      	cmp	r5, #0
 8010188:	d0ed      	beq.n	8010166 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 801018a:	68eb      	ldr	r3, [r5, #12]
 801018c:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8010190:	4290      	cmp	r0, r2
 8010192:	d1f7      	bne.n	8010184 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8010194:	f603 0318 	addw	r3, r3, #2072	@ 0x818
 8010198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019c:	42b2      	cmp	r2, r6
 801019e:	eb73 0407 	sbcs.w	r4, r3, r7
 80101a2:	daef      	bge.n	8010184 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 80101a4:	4616      	mov	r6, r2
 80101a6:	461f      	mov	r7, r3
 80101a8:	4629      	mov	r1, r5
 80101aa:	e7eb      	b.n	8010184 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 80101ac:	b10c      	cbz	r4, 80101b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80101ae:	428c      	cmp	r4, r1
 80101b0:	d9d8      	bls.n	8010164 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80101b2:	bcf0      	pop	{r4, r5, r6, r7}
 80101b4:	4802      	ldr	r0, [pc, #8]	@ (80101c0 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 80101b6:	b002      	add	sp, #8
 80101b8:	f006 bc44 	b.w	8016a44 <get_memory>
 80101bc:	4629      	mov	r1, r5
 80101be:	e7ca      	b.n	8010156 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80101c0:	2000a028 	.word	0x2000a028

080101c4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 80101c4:	4b12      	ldr	r3, [pc, #72]	@ (8010210 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	b1fb      	cbz	r3, 801020a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 80101ca:	b4f0      	push	{r4, r5, r6, r7}
 80101cc:	f04f 0c00 	mov.w	ip, #0
 80101d0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80101d4:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80101d8:	e001      	b.n	80101de <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 80101da:	689b      	ldr	r3, [r3, #8]
 80101dc:	b193      	cbz	r3, 8010204 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 80101de:	68da      	ldr	r2, [r3, #12]
 80101e0:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 80101e4:	4288      	cmp	r0, r1
 80101e6:	d1f8      	bne.n	80101da <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 80101e8:	f602 0218 	addw	r2, r2, #2072	@ 0x818
 80101ec:	e9d2 6700 	ldrd	r6, r7, [r2]
 80101f0:	42a6      	cmp	r6, r4
 80101f2:	eb77 0205 	sbcs.w	r2, r7, r5
 80101f6:	daf0      	bge.n	80101da <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 80101f8:	469c      	mov	ip, r3
 80101fa:	689b      	ldr	r3, [r3, #8]
 80101fc:	4634      	mov	r4, r6
 80101fe:	463d      	mov	r5, r7
 8010200:	2b00      	cmp	r3, #0
 8010202:	d1ec      	bne.n	80101de <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 8010204:	4660      	mov	r0, ip
 8010206:	bcf0      	pop	{r4, r5, r6, r7}
 8010208:	4770      	bx	lr
 801020a:	4618      	mov	r0, r3
 801020c:	4770      	bx	lr
 801020e:	bf00      	nop
 8010210:	2000a028 	.word	0x2000a028
 8010214:	00000000 	.word	0x00000000

08010218 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801021c:	4e38      	ldr	r6, [pc, #224]	@ (8010300 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 801021e:	f8d6 8000 	ldr.w	r8, [r6]
 8010222:	b083      	sub	sp, #12
 8010224:	f006 fffa 	bl	801721c <rmw_uros_epoch_nanos>
 8010228:	f1b8 0f00 	cmp.w	r8, #0
 801022c:	d05f      	beq.n	80102ee <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 801022e:	46b1      	mov	r9, r6
 8010230:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010234:	f896 3820 	ldrb.w	r3, [r6, #2080]	@ 0x820
 8010238:	2b04      	cmp	r3, #4
 801023a:	4682      	mov	sl, r0
 801023c:	468b      	mov	fp, r1
 801023e:	d02d      	beq.n	801029c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8010240:	2b05      	cmp	r3, #5
 8010242:	d041      	beq.n	80102c8 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 8010244:	2b03      	cmp	r3, #3
 8010246:	d029      	beq.n	801029c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 8010248:	2200      	movs	r2, #0
 801024a:	2300      	movs	r3, #0
 801024c:	e9cd 2300 	strd	r2, r3, [sp]
 8010250:	2001      	movs	r0, #1
 8010252:	2100      	movs	r1, #0
 8010254:	9b00      	ldr	r3, [sp, #0]
 8010256:	f606 0618 	addw	r6, r6, #2072	@ 0x818
 801025a:	e9d6 6700 	ldrd	r6, r7, [r6]
 801025e:	18c2      	adds	r2, r0, r3
 8010260:	9b01      	ldr	r3, [sp, #4]
 8010262:	eb41 0303 	adc.w	r3, r1, r3
 8010266:	1994      	adds	r4, r2, r6
 8010268:	eb43 0507 	adc.w	r5, r3, r7
 801026c:	4554      	cmp	r4, sl
 801026e:	eb75 020b 	sbcs.w	r2, r5, fp
 8010272:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010276:	db03      	blt.n	8010280 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8010278:	45b2      	cmp	sl, r6
 801027a:	eb7b 0207 	sbcs.w	r2, fp, r7
 801027e:	da05      	bge.n	801028c <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 8010280:	4641      	mov	r1, r8
 8010282:	4648      	mov	r0, r9
 8010284:	9300      	str	r3, [sp, #0]
 8010286:	f006 fbed 	bl	8016a64 <put_memory>
 801028a:	9b00      	ldr	r3, [sp, #0]
 801028c:	b37b      	cbz	r3, 80102ee <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 801028e:	4698      	mov	r8, r3
 8010290:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010294:	f896 3820 	ldrb.w	r3, [r6, #2080]	@ 0x820
 8010298:	2b04      	cmp	r3, #4
 801029a:	d1d1      	bne.n	8010240 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 801029c:	f8d6 1814 	ldr.w	r1, [r6, #2068]	@ 0x814
 80102a0:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	@ 0x40
 80102a4:	e9cd 2300 	strd	r2, r3, [sp]
 80102a8:	4313      	orrs	r3, r2
 80102aa:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	@ 0x48
 80102ae:	d015      	beq.n	80102dc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 80102b0:	9a01      	ldr	r2, [sp, #4]
 80102b2:	4b14      	ldr	r3, [pc, #80]	@ (8010304 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 80102b4:	fb03 f702 	mul.w	r7, r3, r2
 80102b8:	9a00      	ldr	r2, [sp, #0]
 80102ba:	fba2 2303 	umull	r2, r3, r2, r3
 80102be:	e9cd 2300 	strd	r2, r3, [sp]
 80102c2:	443b      	add	r3, r7
 80102c4:	9301      	str	r3, [sp, #4]
 80102c6:	e7c5      	b.n	8010254 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 80102c8:	f8d6 1814 	ldr.w	r1, [r6, #2068]	@ 0x814
 80102cc:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	@ 0x48
 80102d0:	e9cd 2300 	strd	r2, r3, [sp]
 80102d4:	4313      	orrs	r3, r2
 80102d6:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	@ 0x50
 80102da:	d1e9      	bne.n	80102b0 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 80102dc:	ea50 0301 	orrs.w	r3, r0, r1
 80102e0:	bf02      	ittt	eq
 80102e2:	a305      	addeq	r3, pc, #20	@ (adr r3, 80102f8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 80102e4:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 80102e8:	e9cd 2300 	strdeq	r2, r3, [sp]
 80102ec:	e7b2      	b.n	8010254 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 80102ee:	b003      	add	sp, #12
 80102f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102f4:	f3af 8000 	nop.w
 80102f8:	fc23ac00 	.word	0xfc23ac00
 80102fc:	00000006 	.word	0x00000006
 8010300:	2000a028 	.word	0x2000a028
 8010304:	3b9aca00 	.word	0x3b9aca00

08010308 <run_xrce_session>:
 8010308:	b510      	push	{r4, lr}
 801030a:	788c      	ldrb	r4, [r1, #2]
 801030c:	b086      	sub	sp, #24
 801030e:	2c01      	cmp	r4, #1
 8010310:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010314:	d00c      	beq.n	8010330 <run_xrce_session+0x28>
 8010316:	4619      	mov	r1, r3
 8010318:	2301      	movs	r3, #1
 801031a:	9300      	str	r3, [sp, #0]
 801031c:	f10d 020e 	add.w	r2, sp, #14
 8010320:	f10d 0317 	add.w	r3, sp, #23
 8010324:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010328:	f001 fb20 	bl	801196c <uxr_run_session_until_all_status>
 801032c:	b006      	add	sp, #24
 801032e:	bd10      	pop	{r4, pc}
 8010330:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010334:	f000 ff38 	bl	80111a8 <uxr_flash_output_streams>
 8010338:	4620      	mov	r0, r4
 801033a:	b006      	add	sp, #24
 801033c:	bd10      	pop	{r4, pc}
 801033e:	bf00      	nop

08010340 <convert_qos_profile>:
 8010340:	b430      	push	{r4, r5}
 8010342:	7a0d      	ldrb	r5, [r1, #8]
 8010344:	780c      	ldrb	r4, [r1, #0]
 8010346:	7a4a      	ldrb	r2, [r1, #9]
 8010348:	8889      	ldrh	r1, [r1, #4]
 801034a:	8081      	strh	r1, [r0, #4]
 801034c:	f1a5 0502 	sub.w	r5, r5, #2
 8010350:	f1a4 0402 	sub.w	r4, r4, #2
 8010354:	2a02      	cmp	r2, #2
 8010356:	fab5 f585 	clz	r5, r5
 801035a:	fab4 f484 	clz	r4, r4
 801035e:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8010362:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8010366:	bf18      	it	ne
 8010368:	2200      	movne	r2, #0
 801036a:	7045      	strb	r5, [r0, #1]
 801036c:	7084      	strb	r4, [r0, #2]
 801036e:	7002      	strb	r2, [r0, #0]
 8010370:	bc30      	pop	{r4, r5}
 8010372:	4770      	bx	lr

08010374 <generate_type_name>:
 8010374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010376:	2300      	movs	r3, #0
 8010378:	700b      	strb	r3, [r1, #0]
 801037a:	6803      	ldr	r3, [r0, #0]
 801037c:	b087      	sub	sp, #28
 801037e:	4614      	mov	r4, r2
 8010380:	b1d3      	cbz	r3, 80103b8 <generate_type_name+0x44>
 8010382:	4d0f      	ldr	r5, [pc, #60]	@ (80103c0 <generate_type_name+0x4c>)
 8010384:	462f      	mov	r7, r5
 8010386:	4a0f      	ldr	r2, [pc, #60]	@ (80103c4 <generate_type_name+0x50>)
 8010388:	4e0f      	ldr	r6, [pc, #60]	@ (80103c8 <generate_type_name+0x54>)
 801038a:	6840      	ldr	r0, [r0, #4]
 801038c:	9004      	str	r0, [sp, #16]
 801038e:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8010392:	4608      	mov	r0, r1
 8010394:	9205      	str	r2, [sp, #20]
 8010396:	9503      	str	r5, [sp, #12]
 8010398:	4a0c      	ldr	r2, [pc, #48]	@ (80103cc <generate_type_name+0x58>)
 801039a:	9700      	str	r7, [sp, #0]
 801039c:	4621      	mov	r1, r4
 801039e:	f00a f83b 	bl	801a418 <sniprintf>
 80103a2:	2800      	cmp	r0, #0
 80103a4:	db05      	blt.n	80103b2 <generate_type_name+0x3e>
 80103a6:	4284      	cmp	r4, r0
 80103a8:	bfd4      	ite	le
 80103aa:	2000      	movle	r0, #0
 80103ac:	2001      	movgt	r0, #1
 80103ae:	b007      	add	sp, #28
 80103b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103b2:	2000      	movs	r0, #0
 80103b4:	b007      	add	sp, #28
 80103b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80103b8:	4b05      	ldr	r3, [pc, #20]	@ (80103d0 <generate_type_name+0x5c>)
 80103ba:	4d01      	ldr	r5, [pc, #4]	@ (80103c0 <generate_type_name+0x4c>)
 80103bc:	461f      	mov	r7, r3
 80103be:	e7e2      	b.n	8010386 <generate_type_name+0x12>
 80103c0:	0801e048 	.word	0x0801e048
 80103c4:	0801e05c 	.word	0x0801e05c
 80103c8:	0801e060 	.word	0x0801e060
 80103cc:	0801e04c 	.word	0x0801e04c
 80103d0:	0801e584 	.word	0x0801e584

080103d4 <generate_topic_name>:
 80103d4:	b510      	push	{r4, lr}
 80103d6:	b082      	sub	sp, #8
 80103d8:	4b09      	ldr	r3, [pc, #36]	@ (8010400 <generate_topic_name+0x2c>)
 80103da:	9000      	str	r0, [sp, #0]
 80103dc:	4614      	mov	r4, r2
 80103de:	4608      	mov	r0, r1
 80103e0:	4611      	mov	r1, r2
 80103e2:	4a08      	ldr	r2, [pc, #32]	@ (8010404 <generate_topic_name+0x30>)
 80103e4:	f00a f818 	bl	801a418 <sniprintf>
 80103e8:	2800      	cmp	r0, #0
 80103ea:	db05      	blt.n	80103f8 <generate_topic_name+0x24>
 80103ec:	4284      	cmp	r4, r0
 80103ee:	bfd4      	ite	le
 80103f0:	2000      	movle	r0, #0
 80103f2:	2001      	movgt	r0, #1
 80103f4:	b002      	add	sp, #8
 80103f6:	bd10      	pop	{r4, pc}
 80103f8:	2000      	movs	r0, #0
 80103fa:	b002      	add	sp, #8
 80103fc:	bd10      	pop	{r4, pc}
 80103fe:	bf00      	nop
 8010400:	0801e06c 	.word	0x0801e06c
 8010404:	0801e064 	.word	0x0801e064

08010408 <is_uxrce_rmw_identifier_valid>:
 8010408:	b510      	push	{r4, lr}
 801040a:	4604      	mov	r4, r0
 801040c:	b140      	cbz	r0, 8010420 <is_uxrce_rmw_identifier_valid+0x18>
 801040e:	f006 fb81 	bl	8016b14 <rmw_get_implementation_identifier>
 8010412:	4601      	mov	r1, r0
 8010414:	4620      	mov	r0, r4
 8010416:	f7ef fee3 	bl	80001e0 <strcmp>
 801041a:	fab0 f080 	clz	r0, r0
 801041e:	0940      	lsrs	r0, r0, #5
 8010420:	bd10      	pop	{r4, pc}
 8010422:	bf00      	nop

08010424 <get_message_typesupport_handle>:
 8010424:	6883      	ldr	r3, [r0, #8]
 8010426:	4718      	bx	r3

08010428 <get_message_typesupport_handle_function>:
 8010428:	b510      	push	{r4, lr}
 801042a:	4604      	mov	r4, r0
 801042c:	6800      	ldr	r0, [r0, #0]
 801042e:	f7ef fed7 	bl	80001e0 <strcmp>
 8010432:	2800      	cmp	r0, #0
 8010434:	bf0c      	ite	eq
 8010436:	4620      	moveq	r0, r4
 8010438:	2000      	movne	r0, #0
 801043a:	bd10      	pop	{r4, pc}

0801043c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 801043c:	f000 b862 	b.w	8010504 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>

08010440 <_String__max_serialized_size>:
 8010440:	2000      	movs	r0, #0
 8010442:	4770      	bx	lr

08010444 <_String__cdr_serialize>:
 8010444:	b1c0      	cbz	r0, 8010478 <_String__cdr_serialize+0x34>
 8010446:	b570      	push	{r4, r5, r6, lr}
 8010448:	6806      	ldr	r6, [r0, #0]
 801044a:	460d      	mov	r5, r1
 801044c:	4604      	mov	r4, r0
 801044e:	b156      	cbz	r6, 8010466 <_String__cdr_serialize+0x22>
 8010450:	4630      	mov	r0, r6
 8010452:	f7ef ff25 	bl	80002a0 <strlen>
 8010456:	4631      	mov	r1, r6
 8010458:	6060      	str	r0, [r4, #4]
 801045a:	1c42      	adds	r2, r0, #1
 801045c:	4628      	mov	r0, r5
 801045e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010462:	f000 b915 	b.w	8010690 <ucdr_serialize_sequence_char>
 8010466:	4630      	mov	r0, r6
 8010468:	6060      	str	r0, [r4, #4]
 801046a:	4632      	mov	r2, r6
 801046c:	4631      	mov	r1, r6
 801046e:	4628      	mov	r0, r5
 8010470:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010474:	f000 b90c 	b.w	8010690 <ucdr_serialize_sequence_char>
 8010478:	4770      	bx	lr
 801047a:	bf00      	nop

0801047c <get_serialized_size_std_msgs__msg__String>:
 801047c:	b510      	push	{r4, lr}
 801047e:	4604      	mov	r4, r0
 8010480:	b130      	cbz	r0, 8010490 <get_serialized_size_std_msgs__msg__String+0x14>
 8010482:	4608      	mov	r0, r1
 8010484:	2104      	movs	r1, #4
 8010486:	f000 f897 	bl	80105b8 <ucdr_alignment>
 801048a:	6863      	ldr	r3, [r4, #4]
 801048c:	3305      	adds	r3, #5
 801048e:	4418      	add	r0, r3
 8010490:	bd10      	pop	{r4, pc}
 8010492:	bf00      	nop

08010494 <_String__cdr_deserialize>:
 8010494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010496:	460c      	mov	r4, r1
 8010498:	b083      	sub	sp, #12
 801049a:	b1a1      	cbz	r1, 80104c6 <_String__cdr_deserialize+0x32>
 801049c:	688f      	ldr	r7, [r1, #8]
 801049e:	6809      	ldr	r1, [r1, #0]
 80104a0:	ab01      	add	r3, sp, #4
 80104a2:	463a      	mov	r2, r7
 80104a4:	4606      	mov	r6, r0
 80104a6:	f000 f905 	bl	80106b4 <ucdr_deserialize_sequence_char>
 80104aa:	9b01      	ldr	r3, [sp, #4]
 80104ac:	4605      	mov	r5, r0
 80104ae:	b920      	cbnz	r0, 80104ba <_String__cdr_deserialize+0x26>
 80104b0:	429f      	cmp	r7, r3
 80104b2:	d30c      	bcc.n	80104ce <_String__cdr_deserialize+0x3a>
 80104b4:	4628      	mov	r0, r5
 80104b6:	b003      	add	sp, #12
 80104b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104ba:	b103      	cbz	r3, 80104be <_String__cdr_deserialize+0x2a>
 80104bc:	3b01      	subs	r3, #1
 80104be:	4628      	mov	r0, r5
 80104c0:	6063      	str	r3, [r4, #4]
 80104c2:	b003      	add	sp, #12
 80104c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104c6:	460d      	mov	r5, r1
 80104c8:	4628      	mov	r0, r5
 80104ca:	b003      	add	sp, #12
 80104cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104ce:	2101      	movs	r1, #1
 80104d0:	75b0      	strb	r0, [r6, #22]
 80104d2:	7571      	strb	r1, [r6, #21]
 80104d4:	6060      	str	r0, [r4, #4]
 80104d6:	4630      	mov	r0, r6
 80104d8:	f000 f884 	bl	80105e4 <ucdr_align_to>
 80104dc:	4630      	mov	r0, r6
 80104de:	9901      	ldr	r1, [sp, #4]
 80104e0:	f000 f8b6 	bl	8010650 <ucdr_advance_buffer>
 80104e4:	4628      	mov	r0, r5
 80104e6:	b003      	add	sp, #12
 80104e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104ea:	bf00      	nop

080104ec <_String__get_serialized_size>:
 80104ec:	b510      	push	{r4, lr}
 80104ee:	4604      	mov	r4, r0
 80104f0:	b130      	cbz	r0, 8010500 <_String__get_serialized_size+0x14>
 80104f2:	2104      	movs	r1, #4
 80104f4:	2000      	movs	r0, #0
 80104f6:	f000 f85f 	bl	80105b8 <ucdr_alignment>
 80104fa:	6863      	ldr	r3, [r4, #4]
 80104fc:	3305      	adds	r3, #5
 80104fe:	4418      	add	r0, r3
 8010500:	bd10      	pop	{r4, pc}
 8010502:	bf00      	nop

08010504 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 8010504:	4800      	ldr	r0, [pc, #0]	@ (8010508 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 8010506:	4770      	bx	lr
 8010508:	20000058 	.word	0x20000058

0801050c <ucdr_check_buffer_available_for>:
 801050c:	7d83      	ldrb	r3, [r0, #22]
 801050e:	b93b      	cbnz	r3, 8010520 <ucdr_check_buffer_available_for+0x14>
 8010510:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010514:	4419      	add	r1, r3
 8010516:	4288      	cmp	r0, r1
 8010518:	bf34      	ite	cc
 801051a:	2000      	movcc	r0, #0
 801051c:	2001      	movcs	r0, #1
 801051e:	4770      	bx	lr
 8010520:	2000      	movs	r0, #0
 8010522:	4770      	bx	lr

08010524 <ucdr_check_final_buffer_behavior>:
 8010524:	7d83      	ldrb	r3, [r0, #22]
 8010526:	b943      	cbnz	r3, 801053a <ucdr_check_final_buffer_behavior+0x16>
 8010528:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 801052c:	4291      	cmp	r1, r2
 801052e:	b510      	push	{r4, lr}
 8010530:	4604      	mov	r4, r0
 8010532:	d205      	bcs.n	8010540 <ucdr_check_final_buffer_behavior+0x1c>
 8010534:	2301      	movs	r3, #1
 8010536:	4618      	mov	r0, r3
 8010538:	bd10      	pop	{r4, pc}
 801053a:	2300      	movs	r3, #0
 801053c:	4618      	mov	r0, r3
 801053e:	4770      	bx	lr
 8010540:	6982      	ldr	r2, [r0, #24]
 8010542:	b13a      	cbz	r2, 8010554 <ucdr_check_final_buffer_behavior+0x30>
 8010544:	69c1      	ldr	r1, [r0, #28]
 8010546:	4790      	blx	r2
 8010548:	f080 0301 	eor.w	r3, r0, #1
 801054c:	b2db      	uxtb	r3, r3
 801054e:	75a0      	strb	r0, [r4, #22]
 8010550:	4618      	mov	r0, r3
 8010552:	bd10      	pop	{r4, pc}
 8010554:	2001      	movs	r0, #1
 8010556:	75a0      	strb	r0, [r4, #22]
 8010558:	e7fa      	b.n	8010550 <ucdr_check_final_buffer_behavior+0x2c>
 801055a:	bf00      	nop

0801055c <ucdr_set_on_full_buffer_callback>:
 801055c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010560:	4770      	bx	lr
 8010562:	bf00      	nop

08010564 <ucdr_init_buffer_origin_offset_endian>:
 8010564:	b430      	push	{r4, r5}
 8010566:	9c02      	ldr	r4, [sp, #8]
 8010568:	f89d 500c 	ldrb.w	r5, [sp, #12]
 801056c:	6001      	str	r1, [r0, #0]
 801056e:	440a      	add	r2, r1
 8010570:	60c3      	str	r3, [r0, #12]
 8010572:	4421      	add	r1, r4
 8010574:	441c      	add	r4, r3
 8010576:	2300      	movs	r3, #0
 8010578:	6104      	str	r4, [r0, #16]
 801057a:	7505      	strb	r5, [r0, #20]
 801057c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8010580:	bc30      	pop	{r4, r5}
 8010582:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8010586:	7543      	strb	r3, [r0, #21]
 8010588:	7583      	strb	r3, [r0, #22]
 801058a:	4770      	bx	lr

0801058c <ucdr_init_buffer_origin_offset>:
 801058c:	b510      	push	{r4, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	9c04      	ldr	r4, [sp, #16]
 8010592:	9400      	str	r4, [sp, #0]
 8010594:	2401      	movs	r4, #1
 8010596:	9401      	str	r4, [sp, #4]
 8010598:	f7ff ffe4 	bl	8010564 <ucdr_init_buffer_origin_offset_endian>
 801059c:	b002      	add	sp, #8
 801059e:	bd10      	pop	{r4, pc}

080105a0 <ucdr_init_buffer_origin>:
 80105a0:	b510      	push	{r4, lr}
 80105a2:	b082      	sub	sp, #8
 80105a4:	2400      	movs	r4, #0
 80105a6:	9400      	str	r4, [sp, #0]
 80105a8:	f7ff fff0 	bl	801058c <ucdr_init_buffer_origin_offset>
 80105ac:	b002      	add	sp, #8
 80105ae:	bd10      	pop	{r4, pc}

080105b0 <ucdr_init_buffer>:
 80105b0:	2300      	movs	r3, #0
 80105b2:	f7ff bff5 	b.w	80105a0 <ucdr_init_buffer_origin>
 80105b6:	bf00      	nop

080105b8 <ucdr_alignment>:
 80105b8:	fbb0 f3f1 	udiv	r3, r0, r1
 80105bc:	fb03 0011 	mls	r0, r3, r1, r0
 80105c0:	1a08      	subs	r0, r1, r0
 80105c2:	3901      	subs	r1, #1
 80105c4:	4008      	ands	r0, r1
 80105c6:	4770      	bx	lr

080105c8 <ucdr_buffer_alignment>:
 80105c8:	7d43      	ldrb	r3, [r0, #21]
 80105ca:	428b      	cmp	r3, r1
 80105cc:	d208      	bcs.n	80105e0 <ucdr_buffer_alignment+0x18>
 80105ce:	6903      	ldr	r3, [r0, #16]
 80105d0:	fbb3 f0f1 	udiv	r0, r3, r1
 80105d4:	fb01 3010 	mls	r0, r1, r0, r3
 80105d8:	1a08      	subs	r0, r1, r0
 80105da:	3901      	subs	r1, #1
 80105dc:	4008      	ands	r0, r1
 80105de:	4770      	bx	lr
 80105e0:	2000      	movs	r0, #0
 80105e2:	4770      	bx	lr

080105e4 <ucdr_align_to>:
 80105e4:	b570      	push	{r4, r5, r6, lr}
 80105e6:	4604      	mov	r4, r0
 80105e8:	460e      	mov	r6, r1
 80105ea:	f7ff ffed 	bl	80105c8 <ucdr_buffer_alignment>
 80105ee:	68a5      	ldr	r5, [r4, #8]
 80105f0:	6863      	ldr	r3, [r4, #4]
 80105f2:	6922      	ldr	r2, [r4, #16]
 80105f4:	7566      	strb	r6, [r4, #21]
 80105f6:	4405      	add	r5, r0
 80105f8:	42ab      	cmp	r3, r5
 80105fa:	4410      	add	r0, r2
 80105fc:	bf28      	it	cs
 80105fe:	462b      	movcs	r3, r5
 8010600:	6120      	str	r0, [r4, #16]
 8010602:	60a3      	str	r3, [r4, #8]
 8010604:	bd70      	pop	{r4, r5, r6, pc}
 8010606:	bf00      	nop

08010608 <ucdr_buffer_length>:
 8010608:	6882      	ldr	r2, [r0, #8]
 801060a:	6800      	ldr	r0, [r0, #0]
 801060c:	1a10      	subs	r0, r2, r0
 801060e:	4770      	bx	lr

08010610 <ucdr_buffer_remaining>:
 8010610:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010614:	1a10      	subs	r0, r2, r0
 8010616:	4770      	bx	lr

08010618 <ucdr_check_final_buffer_behavior_array>:
 8010618:	b538      	push	{r3, r4, r5, lr}
 801061a:	7d83      	ldrb	r3, [r0, #22]
 801061c:	b963      	cbnz	r3, 8010638 <ucdr_check_final_buffer_behavior_array+0x20>
 801061e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010622:	429a      	cmp	r2, r3
 8010624:	4604      	mov	r4, r0
 8010626:	460d      	mov	r5, r1
 8010628:	d308      	bcc.n	801063c <ucdr_check_final_buffer_behavior_array+0x24>
 801062a:	b139      	cbz	r1, 801063c <ucdr_check_final_buffer_behavior_array+0x24>
 801062c:	6983      	ldr	r3, [r0, #24]
 801062e:	b163      	cbz	r3, 801064a <ucdr_check_final_buffer_behavior_array+0x32>
 8010630:	69c1      	ldr	r1, [r0, #28]
 8010632:	4798      	blx	r3
 8010634:	75a0      	strb	r0, [r4, #22]
 8010636:	b108      	cbz	r0, 801063c <ucdr_check_final_buffer_behavior_array+0x24>
 8010638:	2000      	movs	r0, #0
 801063a:	bd38      	pop	{r3, r4, r5, pc}
 801063c:	4620      	mov	r0, r4
 801063e:	f7ff ffe7 	bl	8010610 <ucdr_buffer_remaining>
 8010642:	42a8      	cmp	r0, r5
 8010644:	bf28      	it	cs
 8010646:	4628      	movcs	r0, r5
 8010648:	bd38      	pop	{r3, r4, r5, pc}
 801064a:	2301      	movs	r3, #1
 801064c:	7583      	strb	r3, [r0, #22]
 801064e:	e7f3      	b.n	8010638 <ucdr_check_final_buffer_behavior_array+0x20>

08010650 <ucdr_advance_buffer>:
 8010650:	b538      	push	{r3, r4, r5, lr}
 8010652:	4604      	mov	r4, r0
 8010654:	460d      	mov	r5, r1
 8010656:	f7ff ff59 	bl	801050c <ucdr_check_buffer_available_for>
 801065a:	b178      	cbz	r0, 801067c <ucdr_advance_buffer+0x2c>
 801065c:	68a3      	ldr	r3, [r4, #8]
 801065e:	6921      	ldr	r1, [r4, #16]
 8010660:	442b      	add	r3, r5
 8010662:	60a3      	str	r3, [r4, #8]
 8010664:	2301      	movs	r3, #1
 8010666:	4429      	add	r1, r5
 8010668:	7563      	strb	r3, [r4, #21]
 801066a:	6121      	str	r1, [r4, #16]
 801066c:	bd38      	pop	{r3, r4, r5, pc}
 801066e:	68a2      	ldr	r2, [r4, #8]
 8010670:	6923      	ldr	r3, [r4, #16]
 8010672:	4402      	add	r2, r0
 8010674:	4403      	add	r3, r0
 8010676:	1a2d      	subs	r5, r5, r0
 8010678:	60a2      	str	r2, [r4, #8]
 801067a:	6123      	str	r3, [r4, #16]
 801067c:	2201      	movs	r2, #1
 801067e:	4629      	mov	r1, r5
 8010680:	4620      	mov	r0, r4
 8010682:	f7ff ffc9 	bl	8010618 <ucdr_check_final_buffer_behavior_array>
 8010686:	2800      	cmp	r0, #0
 8010688:	d1f1      	bne.n	801066e <ucdr_advance_buffer+0x1e>
 801068a:	2301      	movs	r3, #1
 801068c:	7563      	strb	r3, [r4, #21]
 801068e:	bd38      	pop	{r3, r4, r5, pc}

08010690 <ucdr_serialize_sequence_char>:
 8010690:	b570      	push	{r4, r5, r6, lr}
 8010692:	460e      	mov	r6, r1
 8010694:	4615      	mov	r5, r2
 8010696:	7d01      	ldrb	r1, [r0, #20]
 8010698:	4604      	mov	r4, r0
 801069a:	f007 f9d7 	bl	8017a4c <ucdr_serialize_endian_uint32_t>
 801069e:	b90d      	cbnz	r5, 80106a4 <ucdr_serialize_sequence_char+0x14>
 80106a0:	2001      	movs	r0, #1
 80106a2:	bd70      	pop	{r4, r5, r6, pc}
 80106a4:	7d21      	ldrb	r1, [r4, #20]
 80106a6:	462b      	mov	r3, r5
 80106a8:	4632      	mov	r2, r6
 80106aa:	4620      	mov	r0, r4
 80106ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80106b0:	f006 bdc2 	b.w	8017238 <ucdr_serialize_endian_array_char>

080106b4 <ucdr_deserialize_sequence_char>:
 80106b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106b8:	461d      	mov	r5, r3
 80106ba:	4616      	mov	r6, r2
 80106bc:	460f      	mov	r7, r1
 80106be:	461a      	mov	r2, r3
 80106c0:	7d01      	ldrb	r1, [r0, #20]
 80106c2:	4604      	mov	r4, r0
 80106c4:	f007 faea 	bl	8017c9c <ucdr_deserialize_endian_uint32_t>
 80106c8:	682b      	ldr	r3, [r5, #0]
 80106ca:	429e      	cmp	r6, r3
 80106cc:	bf3c      	itt	cc
 80106ce:	2201      	movcc	r2, #1
 80106d0:	75a2      	strbcc	r2, [r4, #22]
 80106d2:	b913      	cbnz	r3, 80106da <ucdr_deserialize_sequence_char+0x26>
 80106d4:	2001      	movs	r0, #1
 80106d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106da:	7d21      	ldrb	r1, [r4, #20]
 80106dc:	463a      	mov	r2, r7
 80106de:	4620      	mov	r0, r4
 80106e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106e4:	f006 bdda 	b.w	801729c <ucdr_deserialize_endian_array_char>

080106e8 <ucdr_serialize_sequence_uint8_t>:
 80106e8:	b570      	push	{r4, r5, r6, lr}
 80106ea:	460e      	mov	r6, r1
 80106ec:	4615      	mov	r5, r2
 80106ee:	7d01      	ldrb	r1, [r0, #20]
 80106f0:	4604      	mov	r4, r0
 80106f2:	f007 f9ab 	bl	8017a4c <ucdr_serialize_endian_uint32_t>
 80106f6:	b90d      	cbnz	r5, 80106fc <ucdr_serialize_sequence_uint8_t+0x14>
 80106f8:	2001      	movs	r0, #1
 80106fa:	bd70      	pop	{r4, r5, r6, pc}
 80106fc:	7d21      	ldrb	r1, [r4, #20]
 80106fe:	462b      	mov	r3, r5
 8010700:	4632      	mov	r2, r6
 8010702:	4620      	mov	r0, r4
 8010704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010708:	f006 be2c 	b.w	8017364 <ucdr_serialize_endian_array_uint8_t>

0801070c <ucdr_deserialize_sequence_uint8_t>:
 801070c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010710:	461d      	mov	r5, r3
 8010712:	4616      	mov	r6, r2
 8010714:	460f      	mov	r7, r1
 8010716:	461a      	mov	r2, r3
 8010718:	7d01      	ldrb	r1, [r0, #20]
 801071a:	4604      	mov	r4, r0
 801071c:	f007 fabe 	bl	8017c9c <ucdr_deserialize_endian_uint32_t>
 8010720:	682b      	ldr	r3, [r5, #0]
 8010722:	429e      	cmp	r6, r3
 8010724:	bf3c      	itt	cc
 8010726:	2201      	movcc	r2, #1
 8010728:	75a2      	strbcc	r2, [r4, #22]
 801072a:	b913      	cbnz	r3, 8010732 <ucdr_deserialize_sequence_uint8_t+0x26>
 801072c:	2001      	movs	r0, #1
 801072e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010732:	7d21      	ldrb	r1, [r4, #20]
 8010734:	463a      	mov	r2, r7
 8010736:	4620      	mov	r0, r4
 8010738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801073c:	f006 be76 	b.w	801742c <ucdr_deserialize_endian_array_uint8_t>

08010740 <uxr_buffer_delete_entity>:
 8010740:	b530      	push	{r4, r5, lr}
 8010742:	b08f      	sub	sp, #60	@ 0x3c
 8010744:	2403      	movs	r4, #3
 8010746:	2500      	movs	r5, #0
 8010748:	e9cd 4500 	strd	r4, r5, [sp]
 801074c:	9202      	str	r2, [sp, #8]
 801074e:	ab06      	add	r3, sp, #24
 8010750:	2204      	movs	r2, #4
 8010752:	9103      	str	r1, [sp, #12]
 8010754:	4604      	mov	r4, r0
 8010756:	f001 fb45 	bl	8011de4 <uxr_prepare_stream_to_write_submessage>
 801075a:	b918      	cbnz	r0, 8010764 <uxr_buffer_delete_entity+0x24>
 801075c:	4604      	mov	r4, r0
 801075e:	4620      	mov	r0, r4
 8010760:	b00f      	add	sp, #60	@ 0x3c
 8010762:	bd30      	pop	{r4, r5, pc}
 8010764:	9902      	ldr	r1, [sp, #8]
 8010766:	aa05      	add	r2, sp, #20
 8010768:	4620      	mov	r0, r4
 801076a:	f001 fc75 	bl	8012058 <uxr_init_base_object_request>
 801076e:	a905      	add	r1, sp, #20
 8010770:	4604      	mov	r4, r0
 8010772:	a806      	add	r0, sp, #24
 8010774:	f003 fb2e 	bl	8013dd4 <uxr_serialize_DELETE_Payload>
 8010778:	4620      	mov	r0, r4
 801077a:	b00f      	add	sp, #60	@ 0x3c
 801077c:	bd30      	pop	{r4, r5, pc}
 801077e:	bf00      	nop

08010780 <uxr_common_create_entity>:
 8010780:	b530      	push	{r4, r5, lr}
 8010782:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8010786:	b08d      	sub	sp, #52	@ 0x34
 8010788:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801078c:	2d01      	cmp	r5, #1
 801078e:	bf0c      	ite	eq
 8010790:	f003 0201 	andeq.w	r2, r3, #1
 8010794:	2200      	movne	r2, #0
 8010796:	330e      	adds	r3, #14
 8010798:	4604      	mov	r4, r0
 801079a:	441a      	add	r2, r3
 801079c:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 80107a0:	9001      	str	r0, [sp, #4]
 80107a2:	2101      	movs	r1, #1
 80107a4:	9100      	str	r1, [sp, #0]
 80107a6:	b292      	uxth	r2, r2
 80107a8:	9903      	ldr	r1, [sp, #12]
 80107aa:	ab04      	add	r3, sp, #16
 80107ac:	4620      	mov	r0, r4
 80107ae:	f001 fb19 	bl	8011de4 <uxr_prepare_stream_to_write_submessage>
 80107b2:	b918      	cbnz	r0, 80107bc <uxr_common_create_entity+0x3c>
 80107b4:	4604      	mov	r4, r0
 80107b6:	4620      	mov	r0, r4
 80107b8:	b00d      	add	sp, #52	@ 0x34
 80107ba:	bd30      	pop	{r4, r5, pc}
 80107bc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80107be:	9902      	ldr	r1, [sp, #8]
 80107c0:	4620      	mov	r0, r4
 80107c2:	f001 fc49 	bl	8012058 <uxr_init_base_object_request>
 80107c6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80107c8:	4604      	mov	r4, r0
 80107ca:	a804      	add	r0, sp, #16
 80107cc:	f003 fa56 	bl	8013c7c <uxr_serialize_CREATE_Payload>
 80107d0:	4620      	mov	r0, r4
 80107d2:	b00d      	add	sp, #52	@ 0x34
 80107d4:	bd30      	pop	{r4, r5, pc}
 80107d6:	bf00      	nop

080107d8 <uxr_buffer_create_participant_bin>:
 80107d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107da:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 80107de:	ac11      	add	r4, sp, #68	@ 0x44
 80107e0:	9103      	str	r1, [sp, #12]
 80107e2:	9e9c      	ldr	r6, [sp, #624]	@ 0x270
 80107e4:	f8a4 3210 	strh.w	r3, [r4, #528]	@ 0x210
 80107e8:	2103      	movs	r1, #3
 80107ea:	7221      	strb	r1, [r4, #8]
 80107ec:	2301      	movs	r3, #1
 80107ee:	2100      	movs	r1, #0
 80107f0:	7123      	strb	r3, [r4, #4]
 80107f2:	f89d 7274 	ldrb.w	r7, [sp, #628]	@ 0x274
 80107f6:	9202      	str	r2, [sp, #8]
 80107f8:	4605      	mov	r5, r0
 80107fa:	f88d 1014 	strb.w	r1, [sp, #20]
 80107fe:	b1ce      	cbz	r6, 8010834 <uxr_buffer_create_participant_bin+0x5c>
 8010800:	f88d 301c 	strb.w	r3, [sp, #28]
 8010804:	9608      	str	r6, [sp, #32]
 8010806:	a809      	add	r0, sp, #36	@ 0x24
 8010808:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801080c:	a915      	add	r1, sp, #84	@ 0x54
 801080e:	f7ff fecf 	bl	80105b0 <ucdr_init_buffer>
 8010812:	a905      	add	r1, sp, #20
 8010814:	a809      	add	r0, sp, #36	@ 0x24
 8010816:	f002 fdf9 	bl	801340c <uxr_serialize_OBJK_DomainParticipant_Binary>
 801081a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801081c:	9401      	str	r4, [sp, #4]
 801081e:	b283      	uxth	r3, r0
 8010820:	9700      	str	r7, [sp, #0]
 8010822:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010826:	60e0      	str	r0, [r4, #12]
 8010828:	4628      	mov	r0, r5
 801082a:	f7ff ffa9 	bl	8010780 <uxr_common_create_entity>
 801082e:	f50d 7d17 	add.w	sp, sp, #604	@ 0x25c
 8010832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010834:	f88d 601c 	strb.w	r6, [sp, #28]
 8010838:	e7e5      	b.n	8010806 <uxr_buffer_create_participant_bin+0x2e>
 801083a:	bf00      	nop

0801083c <uxr_buffer_create_topic_bin>:
 801083c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801083e:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8010842:	ac13      	add	r4, sp, #76	@ 0x4c
 8010844:	4605      	mov	r5, r0
 8010846:	9105      	str	r1, [sp, #20]
 8010848:	4618      	mov	r0, r3
 801084a:	a997      	add	r1, sp, #604	@ 0x25c
 801084c:	2602      	movs	r6, #2
 801084e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010852:	f89d 7280 	ldrb.w	r7, [sp, #640]	@ 0x280
 8010856:	f88d 6050 	strb.w	r6, [sp, #80]	@ 0x50
 801085a:	9e9f      	ldr	r6, [sp, #636]	@ 0x27c
 801085c:	f000 fa54 	bl	8010d08 <uxr_object_id_to_raw>
 8010860:	9a9e      	ldr	r2, [sp, #632]	@ 0x278
 8010862:	9206      	str	r2, [sp, #24]
 8010864:	2303      	movs	r3, #3
 8010866:	2101      	movs	r1, #1
 8010868:	7223      	strb	r3, [r4, #8]
 801086a:	a80b      	add	r0, sp, #44	@ 0x2c
 801086c:	2300      	movs	r3, #0
 801086e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010872:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8010876:	a917      	add	r1, sp, #92	@ 0x5c
 8010878:	f88d 301c 	strb.w	r3, [sp, #28]
 801087c:	960a      	str	r6, [sp, #40]	@ 0x28
 801087e:	f7ff fe97 	bl	80105b0 <ucdr_init_buffer>
 8010882:	a906      	add	r1, sp, #24
 8010884:	a80b      	add	r0, sp, #44	@ 0x2c
 8010886:	f002 fde3 	bl	8013450 <uxr_serialize_OBJK_Topic_Binary>
 801088a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801088c:	9401      	str	r4, [sp, #4]
 801088e:	9700      	str	r7, [sp, #0]
 8010890:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010894:	4628      	mov	r0, r5
 8010896:	b2b3      	uxth	r3, r6
 8010898:	60e6      	str	r6, [r4, #12]
 801089a:	f7ff ff71 	bl	8010780 <uxr_common_create_entity>
 801089e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80108a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080108a4 <uxr_buffer_create_publisher_bin>:
 80108a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108a6:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80108aa:	ac0e      	add	r4, sp, #56	@ 0x38
 80108ac:	4605      	mov	r5, r0
 80108ae:	9105      	str	r1, [sp, #20]
 80108b0:	4618      	mov	r0, r3
 80108b2:	2603      	movs	r6, #3
 80108b4:	a992      	add	r1, sp, #584	@ 0x248
 80108b6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80108ba:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80108be:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80108c2:	f000 fa21 	bl	8010d08 <uxr_object_id_to_raw>
 80108c6:	2300      	movs	r3, #0
 80108c8:	a806      	add	r0, sp, #24
 80108ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80108ce:	a912      	add	r1, sp, #72	@ 0x48
 80108d0:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80108d4:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80108d8:	7226      	strb	r6, [r4, #8]
 80108da:	f7ff fe69 	bl	80105b0 <ucdr_init_buffer>
 80108de:	a993      	add	r1, sp, #588	@ 0x24c
 80108e0:	a806      	add	r0, sp, #24
 80108e2:	f002 fe69 	bl	80135b8 <uxr_serialize_OBJK_Publisher_Binary>
 80108e6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80108e8:	9700      	str	r7, [sp, #0]
 80108ea:	9401      	str	r4, [sp, #4]
 80108ec:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80108f0:	4628      	mov	r0, r5
 80108f2:	b2b3      	uxth	r3, r6
 80108f4:	60e6      	str	r6, [r4, #12]
 80108f6:	f7ff ff43 	bl	8010780 <uxr_common_create_entity>
 80108fa:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80108fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010900 <uxr_buffer_create_subscriber_bin>:
 8010900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010902:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010906:	ac0e      	add	r4, sp, #56	@ 0x38
 8010908:	4605      	mov	r5, r0
 801090a:	9105      	str	r1, [sp, #20]
 801090c:	4618      	mov	r0, r3
 801090e:	a992      	add	r1, sp, #584	@ 0x248
 8010910:	2604      	movs	r6, #4
 8010912:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010916:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 801091a:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 801091e:	f000 f9f3 	bl	8010d08 <uxr_object_id_to_raw>
 8010922:	2103      	movs	r1, #3
 8010924:	2300      	movs	r3, #0
 8010926:	a806      	add	r0, sp, #24
 8010928:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801092c:	7221      	strb	r1, [r4, #8]
 801092e:	a912      	add	r1, sp, #72	@ 0x48
 8010930:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010934:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010938:	f7ff fe3a 	bl	80105b0 <ucdr_init_buffer>
 801093c:	a993      	add	r1, sp, #588	@ 0x24c
 801093e:	a806      	add	r0, sp, #24
 8010940:	f002 feea 	bl	8013718 <uxr_serialize_OBJK_Subscriber_Binary>
 8010944:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010946:	9700      	str	r7, [sp, #0]
 8010948:	9401      	str	r4, [sp, #4]
 801094a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801094e:	4628      	mov	r0, r5
 8010950:	b2b3      	uxth	r3, r6
 8010952:	60e6      	str	r6, [r4, #12]
 8010954:	f7ff ff14 	bl	8010780 <uxr_common_create_entity>
 8010958:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 801095c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801095e:	bf00      	nop

08010960 <uxr_buffer_create_datawriter_bin>:
 8010960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010964:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010968:	ac1d      	add	r4, sp, #116	@ 0x74
 801096a:	2505      	movs	r5, #5
 801096c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010970:	9105      	str	r1, [sp, #20]
 8010972:	4606      	mov	r6, r0
 8010974:	a9a1      	add	r1, sp, #644	@ 0x284
 8010976:	4618      	mov	r0, r3
 8010978:	7125      	strb	r5, [r4, #4]
 801097a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801097e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010982:	2703      	movs	r7, #3
 8010984:	f000 f9c0 	bl	8010d08 <uxr_object_id_to_raw>
 8010988:	a90e      	add	r1, sp, #56	@ 0x38
 801098a:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 801098c:	7227      	strb	r7, [r4, #8]
 801098e:	f000 f9bb 	bl	8010d08 <uxr_object_id_to_raw>
 8010992:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010996:	f89d 12a5 	ldrb.w	r1, [sp, #677]	@ 0x2a5
 801099a:	3d00      	subs	r5, #0
 801099c:	f04f 0300 	mov.w	r3, #0
 80109a0:	bf18      	it	ne
 80109a2:	2501      	movne	r5, #1
 80109a4:	2201      	movs	r2, #1
 80109a6:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 80109aa:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 80109ae:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80109b2:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 80109b6:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 80109ba:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 80109be:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 80109c2:	bb89      	cbnz	r1, 8010a28 <uxr_buffer_create_datawriter_bin+0xc8>
 80109c4:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80109c8:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 80109cc:	f04f 0c13 	mov.w	ip, #19
 80109d0:	250b      	movs	r5, #11
 80109d2:	2221      	movs	r2, #33	@ 0x21
 80109d4:	2111      	movs	r1, #17
 80109d6:	2009      	movs	r0, #9
 80109d8:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 80109dc:	b923      	cbnz	r3, 80109e8 <uxr_buffer_create_datawriter_bin+0x88>
 80109de:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 80109e2:	4672      	mov	r2, lr
 80109e4:	4661      	mov	r1, ip
 80109e6:	4628      	mov	r0, r5
 80109e8:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 80109ec:	2b01      	cmp	r3, #1
 80109ee:	d025      	beq.n	8010a3c <uxr_buffer_create_datawriter_bin+0xdc>
 80109f0:	2b03      	cmp	r3, #3
 80109f2:	d029      	beq.n	8010a48 <uxr_buffer_create_datawriter_bin+0xe8>
 80109f4:	b32b      	cbz	r3, 8010a42 <uxr_buffer_create_datawriter_bin+0xe2>
 80109f6:	a806      	add	r0, sp, #24
 80109f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80109fc:	a921      	add	r1, sp, #132	@ 0x84
 80109fe:	f7ff fdd7 	bl	80105b0 <ucdr_init_buffer>
 8010a02:	a90e      	add	r1, sp, #56	@ 0x38
 8010a04:	a806      	add	r0, sp, #24
 8010a06:	f002 ff39 	bl	801387c <uxr_serialize_OBJK_DataWriter_Binary>
 8010a0a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010a0c:	9401      	str	r4, [sp, #4]
 8010a0e:	b283      	uxth	r3, r0
 8010a10:	f8cd 8000 	str.w	r8, [sp]
 8010a14:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010a18:	60e0      	str	r0, [r4, #12]
 8010a1a:	4630      	mov	r0, r6
 8010a1c:	f7ff feb0 	bl	8010780 <uxr_common_create_entity>
 8010a20:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a28:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010a2c:	f04f 0c12 	mov.w	ip, #18
 8010a30:	250a      	movs	r5, #10
 8010a32:	2220      	movs	r2, #32
 8010a34:	2110      	movs	r1, #16
 8010a36:	2008      	movs	r0, #8
 8010a38:	2702      	movs	r7, #2
 8010a3a:	e7cd      	b.n	80109d8 <uxr_buffer_create_datawriter_bin+0x78>
 8010a3c:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010a40:	e7d9      	b.n	80109f6 <uxr_buffer_create_datawriter_bin+0x96>
 8010a42:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010a46:	e7d6      	b.n	80109f6 <uxr_buffer_create_datawriter_bin+0x96>
 8010a48:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010a4c:	e7d3      	b.n	80109f6 <uxr_buffer_create_datawriter_bin+0x96>
 8010a4e:	bf00      	nop

08010a50 <uxr_buffer_create_datareader_bin>:
 8010a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a54:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010a58:	ac1f      	add	r4, sp, #124	@ 0x7c
 8010a5a:	2506      	movs	r5, #6
 8010a5c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010a60:	9105      	str	r1, [sp, #20]
 8010a62:	4606      	mov	r6, r0
 8010a64:	a9a3      	add	r1, sp, #652	@ 0x28c
 8010a66:	4618      	mov	r0, r3
 8010a68:	7125      	strb	r5, [r4, #4]
 8010a6a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8010a6e:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8010a72:	2703      	movs	r7, #3
 8010a74:	f000 f948 	bl	8010d08 <uxr_object_id_to_raw>
 8010a78:	a90e      	add	r1, sp, #56	@ 0x38
 8010a7a:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8010a7c:	7227      	strb	r7, [r4, #8]
 8010a7e:	f000 f943 	bl	8010d08 <uxr_object_id_to_raw>
 8010a82:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010a86:	f89d 12ad 	ldrb.w	r1, [sp, #685]	@ 0x2ad
 8010a8a:	3d00      	subs	r5, #0
 8010a8c:	f04f 0300 	mov.w	r3, #0
 8010a90:	bf18      	it	ne
 8010a92:	2501      	movne	r5, #1
 8010a94:	2201      	movs	r2, #1
 8010a96:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010a9a:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 8010a9e:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8010aa2:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010aa6:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010aaa:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010aae:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010ab2:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010ab6:	bb89      	cbnz	r1, 8010b1c <uxr_buffer_create_datareader_bin+0xcc>
 8010ab8:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010abc:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010ac0:	f04f 0c13 	mov.w	ip, #19
 8010ac4:	250b      	movs	r5, #11
 8010ac6:	2221      	movs	r2, #33	@ 0x21
 8010ac8:	2111      	movs	r1, #17
 8010aca:	2009      	movs	r0, #9
 8010acc:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8010ad0:	b923      	cbnz	r3, 8010adc <uxr_buffer_create_datareader_bin+0x8c>
 8010ad2:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010ad6:	4672      	mov	r2, lr
 8010ad8:	4661      	mov	r1, ip
 8010ada:	4628      	mov	r0, r5
 8010adc:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8010ae0:	2b01      	cmp	r3, #1
 8010ae2:	d025      	beq.n	8010b30 <uxr_buffer_create_datareader_bin+0xe0>
 8010ae4:	2b03      	cmp	r3, #3
 8010ae6:	d029      	beq.n	8010b3c <uxr_buffer_create_datareader_bin+0xec>
 8010ae8:	b32b      	cbz	r3, 8010b36 <uxr_buffer_create_datareader_bin+0xe6>
 8010aea:	a806      	add	r0, sp, #24
 8010aec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010af0:	a923      	add	r1, sp, #140	@ 0x8c
 8010af2:	f7ff fd5d 	bl	80105b0 <ucdr_init_buffer>
 8010af6:	a90e      	add	r1, sp, #56	@ 0x38
 8010af8:	a806      	add	r0, sp, #24
 8010afa:	f002 fe83 	bl	8013804 <uxr_serialize_OBJK_DataReader_Binary>
 8010afe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010b00:	9401      	str	r4, [sp, #4]
 8010b02:	b283      	uxth	r3, r0
 8010b04:	f8cd 8000 	str.w	r8, [sp]
 8010b08:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010b0c:	60e0      	str	r0, [r4, #12]
 8010b0e:	4630      	mov	r0, r6
 8010b10:	f7ff fe36 	bl	8010780 <uxr_common_create_entity>
 8010b14:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b1c:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010b20:	f04f 0c12 	mov.w	ip, #18
 8010b24:	250a      	movs	r5, #10
 8010b26:	2220      	movs	r2, #32
 8010b28:	2110      	movs	r1, #16
 8010b2a:	2008      	movs	r0, #8
 8010b2c:	2702      	movs	r7, #2
 8010b2e:	e7cd      	b.n	8010acc <uxr_buffer_create_datareader_bin+0x7c>
 8010b30:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010b34:	e7d9      	b.n	8010aea <uxr_buffer_create_datareader_bin+0x9a>
 8010b36:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010b3a:	e7d6      	b.n	8010aea <uxr_buffer_create_datareader_bin+0x9a>
 8010b3c:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010b40:	e7d3      	b.n	8010aea <uxr_buffer_create_datareader_bin+0x9a>
 8010b42:	bf00      	nop

08010b44 <get_custom_error>:
 8010b44:	4b01      	ldr	r3, [pc, #4]	@ (8010b4c <get_custom_error+0x8>)
 8010b46:	7818      	ldrb	r0, [r3, #0]
 8010b48:	4770      	bx	lr
 8010b4a:	bf00      	nop
 8010b4c:	20009d5c 	.word	0x20009d5c

08010b50 <recv_custom_msg>:
 8010b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b54:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8010b58:	b089      	sub	sp, #36	@ 0x24
 8010b5a:	2600      	movs	r6, #0
 8010b5c:	4604      	mov	r4, r0
 8010b5e:	9305      	str	r3, [sp, #20]
 8010b60:	468a      	mov	sl, r1
 8010b62:	4693      	mov	fp, r2
 8010b64:	f88d 601e 	strb.w	r6, [sp, #30]
 8010b68:	b325      	cbz	r5, 8010bb4 <recv_custom_msg+0x64>
 8010b6a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8010b6e:	f10d 081f 	add.w	r8, sp, #31
 8010b72:	af05      	add	r7, sp, #20
 8010b74:	f10d 061e 	add.w	r6, sp, #30
 8010b78:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8010b7c:	e002      	b.n	8010b84 <recv_custom_msg+0x34>
 8010b7e:	9b05      	ldr	r3, [sp, #20]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	dd0f      	ble.n	8010ba4 <recv_custom_msg+0x54>
 8010b84:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010b88:	e9cd 5600 	strd	r5, r6, [sp]
 8010b8c:	4623      	mov	r3, r4
 8010b8e:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8010b92:	4622      	mov	r2, r4
 8010b94:	4648      	mov	r0, r9
 8010b96:	f001 fc7d 	bl	8012494 <uxr_read_framed_msg>
 8010b9a:	2800      	cmp	r0, #0
 8010b9c:	d0ef      	beq.n	8010b7e <recv_custom_msg+0x2e>
 8010b9e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010ba2:	b1b3      	cbz	r3, 8010bd2 <recv_custom_msg+0x82>
 8010ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8010be4 <recv_custom_msg+0x94>)
 8010ba6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010baa:	701a      	strb	r2, [r3, #0]
 8010bac:	2000      	movs	r0, #0
 8010bae:	b009      	add	sp, #36	@ 0x24
 8010bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bb4:	f10d 021f 	add.w	r2, sp, #31
 8010bb8:	9200      	str	r2, [sp, #0]
 8010bba:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8010bbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010bc2:	4601      	mov	r1, r0
 8010bc4:	47a8      	blx	r5
 8010bc6:	2800      	cmp	r0, #0
 8010bc8:	d0ec      	beq.n	8010ba4 <recv_custom_msg+0x54>
 8010bca:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d1e8      	bne.n	8010ba4 <recv_custom_msg+0x54>
 8010bd2:	f8cb 0000 	str.w	r0, [fp]
 8010bd6:	2001      	movs	r0, #1
 8010bd8:	f8ca 4000 	str.w	r4, [sl]
 8010bdc:	b009      	add	sp, #36	@ 0x24
 8010bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010be2:	bf00      	nop
 8010be4:	20009d5c 	.word	0x20009d5c

08010be8 <send_custom_msg>:
 8010be8:	b570      	push	{r4, r5, r6, lr}
 8010bea:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8010bee:	b086      	sub	sp, #24
 8010bf0:	4616      	mov	r6, r2
 8010bf2:	b975      	cbnz	r5, 8010c12 <send_custom_msg+0x2a>
 8010bf4:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8010bf8:	f10d 0317 	add.w	r3, sp, #23
 8010bfc:	47a0      	blx	r4
 8010bfe:	b108      	cbz	r0, 8010c04 <send_custom_msg+0x1c>
 8010c00:	42b0      	cmp	r0, r6
 8010c02:	d015      	beq.n	8010c30 <send_custom_msg+0x48>
 8010c04:	4b0c      	ldr	r3, [pc, #48]	@ (8010c38 <send_custom_msg+0x50>)
 8010c06:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010c0a:	701a      	strb	r2, [r3, #0]
 8010c0c:	2000      	movs	r0, #0
 8010c0e:	b006      	add	sp, #24
 8010c10:	bd70      	pop	{r4, r5, r6, pc}
 8010c12:	460b      	mov	r3, r1
 8010c14:	2200      	movs	r2, #0
 8010c16:	f10d 0117 	add.w	r1, sp, #23
 8010c1a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8010c1e:	9600      	str	r6, [sp, #0]
 8010c20:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8010c24:	4602      	mov	r2, r0
 8010c26:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8010c2a:	f001 fa4b 	bl	80120c4 <uxr_write_framed_msg>
 8010c2e:	e7e6      	b.n	8010bfe <send_custom_msg+0x16>
 8010c30:	2001      	movs	r0, #1
 8010c32:	b006      	add	sp, #24
 8010c34:	bd70      	pop	{r4, r5, r6, pc}
 8010c36:	bf00      	nop
 8010c38:	20009d5c 	.word	0x20009d5c

08010c3c <uxr_set_custom_transport_callbacks>:
 8010c3c:	b430      	push	{r4, r5}
 8010c3e:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8010c42:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8010c46:	e9c0 549c 	strd	r5, r4, [r0, #624]	@ 0x270
 8010c4a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8010c4e:	bc30      	pop	{r4, r5}
 8010c50:	4770      	bx	lr
 8010c52:	bf00      	nop

08010c54 <uxr_init_custom_transport>:
 8010c54:	b538      	push	{r3, r4, r5, lr}
 8010c56:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8010c5a:	b303      	cbz	r3, 8010c9e <uxr_init_custom_transport+0x4a>
 8010c5c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8010c60:	4604      	mov	r4, r0
 8010c62:	b1e2      	cbz	r2, 8010c9e <uxr_init_custom_transport+0x4a>
 8010c64:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8010c68:	b1ca      	cbz	r2, 8010c9e <uxr_init_custom_transport+0x4a>
 8010c6a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8010c6e:	b1b2      	cbz	r2, 8010c9e <uxr_init_custom_transport+0x4a>
 8010c70:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8010c74:	4798      	blx	r3
 8010c76:	4605      	mov	r5, r0
 8010c78:	b188      	cbz	r0, 8010c9e <uxr_init_custom_transport+0x4a>
 8010c7a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8010c7e:	b98b      	cbnz	r3, 8010ca4 <uxr_init_custom_transport+0x50>
 8010c80:	480b      	ldr	r0, [pc, #44]	@ (8010cb0 <uxr_init_custom_transport+0x5c>)
 8010c82:	490c      	ldr	r1, [pc, #48]	@ (8010cb4 <uxr_init_custom_transport+0x60>)
 8010c84:	4a0c      	ldr	r2, [pc, #48]	@ (8010cb8 <uxr_init_custom_transport+0x64>)
 8010c86:	f8c4 4278 	str.w	r4, [r4, #632]	@ 0x278
 8010c8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010c8e:	e9c4 019f 	strd	r0, r1, [r4, #636]	@ 0x27c
 8010c92:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8010c96:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8010c9a:	4628      	mov	r0, r5
 8010c9c:	bd38      	pop	{r3, r4, r5, pc}
 8010c9e:	2500      	movs	r5, #0
 8010ca0:	4628      	mov	r0, r5
 8010ca2:	bd38      	pop	{r3, r4, r5, pc}
 8010ca4:	2100      	movs	r1, #0
 8010ca6:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8010caa:	f001 fa05 	bl	80120b8 <uxr_init_framing_io>
 8010cae:	e7e7      	b.n	8010c80 <uxr_init_custom_transport+0x2c>
 8010cb0:	08010be9 	.word	0x08010be9
 8010cb4:	08010b51 	.word	0x08010b51
 8010cb8:	08010b45 	.word	0x08010b45

08010cbc <uxr_close_custom_transport>:
 8010cbc:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8010cc0:	4718      	bx	r3
 8010cc2:	bf00      	nop

08010cc4 <uxr_object_id>:
 8010cc4:	b082      	sub	sp, #8
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	f88d 1006 	strb.w	r1, [sp, #6]
 8010ccc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010cd0:	f360 030f 	bfi	r3, r0, #0, #16
 8010cd4:	f362 431f 	bfi	r3, r2, #16, #16
 8010cd8:	4618      	mov	r0, r3
 8010cda:	b002      	add	sp, #8
 8010cdc:	4770      	bx	lr
 8010cde:	bf00      	nop

08010ce0 <uxr_object_id_from_raw>:
 8010ce0:	7843      	ldrb	r3, [r0, #1]
 8010ce2:	7801      	ldrb	r1, [r0, #0]
 8010ce4:	b082      	sub	sp, #8
 8010ce6:	f003 000f 	and.w	r0, r3, #15
 8010cea:	f88d 0006 	strb.w	r0, [sp, #6]
 8010cee:	091b      	lsrs	r3, r3, #4
 8010cf0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8010cfa:	f363 020f 	bfi	r2, r3, #0, #16
 8010cfe:	f361 421f 	bfi	r2, r1, #16, #16
 8010d02:	4610      	mov	r0, r2
 8010d04:	b002      	add	sp, #8
 8010d06:	4770      	bx	lr

08010d08 <uxr_object_id_to_raw>:
 8010d08:	4602      	mov	r2, r0
 8010d0a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010d0e:	b082      	sub	sp, #8
 8010d10:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8010d14:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8010d18:	700a      	strb	r2, [r1, #0]
 8010d1a:	704b      	strb	r3, [r1, #1]
 8010d1c:	b002      	add	sp, #8
 8010d1e:	4770      	bx	lr

08010d20 <uxr_buffer_request_data>:
 8010d20:	b530      	push	{r4, r5, lr}
 8010d22:	b095      	sub	sp, #84	@ 0x54
 8010d24:	4604      	mov	r4, r0
 8010d26:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8010d28:	9105      	str	r1, [sp, #20]
 8010d2a:	2d00      	cmp	r5, #0
 8010d2c:	bf14      	ite	ne
 8010d2e:	2101      	movne	r1, #1
 8010d30:	2100      	moveq	r1, #0
 8010d32:	9204      	str	r2, [sp, #16]
 8010d34:	f04f 0200 	mov.w	r2, #0
 8010d38:	9303      	str	r3, [sp, #12]
 8010d3a:	f88d 301c 	strb.w	r3, [sp, #28]
 8010d3e:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8010d42:	f88d 201d 	strb.w	r2, [sp, #29]
 8010d46:	f88d 201e 	strb.w	r2, [sp, #30]
 8010d4a:	d021      	beq.n	8010d90 <uxr_buffer_request_data+0x70>
 8010d4c:	686a      	ldr	r2, [r5, #4]
 8010d4e:	682b      	ldr	r3, [r5, #0]
 8010d50:	f8cd 202a 	str.w	r2, [sp, #42]	@ 0x2a
 8010d54:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8010d58:	2210      	movs	r2, #16
 8010d5a:	2000      	movs	r0, #0
 8010d5c:	2108      	movs	r1, #8
 8010d5e:	e9cd 1000 	strd	r1, r0, [sp]
 8010d62:	ab0c      	add	r3, sp, #48	@ 0x30
 8010d64:	9905      	ldr	r1, [sp, #20]
 8010d66:	4620      	mov	r0, r4
 8010d68:	f001 f83c 	bl	8011de4 <uxr_prepare_stream_to_write_submessage>
 8010d6c:	b918      	cbnz	r0, 8010d76 <uxr_buffer_request_data+0x56>
 8010d6e:	4604      	mov	r4, r0
 8010d70:	4620      	mov	r0, r4
 8010d72:	b015      	add	sp, #84	@ 0x54
 8010d74:	bd30      	pop	{r4, r5, pc}
 8010d76:	9904      	ldr	r1, [sp, #16]
 8010d78:	aa06      	add	r2, sp, #24
 8010d7a:	4620      	mov	r0, r4
 8010d7c:	f001 f96c 	bl	8012058 <uxr_init_base_object_request>
 8010d80:	a906      	add	r1, sp, #24
 8010d82:	4604      	mov	r4, r0
 8010d84:	a80c      	add	r0, sp, #48	@ 0x30
 8010d86:	f003 f8cf 	bl	8013f28 <uxr_serialize_READ_DATA_Payload>
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	b015      	add	sp, #84	@ 0x54
 8010d8e:	bd30      	pop	{r4, r5, pc}
 8010d90:	2208      	movs	r2, #8
 8010d92:	e7e2      	b.n	8010d5a <uxr_buffer_request_data+0x3a>

08010d94 <uxr_buffer_cancel_data>:
 8010d94:	b530      	push	{r4, r5, lr}
 8010d96:	b095      	sub	sp, #84	@ 0x54
 8010d98:	2400      	movs	r4, #0
 8010d9a:	2308      	movs	r3, #8
 8010d9c:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8010da0:	9300      	str	r3, [sp, #0]
 8010da2:	9205      	str	r2, [sp, #20]
 8010da4:	2501      	movs	r5, #1
 8010da6:	ab0c      	add	r3, sp, #48	@ 0x30
 8010da8:	2210      	movs	r2, #16
 8010daa:	f8ad 401c 	strh.w	r4, [sp, #28]
 8010dae:	f88d 401e 	strb.w	r4, [sp, #30]
 8010db2:	f8cd 4026 	str.w	r4, [sp, #38]	@ 0x26
 8010db6:	f8cd 402a 	str.w	r4, [sp, #42]	@ 0x2a
 8010dba:	9103      	str	r1, [sp, #12]
 8010dbc:	4604      	mov	r4, r0
 8010dbe:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8010dc2:	f001 f80f 	bl	8011de4 <uxr_prepare_stream_to_write_submessage>
 8010dc6:	b918      	cbnz	r0, 8010dd0 <uxr_buffer_cancel_data+0x3c>
 8010dc8:	4604      	mov	r4, r0
 8010dca:	4620      	mov	r0, r4
 8010dcc:	b015      	add	sp, #84	@ 0x54
 8010dce:	bd30      	pop	{r4, r5, pc}
 8010dd0:	9905      	ldr	r1, [sp, #20]
 8010dd2:	aa06      	add	r2, sp, #24
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	f001 f93f 	bl	8012058 <uxr_init_base_object_request>
 8010dda:	a906      	add	r1, sp, #24
 8010ddc:	4604      	mov	r4, r0
 8010dde:	a80c      	add	r0, sp, #48	@ 0x30
 8010de0:	f003 f8a2 	bl	8013f28 <uxr_serialize_READ_DATA_Payload>
 8010de4:	4620      	mov	r0, r4
 8010de6:	b015      	add	sp, #84	@ 0x54
 8010de8:	bd30      	pop	{r4, r5, pc}
 8010dea:	bf00      	nop

08010dec <read_submessage_format>:
 8010dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010df0:	b095      	sub	sp, #84	@ 0x54
 8010df2:	f8bd 9078 	ldrh.w	r9, [sp, #120]	@ 0x78
 8010df6:	b113      	cbz	r3, 8010dfe <read_submessage_format+0x12>
 8010df8:	b015      	add	sp, #84	@ 0x54
 8010dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dfe:	460c      	mov	r4, r1
 8010e00:	4616      	mov	r6, r2
 8010e02:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010e06:	461d      	mov	r5, r3
 8010e08:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010e0a:	9304      	str	r3, [sp, #16]
 8010e0c:	1a52      	subs	r2, r2, r1
 8010e0e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010e10:	9305      	str	r3, [sp, #20]
 8010e12:	4607      	mov	r7, r0
 8010e14:	a80c      	add	r0, sp, #48	@ 0x30
 8010e16:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8010e1a:	f7ff fbc9 	bl	80105b0 <ucdr_init_buffer>
 8010e1e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010e22:	a80c      	add	r0, sp, #48	@ 0x30
 8010e24:	f7ff fb9a 	bl	801055c <ucdr_set_on_full_buffer_callback>
 8010e28:	69e3      	ldr	r3, [r4, #28]
 8010e2a:	b193      	cbz	r3, 8010e52 <read_submessage_format+0x66>
 8010e2c:	f1b8 0f07 	cmp.w	r8, #7
 8010e30:	751d      	strb	r5, [r3, #20]
 8010e32:	d03e      	beq.n	8010eb2 <read_submessage_format+0xc6>
 8010e34:	f1b8 0f08 	cmp.w	r8, #8
 8010e38:	d02c      	beq.n	8010e94 <read_submessage_format+0xa8>
 8010e3a:	f1b8 0f06 	cmp.w	r8, #6
 8010e3e:	d011      	beq.n	8010e64 <read_submessage_format+0x78>
 8010e40:	2201      	movs	r2, #1
 8010e42:	751a      	strb	r2, [r3, #20]
 8010e44:	4631      	mov	r1, r6
 8010e46:	4620      	mov	r0, r4
 8010e48:	f7ff fc02 	bl	8010650 <ucdr_advance_buffer>
 8010e4c:	b015      	add	sp, #84	@ 0x54
 8010e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e52:	f1b8 0f07 	cmp.w	r8, #7
 8010e56:	d02c      	beq.n	8010eb2 <read_submessage_format+0xc6>
 8010e58:	f1b8 0f08 	cmp.w	r8, #8
 8010e5c:	d01a      	beq.n	8010e94 <read_submessage_format+0xa8>
 8010e5e:	f1b8 0f06 	cmp.w	r8, #6
 8010e62:	d1ef      	bne.n	8010e44 <read_submessage_format+0x58>
 8010e64:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 8010e68:	b18d      	cbz	r5, 8010e8e <read_submessage_format+0xa2>
 8010e6a:	2306      	movs	r3, #6
 8010e6c:	f88d 3016 	strb.w	r3, [sp, #22]
 8010e70:	aa0c      	add	r2, sp, #48	@ 0x30
 8010e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010e76:	9302      	str	r3, [sp, #8]
 8010e78:	9200      	str	r2, [sp, #0]
 8010e7a:	9b04      	ldr	r3, [sp, #16]
 8010e7c:	9905      	ldr	r1, [sp, #20]
 8010e7e:	9601      	str	r6, [sp, #4]
 8010e80:	464a      	mov	r2, r9
 8010e82:	4638      	mov	r0, r7
 8010e84:	47a8      	blx	r5
 8010e86:	2301      	movs	r3, #1
 8010e88:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010e8c:	69e3      	ldr	r3, [r4, #28]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d1d6      	bne.n	8010e40 <read_submessage_format+0x54>
 8010e92:	e7d7      	b.n	8010e44 <read_submessage_format+0x58>
 8010e94:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8010e98:	2a00      	cmp	r2, #0
 8010e9a:	d0f8      	beq.n	8010e8e <read_submessage_format+0xa2>
 8010e9c:	a906      	add	r1, sp, #24
 8010e9e:	a80c      	add	r0, sp, #48	@ 0x30
 8010ea0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8010ea2:	f003 f907 	bl	80140b4 <uxr_deserialize_SampleIdentity>
 8010ea6:	2800      	cmp	r0, #0
 8010ea8:	d13c      	bne.n	8010f24 <read_submessage_format+0x138>
 8010eaa:	69e3      	ldr	r3, [r4, #28]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d1c7      	bne.n	8010e40 <read_submessage_format+0x54>
 8010eb0:	e7c8      	b.n	8010e44 <read_submessage_format+0x58>
 8010eb2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010eb6:	b132      	cbz	r2, 8010ec6 <read_submessage_format+0xda>
 8010eb8:	a906      	add	r1, sp, #24
 8010eba:	a80c      	add	r0, sp, #48	@ 0x30
 8010ebc:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8010ebe:	f002 fdb7 	bl	8013a30 <uxr_deserialize_BaseObjectRequest>
 8010ec2:	b930      	cbnz	r0, 8010ed2 <read_submessage_format+0xe6>
 8010ec4:	69e3      	ldr	r3, [r4, #28]
 8010ec6:	68a2      	ldr	r2, [r4, #8]
 8010ec8:	4432      	add	r2, r6
 8010eca:	60a2      	str	r2, [r4, #8]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d1b7      	bne.n	8010e40 <read_submessage_format+0x54>
 8010ed0:	e7b8      	b.n	8010e44 <read_submessage_format+0x58>
 8010ed2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010ed6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010ed8:	1a52      	subs	r2, r2, r1
 8010eda:	a80c      	add	r0, sp, #48	@ 0x30
 8010edc:	1aed      	subs	r5, r5, r3
 8010ede:	f7ff fb67 	bl	80105b0 <ucdr_init_buffer>
 8010ee2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010ee6:	a80c      	add	r0, sp, #48	@ 0x30
 8010ee8:	f7ff fb38 	bl	801055c <ucdr_set_on_full_buffer_callback>
 8010eec:	4435      	add	r5, r6
 8010eee:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010ef2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010ef6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8010efa:	9002      	str	r0, [sp, #8]
 8010efc:	2207      	movs	r2, #7
 8010efe:	f88d 2016 	strb.w	r2, [sp, #22]
 8010f02:	b2ad      	uxth	r5, r5
 8010f04:	aa0c      	add	r2, sp, #48	@ 0x30
 8010f06:	9200      	str	r2, [sp, #0]
 8010f08:	9501      	str	r5, [sp, #4]
 8010f0a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	9905      	ldr	r1, [sp, #20]
 8010f12:	f8d7 50ac 	ldr.w	r5, [r7, #172]	@ 0xac
 8010f16:	464a      	mov	r2, r9
 8010f18:	4638      	mov	r0, r7
 8010f1a:	47a8      	blx	r5
 8010f1c:	2301      	movs	r3, #1
 8010f1e:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010f22:	e7cf      	b.n	8010ec4 <read_submessage_format+0xd8>
 8010f24:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010f28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010f2a:	1a52      	subs	r2, r2, r1
 8010f2c:	a80c      	add	r0, sp, #48	@ 0x30
 8010f2e:	1aed      	subs	r5, r5, r3
 8010f30:	f7ff fb3e 	bl	80105b0 <ucdr_init_buffer>
 8010f34:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010f38:	a80c      	add	r0, sp, #48	@ 0x30
 8010f3a:	f7ff fb0f 	bl	801055c <ucdr_set_on_full_buffer_callback>
 8010f3e:	4435      	add	r5, r6
 8010f40:	2308      	movs	r3, #8
 8010f42:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8010f46:	f88d 3016 	strb.w	r3, [sp, #22]
 8010f4a:	b2ad      	uxth	r5, r5
 8010f4c:	ab0c      	add	r3, sp, #48	@ 0x30
 8010f4e:	9300      	str	r3, [sp, #0]
 8010f50:	9002      	str	r0, [sp, #8]
 8010f52:	9501      	str	r5, [sp, #4]
 8010f54:	ab06      	add	r3, sp, #24
 8010f56:	9905      	ldr	r1, [sp, #20]
 8010f58:	f8d7 50a4 	ldr.w	r5, [r7, #164]	@ 0xa4
 8010f5c:	464a      	mov	r2, r9
 8010f5e:	4638      	mov	r0, r7
 8010f60:	47a8      	blx	r5
 8010f62:	2301      	movs	r3, #1
 8010f64:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010f68:	e79f      	b.n	8010eaa <read_submessage_format+0xbe>
 8010f6a:	bf00      	nop

08010f6c <on_get_fragmentation_info>:
 8010f6c:	b500      	push	{lr}
 8010f6e:	b08b      	sub	sp, #44	@ 0x2c
 8010f70:	4601      	mov	r1, r0
 8010f72:	2204      	movs	r2, #4
 8010f74:	a802      	add	r0, sp, #8
 8010f76:	f7ff fb1b 	bl	80105b0 <ucdr_init_buffer>
 8010f7a:	f10d 0305 	add.w	r3, sp, #5
 8010f7e:	a802      	add	r0, sp, #8
 8010f80:	f10d 0206 	add.w	r2, sp, #6
 8010f84:	a901      	add	r1, sp, #4
 8010f86:	f001 fe69 	bl	8012c5c <uxr_read_submessage_header>
 8010f8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010f8e:	2b0d      	cmp	r3, #13
 8010f90:	d003      	beq.n	8010f9a <on_get_fragmentation_info+0x2e>
 8010f92:	2000      	movs	r0, #0
 8010f94:	b00b      	add	sp, #44	@ 0x2c
 8010f96:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f9a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010f9e:	f013 0f02 	tst.w	r3, #2
 8010fa2:	bf14      	ite	ne
 8010fa4:	2002      	movne	r0, #2
 8010fa6:	2001      	moveq	r0, #1
 8010fa8:	b00b      	add	sp, #44	@ 0x2c
 8010faa:	f85d fb04 	ldr.w	pc, [sp], #4
 8010fae:	bf00      	nop

08010fb0 <read_submessage_get_info>:
 8010fb0:	b570      	push	{r4, r5, r6, lr}
 8010fb2:	2500      	movs	r5, #0
 8010fb4:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8010fb8:	4604      	mov	r4, r0
 8010fba:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8010fbe:	460e      	mov	r6, r1
 8010fc0:	a810      	add	r0, sp, #64	@ 0x40
 8010fc2:	4629      	mov	r1, r5
 8010fc4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8010fc8:	f009 fba4 	bl	801a714 <memset>
 8010fcc:	a903      	add	r1, sp, #12
 8010fce:	4630      	mov	r0, r6
 8010fd0:	f002 feec 	bl	8013dac <uxr_deserialize_GET_INFO_Payload>
 8010fd4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010fd8:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010fdc:	4620      	mov	r0, r4
 8010fde:	f001 f833 	bl	8012048 <uxr_session_header_offset>
 8010fe2:	462b      	mov	r3, r5
 8010fe4:	9000      	str	r0, [sp, #0]
 8010fe6:	a905      	add	r1, sp, #20
 8010fe8:	a808      	add	r0, sp, #32
 8010fea:	220c      	movs	r2, #12
 8010fec:	f7ff face 	bl	801058c <ucdr_init_buffer_origin_offset>
 8010ff0:	a910      	add	r1, sp, #64	@ 0x40
 8010ff2:	a808      	add	r0, sp, #32
 8010ff4:	f002 ff4c 	bl	8013e90 <uxr_serialize_INFO_Payload>
 8010ff8:	9b08      	ldr	r3, [sp, #32]
 8010ffa:	462a      	mov	r2, r5
 8010ffc:	4629      	mov	r1, r5
 8010ffe:	4620      	mov	r0, r4
 8011000:	f000 ffca 	bl	8011f98 <uxr_stamp_session_header>
 8011004:	a808      	add	r0, sp, #32
 8011006:	f7ff faff 	bl	8010608 <ucdr_buffer_length>
 801100a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801100c:	4602      	mov	r2, r0
 801100e:	a905      	add	r1, sp, #20
 8011010:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011014:	47a0      	blx	r4
 8011016:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801101a:	bd70      	pop	{r4, r5, r6, pc}

0801101c <write_submessage_acknack.isra.0>:
 801101c:	b570      	push	{r4, r5, r6, lr}
 801101e:	b092      	sub	sp, #72	@ 0x48
 8011020:	4605      	mov	r5, r0
 8011022:	460e      	mov	r6, r1
 8011024:	4614      	mov	r4, r2
 8011026:	f001 f80f 	bl	8012048 <uxr_session_header_offset>
 801102a:	a905      	add	r1, sp, #20
 801102c:	9000      	str	r0, [sp, #0]
 801102e:	2300      	movs	r3, #0
 8011030:	a80a      	add	r0, sp, #40	@ 0x28
 8011032:	2211      	movs	r2, #17
 8011034:	f7ff faaa 	bl	801058c <ucdr_init_buffer_origin_offset>
 8011038:	2218      	movs	r2, #24
 801103a:	fb02 5404 	mla	r4, r2, r4, r5
 801103e:	2300      	movs	r3, #0
 8011040:	2205      	movs	r2, #5
 8011042:	3450      	adds	r4, #80	@ 0x50
 8011044:	a80a      	add	r0, sp, #40	@ 0x28
 8011046:	210a      	movs	r1, #10
 8011048:	f001 fdee 	bl	8012c28 <uxr_buffer_submessage_header>
 801104c:	a903      	add	r1, sp, #12
 801104e:	4620      	mov	r0, r4
 8011050:	f007 fb54 	bl	80186fc <uxr_compute_acknack>
 8011054:	a903      	add	r1, sp, #12
 8011056:	ba43      	rev16	r3, r0
 8011058:	a80a      	add	r0, sp, #40	@ 0x28
 801105a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801105e:	f88d 6010 	strb.w	r6, [sp, #16]
 8011062:	f002 ff85 	bl	8013f70 <uxr_serialize_ACKNACK_Payload>
 8011066:	2200      	movs	r2, #0
 8011068:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801106a:	4611      	mov	r1, r2
 801106c:	4628      	mov	r0, r5
 801106e:	f000 ff93 	bl	8011f98 <uxr_stamp_session_header>
 8011072:	a80a      	add	r0, sp, #40	@ 0x28
 8011074:	f7ff fac8 	bl	8010608 <ucdr_buffer_length>
 8011078:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801107a:	4602      	mov	r2, r0
 801107c:	a905      	add	r1, sp, #20
 801107e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011082:	47a0      	blx	r4
 8011084:	b012      	add	sp, #72	@ 0x48
 8011086:	bd70      	pop	{r4, r5, r6, pc}

08011088 <uxr_init_session>:
 8011088:	b5d0      	push	{r4, r6, r7, lr}
 801108a:	2300      	movs	r3, #0
 801108c:	2600      	movs	r6, #0
 801108e:	2700      	movs	r7, #0
 8011090:	e9c0 6726 	strd	r6, r7, [r0, #152]	@ 0x98
 8011094:	4604      	mov	r4, r0
 8011096:	6701      	str	r1, [r0, #112]	@ 0x70
 8011098:	e9c0 331d 	strd	r3, r3, [r0, #116]	@ 0x74
 801109c:	e9c0 331f 	strd	r3, r3, [r0, #124]	@ 0x7c
 80110a0:	e9c0 3321 	strd	r3, r3, [r0, #132]	@ 0x84
 80110a4:	e9c0 3323 	strd	r3, r3, [r0, #140]	@ 0x8c
 80110a8:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 80110ac:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80110b0:	2181      	movs	r1, #129	@ 0x81
 80110b2:	f000 fedb 	bl	8011e6c <uxr_init_session_info>
 80110b6:	f104 0008 	add.w	r0, r4, #8
 80110ba:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 80110be:	f001 bccf 	b.w	8012a60 <uxr_init_stream_storage>
 80110c2:	bf00      	nop

080110c4 <uxr_set_status_callback>:
 80110c4:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 80110c8:	4770      	bx	lr
 80110ca:	bf00      	nop

080110cc <uxr_set_topic_callback>:
 80110cc:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 80110d0:	4770      	bx	lr
 80110d2:	bf00      	nop

080110d4 <uxr_set_request_callback>:
 80110d4:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop

080110dc <uxr_set_reply_callback>:
 80110dc:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 80110e0:	4770      	bx	lr
 80110e2:	bf00      	nop

080110e4 <uxr_create_output_best_effort_stream>:
 80110e4:	b510      	push	{r4, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	e9cd 2100 	strd	r2, r1, [sp]
 80110ec:	4604      	mov	r4, r0
 80110ee:	f000 ffab 	bl	8012048 <uxr_session_header_offset>
 80110f2:	e9dd 2100 	ldrd	r2, r1, [sp]
 80110f6:	4603      	mov	r3, r0
 80110f8:	f104 0008 	add.w	r0, r4, #8
 80110fc:	b004      	add	sp, #16
 80110fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011102:	f001 bcf7 	b.w	8012af4 <uxr_add_output_best_effort_buffer>
 8011106:	bf00      	nop

08011108 <uxr_create_output_reliable_stream>:
 8011108:	b530      	push	{r4, r5, lr}
 801110a:	b089      	sub	sp, #36	@ 0x24
 801110c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8011110:	9303      	str	r3, [sp, #12]
 8011112:	4604      	mov	r4, r0
 8011114:	f000 ff98 	bl	8012048 <uxr_session_header_offset>
 8011118:	4605      	mov	r5, r0
 801111a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801111e:	9905      	ldr	r1, [sp, #20]
 8011120:	9500      	str	r5, [sp, #0]
 8011122:	f104 0008 	add.w	r0, r4, #8
 8011126:	f001 fcf7 	bl	8012b18 <uxr_add_output_reliable_buffer>
 801112a:	2200      	movs	r2, #0
 801112c:	b2c3      	uxtb	r3, r0
 801112e:	f363 0207 	bfi	r2, r3, #0, #8
 8011132:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011136:	f363 220f 	bfi	r2, r3, #8, #8
 801113a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801113e:	f363 4217 	bfi	r2, r3, #16, #8
 8011142:	0e03      	lsrs	r3, r0, #24
 8011144:	f363 621f 	bfi	r2, r3, #24, #8
 8011148:	4610      	mov	r0, r2
 801114a:	b009      	add	sp, #36	@ 0x24
 801114c:	bd30      	pop	{r4, r5, pc}
 801114e:	bf00      	nop

08011150 <uxr_create_input_best_effort_stream>:
 8011150:	b082      	sub	sp, #8
 8011152:	3008      	adds	r0, #8
 8011154:	b002      	add	sp, #8
 8011156:	f001 bcf9 	b.w	8012b4c <uxr_add_input_best_effort_buffer>
 801115a:	bf00      	nop

0801115c <uxr_create_input_reliable_stream>:
 801115c:	b510      	push	{r4, lr}
 801115e:	b084      	sub	sp, #16
 8011160:	4c0b      	ldr	r4, [pc, #44]	@ (8011190 <uxr_create_input_reliable_stream+0x34>)
 8011162:	9400      	str	r4, [sp, #0]
 8011164:	3008      	adds	r0, #8
 8011166:	f001 fd07 	bl	8012b78 <uxr_add_input_reliable_buffer>
 801116a:	2200      	movs	r2, #0
 801116c:	b2c3      	uxtb	r3, r0
 801116e:	f363 0207 	bfi	r2, r3, #0, #8
 8011172:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011176:	f363 220f 	bfi	r2, r3, #8, #8
 801117a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801117e:	f363 4217 	bfi	r2, r3, #16, #8
 8011182:	0e03      	lsrs	r3, r0, #24
 8011184:	f363 621f 	bfi	r2, r3, #24, #8
 8011188:	4610      	mov	r0, r2
 801118a:	b004      	add	sp, #16
 801118c:	bd10      	pop	{r4, pc}
 801118e:	bf00      	nop
 8011190:	08010f6d 	.word	0x08010f6d

08011194 <uxr_epoch_nanos>:
 8011194:	b510      	push	{r4, lr}
 8011196:	4604      	mov	r4, r0
 8011198:	f001 fda8 	bl	8012cec <uxr_nanos>
 801119c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80111a0:	1ac0      	subs	r0, r0, r3
 80111a2:	eb61 0102 	sbc.w	r1, r1, r2
 80111a6:	bd10      	pop	{r4, pc}

080111a8 <uxr_flash_output_streams>:
 80111a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111ac:	7e03      	ldrb	r3, [r0, #24]
 80111ae:	b084      	sub	sp, #16
 80111b0:	4604      	mov	r4, r0
 80111b2:	b1fb      	cbz	r3, 80111f4 <uxr_flash_output_streams+0x4c>
 80111b4:	f04f 0900 	mov.w	r9, #0
 80111b8:	4648      	mov	r0, r9
 80111ba:	f10d 0802 	add.w	r8, sp, #2
 80111be:	af03      	add	r7, sp, #12
 80111c0:	ae02      	add	r6, sp, #8
 80111c2:	2201      	movs	r2, #1
 80111c4:	4611      	mov	r1, r2
 80111c6:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80111ca:	f001 fbf3 	bl	80129b4 <uxr_stream_id>
 80111ce:	3508      	adds	r5, #8
 80111d0:	4684      	mov	ip, r0
 80111d2:	4643      	mov	r3, r8
 80111d4:	4628      	mov	r0, r5
 80111d6:	463a      	mov	r2, r7
 80111d8:	4631      	mov	r1, r6
 80111da:	f8cd c004 	str.w	ip, [sp, #4]
 80111de:	f007 fb15 	bl	801880c <uxr_prepare_best_effort_buffer_to_send>
 80111e2:	2800      	cmp	r0, #0
 80111e4:	d13d      	bne.n	8011262 <uxr_flash_output_streams+0xba>
 80111e6:	7e23      	ldrb	r3, [r4, #24]
 80111e8:	f109 0901 	add.w	r9, r9, #1
 80111ec:	fa5f f089 	uxtb.w	r0, r9
 80111f0:	4283      	cmp	r3, r0
 80111f2:	d8e6      	bhi.n	80111c2 <uxr_flash_output_streams+0x1a>
 80111f4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80111f8:	b383      	cbz	r3, 801125c <uxr_flash_output_streams+0xb4>
 80111fa:	f04f 0900 	mov.w	r9, #0
 80111fe:	4648      	mov	r0, r9
 8011200:	f10d 0802 	add.w	r8, sp, #2
 8011204:	af03      	add	r7, sp, #12
 8011206:	ae02      	add	r6, sp, #8
 8011208:	2201      	movs	r2, #1
 801120a:	2102      	movs	r1, #2
 801120c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8011210:	f001 fbd0 	bl	80129b4 <uxr_stream_id>
 8011214:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8011218:	3520      	adds	r5, #32
 801121a:	9001      	str	r0, [sp, #4]
 801121c:	e00c      	b.n	8011238 <uxr_flash_output_streams+0x90>
 801121e:	9b02      	ldr	r3, [sp, #8]
 8011220:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011224:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011228:	f000 feb6 	bl	8011f98 <uxr_stamp_session_header>
 801122c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801122e:	9a03      	ldr	r2, [sp, #12]
 8011230:	9902      	ldr	r1, [sp, #8]
 8011232:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8011236:	47d0      	blx	sl
 8011238:	4643      	mov	r3, r8
 801123a:	463a      	mov	r2, r7
 801123c:	4631      	mov	r1, r6
 801123e:	4628      	mov	r0, r5
 8011240:	f007 fcec 	bl	8018c1c <uxr_prepare_next_reliable_buffer_to_send>
 8011244:	4603      	mov	r3, r0
 8011246:	4620      	mov	r0, r4
 8011248:	2b00      	cmp	r3, #0
 801124a:	d1e8      	bne.n	801121e <uxr_flash_output_streams+0x76>
 801124c:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8011250:	f109 0901 	add.w	r9, r9, #1
 8011254:	fa5f f089 	uxtb.w	r0, r9
 8011258:	4283      	cmp	r3, r0
 801125a:	d8d5      	bhi.n	8011208 <uxr_flash_output_streams+0x60>
 801125c:	b004      	add	sp, #16
 801125e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011262:	9b02      	ldr	r3, [sp, #8]
 8011264:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011268:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801126c:	4620      	mov	r0, r4
 801126e:	f000 fe93 	bl	8011f98 <uxr_stamp_session_header>
 8011272:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011274:	9a03      	ldr	r2, [sp, #12]
 8011276:	9902      	ldr	r1, [sp, #8]
 8011278:	e9d3 0500 	ldrd	r0, r5, [r3]
 801127c:	47a8      	blx	r5
 801127e:	f109 0901 	add.w	r9, r9, #1
 8011282:	7e23      	ldrb	r3, [r4, #24]
 8011284:	fa5f f089 	uxtb.w	r0, r9
 8011288:	4283      	cmp	r3, r0
 801128a:	d89a      	bhi.n	80111c2 <uxr_flash_output_streams+0x1a>
 801128c:	e7b2      	b.n	80111f4 <uxr_flash_output_streams+0x4c>
 801128e:	bf00      	nop

08011290 <read_submessage_info>:
 8011290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011294:	460d      	mov	r5, r1
 8011296:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801129a:	4669      	mov	r1, sp
 801129c:	4607      	mov	r7, r0
 801129e:	4628      	mov	r0, r5
 80112a0:	f002 fc8a 	bl	8013bb8 <uxr_deserialize_BaseObjectReply>
 80112a4:	a902      	add	r1, sp, #8
 80112a6:	4604      	mov	r4, r0
 80112a8:	4628      	mov	r0, r5
 80112aa:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80112ae:	f006 f905 	bl	80174bc <ucdr_deserialize_bool>
 80112b2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80112b6:	4004      	ands	r4, r0
 80112b8:	b2e4      	uxtb	r4, r4
 80112ba:	b95b      	cbnz	r3, 80112d4 <read_submessage_info+0x44>
 80112bc:	a987      	add	r1, sp, #540	@ 0x21c
 80112be:	4628      	mov	r0, r5
 80112c0:	f006 f8fc 	bl	80174bc <ucdr_deserialize_bool>
 80112c4:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 80112c8:	4606      	mov	r6, r0
 80112ca:	b94b      	cbnz	r3, 80112e0 <read_submessage_info+0x50>
 80112cc:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 80112d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112d4:	a903      	add	r1, sp, #12
 80112d6:	4628      	mov	r0, r5
 80112d8:	f002 fafc 	bl	80138d4 <uxr_deserialize_ObjectVariant>
 80112dc:	4004      	ands	r4, r0
 80112de:	e7ed      	b.n	80112bc <read_submessage_info+0x2c>
 80112e0:	a988      	add	r1, sp, #544	@ 0x220
 80112e2:	4628      	mov	r0, r5
 80112e4:	f006 f91a 	bl	801751c <ucdr_deserialize_uint8_t>
 80112e8:	4234      	tst	r4, r6
 80112ea:	d0ef      	beq.n	80112cc <read_submessage_info+0x3c>
 80112ec:	2800      	cmp	r0, #0
 80112ee:	d0ed      	beq.n	80112cc <read_submessage_info+0x3c>
 80112f0:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80112f4:	2b0d      	cmp	r3, #13
 80112f6:	d1e9      	bne.n	80112cc <read_submessage_info+0x3c>
 80112f8:	4628      	mov	r0, r5
 80112fa:	a98a      	add	r1, sp, #552	@ 0x228
 80112fc:	f006 feb4 	bl	8018068 <ucdr_deserialize_int16_t>
 8011300:	b140      	cbz	r0, 8011314 <read_submessage_info+0x84>
 8011302:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8011306:	2b00      	cmp	r3, #0
 8011308:	dd07      	ble.n	801131a <read_submessage_info+0x8a>
 801130a:	f1b8 0f00 	cmp.w	r8, #0
 801130e:	bf14      	ite	ne
 8011310:	2001      	movne	r0, #1
 8011312:	2002      	moveq	r0, #2
 8011314:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8011318:	e7d8      	b.n	80112cc <read_submessage_info+0x3c>
 801131a:	2000      	movs	r0, #0
 801131c:	e7fa      	b.n	8011314 <read_submessage_info+0x84>
 801131e:	bf00      	nop

08011320 <read_submessage_list>:
 8011320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011324:	b098      	sub	sp, #96	@ 0x60
 8011326:	f8df 9304 	ldr.w	r9, [pc, #772]	@ 801162c <read_submessage_list+0x30c>
 801132a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801132c:	4604      	mov	r4, r0
 801132e:	4688      	mov	r8, r1
 8011330:	f10d 0337 	add.w	r3, sp, #55	@ 0x37
 8011334:	aa0e      	add	r2, sp, #56	@ 0x38
 8011336:	f10d 0136 	add.w	r1, sp, #54	@ 0x36
 801133a:	4640      	mov	r0, r8
 801133c:	f001 fc8e 	bl	8012c5c <uxr_read_submessage_header>
 8011340:	2800      	cmp	r0, #0
 8011342:	f000 813d 	beq.w	80115c0 <read_submessage_list+0x2a0>
 8011346:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
 801134a:	f89d 202e 	ldrb.w	r2, [sp, #46]	@ 0x2e
 801134e:	3b02      	subs	r3, #2
 8011350:	2b0d      	cmp	r3, #13
 8011352:	d8ed      	bhi.n	8011330 <read_submessage_list+0x10>
 8011354:	a101      	add	r1, pc, #4	@ (adr r1, 801135c <read_submessage_list+0x3c>)
 8011356:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801135a:	bf00      	nop
 801135c:	080115b7 	.word	0x080115b7
 8011360:	08011331 	.word	0x08011331
 8011364:	080115a7 	.word	0x080115a7
 8011368:	0801154b 	.word	0x0801154b
 801136c:	08011541 	.word	0x08011541
 8011370:	08011331 	.word	0x08011331
 8011374:	08011331 	.word	0x08011331
 8011378:	080114a3 	.word	0x080114a3
 801137c:	08011435 	.word	0x08011435
 8011380:	080113f3 	.word	0x080113f3
 8011384:	08011331 	.word	0x08011331
 8011388:	08011331 	.word	0x08011331
 801138c:	08011331 	.word	0x08011331
 8011390:	08011395 	.word	0x08011395
 8011394:	a912      	add	r1, sp, #72	@ 0x48
 8011396:	4640      	mov	r0, r8
 8011398:	f002 fe3a 	bl	8014010 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801139c:	f8d4 5090 	ldr.w	r5, [r4, #144]	@ 0x90
 80113a0:	2d00      	cmp	r5, #0
 80113a2:	f000 8115 	beq.w	80115d0 <read_submessage_list+0x2b0>
 80113a6:	f001 fca1 	bl	8012cec <uxr_nanos>
 80113aa:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 80113ac:	460b      	mov	r3, r1
 80113ae:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80113b0:	2700      	movs	r7, #0
 80113b2:	fbc9 6701 	smlal	r6, r7, r9, r1
 80113b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80113ba:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80113bc:	4602      	mov	r2, r0
 80113be:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80113c0:	460e      	mov	r6, r1
 80113c2:	2700      	movs	r7, #0
 80113c4:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80113c8:	9106      	str	r1, [sp, #24]
 80113ca:	fbc9 6700 	smlal	r6, r7, r9, r0
 80113ce:	9915      	ldr	r1, [sp, #84]	@ 0x54
 80113d0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80113d4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80113d6:	2700      	movs	r7, #0
 80113d8:	4608      	mov	r0, r1
 80113da:	4639      	mov	r1, r7
 80113dc:	fbc9 0106 	smlal	r0, r1, r9, r6
 80113e0:	e9cd 0100 	strd	r0, r1, [sp]
 80113e4:	4620      	mov	r0, r4
 80113e6:	47a8      	blx	r5
 80113e8:	f04f 0301 	mov.w	r3, #1
 80113ec:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80113f0:	e79e      	b.n	8011330 <read_submessage_list+0x10>
 80113f2:	a912      	add	r1, sp, #72	@ 0x48
 80113f4:	4640      	mov	r0, r8
 80113f6:	f002 fdf9 	bl	8013fec <uxr_deserialize_HEARTBEAT_Payload>
 80113fa:	2100      	movs	r1, #0
 80113fc:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8011400:	f001 fb02 	bl	8012a08 <uxr_stream_id_from_raw>
 8011404:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011408:	4603      	mov	r3, r0
 801140a:	4629      	mov	r1, r5
 801140c:	f104 0008 	add.w	r0, r4, #8
 8011410:	9311      	str	r3, [sp, #68]	@ 0x44
 8011412:	f001 fbe7 	bl	8012be4 <uxr_get_input_reliable_stream>
 8011416:	2800      	cmp	r0, #0
 8011418:	d08a      	beq.n	8011330 <read_submessage_list+0x10>
 801141a:	f8bd 204a 	ldrh.w	r2, [sp, #74]	@ 0x4a
 801141e:	f8bd 1048 	ldrh.w	r1, [sp, #72]	@ 0x48
 8011422:	f007 f95f 	bl	80186e4 <uxr_process_heartbeat>
 8011426:	f89d 1044 	ldrb.w	r1, [sp, #68]	@ 0x44
 801142a:	462a      	mov	r2, r5
 801142c:	4620      	mov	r0, r4
 801142e:	f7ff fdf5 	bl	801101c <write_submessage_acknack.isra.0>
 8011432:	e77d      	b.n	8011330 <read_submessage_list+0x10>
 8011434:	a912      	add	r1, sp, #72	@ 0x48
 8011436:	4640      	mov	r0, r8
 8011438:	f002 fdb0 	bl	8013f9c <uxr_deserialize_ACKNACK_Payload>
 801143c:	2100      	movs	r1, #0
 801143e:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8011442:	f001 fae1 	bl	8012a08 <uxr_stream_id_from_raw>
 8011446:	4603      	mov	r3, r0
 8011448:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801144c:	f104 0008 	add.w	r0, r4, #8
 8011450:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011452:	f001 fbb1 	bl	8012bb8 <uxr_get_output_reliable_stream>
 8011456:	4605      	mov	r5, r0
 8011458:	2800      	cmp	r0, #0
 801145a:	f43f af69 	beq.w	8011330 <read_submessage_list+0x10>
 801145e:	f89d 304a 	ldrb.w	r3, [sp, #74]	@ 0x4a
 8011462:	f89d 104b 	ldrb.w	r1, [sp, #75]	@ 0x4b
 8011466:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 801146a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801146e:	b289      	uxth	r1, r1
 8011470:	f007 fc7c 	bl	8018d6c <uxr_process_acknack>
 8011474:	4628      	mov	r0, r5
 8011476:	f007 fc3f 	bl	8018cf8 <uxr_begin_output_nack_buffer_it>
 801147a:	af10      	add	r7, sp, #64	@ 0x40
 801147c:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8011480:	e005      	b.n	801148e <read_submessage_list+0x16e>
 8011482:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011484:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011486:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011488:	e9d3 0600 	ldrd	r0, r6, [r3]
 801148c:	47b0      	blx	r6
 801148e:	f10d 033a 	add.w	r3, sp, #58	@ 0x3a
 8011492:	aa11      	add	r2, sp, #68	@ 0x44
 8011494:	4639      	mov	r1, r7
 8011496:	4628      	mov	r0, r5
 8011498:	f007 fc30 	bl	8018cfc <uxr_next_reliable_nack_buffer_to_send>
 801149c:	2800      	cmp	r0, #0
 801149e:	d1f0      	bne.n	8011482 <read_submessage_list+0x162>
 80114a0:	e746      	b.n	8011330 <read_submessage_list+0x10>
 80114a2:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 80114a6:	f88d 203e 	strb.w	r2, [sp, #62]	@ 0x3e
 80114aa:	af10      	add	r7, sp, #64	@ 0x40
 80114ac:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 80114b0:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
 80114b4:	4639      	mov	r1, r7
 80114b6:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 80114ba:	f89d 6037 	ldrb.w	r6, [sp, #55]	@ 0x37
 80114be:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80114c2:	f88d 203f 	strb.w	r2, [sp, #63]	@ 0x3f
 80114c6:	4640      	mov	r0, r8
 80114c8:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 80114cc:	f002 fab0 	bl	8013a30 <uxr_deserialize_BaseObjectRequest>
 80114d0:	4638      	mov	r0, r7
 80114d2:	a911      	add	r1, sp, #68	@ 0x44
 80114d4:	f10d 023a 	add.w	r2, sp, #58	@ 0x3a
 80114d8:	f000 fddc 	bl	8012094 <uxr_parse_base_object_request>
 80114dc:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80114e0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80114e2:	f8bd 703a 	ldrh.w	r7, [sp, #58]	@ 0x3a
 80114e6:	9112      	str	r1, [sp, #72]	@ 0x48
 80114e8:	3d04      	subs	r5, #4
 80114ea:	f006 060e 	and.w	r6, r6, #14
 80114ee:	b2ad      	uxth	r5, r5
 80114f0:	f1ba 0f00 	cmp.w	sl, #0
 80114f4:	d006      	beq.n	8011504 <read_submessage_list+0x1e4>
 80114f6:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80114fa:	9300      	str	r3, [sp, #0]
 80114fc:	463a      	mov	r2, r7
 80114fe:	2300      	movs	r3, #0
 8011500:	4620      	mov	r0, r4
 8011502:	47d0      	blx	sl
 8011504:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8011506:	b168      	cbz	r0, 8011524 <read_submessage_list+0x204>
 8011508:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801150a:	2300      	movs	r3, #0
 801150c:	3902      	subs	r1, #2
 801150e:	e002      	b.n	8011516 <read_submessage_list+0x1f6>
 8011510:	3301      	adds	r3, #1
 8011512:	4283      	cmp	r3, r0
 8011514:	d006      	beq.n	8011524 <read_submessage_list+0x204>
 8011516:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 801151a:	42ba      	cmp	r2, r7
 801151c:	d1f8      	bne.n	8011510 <read_submessage_list+0x1f0>
 801151e:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 8011520:	2100      	movs	r1, #0
 8011522:	54d1      	strb	r1, [r2, r3]
 8011524:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8011526:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011528:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801152c:	9302      	str	r3, [sp, #8]
 801152e:	e9cd 1000 	strd	r1, r0, [sp]
 8011532:	4633      	mov	r3, r6
 8011534:	462a      	mov	r2, r5
 8011536:	4641      	mov	r1, r8
 8011538:	4620      	mov	r0, r4
 801153a:	f7ff fc57 	bl	8010dec <read_submessage_format>
 801153e:	e6f7      	b.n	8011330 <read_submessage_list+0x10>
 8011540:	4641      	mov	r1, r8
 8011542:	4620      	mov	r0, r4
 8011544:	f7ff fea4 	bl	8011290 <read_submessage_info>
 8011548:	e6f2      	b.n	8011330 <read_submessage_list+0x10>
 801154a:	2a00      	cmp	r2, #0
 801154c:	d03b      	beq.n	80115c6 <read_submessage_list+0x2a6>
 801154e:	a912      	add	r1, sp, #72	@ 0x48
 8011550:	4640      	mov	r0, r8
 8011552:	f002 fc7f 	bl	8013e54 <uxr_deserialize_STATUS_Payload>
 8011556:	a910      	add	r1, sp, #64	@ 0x40
 8011558:	aa0f      	add	r2, sp, #60	@ 0x3c
 801155a:	a812      	add	r0, sp, #72	@ 0x48
 801155c:	f000 fd9a 	bl	8012094 <uxr_parse_base_object_request>
 8011560:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 8011564:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011566:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 801156a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 801156e:	9111      	str	r1, [sp, #68]	@ 0x44
 8011570:	b135      	cbz	r5, 8011580 <read_submessage_list+0x260>
 8011572:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011576:	9300      	str	r3, [sp, #0]
 8011578:	4632      	mov	r2, r6
 801157a:	463b      	mov	r3, r7
 801157c:	4620      	mov	r0, r4
 801157e:	47a8      	blx	r5
 8011580:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8011582:	2b00      	cmp	r3, #0
 8011584:	f43f aed4 	beq.w	8011330 <read_submessage_list+0x10>
 8011588:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801158a:	2100      	movs	r1, #0
 801158c:	3802      	subs	r0, #2
 801158e:	e003      	b.n	8011598 <read_submessage_list+0x278>
 8011590:	3101      	adds	r1, #1
 8011592:	4299      	cmp	r1, r3
 8011594:	f43f aecc 	beq.w	8011330 <read_submessage_list+0x10>
 8011598:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 801159c:	42b2      	cmp	r2, r6
 801159e:	d1f7      	bne.n	8011590 <read_submessage_list+0x270>
 80115a0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80115a2:	545f      	strb	r7, [r3, r1]
 80115a4:	e6c4      	b.n	8011330 <read_submessage_list+0x10>
 80115a6:	2a00      	cmp	r2, #0
 80115a8:	f47f aec2 	bne.w	8011330 <read_submessage_list+0x10>
 80115ac:	4641      	mov	r1, r8
 80115ae:	4620      	mov	r0, r4
 80115b0:	f000 fcb4 	bl	8011f1c <uxr_read_create_session_status>
 80115b4:	e6bc      	b.n	8011330 <read_submessage_list+0x10>
 80115b6:	4641      	mov	r1, r8
 80115b8:	4620      	mov	r0, r4
 80115ba:	f7ff fcf9 	bl	8010fb0 <read_submessage_get_info>
 80115be:	e6b7      	b.n	8011330 <read_submessage_list+0x10>
 80115c0:	b018      	add	sp, #96	@ 0x60
 80115c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115c6:	4641      	mov	r1, r8
 80115c8:	4620      	mov	r0, r4
 80115ca:	f000 fcb3 	bl	8011f34 <uxr_read_delete_session_status>
 80115ce:	e6af      	b.n	8011330 <read_submessage_list+0x10>
 80115d0:	f001 fb8c 	bl	8012cec <uxr_nanos>
 80115d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80115d6:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 80115d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80115da:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80115dc:	2700      	movs	r7, #0
 80115de:	fbc9 6703 	smlal	r6, r7, r9, r3
 80115e2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80115e4:	eb16 0c00 	adds.w	ip, r6, r0
 80115e8:	4618      	mov	r0, r3
 80115ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80115ec:	eb47 0e01 	adc.w	lr, r7, r1
 80115f0:	461e      	mov	r6, r3
 80115f2:	2100      	movs	r1, #0
 80115f4:	2700      	movs	r7, #0
 80115f6:	fbc9 0105 	smlal	r0, r1, r9, r5
 80115fa:	fbc9 6702 	smlal	r6, r7, r9, r2
 80115fe:	1983      	adds	r3, r0, r6
 8011600:	eb41 0207 	adc.w	r2, r1, r7
 8011604:	ebbc 0303 	subs.w	r3, ip, r3
 8011608:	9308      	str	r3, [sp, #32]
 801160a:	eb6e 0302 	sbc.w	r3, lr, r2
 801160e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011610:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011614:	0fd3      	lsrs	r3, r2, #31
 8011616:	18c9      	adds	r1, r1, r3
 8011618:	f142 0200 	adc.w	r2, r2, #0
 801161c:	084b      	lsrs	r3, r1, #1
 801161e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8011622:	1052      	asrs	r2, r2, #1
 8011624:	e9c4 3226 	strd	r3, r2, [r4, #152]	@ 0x98
 8011628:	e6de      	b.n	80113e8 <read_submessage_list+0xc8>
 801162a:	bf00      	nop
 801162c:	3b9aca00 	.word	0x3b9aca00

08011630 <listen_message_reliably>:
 8011630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011634:	1e0b      	subs	r3, r1, #0
 8011636:	b09d      	sub	sp, #116	@ 0x74
 8011638:	bfb8      	it	lt
 801163a:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 801163e:	9305      	str	r3, [sp, #20]
 8011640:	4607      	mov	r7, r0
 8011642:	f001 fb37 	bl	8012cb4 <uxr_millis>
 8011646:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 801164a:	4681      	mov	r9, r0
 801164c:	2a00      	cmp	r2, #0
 801164e:	f000 8095 	beq.w	801177c <listen_message_reliably+0x14c>
 8011652:	2600      	movs	r6, #0
 8011654:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011658:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 801165c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011660:	4630      	mov	r0, r6
 8011662:	4688      	mov	r8, r1
 8011664:	46ca      	mov	sl, r9
 8011666:	e00f      	b.n	8011688 <listen_message_reliably+0x58>
 8011668:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801166c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011670:	42a2      	cmp	r2, r4
 8011672:	eb73 0105 	sbcs.w	r1, r3, r5
 8011676:	bfb8      	it	lt
 8011678:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 801167c:	3601      	adds	r6, #1
 801167e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8011682:	b2f0      	uxtb	r0, r6
 8011684:	4283      	cmp	r3, r0
 8011686:	d951      	bls.n	801172c <listen_message_reliably+0xfc>
 8011688:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801168c:	2201      	movs	r2, #1
 801168e:	2102      	movs	r1, #2
 8011690:	f001 f990 	bl	80129b4 <uxr_stream_id>
 8011694:	00e4      	lsls	r4, r4, #3
 8011696:	f104 0520 	add.w	r5, r4, #32
 801169a:	443d      	add	r5, r7
 801169c:	4601      	mov	r1, r0
 801169e:	4643      	mov	r3, r8
 80116a0:	4652      	mov	r2, sl
 80116a2:	4628      	mov	r0, r5
 80116a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80116a6:	f007 fafb 	bl	8018ca0 <uxr_update_output_stream_heartbeat_timestamp>
 80116aa:	193b      	adds	r3, r7, r4
 80116ac:	2800      	cmp	r0, #0
 80116ae:	d0db      	beq.n	8011668 <listen_message_reliably+0x38>
 80116b0:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 80116b4:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 80116b8:	4638      	mov	r0, r7
 80116ba:	f000 fcc5 	bl	8012048 <uxr_session_header_offset>
 80116be:	3501      	adds	r5, #1
 80116c0:	f10d 0b50 	add.w	fp, sp, #80	@ 0x50
 80116c4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80116c8:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80116cc:	9000      	str	r0, [sp, #0]
 80116ce:	2300      	movs	r3, #0
 80116d0:	4658      	mov	r0, fp
 80116d2:	2211      	movs	r2, #17
 80116d4:	a90c      	add	r1, sp, #48	@ 0x30
 80116d6:	f7fe ff59 	bl	801058c <ucdr_init_buffer_origin_offset>
 80116da:	2300      	movs	r3, #0
 80116dc:	2205      	movs	r2, #5
 80116de:	210b      	movs	r1, #11
 80116e0:	4658      	mov	r0, fp
 80116e2:	f001 faa1 	bl	8012c28 <uxr_buffer_submessage_header>
 80116e6:	8968      	ldrh	r0, [r5, #10]
 80116e8:	2101      	movs	r1, #1
 80116ea:	f007 fb97 	bl	8018e1c <uxr_seq_num_add>
 80116ee:	892a      	ldrh	r2, [r5, #8]
 80116f0:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80116f4:	4603      	mov	r3, r0
 80116f6:	a90a      	add	r1, sp, #40	@ 0x28
 80116f8:	4658      	mov	r0, fp
 80116fa:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80116fe:	f88d 902c 	strb.w	r9, [sp, #44]	@ 0x2c
 8011702:	f002 fc5f 	bl	8013fc4 <uxr_serialize_HEARTBEAT_Payload>
 8011706:	2200      	movs	r2, #0
 8011708:	4611      	mov	r1, r2
 801170a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801170c:	4638      	mov	r0, r7
 801170e:	f000 fc43 	bl	8011f98 <uxr_stamp_session_header>
 8011712:	4658      	mov	r0, fp
 8011714:	f7fe ff78 	bl	8010608 <ucdr_buffer_length>
 8011718:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801171a:	4602      	mov	r2, r0
 801171c:	a90c      	add	r1, sp, #48	@ 0x30
 801171e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011722:	443c      	add	r4, r7
 8011724:	47a8      	blx	r5
 8011726:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 801172a:	e79f      	b.n	801166c <listen_message_reliably+0x3c>
 801172c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 8011730:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8011734:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8011738:	4294      	cmp	r4, r2
 801173a:	bf08      	it	eq
 801173c:	428b      	cmpeq	r3, r1
 801173e:	d01d      	beq.n	801177c <listen_message_reliably+0x14c>
 8011740:	eba3 030a 	sub.w	r3, r3, sl
 8011744:	9905      	ldr	r1, [sp, #20]
 8011746:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011748:	2b00      	cmp	r3, #0
 801174a:	bf08      	it	eq
 801174c:	2301      	moveq	r3, #1
 801174e:	4299      	cmp	r1, r3
 8011750:	bfa8      	it	ge
 8011752:	4619      	movge	r1, r3
 8011754:	6894      	ldr	r4, [r2, #8]
 8011756:	6810      	ldr	r0, [r2, #0]
 8011758:	4689      	mov	r9, r1
 801175a:	460b      	mov	r3, r1
 801175c:	aa08      	add	r2, sp, #32
 801175e:	a907      	add	r1, sp, #28
 8011760:	47a0      	blx	r4
 8011762:	b968      	cbnz	r0, 8011780 <listen_message_reliably+0x150>
 8011764:	9b05      	ldr	r3, [sp, #20]
 8011766:	eba3 0309 	sub.w	r3, r3, r9
 801176a:	2b00      	cmp	r3, #0
 801176c:	9305      	str	r3, [sp, #20]
 801176e:	f73f af68 	bgt.w	8011642 <listen_message_reliably+0x12>
 8011772:	4604      	mov	r4, r0
 8011774:	4620      	mov	r0, r4
 8011776:	b01d      	add	sp, #116	@ 0x74
 8011778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801177c:	9b05      	ldr	r3, [sp, #20]
 801177e:	e7e1      	b.n	8011744 <listen_message_reliably+0x114>
 8011780:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011784:	4604      	mov	r4, r0
 8011786:	a80c      	add	r0, sp, #48	@ 0x30
 8011788:	f7fe ff12 	bl	80105b0 <ucdr_init_buffer>
 801178c:	2500      	movs	r5, #0
 801178e:	a90c      	add	r1, sp, #48	@ 0x30
 8011790:	f10d 031a 	add.w	r3, sp, #26
 8011794:	aa06      	add	r2, sp, #24
 8011796:	4638      	mov	r0, r7
 8011798:	f88d 5018 	strb.w	r5, [sp, #24]
 801179c:	f000 fc12 	bl	8011fc4 <uxr_read_session_header>
 80117a0:	b918      	cbnz	r0, 80117aa <listen_message_reliably+0x17a>
 80117a2:	4620      	mov	r0, r4
 80117a4:	b01d      	add	sp, #116	@ 0x74
 80117a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117aa:	4629      	mov	r1, r5
 80117ac:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80117b0:	f001 f92a 	bl	8012a08 <uxr_stream_id_from_raw>
 80117b4:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80117b8:	2e01      	cmp	r6, #1
 80117ba:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80117be:	900a      	str	r0, [sp, #40]	@ 0x28
 80117c0:	fa5f fa80 	uxtb.w	sl, r0
 80117c4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80117c8:	d04b      	beq.n	8011862 <listen_message_reliably+0x232>
 80117ca:	2e02      	cmp	r6, #2
 80117cc:	d00f      	beq.n	80117ee <listen_message_reliably+0x1be>
 80117ce:	2e00      	cmp	r6, #0
 80117d0:	d1e7      	bne.n	80117a2 <listen_message_reliably+0x172>
 80117d2:	4631      	mov	r1, r6
 80117d4:	4630      	mov	r0, r6
 80117d6:	f001 f917 	bl	8012a08 <uxr_stream_id_from_raw>
 80117da:	a90c      	add	r1, sp, #48	@ 0x30
 80117dc:	4602      	mov	r2, r0
 80117de:	4638      	mov	r0, r7
 80117e0:	920a      	str	r2, [sp, #40]	@ 0x28
 80117e2:	f7ff fd9d 	bl	8011320 <read_submessage_list>
 80117e6:	4620      	mov	r0, r4
 80117e8:	b01d      	add	sp, #116	@ 0x74
 80117ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ee:	4629      	mov	r1, r5
 80117f0:	f107 0008 	add.w	r0, r7, #8
 80117f4:	f001 f9f6 	bl	8012be4 <uxr_get_input_reliable_stream>
 80117f8:	4680      	mov	r8, r0
 80117fa:	b348      	cbz	r0, 8011850 <listen_message_reliably+0x220>
 80117fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117fe:	9202      	str	r2, [sp, #8]
 8011800:	a80c      	add	r0, sp, #48	@ 0x30
 8011802:	f7fe ff05 	bl	8010610 <ucdr_buffer_remaining>
 8011806:	4603      	mov	r3, r0
 8011808:	f10d 0019 	add.w	r0, sp, #25
 801180c:	9000      	str	r0, [sp, #0]
 801180e:	9a02      	ldr	r2, [sp, #8]
 8011810:	4649      	mov	r1, r9
 8011812:	4640      	mov	r0, r8
 8011814:	f006 fe68 	bl	80184e8 <uxr_receive_reliable_message>
 8011818:	b1d0      	cbz	r0, 8011850 <listen_message_reliably+0x220>
 801181a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d037      	beq.n	8011892 <listen_message_reliably+0x262>
 8011822:	ae14      	add	r6, sp, #80	@ 0x50
 8011824:	f04f 0902 	mov.w	r9, #2
 8011828:	e008      	b.n	801183c <listen_message_reliably+0x20c>
 801182a:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 801182e:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8011832:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 8011836:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011838:	f7ff fd72 	bl	8011320 <read_submessage_list>
 801183c:	4631      	mov	r1, r6
 801183e:	2204      	movs	r2, #4
 8011840:	4640      	mov	r0, r8
 8011842:	f006 fed1 	bl	80185e8 <uxr_next_input_reliable_buffer_available>
 8011846:	4603      	mov	r3, r0
 8011848:	4631      	mov	r1, r6
 801184a:	4638      	mov	r0, r7
 801184c:	2b00      	cmp	r3, #0
 801184e:	d1ec      	bne.n	801182a <listen_message_reliably+0x1fa>
 8011850:	4638      	mov	r0, r7
 8011852:	462a      	mov	r2, r5
 8011854:	4651      	mov	r1, sl
 8011856:	f7ff fbe1 	bl	801101c <write_submessage_acknack.isra.0>
 801185a:	4620      	mov	r0, r4
 801185c:	b01d      	add	sp, #116	@ 0x74
 801185e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011862:	4629      	mov	r1, r5
 8011864:	f107 0008 	add.w	r0, r7, #8
 8011868:	f001 f9b2 	bl	8012bd0 <uxr_get_input_best_effort_stream>
 801186c:	2800      	cmp	r0, #0
 801186e:	d098      	beq.n	80117a2 <listen_message_reliably+0x172>
 8011870:	4649      	mov	r1, r9
 8011872:	f006 fdb5 	bl	80183e0 <uxr_receive_best_effort_message>
 8011876:	2800      	cmp	r0, #0
 8011878:	d093      	beq.n	80117a2 <listen_message_reliably+0x172>
 801187a:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 801187e:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8011882:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011886:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011888:	a90c      	add	r1, sp, #48	@ 0x30
 801188a:	4638      	mov	r0, r7
 801188c:	f7ff fd48 	bl	8011320 <read_submessage_list>
 8011890:	e787      	b.n	80117a2 <listen_message_reliably+0x172>
 8011892:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 8011896:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801189a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801189e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80118a0:	a90c      	add	r1, sp, #48	@ 0x30
 80118a2:	4638      	mov	r0, r7
 80118a4:	f7ff fd3c 	bl	8011320 <read_submessage_list>
 80118a8:	e7bb      	b.n	8011822 <listen_message_reliably+0x1f2>
 80118aa:	bf00      	nop

080118ac <uxr_run_session_timeout>:
 80118ac:	b570      	push	{r4, r5, r6, lr}
 80118ae:	4604      	mov	r4, r0
 80118b0:	460d      	mov	r5, r1
 80118b2:	f001 f9ff 	bl	8012cb4 <uxr_millis>
 80118b6:	4606      	mov	r6, r0
 80118b8:	4620      	mov	r0, r4
 80118ba:	f7ff fc75 	bl	80111a8 <uxr_flash_output_streams>
 80118be:	4629      	mov	r1, r5
 80118c0:	4620      	mov	r0, r4
 80118c2:	f7ff feb5 	bl	8011630 <listen_message_reliably>
 80118c6:	f001 f9f5 	bl	8012cb4 <uxr_millis>
 80118ca:	1b83      	subs	r3, r0, r6
 80118cc:	1ae9      	subs	r1, r5, r3
 80118ce:	2900      	cmp	r1, #0
 80118d0:	dcf6      	bgt.n	80118c0 <uxr_run_session_timeout+0x14>
 80118d2:	f104 0008 	add.w	r0, r4, #8
 80118d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80118da:	f001 b98f 	b.w	8012bfc <uxr_output_streams_confirmed>
 80118de:	bf00      	nop

080118e0 <uxr_run_session_until_data>:
 80118e0:	b570      	push	{r4, r5, r6, lr}
 80118e2:	4604      	mov	r4, r0
 80118e4:	460d      	mov	r5, r1
 80118e6:	f001 f9e5 	bl	8012cb4 <uxr_millis>
 80118ea:	4606      	mov	r6, r0
 80118ec:	4620      	mov	r0, r4
 80118ee:	f7ff fc5b 	bl	80111a8 <uxr_flash_output_streams>
 80118f2:	2300      	movs	r3, #0
 80118f4:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80118f8:	4629      	mov	r1, r5
 80118fa:	e005      	b.n	8011908 <uxr_run_session_until_data+0x28>
 80118fc:	f001 f9da 	bl	8012cb4 <uxr_millis>
 8011900:	1b83      	subs	r3, r0, r6
 8011902:	1ae9      	subs	r1, r5, r3
 8011904:	2900      	cmp	r1, #0
 8011906:	dd07      	ble.n	8011918 <uxr_run_session_until_data+0x38>
 8011908:	4620      	mov	r0, r4
 801190a:	f7ff fe91 	bl	8011630 <listen_message_reliably>
 801190e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011912:	2800      	cmp	r0, #0
 8011914:	d0f2      	beq.n	80118fc <uxr_run_session_until_data+0x1c>
 8011916:	bd70      	pop	{r4, r5, r6, pc}
 8011918:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801191c:	bd70      	pop	{r4, r5, r6, pc}
 801191e:	bf00      	nop

08011920 <uxr_run_session_until_confirm_delivery>:
 8011920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011924:	4606      	mov	r6, r0
 8011926:	460d      	mov	r5, r1
 8011928:	f001 f9c4 	bl	8012cb4 <uxr_millis>
 801192c:	4607      	mov	r7, r0
 801192e:	4630      	mov	r0, r6
 8011930:	f7ff fc3a 	bl	80111a8 <uxr_flash_output_streams>
 8011934:	2d00      	cmp	r5, #0
 8011936:	f106 0808 	add.w	r8, r6, #8
 801193a:	bfa8      	it	ge
 801193c:	462c      	movge	r4, r5
 801193e:	da07      	bge.n	8011950 <uxr_run_session_until_confirm_delivery+0x30>
 8011940:	e00e      	b.n	8011960 <uxr_run_session_until_confirm_delivery+0x40>
 8011942:	f7ff fe75 	bl	8011630 <listen_message_reliably>
 8011946:	f001 f9b5 	bl	8012cb4 <uxr_millis>
 801194a:	1bc3      	subs	r3, r0, r7
 801194c:	1aec      	subs	r4, r5, r3
 801194e:	d407      	bmi.n	8011960 <uxr_run_session_until_confirm_delivery+0x40>
 8011950:	4640      	mov	r0, r8
 8011952:	f001 f953 	bl	8012bfc <uxr_output_streams_confirmed>
 8011956:	4603      	mov	r3, r0
 8011958:	4621      	mov	r1, r4
 801195a:	4630      	mov	r0, r6
 801195c:	2b00      	cmp	r3, #0
 801195e:	d0f0      	beq.n	8011942 <uxr_run_session_until_confirm_delivery+0x22>
 8011960:	4640      	mov	r0, r8
 8011962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011966:	f001 b949 	b.w	8012bfc <uxr_output_streams_confirmed>
 801196a:	bf00      	nop

0801196c <uxr_run_session_until_all_status>:
 801196c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011970:	9d08      	ldr	r5, [sp, #32]
 8011972:	460f      	mov	r7, r1
 8011974:	4692      	mov	sl, r2
 8011976:	461c      	mov	r4, r3
 8011978:	4606      	mov	r6, r0
 801197a:	f7ff fc15 	bl	80111a8 <uxr_flash_output_streams>
 801197e:	b125      	cbz	r5, 801198a <uxr_run_session_until_all_status+0x1e>
 8011980:	462a      	mov	r2, r5
 8011982:	21ff      	movs	r1, #255	@ 0xff
 8011984:	4620      	mov	r0, r4
 8011986:	f008 fec5 	bl	801a714 <memset>
 801198a:	e9c6 a41d 	strd	sl, r4, [r6, #116]	@ 0x74
 801198e:	67f5      	str	r5, [r6, #124]	@ 0x7c
 8011990:	f001 f990 	bl	8012cb4 <uxr_millis>
 8011994:	f104 39ff 	add.w	r9, r4, #4294967295	@ 0xffffffff
 8011998:	f1aa 0a02 	sub.w	sl, sl, #2
 801199c:	4680      	mov	r8, r0
 801199e:	4639      	mov	r1, r7
 80119a0:	4630      	mov	r0, r6
 80119a2:	f7ff fe45 	bl	8011630 <listen_message_reliably>
 80119a6:	f001 f985 	bl	8012cb4 <uxr_millis>
 80119aa:	eba0 0008 	sub.w	r0, r0, r8
 80119ae:	1a39      	subs	r1, r7, r0
 80119b0:	b33d      	cbz	r5, 8011a02 <uxr_run_session_until_all_status+0x96>
 80119b2:	46cc      	mov	ip, r9
 80119b4:	464a      	mov	r2, r9
 80119b6:	2301      	movs	r3, #1
 80119b8:	e002      	b.n	80119c0 <uxr_run_session_until_all_status+0x54>
 80119ba:	42ab      	cmp	r3, r5
 80119bc:	d20c      	bcs.n	80119d8 <uxr_run_session_until_all_status+0x6c>
 80119be:	3301      	adds	r3, #1
 80119c0:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 80119c4:	2cff      	cmp	r4, #255	@ 0xff
 80119c6:	d1f8      	bne.n	80119ba <uxr_run_session_until_all_status+0x4e>
 80119c8:	42ab      	cmp	r3, r5
 80119ca:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 80119ce:	d213      	bcs.n	80119f8 <uxr_run_session_until_all_status+0x8c>
 80119d0:	2800      	cmp	r0, #0
 80119d2:	d0f4      	beq.n	80119be <uxr_run_session_until_all_status+0x52>
 80119d4:	2900      	cmp	r1, #0
 80119d6:	dce3      	bgt.n	80119a0 <uxr_run_session_until_all_status+0x34>
 80119d8:	2300      	movs	r3, #0
 80119da:	444d      	add	r5, r9
 80119dc:	67f3      	str	r3, [r6, #124]	@ 0x7c
 80119de:	e001      	b.n	80119e4 <uxr_run_session_until_all_status+0x78>
 80119e0:	2b01      	cmp	r3, #1
 80119e2:	d812      	bhi.n	8011a0a <uxr_run_session_until_all_status+0x9e>
 80119e4:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80119e8:	4565      	cmp	r5, ip
 80119ea:	d1f9      	bne.n	80119e0 <uxr_run_session_until_all_status+0x74>
 80119ec:	2b01      	cmp	r3, #1
 80119ee:	bf8c      	ite	hi
 80119f0:	2000      	movhi	r0, #0
 80119f2:	2001      	movls	r0, #1
 80119f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119f8:	2900      	cmp	r1, #0
 80119fa:	dded      	ble.n	80119d8 <uxr_run_session_until_all_status+0x6c>
 80119fc:	2800      	cmp	r0, #0
 80119fe:	d1cf      	bne.n	80119a0 <uxr_run_session_until_all_status+0x34>
 8011a00:	e7ea      	b.n	80119d8 <uxr_run_session_until_all_status+0x6c>
 8011a02:	67f5      	str	r5, [r6, #124]	@ 0x7c
 8011a04:	2001      	movs	r0, #1
 8011a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a0a:	2000      	movs	r0, #0
 8011a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011a10 <uxr_create_session>:
 8011a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a14:	ed2d 8b02 	vpush	{d8}
 8011a18:	f100 0808 	add.w	r8, r0, #8
 8011a1c:	b0a9      	sub	sp, #164	@ 0xa4
 8011a1e:	4604      	mov	r4, r0
 8011a20:	4640      	mov	r0, r8
 8011a22:	f001 f827 	bl	8012a74 <uxr_reset_stream_storage>
 8011a26:	4620      	mov	r0, r4
 8011a28:	f000 fb0e 	bl	8012048 <uxr_session_header_offset>
 8011a2c:	a909      	add	r1, sp, #36	@ 0x24
 8011a2e:	9000      	str	r0, [sp, #0]
 8011a30:	2300      	movs	r3, #0
 8011a32:	a810      	add	r0, sp, #64	@ 0x40
 8011a34:	221c      	movs	r2, #28
 8011a36:	f7fe fda9 	bl	801058c <ucdr_init_buffer_origin_offset>
 8011a3a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011a3c:	8a1a      	ldrh	r2, [r3, #16]
 8011a3e:	3a04      	subs	r2, #4
 8011a40:	b292      	uxth	r2, r2
 8011a42:	4620      	mov	r0, r4
 8011a44:	a910      	add	r1, sp, #64	@ 0x40
 8011a46:	f000 fa23 	bl	8011e90 <uxr_buffer_create_session>
 8011a4a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011a4c:	4620      	mov	r0, r4
 8011a4e:	f000 fa8f 	bl	8011f70 <uxr_stamp_create_session_header>
 8011a52:	a810      	add	r0, sp, #64	@ 0x40
 8011a54:	f7fe fdd8 	bl	8010608 <ucdr_buffer_length>
 8011a58:	23ff      	movs	r3, #255	@ 0xff
 8011a5a:	ee08 0a10 	vmov	s16, r0
 8011a5e:	7163      	strb	r3, [r4, #5]
 8011a60:	f04f 090a 	mov.w	r9, #10
 8011a64:	46c2      	mov	sl, r8
 8011a66:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011a68:	ee18 2a10 	vmov	r2, s16
 8011a6c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011a70:	a909      	add	r1, sp, #36	@ 0x24
 8011a72:	47a8      	blx	r5
 8011a74:	f001 f91e 	bl	8012cb4 <uxr_millis>
 8011a78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011a7c:	9002      	str	r0, [sp, #8]
 8011a7e:	e00c      	b.n	8011a9a <uxr_create_session+0x8a>
 8011a80:	f001 f918 	bl	8012cb4 <uxr_millis>
 8011a84:	9b02      	ldr	r3, [sp, #8]
 8011a86:	7962      	ldrb	r2, [r4, #5]
 8011a88:	1ac0      	subs	r0, r0, r3
 8011a8a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	f340 8094 	ble.w	8011bbc <uxr_create_session+0x1ac>
 8011a94:	2aff      	cmp	r2, #255	@ 0xff
 8011a96:	f040 8097 	bne.w	8011bc8 <uxr_create_session+0x1b8>
 8011a9a:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011a9c:	a905      	add	r1, sp, #20
 8011a9e:	6895      	ldr	r5, [r2, #8]
 8011aa0:	6810      	ldr	r0, [r2, #0]
 8011aa2:	aa06      	add	r2, sp, #24
 8011aa4:	47a8      	blx	r5
 8011aa6:	2800      	cmp	r0, #0
 8011aa8:	d0ea      	beq.n	8011a80 <uxr_create_session+0x70>
 8011aaa:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8011aae:	a818      	add	r0, sp, #96	@ 0x60
 8011ab0:	f7fe fd7e 	bl	80105b0 <ucdr_init_buffer>
 8011ab4:	2500      	movs	r5, #0
 8011ab6:	f10d 0312 	add.w	r3, sp, #18
 8011aba:	aa04      	add	r2, sp, #16
 8011abc:	a918      	add	r1, sp, #96	@ 0x60
 8011abe:	4620      	mov	r0, r4
 8011ac0:	f88d 5010 	strb.w	r5, [sp, #16]
 8011ac4:	f000 fa7e 	bl	8011fc4 <uxr_read_session_header>
 8011ac8:	2800      	cmp	r0, #0
 8011aca:	d0d9      	beq.n	8011a80 <uxr_create_session+0x70>
 8011acc:	4629      	mov	r1, r5
 8011ace:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8011ad2:	f000 ff99 	bl	8012a08 <uxr_stream_id_from_raw>
 8011ad6:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011ada:	2f01      	cmp	r7, #1
 8011adc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8011ae0:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8011ae4:	fa5f f880 	uxtb.w	r8, r0
 8011ae8:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011aec:	d04d      	beq.n	8011b8a <uxr_create_session+0x17a>
 8011aee:	2f02      	cmp	r7, #2
 8011af0:	d00c      	beq.n	8011b0c <uxr_create_session+0xfc>
 8011af2:	2f00      	cmp	r7, #0
 8011af4:	d1c4      	bne.n	8011a80 <uxr_create_session+0x70>
 8011af6:	4639      	mov	r1, r7
 8011af8:	4638      	mov	r0, r7
 8011afa:	f000 ff85 	bl	8012a08 <uxr_stream_id_from_raw>
 8011afe:	a918      	add	r1, sp, #96	@ 0x60
 8011b00:	4602      	mov	r2, r0
 8011b02:	4620      	mov	r0, r4
 8011b04:	9208      	str	r2, [sp, #32]
 8011b06:	f7ff fc0b 	bl	8011320 <read_submessage_list>
 8011b0a:	e7b9      	b.n	8011a80 <uxr_create_session+0x70>
 8011b0c:	4629      	mov	r1, r5
 8011b0e:	4650      	mov	r0, sl
 8011b10:	f001 f868 	bl	8012be4 <uxr_get_input_reliable_stream>
 8011b14:	4606      	mov	r6, r0
 8011b16:	b390      	cbz	r0, 8011b7e <uxr_create_session+0x16e>
 8011b18:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011b1a:	9203      	str	r2, [sp, #12]
 8011b1c:	a818      	add	r0, sp, #96	@ 0x60
 8011b1e:	f7fe fd77 	bl	8010610 <ucdr_buffer_remaining>
 8011b22:	4603      	mov	r3, r0
 8011b24:	f10d 0011 	add.w	r0, sp, #17
 8011b28:	9000      	str	r0, [sp, #0]
 8011b2a:	9a03      	ldr	r2, [sp, #12]
 8011b2c:	4659      	mov	r1, fp
 8011b2e:	4630      	mov	r0, r6
 8011b30:	f006 fcda 	bl	80184e8 <uxr_receive_reliable_message>
 8011b34:	b318      	cbz	r0, 8011b7e <uxr_create_session+0x16e>
 8011b36:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8011b3a:	b9b3      	cbnz	r3, 8011b6a <uxr_create_session+0x15a>
 8011b3c:	f88d 8020 	strb.w	r8, [sp, #32]
 8011b40:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8011b44:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 8011b48:	9a08      	ldr	r2, [sp, #32]
 8011b4a:	a918      	add	r1, sp, #96	@ 0x60
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	f7ff fbe7 	bl	8011320 <read_submessage_list>
 8011b52:	e00a      	b.n	8011b6a <uxr_create_session+0x15a>
 8011b54:	f04f 0302 	mov.w	r3, #2
 8011b58:	f88d 8020 	strb.w	r8, [sp, #32]
 8011b5c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8011b60:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8011b64:	9a08      	ldr	r2, [sp, #32]
 8011b66:	f7ff fbdb 	bl	8011320 <read_submessage_list>
 8011b6a:	a920      	add	r1, sp, #128	@ 0x80
 8011b6c:	2204      	movs	r2, #4
 8011b6e:	4630      	mov	r0, r6
 8011b70:	f006 fd3a 	bl	80185e8 <uxr_next_input_reliable_buffer_available>
 8011b74:	4603      	mov	r3, r0
 8011b76:	a920      	add	r1, sp, #128	@ 0x80
 8011b78:	4620      	mov	r0, r4
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d1ea      	bne.n	8011b54 <uxr_create_session+0x144>
 8011b7e:	462a      	mov	r2, r5
 8011b80:	4641      	mov	r1, r8
 8011b82:	4620      	mov	r0, r4
 8011b84:	f7ff fa4a 	bl	801101c <write_submessage_acknack.isra.0>
 8011b88:	e77a      	b.n	8011a80 <uxr_create_session+0x70>
 8011b8a:	4629      	mov	r1, r5
 8011b8c:	4650      	mov	r0, sl
 8011b8e:	f001 f81f 	bl	8012bd0 <uxr_get_input_best_effort_stream>
 8011b92:	2800      	cmp	r0, #0
 8011b94:	f43f af74 	beq.w	8011a80 <uxr_create_session+0x70>
 8011b98:	4659      	mov	r1, fp
 8011b9a:	f006 fc21 	bl	80183e0 <uxr_receive_best_effort_message>
 8011b9e:	2800      	cmp	r0, #0
 8011ba0:	f43f af6e 	beq.w	8011a80 <uxr_create_session+0x70>
 8011ba4:	f88d 8020 	strb.w	r8, [sp, #32]
 8011ba8:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8011bac:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 8011bb0:	9a08      	ldr	r2, [sp, #32]
 8011bb2:	a918      	add	r1, sp, #96	@ 0x60
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	f7ff fbb3 	bl	8011320 <read_submessage_list>
 8011bba:	e761      	b.n	8011a80 <uxr_create_session+0x70>
 8011bbc:	f1b9 0901 	subs.w	r9, r9, #1
 8011bc0:	d002      	beq.n	8011bc8 <uxr_create_session+0x1b8>
 8011bc2:	2aff      	cmp	r2, #255	@ 0xff
 8011bc4:	f43f af4f 	beq.w	8011a66 <uxr_create_session+0x56>
 8011bc8:	b12a      	cbz	r2, 8011bd6 <uxr_create_session+0x1c6>
 8011bca:	2000      	movs	r0, #0
 8011bcc:	b029      	add	sp, #164	@ 0xa4
 8011bce:	ecbd 8b02 	vpop	{d8}
 8011bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bd6:	4650      	mov	r0, sl
 8011bd8:	f000 ff4c 	bl	8012a74 <uxr_reset_stream_storage>
 8011bdc:	2001      	movs	r0, #1
 8011bde:	b029      	add	sp, #164	@ 0xa4
 8011be0:	ecbd 8b02 	vpop	{d8}
 8011be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011be8 <wait_session_status>:
 8011be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bec:	4604      	mov	r4, r0
 8011bee:	b09d      	sub	sp, #116	@ 0x74
 8011bf0:	20ff      	movs	r0, #255	@ 0xff
 8011bf2:	7160      	strb	r0, [r4, #5]
 8011bf4:	9304      	str	r3, [sp, #16]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	f000 80b8 	beq.w	8011d6c <wait_session_status+0x184>
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	468b      	mov	fp, r1
 8011c00:	4692      	mov	sl, r2
 8011c02:	9303      	str	r3, [sp, #12]
 8011c04:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011c06:	4652      	mov	r2, sl
 8011c08:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011c0c:	4659      	mov	r1, fp
 8011c0e:	47a8      	blx	r5
 8011c10:	f001 f850 	bl	8012cb4 <uxr_millis>
 8011c14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011c18:	4605      	mov	r5, r0
 8011c1a:	e009      	b.n	8011c30 <wait_session_status+0x48>
 8011c1c:	f001 f84a 	bl	8012cb4 <uxr_millis>
 8011c20:	1b40      	subs	r0, r0, r5
 8011c22:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	dd42      	ble.n	8011cb0 <wait_session_status+0xc8>
 8011c2a:	7960      	ldrb	r0, [r4, #5]
 8011c2c:	28ff      	cmp	r0, #255	@ 0xff
 8011c2e:	d148      	bne.n	8011cc2 <wait_session_status+0xda>
 8011c30:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011c32:	a908      	add	r1, sp, #32
 8011c34:	6896      	ldr	r6, [r2, #8]
 8011c36:	6810      	ldr	r0, [r2, #0]
 8011c38:	aa09      	add	r2, sp, #36	@ 0x24
 8011c3a:	47b0      	blx	r6
 8011c3c:	2800      	cmp	r0, #0
 8011c3e:	d0ed      	beq.n	8011c1c <wait_session_status+0x34>
 8011c40:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011c44:	a80c      	add	r0, sp, #48	@ 0x30
 8011c46:	f7fe fcb3 	bl	80105b0 <ucdr_init_buffer>
 8011c4a:	2600      	movs	r6, #0
 8011c4c:	f10d 031e 	add.w	r3, sp, #30
 8011c50:	aa07      	add	r2, sp, #28
 8011c52:	a90c      	add	r1, sp, #48	@ 0x30
 8011c54:	4620      	mov	r0, r4
 8011c56:	f88d 601c 	strb.w	r6, [sp, #28]
 8011c5a:	f000 f9b3 	bl	8011fc4 <uxr_read_session_header>
 8011c5e:	2800      	cmp	r0, #0
 8011c60:	d0dc      	beq.n	8011c1c <wait_session_status+0x34>
 8011c62:	4631      	mov	r1, r6
 8011c64:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011c68:	f000 fece 	bl	8012a08 <uxr_stream_id_from_raw>
 8011c6c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011c70:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011c74:	9302      	str	r3, [sp, #8]
 8011c76:	2f01      	cmp	r7, #1
 8011c78:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8011c7c:	fa5f f880 	uxtb.w	r8, r0
 8011c80:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011c84:	d058      	beq.n	8011d38 <wait_session_status+0x150>
 8011c86:	2f02      	cmp	r7, #2
 8011c88:	d021      	beq.n	8011cce <wait_session_status+0xe6>
 8011c8a:	2f00      	cmp	r7, #0
 8011c8c:	d1c6      	bne.n	8011c1c <wait_session_status+0x34>
 8011c8e:	4639      	mov	r1, r7
 8011c90:	4638      	mov	r0, r7
 8011c92:	f000 feb9 	bl	8012a08 <uxr_stream_id_from_raw>
 8011c96:	a90c      	add	r1, sp, #48	@ 0x30
 8011c98:	4602      	mov	r2, r0
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011c9e:	f7ff fb3f 	bl	8011320 <read_submessage_list>
 8011ca2:	f001 f807 	bl	8012cb4 <uxr_millis>
 8011ca6:	1b40      	subs	r0, r0, r5
 8011ca8:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	dcbc      	bgt.n	8011c2a <wait_session_status+0x42>
 8011cb0:	9b03      	ldr	r3, [sp, #12]
 8011cb2:	9a04      	ldr	r2, [sp, #16]
 8011cb4:	7960      	ldrb	r0, [r4, #5]
 8011cb6:	3301      	adds	r3, #1
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	9303      	str	r3, [sp, #12]
 8011cbc:	d001      	beq.n	8011cc2 <wait_session_status+0xda>
 8011cbe:	28ff      	cmp	r0, #255	@ 0xff
 8011cc0:	d0a0      	beq.n	8011c04 <wait_session_status+0x1c>
 8011cc2:	38ff      	subs	r0, #255	@ 0xff
 8011cc4:	bf18      	it	ne
 8011cc6:	2001      	movne	r0, #1
 8011cc8:	b01d      	add	sp, #116	@ 0x74
 8011cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cce:	4631      	mov	r1, r6
 8011cd0:	f104 0008 	add.w	r0, r4, #8
 8011cd4:	f000 ff86 	bl	8012be4 <uxr_get_input_reliable_stream>
 8011cd8:	4681      	mov	r9, r0
 8011cda:	b338      	cbz	r0, 8011d2c <wait_session_status+0x144>
 8011cdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011cde:	9205      	str	r2, [sp, #20]
 8011ce0:	a80c      	add	r0, sp, #48	@ 0x30
 8011ce2:	f7fe fc95 	bl	8010610 <ucdr_buffer_remaining>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	f10d 001d 	add.w	r0, sp, #29
 8011cec:	9000      	str	r0, [sp, #0]
 8011cee:	9a05      	ldr	r2, [sp, #20]
 8011cf0:	9902      	ldr	r1, [sp, #8]
 8011cf2:	4648      	mov	r0, r9
 8011cf4:	f006 fbf8 	bl	80184e8 <uxr_receive_reliable_message>
 8011cf8:	b1c0      	cbz	r0, 8011d2c <wait_session_status+0x144>
 8011cfa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8011cfe:	b95b      	cbnz	r3, 8011d18 <wait_session_status+0x130>
 8011d00:	e03c      	b.n	8011d7c <wait_session_status+0x194>
 8011d02:	f04f 0302 	mov.w	r3, #2
 8011d06:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 8011d0a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011d0e:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8011d12:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011d14:	f7ff fb04 	bl	8011320 <read_submessage_list>
 8011d18:	a914      	add	r1, sp, #80	@ 0x50
 8011d1a:	2204      	movs	r2, #4
 8011d1c:	4648      	mov	r0, r9
 8011d1e:	f006 fc63 	bl	80185e8 <uxr_next_input_reliable_buffer_available>
 8011d22:	4603      	mov	r3, r0
 8011d24:	a914      	add	r1, sp, #80	@ 0x50
 8011d26:	4620      	mov	r0, r4
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d1ea      	bne.n	8011d02 <wait_session_status+0x11a>
 8011d2c:	4632      	mov	r2, r6
 8011d2e:	4641      	mov	r1, r8
 8011d30:	4620      	mov	r0, r4
 8011d32:	f7ff f973 	bl	801101c <write_submessage_acknack.isra.0>
 8011d36:	e771      	b.n	8011c1c <wait_session_status+0x34>
 8011d38:	4631      	mov	r1, r6
 8011d3a:	f104 0008 	add.w	r0, r4, #8
 8011d3e:	f000 ff47 	bl	8012bd0 <uxr_get_input_best_effort_stream>
 8011d42:	2800      	cmp	r0, #0
 8011d44:	f43f af6a 	beq.w	8011c1c <wait_session_status+0x34>
 8011d48:	9902      	ldr	r1, [sp, #8]
 8011d4a:	f006 fb49 	bl	80183e0 <uxr_receive_best_effort_message>
 8011d4e:	2800      	cmp	r0, #0
 8011d50:	f43f af64 	beq.w	8011c1c <wait_session_status+0x34>
 8011d54:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 8011d58:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011d5c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011d60:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011d62:	a90c      	add	r1, sp, #48	@ 0x30
 8011d64:	4620      	mov	r0, r4
 8011d66:	f7ff fadb 	bl	8011320 <read_submessage_list>
 8011d6a:	e757      	b.n	8011c1c <wait_session_status+0x34>
 8011d6c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011d6e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011d72:	47a0      	blx	r4
 8011d74:	2001      	movs	r0, #1
 8011d76:	b01d      	add	sp, #116	@ 0x74
 8011d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d7c:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 8011d80:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011d84:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011d88:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011d8a:	a90c      	add	r1, sp, #48	@ 0x30
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	f7ff fac7 	bl	8011320 <read_submessage_list>
 8011d92:	e7c1      	b.n	8011d18 <wait_session_status+0x130>

08011d94 <uxr_delete_session_retries>:
 8011d94:	b530      	push	{r4, r5, lr}
 8011d96:	b08f      	sub	sp, #60	@ 0x3c
 8011d98:	4604      	mov	r4, r0
 8011d9a:	460d      	mov	r5, r1
 8011d9c:	f000 f954 	bl	8012048 <uxr_session_header_offset>
 8011da0:	2300      	movs	r3, #0
 8011da2:	2210      	movs	r2, #16
 8011da4:	9000      	str	r0, [sp, #0]
 8011da6:	a902      	add	r1, sp, #8
 8011da8:	a806      	add	r0, sp, #24
 8011daa:	f7fe fbef 	bl	801058c <ucdr_init_buffer_origin_offset>
 8011dae:	a906      	add	r1, sp, #24
 8011db0:	4620      	mov	r0, r4
 8011db2:	f000 f897 	bl	8011ee4 <uxr_buffer_delete_session>
 8011db6:	2200      	movs	r2, #0
 8011db8:	4611      	mov	r1, r2
 8011dba:	9b06      	ldr	r3, [sp, #24]
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	f000 f8eb 	bl	8011f98 <uxr_stamp_session_header>
 8011dc2:	a806      	add	r0, sp, #24
 8011dc4:	f7fe fc20 	bl	8010608 <ucdr_buffer_length>
 8011dc8:	462b      	mov	r3, r5
 8011dca:	4602      	mov	r2, r0
 8011dcc:	a902      	add	r1, sp, #8
 8011dce:	4620      	mov	r0, r4
 8011dd0:	f7ff ff0a 	bl	8011be8 <wait_session_status>
 8011dd4:	b118      	cbz	r0, 8011dde <uxr_delete_session_retries+0x4a>
 8011dd6:	7960      	ldrb	r0, [r4, #5]
 8011dd8:	fab0 f080 	clz	r0, r0
 8011ddc:	0940      	lsrs	r0, r0, #5
 8011dde:	b00f      	add	sp, #60	@ 0x3c
 8011de0:	bd30      	pop	{r4, r5, pc}
 8011de2:	bf00      	nop

08011de4 <uxr_prepare_stream_to_write_submessage>:
 8011de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011de8:	b082      	sub	sp, #8
 8011dea:	4682      	mov	sl, r0
 8011dec:	4610      	mov	r0, r2
 8011dee:	4615      	mov	r5, r2
 8011df0:	461e      	mov	r6, r3
 8011df2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8011df6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8011dfa:	9101      	str	r1, [sp, #4]
 8011dfc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011e00:	f000 ff52 	bl	8012ca8 <uxr_submessage_padding>
 8011e04:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011e08:	f105 0904 	add.w	r9, r5, #4
 8011e0c:	2b01      	cmp	r3, #1
 8011e0e:	4481      	add	r9, r0
 8011e10:	d01d      	beq.n	8011e4e <uxr_prepare_stream_to_write_submessage+0x6a>
 8011e12:	2b02      	cmp	r3, #2
 8011e14:	d116      	bne.n	8011e44 <uxr_prepare_stream_to_write_submessage+0x60>
 8011e16:	4621      	mov	r1, r4
 8011e18:	f10a 0008 	add.w	r0, sl, #8
 8011e1c:	f000 fecc 	bl	8012bb8 <uxr_get_output_reliable_stream>
 8011e20:	4604      	mov	r4, r0
 8011e22:	b158      	cbz	r0, 8011e3c <uxr_prepare_stream_to_write_submessage+0x58>
 8011e24:	4649      	mov	r1, r9
 8011e26:	4632      	mov	r2, r6
 8011e28:	f006 fd94 	bl	8018954 <uxr_prepare_reliable_buffer_to_write>
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	b12c      	cbz	r4, 8011e3c <uxr_prepare_stream_to_write_submessage+0x58>
 8011e30:	4643      	mov	r3, r8
 8011e32:	b2aa      	uxth	r2, r5
 8011e34:	4639      	mov	r1, r7
 8011e36:	4630      	mov	r0, r6
 8011e38:	f000 fef6 	bl	8012c28 <uxr_buffer_submessage_header>
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	b002      	add	sp, #8
 8011e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e44:	2400      	movs	r4, #0
 8011e46:	4620      	mov	r0, r4
 8011e48:	b002      	add	sp, #8
 8011e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e4e:	4621      	mov	r1, r4
 8011e50:	f10a 0008 	add.w	r0, sl, #8
 8011e54:	f000 fea8 	bl	8012ba8 <uxr_get_output_best_effort_stream>
 8011e58:	4604      	mov	r4, r0
 8011e5a:	2800      	cmp	r0, #0
 8011e5c:	d0ee      	beq.n	8011e3c <uxr_prepare_stream_to_write_submessage+0x58>
 8011e5e:	4649      	mov	r1, r9
 8011e60:	4632      	mov	r2, r6
 8011e62:	f006 fcb3 	bl	80187cc <uxr_prepare_best_effort_buffer_to_write>
 8011e66:	4604      	mov	r4, r0
 8011e68:	e7e1      	b.n	8011e2e <uxr_prepare_stream_to_write_submessage+0x4a>
 8011e6a:	bf00      	nop

08011e6c <uxr_init_session_info>:
 8011e6c:	b470      	push	{r4, r5, r6}
 8011e6e:	7102      	strb	r2, [r0, #4]
 8011e70:	0e16      	lsrs	r6, r2, #24
 8011e72:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8011e76:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8011e7a:	23ff      	movs	r3, #255	@ 0xff
 8011e7c:	2209      	movs	r2, #9
 8011e7e:	7046      	strb	r6, [r0, #1]
 8011e80:	7085      	strb	r5, [r0, #2]
 8011e82:	70c4      	strb	r4, [r0, #3]
 8011e84:	7001      	strb	r1, [r0, #0]
 8011e86:	bc70      	pop	{r4, r5, r6}
 8011e88:	80c2      	strh	r2, [r0, #6]
 8011e8a:	7143      	strb	r3, [r0, #5]
 8011e8c:	4770      	bx	lr
 8011e8e:	bf00      	nop

08011e90 <uxr_buffer_create_session>:
 8011e90:	b570      	push	{r4, r5, r6, lr}
 8011e92:	b088      	sub	sp, #32
 8011e94:	2300      	movs	r3, #0
 8011e96:	4d12      	ldr	r5, [pc, #72]	@ (8011ee0 <uxr_buffer_create_session+0x50>)
 8011e98:	9307      	str	r3, [sp, #28]
 8011e9a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011e9e:	7802      	ldrb	r2, [r0, #0]
 8011ea0:	9303      	str	r3, [sp, #12]
 8011ea2:	460c      	mov	r4, r1
 8011ea4:	f88d 200c 	strb.w	r2, [sp, #12]
 8011ea8:	2101      	movs	r1, #1
 8011eaa:	682a      	ldr	r2, [r5, #0]
 8011eac:	f8d0 6001 	ldr.w	r6, [r0, #1]
 8011eb0:	88ad      	ldrh	r5, [r5, #4]
 8011eb2:	80c1      	strh	r1, [r0, #6]
 8011eb4:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011eb8:	9200      	str	r2, [sp, #0]
 8011eba:	4619      	mov	r1, r3
 8011ebc:	2210      	movs	r2, #16
 8011ebe:	4620      	mov	r0, r4
 8011ec0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011ec4:	9306      	str	r3, [sp, #24]
 8011ec6:	f88d 300d 	strb.w	r3, [sp, #13]
 8011eca:	9602      	str	r6, [sp, #8]
 8011ecc:	f8ad 5006 	strh.w	r5, [sp, #6]
 8011ed0:	f000 feaa 	bl	8012c28 <uxr_buffer_submessage_header>
 8011ed4:	4620      	mov	r0, r4
 8011ed6:	4669      	mov	r1, sp
 8011ed8:	f001 fece 	bl	8013c78 <uxr_serialize_CREATE_CLIENT_Payload>
 8011edc:	b008      	add	sp, #32
 8011ede:	bd70      	pop	{r4, r5, r6, pc}
 8011ee0:	0801de28 	.word	0x0801de28

08011ee4 <uxr_buffer_delete_session>:
 8011ee4:	b530      	push	{r4, r5, lr}
 8011ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8011f18 <uxr_buffer_delete_session+0x34>)
 8011ee8:	b083      	sub	sp, #12
 8011eea:	891b      	ldrh	r3, [r3, #8]
 8011eec:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011ef0:	2202      	movs	r2, #2
 8011ef2:	460c      	mov	r4, r1
 8011ef4:	80c2      	strh	r2, [r0, #6]
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	2204      	movs	r2, #4
 8011efa:	4608      	mov	r0, r1
 8011efc:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8011f00:	2103      	movs	r1, #3
 8011f02:	f8ad 5004 	strh.w	r5, [sp, #4]
 8011f06:	f000 fe8f 	bl	8012c28 <uxr_buffer_submessage_header>
 8011f0a:	4620      	mov	r0, r4
 8011f0c:	a901      	add	r1, sp, #4
 8011f0e:	f001 ff61 	bl	8013dd4 <uxr_serialize_DELETE_Payload>
 8011f12:	b003      	add	sp, #12
 8011f14:	bd30      	pop	{r4, r5, pc}
 8011f16:	bf00      	nop
 8011f18:	0801de28 	.word	0x0801de28

08011f1c <uxr_read_create_session_status>:
 8011f1c:	b510      	push	{r4, lr}
 8011f1e:	b088      	sub	sp, #32
 8011f20:	4604      	mov	r4, r0
 8011f22:	4608      	mov	r0, r1
 8011f24:	a901      	add	r1, sp, #4
 8011f26:	f001 ff65 	bl	8013df4 <uxr_deserialize_STATUS_AGENT_Payload>
 8011f2a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011f2e:	7163      	strb	r3, [r4, #5]
 8011f30:	b008      	add	sp, #32
 8011f32:	bd10      	pop	{r4, pc}

08011f34 <uxr_read_delete_session_status>:
 8011f34:	b510      	push	{r4, lr}
 8011f36:	4604      	mov	r4, r0
 8011f38:	b084      	sub	sp, #16
 8011f3a:	4608      	mov	r0, r1
 8011f3c:	a902      	add	r1, sp, #8
 8011f3e:	f001 ff89 	bl	8013e54 <uxr_deserialize_STATUS_Payload>
 8011f42:	88e3      	ldrh	r3, [r4, #6]
 8011f44:	2b02      	cmp	r3, #2
 8011f46:	d001      	beq.n	8011f4c <uxr_read_delete_session_status+0x18>
 8011f48:	b004      	add	sp, #16
 8011f4a:	bd10      	pop	{r4, pc}
 8011f4c:	f10d 000a 	add.w	r0, sp, #10
 8011f50:	f7fe fec6 	bl	8010ce0 <uxr_object_id_from_raw>
 8011f54:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011f58:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011f5c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	2b02      	cmp	r3, #2
 8011f64:	bf04      	itt	eq
 8011f66:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8011f6a:	7163      	strbeq	r3, [r4, #5]
 8011f6c:	b004      	add	sp, #16
 8011f6e:	bd10      	pop	{r4, pc}

08011f70 <uxr_stamp_create_session_header>:
 8011f70:	b510      	push	{r4, lr}
 8011f72:	4604      	mov	r4, r0
 8011f74:	b08a      	sub	sp, #40	@ 0x28
 8011f76:	a802      	add	r0, sp, #8
 8011f78:	2208      	movs	r2, #8
 8011f7a:	f7fe fb19 	bl	80105b0 <ucdr_init_buffer>
 8011f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f82:	9400      	str	r4, [sp, #0]
 8011f84:	2300      	movs	r3, #0
 8011f86:	a802      	add	r0, sp, #8
 8011f88:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	f001 f849 	bl	8013024 <uxr_serialize_message_header>
 8011f92:	b00a      	add	sp, #40	@ 0x28
 8011f94:	bd10      	pop	{r4, pc}
 8011f96:	bf00      	nop

08011f98 <uxr_stamp_session_header>:
 8011f98:	b570      	push	{r4, r5, r6, lr}
 8011f9a:	4604      	mov	r4, r0
 8011f9c:	b08c      	sub	sp, #48	@ 0x30
 8011f9e:	460d      	mov	r5, r1
 8011fa0:	4616      	mov	r6, r2
 8011fa2:	4619      	mov	r1, r3
 8011fa4:	a804      	add	r0, sp, #16
 8011fa6:	2208      	movs	r2, #8
 8011fa8:	9603      	str	r6, [sp, #12]
 8011faa:	f7fe fb01 	bl	80105b0 <ucdr_init_buffer>
 8011fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fb2:	9b03      	ldr	r3, [sp, #12]
 8011fb4:	9400      	str	r4, [sp, #0]
 8011fb6:	462a      	mov	r2, r5
 8011fb8:	a804      	add	r0, sp, #16
 8011fba:	f001 f833 	bl	8013024 <uxr_serialize_message_header>
 8011fbe:	b00c      	add	sp, #48	@ 0x30
 8011fc0:	bd70      	pop	{r4, r5, r6, pc}
 8011fc2:	bf00      	nop

08011fc4 <uxr_read_session_header>:
 8011fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fc8:	4607      	mov	r7, r0
 8011fca:	b084      	sub	sp, #16
 8011fcc:	4608      	mov	r0, r1
 8011fce:	460c      	mov	r4, r1
 8011fd0:	4615      	mov	r5, r2
 8011fd2:	461e      	mov	r6, r3
 8011fd4:	f7fe fb1c 	bl	8010610 <ucdr_buffer_remaining>
 8011fd8:	2808      	cmp	r0, #8
 8011fda:	d803      	bhi.n	8011fe4 <uxr_read_session_header+0x20>
 8011fdc:	2000      	movs	r0, #0
 8011fde:	b004      	add	sp, #16
 8011fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fe4:	f10d 080c 	add.w	r8, sp, #12
 8011fe8:	4633      	mov	r3, r6
 8011fea:	462a      	mov	r2, r5
 8011fec:	4620      	mov	r0, r4
 8011fee:	f8cd 8000 	str.w	r8, [sp]
 8011ff2:	f10d 010b 	add.w	r1, sp, #11
 8011ff6:	f001 f833 	bl	8013060 <uxr_deserialize_message_header>
 8011ffa:	783a      	ldrb	r2, [r7, #0]
 8011ffc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8012000:	4293      	cmp	r3, r2
 8012002:	d1eb      	bne.n	8011fdc <uxr_read_session_header+0x18>
 8012004:	061b      	lsls	r3, r3, #24
 8012006:	d41c      	bmi.n	8012042 <uxr_read_session_header+0x7e>
 8012008:	f898 2000 	ldrb.w	r2, [r8]
 801200c:	787b      	ldrb	r3, [r7, #1]
 801200e:	429a      	cmp	r2, r3
 8012010:	d003      	beq.n	801201a <uxr_read_session_header+0x56>
 8012012:	2001      	movs	r0, #1
 8012014:	f080 0001 	eor.w	r0, r0, #1
 8012018:	e7e1      	b.n	8011fde <uxr_read_session_header+0x1a>
 801201a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801201e:	78bb      	ldrb	r3, [r7, #2]
 8012020:	429a      	cmp	r2, r3
 8012022:	f107 0102 	add.w	r1, r7, #2
 8012026:	d1f4      	bne.n	8012012 <uxr_read_session_header+0x4e>
 8012028:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801202c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012030:	429a      	cmp	r2, r3
 8012032:	d1ee      	bne.n	8012012 <uxr_read_session_header+0x4e>
 8012034:	784b      	ldrb	r3, [r1, #1]
 8012036:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801203a:	429a      	cmp	r2, r3
 801203c:	d1e9      	bne.n	8012012 <uxr_read_session_header+0x4e>
 801203e:	2000      	movs	r0, #0
 8012040:	e7e8      	b.n	8012014 <uxr_read_session_header+0x50>
 8012042:	2001      	movs	r0, #1
 8012044:	e7cb      	b.n	8011fde <uxr_read_session_header+0x1a>
 8012046:	bf00      	nop

08012048 <uxr_session_header_offset>:
 8012048:	f990 3000 	ldrsb.w	r3, [r0]
 801204c:	2b00      	cmp	r3, #0
 801204e:	bfac      	ite	ge
 8012050:	2008      	movge	r0, #8
 8012052:	2004      	movlt	r0, #4
 8012054:	4770      	bx	lr
 8012056:	bf00      	nop

08012058 <uxr_init_base_object_request>:
 8012058:	b530      	push	{r4, r5, lr}
 801205a:	88c3      	ldrh	r3, [r0, #6]
 801205c:	b083      	sub	sp, #12
 801205e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8012062:	9101      	str	r1, [sp, #4]
 8012064:	f1a3 010a 	sub.w	r1, r3, #10
 8012068:	b289      	uxth	r1, r1
 801206a:	42a1      	cmp	r1, r4
 801206c:	d80e      	bhi.n	801208c <uxr_init_base_object_request+0x34>
 801206e:	3301      	adds	r3, #1
 8012070:	b29c      	uxth	r4, r3
 8012072:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8012076:	b2db      	uxtb	r3, r3
 8012078:	80c4      	strh	r4, [r0, #6]
 801207a:	1c91      	adds	r1, r2, #2
 801207c:	9801      	ldr	r0, [sp, #4]
 801207e:	7015      	strb	r5, [r2, #0]
 8012080:	7053      	strb	r3, [r2, #1]
 8012082:	f7fe fe41 	bl	8010d08 <uxr_object_id_to_raw>
 8012086:	4620      	mov	r0, r4
 8012088:	b003      	add	sp, #12
 801208a:	bd30      	pop	{r4, r5, pc}
 801208c:	230a      	movs	r3, #10
 801208e:	461c      	mov	r4, r3
 8012090:	2500      	movs	r5, #0
 8012092:	e7f1      	b.n	8012078 <uxr_init_base_object_request+0x20>

08012094 <uxr_parse_base_object_request>:
 8012094:	b570      	push	{r4, r5, r6, lr}
 8012096:	4604      	mov	r4, r0
 8012098:	3002      	adds	r0, #2
 801209a:	460d      	mov	r5, r1
 801209c:	4616      	mov	r6, r2
 801209e:	f7fe fe1f 	bl	8010ce0 <uxr_object_id_from_raw>
 80120a2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80120a6:	8028      	strh	r0, [r5, #0]
 80120a8:	806b      	strh	r3, [r5, #2]
 80120aa:	7822      	ldrb	r2, [r4, #0]
 80120ac:	7863      	ldrb	r3, [r4, #1]
 80120ae:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80120b2:	8033      	strh	r3, [r6, #0]
 80120b4:	bd70      	pop	{r4, r5, r6, pc}
 80120b6:	bf00      	nop

080120b8 <uxr_init_framing_io>:
 80120b8:	2300      	movs	r3, #0
 80120ba:	7041      	strb	r1, [r0, #1]
 80120bc:	7003      	strb	r3, [r0, #0]
 80120be:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80120c0:	4770      	bx	lr
 80120c2:	bf00      	nop

080120c4 <uxr_write_framed_msg>:
 80120c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c8:	7845      	ldrb	r5, [r0, #1]
 80120ca:	b085      	sub	sp, #20
 80120cc:	4604      	mov	r4, r0
 80120ce:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 80120d2:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
 80120d6:	f1bc 0f01 	cmp.w	ip, #1
 80120da:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 80120de:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80120e2:	f884 e038 	strb.w	lr, [r4, #56]	@ 0x38
 80120e6:	460e      	mov	r6, r1
 80120e8:	4617      	mov	r7, r2
 80120ea:	469b      	mov	fp, r3
 80120ec:	f240 8116 	bls.w	801231c <uxr_write_framed_msg+0x258>
 80120f0:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80120f4:	2302      	movs	r3, #2
 80120f6:	2a01      	cmp	r2, #1
 80120f8:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 80120fc:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012100:	f240 8091 	bls.w	8012226 <uxr_write_framed_msg+0x162>
 8012104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012106:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801210a:	b2d9      	uxtb	r1, r3
 801210c:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8012110:	2203      	movs	r2, #3
 8012112:	2b01      	cmp	r3, #1
 8012114:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012118:	f240 809a 	bls.w	8012250 <uxr_write_framed_msg+0x18c>
 801211c:	18a3      	adds	r3, r4, r2
 801211e:	3201      	adds	r2, #1
 8012120:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8012124:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012128:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801212a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801212e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8012132:	2901      	cmp	r1, #1
 8012134:	eb04 0102 	add.w	r1, r4, r2
 8012138:	f240 8101 	bls.w	801233e <uxr_write_framed_msg+0x27a>
 801213c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8012140:	3201      	adds	r2, #1
 8012142:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012144:	b2d2      	uxtb	r2, r2
 8012146:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801214a:	2b00      	cmp	r3, #0
 801214c:	f000 8106 	beq.w	801235c <uxr_write_framed_msg+0x298>
 8012150:	f04f 0a00 	mov.w	sl, #0
 8012154:	46d1      	mov	r9, sl
 8012156:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801215a:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801215e:	2901      	cmp	r1, #1
 8012160:	f240 80a3 	bls.w	80122aa <uxr_write_framed_msg+0x1e6>
 8012164:	2a29      	cmp	r2, #41	@ 0x29
 8012166:	d87f      	bhi.n	8012268 <uxr_write_framed_msg+0x1a4>
 8012168:	18a1      	adds	r1, r4, r2
 801216a:	3201      	adds	r2, #1
 801216c:	b2d2      	uxtb	r2, r2
 801216e:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8012172:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012176:	ea8a 0303 	eor.w	r3, sl, r3
 801217a:	4984      	ldr	r1, [pc, #528]	@ (801238c <uxr_write_framed_msg+0x2c8>)
 801217c:	b2db      	uxtb	r3, r3
 801217e:	f109 0901 	add.w	r9, r9, #1
 8012182:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012186:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 801218a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801218c:	454b      	cmp	r3, r9
 801218e:	d8e2      	bhi.n	8012156 <uxr_write_framed_msg+0x92>
 8012190:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8012194:	fa5f f98a 	uxtb.w	r9, sl
 8012198:	9301      	str	r3, [sp, #4]
 801219a:	f04f 0b00 	mov.w	fp, #0
 801219e:	f88d 900c 	strb.w	r9, [sp, #12]
 80121a2:	f88d 300d 	strb.w	r3, [sp, #13]
 80121a6:	f1a9 0a7d 	sub.w	sl, r9, #125	@ 0x7d
 80121aa:	fa5f f18a 	uxtb.w	r1, sl
 80121ae:	2901      	cmp	r1, #1
 80121b0:	d920      	bls.n	80121f4 <uxr_write_framed_msg+0x130>
 80121b2:	2a29      	cmp	r2, #41	@ 0x29
 80121b4:	f240 808b 	bls.w	80122ce <uxr_write_framed_msg+0x20a>
 80121b8:	2500      	movs	r5, #0
 80121ba:	e000      	b.n	80121be <uxr_write_framed_msg+0xfa>
 80121bc:	b160      	cbz	r0, 80121d8 <uxr_write_framed_msg+0x114>
 80121be:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80121c2:	1b52      	subs	r2, r2, r5
 80121c4:	4421      	add	r1, r4
 80121c6:	4643      	mov	r3, r8
 80121c8:	4638      	mov	r0, r7
 80121ca:	47b0      	blx	r6
 80121cc:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80121d0:	4405      	add	r5, r0
 80121d2:	4295      	cmp	r5, r2
 80121d4:	d3f2      	bcc.n	80121bc <uxr_write_framed_msg+0xf8>
 80121d6:	d003      	beq.n	80121e0 <uxr_write_framed_msg+0x11c>
 80121d8:	2000      	movs	r0, #0
 80121da:	b005      	add	sp, #20
 80121dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121e0:	fa5f f18a 	uxtb.w	r1, sl
 80121e4:	f04f 0300 	mov.w	r3, #0
 80121e8:	2901      	cmp	r1, #1
 80121ea:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80121ee:	f04f 0200 	mov.w	r2, #0
 80121f2:	d86c      	bhi.n	80122ce <uxr_write_framed_msg+0x20a>
 80121f4:	1c51      	adds	r1, r2, #1
 80121f6:	b2c9      	uxtb	r1, r1
 80121f8:	2929      	cmp	r1, #41	@ 0x29
 80121fa:	d8dd      	bhi.n	80121b8 <uxr_write_framed_msg+0xf4>
 80121fc:	18a0      	adds	r0, r4, r2
 80121fe:	3202      	adds	r2, #2
 8012200:	f089 0920 	eor.w	r9, r9, #32
 8012204:	b2d2      	uxtb	r2, r2
 8012206:	4659      	mov	r1, fp
 8012208:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801220c:	f880 9039 	strb.w	r9, [r0, #57]	@ 0x39
 8012210:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8012214:	f04f 0b01 	mov.w	fp, #1
 8012218:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801221c:	2900      	cmp	r1, #0
 801221e:	d162      	bne.n	80122e6 <uxr_write_framed_msg+0x222>
 8012220:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012224:	e7bf      	b.n	80121a6 <uxr_write_framed_msg+0xe2>
 8012226:	2204      	movs	r2, #4
 8012228:	2503      	movs	r5, #3
 801222a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801222c:	4423      	add	r3, r4
 801222e:	b2c9      	uxtb	r1, r1
 8012230:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012234:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 8012238:	4425      	add	r5, r4
 801223a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801223e:	f080 0020 	eor.w	r0, r0, #32
 8012242:	2b01      	cmp	r3, #1
 8012244:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8012248:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801224c:	f63f af66 	bhi.w	801211c <uxr_write_framed_msg+0x58>
 8012250:	18a3      	adds	r3, r4, r2
 8012252:	f081 0120 	eor.w	r1, r1, #32
 8012256:	3202      	adds	r2, #2
 8012258:	207d      	movs	r0, #125	@ 0x7d
 801225a:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 801225e:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
 8012262:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012266:	e75f      	b.n	8012128 <uxr_write_framed_msg+0x64>
 8012268:	2500      	movs	r5, #0
 801226a:	e001      	b.n	8012270 <uxr_write_framed_msg+0x1ac>
 801226c:	2800      	cmp	r0, #0
 801226e:	d0b3      	beq.n	80121d8 <uxr_write_framed_msg+0x114>
 8012270:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012274:	1b52      	subs	r2, r2, r5
 8012276:	4421      	add	r1, r4
 8012278:	4643      	mov	r3, r8
 801227a:	4638      	mov	r0, r7
 801227c:	47b0      	blx	r6
 801227e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012282:	4405      	add	r5, r0
 8012284:	4295      	cmp	r5, r2
 8012286:	d3f1      	bcc.n	801226c <uxr_write_framed_msg+0x1a8>
 8012288:	d1a6      	bne.n	80121d8 <uxr_write_framed_msg+0x114>
 801228a:	f04f 0300 	mov.w	r3, #0
 801228e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012292:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012294:	454b      	cmp	r3, r9
 8012296:	d971      	bls.n	801237c <uxr_write_framed_msg+0x2b8>
 8012298:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801229c:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80122a0:	2901      	cmp	r1, #1
 80122a2:	f04f 0200 	mov.w	r2, #0
 80122a6:	f63f af5d 	bhi.w	8012164 <uxr_write_framed_msg+0xa0>
 80122aa:	1c51      	adds	r1, r2, #1
 80122ac:	b2c9      	uxtb	r1, r1
 80122ae:	2929      	cmp	r1, #41	@ 0x29
 80122b0:	d8da      	bhi.n	8012268 <uxr_write_framed_msg+0x1a4>
 80122b2:	18a0      	adds	r0, r4, r2
 80122b4:	3202      	adds	r2, #2
 80122b6:	b2d2      	uxtb	r2, r2
 80122b8:	f083 0120 	eor.w	r1, r3, #32
 80122bc:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80122c0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80122c4:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 80122c8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80122cc:	e753      	b.n	8012176 <uxr_write_framed_msg+0xb2>
 80122ce:	18a0      	adds	r0, r4, r2
 80122d0:	3201      	adds	r2, #1
 80122d2:	b2d2      	uxtb	r2, r2
 80122d4:	4659      	mov	r1, fp
 80122d6:	f880 9038 	strb.w	r9, [r0, #56]	@ 0x38
 80122da:	f04f 0b01 	mov.w	fp, #1
 80122de:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80122e2:	2900      	cmp	r1, #0
 80122e4:	d09c      	beq.n	8012220 <uxr_write_framed_msg+0x15c>
 80122e6:	2500      	movs	r5, #0
 80122e8:	e002      	b.n	80122f0 <uxr_write_framed_msg+0x22c>
 80122ea:	2800      	cmp	r0, #0
 80122ec:	f43f af74 	beq.w	80121d8 <uxr_write_framed_msg+0x114>
 80122f0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80122f4:	1b52      	subs	r2, r2, r5
 80122f6:	4421      	add	r1, r4
 80122f8:	4643      	mov	r3, r8
 80122fa:	4638      	mov	r0, r7
 80122fc:	47b0      	blx	r6
 80122fe:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012302:	4405      	add	r5, r0
 8012304:	4295      	cmp	r5, r2
 8012306:	d3f0      	bcc.n	80122ea <uxr_write_framed_msg+0x226>
 8012308:	f47f af66 	bne.w	80121d8 <uxr_write_framed_msg+0x114>
 801230c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801230e:	2300      	movs	r3, #0
 8012310:	b290      	uxth	r0, r2
 8012312:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012316:	b005      	add	sp, #20
 8012318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801231c:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8012320:	f085 0520 	eor.w	r5, r5, #32
 8012324:	2303      	movs	r3, #3
 8012326:	217d      	movs	r1, #125	@ 0x7d
 8012328:	2a01      	cmp	r2, #1
 801232a:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
 801232e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012332:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8012336:	d814      	bhi.n	8012362 <uxr_write_framed_msg+0x29e>
 8012338:	2205      	movs	r2, #5
 801233a:	2504      	movs	r5, #4
 801233c:	e775      	b.n	801222a <uxr_write_framed_msg+0x166>
 801233e:	f083 0320 	eor.w	r3, r3, #32
 8012342:	f881 3039 	strb.w	r3, [r1, #57]	@ 0x39
 8012346:	3202      	adds	r2, #2
 8012348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801234a:	b2d2      	uxtb	r2, r2
 801234c:	207d      	movs	r0, #125	@ 0x7d
 801234e:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8012352:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012356:	2b00      	cmp	r3, #0
 8012358:	f47f aefa 	bne.w	8012150 <uxr_write_framed_msg+0x8c>
 801235c:	9301      	str	r3, [sp, #4]
 801235e:	4699      	mov	r9, r3
 8012360:	e71b      	b.n	801219a <uxr_write_framed_msg+0xd6>
 8012362:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012364:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8012368:	b2d9      	uxtb	r1, r3
 801236a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801236e:	2204      	movs	r2, #4
 8012370:	2b01      	cmp	r3, #1
 8012372:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012376:	f63f aed1 	bhi.w	801211c <uxr_write_framed_msg+0x58>
 801237a:	e769      	b.n	8012250 <uxr_write_framed_msg+0x18c>
 801237c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8012380:	fa5f f98a 	uxtb.w	r9, sl
 8012384:	9301      	str	r3, [sp, #4]
 8012386:	2200      	movs	r2, #0
 8012388:	e707      	b.n	801219a <uxr_write_framed_msg+0xd6>
 801238a:	bf00      	nop
 801238c:	0801e088 	.word	0x0801e088

08012390 <uxr_framing_read_transport>:
 8012390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012394:	4604      	mov	r4, r0
 8012396:	b083      	sub	sp, #12
 8012398:	461f      	mov	r7, r3
 801239a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801239e:	4689      	mov	r9, r1
 80123a0:	4692      	mov	sl, r2
 80123a2:	f000 fc87 	bl	8012cb4 <uxr_millis>
 80123a6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80123aa:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80123ae:	42b3      	cmp	r3, r6
 80123b0:	4680      	mov	r8, r0
 80123b2:	d05f      	beq.n	8012474 <uxr_framing_read_transport+0xe4>
 80123b4:	d81b      	bhi.n	80123ee <uxr_framing_read_transport+0x5e>
 80123b6:	1e75      	subs	r5, r6, #1
 80123b8:	1aed      	subs	r5, r5, r3
 80123ba:	b2ed      	uxtb	r5, r5
 80123bc:	2600      	movs	r6, #0
 80123be:	455d      	cmp	r5, fp
 80123c0:	d81e      	bhi.n	8012400 <uxr_framing_read_transport+0x70>
 80123c2:	19ab      	adds	r3, r5, r6
 80123c4:	455b      	cmp	r3, fp
 80123c6:	bf84      	itt	hi
 80123c8:	ebab 0605 	subhi.w	r6, fp, r5
 80123cc:	b2f6      	uxtbhi	r6, r6
 80123ce:	b9e5      	cbnz	r5, 801240a <uxr_framing_read_transport+0x7a>
 80123d0:	f04f 0b00 	mov.w	fp, #0
 80123d4:	f000 fc6e 	bl	8012cb4 <uxr_millis>
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	eba0 0008 	sub.w	r0, r0, r8
 80123de:	1a1b      	subs	r3, r3, r0
 80123e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80123e4:	4658      	mov	r0, fp
 80123e6:	603b      	str	r3, [r7, #0]
 80123e8:	b003      	add	sp, #12
 80123ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ee:	2e00      	cmp	r6, #0
 80123f0:	d048      	beq.n	8012484 <uxr_framing_read_transport+0xf4>
 80123f2:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80123f6:	b2ed      	uxtb	r5, r5
 80123f8:	3e01      	subs	r6, #1
 80123fa:	455d      	cmp	r5, fp
 80123fc:	b2f6      	uxtb	r6, r6
 80123fe:	d9e0      	bls.n	80123c2 <uxr_framing_read_transport+0x32>
 8012400:	fa5f f58b 	uxtb.w	r5, fp
 8012404:	2600      	movs	r6, #0
 8012406:	2d00      	cmp	r5, #0
 8012408:	d0e2      	beq.n	80123d0 <uxr_framing_read_transport+0x40>
 801240a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801240e:	3102      	adds	r1, #2
 8012410:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012412:	9300      	str	r3, [sp, #0]
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	4421      	add	r1, r4
 8012418:	462a      	mov	r2, r5
 801241a:	4650      	mov	r0, sl
 801241c:	47c8      	blx	r9
 801241e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012422:	4a1b      	ldr	r2, [pc, #108]	@ (8012490 <uxr_framing_read_transport+0x100>)
 8012424:	4403      	add	r3, r0
 8012426:	0859      	lsrs	r1, r3, #1
 8012428:	fba2 2101 	umull	r2, r1, r2, r1
 801242c:	0889      	lsrs	r1, r1, #2
 801242e:	222a      	movs	r2, #42	@ 0x2a
 8012430:	fb02 3111 	mls	r1, r2, r1, r3
 8012434:	4683      	mov	fp, r0
 8012436:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801243a:	2800      	cmp	r0, #0
 801243c:	d0c8      	beq.n	80123d0 <uxr_framing_read_transport+0x40>
 801243e:	42a8      	cmp	r0, r5
 8012440:	d1c8      	bne.n	80123d4 <uxr_framing_read_transport+0x44>
 8012442:	b31e      	cbz	r6, 801248c <uxr_framing_read_transport+0xfc>
 8012444:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012446:	9300      	str	r3, [sp, #0]
 8012448:	3102      	adds	r1, #2
 801244a:	4421      	add	r1, r4
 801244c:	4632      	mov	r2, r6
 801244e:	2300      	movs	r3, #0
 8012450:	4650      	mov	r0, sl
 8012452:	47c8      	blx	r9
 8012454:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012458:	490d      	ldr	r1, [pc, #52]	@ (8012490 <uxr_framing_read_transport+0x100>)
 801245a:	181a      	adds	r2, r3, r0
 801245c:	0853      	lsrs	r3, r2, #1
 801245e:	fba1 1303 	umull	r1, r3, r1, r3
 8012462:	089b      	lsrs	r3, r3, #2
 8012464:	212a      	movs	r1, #42	@ 0x2a
 8012466:	fb01 2313 	mls	r3, r1, r3, r2
 801246a:	eb00 0b05 	add.w	fp, r0, r5
 801246e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8012472:	e7af      	b.n	80123d4 <uxr_framing_read_transport+0x44>
 8012474:	2600      	movs	r6, #0
 8012476:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801247a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801247c:	d9c0      	bls.n	8012400 <uxr_framing_read_transport+0x70>
 801247e:	2102      	movs	r1, #2
 8012480:	2529      	movs	r5, #41	@ 0x29
 8012482:	e7c5      	b.n	8012410 <uxr_framing_read_transport+0x80>
 8012484:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8012488:	b2ed      	uxtb	r5, r5
 801248a:	e798      	b.n	80123be <uxr_framing_read_transport+0x2e>
 801248c:	46ab      	mov	fp, r5
 801248e:	e7a1      	b.n	80123d4 <uxr_framing_read_transport+0x44>
 8012490:	30c30c31 	.word	0x30c30c31

08012494 <uxr_read_framed_msg>:
 8012494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012498:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 801249c:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 80124a0:	42ae      	cmp	r6, r5
 80124a2:	b083      	sub	sp, #12
 80124a4:	4604      	mov	r4, r0
 80124a6:	461f      	mov	r7, r3
 80124a8:	4689      	mov	r9, r1
 80124aa:	4692      	mov	sl, r2
 80124ac:	f000 817d 	beq.w	80127aa <uxr_read_framed_msg+0x316>
 80124b0:	7823      	ldrb	r3, [r4, #0]
 80124b2:	4ecc      	ldr	r6, [pc, #816]	@ (80127e4 <uxr_read_framed_msg+0x350>)
 80124b4:	f8df 8330 	ldr.w	r8, [pc, #816]	@ 80127e8 <uxr_read_framed_msg+0x354>
 80124b8:	2b07      	cmp	r3, #7
 80124ba:	d8fd      	bhi.n	80124b8 <uxr_read_framed_msg+0x24>
 80124bc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80124c0:	00f40113 	.word	0x00f40113
 80124c4:	00b700d4 	.word	0x00b700d4
 80124c8:	004d008e 	.word	0x004d008e
 80124cc:	00080030 	.word	0x00080030
 80124d0:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80124d4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80124d8:	4298      	cmp	r0, r3
 80124da:	f000 8141 	beq.w	8012760 <uxr_read_framed_msg+0x2cc>
 80124de:	18e2      	adds	r2, r4, r3
 80124e0:	7891      	ldrb	r1, [r2, #2]
 80124e2:	297d      	cmp	r1, #125	@ 0x7d
 80124e4:	f000 81a2 	beq.w	801282c <uxr_read_framed_msg+0x398>
 80124e8:	3301      	adds	r3, #1
 80124ea:	085a      	lsrs	r2, r3, #1
 80124ec:	fba6 0202 	umull	r0, r2, r6, r2
 80124f0:	0892      	lsrs	r2, r2, #2
 80124f2:	202a      	movs	r0, #42	@ 0x2a
 80124f4:	fb00 3312 	mls	r3, r0, r2, r3
 80124f8:	297e      	cmp	r1, #126	@ 0x7e
 80124fa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80124fe:	f000 8251 	beq.w	80129a4 <uxr_read_framed_msg+0x510>
 8012502:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8012504:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8012506:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801250a:	b29b      	uxth	r3, r3
 801250c:	2100      	movs	r1, #0
 801250e:	429a      	cmp	r2, r3
 8012510:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8012512:	7021      	strb	r1, [r4, #0]
 8012514:	f000 8182 	beq.w	801281c <uxr_read_framed_msg+0x388>
 8012518:	2000      	movs	r0, #0
 801251a:	b003      	add	sp, #12
 801251c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012520:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012524:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012528:	4298      	cmp	r0, r3
 801252a:	f000 8128 	beq.w	801277e <uxr_read_framed_msg+0x2ea>
 801252e:	18e2      	adds	r2, r4, r3
 8012530:	7891      	ldrb	r1, [r2, #2]
 8012532:	297d      	cmp	r1, #125	@ 0x7d
 8012534:	f000 8196 	beq.w	8012864 <uxr_read_framed_msg+0x3d0>
 8012538:	3301      	adds	r3, #1
 801253a:	085a      	lsrs	r2, r3, #1
 801253c:	fba6 0202 	umull	r0, r2, r6, r2
 8012540:	0892      	lsrs	r2, r2, #2
 8012542:	202a      	movs	r0, #42	@ 0x2a
 8012544:	fb00 3312 	mls	r3, r0, r2, r3
 8012548:	297e      	cmp	r1, #126	@ 0x7e
 801254a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801254e:	f000 8219 	beq.w	8012984 <uxr_read_framed_msg+0x4f0>
 8012552:	2307      	movs	r3, #7
 8012554:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8012556:	7023      	strb	r3, [r4, #0]
 8012558:	e7ae      	b.n	80124b8 <uxr_read_framed_msg+0x24>
 801255a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801255c:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 801255e:	429d      	cmp	r5, r3
 8012560:	d937      	bls.n	80125d2 <uxr_read_framed_msg+0x13e>
 8012562:	ee07 9a90 	vmov	s15, r9
 8012566:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801256a:	e01e      	b.n	80125aa <uxr_read_framed_msg+0x116>
 801256c:	f89e e002 	ldrb.w	lr, [lr, #2]
 8012570:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 8012574:	f000 80d2 	beq.w	801271c <uxr_read_framed_msg+0x288>
 8012578:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801257c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012580:	f000 8214 	beq.w	80129ac <uxr_read_framed_msg+0x518>
 8012584:	f807 e003 	strb.w	lr, [r7, r3]
 8012588:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801258a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801258c:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 801258e:	ea80 010e 	eor.w	r1, r0, lr
 8012592:	b2c9      	uxtb	r1, r1
 8012594:	3301      	adds	r3, #1
 8012596:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 801259a:	b29b      	uxth	r3, r3
 801259c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 80125a0:	42ab      	cmp	r3, r5
 80125a2:	86e2      	strh	r2, [r4, #54]	@ 0x36
 80125a4:	8663      	strh	r3, [r4, #50]	@ 0x32
 80125a6:	f080 8121 	bcs.w	80127ec <uxr_read_framed_msg+0x358>
 80125aa:	f894 102d 	ldrb.w	r1, [r4, #45]	@ 0x2d
 80125ae:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80125b2:	f101 0b01 	add.w	fp, r1, #1
 80125b6:	ea4f 025b 	mov.w	r2, fp, lsr #1
 80125ba:	fba6 9202 	umull	r9, r2, r6, r2
 80125be:	0892      	lsrs	r2, r2, #2
 80125c0:	4288      	cmp	r0, r1
 80125c2:	eb04 0e01 	add.w	lr, r4, r1
 80125c6:	fb0c b212 	mls	r2, ip, r2, fp
 80125ca:	d1cf      	bne.n	801256c <uxr_read_framed_msg+0xd8>
 80125cc:	ee17 9a90 	vmov	r9, s15
 80125d0:	429d      	cmp	r5, r3
 80125d2:	f040 8112 	bne.w	80127fa <uxr_read_framed_msg+0x366>
 80125d6:	2306      	movs	r3, #6
 80125d8:	7023      	strb	r3, [r4, #0]
 80125da:	e76d      	b.n	80124b8 <uxr_read_framed_msg+0x24>
 80125dc:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80125e0:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80125e4:	4298      	cmp	r0, r3
 80125e6:	f000 80bb 	beq.w	8012760 <uxr_read_framed_msg+0x2cc>
 80125ea:	18e2      	adds	r2, r4, r3
 80125ec:	7891      	ldrb	r1, [r2, #2]
 80125ee:	297d      	cmp	r1, #125	@ 0x7d
 80125f0:	f000 8153 	beq.w	801289a <uxr_read_framed_msg+0x406>
 80125f4:	3301      	adds	r3, #1
 80125f6:	085a      	lsrs	r2, r3, #1
 80125f8:	fba6 0202 	umull	r0, r2, r6, r2
 80125fc:	0892      	lsrs	r2, r2, #2
 80125fe:	202a      	movs	r0, #42	@ 0x2a
 8012600:	fb00 3212 	mls	r2, r0, r2, r3
 8012604:	297e      	cmp	r1, #126	@ 0x7e
 8012606:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801260a:	f000 81cb 	beq.w	80129a4 <uxr_read_framed_msg+0x510>
 801260e:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8012610:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012614:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012616:	b29b      	uxth	r3, r3
 8012618:	2000      	movs	r0, #0
 801261a:	428b      	cmp	r3, r1
 801261c:	8623      	strh	r3, [r4, #48]	@ 0x30
 801261e:	8660      	strh	r0, [r4, #50]	@ 0x32
 8012620:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8012622:	f240 80db 	bls.w	80127dc <uxr_read_framed_msg+0x348>
 8012626:	7020      	strb	r0, [r4, #0]
 8012628:	b003      	add	sp, #12
 801262a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801262e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012632:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012636:	4298      	cmp	r0, r3
 8012638:	f000 80a1 	beq.w	801277e <uxr_read_framed_msg+0x2ea>
 801263c:	18e2      	adds	r2, r4, r3
 801263e:	7891      	ldrb	r1, [r2, #2]
 8012640:	297d      	cmp	r1, #125	@ 0x7d
 8012642:	f000 8167 	beq.w	8012914 <uxr_read_framed_msg+0x480>
 8012646:	3301      	adds	r3, #1
 8012648:	085a      	lsrs	r2, r3, #1
 801264a:	fba6 0202 	umull	r0, r2, r6, r2
 801264e:	0892      	lsrs	r2, r2, #2
 8012650:	202a      	movs	r0, #42	@ 0x2a
 8012652:	fb00 3312 	mls	r3, r0, r2, r3
 8012656:	297e      	cmp	r1, #126	@ 0x7e
 8012658:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801265c:	f000 8192 	beq.w	8012984 <uxr_read_framed_msg+0x4f0>
 8012660:	2304      	movs	r3, #4
 8012662:	8621      	strh	r1, [r4, #48]	@ 0x30
 8012664:	7023      	strb	r3, [r4, #0]
 8012666:	e727      	b.n	80124b8 <uxr_read_framed_msg+0x24>
 8012668:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801266c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012670:	4290      	cmp	r0, r2
 8012672:	f000 80b1 	beq.w	80127d8 <uxr_read_framed_msg+0x344>
 8012676:	18a3      	adds	r3, r4, r2
 8012678:	7899      	ldrb	r1, [r3, #2]
 801267a:	297d      	cmp	r1, #125	@ 0x7d
 801267c:	f000 8166 	beq.w	801294c <uxr_read_framed_msg+0x4b8>
 8012680:	3201      	adds	r2, #1
 8012682:	0850      	lsrs	r0, r2, #1
 8012684:	fba6 3000 	umull	r3, r0, r6, r0
 8012688:	0880      	lsrs	r0, r0, #2
 801268a:	232a      	movs	r3, #42	@ 0x2a
 801268c:	fb03 2210 	mls	r2, r3, r0, r2
 8012690:	297e      	cmp	r1, #126	@ 0x7e
 8012692:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012696:	f000 8187 	beq.w	80129a8 <uxr_read_framed_msg+0x514>
 801269a:	7863      	ldrb	r3, [r4, #1]
 801269c:	428b      	cmp	r3, r1
 801269e:	bf0c      	ite	eq
 80126a0:	2303      	moveq	r3, #3
 80126a2:	2300      	movne	r3, #0
 80126a4:	7023      	strb	r3, [r4, #0]
 80126a6:	e707      	b.n	80124b8 <uxr_read_framed_msg+0x24>
 80126a8:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80126ac:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80126b0:	2200      	movs	r2, #0
 80126b2:	4299      	cmp	r1, r3
 80126b4:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80126b8:	d063      	beq.n	8012782 <uxr_read_framed_msg+0x2ee>
 80126ba:	18e2      	adds	r2, r4, r3
 80126bc:	7892      	ldrb	r2, [r2, #2]
 80126be:	2a7d      	cmp	r2, #125	@ 0x7d
 80126c0:	f000 8107 	beq.w	80128d2 <uxr_read_framed_msg+0x43e>
 80126c4:	1c59      	adds	r1, r3, #1
 80126c6:	084b      	lsrs	r3, r1, #1
 80126c8:	fba6 0303 	umull	r0, r3, r6, r3
 80126cc:	089b      	lsrs	r3, r3, #2
 80126ce:	202a      	movs	r0, #42	@ 0x2a
 80126d0:	fb00 1313 	mls	r3, r0, r3, r1
 80126d4:	2a7e      	cmp	r2, #126	@ 0x7e
 80126d6:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 80126da:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80126de:	d050      	beq.n	8012782 <uxr_read_framed_msg+0x2ee>
 80126e0:	2302      	movs	r3, #2
 80126e2:	7023      	strb	r3, [r4, #0]
 80126e4:	e6e8      	b.n	80124b8 <uxr_read_framed_msg+0x24>
 80126e6:	f894 e02c 	ldrb.w	lr, [r4, #44]	@ 0x2c
 80126ea:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80126ee:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80126f2:	1c51      	adds	r1, r2, #1
 80126f4:	084b      	lsrs	r3, r1, #1
 80126f6:	fba6 5303 	umull	r5, r3, r6, r3
 80126fa:	089b      	lsrs	r3, r3, #2
 80126fc:	fb0c 1313 	mls	r3, ip, r3, r1
 8012700:	4596      	cmp	lr, r2
 8012702:	eb04 0002 	add.w	r0, r4, r2
 8012706:	b2da      	uxtb	r2, r3
 8012708:	f43f af06 	beq.w	8012518 <uxr_read_framed_msg+0x84>
 801270c:	7883      	ldrb	r3, [r0, #2]
 801270e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012712:	2b7e      	cmp	r3, #126	@ 0x7e
 8012714:	d1ed      	bne.n	80126f2 <uxr_read_framed_msg+0x25e>
 8012716:	2301      	movs	r3, #1
 8012718:	7023      	strb	r3, [r4, #0]
 801271a:	e6cd      	b.n	80124b8 <uxr_read_framed_msg+0x24>
 801271c:	f101 0b01 	add.w	fp, r1, #1
 8012720:	ea4f 025b 	mov.w	r2, fp, lsr #1
 8012724:	fba6 e202 	umull	lr, r2, r6, r2
 8012728:	3102      	adds	r1, #2
 801272a:	0892      	lsrs	r2, r2, #2
 801272c:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8012730:	fb0c b212 	mls	r2, ip, r2, fp
 8012734:	fba6 9e0e 	umull	r9, lr, r6, lr
 8012738:	eb04 0b02 	add.w	fp, r4, r2
 801273c:	b2d2      	uxtb	r2, r2
 801273e:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 8012742:	4290      	cmp	r0, r2
 8012744:	fb0c 111e 	mls	r1, ip, lr, r1
 8012748:	f43f af40 	beq.w	80125cc <uxr_read_framed_msg+0x138>
 801274c:	f89b e002 	ldrb.w	lr, [fp, #2]
 8012750:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8012754:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8012758:	d036      	beq.n	80127c8 <uxr_read_framed_msg+0x334>
 801275a:	f08e 0e20 	eor.w	lr, lr, #32
 801275e:	e711      	b.n	8012584 <uxr_read_framed_msg+0xf0>
 8012760:	2301      	movs	r3, #1
 8012762:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012764:	4649      	mov	r1, r9
 8012766:	e9cd 2300 	strd	r2, r3, [sp]
 801276a:	4620      	mov	r0, r4
 801276c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801276e:	4652      	mov	r2, sl
 8012770:	f7ff fe0e 	bl	8012390 <uxr_framing_read_transport>
 8012774:	2800      	cmp	r0, #0
 8012776:	f43f aecf 	beq.w	8012518 <uxr_read_framed_msg+0x84>
 801277a:	7823      	ldrb	r3, [r4, #0]
 801277c:	e69c      	b.n	80124b8 <uxr_read_framed_msg+0x24>
 801277e:	2302      	movs	r3, #2
 8012780:	e7ef      	b.n	8012762 <uxr_read_framed_msg+0x2ce>
 8012782:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012784:	2304      	movs	r3, #4
 8012786:	e9cd 2300 	strd	r2, r3, [sp]
 801278a:	4649      	mov	r1, r9
 801278c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801278e:	4652      	mov	r2, sl
 8012790:	4620      	mov	r0, r4
 8012792:	f7ff fdfd 	bl	8012390 <uxr_framing_read_transport>
 8012796:	2800      	cmp	r0, #0
 8012798:	d1ef      	bne.n	801277a <uxr_read_framed_msg+0x2e6>
 801279a:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 801279e:	387e      	subs	r0, #126	@ 0x7e
 80127a0:	bf18      	it	ne
 80127a2:	2001      	movne	r0, #1
 80127a4:	2800      	cmp	r0, #0
 80127a6:	d0e8      	beq.n	801277a <uxr_read_framed_msg+0x2e6>
 80127a8:	e6b6      	b.n	8012518 <uxr_read_framed_msg+0x84>
 80127aa:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80127ac:	2305      	movs	r3, #5
 80127ae:	e9cd 5300 	strd	r5, r3, [sp]
 80127b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80127b4:	f7ff fdec 	bl	8012390 <uxr_framing_read_transport>
 80127b8:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80127bc:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80127c0:	429a      	cmp	r2, r3
 80127c2:	f43f aea9 	beq.w	8012518 <uxr_read_framed_msg+0x84>
 80127c6:	e673      	b.n	80124b0 <uxr_read_framed_msg+0x1c>
 80127c8:	429d      	cmp	r5, r3
 80127ca:	ee17 9a90 	vmov	r9, s15
 80127ce:	f43f af02 	beq.w	80125d6 <uxr_read_framed_msg+0x142>
 80127d2:	2301      	movs	r3, #1
 80127d4:	7023      	strb	r3, [r4, #0]
 80127d6:	e66f      	b.n	80124b8 <uxr_read_framed_msg+0x24>
 80127d8:	2303      	movs	r3, #3
 80127da:	e7c2      	b.n	8012762 <uxr_read_framed_msg+0x2ce>
 80127dc:	2305      	movs	r3, #5
 80127de:	7023      	strb	r3, [r4, #0]
 80127e0:	e66a      	b.n	80124b8 <uxr_read_framed_msg+0x24>
 80127e2:	bf00      	nop
 80127e4:	30c30c31 	.word	0x30c30c31
 80127e8:	0801e088 	.word	0x0801e088
 80127ec:	ee17 9a90 	vmov	r9, s15
 80127f0:	f43f aef1 	beq.w	80125d6 <uxr_read_framed_msg+0x142>
 80127f4:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80127f8:	d08d      	beq.n	8012716 <uxr_read_framed_msg+0x282>
 80127fa:	1aeb      	subs	r3, r5, r3
 80127fc:	3302      	adds	r3, #2
 80127fe:	9301      	str	r3, [sp, #4]
 8012800:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012802:	9300      	str	r3, [sp, #0]
 8012804:	4652      	mov	r2, sl
 8012806:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012808:	4649      	mov	r1, r9
 801280a:	4620      	mov	r0, r4
 801280c:	f7ff fdc0 	bl	8012390 <uxr_framing_read_transport>
 8012810:	fab0 f080 	clz	r0, r0
 8012814:	0940      	lsrs	r0, r0, #5
 8012816:	2800      	cmp	r0, #0
 8012818:	d0af      	beq.n	801277a <uxr_read_framed_msg+0x2e6>
 801281a:	e67d      	b.n	8012518 <uxr_read_framed_msg+0x84>
 801281c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801281e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012822:	7013      	strb	r3, [r2, #0]
 8012824:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8012826:	b003      	add	sp, #12
 8012828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801282c:	1c59      	adds	r1, r3, #1
 801282e:	084a      	lsrs	r2, r1, #1
 8012830:	fba6 5202 	umull	r5, r2, r6, r2
 8012834:	0892      	lsrs	r2, r2, #2
 8012836:	252a      	movs	r5, #42	@ 0x2a
 8012838:	fb05 1212 	mls	r2, r5, r2, r1
 801283c:	b2d1      	uxtb	r1, r2
 801283e:	4288      	cmp	r0, r1
 8012840:	d08e      	beq.n	8012760 <uxr_read_framed_msg+0x2cc>
 8012842:	3302      	adds	r3, #2
 8012844:	4422      	add	r2, r4
 8012846:	0858      	lsrs	r0, r3, #1
 8012848:	fba6 1000 	umull	r1, r0, r6, r0
 801284c:	7891      	ldrb	r1, [r2, #2]
 801284e:	0882      	lsrs	r2, r0, #2
 8012850:	fb05 3312 	mls	r3, r5, r2, r3
 8012854:	297e      	cmp	r1, #126	@ 0x7e
 8012856:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801285a:	f000 80a3 	beq.w	80129a4 <uxr_read_framed_msg+0x510>
 801285e:	f081 0120 	eor.w	r1, r1, #32
 8012862:	e64e      	b.n	8012502 <uxr_read_framed_msg+0x6e>
 8012864:	1c59      	adds	r1, r3, #1
 8012866:	084a      	lsrs	r2, r1, #1
 8012868:	fba6 5202 	umull	r5, r2, r6, r2
 801286c:	0892      	lsrs	r2, r2, #2
 801286e:	252a      	movs	r5, #42	@ 0x2a
 8012870:	fb05 1212 	mls	r2, r5, r2, r1
 8012874:	b2d1      	uxtb	r1, r2
 8012876:	4288      	cmp	r0, r1
 8012878:	d081      	beq.n	801277e <uxr_read_framed_msg+0x2ea>
 801287a:	3302      	adds	r3, #2
 801287c:	4422      	add	r2, r4
 801287e:	0858      	lsrs	r0, r3, #1
 8012880:	fba6 1000 	umull	r1, r0, r6, r0
 8012884:	7891      	ldrb	r1, [r2, #2]
 8012886:	0882      	lsrs	r2, r0, #2
 8012888:	fb05 3312 	mls	r3, r5, r2, r3
 801288c:	297e      	cmp	r1, #126	@ 0x7e
 801288e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012892:	d077      	beq.n	8012984 <uxr_read_framed_msg+0x4f0>
 8012894:	f081 0120 	eor.w	r1, r1, #32
 8012898:	e65b      	b.n	8012552 <uxr_read_framed_msg+0xbe>
 801289a:	1c59      	adds	r1, r3, #1
 801289c:	084a      	lsrs	r2, r1, #1
 801289e:	fba6 5202 	umull	r5, r2, r6, r2
 80128a2:	0892      	lsrs	r2, r2, #2
 80128a4:	252a      	movs	r5, #42	@ 0x2a
 80128a6:	fb05 1212 	mls	r2, r5, r2, r1
 80128aa:	b2d1      	uxtb	r1, r2
 80128ac:	4288      	cmp	r0, r1
 80128ae:	f43f af57 	beq.w	8012760 <uxr_read_framed_msg+0x2cc>
 80128b2:	3302      	adds	r3, #2
 80128b4:	4422      	add	r2, r4
 80128b6:	0858      	lsrs	r0, r3, #1
 80128b8:	fba6 1000 	umull	r1, r0, r6, r0
 80128bc:	7891      	ldrb	r1, [r2, #2]
 80128be:	0882      	lsrs	r2, r0, #2
 80128c0:	fb05 3312 	mls	r3, r5, r2, r3
 80128c4:	297e      	cmp	r1, #126	@ 0x7e
 80128c6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80128ca:	d06b      	beq.n	80129a4 <uxr_read_framed_msg+0x510>
 80128cc:	f081 0120 	eor.w	r1, r1, #32
 80128d0:	e69d      	b.n	801260e <uxr_read_framed_msg+0x17a>
 80128d2:	1c5d      	adds	r5, r3, #1
 80128d4:	086a      	lsrs	r2, r5, #1
 80128d6:	fba6 0202 	umull	r0, r2, r6, r2
 80128da:	0892      	lsrs	r2, r2, #2
 80128dc:	202a      	movs	r0, #42	@ 0x2a
 80128de:	fb00 5212 	mls	r2, r0, r2, r5
 80128e2:	b2d5      	uxtb	r5, r2
 80128e4:	42a9      	cmp	r1, r5
 80128e6:	f43f af4c 	beq.w	8012782 <uxr_read_framed_msg+0x2ee>
 80128ea:	3302      	adds	r3, #2
 80128ec:	4422      	add	r2, r4
 80128ee:	0859      	lsrs	r1, r3, #1
 80128f0:	fba6 5101 	umull	r5, r1, r6, r1
 80128f4:	7895      	ldrb	r5, [r2, #2]
 80128f6:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 80128fa:	088a      	lsrs	r2, r1, #2
 80128fc:	fb00 3312 	mls	r3, r0, r2, r3
 8012900:	2d7e      	cmp	r5, #126	@ 0x7e
 8012902:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012906:	f43f af3c 	beq.w	8012782 <uxr_read_framed_msg+0x2ee>
 801290a:	f085 0520 	eor.w	r5, r5, #32
 801290e:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 8012912:	e6e5      	b.n	80126e0 <uxr_read_framed_msg+0x24c>
 8012914:	1c59      	adds	r1, r3, #1
 8012916:	084a      	lsrs	r2, r1, #1
 8012918:	fba6 5202 	umull	r5, r2, r6, r2
 801291c:	0892      	lsrs	r2, r2, #2
 801291e:	252a      	movs	r5, #42	@ 0x2a
 8012920:	fb05 1212 	mls	r2, r5, r2, r1
 8012924:	b2d1      	uxtb	r1, r2
 8012926:	4288      	cmp	r0, r1
 8012928:	f43f af29 	beq.w	801277e <uxr_read_framed_msg+0x2ea>
 801292c:	3302      	adds	r3, #2
 801292e:	4422      	add	r2, r4
 8012930:	0858      	lsrs	r0, r3, #1
 8012932:	fba6 1000 	umull	r1, r0, r6, r0
 8012936:	7891      	ldrb	r1, [r2, #2]
 8012938:	0882      	lsrs	r2, r0, #2
 801293a:	fb05 3312 	mls	r3, r5, r2, r3
 801293e:	297e      	cmp	r1, #126	@ 0x7e
 8012940:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012944:	d01e      	beq.n	8012984 <uxr_read_framed_msg+0x4f0>
 8012946:	f081 0120 	eor.w	r1, r1, #32
 801294a:	e689      	b.n	8012660 <uxr_read_framed_msg+0x1cc>
 801294c:	1c51      	adds	r1, r2, #1
 801294e:	084b      	lsrs	r3, r1, #1
 8012950:	fba6 5303 	umull	r5, r3, r6, r3
 8012954:	089b      	lsrs	r3, r3, #2
 8012956:	252a      	movs	r5, #42	@ 0x2a
 8012958:	fb05 1313 	mls	r3, r5, r3, r1
 801295c:	b2d9      	uxtb	r1, r3
 801295e:	4288      	cmp	r0, r1
 8012960:	f43f af3a 	beq.w	80127d8 <uxr_read_framed_msg+0x344>
 8012964:	3202      	adds	r2, #2
 8012966:	4423      	add	r3, r4
 8012968:	0850      	lsrs	r0, r2, #1
 801296a:	789b      	ldrb	r3, [r3, #2]
 801296c:	fba6 1000 	umull	r1, r0, r6, r0
 8012970:	0880      	lsrs	r0, r0, #2
 8012972:	fb05 2210 	mls	r2, r5, r0, r2
 8012976:	2b7e      	cmp	r3, #126	@ 0x7e
 8012978:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801297c:	d014      	beq.n	80129a8 <uxr_read_framed_msg+0x514>
 801297e:	f083 0120 	eor.w	r1, r3, #32
 8012982:	e68a      	b.n	801269a <uxr_read_framed_msg+0x206>
 8012984:	2302      	movs	r3, #2
 8012986:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012988:	4649      	mov	r1, r9
 801298a:	e9cd 2300 	strd	r2, r3, [sp]
 801298e:	4620      	mov	r0, r4
 8012990:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012992:	4652      	mov	r2, sl
 8012994:	f7ff fcfc 	bl	8012390 <uxr_framing_read_transport>
 8012998:	2800      	cmp	r0, #0
 801299a:	f47f aeee 	bne.w	801277a <uxr_read_framed_msg+0x2e6>
 801299e:	2301      	movs	r3, #1
 80129a0:	7023      	strb	r3, [r4, #0]
 80129a2:	e589      	b.n	80124b8 <uxr_read_framed_msg+0x24>
 80129a4:	2301      	movs	r3, #1
 80129a6:	e7ee      	b.n	8012986 <uxr_read_framed_msg+0x4f2>
 80129a8:	2303      	movs	r3, #3
 80129aa:	e7ec      	b.n	8012986 <uxr_read_framed_msg+0x4f2>
 80129ac:	ee17 9a90 	vmov	r9, s15
 80129b0:	e6b1      	b.n	8012716 <uxr_read_framed_msg+0x282>
 80129b2:	bf00      	nop

080129b4 <uxr_stream_id>:
 80129b4:	b410      	push	{r4}
 80129b6:	2901      	cmp	r1, #1
 80129b8:	b083      	sub	sp, #12
 80129ba:	d01f      	beq.n	80129fc <uxr_stream_id+0x48>
 80129bc:	2902      	cmp	r1, #2
 80129be:	f04f 0400 	mov.w	r4, #0
 80129c2:	d01e      	beq.n	8012a02 <uxr_stream_id+0x4e>
 80129c4:	2300      	movs	r3, #0
 80129c6:	f364 0307 	bfi	r3, r4, #0, #8
 80129ca:	f360 230f 	bfi	r3, r0, #8, #8
 80129ce:	f361 4317 	bfi	r3, r1, #16, #8
 80129d2:	f362 631f 	bfi	r3, r2, #24, #8
 80129d6:	b2da      	uxtb	r2, r3
 80129d8:	2000      	movs	r0, #0
 80129da:	f362 0007 	bfi	r0, r2, #0, #8
 80129de:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80129e2:	f362 200f 	bfi	r0, r2, #8, #8
 80129e6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80129ea:	f362 4017 	bfi	r0, r2, #16, #8
 80129ee:	0e1b      	lsrs	r3, r3, #24
 80129f0:	f363 601f 	bfi	r0, r3, #24, #8
 80129f4:	b003      	add	sp, #12
 80129f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129fa:	4770      	bx	lr
 80129fc:	1c44      	adds	r4, r0, #1
 80129fe:	b2e4      	uxtb	r4, r4
 8012a00:	e7e0      	b.n	80129c4 <uxr_stream_id+0x10>
 8012a02:	f080 0480 	eor.w	r4, r0, #128	@ 0x80
 8012a06:	e7dd      	b.n	80129c4 <uxr_stream_id+0x10>

08012a08 <uxr_stream_id_from_raw>:
 8012a08:	b410      	push	{r4}
 8012a0a:	b083      	sub	sp, #12
 8012a0c:	b128      	cbz	r0, 8012a1a <uxr_stream_id_from_raw+0x12>
 8012a0e:	0603      	lsls	r3, r0, #24
 8012a10:	d421      	bmi.n	8012a56 <uxr_stream_id_from_raw+0x4e>
 8012a12:	1e42      	subs	r2, r0, #1
 8012a14:	b2d2      	uxtb	r2, r2
 8012a16:	2401      	movs	r4, #1
 8012a18:	e001      	b.n	8012a1e <uxr_stream_id_from_raw+0x16>
 8012a1a:	4604      	mov	r4, r0
 8012a1c:	4602      	mov	r2, r0
 8012a1e:	2300      	movs	r3, #0
 8012a20:	f360 0307 	bfi	r3, r0, #0, #8
 8012a24:	f362 230f 	bfi	r3, r2, #8, #8
 8012a28:	f364 4317 	bfi	r3, r4, #16, #8
 8012a2c:	f361 631f 	bfi	r3, r1, #24, #8
 8012a30:	b2da      	uxtb	r2, r3
 8012a32:	2000      	movs	r0, #0
 8012a34:	f362 0007 	bfi	r0, r2, #0, #8
 8012a38:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012a3c:	f362 200f 	bfi	r0, r2, #8, #8
 8012a40:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012a44:	f362 4017 	bfi	r0, r2, #16, #8
 8012a48:	0e1b      	lsrs	r3, r3, #24
 8012a4a:	f363 601f 	bfi	r0, r3, #24, #8
 8012a4e:	b003      	add	sp, #12
 8012a50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a54:	4770      	bx	lr
 8012a56:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8012a5a:	2402      	movs	r4, #2
 8012a5c:	e7df      	b.n	8012a1e <uxr_stream_id_from_raw+0x16>
 8012a5e:	bf00      	nop

08012a60 <uxr_init_stream_storage>:
 8012a60:	2300      	movs	r3, #0
 8012a62:	7403      	strb	r3, [r0, #16]
 8012a64:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8012a68:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8012a6c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8012a70:	4770      	bx	lr
 8012a72:	bf00      	nop

08012a74 <uxr_reset_stream_storage>:
 8012a74:	b570      	push	{r4, r5, r6, lr}
 8012a76:	7c03      	ldrb	r3, [r0, #16]
 8012a78:	4604      	mov	r4, r0
 8012a7a:	b153      	cbz	r3, 8012a92 <uxr_reset_stream_storage+0x1e>
 8012a7c:	4606      	mov	r6, r0
 8012a7e:	2500      	movs	r5, #0
 8012a80:	4630      	mov	r0, r6
 8012a82:	f005 fe9d 	bl	80187c0 <uxr_reset_output_best_effort_stream>
 8012a86:	7c23      	ldrb	r3, [r4, #16]
 8012a88:	3501      	adds	r5, #1
 8012a8a:	42ab      	cmp	r3, r5
 8012a8c:	f106 0610 	add.w	r6, r6, #16
 8012a90:	d8f6      	bhi.n	8012a80 <uxr_reset_stream_storage+0xc>
 8012a92:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012a96:	b163      	cbz	r3, 8012ab2 <uxr_reset_stream_storage+0x3e>
 8012a98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012a9c:	2500      	movs	r5, #0
 8012a9e:	4630      	mov	r0, r6
 8012aa0:	f005 fc9a 	bl	80183d8 <uxr_reset_input_best_effort_stream>
 8012aa4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012aa8:	3501      	adds	r5, #1
 8012aaa:	42ab      	cmp	r3, r5
 8012aac:	f106 0602 	add.w	r6, r6, #2
 8012ab0:	d8f5      	bhi.n	8012a9e <uxr_reset_stream_storage+0x2a>
 8012ab2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012ab6:	b163      	cbz	r3, 8012ad2 <uxr_reset_stream_storage+0x5e>
 8012ab8:	f104 0618 	add.w	r6, r4, #24
 8012abc:	2500      	movs	r5, #0
 8012abe:	4630      	mov	r0, r6
 8012ac0:	f005 ff1e 	bl	8018900 <uxr_reset_output_reliable_stream>
 8012ac4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012ac8:	3501      	adds	r5, #1
 8012aca:	42ab      	cmp	r3, r5
 8012acc:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8012ad0:	d8f5      	bhi.n	8012abe <uxr_reset_stream_storage+0x4a>
 8012ad2:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012ad6:	b163      	cbz	r3, 8012af2 <uxr_reset_stream_storage+0x7e>
 8012ad8:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8012adc:	2500      	movs	r5, #0
 8012ade:	4630      	mov	r0, r6
 8012ae0:	f005 fce2 	bl	80184a8 <uxr_reset_input_reliable_stream>
 8012ae4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012ae8:	3501      	adds	r5, #1
 8012aea:	42ab      	cmp	r3, r5
 8012aec:	f106 0618 	add.w	r6, r6, #24
 8012af0:	d8f5      	bhi.n	8012ade <uxr_reset_stream_storage+0x6a>
 8012af2:	bd70      	pop	{r4, r5, r6, pc}

08012af4 <uxr_add_output_best_effort_buffer>:
 8012af4:	b530      	push	{r4, r5, lr}
 8012af6:	7c04      	ldrb	r4, [r0, #16]
 8012af8:	1c65      	adds	r5, r4, #1
 8012afa:	b083      	sub	sp, #12
 8012afc:	7405      	strb	r5, [r0, #16]
 8012afe:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8012b02:	f005 fe51 	bl	80187a8 <uxr_init_output_best_effort_stream>
 8012b06:	2201      	movs	r2, #1
 8012b08:	4620      	mov	r0, r4
 8012b0a:	4611      	mov	r1, r2
 8012b0c:	b003      	add	sp, #12
 8012b0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b12:	f7ff bf4f 	b.w	80129b4 <uxr_stream_id>
 8012b16:	bf00      	nop

08012b18 <uxr_add_output_reliable_buffer>:
 8012b18:	b570      	push	{r4, r5, r6, lr}
 8012b1a:	b084      	sub	sp, #16
 8012b1c:	f890 4040 	ldrb.w	r4, [r0, #64]	@ 0x40
 8012b20:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8012b24:	9600      	str	r6, [sp, #0]
 8012b26:	2528      	movs	r5, #40	@ 0x28
 8012b28:	1c66      	adds	r6, r4, #1
 8012b2a:	fb05 0504 	mla	r5, r5, r4, r0
 8012b2e:	f880 6040 	strb.w	r6, [r0, #64]	@ 0x40
 8012b32:	f105 0018 	add.w	r0, r5, #24
 8012b36:	f005 feb1 	bl	801889c <uxr_init_output_reliable_stream>
 8012b3a:	4620      	mov	r0, r4
 8012b3c:	2201      	movs	r2, #1
 8012b3e:	2102      	movs	r1, #2
 8012b40:	b004      	add	sp, #16
 8012b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012b46:	f7ff bf35 	b.w	80129b4 <uxr_stream_id>
 8012b4a:	bf00      	nop

08012b4c <uxr_add_input_best_effort_buffer>:
 8012b4c:	b510      	push	{r4, lr}
 8012b4e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8012b52:	1c62      	adds	r2, r4, #1
 8012b54:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8012b58:	b082      	sub	sp, #8
 8012b5a:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8012b5e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012b62:	f005 fc35 	bl	80183d0 <uxr_init_input_best_effort_stream>
 8012b66:	4620      	mov	r0, r4
 8012b68:	2200      	movs	r2, #0
 8012b6a:	2101      	movs	r1, #1
 8012b6c:	b002      	add	sp, #8
 8012b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b72:	f7ff bf1f 	b.w	80129b4 <uxr_stream_id>
 8012b76:	bf00      	nop

08012b78 <uxr_add_input_reliable_buffer>:
 8012b78:	b570      	push	{r4, r5, r6, lr}
 8012b7a:	b084      	sub	sp, #16
 8012b7c:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 8012b80:	9e08      	ldr	r6, [sp, #32]
 8012b82:	9600      	str	r6, [sp, #0]
 8012b84:	2518      	movs	r5, #24
 8012b86:	1c66      	adds	r6, r4, #1
 8012b88:	fb05 0504 	mla	r5, r5, r4, r0
 8012b8c:	f880 6060 	strb.w	r6, [r0, #96]	@ 0x60
 8012b90:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8012b94:	f005 fc64 	bl	8018460 <uxr_init_input_reliable_stream>
 8012b98:	4620      	mov	r0, r4
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	2102      	movs	r1, #2
 8012b9e:	b004      	add	sp, #16
 8012ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ba4:	f7ff bf06 	b.w	80129b4 <uxr_stream_id>

08012ba8 <uxr_get_output_best_effort_stream>:
 8012ba8:	7c03      	ldrb	r3, [r0, #16]
 8012baa:	428b      	cmp	r3, r1
 8012bac:	bf8c      	ite	hi
 8012bae:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012bb2:	2000      	movls	r0, #0
 8012bb4:	4770      	bx	lr
 8012bb6:	bf00      	nop

08012bb8 <uxr_get_output_reliable_stream>:
 8012bb8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012bbc:	428b      	cmp	r3, r1
 8012bbe:	bf83      	ittte	hi
 8012bc0:	2328      	movhi	r3, #40	@ 0x28
 8012bc2:	fb03 0101 	mlahi	r1, r3, r1, r0
 8012bc6:	f101 0018 	addhi.w	r0, r1, #24
 8012bca:	2000      	movls	r0, #0
 8012bcc:	4770      	bx	lr
 8012bce:	bf00      	nop

08012bd0 <uxr_get_input_best_effort_stream>:
 8012bd0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8012bd4:	428b      	cmp	r3, r1
 8012bd6:	bf86      	itte	hi
 8012bd8:	3121      	addhi	r1, #33	@ 0x21
 8012bda:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8012bde:	2000      	movls	r0, #0
 8012be0:	4770      	bx	lr
 8012be2:	bf00      	nop

08012be4 <uxr_get_input_reliable_stream>:
 8012be4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8012be8:	428b      	cmp	r3, r1
 8012bea:	bf83      	ittte	hi
 8012bec:	2318      	movhi	r3, #24
 8012bee:	fb03 0101 	mlahi	r1, r3, r1, r0
 8012bf2:	f101 0048 	addhi.w	r0, r1, #72	@ 0x48
 8012bf6:	2000      	movls	r0, #0
 8012bf8:	4770      	bx	lr
 8012bfa:	bf00      	nop

08012bfc <uxr_output_streams_confirmed>:
 8012bfc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012c00:	b183      	cbz	r3, 8012c24 <uxr_output_streams_confirmed+0x28>
 8012c02:	b570      	push	{r4, r5, r6, lr}
 8012c04:	4606      	mov	r6, r0
 8012c06:	f100 0518 	add.w	r5, r0, #24
 8012c0a:	2400      	movs	r4, #0
 8012c0c:	e001      	b.n	8012c12 <uxr_output_streams_confirmed+0x16>
 8012c0e:	3528      	adds	r5, #40	@ 0x28
 8012c10:	b138      	cbz	r0, 8012c22 <uxr_output_streams_confirmed+0x26>
 8012c12:	4628      	mov	r0, r5
 8012c14:	f006 f8d8 	bl	8018dc8 <uxr_is_output_up_to_date>
 8012c18:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8012c1c:	3401      	adds	r4, #1
 8012c1e:	42a3      	cmp	r3, r4
 8012c20:	d8f5      	bhi.n	8012c0e <uxr_output_streams_confirmed+0x12>
 8012c22:	bd70      	pop	{r4, r5, r6, pc}
 8012c24:	2001      	movs	r0, #1
 8012c26:	4770      	bx	lr

08012c28 <uxr_buffer_submessage_header>:
 8012c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c2a:	4604      	mov	r4, r0
 8012c2c:	460e      	mov	r6, r1
 8012c2e:	2104      	movs	r1, #4
 8012c30:	4615      	mov	r5, r2
 8012c32:	461f      	mov	r7, r3
 8012c34:	f7fd fcd6 	bl	80105e4 <ucdr_align_to>
 8012c38:	2301      	movs	r3, #1
 8012c3a:	ea47 0203 	orr.w	r2, r7, r3
 8012c3e:	4631      	mov	r1, r6
 8012c40:	7523      	strb	r3, [r4, #20]
 8012c42:	4620      	mov	r0, r4
 8012c44:	462b      	mov	r3, r5
 8012c46:	f000 fa2b 	bl	80130a0 <uxr_serialize_submessage_header>
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	f7fd fce0 	bl	8010610 <ucdr_buffer_remaining>
 8012c50:	42a8      	cmp	r0, r5
 8012c52:	bf34      	ite	cc
 8012c54:	2000      	movcc	r0, #0
 8012c56:	2001      	movcs	r0, #1
 8012c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c5a:	bf00      	nop

08012c5c <uxr_read_submessage_header>:
 8012c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c60:	4604      	mov	r4, r0
 8012c62:	460d      	mov	r5, r1
 8012c64:	2104      	movs	r1, #4
 8012c66:	4616      	mov	r6, r2
 8012c68:	4698      	mov	r8, r3
 8012c6a:	f7fd fcbb 	bl	80105e4 <ucdr_align_to>
 8012c6e:	4620      	mov	r0, r4
 8012c70:	f7fd fcce 	bl	8010610 <ucdr_buffer_remaining>
 8012c74:	2803      	cmp	r0, #3
 8012c76:	bf8c      	ite	hi
 8012c78:	2701      	movhi	r7, #1
 8012c7a:	2700      	movls	r7, #0
 8012c7c:	d802      	bhi.n	8012c84 <uxr_read_submessage_header+0x28>
 8012c7e:	4638      	mov	r0, r7
 8012c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c84:	4633      	mov	r3, r6
 8012c86:	4642      	mov	r2, r8
 8012c88:	4620      	mov	r0, r4
 8012c8a:	4629      	mov	r1, r5
 8012c8c:	f000 fa1c 	bl	80130c8 <uxr_deserialize_submessage_header>
 8012c90:	f898 3000 	ldrb.w	r3, [r8]
 8012c94:	f003 02fe 	and.w	r2, r3, #254	@ 0xfe
 8012c98:	f003 0301 	and.w	r3, r3, #1
 8012c9c:	f888 2000 	strb.w	r2, [r8]
 8012ca0:	7523      	strb	r3, [r4, #20]
 8012ca2:	4638      	mov	r0, r7
 8012ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ca8 <uxr_submessage_padding>:
 8012ca8:	f010 0003 	ands.w	r0, r0, #3
 8012cac:	bf18      	it	ne
 8012cae:	f1c0 0004 	rsbne	r0, r0, #4
 8012cb2:	4770      	bx	lr

08012cb4 <uxr_millis>:
 8012cb4:	b510      	push	{r4, lr}
 8012cb6:	b084      	sub	sp, #16
 8012cb8:	4669      	mov	r1, sp
 8012cba:	2001      	movs	r0, #1
 8012cbc:	f7f0 fa98 	bl	80031f0 <clock_gettime>
 8012cc0:	e9dd 2400 	ldrd	r2, r4, [sp]
 8012cc4:	4907      	ldr	r1, [pc, #28]	@ (8012ce4 <uxr_millis+0x30>)
 8012cc6:	9802      	ldr	r0, [sp, #8]
 8012cc8:	fba2 2301 	umull	r2, r3, r2, r1
 8012ccc:	fb01 3304 	mla	r3, r1, r4, r3
 8012cd0:	4604      	mov	r4, r0
 8012cd2:	1810      	adds	r0, r2, r0
 8012cd4:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8012cd8:	4a03      	ldr	r2, [pc, #12]	@ (8012ce8 <uxr_millis+0x34>)
 8012cda:	2300      	movs	r3, #0
 8012cdc:	f7ed ffec 	bl	8000cb8 <__aeabi_ldivmod>
 8012ce0:	b004      	add	sp, #16
 8012ce2:	bd10      	pop	{r4, pc}
 8012ce4:	3b9aca00 	.word	0x3b9aca00
 8012ce8:	000f4240 	.word	0x000f4240

08012cec <uxr_nanos>:
 8012cec:	b510      	push	{r4, lr}
 8012cee:	b084      	sub	sp, #16
 8012cf0:	4669      	mov	r1, sp
 8012cf2:	2001      	movs	r0, #1
 8012cf4:	f7f0 fa7c 	bl	80031f0 <clock_gettime>
 8012cf8:	e9dd 2400 	ldrd	r2, r4, [sp]
 8012cfc:	4905      	ldr	r1, [pc, #20]	@ (8012d14 <uxr_nanos+0x28>)
 8012cfe:	9802      	ldr	r0, [sp, #8]
 8012d00:	fba2 2301 	umull	r2, r3, r2, r1
 8012d04:	fb01 3304 	mla	r3, r1, r4, r3
 8012d08:	4604      	mov	r4, r0
 8012d0a:	1810      	adds	r0, r2, r0
 8012d0c:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8012d10:	b004      	add	sp, #16
 8012d12:	bd10      	pop	{r4, pc}
 8012d14:	3b9aca00 	.word	0x3b9aca00

08012d18 <on_full_output_buffer_fragmented>:
 8012d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d1c:	460c      	mov	r4, r1
 8012d1e:	b08a      	sub	sp, #40	@ 0x28
 8012d20:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8012d24:	4606      	mov	r6, r0
 8012d26:	f104 0008 	add.w	r0, r4, #8
 8012d2a:	f7ff ff45 	bl	8012bb8 <uxr_get_output_reliable_stream>
 8012d2e:	4605      	mov	r5, r0
 8012d30:	f006 f854 	bl	8018ddc <get_available_free_slots>
 8012d34:	b968      	cbnz	r0, 8012d52 <on_full_output_buffer_fragmented+0x3a>
 8012d36:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	4798      	blx	r3
 8012d3e:	b918      	cbnz	r0, 8012d48 <on_full_output_buffer_fragmented+0x30>
 8012d40:	2001      	movs	r0, #1
 8012d42:	b00a      	add	sp, #40	@ 0x28
 8012d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d48:	4628      	mov	r0, r5
 8012d4a:	f006 f847 	bl	8018ddc <get_available_free_slots>
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	d0f6      	beq.n	8012d40 <on_full_output_buffer_fragmented+0x28>
 8012d52:	8928      	ldrh	r0, [r5, #8]
 8012d54:	89eb      	ldrh	r3, [r5, #14]
 8012d56:	7b2a      	ldrb	r2, [r5, #12]
 8012d58:	fbb3 f1f0 	udiv	r1, r3, r0
 8012d5c:	f5c2 427f 	rsb	r2, r2, #65280	@ 0xff00
 8012d60:	fb00 3111 	mls	r1, r0, r1, r3
 8012d64:	b28b      	uxth	r3, r1
 8012d66:	32fc      	adds	r2, #252	@ 0xfc
 8012d68:	6869      	ldr	r1, [r5, #4]
 8012d6a:	fbb1 f1f0 	udiv	r1, r1, r0
 8012d6e:	1f0f      	subs	r7, r1, #4
 8012d70:	f8d4 00c4 	ldr.w	r0, [r4, #196]	@ 0xc4
 8012d74:	fb01 f103 	mul.w	r1, r1, r3
 8012d78:	443a      	add	r2, r7
 8012d7a:	682b      	ldr	r3, [r5, #0]
 8012d7c:	fa1f f882 	uxth.w	r8, r2
 8012d80:	3104      	adds	r1, #4
 8012d82:	4419      	add	r1, r3
 8012d84:	eba0 0008 	sub.w	r0, r0, r8
 8012d88:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 8012d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d90:	9300      	str	r3, [sp, #0]
 8012d92:	463a      	mov	r2, r7
 8012d94:	2300      	movs	r3, #0
 8012d96:	a802      	add	r0, sp, #8
 8012d98:	f7fd fbf8 	bl	801058c <ucdr_init_buffer_origin_offset>
 8012d9c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012da0:	f102 0308 	add.w	r3, r2, #8
 8012da4:	42bb      	cmp	r3, r7
 8012da6:	d927      	bls.n	8012df8 <on_full_output_buffer_fragmented+0xe0>
 8012da8:	4642      	mov	r2, r8
 8012daa:	2300      	movs	r3, #0
 8012dac:	210d      	movs	r1, #13
 8012dae:	a802      	add	r0, sp, #8
 8012db0:	f7ff ff3a 	bl	8012c28 <uxr_buffer_submessage_header>
 8012db4:	8928      	ldrh	r0, [r5, #8]
 8012db6:	89eb      	ldrh	r3, [r5, #14]
 8012db8:	fbb3 f1f0 	udiv	r1, r3, r0
 8012dbc:	fb00 3111 	mls	r1, r0, r1, r3
 8012dc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012dc4:	b289      	uxth	r1, r1
 8012dc6:	fbb3 f3f0 	udiv	r3, r3, r0
 8012dca:	fb03 f301 	mul.w	r3, r3, r1
 8012dce:	50d7      	str	r7, [r2, r3]
 8012dd0:	89e8      	ldrh	r0, [r5, #14]
 8012dd2:	2101      	movs	r1, #1
 8012dd4:	f006 f822 	bl	8018e1c <uxr_seq_num_add>
 8012dd8:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8012ddc:	81e8      	strh	r0, [r5, #14]
 8012dde:	1a52      	subs	r2, r2, r1
 8012de0:	4630      	mov	r0, r6
 8012de2:	f7fd fbe5 	bl	80105b0 <ucdr_init_buffer>
 8012de6:	4630      	mov	r0, r6
 8012de8:	490f      	ldr	r1, [pc, #60]	@ (8012e28 <on_full_output_buffer_fragmented+0x110>)
 8012dea:	4622      	mov	r2, r4
 8012dec:	f7fd fbb6 	bl	801055c <ucdr_set_on_full_buffer_callback>
 8012df0:	2000      	movs	r0, #0
 8012df2:	b00a      	add	sp, #40	@ 0x28
 8012df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012df8:	b292      	uxth	r2, r2
 8012dfa:	2302      	movs	r3, #2
 8012dfc:	210d      	movs	r1, #13
 8012dfe:	a802      	add	r0, sp, #8
 8012e00:	f7ff ff12 	bl	8012c28 <uxr_buffer_submessage_header>
 8012e04:	8928      	ldrh	r0, [r5, #8]
 8012e06:	89eb      	ldrh	r3, [r5, #14]
 8012e08:	fbb3 f2f0 	udiv	r2, r3, r0
 8012e0c:	fb00 3212 	mls	r2, r0, r2, r3
 8012e10:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
 8012e14:	686b      	ldr	r3, [r5, #4]
 8012e16:	fbb3 f3f0 	udiv	r3, r3, r0
 8012e1a:	b292      	uxth	r2, r2
 8012e1c:	6828      	ldr	r0, [r5, #0]
 8012e1e:	fb03 f302 	mul.w	r3, r3, r2
 8012e22:	3108      	adds	r1, #8
 8012e24:	50c1      	str	r1, [r0, r3]
 8012e26:	e7d3      	b.n	8012dd0 <on_full_output_buffer_fragmented+0xb8>
 8012e28:	08012d19 	.word	0x08012d19

08012e2c <uxr_prepare_output_stream>:
 8012e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e2e:	b087      	sub	sp, #28
 8012e30:	2407      	movs	r4, #7
 8012e32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012e34:	9202      	str	r2, [sp, #8]
 8012e36:	2500      	movs	r5, #0
 8012e38:	1d32      	adds	r2, r6, #4
 8012e3a:	e9cd 4500 	strd	r4, r5, [sp]
 8012e3e:	9103      	str	r1, [sp, #12]
 8012e40:	461c      	mov	r4, r3
 8012e42:	4606      	mov	r6, r0
 8012e44:	f7fe ffce 	bl	8011de4 <uxr_prepare_stream_to_write_submessage>
 8012e48:	f080 0201 	eor.w	r2, r0, #1
 8012e4c:	b2d2      	uxtb	r2, r2
 8012e4e:	75a2      	strb	r2, [r4, #22]
 8012e50:	b112      	cbz	r2, 8012e58 <uxr_prepare_output_stream+0x2c>
 8012e52:	4628      	mov	r0, r5
 8012e54:	b007      	add	sp, #28
 8012e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e58:	aa05      	add	r2, sp, #20
 8012e5a:	9902      	ldr	r1, [sp, #8]
 8012e5c:	4630      	mov	r0, r6
 8012e5e:	f7ff f8fb 	bl	8012058 <uxr_init_base_object_request>
 8012e62:	a905      	add	r1, sp, #20
 8012e64:	4605      	mov	r5, r0
 8012e66:	4620      	mov	r0, r4
 8012e68:	f001 f872 	bl	8013f50 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012e6c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012e70:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8012e74:	1a52      	subs	r2, r2, r1
 8012e76:	4620      	mov	r0, r4
 8012e78:	f7fd fb9a 	bl	80105b0 <ucdr_init_buffer>
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	463a      	mov	r2, r7
 8012e80:	4631      	mov	r1, r6
 8012e82:	f7fd fb6b 	bl	801055c <ucdr_set_on_full_buffer_callback>
 8012e86:	4628      	mov	r0, r5
 8012e88:	b007      	add	sp, #28
 8012e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012e8c <uxr_prepare_output_stream_fragmented>:
 8012e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e90:	b093      	sub	sp, #76	@ 0x4c
 8012e92:	4605      	mov	r5, r0
 8012e94:	9107      	str	r1, [sp, #28]
 8012e96:	3008      	adds	r0, #8
 8012e98:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012e9c:	9303      	str	r3, [sp, #12]
 8012e9e:	9206      	str	r2, [sp, #24]
 8012ea0:	f7ff fe8a 	bl	8012bb8 <uxr_get_output_reliable_stream>
 8012ea4:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	f000 8094 	beq.w	8012fd6 <uxr_prepare_output_stream_fragmented+0x14a>
 8012eae:	4604      	mov	r4, r0
 8012eb0:	2800      	cmp	r0, #0
 8012eb2:	f000 8090 	beq.w	8012fd6 <uxr_prepare_output_stream_fragmented+0x14a>
 8012eb6:	f005 ff91 	bl	8018ddc <get_available_free_slots>
 8012eba:	2800      	cmp	r0, #0
 8012ebc:	f000 8086 	beq.w	8012fcc <uxr_prepare_output_stream_fragmented+0x140>
 8012ec0:	8922      	ldrh	r2, [r4, #8]
 8012ec2:	89e7      	ldrh	r7, [r4, #14]
 8012ec4:	fbb7 f8f2 	udiv	r8, r7, r2
 8012ec8:	e9d4 3100 	ldrd	r3, r1, [r4]
 8012ecc:	fb02 7818 	mls	r8, r2, r8, r7
 8012ed0:	fa1f f888 	uxth.w	r8, r8
 8012ed4:	fbb1 f2f2 	udiv	r2, r1, r2
 8012ed8:	fb02 f808 	mul.w	r8, r2, r8
 8012edc:	f108 0804 	add.w	r8, r8, #4
 8012ee0:	4498      	add	r8, r3
 8012ee2:	7b23      	ldrb	r3, [r4, #12]
 8012ee4:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8012ee8:	9204      	str	r2, [sp, #16]
 8012eea:	4553      	cmp	r3, sl
 8012eec:	f1a2 0b04 	sub.w	fp, r2, #4
 8012ef0:	d37d      	bcc.n	8012fee <uxr_prepare_output_stream_fragmented+0x162>
 8012ef2:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012ef4:	f8cd a000 	str.w	sl, [sp]
 8012ef8:	f1ab 0904 	sub.w	r9, fp, #4
 8012efc:	eba9 0903 	sub.w	r9, r9, r3
 8012f00:	3608      	adds	r6, #8
 8012f02:	a80a      	add	r0, sp, #40	@ 0x28
 8012f04:	2300      	movs	r3, #0
 8012f06:	465a      	mov	r2, fp
 8012f08:	4641      	mov	r1, r8
 8012f0a:	fa1f f989 	uxth.w	r9, r9
 8012f0e:	9605      	str	r6, [sp, #20]
 8012f10:	f7fd fb3c 	bl	801058c <ucdr_init_buffer_origin_offset>
 8012f14:	455e      	cmp	r6, fp
 8012f16:	bf34      	ite	cc
 8012f18:	2302      	movcc	r3, #2
 8012f1a:	2300      	movcs	r3, #0
 8012f1c:	464a      	mov	r2, r9
 8012f1e:	210d      	movs	r1, #13
 8012f20:	a80a      	add	r0, sp, #40	@ 0x28
 8012f22:	f7ff fe81 	bl	8012c28 <uxr_buffer_submessage_header>
 8012f26:	8920      	ldrh	r0, [r4, #8]
 8012f28:	fbb7 f3f0 	udiv	r3, r7, r0
 8012f2c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8012f30:	fb00 7313 	mls	r3, r0, r3, r7
 8012f34:	b29b      	uxth	r3, r3
 8012f36:	fbb1 f1f0 	udiv	r1, r1, r0
 8012f3a:	fb03 f301 	mul.w	r3, r3, r1
 8012f3e:	4638      	mov	r0, r7
 8012f40:	f842 b003 	str.w	fp, [r2, r3]
 8012f44:	2101      	movs	r1, #1
 8012f46:	f005 ff69 	bl	8018e1c <uxr_seq_num_add>
 8012f4a:	9b04      	ldr	r3, [sp, #16]
 8012f4c:	9e03      	ldr	r6, [sp, #12]
 8012f4e:	f1a3 0208 	sub.w	r2, r3, #8
 8012f52:	f10a 0104 	add.w	r1, sl, #4
 8012f56:	4607      	mov	r7, r0
 8012f58:	eba2 020a 	sub.w	r2, r2, sl
 8012f5c:	4441      	add	r1, r8
 8012f5e:	4630      	mov	r0, r6
 8012f60:	f7fd fb26 	bl	80105b0 <ucdr_init_buffer>
 8012f64:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8012f66:	81e7      	strh	r7, [r4, #14]
 8012f68:	1d1a      	adds	r2, r3, #4
 8012f6a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8012f6e:	bf28      	it	cs
 8012f70:	2200      	movcs	r2, #0
 8012f72:	b292      	uxth	r2, r2
 8012f74:	2300      	movs	r3, #0
 8012f76:	2107      	movs	r1, #7
 8012f78:	4630      	mov	r0, r6
 8012f7a:	f7ff fe55 	bl	8012c28 <uxr_buffer_submessage_header>
 8012f7e:	9906      	ldr	r1, [sp, #24]
 8012f80:	aa09      	add	r2, sp, #36	@ 0x24
 8012f82:	4628      	mov	r0, r5
 8012f84:	f7ff f868 	bl	8012058 <uxr_init_base_object_request>
 8012f88:	4604      	mov	r4, r0
 8012f8a:	b328      	cbz	r0, 8012fd8 <uxr_prepare_output_stream_fragmented+0x14c>
 8012f8c:	9e03      	ldr	r6, [sp, #12]
 8012f8e:	a909      	add	r1, sp, #36	@ 0x24
 8012f90:	4630      	mov	r0, r6
 8012f92:	f000 ffdd 	bl	8013f50 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012f96:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8012f9a:	4630      	mov	r0, r6
 8012f9c:	1a52      	subs	r2, r2, r1
 8012f9e:	f7fd fb07 	bl	80105b0 <ucdr_init_buffer>
 8012fa2:	9a05      	ldr	r2, [sp, #20]
 8012fa4:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8012fa8:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012faa:	9b07      	ldr	r3, [sp, #28]
 8012fac:	f8c5 20b8 	str.w	r2, [r5, #184]	@ 0xb8
 8012fb0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8012fb2:	f8c5 20bc 	str.w	r2, [r5, #188]	@ 0xbc
 8012fb6:	4630      	mov	r0, r6
 8012fb8:	4919      	ldr	r1, [pc, #100]	@ (8013020 <uxr_prepare_output_stream_fragmented+0x194>)
 8012fba:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8012fbe:	462a      	mov	r2, r5
 8012fc0:	f7fd facc 	bl	801055c <ucdr_set_on_full_buffer_callback>
 8012fc4:	4620      	mov	r0, r4
 8012fc6:	b013      	add	sp, #76	@ 0x4c
 8012fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fcc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8012fce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012fd0:	4628      	mov	r0, r5
 8012fd2:	4798      	blx	r3
 8012fd4:	b920      	cbnz	r0, 8012fe0 <uxr_prepare_output_stream_fragmented+0x154>
 8012fd6:	2400      	movs	r4, #0
 8012fd8:	4620      	mov	r0, r4
 8012fda:	b013      	add	sp, #76	@ 0x4c
 8012fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fe0:	4620      	mov	r0, r4
 8012fe2:	f005 fefb 	bl	8018ddc <get_available_free_slots>
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	f47f af6a 	bne.w	8012ec0 <uxr_prepare_output_stream_fragmented+0x34>
 8012fec:	e7f3      	b.n	8012fd6 <uxr_prepare_output_stream_fragmented+0x14a>
 8012fee:	4638      	mov	r0, r7
 8012ff0:	2101      	movs	r1, #1
 8012ff2:	f005 ff13 	bl	8018e1c <uxr_seq_num_add>
 8012ff6:	8922      	ldrh	r2, [r4, #8]
 8012ff8:	fbb0 f8f2 	udiv	r8, r0, r2
 8012ffc:	fb02 0818 	mls	r8, r2, r8, r0
 8013000:	fa1f f888 	uxth.w	r8, r8
 8013004:	6863      	ldr	r3, [r4, #4]
 8013006:	fbb3 f3f2 	udiv	r3, r3, r2
 801300a:	6822      	ldr	r2, [r4, #0]
 801300c:	fb08 f803 	mul.w	r8, r8, r3
 8013010:	f108 0804 	add.w	r8, r8, #4
 8013014:	4490      	add	r8, r2
 8013016:	7b23      	ldrb	r3, [r4, #12]
 8013018:	f858 ac04 	ldr.w	sl, [r8, #-4]
 801301c:	4607      	mov	r7, r0
 801301e:	e768      	b.n	8012ef2 <uxr_prepare_output_stream_fragmented+0x66>
 8013020:	08012d19 	.word	0x08012d19

08013024 <uxr_serialize_message_header>:
 8013024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013026:	b083      	sub	sp, #12
 8013028:	4616      	mov	r6, r2
 801302a:	4604      	mov	r4, r0
 801302c:	9301      	str	r3, [sp, #4]
 801302e:	460d      	mov	r5, r1
 8013030:	9f08      	ldr	r7, [sp, #32]
 8013032:	f004 fa5d 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013036:	4631      	mov	r1, r6
 8013038:	4620      	mov	r0, r4
 801303a:	f004 fa59 	bl	80174f0 <ucdr_serialize_uint8_t>
 801303e:	9a01      	ldr	r2, [sp, #4]
 8013040:	4620      	mov	r0, r4
 8013042:	2101      	movs	r1, #1
 8013044:	f004 fb00 	bl	8017648 <ucdr_serialize_endian_uint16_t>
 8013048:	062b      	lsls	r3, r5, #24
 801304a:	d501      	bpl.n	8013050 <uxr_serialize_message_header+0x2c>
 801304c:	b003      	add	sp, #12
 801304e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013050:	4639      	mov	r1, r7
 8013052:	4620      	mov	r0, r4
 8013054:	2204      	movs	r2, #4
 8013056:	b003      	add	sp, #12
 8013058:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801305c:	f004 b950 	b.w	8017300 <ucdr_serialize_array_uint8_t>

08013060 <uxr_deserialize_message_header>:
 8013060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013062:	b083      	sub	sp, #12
 8013064:	4616      	mov	r6, r2
 8013066:	4604      	mov	r4, r0
 8013068:	9301      	str	r3, [sp, #4]
 801306a:	460d      	mov	r5, r1
 801306c:	9f08      	ldr	r7, [sp, #32]
 801306e:	f004 fa55 	bl	801751c <ucdr_deserialize_uint8_t>
 8013072:	4631      	mov	r1, r6
 8013074:	4620      	mov	r0, r4
 8013076:	f004 fa51 	bl	801751c <ucdr_deserialize_uint8_t>
 801307a:	9a01      	ldr	r2, [sp, #4]
 801307c:	4620      	mov	r0, r4
 801307e:	2101      	movs	r1, #1
 8013080:	f004 fbd6 	bl	8017830 <ucdr_deserialize_endian_uint16_t>
 8013084:	f995 3000 	ldrsb.w	r3, [r5]
 8013088:	2b00      	cmp	r3, #0
 801308a:	da01      	bge.n	8013090 <uxr_deserialize_message_header+0x30>
 801308c:	b003      	add	sp, #12
 801308e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013090:	4639      	mov	r1, r7
 8013092:	4620      	mov	r0, r4
 8013094:	2204      	movs	r2, #4
 8013096:	b003      	add	sp, #12
 8013098:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801309c:	f004 b994 	b.w	80173c8 <ucdr_deserialize_array_uint8_t>

080130a0 <uxr_serialize_submessage_header>:
 80130a0:	b530      	push	{r4, r5, lr}
 80130a2:	b083      	sub	sp, #12
 80130a4:	4615      	mov	r5, r2
 80130a6:	4604      	mov	r4, r0
 80130a8:	9301      	str	r3, [sp, #4]
 80130aa:	f004 fa21 	bl	80174f0 <ucdr_serialize_uint8_t>
 80130ae:	4629      	mov	r1, r5
 80130b0:	4620      	mov	r0, r4
 80130b2:	f004 fa1d 	bl	80174f0 <ucdr_serialize_uint8_t>
 80130b6:	9a01      	ldr	r2, [sp, #4]
 80130b8:	4620      	mov	r0, r4
 80130ba:	2101      	movs	r1, #1
 80130bc:	b003      	add	sp, #12
 80130be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80130c2:	f004 bac1 	b.w	8017648 <ucdr_serialize_endian_uint16_t>
 80130c6:	bf00      	nop

080130c8 <uxr_deserialize_submessage_header>:
 80130c8:	b530      	push	{r4, r5, lr}
 80130ca:	b083      	sub	sp, #12
 80130cc:	4615      	mov	r5, r2
 80130ce:	4604      	mov	r4, r0
 80130d0:	9301      	str	r3, [sp, #4]
 80130d2:	f004 fa23 	bl	801751c <ucdr_deserialize_uint8_t>
 80130d6:	4629      	mov	r1, r5
 80130d8:	4620      	mov	r0, r4
 80130da:	f004 fa1f 	bl	801751c <ucdr_deserialize_uint8_t>
 80130de:	9a01      	ldr	r2, [sp, #4]
 80130e0:	4620      	mov	r0, r4
 80130e2:	2101      	movs	r1, #1
 80130e4:	b003      	add	sp, #12
 80130e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80130ea:	f004 bba1 	b.w	8017830 <ucdr_deserialize_endian_uint16_t>
 80130ee:	bf00      	nop

080130f0 <uxr_serialize_CLIENT_Representation>:
 80130f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130f4:	2204      	movs	r2, #4
 80130f6:	460c      	mov	r4, r1
 80130f8:	4605      	mov	r5, r0
 80130fa:	f004 f901 	bl	8017300 <ucdr_serialize_array_uint8_t>
 80130fe:	1d21      	adds	r1, r4, #4
 8013100:	4607      	mov	r7, r0
 8013102:	2202      	movs	r2, #2
 8013104:	4628      	mov	r0, r5
 8013106:	f004 f8fb 	bl	8017300 <ucdr_serialize_array_uint8_t>
 801310a:	1da1      	adds	r1, r4, #6
 801310c:	4007      	ands	r7, r0
 801310e:	2202      	movs	r2, #2
 8013110:	4628      	mov	r0, r5
 8013112:	f004 f8f5 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013116:	fa5f f887 	uxtb.w	r8, r7
 801311a:	2204      	movs	r2, #4
 801311c:	4607      	mov	r7, r0
 801311e:	f104 0108 	add.w	r1, r4, #8
 8013122:	4628      	mov	r0, r5
 8013124:	f004 f8ec 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013128:	ea08 0707 	and.w	r7, r8, r7
 801312c:	7b21      	ldrb	r1, [r4, #12]
 801312e:	4680      	mov	r8, r0
 8013130:	4628      	mov	r0, r5
 8013132:	f004 f9dd 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013136:	ea08 0807 	and.w	r8, r8, r7
 801313a:	7b61      	ldrb	r1, [r4, #13]
 801313c:	4607      	mov	r7, r0
 801313e:	4628      	mov	r0, r5
 8013140:	f004 f9a6 	bl	8017490 <ucdr_serialize_bool>
 8013144:	7b63      	ldrb	r3, [r4, #13]
 8013146:	ea08 0707 	and.w	r7, r8, r7
 801314a:	ea07 0600 	and.w	r6, r7, r0
 801314e:	b933      	cbnz	r3, 801315e <uxr_serialize_CLIENT_Representation+0x6e>
 8013150:	8ba1      	ldrh	r1, [r4, #28]
 8013152:	4628      	mov	r0, r5
 8013154:	f004 f9f8 	bl	8017548 <ucdr_serialize_uint16_t>
 8013158:	4030      	ands	r0, r6
 801315a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801315e:	6921      	ldr	r1, [r4, #16]
 8013160:	4628      	mov	r0, r5
 8013162:	f004 fbdb 	bl	801791c <ucdr_serialize_uint32_t>
 8013166:	6923      	ldr	r3, [r4, #16]
 8013168:	b1cb      	cbz	r3, 801319e <uxr_serialize_CLIENT_Representation+0xae>
 801316a:	b1d0      	cbz	r0, 80131a2 <uxr_serialize_CLIENT_Representation+0xb2>
 801316c:	46a0      	mov	r8, r4
 801316e:	f04f 0900 	mov.w	r9, #0
 8013172:	e002      	b.n	801317a <uxr_serialize_CLIENT_Representation+0x8a>
 8013174:	f108 0808 	add.w	r8, r8, #8
 8013178:	b198      	cbz	r0, 80131a2 <uxr_serialize_CLIENT_Representation+0xb2>
 801317a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801317e:	4628      	mov	r0, r5
 8013180:	f005 f90e 	bl	80183a0 <ucdr_serialize_string>
 8013184:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8013188:	4607      	mov	r7, r0
 801318a:	4628      	mov	r0, r5
 801318c:	f005 f908 	bl	80183a0 <ucdr_serialize_string>
 8013190:	6923      	ldr	r3, [r4, #16]
 8013192:	f109 0901 	add.w	r9, r9, #1
 8013196:	4038      	ands	r0, r7
 8013198:	4599      	cmp	r9, r3
 801319a:	b2c0      	uxtb	r0, r0
 801319c:	d3ea      	bcc.n	8013174 <uxr_serialize_CLIENT_Representation+0x84>
 801319e:	4006      	ands	r6, r0
 80131a0:	e7d6      	b.n	8013150 <uxr_serialize_CLIENT_Representation+0x60>
 80131a2:	2600      	movs	r6, #0
 80131a4:	e7d4      	b.n	8013150 <uxr_serialize_CLIENT_Representation+0x60>
 80131a6:	bf00      	nop

080131a8 <uxr_deserialize_CLIENT_Representation>:
 80131a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131ac:	2204      	movs	r2, #4
 80131ae:	460c      	mov	r4, r1
 80131b0:	4605      	mov	r5, r0
 80131b2:	f004 f909 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 80131b6:	1d21      	adds	r1, r4, #4
 80131b8:	4607      	mov	r7, r0
 80131ba:	2202      	movs	r2, #2
 80131bc:	4628      	mov	r0, r5
 80131be:	f004 f903 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 80131c2:	1da1      	adds	r1, r4, #6
 80131c4:	4007      	ands	r7, r0
 80131c6:	2202      	movs	r2, #2
 80131c8:	4628      	mov	r0, r5
 80131ca:	f004 f8fd 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 80131ce:	fa5f f887 	uxtb.w	r8, r7
 80131d2:	2204      	movs	r2, #4
 80131d4:	4607      	mov	r7, r0
 80131d6:	f104 0108 	add.w	r1, r4, #8
 80131da:	4628      	mov	r0, r5
 80131dc:	f004 f8f4 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 80131e0:	ea08 0707 	and.w	r7, r8, r7
 80131e4:	f104 010c 	add.w	r1, r4, #12
 80131e8:	4680      	mov	r8, r0
 80131ea:	4628      	mov	r0, r5
 80131ec:	f004 f996 	bl	801751c <ucdr_deserialize_uint8_t>
 80131f0:	ea08 0807 	and.w	r8, r8, r7
 80131f4:	f104 010d 	add.w	r1, r4, #13
 80131f8:	4607      	mov	r7, r0
 80131fa:	4628      	mov	r0, r5
 80131fc:	f004 f95e 	bl	80174bc <ucdr_deserialize_bool>
 8013200:	7b63      	ldrb	r3, [r4, #13]
 8013202:	ea08 0707 	and.w	r7, r8, r7
 8013206:	ea07 0600 	and.w	r6, r7, r0
 801320a:	b93b      	cbnz	r3, 801321c <uxr_deserialize_CLIENT_Representation+0x74>
 801320c:	f104 011c 	add.w	r1, r4, #28
 8013210:	4628      	mov	r0, r5
 8013212:	f004 fa99 	bl	8017748 <ucdr_deserialize_uint16_t>
 8013216:	4030      	ands	r0, r6
 8013218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801321c:	f104 0110 	add.w	r1, r4, #16
 8013220:	4628      	mov	r0, r5
 8013222:	f004 fcab 	bl	8017b7c <ucdr_deserialize_uint32_t>
 8013226:	6923      	ldr	r3, [r4, #16]
 8013228:	2b01      	cmp	r3, #1
 801322a:	d903      	bls.n	8013234 <uxr_deserialize_CLIENT_Representation+0x8c>
 801322c:	2301      	movs	r3, #1
 801322e:	75ab      	strb	r3, [r5, #22]
 8013230:	2600      	movs	r6, #0
 8013232:	e7eb      	b.n	801320c <uxr_deserialize_CLIENT_Representation+0x64>
 8013234:	b1fb      	cbz	r3, 8013276 <uxr_deserialize_CLIENT_Representation+0xce>
 8013236:	2800      	cmp	r0, #0
 8013238:	d0fa      	beq.n	8013230 <uxr_deserialize_CLIENT_Representation+0x88>
 801323a:	46a0      	mov	r8, r4
 801323c:	f04f 0900 	mov.w	r9, #0
 8013240:	e003      	b.n	801324a <uxr_deserialize_CLIENT_Representation+0xa2>
 8013242:	f108 0808 	add.w	r8, r8, #8
 8013246:	2800      	cmp	r0, #0
 8013248:	d0f2      	beq.n	8013230 <uxr_deserialize_CLIENT_Representation+0x88>
 801324a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801324e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013252:	4628      	mov	r0, r5
 8013254:	f005 f8b4 	bl	80183c0 <ucdr_deserialize_string>
 8013258:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801325c:	4607      	mov	r7, r0
 801325e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013262:	4628      	mov	r0, r5
 8013264:	f005 f8ac 	bl	80183c0 <ucdr_deserialize_string>
 8013268:	6923      	ldr	r3, [r4, #16]
 801326a:	f109 0901 	add.w	r9, r9, #1
 801326e:	4038      	ands	r0, r7
 8013270:	4599      	cmp	r9, r3
 8013272:	b2c0      	uxtb	r0, r0
 8013274:	d3e5      	bcc.n	8013242 <uxr_deserialize_CLIENT_Representation+0x9a>
 8013276:	4006      	ands	r6, r0
 8013278:	e7c8      	b.n	801320c <uxr_deserialize_CLIENT_Representation+0x64>
 801327a:	bf00      	nop

0801327c <uxr_serialize_AGENT_Representation>:
 801327c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013280:	2204      	movs	r2, #4
 8013282:	460c      	mov	r4, r1
 8013284:	4605      	mov	r5, r0
 8013286:	f004 f83b 	bl	8017300 <ucdr_serialize_array_uint8_t>
 801328a:	1d21      	adds	r1, r4, #4
 801328c:	4606      	mov	r6, r0
 801328e:	2202      	movs	r2, #2
 8013290:	4628      	mov	r0, r5
 8013292:	f004 f835 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013296:	1da1      	adds	r1, r4, #6
 8013298:	4006      	ands	r6, r0
 801329a:	2202      	movs	r2, #2
 801329c:	4628      	mov	r0, r5
 801329e:	f004 f82f 	bl	8017300 <ucdr_serialize_array_uint8_t>
 80132a2:	b2f6      	uxtb	r6, r6
 80132a4:	4603      	mov	r3, r0
 80132a6:	7a21      	ldrb	r1, [r4, #8]
 80132a8:	4628      	mov	r0, r5
 80132aa:	401e      	ands	r6, r3
 80132ac:	f004 f8f0 	bl	8017490 <ucdr_serialize_bool>
 80132b0:	7a23      	ldrb	r3, [r4, #8]
 80132b2:	ea00 0706 	and.w	r7, r0, r6
 80132b6:	b913      	cbnz	r3, 80132be <uxr_serialize_AGENT_Representation+0x42>
 80132b8:	4638      	mov	r0, r7
 80132ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132be:	68e1      	ldr	r1, [r4, #12]
 80132c0:	4628      	mov	r0, r5
 80132c2:	f004 fb2b 	bl	801791c <ucdr_serialize_uint32_t>
 80132c6:	68e3      	ldr	r3, [r4, #12]
 80132c8:	b313      	cbz	r3, 8013310 <uxr_serialize_AGENT_Representation+0x94>
 80132ca:	b1e8      	cbz	r0, 8013308 <uxr_serialize_AGENT_Representation+0x8c>
 80132cc:	46a0      	mov	r8, r4
 80132ce:	f04f 0900 	mov.w	r9, #0
 80132d2:	e002      	b.n	80132da <uxr_serialize_AGENT_Representation+0x5e>
 80132d4:	f108 0808 	add.w	r8, r8, #8
 80132d8:	b1b3      	cbz	r3, 8013308 <uxr_serialize_AGENT_Representation+0x8c>
 80132da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80132de:	4628      	mov	r0, r5
 80132e0:	f005 f85e 	bl	80183a0 <ucdr_serialize_string>
 80132e4:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80132e8:	4606      	mov	r6, r0
 80132ea:	4628      	mov	r0, r5
 80132ec:	f005 f858 	bl	80183a0 <ucdr_serialize_string>
 80132f0:	68e2      	ldr	r2, [r4, #12]
 80132f2:	f109 0901 	add.w	r9, r9, #1
 80132f6:	ea06 0300 	and.w	r3, r6, r0
 80132fa:	4591      	cmp	r9, r2
 80132fc:	b2db      	uxtb	r3, r3
 80132fe:	d3e9      	bcc.n	80132d4 <uxr_serialize_AGENT_Representation+0x58>
 8013300:	401f      	ands	r7, r3
 8013302:	4638      	mov	r0, r7
 8013304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013308:	2700      	movs	r7, #0
 801330a:	4638      	mov	r0, r7
 801330c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013310:	4007      	ands	r7, r0
 8013312:	e7d1      	b.n	80132b8 <uxr_serialize_AGENT_Representation+0x3c>

08013314 <uxr_serialize_ObjectVariant.part.0>:
 8013314:	b570      	push	{r4, r5, r6, lr}
 8013316:	780b      	ldrb	r3, [r1, #0]
 8013318:	3b01      	subs	r3, #1
 801331a:	460c      	mov	r4, r1
 801331c:	4605      	mov	r5, r0
 801331e:	2b0d      	cmp	r3, #13
 8013320:	d869      	bhi.n	80133f6 <uxr_serialize_ObjectVariant.part.0+0xe2>
 8013322:	e8df f003 	tbb	[pc, r3]
 8013326:	074a      	.short	0x074a
 8013328:	07073030 	.word	0x07073030
 801332c:	21680707 	.word	0x21680707
 8013330:	45632121 	.word	0x45632121
 8013334:	7909      	ldrb	r1, [r1, #4]
 8013336:	f004 f8db 	bl	80174f0 <ucdr_serialize_uint8_t>
 801333a:	4606      	mov	r6, r0
 801333c:	b158      	cbz	r0, 8013356 <uxr_serialize_ObjectVariant.part.0+0x42>
 801333e:	7923      	ldrb	r3, [r4, #4]
 8013340:	2b02      	cmp	r3, #2
 8013342:	d003      	beq.n	801334c <uxr_serialize_ObjectVariant.part.0+0x38>
 8013344:	2b03      	cmp	r3, #3
 8013346:	d029      	beq.n	801339c <uxr_serialize_ObjectVariant.part.0+0x88>
 8013348:	2b01      	cmp	r3, #1
 801334a:	d104      	bne.n	8013356 <uxr_serialize_ObjectVariant.part.0+0x42>
 801334c:	68a1      	ldr	r1, [r4, #8]
 801334e:	4628      	mov	r0, r5
 8013350:	f005 f826 	bl	80183a0 <ucdr_serialize_string>
 8013354:	4606      	mov	r6, r0
 8013356:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801335a:	4628      	mov	r0, r5
 801335c:	2202      	movs	r2, #2
 801335e:	f003 ffcf 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013362:	4030      	ands	r0, r6
 8013364:	b2c0      	uxtb	r0, r0
 8013366:	bd70      	pop	{r4, r5, r6, pc}
 8013368:	7909      	ldrb	r1, [r1, #4]
 801336a:	f004 f8c1 	bl	80174f0 <ucdr_serialize_uint8_t>
 801336e:	b1e8      	cbz	r0, 80133ac <uxr_serialize_ObjectVariant.part.0+0x98>
 8013370:	7923      	ldrb	r3, [r4, #4]
 8013372:	2b01      	cmp	r3, #1
 8013374:	d001      	beq.n	801337a <uxr_serialize_ObjectVariant.part.0+0x66>
 8013376:	2b02      	cmp	r3, #2
 8013378:	d13d      	bne.n	80133f6 <uxr_serialize_ObjectVariant.part.0+0xe2>
 801337a:	68a1      	ldr	r1, [r4, #8]
 801337c:	4628      	mov	r0, r5
 801337e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013382:	f005 b80d 	b.w	80183a0 <ucdr_serialize_string>
 8013386:	7909      	ldrb	r1, [r1, #4]
 8013388:	f004 f8b2 	bl	80174f0 <ucdr_serialize_uint8_t>
 801338c:	4606      	mov	r6, r0
 801338e:	2800      	cmp	r0, #0
 8013390:	d0e1      	beq.n	8013356 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013392:	7923      	ldrb	r3, [r4, #4]
 8013394:	2b02      	cmp	r3, #2
 8013396:	d0d9      	beq.n	801334c <uxr_serialize_ObjectVariant.part.0+0x38>
 8013398:	2b03      	cmp	r3, #3
 801339a:	d1dc      	bne.n	8013356 <uxr_serialize_ObjectVariant.part.0+0x42>
 801339c:	68a2      	ldr	r2, [r4, #8]
 801339e:	f104 010c 	add.w	r1, r4, #12
 80133a2:	4628      	mov	r0, r5
 80133a4:	f7fd f9a0 	bl	80106e8 <ucdr_serialize_sequence_uint8_t>
 80133a8:	4606      	mov	r6, r0
 80133aa:	e7d4      	b.n	8013356 <uxr_serialize_ObjectVariant.part.0+0x42>
 80133ac:	2000      	movs	r0, #0
 80133ae:	bd70      	pop	{r4, r5, r6, pc}
 80133b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133b4:	3104      	adds	r1, #4
 80133b6:	f7ff be9b 	b.w	80130f0 <uxr_serialize_CLIENT_Representation>
 80133ba:	7909      	ldrb	r1, [r1, #4]
 80133bc:	f004 f898 	bl	80174f0 <ucdr_serialize_uint8_t>
 80133c0:	4606      	mov	r6, r0
 80133c2:	b158      	cbz	r0, 80133dc <uxr_serialize_ObjectVariant.part.0+0xc8>
 80133c4:	7923      	ldrb	r3, [r4, #4]
 80133c6:	2b02      	cmp	r3, #2
 80133c8:	d003      	beq.n	80133d2 <uxr_serialize_ObjectVariant.part.0+0xbe>
 80133ca:	2b03      	cmp	r3, #3
 80133cc:	d015      	beq.n	80133fa <uxr_serialize_ObjectVariant.part.0+0xe6>
 80133ce:	2b01      	cmp	r3, #1
 80133d0:	d104      	bne.n	80133dc <uxr_serialize_ObjectVariant.part.0+0xc8>
 80133d2:	68a1      	ldr	r1, [r4, #8]
 80133d4:	4628      	mov	r0, r5
 80133d6:	f004 ffe3 	bl	80183a0 <ucdr_serialize_string>
 80133da:	4606      	mov	r6, r0
 80133dc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80133e0:	4628      	mov	r0, r5
 80133e2:	f004 fdc1 	bl	8017f68 <ucdr_serialize_int16_t>
 80133e6:	4030      	ands	r0, r6
 80133e8:	b2c0      	uxtb	r0, r0
 80133ea:	bd70      	pop	{r4, r5, r6, pc}
 80133ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80133f0:	3104      	adds	r1, #4
 80133f2:	f7ff bf43 	b.w	801327c <uxr_serialize_AGENT_Representation>
 80133f6:	2001      	movs	r0, #1
 80133f8:	bd70      	pop	{r4, r5, r6, pc}
 80133fa:	68a2      	ldr	r2, [r4, #8]
 80133fc:	f104 010c 	add.w	r1, r4, #12
 8013400:	4628      	mov	r0, r5
 8013402:	f7fd f971 	bl	80106e8 <ucdr_serialize_sequence_uint8_t>
 8013406:	4606      	mov	r6, r0
 8013408:	e7e8      	b.n	80133dc <uxr_serialize_ObjectVariant.part.0+0xc8>
 801340a:	bf00      	nop

0801340c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801340c:	b570      	push	{r4, r5, r6, lr}
 801340e:	460d      	mov	r5, r1
 8013410:	7809      	ldrb	r1, [r1, #0]
 8013412:	4606      	mov	r6, r0
 8013414:	f004 f83c 	bl	8017490 <ucdr_serialize_bool>
 8013418:	782b      	ldrb	r3, [r5, #0]
 801341a:	4604      	mov	r4, r0
 801341c:	b94b      	cbnz	r3, 8013432 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801341e:	7a29      	ldrb	r1, [r5, #8]
 8013420:	4630      	mov	r0, r6
 8013422:	f004 f835 	bl	8017490 <ucdr_serialize_bool>
 8013426:	7a2b      	ldrb	r3, [r5, #8]
 8013428:	4004      	ands	r4, r0
 801342a:	b2e4      	uxtb	r4, r4
 801342c:	b943      	cbnz	r3, 8013440 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801342e:	4620      	mov	r0, r4
 8013430:	bd70      	pop	{r4, r5, r6, pc}
 8013432:	6869      	ldr	r1, [r5, #4]
 8013434:	4630      	mov	r0, r6
 8013436:	f004 ffb3 	bl	80183a0 <ucdr_serialize_string>
 801343a:	4004      	ands	r4, r0
 801343c:	b2e4      	uxtb	r4, r4
 801343e:	e7ee      	b.n	801341e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013440:	68e9      	ldr	r1, [r5, #12]
 8013442:	4630      	mov	r0, r6
 8013444:	f004 ffac 	bl	80183a0 <ucdr_serialize_string>
 8013448:	4004      	ands	r4, r0
 801344a:	4620      	mov	r0, r4
 801344c:	bd70      	pop	{r4, r5, r6, pc}
 801344e:	bf00      	nop

08013450 <uxr_serialize_OBJK_Topic_Binary>:
 8013450:	b570      	push	{r4, r5, r6, lr}
 8013452:	460d      	mov	r5, r1
 8013454:	6809      	ldr	r1, [r1, #0]
 8013456:	4606      	mov	r6, r0
 8013458:	f004 ffa2 	bl	80183a0 <ucdr_serialize_string>
 801345c:	7929      	ldrb	r1, [r5, #4]
 801345e:	4604      	mov	r4, r0
 8013460:	4630      	mov	r0, r6
 8013462:	f004 f815 	bl	8017490 <ucdr_serialize_bool>
 8013466:	792b      	ldrb	r3, [r5, #4]
 8013468:	4004      	ands	r4, r0
 801346a:	b2e4      	uxtb	r4, r4
 801346c:	b943      	cbnz	r3, 8013480 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801346e:	7b29      	ldrb	r1, [r5, #12]
 8013470:	4630      	mov	r0, r6
 8013472:	f004 f80d 	bl	8017490 <ucdr_serialize_bool>
 8013476:	7b2b      	ldrb	r3, [r5, #12]
 8013478:	4004      	ands	r4, r0
 801347a:	b93b      	cbnz	r3, 801348c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801347c:	4620      	mov	r0, r4
 801347e:	bd70      	pop	{r4, r5, r6, pc}
 8013480:	68a9      	ldr	r1, [r5, #8]
 8013482:	4630      	mov	r0, r6
 8013484:	f004 ff8c 	bl	80183a0 <ucdr_serialize_string>
 8013488:	4004      	ands	r4, r0
 801348a:	e7f0      	b.n	801346e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801348c:	6929      	ldr	r1, [r5, #16]
 801348e:	4630      	mov	r0, r6
 8013490:	f004 ff86 	bl	80183a0 <ucdr_serialize_string>
 8013494:	4004      	ands	r4, r0
 8013496:	b2e4      	uxtb	r4, r4
 8013498:	4620      	mov	r0, r4
 801349a:	bd70      	pop	{r4, r5, r6, pc}

0801349c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801349c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134a0:	460c      	mov	r4, r1
 80134a2:	7809      	ldrb	r1, [r1, #0]
 80134a4:	4606      	mov	r6, r0
 80134a6:	f003 fff3 	bl	8017490 <ucdr_serialize_bool>
 80134aa:	7823      	ldrb	r3, [r4, #0]
 80134ac:	4605      	mov	r5, r0
 80134ae:	b96b      	cbnz	r3, 80134cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80134b0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80134b4:	4630      	mov	r0, r6
 80134b6:	f003 ffeb 	bl	8017490 <ucdr_serialize_bool>
 80134ba:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80134be:	4005      	ands	r5, r0
 80134c0:	b2ed      	uxtb	r5, r5
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d169      	bne.n	801359a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80134c6:	4628      	mov	r0, r5
 80134c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134cc:	6861      	ldr	r1, [r4, #4]
 80134ce:	4630      	mov	r0, r6
 80134d0:	f004 fa24 	bl	801791c <ucdr_serialize_uint32_t>
 80134d4:	6863      	ldr	r3, [r4, #4]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d06b      	beq.n	80135b2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80134da:	2800      	cmp	r0, #0
 80134dc:	d067      	beq.n	80135ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80134de:	68a1      	ldr	r1, [r4, #8]
 80134e0:	4630      	mov	r0, r6
 80134e2:	f004 ff5d 	bl	80183a0 <ucdr_serialize_string>
 80134e6:	6863      	ldr	r3, [r4, #4]
 80134e8:	2b01      	cmp	r3, #1
 80134ea:	d953      	bls.n	8013594 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80134ec:	2800      	cmp	r0, #0
 80134ee:	d05e      	beq.n	80135ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80134f0:	68e1      	ldr	r1, [r4, #12]
 80134f2:	4630      	mov	r0, r6
 80134f4:	f004 ff54 	bl	80183a0 <ucdr_serialize_string>
 80134f8:	6863      	ldr	r3, [r4, #4]
 80134fa:	2b02      	cmp	r3, #2
 80134fc:	d94a      	bls.n	8013594 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80134fe:	2800      	cmp	r0, #0
 8013500:	d055      	beq.n	80135ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013502:	6921      	ldr	r1, [r4, #16]
 8013504:	4630      	mov	r0, r6
 8013506:	f004 ff4b 	bl	80183a0 <ucdr_serialize_string>
 801350a:	6863      	ldr	r3, [r4, #4]
 801350c:	2b03      	cmp	r3, #3
 801350e:	d941      	bls.n	8013594 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013510:	2800      	cmp	r0, #0
 8013512:	d04c      	beq.n	80135ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013514:	6961      	ldr	r1, [r4, #20]
 8013516:	4630      	mov	r0, r6
 8013518:	f004 ff42 	bl	80183a0 <ucdr_serialize_string>
 801351c:	6863      	ldr	r3, [r4, #4]
 801351e:	2b04      	cmp	r3, #4
 8013520:	d938      	bls.n	8013594 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013522:	2800      	cmp	r0, #0
 8013524:	d043      	beq.n	80135ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013526:	69a1      	ldr	r1, [r4, #24]
 8013528:	4630      	mov	r0, r6
 801352a:	f004 ff39 	bl	80183a0 <ucdr_serialize_string>
 801352e:	6863      	ldr	r3, [r4, #4]
 8013530:	2b05      	cmp	r3, #5
 8013532:	d92f      	bls.n	8013594 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013534:	2800      	cmp	r0, #0
 8013536:	d03a      	beq.n	80135ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013538:	69e1      	ldr	r1, [r4, #28]
 801353a:	4630      	mov	r0, r6
 801353c:	f004 ff30 	bl	80183a0 <ucdr_serialize_string>
 8013540:	6863      	ldr	r3, [r4, #4]
 8013542:	2b06      	cmp	r3, #6
 8013544:	d926      	bls.n	8013594 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013546:	b390      	cbz	r0, 80135ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013548:	6a21      	ldr	r1, [r4, #32]
 801354a:	4630      	mov	r0, r6
 801354c:	f004 ff28 	bl	80183a0 <ucdr_serialize_string>
 8013550:	6863      	ldr	r3, [r4, #4]
 8013552:	2b07      	cmp	r3, #7
 8013554:	d91e      	bls.n	8013594 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013556:	b350      	cbz	r0, 80135ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013558:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801355a:	4630      	mov	r0, r6
 801355c:	f004 ff20 	bl	80183a0 <ucdr_serialize_string>
 8013560:	6863      	ldr	r3, [r4, #4]
 8013562:	2b08      	cmp	r3, #8
 8013564:	d916      	bls.n	8013594 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013566:	b310      	cbz	r0, 80135ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013568:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801356a:	4630      	mov	r0, r6
 801356c:	f004 ff18 	bl	80183a0 <ucdr_serialize_string>
 8013570:	6863      	ldr	r3, [r4, #4]
 8013572:	2b09      	cmp	r3, #9
 8013574:	d90e      	bls.n	8013594 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013576:	b1d0      	cbz	r0, 80135ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013578:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801357c:	2709      	movs	r7, #9
 801357e:	e000      	b.n	8013582 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013580:	b1a8      	cbz	r0, 80135ae <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013582:	f858 1b04 	ldr.w	r1, [r8], #4
 8013586:	4630      	mov	r0, r6
 8013588:	f004 ff0a 	bl	80183a0 <ucdr_serialize_string>
 801358c:	6862      	ldr	r2, [r4, #4]
 801358e:	3701      	adds	r7, #1
 8013590:	4297      	cmp	r7, r2
 8013592:	d3f5      	bcc.n	8013580 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013594:	4005      	ands	r5, r0
 8013596:	b2ed      	uxtb	r5, r5
 8013598:	e78a      	b.n	80134b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801359a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801359c:	4630      	mov	r0, r6
 801359e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80135a2:	f7fd f8a1 	bl	80106e8 <ucdr_serialize_sequence_uint8_t>
 80135a6:	4005      	ands	r5, r0
 80135a8:	4628      	mov	r0, r5
 80135aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135ae:	2500      	movs	r5, #0
 80135b0:	e77e      	b.n	80134b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80135b2:	4028      	ands	r0, r5
 80135b4:	b2c5      	uxtb	r5, r0
 80135b6:	e77b      	b.n	80134b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080135b8 <uxr_serialize_OBJK_Publisher_Binary>:
 80135b8:	b570      	push	{r4, r5, r6, lr}
 80135ba:	460d      	mov	r5, r1
 80135bc:	7809      	ldrb	r1, [r1, #0]
 80135be:	4606      	mov	r6, r0
 80135c0:	f003 ff66 	bl	8017490 <ucdr_serialize_bool>
 80135c4:	782b      	ldrb	r3, [r5, #0]
 80135c6:	4604      	mov	r4, r0
 80135c8:	b94b      	cbnz	r3, 80135de <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80135ca:	7a29      	ldrb	r1, [r5, #8]
 80135cc:	4630      	mov	r0, r6
 80135ce:	f003 ff5f 	bl	8017490 <ucdr_serialize_bool>
 80135d2:	7a2b      	ldrb	r3, [r5, #8]
 80135d4:	4004      	ands	r4, r0
 80135d6:	b2e4      	uxtb	r4, r4
 80135d8:	b943      	cbnz	r3, 80135ec <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80135da:	4620      	mov	r0, r4
 80135dc:	bd70      	pop	{r4, r5, r6, pc}
 80135de:	6869      	ldr	r1, [r5, #4]
 80135e0:	4630      	mov	r0, r6
 80135e2:	f004 fedd 	bl	80183a0 <ucdr_serialize_string>
 80135e6:	4004      	ands	r4, r0
 80135e8:	b2e4      	uxtb	r4, r4
 80135ea:	e7ee      	b.n	80135ca <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80135ec:	f105 010c 	add.w	r1, r5, #12
 80135f0:	4630      	mov	r0, r6
 80135f2:	f7ff ff53 	bl	801349c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80135f6:	4004      	ands	r4, r0
 80135f8:	4620      	mov	r0, r4
 80135fa:	bd70      	pop	{r4, r5, r6, pc}

080135fc <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80135fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013600:	460c      	mov	r4, r1
 8013602:	7809      	ldrb	r1, [r1, #0]
 8013604:	4606      	mov	r6, r0
 8013606:	f003 ff43 	bl	8017490 <ucdr_serialize_bool>
 801360a:	7823      	ldrb	r3, [r4, #0]
 801360c:	4605      	mov	r5, r0
 801360e:	b96b      	cbnz	r3, 801362c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013610:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013614:	4630      	mov	r0, r6
 8013616:	f003 ff3b 	bl	8017490 <ucdr_serialize_bool>
 801361a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801361e:	4005      	ands	r5, r0
 8013620:	b2ed      	uxtb	r5, r5
 8013622:	2b00      	cmp	r3, #0
 8013624:	d169      	bne.n	80136fa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8013626:	4628      	mov	r0, r5
 8013628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801362c:	6861      	ldr	r1, [r4, #4]
 801362e:	4630      	mov	r0, r6
 8013630:	f004 f974 	bl	801791c <ucdr_serialize_uint32_t>
 8013634:	6863      	ldr	r3, [r4, #4]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d06b      	beq.n	8013712 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801363a:	2800      	cmp	r0, #0
 801363c:	d067      	beq.n	801370e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801363e:	68a1      	ldr	r1, [r4, #8]
 8013640:	4630      	mov	r0, r6
 8013642:	f004 fead 	bl	80183a0 <ucdr_serialize_string>
 8013646:	6863      	ldr	r3, [r4, #4]
 8013648:	2b01      	cmp	r3, #1
 801364a:	d953      	bls.n	80136f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801364c:	2800      	cmp	r0, #0
 801364e:	d05e      	beq.n	801370e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013650:	68e1      	ldr	r1, [r4, #12]
 8013652:	4630      	mov	r0, r6
 8013654:	f004 fea4 	bl	80183a0 <ucdr_serialize_string>
 8013658:	6863      	ldr	r3, [r4, #4]
 801365a:	2b02      	cmp	r3, #2
 801365c:	d94a      	bls.n	80136f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801365e:	2800      	cmp	r0, #0
 8013660:	d055      	beq.n	801370e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013662:	6921      	ldr	r1, [r4, #16]
 8013664:	4630      	mov	r0, r6
 8013666:	f004 fe9b 	bl	80183a0 <ucdr_serialize_string>
 801366a:	6863      	ldr	r3, [r4, #4]
 801366c:	2b03      	cmp	r3, #3
 801366e:	d941      	bls.n	80136f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013670:	2800      	cmp	r0, #0
 8013672:	d04c      	beq.n	801370e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013674:	6961      	ldr	r1, [r4, #20]
 8013676:	4630      	mov	r0, r6
 8013678:	f004 fe92 	bl	80183a0 <ucdr_serialize_string>
 801367c:	6863      	ldr	r3, [r4, #4]
 801367e:	2b04      	cmp	r3, #4
 8013680:	d938      	bls.n	80136f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013682:	2800      	cmp	r0, #0
 8013684:	d043      	beq.n	801370e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013686:	69a1      	ldr	r1, [r4, #24]
 8013688:	4630      	mov	r0, r6
 801368a:	f004 fe89 	bl	80183a0 <ucdr_serialize_string>
 801368e:	6863      	ldr	r3, [r4, #4]
 8013690:	2b05      	cmp	r3, #5
 8013692:	d92f      	bls.n	80136f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013694:	2800      	cmp	r0, #0
 8013696:	d03a      	beq.n	801370e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013698:	69e1      	ldr	r1, [r4, #28]
 801369a:	4630      	mov	r0, r6
 801369c:	f004 fe80 	bl	80183a0 <ucdr_serialize_string>
 80136a0:	6863      	ldr	r3, [r4, #4]
 80136a2:	2b06      	cmp	r3, #6
 80136a4:	d926      	bls.n	80136f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80136a6:	b390      	cbz	r0, 801370e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80136a8:	6a21      	ldr	r1, [r4, #32]
 80136aa:	4630      	mov	r0, r6
 80136ac:	f004 fe78 	bl	80183a0 <ucdr_serialize_string>
 80136b0:	6863      	ldr	r3, [r4, #4]
 80136b2:	2b07      	cmp	r3, #7
 80136b4:	d91e      	bls.n	80136f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80136b6:	b350      	cbz	r0, 801370e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80136b8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80136ba:	4630      	mov	r0, r6
 80136bc:	f004 fe70 	bl	80183a0 <ucdr_serialize_string>
 80136c0:	6863      	ldr	r3, [r4, #4]
 80136c2:	2b08      	cmp	r3, #8
 80136c4:	d916      	bls.n	80136f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80136c6:	b310      	cbz	r0, 801370e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80136c8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80136ca:	4630      	mov	r0, r6
 80136cc:	f004 fe68 	bl	80183a0 <ucdr_serialize_string>
 80136d0:	6863      	ldr	r3, [r4, #4]
 80136d2:	2b09      	cmp	r3, #9
 80136d4:	d90e      	bls.n	80136f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80136d6:	b1d0      	cbz	r0, 801370e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80136d8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80136dc:	2709      	movs	r7, #9
 80136de:	e000      	b.n	80136e2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80136e0:	b1a8      	cbz	r0, 801370e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80136e2:	f858 1b04 	ldr.w	r1, [r8], #4
 80136e6:	4630      	mov	r0, r6
 80136e8:	f004 fe5a 	bl	80183a0 <ucdr_serialize_string>
 80136ec:	6862      	ldr	r2, [r4, #4]
 80136ee:	3701      	adds	r7, #1
 80136f0:	4297      	cmp	r7, r2
 80136f2:	d3f5      	bcc.n	80136e0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80136f4:	4005      	ands	r5, r0
 80136f6:	b2ed      	uxtb	r5, r5
 80136f8:	e78a      	b.n	8013610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80136fa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80136fc:	4630      	mov	r0, r6
 80136fe:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013702:	f7fc fff1 	bl	80106e8 <ucdr_serialize_sequence_uint8_t>
 8013706:	4005      	ands	r5, r0
 8013708:	4628      	mov	r0, r5
 801370a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801370e:	2500      	movs	r5, #0
 8013710:	e77e      	b.n	8013610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013712:	4028      	ands	r0, r5
 8013714:	b2c5      	uxtb	r5, r0
 8013716:	e77b      	b.n	8013610 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08013718 <uxr_serialize_OBJK_Subscriber_Binary>:
 8013718:	b570      	push	{r4, r5, r6, lr}
 801371a:	460d      	mov	r5, r1
 801371c:	7809      	ldrb	r1, [r1, #0]
 801371e:	4606      	mov	r6, r0
 8013720:	f003 feb6 	bl	8017490 <ucdr_serialize_bool>
 8013724:	782b      	ldrb	r3, [r5, #0]
 8013726:	4604      	mov	r4, r0
 8013728:	b94b      	cbnz	r3, 801373e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801372a:	7a29      	ldrb	r1, [r5, #8]
 801372c:	4630      	mov	r0, r6
 801372e:	f003 feaf 	bl	8017490 <ucdr_serialize_bool>
 8013732:	7a2b      	ldrb	r3, [r5, #8]
 8013734:	4004      	ands	r4, r0
 8013736:	b2e4      	uxtb	r4, r4
 8013738:	b943      	cbnz	r3, 801374c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801373a:	4620      	mov	r0, r4
 801373c:	bd70      	pop	{r4, r5, r6, pc}
 801373e:	6869      	ldr	r1, [r5, #4]
 8013740:	4630      	mov	r0, r6
 8013742:	f004 fe2d 	bl	80183a0 <ucdr_serialize_string>
 8013746:	4004      	ands	r4, r0
 8013748:	b2e4      	uxtb	r4, r4
 801374a:	e7ee      	b.n	801372a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801374c:	f105 010c 	add.w	r1, r5, #12
 8013750:	4630      	mov	r0, r6
 8013752:	f7ff ff53 	bl	80135fc <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8013756:	4004      	ands	r4, r0
 8013758:	4620      	mov	r0, r4
 801375a:	bd70      	pop	{r4, r5, r6, pc}

0801375c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801375c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013760:	4688      	mov	r8, r1
 8013762:	8809      	ldrh	r1, [r1, #0]
 8013764:	4681      	mov	r9, r0
 8013766:	f003 feef 	bl	8017548 <ucdr_serialize_uint16_t>
 801376a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801376e:	4606      	mov	r6, r0
 8013770:	4648      	mov	r0, r9
 8013772:	f003 fe8d 	bl	8017490 <ucdr_serialize_bool>
 8013776:	f898 3002 	ldrb.w	r3, [r8, #2]
 801377a:	4030      	ands	r0, r6
 801377c:	b2c5      	uxtb	r5, r0
 801377e:	b9eb      	cbnz	r3, 80137bc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013780:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013784:	4648      	mov	r0, r9
 8013786:	f003 fe83 	bl	8017490 <ucdr_serialize_bool>
 801378a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801378e:	4005      	ands	r5, r0
 8013790:	bb7b      	cbnz	r3, 80137f2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8013792:	f898 100c 	ldrb.w	r1, [r8, #12]
 8013796:	4648      	mov	r0, r9
 8013798:	f003 fe7a 	bl	8017490 <ucdr_serialize_bool>
 801379c:	f898 300c 	ldrb.w	r3, [r8, #12]
 80137a0:	4005      	ands	r5, r0
 80137a2:	b9f3      	cbnz	r3, 80137e2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 80137a4:	f898 1014 	ldrb.w	r1, [r8, #20]
 80137a8:	4648      	mov	r0, r9
 80137aa:	f003 fe71 	bl	8017490 <ucdr_serialize_bool>
 80137ae:	f898 3014 	ldrb.w	r3, [r8, #20]
 80137b2:	4005      	ands	r5, r0
 80137b4:	b94b      	cbnz	r3, 80137ca <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80137b6:	4628      	mov	r0, r5
 80137b8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80137bc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80137c0:	4648      	mov	r0, r9
 80137c2:	f003 fec1 	bl	8017548 <ucdr_serialize_uint16_t>
 80137c6:	4005      	ands	r5, r0
 80137c8:	e7da      	b.n	8013780 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80137ca:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80137ce:	4648      	mov	r0, r9
 80137d0:	f108 011c 	add.w	r1, r8, #28
 80137d4:	f7fc ff88 	bl	80106e8 <ucdr_serialize_sequence_uint8_t>
 80137d8:	4028      	ands	r0, r5
 80137da:	b2c5      	uxtb	r5, r0
 80137dc:	4628      	mov	r0, r5
 80137de:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80137e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80137e6:	4648      	mov	r0, r9
 80137e8:	f004 f898 	bl	801791c <ucdr_serialize_uint32_t>
 80137ec:	4028      	ands	r0, r5
 80137ee:	b2c5      	uxtb	r5, r0
 80137f0:	e7d8      	b.n	80137a4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80137f2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80137f6:	4648      	mov	r0, r9
 80137f8:	f004 f890 	bl	801791c <ucdr_serialize_uint32_t>
 80137fc:	4028      	ands	r0, r5
 80137fe:	b2c5      	uxtb	r5, r0
 8013800:	e7c7      	b.n	8013792 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013802:	bf00      	nop

08013804 <uxr_serialize_OBJK_DataReader_Binary>:
 8013804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013806:	2202      	movs	r2, #2
 8013808:	460c      	mov	r4, r1
 801380a:	4606      	mov	r6, r0
 801380c:	f003 fd78 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013810:	78a1      	ldrb	r1, [r4, #2]
 8013812:	4605      	mov	r5, r0
 8013814:	4630      	mov	r0, r6
 8013816:	f003 fe3b 	bl	8017490 <ucdr_serialize_bool>
 801381a:	78a3      	ldrb	r3, [r4, #2]
 801381c:	4005      	ands	r5, r0
 801381e:	b2ed      	uxtb	r5, r5
 8013820:	b90b      	cbnz	r3, 8013826 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8013822:	4628      	mov	r0, r5
 8013824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013826:	f104 0108 	add.w	r1, r4, #8
 801382a:	4630      	mov	r0, r6
 801382c:	f7ff ff96 	bl	801375c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013830:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013834:	4607      	mov	r7, r0
 8013836:	4630      	mov	r0, r6
 8013838:	f003 fe2a 	bl	8017490 <ucdr_serialize_bool>
 801383c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013840:	4038      	ands	r0, r7
 8013842:	b2c7      	uxtb	r7, r0
 8013844:	b95b      	cbnz	r3, 801385e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8013846:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801384a:	4630      	mov	r0, r6
 801384c:	f003 fe20 	bl	8017490 <ucdr_serialize_bool>
 8013850:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013854:	4007      	ands	r7, r0
 8013856:	b94b      	cbnz	r3, 801386c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8013858:	403d      	ands	r5, r7
 801385a:	4628      	mov	r0, r5
 801385c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801385e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8013862:	4630      	mov	r0, r6
 8013864:	f004 fab0 	bl	8017dc8 <ucdr_serialize_uint64_t>
 8013868:	4007      	ands	r7, r0
 801386a:	e7ec      	b.n	8013846 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801386c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801386e:	4630      	mov	r0, r6
 8013870:	f004 fd96 	bl	80183a0 <ucdr_serialize_string>
 8013874:	4007      	ands	r7, r0
 8013876:	b2ff      	uxtb	r7, r7
 8013878:	e7ee      	b.n	8013858 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801387a:	bf00      	nop

0801387c <uxr_serialize_OBJK_DataWriter_Binary>:
 801387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801387e:	2202      	movs	r2, #2
 8013880:	460d      	mov	r5, r1
 8013882:	4606      	mov	r6, r0
 8013884:	f003 fd3c 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013888:	78a9      	ldrb	r1, [r5, #2]
 801388a:	4604      	mov	r4, r0
 801388c:	4630      	mov	r0, r6
 801388e:	f003 fdff 	bl	8017490 <ucdr_serialize_bool>
 8013892:	78ab      	ldrb	r3, [r5, #2]
 8013894:	4004      	ands	r4, r0
 8013896:	b2e4      	uxtb	r4, r4
 8013898:	b90b      	cbnz	r3, 801389e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801389a:	4620      	mov	r0, r4
 801389c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801389e:	f105 0108 	add.w	r1, r5, #8
 80138a2:	4630      	mov	r0, r6
 80138a4:	f7ff ff5a 	bl	801375c <uxr_serialize_OBJK_Endpoint_QosBinary>
 80138a8:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 80138ac:	4607      	mov	r7, r0
 80138ae:	4630      	mov	r0, r6
 80138b0:	f003 fdee 	bl	8017490 <ucdr_serialize_bool>
 80138b4:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 80138b8:	4007      	ands	r7, r0
 80138ba:	b2ff      	uxtb	r7, r7
 80138bc:	b913      	cbnz	r3, 80138c4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80138be:	403c      	ands	r4, r7
 80138c0:	4620      	mov	r0, r4
 80138c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138c4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80138c8:	4630      	mov	r0, r6
 80138ca:	f004 fa7d 	bl	8017dc8 <ucdr_serialize_uint64_t>
 80138ce:	4007      	ands	r7, r0
 80138d0:	e7f5      	b.n	80138be <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80138d2:	bf00      	nop

080138d4 <uxr_deserialize_ObjectVariant>:
 80138d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138d6:	4605      	mov	r5, r0
 80138d8:	460e      	mov	r6, r1
 80138da:	f003 fe1f 	bl	801751c <ucdr_deserialize_uint8_t>
 80138de:	b320      	cbz	r0, 801392a <uxr_deserialize_ObjectVariant+0x56>
 80138e0:	7833      	ldrb	r3, [r6, #0]
 80138e2:	3b01      	subs	r3, #1
 80138e4:	4604      	mov	r4, r0
 80138e6:	2b0d      	cmp	r3, #13
 80138e8:	d81d      	bhi.n	8013926 <uxr_deserialize_ObjectVariant+0x52>
 80138ea:	e8df f003 	tbb	[pc, r3]
 80138ee:	2107      	.short	0x2107
 80138f0:	21214b4b 	.word	0x21214b4b
 80138f4:	381c2121 	.word	0x381c2121
 80138f8:	876a3838 	.word	0x876a3838
 80138fc:	1d31      	adds	r1, r6, #4
 80138fe:	4628      	mov	r0, r5
 8013900:	f003 fe0c 	bl	801751c <ucdr_deserialize_uint8_t>
 8013904:	4607      	mov	r7, r0
 8013906:	b138      	cbz	r0, 8013918 <uxr_deserialize_ObjectVariant+0x44>
 8013908:	7933      	ldrb	r3, [r6, #4]
 801390a:	2b02      	cmp	r3, #2
 801390c:	d07c      	beq.n	8013a08 <uxr_deserialize_ObjectVariant+0x134>
 801390e:	2b03      	cmp	r3, #3
 8013910:	f000 8082 	beq.w	8013a18 <uxr_deserialize_ObjectVariant+0x144>
 8013914:	2b01      	cmp	r3, #1
 8013916:	d077      	beq.n	8013a08 <uxr_deserialize_ObjectVariant+0x134>
 8013918:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801391c:	4628      	mov	r0, r5
 801391e:	f004 fba3 	bl	8018068 <ucdr_deserialize_int16_t>
 8013922:	4038      	ands	r0, r7
 8013924:	b2c4      	uxtb	r4, r0
 8013926:	4620      	mov	r0, r4
 8013928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801392a:	2400      	movs	r4, #0
 801392c:	4620      	mov	r0, r4
 801392e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013930:	1d31      	adds	r1, r6, #4
 8013932:	4628      	mov	r0, r5
 8013934:	f003 fdf2 	bl	801751c <ucdr_deserialize_uint8_t>
 8013938:	4607      	mov	r7, r0
 801393a:	b130      	cbz	r0, 801394a <uxr_deserialize_ObjectVariant+0x76>
 801393c:	7933      	ldrb	r3, [r6, #4]
 801393e:	2b02      	cmp	r3, #2
 8013940:	d037      	beq.n	80139b2 <uxr_deserialize_ObjectVariant+0xde>
 8013942:	2b03      	cmp	r3, #3
 8013944:	d02a      	beq.n	801399c <uxr_deserialize_ObjectVariant+0xc8>
 8013946:	2b01      	cmp	r3, #1
 8013948:	d033      	beq.n	80139b2 <uxr_deserialize_ObjectVariant+0xde>
 801394a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801394e:	4628      	mov	r0, r5
 8013950:	2202      	movs	r2, #2
 8013952:	f003 fd39 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 8013956:	4038      	ands	r0, r7
 8013958:	b2c4      	uxtb	r4, r0
 801395a:	4620      	mov	r0, r4
 801395c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801395e:	1d31      	adds	r1, r6, #4
 8013960:	4628      	mov	r0, r5
 8013962:	f003 fddb 	bl	801751c <ucdr_deserialize_uint8_t>
 8013966:	2800      	cmp	r0, #0
 8013968:	d0df      	beq.n	801392a <uxr_deserialize_ObjectVariant+0x56>
 801396a:	7933      	ldrb	r3, [r6, #4]
 801396c:	2b01      	cmp	r3, #1
 801396e:	d001      	beq.n	8013974 <uxr_deserialize_ObjectVariant+0xa0>
 8013970:	2b02      	cmp	r3, #2
 8013972:	d1d8      	bne.n	8013926 <uxr_deserialize_ObjectVariant+0x52>
 8013974:	68b1      	ldr	r1, [r6, #8]
 8013976:	4628      	mov	r0, r5
 8013978:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801397c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013980:	f004 bd1e 	b.w	80183c0 <ucdr_deserialize_string>
 8013984:	1d31      	adds	r1, r6, #4
 8013986:	4628      	mov	r0, r5
 8013988:	f003 fdc8 	bl	801751c <ucdr_deserialize_uint8_t>
 801398c:	4607      	mov	r7, r0
 801398e:	2800      	cmp	r0, #0
 8013990:	d0db      	beq.n	801394a <uxr_deserialize_ObjectVariant+0x76>
 8013992:	7933      	ldrb	r3, [r6, #4]
 8013994:	2b02      	cmp	r3, #2
 8013996:	d00c      	beq.n	80139b2 <uxr_deserialize_ObjectVariant+0xde>
 8013998:	2b03      	cmp	r3, #3
 801399a:	d1d6      	bne.n	801394a <uxr_deserialize_ObjectVariant+0x76>
 801399c:	f106 0308 	add.w	r3, r6, #8
 80139a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80139a4:	f106 010c 	add.w	r1, r6, #12
 80139a8:	4628      	mov	r0, r5
 80139aa:	f7fc feaf 	bl	801070c <ucdr_deserialize_sequence_uint8_t>
 80139ae:	4607      	mov	r7, r0
 80139b0:	e7cb      	b.n	801394a <uxr_deserialize_ObjectVariant+0x76>
 80139b2:	68b1      	ldr	r1, [r6, #8]
 80139b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80139b8:	4628      	mov	r0, r5
 80139ba:	f004 fd01 	bl	80183c0 <ucdr_deserialize_string>
 80139be:	4607      	mov	r7, r0
 80139c0:	e7c3      	b.n	801394a <uxr_deserialize_ObjectVariant+0x76>
 80139c2:	2204      	movs	r2, #4
 80139c4:	18b1      	adds	r1, r6, r2
 80139c6:	4628      	mov	r0, r5
 80139c8:	f003 fcfe 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 80139cc:	2202      	movs	r2, #2
 80139ce:	4604      	mov	r4, r0
 80139d0:	f106 0108 	add.w	r1, r6, #8
 80139d4:	4628      	mov	r0, r5
 80139d6:	f003 fcf7 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 80139da:	2202      	movs	r2, #2
 80139dc:	4004      	ands	r4, r0
 80139de:	f106 010a 	add.w	r1, r6, #10
 80139e2:	4628      	mov	r0, r5
 80139e4:	f003 fcf0 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 80139e8:	b2e4      	uxtb	r4, r4
 80139ea:	4603      	mov	r3, r0
 80139ec:	f106 010c 	add.w	r1, r6, #12
 80139f0:	4628      	mov	r0, r5
 80139f2:	401c      	ands	r4, r3
 80139f4:	f003 fd62 	bl	80174bc <ucdr_deserialize_bool>
 80139f8:	4004      	ands	r4, r0
 80139fa:	e794      	b.n	8013926 <uxr_deserialize_ObjectVariant+0x52>
 80139fc:	1d31      	adds	r1, r6, #4
 80139fe:	4628      	mov	r0, r5
 8013a00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013a04:	f7ff bbd0 	b.w	80131a8 <uxr_deserialize_CLIENT_Representation>
 8013a08:	68b1      	ldr	r1, [r6, #8]
 8013a0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a0e:	4628      	mov	r0, r5
 8013a10:	f004 fcd6 	bl	80183c0 <ucdr_deserialize_string>
 8013a14:	4607      	mov	r7, r0
 8013a16:	e77f      	b.n	8013918 <uxr_deserialize_ObjectVariant+0x44>
 8013a18:	f106 0308 	add.w	r3, r6, #8
 8013a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a20:	f106 010c 	add.w	r1, r6, #12
 8013a24:	4628      	mov	r0, r5
 8013a26:	f7fc fe71 	bl	801070c <ucdr_deserialize_sequence_uint8_t>
 8013a2a:	4607      	mov	r7, r0
 8013a2c:	e774      	b.n	8013918 <uxr_deserialize_ObjectVariant+0x44>
 8013a2e:	bf00      	nop

08013a30 <uxr_deserialize_BaseObjectRequest>:
 8013a30:	b570      	push	{r4, r5, r6, lr}
 8013a32:	2202      	movs	r2, #2
 8013a34:	4605      	mov	r5, r0
 8013a36:	460e      	mov	r6, r1
 8013a38:	f003 fcc6 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 8013a3c:	1cb1      	adds	r1, r6, #2
 8013a3e:	4604      	mov	r4, r0
 8013a40:	2202      	movs	r2, #2
 8013a42:	4628      	mov	r0, r5
 8013a44:	f003 fcc0 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 8013a48:	4020      	ands	r0, r4
 8013a4a:	b2c0      	uxtb	r0, r0
 8013a4c:	bd70      	pop	{r4, r5, r6, pc}
 8013a4e:	bf00      	nop

08013a50 <uxr_serialize_AGENT_ActivityInfo>:
 8013a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a54:	460e      	mov	r6, r1
 8013a56:	f9b1 1000 	ldrsh.w	r1, [r1]
 8013a5a:	4607      	mov	r7, r0
 8013a5c:	f004 fa84 	bl	8017f68 <ucdr_serialize_int16_t>
 8013a60:	6871      	ldr	r1, [r6, #4]
 8013a62:	4680      	mov	r8, r0
 8013a64:	4638      	mov	r0, r7
 8013a66:	f003 ff59 	bl	801791c <ucdr_serialize_uint32_t>
 8013a6a:	6873      	ldr	r3, [r6, #4]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d06a      	beq.n	8013b46 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 8013a70:	b318      	cbz	r0, 8013aba <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8013a72:	f106 0904 	add.w	r9, r6, #4
 8013a76:	2500      	movs	r5, #0
 8013a78:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8013a7c:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8013a80:	7a21      	ldrb	r1, [r4, #8]
 8013a82:	4638      	mov	r0, r7
 8013a84:	f003 fd34 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013a88:	2800      	cmp	r0, #0
 8013a8a:	d051      	beq.n	8013b30 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 8013a8c:	7a23      	ldrb	r3, [r4, #8]
 8013a8e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8013a92:	00c9      	lsls	r1, r1, #3
 8013a94:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8013a98:	2b03      	cmp	r3, #3
 8013a9a:	d859      	bhi.n	8013b50 <uxr_serialize_AGENT_ActivityInfo+0x100>
 8013a9c:	e8df f003 	tbb	[pc, r3]
 8013aa0:	02122436 	.word	0x02122436
 8013aa4:	4449      	add	r1, r9
 8013aa6:	4638      	mov	r0, r7
 8013aa8:	6889      	ldr	r1, [r1, #8]
 8013aaa:	f004 fc79 	bl	80183a0 <ucdr_serialize_string>
 8013aae:	6873      	ldr	r3, [r6, #4]
 8013ab0:	3501      	adds	r5, #1
 8013ab2:	429d      	cmp	r5, r3
 8013ab4:	d240      	bcs.n	8013b38 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 8013ab6:	2800      	cmp	r0, #0
 8013ab8:	d1de      	bne.n	8013a78 <uxr_serialize_AGENT_ActivityInfo+0x28>
 8013aba:	f04f 0800 	mov.w	r8, #0
 8013abe:	4640      	mov	r0, r8
 8013ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ac4:	3108      	adds	r1, #8
 8013ac6:	4449      	add	r1, r9
 8013ac8:	2210      	movs	r2, #16
 8013aca:	4638      	mov	r0, r7
 8013acc:	f003 fc18 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013ad0:	44aa      	add	sl, r5
 8013ad2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8013ad6:	4604      	mov	r4, r0
 8013ad8:	f8da 101c 	ldr.w	r1, [sl, #28]
 8013adc:	4638      	mov	r0, r7
 8013ade:	f003 ff1d 	bl	801791c <ucdr_serialize_uint32_t>
 8013ae2:	4020      	ands	r0, r4
 8013ae4:	b2c0      	uxtb	r0, r0
 8013ae6:	e7e2      	b.n	8013aae <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8013ae8:	3108      	adds	r1, #8
 8013aea:	4449      	add	r1, r9
 8013aec:	2204      	movs	r2, #4
 8013aee:	4638      	mov	r0, r7
 8013af0:	f003 fc06 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013af4:	44aa      	add	sl, r5
 8013af6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8013afa:	4604      	mov	r4, r0
 8013afc:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 8013b00:	4638      	mov	r0, r7
 8013b02:	f003 fd21 	bl	8017548 <ucdr_serialize_uint16_t>
 8013b06:	4020      	ands	r0, r4
 8013b08:	b2c0      	uxtb	r0, r0
 8013b0a:	e7d0      	b.n	8013aae <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8013b0c:	3108      	adds	r1, #8
 8013b0e:	4449      	add	r1, r9
 8013b10:	2202      	movs	r2, #2
 8013b12:	4638      	mov	r0, r7
 8013b14:	f003 fbf4 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013b18:	44aa      	add	sl, r5
 8013b1a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8013b1e:	4604      	mov	r4, r0
 8013b20:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8013b24:	4638      	mov	r0, r7
 8013b26:	f003 fce3 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013b2a:	4020      	ands	r0, r4
 8013b2c:	b2c0      	uxtb	r0, r0
 8013b2e:	e7be      	b.n	8013aae <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8013b30:	6873      	ldr	r3, [r6, #4]
 8013b32:	3501      	adds	r5, #1
 8013b34:	429d      	cmp	r5, r3
 8013b36:	d3c0      	bcc.n	8013aba <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8013b38:	ea08 0000 	and.w	r0, r8, r0
 8013b3c:	fa5f f880 	uxtb.w	r8, r0
 8013b40:	4640      	mov	r0, r8
 8013b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b46:	ea08 0800 	and.w	r8, r8, r0
 8013b4a:	fa5f f888 	uxtb.w	r8, r8
 8013b4e:	e7b6      	b.n	8013abe <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8013b50:	6873      	ldr	r3, [r6, #4]
 8013b52:	3501      	adds	r5, #1
 8013b54:	42ab      	cmp	r3, r5
 8013b56:	f104 0418 	add.w	r4, r4, #24
 8013b5a:	d891      	bhi.n	8013a80 <uxr_serialize_AGENT_ActivityInfo+0x30>
 8013b5c:	e7af      	b.n	8013abe <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8013b5e:	bf00      	nop

08013b60 <uxr_serialize_ActivityInfoVariant>:
 8013b60:	b570      	push	{r4, r5, r6, lr}
 8013b62:	460d      	mov	r5, r1
 8013b64:	7809      	ldrb	r1, [r1, #0]
 8013b66:	4606      	mov	r6, r0
 8013b68:	f003 fcc2 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013b6c:	b130      	cbz	r0, 8013b7c <uxr_serialize_ActivityInfoVariant+0x1c>
 8013b6e:	782b      	ldrb	r3, [r5, #0]
 8013b70:	2b06      	cmp	r3, #6
 8013b72:	d019      	beq.n	8013ba8 <uxr_serialize_ActivityInfoVariant+0x48>
 8013b74:	2b0d      	cmp	r3, #13
 8013b76:	d010      	beq.n	8013b9a <uxr_serialize_ActivityInfoVariant+0x3a>
 8013b78:	2b05      	cmp	r3, #5
 8013b7a:	d000      	beq.n	8013b7e <uxr_serialize_ActivityInfoVariant+0x1e>
 8013b7c:	bd70      	pop	{r4, r5, r6, pc}
 8013b7e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013b82:	4630      	mov	r0, r6
 8013b84:	f004 f9f0 	bl	8017f68 <ucdr_serialize_int16_t>
 8013b88:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013b8c:	4604      	mov	r4, r0
 8013b8e:	4630      	mov	r0, r6
 8013b90:	f004 f91a 	bl	8017dc8 <ucdr_serialize_uint64_t>
 8013b94:	4020      	ands	r0, r4
 8013b96:	b2c0      	uxtb	r0, r0
 8013b98:	bd70      	pop	{r4, r5, r6, pc}
 8013b9a:	f105 0108 	add.w	r1, r5, #8
 8013b9e:	4630      	mov	r0, r6
 8013ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ba4:	f7ff bf54 	b.w	8013a50 <uxr_serialize_AGENT_ActivityInfo>
 8013ba8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013bac:	4630      	mov	r0, r6
 8013bae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bb2:	f004 b9d9 	b.w	8017f68 <ucdr_serialize_int16_t>
 8013bb6:	bf00      	nop

08013bb8 <uxr_deserialize_BaseObjectReply>:
 8013bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bbc:	2202      	movs	r2, #2
 8013bbe:	4606      	mov	r6, r0
 8013bc0:	460f      	mov	r7, r1
 8013bc2:	f003 fc01 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 8013bc6:	2202      	movs	r2, #2
 8013bc8:	1cb9      	adds	r1, r7, #2
 8013bca:	4605      	mov	r5, r0
 8013bcc:	4630      	mov	r0, r6
 8013bce:	f003 fbfb 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 8013bd2:	1d39      	adds	r1, r7, #4
 8013bd4:	4680      	mov	r8, r0
 8013bd6:	4630      	mov	r0, r6
 8013bd8:	f003 fca0 	bl	801751c <ucdr_deserialize_uint8_t>
 8013bdc:	1d79      	adds	r1, r7, #5
 8013bde:	4604      	mov	r4, r0
 8013be0:	4630      	mov	r0, r6
 8013be2:	f003 fc9b 	bl	801751c <ucdr_deserialize_uint8_t>
 8013be6:	ea05 0508 	and.w	r5, r5, r8
 8013bea:	402c      	ands	r4, r5
 8013bec:	4020      	ands	r0, r4
 8013bee:	b2c0      	uxtb	r0, r0
 8013bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013bf4 <uxr_serialize_ReadSpecification>:
 8013bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bf8:	460e      	mov	r6, r1
 8013bfa:	7809      	ldrb	r1, [r1, #0]
 8013bfc:	4607      	mov	r7, r0
 8013bfe:	f003 fc77 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013c02:	7871      	ldrb	r1, [r6, #1]
 8013c04:	4604      	mov	r4, r0
 8013c06:	4638      	mov	r0, r7
 8013c08:	f003 fc72 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013c0c:	78b1      	ldrb	r1, [r6, #2]
 8013c0e:	4004      	ands	r4, r0
 8013c10:	4638      	mov	r0, r7
 8013c12:	f003 fc3d 	bl	8017490 <ucdr_serialize_bool>
 8013c16:	78b3      	ldrb	r3, [r6, #2]
 8013c18:	b2e4      	uxtb	r4, r4
 8013c1a:	4004      	ands	r4, r0
 8013c1c:	b94b      	cbnz	r3, 8013c32 <uxr_serialize_ReadSpecification+0x3e>
 8013c1e:	7a31      	ldrb	r1, [r6, #8]
 8013c20:	4638      	mov	r0, r7
 8013c22:	f003 fc35 	bl	8017490 <ucdr_serialize_bool>
 8013c26:	7a33      	ldrb	r3, [r6, #8]
 8013c28:	4004      	ands	r4, r0
 8013c2a:	b943      	cbnz	r3, 8013c3e <uxr_serialize_ReadSpecification+0x4a>
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c32:	6871      	ldr	r1, [r6, #4]
 8013c34:	4638      	mov	r0, r7
 8013c36:	f004 fbb3 	bl	80183a0 <ucdr_serialize_string>
 8013c3a:	4004      	ands	r4, r0
 8013c3c:	e7ef      	b.n	8013c1e <uxr_serialize_ReadSpecification+0x2a>
 8013c3e:	8971      	ldrh	r1, [r6, #10]
 8013c40:	4638      	mov	r0, r7
 8013c42:	f003 fc81 	bl	8017548 <ucdr_serialize_uint16_t>
 8013c46:	89b1      	ldrh	r1, [r6, #12]
 8013c48:	4605      	mov	r5, r0
 8013c4a:	4638      	mov	r0, r7
 8013c4c:	f003 fc7c 	bl	8017548 <ucdr_serialize_uint16_t>
 8013c50:	89f1      	ldrh	r1, [r6, #14]
 8013c52:	4005      	ands	r5, r0
 8013c54:	4638      	mov	r0, r7
 8013c56:	f003 fc77 	bl	8017548 <ucdr_serialize_uint16_t>
 8013c5a:	8a31      	ldrh	r1, [r6, #16]
 8013c5c:	4680      	mov	r8, r0
 8013c5e:	4638      	mov	r0, r7
 8013c60:	f003 fc72 	bl	8017548 <ucdr_serialize_uint16_t>
 8013c64:	b2ed      	uxtb	r5, r5
 8013c66:	4025      	ands	r5, r4
 8013c68:	ea08 0505 	and.w	r5, r8, r5
 8013c6c:	ea00 0405 	and.w	r4, r0, r5
 8013c70:	4620      	mov	r0, r4
 8013c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c76:	bf00      	nop

08013c78 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013c78:	f7ff ba3a 	b.w	80130f0 <uxr_serialize_CLIENT_Representation>

08013c7c <uxr_serialize_CREATE_Payload>:
 8013c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c7e:	2202      	movs	r2, #2
 8013c80:	4606      	mov	r6, r0
 8013c82:	460d      	mov	r5, r1
 8013c84:	f003 fb3c 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013c88:	1ca9      	adds	r1, r5, #2
 8013c8a:	4604      	mov	r4, r0
 8013c8c:	2202      	movs	r2, #2
 8013c8e:	4630      	mov	r0, r6
 8013c90:	f003 fb36 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013c94:	7929      	ldrb	r1, [r5, #4]
 8013c96:	4607      	mov	r7, r0
 8013c98:	4630      	mov	r0, r6
 8013c9a:	f003 fc29 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013c9e:	b328      	cbz	r0, 8013cec <uxr_serialize_CREATE_Payload+0x70>
 8013ca0:	792b      	ldrb	r3, [r5, #4]
 8013ca2:	403c      	ands	r4, r7
 8013ca4:	3b01      	subs	r3, #1
 8013ca6:	b2e4      	uxtb	r4, r4
 8013ca8:	2b0d      	cmp	r3, #13
 8013caa:	d81d      	bhi.n	8013ce8 <uxr_serialize_CREATE_Payload+0x6c>
 8013cac:	e8df f003 	tbb	[pc, r3]
 8013cb0:	32320753 	.word	0x32320753
 8013cb4:	07070707 	.word	0x07070707
 8013cb8:	2121211c 	.word	0x2121211c
 8013cbc:	684c      	.short	0x684c
 8013cbe:	7a29      	ldrb	r1, [r5, #8]
 8013cc0:	4630      	mov	r0, r6
 8013cc2:	f003 fc15 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013cc6:	4607      	mov	r7, r0
 8013cc8:	b130      	cbz	r0, 8013cd8 <uxr_serialize_CREATE_Payload+0x5c>
 8013cca:	7a2b      	ldrb	r3, [r5, #8]
 8013ccc:	2b02      	cmp	r3, #2
 8013cce:	d035      	beq.n	8013d3c <uxr_serialize_CREATE_Payload+0xc0>
 8013cd0:	2b03      	cmp	r3, #3
 8013cd2:	d02b      	beq.n	8013d2c <uxr_serialize_CREATE_Payload+0xb0>
 8013cd4:	2b01      	cmp	r3, #1
 8013cd6:	d031      	beq.n	8013d3c <uxr_serialize_CREATE_Payload+0xc0>
 8013cd8:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8013cdc:	4630      	mov	r0, r6
 8013cde:	2202      	movs	r2, #2
 8013ce0:	f003 fb0e 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013ce4:	4038      	ands	r0, r7
 8013ce6:	4004      	ands	r4, r0
 8013ce8:	4620      	mov	r0, r4
 8013cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cec:	2400      	movs	r4, #0
 8013cee:	4620      	mov	r0, r4
 8013cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cf2:	7a29      	ldrb	r1, [r5, #8]
 8013cf4:	4630      	mov	r0, r6
 8013cf6:	f003 fbfb 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013cfa:	2800      	cmp	r0, #0
 8013cfc:	d0f6      	beq.n	8013cec <uxr_serialize_CREATE_Payload+0x70>
 8013cfe:	7a2b      	ldrb	r3, [r5, #8]
 8013d00:	2b01      	cmp	r3, #1
 8013d02:	d001      	beq.n	8013d08 <uxr_serialize_CREATE_Payload+0x8c>
 8013d04:	2b02      	cmp	r3, #2
 8013d06:	d1ef      	bne.n	8013ce8 <uxr_serialize_CREATE_Payload+0x6c>
 8013d08:	68e9      	ldr	r1, [r5, #12]
 8013d0a:	4630      	mov	r0, r6
 8013d0c:	f004 fb48 	bl	80183a0 <ucdr_serialize_string>
 8013d10:	4004      	ands	r4, r0
 8013d12:	e7e9      	b.n	8013ce8 <uxr_serialize_CREATE_Payload+0x6c>
 8013d14:	7a29      	ldrb	r1, [r5, #8]
 8013d16:	4630      	mov	r0, r6
 8013d18:	f003 fbea 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013d1c:	4607      	mov	r7, r0
 8013d1e:	2800      	cmp	r0, #0
 8013d20:	d0da      	beq.n	8013cd8 <uxr_serialize_CREATE_Payload+0x5c>
 8013d22:	7a2b      	ldrb	r3, [r5, #8]
 8013d24:	2b02      	cmp	r3, #2
 8013d26:	d009      	beq.n	8013d3c <uxr_serialize_CREATE_Payload+0xc0>
 8013d28:	2b03      	cmp	r3, #3
 8013d2a:	d1d5      	bne.n	8013cd8 <uxr_serialize_CREATE_Payload+0x5c>
 8013d2c:	68ea      	ldr	r2, [r5, #12]
 8013d2e:	f105 0110 	add.w	r1, r5, #16
 8013d32:	4630      	mov	r0, r6
 8013d34:	f7fc fcd8 	bl	80106e8 <ucdr_serialize_sequence_uint8_t>
 8013d38:	4607      	mov	r7, r0
 8013d3a:	e7cd      	b.n	8013cd8 <uxr_serialize_CREATE_Payload+0x5c>
 8013d3c:	68e9      	ldr	r1, [r5, #12]
 8013d3e:	4630      	mov	r0, r6
 8013d40:	f004 fb2e 	bl	80183a0 <ucdr_serialize_string>
 8013d44:	4607      	mov	r7, r0
 8013d46:	e7c7      	b.n	8013cd8 <uxr_serialize_CREATE_Payload+0x5c>
 8013d48:	f105 0108 	add.w	r1, r5, #8
 8013d4c:	4630      	mov	r0, r6
 8013d4e:	f7ff fa95 	bl	801327c <uxr_serialize_AGENT_Representation>
 8013d52:	4004      	ands	r4, r0
 8013d54:	e7c8      	b.n	8013ce8 <uxr_serialize_CREATE_Payload+0x6c>
 8013d56:	7a29      	ldrb	r1, [r5, #8]
 8013d58:	4630      	mov	r0, r6
 8013d5a:	f003 fbc9 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013d5e:	4607      	mov	r7, r0
 8013d60:	b130      	cbz	r0, 8013d70 <uxr_serialize_CREATE_Payload+0xf4>
 8013d62:	7a2b      	ldrb	r3, [r5, #8]
 8013d64:	2b02      	cmp	r3, #2
 8013d66:	d012      	beq.n	8013d8e <uxr_serialize_CREATE_Payload+0x112>
 8013d68:	2b03      	cmp	r3, #3
 8013d6a:	d016      	beq.n	8013d9a <uxr_serialize_CREATE_Payload+0x11e>
 8013d6c:	2b01      	cmp	r3, #1
 8013d6e:	d00e      	beq.n	8013d8e <uxr_serialize_CREATE_Payload+0x112>
 8013d70:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8013d74:	4630      	mov	r0, r6
 8013d76:	f004 f8f7 	bl	8017f68 <ucdr_serialize_int16_t>
 8013d7a:	4038      	ands	r0, r7
 8013d7c:	4004      	ands	r4, r0
 8013d7e:	e7b3      	b.n	8013ce8 <uxr_serialize_CREATE_Payload+0x6c>
 8013d80:	f105 0108 	add.w	r1, r5, #8
 8013d84:	4630      	mov	r0, r6
 8013d86:	f7ff f9b3 	bl	80130f0 <uxr_serialize_CLIENT_Representation>
 8013d8a:	4004      	ands	r4, r0
 8013d8c:	e7ac      	b.n	8013ce8 <uxr_serialize_CREATE_Payload+0x6c>
 8013d8e:	68e9      	ldr	r1, [r5, #12]
 8013d90:	4630      	mov	r0, r6
 8013d92:	f004 fb05 	bl	80183a0 <ucdr_serialize_string>
 8013d96:	4607      	mov	r7, r0
 8013d98:	e7ea      	b.n	8013d70 <uxr_serialize_CREATE_Payload+0xf4>
 8013d9a:	68ea      	ldr	r2, [r5, #12]
 8013d9c:	f105 0110 	add.w	r1, r5, #16
 8013da0:	4630      	mov	r0, r6
 8013da2:	f7fc fca1 	bl	80106e8 <ucdr_serialize_sequence_uint8_t>
 8013da6:	4607      	mov	r7, r0
 8013da8:	e7e2      	b.n	8013d70 <uxr_serialize_CREATE_Payload+0xf4>
 8013daa:	bf00      	nop

08013dac <uxr_deserialize_GET_INFO_Payload>:
 8013dac:	b570      	push	{r4, r5, r6, lr}
 8013dae:	2202      	movs	r2, #2
 8013db0:	4605      	mov	r5, r0
 8013db2:	460e      	mov	r6, r1
 8013db4:	f003 fb08 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 8013db8:	1cb1      	adds	r1, r6, #2
 8013dba:	2202      	movs	r2, #2
 8013dbc:	4604      	mov	r4, r0
 8013dbe:	4628      	mov	r0, r5
 8013dc0:	f003 fb02 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 8013dc4:	1d31      	adds	r1, r6, #4
 8013dc6:	4004      	ands	r4, r0
 8013dc8:	4628      	mov	r0, r5
 8013dca:	f003 fed7 	bl	8017b7c <ucdr_deserialize_uint32_t>
 8013dce:	b2e4      	uxtb	r4, r4
 8013dd0:	4020      	ands	r0, r4
 8013dd2:	bd70      	pop	{r4, r5, r6, pc}

08013dd4 <uxr_serialize_DELETE_Payload>:
 8013dd4:	b570      	push	{r4, r5, r6, lr}
 8013dd6:	2202      	movs	r2, #2
 8013dd8:	4605      	mov	r5, r0
 8013dda:	460e      	mov	r6, r1
 8013ddc:	f003 fa90 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013de0:	1cb1      	adds	r1, r6, #2
 8013de2:	4604      	mov	r4, r0
 8013de4:	2202      	movs	r2, #2
 8013de6:	4628      	mov	r0, r5
 8013de8:	f003 fa8a 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013dec:	4020      	ands	r0, r4
 8013dee:	b2c0      	uxtb	r0, r0
 8013df0:	bd70      	pop	{r4, r5, r6, pc}
 8013df2:	bf00      	nop

08013df4 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013df8:	4606      	mov	r6, r0
 8013dfa:	460f      	mov	r7, r1
 8013dfc:	f003 fb8e 	bl	801751c <ucdr_deserialize_uint8_t>
 8013e00:	1c79      	adds	r1, r7, #1
 8013e02:	4605      	mov	r5, r0
 8013e04:	4630      	mov	r0, r6
 8013e06:	f003 fb89 	bl	801751c <ucdr_deserialize_uint8_t>
 8013e0a:	1d39      	adds	r1, r7, #4
 8013e0c:	4681      	mov	r9, r0
 8013e0e:	2204      	movs	r2, #4
 8013e10:	4630      	mov	r0, r6
 8013e12:	f003 fad9 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 8013e16:	f107 0108 	add.w	r1, r7, #8
 8013e1a:	4604      	mov	r4, r0
 8013e1c:	2202      	movs	r2, #2
 8013e1e:	4630      	mov	r0, r6
 8013e20:	f003 fad2 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 8013e24:	f107 010a 	add.w	r1, r7, #10
 8013e28:	4680      	mov	r8, r0
 8013e2a:	2202      	movs	r2, #2
 8013e2c:	4630      	mov	r0, r6
 8013e2e:	f003 facb 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 8013e32:	ea05 0509 	and.w	r5, r5, r9
 8013e36:	b2ed      	uxtb	r5, r5
 8013e38:	402c      	ands	r4, r5
 8013e3a:	f107 010c 	add.w	r1, r7, #12
 8013e3e:	4605      	mov	r5, r0
 8013e40:	4630      	mov	r0, r6
 8013e42:	f003 fb3b 	bl	80174bc <ucdr_deserialize_bool>
 8013e46:	ea08 0404 	and.w	r4, r8, r4
 8013e4a:	4025      	ands	r5, r4
 8013e4c:	4028      	ands	r0, r5
 8013e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e52:	bf00      	nop

08013e54 <uxr_deserialize_STATUS_Payload>:
 8013e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e58:	2202      	movs	r2, #2
 8013e5a:	4606      	mov	r6, r0
 8013e5c:	460f      	mov	r7, r1
 8013e5e:	f003 fab3 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 8013e62:	2202      	movs	r2, #2
 8013e64:	1cb9      	adds	r1, r7, #2
 8013e66:	4605      	mov	r5, r0
 8013e68:	4630      	mov	r0, r6
 8013e6a:	f003 faad 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 8013e6e:	1d39      	adds	r1, r7, #4
 8013e70:	4680      	mov	r8, r0
 8013e72:	4630      	mov	r0, r6
 8013e74:	f003 fb52 	bl	801751c <ucdr_deserialize_uint8_t>
 8013e78:	1d79      	adds	r1, r7, #5
 8013e7a:	4604      	mov	r4, r0
 8013e7c:	4630      	mov	r0, r6
 8013e7e:	f003 fb4d 	bl	801751c <ucdr_deserialize_uint8_t>
 8013e82:	ea05 0508 	and.w	r5, r5, r8
 8013e86:	402c      	ands	r4, r5
 8013e88:	4020      	ands	r0, r4
 8013e8a:	b2c0      	uxtb	r0, r0
 8013e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013e90 <uxr_serialize_INFO_Payload>:
 8013e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e94:	2202      	movs	r2, #2
 8013e96:	460c      	mov	r4, r1
 8013e98:	4605      	mov	r5, r0
 8013e9a:	f003 fa31 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013e9e:	2202      	movs	r2, #2
 8013ea0:	4680      	mov	r8, r0
 8013ea2:	1ca1      	adds	r1, r4, #2
 8013ea4:	4628      	mov	r0, r5
 8013ea6:	f003 fa2b 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013eaa:	7921      	ldrb	r1, [r4, #4]
 8013eac:	4607      	mov	r7, r0
 8013eae:	4628      	mov	r0, r5
 8013eb0:	f003 fb1e 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013eb4:	7961      	ldrb	r1, [r4, #5]
 8013eb6:	4606      	mov	r6, r0
 8013eb8:	4628      	mov	r0, r5
 8013eba:	f003 fb19 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013ebe:	ea08 0807 	and.w	r8, r8, r7
 8013ec2:	ea06 0608 	and.w	r6, r6, r8
 8013ec6:	4006      	ands	r6, r0
 8013ec8:	7a21      	ldrb	r1, [r4, #8]
 8013eca:	4628      	mov	r0, r5
 8013ecc:	f003 fae0 	bl	8017490 <ucdr_serialize_bool>
 8013ed0:	7a23      	ldrb	r3, [r4, #8]
 8013ed2:	b2f7      	uxtb	r7, r6
 8013ed4:	4606      	mov	r6, r0
 8013ed6:	b96b      	cbnz	r3, 8013ef4 <uxr_serialize_INFO_Payload+0x64>
 8013ed8:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013edc:	4628      	mov	r0, r5
 8013ede:	f003 fad7 	bl	8017490 <ucdr_serialize_bool>
 8013ee2:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8013ee6:	4030      	ands	r0, r6
 8013ee8:	b2c6      	uxtb	r6, r0
 8013eea:	b983      	cbnz	r3, 8013f0e <uxr_serialize_INFO_Payload+0x7e>
 8013eec:	ea06 0007 	and.w	r0, r6, r7
 8013ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ef4:	7b21      	ldrb	r1, [r4, #12]
 8013ef6:	4628      	mov	r0, r5
 8013ef8:	f003 fafa 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013efc:	b188      	cbz	r0, 8013f22 <uxr_serialize_INFO_Payload+0x92>
 8013efe:	f104 010c 	add.w	r1, r4, #12
 8013f02:	4628      	mov	r0, r5
 8013f04:	f7ff fa06 	bl	8013314 <uxr_serialize_ObjectVariant.part.0>
 8013f08:	4030      	ands	r0, r6
 8013f0a:	b2c6      	uxtb	r6, r0
 8013f0c:	e7e4      	b.n	8013ed8 <uxr_serialize_INFO_Payload+0x48>
 8013f0e:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8013f12:	4628      	mov	r0, r5
 8013f14:	f7ff fe24 	bl	8013b60 <uxr_serialize_ActivityInfoVariant>
 8013f18:	4006      	ands	r6, r0
 8013f1a:	ea06 0007 	and.w	r0, r6, r7
 8013f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f22:	4606      	mov	r6, r0
 8013f24:	e7d8      	b.n	8013ed8 <uxr_serialize_INFO_Payload+0x48>
 8013f26:	bf00      	nop

08013f28 <uxr_serialize_READ_DATA_Payload>:
 8013f28:	b570      	push	{r4, r5, r6, lr}
 8013f2a:	2202      	movs	r2, #2
 8013f2c:	4605      	mov	r5, r0
 8013f2e:	460e      	mov	r6, r1
 8013f30:	f003 f9e6 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013f34:	1cb1      	adds	r1, r6, #2
 8013f36:	2202      	movs	r2, #2
 8013f38:	4604      	mov	r4, r0
 8013f3a:	4628      	mov	r0, r5
 8013f3c:	f003 f9e0 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013f40:	1d31      	adds	r1, r6, #4
 8013f42:	4004      	ands	r4, r0
 8013f44:	4628      	mov	r0, r5
 8013f46:	f7ff fe55 	bl	8013bf4 <uxr_serialize_ReadSpecification>
 8013f4a:	b2e4      	uxtb	r4, r4
 8013f4c:	4020      	ands	r0, r4
 8013f4e:	bd70      	pop	{r4, r5, r6, pc}

08013f50 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013f50:	b570      	push	{r4, r5, r6, lr}
 8013f52:	2202      	movs	r2, #2
 8013f54:	4605      	mov	r5, r0
 8013f56:	460e      	mov	r6, r1
 8013f58:	f003 f9d2 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013f5c:	1cb1      	adds	r1, r6, #2
 8013f5e:	4604      	mov	r4, r0
 8013f60:	2202      	movs	r2, #2
 8013f62:	4628      	mov	r0, r5
 8013f64:	f003 f9cc 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013f68:	4020      	ands	r0, r4
 8013f6a:	b2c0      	uxtb	r0, r0
 8013f6c:	bd70      	pop	{r4, r5, r6, pc}
 8013f6e:	bf00      	nop

08013f70 <uxr_serialize_ACKNACK_Payload>:
 8013f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f72:	460f      	mov	r7, r1
 8013f74:	460e      	mov	r6, r1
 8013f76:	f837 1b02 	ldrh.w	r1, [r7], #2
 8013f7a:	4605      	mov	r5, r0
 8013f7c:	f003 fae4 	bl	8017548 <ucdr_serialize_uint16_t>
 8013f80:	4639      	mov	r1, r7
 8013f82:	2202      	movs	r2, #2
 8013f84:	4604      	mov	r4, r0
 8013f86:	4628      	mov	r0, r5
 8013f88:	f003 f9ba 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8013f8c:	7931      	ldrb	r1, [r6, #4]
 8013f8e:	4004      	ands	r4, r0
 8013f90:	4628      	mov	r0, r5
 8013f92:	f003 faad 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013f96:	b2e4      	uxtb	r4, r4
 8013f98:	4020      	ands	r0, r4
 8013f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013f9c <uxr_deserialize_ACKNACK_Payload>:
 8013f9c:	b570      	push	{r4, r5, r6, lr}
 8013f9e:	4605      	mov	r5, r0
 8013fa0:	460e      	mov	r6, r1
 8013fa2:	f003 fbd1 	bl	8017748 <ucdr_deserialize_uint16_t>
 8013fa6:	1cb1      	adds	r1, r6, #2
 8013fa8:	2202      	movs	r2, #2
 8013faa:	4604      	mov	r4, r0
 8013fac:	4628      	mov	r0, r5
 8013fae:	f003 fa0b 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 8013fb2:	1d31      	adds	r1, r6, #4
 8013fb4:	4004      	ands	r4, r0
 8013fb6:	4628      	mov	r0, r5
 8013fb8:	f003 fab0 	bl	801751c <ucdr_deserialize_uint8_t>
 8013fbc:	b2e4      	uxtb	r4, r4
 8013fbe:	4020      	ands	r0, r4
 8013fc0:	bd70      	pop	{r4, r5, r6, pc}
 8013fc2:	bf00      	nop

08013fc4 <uxr_serialize_HEARTBEAT_Payload>:
 8013fc4:	b570      	push	{r4, r5, r6, lr}
 8013fc6:	460d      	mov	r5, r1
 8013fc8:	8809      	ldrh	r1, [r1, #0]
 8013fca:	4606      	mov	r6, r0
 8013fcc:	f003 fabc 	bl	8017548 <ucdr_serialize_uint16_t>
 8013fd0:	8869      	ldrh	r1, [r5, #2]
 8013fd2:	4604      	mov	r4, r0
 8013fd4:	4630      	mov	r0, r6
 8013fd6:	f003 fab7 	bl	8017548 <ucdr_serialize_uint16_t>
 8013fda:	7929      	ldrb	r1, [r5, #4]
 8013fdc:	4004      	ands	r4, r0
 8013fde:	4630      	mov	r0, r6
 8013fe0:	f003 fa86 	bl	80174f0 <ucdr_serialize_uint8_t>
 8013fe4:	b2e4      	uxtb	r4, r4
 8013fe6:	4020      	ands	r0, r4
 8013fe8:	bd70      	pop	{r4, r5, r6, pc}
 8013fea:	bf00      	nop

08013fec <uxr_deserialize_HEARTBEAT_Payload>:
 8013fec:	b570      	push	{r4, r5, r6, lr}
 8013fee:	4605      	mov	r5, r0
 8013ff0:	460e      	mov	r6, r1
 8013ff2:	f003 fba9 	bl	8017748 <ucdr_deserialize_uint16_t>
 8013ff6:	1cb1      	adds	r1, r6, #2
 8013ff8:	4604      	mov	r4, r0
 8013ffa:	4628      	mov	r0, r5
 8013ffc:	f003 fba4 	bl	8017748 <ucdr_deserialize_uint16_t>
 8014000:	1d31      	adds	r1, r6, #4
 8014002:	4004      	ands	r4, r0
 8014004:	4628      	mov	r0, r5
 8014006:	f003 fa89 	bl	801751c <ucdr_deserialize_uint8_t>
 801400a:	b2e4      	uxtb	r4, r4
 801400c:	4020      	ands	r0, r4
 801400e:	bd70      	pop	{r4, r5, r6, pc}

08014010 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8014010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014014:	4605      	mov	r5, r0
 8014016:	460e      	mov	r6, r1
 8014018:	f004 f932 	bl	8018280 <ucdr_deserialize_int32_t>
 801401c:	1d31      	adds	r1, r6, #4
 801401e:	4607      	mov	r7, r0
 8014020:	4628      	mov	r0, r5
 8014022:	f003 fdab 	bl	8017b7c <ucdr_deserialize_uint32_t>
 8014026:	f106 0108 	add.w	r1, r6, #8
 801402a:	4680      	mov	r8, r0
 801402c:	4628      	mov	r0, r5
 801402e:	f004 f927 	bl	8018280 <ucdr_deserialize_int32_t>
 8014032:	f106 010c 	add.w	r1, r6, #12
 8014036:	4604      	mov	r4, r0
 8014038:	4628      	mov	r0, r5
 801403a:	f003 fd9f 	bl	8017b7c <ucdr_deserialize_uint32_t>
 801403e:	ea07 0708 	and.w	r7, r7, r8
 8014042:	403c      	ands	r4, r7
 8014044:	f106 0110 	add.w	r1, r6, #16
 8014048:	4004      	ands	r4, r0
 801404a:	4628      	mov	r0, r5
 801404c:	f004 f918 	bl	8018280 <ucdr_deserialize_int32_t>
 8014050:	f106 0114 	add.w	r1, r6, #20
 8014054:	4603      	mov	r3, r0
 8014056:	4628      	mov	r0, r5
 8014058:	461d      	mov	r5, r3
 801405a:	f003 fd8f 	bl	8017b7c <ucdr_deserialize_uint32_t>
 801405e:	b2e4      	uxtb	r4, r4
 8014060:	402c      	ands	r4, r5
 8014062:	4020      	ands	r0, r4
 8014064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014068 <uxr_serialize_SampleIdentity>:
 8014068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801406c:	220c      	movs	r2, #12
 801406e:	4604      	mov	r4, r0
 8014070:	460d      	mov	r5, r1
 8014072:	f003 f945 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8014076:	2203      	movs	r2, #3
 8014078:	f105 010c 	add.w	r1, r5, #12
 801407c:	4607      	mov	r7, r0
 801407e:	4620      	mov	r0, r4
 8014080:	f003 f93e 	bl	8017300 <ucdr_serialize_array_uint8_t>
 8014084:	7be9      	ldrb	r1, [r5, #15]
 8014086:	4680      	mov	r8, r0
 8014088:	4620      	mov	r0, r4
 801408a:	f003 fa31 	bl	80174f0 <ucdr_serialize_uint8_t>
 801408e:	6929      	ldr	r1, [r5, #16]
 8014090:	4606      	mov	r6, r0
 8014092:	4620      	mov	r0, r4
 8014094:	f004 f85c 	bl	8018150 <ucdr_serialize_int32_t>
 8014098:	6969      	ldr	r1, [r5, #20]
 801409a:	4603      	mov	r3, r0
 801409c:	4620      	mov	r0, r4
 801409e:	ea07 0708 	and.w	r7, r7, r8
 80140a2:	461c      	mov	r4, r3
 80140a4:	f003 fc3a 	bl	801791c <ucdr_serialize_uint32_t>
 80140a8:	403e      	ands	r6, r7
 80140aa:	4034      	ands	r4, r6
 80140ac:	4020      	ands	r0, r4
 80140ae:	b2c0      	uxtb	r0, r0
 80140b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080140b4 <uxr_deserialize_SampleIdentity>:
 80140b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140b8:	220c      	movs	r2, #12
 80140ba:	4604      	mov	r4, r0
 80140bc:	460d      	mov	r5, r1
 80140be:	f003 f983 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 80140c2:	2203      	movs	r2, #3
 80140c4:	f105 010c 	add.w	r1, r5, #12
 80140c8:	4607      	mov	r7, r0
 80140ca:	4620      	mov	r0, r4
 80140cc:	f003 f97c 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 80140d0:	f105 010f 	add.w	r1, r5, #15
 80140d4:	4680      	mov	r8, r0
 80140d6:	4620      	mov	r0, r4
 80140d8:	f003 fa20 	bl	801751c <ucdr_deserialize_uint8_t>
 80140dc:	f105 0110 	add.w	r1, r5, #16
 80140e0:	4606      	mov	r6, r0
 80140e2:	4620      	mov	r0, r4
 80140e4:	f004 f8cc 	bl	8018280 <ucdr_deserialize_int32_t>
 80140e8:	f105 0114 	add.w	r1, r5, #20
 80140ec:	4603      	mov	r3, r0
 80140ee:	4620      	mov	r0, r4
 80140f0:	ea07 0708 	and.w	r7, r7, r8
 80140f4:	461c      	mov	r4, r3
 80140f6:	f003 fd41 	bl	8017b7c <ucdr_deserialize_uint32_t>
 80140fa:	403e      	ands	r6, r7
 80140fc:	4034      	ands	r4, r6
 80140fe:	4020      	ands	r0, r4
 8014100:	b2c0      	uxtb	r0, r0
 8014102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014106:	bf00      	nop

08014108 <rcl_client_get_rmw_handle>:
 8014108:	b110      	cbz	r0, 8014110 <rcl_client_get_rmw_handle+0x8>
 801410a:	6800      	ldr	r0, [r0, #0]
 801410c:	b100      	cbz	r0, 8014110 <rcl_client_get_rmw_handle+0x8>
 801410e:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014110:	4770      	bx	lr
 8014112:	bf00      	nop

08014114 <rcl_take_response>:
 8014114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014116:	460e      	mov	r6, r1
 8014118:	460c      	mov	r4, r1
 801411a:	4607      	mov	r7, r0
 801411c:	4694      	mov	ip, r2
 801411e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014120:	b08d      	sub	sp, #52	@ 0x34
 8014122:	ad06      	add	r5, sp, #24
 8014124:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014126:	e896 0003 	ldmia.w	r6, {r0, r1}
 801412a:	e885 0003 	stmia.w	r5, {r0, r1}
 801412e:	b337      	cbz	r7, 801417e <rcl_take_response+0x6a>
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	b323      	cbz	r3, 801417e <rcl_take_response+0x6a>
 8014134:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014136:	b310      	cbz	r0, 801417e <rcl_take_response+0x6a>
 8014138:	4662      	mov	r2, ip
 801413a:	b31a      	cbz	r2, 8014184 <rcl_take_response+0x70>
 801413c:	2300      	movs	r3, #0
 801413e:	2600      	movs	r6, #0
 8014140:	2700      	movs	r7, #0
 8014142:	f88d 3007 	strb.w	r3, [sp, #7]
 8014146:	a902      	add	r1, sp, #8
 8014148:	f10d 0307 	add.w	r3, sp, #7
 801414c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014150:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014154:	f002 fe24 	bl	8016da0 <rmw_take_response>
 8014158:	4606      	mov	r6, r0
 801415a:	b9a8      	cbnz	r0, 8014188 <rcl_take_response+0x74>
 801415c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014160:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8014164:	2a00      	cmp	r2, #0
 8014166:	bf08      	it	eq
 8014168:	461e      	moveq	r6, r3
 801416a:	ad06      	add	r5, sp, #24
 801416c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801416e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014170:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014174:	e884 0003 	stmia.w	r4, {r0, r1}
 8014178:	4630      	mov	r0, r6
 801417a:	b00d      	add	sp, #52	@ 0x34
 801417c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801417e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8014182:	e7f2      	b.n	801416a <rcl_take_response+0x56>
 8014184:	260b      	movs	r6, #11
 8014186:	e7f0      	b.n	801416a <rcl_take_response+0x56>
 8014188:	2601      	movs	r6, #1
 801418a:	e7ee      	b.n	801416a <rcl_take_response+0x56>

0801418c <rcl_convert_rmw_ret_to_rcl_ret>:
 801418c:	280b      	cmp	r0, #11
 801418e:	dc0d      	bgt.n	80141ac <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8014190:	2800      	cmp	r0, #0
 8014192:	db09      	blt.n	80141a8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014194:	280b      	cmp	r0, #11
 8014196:	d807      	bhi.n	80141a8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014198:	e8df f000 	tbb	[pc, r0]
 801419c:	07060607 	.word	0x07060607
 80141a0:	06060606 	.word	0x06060606
 80141a4:	07070606 	.word	0x07070606
 80141a8:	2001      	movs	r0, #1
 80141aa:	4770      	bx	lr
 80141ac:	28cb      	cmp	r0, #203	@ 0xcb
 80141ae:	bf18      	it	ne
 80141b0:	2001      	movne	r0, #1
 80141b2:	4770      	bx	lr

080141b4 <rcl_get_zero_initialized_context>:
 80141b4:	4a03      	ldr	r2, [pc, #12]	@ (80141c4 <rcl_get_zero_initialized_context+0x10>)
 80141b6:	4603      	mov	r3, r0
 80141b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80141bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80141c0:	4618      	mov	r0, r3
 80141c2:	4770      	bx	lr
 80141c4:	0801e288 	.word	0x0801e288

080141c8 <rcl_context_is_valid>:
 80141c8:	b118      	cbz	r0, 80141d2 <rcl_context_is_valid+0xa>
 80141ca:	6840      	ldr	r0, [r0, #4]
 80141cc:	3800      	subs	r0, #0
 80141ce:	bf18      	it	ne
 80141d0:	2001      	movne	r0, #1
 80141d2:	4770      	bx	lr

080141d4 <__cleanup_context>:
 80141d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141d8:	4606      	mov	r6, r0
 80141da:	6800      	ldr	r0, [r0, #0]
 80141dc:	2300      	movs	r3, #0
 80141de:	6073      	str	r3, [r6, #4]
 80141e0:	2800      	cmp	r0, #0
 80141e2:	d04d      	beq.n	8014280 <__cleanup_context+0xac>
 80141e4:	6947      	ldr	r7, [r0, #20]
 80141e6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80141ea:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80141ee:	b137      	cbz	r7, 80141fe <__cleanup_context+0x2a>
 80141f0:	3014      	adds	r0, #20
 80141f2:	f7f9 fe35 	bl	800de60 <rcl_init_options_fini>
 80141f6:	4607      	mov	r7, r0
 80141f8:	2800      	cmp	r0, #0
 80141fa:	d148      	bne.n	801428e <__cleanup_context+0xba>
 80141fc:	6830      	ldr	r0, [r6, #0]
 80141fe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014200:	b143      	cbz	r3, 8014214 <__cleanup_context+0x40>
 8014202:	3028      	adds	r0, #40	@ 0x28
 8014204:	f7fb f972 	bl	800f4ec <rmw_context_fini>
 8014208:	b118      	cbz	r0, 8014212 <__cleanup_context+0x3e>
 801420a:	2f00      	cmp	r7, #0
 801420c:	d042      	beq.n	8014294 <__cleanup_context+0xc0>
 801420e:	f7fa fd11 	bl	800ec34 <rcutils_reset_error>
 8014212:	6830      	ldr	r0, [r6, #0]
 8014214:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8014218:	f1bc 0f00 	cmp.w	ip, #0
 801421c:	d01c      	beq.n	8014258 <__cleanup_context+0x84>
 801421e:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8014222:	2a01      	cmp	r2, #1
 8014224:	f173 0100 	sbcs.w	r1, r3, #0
 8014228:	db12      	blt.n	8014250 <__cleanup_context+0x7c>
 801422a:	2400      	movs	r4, #0
 801422c:	2500      	movs	r5, #0
 801422e:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 8014232:	4649      	mov	r1, r9
 8014234:	b1c0      	cbz	r0, 8014268 <__cleanup_context+0x94>
 8014236:	47c0      	blx	r8
 8014238:	6831      	ldr	r1, [r6, #0]
 801423a:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 801423e:	3401      	adds	r4, #1
 8014240:	f145 0500 	adc.w	r5, r5, #0
 8014244:	4294      	cmp	r4, r2
 8014246:	f8d1 c020 	ldr.w	ip, [r1, #32]
 801424a:	eb75 0103 	sbcs.w	r1, r5, r3
 801424e:	dbee      	blt.n	801422e <__cleanup_context+0x5a>
 8014250:	4660      	mov	r0, ip
 8014252:	4649      	mov	r1, r9
 8014254:	47c0      	blx	r8
 8014256:	6830      	ldr	r0, [r6, #0]
 8014258:	4649      	mov	r1, r9
 801425a:	47c0      	blx	r8
 801425c:	2300      	movs	r3, #0
 801425e:	e9c6 3300 	strd	r3, r3, [r6]
 8014262:	4638      	mov	r0, r7
 8014264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014268:	3401      	adds	r4, #1
 801426a:	f145 0500 	adc.w	r5, r5, #0
 801426e:	4294      	cmp	r4, r2
 8014270:	eb75 0103 	sbcs.w	r1, r5, r3
 8014274:	dbdb      	blt.n	801422e <__cleanup_context+0x5a>
 8014276:	4660      	mov	r0, ip
 8014278:	4649      	mov	r1, r9
 801427a:	47c0      	blx	r8
 801427c:	6830      	ldr	r0, [r6, #0]
 801427e:	e7eb      	b.n	8014258 <__cleanup_context+0x84>
 8014280:	4607      	mov	r7, r0
 8014282:	2300      	movs	r3, #0
 8014284:	e9c6 3300 	strd	r3, r3, [r6]
 8014288:	4638      	mov	r0, r7
 801428a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801428e:	f7fa fcd1 	bl	800ec34 <rcutils_reset_error>
 8014292:	e7b3      	b.n	80141fc <__cleanup_context+0x28>
 8014294:	f7ff ff7a 	bl	801418c <rcl_convert_rmw_ret_to_rcl_ret>
 8014298:	4607      	mov	r7, r0
 801429a:	e7b8      	b.n	801420e <__cleanup_context+0x3a>

0801429c <rcl_expand_topic_name>:
 801429c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142a0:	b08b      	sub	sp, #44	@ 0x2c
 80142a2:	9306      	str	r3, [sp, #24]
 80142a4:	2800      	cmp	r0, #0
 80142a6:	f000 80d2 	beq.w	801444e <rcl_expand_topic_name+0x1b2>
 80142aa:	460e      	mov	r6, r1
 80142ac:	2900      	cmp	r1, #0
 80142ae:	f000 80ce 	beq.w	801444e <rcl_expand_topic_name+0x1b2>
 80142b2:	4617      	mov	r7, r2
 80142b4:	2a00      	cmp	r2, #0
 80142b6:	f000 80ca 	beq.w	801444e <rcl_expand_topic_name+0x1b2>
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	f000 80c7 	beq.w	801444e <rcl_expand_topic_name+0x1b2>
 80142c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	f000 80c3 	beq.w	801444e <rcl_expand_topic_name+0x1b2>
 80142c8:	a909      	add	r1, sp, #36	@ 0x24
 80142ca:	2200      	movs	r2, #0
 80142cc:	4680      	mov	r8, r0
 80142ce:	f001 f8f5 	bl	80154bc <rcl_validate_topic_name>
 80142d2:	4604      	mov	r4, r0
 80142d4:	2800      	cmp	r0, #0
 80142d6:	f040 80b6 	bne.w	8014446 <rcl_expand_topic_name+0x1aa>
 80142da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80142dc:	2b00      	cmp	r3, #0
 80142de:	f040 80bf 	bne.w	8014460 <rcl_expand_topic_name+0x1c4>
 80142e2:	4602      	mov	r2, r0
 80142e4:	a909      	add	r1, sp, #36	@ 0x24
 80142e6:	4630      	mov	r0, r6
 80142e8:	f002 fa6a 	bl	80167c0 <rmw_validate_node_name>
 80142ec:	2800      	cmp	r0, #0
 80142ee:	f040 80b3 	bne.w	8014458 <rcl_expand_topic_name+0x1bc>
 80142f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80142f4:	2a00      	cmp	r2, #0
 80142f6:	f040 80b8 	bne.w	801446a <rcl_expand_topic_name+0x1ce>
 80142fa:	a909      	add	r1, sp, #36	@ 0x24
 80142fc:	4638      	mov	r0, r7
 80142fe:	f002 fa41 	bl	8016784 <rmw_validate_namespace>
 8014302:	2800      	cmp	r0, #0
 8014304:	f040 80a8 	bne.w	8014458 <rcl_expand_topic_name+0x1bc>
 8014308:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801430a:	2c00      	cmp	r4, #0
 801430c:	f040 80f6 	bne.w	80144fc <rcl_expand_topic_name+0x260>
 8014310:	217b      	movs	r1, #123	@ 0x7b
 8014312:	4640      	mov	r0, r8
 8014314:	f006 fa06 	bl	801a724 <strchr>
 8014318:	f898 3000 	ldrb.w	r3, [r8]
 801431c:	2b2f      	cmp	r3, #47	@ 0x2f
 801431e:	4605      	mov	r5, r0
 8014320:	f000 80c4 	beq.w	80144ac <rcl_expand_topic_name+0x210>
 8014324:	2b7e      	cmp	r3, #126	@ 0x7e
 8014326:	d16f      	bne.n	8014408 <rcl_expand_topic_name+0x16c>
 8014328:	4638      	mov	r0, r7
 801432a:	f7eb ffb9 	bl	80002a0 <strlen>
 801432e:	4b87      	ldr	r3, [pc, #540]	@ (801454c <rcl_expand_topic_name+0x2b0>)
 8014330:	4987      	ldr	r1, [pc, #540]	@ (8014550 <rcl_expand_topic_name+0x2b4>)
 8014332:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8014334:	9604      	str	r6, [sp, #16]
 8014336:	2801      	cmp	r0, #1
 8014338:	bf0c      	ite	eq
 801433a:	4618      	moveq	r0, r3
 801433c:	4608      	movne	r0, r1
 801433e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014342:	e9cd 2300 	strd	r2, r3, [sp]
 8014346:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801434a:	f108 0101 	add.w	r1, r8, #1
 801434e:	9105      	str	r1, [sp, #20]
 8014350:	ab14      	add	r3, sp, #80	@ 0x50
 8014352:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014354:	f002 f842 	bl	80163dc <rcutils_format_string_limit>
 8014358:	4682      	mov	sl, r0
 801435a:	2800      	cmp	r0, #0
 801435c:	f000 80d0 	beq.w	8014500 <rcl_expand_topic_name+0x264>
 8014360:	2d00      	cmp	r5, #0
 8014362:	f000 80aa 	beq.w	80144ba <rcl_expand_topic_name+0x21e>
 8014366:	217b      	movs	r1, #123	@ 0x7b
 8014368:	f006 f9dc 	bl	801a724 <strchr>
 801436c:	46d1      	mov	r9, sl
 801436e:	4605      	mov	r5, r0
 8014370:	9407      	str	r4, [sp, #28]
 8014372:	46d3      	mov	fp, sl
 8014374:	464c      	mov	r4, r9
 8014376:	2d00      	cmp	r5, #0
 8014378:	f000 80c7 	beq.w	801450a <rcl_expand_topic_name+0x26e>
 801437c:	217d      	movs	r1, #125	@ 0x7d
 801437e:	4620      	mov	r0, r4
 8014380:	f006 f9d0 	bl	801a724 <strchr>
 8014384:	eba0 0905 	sub.w	r9, r0, r5
 8014388:	f109 0a01 	add.w	sl, r9, #1
 801438c:	4871      	ldr	r0, [pc, #452]	@ (8014554 <rcl_expand_topic_name+0x2b8>)
 801438e:	4652      	mov	r2, sl
 8014390:	4629      	mov	r1, r5
 8014392:	f006 f9d4 	bl	801a73e <strncmp>
 8014396:	2800      	cmp	r0, #0
 8014398:	f000 808d 	beq.w	80144b6 <rcl_expand_topic_name+0x21a>
 801439c:	486e      	ldr	r0, [pc, #440]	@ (8014558 <rcl_expand_topic_name+0x2bc>)
 801439e:	4652      	mov	r2, sl
 80143a0:	4629      	mov	r1, r5
 80143a2:	f006 f9cc 	bl	801a73e <strncmp>
 80143a6:	b130      	cbz	r0, 80143b6 <rcl_expand_topic_name+0x11a>
 80143a8:	486c      	ldr	r0, [pc, #432]	@ (801455c <rcl_expand_topic_name+0x2c0>)
 80143aa:	4652      	mov	r2, sl
 80143ac:	4629      	mov	r1, r5
 80143ae:	f006 f9c6 	bl	801a73e <strncmp>
 80143b2:	2800      	cmp	r0, #0
 80143b4:	d15b      	bne.n	801446e <rcl_expand_topic_name+0x1d2>
 80143b6:	46b9      	mov	r9, r7
 80143b8:	ab16      	add	r3, sp, #88	@ 0x58
 80143ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80143be:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80143c2:	ab14      	add	r3, sp, #80	@ 0x50
 80143c4:	4628      	mov	r0, r5
 80143c6:	cb0c      	ldmia	r3, {r2, r3}
 80143c8:	4651      	mov	r1, sl
 80143ca:	f002 f953 	bl	8016674 <rcutils_strndup>
 80143ce:	4605      	mov	r5, r0
 80143d0:	2800      	cmp	r0, #0
 80143d2:	f000 80a4 	beq.w	801451e <rcl_expand_topic_name+0x282>
 80143d6:	464a      	mov	r2, r9
 80143d8:	4620      	mov	r0, r4
 80143da:	ab14      	add	r3, sp, #80	@ 0x50
 80143dc:	4629      	mov	r1, r5
 80143de:	f002 f84f 	bl	8016480 <rcutils_repl_str>
 80143e2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80143e4:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80143e6:	4604      	mov	r4, r0
 80143e8:	4628      	mov	r0, r5
 80143ea:	4798      	blx	r3
 80143ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80143ee:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80143f0:	4658      	mov	r0, fp
 80143f2:	4798      	blx	r3
 80143f4:	2c00      	cmp	r4, #0
 80143f6:	f000 8083 	beq.w	8014500 <rcl_expand_topic_name+0x264>
 80143fa:	217b      	movs	r1, #123	@ 0x7b
 80143fc:	4620      	mov	r0, r4
 80143fe:	f006 f991 	bl	801a724 <strchr>
 8014402:	46a3      	mov	fp, r4
 8014404:	4605      	mov	r5, r0
 8014406:	e7b6      	b.n	8014376 <rcl_expand_topic_name+0xda>
 8014408:	2800      	cmp	r0, #0
 801440a:	d151      	bne.n	80144b0 <rcl_expand_topic_name+0x214>
 801440c:	4638      	mov	r0, r7
 801440e:	f7eb ff47 	bl	80002a0 <strlen>
 8014412:	4b53      	ldr	r3, [pc, #332]	@ (8014560 <rcl_expand_topic_name+0x2c4>)
 8014414:	4a53      	ldr	r2, [pc, #332]	@ (8014564 <rcl_expand_topic_name+0x2c8>)
 8014416:	f8cd 8010 	str.w	r8, [sp, #16]
 801441a:	2801      	cmp	r0, #1
 801441c:	bf0c      	ite	eq
 801441e:	4618      	moveq	r0, r3
 8014420:	4610      	movne	r0, r2
 8014422:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8014424:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014428:	e9cd 3200 	strd	r3, r2, [sp]
 801442c:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014430:	ab14      	add	r3, sp, #80	@ 0x50
 8014432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014434:	f001 ffd2 	bl	80163dc <rcutils_format_string_limit>
 8014438:	4682      	mov	sl, r0
 801443a:	4653      	mov	r3, sl
 801443c:	2b00      	cmp	r3, #0
 801443e:	d05f      	beq.n	8014500 <rcl_expand_topic_name+0x264>
 8014440:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014442:	f8c3 a000 	str.w	sl, [r3]
 8014446:	4620      	mov	r0, r4
 8014448:	b00b      	add	sp, #44	@ 0x2c
 801444a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801444e:	240b      	movs	r4, #11
 8014450:	4620      	mov	r0, r4
 8014452:	b00b      	add	sp, #44	@ 0x2c
 8014454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014458:	f7ff fe98 	bl	801418c <rcl_convert_rmw_ret_to_rcl_ret>
 801445c:	4604      	mov	r4, r0
 801445e:	e7f2      	b.n	8014446 <rcl_expand_topic_name+0x1aa>
 8014460:	2467      	movs	r4, #103	@ 0x67
 8014462:	4620      	mov	r0, r4
 8014464:	b00b      	add	sp, #44	@ 0x2c
 8014466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801446a:	24c9      	movs	r4, #201	@ 0xc9
 801446c:	e7eb      	b.n	8014446 <rcl_expand_topic_name+0x1aa>
 801446e:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8014472:	9806      	ldr	r0, [sp, #24]
 8014474:	1c69      	adds	r1, r5, #1
 8014476:	f7fa fcf3 	bl	800ee60 <rcutils_string_map_getn>
 801447a:	4681      	mov	r9, r0
 801447c:	2800      	cmp	r0, #0
 801447e:	d19b      	bne.n	80143b8 <rcl_expand_topic_name+0x11c>
 8014480:	aa16      	add	r2, sp, #88	@ 0x58
 8014482:	ca07      	ldmia	r2, {r0, r1, r2}
 8014484:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014486:	f8c3 9000 	str.w	r9, [r3]
 801448a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801448e:	ab14      	add	r3, sp, #80	@ 0x50
 8014490:	cb0c      	ldmia	r3, {r2, r3}
 8014492:	4651      	mov	r1, sl
 8014494:	4628      	mov	r0, r5
 8014496:	f002 f8ed 	bl	8016674 <rcutils_strndup>
 801449a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801449c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801449e:	4798      	blx	r3
 80144a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80144a2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80144a4:	4658      	mov	r0, fp
 80144a6:	4798      	blx	r3
 80144a8:	2469      	movs	r4, #105	@ 0x69
 80144aa:	e7cc      	b.n	8014446 <rcl_expand_topic_name+0x1aa>
 80144ac:	2800      	cmp	r0, #0
 80144ae:	d03e      	beq.n	801452e <rcl_expand_topic_name+0x292>
 80144b0:	46c1      	mov	r9, r8
 80144b2:	46a2      	mov	sl, r4
 80144b4:	e75c      	b.n	8014370 <rcl_expand_topic_name+0xd4>
 80144b6:	46b1      	mov	r9, r6
 80144b8:	e77e      	b.n	80143b8 <rcl_expand_topic_name+0x11c>
 80144ba:	f89a 3000 	ldrb.w	r3, [sl]
 80144be:	2b2f      	cmp	r3, #47	@ 0x2f
 80144c0:	d0be      	beq.n	8014440 <rcl_expand_topic_name+0x1a4>
 80144c2:	4638      	mov	r0, r7
 80144c4:	f7eb feec 	bl	80002a0 <strlen>
 80144c8:	4b25      	ldr	r3, [pc, #148]	@ (8014560 <rcl_expand_topic_name+0x2c4>)
 80144ca:	4926      	ldr	r1, [pc, #152]	@ (8014564 <rcl_expand_topic_name+0x2c8>)
 80144cc:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80144ce:	f8cd a010 	str.w	sl, [sp, #16]
 80144d2:	2801      	cmp	r0, #1
 80144d4:	bf0c      	ite	eq
 80144d6:	4618      	moveq	r0, r3
 80144d8:	4608      	movne	r0, r1
 80144da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80144de:	e9cd 2300 	strd	r2, r3, [sp]
 80144e2:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80144e6:	ab14      	add	r3, sp, #80	@ 0x50
 80144e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80144ea:	f001 ff77 	bl	80163dc <rcutils_format_string_limit>
 80144ee:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80144f0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80144f2:	4603      	mov	r3, r0
 80144f4:	4650      	mov	r0, sl
 80144f6:	469a      	mov	sl, r3
 80144f8:	4790      	blx	r2
 80144fa:	e79e      	b.n	801443a <rcl_expand_topic_name+0x19e>
 80144fc:	24ca      	movs	r4, #202	@ 0xca
 80144fe:	e7a2      	b.n	8014446 <rcl_expand_topic_name+0x1aa>
 8014500:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8014502:	2300      	movs	r3, #0
 8014504:	6013      	str	r3, [r2, #0]
 8014506:	240a      	movs	r4, #10
 8014508:	e79d      	b.n	8014446 <rcl_expand_topic_name+0x1aa>
 801450a:	465b      	mov	r3, fp
 801450c:	9c07      	ldr	r4, [sp, #28]
 801450e:	46da      	mov	sl, fp
 8014510:	2b00      	cmp	r3, #0
 8014512:	d1d2      	bne.n	80144ba <rcl_expand_topic_name+0x21e>
 8014514:	f898 3000 	ldrb.w	r3, [r8]
 8014518:	2b2f      	cmp	r3, #47	@ 0x2f
 801451a:	d091      	beq.n	8014440 <rcl_expand_topic_name+0x1a4>
 801451c:	e776      	b.n	801440c <rcl_expand_topic_name+0x170>
 801451e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014520:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014522:	601d      	str	r5, [r3, #0]
 8014524:	4658      	mov	r0, fp
 8014526:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014528:	4798      	blx	r3
 801452a:	240a      	movs	r4, #10
 801452c:	e78b      	b.n	8014446 <rcl_expand_topic_name+0x1aa>
 801452e:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	@ 0x5c
 8014532:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014536:	ab14      	add	r3, sp, #80	@ 0x50
 8014538:	cb0e      	ldmia	r3, {r1, r2, r3}
 801453a:	4640      	mov	r0, r8
 801453c:	f002 f878 	bl	8016630 <rcutils_strdup>
 8014540:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014542:	2800      	cmp	r0, #0
 8014544:	bf08      	it	eq
 8014546:	240a      	moveq	r4, #10
 8014548:	6018      	str	r0, [r3, #0]
 801454a:	e77c      	b.n	8014446 <rcl_expand_topic_name+0x1aa>
 801454c:	0801e054 	.word	0x0801e054
 8014550:	0801e290 	.word	0x0801e290
 8014554:	0801e298 	.word	0x0801e298
 8014558:	0801e2a0 	.word	0x0801e2a0
 801455c:	0801e2a8 	.word	0x0801e2a8
 8014560:	0801e064 	.word	0x0801e064
 8014564:	0801e01c 	.word	0x0801e01c

08014568 <rcl_get_default_topic_name_substitutions>:
 8014568:	2800      	cmp	r0, #0
 801456a:	bf0c      	ite	eq
 801456c:	200b      	moveq	r0, #11
 801456e:	2000      	movne	r0, #0
 8014570:	4770      	bx	lr
 8014572:	bf00      	nop

08014574 <rcl_init>:
 8014574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014578:	1e07      	subs	r7, r0, #0
 801457a:	b09f      	sub	sp, #124	@ 0x7c
 801457c:	4688      	mov	r8, r1
 801457e:	4692      	mov	sl, r2
 8014580:	4699      	mov	r9, r3
 8014582:	f340 8097 	ble.w	80146b4 <rcl_init+0x140>
 8014586:	2900      	cmp	r1, #0
 8014588:	f000 8097 	beq.w	80146ba <rcl_init+0x146>
 801458c:	1f0d      	subs	r5, r1, #4
 801458e:	2400      	movs	r4, #0
 8014590:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8014594:	3401      	adds	r4, #1
 8014596:	2e00      	cmp	r6, #0
 8014598:	f000 808f 	beq.w	80146ba <rcl_init+0x146>
 801459c:	42a7      	cmp	r7, r4
 801459e:	d1f7      	bne.n	8014590 <rcl_init+0x1c>
 80145a0:	f1ba 0f00 	cmp.w	sl, #0
 80145a4:	f000 8089 	beq.w	80146ba <rcl_init+0x146>
 80145a8:	f8da 4000 	ldr.w	r4, [sl]
 80145ac:	2c00      	cmp	r4, #0
 80145ae:	f000 8084 	beq.w	80146ba <rcl_init+0x146>
 80145b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80145b4:	ad19      	add	r5, sp, #100	@ 0x64
 80145b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80145b8:	6823      	ldr	r3, [r4, #0]
 80145ba:	602b      	str	r3, [r5, #0]
 80145bc:	a819      	add	r0, sp, #100	@ 0x64
 80145be:	f7fa fb15 	bl	800ebec <rcutils_allocator_is_valid>
 80145c2:	2800      	cmp	r0, #0
 80145c4:	d079      	beq.n	80146ba <rcl_init+0x146>
 80145c6:	f1b9 0f00 	cmp.w	r9, #0
 80145ca:	d076      	beq.n	80146ba <rcl_init+0x146>
 80145cc:	f8d9 3000 	ldr.w	r3, [r9]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d177      	bne.n	80146c4 <rcl_init+0x150>
 80145d4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80145d8:	2178      	movs	r1, #120	@ 0x78
 80145da:	2001      	movs	r0, #1
 80145dc:	4798      	blx	r3
 80145de:	4604      	mov	r4, r0
 80145e0:	f8c9 0000 	str.w	r0, [r9]
 80145e4:	2800      	cmp	r0, #0
 80145e6:	f000 80ba 	beq.w	801475e <rcl_init+0x1ea>
 80145ea:	a802      	add	r0, sp, #8
 80145ec:	f002 f85e 	bl	80166ac <rmw_get_zero_initialized_context>
 80145f0:	a902      	add	r1, sp, #8
 80145f2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80145f6:	2250      	movs	r2, #80	@ 0x50
 80145f8:	ac19      	add	r4, sp, #100	@ 0x64
 80145fa:	f006 f9ae 	bl	801a95a <memcpy>
 80145fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014600:	f8d9 5000 	ldr.w	r5, [r9]
 8014604:	6826      	ldr	r6, [r4, #0]
 8014606:	462c      	mov	r4, r5
 8014608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801460a:	f105 0114 	add.w	r1, r5, #20
 801460e:	6026      	str	r6, [r4, #0]
 8014610:	4650      	mov	r0, sl
 8014612:	f7f9 fc49 	bl	800dea8 <rcl_init_options_copy>
 8014616:	4606      	mov	r6, r0
 8014618:	2800      	cmp	r0, #0
 801461a:	d144      	bne.n	80146a6 <rcl_init+0x132>
 801461c:	f8d9 a000 	ldr.w	sl, [r9]
 8014620:	463c      	mov	r4, r7
 8014622:	17fd      	asrs	r5, r7, #31
 8014624:	e9ca 4506 	strd	r4, r5, [sl, #24]
 8014628:	f8ca 0020 	str.w	r0, [sl, #32]
 801462c:	2f00      	cmp	r7, #0
 801462e:	d050      	beq.n	80146d2 <rcl_init+0x15e>
 8014630:	f1b8 0f00 	cmp.w	r8, #0
 8014634:	d04d      	beq.n	80146d2 <rcl_init+0x15e>
 8014636:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801463a:	4638      	mov	r0, r7
 801463c:	2104      	movs	r1, #4
 801463e:	4798      	blx	r3
 8014640:	f8ca 0020 	str.w	r0, [sl, #32]
 8014644:	f8d9 a000 	ldr.w	sl, [r9]
 8014648:	f8da 3020 	ldr.w	r3, [sl, #32]
 801464c:	46d3      	mov	fp, sl
 801464e:	b34b      	cbz	r3, 80146a4 <rcl_init+0x130>
 8014650:	2f01      	cmp	r7, #1
 8014652:	f175 0300 	sbcs.w	r3, r5, #0
 8014656:	db3c      	blt.n	80146d2 <rcl_init+0x15e>
 8014658:	f1a8 0804 	sub.w	r8, r8, #4
 801465c:	2600      	movs	r6, #0
 801465e:	2700      	movs	r7, #0
 8014660:	e00c      	b.n	801467c <rcl_init+0x108>
 8014662:	f8d8 1000 	ldr.w	r1, [r8]
 8014666:	f006 f978 	bl	801a95a <memcpy>
 801466a:	3601      	adds	r6, #1
 801466c:	f147 0700 	adc.w	r7, r7, #0
 8014670:	42bd      	cmp	r5, r7
 8014672:	bf08      	it	eq
 8014674:	42b4      	cmpeq	r4, r6
 8014676:	d02a      	beq.n	80146ce <rcl_init+0x15a>
 8014678:	f8d9 b000 	ldr.w	fp, [r9]
 801467c:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8014680:	f7eb fe0e 	bl	80002a0 <strlen>
 8014684:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014686:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8014688:	f8db a020 	ldr.w	sl, [fp, #32]
 801468c:	9001      	str	r0, [sp, #4]
 801468e:	4798      	blx	r3
 8014690:	f8d9 1000 	ldr.w	r1, [r9]
 8014694:	9a01      	ldr	r2, [sp, #4]
 8014696:	6a09      	ldr	r1, [r1, #32]
 8014698:	00b3      	lsls	r3, r6, #2
 801469a:	f84a 0003 	str.w	r0, [sl, r3]
 801469e:	58c8      	ldr	r0, [r1, r3]
 80146a0:	2800      	cmp	r0, #0
 80146a2:	d1de      	bne.n	8014662 <rcl_init+0xee>
 80146a4:	260a      	movs	r6, #10
 80146a6:	4648      	mov	r0, r9
 80146a8:	f7ff fd94 	bl	80141d4 <__cleanup_context>
 80146ac:	4630      	mov	r0, r6
 80146ae:	b01f      	add	sp, #124	@ 0x7c
 80146b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146b4:	2900      	cmp	r1, #0
 80146b6:	f43f af73 	beq.w	80145a0 <rcl_init+0x2c>
 80146ba:	260b      	movs	r6, #11
 80146bc:	4630      	mov	r0, r6
 80146be:	b01f      	add	sp, #124	@ 0x7c
 80146c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146c4:	2664      	movs	r6, #100	@ 0x64
 80146c6:	4630      	mov	r0, r6
 80146c8:	b01f      	add	sp, #124	@ 0x7c
 80146ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146ce:	f8d9 a000 	ldr.w	sl, [r9]
 80146d2:	4a2c      	ldr	r2, [pc, #176]	@ (8014784 <rcl_init+0x210>)
 80146d4:	6813      	ldr	r3, [r2, #0]
 80146d6:	3301      	adds	r3, #1
 80146d8:	d03b      	beq.n	8014752 <rcl_init+0x1de>
 80146da:	6013      	str	r3, [r2, #0]
 80146dc:	4619      	mov	r1, r3
 80146de:	2000      	movs	r0, #0
 80146e0:	f8da 4014 	ldr.w	r4, [sl, #20]
 80146e4:	f8c9 3004 	str.w	r3, [r9, #4]
 80146e8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80146ea:	3301      	adds	r3, #1
 80146ec:	e9c4 1006 	strd	r1, r0, [r4, #24]
 80146f0:	d039      	beq.n	8014766 <rcl_init+0x1f2>
 80146f2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80146f6:	b94b      	cbnz	r3, 801470c <rcl_init+0x198>
 80146f8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80146fc:	f000 f844 	bl	8014788 <rcl_get_localhost_only>
 8014700:	4606      	mov	r6, r0
 8014702:	2800      	cmp	r0, #0
 8014704:	d1cf      	bne.n	80146a6 <rcl_init+0x132>
 8014706:	f8d9 3000 	ldr.w	r3, [r9]
 801470a:	695c      	ldr	r4, [r3, #20]
 801470c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 801470e:	aa18      	add	r2, sp, #96	@ 0x60
 8014710:	a917      	add	r1, sp, #92	@ 0x5c
 8014712:	f000 fec1 	bl	8015498 <rcl_validate_enclave_name>
 8014716:	4606      	mov	r6, r0
 8014718:	2800      	cmp	r0, #0
 801471a:	d1c4      	bne.n	80146a6 <rcl_init+0x132>
 801471c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801471e:	bb03      	cbnz	r3, 8014762 <rcl_init+0x1ee>
 8014720:	f8d9 1000 	ldr.w	r1, [r9]
 8014724:	694b      	ldr	r3, [r1, #20]
 8014726:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8014728:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801472c:	f000 fa9a 	bl	8014c64 <rcl_get_security_options_from_environment>
 8014730:	4606      	mov	r6, r0
 8014732:	2800      	cmp	r0, #0
 8014734:	d1b7      	bne.n	80146a6 <rcl_init+0x132>
 8014736:	f8d9 1000 	ldr.w	r1, [r9]
 801473a:	6948      	ldr	r0, [r1, #20]
 801473c:	3128      	adds	r1, #40	@ 0x28
 801473e:	3018      	adds	r0, #24
 8014740:	f7fa fd9c 	bl	800f27c <rmw_init>
 8014744:	4606      	mov	r6, r0
 8014746:	2800      	cmp	r0, #0
 8014748:	d0b8      	beq.n	80146bc <rcl_init+0x148>
 801474a:	f7ff fd1f 	bl	801418c <rcl_convert_rmw_ret_to_rcl_ret>
 801474e:	4606      	mov	r6, r0
 8014750:	e7a9      	b.n	80146a6 <rcl_init+0x132>
 8014752:	2401      	movs	r4, #1
 8014754:	4618      	mov	r0, r3
 8014756:	4621      	mov	r1, r4
 8014758:	6014      	str	r4, [r2, #0]
 801475a:	4623      	mov	r3, r4
 801475c:	e7c0      	b.n	80146e0 <rcl_init+0x16c>
 801475e:	260a      	movs	r6, #10
 8014760:	e7ac      	b.n	80146bc <rcl_init+0x148>
 8014762:	2601      	movs	r6, #1
 8014764:	e79f      	b.n	80146a6 <rcl_init+0x132>
 8014766:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801476a:	f004 fb77 	bl	8018e5c <rcl_get_default_domain_id>
 801476e:	4606      	mov	r6, r0
 8014770:	2800      	cmp	r0, #0
 8014772:	d198      	bne.n	80146a6 <rcl_init+0x132>
 8014774:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014776:	3301      	adds	r3, #1
 8014778:	f8d9 3000 	ldr.w	r3, [r9]
 801477c:	bf08      	it	eq
 801477e:	6260      	streq	r0, [r4, #36]	@ 0x24
 8014780:	695c      	ldr	r4, [r3, #20]
 8014782:	e7b6      	b.n	80146f2 <rcl_init+0x17e>
 8014784:	20009d60 	.word	0x20009d60

08014788 <rcl_get_localhost_only>:
 8014788:	b510      	push	{r4, lr}
 801478a:	b082      	sub	sp, #8
 801478c:	2300      	movs	r3, #0
 801478e:	9301      	str	r3, [sp, #4]
 8014790:	b1b8      	cbz	r0, 80147c2 <rcl_get_localhost_only+0x3a>
 8014792:	4604      	mov	r4, r0
 8014794:	a901      	add	r1, sp, #4
 8014796:	480c      	ldr	r0, [pc, #48]	@ (80147c8 <rcl_get_localhost_only+0x40>)
 8014798:	f001 fe5a 	bl	8016450 <rcutils_get_env>
 801479c:	b110      	cbz	r0, 80147a4 <rcl_get_localhost_only+0x1c>
 801479e:	2001      	movs	r0, #1
 80147a0:	b002      	add	sp, #8
 80147a2:	bd10      	pop	{r4, pc}
 80147a4:	9b01      	ldr	r3, [sp, #4]
 80147a6:	b113      	cbz	r3, 80147ae <rcl_get_localhost_only+0x26>
 80147a8:	781a      	ldrb	r2, [r3, #0]
 80147aa:	2a31      	cmp	r2, #49	@ 0x31
 80147ac:	d004      	beq.n	80147b8 <rcl_get_localhost_only+0x30>
 80147ae:	2302      	movs	r3, #2
 80147b0:	2000      	movs	r0, #0
 80147b2:	7023      	strb	r3, [r4, #0]
 80147b4:	b002      	add	sp, #8
 80147b6:	bd10      	pop	{r4, pc}
 80147b8:	785b      	ldrb	r3, [r3, #1]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d1f7      	bne.n	80147ae <rcl_get_localhost_only+0x26>
 80147be:	2301      	movs	r3, #1
 80147c0:	e7f6      	b.n	80147b0 <rcl_get_localhost_only+0x28>
 80147c2:	200b      	movs	r0, #11
 80147c4:	b002      	add	sp, #8
 80147c6:	bd10      	pop	{r4, pc}
 80147c8:	0801e2b4 	.word	0x0801e2b4

080147cc <rcl_get_zero_initialized_node>:
 80147cc:	4a03      	ldr	r2, [pc, #12]	@ (80147dc <rcl_get_zero_initialized_node+0x10>)
 80147ce:	4603      	mov	r3, r0
 80147d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80147d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80147d8:	4618      	mov	r0, r3
 80147da:	4770      	bx	lr
 80147dc:	0801e2d0 	.word	0x0801e2d0

080147e0 <rcl_node_init>:
 80147e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147e4:	b09b      	sub	sp, #108	@ 0x6c
 80147e6:	4604      	mov	r4, r0
 80147e8:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
 80147ec:	f04f 0c00 	mov.w	ip, #0
 80147f0:	a815      	add	r0, sp, #84	@ 0x54
 80147f2:	460e      	mov	r6, r1
 80147f4:	4615      	mov	r5, r2
 80147f6:	461f      	mov	r7, r3
 80147f8:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
 80147fc:	f004 fbea 	bl	8018fd4 <rcl_guard_condition_get_default_options>
 8014800:	f1b8 0f00 	cmp.w	r8, #0
 8014804:	f000 80fd 	beq.w	8014a02 <rcl_node_init+0x222>
 8014808:	f108 0b04 	add.w	fp, r8, #4
 801480c:	4658      	mov	r0, fp
 801480e:	f7fa f9ed 	bl	800ebec <rcutils_allocator_is_valid>
 8014812:	2800      	cmp	r0, #0
 8014814:	f000 80f5 	beq.w	8014a02 <rcl_node_init+0x222>
 8014818:	2e00      	cmp	r6, #0
 801481a:	f000 80f2 	beq.w	8014a02 <rcl_node_init+0x222>
 801481e:	2d00      	cmp	r5, #0
 8014820:	f000 80ef 	beq.w	8014a02 <rcl_node_init+0x222>
 8014824:	2c00      	cmp	r4, #0
 8014826:	f000 80ec 	beq.w	8014a02 <rcl_node_init+0x222>
 801482a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801482e:	f1b9 0f00 	cmp.w	r9, #0
 8014832:	f040 8112 	bne.w	8014a5a <rcl_node_init+0x27a>
 8014836:	2f00      	cmp	r7, #0
 8014838:	f000 80e3 	beq.w	8014a02 <rcl_node_init+0x222>
 801483c:	4638      	mov	r0, r7
 801483e:	f7ff fcc3 	bl	80141c8 <rcl_context_is_valid>
 8014842:	4682      	mov	sl, r0
 8014844:	2800      	cmp	r0, #0
 8014846:	f000 80e2 	beq.w	8014a0e <rcl_node_init+0x22e>
 801484a:	464a      	mov	r2, r9
 801484c:	a914      	add	r1, sp, #80	@ 0x50
 801484e:	4630      	mov	r0, r6
 8014850:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 8014854:	f001 ffb4 	bl	80167c0 <rmw_validate_node_name>
 8014858:	4681      	mov	r9, r0
 801485a:	2800      	cmp	r0, #0
 801485c:	f040 80d3 	bne.w	8014a06 <rcl_node_init+0x226>
 8014860:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8014862:	2800      	cmp	r0, #0
 8014864:	f040 8105 	bne.w	8014a72 <rcl_node_init+0x292>
 8014868:	4628      	mov	r0, r5
 801486a:	f7eb fd19 	bl	80002a0 <strlen>
 801486e:	2800      	cmp	r0, #0
 8014870:	f040 80d0 	bne.w	8014a14 <rcl_node_init+0x234>
 8014874:	4d8e      	ldr	r5, [pc, #568]	@ (8014ab0 <rcl_node_init+0x2d0>)
 8014876:	a914      	add	r1, sp, #80	@ 0x50
 8014878:	2200      	movs	r2, #0
 801487a:	4628      	mov	r0, r5
 801487c:	f001 ff82 	bl	8016784 <rmw_validate_namespace>
 8014880:	4681      	mov	r9, r0
 8014882:	2800      	cmp	r0, #0
 8014884:	f040 80bf 	bne.w	8014a06 <rcl_node_init+0x226>
 8014888:	4682      	mov	sl, r0
 801488a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801488c:	2b00      	cmp	r3, #0
 801488e:	f040 80f5 	bne.w	8014a7c <rcl_node_init+0x29c>
 8014892:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8014896:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801489a:	9307      	str	r3, [sp, #28]
 801489c:	2030      	movs	r0, #48	@ 0x30
 801489e:	4790      	blx	r2
 80148a0:	4681      	mov	r9, r0
 80148a2:	6060      	str	r0, [r4, #4]
 80148a4:	2800      	cmp	r0, #0
 80148a6:	f000 80de 	beq.w	8014a66 <rcl_node_init+0x286>
 80148aa:	9b07      	ldr	r3, [sp, #28]
 80148ac:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80148b0:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 80148b4:	a80a      	add	r0, sp, #40	@ 0x28
 80148b6:	f7f9 fba5 	bl	800e004 <rcl_node_get_default_options>
 80148ba:	f10d 0e28 	add.w	lr, sp, #40	@ 0x28
 80148be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80148c2:	46cc      	mov	ip, r9
 80148c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80148c8:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80148cc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80148d0:	6861      	ldr	r1, [r4, #4]
 80148d2:	6027      	str	r7, [r4, #0]
 80148d4:	4640      	mov	r0, r8
 80148d6:	f7f9 fbb1 	bl	800e03c <rcl_node_options_copy>
 80148da:	2800      	cmp	r0, #0
 80148dc:	d167      	bne.n	80149ae <rcl_node_init+0x1ce>
 80148de:	4628      	mov	r0, r5
 80148e0:	f7eb fcde 	bl	80002a0 <strlen>
 80148e4:	4428      	add	r0, r5
 80148e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80148ea:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80148ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80148f0:	bf08      	it	eq
 80148f2:	4970      	ldreq	r1, [pc, #448]	@ (8014ab4 <rcl_node_init+0x2d4>)
 80148f4:	f8db 3010 	ldr.w	r3, [fp, #16]
 80148f8:	bf18      	it	ne
 80148fa:	496f      	ldrne	r1, [pc, #444]	@ (8014ab8 <rcl_node_init+0x2d8>)
 80148fc:	9604      	str	r6, [sp, #16]
 80148fe:	e9cd 1502 	strd	r1, r5, [sp, #8]
 8014902:	e9cd 3200 	strd	r3, r2, [sp]
 8014906:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 801490a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801490e:	f001 fd65 	bl	80163dc <rcutils_format_string_limit>
 8014912:	f8c9 002c 	str.w	r0, [r9, #44]	@ 0x2c
 8014916:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801491a:	f8d9 3000 	ldr.w	r3, [r9]
 801491e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014920:	1c59      	adds	r1, r3, #1
 8014922:	f000 80b7 	beq.w	8014a94 <rcl_node_init+0x2b4>
 8014926:	683a      	ldr	r2, [r7, #0]
 8014928:	f8c9 301c 	str.w	r3, [r9, #28]
 801492c:	6952      	ldr	r2, [r2, #20]
 801492e:	6821      	ldr	r1, [r4, #0]
 8014930:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 8014934:	6808      	ldr	r0, [r1, #0]
 8014936:	f1a2 0201 	sub.w	r2, r2, #1
 801493a:	fab2 f282 	clz	r2, r2
 801493e:	0952      	lsrs	r2, r2, #5
 8014940:	9200      	str	r2, [sp, #0]
 8014942:	4631      	mov	r1, r6
 8014944:	3028      	adds	r0, #40	@ 0x28
 8014946:	462a      	mov	r2, r5
 8014948:	f7fa fe7c 	bl	800f644 <rmw_create_node>
 801494c:	6863      	ldr	r3, [r4, #4]
 801494e:	f8c9 0020 	str.w	r0, [r9, #32]
 8014952:	6a18      	ldr	r0, [r3, #32]
 8014954:	b368      	cbz	r0, 80149b2 <rcl_node_init+0x1d2>
 8014956:	f7fa ff07 	bl	800f768 <rmw_node_get_graph_guard_condition>
 801495a:	4681      	mov	r9, r0
 801495c:	b338      	cbz	r0, 80149ae <rcl_node_init+0x1ce>
 801495e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014962:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014966:	6866      	ldr	r6, [r4, #4]
 8014968:	2008      	movs	r0, #8
 801496a:	4798      	blx	r3
 801496c:	6863      	ldr	r3, [r4, #4]
 801496e:	6270      	str	r0, [r6, #36]	@ 0x24
 8014970:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8014972:	b1f6      	cbz	r6, 80149b2 <rcl_node_init+0x1d2>
 8014974:	a808      	add	r0, sp, #32
 8014976:	f004 faa5 	bl	8018ec4 <rcl_get_zero_initialized_guard_condition>
 801497a:	a808      	add	r0, sp, #32
 801497c:	c803      	ldmia	r0, {r0, r1}
 801497e:	e886 0003 	stmia.w	r6, {r0, r1}
 8014982:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8014986:	ae15      	add	r6, sp, #84	@ 0x54
 8014988:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801498a:	f8db 3000 	ldr.w	r3, [fp]
 801498e:	6033      	str	r3, [r6, #0]
 8014990:	ab1a      	add	r3, sp, #104	@ 0x68
 8014992:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014996:	6866      	ldr	r6, [r4, #4]
 8014998:	6a76      	ldr	r6, [r6, #36]	@ 0x24
 801499a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801499e:	4649      	mov	r1, r9
 80149a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80149a2:	4630      	mov	r0, r6
 80149a4:	463a      	mov	r2, r7
 80149a6:	f004 fa97 	bl	8018ed8 <rcl_guard_condition_init_from_rmw>
 80149aa:	4681      	mov	r9, r0
 80149ac:	b328      	cbz	r0, 80149fa <rcl_node_init+0x21a>
 80149ae:	6863      	ldr	r3, [r4, #4]
 80149b0:	b1f3      	cbz	r3, 80149f0 <rcl_node_init+0x210>
 80149b2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80149b4:	b128      	cbz	r0, 80149c2 <rcl_node_init+0x1e2>
 80149b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80149ba:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80149be:	4798      	blx	r3
 80149c0:	6863      	ldr	r3, [r4, #4]
 80149c2:	6a18      	ldr	r0, [r3, #32]
 80149c4:	b110      	cbz	r0, 80149cc <rcl_node_init+0x1ec>
 80149c6:	f7fa fe55 	bl	800f674 <rmw_destroy_node>
 80149ca:	6863      	ldr	r3, [r4, #4]
 80149cc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80149ce:	b148      	cbz	r0, 80149e4 <rcl_node_init+0x204>
 80149d0:	f004 fada 	bl	8018f88 <rcl_guard_condition_fini>
 80149d4:	6862      	ldr	r2, [r4, #4]
 80149d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80149da:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 80149dc:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80149e0:	4798      	blx	r3
 80149e2:	6863      	ldr	r3, [r4, #4]
 80149e4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80149e8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80149ec:	4618      	mov	r0, r3
 80149ee:	4790      	blx	r2
 80149f0:	2300      	movs	r3, #0
 80149f2:	e9c4 3300 	strd	r3, r3, [r4]
 80149f6:	f04f 0901 	mov.w	r9, #1
 80149fa:	f1ba 0f00 	cmp.w	sl, #0
 80149fe:	d125      	bne.n	8014a4c <rcl_node_init+0x26c>
 8014a00:	e001      	b.n	8014a06 <rcl_node_init+0x226>
 8014a02:	f04f 090b 	mov.w	r9, #11
 8014a06:	4648      	mov	r0, r9
 8014a08:	b01b      	add	sp, #108	@ 0x6c
 8014a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a0e:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8014a12:	e7f8      	b.n	8014a06 <rcl_node_init+0x226>
 8014a14:	782b      	ldrb	r3, [r5, #0]
 8014a16:	2b2f      	cmp	r3, #47	@ 0x2f
 8014a18:	f43f af2d 	beq.w	8014876 <rcl_node_init+0x96>
 8014a1c:	4927      	ldr	r1, [pc, #156]	@ (8014abc <rcl_node_init+0x2dc>)
 8014a1e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8014a22:	9300      	str	r3, [sp, #0]
 8014a24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014a28:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014a2c:	9503      	str	r5, [sp, #12]
 8014a2e:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8014a32:	f001 fcd3 	bl	80163dc <rcutils_format_string_limit>
 8014a36:	4605      	mov	r5, r0
 8014a38:	b348      	cbz	r0, 8014a8e <rcl_node_init+0x2ae>
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	a914      	add	r1, sp, #80	@ 0x50
 8014a3e:	9214      	str	r2, [sp, #80]	@ 0x50
 8014a40:	f001 fea0 	bl	8016784 <rmw_validate_namespace>
 8014a44:	4681      	mov	r9, r0
 8014a46:	2800      	cmp	r0, #0
 8014a48:	f43f af1f 	beq.w	801488a <rcl_node_init+0xaa>
 8014a4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014a50:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014a54:	4628      	mov	r0, r5
 8014a56:	4798      	blx	r3
 8014a58:	e7d5      	b.n	8014a06 <rcl_node_init+0x226>
 8014a5a:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8014a5e:	4648      	mov	r0, r9
 8014a60:	b01b      	add	sp, #108	@ 0x6c
 8014a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a66:	f04f 090a 	mov.w	r9, #10
 8014a6a:	f1ba 0f00 	cmp.w	sl, #0
 8014a6e:	d1ed      	bne.n	8014a4c <rcl_node_init+0x26c>
 8014a70:	e7c9      	b.n	8014a06 <rcl_node_init+0x226>
 8014a72:	f001 fef7 	bl	8016864 <rmw_node_name_validation_result_string>
 8014a76:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8014a7a:	e7c4      	b.n	8014a06 <rcl_node_init+0x226>
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	f001 fe93 	bl	80167a8 <rmw_namespace_validation_result_string>
 8014a82:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8014a86:	f1ba 0f00 	cmp.w	sl, #0
 8014a8a:	d1df      	bne.n	8014a4c <rcl_node_init+0x26c>
 8014a8c:	e7bb      	b.n	8014a06 <rcl_node_init+0x226>
 8014a8e:	f04f 090a 	mov.w	r9, #10
 8014a92:	e7b8      	b.n	8014a06 <rcl_node_init+0x226>
 8014a94:	a813      	add	r0, sp, #76	@ 0x4c
 8014a96:	f004 f9e1 	bl	8018e5c <rcl_get_default_domain_id>
 8014a9a:	2800      	cmp	r0, #0
 8014a9c:	d187      	bne.n	80149ae <rcl_node_init+0x1ce>
 8014a9e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014aa0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014aa4:	1c5a      	adds	r2, r3, #1
 8014aa6:	bf04      	itt	eq
 8014aa8:	9013      	streq	r0, [sp, #76]	@ 0x4c
 8014aaa:	4603      	moveq	r3, r0
 8014aac:	e73b      	b.n	8014926 <rcl_node_init+0x146>
 8014aae:	bf00      	nop
 8014ab0:	0801e018 	.word	0x0801e018
 8014ab4:	0801e064 	.word	0x0801e064
 8014ab8:	0801e01c 	.word	0x0801e01c
 8014abc:	0801e2cc 	.word	0x0801e2cc

08014ac0 <rcl_node_is_valid>:
 8014ac0:	b130      	cbz	r0, 8014ad0 <rcl_node_is_valid+0x10>
 8014ac2:	6843      	ldr	r3, [r0, #4]
 8014ac4:	b123      	cbz	r3, 8014ad0 <rcl_node_is_valid+0x10>
 8014ac6:	6a1b      	ldr	r3, [r3, #32]
 8014ac8:	b113      	cbz	r3, 8014ad0 <rcl_node_is_valid+0x10>
 8014aca:	6800      	ldr	r0, [r0, #0]
 8014acc:	f7ff bb7c 	b.w	80141c8 <rcl_context_is_valid>
 8014ad0:	2000      	movs	r0, #0
 8014ad2:	4770      	bx	lr

08014ad4 <rcl_node_get_name>:
 8014ad4:	b120      	cbz	r0, 8014ae0 <rcl_node_get_name+0xc>
 8014ad6:	6840      	ldr	r0, [r0, #4]
 8014ad8:	b110      	cbz	r0, 8014ae0 <rcl_node_get_name+0xc>
 8014ada:	6a00      	ldr	r0, [r0, #32]
 8014adc:	b100      	cbz	r0, 8014ae0 <rcl_node_get_name+0xc>
 8014ade:	6880      	ldr	r0, [r0, #8]
 8014ae0:	4770      	bx	lr
 8014ae2:	bf00      	nop

08014ae4 <rcl_node_get_namespace>:
 8014ae4:	b120      	cbz	r0, 8014af0 <rcl_node_get_namespace+0xc>
 8014ae6:	6840      	ldr	r0, [r0, #4]
 8014ae8:	b110      	cbz	r0, 8014af0 <rcl_node_get_namespace+0xc>
 8014aea:	6a00      	ldr	r0, [r0, #32]
 8014aec:	b100      	cbz	r0, 8014af0 <rcl_node_get_namespace+0xc>
 8014aee:	68c0      	ldr	r0, [r0, #12]
 8014af0:	4770      	bx	lr
 8014af2:	bf00      	nop

08014af4 <rcl_node_get_options>:
 8014af4:	b128      	cbz	r0, 8014b02 <rcl_node_get_options+0xe>
 8014af6:	6840      	ldr	r0, [r0, #4]
 8014af8:	b118      	cbz	r0, 8014b02 <rcl_node_get_options+0xe>
 8014afa:	6a03      	ldr	r3, [r0, #32]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	bf08      	it	eq
 8014b00:	2000      	moveq	r0, #0
 8014b02:	4770      	bx	lr

08014b04 <rcl_node_get_rmw_handle>:
 8014b04:	b110      	cbz	r0, 8014b0c <rcl_node_get_rmw_handle+0x8>
 8014b06:	6840      	ldr	r0, [r0, #4]
 8014b08:	b100      	cbz	r0, 8014b0c <rcl_node_get_rmw_handle+0x8>
 8014b0a:	6a00      	ldr	r0, [r0, #32]
 8014b0c:	4770      	bx	lr
 8014b0e:	bf00      	nop

08014b10 <exact_match_lookup>:
 8014b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b12:	f102 0708 	add.w	r7, r2, #8
 8014b16:	460b      	mov	r3, r1
 8014b18:	4614      	mov	r4, r2
 8014b1a:	4606      	mov	r6, r0
 8014b1c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014b20:	b085      	sub	sp, #20
 8014b22:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014b26:	4618      	mov	r0, r3
 8014b28:	4918      	ldr	r1, [pc, #96]	@ (8014b8c <exact_match_lookup+0x7c>)
 8014b2a:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014b2e:	f001 fc47 	bl	80163c0 <rcutils_join_path>
 8014b32:	7833      	ldrb	r3, [r6, #0]
 8014b34:	2b2f      	cmp	r3, #47	@ 0x2f
 8014b36:	4605      	mov	r5, r0
 8014b38:	d021      	beq.n	8014b7e <exact_match_lookup+0x6e>
 8014b3a:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8014b3e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014b42:	1c70      	adds	r0, r6, #1
 8014b44:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014b48:	f001 fc40 	bl	80163cc <rcutils_to_native_path>
 8014b4c:	4606      	mov	r6, r0
 8014b4e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014b52:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014b56:	4631      	mov	r1, r6
 8014b58:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014b5c:	4628      	mov	r0, r5
 8014b5e:	f001 fc2f 	bl	80163c0 <rcutils_join_path>
 8014b62:	6862      	ldr	r2, [r4, #4]
 8014b64:	6921      	ldr	r1, [r4, #16]
 8014b66:	4603      	mov	r3, r0
 8014b68:	4630      	mov	r0, r6
 8014b6a:	461e      	mov	r6, r3
 8014b6c:	4790      	blx	r2
 8014b6e:	4628      	mov	r0, r5
 8014b70:	6863      	ldr	r3, [r4, #4]
 8014b72:	6921      	ldr	r1, [r4, #16]
 8014b74:	4798      	blx	r3
 8014b76:	4635      	mov	r5, r6
 8014b78:	4628      	mov	r0, r5
 8014b7a:	b005      	add	sp, #20
 8014b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b7e:	7873      	ldrb	r3, [r6, #1]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d1da      	bne.n	8014b3a <exact_match_lookup+0x2a>
 8014b84:	4628      	mov	r0, r5
 8014b86:	b005      	add	sp, #20
 8014b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	0801e314 	.word	0x0801e314

08014b90 <rcl_get_secure_root>:
 8014b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014b94:	b085      	sub	sp, #20
 8014b96:	b168      	cbz	r0, 8014bb4 <rcl_get_secure_root+0x24>
 8014b98:	4607      	mov	r7, r0
 8014b9a:	4608      	mov	r0, r1
 8014b9c:	460c      	mov	r4, r1
 8014b9e:	f7fa f825 	bl	800ebec <rcutils_allocator_is_valid>
 8014ba2:	b138      	cbz	r0, 8014bb4 <rcl_get_secure_root+0x24>
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	482d      	ldr	r0, [pc, #180]	@ (8014c5c <rcl_get_secure_root+0xcc>)
 8014ba8:	9303      	str	r3, [sp, #12]
 8014baa:	a903      	add	r1, sp, #12
 8014bac:	f001 fc50 	bl	8016450 <rcutils_get_env>
 8014bb0:	4605      	mov	r5, r0
 8014bb2:	b120      	cbz	r0, 8014bbe <rcl_get_secure_root+0x2e>
 8014bb4:	2500      	movs	r5, #0
 8014bb6:	4628      	mov	r0, r5
 8014bb8:	b005      	add	sp, #20
 8014bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014bbe:	9b03      	ldr	r3, [sp, #12]
 8014bc0:	781a      	ldrb	r2, [r3, #0]
 8014bc2:	2a00      	cmp	r2, #0
 8014bc4:	d0f6      	beq.n	8014bb4 <rcl_get_secure_root+0x24>
 8014bc6:	f104 090c 	add.w	r9, r4, #12
 8014bca:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014bce:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014bd8:	f001 fd2a 	bl	8016630 <rcutils_strdup>
 8014bdc:	4680      	mov	r8, r0
 8014bde:	2800      	cmp	r0, #0
 8014be0:	d0e8      	beq.n	8014bb4 <rcl_get_secure_root+0x24>
 8014be2:	481f      	ldr	r0, [pc, #124]	@ (8014c60 <rcl_get_secure_root+0xd0>)
 8014be4:	9503      	str	r5, [sp, #12]
 8014be6:	a903      	add	r1, sp, #12
 8014be8:	f001 fc32 	bl	8016450 <rcutils_get_env>
 8014bec:	b160      	cbz	r0, 8014c08 <rcl_get_secure_root+0x78>
 8014bee:	2600      	movs	r6, #0
 8014bf0:	6863      	ldr	r3, [r4, #4]
 8014bf2:	6921      	ldr	r1, [r4, #16]
 8014bf4:	4630      	mov	r0, r6
 8014bf6:	4798      	blx	r3
 8014bf8:	4640      	mov	r0, r8
 8014bfa:	6863      	ldr	r3, [r4, #4]
 8014bfc:	6921      	ldr	r1, [r4, #16]
 8014bfe:	4798      	blx	r3
 8014c00:	4628      	mov	r0, r5
 8014c02:	b005      	add	sp, #20
 8014c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c08:	9b03      	ldr	r3, [sp, #12]
 8014c0a:	781e      	ldrb	r6, [r3, #0]
 8014c0c:	b1f6      	cbz	r6, 8014c4c <rcl_get_secure_root+0xbc>
 8014c0e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014c12:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014c16:	4618      	mov	r0, r3
 8014c18:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014c1c:	f001 fd08 	bl	8016630 <rcutils_strdup>
 8014c20:	4606      	mov	r6, r0
 8014c22:	2800      	cmp	r0, #0
 8014c24:	d0e3      	beq.n	8014bee <rcl_get_secure_root+0x5e>
 8014c26:	4622      	mov	r2, r4
 8014c28:	4641      	mov	r1, r8
 8014c2a:	f7ff ff71 	bl	8014b10 <exact_match_lookup>
 8014c2e:	4605      	mov	r5, r0
 8014c30:	2d00      	cmp	r5, #0
 8014c32:	d0dd      	beq.n	8014bf0 <rcl_get_secure_root+0x60>
 8014c34:	4628      	mov	r0, r5
 8014c36:	f001 fbc1 	bl	80163bc <rcutils_is_directory>
 8014c3a:	4607      	mov	r7, r0
 8014c3c:	2800      	cmp	r0, #0
 8014c3e:	d1d7      	bne.n	8014bf0 <rcl_get_secure_root+0x60>
 8014c40:	4628      	mov	r0, r5
 8014c42:	6863      	ldr	r3, [r4, #4]
 8014c44:	6921      	ldr	r1, [r4, #16]
 8014c46:	4798      	blx	r3
 8014c48:	463d      	mov	r5, r7
 8014c4a:	e7d1      	b.n	8014bf0 <rcl_get_secure_root+0x60>
 8014c4c:	4638      	mov	r0, r7
 8014c4e:	4622      	mov	r2, r4
 8014c50:	4641      	mov	r1, r8
 8014c52:	f7ff ff5d 	bl	8014b10 <exact_match_lookup>
 8014c56:	4605      	mov	r5, r0
 8014c58:	e7ea      	b.n	8014c30 <rcl_get_secure_root+0xa0>
 8014c5a:	bf00      	nop
 8014c5c:	0801e320 	.word	0x0801e320
 8014c60:	0801e338 	.word	0x0801e338

08014c64 <rcl_get_security_options_from_environment>:
 8014c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c68:	b082      	sub	sp, #8
 8014c6a:	4607      	mov	r7, r0
 8014c6c:	4688      	mov	r8, r1
 8014c6e:	2400      	movs	r4, #0
 8014c70:	481d      	ldr	r0, [pc, #116]	@ (8014ce8 <rcl_get_security_options_from_environment+0x84>)
 8014c72:	9401      	str	r4, [sp, #4]
 8014c74:	a901      	add	r1, sp, #4
 8014c76:	4616      	mov	r6, r2
 8014c78:	f001 fbea 	bl	8016450 <rcutils_get_env>
 8014c7c:	b120      	cbz	r0, 8014c88 <rcl_get_security_options_from_environment+0x24>
 8014c7e:	2501      	movs	r5, #1
 8014c80:	4628      	mov	r0, r5
 8014c82:	b002      	add	sp, #8
 8014c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c88:	4918      	ldr	r1, [pc, #96]	@ (8014cec <rcl_get_security_options_from_environment+0x88>)
 8014c8a:	4604      	mov	r4, r0
 8014c8c:	9801      	ldr	r0, [sp, #4]
 8014c8e:	f7eb faa7 	bl	80001e0 <strcmp>
 8014c92:	4605      	mov	r5, r0
 8014c94:	b9c8      	cbnz	r0, 8014cca <rcl_get_security_options_from_environment+0x66>
 8014c96:	9001      	str	r0, [sp, #4]
 8014c98:	b1ee      	cbz	r6, 8014cd6 <rcl_get_security_options_from_environment+0x72>
 8014c9a:	4815      	ldr	r0, [pc, #84]	@ (8014cf0 <rcl_get_security_options_from_environment+0x8c>)
 8014c9c:	a901      	add	r1, sp, #4
 8014c9e:	f001 fbd7 	bl	8016450 <rcutils_get_env>
 8014ca2:	2800      	cmp	r0, #0
 8014ca4:	d1eb      	bne.n	8014c7e <rcl_get_security_options_from_environment+0x1a>
 8014ca6:	4913      	ldr	r1, [pc, #76]	@ (8014cf4 <rcl_get_security_options_from_environment+0x90>)
 8014ca8:	9801      	ldr	r0, [sp, #4]
 8014caa:	f7eb fa99 	bl	80001e0 <strcmp>
 8014cae:	fab0 f080 	clz	r0, r0
 8014cb2:	0940      	lsrs	r0, r0, #5
 8014cb4:	7030      	strb	r0, [r6, #0]
 8014cb6:	4641      	mov	r1, r8
 8014cb8:	4638      	mov	r0, r7
 8014cba:	f7ff ff69 	bl	8014b90 <rcl_get_secure_root>
 8014cbe:	b160      	cbz	r0, 8014cda <rcl_get_security_options_from_environment+0x76>
 8014cc0:	6070      	str	r0, [r6, #4]
 8014cc2:	4628      	mov	r0, r5
 8014cc4:	b002      	add	sp, #8
 8014cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cca:	4625      	mov	r5, r4
 8014ccc:	4628      	mov	r0, r5
 8014cce:	7034      	strb	r4, [r6, #0]
 8014cd0:	b002      	add	sp, #8
 8014cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cd6:	250b      	movs	r5, #11
 8014cd8:	e7d2      	b.n	8014c80 <rcl_get_security_options_from_environment+0x1c>
 8014cda:	7835      	ldrb	r5, [r6, #0]
 8014cdc:	f1a5 0501 	sub.w	r5, r5, #1
 8014ce0:	fab5 f585 	clz	r5, r5
 8014ce4:	096d      	lsrs	r5, r5, #5
 8014ce6:	e7cb      	b.n	8014c80 <rcl_get_security_options_from_environment+0x1c>
 8014ce8:	0801e2d8 	.word	0x0801e2d8
 8014cec:	0801e2ec 	.word	0x0801e2ec
 8014cf0:	0801e2f4 	.word	0x0801e2f4
 8014cf4:	0801e30c 	.word	0x0801e30c

08014cf8 <rcl_service_get_rmw_handle>:
 8014cf8:	b110      	cbz	r0, 8014d00 <rcl_service_get_rmw_handle+0x8>
 8014cfa:	6800      	ldr	r0, [r0, #0]
 8014cfc:	b100      	cbz	r0, 8014d00 <rcl_service_get_rmw_handle+0x8>
 8014cfe:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014d00:	4770      	bx	lr
 8014d02:	bf00      	nop

08014d04 <rcl_take_request>:
 8014d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d06:	460e      	mov	r6, r1
 8014d08:	460c      	mov	r4, r1
 8014d0a:	4607      	mov	r7, r0
 8014d0c:	4694      	mov	ip, r2
 8014d0e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014d10:	b08d      	sub	sp, #52	@ 0x34
 8014d12:	ad06      	add	r5, sp, #24
 8014d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014d16:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014d1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8014d1e:	b1e7      	cbz	r7, 8014d5a <rcl_take_request+0x56>
 8014d20:	683b      	ldr	r3, [r7, #0]
 8014d22:	b1d3      	cbz	r3, 8014d5a <rcl_take_request+0x56>
 8014d24:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014d26:	b1c0      	cbz	r0, 8014d5a <rcl_take_request+0x56>
 8014d28:	4662      	mov	r2, ip
 8014d2a:	b30a      	cbz	r2, 8014d70 <rcl_take_request+0x6c>
 8014d2c:	2500      	movs	r5, #0
 8014d2e:	f10d 0307 	add.w	r3, sp, #7
 8014d32:	a902      	add	r1, sp, #8
 8014d34:	f88d 5007 	strb.w	r5, [sp, #7]
 8014d38:	f001 ff76 	bl	8016c28 <rmw_take_request>
 8014d3c:	4606      	mov	r6, r0
 8014d3e:	b178      	cbz	r0, 8014d60 <rcl_take_request+0x5c>
 8014d40:	280a      	cmp	r0, #10
 8014d42:	bf18      	it	ne
 8014d44:	2601      	movne	r6, #1
 8014d46:	ad06      	add	r5, sp, #24
 8014d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014d4c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014d50:	e884 0003 	stmia.w	r4, {r0, r1}
 8014d54:	4630      	mov	r0, r6
 8014d56:	b00d      	add	sp, #52	@ 0x34
 8014d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d5a:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8014d5e:	e7f2      	b.n	8014d46 <rcl_take_request+0x42>
 8014d60:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014d64:	f240 2359 	movw	r3, #601	@ 0x259
 8014d68:	2a00      	cmp	r2, #0
 8014d6a:	bf08      	it	eq
 8014d6c:	461e      	moveq	r6, r3
 8014d6e:	e7ea      	b.n	8014d46 <rcl_take_request+0x42>
 8014d70:	260b      	movs	r6, #11
 8014d72:	e7e8      	b.n	8014d46 <rcl_take_request+0x42>

08014d74 <rcl_send_response>:
 8014d74:	b160      	cbz	r0, 8014d90 <rcl_send_response+0x1c>
 8014d76:	6800      	ldr	r0, [r0, #0]
 8014d78:	b150      	cbz	r0, 8014d90 <rcl_send_response+0x1c>
 8014d7a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014d7c:	b140      	cbz	r0, 8014d90 <rcl_send_response+0x1c>
 8014d7e:	b151      	cbz	r1, 8014d96 <rcl_send_response+0x22>
 8014d80:	b510      	push	{r4, lr}
 8014d82:	b152      	cbz	r2, 8014d9a <rcl_send_response+0x26>
 8014d84:	f001 ffae 	bl	8016ce4 <rmw_send_response>
 8014d88:	3800      	subs	r0, #0
 8014d8a:	bf18      	it	ne
 8014d8c:	2001      	movne	r0, #1
 8014d8e:	bd10      	pop	{r4, pc}
 8014d90:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014d94:	4770      	bx	lr
 8014d96:	200b      	movs	r0, #11
 8014d98:	4770      	bx	lr
 8014d9a:	200b      	movs	r0, #11
 8014d9c:	bd10      	pop	{r4, pc}
 8014d9e:	bf00      	nop

08014da0 <rcl_get_zero_initialized_subscription>:
 8014da0:	4b01      	ldr	r3, [pc, #4]	@ (8014da8 <rcl_get_zero_initialized_subscription+0x8>)
 8014da2:	6818      	ldr	r0, [r3, #0]
 8014da4:	4770      	bx	lr
 8014da6:	bf00      	nop
 8014da8:	0801e358 	.word	0x0801e358

08014dac <rcl_subscription_init>:
 8014dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014db0:	b091      	sub	sp, #68	@ 0x44
 8014db2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014db4:	b1d7      	cbz	r7, 8014dec <rcl_subscription_init+0x40>
 8014db6:	f107 0950 	add.w	r9, r7, #80	@ 0x50
 8014dba:	4604      	mov	r4, r0
 8014dbc:	4648      	mov	r0, r9
 8014dbe:	4688      	mov	r8, r1
 8014dc0:	4616      	mov	r6, r2
 8014dc2:	461d      	mov	r5, r3
 8014dc4:	f7f9 ff12 	bl	800ebec <rcutils_allocator_is_valid>
 8014dc8:	b180      	cbz	r0, 8014dec <rcl_subscription_init+0x40>
 8014dca:	b17c      	cbz	r4, 8014dec <rcl_subscription_init+0x40>
 8014dcc:	4640      	mov	r0, r8
 8014dce:	f7ff fe77 	bl	8014ac0 <rcl_node_is_valid>
 8014dd2:	b380      	cbz	r0, 8014e36 <rcl_subscription_init+0x8a>
 8014dd4:	b156      	cbz	r6, 8014dec <rcl_subscription_init+0x40>
 8014dd6:	b14d      	cbz	r5, 8014dec <rcl_subscription_init+0x40>
 8014dd8:	f8d4 a000 	ldr.w	sl, [r4]
 8014ddc:	f1ba 0f00 	cmp.w	sl, #0
 8014de0:	d009      	beq.n	8014df6 <rcl_subscription_init+0x4a>
 8014de2:	2564      	movs	r5, #100	@ 0x64
 8014de4:	4628      	mov	r0, r5
 8014de6:	b011      	add	sp, #68	@ 0x44
 8014de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dec:	250b      	movs	r5, #11
 8014dee:	4628      	mov	r0, r5
 8014df0:	b011      	add	sp, #68	@ 0x44
 8014df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014df6:	46ce      	mov	lr, r9
 8014df8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014dfc:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8014e00:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e04:	f8de 3000 	ldr.w	r3, [lr]
 8014e08:	f8cc 3000 	str.w	r3, [ip]
 8014e0c:	f7f9 ff2a 	bl	800ec64 <rcutils_get_zero_initialized_string_map>
 8014e10:	ab10      	add	r3, sp, #64	@ 0x40
 8014e12:	4684      	mov	ip, r0
 8014e14:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014e18:	f8cd c020 	str.w	ip, [sp, #32]
 8014e1c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014e20:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8014e24:	4651      	mov	r1, sl
 8014e26:	a808      	add	r0, sp, #32
 8014e28:	f7f9 ff96 	bl	800ed58 <rcutils_string_map_init>
 8014e2c:	b140      	cbz	r0, 8014e40 <rcl_subscription_init+0x94>
 8014e2e:	280a      	cmp	r0, #10
 8014e30:	d011      	beq.n	8014e56 <rcl_subscription_init+0xaa>
 8014e32:	2501      	movs	r5, #1
 8014e34:	e7db      	b.n	8014dee <rcl_subscription_init+0x42>
 8014e36:	25c8      	movs	r5, #200	@ 0xc8
 8014e38:	4628      	mov	r0, r5
 8014e3a:	b011      	add	sp, #68	@ 0x44
 8014e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e40:	a808      	add	r0, sp, #32
 8014e42:	f7ff fb91 	bl	8014568 <rcl_get_default_topic_name_substitutions>
 8014e46:	4682      	mov	sl, r0
 8014e48:	b138      	cbz	r0, 8014e5a <rcl_subscription_init+0xae>
 8014e4a:	a808      	add	r0, sp, #32
 8014e4c:	f7f9 ffc4 	bl	800edd8 <rcutils_string_map_fini>
 8014e50:	f1ba 0f0a 	cmp.w	sl, #10
 8014e54:	d1ed      	bne.n	8014e32 <rcl_subscription_init+0x86>
 8014e56:	250a      	movs	r5, #10
 8014e58:	e7c9      	b.n	8014dee <rcl_subscription_init+0x42>
 8014e5a:	4640      	mov	r0, r8
 8014e5c:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8014e60:	f7ff fe38 	bl	8014ad4 <rcl_node_get_name>
 8014e64:	4682      	mov	sl, r0
 8014e66:	4640      	mov	r0, r8
 8014e68:	f7ff fe3c 	bl	8014ae4 <rcl_node_get_namespace>
 8014e6c:	4686      	mov	lr, r0
 8014e6e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8014e72:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 8014e76:	46ec      	mov	ip, sp
 8014e78:	f8cd b014 	str.w	fp, [sp, #20]
 8014e7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e80:	f8d9 3000 	ldr.w	r3, [r9]
 8014e84:	f8cc 3000 	str.w	r3, [ip]
 8014e88:	4628      	mov	r0, r5
 8014e8a:	4651      	mov	r1, sl
 8014e8c:	4672      	mov	r2, lr
 8014e8e:	ab08      	add	r3, sp, #32
 8014e90:	f7ff fa04 	bl	801429c <rcl_expand_topic_name>
 8014e94:	4605      	mov	r5, r0
 8014e96:	a808      	add	r0, sp, #32
 8014e98:	f7f9 ff9e 	bl	800edd8 <rcutils_string_map_fini>
 8014e9c:	b920      	cbnz	r0, 8014ea8 <rcl_subscription_init+0xfc>
 8014e9e:	b15d      	cbz	r5, 8014eb8 <rcl_subscription_init+0x10c>
 8014ea0:	2d67      	cmp	r5, #103	@ 0x67
 8014ea2:	d002      	beq.n	8014eaa <rcl_subscription_init+0xfe>
 8014ea4:	2d69      	cmp	r5, #105	@ 0x69
 8014ea6:	d05a      	beq.n	8014f5e <rcl_subscription_init+0x1b2>
 8014ea8:	2501      	movs	r5, #1
 8014eaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014eac:	2800      	cmp	r0, #0
 8014eae:	d09e      	beq.n	8014dee <rcl_subscription_init+0x42>
 8014eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014eb2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014eb4:	4798      	blx	r3
 8014eb6:	e79a      	b.n	8014dee <rcl_subscription_init+0x42>
 8014eb8:	4640      	mov	r0, r8
 8014eba:	f7ff fe1b 	bl	8014af4 <rcl_node_get_options>
 8014ebe:	2800      	cmp	r0, #0
 8014ec0:	d0f2      	beq.n	8014ea8 <rcl_subscription_init+0xfc>
 8014ec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014ec4:	f7eb f9ec 	bl	80002a0 <strlen>
 8014ec8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014eca:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014ecc:	3001      	adds	r0, #1
 8014ece:	4798      	blx	r3
 8014ed0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014ed2:	9107      	str	r1, [sp, #28]
 8014ed4:	4681      	mov	r9, r0
 8014ed6:	4608      	mov	r0, r1
 8014ed8:	f7eb f9e2 	bl	80002a0 <strlen>
 8014edc:	9907      	ldr	r1, [sp, #28]
 8014ede:	1c42      	adds	r2, r0, #1
 8014ee0:	4648      	mov	r0, r9
 8014ee2:	f005 fd3a 	bl	801a95a <memcpy>
 8014ee6:	462a      	mov	r2, r5
 8014ee8:	4648      	mov	r0, r9
 8014eea:	a90a      	add	r1, sp, #40	@ 0x28
 8014eec:	f7fa f850 	bl	800ef90 <rmw_validate_full_topic_name>
 8014ef0:	2800      	cmp	r0, #0
 8014ef2:	d132      	bne.n	8014f5a <rcl_subscription_init+0x1ae>
 8014ef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d133      	bne.n	8014f62 <rcl_subscription_init+0x1b6>
 8014efa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014efc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014efe:	20c8      	movs	r0, #200	@ 0xc8
 8014f00:	4798      	blx	r3
 8014f02:	6020      	str	r0, [r4, #0]
 8014f04:	b378      	cbz	r0, 8014f66 <rcl_subscription_init+0x1ba>
 8014f06:	4640      	mov	r0, r8
 8014f08:	f7ff fdfc 	bl	8014b04 <rcl_node_get_rmw_handle>
 8014f0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8014f10:	9300      	str	r3, [sp, #0]
 8014f12:	4631      	mov	r1, r6
 8014f14:	463b      	mov	r3, r7
 8014f16:	464a      	mov	r2, r9
 8014f18:	6825      	ldr	r5, [r4, #0]
 8014f1a:	f7fa fe03 	bl	800fb24 <rmw_create_subscription>
 8014f1e:	6821      	ldr	r1, [r4, #0]
 8014f20:	f8c5 00c0 	str.w	r0, [r5, #192]	@ 0xc0
 8014f24:	f8d1 00c0 	ldr.w	r0, [r1, #192]	@ 0xc0
 8014f28:	b368      	cbz	r0, 8014f86 <rcl_subscription_init+0x1da>
 8014f2a:	3170      	adds	r1, #112	@ 0x70
 8014f2c:	f7fa feda 	bl	800fce4 <rmw_subscription_get_actual_qos>
 8014f30:	4605      	mov	r5, r0
 8014f32:	b9d0      	cbnz	r0, 8014f6a <rcl_subscription_init+0x1be>
 8014f34:	6820      	ldr	r0, [r4, #0]
 8014f36:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8014f3a:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8014f3e:	2270      	movs	r2, #112	@ 0x70
 8014f40:	4639      	mov	r1, r7
 8014f42:	f005 fd0a 	bl	801a95a <memcpy>
 8014f46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014f48:	b110      	cbz	r0, 8014f50 <rcl_subscription_init+0x1a4>
 8014f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014f4c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014f4e:	4798      	blx	r3
 8014f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014f52:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014f54:	4648      	mov	r0, r9
 8014f56:	4798      	blx	r3
 8014f58:	e749      	b.n	8014dee <rcl_subscription_init+0x42>
 8014f5a:	2501      	movs	r5, #1
 8014f5c:	e7f3      	b.n	8014f46 <rcl_subscription_init+0x19a>
 8014f5e:	2567      	movs	r5, #103	@ 0x67
 8014f60:	e7a3      	b.n	8014eaa <rcl_subscription_init+0xfe>
 8014f62:	2567      	movs	r5, #103	@ 0x67
 8014f64:	e7ef      	b.n	8014f46 <rcl_subscription_init+0x19a>
 8014f66:	250a      	movs	r5, #10
 8014f68:	e7ed      	b.n	8014f46 <rcl_subscription_init+0x19a>
 8014f6a:	6823      	ldr	r3, [r4, #0]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d0f4      	beq.n	8014f5a <rcl_subscription_init+0x1ae>
 8014f70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8014f74:	b13b      	cbz	r3, 8014f86 <rcl_subscription_init+0x1da>
 8014f76:	4640      	mov	r0, r8
 8014f78:	f7ff fdc4 	bl	8014b04 <rcl_node_get_rmw_handle>
 8014f7c:	6823      	ldr	r3, [r4, #0]
 8014f7e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8014f82:	f7fa feb1 	bl	800fce8 <rmw_destroy_subscription>
 8014f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014f88:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014f8a:	6820      	ldr	r0, [r4, #0]
 8014f8c:	4798      	blx	r3
 8014f8e:	2300      	movs	r3, #0
 8014f90:	6023      	str	r3, [r4, #0]
 8014f92:	2501      	movs	r5, #1
 8014f94:	e7d7      	b.n	8014f46 <rcl_subscription_init+0x19a>
 8014f96:	bf00      	nop

08014f98 <rcl_subscription_get_default_options>:
 8014f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f9c:	4f12      	ldr	r7, [pc, #72]	@ (8014fe8 <rcl_subscription_get_default_options+0x50>)
 8014f9e:	4913      	ldr	r1, [pc, #76]	@ (8014fec <rcl_subscription_get_default_options+0x54>)
 8014fa0:	b088      	sub	sp, #32
 8014fa2:	4606      	mov	r6, r0
 8014fa4:	2250      	movs	r2, #80	@ 0x50
 8014fa6:	4638      	mov	r0, r7
 8014fa8:	f005 fcd7 	bl	801a95a <memcpy>
 8014fac:	ac02      	add	r4, sp, #8
 8014fae:	a802      	add	r0, sp, #8
 8014fb0:	f7f9 fe0e 	bl	800ebd0 <rcutils_get_default_allocator>
 8014fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014fb6:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8014fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014fbc:	46e8      	mov	r8, sp
 8014fbe:	6823      	ldr	r3, [r4, #0]
 8014fc0:	602b      	str	r3, [r5, #0]
 8014fc2:	4640      	mov	r0, r8
 8014fc4:	f001 fb7a 	bl	80166bc <rmw_get_default_subscription_options>
 8014fc8:	e898 0003 	ldmia.w	r8, {r0, r1}
 8014fcc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8014fd0:	e883 0003 	stmia.w	r3, {r0, r1}
 8014fd4:	2270      	movs	r2, #112	@ 0x70
 8014fd6:	4639      	mov	r1, r7
 8014fd8:	4630      	mov	r0, r6
 8014fda:	f005 fcbe 	bl	801a95a <memcpy>
 8014fde:	4630      	mov	r0, r6
 8014fe0:	b008      	add	sp, #32
 8014fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fe6:	bf00      	nop
 8014fe8:	20009d68 	.word	0x20009d68
 8014fec:	0801e360 	.word	0x0801e360

08014ff0 <rcl_take>:
 8014ff0:	2800      	cmp	r0, #0
 8014ff2:	d03f      	beq.n	8015074 <rcl_take+0x84>
 8014ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ff8:	4617      	mov	r7, r2
 8014ffa:	6802      	ldr	r2, [r0, #0]
 8014ffc:	b09d      	sub	sp, #116	@ 0x74
 8014ffe:	4606      	mov	r6, r0
 8015000:	b382      	cbz	r2, 8015064 <rcl_take+0x74>
 8015002:	4699      	mov	r9, r3
 8015004:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8015008:	b363      	cbz	r3, 8015064 <rcl_take+0x74>
 801500a:	4688      	mov	r8, r1
 801500c:	b381      	cbz	r1, 8015070 <rcl_take+0x80>
 801500e:	2f00      	cmp	r7, #0
 8015010:	d034      	beq.n	801507c <rcl_take+0x8c>
 8015012:	a802      	add	r0, sp, #8
 8015014:	ac02      	add	r4, sp, #8
 8015016:	f001 fb55 	bl	80166c4 <rmw_get_zero_initialized_message_info>
 801501a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801501c:	463d      	mov	r5, r7
 801501e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015024:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015028:	6834      	ldr	r4, [r6, #0]
 801502a:	f8d4 60c0 	ldr.w	r6, [r4, #192]	@ 0xc0
 801502e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8015032:	2400      	movs	r4, #0
 8015034:	463b      	mov	r3, r7
 8015036:	4630      	mov	r0, r6
 8015038:	f8cd 9000 	str.w	r9, [sp]
 801503c:	4641      	mov	r1, r8
 801503e:	f10d 023f 	add.w	r2, sp, #63	@ 0x3f
 8015042:	f88d 403f 	strb.w	r4, [sp, #63]	@ 0x3f
 8015046:	f001 fef7 	bl	8016e38 <rmw_take_with_info>
 801504a:	4603      	mov	r3, r0
 801504c:	b9c0      	cbnz	r0, 8015080 <rcl_take+0x90>
 801504e:	f89d 103f 	ldrb.w	r1, [sp, #63]	@ 0x3f
 8015052:	f240 1291 	movw	r2, #401	@ 0x191
 8015056:	2900      	cmp	r1, #0
 8015058:	bf08      	it	eq
 801505a:	4613      	moveq	r3, r2
 801505c:	4618      	mov	r0, r3
 801505e:	b01d      	add	sp, #116	@ 0x74
 8015060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015064:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015068:	4618      	mov	r0, r3
 801506a:	b01d      	add	sp, #116	@ 0x74
 801506c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015070:	230b      	movs	r3, #11
 8015072:	e7f3      	b.n	801505c <rcl_take+0x6c>
 8015074:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015078:	4618      	mov	r0, r3
 801507a:	4770      	bx	lr
 801507c:	af10      	add	r7, sp, #64	@ 0x40
 801507e:	e7c8      	b.n	8015012 <rcl_take+0x22>
 8015080:	f7ff f884 	bl	801418c <rcl_convert_rmw_ret_to_rcl_ret>
 8015084:	4603      	mov	r3, r0
 8015086:	e7e9      	b.n	801505c <rcl_take+0x6c>

08015088 <rcl_subscription_get_rmw_handle>:
 8015088:	b118      	cbz	r0, 8015092 <rcl_subscription_get_rmw_handle+0xa>
 801508a:	6800      	ldr	r0, [r0, #0]
 801508c:	b108      	cbz	r0, 8015092 <rcl_subscription_get_rmw_handle+0xa>
 801508e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8015092:	4770      	bx	lr

08015094 <rcl_get_system_time>:
 8015094:	4608      	mov	r0, r1
 8015096:	f7f9 bf15 	b.w	800eec4 <rcutils_system_time_now>
 801509a:	bf00      	nop

0801509c <rcl_get_steady_time>:
 801509c:	4608      	mov	r0, r1
 801509e:	f7f9 bf39 	b.w	800ef14 <rcutils_steady_time_now>
 80150a2:	bf00      	nop

080150a4 <rcl_get_ros_time>:
 80150a4:	7a03      	ldrb	r3, [r0, #8]
 80150a6:	b510      	push	{r4, lr}
 80150a8:	460c      	mov	r4, r1
 80150aa:	b133      	cbz	r3, 80150ba <rcl_get_ros_time+0x16>
 80150ac:	2105      	movs	r1, #5
 80150ae:	f001 f8e3 	bl	8016278 <__atomic_load_8>
 80150b2:	e9c4 0100 	strd	r0, r1, [r4]
 80150b6:	2000      	movs	r0, #0
 80150b8:	bd10      	pop	{r4, pc}
 80150ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150be:	4608      	mov	r0, r1
 80150c0:	f7f9 bf00 	b.w	800eec4 <rcutils_system_time_now>

080150c4 <rcl_clock_init>:
 80150c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150c8:	4606      	mov	r6, r0
 80150ca:	4610      	mov	r0, r2
 80150cc:	4614      	mov	r4, r2
 80150ce:	460d      	mov	r5, r1
 80150d0:	f7f9 fd8c 	bl	800ebec <rcutils_allocator_is_valid>
 80150d4:	b128      	cbz	r0, 80150e2 <rcl_clock_init+0x1e>
 80150d6:	2e03      	cmp	r6, #3
 80150d8:	d803      	bhi.n	80150e2 <rcl_clock_init+0x1e>
 80150da:	e8df f006 	tbb	[pc, r6]
 80150de:	2c1b      	.short	0x2c1b
 80150e0:	0554      	.short	0x0554
 80150e2:	200b      	movs	r0, #11
 80150e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150e8:	2d00      	cmp	r5, #0
 80150ea:	d0fa      	beq.n	80150e2 <rcl_clock_init+0x1e>
 80150ec:	2c00      	cmp	r4, #0
 80150ee:	d0f8      	beq.n	80150e2 <rcl_clock_init+0x1e>
 80150f0:	2600      	movs	r6, #0
 80150f2:	702e      	strb	r6, [r5, #0]
 80150f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80150f6:	f105 0714 	add.w	r7, r5, #20
 80150fa:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80150fe:	612e      	str	r6, [r5, #16]
 8015100:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015102:	6823      	ldr	r3, [r4, #0]
 8015104:	603b      	str	r3, [r7, #0]
 8015106:	2303      	movs	r3, #3
 8015108:	4a2b      	ldr	r2, [pc, #172]	@ (80151b8 <rcl_clock_init+0xf4>)
 801510a:	702b      	strb	r3, [r5, #0]
 801510c:	4630      	mov	r0, r6
 801510e:	60ea      	str	r2, [r5, #12]
 8015110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015114:	2d00      	cmp	r5, #0
 8015116:	d0e4      	beq.n	80150e2 <rcl_clock_init+0x1e>
 8015118:	2600      	movs	r6, #0
 801511a:	702e      	strb	r6, [r5, #0]
 801511c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801511e:	f105 0714 	add.w	r7, r5, #20
 8015122:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8015126:	e9c5 6603 	strd	r6, r6, [r5, #12]
 801512a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801512c:	6823      	ldr	r3, [r4, #0]
 801512e:	603b      	str	r3, [r7, #0]
 8015130:	4630      	mov	r0, r6
 8015132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015136:	2d00      	cmp	r5, #0
 8015138:	d0d3      	beq.n	80150e2 <rcl_clock_init+0x1e>
 801513a:	2c00      	cmp	r4, #0
 801513c:	d0d1      	beq.n	80150e2 <rcl_clock_init+0x1e>
 801513e:	2600      	movs	r6, #0
 8015140:	702e      	strb	r6, [r5, #0]
 8015142:	46a4      	mov	ip, r4
 8015144:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015148:	f105 0714 	add.w	r7, r5, #20
 801514c:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8015150:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8015154:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015156:	f8dc 3000 	ldr.w	r3, [ip]
 801515a:	603b      	str	r3, [r7, #0]
 801515c:	6921      	ldr	r1, [r4, #16]
 801515e:	6823      	ldr	r3, [r4, #0]
 8015160:	2010      	movs	r0, #16
 8015162:	4798      	blx	r3
 8015164:	4603      	mov	r3, r0
 8015166:	6128      	str	r0, [r5, #16]
 8015168:	b318      	cbz	r0, 80151b2 <rcl_clock_init+0xee>
 801516a:	f04f 0800 	mov.w	r8, #0
 801516e:	f04f 0900 	mov.w	r9, #0
 8015172:	7206      	strb	r6, [r0, #8]
 8015174:	e9c3 8900 	strd	r8, r9, [r3]
 8015178:	2301      	movs	r3, #1
 801517a:	4a10      	ldr	r2, [pc, #64]	@ (80151bc <rcl_clock_init+0xf8>)
 801517c:	702b      	strb	r3, [r5, #0]
 801517e:	4630      	mov	r0, r6
 8015180:	60ea      	str	r2, [r5, #12]
 8015182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015186:	2d00      	cmp	r5, #0
 8015188:	d0ab      	beq.n	80150e2 <rcl_clock_init+0x1e>
 801518a:	2c00      	cmp	r4, #0
 801518c:	d0a9      	beq.n	80150e2 <rcl_clock_init+0x1e>
 801518e:	2600      	movs	r6, #0
 8015190:	702e      	strb	r6, [r5, #0]
 8015192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015194:	f105 0714 	add.w	r7, r5, #20
 8015198:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801519c:	612e      	str	r6, [r5, #16]
 801519e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80151a0:	6823      	ldr	r3, [r4, #0]
 80151a2:	603b      	str	r3, [r7, #0]
 80151a4:	2302      	movs	r3, #2
 80151a6:	4a06      	ldr	r2, [pc, #24]	@ (80151c0 <rcl_clock_init+0xfc>)
 80151a8:	702b      	strb	r3, [r5, #0]
 80151aa:	4630      	mov	r0, r6
 80151ac:	60ea      	str	r2, [r5, #12]
 80151ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80151b2:	200a      	movs	r0, #10
 80151b4:	e796      	b.n	80150e4 <rcl_clock_init+0x20>
 80151b6:	bf00      	nop
 80151b8:	0801509d 	.word	0x0801509d
 80151bc:	080150a5 	.word	0x080150a5
 80151c0:	08015095 	.word	0x08015095

080151c4 <rcl_clock_get_now>:
 80151c4:	b140      	cbz	r0, 80151d8 <rcl_clock_get_now+0x14>
 80151c6:	b139      	cbz	r1, 80151d8 <rcl_clock_get_now+0x14>
 80151c8:	7803      	ldrb	r3, [r0, #0]
 80151ca:	b11b      	cbz	r3, 80151d4 <rcl_clock_get_now+0x10>
 80151cc:	68c3      	ldr	r3, [r0, #12]
 80151ce:	b10b      	cbz	r3, 80151d4 <rcl_clock_get_now+0x10>
 80151d0:	6900      	ldr	r0, [r0, #16]
 80151d2:	4718      	bx	r3
 80151d4:	2001      	movs	r0, #1
 80151d6:	4770      	bx	lr
 80151d8:	200b      	movs	r0, #11
 80151da:	4770      	bx	lr

080151dc <rcl_timer_call>:
 80151dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151e0:	b08b      	sub	sp, #44	@ 0x2c
 80151e2:	2800      	cmp	r0, #0
 80151e4:	d06e      	beq.n	80152c4 <rcl_timer_call+0xe8>
 80151e6:	6803      	ldr	r3, [r0, #0]
 80151e8:	f3bf 8f5b 	dmb	ish
 80151ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80151f0:	f3bf 8f5b 	dmb	ish
 80151f4:	4604      	mov	r4, r0
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d159      	bne.n	80152ae <rcl_timer_call+0xd2>
 80151fa:	6803      	ldr	r3, [r0, #0]
 80151fc:	a908      	add	r1, sp, #32
 80151fe:	6818      	ldr	r0, [r3, #0]
 8015200:	f7ff ffe0 	bl	80151c4 <rcl_clock_get_now>
 8015204:	4605      	mov	r5, r0
 8015206:	2800      	cmp	r0, #0
 8015208:	d14d      	bne.n	80152a6 <rcl_timer_call+0xca>
 801520a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801520e:	2a00      	cmp	r2, #0
 8015210:	f173 0100 	sbcs.w	r1, r3, #0
 8015214:	db51      	blt.n	80152ba <rcl_timer_call+0xde>
 8015216:	6820      	ldr	r0, [r4, #0]
 8015218:	2605      	movs	r6, #5
 801521a:	9600      	str	r6, [sp, #0]
 801521c:	3020      	adds	r0, #32
 801521e:	f001 f893 	bl	8016348 <__atomic_exchange_8>
 8015222:	6822      	ldr	r2, [r4, #0]
 8015224:	f3bf 8f5b 	dmb	ish
 8015228:	4682      	mov	sl, r0
 801522a:	f8d2 b010 	ldr.w	fp, [r2, #16]
 801522e:	f3bf 8f5b 	dmb	ish
 8015232:	6820      	ldr	r0, [r4, #0]
 8015234:	460b      	mov	r3, r1
 8015236:	3028      	adds	r0, #40	@ 0x28
 8015238:	4631      	mov	r1, r6
 801523a:	9305      	str	r3, [sp, #20]
 801523c:	f001 f81c 	bl	8016278 <__atomic_load_8>
 8015240:	4603      	mov	r3, r0
 8015242:	6820      	ldr	r0, [r4, #0]
 8015244:	460a      	mov	r2, r1
 8015246:	3018      	adds	r0, #24
 8015248:	4631      	mov	r1, r6
 801524a:	e9cd 2303 	strd	r2, r3, [sp, #12]
 801524e:	f001 f813 	bl	8016278 <__atomic_load_8>
 8015252:	9b04      	ldr	r3, [sp, #16]
 8015254:	9a03      	ldr	r2, [sp, #12]
 8015256:	4606      	mov	r6, r0
 8015258:	460f      	mov	r7, r1
 801525a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801525e:	eb13 0806 	adds.w	r8, r3, r6
 8015262:	eb42 0907 	adc.w	r9, r2, r7
 8015266:	4580      	cmp	r8, r0
 8015268:	eb79 0301 	sbcs.w	r3, r9, r1
 801526c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015270:	460a      	mov	r2, r1
 8015272:	da04      	bge.n	801527e <rcl_timer_call+0xa2>
 8015274:	ea56 0307 	orrs.w	r3, r6, r7
 8015278:	d129      	bne.n	80152ce <rcl_timer_call+0xf2>
 801527a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801527e:	6820      	ldr	r0, [r4, #0]
 8015280:	2105      	movs	r1, #5
 8015282:	4642      	mov	r2, r8
 8015284:	464b      	mov	r3, r9
 8015286:	3028      	adds	r0, #40	@ 0x28
 8015288:	9100      	str	r1, [sp, #0]
 801528a:	f001 f829 	bl	80162e0 <__atomic_store_8>
 801528e:	f1bb 0f00 	cmp.w	fp, #0
 8015292:	d008      	beq.n	80152a6 <rcl_timer_call+0xca>
 8015294:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015298:	9905      	ldr	r1, [sp, #20]
 801529a:	ebb2 020a 	subs.w	r2, r2, sl
 801529e:	4620      	mov	r0, r4
 80152a0:	eb63 0301 	sbc.w	r3, r3, r1
 80152a4:	47d8      	blx	fp
 80152a6:	4628      	mov	r0, r5
 80152a8:	b00b      	add	sp, #44	@ 0x2c
 80152aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ae:	f240 3521 	movw	r5, #801	@ 0x321
 80152b2:	4628      	mov	r0, r5
 80152b4:	b00b      	add	sp, #44	@ 0x2c
 80152b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ba:	2501      	movs	r5, #1
 80152bc:	4628      	mov	r0, r5
 80152be:	b00b      	add	sp, #44	@ 0x2c
 80152c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152c4:	250b      	movs	r5, #11
 80152c6:	4628      	mov	r0, r5
 80152c8:	b00b      	add	sp, #44	@ 0x2c
 80152ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ce:	ebb0 0008 	subs.w	r0, r0, r8
 80152d2:	eb62 0109 	sbc.w	r1, r2, r9
 80152d6:	f110 30ff 	adds.w	r0, r0, #4294967295	@ 0xffffffff
 80152da:	463b      	mov	r3, r7
 80152dc:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
 80152e0:	4632      	mov	r2, r6
 80152e2:	f7eb fce9 	bl	8000cb8 <__aeabi_ldivmod>
 80152e6:	1c43      	adds	r3, r0, #1
 80152e8:	f141 0100 	adc.w	r1, r1, #0
 80152ec:	fb00 7007 	mla	r0, r0, r7, r7
 80152f0:	fb06 0001 	mla	r0, r6, r1, r0
 80152f4:	fba3 6706 	umull	r6, r7, r3, r6
 80152f8:	4407      	add	r7, r0
 80152fa:	eb18 0806 	adds.w	r8, r8, r6
 80152fe:	eb49 0907 	adc.w	r9, r9, r7
 8015302:	e7bc      	b.n	801527e <rcl_timer_call+0xa2>

08015304 <rcl_timer_is_ready>:
 8015304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015308:	b082      	sub	sp, #8
 801530a:	b310      	cbz	r0, 8015352 <rcl_timer_is_ready+0x4e>
 801530c:	4688      	mov	r8, r1
 801530e:	b301      	cbz	r1, 8015352 <rcl_timer_is_ready+0x4e>
 8015310:	6803      	ldr	r3, [r0, #0]
 8015312:	4604      	mov	r4, r0
 8015314:	4669      	mov	r1, sp
 8015316:	6818      	ldr	r0, [r3, #0]
 8015318:	f7ff ff54 	bl	80151c4 <rcl_clock_get_now>
 801531c:	4605      	mov	r5, r0
 801531e:	b118      	cbz	r0, 8015328 <rcl_timer_is_ready+0x24>
 8015320:	4628      	mov	r0, r5
 8015322:	b002      	add	sp, #8
 8015324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015328:	6820      	ldr	r0, [r4, #0]
 801532a:	2105      	movs	r1, #5
 801532c:	3028      	adds	r0, #40	@ 0x28
 801532e:	f000 ffa3 	bl	8016278 <__atomic_load_8>
 8015332:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015336:	1ac6      	subs	r6, r0, r3
 8015338:	eb61 0702 	sbc.w	r7, r1, r2
 801533c:	2e01      	cmp	r6, #1
 801533e:	f177 0300 	sbcs.w	r3, r7, #0
 8015342:	db0b      	blt.n	801535c <rcl_timer_is_ready+0x58>
 8015344:	462b      	mov	r3, r5
 8015346:	4628      	mov	r0, r5
 8015348:	f888 3000 	strb.w	r3, [r8]
 801534c:	b002      	add	sp, #8
 801534e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015352:	250b      	movs	r5, #11
 8015354:	4628      	mov	r0, r5
 8015356:	b002      	add	sp, #8
 8015358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801535c:	6823      	ldr	r3, [r4, #0]
 801535e:	f3bf 8f5b 	dmb	ish
 8015362:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015366:	f3bf 8f5b 	dmb	ish
 801536a:	fab3 f383 	clz	r3, r3
 801536e:	095b      	lsrs	r3, r3, #5
 8015370:	e7e9      	b.n	8015346 <rcl_timer_is_ready+0x42>
 8015372:	bf00      	nop

08015374 <rcl_timer_get_time_until_next_call>:
 8015374:	b570      	push	{r4, r5, r6, lr}
 8015376:	b082      	sub	sp, #8
 8015378:	b1d8      	cbz	r0, 80153b2 <rcl_timer_get_time_until_next_call+0x3e>
 801537a:	460d      	mov	r5, r1
 801537c:	b1c9      	cbz	r1, 80153b2 <rcl_timer_get_time_until_next_call+0x3e>
 801537e:	6803      	ldr	r3, [r0, #0]
 8015380:	4604      	mov	r4, r0
 8015382:	4669      	mov	r1, sp
 8015384:	6818      	ldr	r0, [r3, #0]
 8015386:	f7ff ff1d 	bl	80151c4 <rcl_clock_get_now>
 801538a:	4606      	mov	r6, r0
 801538c:	b110      	cbz	r0, 8015394 <rcl_timer_get_time_until_next_call+0x20>
 801538e:	4630      	mov	r0, r6
 8015390:	b002      	add	sp, #8
 8015392:	bd70      	pop	{r4, r5, r6, pc}
 8015394:	6820      	ldr	r0, [r4, #0]
 8015396:	2105      	movs	r1, #5
 8015398:	3028      	adds	r0, #40	@ 0x28
 801539a:	f000 ff6d 	bl	8016278 <__atomic_load_8>
 801539e:	e9dd 3200 	ldrd	r3, r2, [sp]
 80153a2:	1ac0      	subs	r0, r0, r3
 80153a4:	eb61 0102 	sbc.w	r1, r1, r2
 80153a8:	e9c5 0100 	strd	r0, r1, [r5]
 80153ac:	4630      	mov	r0, r6
 80153ae:	b002      	add	sp, #8
 80153b0:	bd70      	pop	{r4, r5, r6, pc}
 80153b2:	260b      	movs	r6, #11
 80153b4:	4630      	mov	r0, r6
 80153b6:	b002      	add	sp, #8
 80153b8:	bd70      	pop	{r4, r5, r6, pc}
 80153ba:	bf00      	nop

080153bc <rcl_timer_is_canceled>:
 80153bc:	b168      	cbz	r0, 80153da <rcl_timer_is_canceled+0x1e>
 80153be:	b161      	cbz	r1, 80153da <rcl_timer_is_canceled+0x1e>
 80153c0:	6803      	ldr	r3, [r0, #0]
 80153c2:	f3bf 8f5b 	dmb	ish
 80153c6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80153ca:	f3bf 8f5b 	dmb	ish
 80153ce:	3b00      	subs	r3, #0
 80153d0:	bf18      	it	ne
 80153d2:	2301      	movne	r3, #1
 80153d4:	700b      	strb	r3, [r1, #0]
 80153d6:	2000      	movs	r0, #0
 80153d8:	4770      	bx	lr
 80153da:	200b      	movs	r0, #11
 80153dc:	4770      	bx	lr
 80153de:	bf00      	nop

080153e0 <rcl_timer_get_guard_condition>:
 80153e0:	b130      	cbz	r0, 80153f0 <rcl_timer_get_guard_condition+0x10>
 80153e2:	6800      	ldr	r0, [r0, #0]
 80153e4:	b120      	cbz	r0, 80153f0 <rcl_timer_get_guard_condition+0x10>
 80153e6:	68c3      	ldr	r3, [r0, #12]
 80153e8:	b10b      	cbz	r3, 80153ee <rcl_timer_get_guard_condition+0xe>
 80153ea:	3008      	adds	r0, #8
 80153ec:	4770      	bx	lr
 80153ee:	4618      	mov	r0, r3
 80153f0:	4770      	bx	lr
 80153f2:	bf00      	nop

080153f4 <rcl_validate_enclave_name_with_size>:
 80153f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153f6:	b0c3      	sub	sp, #268	@ 0x10c
 80153f8:	b1d0      	cbz	r0, 8015430 <rcl_validate_enclave_name_with_size+0x3c>
 80153fa:	4615      	mov	r5, r2
 80153fc:	b1c2      	cbz	r2, 8015430 <rcl_validate_enclave_name_with_size+0x3c>
 80153fe:	461f      	mov	r7, r3
 8015400:	466a      	mov	r2, sp
 8015402:	ab01      	add	r3, sp, #4
 8015404:	460e      	mov	r6, r1
 8015406:	f001 f96f 	bl	80166e8 <rmw_validate_namespace_with_size>
 801540a:	4604      	mov	r4, r0
 801540c:	b9e0      	cbnz	r0, 8015448 <rcl_validate_enclave_name_with_size+0x54>
 801540e:	9b00      	ldr	r3, [sp, #0]
 8015410:	b923      	cbnz	r3, 801541c <rcl_validate_enclave_name_with_size+0x28>
 8015412:	2300      	movs	r3, #0
 8015414:	602b      	str	r3, [r5, #0]
 8015416:	4620      	mov	r0, r4
 8015418:	b043      	add	sp, #268	@ 0x10c
 801541a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801541c:	2b07      	cmp	r3, #7
 801541e:	d00b      	beq.n	8015438 <rcl_validate_enclave_name_with_size+0x44>
 8015420:	1e5a      	subs	r2, r3, #1
 8015422:	2a05      	cmp	r2, #5
 8015424:	d82e      	bhi.n	8015484 <rcl_validate_enclave_name_with_size+0x90>
 8015426:	e8df f002 	tbb	[pc, r2]
 801542a:	211e      	.short	0x211e
 801542c:	152a2724 	.word	0x152a2724
 8015430:	240b      	movs	r4, #11
 8015432:	4620      	mov	r0, r4
 8015434:	b043      	add	sp, #268	@ 0x10c
 8015436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015438:	2eff      	cmp	r6, #255	@ 0xff
 801543a:	d9ea      	bls.n	8015412 <rcl_validate_enclave_name_with_size+0x1e>
 801543c:	602b      	str	r3, [r5, #0]
 801543e:	2f00      	cmp	r7, #0
 8015440:	d0e9      	beq.n	8015416 <rcl_validate_enclave_name_with_size+0x22>
 8015442:	23fe      	movs	r3, #254	@ 0xfe
 8015444:	603b      	str	r3, [r7, #0]
 8015446:	e7e6      	b.n	8015416 <rcl_validate_enclave_name_with_size+0x22>
 8015448:	f7fe fea0 	bl	801418c <rcl_convert_rmw_ret_to_rcl_ret>
 801544c:	4604      	mov	r4, r0
 801544e:	4620      	mov	r0, r4
 8015450:	b043      	add	sp, #268	@ 0x10c
 8015452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015454:	2306      	movs	r3, #6
 8015456:	602b      	str	r3, [r5, #0]
 8015458:	2f00      	cmp	r7, #0
 801545a:	d0dc      	beq.n	8015416 <rcl_validate_enclave_name_with_size+0x22>
 801545c:	9b01      	ldr	r3, [sp, #4]
 801545e:	603b      	str	r3, [r7, #0]
 8015460:	4620      	mov	r0, r4
 8015462:	b043      	add	sp, #268	@ 0x10c
 8015464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015466:	2301      	movs	r3, #1
 8015468:	602b      	str	r3, [r5, #0]
 801546a:	e7f5      	b.n	8015458 <rcl_validate_enclave_name_with_size+0x64>
 801546c:	2302      	movs	r3, #2
 801546e:	602b      	str	r3, [r5, #0]
 8015470:	e7f2      	b.n	8015458 <rcl_validate_enclave_name_with_size+0x64>
 8015472:	2303      	movs	r3, #3
 8015474:	602b      	str	r3, [r5, #0]
 8015476:	e7ef      	b.n	8015458 <rcl_validate_enclave_name_with_size+0x64>
 8015478:	2304      	movs	r3, #4
 801547a:	602b      	str	r3, [r5, #0]
 801547c:	e7ec      	b.n	8015458 <rcl_validate_enclave_name_with_size+0x64>
 801547e:	2305      	movs	r3, #5
 8015480:	602b      	str	r3, [r5, #0]
 8015482:	e7e9      	b.n	8015458 <rcl_validate_enclave_name_with_size+0x64>
 8015484:	4a03      	ldr	r2, [pc, #12]	@ (8015494 <rcl_validate_enclave_name_with_size+0xa0>)
 8015486:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801548a:	a802      	add	r0, sp, #8
 801548c:	f001 f8a4 	bl	80165d8 <rcutils_snprintf>
 8015490:	2401      	movs	r4, #1
 8015492:	e7c0      	b.n	8015416 <rcl_validate_enclave_name_with_size+0x22>
 8015494:	0801e3b0 	.word	0x0801e3b0

08015498 <rcl_validate_enclave_name>:
 8015498:	b168      	cbz	r0, 80154b6 <rcl_validate_enclave_name+0x1e>
 801549a:	b570      	push	{r4, r5, r6, lr}
 801549c:	460d      	mov	r5, r1
 801549e:	4616      	mov	r6, r2
 80154a0:	4604      	mov	r4, r0
 80154a2:	f7ea fefd 	bl	80002a0 <strlen>
 80154a6:	4633      	mov	r3, r6
 80154a8:	4601      	mov	r1, r0
 80154aa:	462a      	mov	r2, r5
 80154ac:	4620      	mov	r0, r4
 80154ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154b2:	f7ff bf9f 	b.w	80153f4 <rcl_validate_enclave_name_with_size>
 80154b6:	200b      	movs	r0, #11
 80154b8:	4770      	bx	lr
 80154ba:	bf00      	nop

080154bc <rcl_validate_topic_name>:
 80154bc:	2800      	cmp	r0, #0
 80154be:	f000 808b 	beq.w	80155d8 <rcl_validate_topic_name+0x11c>
 80154c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80154c6:	460e      	mov	r6, r1
 80154c8:	2900      	cmp	r1, #0
 80154ca:	f000 808c 	beq.w	80155e6 <rcl_validate_topic_name+0x12a>
 80154ce:	4617      	mov	r7, r2
 80154d0:	4605      	mov	r5, r0
 80154d2:	f7ea fee5 	bl	80002a0 <strlen>
 80154d6:	b1b0      	cbz	r0, 8015506 <rcl_validate_topic_name+0x4a>
 80154d8:	f895 9000 	ldrb.w	r9, [r5]
 80154dc:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 801568c <rcl_validate_topic_name+0x1d0>
 80154e0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80154e4:	f013 0304 	ands.w	r3, r3, #4
 80154e8:	d178      	bne.n	80155dc <rcl_validate_topic_name+0x120>
 80154ea:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80154ee:	f815 2008 	ldrb.w	r2, [r5, r8]
 80154f2:	2a2f      	cmp	r2, #47	@ 0x2f
 80154f4:	d10e      	bne.n	8015514 <rcl_validate_topic_name+0x58>
 80154f6:	2202      	movs	r2, #2
 80154f8:	6032      	str	r2, [r6, #0]
 80154fa:	b36f      	cbz	r7, 8015558 <rcl_validate_topic_name+0x9c>
 80154fc:	f8c7 8000 	str.w	r8, [r7]
 8015500:	4618      	mov	r0, r3
 8015502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015506:	2301      	movs	r3, #1
 8015508:	6033      	str	r3, [r6, #0]
 801550a:	b32f      	cbz	r7, 8015558 <rcl_validate_topic_name+0x9c>
 801550c:	2000      	movs	r0, #0
 801550e:	6038      	str	r0, [r7, #0]
 8015510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015514:	461c      	mov	r4, r3
 8015516:	4619      	mov	r1, r3
 8015518:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801551c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8015520:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8015524:	f1be 0f09 	cmp.w	lr, #9
 8015528:	d946      	bls.n	80155b8 <rcl_validate_topic_name+0xfc>
 801552a:	f022 0e20 	bic.w	lr, r2, #32
 801552e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8015532:	f1be 0f19 	cmp.w	lr, #25
 8015536:	d93f      	bls.n	80155b8 <rcl_validate_topic_name+0xfc>
 8015538:	2a5f      	cmp	r2, #95	@ 0x5f
 801553a:	d014      	beq.n	8015566 <rcl_validate_topic_name+0xaa>
 801553c:	2a2f      	cmp	r2, #47	@ 0x2f
 801553e:	d05b      	beq.n	80155f8 <rcl_validate_topic_name+0x13c>
 8015540:	2a7e      	cmp	r2, #126	@ 0x7e
 8015542:	d052      	beq.n	80155ea <rcl_validate_topic_name+0x12e>
 8015544:	2a7b      	cmp	r2, #123	@ 0x7b
 8015546:	d00a      	beq.n	801555e <rcl_validate_topic_name+0xa2>
 8015548:	2a7d      	cmp	r2, #125	@ 0x7d
 801554a:	d16f      	bne.n	801562c <rcl_validate_topic_name+0x170>
 801554c:	2c00      	cmp	r4, #0
 801554e:	d15e      	bne.n	801560e <rcl_validate_topic_name+0x152>
 8015550:	2305      	movs	r3, #5
 8015552:	6033      	str	r3, [r6, #0]
 8015554:	b107      	cbz	r7, 8015558 <rcl_validate_topic_name+0x9c>
 8015556:	6039      	str	r1, [r7, #0]
 8015558:	2000      	movs	r0, #0
 801555a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801555e:	2c00      	cmp	r4, #0
 8015560:	d14c      	bne.n	80155fc <rcl_validate_topic_name+0x140>
 8015562:	460b      	mov	r3, r1
 8015564:	2401      	movs	r4, #1
 8015566:	3101      	adds	r1, #1
 8015568:	4288      	cmp	r0, r1
 801556a:	d1d7      	bne.n	801551c <rcl_validate_topic_name+0x60>
 801556c:	2c00      	cmp	r4, #0
 801556e:	d156      	bne.n	801561e <rcl_validate_topic_name+0x162>
 8015570:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8015574:	4620      	mov	r0, r4
 8015576:	d061      	beq.n	801563c <rcl_validate_topic_name+0x180>
 8015578:	f108 0e01 	add.w	lr, r8, #1
 801557c:	e007      	b.n	801558e <rcl_validate_topic_name+0xd2>
 801557e:	2801      	cmp	r0, #1
 8015580:	d047      	beq.n	8015612 <rcl_validate_topic_name+0x156>
 8015582:	461a      	mov	r2, r3
 8015584:	4291      	cmp	r1, r2
 8015586:	4618      	mov	r0, r3
 8015588:	f105 0501 	add.w	r5, r5, #1
 801558c:	d944      	bls.n	8015618 <rcl_validate_topic_name+0x15c>
 801558e:	4580      	cmp	r8, r0
 8015590:	f100 0301 	add.w	r3, r0, #1
 8015594:	d037      	beq.n	8015606 <rcl_validate_topic_name+0x14a>
 8015596:	782a      	ldrb	r2, [r5, #0]
 8015598:	2a2f      	cmp	r2, #47	@ 0x2f
 801559a:	d1f0      	bne.n	801557e <rcl_validate_topic_name+0xc2>
 801559c:	786b      	ldrb	r3, [r5, #1]
 801559e:	f81c 4003 	ldrb.w	r4, [ip, r3]
 80155a2:	1c43      	adds	r3, r0, #1
 80155a4:	0760      	lsls	r0, r4, #29
 80155a6:	461a      	mov	r2, r3
 80155a8:	d5ec      	bpl.n	8015584 <rcl_validate_topic_name+0xc8>
 80155aa:	2304      	movs	r3, #4
 80155ac:	6033      	str	r3, [r6, #0]
 80155ae:	2f00      	cmp	r7, #0
 80155b0:	d0d2      	beq.n	8015558 <rcl_validate_topic_name+0x9c>
 80155b2:	603a      	str	r2, [r7, #0]
 80155b4:	2000      	movs	r0, #0
 80155b6:	e7ab      	b.n	8015510 <rcl_validate_topic_name+0x54>
 80155b8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80155bc:	0752      	lsls	r2, r2, #29
 80155be:	d5d2      	bpl.n	8015566 <rcl_validate_topic_name+0xaa>
 80155c0:	2c00      	cmp	r4, #0
 80155c2:	d0d0      	beq.n	8015566 <rcl_validate_topic_name+0xaa>
 80155c4:	2900      	cmp	r1, #0
 80155c6:	d0ce      	beq.n	8015566 <rcl_validate_topic_name+0xaa>
 80155c8:	1e4a      	subs	r2, r1, #1
 80155ca:	429a      	cmp	r2, r3
 80155cc:	d1cb      	bne.n	8015566 <rcl_validate_topic_name+0xaa>
 80155ce:	2309      	movs	r3, #9
 80155d0:	6033      	str	r3, [r6, #0]
 80155d2:	2f00      	cmp	r7, #0
 80155d4:	d1bf      	bne.n	8015556 <rcl_validate_topic_name+0x9a>
 80155d6:	e7bf      	b.n	8015558 <rcl_validate_topic_name+0x9c>
 80155d8:	200b      	movs	r0, #11
 80155da:	4770      	bx	lr
 80155dc:	2304      	movs	r3, #4
 80155de:	6033      	str	r3, [r6, #0]
 80155e0:	2f00      	cmp	r7, #0
 80155e2:	d193      	bne.n	801550c <rcl_validate_topic_name+0x50>
 80155e4:	e7b8      	b.n	8015558 <rcl_validate_topic_name+0x9c>
 80155e6:	200b      	movs	r0, #11
 80155e8:	e792      	b.n	8015510 <rcl_validate_topic_name+0x54>
 80155ea:	2900      	cmp	r1, #0
 80155ec:	d0bb      	beq.n	8015566 <rcl_validate_topic_name+0xaa>
 80155ee:	2306      	movs	r3, #6
 80155f0:	6033      	str	r3, [r6, #0]
 80155f2:	2f00      	cmp	r7, #0
 80155f4:	d1af      	bne.n	8015556 <rcl_validate_topic_name+0x9a>
 80155f6:	e7af      	b.n	8015558 <rcl_validate_topic_name+0x9c>
 80155f8:	2c00      	cmp	r4, #0
 80155fa:	d0b4      	beq.n	8015566 <rcl_validate_topic_name+0xaa>
 80155fc:	2308      	movs	r3, #8
 80155fe:	6033      	str	r3, [r6, #0]
 8015600:	2f00      	cmp	r7, #0
 8015602:	d1a8      	bne.n	8015556 <rcl_validate_topic_name+0x9a>
 8015604:	e7a8      	b.n	8015558 <rcl_validate_topic_name+0x9c>
 8015606:	4672      	mov	r2, lr
 8015608:	f108 0301 	add.w	r3, r8, #1
 801560c:	e7ba      	b.n	8015584 <rcl_validate_topic_name+0xc8>
 801560e:	2400      	movs	r4, #0
 8015610:	e7a9      	b.n	8015566 <rcl_validate_topic_name+0xaa>
 8015612:	2202      	movs	r2, #2
 8015614:	4613      	mov	r3, r2
 8015616:	e7b5      	b.n	8015584 <rcl_validate_topic_name+0xc8>
 8015618:	2000      	movs	r0, #0
 801561a:	6030      	str	r0, [r6, #0]
 801561c:	e778      	b.n	8015510 <rcl_validate_topic_name+0x54>
 801561e:	2205      	movs	r2, #5
 8015620:	6032      	str	r2, [r6, #0]
 8015622:	2f00      	cmp	r7, #0
 8015624:	d098      	beq.n	8015558 <rcl_validate_topic_name+0x9c>
 8015626:	603b      	str	r3, [r7, #0]
 8015628:	2000      	movs	r0, #0
 801562a:	e771      	b.n	8015510 <rcl_validate_topic_name+0x54>
 801562c:	2c00      	cmp	r4, #0
 801562e:	bf14      	ite	ne
 8015630:	2308      	movne	r3, #8
 8015632:	2303      	moveq	r3, #3
 8015634:	6033      	str	r3, [r6, #0]
 8015636:	2f00      	cmp	r7, #0
 8015638:	d18d      	bne.n	8015556 <rcl_validate_topic_name+0x9a>
 801563a:	e78d      	b.n	8015558 <rcl_validate_topic_name+0x9c>
 801563c:	f108 0401 	add.w	r4, r8, #1
 8015640:	e007      	b.n	8015652 <rcl_validate_topic_name+0x196>
 8015642:	2801      	cmp	r0, #1
 8015644:	d019      	beq.n	801567a <rcl_validate_topic_name+0x1be>
 8015646:	461a      	mov	r2, r3
 8015648:	4291      	cmp	r1, r2
 801564a:	4618      	mov	r0, r3
 801564c:	f105 0501 	add.w	r5, r5, #1
 8015650:	d9e2      	bls.n	8015618 <rcl_validate_topic_name+0x15c>
 8015652:	4580      	cmp	r8, r0
 8015654:	f100 0301 	add.w	r3, r0, #1
 8015658:	d00b      	beq.n	8015672 <rcl_validate_topic_name+0x1b6>
 801565a:	782a      	ldrb	r2, [r5, #0]
 801565c:	2a2f      	cmp	r2, #47	@ 0x2f
 801565e:	d1f0      	bne.n	8015642 <rcl_validate_topic_name+0x186>
 8015660:	786b      	ldrb	r3, [r5, #1]
 8015662:	f81c e003 	ldrb.w	lr, [ip, r3]
 8015666:	1c43      	adds	r3, r0, #1
 8015668:	f01e 0f04 	tst.w	lr, #4
 801566c:	461a      	mov	r2, r3
 801566e:	d0eb      	beq.n	8015648 <rcl_validate_topic_name+0x18c>
 8015670:	e79b      	b.n	80155aa <rcl_validate_topic_name+0xee>
 8015672:	4622      	mov	r2, r4
 8015674:	f108 0301 	add.w	r3, r8, #1
 8015678:	e7e6      	b.n	8015648 <rcl_validate_topic_name+0x18c>
 801567a:	2307      	movs	r3, #7
 801567c:	6033      	str	r3, [r6, #0]
 801567e:	2f00      	cmp	r7, #0
 8015680:	f43f af6a 	beq.w	8015558 <rcl_validate_topic_name+0x9c>
 8015684:	6038      	str	r0, [r7, #0]
 8015686:	2000      	movs	r0, #0
 8015688:	e742      	b.n	8015510 <rcl_validate_topic_name+0x54>
 801568a:	bf00      	nop
 801568c:	0801e838 	.word	0x0801e838

08015690 <rcl_get_zero_initialized_wait_set>:
 8015690:	b470      	push	{r4, r5, r6}
 8015692:	4d07      	ldr	r5, [pc, #28]	@ (80156b0 <rcl_get_zero_initialized_wait_set+0x20>)
 8015694:	4606      	mov	r6, r0
 8015696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015698:	4634      	mov	r4, r6
 801569a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801569c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801569e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80156a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80156a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80156a4:	682b      	ldr	r3, [r5, #0]
 80156a6:	6023      	str	r3, [r4, #0]
 80156a8:	4630      	mov	r0, r6
 80156aa:	bc70      	pop	{r4, r5, r6}
 80156ac:	4770      	bx	lr
 80156ae:	bf00      	nop
 80156b0:	0801e410 	.word	0x0801e410

080156b4 <rcl_wait_set_is_valid>:
 80156b4:	b118      	cbz	r0, 80156be <rcl_wait_set_is_valid+0xa>
 80156b6:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80156b8:	3800      	subs	r0, #0
 80156ba:	bf18      	it	ne
 80156bc:	2001      	movne	r0, #1
 80156be:	4770      	bx	lr

080156c0 <rcl_wait_set_fini>:
 80156c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156c4:	b082      	sub	sp, #8
 80156c6:	2800      	cmp	r0, #0
 80156c8:	f000 8095 	beq.w	80157f6 <rcl_wait_set_fini+0x136>
 80156cc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80156ce:	4604      	mov	r4, r0
 80156d0:	2e00      	cmp	r6, #0
 80156d2:	f000 808c 	beq.w	80157ee <rcl_wait_set_fini+0x12e>
 80156d6:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80156d8:	f001 fd8c 	bl	80171f4 <rmw_destroy_wait_set>
 80156dc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80156de:	1e06      	subs	r6, r0, #0
 80156e0:	bf18      	it	ne
 80156e2:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80156e6:	2d00      	cmp	r5, #0
 80156e8:	f000 8081 	beq.w	80157ee <rcl_wait_set_fini+0x12e>
 80156ec:	6820      	ldr	r0, [r4, #0]
 80156ee:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80156f2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80156f4:	2700      	movs	r7, #0
 80156f6:	6067      	str	r7, [r4, #4]
 80156f8:	602f      	str	r7, [r5, #0]
 80156fa:	b120      	cbz	r0, 8015706 <rcl_wait_set_fini+0x46>
 80156fc:	9101      	str	r1, [sp, #4]
 80156fe:	47c0      	blx	r8
 8015700:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015702:	9901      	ldr	r1, [sp, #4]
 8015704:	6027      	str	r7, [r4, #0]
 8015706:	68a8      	ldr	r0, [r5, #8]
 8015708:	b120      	cbz	r0, 8015714 <rcl_wait_set_fini+0x54>
 801570a:	47c0      	blx	r8
 801570c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801570e:	2300      	movs	r3, #0
 8015710:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8015714:	68a0      	ldr	r0, [r4, #8]
 8015716:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015718:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801571a:	f04f 0800 	mov.w	r8, #0
 801571e:	f8c4 800c 	str.w	r8, [r4, #12]
 8015722:	f8c5 800c 	str.w	r8, [r5, #12]
 8015726:	b128      	cbz	r0, 8015734 <rcl_wait_set_fini+0x74>
 8015728:	47b8      	blx	r7
 801572a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801572c:	f8c4 8008 	str.w	r8, [r4, #8]
 8015730:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015732:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015734:	6968      	ldr	r0, [r5, #20]
 8015736:	f04f 0800 	mov.w	r8, #0
 801573a:	f8c5 8010 	str.w	r8, [r5, #16]
 801573e:	b128      	cbz	r0, 801574c <rcl_wait_set_fini+0x8c>
 8015740:	47b8      	blx	r7
 8015742:	f8c5 8014 	str.w	r8, [r5, #20]
 8015746:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015748:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801574a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801574c:	6920      	ldr	r0, [r4, #16]
 801574e:	f04f 0800 	mov.w	r8, #0
 8015752:	f8c4 8014 	str.w	r8, [r4, #20]
 8015756:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801575a:	b128      	cbz	r0, 8015768 <rcl_wait_set_fini+0xa8>
 801575c:	47b8      	blx	r7
 801575e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015760:	f8c4 8010 	str.w	r8, [r4, #16]
 8015764:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015766:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015768:	69a0      	ldr	r0, [r4, #24]
 801576a:	f04f 0800 	mov.w	r8, #0
 801576e:	f8c4 801c 	str.w	r8, [r4, #28]
 8015772:	f8c5 8018 	str.w	r8, [r5, #24]
 8015776:	b128      	cbz	r0, 8015784 <rcl_wait_set_fini+0xc4>
 8015778:	9101      	str	r1, [sp, #4]
 801577a:	47b8      	blx	r7
 801577c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801577e:	9901      	ldr	r1, [sp, #4]
 8015780:	f8c4 8018 	str.w	r8, [r4, #24]
 8015784:	6a28      	ldr	r0, [r5, #32]
 8015786:	b120      	cbz	r0, 8015792 <rcl_wait_set_fini+0xd2>
 8015788:	47b8      	blx	r7
 801578a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801578c:	2300      	movs	r3, #0
 801578e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015792:	6a20      	ldr	r0, [r4, #32]
 8015794:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015798:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801579a:	2700      	movs	r7, #0
 801579c:	6267      	str	r7, [r4, #36]	@ 0x24
 801579e:	626f      	str	r7, [r5, #36]	@ 0x24
 80157a0:	b120      	cbz	r0, 80157ac <rcl_wait_set_fini+0xec>
 80157a2:	9101      	str	r1, [sp, #4]
 80157a4:	47c0      	blx	r8
 80157a6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80157a8:	9901      	ldr	r1, [sp, #4]
 80157aa:	6227      	str	r7, [r4, #32]
 80157ac:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80157ae:	b120      	cbz	r0, 80157ba <rcl_wait_set_fini+0xfa>
 80157b0:	47c0      	blx	r8
 80157b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80157b4:	2300      	movs	r3, #0
 80157b6:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 80157ba:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80157bc:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80157c0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80157c2:	2700      	movs	r7, #0
 80157c4:	62e7      	str	r7, [r4, #44]	@ 0x2c
 80157c6:	632f      	str	r7, [r5, #48]	@ 0x30
 80157c8:	b120      	cbz	r0, 80157d4 <rcl_wait_set_fini+0x114>
 80157ca:	9101      	str	r1, [sp, #4]
 80157cc:	47c0      	blx	r8
 80157ce:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80157d0:	9901      	ldr	r1, [sp, #4]
 80157d2:	62a7      	str	r7, [r4, #40]	@ 0x28
 80157d4:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80157d6:	b120      	cbz	r0, 80157e2 <rcl_wait_set_fini+0x122>
 80157d8:	47c0      	blx	r8
 80157da:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80157dc:	2300      	movs	r3, #0
 80157de:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80157e2:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80157e4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80157e6:	4628      	mov	r0, r5
 80157e8:	4798      	blx	r3
 80157ea:	2300      	movs	r3, #0
 80157ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80157ee:	4630      	mov	r0, r6
 80157f0:	b002      	add	sp, #8
 80157f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157f6:	260b      	movs	r6, #11
 80157f8:	4630      	mov	r0, r6
 80157fa:	b002      	add	sp, #8
 80157fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015800 <rcl_wait_set_add_subscription>:
 8015800:	b320      	cbz	r0, 801584c <rcl_wait_set_add_subscription+0x4c>
 8015802:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015804:	b570      	push	{r4, r5, r6, lr}
 8015806:	4604      	mov	r4, r0
 8015808:	b1d3      	cbz	r3, 8015840 <rcl_wait_set_add_subscription+0x40>
 801580a:	b319      	cbz	r1, 8015854 <rcl_wait_set_add_subscription+0x54>
 801580c:	681d      	ldr	r5, [r3, #0]
 801580e:	6860      	ldr	r0, [r4, #4]
 8015810:	4285      	cmp	r5, r0
 8015812:	d218      	bcs.n	8015846 <rcl_wait_set_add_subscription+0x46>
 8015814:	6820      	ldr	r0, [r4, #0]
 8015816:	1c6e      	adds	r6, r5, #1
 8015818:	601e      	str	r6, [r3, #0]
 801581a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801581e:	b102      	cbz	r2, 8015822 <rcl_wait_set_add_subscription+0x22>
 8015820:	6015      	str	r5, [r2, #0]
 8015822:	4608      	mov	r0, r1
 8015824:	f7ff fc30 	bl	8015088 <rcl_subscription_get_rmw_handle>
 8015828:	b190      	cbz	r0, 8015850 <rcl_wait_set_add_subscription+0x50>
 801582a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801582c:	6842      	ldr	r2, [r0, #4]
 801582e:	689b      	ldr	r3, [r3, #8]
 8015830:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015834:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015836:	6853      	ldr	r3, [r2, #4]
 8015838:	3301      	adds	r3, #1
 801583a:	6053      	str	r3, [r2, #4]
 801583c:	2000      	movs	r0, #0
 801583e:	bd70      	pop	{r4, r5, r6, pc}
 8015840:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015844:	bd70      	pop	{r4, r5, r6, pc}
 8015846:	f240 3086 	movw	r0, #902	@ 0x386
 801584a:	bd70      	pop	{r4, r5, r6, pc}
 801584c:	200b      	movs	r0, #11
 801584e:	4770      	bx	lr
 8015850:	2001      	movs	r0, #1
 8015852:	bd70      	pop	{r4, r5, r6, pc}
 8015854:	200b      	movs	r0, #11
 8015856:	bd70      	pop	{r4, r5, r6, pc}

08015858 <rcl_wait_set_clear>:
 8015858:	2800      	cmp	r0, #0
 801585a:	d073      	beq.n	8015944 <rcl_wait_set_clear+0xec>
 801585c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801585e:	b510      	push	{r4, lr}
 8015860:	4604      	mov	r4, r0
 8015862:	2b00      	cmp	r3, #0
 8015864:	d070      	beq.n	8015948 <rcl_wait_set_clear+0xf0>
 8015866:	6800      	ldr	r0, [r0, #0]
 8015868:	b138      	cbz	r0, 801587a <rcl_wait_set_clear+0x22>
 801586a:	6862      	ldr	r2, [r4, #4]
 801586c:	2100      	movs	r1, #0
 801586e:	0092      	lsls	r2, r2, #2
 8015870:	f004 ff50 	bl	801a714 <memset>
 8015874:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015876:	2200      	movs	r2, #0
 8015878:	601a      	str	r2, [r3, #0]
 801587a:	68a0      	ldr	r0, [r4, #8]
 801587c:	b138      	cbz	r0, 801588e <rcl_wait_set_clear+0x36>
 801587e:	68e2      	ldr	r2, [r4, #12]
 8015880:	2100      	movs	r1, #0
 8015882:	0092      	lsls	r2, r2, #2
 8015884:	f004 ff46 	bl	801a714 <memset>
 8015888:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801588a:	2200      	movs	r2, #0
 801588c:	60da      	str	r2, [r3, #12]
 801588e:	69a0      	ldr	r0, [r4, #24]
 8015890:	b138      	cbz	r0, 80158a2 <rcl_wait_set_clear+0x4a>
 8015892:	69e2      	ldr	r2, [r4, #28]
 8015894:	2100      	movs	r1, #0
 8015896:	0092      	lsls	r2, r2, #2
 8015898:	f004 ff3c 	bl	801a714 <memset>
 801589c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801589e:	2200      	movs	r2, #0
 80158a0:	619a      	str	r2, [r3, #24]
 80158a2:	6a20      	ldr	r0, [r4, #32]
 80158a4:	b138      	cbz	r0, 80158b6 <rcl_wait_set_clear+0x5e>
 80158a6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80158a8:	2100      	movs	r1, #0
 80158aa:	0092      	lsls	r2, r2, #2
 80158ac:	f004 ff32 	bl	801a714 <memset>
 80158b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158b2:	2200      	movs	r2, #0
 80158b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80158b6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80158b8:	b138      	cbz	r0, 80158ca <rcl_wait_set_clear+0x72>
 80158ba:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80158bc:	2100      	movs	r1, #0
 80158be:	0092      	lsls	r2, r2, #2
 80158c0:	f004 ff28 	bl	801a714 <memset>
 80158c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158c6:	2200      	movs	r2, #0
 80158c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80158ca:	6920      	ldr	r0, [r4, #16]
 80158cc:	b138      	cbz	r0, 80158de <rcl_wait_set_clear+0x86>
 80158ce:	6962      	ldr	r2, [r4, #20]
 80158d0:	2100      	movs	r1, #0
 80158d2:	0092      	lsls	r2, r2, #2
 80158d4:	f004 ff1e 	bl	801a714 <memset>
 80158d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158da:	2200      	movs	r2, #0
 80158dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80158de:	6898      	ldr	r0, [r3, #8]
 80158e0:	b138      	cbz	r0, 80158f2 <rcl_wait_set_clear+0x9a>
 80158e2:	685a      	ldr	r2, [r3, #4]
 80158e4:	2100      	movs	r1, #0
 80158e6:	0092      	lsls	r2, r2, #2
 80158e8:	f004 ff14 	bl	801a714 <memset>
 80158ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158ee:	2200      	movs	r2, #0
 80158f0:	605a      	str	r2, [r3, #4]
 80158f2:	6958      	ldr	r0, [r3, #20]
 80158f4:	b138      	cbz	r0, 8015906 <rcl_wait_set_clear+0xae>
 80158f6:	691a      	ldr	r2, [r3, #16]
 80158f8:	2100      	movs	r1, #0
 80158fa:	0092      	lsls	r2, r2, #2
 80158fc:	f004 ff0a 	bl	801a714 <memset>
 8015900:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015902:	2200      	movs	r2, #0
 8015904:	611a      	str	r2, [r3, #16]
 8015906:	6a18      	ldr	r0, [r3, #32]
 8015908:	b138      	cbz	r0, 801591a <rcl_wait_set_clear+0xc2>
 801590a:	69da      	ldr	r2, [r3, #28]
 801590c:	2100      	movs	r1, #0
 801590e:	0092      	lsls	r2, r2, #2
 8015910:	f004 ff00 	bl	801a714 <memset>
 8015914:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015916:	2200      	movs	r2, #0
 8015918:	61da      	str	r2, [r3, #28]
 801591a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801591c:	b138      	cbz	r0, 801592e <rcl_wait_set_clear+0xd6>
 801591e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015920:	2100      	movs	r1, #0
 8015922:	0092      	lsls	r2, r2, #2
 8015924:	f004 fef6 	bl	801a714 <memset>
 8015928:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801592a:	2200      	movs	r2, #0
 801592c:	629a      	str	r2, [r3, #40]	@ 0x28
 801592e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8015930:	b138      	cbz	r0, 8015942 <rcl_wait_set_clear+0xea>
 8015932:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015934:	2100      	movs	r1, #0
 8015936:	0092      	lsls	r2, r2, #2
 8015938:	f004 feec 	bl	801a714 <memset>
 801593c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801593e:	2000      	movs	r0, #0
 8015940:	6358      	str	r0, [r3, #52]	@ 0x34
 8015942:	bd10      	pop	{r4, pc}
 8015944:	200b      	movs	r0, #11
 8015946:	4770      	bx	lr
 8015948:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801594c:	bd10      	pop	{r4, pc}
 801594e:	bf00      	nop

08015950 <rcl_wait_set_resize>:
 8015950:	2800      	cmp	r0, #0
 8015952:	f000 81a6 	beq.w	8015ca2 <rcl_wait_set_resize+0x352>
 8015956:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801595a:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 801595e:	b083      	sub	sp, #12
 8015960:	4604      	mov	r4, r0
 8015962:	f1ba 0f00 	cmp.w	sl, #0
 8015966:	f000 819e 	beq.w	8015ca6 <rcl_wait_set_resize+0x356>
 801596a:	461e      	mov	r6, r3
 801596c:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8015970:	f04f 0800 	mov.w	r8, #0
 8015974:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8015978:	9300      	str	r3, [sp, #0]
 801597a:	f8c0 8004 	str.w	r8, [r0, #4]
 801597e:	460f      	mov	r7, r1
 8015980:	4615      	mov	r5, r2
 8015982:	f8ca 8000 	str.w	r8, [sl]
 8015986:	2900      	cmp	r1, #0
 8015988:	f000 80c9 	beq.w	8015b1e <rcl_wait_set_resize+0x1ce>
 801598c:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8015990:	6800      	ldr	r0, [r0, #0]
 8015992:	4651      	mov	r1, sl
 8015994:	464a      	mov	r2, r9
 8015996:	4798      	blx	r3
 8015998:	6020      	str	r0, [r4, #0]
 801599a:	2800      	cmp	r0, #0
 801599c:	f000 80d8 	beq.w	8015b50 <rcl_wait_set_resize+0x200>
 80159a0:	4652      	mov	r2, sl
 80159a2:	4641      	mov	r1, r8
 80159a4:	f004 feb6 	bl	801a714 <memset>
 80159a8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80159aa:	6067      	str	r7, [r4, #4]
 80159ac:	6898      	ldr	r0, [r3, #8]
 80159ae:	f8c3 8004 	str.w	r8, [r3, #4]
 80159b2:	9301      	str	r3, [sp, #4]
 80159b4:	464a      	mov	r2, r9
 80159b6:	9b00      	ldr	r3, [sp, #0]
 80159b8:	4651      	mov	r1, sl
 80159ba:	4798      	blx	r3
 80159bc:	9b01      	ldr	r3, [sp, #4]
 80159be:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80159c0:	6098      	str	r0, [r3, #8]
 80159c2:	6897      	ldr	r7, [r2, #8]
 80159c4:	2f00      	cmp	r7, #0
 80159c6:	f000 80be 	beq.w	8015b46 <rcl_wait_set_resize+0x1f6>
 80159ca:	4652      	mov	r2, sl
 80159cc:	4641      	mov	r1, r8
 80159ce:	4638      	mov	r0, r7
 80159d0:	f004 fea0 	bl	801a714 <memset>
 80159d4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80159d8:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 80159dc:	2700      	movs	r7, #0
 80159de:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 80159e2:	60e7      	str	r7, [r4, #12]
 80159e4:	f8ca 700c 	str.w	r7, [sl, #12]
 80159e8:	2d00      	cmp	r5, #0
 80159ea:	f040 80b5 	bne.w	8015b58 <rcl_wait_set_resize+0x208>
 80159ee:	68a0      	ldr	r0, [r4, #8]
 80159f0:	b130      	cbz	r0, 8015a00 <rcl_wait_set_resize+0xb0>
 80159f2:	4641      	mov	r1, r8
 80159f4:	4790      	blx	r2
 80159f6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 80159fa:	60a5      	str	r5, [r4, #8]
 80159fc:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015a00:	2700      	movs	r7, #0
 8015a02:	19ad      	adds	r5, r5, r6
 8015a04:	f8ca 7010 	str.w	r7, [sl, #16]
 8015a08:	f040 80be 	bne.w	8015b88 <rcl_wait_set_resize+0x238>
 8015a0c:	f8da 0014 	ldr.w	r0, [sl, #20]
 8015a10:	b148      	cbz	r0, 8015a26 <rcl_wait_set_resize+0xd6>
 8015a12:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 8015a16:	4641      	mov	r1, r8
 8015a18:	4798      	blx	r3
 8015a1a:	f8ca 5014 	str.w	r5, [sl, #20]
 8015a1e:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015a22:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015a26:	2500      	movs	r5, #0
 8015a28:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8015a2c:	6165      	str	r5, [r4, #20]
 8015a2e:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8015a32:	2e00      	cmp	r6, #0
 8015a34:	f040 80bf 	bne.w	8015bb6 <rcl_wait_set_resize+0x266>
 8015a38:	6920      	ldr	r0, [r4, #16]
 8015a3a:	b140      	cbz	r0, 8015a4e <rcl_wait_set_resize+0xfe>
 8015a3c:	4641      	mov	r1, r8
 8015a3e:	47c8      	blx	r9
 8015a40:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015a44:	6126      	str	r6, [r4, #16]
 8015a46:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8015a4a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015a4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015a50:	2500      	movs	r5, #0
 8015a52:	61e5      	str	r5, [r4, #28]
 8015a54:	f8ca 5018 	str.w	r5, [sl, #24]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	f040 80c1 	bne.w	8015be0 <rcl_wait_set_resize+0x290>
 8015a5e:	69a0      	ldr	r0, [r4, #24]
 8015a60:	b128      	cbz	r0, 8015a6e <rcl_wait_set_resize+0x11e>
 8015a62:	4641      	mov	r1, r8
 8015a64:	47c8      	blx	r9
 8015a66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015a68:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015a6c:	61a3      	str	r3, [r4, #24]
 8015a6e:	f8da 0020 	ldr.w	r0, [sl, #32]
 8015a72:	b130      	cbz	r0, 8015a82 <rcl_wait_set_resize+0x132>
 8015a74:	4641      	mov	r1, r8
 8015a76:	47c8      	blx	r9
 8015a78:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8015a82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015a84:	f8da 7058 	ldr.w	r7, [sl, #88]	@ 0x58
 8015a88:	2600      	movs	r6, #0
 8015a8a:	e9da 8913 	ldrd	r8, r9, [sl, #76]	@ 0x4c
 8015a8e:	6266      	str	r6, [r4, #36]	@ 0x24
 8015a90:	f8ca 6024 	str.w	r6, [sl, #36]	@ 0x24
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	f000 80c8 	beq.w	8015c2a <rcl_wait_set_resize+0x2da>
 8015a9a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8015a9e:	6a20      	ldr	r0, [r4, #32]
 8015aa0:	4651      	mov	r1, sl
 8015aa2:	463a      	mov	r2, r7
 8015aa4:	47c8      	blx	r9
 8015aa6:	6220      	str	r0, [r4, #32]
 8015aa8:	2800      	cmp	r0, #0
 8015aaa:	d051      	beq.n	8015b50 <rcl_wait_set_resize+0x200>
 8015aac:	4652      	mov	r2, sl
 8015aae:	4631      	mov	r1, r6
 8015ab0:	f004 fe30 	bl	801a714 <memset>
 8015ab4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015ab6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015ab8:	6263      	str	r3, [r4, #36]	@ 0x24
 8015aba:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8015abc:	62ae      	str	r6, [r5, #40]	@ 0x28
 8015abe:	463a      	mov	r2, r7
 8015ac0:	4651      	mov	r1, sl
 8015ac2:	47c8      	blx	r9
 8015ac4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ac6:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8015ac8:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8015aca:	2d00      	cmp	r5, #0
 8015acc:	f000 8105 	beq.w	8015cda <rcl_wait_set_resize+0x38a>
 8015ad0:	4652      	mov	r2, sl
 8015ad2:	4631      	mov	r1, r6
 8015ad4:	4628      	mov	r0, r5
 8015ad6:	f004 fe1d 	bl	801a714 <memset>
 8015ada:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015ade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ae0:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8015ae4:	2500      	movs	r5, #0
 8015ae6:	e9da 7913 	ldrd	r7, r9, [sl, #76]	@ 0x4c
 8015aea:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8015aec:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	f040 80af 	bne.w	8015c54 <rcl_wait_set_resize+0x304>
 8015af6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015af8:	b128      	cbz	r0, 8015b06 <rcl_wait_set_resize+0x1b6>
 8015afa:	4631      	mov	r1, r6
 8015afc:	47b8      	blx	r7
 8015afe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b00:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015b04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015b06:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8015b0a:	b310      	cbz	r0, 8015b52 <rcl_wait_set_resize+0x202>
 8015b0c:	4631      	mov	r1, r6
 8015b0e:	47b8      	blx	r7
 8015b10:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b12:	2000      	movs	r0, #0
 8015b14:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8015b18:	b003      	add	sp, #12
 8015b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b1e:	6800      	ldr	r0, [r0, #0]
 8015b20:	b120      	cbz	r0, 8015b2c <rcl_wait_set_resize+0x1dc>
 8015b22:	4649      	mov	r1, r9
 8015b24:	47d8      	blx	fp
 8015b26:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015b2a:	6027      	str	r7, [r4, #0]
 8015b2c:	f8da 0008 	ldr.w	r0, [sl, #8]
 8015b30:	2800      	cmp	r0, #0
 8015b32:	f43f af51 	beq.w	80159d8 <rcl_wait_set_resize+0x88>
 8015b36:	4649      	mov	r1, r9
 8015b38:	47d8      	blx	fp
 8015b3a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015b3e:	2300      	movs	r3, #0
 8015b40:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8015b44:	e748      	b.n	80159d8 <rcl_wait_set_resize+0x88>
 8015b46:	6820      	ldr	r0, [r4, #0]
 8015b48:	4649      	mov	r1, r9
 8015b4a:	47d8      	blx	fp
 8015b4c:	e9c4 7700 	strd	r7, r7, [r4]
 8015b50:	200a      	movs	r0, #10
 8015b52:	b003      	add	sp, #12
 8015b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b58:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8015b5c:	68a0      	ldr	r0, [r4, #8]
 8015b5e:	4642      	mov	r2, r8
 8015b60:	4649      	mov	r1, r9
 8015b62:	4798      	blx	r3
 8015b64:	60a0      	str	r0, [r4, #8]
 8015b66:	2800      	cmp	r0, #0
 8015b68:	d0f2      	beq.n	8015b50 <rcl_wait_set_resize+0x200>
 8015b6a:	4639      	mov	r1, r7
 8015b6c:	464a      	mov	r2, r9
 8015b6e:	f004 fdd1 	bl	801a714 <memset>
 8015b72:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015b76:	60e5      	str	r5, [r4, #12]
 8015b78:	2700      	movs	r7, #0
 8015b7a:	19ad      	adds	r5, r5, r6
 8015b7c:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015b80:	f8ca 7010 	str.w	r7, [sl, #16]
 8015b84:	f43f af42 	beq.w	8015a0c <rcl_wait_set_resize+0xbc>
 8015b88:	00ad      	lsls	r5, r5, #2
 8015b8a:	4642      	mov	r2, r8
 8015b8c:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8015b90:	f8da 0014 	ldr.w	r0, [sl, #20]
 8015b94:	4629      	mov	r1, r5
 8015b96:	4798      	blx	r3
 8015b98:	4680      	mov	r8, r0
 8015b9a:	f8ca 0014 	str.w	r0, [sl, #20]
 8015b9e:	2800      	cmp	r0, #0
 8015ba0:	f000 8084 	beq.w	8015cac <rcl_wait_set_resize+0x35c>
 8015ba4:	462a      	mov	r2, r5
 8015ba6:	4639      	mov	r1, r7
 8015ba8:	f004 fdb4 	bl	801a714 <memset>
 8015bac:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015bb0:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015bb4:	e737      	b.n	8015a26 <rcl_wait_set_resize+0xd6>
 8015bb6:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8015bba:	6920      	ldr	r0, [r4, #16]
 8015bbc:	4642      	mov	r2, r8
 8015bbe:	4649      	mov	r1, r9
 8015bc0:	47b8      	blx	r7
 8015bc2:	6120      	str	r0, [r4, #16]
 8015bc4:	2800      	cmp	r0, #0
 8015bc6:	d0c3      	beq.n	8015b50 <rcl_wait_set_resize+0x200>
 8015bc8:	464a      	mov	r2, r9
 8015bca:	4629      	mov	r1, r5
 8015bcc:	f004 fda2 	bl	801a714 <memset>
 8015bd0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015bd4:	6166      	str	r6, [r4, #20]
 8015bd6:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8015bda:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015bde:	e736      	b.n	8015a4e <rcl_wait_set_resize+0xfe>
 8015be0:	009e      	lsls	r6, r3, #2
 8015be2:	69a0      	ldr	r0, [r4, #24]
 8015be4:	4631      	mov	r1, r6
 8015be6:	4642      	mov	r2, r8
 8015be8:	47b8      	blx	r7
 8015bea:	61a0      	str	r0, [r4, #24]
 8015bec:	2800      	cmp	r0, #0
 8015bee:	d0af      	beq.n	8015b50 <rcl_wait_set_resize+0x200>
 8015bf0:	4632      	mov	r2, r6
 8015bf2:	4629      	mov	r1, r5
 8015bf4:	f004 fd8e 	bl	801a714 <memset>
 8015bf8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015bfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015bfe:	61e3      	str	r3, [r4, #28]
 8015c00:	f8da 0020 	ldr.w	r0, [sl, #32]
 8015c04:	f8ca 501c 	str.w	r5, [sl, #28]
 8015c08:	4642      	mov	r2, r8
 8015c0a:	4631      	mov	r1, r6
 8015c0c:	47b8      	blx	r7
 8015c0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015c10:	f8ca 0020 	str.w	r0, [sl, #32]
 8015c14:	6a1f      	ldr	r7, [r3, #32]
 8015c16:	2f00      	cmp	r7, #0
 8015c18:	d058      	beq.n	8015ccc <rcl_wait_set_resize+0x37c>
 8015c1a:	4632      	mov	r2, r6
 8015c1c:	4629      	mov	r1, r5
 8015c1e:	4638      	mov	r0, r7
 8015c20:	f004 fd78 	bl	801a714 <memset>
 8015c24:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015c28:	e72b      	b.n	8015a82 <rcl_wait_set_resize+0x132>
 8015c2a:	6a20      	ldr	r0, [r4, #32]
 8015c2c:	b128      	cbz	r0, 8015c3a <rcl_wait_set_resize+0x2ea>
 8015c2e:	4639      	mov	r1, r7
 8015c30:	47c0      	blx	r8
 8015c32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015c34:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015c38:	6223      	str	r3, [r4, #32]
 8015c3a:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8015c3e:	2800      	cmp	r0, #0
 8015c40:	f43f af4d 	beq.w	8015ade <rcl_wait_set_resize+0x18e>
 8015c44:	4639      	mov	r1, r7
 8015c46:	47c0      	blx	r8
 8015c48:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8015c52:	e744      	b.n	8015ade <rcl_wait_set_resize+0x18e>
 8015c54:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8015c58:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015c5a:	4641      	mov	r1, r8
 8015c5c:	4632      	mov	r2, r6
 8015c5e:	47c8      	blx	r9
 8015c60:	62a0      	str	r0, [r4, #40]	@ 0x28
 8015c62:	2800      	cmp	r0, #0
 8015c64:	f43f af74 	beq.w	8015b50 <rcl_wait_set_resize+0x200>
 8015c68:	4642      	mov	r2, r8
 8015c6a:	4629      	mov	r1, r5
 8015c6c:	f004 fd52 	bl	801a714 <memset>
 8015c70:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015c74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c76:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015c78:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8015c7c:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 8015c80:	4632      	mov	r2, r6
 8015c82:	4641      	mov	r1, r8
 8015c84:	47c8      	blx	r9
 8015c86:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015c88:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8015c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c8e:	b35b      	cbz	r3, 8015ce8 <rcl_wait_set_resize+0x398>
 8015c90:	4642      	mov	r2, r8
 8015c92:	4618      	mov	r0, r3
 8015c94:	4629      	mov	r1, r5
 8015c96:	f004 fd3d 	bl	801a714 <memset>
 8015c9a:	4628      	mov	r0, r5
 8015c9c:	b003      	add	sp, #12
 8015c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ca2:	200b      	movs	r0, #11
 8015ca4:	4770      	bx	lr
 8015ca6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015caa:	e752      	b.n	8015b52 <rcl_wait_set_resize+0x202>
 8015cac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015cae:	68a0      	ldr	r0, [r4, #8]
 8015cb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015cb2:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015cb4:	4790      	blx	r2
 8015cb6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015cb8:	6920      	ldr	r0, [r4, #16]
 8015cba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015cbc:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015cbe:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8015cc2:	4790      	blx	r2
 8015cc4:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8015cc8:	200a      	movs	r0, #10
 8015cca:	e742      	b.n	8015b52 <rcl_wait_set_resize+0x202>
 8015ccc:	69a0      	ldr	r0, [r4, #24]
 8015cce:	4641      	mov	r1, r8
 8015cd0:	47c8      	blx	r9
 8015cd2:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8015cd6:	200a      	movs	r0, #10
 8015cd8:	e73b      	b.n	8015b52 <rcl_wait_set_resize+0x202>
 8015cda:	6a20      	ldr	r0, [r4, #32]
 8015cdc:	4639      	mov	r1, r7
 8015cde:	47c0      	blx	r8
 8015ce0:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8015ce4:	200a      	movs	r0, #10
 8015ce6:	e734      	b.n	8015b52 <rcl_wait_set_resize+0x202>
 8015ce8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015cea:	9300      	str	r3, [sp, #0]
 8015cec:	4631      	mov	r1, r6
 8015cee:	47b8      	blx	r7
 8015cf0:	9b00      	ldr	r3, [sp, #0]
 8015cf2:	200a      	movs	r0, #10
 8015cf4:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015cf8:	e72b      	b.n	8015b52 <rcl_wait_set_resize+0x202>
 8015cfa:	bf00      	nop

08015cfc <rcl_wait_set_init>:
 8015cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d00:	b084      	sub	sp, #16
 8015d02:	4604      	mov	r4, r0
 8015d04:	a810      	add	r0, sp, #64	@ 0x40
 8015d06:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8015d0a:	460f      	mov	r7, r1
 8015d0c:	4690      	mov	r8, r2
 8015d0e:	4699      	mov	r9, r3
 8015d10:	f7f8 ff6c 	bl	800ebec <rcutils_allocator_is_valid>
 8015d14:	2800      	cmp	r0, #0
 8015d16:	d06b      	beq.n	8015df0 <rcl_wait_set_init+0xf4>
 8015d18:	2c00      	cmp	r4, #0
 8015d1a:	d069      	beq.n	8015df0 <rcl_wait_set_init+0xf4>
 8015d1c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015d1e:	b125      	cbz	r5, 8015d2a <rcl_wait_set_init+0x2e>
 8015d20:	2564      	movs	r5, #100	@ 0x64
 8015d22:	4628      	mov	r0, r5
 8015d24:	b004      	add	sp, #16
 8015d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d2a:	f1ba 0f00 	cmp.w	sl, #0
 8015d2e:	d05f      	beq.n	8015df0 <rcl_wait_set_init+0xf4>
 8015d30:	4650      	mov	r0, sl
 8015d32:	f7fe fa49 	bl	80141c8 <rcl_context_is_valid>
 8015d36:	2800      	cmp	r0, #0
 8015d38:	d067      	beq.n	8015e0a <rcl_wait_set_init+0x10e>
 8015d3a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015d3c:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8015d3e:	205c      	movs	r0, #92	@ 0x5c
 8015d40:	4798      	blx	r3
 8015d42:	6320      	str	r0, [r4, #48]	@ 0x30
 8015d44:	2800      	cmp	r0, #0
 8015d46:	d062      	beq.n	8015e0e <rcl_wait_set_init+0x112>
 8015d48:	225c      	movs	r2, #92	@ 0x5c
 8015d4a:	4629      	mov	r1, r5
 8015d4c:	f004 fce2 	bl	801a714 <memset>
 8015d50:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015d54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015d58:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015d5a:	f8dc e000 	ldr.w	lr, [ip]
 8015d5e:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8015d62:	f106 0c48 	add.w	ip, r6, #72	@ 0x48
 8015d66:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8015d6a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8015d6e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8015d72:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8015d76:	60b5      	str	r5, [r6, #8]
 8015d78:	6075      	str	r5, [r6, #4]
 8015d7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d7e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015d82:	1899      	adds	r1, r3, r2
 8015d84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d86:	f8da 0000 	ldr.w	r0, [sl]
 8015d8a:	f8cc e000 	str.w	lr, [ip]
 8015d8e:	4419      	add	r1, r3
 8015d90:	4441      	add	r1, r8
 8015d92:	3028      	adds	r0, #40	@ 0x28
 8015d94:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8015d98:	f001 fa22 	bl	80171e0 <rmw_create_wait_set>
 8015d9c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d9e:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8015da0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015da2:	b350      	cbz	r0, 8015dfa <rcl_wait_set_init+0xfe>
 8015da4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015da6:	9302      	str	r3, [sp, #8]
 8015da8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015daa:	9301      	str	r3, [sp, #4]
 8015dac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015dae:	9300      	str	r3, [sp, #0]
 8015db0:	4642      	mov	r2, r8
 8015db2:	464b      	mov	r3, r9
 8015db4:	4639      	mov	r1, r7
 8015db6:	4620      	mov	r0, r4
 8015db8:	f7ff fdca 	bl	8015950 <rcl_wait_set_resize>
 8015dbc:	4605      	mov	r5, r0
 8015dbe:	2800      	cmp	r0, #0
 8015dc0:	d0af      	beq.n	8015d22 <rcl_wait_set_init+0x26>
 8015dc2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015dc4:	bb2b      	cbnz	r3, 8015e12 <rcl_wait_set_init+0x116>
 8015dc6:	2600      	movs	r6, #0
 8015dc8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015dcc:	9600      	str	r6, [sp, #0]
 8015dce:	4633      	mov	r3, r6
 8015dd0:	4632      	mov	r2, r6
 8015dd2:	4631      	mov	r1, r6
 8015dd4:	4620      	mov	r0, r4
 8015dd6:	f7ff fdbb 	bl	8015950 <rcl_wait_set_resize>
 8015dda:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015ddc:	2800      	cmp	r0, #0
 8015dde:	d0a0      	beq.n	8015d22 <rcl_wait_set_init+0x26>
 8015de0:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8015de2:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8015de4:	4798      	blx	r3
 8015de6:	4628      	mov	r0, r5
 8015de8:	6326      	str	r6, [r4, #48]	@ 0x30
 8015dea:	b004      	add	sp, #16
 8015dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015df0:	250b      	movs	r5, #11
 8015df2:	4628      	mov	r0, r5
 8015df4:	b004      	add	sp, #16
 8015df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dfa:	2501      	movs	r5, #1
 8015dfc:	f001 f9fa 	bl	80171f4 <rmw_destroy_wait_set>
 8015e00:	2800      	cmp	r0, #0
 8015e02:	bf18      	it	ne
 8015e04:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8015e08:	e7dd      	b.n	8015dc6 <rcl_wait_set_init+0xca>
 8015e0a:	2565      	movs	r5, #101	@ 0x65
 8015e0c:	e789      	b.n	8015d22 <rcl_wait_set_init+0x26>
 8015e0e:	250a      	movs	r5, #10
 8015e10:	e787      	b.n	8015d22 <rcl_wait_set_init+0x26>
 8015e12:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015e14:	e7f2      	b.n	8015dfc <rcl_wait_set_init+0x100>
 8015e16:	bf00      	nop

08015e18 <rcl_wait_set_add_guard_condition>:
 8015e18:	b320      	cbz	r0, 8015e64 <rcl_wait_set_add_guard_condition+0x4c>
 8015e1a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015e1c:	b570      	push	{r4, r5, r6, lr}
 8015e1e:	4604      	mov	r4, r0
 8015e20:	b1d3      	cbz	r3, 8015e58 <rcl_wait_set_add_guard_condition+0x40>
 8015e22:	b319      	cbz	r1, 8015e6c <rcl_wait_set_add_guard_condition+0x54>
 8015e24:	68dd      	ldr	r5, [r3, #12]
 8015e26:	68e0      	ldr	r0, [r4, #12]
 8015e28:	4285      	cmp	r5, r0
 8015e2a:	d218      	bcs.n	8015e5e <rcl_wait_set_add_guard_condition+0x46>
 8015e2c:	68a0      	ldr	r0, [r4, #8]
 8015e2e:	1c6e      	adds	r6, r5, #1
 8015e30:	60de      	str	r6, [r3, #12]
 8015e32:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015e36:	b102      	cbz	r2, 8015e3a <rcl_wait_set_add_guard_condition+0x22>
 8015e38:	6015      	str	r5, [r2, #0]
 8015e3a:	4608      	mov	r0, r1
 8015e3c:	f003 f8e4 	bl	8019008 <rcl_guard_condition_get_rmw_handle>
 8015e40:	b190      	cbz	r0, 8015e68 <rcl_wait_set_add_guard_condition+0x50>
 8015e42:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e44:	6842      	ldr	r2, [r0, #4]
 8015e46:	695b      	ldr	r3, [r3, #20]
 8015e48:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015e4c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015e4e:	6913      	ldr	r3, [r2, #16]
 8015e50:	3301      	adds	r3, #1
 8015e52:	6113      	str	r3, [r2, #16]
 8015e54:	2000      	movs	r0, #0
 8015e56:	bd70      	pop	{r4, r5, r6, pc}
 8015e58:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015e5c:	bd70      	pop	{r4, r5, r6, pc}
 8015e5e:	f240 3086 	movw	r0, #902	@ 0x386
 8015e62:	bd70      	pop	{r4, r5, r6, pc}
 8015e64:	200b      	movs	r0, #11
 8015e66:	4770      	bx	lr
 8015e68:	2001      	movs	r0, #1
 8015e6a:	bd70      	pop	{r4, r5, r6, pc}
 8015e6c:	200b      	movs	r0, #11
 8015e6e:	bd70      	pop	{r4, r5, r6, pc}

08015e70 <rcl_wait_set_add_timer>:
 8015e70:	b340      	cbz	r0, 8015ec4 <rcl_wait_set_add_timer+0x54>
 8015e72:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015e74:	b570      	push	{r4, r5, r6, lr}
 8015e76:	4604      	mov	r4, r0
 8015e78:	b1f3      	cbz	r3, 8015eb8 <rcl_wait_set_add_timer+0x48>
 8015e7a:	b329      	cbz	r1, 8015ec8 <rcl_wait_set_add_timer+0x58>
 8015e7c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8015e7e:	6965      	ldr	r5, [r4, #20]
 8015e80:	42a8      	cmp	r0, r5
 8015e82:	d21c      	bcs.n	8015ebe <rcl_wait_set_add_timer+0x4e>
 8015e84:	6925      	ldr	r5, [r4, #16]
 8015e86:	1c46      	adds	r6, r0, #1
 8015e88:	641e      	str	r6, [r3, #64]	@ 0x40
 8015e8a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8015e8e:	b102      	cbz	r2, 8015e92 <rcl_wait_set_add_timer+0x22>
 8015e90:	6010      	str	r0, [r2, #0]
 8015e92:	4608      	mov	r0, r1
 8015e94:	f7ff faa4 	bl	80153e0 <rcl_timer_get_guard_condition>
 8015e98:	b168      	cbz	r0, 8015eb6 <rcl_wait_set_add_timer+0x46>
 8015e9a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015e9c:	68e3      	ldr	r3, [r4, #12]
 8015e9e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8015ea0:	3b01      	subs	r3, #1
 8015ea2:	441d      	add	r5, r3
 8015ea4:	f003 f8b0 	bl	8019008 <rcl_guard_condition_get_rmw_handle>
 8015ea8:	b180      	cbz	r0, 8015ecc <rcl_wait_set_add_timer+0x5c>
 8015eaa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015eac:	6842      	ldr	r2, [r0, #4]
 8015eae:	695b      	ldr	r3, [r3, #20]
 8015eb0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015eb4:	2000      	movs	r0, #0
 8015eb6:	bd70      	pop	{r4, r5, r6, pc}
 8015eb8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015ebc:	bd70      	pop	{r4, r5, r6, pc}
 8015ebe:	f240 3086 	movw	r0, #902	@ 0x386
 8015ec2:	bd70      	pop	{r4, r5, r6, pc}
 8015ec4:	200b      	movs	r0, #11
 8015ec6:	4770      	bx	lr
 8015ec8:	200b      	movs	r0, #11
 8015eca:	bd70      	pop	{r4, r5, r6, pc}
 8015ecc:	2001      	movs	r0, #1
 8015ece:	bd70      	pop	{r4, r5, r6, pc}

08015ed0 <rcl_wait_set_add_client>:
 8015ed0:	b320      	cbz	r0, 8015f1c <rcl_wait_set_add_client+0x4c>
 8015ed2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015ed4:	b570      	push	{r4, r5, r6, lr}
 8015ed6:	4604      	mov	r4, r0
 8015ed8:	b1d3      	cbz	r3, 8015f10 <rcl_wait_set_add_client+0x40>
 8015eda:	b319      	cbz	r1, 8015f24 <rcl_wait_set_add_client+0x54>
 8015edc:	699d      	ldr	r5, [r3, #24]
 8015ede:	69e0      	ldr	r0, [r4, #28]
 8015ee0:	4285      	cmp	r5, r0
 8015ee2:	d218      	bcs.n	8015f16 <rcl_wait_set_add_client+0x46>
 8015ee4:	69a0      	ldr	r0, [r4, #24]
 8015ee6:	1c6e      	adds	r6, r5, #1
 8015ee8:	619e      	str	r6, [r3, #24]
 8015eea:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015eee:	b102      	cbz	r2, 8015ef2 <rcl_wait_set_add_client+0x22>
 8015ef0:	6015      	str	r5, [r2, #0]
 8015ef2:	4608      	mov	r0, r1
 8015ef4:	f7fe f908 	bl	8014108 <rcl_client_get_rmw_handle>
 8015ef8:	b190      	cbz	r0, 8015f20 <rcl_wait_set_add_client+0x50>
 8015efa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015efc:	6842      	ldr	r2, [r0, #4]
 8015efe:	6a1b      	ldr	r3, [r3, #32]
 8015f00:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015f04:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015f06:	69d3      	ldr	r3, [r2, #28]
 8015f08:	3301      	adds	r3, #1
 8015f0a:	61d3      	str	r3, [r2, #28]
 8015f0c:	2000      	movs	r0, #0
 8015f0e:	bd70      	pop	{r4, r5, r6, pc}
 8015f10:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015f14:	bd70      	pop	{r4, r5, r6, pc}
 8015f16:	f240 3086 	movw	r0, #902	@ 0x386
 8015f1a:	bd70      	pop	{r4, r5, r6, pc}
 8015f1c:	200b      	movs	r0, #11
 8015f1e:	4770      	bx	lr
 8015f20:	2001      	movs	r0, #1
 8015f22:	bd70      	pop	{r4, r5, r6, pc}
 8015f24:	200b      	movs	r0, #11
 8015f26:	bd70      	pop	{r4, r5, r6, pc}

08015f28 <rcl_wait_set_add_service>:
 8015f28:	b320      	cbz	r0, 8015f74 <rcl_wait_set_add_service+0x4c>
 8015f2a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015f2c:	b570      	push	{r4, r5, r6, lr}
 8015f2e:	4604      	mov	r4, r0
 8015f30:	b1d3      	cbz	r3, 8015f68 <rcl_wait_set_add_service+0x40>
 8015f32:	b319      	cbz	r1, 8015f7c <rcl_wait_set_add_service+0x54>
 8015f34:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8015f36:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8015f38:	4285      	cmp	r5, r0
 8015f3a:	d218      	bcs.n	8015f6e <rcl_wait_set_add_service+0x46>
 8015f3c:	6a20      	ldr	r0, [r4, #32]
 8015f3e:	1c6e      	adds	r6, r5, #1
 8015f40:	625e      	str	r6, [r3, #36]	@ 0x24
 8015f42:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015f46:	b102      	cbz	r2, 8015f4a <rcl_wait_set_add_service+0x22>
 8015f48:	6015      	str	r5, [r2, #0]
 8015f4a:	4608      	mov	r0, r1
 8015f4c:	f7fe fed4 	bl	8014cf8 <rcl_service_get_rmw_handle>
 8015f50:	b190      	cbz	r0, 8015f78 <rcl_wait_set_add_service+0x50>
 8015f52:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f54:	6842      	ldr	r2, [r0, #4]
 8015f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f58:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015f5c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015f5e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8015f60:	3301      	adds	r3, #1
 8015f62:	6293      	str	r3, [r2, #40]	@ 0x28
 8015f64:	2000      	movs	r0, #0
 8015f66:	bd70      	pop	{r4, r5, r6, pc}
 8015f68:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015f6c:	bd70      	pop	{r4, r5, r6, pc}
 8015f6e:	f240 3086 	movw	r0, #902	@ 0x386
 8015f72:	bd70      	pop	{r4, r5, r6, pc}
 8015f74:	200b      	movs	r0, #11
 8015f76:	4770      	bx	lr
 8015f78:	2001      	movs	r0, #1
 8015f7a:	bd70      	pop	{r4, r5, r6, pc}
 8015f7c:	200b      	movs	r0, #11
 8015f7e:	bd70      	pop	{r4, r5, r6, pc}

08015f80 <rcl_wait>:
 8015f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f84:	b08f      	sub	sp, #60	@ 0x3c
 8015f86:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015f8a:	2800      	cmp	r0, #0
 8015f8c:	f000 814c 	beq.w	8016228 <rcl_wait+0x2a8>
 8015f90:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8015f92:	4604      	mov	r4, r0
 8015f94:	2d00      	cmp	r5, #0
 8015f96:	f000 80bc 	beq.w	8016112 <rcl_wait+0x192>
 8015f9a:	6843      	ldr	r3, [r0, #4]
 8015f9c:	b973      	cbnz	r3, 8015fbc <rcl_wait+0x3c>
 8015f9e:	68e3      	ldr	r3, [r4, #12]
 8015fa0:	b963      	cbnz	r3, 8015fbc <rcl_wait+0x3c>
 8015fa2:	6963      	ldr	r3, [r4, #20]
 8015fa4:	b953      	cbnz	r3, 8015fbc <rcl_wait+0x3c>
 8015fa6:	69e3      	ldr	r3, [r4, #28]
 8015fa8:	b943      	cbnz	r3, 8015fbc <rcl_wait+0x3c>
 8015faa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8015fac:	b933      	cbnz	r3, 8015fbc <rcl_wait+0x3c>
 8015fae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8015fb0:	b923      	cbnz	r3, 8015fbc <rcl_wait+0x3c>
 8015fb2:	f240 3085 	movw	r0, #901	@ 0x385
 8015fb6:	b00f      	add	sp, #60	@ 0x3c
 8015fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015fc0:	2a01      	cmp	r2, #1
 8015fc2:	f173 0300 	sbcs.w	r3, r3, #0
 8015fc6:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8015fc8:	db56      	blt.n	8016078 <rcl_wait+0xf8>
 8015fca:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8015fce:	2900      	cmp	r1, #0
 8015fd0:	f000 8149 	beq.w	8016266 <rcl_wait+0x2e6>
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	9307      	str	r3, [sp, #28]
 8015fd8:	469b      	mov	fp, r3
 8015fda:	f04f 0800 	mov.w	r8, #0
 8015fde:	f04f 0900 	mov.w	r9, #0
 8015fe2:	e00d      	b.n	8016000 <rcl_wait+0x80>
 8015fe4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015fe6:	6922      	ldr	r2, [r4, #16]
 8015fe8:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8015fea:	f842 000a 	str.w	r0, [r2, sl]
 8015fee:	f118 0801 	adds.w	r8, r8, #1
 8015ff2:	f149 0900 	adc.w	r9, r9, #0
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	4599      	cmp	r9, r3
 8015ffa:	bf08      	it	eq
 8015ffc:	4588      	cmpeq	r8, r1
 8015ffe:	d243      	bcs.n	8016088 <rcl_wait+0x108>
 8016000:	6922      	ldr	r2, [r4, #16]
 8016002:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 8016006:	f852 000a 	ldr.w	r0, [r2, sl]
 801600a:	2800      	cmp	r0, #0
 801600c:	d0ef      	beq.n	8015fee <rcl_wait+0x6e>
 801600e:	68e2      	ldr	r2, [r4, #12]
 8016010:	6969      	ldr	r1, [r5, #20]
 8016012:	4442      	add	r2, r8
 8016014:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8016018:	b13b      	cbz	r3, 801602a <rcl_wait+0xaa>
 801601a:	692a      	ldr	r2, [r5, #16]
 801601c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8016020:	6921      	ldr	r1, [r4, #16]
 8016022:	3201      	adds	r2, #1
 8016024:	f851 000a 	ldr.w	r0, [r1, sl]
 8016028:	612a      	str	r2, [r5, #16]
 801602a:	f10d 0127 	add.w	r1, sp, #39	@ 0x27
 801602e:	f88d b027 	strb.w	fp, [sp, #39]	@ 0x27
 8016032:	f7ff f9c3 	bl	80153bc <rcl_timer_is_canceled>
 8016036:	2800      	cmp	r0, #0
 8016038:	d1bd      	bne.n	8015fb6 <rcl_wait+0x36>
 801603a:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 801603e:	2a00      	cmp	r2, #0
 8016040:	d1d0      	bne.n	8015fe4 <rcl_wait+0x64>
 8016042:	6922      	ldr	r2, [r4, #16]
 8016044:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016048:	f852 000a 	ldr.w	r0, [r2, sl]
 801604c:	a90a      	add	r1, sp, #40	@ 0x28
 801604e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016052:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016056:	f7ff f98d 	bl	8015374 <rcl_timer_get_time_until_next_call>
 801605a:	2800      	cmp	r0, #0
 801605c:	d1ab      	bne.n	8015fb6 <rcl_wait+0x36>
 801605e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8016062:	42b2      	cmp	r2, r6
 8016064:	eb73 0107 	sbcs.w	r1, r3, r7
 8016068:	da03      	bge.n	8016072 <rcl_wait+0xf2>
 801606a:	461f      	mov	r7, r3
 801606c:	2301      	movs	r3, #1
 801606e:	4616      	mov	r6, r2
 8016070:	9307      	str	r3, [sp, #28]
 8016072:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016074:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8016076:	e7ba      	b.n	8015fee <rcl_wait+0x6e>
 8016078:	2900      	cmp	r1, #0
 801607a:	f000 80de 	beq.w	801623a <rcl_wait+0x2ba>
 801607e:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016082:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016086:	e7a5      	b.n	8015fd4 <rcl_wait+0x54>
 8016088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801608c:	4313      	orrs	r3, r2
 801608e:	d145      	bne.n	801611c <rcl_wait+0x19c>
 8016090:	2300      	movs	r3, #0
 8016092:	2200      	movs	r2, #0
 8016094:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016098:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801609c:	ab0a      	add	r3, sp, #40	@ 0x28
 801609e:	9302      	str	r3, [sp, #8]
 80160a0:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80160a2:	9301      	str	r3, [sp, #4]
 80160a4:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 80160a8:	9300      	str	r3, [sp, #0]
 80160aa:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 80160ae:	f105 031c 	add.w	r3, r5, #28
 80160b2:	f105 0110 	add.w	r1, r5, #16
 80160b6:	1d28      	adds	r0, r5, #4
 80160b8:	f000 ff12 	bl	8016ee0 <rmw_wait>
 80160bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80160be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80160c0:	4680      	mov	r8, r0
 80160c2:	b30a      	cbz	r2, 8016108 <rcl_wait+0x188>
 80160c4:	2500      	movs	r5, #0
 80160c6:	462f      	mov	r7, r5
 80160c8:	e004      	b.n	80160d4 <rcl_wait+0x154>
 80160ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80160cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80160ce:	3501      	adds	r5, #1
 80160d0:	42aa      	cmp	r2, r5
 80160d2:	d919      	bls.n	8016108 <rcl_wait+0x188>
 80160d4:	6922      	ldr	r2, [r4, #16]
 80160d6:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80160da:	f10d 0127 	add.w	r1, sp, #39	@ 0x27
 80160de:	00ae      	lsls	r6, r5, #2
 80160e0:	2800      	cmp	r0, #0
 80160e2:	d0f3      	beq.n	80160cc <rcl_wait+0x14c>
 80160e4:	f88d 7027 	strb.w	r7, [sp, #39]	@ 0x27
 80160e8:	f7ff f90c 	bl	8015304 <rcl_timer_is_ready>
 80160ec:	2800      	cmp	r0, #0
 80160ee:	f47f af62 	bne.w	8015fb6 <rcl_wait+0x36>
 80160f2:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 80160f6:	2a00      	cmp	r2, #0
 80160f8:	d1e7      	bne.n	80160ca <rcl_wait+0x14a>
 80160fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80160fc:	6921      	ldr	r1, [r4, #16]
 80160fe:	518a      	str	r2, [r1, r6]
 8016100:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016102:	3501      	adds	r5, #1
 8016104:	42aa      	cmp	r2, r5
 8016106:	d8e5      	bhi.n	80160d4 <rcl_wait+0x154>
 8016108:	f038 0002 	bics.w	r0, r8, #2
 801610c:	d029      	beq.n	8016162 <rcl_wait+0x1e2>
 801610e:	2001      	movs	r0, #1
 8016110:	e751      	b.n	8015fb6 <rcl_wait+0x36>
 8016112:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016116:	b00f      	add	sp, #60	@ 0x3c
 8016118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801611c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016120:	2a01      	cmp	r2, #1
 8016122:	f173 0300 	sbcs.w	r3, r3, #0
 8016126:	f2c0 8083 	blt.w	8016230 <rcl_wait+0x2b0>
 801612a:	2e00      	cmp	r6, #0
 801612c:	f177 0300 	sbcs.w	r3, r7, #0
 8016130:	bfbc      	itt	lt
 8016132:	2600      	movlt	r6, #0
 8016134:	2700      	movlt	r7, #0
 8016136:	a34e      	add	r3, pc, #312	@ (adr r3, 8016270 <rcl_wait+0x2f0>)
 8016138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801613c:	4630      	mov	r0, r6
 801613e:	4639      	mov	r1, r7
 8016140:	f7ea fdba 	bl	8000cb8 <__aeabi_ldivmod>
 8016144:	a34a      	add	r3, pc, #296	@ (adr r3, 8016270 <rcl_wait+0x2f0>)
 8016146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801614a:	4680      	mov	r8, r0
 801614c:	4689      	mov	r9, r1
 801614e:	4630      	mov	r0, r6
 8016150:	4639      	mov	r1, r7
 8016152:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8016156:	f7ea fdaf 	bl	8000cb8 <__aeabi_ldivmod>
 801615a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801615e:	ab0a      	add	r3, sp, #40	@ 0x28
 8016160:	e79d      	b.n	801609e <rcl_wait+0x11e>
 8016162:	6866      	ldr	r6, [r4, #4]
 8016164:	4602      	mov	r2, r0
 8016166:	b91e      	cbnz	r6, 8016170 <rcl_wait+0x1f0>
 8016168:	e00d      	b.n	8016186 <rcl_wait+0x206>
 801616a:	3201      	adds	r2, #1
 801616c:	42b2      	cmp	r2, r6
 801616e:	d00a      	beq.n	8016186 <rcl_wait+0x206>
 8016170:	6899      	ldr	r1, [r3, #8]
 8016172:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016176:	2900      	cmp	r1, #0
 8016178:	d1f7      	bne.n	801616a <rcl_wait+0x1ea>
 801617a:	6825      	ldr	r5, [r4, #0]
 801617c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016180:	3201      	adds	r2, #1
 8016182:	42b2      	cmp	r2, r6
 8016184:	d1f4      	bne.n	8016170 <rcl_wait+0x1f0>
 8016186:	68e6      	ldr	r6, [r4, #12]
 8016188:	2200      	movs	r2, #0
 801618a:	b91e      	cbnz	r6, 8016194 <rcl_wait+0x214>
 801618c:	e00d      	b.n	80161aa <rcl_wait+0x22a>
 801618e:	3201      	adds	r2, #1
 8016190:	42b2      	cmp	r2, r6
 8016192:	d00a      	beq.n	80161aa <rcl_wait+0x22a>
 8016194:	6959      	ldr	r1, [r3, #20]
 8016196:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801619a:	2900      	cmp	r1, #0
 801619c:	d1f7      	bne.n	801618e <rcl_wait+0x20e>
 801619e:	68a5      	ldr	r5, [r4, #8]
 80161a0:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80161a4:	3201      	adds	r2, #1
 80161a6:	42b2      	cmp	r2, r6
 80161a8:	d1f4      	bne.n	8016194 <rcl_wait+0x214>
 80161aa:	69e6      	ldr	r6, [r4, #28]
 80161ac:	2200      	movs	r2, #0
 80161ae:	b91e      	cbnz	r6, 80161b8 <rcl_wait+0x238>
 80161b0:	e00d      	b.n	80161ce <rcl_wait+0x24e>
 80161b2:	3201      	adds	r2, #1
 80161b4:	42b2      	cmp	r2, r6
 80161b6:	d00a      	beq.n	80161ce <rcl_wait+0x24e>
 80161b8:	6a19      	ldr	r1, [r3, #32]
 80161ba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80161be:	2900      	cmp	r1, #0
 80161c0:	d1f7      	bne.n	80161b2 <rcl_wait+0x232>
 80161c2:	69a5      	ldr	r5, [r4, #24]
 80161c4:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80161c8:	3201      	adds	r2, #1
 80161ca:	42b2      	cmp	r2, r6
 80161cc:	d1f4      	bne.n	80161b8 <rcl_wait+0x238>
 80161ce:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80161d0:	2200      	movs	r2, #0
 80161d2:	b91e      	cbnz	r6, 80161dc <rcl_wait+0x25c>
 80161d4:	e00d      	b.n	80161f2 <rcl_wait+0x272>
 80161d6:	3201      	adds	r2, #1
 80161d8:	4296      	cmp	r6, r2
 80161da:	d00a      	beq.n	80161f2 <rcl_wait+0x272>
 80161dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80161de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80161e2:	2900      	cmp	r1, #0
 80161e4:	d1f7      	bne.n	80161d6 <rcl_wait+0x256>
 80161e6:	6a25      	ldr	r5, [r4, #32]
 80161e8:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80161ec:	3201      	adds	r2, #1
 80161ee:	4296      	cmp	r6, r2
 80161f0:	d1f4      	bne.n	80161dc <rcl_wait+0x25c>
 80161f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80161f4:	2200      	movs	r2, #0
 80161f6:	b91e      	cbnz	r6, 8016200 <rcl_wait+0x280>
 80161f8:	e00d      	b.n	8016216 <rcl_wait+0x296>
 80161fa:	3201      	adds	r2, #1
 80161fc:	42b2      	cmp	r2, r6
 80161fe:	d00a      	beq.n	8016216 <rcl_wait+0x296>
 8016200:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8016202:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016206:	2900      	cmp	r1, #0
 8016208:	d1f7      	bne.n	80161fa <rcl_wait+0x27a>
 801620a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 801620c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016210:	3201      	adds	r2, #1
 8016212:	42b2      	cmp	r2, r6
 8016214:	d1f4      	bne.n	8016200 <rcl_wait+0x280>
 8016216:	f1b8 0f02 	cmp.w	r8, #2
 801621a:	f47f aecc 	bne.w	8015fb6 <rcl_wait+0x36>
 801621e:	9b07      	ldr	r3, [sp, #28]
 8016220:	2b00      	cmp	r3, #0
 8016222:	bf08      	it	eq
 8016224:	2002      	moveq	r0, #2
 8016226:	e6c6      	b.n	8015fb6 <rcl_wait+0x36>
 8016228:	200b      	movs	r0, #11
 801622a:	b00f      	add	sp, #60	@ 0x3c
 801622c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016230:	9b07      	ldr	r3, [sp, #28]
 8016232:	2b00      	cmp	r3, #0
 8016234:	f47f af79 	bne.w	801612a <rcl_wait+0x1aa>
 8016238:	e731      	b.n	801609e <rcl_wait+0x11e>
 801623a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801623e:	4313      	orrs	r3, r2
 8016240:	bf08      	it	eq
 8016242:	9107      	streq	r1, [sp, #28]
 8016244:	f43f af24 	beq.w	8016090 <rcl_wait+0x110>
 8016248:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801624c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016250:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016254:	2a01      	cmp	r2, #1
 8016256:	f173 0300 	sbcs.w	r3, r3, #0
 801625a:	f04f 0300 	mov.w	r3, #0
 801625e:	9307      	str	r3, [sp, #28]
 8016260:	f6bf af63 	bge.w	801612a <rcl_wait+0x1aa>
 8016264:	e71b      	b.n	801609e <rcl_wait+0x11e>
 8016266:	4632      	mov	r2, r6
 8016268:	463b      	mov	r3, r7
 801626a:	e7f3      	b.n	8016254 <rcl_wait+0x2d4>
 801626c:	f3af 8000 	nop.w
 8016270:	3b9aca00 	.word	0x3b9aca00
 8016274:	00000000 	.word	0x00000000

08016278 <__atomic_load_8>:
 8016278:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801627c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8016280:	4b14      	ldr	r3, [pc, #80]	@ (80162d4 <__atomic_load_8+0x5c>)
 8016282:	4a15      	ldr	r2, [pc, #84]	@ (80162d8 <__atomic_load_8+0x60>)
 8016284:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016288:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801628c:	fb03 f301 	mul.w	r3, r3, r1
 8016290:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8016294:	fba2 1203 	umull	r1, r2, r2, r3
 8016298:	0912      	lsrs	r2, r2, #4
 801629a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801629e:	b430      	push	{r4, r5}
 80162a0:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 80162a4:	4c0d      	ldr	r4, [pc, #52]	@ (80162dc <__atomic_load_8+0x64>)
 80162a6:	1a9b      	subs	r3, r3, r2
 80162a8:	18e1      	adds	r1, r4, r3
 80162aa:	f04f 0501 	mov.w	r5, #1
 80162ae:	e8d1 2f4f 	ldrexb	r2, [r1]
 80162b2:	e8c1 5f4c 	strexb	ip, r5, [r1]
 80162b6:	f1bc 0f00 	cmp.w	ip, #0
 80162ba:	d1f8      	bne.n	80162ae <__atomic_load_8+0x36>
 80162bc:	f3bf 8f5b 	dmb	ish
 80162c0:	b2d2      	uxtb	r2, r2
 80162c2:	2a00      	cmp	r2, #0
 80162c4:	d1f3      	bne.n	80162ae <__atomic_load_8+0x36>
 80162c6:	e9d0 0100 	ldrd	r0, r1, [r0]
 80162ca:	f3bf 8f5b 	dmb	ish
 80162ce:	54e2      	strb	r2, [r4, r3]
 80162d0:	bc30      	pop	{r4, r5}
 80162d2:	4770      	bx	lr
 80162d4:	27d4eb2d 	.word	0x27d4eb2d
 80162d8:	b21642c9 	.word	0xb21642c9
 80162dc:	20009dd8 	.word	0x20009dd8

080162e0 <__atomic_store_8>:
 80162e0:	b4f0      	push	{r4, r5, r6, r7}
 80162e2:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 80162e6:	f085 053d 	eor.w	r5, r5, #61	@ 0x3d
 80162ea:	4914      	ldr	r1, [pc, #80]	@ (801633c <__atomic_store_8+0x5c>)
 80162ec:	4c14      	ldr	r4, [pc, #80]	@ (8016340 <__atomic_store_8+0x60>)
 80162ee:	4e15      	ldr	r6, [pc, #84]	@ (8016344 <__atomic_store_8+0x64>)
 80162f0:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 80162f4:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 80162f8:	fb01 f105 	mul.w	r1, r1, r5
 80162fc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016300:	fba4 5401 	umull	r5, r4, r4, r1
 8016304:	0924      	lsrs	r4, r4, #4
 8016306:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801630a:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 801630e:	1b09      	subs	r1, r1, r4
 8016310:	1875      	adds	r5, r6, r1
 8016312:	f04f 0701 	mov.w	r7, #1
 8016316:	e8d5 4f4f 	ldrexb	r4, [r5]
 801631a:	e8c5 7f4c 	strexb	ip, r7, [r5]
 801631e:	f1bc 0f00 	cmp.w	ip, #0
 8016322:	d1f8      	bne.n	8016316 <__atomic_store_8+0x36>
 8016324:	f3bf 8f5b 	dmb	ish
 8016328:	b2e4      	uxtb	r4, r4
 801632a:	2c00      	cmp	r4, #0
 801632c:	d1f3      	bne.n	8016316 <__atomic_store_8+0x36>
 801632e:	e9c0 2300 	strd	r2, r3, [r0]
 8016332:	f3bf 8f5b 	dmb	ish
 8016336:	5474      	strb	r4, [r6, r1]
 8016338:	bcf0      	pop	{r4, r5, r6, r7}
 801633a:	4770      	bx	lr
 801633c:	27d4eb2d 	.word	0x27d4eb2d
 8016340:	b21642c9 	.word	0xb21642c9
 8016344:	20009dd8 	.word	0x20009dd8

08016348 <__atomic_exchange_8>:
 8016348:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 801634c:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016350:	f085 053d 	eor.w	r5, r5, #61	@ 0x3d
 8016354:	4c16      	ldr	r4, [pc, #88]	@ (80163b0 <__atomic_exchange_8+0x68>)
 8016356:	4917      	ldr	r1, [pc, #92]	@ (80163b4 <__atomic_exchange_8+0x6c>)
 8016358:	4e17      	ldr	r6, [pc, #92]	@ (80163b8 <__atomic_exchange_8+0x70>)
 801635a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 801635e:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016362:	fb04 f505 	mul.w	r5, r4, r5
 8016366:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 801636a:	fba1 4105 	umull	r4, r1, r1, r5
 801636e:	0909      	lsrs	r1, r1, #4
 8016370:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8016374:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8016378:	1a6c      	subs	r4, r5, r1
 801637a:	1931      	adds	r1, r6, r4
 801637c:	f04f 0701 	mov.w	r7, #1
 8016380:	e8d1 5f4f 	ldrexb	r5, [r1]
 8016384:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8016388:	f1bc 0f00 	cmp.w	ip, #0
 801638c:	d1f8      	bne.n	8016380 <__atomic_exchange_8+0x38>
 801638e:	f3bf 8f5b 	dmb	ish
 8016392:	b2ed      	uxtb	r5, r5
 8016394:	2d00      	cmp	r5, #0
 8016396:	d1f3      	bne.n	8016380 <__atomic_exchange_8+0x38>
 8016398:	e9d0 8900 	ldrd	r8, r9, [r0]
 801639c:	e9c0 2300 	strd	r2, r3, [r0]
 80163a0:	f3bf 8f5b 	dmb	ish
 80163a4:	5535      	strb	r5, [r6, r4]
 80163a6:	4640      	mov	r0, r8
 80163a8:	4649      	mov	r1, r9
 80163aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80163ae:	4770      	bx	lr
 80163b0:	27d4eb2d 	.word	0x27d4eb2d
 80163b4:	b21642c9 	.word	0xb21642c9
 80163b8:	20009dd8 	.word	0x20009dd8

080163bc <rcutils_is_directory>:
 80163bc:	2000      	movs	r0, #0
 80163be:	4770      	bx	lr

080163c0 <rcutils_join_path>:
 80163c0:	b082      	sub	sp, #8
 80163c2:	e88d 000c 	stmia.w	sp, {r2, r3}
 80163c6:	2000      	movs	r0, #0
 80163c8:	b002      	add	sp, #8
 80163ca:	4770      	bx	lr

080163cc <rcutils_to_native_path>:
 80163cc:	b084      	sub	sp, #16
 80163ce:	a801      	add	r0, sp, #4
 80163d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80163d4:	b004      	add	sp, #16
 80163d6:	2000      	movs	r0, #0
 80163d8:	4770      	bx	lr
 80163da:	bf00      	nop

080163dc <rcutils_format_string_limit>:
 80163dc:	b40f      	push	{r0, r1, r2, r3}
 80163de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163e0:	b083      	sub	sp, #12
 80163e2:	ac08      	add	r4, sp, #32
 80163e4:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 80163e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80163ea:	b34e      	cbz	r6, 8016440 <rcutils_format_string_limit+0x64>
 80163ec:	a808      	add	r0, sp, #32
 80163ee:	f7f8 fbfd 	bl	800ebec <rcutils_allocator_is_valid>
 80163f2:	b328      	cbz	r0, 8016440 <rcutils_format_string_limit+0x64>
 80163f4:	2100      	movs	r1, #0
 80163f6:	ab0f      	add	r3, sp, #60	@ 0x3c
 80163f8:	4608      	mov	r0, r1
 80163fa:	4632      	mov	r2, r6
 80163fc:	e9cd 3300 	strd	r3, r3, [sp]
 8016400:	f000 f904 	bl	801660c <rcutils_vsnprintf>
 8016404:	1c43      	adds	r3, r0, #1
 8016406:	4605      	mov	r5, r0
 8016408:	d01a      	beq.n	8016440 <rcutils_format_string_limit+0x64>
 801640a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801640c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801640e:	1c47      	adds	r7, r0, #1
 8016410:	429f      	cmp	r7, r3
 8016412:	bf84      	itt	hi
 8016414:	461f      	movhi	r7, r3
 8016416:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801641a:	4638      	mov	r0, r7
 801641c:	9b08      	ldr	r3, [sp, #32]
 801641e:	4798      	blx	r3
 8016420:	4604      	mov	r4, r0
 8016422:	b168      	cbz	r0, 8016440 <rcutils_format_string_limit+0x64>
 8016424:	9b01      	ldr	r3, [sp, #4]
 8016426:	4632      	mov	r2, r6
 8016428:	4639      	mov	r1, r7
 801642a:	f000 f8ef 	bl	801660c <rcutils_vsnprintf>
 801642e:	2800      	cmp	r0, #0
 8016430:	db02      	blt.n	8016438 <rcutils_format_string_limit+0x5c>
 8016432:	2300      	movs	r3, #0
 8016434:	5563      	strb	r3, [r4, r5]
 8016436:	e004      	b.n	8016442 <rcutils_format_string_limit+0x66>
 8016438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801643a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801643c:	4620      	mov	r0, r4
 801643e:	4798      	blx	r3
 8016440:	2400      	movs	r4, #0
 8016442:	4620      	mov	r0, r4
 8016444:	b003      	add	sp, #12
 8016446:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801644a:	b004      	add	sp, #16
 801644c:	4770      	bx	lr
 801644e:	bf00      	nop

08016450 <rcutils_get_env>:
 8016450:	b168      	cbz	r0, 801646e <rcutils_get_env+0x1e>
 8016452:	b510      	push	{r4, lr}
 8016454:	460c      	mov	r4, r1
 8016456:	b129      	cbz	r1, 8016464 <rcutils_get_env+0x14>
 8016458:	f002 fe20 	bl	801909c <getenv>
 801645c:	b120      	cbz	r0, 8016468 <rcutils_get_env+0x18>
 801645e:	6020      	str	r0, [r4, #0]
 8016460:	2000      	movs	r0, #0
 8016462:	bd10      	pop	{r4, pc}
 8016464:	4803      	ldr	r0, [pc, #12]	@ (8016474 <rcutils_get_env+0x24>)
 8016466:	bd10      	pop	{r4, pc}
 8016468:	4b03      	ldr	r3, [pc, #12]	@ (8016478 <rcutils_get_env+0x28>)
 801646a:	6023      	str	r3, [r4, #0]
 801646c:	bd10      	pop	{r4, pc}
 801646e:	4803      	ldr	r0, [pc, #12]	@ (801647c <rcutils_get_env+0x2c>)
 8016470:	4770      	bx	lr
 8016472:	bf00      	nop
 8016474:	0801e460 	.word	0x0801e460
 8016478:	0801e584 	.word	0x0801e584
 801647c:	0801e444 	.word	0x0801e444

08016480 <rcutils_repl_str>:
 8016480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016484:	ed2d 8b02 	vpush	{d8}
 8016488:	b087      	sub	sp, #28
 801648a:	4680      	mov	r8, r0
 801648c:	4608      	mov	r0, r1
 801648e:	f8cd 8000 	str.w	r8, [sp]
 8016492:	ee08 2a10 	vmov	s16, r2
 8016496:	468a      	mov	sl, r1
 8016498:	4699      	mov	r9, r3
 801649a:	f7e9 ff01 	bl	80002a0 <strlen>
 801649e:	2600      	movs	r6, #0
 80164a0:	4647      	mov	r7, r8
 80164a2:	9001      	str	r0, [sp, #4]
 80164a4:	46b3      	mov	fp, r6
 80164a6:	2510      	movs	r5, #16
 80164a8:	46b0      	mov	r8, r6
 80164aa:	e01d      	b.n	80164e8 <rcutils_repl_str+0x68>
 80164ac:	f10b 0b01 	add.w	fp, fp, #1
 80164b0:	455e      	cmp	r6, fp
 80164b2:	d211      	bcs.n	80164d8 <rcutils_repl_str+0x58>
 80164b4:	442e      	add	r6, r5
 80164b6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80164ba:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80164be:	00b1      	lsls	r1, r6, #2
 80164c0:	4798      	blx	r3
 80164c2:	2800      	cmp	r0, #0
 80164c4:	f000 8084 	beq.w	80165d0 <rcutils_repl_str+0x150>
 80164c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80164cc:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 80164d0:	bf28      	it	cs
 80164d2:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 80164d6:	4680      	mov	r8, r0
 80164d8:	9a00      	ldr	r2, [sp, #0]
 80164da:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 80164de:	1aa2      	subs	r2, r4, r2
 80164e0:	f843 2c04 	str.w	r2, [r3, #-4]
 80164e4:	9b01      	ldr	r3, [sp, #4]
 80164e6:	18e7      	adds	r7, r4, r3
 80164e8:	4651      	mov	r1, sl
 80164ea:	4638      	mov	r0, r7
 80164ec:	f004 f939 	bl	801a762 <strstr>
 80164f0:	4604      	mov	r4, r0
 80164f2:	4640      	mov	r0, r8
 80164f4:	2c00      	cmp	r4, #0
 80164f6:	d1d9      	bne.n	80164ac <rcutils_repl_str+0x2c>
 80164f8:	46b8      	mov	r8, r7
 80164fa:	4607      	mov	r7, r0
 80164fc:	4640      	mov	r0, r8
 80164fe:	f7e9 fecf 	bl	80002a0 <strlen>
 8016502:	9b00      	ldr	r3, [sp, #0]
 8016504:	eba8 0303 	sub.w	r3, r8, r3
 8016508:	181d      	adds	r5, r3, r0
 801650a:	9504      	str	r5, [sp, #16]
 801650c:	f1bb 0f00 	cmp.w	fp, #0
 8016510:	d03d      	beq.n	801658e <rcutils_repl_str+0x10e>
 8016512:	ee18 0a10 	vmov	r0, s16
 8016516:	f7e9 fec3 	bl	80002a0 <strlen>
 801651a:	9b01      	ldr	r3, [sp, #4]
 801651c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016520:	1ac3      	subs	r3, r0, r3
 8016522:	fb0b 5303 	mla	r3, fp, r3, r5
 8016526:	9305      	str	r3, [sp, #20]
 8016528:	4606      	mov	r6, r0
 801652a:	1c58      	adds	r0, r3, #1
 801652c:	f8d9 3000 	ldr.w	r3, [r9]
 8016530:	4798      	blx	r3
 8016532:	9003      	str	r0, [sp, #12]
 8016534:	2800      	cmp	r0, #0
 8016536:	d04c      	beq.n	80165d2 <rcutils_repl_str+0x152>
 8016538:	683a      	ldr	r2, [r7, #0]
 801653a:	9900      	ldr	r1, [sp, #0]
 801653c:	f004 fa0d 	bl	801a95a <memcpy>
 8016540:	9b03      	ldr	r3, [sp, #12]
 8016542:	683d      	ldr	r5, [r7, #0]
 8016544:	ee18 8a10 	vmov	r8, s16
 8016548:	441d      	add	r5, r3
 801654a:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 801654e:	9302      	str	r3, [sp, #8]
 8016550:	46ba      	mov	sl, r7
 8016552:	4632      	mov	r2, r6
 8016554:	4641      	mov	r1, r8
 8016556:	4628      	mov	r0, r5
 8016558:	f004 f9ff 	bl	801a95a <memcpy>
 801655c:	9b01      	ldr	r3, [sp, #4]
 801655e:	f85a 2b04 	ldr.w	r2, [sl], #4
 8016562:	441a      	add	r2, r3
 8016564:	9b00      	ldr	r3, [sp, #0]
 8016566:	1899      	adds	r1, r3, r2
 8016568:	9b02      	ldr	r3, [sp, #8]
 801656a:	4435      	add	r5, r6
 801656c:	429c      	cmp	r4, r3
 801656e:	4628      	mov	r0, r5
 8016570:	d025      	beq.n	80165be <rcutils_repl_str+0x13e>
 8016572:	f8da 3000 	ldr.w	r3, [sl]
 8016576:	3401      	adds	r4, #1
 8016578:	1a9a      	subs	r2, r3, r2
 801657a:	4415      	add	r5, r2
 801657c:	f004 f9ed 	bl	801a95a <memcpy>
 8016580:	455c      	cmp	r4, fp
 8016582:	d3e6      	bcc.n	8016552 <rcutils_repl_str+0xd2>
 8016584:	9a03      	ldr	r2, [sp, #12]
 8016586:	9905      	ldr	r1, [sp, #20]
 8016588:	2300      	movs	r3, #0
 801658a:	5453      	strb	r3, [r2, r1]
 801658c:	e00b      	b.n	80165a6 <rcutils_repl_str+0x126>
 801658e:	4628      	mov	r0, r5
 8016590:	f8d9 3000 	ldr.w	r3, [r9]
 8016594:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016598:	3001      	adds	r0, #1
 801659a:	4798      	blx	r3
 801659c:	9003      	str	r0, [sp, #12]
 801659e:	b110      	cbz	r0, 80165a6 <rcutils_repl_str+0x126>
 80165a0:	9900      	ldr	r1, [sp, #0]
 80165a2:	f004 f9d2 	bl	801a94a <strcpy>
 80165a6:	4638      	mov	r0, r7
 80165a8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80165ac:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80165b0:	4798      	blx	r3
 80165b2:	9803      	ldr	r0, [sp, #12]
 80165b4:	b007      	add	sp, #28
 80165b6:	ecbd 8b02 	vpop	{d8}
 80165ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165be:	9b04      	ldr	r3, [sp, #16]
 80165c0:	3401      	adds	r4, #1
 80165c2:	1a9a      	subs	r2, r3, r2
 80165c4:	4415      	add	r5, r2
 80165c6:	f004 f9c8 	bl	801a95a <memcpy>
 80165ca:	455c      	cmp	r4, fp
 80165cc:	d3c1      	bcc.n	8016552 <rcutils_repl_str+0xd2>
 80165ce:	e7d9      	b.n	8016584 <rcutils_repl_str+0x104>
 80165d0:	4647      	mov	r7, r8
 80165d2:	2300      	movs	r3, #0
 80165d4:	9303      	str	r3, [sp, #12]
 80165d6:	e7e6      	b.n	80165a6 <rcutils_repl_str+0x126>

080165d8 <rcutils_snprintf>:
 80165d8:	b40c      	push	{r2, r3}
 80165da:	b530      	push	{r4, r5, lr}
 80165dc:	b083      	sub	sp, #12
 80165de:	ab06      	add	r3, sp, #24
 80165e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80165e4:	9301      	str	r3, [sp, #4]
 80165e6:	b152      	cbz	r2, 80165fe <rcutils_snprintf+0x26>
 80165e8:	b138      	cbz	r0, 80165fa <rcutils_snprintf+0x22>
 80165ea:	b141      	cbz	r1, 80165fe <rcutils_snprintf+0x26>
 80165ec:	f003 ffd6 	bl	801a59c <vsniprintf>
 80165f0:	b003      	add	sp, #12
 80165f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80165f6:	b002      	add	sp, #8
 80165f8:	4770      	bx	lr
 80165fa:	2900      	cmp	r1, #0
 80165fc:	d0f6      	beq.n	80165ec <rcutils_snprintf+0x14>
 80165fe:	f004 f977 	bl	801a8f0 <__errno>
 8016602:	2316      	movs	r3, #22
 8016604:	6003      	str	r3, [r0, #0]
 8016606:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801660a:	e7f1      	b.n	80165f0 <rcutils_snprintf+0x18>

0801660c <rcutils_vsnprintf>:
 801660c:	b570      	push	{r4, r5, r6, lr}
 801660e:	b13a      	cbz	r2, 8016620 <rcutils_vsnprintf+0x14>
 8016610:	b120      	cbz	r0, 801661c <rcutils_vsnprintf+0x10>
 8016612:	b129      	cbz	r1, 8016620 <rcutils_vsnprintf+0x14>
 8016614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016618:	f003 bfc0 	b.w	801a59c <vsniprintf>
 801661c:	2900      	cmp	r1, #0
 801661e:	d0f9      	beq.n	8016614 <rcutils_vsnprintf+0x8>
 8016620:	f004 f966 	bl	801a8f0 <__errno>
 8016624:	2316      	movs	r3, #22
 8016626:	6003      	str	r3, [r0, #0]
 8016628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801662c:	bd70      	pop	{r4, r5, r6, pc}
 801662e:	bf00      	nop

08016630 <rcutils_strdup>:
 8016630:	b084      	sub	sp, #16
 8016632:	b570      	push	{r4, r5, r6, lr}
 8016634:	b082      	sub	sp, #8
 8016636:	ac07      	add	r4, sp, #28
 8016638:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801663c:	4605      	mov	r5, r0
 801663e:	b1b0      	cbz	r0, 801666e <rcutils_strdup+0x3e>
 8016640:	f7e9 fe2e 	bl	80002a0 <strlen>
 8016644:	1c42      	adds	r2, r0, #1
 8016646:	9b07      	ldr	r3, [sp, #28]
 8016648:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801664a:	9201      	str	r2, [sp, #4]
 801664c:	4606      	mov	r6, r0
 801664e:	4610      	mov	r0, r2
 8016650:	4798      	blx	r3
 8016652:	4604      	mov	r4, r0
 8016654:	b128      	cbz	r0, 8016662 <rcutils_strdup+0x32>
 8016656:	9a01      	ldr	r2, [sp, #4]
 8016658:	4629      	mov	r1, r5
 801665a:	f004 f97e 	bl	801a95a <memcpy>
 801665e:	2300      	movs	r3, #0
 8016660:	55a3      	strb	r3, [r4, r6]
 8016662:	4620      	mov	r0, r4
 8016664:	b002      	add	sp, #8
 8016666:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801666a:	b004      	add	sp, #16
 801666c:	4770      	bx	lr
 801666e:	4604      	mov	r4, r0
 8016670:	e7f7      	b.n	8016662 <rcutils_strdup+0x32>
 8016672:	bf00      	nop

08016674 <rcutils_strndup>:
 8016674:	b082      	sub	sp, #8
 8016676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016678:	460e      	mov	r6, r1
 801667a:	a906      	add	r1, sp, #24
 801667c:	e881 000c 	stmia.w	r1, {r2, r3}
 8016680:	4605      	mov	r5, r0
 8016682:	b180      	cbz	r0, 80166a6 <rcutils_strndup+0x32>
 8016684:	1c77      	adds	r7, r6, #1
 8016686:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016688:	4638      	mov	r0, r7
 801668a:	4790      	blx	r2
 801668c:	4604      	mov	r4, r0
 801668e:	b128      	cbz	r0, 801669c <rcutils_strndup+0x28>
 8016690:	463a      	mov	r2, r7
 8016692:	4629      	mov	r1, r5
 8016694:	f004 f961 	bl	801a95a <memcpy>
 8016698:	2300      	movs	r3, #0
 801669a:	55a3      	strb	r3, [r4, r6]
 801669c:	4620      	mov	r0, r4
 801669e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80166a2:	b002      	add	sp, #8
 80166a4:	4770      	bx	lr
 80166a6:	4604      	mov	r4, r0
 80166a8:	e7f8      	b.n	801669c <rcutils_strndup+0x28>
 80166aa:	bf00      	nop

080166ac <rmw_get_zero_initialized_context>:
 80166ac:	b510      	push	{r4, lr}
 80166ae:	2250      	movs	r2, #80	@ 0x50
 80166b0:	4604      	mov	r4, r0
 80166b2:	2100      	movs	r1, #0
 80166b4:	f004 f82e 	bl	801a714 <memset>
 80166b8:	4620      	mov	r0, r4
 80166ba:	bd10      	pop	{r4, pc}

080166bc <rmw_get_default_subscription_options>:
 80166bc:	2200      	movs	r2, #0
 80166be:	6002      	str	r2, [r0, #0]
 80166c0:	7102      	strb	r2, [r0, #4]
 80166c2:	4770      	bx	lr

080166c4 <rmw_get_zero_initialized_message_info>:
 80166c4:	b470      	push	{r4, r5, r6}
 80166c6:	4d07      	ldr	r5, [pc, #28]	@ (80166e4 <rmw_get_zero_initialized_message_info+0x20>)
 80166c8:	4606      	mov	r6, r0
 80166ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80166cc:	4634      	mov	r4, r6
 80166ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80166d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80166d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80166d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80166d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80166dc:	4630      	mov	r0, r6
 80166de:	bc70      	pop	{r4, r5, r6}
 80166e0:	4770      	bx	lr
 80166e2:	bf00      	nop
 80166e4:	0801de38 	.word	0x0801de38

080166e8 <rmw_validate_namespace_with_size>:
 80166e8:	b340      	cbz	r0, 801673c <rmw_validate_namespace_with_size+0x54>
 80166ea:	b5d0      	push	{r4, r6, r7, lr}
 80166ec:	4614      	mov	r4, r2
 80166ee:	b0c2      	sub	sp, #264	@ 0x108
 80166f0:	b332      	cbz	r2, 8016740 <rmw_validate_namespace_with_size+0x58>
 80166f2:	2901      	cmp	r1, #1
 80166f4:	460f      	mov	r7, r1
 80166f6:	461e      	mov	r6, r3
 80166f8:	d102      	bne.n	8016700 <rmw_validate_namespace_with_size+0x18>
 80166fa:	7803      	ldrb	r3, [r0, #0]
 80166fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80166fe:	d019      	beq.n	8016734 <rmw_validate_namespace_with_size+0x4c>
 8016700:	aa01      	add	r2, sp, #4
 8016702:	4669      	mov	r1, sp
 8016704:	f7f8 fc44 	bl	800ef90 <rmw_validate_full_topic_name>
 8016708:	b990      	cbnz	r0, 8016730 <rmw_validate_namespace_with_size+0x48>
 801670a:	9b00      	ldr	r3, [sp, #0]
 801670c:	b14b      	cbz	r3, 8016722 <rmw_validate_namespace_with_size+0x3a>
 801670e:	2b07      	cmp	r3, #7
 8016710:	d007      	beq.n	8016722 <rmw_validate_namespace_with_size+0x3a>
 8016712:	1e5a      	subs	r2, r3, #1
 8016714:	2a05      	cmp	r2, #5
 8016716:	d82b      	bhi.n	8016770 <rmw_validate_namespace_with_size+0x88>
 8016718:	e8df f002 	tbb	[pc, r2]
 801671c:	24211e1b 	.word	0x24211e1b
 8016720:	1427      	.short	0x1427
 8016722:	2ff5      	cmp	r7, #245	@ 0xf5
 8016724:	d906      	bls.n	8016734 <rmw_validate_namespace_with_size+0x4c>
 8016726:	2307      	movs	r3, #7
 8016728:	6023      	str	r3, [r4, #0]
 801672a:	b10e      	cbz	r6, 8016730 <rmw_validate_namespace_with_size+0x48>
 801672c:	23f4      	movs	r3, #244	@ 0xf4
 801672e:	6033      	str	r3, [r6, #0]
 8016730:	b042      	add	sp, #264	@ 0x108
 8016732:	bdd0      	pop	{r4, r6, r7, pc}
 8016734:	2000      	movs	r0, #0
 8016736:	6020      	str	r0, [r4, #0]
 8016738:	b042      	add	sp, #264	@ 0x108
 801673a:	bdd0      	pop	{r4, r6, r7, pc}
 801673c:	200b      	movs	r0, #11
 801673e:	4770      	bx	lr
 8016740:	200b      	movs	r0, #11
 8016742:	e7f5      	b.n	8016730 <rmw_validate_namespace_with_size+0x48>
 8016744:	2306      	movs	r3, #6
 8016746:	6023      	str	r3, [r4, #0]
 8016748:	2e00      	cmp	r6, #0
 801674a:	d0f1      	beq.n	8016730 <rmw_validate_namespace_with_size+0x48>
 801674c:	9b01      	ldr	r3, [sp, #4]
 801674e:	6033      	str	r3, [r6, #0]
 8016750:	e7ee      	b.n	8016730 <rmw_validate_namespace_with_size+0x48>
 8016752:	2301      	movs	r3, #1
 8016754:	6023      	str	r3, [r4, #0]
 8016756:	e7f7      	b.n	8016748 <rmw_validate_namespace_with_size+0x60>
 8016758:	2302      	movs	r3, #2
 801675a:	6023      	str	r3, [r4, #0]
 801675c:	e7f4      	b.n	8016748 <rmw_validate_namespace_with_size+0x60>
 801675e:	2303      	movs	r3, #3
 8016760:	6023      	str	r3, [r4, #0]
 8016762:	e7f1      	b.n	8016748 <rmw_validate_namespace_with_size+0x60>
 8016764:	2304      	movs	r3, #4
 8016766:	6023      	str	r3, [r4, #0]
 8016768:	e7ee      	b.n	8016748 <rmw_validate_namespace_with_size+0x60>
 801676a:	2305      	movs	r3, #5
 801676c:	6023      	str	r3, [r4, #0]
 801676e:	e7eb      	b.n	8016748 <rmw_validate_namespace_with_size+0x60>
 8016770:	4a03      	ldr	r2, [pc, #12]	@ (8016780 <rmw_validate_namespace_with_size+0x98>)
 8016772:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016776:	a802      	add	r0, sp, #8
 8016778:	f7ff ff2e 	bl	80165d8 <rcutils_snprintf>
 801677c:	2001      	movs	r0, #1
 801677e:	e7d7      	b.n	8016730 <rmw_validate_namespace_with_size+0x48>
 8016780:	0801e47c 	.word	0x0801e47c

08016784 <rmw_validate_namespace>:
 8016784:	b168      	cbz	r0, 80167a2 <rmw_validate_namespace+0x1e>
 8016786:	b570      	push	{r4, r5, r6, lr}
 8016788:	460d      	mov	r5, r1
 801678a:	4616      	mov	r6, r2
 801678c:	4604      	mov	r4, r0
 801678e:	f7e9 fd87 	bl	80002a0 <strlen>
 8016792:	4633      	mov	r3, r6
 8016794:	4601      	mov	r1, r0
 8016796:	462a      	mov	r2, r5
 8016798:	4620      	mov	r0, r4
 801679a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801679e:	f7ff bfa3 	b.w	80166e8 <rmw_validate_namespace_with_size>
 80167a2:	200b      	movs	r0, #11
 80167a4:	4770      	bx	lr
 80167a6:	bf00      	nop

080167a8 <rmw_namespace_validation_result_string>:
 80167a8:	2807      	cmp	r0, #7
 80167aa:	bf9a      	itte	ls
 80167ac:	4b02      	ldrls	r3, [pc, #8]	@ (80167b8 <rmw_namespace_validation_result_string+0x10>)
 80167ae:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80167b2:	4802      	ldrhi	r0, [pc, #8]	@ (80167bc <rmw_namespace_validation_result_string+0x14>)
 80167b4:	4770      	bx	lr
 80167b6:	bf00      	nop
 80167b8:	0801e674 	.word	0x0801e674
 80167bc:	0801e4cc 	.word	0x0801e4cc

080167c0 <rmw_validate_node_name>:
 80167c0:	2800      	cmp	r0, #0
 80167c2:	d03b      	beq.n	801683c <rmw_validate_node_name+0x7c>
 80167c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167c8:	460f      	mov	r7, r1
 80167ca:	2900      	cmp	r1, #0
 80167cc:	d038      	beq.n	8016840 <rmw_validate_node_name+0x80>
 80167ce:	4615      	mov	r5, r2
 80167d0:	4604      	mov	r4, r0
 80167d2:	f7e9 fd65 	bl	80002a0 <strlen>
 80167d6:	b1e0      	cbz	r0, 8016812 <rmw_validate_node_name+0x52>
 80167d8:	1e63      	subs	r3, r4, #1
 80167da:	eb03 0e00 	add.w	lr, r3, r0
 80167de:	f1c4 0c01 	rsb	ip, r4, #1
 80167e2:	eb0c 0803 	add.w	r8, ip, r3
 80167e6:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 80167ea:	f1a6 0130 	sub.w	r1, r6, #48	@ 0x30
 80167ee:	f026 0220 	bic.w	r2, r6, #32
 80167f2:	2909      	cmp	r1, #9
 80167f4:	f1a2 0241 	sub.w	r2, r2, #65	@ 0x41
 80167f8:	d913      	bls.n	8016822 <rmw_validate_node_name+0x62>
 80167fa:	2a19      	cmp	r2, #25
 80167fc:	d911      	bls.n	8016822 <rmw_validate_node_name+0x62>
 80167fe:	2e5f      	cmp	r6, #95	@ 0x5f
 8016800:	d00f      	beq.n	8016822 <rmw_validate_node_name+0x62>
 8016802:	2302      	movs	r3, #2
 8016804:	603b      	str	r3, [r7, #0]
 8016806:	b10d      	cbz	r5, 801680c <rmw_validate_node_name+0x4c>
 8016808:	f8c5 8000 	str.w	r8, [r5]
 801680c:	2000      	movs	r0, #0
 801680e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016812:	2301      	movs	r3, #1
 8016814:	603b      	str	r3, [r7, #0]
 8016816:	2d00      	cmp	r5, #0
 8016818:	d0f8      	beq.n	801680c <rmw_validate_node_name+0x4c>
 801681a:	2000      	movs	r0, #0
 801681c:	6028      	str	r0, [r5, #0]
 801681e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016822:	4573      	cmp	r3, lr
 8016824:	d1dd      	bne.n	80167e2 <rmw_validate_node_name+0x22>
 8016826:	7822      	ldrb	r2, [r4, #0]
 8016828:	4b0d      	ldr	r3, [pc, #52]	@ (8016860 <rmw_validate_node_name+0xa0>)
 801682a:	5cd3      	ldrb	r3, [r2, r3]
 801682c:	f013 0304 	ands.w	r3, r3, #4
 8016830:	d110      	bne.n	8016854 <rmw_validate_node_name+0x94>
 8016832:	28ff      	cmp	r0, #255	@ 0xff
 8016834:	d806      	bhi.n	8016844 <rmw_validate_node_name+0x84>
 8016836:	603b      	str	r3, [r7, #0]
 8016838:	4618      	mov	r0, r3
 801683a:	e7e8      	b.n	801680e <rmw_validate_node_name+0x4e>
 801683c:	200b      	movs	r0, #11
 801683e:	4770      	bx	lr
 8016840:	200b      	movs	r0, #11
 8016842:	e7e4      	b.n	801680e <rmw_validate_node_name+0x4e>
 8016844:	2204      	movs	r2, #4
 8016846:	603a      	str	r2, [r7, #0]
 8016848:	2d00      	cmp	r5, #0
 801684a:	d0df      	beq.n	801680c <rmw_validate_node_name+0x4c>
 801684c:	22fe      	movs	r2, #254	@ 0xfe
 801684e:	4618      	mov	r0, r3
 8016850:	602a      	str	r2, [r5, #0]
 8016852:	e7dc      	b.n	801680e <rmw_validate_node_name+0x4e>
 8016854:	2303      	movs	r3, #3
 8016856:	603b      	str	r3, [r7, #0]
 8016858:	2d00      	cmp	r5, #0
 801685a:	d1de      	bne.n	801681a <rmw_validate_node_name+0x5a>
 801685c:	e7d6      	b.n	801680c <rmw_validate_node_name+0x4c>
 801685e:	bf00      	nop
 8016860:	0801e838 	.word	0x0801e838

08016864 <rmw_node_name_validation_result_string>:
 8016864:	2804      	cmp	r0, #4
 8016866:	bf9a      	itte	ls
 8016868:	4b02      	ldrls	r3, [pc, #8]	@ (8016874 <rmw_node_name_validation_result_string+0x10>)
 801686a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801686e:	4802      	ldrhi	r0, [pc, #8]	@ (8016878 <rmw_node_name_validation_result_string+0x14>)
 8016870:	4770      	bx	lr
 8016872:	bf00      	nop
 8016874:	0801e780 	.word	0x0801e780
 8016878:	0801e694 	.word	0x0801e694

0801687c <on_status>:
 801687c:	b082      	sub	sp, #8
 801687e:	b002      	add	sp, #8
 8016880:	4770      	bx	lr
 8016882:	bf00      	nop

08016884 <on_topic>:
 8016884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016888:	4a21      	ldr	r2, [pc, #132]	@ (8016910 <on_topic+0x8c>)
 801688a:	b094      	sub	sp, #80	@ 0x50
 801688c:	6812      	ldr	r2, [r2, #0]
 801688e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8016890:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8016894:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016896:	9312      	str	r3, [sp, #72]	@ 0x48
 8016898:	b3ba      	cbz	r2, 801690a <on_topic+0x86>
 801689a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801689e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 80168a2:	e001      	b.n	80168a8 <on_topic+0x24>
 80168a4:	6892      	ldr	r2, [r2, #8]
 80168a6:	b382      	cbz	r2, 801690a <on_topic+0x86>
 80168a8:	68d4      	ldr	r4, [r2, #12]
 80168aa:	8aa3      	ldrh	r3, [r4, #20]
 80168ac:	428b      	cmp	r3, r1
 80168ae:	d1f9      	bne.n	80168a4 <on_topic+0x20>
 80168b0:	7da3      	ldrb	r3, [r4, #22]
 80168b2:	4283      	cmp	r3, r0
 80168b4:	d1f6      	bne.n	80168a4 <on_topic+0x20>
 80168b6:	2248      	movs	r2, #72	@ 0x48
 80168b8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80168bc:	4668      	mov	r0, sp
 80168be:	f004 f84c 	bl	801a95a <memcpy>
 80168c2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 80168c6:	4620      	mov	r0, r4
 80168c8:	f7f9 fc30 	bl	801012c <rmw_uxrce_get_static_input_buffer_for_entity>
 80168cc:	4607      	mov	r7, r0
 80168ce:	b1e0      	cbz	r0, 801690a <on_topic+0x86>
 80168d0:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80168d4:	462a      	mov	r2, r5
 80168d6:	4630      	mov	r0, r6
 80168d8:	f108 0110 	add.w	r1, r8, #16
 80168dc:	f000 fd74 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 80168e0:	b930      	cbnz	r0, 80168f0 <on_topic+0x6c>
 80168e2:	480c      	ldr	r0, [pc, #48]	@ (8016914 <on_topic+0x90>)
 80168e4:	4639      	mov	r1, r7
 80168e6:	b014      	add	sp, #80	@ 0x50
 80168e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80168ec:	f000 b8ba 	b.w	8016a64 <put_memory>
 80168f0:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80168f4:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 80168f8:	f000 fc90 	bl	801721c <rmw_uros_epoch_nanos>
 80168fc:	f608 0218 	addw	r2, r8, #2072	@ 0x818
 8016900:	2305      	movs	r3, #5
 8016902:	e9c2 0100 	strd	r0, r1, [r2]
 8016906:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801690a:	b014      	add	sp, #80	@ 0x50
 801690c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016910:	2000d294 	.word	0x2000d294
 8016914:	2000a028 	.word	0x2000a028

08016918 <on_request>:
 8016918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801691c:	4822      	ldr	r0, [pc, #136]	@ (80169a8 <on_request+0x90>)
 801691e:	b095      	sub	sp, #84	@ 0x54
 8016920:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016922:	6801      	ldr	r1, [r0, #0]
 8016924:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8016926:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 801692a:	2900      	cmp	r1, #0
 801692c:	d039      	beq.n	80169a2 <on_request+0x8a>
 801692e:	461d      	mov	r5, r3
 8016930:	e001      	b.n	8016936 <on_request+0x1e>
 8016932:	6889      	ldr	r1, [r1, #8]
 8016934:	b3a9      	cbz	r1, 80169a2 <on_request+0x8a>
 8016936:	68cc      	ldr	r4, [r1, #12]
 8016938:	8b20      	ldrh	r0, [r4, #24]
 801693a:	4290      	cmp	r0, r2
 801693c:	d1f9      	bne.n	8016932 <on_request+0x1a>
 801693e:	2248      	movs	r2, #72	@ 0x48
 8016940:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016944:	4668      	mov	r0, sp
 8016946:	f004 f808 	bl	801a95a <memcpy>
 801694a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 801694e:	4620      	mov	r0, r4
 8016950:	f7f9 fbec 	bl	801012c <rmw_uxrce_get_static_input_buffer_for_entity>
 8016954:	4680      	mov	r8, r0
 8016956:	b320      	cbz	r0, 80169a2 <on_request+0x8a>
 8016958:	f8d0 900c 	ldr.w	r9, [r0, #12]
 801695c:	4632      	mov	r2, r6
 801695e:	4638      	mov	r0, r7
 8016960:	f109 0110 	add.w	r1, r9, #16
 8016964:	f000 fd30 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 8016968:	b930      	cbnz	r0, 8016978 <on_request+0x60>
 801696a:	4810      	ldr	r0, [pc, #64]	@ (80169ac <on_request+0x94>)
 801696c:	4641      	mov	r1, r8
 801696e:	b015      	add	sp, #84	@ 0x54
 8016970:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016974:	f000 b876 	b.w	8016a64 <put_memory>
 8016978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801697a:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 801697e:	f609 0428 	addw	r4, r9, #2088	@ 0x828
 8016982:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 8016986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016988:	e895 0003 	ldmia.w	r5, {r0, r1}
 801698c:	e884 0003 	stmia.w	r4, {r0, r1}
 8016990:	f000 fc44 	bl	801721c <rmw_uros_epoch_nanos>
 8016994:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 8016998:	2303      	movs	r3, #3
 801699a:	e9c2 0100 	strd	r0, r1, [r2]
 801699e:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 80169a2:	b015      	add	sp, #84	@ 0x54
 80169a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169a8:	2000d284 	.word	0x2000d284
 80169ac:	2000a028 	.word	0x2000a028

080169b0 <on_reply>:
 80169b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80169b4:	4821      	ldr	r0, [pc, #132]	@ (8016a3c <on_reply+0x8c>)
 80169b6:	b095      	sub	sp, #84	@ 0x54
 80169b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80169ba:	6801      	ldr	r1, [r0, #0]
 80169bc:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 80169be:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 80169c2:	b3b9      	cbz	r1, 8016a34 <on_reply+0x84>
 80169c4:	461d      	mov	r5, r3
 80169c6:	e001      	b.n	80169cc <on_reply+0x1c>
 80169c8:	6889      	ldr	r1, [r1, #8]
 80169ca:	b399      	cbz	r1, 8016a34 <on_reply+0x84>
 80169cc:	68cc      	ldr	r4, [r1, #12]
 80169ce:	8b20      	ldrh	r0, [r4, #24]
 80169d0:	4290      	cmp	r0, r2
 80169d2:	d1f9      	bne.n	80169c8 <on_reply+0x18>
 80169d4:	2248      	movs	r2, #72	@ 0x48
 80169d6:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80169da:	4668      	mov	r0, sp
 80169dc:	f003 ffbd 	bl	801a95a <memcpy>
 80169e0:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80169e4:	4620      	mov	r0, r4
 80169e6:	f7f9 fba1 	bl	801012c <rmw_uxrce_get_static_input_buffer_for_entity>
 80169ea:	4680      	mov	r8, r0
 80169ec:	b310      	cbz	r0, 8016a34 <on_reply+0x84>
 80169ee:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80169f2:	4632      	mov	r2, r6
 80169f4:	4638      	mov	r0, r7
 80169f6:	f109 0110 	add.w	r1, r9, #16
 80169fa:	f000 fce5 	bl	80173c8 <ucdr_deserialize_array_uint8_t>
 80169fe:	b930      	cbnz	r0, 8016a0e <on_reply+0x5e>
 8016a00:	480f      	ldr	r0, [pc, #60]	@ (8016a40 <on_reply+0x90>)
 8016a02:	4641      	mov	r1, r8
 8016a04:	b015      	add	sp, #84	@ 0x54
 8016a06:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a0a:	f000 b82b 	b.w	8016a64 <put_memory>
 8016a0e:	b2aa      	uxth	r2, r5
 8016a10:	2300      	movs	r3, #0
 8016a12:	f609 0128 	addw	r1, r9, #2088	@ 0x828
 8016a16:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 8016a1a:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 8016a1e:	e9c1 2300 	strd	r2, r3, [r1]
 8016a22:	f000 fbfb 	bl	801721c <rmw_uros_epoch_nanos>
 8016a26:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 8016a2a:	2304      	movs	r3, #4
 8016a2c:	e9c2 0100 	strd	r0, r1, [r2]
 8016a30:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 8016a34:	b015      	add	sp, #84	@ 0x54
 8016a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a3a:	bf00      	nop
 8016a3c:	2000a8b8 	.word	0x2000a8b8
 8016a40:	2000a028 	.word	0x2000a028

08016a44 <get_memory>:
 8016a44:	4603      	mov	r3, r0
 8016a46:	6840      	ldr	r0, [r0, #4]
 8016a48:	b158      	cbz	r0, 8016a62 <get_memory+0x1e>
 8016a4a:	6882      	ldr	r2, [r0, #8]
 8016a4c:	605a      	str	r2, [r3, #4]
 8016a4e:	b10a      	cbz	r2, 8016a54 <get_memory+0x10>
 8016a50:	2100      	movs	r1, #0
 8016a52:	6051      	str	r1, [r2, #4]
 8016a54:	681a      	ldr	r2, [r3, #0]
 8016a56:	6082      	str	r2, [r0, #8]
 8016a58:	b102      	cbz	r2, 8016a5c <get_memory+0x18>
 8016a5a:	6050      	str	r0, [r2, #4]
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	6042      	str	r2, [r0, #4]
 8016a60:	6018      	str	r0, [r3, #0]
 8016a62:	4770      	bx	lr

08016a64 <put_memory>:
 8016a64:	684b      	ldr	r3, [r1, #4]
 8016a66:	b10b      	cbz	r3, 8016a6c <put_memory+0x8>
 8016a68:	688a      	ldr	r2, [r1, #8]
 8016a6a:	609a      	str	r2, [r3, #8]
 8016a6c:	688a      	ldr	r2, [r1, #8]
 8016a6e:	b102      	cbz	r2, 8016a72 <put_memory+0xe>
 8016a70:	6053      	str	r3, [r2, #4]
 8016a72:	6803      	ldr	r3, [r0, #0]
 8016a74:	428b      	cmp	r3, r1
 8016a76:	6843      	ldr	r3, [r0, #4]
 8016a78:	bf08      	it	eq
 8016a7a:	6002      	streq	r2, [r0, #0]
 8016a7c:	608b      	str	r3, [r1, #8]
 8016a7e:	b103      	cbz	r3, 8016a82 <put_memory+0x1e>
 8016a80:	6059      	str	r1, [r3, #4]
 8016a82:	2300      	movs	r3, #0
 8016a84:	604b      	str	r3, [r1, #4]
 8016a86:	6041      	str	r1, [r0, #4]
 8016a88:	4770      	bx	lr
 8016a8a:	bf00      	nop

08016a8c <rmw_destroy_client>:
 8016a8c:	b570      	push	{r4, r5, r6, lr}
 8016a8e:	b128      	cbz	r0, 8016a9c <rmw_destroy_client+0x10>
 8016a90:	4604      	mov	r4, r0
 8016a92:	6800      	ldr	r0, [r0, #0]
 8016a94:	460d      	mov	r5, r1
 8016a96:	f7f9 fcb7 	bl	8010408 <is_uxrce_rmw_identifier_valid>
 8016a9a:	b910      	cbnz	r0, 8016aa2 <rmw_destroy_client+0x16>
 8016a9c:	2401      	movs	r4, #1
 8016a9e:	4620      	mov	r0, r4
 8016aa0:	bd70      	pop	{r4, r5, r6, pc}
 8016aa2:	6863      	ldr	r3, [r4, #4]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d0f9      	beq.n	8016a9c <rmw_destroy_client+0x10>
 8016aa8:	2d00      	cmp	r5, #0
 8016aaa:	d0f7      	beq.n	8016a9c <rmw_destroy_client+0x10>
 8016aac:	6828      	ldr	r0, [r5, #0]
 8016aae:	f7f9 fcab 	bl	8010408 <is_uxrce_rmw_identifier_valid>
 8016ab2:	2800      	cmp	r0, #0
 8016ab4:	d0f2      	beq.n	8016a9c <rmw_destroy_client+0x10>
 8016ab6:	686e      	ldr	r6, [r5, #4]
 8016ab8:	2e00      	cmp	r6, #0
 8016aba:	d0ef      	beq.n	8016a9c <rmw_destroy_client+0x10>
 8016abc:	6864      	ldr	r4, [r4, #4]
 8016abe:	6932      	ldr	r2, [r6, #16]
 8016ac0:	6920      	ldr	r0, [r4, #16]
 8016ac2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016ac6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016aca:	6819      	ldr	r1, [r3, #0]
 8016acc:	f7fa f962 	bl	8010d94 <uxr_buffer_cancel_data>
 8016ad0:	4602      	mov	r2, r0
 8016ad2:	6920      	ldr	r0, [r4, #16]
 8016ad4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016ad8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016adc:	f7f9 fc14 	bl	8010308 <run_xrce_session>
 8016ae0:	6920      	ldr	r0, [r4, #16]
 8016ae2:	6932      	ldr	r2, [r6, #16]
 8016ae4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016ae8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016aec:	6819      	ldr	r1, [r3, #0]
 8016aee:	f7f9 fe27 	bl	8010740 <uxr_buffer_delete_entity>
 8016af2:	4602      	mov	r2, r0
 8016af4:	6920      	ldr	r0, [r4, #16]
 8016af6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016afa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016afe:	f7f9 fc03 	bl	8010308 <run_xrce_session>
 8016b02:	2800      	cmp	r0, #0
 8016b04:	4628      	mov	r0, r5
 8016b06:	bf14      	ite	ne
 8016b08:	2400      	movne	r4, #0
 8016b0a:	2402      	moveq	r4, #2
 8016b0c:	f7f9 faec 	bl	80100e8 <rmw_uxrce_fini_client_memory>
 8016b10:	e7c5      	b.n	8016a9e <rmw_destroy_client+0x12>
 8016b12:	bf00      	nop

08016b14 <rmw_get_implementation_identifier>:
 8016b14:	4b01      	ldr	r3, [pc, #4]	@ (8016b1c <rmw_get_implementation_identifier+0x8>)
 8016b16:	6818      	ldr	r0, [r3, #0]
 8016b18:	4770      	bx	lr
 8016b1a:	bf00      	nop
 8016b1c:	0801e7ac 	.word	0x0801e7ac

08016b20 <create_topic>:
 8016b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b24:	4605      	mov	r5, r0
 8016b26:	b084      	sub	sp, #16
 8016b28:	482b      	ldr	r0, [pc, #172]	@ (8016bd8 <create_topic+0xb8>)
 8016b2a:	460f      	mov	r7, r1
 8016b2c:	4616      	mov	r6, r2
 8016b2e:	f7ff ff89 	bl	8016a44 <get_memory>
 8016b32:	4604      	mov	r4, r0
 8016b34:	2800      	cmp	r0, #0
 8016b36:	d036      	beq.n	8016ba6 <create_topic+0x86>
 8016b38:	692a      	ldr	r2, [r5, #16]
 8016b3a:	68c4      	ldr	r4, [r0, #12]
 8016b3c:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8016be0 <create_topic+0xc0>
 8016b40:	61a5      	str	r5, [r4, #24]
 8016b42:	f241 5396 	movw	r3, #5526	@ 0x1596
 8016b46:	6166      	str	r6, [r4, #20]
 8016b48:	5ad0      	ldrh	r0, [r2, r3]
 8016b4a:	1c41      	adds	r1, r0, #1
 8016b4c:	52d1      	strh	r1, [r2, r3]
 8016b4e:	2102      	movs	r1, #2
 8016b50:	f7fa f8b8 	bl	8010cc4 <uxr_object_id>
 8016b54:	4641      	mov	r1, r8
 8016b56:	6120      	str	r0, [r4, #16]
 8016b58:	223c      	movs	r2, #60	@ 0x3c
 8016b5a:	4638      	mov	r0, r7
 8016b5c:	f7f9 fc3a 	bl	80103d4 <generate_topic_name>
 8016b60:	4607      	mov	r7, r0
 8016b62:	b320      	cbz	r0, 8016bae <create_topic+0x8e>
 8016b64:	4f1d      	ldr	r7, [pc, #116]	@ (8016bdc <create_topic+0xbc>)
 8016b66:	4630      	mov	r0, r6
 8016b68:	4639      	mov	r1, r7
 8016b6a:	2264      	movs	r2, #100	@ 0x64
 8016b6c:	f7f9 fc02 	bl	8010374 <generate_type_name>
 8016b70:	4606      	mov	r6, r0
 8016b72:	b320      	cbz	r0, 8016bbe <create_topic+0x9e>
 8016b74:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 8016b78:	2106      	movs	r1, #6
 8016b7a:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016b7e:	9701      	str	r7, [sp, #4]
 8016b80:	f8cd 8000 	str.w	r8, [sp]
 8016b84:	9102      	str	r1, [sp, #8]
 8016b86:	6811      	ldr	r1, [r2, #0]
 8016b88:	6922      	ldr	r2, [r4, #16]
 8016b8a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016b8e:	f7f9 fe55 	bl	801083c <uxr_buffer_create_topic_bin>
 8016b92:	4602      	mov	r2, r0
 8016b94:	6928      	ldr	r0, [r5, #16]
 8016b96:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016b9a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016b9e:	f7f9 fbb3 	bl	8010308 <run_xrce_session>
 8016ba2:	4605      	mov	r5, r0
 8016ba4:	b198      	cbz	r0, 8016bce <create_topic+0xae>
 8016ba6:	4620      	mov	r0, r4
 8016ba8:	b004      	add	sp, #16
 8016baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bae:	4620      	mov	r0, r4
 8016bb0:	f7f9 fab0 	bl	8010114 <rmw_uxrce_fini_topic_memory>
 8016bb4:	463c      	mov	r4, r7
 8016bb6:	4620      	mov	r0, r4
 8016bb8:	b004      	add	sp, #16
 8016bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bbe:	4620      	mov	r0, r4
 8016bc0:	f7f9 faa8 	bl	8010114 <rmw_uxrce_fini_topic_memory>
 8016bc4:	4634      	mov	r4, r6
 8016bc6:	4620      	mov	r0, r4
 8016bc8:	b004      	add	sp, #16
 8016bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bce:	4620      	mov	r0, r4
 8016bd0:	f7f9 faa0 	bl	8010114 <rmw_uxrce_fini_topic_memory>
 8016bd4:	462c      	mov	r4, r5
 8016bd6:	e7e6      	b.n	8016ba6 <create_topic+0x86>
 8016bd8:	2000d1c0 	.word	0x2000d1c0
 8016bdc:	20009e2c 	.word	0x20009e2c
 8016be0:	20009df0 	.word	0x20009df0

08016be4 <destroy_topic>:
 8016be4:	b538      	push	{r3, r4, r5, lr}
 8016be6:	6985      	ldr	r5, [r0, #24]
 8016be8:	b1d5      	cbz	r5, 8016c20 <destroy_topic+0x3c>
 8016bea:	4604      	mov	r4, r0
 8016bec:	6928      	ldr	r0, [r5, #16]
 8016bee:	6922      	ldr	r2, [r4, #16]
 8016bf0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016bf4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016bf8:	6819      	ldr	r1, [r3, #0]
 8016bfa:	f7f9 fda1 	bl	8010740 <uxr_buffer_delete_entity>
 8016bfe:	4602      	mov	r2, r0
 8016c00:	6928      	ldr	r0, [r5, #16]
 8016c02:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016c06:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016c0a:	f7f9 fb7d 	bl	8010308 <run_xrce_session>
 8016c0e:	2800      	cmp	r0, #0
 8016c10:	4620      	mov	r0, r4
 8016c12:	bf14      	ite	ne
 8016c14:	2400      	movne	r4, #0
 8016c16:	2402      	moveq	r4, #2
 8016c18:	f7f9 fa7c 	bl	8010114 <rmw_uxrce_fini_topic_memory>
 8016c1c:	4620      	mov	r0, r4
 8016c1e:	bd38      	pop	{r3, r4, r5, pc}
 8016c20:	2401      	movs	r4, #1
 8016c22:	4620      	mov	r0, r4
 8016c24:	bd38      	pop	{r3, r4, r5, pc}
 8016c26:	bf00      	nop

08016c28 <rmw_take_request>:
 8016c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c2c:	4605      	mov	r5, r0
 8016c2e:	6800      	ldr	r0, [r0, #0]
 8016c30:	b089      	sub	sp, #36	@ 0x24
 8016c32:	460c      	mov	r4, r1
 8016c34:	4690      	mov	r8, r2
 8016c36:	461e      	mov	r6, r3
 8016c38:	b128      	cbz	r0, 8016c46 <rmw_take_request+0x1e>
 8016c3a:	4b28      	ldr	r3, [pc, #160]	@ (8016cdc <rmw_take_request+0xb4>)
 8016c3c:	6819      	ldr	r1, [r3, #0]
 8016c3e:	f7e9 facf 	bl	80001e0 <strcmp>
 8016c42:	2800      	cmp	r0, #0
 8016c44:	d146      	bne.n	8016cd4 <rmw_take_request+0xac>
 8016c46:	b10e      	cbz	r6, 8016c4c <rmw_take_request+0x24>
 8016c48:	2300      	movs	r3, #0
 8016c4a:	7033      	strb	r3, [r6, #0]
 8016c4c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016c50:	f7f9 fae2 	bl	8010218 <rmw_uxrce_clean_expired_static_input_buffer>
 8016c54:	4648      	mov	r0, r9
 8016c56:	f7f9 fab5 	bl	80101c4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016c5a:	4607      	mov	r7, r0
 8016c5c:	b3b0      	cbz	r0, 8016ccc <rmw_take_request+0xa4>
 8016c5e:	68c5      	ldr	r5, [r0, #12]
 8016c60:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 8016c64:	f8d5 183c 	ldr.w	r1, [r5, #2108]	@ 0x83c
 8016c68:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8016c6c:	7423      	strb	r3, [r4, #16]
 8016c6e:	e9c4 1208 	strd	r1, r2, [r4, #32]
 8016c72:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8016c76:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8016c7a:	74e2      	strb	r2, [r4, #19]
 8016c7c:	f8a4 3011 	strh.w	r3, [r4, #17]
 8016c80:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8016c84:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8016c88:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8016c8c:	61e1      	str	r1, [r4, #28]
 8016c8e:	6162      	str	r2, [r4, #20]
 8016c90:	61a3      	str	r3, [r4, #24]
 8016c92:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016c96:	689b      	ldr	r3, [r3, #8]
 8016c98:	4798      	blx	r3
 8016c9a:	6844      	ldr	r4, [r0, #4]
 8016c9c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8016ca0:	f105 0110 	add.w	r1, r5, #16
 8016ca4:	4668      	mov	r0, sp
 8016ca6:	f7f9 fc83 	bl	80105b0 <ucdr_init_buffer>
 8016caa:	68e3      	ldr	r3, [r4, #12]
 8016cac:	4641      	mov	r1, r8
 8016cae:	4668      	mov	r0, sp
 8016cb0:	4798      	blx	r3
 8016cb2:	4639      	mov	r1, r7
 8016cb4:	4604      	mov	r4, r0
 8016cb6:	480a      	ldr	r0, [pc, #40]	@ (8016ce0 <rmw_take_request+0xb8>)
 8016cb8:	f7ff fed4 	bl	8016a64 <put_memory>
 8016cbc:	b106      	cbz	r6, 8016cc0 <rmw_take_request+0x98>
 8016cbe:	7034      	strb	r4, [r6, #0]
 8016cc0:	f084 0001 	eor.w	r0, r4, #1
 8016cc4:	b2c0      	uxtb	r0, r0
 8016cc6:	b009      	add	sp, #36	@ 0x24
 8016cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ccc:	2001      	movs	r0, #1
 8016cce:	b009      	add	sp, #36	@ 0x24
 8016cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016cd4:	200c      	movs	r0, #12
 8016cd6:	b009      	add	sp, #36	@ 0x24
 8016cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016cdc:	0801e7ac 	.word	0x0801e7ac
 8016ce0:	2000a028 	.word	0x2000a028

08016ce4 <rmw_send_response>:
 8016ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ce6:	4605      	mov	r5, r0
 8016ce8:	6800      	ldr	r0, [r0, #0]
 8016cea:	b091      	sub	sp, #68	@ 0x44
 8016cec:	460c      	mov	r4, r1
 8016cee:	4617      	mov	r7, r2
 8016cf0:	b128      	cbz	r0, 8016cfe <rmw_send_response+0x1a>
 8016cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8016d9c <rmw_send_response+0xb8>)
 8016cf4:	6819      	ldr	r1, [r3, #0]
 8016cf6:	f7e9 fa73 	bl	80001e0 <strcmp>
 8016cfa:	2800      	cmp	r0, #0
 8016cfc:	d143      	bne.n	8016d86 <rmw_send_response+0xa2>
 8016cfe:	4623      	mov	r3, r4
 8016d00:	4626      	mov	r6, r4
 8016d02:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8016d06:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 8016d0a:	6859      	ldr	r1, [r3, #4]
 8016d0c:	686d      	ldr	r5, [r5, #4]
 8016d0e:	689a      	ldr	r2, [r3, #8]
 8016d10:	78b3      	ldrb	r3, [r6, #2]
 8016d12:	f894 c000 	ldrb.w	ip, [r4]
 8016d16:	6966      	ldr	r6, [r4, #20]
 8016d18:	f88d 3016 	strb.w	r3, [sp, #22]
 8016d1c:	ab02      	add	r3, sp, #8
 8016d1e:	f8ad e014 	strh.w	lr, [sp, #20]
 8016d22:	f88d c017 	strb.w	ip, [sp, #23]
 8016d26:	9606      	str	r6, [sp, #24]
 8016d28:	c307      	stmia	r3!, {r0, r1, r2}
 8016d2a:	696b      	ldr	r3, [r5, #20]
 8016d2c:	6922      	ldr	r2, [r4, #16]
 8016d2e:	9207      	str	r2, [sp, #28]
 8016d30:	68db      	ldr	r3, [r3, #12]
 8016d32:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 8016d34:	4798      	blx	r3
 8016d36:	4603      	mov	r3, r0
 8016d38:	4638      	mov	r0, r7
 8016d3a:	685c      	ldr	r4, [r3, #4]
 8016d3c:	6923      	ldr	r3, [r4, #16]
 8016d3e:	4798      	blx	r3
 8016d40:	6933      	ldr	r3, [r6, #16]
 8016d42:	3018      	adds	r0, #24
 8016d44:	9000      	str	r0, [sp, #0]
 8016d46:	692a      	ldr	r2, [r5, #16]
 8016d48:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8016d4a:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016d4e:	ab08      	add	r3, sp, #32
 8016d50:	f7fc f86c 	bl	8012e2c <uxr_prepare_output_stream>
 8016d54:	b910      	cbnz	r0, 8016d5c <rmw_send_response+0x78>
 8016d56:	2001      	movs	r0, #1
 8016d58:	b011      	add	sp, #68	@ 0x44
 8016d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d5c:	a902      	add	r1, sp, #8
 8016d5e:	a808      	add	r0, sp, #32
 8016d60:	f7fd f982 	bl	8014068 <uxr_serialize_SampleIdentity>
 8016d64:	68a3      	ldr	r3, [r4, #8]
 8016d66:	a908      	add	r1, sp, #32
 8016d68:	4638      	mov	r0, r7
 8016d6a:	4798      	blx	r3
 8016d6c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8016d70:	6930      	ldr	r0, [r6, #16]
 8016d72:	2b01      	cmp	r3, #1
 8016d74:	d00a      	beq.n	8016d8c <rmw_send_response+0xa8>
 8016d76:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8016d78:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d7c:	f7fa fdd0 	bl	8011920 <uxr_run_session_until_confirm_delivery>
 8016d80:	2000      	movs	r0, #0
 8016d82:	b011      	add	sp, #68	@ 0x44
 8016d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d86:	200c      	movs	r0, #12
 8016d88:	b011      	add	sp, #68	@ 0x44
 8016d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016d90:	f7fa fa0a 	bl	80111a8 <uxr_flash_output_streams>
 8016d94:	2000      	movs	r0, #0
 8016d96:	b011      	add	sp, #68	@ 0x44
 8016d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d9a:	bf00      	nop
 8016d9c:	0801e7ac 	.word	0x0801e7ac

08016da0 <rmw_take_response>:
 8016da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016da4:	4604      	mov	r4, r0
 8016da6:	6800      	ldr	r0, [r0, #0]
 8016da8:	b089      	sub	sp, #36	@ 0x24
 8016daa:	4688      	mov	r8, r1
 8016dac:	4617      	mov	r7, r2
 8016dae:	461d      	mov	r5, r3
 8016db0:	b120      	cbz	r0, 8016dbc <rmw_take_response+0x1c>
 8016db2:	4b1f      	ldr	r3, [pc, #124]	@ (8016e30 <rmw_take_response+0x90>)
 8016db4:	6819      	ldr	r1, [r3, #0]
 8016db6:	f7e9 fa13 	bl	80001e0 <strcmp>
 8016dba:	bb88      	cbnz	r0, 8016e20 <rmw_take_response+0x80>
 8016dbc:	b10d      	cbz	r5, 8016dc2 <rmw_take_response+0x22>
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	702b      	strb	r3, [r5, #0]
 8016dc2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016dc6:	f7f9 fa27 	bl	8010218 <rmw_uxrce_clean_expired_static_input_buffer>
 8016dca:	4648      	mov	r0, r9
 8016dcc:	f7f9 f9fa 	bl	80101c4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016dd0:	4606      	mov	r6, r0
 8016dd2:	b348      	cbz	r0, 8016e28 <rmw_take_response+0x88>
 8016dd4:	68c4      	ldr	r4, [r0, #12]
 8016dd6:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8016dda:	f604 0328 	addw	r3, r4, #2088	@ 0x828
 8016dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016de2:	68c9      	ldr	r1, [r1, #12]
 8016de4:	e9c8 2308 	strd	r2, r3, [r8, #32]
 8016de8:	4788      	blx	r1
 8016dea:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016dee:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8016df2:	f104 0110 	add.w	r1, r4, #16
 8016df6:	4668      	mov	r0, sp
 8016df8:	f7f9 fbda 	bl	80105b0 <ucdr_init_buffer>
 8016dfc:	4639      	mov	r1, r7
 8016dfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016e02:	4668      	mov	r0, sp
 8016e04:	4798      	blx	r3
 8016e06:	4631      	mov	r1, r6
 8016e08:	4604      	mov	r4, r0
 8016e0a:	480a      	ldr	r0, [pc, #40]	@ (8016e34 <rmw_take_response+0x94>)
 8016e0c:	f7ff fe2a 	bl	8016a64 <put_memory>
 8016e10:	b105      	cbz	r5, 8016e14 <rmw_take_response+0x74>
 8016e12:	702c      	strb	r4, [r5, #0]
 8016e14:	f084 0001 	eor.w	r0, r4, #1
 8016e18:	b2c0      	uxtb	r0, r0
 8016e1a:	b009      	add	sp, #36	@ 0x24
 8016e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e20:	200c      	movs	r0, #12
 8016e22:	b009      	add	sp, #36	@ 0x24
 8016e24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e28:	2001      	movs	r0, #1
 8016e2a:	b009      	add	sp, #36	@ 0x24
 8016e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e30:	0801e7ac 	.word	0x0801e7ac
 8016e34:	2000a028 	.word	0x2000a028

08016e38 <rmw_take_with_info>:
 8016e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e3a:	4604      	mov	r4, r0
 8016e3c:	6800      	ldr	r0, [r0, #0]
 8016e3e:	b089      	sub	sp, #36	@ 0x24
 8016e40:	460f      	mov	r7, r1
 8016e42:	4615      	mov	r5, r2
 8016e44:	b128      	cbz	r0, 8016e52 <rmw_take_with_info+0x1a>
 8016e46:	4b24      	ldr	r3, [pc, #144]	@ (8016ed8 <rmw_take_with_info+0xa0>)
 8016e48:	6819      	ldr	r1, [r3, #0]
 8016e4a:	f7e9 f9c9 	bl	80001e0 <strcmp>
 8016e4e:	2800      	cmp	r0, #0
 8016e50:	d13e      	bne.n	8016ed0 <rmw_take_with_info+0x98>
 8016e52:	b305      	cbz	r5, 8016e96 <rmw_take_with_info+0x5e>
 8016e54:	6864      	ldr	r4, [r4, #4]
 8016e56:	2300      	movs	r3, #0
 8016e58:	702b      	strb	r3, [r5, #0]
 8016e5a:	f7f9 f9dd 	bl	8010218 <rmw_uxrce_clean_expired_static_input_buffer>
 8016e5e:	4620      	mov	r0, r4
 8016e60:	f7f9 f9b0 	bl	80101c4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016e64:	4606      	mov	r6, r0
 8016e66:	b1f0      	cbz	r0, 8016ea6 <rmw_take_with_info+0x6e>
 8016e68:	68c1      	ldr	r1, [r0, #12]
 8016e6a:	4668      	mov	r0, sp
 8016e6c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016e70:	3110      	adds	r1, #16
 8016e72:	f7f9 fb9d 	bl	80105b0 <ucdr_init_buffer>
 8016e76:	69a3      	ldr	r3, [r4, #24]
 8016e78:	4639      	mov	r1, r7
 8016e7a:	68db      	ldr	r3, [r3, #12]
 8016e7c:	4668      	mov	r0, sp
 8016e7e:	4798      	blx	r3
 8016e80:	4631      	mov	r1, r6
 8016e82:	4604      	mov	r4, r0
 8016e84:	4815      	ldr	r0, [pc, #84]	@ (8016edc <rmw_take_with_info+0xa4>)
 8016e86:	f7ff fded 	bl	8016a64 <put_memory>
 8016e8a:	702c      	strb	r4, [r5, #0]
 8016e8c:	f084 0001 	eor.w	r0, r4, #1
 8016e90:	b2c0      	uxtb	r0, r0
 8016e92:	b009      	add	sp, #36	@ 0x24
 8016e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e96:	6864      	ldr	r4, [r4, #4]
 8016e98:	f7f9 f9be 	bl	8010218 <rmw_uxrce_clean_expired_static_input_buffer>
 8016e9c:	4620      	mov	r0, r4
 8016e9e:	f7f9 f991 	bl	80101c4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016ea2:	4605      	mov	r5, r0
 8016ea4:	b910      	cbnz	r0, 8016eac <rmw_take_with_info+0x74>
 8016ea6:	2001      	movs	r0, #1
 8016ea8:	b009      	add	sp, #36	@ 0x24
 8016eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016eac:	68e9      	ldr	r1, [r5, #12]
 8016eae:	4668      	mov	r0, sp
 8016eb0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016eb4:	3110      	adds	r1, #16
 8016eb6:	f7f9 fb7b 	bl	80105b0 <ucdr_init_buffer>
 8016eba:	69a3      	ldr	r3, [r4, #24]
 8016ebc:	4639      	mov	r1, r7
 8016ebe:	68db      	ldr	r3, [r3, #12]
 8016ec0:	4668      	mov	r0, sp
 8016ec2:	4798      	blx	r3
 8016ec4:	4629      	mov	r1, r5
 8016ec6:	4604      	mov	r4, r0
 8016ec8:	4804      	ldr	r0, [pc, #16]	@ (8016edc <rmw_take_with_info+0xa4>)
 8016eca:	f7ff fdcb 	bl	8016a64 <put_memory>
 8016ece:	e7dd      	b.n	8016e8c <rmw_take_with_info+0x54>
 8016ed0:	200c      	movs	r0, #12
 8016ed2:	b009      	add	sp, #36	@ 0x24
 8016ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ed6:	bf00      	nop
 8016ed8:	0801e7ac 	.word	0x0801e7ac
 8016edc:	2000a028 	.word	0x2000a028

08016ee0 <rmw_wait>:
 8016ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ee4:	460f      	mov	r7, r1
 8016ee6:	4606      	mov	r6, r0
 8016ee8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016eea:	469a      	mov	sl, r3
 8016eec:	4615      	mov	r5, r2
 8016eee:	2a00      	cmp	r2, #0
 8016ef0:	f000 8122 	beq.w	8017138 <rmw_wait+0x258>
 8016ef4:	2900      	cmp	r1, #0
 8016ef6:	f000 812a 	beq.w	801714e <rmw_wait+0x26e>
 8016efa:	e9d1 2300 	ldrd	r2, r3, [r1]
 8016efe:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8016f02:	015c      	lsls	r4, r3, #5
 8016f04:	ebbb 0b02 	subs.w	fp, fp, r2
 8016f08:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8016f0c:	eb64 0403 	sbc.w	r4, r4, r3
 8016f10:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8016f14:	00a4      	lsls	r4, r4, #2
 8016f16:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8016f1a:	eb10 0b02 	adds.w	fp, r0, r2
 8016f1e:	eb43 0404 	adc.w	r4, r3, r4
 8016f22:	4aad      	ldr	r2, [pc, #692]	@ (80171d8 <rmw_wait+0x2f8>)
 8016f24:	2300      	movs	r3, #0
 8016f26:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8016f2a:	f7e9 ff15 	bl	8000d58 <__aeabi_uldivmod>
 8016f2e:	00e4      	lsls	r4, r4, #3
 8016f30:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8016f34:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8016f38:	eb1b 0800 	adds.w	r8, fp, r0
 8016f3c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016f40:	eb44 0901 	adc.w	r9, r4, r1
 8016f44:	2300      	movs	r3, #0
 8016f46:	4542      	cmp	r2, r8
 8016f48:	eb73 0109 	sbcs.w	r1, r3, r9
 8016f4c:	f2c0 80f2 	blt.w	8017134 <rmw_wait+0x254>
 8016f50:	f7f9 f962 	bl	8010218 <rmw_uxrce_clean_expired_static_input_buffer>
 8016f54:	4ba1      	ldr	r3, [pc, #644]	@ (80171dc <rmw_wait+0x2fc>)
 8016f56:	681c      	ldr	r4, [r3, #0]
 8016f58:	b144      	cbz	r4, 8016f6c <rmw_wait+0x8c>
 8016f5a:	4623      	mov	r3, r4
 8016f5c:	f241 50a4 	movw	r0, #5540	@ 0x15a4
 8016f60:	2100      	movs	r1, #0
 8016f62:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8016f66:	5411      	strb	r1, [r2, r0]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d1fa      	bne.n	8016f62 <rmw_wait+0x82>
 8016f6c:	b185      	cbz	r5, 8016f90 <rmw_wait+0xb0>
 8016f6e:	6829      	ldr	r1, [r5, #0]
 8016f70:	b171      	cbz	r1, 8016f90 <rmw_wait+0xb0>
 8016f72:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8016f76:	2300      	movs	r3, #0
 8016f78:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 8016f7c:	2001      	movs	r0, #1
 8016f7e:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8016f82:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016f84:	3301      	adds	r3, #1
 8016f86:	6912      	ldr	r2, [r2, #16]
 8016f88:	4299      	cmp	r1, r3
 8016f8a:	f802 000c 	strb.w	r0, [r2, ip]
 8016f8e:	d1f6      	bne.n	8016f7e <rmw_wait+0x9e>
 8016f90:	f1ba 0f00 	cmp.w	sl, #0
 8016f94:	d011      	beq.n	8016fba <rmw_wait+0xda>
 8016f96:	f8da 1000 	ldr.w	r1, [sl]
 8016f9a:	b171      	cbz	r1, 8016fba <rmw_wait+0xda>
 8016f9c:	f8da e004 	ldr.w	lr, [sl, #4]
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 8016fa6:	2001      	movs	r0, #1
 8016fa8:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8016fac:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8016fae:	3301      	adds	r3, #1
 8016fb0:	6912      	ldr	r2, [r2, #16]
 8016fb2:	4299      	cmp	r1, r3
 8016fb4:	f802 000c 	strb.w	r0, [r2, ip]
 8016fb8:	d1f6      	bne.n	8016fa8 <rmw_wait+0xc8>
 8016fba:	b186      	cbz	r6, 8016fde <rmw_wait+0xfe>
 8016fbc:	6831      	ldr	r1, [r6, #0]
 8016fbe:	b171      	cbz	r1, 8016fde <rmw_wait+0xfe>
 8016fc0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 8016fca:	2001      	movs	r0, #1
 8016fcc:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8016fd0:	6a12      	ldr	r2, [r2, #32]
 8016fd2:	3301      	adds	r3, #1
 8016fd4:	6912      	ldr	r2, [r2, #16]
 8016fd6:	4299      	cmp	r1, r3
 8016fd8:	f802 000c 	strb.w	r0, [r2, ip]
 8016fdc:	d1f6      	bne.n	8016fcc <rmw_wait+0xec>
 8016fde:	b34c      	cbz	r4, 8017034 <rmw_wait+0x154>
 8016fe0:	4622      	mov	r2, r4
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	f241 50a4 	movw	r0, #5540	@ 0x15a4
 8016fe8:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 8016fec:	5c09      	ldrb	r1, [r1, r0]
 8016fee:	440b      	add	r3, r1
 8016ff0:	b2db      	uxtb	r3, r3
 8016ff2:	2a00      	cmp	r2, #0
 8016ff4:	d1f8      	bne.n	8016fe8 <rmw_wait+0x108>
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	f000 8082 	beq.w	8017100 <rmw_wait+0x220>
 8016ffc:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 8017000:	d00d      	beq.n	801701e <rmw_wait+0x13e>
 8017002:	ee07 8a90 	vmov	s15, r8
 8017006:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801700a:	ee07 3a90 	vmov	s15, r3
 801700e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017016:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801701a:	ee17 8a90 	vmov	r8, s15
 801701e:	f241 59a4 	movw	r9, #5540	@ 0x15a4
 8017022:	68e0      	ldr	r0, [r4, #12]
 8017024:	f810 3009 	ldrb.w	r3, [r0, r9]
 8017028:	2b00      	cmp	r3, #0
 801702a:	f040 8093 	bne.w	8017154 <rmw_wait+0x274>
 801702e:	68a4      	ldr	r4, [r4, #8]
 8017030:	2c00      	cmp	r4, #0
 8017032:	d1f6      	bne.n	8017022 <rmw_wait+0x142>
 8017034:	2d00      	cmp	r5, #0
 8017036:	f000 80ac 	beq.w	8017192 <rmw_wait+0x2b2>
 801703a:	682b      	ldr	r3, [r5, #0]
 801703c:	2b00      	cmp	r3, #0
 801703e:	f000 8093 	beq.w	8017168 <rmw_wait+0x288>
 8017042:	2400      	movs	r4, #0
 8017044:	46a0      	mov	r8, r4
 8017046:	686b      	ldr	r3, [r5, #4]
 8017048:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801704c:	f7f9 f8ba 	bl	80101c4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017050:	2800      	cmp	r0, #0
 8017052:	d05f      	beq.n	8017114 <rmw_wait+0x234>
 8017054:	682b      	ldr	r3, [r5, #0]
 8017056:	3401      	adds	r4, #1
 8017058:	42a3      	cmp	r3, r4
 801705a:	f04f 0801 	mov.w	r8, #1
 801705e:	d8f2      	bhi.n	8017046 <rmw_wait+0x166>
 8017060:	f1ba 0f00 	cmp.w	sl, #0
 8017064:	d012      	beq.n	801708c <rmw_wait+0x1ac>
 8017066:	f8da 3000 	ldr.w	r3, [sl]
 801706a:	b17b      	cbz	r3, 801708c <rmw_wait+0x1ac>
 801706c:	2400      	movs	r4, #0
 801706e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017072:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017076:	f7f9 f8a5 	bl	80101c4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801707a:	2800      	cmp	r0, #0
 801707c:	d052      	beq.n	8017124 <rmw_wait+0x244>
 801707e:	f8da 3000 	ldr.w	r3, [sl]
 8017082:	3401      	adds	r4, #1
 8017084:	42a3      	cmp	r3, r4
 8017086:	f04f 0801 	mov.w	r8, #1
 801708a:	d8f0      	bhi.n	801706e <rmw_wait+0x18e>
 801708c:	b1e6      	cbz	r6, 80170c8 <rmw_wait+0x1e8>
 801708e:	6833      	ldr	r3, [r6, #0]
 8017090:	b1d3      	cbz	r3, 80170c8 <rmw_wait+0x1e8>
 8017092:	2400      	movs	r4, #0
 8017094:	6873      	ldr	r3, [r6, #4]
 8017096:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801709a:	f7f9 f893 	bl	80101c4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801709e:	b160      	cbz	r0, 80170ba <rmw_wait+0x1da>
 80170a0:	6833      	ldr	r3, [r6, #0]
 80170a2:	3401      	adds	r4, #1
 80170a4:	42a3      	cmp	r3, r4
 80170a6:	d96c      	bls.n	8017182 <rmw_wait+0x2a2>
 80170a8:	6873      	ldr	r3, [r6, #4]
 80170aa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80170ae:	f04f 0801 	mov.w	r8, #1
 80170b2:	f7f9 f887 	bl	80101c4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80170b6:	2800      	cmp	r0, #0
 80170b8:	d1f2      	bne.n	80170a0 <rmw_wait+0x1c0>
 80170ba:	e9d6 3200 	ldrd	r3, r2, [r6]
 80170be:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80170c2:	3401      	adds	r4, #1
 80170c4:	42a3      	cmp	r3, r4
 80170c6:	d8e5      	bhi.n	8017094 <rmw_wait+0x1b4>
 80170c8:	b1a7      	cbz	r7, 80170f4 <rmw_wait+0x214>
 80170ca:	683c      	ldr	r4, [r7, #0]
 80170cc:	b194      	cbz	r4, 80170f4 <rmw_wait+0x214>
 80170ce:	2300      	movs	r3, #0
 80170d0:	461d      	mov	r5, r3
 80170d2:	e004      	b.n	80170de <rmw_wait+0x1fe>
 80170d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80170d8:	3301      	adds	r3, #1
 80170da:	42a3      	cmp	r3, r4
 80170dc:	d00a      	beq.n	80170f4 <rmw_wait+0x214>
 80170de:	6878      	ldr	r0, [r7, #4]
 80170e0:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80170e4:	7c0a      	ldrb	r2, [r1, #16]
 80170e6:	2a00      	cmp	r2, #0
 80170e8:	d0f4      	beq.n	80170d4 <rmw_wait+0x1f4>
 80170ea:	3301      	adds	r3, #1
 80170ec:	42a3      	cmp	r3, r4
 80170ee:	740d      	strb	r5, [r1, #16]
 80170f0:	4690      	mov	r8, r2
 80170f2:	d1f4      	bne.n	80170de <rmw_wait+0x1fe>
 80170f4:	f1b8 0f00 	cmp.w	r8, #0
 80170f8:	d040      	beq.n	801717c <rmw_wait+0x29c>
 80170fa:	2000      	movs	r0, #0
 80170fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017100:	68e0      	ldr	r0, [r4, #12]
 8017102:	2100      	movs	r1, #0
 8017104:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017108:	f7fa fbd0 	bl	80118ac <uxr_run_session_timeout>
 801710c:	68a4      	ldr	r4, [r4, #8]
 801710e:	2c00      	cmp	r4, #0
 8017110:	d1f6      	bne.n	8017100 <rmw_wait+0x220>
 8017112:	e78f      	b.n	8017034 <rmw_wait+0x154>
 8017114:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017118:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801711c:	3401      	adds	r4, #1
 801711e:	42a3      	cmp	r3, r4
 8017120:	d891      	bhi.n	8017046 <rmw_wait+0x166>
 8017122:	e79d      	b.n	8017060 <rmw_wait+0x180>
 8017124:	e9da 3200 	ldrd	r3, r2, [sl]
 8017128:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801712c:	3401      	adds	r4, #1
 801712e:	429c      	cmp	r4, r3
 8017130:	d39d      	bcc.n	801706e <rmw_wait+0x18e>
 8017132:	e7ab      	b.n	801708c <rmw_wait+0x1ac>
 8017134:	4690      	mov	r8, r2
 8017136:	e70b      	b.n	8016f50 <rmw_wait+0x70>
 8017138:	2b00      	cmp	r3, #0
 801713a:	f47f aedb 	bne.w	8016ef4 <rmw_wait+0x14>
 801713e:	2800      	cmp	r0, #0
 8017140:	f47f aed8 	bne.w	8016ef4 <rmw_wait+0x14>
 8017144:	2f00      	cmp	r7, #0
 8017146:	d0d8      	beq.n	80170fa <rmw_wait+0x21a>
 8017148:	2900      	cmp	r1, #0
 801714a:	f47f aed6 	bne.w	8016efa <rmw_wait+0x1a>
 801714e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017152:	e6fd      	b.n	8016f50 <rmw_wait+0x70>
 8017154:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017158:	4641      	mov	r1, r8
 801715a:	f7fa fbc1 	bl	80118e0 <uxr_run_session_until_data>
 801715e:	68a4      	ldr	r4, [r4, #8]
 8017160:	2c00      	cmp	r4, #0
 8017162:	f47f af5e 	bne.w	8017022 <rmw_wait+0x142>
 8017166:	e765      	b.n	8017034 <rmw_wait+0x154>
 8017168:	f1ba 0f00 	cmp.w	sl, #0
 801716c:	d11e      	bne.n	80171ac <rmw_wait+0x2cc>
 801716e:	b35e      	cbz	r6, 80171c8 <rmw_wait+0x2e8>
 8017170:	6833      	ldr	r3, [r6, #0]
 8017172:	46d0      	mov	r8, sl
 8017174:	2b00      	cmp	r3, #0
 8017176:	d18c      	bne.n	8017092 <rmw_wait+0x1b2>
 8017178:	2f00      	cmp	r7, #0
 801717a:	d1a6      	bne.n	80170ca <rmw_wait+0x1ea>
 801717c:	2002      	movs	r0, #2
 801717e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017182:	2f00      	cmp	r7, #0
 8017184:	d0b9      	beq.n	80170fa <rmw_wait+0x21a>
 8017186:	683c      	ldr	r4, [r7, #0]
 8017188:	f04f 0801 	mov.w	r8, #1
 801718c:	2c00      	cmp	r4, #0
 801718e:	d19e      	bne.n	80170ce <rmw_wait+0x1ee>
 8017190:	e7b3      	b.n	80170fa <rmw_wait+0x21a>
 8017192:	f1ba 0f00 	cmp.w	sl, #0
 8017196:	d0ea      	beq.n	801716e <rmw_wait+0x28e>
 8017198:	f8da 3000 	ldr.w	r3, [sl]
 801719c:	46a8      	mov	r8, r5
 801719e:	2b00      	cmp	r3, #0
 80171a0:	f47f af64 	bne.w	801706c <rmw_wait+0x18c>
 80171a4:	2e00      	cmp	r6, #0
 80171a6:	f47f af72 	bne.w	801708e <rmw_wait+0x1ae>
 80171aa:	e009      	b.n	80171c0 <rmw_wait+0x2e0>
 80171ac:	f8da 2000 	ldr.w	r2, [sl]
 80171b0:	4698      	mov	r8, r3
 80171b2:	2a00      	cmp	r2, #0
 80171b4:	f47f af5a 	bne.w	801706c <rmw_wait+0x18c>
 80171b8:	4690      	mov	r8, r2
 80171ba:	2e00      	cmp	r6, #0
 80171bc:	f47f af67 	bne.w	801708e <rmw_wait+0x1ae>
 80171c0:	46b0      	mov	r8, r6
 80171c2:	2f00      	cmp	r7, #0
 80171c4:	d181      	bne.n	80170ca <rmw_wait+0x1ea>
 80171c6:	e7d9      	b.n	801717c <rmw_wait+0x29c>
 80171c8:	2f00      	cmp	r7, #0
 80171ca:	d0d7      	beq.n	801717c <rmw_wait+0x29c>
 80171cc:	683c      	ldr	r4, [r7, #0]
 80171ce:	46b0      	mov	r8, r6
 80171d0:	2c00      	cmp	r4, #0
 80171d2:	f47f af7c 	bne.w	80170ce <rmw_wait+0x1ee>
 80171d6:	e7d1      	b.n	801717c <rmw_wait+0x29c>
 80171d8:	000f4240 	.word	0x000f4240
 80171dc:	2000d1d0 	.word	0x2000d1d0

080171e0 <rmw_create_wait_set>:
 80171e0:	b508      	push	{r3, lr}
 80171e2:	4803      	ldr	r0, [pc, #12]	@ (80171f0 <rmw_create_wait_set+0x10>)
 80171e4:	f7ff fc2e 	bl	8016a44 <get_memory>
 80171e8:	b108      	cbz	r0, 80171ee <rmw_create_wait_set+0xe>
 80171ea:	68c0      	ldr	r0, [r0, #12]
 80171ec:	3010      	adds	r0, #16
 80171ee:	bd08      	pop	{r3, pc}
 80171f0:	2000e9a8 	.word	0x2000e9a8

080171f4 <rmw_destroy_wait_set>:
 80171f4:	b508      	push	{r3, lr}
 80171f6:	4b08      	ldr	r3, [pc, #32]	@ (8017218 <rmw_destroy_wait_set+0x24>)
 80171f8:	6819      	ldr	r1, [r3, #0]
 80171fa:	b911      	cbnz	r1, 8017202 <rmw_destroy_wait_set+0xe>
 80171fc:	e00a      	b.n	8017214 <rmw_destroy_wait_set+0x20>
 80171fe:	6889      	ldr	r1, [r1, #8]
 8017200:	b141      	cbz	r1, 8017214 <rmw_destroy_wait_set+0x20>
 8017202:	68cb      	ldr	r3, [r1, #12]
 8017204:	3310      	adds	r3, #16
 8017206:	4298      	cmp	r0, r3
 8017208:	d1f9      	bne.n	80171fe <rmw_destroy_wait_set+0xa>
 801720a:	4803      	ldr	r0, [pc, #12]	@ (8017218 <rmw_destroy_wait_set+0x24>)
 801720c:	f7ff fc2a 	bl	8016a64 <put_memory>
 8017210:	2000      	movs	r0, #0
 8017212:	bd08      	pop	{r3, pc}
 8017214:	2001      	movs	r0, #1
 8017216:	bd08      	pop	{r3, pc}
 8017218:	2000e9a8 	.word	0x2000e9a8

0801721c <rmw_uros_epoch_nanos>:
 801721c:	4b05      	ldr	r3, [pc, #20]	@ (8017234 <rmw_uros_epoch_nanos+0x18>)
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	b123      	cbz	r3, 801722c <rmw_uros_epoch_nanos+0x10>
 8017222:	68d8      	ldr	r0, [r3, #12]
 8017224:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017228:	f7f9 bfb4 	b.w	8011194 <uxr_epoch_nanos>
 801722c:	2000      	movs	r0, #0
 801722e:	2100      	movs	r1, #0
 8017230:	4770      	bx	lr
 8017232:	bf00      	nop
 8017234:	2000d1d0 	.word	0x2000d1d0

08017238 <ucdr_serialize_endian_array_char>:
 8017238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801723c:	4619      	mov	r1, r3
 801723e:	461e      	mov	r6, r3
 8017240:	4690      	mov	r8, r2
 8017242:	4604      	mov	r4, r0
 8017244:	f7f9 f962 	bl	801050c <ucdr_check_buffer_available_for>
 8017248:	b9e0      	cbnz	r0, 8017284 <ucdr_serialize_endian_array_char+0x4c>
 801724a:	4637      	mov	r7, r6
 801724c:	e009      	b.n	8017262 <ucdr_serialize_endian_array_char+0x2a>
 801724e:	68a0      	ldr	r0, [r4, #8]
 8017250:	f003 fb83 	bl	801a95a <memcpy>
 8017254:	68a2      	ldr	r2, [r4, #8]
 8017256:	6923      	ldr	r3, [r4, #16]
 8017258:	442a      	add	r2, r5
 801725a:	442b      	add	r3, r5
 801725c:	1b7f      	subs	r7, r7, r5
 801725e:	60a2      	str	r2, [r4, #8]
 8017260:	6123      	str	r3, [r4, #16]
 8017262:	2201      	movs	r2, #1
 8017264:	4639      	mov	r1, r7
 8017266:	4620      	mov	r0, r4
 8017268:	f7f9 f9d6 	bl	8010618 <ucdr_check_final_buffer_behavior_array>
 801726c:	1bf1      	subs	r1, r6, r7
 801726e:	4441      	add	r1, r8
 8017270:	4605      	mov	r5, r0
 8017272:	4602      	mov	r2, r0
 8017274:	2800      	cmp	r0, #0
 8017276:	d1ea      	bne.n	801724e <ucdr_serialize_endian_array_char+0x16>
 8017278:	2301      	movs	r3, #1
 801727a:	7da0      	ldrb	r0, [r4, #22]
 801727c:	7563      	strb	r3, [r4, #21]
 801727e:	4058      	eors	r0, r3
 8017280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017284:	4632      	mov	r2, r6
 8017286:	68a0      	ldr	r0, [r4, #8]
 8017288:	4641      	mov	r1, r8
 801728a:	f003 fb66 	bl	801a95a <memcpy>
 801728e:	68a2      	ldr	r2, [r4, #8]
 8017290:	6923      	ldr	r3, [r4, #16]
 8017292:	4432      	add	r2, r6
 8017294:	4433      	add	r3, r6
 8017296:	60a2      	str	r2, [r4, #8]
 8017298:	6123      	str	r3, [r4, #16]
 801729a:	e7ed      	b.n	8017278 <ucdr_serialize_endian_array_char+0x40>

0801729c <ucdr_deserialize_endian_array_char>:
 801729c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172a0:	4619      	mov	r1, r3
 80172a2:	461e      	mov	r6, r3
 80172a4:	4690      	mov	r8, r2
 80172a6:	4604      	mov	r4, r0
 80172a8:	f7f9 f930 	bl	801050c <ucdr_check_buffer_available_for>
 80172ac:	b9e0      	cbnz	r0, 80172e8 <ucdr_deserialize_endian_array_char+0x4c>
 80172ae:	4637      	mov	r7, r6
 80172b0:	e009      	b.n	80172c6 <ucdr_deserialize_endian_array_char+0x2a>
 80172b2:	68a1      	ldr	r1, [r4, #8]
 80172b4:	f003 fb51 	bl	801a95a <memcpy>
 80172b8:	68a2      	ldr	r2, [r4, #8]
 80172ba:	6923      	ldr	r3, [r4, #16]
 80172bc:	442a      	add	r2, r5
 80172be:	442b      	add	r3, r5
 80172c0:	1b7f      	subs	r7, r7, r5
 80172c2:	60a2      	str	r2, [r4, #8]
 80172c4:	6123      	str	r3, [r4, #16]
 80172c6:	2201      	movs	r2, #1
 80172c8:	4639      	mov	r1, r7
 80172ca:	4620      	mov	r0, r4
 80172cc:	f7f9 f9a4 	bl	8010618 <ucdr_check_final_buffer_behavior_array>
 80172d0:	4605      	mov	r5, r0
 80172d2:	1bf0      	subs	r0, r6, r7
 80172d4:	4440      	add	r0, r8
 80172d6:	462a      	mov	r2, r5
 80172d8:	2d00      	cmp	r5, #0
 80172da:	d1ea      	bne.n	80172b2 <ucdr_deserialize_endian_array_char+0x16>
 80172dc:	2301      	movs	r3, #1
 80172de:	7da0      	ldrb	r0, [r4, #22]
 80172e0:	7563      	strb	r3, [r4, #21]
 80172e2:	4058      	eors	r0, r3
 80172e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172e8:	4632      	mov	r2, r6
 80172ea:	68a1      	ldr	r1, [r4, #8]
 80172ec:	4640      	mov	r0, r8
 80172ee:	f003 fb34 	bl	801a95a <memcpy>
 80172f2:	68a2      	ldr	r2, [r4, #8]
 80172f4:	6923      	ldr	r3, [r4, #16]
 80172f6:	4432      	add	r2, r6
 80172f8:	4433      	add	r3, r6
 80172fa:	60a2      	str	r2, [r4, #8]
 80172fc:	6123      	str	r3, [r4, #16]
 80172fe:	e7ed      	b.n	80172dc <ucdr_deserialize_endian_array_char+0x40>

08017300 <ucdr_serialize_array_uint8_t>:
 8017300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017304:	4688      	mov	r8, r1
 8017306:	4611      	mov	r1, r2
 8017308:	4616      	mov	r6, r2
 801730a:	4604      	mov	r4, r0
 801730c:	f7f9 f8fe 	bl	801050c <ucdr_check_buffer_available_for>
 8017310:	b9e0      	cbnz	r0, 801734c <ucdr_serialize_array_uint8_t+0x4c>
 8017312:	4637      	mov	r7, r6
 8017314:	e009      	b.n	801732a <ucdr_serialize_array_uint8_t+0x2a>
 8017316:	68a0      	ldr	r0, [r4, #8]
 8017318:	f003 fb1f 	bl	801a95a <memcpy>
 801731c:	68a2      	ldr	r2, [r4, #8]
 801731e:	6923      	ldr	r3, [r4, #16]
 8017320:	442a      	add	r2, r5
 8017322:	442b      	add	r3, r5
 8017324:	1b7f      	subs	r7, r7, r5
 8017326:	60a2      	str	r2, [r4, #8]
 8017328:	6123      	str	r3, [r4, #16]
 801732a:	2201      	movs	r2, #1
 801732c:	4639      	mov	r1, r7
 801732e:	4620      	mov	r0, r4
 8017330:	f7f9 f972 	bl	8010618 <ucdr_check_final_buffer_behavior_array>
 8017334:	1bf1      	subs	r1, r6, r7
 8017336:	4441      	add	r1, r8
 8017338:	4605      	mov	r5, r0
 801733a:	4602      	mov	r2, r0
 801733c:	2800      	cmp	r0, #0
 801733e:	d1ea      	bne.n	8017316 <ucdr_serialize_array_uint8_t+0x16>
 8017340:	2301      	movs	r3, #1
 8017342:	7da0      	ldrb	r0, [r4, #22]
 8017344:	7563      	strb	r3, [r4, #21]
 8017346:	4058      	eors	r0, r3
 8017348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801734c:	4632      	mov	r2, r6
 801734e:	68a0      	ldr	r0, [r4, #8]
 8017350:	4641      	mov	r1, r8
 8017352:	f003 fb02 	bl	801a95a <memcpy>
 8017356:	68a3      	ldr	r3, [r4, #8]
 8017358:	6922      	ldr	r2, [r4, #16]
 801735a:	4433      	add	r3, r6
 801735c:	4432      	add	r2, r6
 801735e:	60a3      	str	r3, [r4, #8]
 8017360:	6122      	str	r2, [r4, #16]
 8017362:	e7ed      	b.n	8017340 <ucdr_serialize_array_uint8_t+0x40>

08017364 <ucdr_serialize_endian_array_uint8_t>:
 8017364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017368:	4619      	mov	r1, r3
 801736a:	461e      	mov	r6, r3
 801736c:	4690      	mov	r8, r2
 801736e:	4604      	mov	r4, r0
 8017370:	f7f9 f8cc 	bl	801050c <ucdr_check_buffer_available_for>
 8017374:	b9e0      	cbnz	r0, 80173b0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8017376:	4637      	mov	r7, r6
 8017378:	e009      	b.n	801738e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801737a:	68a0      	ldr	r0, [r4, #8]
 801737c:	f003 faed 	bl	801a95a <memcpy>
 8017380:	68a2      	ldr	r2, [r4, #8]
 8017382:	6923      	ldr	r3, [r4, #16]
 8017384:	442a      	add	r2, r5
 8017386:	442b      	add	r3, r5
 8017388:	1b7f      	subs	r7, r7, r5
 801738a:	60a2      	str	r2, [r4, #8]
 801738c:	6123      	str	r3, [r4, #16]
 801738e:	2201      	movs	r2, #1
 8017390:	4639      	mov	r1, r7
 8017392:	4620      	mov	r0, r4
 8017394:	f7f9 f940 	bl	8010618 <ucdr_check_final_buffer_behavior_array>
 8017398:	1bf1      	subs	r1, r6, r7
 801739a:	4441      	add	r1, r8
 801739c:	4605      	mov	r5, r0
 801739e:	4602      	mov	r2, r0
 80173a0:	2800      	cmp	r0, #0
 80173a2:	d1ea      	bne.n	801737a <ucdr_serialize_endian_array_uint8_t+0x16>
 80173a4:	2301      	movs	r3, #1
 80173a6:	7da0      	ldrb	r0, [r4, #22]
 80173a8:	7563      	strb	r3, [r4, #21]
 80173aa:	4058      	eors	r0, r3
 80173ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173b0:	4632      	mov	r2, r6
 80173b2:	68a0      	ldr	r0, [r4, #8]
 80173b4:	4641      	mov	r1, r8
 80173b6:	f003 fad0 	bl	801a95a <memcpy>
 80173ba:	68a2      	ldr	r2, [r4, #8]
 80173bc:	6923      	ldr	r3, [r4, #16]
 80173be:	4432      	add	r2, r6
 80173c0:	4433      	add	r3, r6
 80173c2:	60a2      	str	r2, [r4, #8]
 80173c4:	6123      	str	r3, [r4, #16]
 80173c6:	e7ed      	b.n	80173a4 <ucdr_serialize_endian_array_uint8_t+0x40>

080173c8 <ucdr_deserialize_array_uint8_t>:
 80173c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173cc:	4688      	mov	r8, r1
 80173ce:	4611      	mov	r1, r2
 80173d0:	4616      	mov	r6, r2
 80173d2:	4604      	mov	r4, r0
 80173d4:	f7f9 f89a 	bl	801050c <ucdr_check_buffer_available_for>
 80173d8:	b9e0      	cbnz	r0, 8017414 <ucdr_deserialize_array_uint8_t+0x4c>
 80173da:	4637      	mov	r7, r6
 80173dc:	e009      	b.n	80173f2 <ucdr_deserialize_array_uint8_t+0x2a>
 80173de:	68a1      	ldr	r1, [r4, #8]
 80173e0:	f003 fabb 	bl	801a95a <memcpy>
 80173e4:	68a2      	ldr	r2, [r4, #8]
 80173e6:	6923      	ldr	r3, [r4, #16]
 80173e8:	442a      	add	r2, r5
 80173ea:	442b      	add	r3, r5
 80173ec:	1b7f      	subs	r7, r7, r5
 80173ee:	60a2      	str	r2, [r4, #8]
 80173f0:	6123      	str	r3, [r4, #16]
 80173f2:	2201      	movs	r2, #1
 80173f4:	4639      	mov	r1, r7
 80173f6:	4620      	mov	r0, r4
 80173f8:	f7f9 f90e 	bl	8010618 <ucdr_check_final_buffer_behavior_array>
 80173fc:	4605      	mov	r5, r0
 80173fe:	1bf0      	subs	r0, r6, r7
 8017400:	4440      	add	r0, r8
 8017402:	462a      	mov	r2, r5
 8017404:	2d00      	cmp	r5, #0
 8017406:	d1ea      	bne.n	80173de <ucdr_deserialize_array_uint8_t+0x16>
 8017408:	2301      	movs	r3, #1
 801740a:	7da0      	ldrb	r0, [r4, #22]
 801740c:	7563      	strb	r3, [r4, #21]
 801740e:	4058      	eors	r0, r3
 8017410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017414:	4632      	mov	r2, r6
 8017416:	68a1      	ldr	r1, [r4, #8]
 8017418:	4640      	mov	r0, r8
 801741a:	f003 fa9e 	bl	801a95a <memcpy>
 801741e:	68a3      	ldr	r3, [r4, #8]
 8017420:	6922      	ldr	r2, [r4, #16]
 8017422:	4433      	add	r3, r6
 8017424:	4432      	add	r2, r6
 8017426:	60a3      	str	r3, [r4, #8]
 8017428:	6122      	str	r2, [r4, #16]
 801742a:	e7ed      	b.n	8017408 <ucdr_deserialize_array_uint8_t+0x40>

0801742c <ucdr_deserialize_endian_array_uint8_t>:
 801742c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017430:	4619      	mov	r1, r3
 8017432:	461e      	mov	r6, r3
 8017434:	4690      	mov	r8, r2
 8017436:	4604      	mov	r4, r0
 8017438:	f7f9 f868 	bl	801050c <ucdr_check_buffer_available_for>
 801743c:	b9e0      	cbnz	r0, 8017478 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801743e:	4637      	mov	r7, r6
 8017440:	e009      	b.n	8017456 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8017442:	68a1      	ldr	r1, [r4, #8]
 8017444:	f003 fa89 	bl	801a95a <memcpy>
 8017448:	68a2      	ldr	r2, [r4, #8]
 801744a:	6923      	ldr	r3, [r4, #16]
 801744c:	442a      	add	r2, r5
 801744e:	442b      	add	r3, r5
 8017450:	1b7f      	subs	r7, r7, r5
 8017452:	60a2      	str	r2, [r4, #8]
 8017454:	6123      	str	r3, [r4, #16]
 8017456:	2201      	movs	r2, #1
 8017458:	4639      	mov	r1, r7
 801745a:	4620      	mov	r0, r4
 801745c:	f7f9 f8dc 	bl	8010618 <ucdr_check_final_buffer_behavior_array>
 8017460:	4605      	mov	r5, r0
 8017462:	1bf0      	subs	r0, r6, r7
 8017464:	4440      	add	r0, r8
 8017466:	462a      	mov	r2, r5
 8017468:	2d00      	cmp	r5, #0
 801746a:	d1ea      	bne.n	8017442 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801746c:	2301      	movs	r3, #1
 801746e:	7da0      	ldrb	r0, [r4, #22]
 8017470:	7563      	strb	r3, [r4, #21]
 8017472:	4058      	eors	r0, r3
 8017474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017478:	4632      	mov	r2, r6
 801747a:	68a1      	ldr	r1, [r4, #8]
 801747c:	4640      	mov	r0, r8
 801747e:	f003 fa6c 	bl	801a95a <memcpy>
 8017482:	68a2      	ldr	r2, [r4, #8]
 8017484:	6923      	ldr	r3, [r4, #16]
 8017486:	4432      	add	r2, r6
 8017488:	4433      	add	r3, r6
 801748a:	60a2      	str	r2, [r4, #8]
 801748c:	6123      	str	r3, [r4, #16]
 801748e:	e7ed      	b.n	801746c <ucdr_deserialize_endian_array_uint8_t+0x40>

08017490 <ucdr_serialize_bool>:
 8017490:	b538      	push	{r3, r4, r5, lr}
 8017492:	460d      	mov	r5, r1
 8017494:	2101      	movs	r1, #1
 8017496:	4604      	mov	r4, r0
 8017498:	f7f9 f844 	bl	8010524 <ucdr_check_final_buffer_behavior>
 801749c:	b148      	cbz	r0, 80174b2 <ucdr_serialize_bool+0x22>
 801749e:	68a3      	ldr	r3, [r4, #8]
 80174a0:	701d      	strb	r5, [r3, #0]
 80174a2:	68a2      	ldr	r2, [r4, #8]
 80174a4:	6923      	ldr	r3, [r4, #16]
 80174a6:	3201      	adds	r2, #1
 80174a8:	3301      	adds	r3, #1
 80174aa:	2101      	movs	r1, #1
 80174ac:	60a2      	str	r2, [r4, #8]
 80174ae:	6123      	str	r3, [r4, #16]
 80174b0:	7561      	strb	r1, [r4, #21]
 80174b2:	7da0      	ldrb	r0, [r4, #22]
 80174b4:	f080 0001 	eor.w	r0, r0, #1
 80174b8:	bd38      	pop	{r3, r4, r5, pc}
 80174ba:	bf00      	nop

080174bc <ucdr_deserialize_bool>:
 80174bc:	b538      	push	{r3, r4, r5, lr}
 80174be:	460d      	mov	r5, r1
 80174c0:	2101      	movs	r1, #1
 80174c2:	4604      	mov	r4, r0
 80174c4:	f7f9 f82e 	bl	8010524 <ucdr_check_final_buffer_behavior>
 80174c8:	b168      	cbz	r0, 80174e6 <ucdr_deserialize_bool+0x2a>
 80174ca:	68a2      	ldr	r2, [r4, #8]
 80174cc:	6923      	ldr	r3, [r4, #16]
 80174ce:	f812 1b01 	ldrb.w	r1, [r2], #1
 80174d2:	3900      	subs	r1, #0
 80174d4:	f103 0301 	add.w	r3, r3, #1
 80174d8:	bf18      	it	ne
 80174da:	2101      	movne	r1, #1
 80174dc:	2001      	movs	r0, #1
 80174de:	7029      	strb	r1, [r5, #0]
 80174e0:	60a2      	str	r2, [r4, #8]
 80174e2:	6123      	str	r3, [r4, #16]
 80174e4:	7560      	strb	r0, [r4, #21]
 80174e6:	7da0      	ldrb	r0, [r4, #22]
 80174e8:	f080 0001 	eor.w	r0, r0, #1
 80174ec:	bd38      	pop	{r3, r4, r5, pc}
 80174ee:	bf00      	nop

080174f0 <ucdr_serialize_uint8_t>:
 80174f0:	b538      	push	{r3, r4, r5, lr}
 80174f2:	460d      	mov	r5, r1
 80174f4:	2101      	movs	r1, #1
 80174f6:	4604      	mov	r4, r0
 80174f8:	f7f9 f814 	bl	8010524 <ucdr_check_final_buffer_behavior>
 80174fc:	b148      	cbz	r0, 8017512 <ucdr_serialize_uint8_t+0x22>
 80174fe:	68a3      	ldr	r3, [r4, #8]
 8017500:	701d      	strb	r5, [r3, #0]
 8017502:	68a2      	ldr	r2, [r4, #8]
 8017504:	6923      	ldr	r3, [r4, #16]
 8017506:	3201      	adds	r2, #1
 8017508:	3301      	adds	r3, #1
 801750a:	2101      	movs	r1, #1
 801750c:	60a2      	str	r2, [r4, #8]
 801750e:	6123      	str	r3, [r4, #16]
 8017510:	7561      	strb	r1, [r4, #21]
 8017512:	7da0      	ldrb	r0, [r4, #22]
 8017514:	f080 0001 	eor.w	r0, r0, #1
 8017518:	bd38      	pop	{r3, r4, r5, pc}
 801751a:	bf00      	nop

0801751c <ucdr_deserialize_uint8_t>:
 801751c:	b538      	push	{r3, r4, r5, lr}
 801751e:	460d      	mov	r5, r1
 8017520:	2101      	movs	r1, #1
 8017522:	4604      	mov	r4, r0
 8017524:	f7f8 fffe 	bl	8010524 <ucdr_check_final_buffer_behavior>
 8017528:	b150      	cbz	r0, 8017540 <ucdr_deserialize_uint8_t+0x24>
 801752a:	68a3      	ldr	r3, [r4, #8]
 801752c:	781b      	ldrb	r3, [r3, #0]
 801752e:	702b      	strb	r3, [r5, #0]
 8017530:	68a2      	ldr	r2, [r4, #8]
 8017532:	6923      	ldr	r3, [r4, #16]
 8017534:	3201      	adds	r2, #1
 8017536:	3301      	adds	r3, #1
 8017538:	2101      	movs	r1, #1
 801753a:	60a2      	str	r2, [r4, #8]
 801753c:	6123      	str	r3, [r4, #16]
 801753e:	7561      	strb	r1, [r4, #21]
 8017540:	7da0      	ldrb	r0, [r4, #22]
 8017542:	f080 0001 	eor.w	r0, r0, #1
 8017546:	bd38      	pop	{r3, r4, r5, pc}

08017548 <ucdr_serialize_uint16_t>:
 8017548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801754c:	b082      	sub	sp, #8
 801754e:	460b      	mov	r3, r1
 8017550:	2102      	movs	r1, #2
 8017552:	4604      	mov	r4, r0
 8017554:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017558:	f7f9 f836 	bl	80105c8 <ucdr_buffer_alignment>
 801755c:	4601      	mov	r1, r0
 801755e:	4620      	mov	r0, r4
 8017560:	7d67      	ldrb	r7, [r4, #21]
 8017562:	f7f9 f875 	bl	8010650 <ucdr_advance_buffer>
 8017566:	4620      	mov	r0, r4
 8017568:	2102      	movs	r1, #2
 801756a:	f7f8 ffcf 	bl	801050c <ucdr_check_buffer_available_for>
 801756e:	bb78      	cbnz	r0, 80175d0 <ucdr_serialize_uint16_t+0x88>
 8017570:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8017574:	42b5      	cmp	r5, r6
 8017576:	d926      	bls.n	80175c6 <ucdr_serialize_uint16_t+0x7e>
 8017578:	6922      	ldr	r2, [r4, #16]
 801757a:	60a5      	str	r5, [r4, #8]
 801757c:	1bad      	subs	r5, r5, r6
 801757e:	442a      	add	r2, r5
 8017580:	f1c5 0802 	rsb	r8, r5, #2
 8017584:	6122      	str	r2, [r4, #16]
 8017586:	4641      	mov	r1, r8
 8017588:	4620      	mov	r0, r4
 801758a:	f7f8 ffcb 	bl	8010524 <ucdr_check_final_buffer_behavior>
 801758e:	2800      	cmp	r0, #0
 8017590:	d03b      	beq.n	801760a <ucdr_serialize_uint16_t+0xc2>
 8017592:	7d23      	ldrb	r3, [r4, #20]
 8017594:	2b01      	cmp	r3, #1
 8017596:	d04a      	beq.n	801762e <ucdr_serialize_uint16_t+0xe6>
 8017598:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801759c:	7033      	strb	r3, [r6, #0]
 801759e:	2d00      	cmp	r5, #0
 80175a0:	d040      	beq.n	8017624 <ucdr_serialize_uint16_t+0xdc>
 80175a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80175a6:	7073      	strb	r3, [r6, #1]
 80175a8:	6923      	ldr	r3, [r4, #16]
 80175aa:	68a2      	ldr	r2, [r4, #8]
 80175ac:	7da0      	ldrb	r0, [r4, #22]
 80175ae:	3302      	adds	r3, #2
 80175b0:	1b5b      	subs	r3, r3, r5
 80175b2:	4442      	add	r2, r8
 80175b4:	2102      	movs	r1, #2
 80175b6:	f080 0001 	eor.w	r0, r0, #1
 80175ba:	6123      	str	r3, [r4, #16]
 80175bc:	60a2      	str	r2, [r4, #8]
 80175be:	7561      	strb	r1, [r4, #21]
 80175c0:	b002      	add	sp, #8
 80175c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175c6:	2102      	movs	r1, #2
 80175c8:	4620      	mov	r0, r4
 80175ca:	f7f8 ffab 	bl	8010524 <ucdr_check_final_buffer_behavior>
 80175ce:	b190      	cbz	r0, 80175f6 <ucdr_serialize_uint16_t+0xae>
 80175d0:	7d23      	ldrb	r3, [r4, #20]
 80175d2:	2b01      	cmp	r3, #1
 80175d4:	68a3      	ldr	r3, [r4, #8]
 80175d6:	d014      	beq.n	8017602 <ucdr_serialize_uint16_t+0xba>
 80175d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80175dc:	701a      	strb	r2, [r3, #0]
 80175de:	68a3      	ldr	r3, [r4, #8]
 80175e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80175e4:	705a      	strb	r2, [r3, #1]
 80175e6:	68a2      	ldr	r2, [r4, #8]
 80175e8:	6923      	ldr	r3, [r4, #16]
 80175ea:	3202      	adds	r2, #2
 80175ec:	3302      	adds	r3, #2
 80175ee:	2102      	movs	r1, #2
 80175f0:	60a2      	str	r2, [r4, #8]
 80175f2:	6123      	str	r3, [r4, #16]
 80175f4:	7561      	strb	r1, [r4, #21]
 80175f6:	7da0      	ldrb	r0, [r4, #22]
 80175f8:	f080 0001 	eor.w	r0, r0, #1
 80175fc:	b002      	add	sp, #8
 80175fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017602:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017606:	801a      	strh	r2, [r3, #0]
 8017608:	e7ed      	b.n	80175e6 <ucdr_serialize_uint16_t+0x9e>
 801760a:	68a2      	ldr	r2, [r4, #8]
 801760c:	6923      	ldr	r3, [r4, #16]
 801760e:	7da0      	ldrb	r0, [r4, #22]
 8017610:	7567      	strb	r7, [r4, #21]
 8017612:	1b52      	subs	r2, r2, r5
 8017614:	1b5b      	subs	r3, r3, r5
 8017616:	f080 0001 	eor.w	r0, r0, #1
 801761a:	60a2      	str	r2, [r4, #8]
 801761c:	6123      	str	r3, [r4, #16]
 801761e:	b002      	add	sp, #8
 8017620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017624:	68a3      	ldr	r3, [r4, #8]
 8017626:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801762a:	701a      	strb	r2, [r3, #0]
 801762c:	e7bc      	b.n	80175a8 <ucdr_serialize_uint16_t+0x60>
 801762e:	4630      	mov	r0, r6
 8017630:	f10d 0606 	add.w	r6, sp, #6
 8017634:	4631      	mov	r1, r6
 8017636:	462a      	mov	r2, r5
 8017638:	f003 f98f 	bl	801a95a <memcpy>
 801763c:	68a0      	ldr	r0, [r4, #8]
 801763e:	4642      	mov	r2, r8
 8017640:	1971      	adds	r1, r6, r5
 8017642:	f003 f98a 	bl	801a95a <memcpy>
 8017646:	e7af      	b.n	80175a8 <ucdr_serialize_uint16_t+0x60>

08017648 <ucdr_serialize_endian_uint16_t>:
 8017648:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801764c:	b083      	sub	sp, #12
 801764e:	460d      	mov	r5, r1
 8017650:	2102      	movs	r1, #2
 8017652:	4604      	mov	r4, r0
 8017654:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017658:	f7f8 ffb6 	bl	80105c8 <ucdr_buffer_alignment>
 801765c:	4601      	mov	r1, r0
 801765e:	4620      	mov	r0, r4
 8017660:	f894 8015 	ldrb.w	r8, [r4, #21]
 8017664:	f7f8 fff4 	bl	8010650 <ucdr_advance_buffer>
 8017668:	4620      	mov	r0, r4
 801766a:	2102      	movs	r1, #2
 801766c:	f7f8 ff4e 	bl	801050c <ucdr_check_buffer_available_for>
 8017670:	bb70      	cbnz	r0, 80176d0 <ucdr_serialize_endian_uint16_t+0x88>
 8017672:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8017676:	42be      	cmp	r6, r7
 8017678:	d925      	bls.n	80176c6 <ucdr_serialize_endian_uint16_t+0x7e>
 801767a:	6922      	ldr	r2, [r4, #16]
 801767c:	60a6      	str	r6, [r4, #8]
 801767e:	1bf6      	subs	r6, r6, r7
 8017680:	4432      	add	r2, r6
 8017682:	f1c6 0902 	rsb	r9, r6, #2
 8017686:	6122      	str	r2, [r4, #16]
 8017688:	4649      	mov	r1, r9
 801768a:	4620      	mov	r0, r4
 801768c:	f7f8 ff4a 	bl	8010524 <ucdr_check_final_buffer_behavior>
 8017690:	2800      	cmp	r0, #0
 8017692:	d039      	beq.n	8017708 <ucdr_serialize_endian_uint16_t+0xc0>
 8017694:	2d01      	cmp	r5, #1
 8017696:	d04a      	beq.n	801772e <ucdr_serialize_endian_uint16_t+0xe6>
 8017698:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801769c:	703b      	strb	r3, [r7, #0]
 801769e:	2e00      	cmp	r6, #0
 80176a0:	d040      	beq.n	8017724 <ucdr_serialize_endian_uint16_t+0xdc>
 80176a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80176a6:	707b      	strb	r3, [r7, #1]
 80176a8:	6923      	ldr	r3, [r4, #16]
 80176aa:	68a2      	ldr	r2, [r4, #8]
 80176ac:	7da0      	ldrb	r0, [r4, #22]
 80176ae:	3302      	adds	r3, #2
 80176b0:	1b9b      	subs	r3, r3, r6
 80176b2:	444a      	add	r2, r9
 80176b4:	2102      	movs	r1, #2
 80176b6:	f080 0001 	eor.w	r0, r0, #1
 80176ba:	6123      	str	r3, [r4, #16]
 80176bc:	60a2      	str	r2, [r4, #8]
 80176be:	7561      	strb	r1, [r4, #21]
 80176c0:	b003      	add	sp, #12
 80176c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176c6:	2102      	movs	r1, #2
 80176c8:	4620      	mov	r0, r4
 80176ca:	f7f8 ff2b 	bl	8010524 <ucdr_check_final_buffer_behavior>
 80176ce:	b188      	cbz	r0, 80176f4 <ucdr_serialize_endian_uint16_t+0xac>
 80176d0:	2d01      	cmp	r5, #1
 80176d2:	68a3      	ldr	r3, [r4, #8]
 80176d4:	d014      	beq.n	8017700 <ucdr_serialize_endian_uint16_t+0xb8>
 80176d6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80176da:	701a      	strb	r2, [r3, #0]
 80176dc:	68a3      	ldr	r3, [r4, #8]
 80176de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80176e2:	705a      	strb	r2, [r3, #1]
 80176e4:	68a2      	ldr	r2, [r4, #8]
 80176e6:	6923      	ldr	r3, [r4, #16]
 80176e8:	3202      	adds	r2, #2
 80176ea:	3302      	adds	r3, #2
 80176ec:	2102      	movs	r1, #2
 80176ee:	60a2      	str	r2, [r4, #8]
 80176f0:	6123      	str	r3, [r4, #16]
 80176f2:	7561      	strb	r1, [r4, #21]
 80176f4:	7da0      	ldrb	r0, [r4, #22]
 80176f6:	f080 0001 	eor.w	r0, r0, #1
 80176fa:	b003      	add	sp, #12
 80176fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017700:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017704:	801a      	strh	r2, [r3, #0]
 8017706:	e7ed      	b.n	80176e4 <ucdr_serialize_endian_uint16_t+0x9c>
 8017708:	68a2      	ldr	r2, [r4, #8]
 801770a:	6923      	ldr	r3, [r4, #16]
 801770c:	7da0      	ldrb	r0, [r4, #22]
 801770e:	f884 8015 	strb.w	r8, [r4, #21]
 8017712:	1b92      	subs	r2, r2, r6
 8017714:	1b9b      	subs	r3, r3, r6
 8017716:	f080 0001 	eor.w	r0, r0, #1
 801771a:	60a2      	str	r2, [r4, #8]
 801771c:	6123      	str	r3, [r4, #16]
 801771e:	b003      	add	sp, #12
 8017720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017724:	68a3      	ldr	r3, [r4, #8]
 8017726:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801772a:	701a      	strb	r2, [r3, #0]
 801772c:	e7bc      	b.n	80176a8 <ucdr_serialize_endian_uint16_t+0x60>
 801772e:	f10d 0506 	add.w	r5, sp, #6
 8017732:	4629      	mov	r1, r5
 8017734:	4632      	mov	r2, r6
 8017736:	4638      	mov	r0, r7
 8017738:	f003 f90f 	bl	801a95a <memcpy>
 801773c:	68a0      	ldr	r0, [r4, #8]
 801773e:	464a      	mov	r2, r9
 8017740:	19a9      	adds	r1, r5, r6
 8017742:	f003 f90a 	bl	801a95a <memcpy>
 8017746:	e7af      	b.n	80176a8 <ucdr_serialize_endian_uint16_t+0x60>

08017748 <ucdr_deserialize_uint16_t>:
 8017748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801774c:	460d      	mov	r5, r1
 801774e:	2102      	movs	r1, #2
 8017750:	4604      	mov	r4, r0
 8017752:	f7f8 ff39 	bl	80105c8 <ucdr_buffer_alignment>
 8017756:	4601      	mov	r1, r0
 8017758:	4620      	mov	r0, r4
 801775a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801775e:	f7f8 ff77 	bl	8010650 <ucdr_advance_buffer>
 8017762:	4620      	mov	r0, r4
 8017764:	2102      	movs	r1, #2
 8017766:	f7f8 fed1 	bl	801050c <ucdr_check_buffer_available_for>
 801776a:	bb60      	cbnz	r0, 80177c6 <ucdr_deserialize_uint16_t+0x7e>
 801776c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8017770:	42be      	cmp	r6, r7
 8017772:	d923      	bls.n	80177bc <ucdr_deserialize_uint16_t+0x74>
 8017774:	6922      	ldr	r2, [r4, #16]
 8017776:	60a6      	str	r6, [r4, #8]
 8017778:	1bf6      	subs	r6, r6, r7
 801777a:	4432      	add	r2, r6
 801777c:	f1c6 0902 	rsb	r9, r6, #2
 8017780:	6122      	str	r2, [r4, #16]
 8017782:	4649      	mov	r1, r9
 8017784:	4620      	mov	r0, r4
 8017786:	f7f8 fecd 	bl	8010524 <ucdr_check_final_buffer_behavior>
 801778a:	2800      	cmp	r0, #0
 801778c:	d034      	beq.n	80177f8 <ucdr_deserialize_uint16_t+0xb0>
 801778e:	7d23      	ldrb	r3, [r4, #20]
 8017790:	2b01      	cmp	r3, #1
 8017792:	d042      	beq.n	801781a <ucdr_deserialize_uint16_t+0xd2>
 8017794:	787b      	ldrb	r3, [r7, #1]
 8017796:	702b      	strb	r3, [r5, #0]
 8017798:	2e00      	cmp	r6, #0
 801779a:	d03a      	beq.n	8017812 <ucdr_deserialize_uint16_t+0xca>
 801779c:	783b      	ldrb	r3, [r7, #0]
 801779e:	706b      	strb	r3, [r5, #1]
 80177a0:	6923      	ldr	r3, [r4, #16]
 80177a2:	68a2      	ldr	r2, [r4, #8]
 80177a4:	7da0      	ldrb	r0, [r4, #22]
 80177a6:	2102      	movs	r1, #2
 80177a8:	3302      	adds	r3, #2
 80177aa:	1b9b      	subs	r3, r3, r6
 80177ac:	444a      	add	r2, r9
 80177ae:	7561      	strb	r1, [r4, #21]
 80177b0:	6123      	str	r3, [r4, #16]
 80177b2:	60a2      	str	r2, [r4, #8]
 80177b4:	f080 0001 	eor.w	r0, r0, #1
 80177b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177bc:	2102      	movs	r1, #2
 80177be:	4620      	mov	r0, r4
 80177c0:	f7f8 feb0 	bl	8010524 <ucdr_check_final_buffer_behavior>
 80177c4:	b180      	cbz	r0, 80177e8 <ucdr_deserialize_uint16_t+0xa0>
 80177c6:	7d23      	ldrb	r3, [r4, #20]
 80177c8:	2b01      	cmp	r3, #1
 80177ca:	68a3      	ldr	r3, [r4, #8]
 80177cc:	d011      	beq.n	80177f2 <ucdr_deserialize_uint16_t+0xaa>
 80177ce:	785b      	ldrb	r3, [r3, #1]
 80177d0:	702b      	strb	r3, [r5, #0]
 80177d2:	68a3      	ldr	r3, [r4, #8]
 80177d4:	781b      	ldrb	r3, [r3, #0]
 80177d6:	706b      	strb	r3, [r5, #1]
 80177d8:	68a2      	ldr	r2, [r4, #8]
 80177da:	6923      	ldr	r3, [r4, #16]
 80177dc:	3202      	adds	r2, #2
 80177de:	3302      	adds	r3, #2
 80177e0:	2102      	movs	r1, #2
 80177e2:	60a2      	str	r2, [r4, #8]
 80177e4:	6123      	str	r3, [r4, #16]
 80177e6:	7561      	strb	r1, [r4, #21]
 80177e8:	7da0      	ldrb	r0, [r4, #22]
 80177ea:	f080 0001 	eor.w	r0, r0, #1
 80177ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177f2:	881b      	ldrh	r3, [r3, #0]
 80177f4:	802b      	strh	r3, [r5, #0]
 80177f6:	e7ef      	b.n	80177d8 <ucdr_deserialize_uint16_t+0x90>
 80177f8:	68a2      	ldr	r2, [r4, #8]
 80177fa:	6923      	ldr	r3, [r4, #16]
 80177fc:	7da0      	ldrb	r0, [r4, #22]
 80177fe:	f884 8015 	strb.w	r8, [r4, #21]
 8017802:	1b92      	subs	r2, r2, r6
 8017804:	1b9b      	subs	r3, r3, r6
 8017806:	60a2      	str	r2, [r4, #8]
 8017808:	6123      	str	r3, [r4, #16]
 801780a:	f080 0001 	eor.w	r0, r0, #1
 801780e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017812:	68a3      	ldr	r3, [r4, #8]
 8017814:	781b      	ldrb	r3, [r3, #0]
 8017816:	706b      	strb	r3, [r5, #1]
 8017818:	e7c2      	b.n	80177a0 <ucdr_deserialize_uint16_t+0x58>
 801781a:	4639      	mov	r1, r7
 801781c:	4632      	mov	r2, r6
 801781e:	4628      	mov	r0, r5
 8017820:	f003 f89b 	bl	801a95a <memcpy>
 8017824:	68a1      	ldr	r1, [r4, #8]
 8017826:	464a      	mov	r2, r9
 8017828:	19a8      	adds	r0, r5, r6
 801782a:	f003 f896 	bl	801a95a <memcpy>
 801782e:	e7b7      	b.n	80177a0 <ucdr_deserialize_uint16_t+0x58>

08017830 <ucdr_deserialize_endian_uint16_t>:
 8017830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017834:	460e      	mov	r6, r1
 8017836:	2102      	movs	r1, #2
 8017838:	4604      	mov	r4, r0
 801783a:	4615      	mov	r5, r2
 801783c:	f7f8 fec4 	bl	80105c8 <ucdr_buffer_alignment>
 8017840:	4601      	mov	r1, r0
 8017842:	4620      	mov	r0, r4
 8017844:	f894 9015 	ldrb.w	r9, [r4, #21]
 8017848:	f7f8 ff02 	bl	8010650 <ucdr_advance_buffer>
 801784c:	4620      	mov	r0, r4
 801784e:	2102      	movs	r1, #2
 8017850:	f7f8 fe5c 	bl	801050c <ucdr_check_buffer_available_for>
 8017854:	bb70      	cbnz	r0, 80178b4 <ucdr_deserialize_endian_uint16_t+0x84>
 8017856:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 801785a:	4547      	cmp	r7, r8
 801785c:	d925      	bls.n	80178aa <ucdr_deserialize_endian_uint16_t+0x7a>
 801785e:	6922      	ldr	r2, [r4, #16]
 8017860:	60a7      	str	r7, [r4, #8]
 8017862:	eba7 0708 	sub.w	r7, r7, r8
 8017866:	443a      	add	r2, r7
 8017868:	f1c7 0a02 	rsb	sl, r7, #2
 801786c:	6122      	str	r2, [r4, #16]
 801786e:	4651      	mov	r1, sl
 8017870:	4620      	mov	r0, r4
 8017872:	f7f8 fe57 	bl	8010524 <ucdr_check_final_buffer_behavior>
 8017876:	2800      	cmp	r0, #0
 8017878:	d034      	beq.n	80178e4 <ucdr_deserialize_endian_uint16_t+0xb4>
 801787a:	2e01      	cmp	r6, #1
 801787c:	d043      	beq.n	8017906 <ucdr_deserialize_endian_uint16_t+0xd6>
 801787e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017882:	702b      	strb	r3, [r5, #0]
 8017884:	2f00      	cmp	r7, #0
 8017886:	d03a      	beq.n	80178fe <ucdr_deserialize_endian_uint16_t+0xce>
 8017888:	f898 3000 	ldrb.w	r3, [r8]
 801788c:	706b      	strb	r3, [r5, #1]
 801788e:	6923      	ldr	r3, [r4, #16]
 8017890:	68a2      	ldr	r2, [r4, #8]
 8017892:	7da0      	ldrb	r0, [r4, #22]
 8017894:	2102      	movs	r1, #2
 8017896:	3302      	adds	r3, #2
 8017898:	1bdb      	subs	r3, r3, r7
 801789a:	4452      	add	r2, sl
 801789c:	7561      	strb	r1, [r4, #21]
 801789e:	6123      	str	r3, [r4, #16]
 80178a0:	60a2      	str	r2, [r4, #8]
 80178a2:	f080 0001 	eor.w	r0, r0, #1
 80178a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178aa:	2102      	movs	r1, #2
 80178ac:	4620      	mov	r0, r4
 80178ae:	f7f8 fe39 	bl	8010524 <ucdr_check_final_buffer_behavior>
 80178b2:	b178      	cbz	r0, 80178d4 <ucdr_deserialize_endian_uint16_t+0xa4>
 80178b4:	2e01      	cmp	r6, #1
 80178b6:	68a3      	ldr	r3, [r4, #8]
 80178b8:	d011      	beq.n	80178de <ucdr_deserialize_endian_uint16_t+0xae>
 80178ba:	785b      	ldrb	r3, [r3, #1]
 80178bc:	702b      	strb	r3, [r5, #0]
 80178be:	68a3      	ldr	r3, [r4, #8]
 80178c0:	781b      	ldrb	r3, [r3, #0]
 80178c2:	706b      	strb	r3, [r5, #1]
 80178c4:	68a2      	ldr	r2, [r4, #8]
 80178c6:	6923      	ldr	r3, [r4, #16]
 80178c8:	3202      	adds	r2, #2
 80178ca:	3302      	adds	r3, #2
 80178cc:	2102      	movs	r1, #2
 80178ce:	60a2      	str	r2, [r4, #8]
 80178d0:	6123      	str	r3, [r4, #16]
 80178d2:	7561      	strb	r1, [r4, #21]
 80178d4:	7da0      	ldrb	r0, [r4, #22]
 80178d6:	f080 0001 	eor.w	r0, r0, #1
 80178da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178de:	881b      	ldrh	r3, [r3, #0]
 80178e0:	802b      	strh	r3, [r5, #0]
 80178e2:	e7ef      	b.n	80178c4 <ucdr_deserialize_endian_uint16_t+0x94>
 80178e4:	68a2      	ldr	r2, [r4, #8]
 80178e6:	6923      	ldr	r3, [r4, #16]
 80178e8:	7da0      	ldrb	r0, [r4, #22]
 80178ea:	f884 9015 	strb.w	r9, [r4, #21]
 80178ee:	1bd2      	subs	r2, r2, r7
 80178f0:	1bdb      	subs	r3, r3, r7
 80178f2:	60a2      	str	r2, [r4, #8]
 80178f4:	6123      	str	r3, [r4, #16]
 80178f6:	f080 0001 	eor.w	r0, r0, #1
 80178fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178fe:	68a3      	ldr	r3, [r4, #8]
 8017900:	781b      	ldrb	r3, [r3, #0]
 8017902:	706b      	strb	r3, [r5, #1]
 8017904:	e7c3      	b.n	801788e <ucdr_deserialize_endian_uint16_t+0x5e>
 8017906:	4641      	mov	r1, r8
 8017908:	463a      	mov	r2, r7
 801790a:	4628      	mov	r0, r5
 801790c:	f003 f825 	bl	801a95a <memcpy>
 8017910:	68a1      	ldr	r1, [r4, #8]
 8017912:	4652      	mov	r2, sl
 8017914:	19e8      	adds	r0, r5, r7
 8017916:	f003 f820 	bl	801a95a <memcpy>
 801791a:	e7b8      	b.n	801788e <ucdr_deserialize_endian_uint16_t+0x5e>

0801791c <ucdr_serialize_uint32_t>:
 801791c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017920:	b082      	sub	sp, #8
 8017922:	4604      	mov	r4, r0
 8017924:	9101      	str	r1, [sp, #4]
 8017926:	2104      	movs	r1, #4
 8017928:	f7f8 fe4e 	bl	80105c8 <ucdr_buffer_alignment>
 801792c:	4601      	mov	r1, r0
 801792e:	4620      	mov	r0, r4
 8017930:	7d67      	ldrb	r7, [r4, #21]
 8017932:	f7f8 fe8d 	bl	8010650 <ucdr_advance_buffer>
 8017936:	4620      	mov	r0, r4
 8017938:	2104      	movs	r1, #4
 801793a:	f7f8 fde7 	bl	801050c <ucdr_check_buffer_available_for>
 801793e:	2800      	cmp	r0, #0
 8017940:	d139      	bne.n	80179b6 <ucdr_serialize_uint32_t+0x9a>
 8017942:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 8017946:	42ae      	cmp	r6, r5
 8017948:	d930      	bls.n	80179ac <ucdr_serialize_uint32_t+0x90>
 801794a:	6922      	ldr	r2, [r4, #16]
 801794c:	60a6      	str	r6, [r4, #8]
 801794e:	1b76      	subs	r6, r6, r5
 8017950:	4432      	add	r2, r6
 8017952:	f1c6 0804 	rsb	r8, r6, #4
 8017956:	6122      	str	r2, [r4, #16]
 8017958:	4641      	mov	r1, r8
 801795a:	4620      	mov	r0, r4
 801795c:	f7f8 fde2 	bl	8010524 <ucdr_check_final_buffer_behavior>
 8017960:	2800      	cmp	r0, #0
 8017962:	d04c      	beq.n	80179fe <ucdr_serialize_uint32_t+0xe2>
 8017964:	7d23      	ldrb	r3, [r4, #20]
 8017966:	2b01      	cmp	r3, #1
 8017968:	d063      	beq.n	8017a32 <ucdr_serialize_uint32_t+0x116>
 801796a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801796e:	702b      	strb	r3, [r5, #0]
 8017970:	2e00      	cmp	r6, #0
 8017972:	d051      	beq.n	8017a18 <ucdr_serialize_uint32_t+0xfc>
 8017974:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017978:	706b      	strb	r3, [r5, #1]
 801797a:	2e01      	cmp	r6, #1
 801797c:	d050      	beq.n	8017a20 <ucdr_serialize_uint32_t+0x104>
 801797e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8017982:	70ab      	strb	r3, [r5, #2]
 8017984:	2e02      	cmp	r6, #2
 8017986:	d04f      	beq.n	8017a28 <ucdr_serialize_uint32_t+0x10c>
 8017988:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801798c:	70eb      	strb	r3, [r5, #3]
 801798e:	6923      	ldr	r3, [r4, #16]
 8017990:	68a2      	ldr	r2, [r4, #8]
 8017992:	7da0      	ldrb	r0, [r4, #22]
 8017994:	3304      	adds	r3, #4
 8017996:	1b9b      	subs	r3, r3, r6
 8017998:	4442      	add	r2, r8
 801799a:	2104      	movs	r1, #4
 801799c:	f080 0001 	eor.w	r0, r0, #1
 80179a0:	6123      	str	r3, [r4, #16]
 80179a2:	60a2      	str	r2, [r4, #8]
 80179a4:	7561      	strb	r1, [r4, #21]
 80179a6:	b002      	add	sp, #8
 80179a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179ac:	2104      	movs	r1, #4
 80179ae:	4620      	mov	r0, r4
 80179b0:	f7f8 fdb8 	bl	8010524 <ucdr_check_final_buffer_behavior>
 80179b4:	b1d0      	cbz	r0, 80179ec <ucdr_serialize_uint32_t+0xd0>
 80179b6:	7d23      	ldrb	r3, [r4, #20]
 80179b8:	2b01      	cmp	r3, #1
 80179ba:	68a3      	ldr	r3, [r4, #8]
 80179bc:	d01c      	beq.n	80179f8 <ucdr_serialize_uint32_t+0xdc>
 80179be:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80179c2:	701a      	strb	r2, [r3, #0]
 80179c4:	68a3      	ldr	r3, [r4, #8]
 80179c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80179ca:	705a      	strb	r2, [r3, #1]
 80179cc:	68a3      	ldr	r3, [r4, #8]
 80179ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80179d2:	709a      	strb	r2, [r3, #2]
 80179d4:	68a3      	ldr	r3, [r4, #8]
 80179d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80179da:	70da      	strb	r2, [r3, #3]
 80179dc:	68a2      	ldr	r2, [r4, #8]
 80179de:	6923      	ldr	r3, [r4, #16]
 80179e0:	3204      	adds	r2, #4
 80179e2:	3304      	adds	r3, #4
 80179e4:	2104      	movs	r1, #4
 80179e6:	60a2      	str	r2, [r4, #8]
 80179e8:	6123      	str	r3, [r4, #16]
 80179ea:	7561      	strb	r1, [r4, #21]
 80179ec:	7da0      	ldrb	r0, [r4, #22]
 80179ee:	f080 0001 	eor.w	r0, r0, #1
 80179f2:	b002      	add	sp, #8
 80179f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179f8:	9a01      	ldr	r2, [sp, #4]
 80179fa:	601a      	str	r2, [r3, #0]
 80179fc:	e7ee      	b.n	80179dc <ucdr_serialize_uint32_t+0xc0>
 80179fe:	68a2      	ldr	r2, [r4, #8]
 8017a00:	6923      	ldr	r3, [r4, #16]
 8017a02:	7da0      	ldrb	r0, [r4, #22]
 8017a04:	7567      	strb	r7, [r4, #21]
 8017a06:	1b92      	subs	r2, r2, r6
 8017a08:	1b9b      	subs	r3, r3, r6
 8017a0a:	f080 0001 	eor.w	r0, r0, #1
 8017a0e:	60a2      	str	r2, [r4, #8]
 8017a10:	6123      	str	r3, [r4, #16]
 8017a12:	b002      	add	sp, #8
 8017a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a18:	68a3      	ldr	r3, [r4, #8]
 8017a1a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017a1e:	701a      	strb	r2, [r3, #0]
 8017a20:	68a3      	ldr	r3, [r4, #8]
 8017a22:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017a26:	701a      	strb	r2, [r3, #0]
 8017a28:	68a3      	ldr	r3, [r4, #8]
 8017a2a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017a2e:	701a      	strb	r2, [r3, #0]
 8017a30:	e7ad      	b.n	801798e <ucdr_serialize_uint32_t+0x72>
 8017a32:	4628      	mov	r0, r5
 8017a34:	ad01      	add	r5, sp, #4
 8017a36:	4629      	mov	r1, r5
 8017a38:	4632      	mov	r2, r6
 8017a3a:	f002 ff8e 	bl	801a95a <memcpy>
 8017a3e:	68a0      	ldr	r0, [r4, #8]
 8017a40:	4642      	mov	r2, r8
 8017a42:	19a9      	adds	r1, r5, r6
 8017a44:	f002 ff89 	bl	801a95a <memcpy>
 8017a48:	e7a1      	b.n	801798e <ucdr_serialize_uint32_t+0x72>
 8017a4a:	bf00      	nop

08017a4c <ucdr_serialize_endian_uint32_t>:
 8017a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017a50:	b083      	sub	sp, #12
 8017a52:	460d      	mov	r5, r1
 8017a54:	2104      	movs	r1, #4
 8017a56:	4604      	mov	r4, r0
 8017a58:	9201      	str	r2, [sp, #4]
 8017a5a:	f7f8 fdb5 	bl	80105c8 <ucdr_buffer_alignment>
 8017a5e:	4601      	mov	r1, r0
 8017a60:	4620      	mov	r0, r4
 8017a62:	f894 8015 	ldrb.w	r8, [r4, #21]
 8017a66:	f7f8 fdf3 	bl	8010650 <ucdr_advance_buffer>
 8017a6a:	4620      	mov	r0, r4
 8017a6c:	2104      	movs	r1, #4
 8017a6e:	f7f8 fd4d 	bl	801050c <ucdr_check_buffer_available_for>
 8017a72:	2800      	cmp	r0, #0
 8017a74:	d138      	bne.n	8017ae8 <ucdr_serialize_endian_uint32_t+0x9c>
 8017a76:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8017a7a:	42b7      	cmp	r7, r6
 8017a7c:	d92f      	bls.n	8017ade <ucdr_serialize_endian_uint32_t+0x92>
 8017a7e:	6922      	ldr	r2, [r4, #16]
 8017a80:	60a7      	str	r7, [r4, #8]
 8017a82:	1bbf      	subs	r7, r7, r6
 8017a84:	443a      	add	r2, r7
 8017a86:	f1c7 0904 	rsb	r9, r7, #4
 8017a8a:	6122      	str	r2, [r4, #16]
 8017a8c:	4649      	mov	r1, r9
 8017a8e:	4620      	mov	r0, r4
 8017a90:	f7f8 fd48 	bl	8010524 <ucdr_check_final_buffer_behavior>
 8017a94:	2800      	cmp	r0, #0
 8017a96:	d04a      	beq.n	8017b2e <ucdr_serialize_endian_uint32_t+0xe2>
 8017a98:	2d01      	cmp	r5, #1
 8017a9a:	d063      	beq.n	8017b64 <ucdr_serialize_endian_uint32_t+0x118>
 8017a9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017aa0:	7033      	strb	r3, [r6, #0]
 8017aa2:	2f00      	cmp	r7, #0
 8017aa4:	d051      	beq.n	8017b4a <ucdr_serialize_endian_uint32_t+0xfe>
 8017aa6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017aaa:	7073      	strb	r3, [r6, #1]
 8017aac:	2f01      	cmp	r7, #1
 8017aae:	d050      	beq.n	8017b52 <ucdr_serialize_endian_uint32_t+0x106>
 8017ab0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8017ab4:	70b3      	strb	r3, [r6, #2]
 8017ab6:	2f02      	cmp	r7, #2
 8017ab8:	d04f      	beq.n	8017b5a <ucdr_serialize_endian_uint32_t+0x10e>
 8017aba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8017abe:	70f3      	strb	r3, [r6, #3]
 8017ac0:	6923      	ldr	r3, [r4, #16]
 8017ac2:	68a2      	ldr	r2, [r4, #8]
 8017ac4:	7da0      	ldrb	r0, [r4, #22]
 8017ac6:	3304      	adds	r3, #4
 8017ac8:	1bdb      	subs	r3, r3, r7
 8017aca:	444a      	add	r2, r9
 8017acc:	2104      	movs	r1, #4
 8017ace:	f080 0001 	eor.w	r0, r0, #1
 8017ad2:	6123      	str	r3, [r4, #16]
 8017ad4:	60a2      	str	r2, [r4, #8]
 8017ad6:	7561      	strb	r1, [r4, #21]
 8017ad8:	b003      	add	sp, #12
 8017ada:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ade:	2104      	movs	r1, #4
 8017ae0:	4620      	mov	r0, r4
 8017ae2:	f7f8 fd1f 	bl	8010524 <ucdr_check_final_buffer_behavior>
 8017ae6:	b1c8      	cbz	r0, 8017b1c <ucdr_serialize_endian_uint32_t+0xd0>
 8017ae8:	2d01      	cmp	r5, #1
 8017aea:	68a3      	ldr	r3, [r4, #8]
 8017aec:	d01c      	beq.n	8017b28 <ucdr_serialize_endian_uint32_t+0xdc>
 8017aee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017af2:	701a      	strb	r2, [r3, #0]
 8017af4:	68a3      	ldr	r3, [r4, #8]
 8017af6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017afa:	705a      	strb	r2, [r3, #1]
 8017afc:	68a3      	ldr	r3, [r4, #8]
 8017afe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017b02:	709a      	strb	r2, [r3, #2]
 8017b04:	68a3      	ldr	r3, [r4, #8]
 8017b06:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017b0a:	70da      	strb	r2, [r3, #3]
 8017b0c:	68a2      	ldr	r2, [r4, #8]
 8017b0e:	6923      	ldr	r3, [r4, #16]
 8017b10:	3204      	adds	r2, #4
 8017b12:	3304      	adds	r3, #4
 8017b14:	2104      	movs	r1, #4
 8017b16:	60a2      	str	r2, [r4, #8]
 8017b18:	6123      	str	r3, [r4, #16]
 8017b1a:	7561      	strb	r1, [r4, #21]
 8017b1c:	7da0      	ldrb	r0, [r4, #22]
 8017b1e:	f080 0001 	eor.w	r0, r0, #1
 8017b22:	b003      	add	sp, #12
 8017b24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b28:	9a01      	ldr	r2, [sp, #4]
 8017b2a:	601a      	str	r2, [r3, #0]
 8017b2c:	e7ee      	b.n	8017b0c <ucdr_serialize_endian_uint32_t+0xc0>
 8017b2e:	68a2      	ldr	r2, [r4, #8]
 8017b30:	6923      	ldr	r3, [r4, #16]
 8017b32:	7da0      	ldrb	r0, [r4, #22]
 8017b34:	f884 8015 	strb.w	r8, [r4, #21]
 8017b38:	1bd2      	subs	r2, r2, r7
 8017b3a:	1bdb      	subs	r3, r3, r7
 8017b3c:	f080 0001 	eor.w	r0, r0, #1
 8017b40:	60a2      	str	r2, [r4, #8]
 8017b42:	6123      	str	r3, [r4, #16]
 8017b44:	b003      	add	sp, #12
 8017b46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b4a:	68a3      	ldr	r3, [r4, #8]
 8017b4c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017b50:	701a      	strb	r2, [r3, #0]
 8017b52:	68a3      	ldr	r3, [r4, #8]
 8017b54:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017b58:	701a      	strb	r2, [r3, #0]
 8017b5a:	68a3      	ldr	r3, [r4, #8]
 8017b5c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017b60:	701a      	strb	r2, [r3, #0]
 8017b62:	e7ad      	b.n	8017ac0 <ucdr_serialize_endian_uint32_t+0x74>
 8017b64:	ad01      	add	r5, sp, #4
 8017b66:	4629      	mov	r1, r5
 8017b68:	463a      	mov	r2, r7
 8017b6a:	4630      	mov	r0, r6
 8017b6c:	f002 fef5 	bl	801a95a <memcpy>
 8017b70:	68a0      	ldr	r0, [r4, #8]
 8017b72:	464a      	mov	r2, r9
 8017b74:	19e9      	adds	r1, r5, r7
 8017b76:	f002 fef0 	bl	801a95a <memcpy>
 8017b7a:	e7a1      	b.n	8017ac0 <ucdr_serialize_endian_uint32_t+0x74>

08017b7c <ucdr_deserialize_uint32_t>:
 8017b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b80:	460d      	mov	r5, r1
 8017b82:	2104      	movs	r1, #4
 8017b84:	4604      	mov	r4, r0
 8017b86:	f7f8 fd1f 	bl	80105c8 <ucdr_buffer_alignment>
 8017b8a:	4601      	mov	r1, r0
 8017b8c:	4620      	mov	r0, r4
 8017b8e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8017b92:	f7f8 fd5d 	bl	8010650 <ucdr_advance_buffer>
 8017b96:	4620      	mov	r0, r4
 8017b98:	2104      	movs	r1, #4
 8017b9a:	f7f8 fcb7 	bl	801050c <ucdr_check_buffer_available_for>
 8017b9e:	2800      	cmp	r0, #0
 8017ba0:	d138      	bne.n	8017c14 <ucdr_deserialize_uint32_t+0x98>
 8017ba2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8017ba6:	42b7      	cmp	r7, r6
 8017ba8:	d92f      	bls.n	8017c0a <ucdr_deserialize_uint32_t+0x8e>
 8017baa:	6922      	ldr	r2, [r4, #16]
 8017bac:	60a7      	str	r7, [r4, #8]
 8017bae:	1bbf      	subs	r7, r7, r6
 8017bb0:	443a      	add	r2, r7
 8017bb2:	f1c7 0904 	rsb	r9, r7, #4
 8017bb6:	6122      	str	r2, [r4, #16]
 8017bb8:	4649      	mov	r1, r9
 8017bba:	4620      	mov	r0, r4
 8017bbc:	f7f8 fcb2 	bl	8010524 <ucdr_check_final_buffer_behavior>
 8017bc0:	2800      	cmp	r0, #0
 8017bc2:	d046      	beq.n	8017c52 <ucdr_deserialize_uint32_t+0xd6>
 8017bc4:	7d23      	ldrb	r3, [r4, #20]
 8017bc6:	2b01      	cmp	r3, #1
 8017bc8:	d05c      	beq.n	8017c84 <ucdr_deserialize_uint32_t+0x108>
 8017bca:	78f3      	ldrb	r3, [r6, #3]
 8017bcc:	702b      	strb	r3, [r5, #0]
 8017bce:	2f00      	cmp	r7, #0
 8017bd0:	d04c      	beq.n	8017c6c <ucdr_deserialize_uint32_t+0xf0>
 8017bd2:	78b3      	ldrb	r3, [r6, #2]
 8017bd4:	706b      	strb	r3, [r5, #1]
 8017bd6:	2f01      	cmp	r7, #1
 8017bd8:	f105 0302 	add.w	r3, r5, #2
 8017bdc:	d04a      	beq.n	8017c74 <ucdr_deserialize_uint32_t+0xf8>
 8017bde:	7873      	ldrb	r3, [r6, #1]
 8017be0:	70ab      	strb	r3, [r5, #2]
 8017be2:	2f02      	cmp	r7, #2
 8017be4:	f105 0303 	add.w	r3, r5, #3
 8017be8:	d048      	beq.n	8017c7c <ucdr_deserialize_uint32_t+0x100>
 8017bea:	7833      	ldrb	r3, [r6, #0]
 8017bec:	70eb      	strb	r3, [r5, #3]
 8017bee:	6923      	ldr	r3, [r4, #16]
 8017bf0:	68a2      	ldr	r2, [r4, #8]
 8017bf2:	7da0      	ldrb	r0, [r4, #22]
 8017bf4:	2104      	movs	r1, #4
 8017bf6:	3304      	adds	r3, #4
 8017bf8:	1bdb      	subs	r3, r3, r7
 8017bfa:	444a      	add	r2, r9
 8017bfc:	7561      	strb	r1, [r4, #21]
 8017bfe:	6123      	str	r3, [r4, #16]
 8017c00:	60a2      	str	r2, [r4, #8]
 8017c02:	f080 0001 	eor.w	r0, r0, #1
 8017c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c0a:	2104      	movs	r1, #4
 8017c0c:	4620      	mov	r0, r4
 8017c0e:	f7f8 fc89 	bl	8010524 <ucdr_check_final_buffer_behavior>
 8017c12:	b1b0      	cbz	r0, 8017c42 <ucdr_deserialize_uint32_t+0xc6>
 8017c14:	7d23      	ldrb	r3, [r4, #20]
 8017c16:	2b01      	cmp	r3, #1
 8017c18:	68a3      	ldr	r3, [r4, #8]
 8017c1a:	d017      	beq.n	8017c4c <ucdr_deserialize_uint32_t+0xd0>
 8017c1c:	78db      	ldrb	r3, [r3, #3]
 8017c1e:	702b      	strb	r3, [r5, #0]
 8017c20:	68a3      	ldr	r3, [r4, #8]
 8017c22:	789b      	ldrb	r3, [r3, #2]
 8017c24:	706b      	strb	r3, [r5, #1]
 8017c26:	68a3      	ldr	r3, [r4, #8]
 8017c28:	785b      	ldrb	r3, [r3, #1]
 8017c2a:	70ab      	strb	r3, [r5, #2]
 8017c2c:	68a3      	ldr	r3, [r4, #8]
 8017c2e:	781b      	ldrb	r3, [r3, #0]
 8017c30:	70eb      	strb	r3, [r5, #3]
 8017c32:	68a2      	ldr	r2, [r4, #8]
 8017c34:	6923      	ldr	r3, [r4, #16]
 8017c36:	3204      	adds	r2, #4
 8017c38:	3304      	adds	r3, #4
 8017c3a:	2104      	movs	r1, #4
 8017c3c:	60a2      	str	r2, [r4, #8]
 8017c3e:	6123      	str	r3, [r4, #16]
 8017c40:	7561      	strb	r1, [r4, #21]
 8017c42:	7da0      	ldrb	r0, [r4, #22]
 8017c44:	f080 0001 	eor.w	r0, r0, #1
 8017c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	602b      	str	r3, [r5, #0]
 8017c50:	e7ef      	b.n	8017c32 <ucdr_deserialize_uint32_t+0xb6>
 8017c52:	68a2      	ldr	r2, [r4, #8]
 8017c54:	6923      	ldr	r3, [r4, #16]
 8017c56:	7da0      	ldrb	r0, [r4, #22]
 8017c58:	f884 8015 	strb.w	r8, [r4, #21]
 8017c5c:	1bd2      	subs	r2, r2, r7
 8017c5e:	1bdb      	subs	r3, r3, r7
 8017c60:	60a2      	str	r2, [r4, #8]
 8017c62:	6123      	str	r3, [r4, #16]
 8017c64:	f080 0001 	eor.w	r0, r0, #1
 8017c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c6c:	68a3      	ldr	r3, [r4, #8]
 8017c6e:	789b      	ldrb	r3, [r3, #2]
 8017c70:	706b      	strb	r3, [r5, #1]
 8017c72:	1cab      	adds	r3, r5, #2
 8017c74:	68a2      	ldr	r2, [r4, #8]
 8017c76:	7852      	ldrb	r2, [r2, #1]
 8017c78:	f803 2b01 	strb.w	r2, [r3], #1
 8017c7c:	68a2      	ldr	r2, [r4, #8]
 8017c7e:	7812      	ldrb	r2, [r2, #0]
 8017c80:	701a      	strb	r2, [r3, #0]
 8017c82:	e7b4      	b.n	8017bee <ucdr_deserialize_uint32_t+0x72>
 8017c84:	4631      	mov	r1, r6
 8017c86:	463a      	mov	r2, r7
 8017c88:	4628      	mov	r0, r5
 8017c8a:	f002 fe66 	bl	801a95a <memcpy>
 8017c8e:	68a1      	ldr	r1, [r4, #8]
 8017c90:	464a      	mov	r2, r9
 8017c92:	19e8      	adds	r0, r5, r7
 8017c94:	f002 fe61 	bl	801a95a <memcpy>
 8017c98:	e7a9      	b.n	8017bee <ucdr_deserialize_uint32_t+0x72>
 8017c9a:	bf00      	nop

08017c9c <ucdr_deserialize_endian_uint32_t>:
 8017c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ca0:	460e      	mov	r6, r1
 8017ca2:	2104      	movs	r1, #4
 8017ca4:	4604      	mov	r4, r0
 8017ca6:	4615      	mov	r5, r2
 8017ca8:	f7f8 fc8e 	bl	80105c8 <ucdr_buffer_alignment>
 8017cac:	4601      	mov	r1, r0
 8017cae:	4620      	mov	r0, r4
 8017cb0:	f894 9015 	ldrb.w	r9, [r4, #21]
 8017cb4:	f7f8 fccc 	bl	8010650 <ucdr_advance_buffer>
 8017cb8:	4620      	mov	r0, r4
 8017cba:	2104      	movs	r1, #4
 8017cbc:	f7f8 fc26 	bl	801050c <ucdr_check_buffer_available_for>
 8017cc0:	2800      	cmp	r0, #0
 8017cc2:	d13c      	bne.n	8017d3e <ucdr_deserialize_endian_uint32_t+0xa2>
 8017cc4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8017cc8:	42bb      	cmp	r3, r7
 8017cca:	d933      	bls.n	8017d34 <ucdr_deserialize_endian_uint32_t+0x98>
 8017ccc:	6922      	ldr	r2, [r4, #16]
 8017cce:	60a3      	str	r3, [r4, #8]
 8017cd0:	eba3 0807 	sub.w	r8, r3, r7
 8017cd4:	4442      	add	r2, r8
 8017cd6:	f1c8 0a04 	rsb	sl, r8, #4
 8017cda:	6122      	str	r2, [r4, #16]
 8017cdc:	4651      	mov	r1, sl
 8017cde:	4620      	mov	r0, r4
 8017ce0:	f7f8 fc20 	bl	8010524 <ucdr_check_final_buffer_behavior>
 8017ce4:	2800      	cmp	r0, #0
 8017ce6:	d048      	beq.n	8017d7a <ucdr_deserialize_endian_uint32_t+0xde>
 8017ce8:	2e01      	cmp	r6, #1
 8017cea:	d061      	beq.n	8017db0 <ucdr_deserialize_endian_uint32_t+0x114>
 8017cec:	78fb      	ldrb	r3, [r7, #3]
 8017cee:	702b      	strb	r3, [r5, #0]
 8017cf0:	f1b8 0f00 	cmp.w	r8, #0
 8017cf4:	d050      	beq.n	8017d98 <ucdr_deserialize_endian_uint32_t+0xfc>
 8017cf6:	78bb      	ldrb	r3, [r7, #2]
 8017cf8:	706b      	strb	r3, [r5, #1]
 8017cfa:	f1b8 0f01 	cmp.w	r8, #1
 8017cfe:	f105 0302 	add.w	r3, r5, #2
 8017d02:	d04d      	beq.n	8017da0 <ucdr_deserialize_endian_uint32_t+0x104>
 8017d04:	787b      	ldrb	r3, [r7, #1]
 8017d06:	70ab      	strb	r3, [r5, #2]
 8017d08:	f1b8 0f02 	cmp.w	r8, #2
 8017d0c:	f105 0303 	add.w	r3, r5, #3
 8017d10:	d04a      	beq.n	8017da8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8017d12:	783b      	ldrb	r3, [r7, #0]
 8017d14:	70eb      	strb	r3, [r5, #3]
 8017d16:	6923      	ldr	r3, [r4, #16]
 8017d18:	68a2      	ldr	r2, [r4, #8]
 8017d1a:	7da0      	ldrb	r0, [r4, #22]
 8017d1c:	2104      	movs	r1, #4
 8017d1e:	3304      	adds	r3, #4
 8017d20:	eba3 0308 	sub.w	r3, r3, r8
 8017d24:	4452      	add	r2, sl
 8017d26:	7561      	strb	r1, [r4, #21]
 8017d28:	6123      	str	r3, [r4, #16]
 8017d2a:	60a2      	str	r2, [r4, #8]
 8017d2c:	f080 0001 	eor.w	r0, r0, #1
 8017d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d34:	2104      	movs	r1, #4
 8017d36:	4620      	mov	r0, r4
 8017d38:	f7f8 fbf4 	bl	8010524 <ucdr_check_final_buffer_behavior>
 8017d3c:	b1a8      	cbz	r0, 8017d6a <ucdr_deserialize_endian_uint32_t+0xce>
 8017d3e:	2e01      	cmp	r6, #1
 8017d40:	68a3      	ldr	r3, [r4, #8]
 8017d42:	d017      	beq.n	8017d74 <ucdr_deserialize_endian_uint32_t+0xd8>
 8017d44:	78db      	ldrb	r3, [r3, #3]
 8017d46:	702b      	strb	r3, [r5, #0]
 8017d48:	68a3      	ldr	r3, [r4, #8]
 8017d4a:	789b      	ldrb	r3, [r3, #2]
 8017d4c:	706b      	strb	r3, [r5, #1]
 8017d4e:	68a3      	ldr	r3, [r4, #8]
 8017d50:	785b      	ldrb	r3, [r3, #1]
 8017d52:	70ab      	strb	r3, [r5, #2]
 8017d54:	68a3      	ldr	r3, [r4, #8]
 8017d56:	781b      	ldrb	r3, [r3, #0]
 8017d58:	70eb      	strb	r3, [r5, #3]
 8017d5a:	68a2      	ldr	r2, [r4, #8]
 8017d5c:	6923      	ldr	r3, [r4, #16]
 8017d5e:	3204      	adds	r2, #4
 8017d60:	3304      	adds	r3, #4
 8017d62:	2104      	movs	r1, #4
 8017d64:	60a2      	str	r2, [r4, #8]
 8017d66:	6123      	str	r3, [r4, #16]
 8017d68:	7561      	strb	r1, [r4, #21]
 8017d6a:	7da0      	ldrb	r0, [r4, #22]
 8017d6c:	f080 0001 	eor.w	r0, r0, #1
 8017d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	602b      	str	r3, [r5, #0]
 8017d78:	e7ef      	b.n	8017d5a <ucdr_deserialize_endian_uint32_t+0xbe>
 8017d7a:	68a2      	ldr	r2, [r4, #8]
 8017d7c:	6923      	ldr	r3, [r4, #16]
 8017d7e:	7da0      	ldrb	r0, [r4, #22]
 8017d80:	f884 9015 	strb.w	r9, [r4, #21]
 8017d84:	eba2 0208 	sub.w	r2, r2, r8
 8017d88:	eba3 0308 	sub.w	r3, r3, r8
 8017d8c:	60a2      	str	r2, [r4, #8]
 8017d8e:	6123      	str	r3, [r4, #16]
 8017d90:	f080 0001 	eor.w	r0, r0, #1
 8017d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d98:	68a3      	ldr	r3, [r4, #8]
 8017d9a:	789b      	ldrb	r3, [r3, #2]
 8017d9c:	706b      	strb	r3, [r5, #1]
 8017d9e:	1cab      	adds	r3, r5, #2
 8017da0:	68a2      	ldr	r2, [r4, #8]
 8017da2:	7852      	ldrb	r2, [r2, #1]
 8017da4:	f803 2b01 	strb.w	r2, [r3], #1
 8017da8:	68a2      	ldr	r2, [r4, #8]
 8017daa:	7812      	ldrb	r2, [r2, #0]
 8017dac:	701a      	strb	r2, [r3, #0]
 8017dae:	e7b2      	b.n	8017d16 <ucdr_deserialize_endian_uint32_t+0x7a>
 8017db0:	4639      	mov	r1, r7
 8017db2:	4642      	mov	r2, r8
 8017db4:	4628      	mov	r0, r5
 8017db6:	f002 fdd0 	bl	801a95a <memcpy>
 8017dba:	68a1      	ldr	r1, [r4, #8]
 8017dbc:	4652      	mov	r2, sl
 8017dbe:	eb05 0008 	add.w	r0, r5, r8
 8017dc2:	f002 fdca 	bl	801a95a <memcpy>
 8017dc6:	e7a6      	b.n	8017d16 <ucdr_deserialize_endian_uint32_t+0x7a>

08017dc8 <ucdr_serialize_uint64_t>:
 8017dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dcc:	2108      	movs	r1, #8
 8017dce:	b082      	sub	sp, #8
 8017dd0:	4604      	mov	r4, r0
 8017dd2:	e9cd 2300 	strd	r2, r3, [sp]
 8017dd6:	f7f8 fbf7 	bl	80105c8 <ucdr_buffer_alignment>
 8017dda:	4601      	mov	r1, r0
 8017ddc:	4620      	mov	r0, r4
 8017dde:	7d67      	ldrb	r7, [r4, #21]
 8017de0:	f7f8 fc36 	bl	8010650 <ucdr_advance_buffer>
 8017de4:	4620      	mov	r0, r4
 8017de6:	2108      	movs	r1, #8
 8017de8:	f7f8 fb90 	bl	801050c <ucdr_check_buffer_available_for>
 8017dec:	2800      	cmp	r0, #0
 8017dee:	d14e      	bne.n	8017e8e <ucdr_serialize_uint64_t+0xc6>
 8017df0:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8017df4:	42b5      	cmp	r5, r6
 8017df6:	d945      	bls.n	8017e84 <ucdr_serialize_uint64_t+0xbc>
 8017df8:	6923      	ldr	r3, [r4, #16]
 8017dfa:	60a5      	str	r5, [r4, #8]
 8017dfc:	1bad      	subs	r5, r5, r6
 8017dfe:	442b      	add	r3, r5
 8017e00:	f1c5 0808 	rsb	r8, r5, #8
 8017e04:	6123      	str	r3, [r4, #16]
 8017e06:	4641      	mov	r1, r8
 8017e08:	4620      	mov	r0, r4
 8017e0a:	f7f8 fb8b 	bl	8010524 <ucdr_check_final_buffer_behavior>
 8017e0e:	2800      	cmp	r0, #0
 8017e10:	d074      	beq.n	8017efc <ucdr_serialize_uint64_t+0x134>
 8017e12:	7d23      	ldrb	r3, [r4, #20]
 8017e14:	2b01      	cmp	r3, #1
 8017e16:	f000 809b 	beq.w	8017f50 <ucdr_serialize_uint64_t+0x188>
 8017e1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017e1e:	7033      	strb	r3, [r6, #0]
 8017e20:	2d00      	cmp	r5, #0
 8017e22:	d078      	beq.n	8017f16 <ucdr_serialize_uint64_t+0x14e>
 8017e24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017e28:	7073      	strb	r3, [r6, #1]
 8017e2a:	2d01      	cmp	r5, #1
 8017e2c:	d077      	beq.n	8017f1e <ucdr_serialize_uint64_t+0x156>
 8017e2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8017e32:	70b3      	strb	r3, [r6, #2]
 8017e34:	2d02      	cmp	r5, #2
 8017e36:	d076      	beq.n	8017f26 <ucdr_serialize_uint64_t+0x15e>
 8017e38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8017e3c:	70f3      	strb	r3, [r6, #3]
 8017e3e:	2d03      	cmp	r5, #3
 8017e40:	d075      	beq.n	8017f2e <ucdr_serialize_uint64_t+0x166>
 8017e42:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8017e46:	7133      	strb	r3, [r6, #4]
 8017e48:	2d04      	cmp	r5, #4
 8017e4a:	d074      	beq.n	8017f36 <ucdr_serialize_uint64_t+0x16e>
 8017e4c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8017e50:	7173      	strb	r3, [r6, #5]
 8017e52:	2d05      	cmp	r5, #5
 8017e54:	d073      	beq.n	8017f3e <ucdr_serialize_uint64_t+0x176>
 8017e56:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8017e5a:	71b3      	strb	r3, [r6, #6]
 8017e5c:	2d06      	cmp	r5, #6
 8017e5e:	d072      	beq.n	8017f46 <ucdr_serialize_uint64_t+0x17e>
 8017e60:	f89d 3000 	ldrb.w	r3, [sp]
 8017e64:	71f3      	strb	r3, [r6, #7]
 8017e66:	6923      	ldr	r3, [r4, #16]
 8017e68:	68a2      	ldr	r2, [r4, #8]
 8017e6a:	7da0      	ldrb	r0, [r4, #22]
 8017e6c:	3308      	adds	r3, #8
 8017e6e:	1b5d      	subs	r5, r3, r5
 8017e70:	4442      	add	r2, r8
 8017e72:	2308      	movs	r3, #8
 8017e74:	f080 0001 	eor.w	r0, r0, #1
 8017e78:	6125      	str	r5, [r4, #16]
 8017e7a:	60a2      	str	r2, [r4, #8]
 8017e7c:	7563      	strb	r3, [r4, #21]
 8017e7e:	b002      	add	sp, #8
 8017e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e84:	2108      	movs	r1, #8
 8017e86:	4620      	mov	r0, r4
 8017e88:	f7f8 fb4c 	bl	8010524 <ucdr_check_final_buffer_behavior>
 8017e8c:	b350      	cbz	r0, 8017ee4 <ucdr_serialize_uint64_t+0x11c>
 8017e8e:	7d23      	ldrb	r3, [r4, #20]
 8017e90:	2b01      	cmp	r3, #1
 8017e92:	d02d      	beq.n	8017ef0 <ucdr_serialize_uint64_t+0x128>
 8017e94:	68a3      	ldr	r3, [r4, #8]
 8017e96:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017e9a:	701a      	strb	r2, [r3, #0]
 8017e9c:	68a3      	ldr	r3, [r4, #8]
 8017e9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017ea2:	705a      	strb	r2, [r3, #1]
 8017ea4:	68a3      	ldr	r3, [r4, #8]
 8017ea6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017eaa:	709a      	strb	r2, [r3, #2]
 8017eac:	68a3      	ldr	r3, [r4, #8]
 8017eae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017eb2:	70da      	strb	r2, [r3, #3]
 8017eb4:	68a3      	ldr	r3, [r4, #8]
 8017eb6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8017eba:	711a      	strb	r2, [r3, #4]
 8017ebc:	68a3      	ldr	r3, [r4, #8]
 8017ebe:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8017ec2:	715a      	strb	r2, [r3, #5]
 8017ec4:	68a3      	ldr	r3, [r4, #8]
 8017ec6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8017eca:	719a      	strb	r2, [r3, #6]
 8017ecc:	68a3      	ldr	r3, [r4, #8]
 8017ece:	f89d 2000 	ldrb.w	r2, [sp]
 8017ed2:	71da      	strb	r2, [r3, #7]
 8017ed4:	68a2      	ldr	r2, [r4, #8]
 8017ed6:	6923      	ldr	r3, [r4, #16]
 8017ed8:	3208      	adds	r2, #8
 8017eda:	3308      	adds	r3, #8
 8017edc:	2108      	movs	r1, #8
 8017ede:	60a2      	str	r2, [r4, #8]
 8017ee0:	6123      	str	r3, [r4, #16]
 8017ee2:	7561      	strb	r1, [r4, #21]
 8017ee4:	7da0      	ldrb	r0, [r4, #22]
 8017ee6:	f080 0001 	eor.w	r0, r0, #1
 8017eea:	b002      	add	sp, #8
 8017eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ef0:	466b      	mov	r3, sp
 8017ef2:	cb03      	ldmia	r3!, {r0, r1}
 8017ef4:	68a3      	ldr	r3, [r4, #8]
 8017ef6:	6018      	str	r0, [r3, #0]
 8017ef8:	6059      	str	r1, [r3, #4]
 8017efa:	e7eb      	b.n	8017ed4 <ucdr_serialize_uint64_t+0x10c>
 8017efc:	68a2      	ldr	r2, [r4, #8]
 8017efe:	6923      	ldr	r3, [r4, #16]
 8017f00:	7da0      	ldrb	r0, [r4, #22]
 8017f02:	7567      	strb	r7, [r4, #21]
 8017f04:	1b52      	subs	r2, r2, r5
 8017f06:	f080 0001 	eor.w	r0, r0, #1
 8017f0a:	1b5d      	subs	r5, r3, r5
 8017f0c:	60a2      	str	r2, [r4, #8]
 8017f0e:	6125      	str	r5, [r4, #16]
 8017f10:	b002      	add	sp, #8
 8017f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f16:	68a3      	ldr	r3, [r4, #8]
 8017f18:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017f1c:	701a      	strb	r2, [r3, #0]
 8017f1e:	68a3      	ldr	r3, [r4, #8]
 8017f20:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017f24:	701a      	strb	r2, [r3, #0]
 8017f26:	68a3      	ldr	r3, [r4, #8]
 8017f28:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017f2c:	701a      	strb	r2, [r3, #0]
 8017f2e:	68a3      	ldr	r3, [r4, #8]
 8017f30:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8017f34:	701a      	strb	r2, [r3, #0]
 8017f36:	68a3      	ldr	r3, [r4, #8]
 8017f38:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8017f3c:	701a      	strb	r2, [r3, #0]
 8017f3e:	68a3      	ldr	r3, [r4, #8]
 8017f40:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8017f44:	701a      	strb	r2, [r3, #0]
 8017f46:	68a3      	ldr	r3, [r4, #8]
 8017f48:	f89d 2000 	ldrb.w	r2, [sp]
 8017f4c:	701a      	strb	r2, [r3, #0]
 8017f4e:	e78a      	b.n	8017e66 <ucdr_serialize_uint64_t+0x9e>
 8017f50:	4630      	mov	r0, r6
 8017f52:	466e      	mov	r6, sp
 8017f54:	4631      	mov	r1, r6
 8017f56:	462a      	mov	r2, r5
 8017f58:	f002 fcff 	bl	801a95a <memcpy>
 8017f5c:	68a0      	ldr	r0, [r4, #8]
 8017f5e:	4642      	mov	r2, r8
 8017f60:	1971      	adds	r1, r6, r5
 8017f62:	f002 fcfa 	bl	801a95a <memcpy>
 8017f66:	e77e      	b.n	8017e66 <ucdr_serialize_uint64_t+0x9e>

08017f68 <ucdr_serialize_int16_t>:
 8017f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f6c:	b082      	sub	sp, #8
 8017f6e:	460b      	mov	r3, r1
 8017f70:	2102      	movs	r1, #2
 8017f72:	4604      	mov	r4, r0
 8017f74:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017f78:	f7f8 fb26 	bl	80105c8 <ucdr_buffer_alignment>
 8017f7c:	4601      	mov	r1, r0
 8017f7e:	4620      	mov	r0, r4
 8017f80:	7d67      	ldrb	r7, [r4, #21]
 8017f82:	f7f8 fb65 	bl	8010650 <ucdr_advance_buffer>
 8017f86:	4620      	mov	r0, r4
 8017f88:	2102      	movs	r1, #2
 8017f8a:	f7f8 fabf 	bl	801050c <ucdr_check_buffer_available_for>
 8017f8e:	bb78      	cbnz	r0, 8017ff0 <ucdr_serialize_int16_t+0x88>
 8017f90:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8017f94:	42b5      	cmp	r5, r6
 8017f96:	d926      	bls.n	8017fe6 <ucdr_serialize_int16_t+0x7e>
 8017f98:	6922      	ldr	r2, [r4, #16]
 8017f9a:	60a5      	str	r5, [r4, #8]
 8017f9c:	1bad      	subs	r5, r5, r6
 8017f9e:	442a      	add	r2, r5
 8017fa0:	f1c5 0802 	rsb	r8, r5, #2
 8017fa4:	6122      	str	r2, [r4, #16]
 8017fa6:	4641      	mov	r1, r8
 8017fa8:	4620      	mov	r0, r4
 8017faa:	f7f8 fabb 	bl	8010524 <ucdr_check_final_buffer_behavior>
 8017fae:	2800      	cmp	r0, #0
 8017fb0:	d03b      	beq.n	801802a <ucdr_serialize_int16_t+0xc2>
 8017fb2:	7d23      	ldrb	r3, [r4, #20]
 8017fb4:	2b01      	cmp	r3, #1
 8017fb6:	d04a      	beq.n	801804e <ucdr_serialize_int16_t+0xe6>
 8017fb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017fbc:	7033      	strb	r3, [r6, #0]
 8017fbe:	2d00      	cmp	r5, #0
 8017fc0:	d040      	beq.n	8018044 <ucdr_serialize_int16_t+0xdc>
 8017fc2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017fc6:	7073      	strb	r3, [r6, #1]
 8017fc8:	6923      	ldr	r3, [r4, #16]
 8017fca:	68a2      	ldr	r2, [r4, #8]
 8017fcc:	7da0      	ldrb	r0, [r4, #22]
 8017fce:	3302      	adds	r3, #2
 8017fd0:	1b5b      	subs	r3, r3, r5
 8017fd2:	4442      	add	r2, r8
 8017fd4:	2102      	movs	r1, #2
 8017fd6:	f080 0001 	eor.w	r0, r0, #1
 8017fda:	6123      	str	r3, [r4, #16]
 8017fdc:	60a2      	str	r2, [r4, #8]
 8017fde:	7561      	strb	r1, [r4, #21]
 8017fe0:	b002      	add	sp, #8
 8017fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fe6:	2102      	movs	r1, #2
 8017fe8:	4620      	mov	r0, r4
 8017fea:	f7f8 fa9b 	bl	8010524 <ucdr_check_final_buffer_behavior>
 8017fee:	b190      	cbz	r0, 8018016 <ucdr_serialize_int16_t+0xae>
 8017ff0:	7d23      	ldrb	r3, [r4, #20]
 8017ff2:	2b01      	cmp	r3, #1
 8017ff4:	68a3      	ldr	r3, [r4, #8]
 8017ff6:	d014      	beq.n	8018022 <ucdr_serialize_int16_t+0xba>
 8017ff8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017ffc:	701a      	strb	r2, [r3, #0]
 8017ffe:	68a3      	ldr	r3, [r4, #8]
 8018000:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8018004:	705a      	strb	r2, [r3, #1]
 8018006:	68a2      	ldr	r2, [r4, #8]
 8018008:	6923      	ldr	r3, [r4, #16]
 801800a:	3202      	adds	r2, #2
 801800c:	3302      	adds	r3, #2
 801800e:	2102      	movs	r1, #2
 8018010:	60a2      	str	r2, [r4, #8]
 8018012:	6123      	str	r3, [r4, #16]
 8018014:	7561      	strb	r1, [r4, #21]
 8018016:	7da0      	ldrb	r0, [r4, #22]
 8018018:	f080 0001 	eor.w	r0, r0, #1
 801801c:	b002      	add	sp, #8
 801801e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018022:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8018026:	801a      	strh	r2, [r3, #0]
 8018028:	e7ed      	b.n	8018006 <ucdr_serialize_int16_t+0x9e>
 801802a:	68a2      	ldr	r2, [r4, #8]
 801802c:	6923      	ldr	r3, [r4, #16]
 801802e:	7da0      	ldrb	r0, [r4, #22]
 8018030:	7567      	strb	r7, [r4, #21]
 8018032:	1b52      	subs	r2, r2, r5
 8018034:	1b5b      	subs	r3, r3, r5
 8018036:	f080 0001 	eor.w	r0, r0, #1
 801803a:	60a2      	str	r2, [r4, #8]
 801803c:	6123      	str	r3, [r4, #16]
 801803e:	b002      	add	sp, #8
 8018040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018044:	68a3      	ldr	r3, [r4, #8]
 8018046:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801804a:	701a      	strb	r2, [r3, #0]
 801804c:	e7bc      	b.n	8017fc8 <ucdr_serialize_int16_t+0x60>
 801804e:	4630      	mov	r0, r6
 8018050:	f10d 0606 	add.w	r6, sp, #6
 8018054:	4631      	mov	r1, r6
 8018056:	462a      	mov	r2, r5
 8018058:	f002 fc7f 	bl	801a95a <memcpy>
 801805c:	68a0      	ldr	r0, [r4, #8]
 801805e:	4642      	mov	r2, r8
 8018060:	1971      	adds	r1, r6, r5
 8018062:	f002 fc7a 	bl	801a95a <memcpy>
 8018066:	e7af      	b.n	8017fc8 <ucdr_serialize_int16_t+0x60>

08018068 <ucdr_deserialize_int16_t>:
 8018068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801806c:	460d      	mov	r5, r1
 801806e:	2102      	movs	r1, #2
 8018070:	4604      	mov	r4, r0
 8018072:	f7f8 faa9 	bl	80105c8 <ucdr_buffer_alignment>
 8018076:	4601      	mov	r1, r0
 8018078:	4620      	mov	r0, r4
 801807a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801807e:	f7f8 fae7 	bl	8010650 <ucdr_advance_buffer>
 8018082:	4620      	mov	r0, r4
 8018084:	2102      	movs	r1, #2
 8018086:	f7f8 fa41 	bl	801050c <ucdr_check_buffer_available_for>
 801808a:	bb60      	cbnz	r0, 80180e6 <ucdr_deserialize_int16_t+0x7e>
 801808c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8018090:	42be      	cmp	r6, r7
 8018092:	d923      	bls.n	80180dc <ucdr_deserialize_int16_t+0x74>
 8018094:	6922      	ldr	r2, [r4, #16]
 8018096:	60a6      	str	r6, [r4, #8]
 8018098:	1bf6      	subs	r6, r6, r7
 801809a:	4432      	add	r2, r6
 801809c:	f1c6 0902 	rsb	r9, r6, #2
 80180a0:	6122      	str	r2, [r4, #16]
 80180a2:	4649      	mov	r1, r9
 80180a4:	4620      	mov	r0, r4
 80180a6:	f7f8 fa3d 	bl	8010524 <ucdr_check_final_buffer_behavior>
 80180aa:	2800      	cmp	r0, #0
 80180ac:	d034      	beq.n	8018118 <ucdr_deserialize_int16_t+0xb0>
 80180ae:	7d23      	ldrb	r3, [r4, #20]
 80180b0:	2b01      	cmp	r3, #1
 80180b2:	d042      	beq.n	801813a <ucdr_deserialize_int16_t+0xd2>
 80180b4:	787b      	ldrb	r3, [r7, #1]
 80180b6:	702b      	strb	r3, [r5, #0]
 80180b8:	2e00      	cmp	r6, #0
 80180ba:	d03a      	beq.n	8018132 <ucdr_deserialize_int16_t+0xca>
 80180bc:	783b      	ldrb	r3, [r7, #0]
 80180be:	706b      	strb	r3, [r5, #1]
 80180c0:	6923      	ldr	r3, [r4, #16]
 80180c2:	68a2      	ldr	r2, [r4, #8]
 80180c4:	7da0      	ldrb	r0, [r4, #22]
 80180c6:	2102      	movs	r1, #2
 80180c8:	3302      	adds	r3, #2
 80180ca:	1b9b      	subs	r3, r3, r6
 80180cc:	444a      	add	r2, r9
 80180ce:	7561      	strb	r1, [r4, #21]
 80180d0:	6123      	str	r3, [r4, #16]
 80180d2:	60a2      	str	r2, [r4, #8]
 80180d4:	f080 0001 	eor.w	r0, r0, #1
 80180d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80180dc:	2102      	movs	r1, #2
 80180de:	4620      	mov	r0, r4
 80180e0:	f7f8 fa20 	bl	8010524 <ucdr_check_final_buffer_behavior>
 80180e4:	b180      	cbz	r0, 8018108 <ucdr_deserialize_int16_t+0xa0>
 80180e6:	7d23      	ldrb	r3, [r4, #20]
 80180e8:	2b01      	cmp	r3, #1
 80180ea:	68a3      	ldr	r3, [r4, #8]
 80180ec:	d011      	beq.n	8018112 <ucdr_deserialize_int16_t+0xaa>
 80180ee:	785b      	ldrb	r3, [r3, #1]
 80180f0:	702b      	strb	r3, [r5, #0]
 80180f2:	68a3      	ldr	r3, [r4, #8]
 80180f4:	781b      	ldrb	r3, [r3, #0]
 80180f6:	706b      	strb	r3, [r5, #1]
 80180f8:	68a2      	ldr	r2, [r4, #8]
 80180fa:	6923      	ldr	r3, [r4, #16]
 80180fc:	3202      	adds	r2, #2
 80180fe:	3302      	adds	r3, #2
 8018100:	2102      	movs	r1, #2
 8018102:	60a2      	str	r2, [r4, #8]
 8018104:	6123      	str	r3, [r4, #16]
 8018106:	7561      	strb	r1, [r4, #21]
 8018108:	7da0      	ldrb	r0, [r4, #22]
 801810a:	f080 0001 	eor.w	r0, r0, #1
 801810e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018112:	881b      	ldrh	r3, [r3, #0]
 8018114:	802b      	strh	r3, [r5, #0]
 8018116:	e7ef      	b.n	80180f8 <ucdr_deserialize_int16_t+0x90>
 8018118:	68a2      	ldr	r2, [r4, #8]
 801811a:	6923      	ldr	r3, [r4, #16]
 801811c:	7da0      	ldrb	r0, [r4, #22]
 801811e:	f884 8015 	strb.w	r8, [r4, #21]
 8018122:	1b92      	subs	r2, r2, r6
 8018124:	1b9b      	subs	r3, r3, r6
 8018126:	60a2      	str	r2, [r4, #8]
 8018128:	6123      	str	r3, [r4, #16]
 801812a:	f080 0001 	eor.w	r0, r0, #1
 801812e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018132:	68a3      	ldr	r3, [r4, #8]
 8018134:	781b      	ldrb	r3, [r3, #0]
 8018136:	706b      	strb	r3, [r5, #1]
 8018138:	e7c2      	b.n	80180c0 <ucdr_deserialize_int16_t+0x58>
 801813a:	4639      	mov	r1, r7
 801813c:	4632      	mov	r2, r6
 801813e:	4628      	mov	r0, r5
 8018140:	f002 fc0b 	bl	801a95a <memcpy>
 8018144:	68a1      	ldr	r1, [r4, #8]
 8018146:	464a      	mov	r2, r9
 8018148:	19a8      	adds	r0, r5, r6
 801814a:	f002 fc06 	bl	801a95a <memcpy>
 801814e:	e7b7      	b.n	80180c0 <ucdr_deserialize_int16_t+0x58>

08018150 <ucdr_serialize_int32_t>:
 8018150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018154:	b082      	sub	sp, #8
 8018156:	4604      	mov	r4, r0
 8018158:	9101      	str	r1, [sp, #4]
 801815a:	2104      	movs	r1, #4
 801815c:	f7f8 fa34 	bl	80105c8 <ucdr_buffer_alignment>
 8018160:	4601      	mov	r1, r0
 8018162:	4620      	mov	r0, r4
 8018164:	7d67      	ldrb	r7, [r4, #21]
 8018166:	f7f8 fa73 	bl	8010650 <ucdr_advance_buffer>
 801816a:	4620      	mov	r0, r4
 801816c:	2104      	movs	r1, #4
 801816e:	f7f8 f9cd 	bl	801050c <ucdr_check_buffer_available_for>
 8018172:	2800      	cmp	r0, #0
 8018174:	d139      	bne.n	80181ea <ucdr_serialize_int32_t+0x9a>
 8018176:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 801817a:	42ae      	cmp	r6, r5
 801817c:	d930      	bls.n	80181e0 <ucdr_serialize_int32_t+0x90>
 801817e:	6922      	ldr	r2, [r4, #16]
 8018180:	60a6      	str	r6, [r4, #8]
 8018182:	1b76      	subs	r6, r6, r5
 8018184:	4432      	add	r2, r6
 8018186:	f1c6 0804 	rsb	r8, r6, #4
 801818a:	6122      	str	r2, [r4, #16]
 801818c:	4641      	mov	r1, r8
 801818e:	4620      	mov	r0, r4
 8018190:	f7f8 f9c8 	bl	8010524 <ucdr_check_final_buffer_behavior>
 8018194:	2800      	cmp	r0, #0
 8018196:	d04c      	beq.n	8018232 <ucdr_serialize_int32_t+0xe2>
 8018198:	7d23      	ldrb	r3, [r4, #20]
 801819a:	2b01      	cmp	r3, #1
 801819c:	d063      	beq.n	8018266 <ucdr_serialize_int32_t+0x116>
 801819e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80181a2:	702b      	strb	r3, [r5, #0]
 80181a4:	2e00      	cmp	r6, #0
 80181a6:	d051      	beq.n	801824c <ucdr_serialize_int32_t+0xfc>
 80181a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80181ac:	706b      	strb	r3, [r5, #1]
 80181ae:	2e01      	cmp	r6, #1
 80181b0:	d050      	beq.n	8018254 <ucdr_serialize_int32_t+0x104>
 80181b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80181b6:	70ab      	strb	r3, [r5, #2]
 80181b8:	2e02      	cmp	r6, #2
 80181ba:	d04f      	beq.n	801825c <ucdr_serialize_int32_t+0x10c>
 80181bc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80181c0:	70eb      	strb	r3, [r5, #3]
 80181c2:	6923      	ldr	r3, [r4, #16]
 80181c4:	68a2      	ldr	r2, [r4, #8]
 80181c6:	7da0      	ldrb	r0, [r4, #22]
 80181c8:	3304      	adds	r3, #4
 80181ca:	1b9b      	subs	r3, r3, r6
 80181cc:	4442      	add	r2, r8
 80181ce:	2104      	movs	r1, #4
 80181d0:	f080 0001 	eor.w	r0, r0, #1
 80181d4:	6123      	str	r3, [r4, #16]
 80181d6:	60a2      	str	r2, [r4, #8]
 80181d8:	7561      	strb	r1, [r4, #21]
 80181da:	b002      	add	sp, #8
 80181dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181e0:	2104      	movs	r1, #4
 80181e2:	4620      	mov	r0, r4
 80181e4:	f7f8 f99e 	bl	8010524 <ucdr_check_final_buffer_behavior>
 80181e8:	b1d0      	cbz	r0, 8018220 <ucdr_serialize_int32_t+0xd0>
 80181ea:	7d23      	ldrb	r3, [r4, #20]
 80181ec:	2b01      	cmp	r3, #1
 80181ee:	68a3      	ldr	r3, [r4, #8]
 80181f0:	d01c      	beq.n	801822c <ucdr_serialize_int32_t+0xdc>
 80181f2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80181f6:	701a      	strb	r2, [r3, #0]
 80181f8:	68a3      	ldr	r3, [r4, #8]
 80181fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80181fe:	705a      	strb	r2, [r3, #1]
 8018200:	68a3      	ldr	r3, [r4, #8]
 8018202:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8018206:	709a      	strb	r2, [r3, #2]
 8018208:	68a3      	ldr	r3, [r4, #8]
 801820a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801820e:	70da      	strb	r2, [r3, #3]
 8018210:	68a2      	ldr	r2, [r4, #8]
 8018212:	6923      	ldr	r3, [r4, #16]
 8018214:	3204      	adds	r2, #4
 8018216:	3304      	adds	r3, #4
 8018218:	2104      	movs	r1, #4
 801821a:	60a2      	str	r2, [r4, #8]
 801821c:	6123      	str	r3, [r4, #16]
 801821e:	7561      	strb	r1, [r4, #21]
 8018220:	7da0      	ldrb	r0, [r4, #22]
 8018222:	f080 0001 	eor.w	r0, r0, #1
 8018226:	b002      	add	sp, #8
 8018228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801822c:	9a01      	ldr	r2, [sp, #4]
 801822e:	601a      	str	r2, [r3, #0]
 8018230:	e7ee      	b.n	8018210 <ucdr_serialize_int32_t+0xc0>
 8018232:	68a2      	ldr	r2, [r4, #8]
 8018234:	6923      	ldr	r3, [r4, #16]
 8018236:	7da0      	ldrb	r0, [r4, #22]
 8018238:	7567      	strb	r7, [r4, #21]
 801823a:	1b92      	subs	r2, r2, r6
 801823c:	1b9b      	subs	r3, r3, r6
 801823e:	f080 0001 	eor.w	r0, r0, #1
 8018242:	60a2      	str	r2, [r4, #8]
 8018244:	6123      	str	r3, [r4, #16]
 8018246:	b002      	add	sp, #8
 8018248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801824c:	68a3      	ldr	r3, [r4, #8]
 801824e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8018252:	701a      	strb	r2, [r3, #0]
 8018254:	68a3      	ldr	r3, [r4, #8]
 8018256:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801825a:	701a      	strb	r2, [r3, #0]
 801825c:	68a3      	ldr	r3, [r4, #8]
 801825e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8018262:	701a      	strb	r2, [r3, #0]
 8018264:	e7ad      	b.n	80181c2 <ucdr_serialize_int32_t+0x72>
 8018266:	4628      	mov	r0, r5
 8018268:	ad01      	add	r5, sp, #4
 801826a:	4629      	mov	r1, r5
 801826c:	4632      	mov	r2, r6
 801826e:	f002 fb74 	bl	801a95a <memcpy>
 8018272:	68a0      	ldr	r0, [r4, #8]
 8018274:	4642      	mov	r2, r8
 8018276:	19a9      	adds	r1, r5, r6
 8018278:	f002 fb6f 	bl	801a95a <memcpy>
 801827c:	e7a1      	b.n	80181c2 <ucdr_serialize_int32_t+0x72>
 801827e:	bf00      	nop

08018280 <ucdr_deserialize_int32_t>:
 8018280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018284:	460d      	mov	r5, r1
 8018286:	2104      	movs	r1, #4
 8018288:	4604      	mov	r4, r0
 801828a:	f7f8 f99d 	bl	80105c8 <ucdr_buffer_alignment>
 801828e:	4601      	mov	r1, r0
 8018290:	4620      	mov	r0, r4
 8018292:	f894 8015 	ldrb.w	r8, [r4, #21]
 8018296:	f7f8 f9db 	bl	8010650 <ucdr_advance_buffer>
 801829a:	4620      	mov	r0, r4
 801829c:	2104      	movs	r1, #4
 801829e:	f7f8 f935 	bl	801050c <ucdr_check_buffer_available_for>
 80182a2:	2800      	cmp	r0, #0
 80182a4:	d138      	bne.n	8018318 <ucdr_deserialize_int32_t+0x98>
 80182a6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80182aa:	42b7      	cmp	r7, r6
 80182ac:	d92f      	bls.n	801830e <ucdr_deserialize_int32_t+0x8e>
 80182ae:	6922      	ldr	r2, [r4, #16]
 80182b0:	60a7      	str	r7, [r4, #8]
 80182b2:	1bbf      	subs	r7, r7, r6
 80182b4:	443a      	add	r2, r7
 80182b6:	f1c7 0904 	rsb	r9, r7, #4
 80182ba:	6122      	str	r2, [r4, #16]
 80182bc:	4649      	mov	r1, r9
 80182be:	4620      	mov	r0, r4
 80182c0:	f7f8 f930 	bl	8010524 <ucdr_check_final_buffer_behavior>
 80182c4:	2800      	cmp	r0, #0
 80182c6:	d046      	beq.n	8018356 <ucdr_deserialize_int32_t+0xd6>
 80182c8:	7d23      	ldrb	r3, [r4, #20]
 80182ca:	2b01      	cmp	r3, #1
 80182cc:	d05c      	beq.n	8018388 <ucdr_deserialize_int32_t+0x108>
 80182ce:	78f3      	ldrb	r3, [r6, #3]
 80182d0:	702b      	strb	r3, [r5, #0]
 80182d2:	2f00      	cmp	r7, #0
 80182d4:	d04c      	beq.n	8018370 <ucdr_deserialize_int32_t+0xf0>
 80182d6:	78b3      	ldrb	r3, [r6, #2]
 80182d8:	706b      	strb	r3, [r5, #1]
 80182da:	2f01      	cmp	r7, #1
 80182dc:	f105 0302 	add.w	r3, r5, #2
 80182e0:	d04a      	beq.n	8018378 <ucdr_deserialize_int32_t+0xf8>
 80182e2:	7873      	ldrb	r3, [r6, #1]
 80182e4:	70ab      	strb	r3, [r5, #2]
 80182e6:	2f02      	cmp	r7, #2
 80182e8:	f105 0303 	add.w	r3, r5, #3
 80182ec:	d048      	beq.n	8018380 <ucdr_deserialize_int32_t+0x100>
 80182ee:	7833      	ldrb	r3, [r6, #0]
 80182f0:	70eb      	strb	r3, [r5, #3]
 80182f2:	6923      	ldr	r3, [r4, #16]
 80182f4:	68a2      	ldr	r2, [r4, #8]
 80182f6:	7da0      	ldrb	r0, [r4, #22]
 80182f8:	2104      	movs	r1, #4
 80182fa:	3304      	adds	r3, #4
 80182fc:	1bdb      	subs	r3, r3, r7
 80182fe:	444a      	add	r2, r9
 8018300:	7561      	strb	r1, [r4, #21]
 8018302:	6123      	str	r3, [r4, #16]
 8018304:	60a2      	str	r2, [r4, #8]
 8018306:	f080 0001 	eor.w	r0, r0, #1
 801830a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801830e:	2104      	movs	r1, #4
 8018310:	4620      	mov	r0, r4
 8018312:	f7f8 f907 	bl	8010524 <ucdr_check_final_buffer_behavior>
 8018316:	b1b0      	cbz	r0, 8018346 <ucdr_deserialize_int32_t+0xc6>
 8018318:	7d23      	ldrb	r3, [r4, #20]
 801831a:	2b01      	cmp	r3, #1
 801831c:	68a3      	ldr	r3, [r4, #8]
 801831e:	d017      	beq.n	8018350 <ucdr_deserialize_int32_t+0xd0>
 8018320:	78db      	ldrb	r3, [r3, #3]
 8018322:	702b      	strb	r3, [r5, #0]
 8018324:	68a3      	ldr	r3, [r4, #8]
 8018326:	789b      	ldrb	r3, [r3, #2]
 8018328:	706b      	strb	r3, [r5, #1]
 801832a:	68a3      	ldr	r3, [r4, #8]
 801832c:	785b      	ldrb	r3, [r3, #1]
 801832e:	70ab      	strb	r3, [r5, #2]
 8018330:	68a3      	ldr	r3, [r4, #8]
 8018332:	781b      	ldrb	r3, [r3, #0]
 8018334:	70eb      	strb	r3, [r5, #3]
 8018336:	68a2      	ldr	r2, [r4, #8]
 8018338:	6923      	ldr	r3, [r4, #16]
 801833a:	3204      	adds	r2, #4
 801833c:	3304      	adds	r3, #4
 801833e:	2104      	movs	r1, #4
 8018340:	60a2      	str	r2, [r4, #8]
 8018342:	6123      	str	r3, [r4, #16]
 8018344:	7561      	strb	r1, [r4, #21]
 8018346:	7da0      	ldrb	r0, [r4, #22]
 8018348:	f080 0001 	eor.w	r0, r0, #1
 801834c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	602b      	str	r3, [r5, #0]
 8018354:	e7ef      	b.n	8018336 <ucdr_deserialize_int32_t+0xb6>
 8018356:	68a2      	ldr	r2, [r4, #8]
 8018358:	6923      	ldr	r3, [r4, #16]
 801835a:	7da0      	ldrb	r0, [r4, #22]
 801835c:	f884 8015 	strb.w	r8, [r4, #21]
 8018360:	1bd2      	subs	r2, r2, r7
 8018362:	1bdb      	subs	r3, r3, r7
 8018364:	60a2      	str	r2, [r4, #8]
 8018366:	6123      	str	r3, [r4, #16]
 8018368:	f080 0001 	eor.w	r0, r0, #1
 801836c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018370:	68a3      	ldr	r3, [r4, #8]
 8018372:	789b      	ldrb	r3, [r3, #2]
 8018374:	706b      	strb	r3, [r5, #1]
 8018376:	1cab      	adds	r3, r5, #2
 8018378:	68a2      	ldr	r2, [r4, #8]
 801837a:	7852      	ldrb	r2, [r2, #1]
 801837c:	f803 2b01 	strb.w	r2, [r3], #1
 8018380:	68a2      	ldr	r2, [r4, #8]
 8018382:	7812      	ldrb	r2, [r2, #0]
 8018384:	701a      	strb	r2, [r3, #0]
 8018386:	e7b4      	b.n	80182f2 <ucdr_deserialize_int32_t+0x72>
 8018388:	4631      	mov	r1, r6
 801838a:	463a      	mov	r2, r7
 801838c:	4628      	mov	r0, r5
 801838e:	f002 fae4 	bl	801a95a <memcpy>
 8018392:	68a1      	ldr	r1, [r4, #8]
 8018394:	464a      	mov	r2, r9
 8018396:	19e8      	adds	r0, r5, r7
 8018398:	f002 fadf 	bl	801a95a <memcpy>
 801839c:	e7a9      	b.n	80182f2 <ucdr_deserialize_int32_t+0x72>
 801839e:	bf00      	nop

080183a0 <ucdr_serialize_string>:
 80183a0:	b510      	push	{r4, lr}
 80183a2:	b082      	sub	sp, #8
 80183a4:	4604      	mov	r4, r0
 80183a6:	4608      	mov	r0, r1
 80183a8:	9101      	str	r1, [sp, #4]
 80183aa:	f7e7 ff79 	bl	80002a0 <strlen>
 80183ae:	9901      	ldr	r1, [sp, #4]
 80183b0:	4602      	mov	r2, r0
 80183b2:	3201      	adds	r2, #1
 80183b4:	4620      	mov	r0, r4
 80183b6:	b002      	add	sp, #8
 80183b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183bc:	f7f8 b968 	b.w	8010690 <ucdr_serialize_sequence_char>

080183c0 <ucdr_deserialize_string>:
 80183c0:	b500      	push	{lr}
 80183c2:	b083      	sub	sp, #12
 80183c4:	ab01      	add	r3, sp, #4
 80183c6:	f7f8 f975 	bl	80106b4 <ucdr_deserialize_sequence_char>
 80183ca:	b003      	add	sp, #12
 80183cc:	f85d fb04 	ldr.w	pc, [sp], #4

080183d0 <uxr_init_input_best_effort_stream>:
 80183d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80183d4:	8003      	strh	r3, [r0, #0]
 80183d6:	4770      	bx	lr

080183d8 <uxr_reset_input_best_effort_stream>:
 80183d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80183dc:	8003      	strh	r3, [r0, #0]
 80183de:	4770      	bx	lr

080183e0 <uxr_receive_best_effort_message>:
 80183e0:	b538      	push	{r3, r4, r5, lr}
 80183e2:	4604      	mov	r4, r0
 80183e4:	8800      	ldrh	r0, [r0, #0]
 80183e6:	460d      	mov	r5, r1
 80183e8:	f000 fd20 	bl	8018e2c <uxr_seq_num_cmp>
 80183ec:	4603      	mov	r3, r0
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80183f4:	bfb8      	it	lt
 80183f6:	8025      	strhlt	r5, [r4, #0]
 80183f8:	bd38      	pop	{r3, r4, r5, pc}
 80183fa:	bf00      	nop

080183fc <on_full_input_buffer>:
 80183fc:	b570      	push	{r4, r5, r6, lr}
 80183fe:	6802      	ldr	r2, [r0, #0]
 8018400:	460d      	mov	r5, r1
 8018402:	6809      	ldr	r1, [r1, #0]
 8018404:	686c      	ldr	r4, [r5, #4]
 8018406:	1a53      	subs	r3, r2, r1
 8018408:	4606      	mov	r6, r0
 801840a:	8928      	ldrh	r0, [r5, #8]
 801840c:	fbb4 f4f0 	udiv	r4, r4, r0
 8018410:	fbb3 f3f4 	udiv	r3, r3, r4
 8018414:	3301      	adds	r3, #1
 8018416:	b29b      	uxth	r3, r3
 8018418:	fbb3 f2f0 	udiv	r2, r3, r0
 801841c:	fb00 3312 	mls	r3, r0, r2, r3
 8018420:	b29b      	uxth	r3, r3
 8018422:	fb04 f403 	mul.w	r4, r4, r3
 8018426:	1d23      	adds	r3, r4, #4
 8018428:	440b      	add	r3, r1
 801842a:	7d28      	ldrb	r0, [r5, #20]
 801842c:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8018430:	b110      	cbz	r0, 8018438 <on_full_input_buffer+0x3c>
 8018432:	2000      	movs	r0, #0
 8018434:	f843 0c04 	str.w	r0, [r3, #-4]
 8018438:	2a03      	cmp	r2, #3
 801843a:	d801      	bhi.n	8018440 <on_full_input_buffer+0x44>
 801843c:	2001      	movs	r0, #1
 801843e:	bd70      	pop	{r4, r5, r6, pc}
 8018440:	3408      	adds	r4, #8
 8018442:	6933      	ldr	r3, [r6, #16]
 8018444:	4421      	add	r1, r4
 8018446:	4630      	mov	r0, r6
 8018448:	3a04      	subs	r2, #4
 801844a:	f7f8 f8a9 	bl	80105a0 <ucdr_init_buffer_origin>
 801844e:	4630      	mov	r0, r6
 8018450:	4902      	ldr	r1, [pc, #8]	@ (801845c <on_full_input_buffer+0x60>)
 8018452:	462a      	mov	r2, r5
 8018454:	f7f8 f882 	bl	801055c <ucdr_set_on_full_buffer_callback>
 8018458:	2000      	movs	r0, #0
 801845a:	bd70      	pop	{r4, r5, r6, pc}
 801845c:	080183fd 	.word	0x080183fd

08018460 <uxr_init_input_reliable_stream>:
 8018460:	b470      	push	{r4, r5, r6}
 8018462:	9c03      	ldr	r4, [sp, #12]
 8018464:	6001      	str	r1, [r0, #0]
 8018466:	2600      	movs	r6, #0
 8018468:	8103      	strh	r3, [r0, #8]
 801846a:	6042      	str	r2, [r0, #4]
 801846c:	6104      	str	r4, [r0, #16]
 801846e:	7506      	strb	r6, [r0, #20]
 8018470:	b1ab      	cbz	r3, 801849e <uxr_init_input_reliable_stream+0x3e>
 8018472:	600e      	str	r6, [r1, #0]
 8018474:	8901      	ldrh	r1, [r0, #8]
 8018476:	2901      	cmp	r1, #1
 8018478:	d911      	bls.n	801849e <uxr_init_input_reliable_stream+0x3e>
 801847a:	2201      	movs	r2, #1
 801847c:	e9d0 5400 	ldrd	r5, r4, [r0]
 8018480:	fbb2 f3f1 	udiv	r3, r2, r1
 8018484:	fb01 2313 	mls	r3, r1, r3, r2
 8018488:	b29b      	uxth	r3, r3
 801848a:	fbb4 f1f1 	udiv	r1, r4, r1
 801848e:	fb03 f301 	mul.w	r3, r3, r1
 8018492:	3201      	adds	r2, #1
 8018494:	50ee      	str	r6, [r5, r3]
 8018496:	8901      	ldrh	r1, [r0, #8]
 8018498:	b292      	uxth	r2, r2
 801849a:	4291      	cmp	r1, r2
 801849c:	d8ee      	bhi.n	801847c <uxr_init_input_reliable_stream+0x1c>
 801849e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80184a2:	bc70      	pop	{r4, r5, r6}
 80184a4:	60c3      	str	r3, [r0, #12]
 80184a6:	4770      	bx	lr

080184a8 <uxr_reset_input_reliable_stream>:
 80184a8:	8902      	ldrh	r2, [r0, #8]
 80184aa:	b1ca      	cbz	r2, 80184e0 <uxr_reset_input_reliable_stream+0x38>
 80184ac:	b470      	push	{r4, r5, r6}
 80184ae:	2400      	movs	r4, #0
 80184b0:	4621      	mov	r1, r4
 80184b2:	4626      	mov	r6, r4
 80184b4:	fbb1 f3f2 	udiv	r3, r1, r2
 80184b8:	fb02 1313 	mls	r3, r2, r3, r1
 80184bc:	e9d0 5100 	ldrd	r5, r1, [r0]
 80184c0:	b29b      	uxth	r3, r3
 80184c2:	fbb1 f2f2 	udiv	r2, r1, r2
 80184c6:	fb03 f302 	mul.w	r3, r3, r2
 80184ca:	3401      	adds	r4, #1
 80184cc:	50ee      	str	r6, [r5, r3]
 80184ce:	8902      	ldrh	r2, [r0, #8]
 80184d0:	b2a1      	uxth	r1, r4
 80184d2:	428a      	cmp	r2, r1
 80184d4:	d8ee      	bhi.n	80184b4 <uxr_reset_input_reliable_stream+0xc>
 80184d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80184da:	bc70      	pop	{r4, r5, r6}
 80184dc:	60c3      	str	r3, [r0, #12]
 80184de:	4770      	bx	lr
 80184e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80184e4:	60c3      	str	r3, [r0, #12]
 80184e6:	4770      	bx	lr

080184e8 <uxr_receive_reliable_message>:
 80184e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80184ec:	4604      	mov	r4, r0
 80184ee:	460d      	mov	r5, r1
 80184f0:	8901      	ldrh	r1, [r0, #8]
 80184f2:	8980      	ldrh	r0, [r0, #12]
 80184f4:	4690      	mov	r8, r2
 80184f6:	461f      	mov	r7, r3
 80184f8:	f000 fc90 	bl	8018e1c <uxr_seq_num_add>
 80184fc:	4629      	mov	r1, r5
 80184fe:	4606      	mov	r6, r0
 8018500:	89a0      	ldrh	r0, [r4, #12]
 8018502:	f000 fc93 	bl	8018e2c <uxr_seq_num_cmp>
 8018506:	2800      	cmp	r0, #0
 8018508:	db0a      	blt.n	8018520 <uxr_receive_reliable_message+0x38>
 801850a:	2600      	movs	r6, #0
 801850c:	89e0      	ldrh	r0, [r4, #14]
 801850e:	4629      	mov	r1, r5
 8018510:	f000 fc8c 	bl	8018e2c <uxr_seq_num_cmp>
 8018514:	2800      	cmp	r0, #0
 8018516:	bfb8      	it	lt
 8018518:	81e5      	strhlt	r5, [r4, #14]
 801851a:	4630      	mov	r0, r6
 801851c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018520:	4630      	mov	r0, r6
 8018522:	4629      	mov	r1, r5
 8018524:	f000 fc82 	bl	8018e2c <uxr_seq_num_cmp>
 8018528:	2800      	cmp	r0, #0
 801852a:	dbee      	blt.n	801850a <uxr_receive_reliable_message+0x22>
 801852c:	6923      	ldr	r3, [r4, #16]
 801852e:	4640      	mov	r0, r8
 8018530:	4798      	blx	r3
 8018532:	2101      	movs	r1, #1
 8018534:	4681      	mov	r9, r0
 8018536:	89a0      	ldrh	r0, [r4, #12]
 8018538:	f000 fc70 	bl	8018e1c <uxr_seq_num_add>
 801853c:	f1b9 0f00 	cmp.w	r9, #0
 8018540:	d101      	bne.n	8018546 <uxr_receive_reliable_message+0x5e>
 8018542:	4285      	cmp	r5, r0
 8018544:	d049      	beq.n	80185da <uxr_receive_reliable_message+0xf2>
 8018546:	8921      	ldrh	r1, [r4, #8]
 8018548:	fbb5 f3f1 	udiv	r3, r5, r1
 801854c:	fb01 5313 	mls	r3, r1, r3, r5
 8018550:	b29b      	uxth	r3, r3
 8018552:	6862      	ldr	r2, [r4, #4]
 8018554:	6820      	ldr	r0, [r4, #0]
 8018556:	fbb2 f2f1 	udiv	r2, r2, r1
 801855a:	fb03 f302 	mul.w	r3, r3, r2
 801855e:	3304      	adds	r3, #4
 8018560:	4418      	add	r0, r3
 8018562:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018566:	2b00      	cmp	r3, #0
 8018568:	d1cf      	bne.n	801850a <uxr_receive_reliable_message+0x22>
 801856a:	4641      	mov	r1, r8
 801856c:	463a      	mov	r2, r7
 801856e:	f002 f9f4 	bl	801a95a <memcpy>
 8018572:	8921      	ldrh	r1, [r4, #8]
 8018574:	fbb5 f3f1 	udiv	r3, r5, r1
 8018578:	fb01 5313 	mls	r3, r1, r3, r5
 801857c:	b29b      	uxth	r3, r3
 801857e:	6862      	ldr	r2, [r4, #4]
 8018580:	fbb2 f2f1 	udiv	r2, r2, r1
 8018584:	6821      	ldr	r1, [r4, #0]
 8018586:	fb03 f302 	mul.w	r3, r3, r2
 801858a:	2201      	movs	r2, #1
 801858c:	50cf      	str	r7, [r1, r3]
 801858e:	9b08      	ldr	r3, [sp, #32]
 8018590:	701a      	strb	r2, [r3, #0]
 8018592:	f1b9 0f00 	cmp.w	r9, #0
 8018596:	d0b8      	beq.n	801850a <uxr_receive_reliable_message+0x22>
 8018598:	89a6      	ldrh	r6, [r4, #12]
 801859a:	e001      	b.n	80185a0 <uxr_receive_reliable_message+0xb8>
 801859c:	2801      	cmp	r0, #1
 801859e:	d1b4      	bne.n	801850a <uxr_receive_reliable_message+0x22>
 80185a0:	4630      	mov	r0, r6
 80185a2:	2101      	movs	r1, #1
 80185a4:	f000 fc3a 	bl	8018e1c <uxr_seq_num_add>
 80185a8:	8921      	ldrh	r1, [r4, #8]
 80185aa:	fbb0 f3f1 	udiv	r3, r0, r1
 80185ae:	fb01 0313 	mls	r3, r1, r3, r0
 80185b2:	b29b      	uxth	r3, r3
 80185b4:	6862      	ldr	r2, [r4, #4]
 80185b6:	fbb2 f2f1 	udiv	r2, r2, r1
 80185ba:	4606      	mov	r6, r0
 80185bc:	fb03 f302 	mul.w	r3, r3, r2
 80185c0:	6820      	ldr	r0, [r4, #0]
 80185c2:	3304      	adds	r3, #4
 80185c4:	4418      	add	r0, r3
 80185c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d09d      	beq.n	801850a <uxr_receive_reliable_message+0x22>
 80185ce:	6923      	ldr	r3, [r4, #16]
 80185d0:	4798      	blx	r3
 80185d2:	2802      	cmp	r0, #2
 80185d4:	d1e2      	bne.n	801859c <uxr_receive_reliable_message+0xb4>
 80185d6:	2601      	movs	r6, #1
 80185d8:	e798      	b.n	801850c <uxr_receive_reliable_message+0x24>
 80185da:	9b08      	ldr	r3, [sp, #32]
 80185dc:	81a5      	strh	r5, [r4, #12]
 80185de:	2601      	movs	r6, #1
 80185e0:	f883 9000 	strb.w	r9, [r3]
 80185e4:	e792      	b.n	801850c <uxr_receive_reliable_message+0x24>
 80185e6:	bf00      	nop

080185e8 <uxr_next_input_reliable_buffer_available>:
 80185e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185ec:	4604      	mov	r4, r0
 80185ee:	460e      	mov	r6, r1
 80185f0:	8980      	ldrh	r0, [r0, #12]
 80185f2:	2101      	movs	r1, #1
 80185f4:	4617      	mov	r7, r2
 80185f6:	f000 fc11 	bl	8018e1c <uxr_seq_num_add>
 80185fa:	8921      	ldrh	r1, [r4, #8]
 80185fc:	fbb0 f3f1 	udiv	r3, r0, r1
 8018600:	fb01 0313 	mls	r3, r1, r3, r0
 8018604:	b29b      	uxth	r3, r3
 8018606:	6862      	ldr	r2, [r4, #4]
 8018608:	fbb2 f2f1 	udiv	r2, r2, r1
 801860c:	fb03 f302 	mul.w	r3, r3, r2
 8018610:	6822      	ldr	r2, [r4, #0]
 8018612:	3304      	adds	r3, #4
 8018614:	eb02 0803 	add.w	r8, r2, r3
 8018618:	f858 9c04 	ldr.w	r9, [r8, #-4]
 801861c:	f1b9 0f00 	cmp.w	r9, #0
 8018620:	d025      	beq.n	801866e <uxr_next_input_reliable_buffer_available+0x86>
 8018622:	6923      	ldr	r3, [r4, #16]
 8018624:	4605      	mov	r5, r0
 8018626:	4640      	mov	r0, r8
 8018628:	4798      	blx	r3
 801862a:	4682      	mov	sl, r0
 801862c:	b310      	cbz	r0, 8018674 <uxr_next_input_reliable_buffer_available+0x8c>
 801862e:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018632:	e005      	b.n	8018640 <uxr_next_input_reliable_buffer_available+0x58>
 8018634:	6923      	ldr	r3, [r4, #16]
 8018636:	4798      	blx	r3
 8018638:	2802      	cmp	r0, #2
 801863a:	d032      	beq.n	80186a2 <uxr_next_input_reliable_buffer_available+0xba>
 801863c:	2801      	cmp	r0, #1
 801863e:	d116      	bne.n	801866e <uxr_next_input_reliable_buffer_available+0x86>
 8018640:	4650      	mov	r0, sl
 8018642:	2101      	movs	r1, #1
 8018644:	f000 fbea 	bl	8018e1c <uxr_seq_num_add>
 8018648:	8921      	ldrh	r1, [r4, #8]
 801864a:	fbb0 f3f1 	udiv	r3, r0, r1
 801864e:	fb01 0313 	mls	r3, r1, r3, r0
 8018652:	b29b      	uxth	r3, r3
 8018654:	6862      	ldr	r2, [r4, #4]
 8018656:	fbb2 f2f1 	udiv	r2, r2, r1
 801865a:	4682      	mov	sl, r0
 801865c:	fb03 f302 	mul.w	r3, r3, r2
 8018660:	6820      	ldr	r0, [r4, #0]
 8018662:	3304      	adds	r3, #4
 8018664:	4418      	add	r0, r3
 8018666:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801866a:	2b00      	cmp	r3, #0
 801866c:	d1e2      	bne.n	8018634 <uxr_next_input_reliable_buffer_available+0x4c>
 801866e:	2000      	movs	r0, #0
 8018670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018674:	464a      	mov	r2, r9
 8018676:	4641      	mov	r1, r8
 8018678:	4630      	mov	r0, r6
 801867a:	f7f7 ff99 	bl	80105b0 <ucdr_init_buffer>
 801867e:	8921      	ldrh	r1, [r4, #8]
 8018680:	fbb5 f3f1 	udiv	r3, r5, r1
 8018684:	fb01 5313 	mls	r3, r1, r3, r5
 8018688:	b29b      	uxth	r3, r3
 801868a:	6862      	ldr	r2, [r4, #4]
 801868c:	fbb2 f2f1 	udiv	r2, r2, r1
 8018690:	6821      	ldr	r1, [r4, #0]
 8018692:	fb03 f302 	mul.w	r3, r3, r2
 8018696:	2001      	movs	r0, #1
 8018698:	f841 a003 	str.w	sl, [r1, r3]
 801869c:	81a5      	strh	r5, [r4, #12]
 801869e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186a2:	8922      	ldrh	r2, [r4, #8]
 80186a4:	fbb5 f0f2 	udiv	r0, r5, r2
 80186a8:	fb02 5510 	mls	r5, r2, r0, r5
 80186ac:	b2ad      	uxth	r5, r5
 80186ae:	6863      	ldr	r3, [r4, #4]
 80186b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80186b4:	fb05 f503 	mul.w	r5, r5, r3
 80186b8:	6823      	ldr	r3, [r4, #0]
 80186ba:	2000      	movs	r0, #0
 80186bc:	5158      	str	r0, [r3, r5]
 80186be:	eba9 0207 	sub.w	r2, r9, r7
 80186c2:	eb08 0107 	add.w	r1, r8, r7
 80186c6:	4630      	mov	r0, r6
 80186c8:	f7f7 ff72 	bl	80105b0 <ucdr_init_buffer>
 80186cc:	4630      	mov	r0, r6
 80186ce:	4904      	ldr	r1, [pc, #16]	@ (80186e0 <uxr_next_input_reliable_buffer_available+0xf8>)
 80186d0:	4622      	mov	r2, r4
 80186d2:	f7f7 ff43 	bl	801055c <ucdr_set_on_full_buffer_callback>
 80186d6:	f8a4 a00c 	strh.w	sl, [r4, #12]
 80186da:	2001      	movs	r0, #1
 80186dc:	e7c8      	b.n	8018670 <uxr_next_input_reliable_buffer_available+0x88>
 80186de:	bf00      	nop
 80186e0:	080183fd 	.word	0x080183fd

080186e4 <uxr_process_heartbeat>:
 80186e4:	b538      	push	{r3, r4, r5, lr}
 80186e6:	4611      	mov	r1, r2
 80186e8:	4604      	mov	r4, r0
 80186ea:	89c0      	ldrh	r0, [r0, #14]
 80186ec:	4615      	mov	r5, r2
 80186ee:	f000 fb9d 	bl	8018e2c <uxr_seq_num_cmp>
 80186f2:	2800      	cmp	r0, #0
 80186f4:	bfb8      	it	lt
 80186f6:	81e5      	strhlt	r5, [r4, #14]
 80186f8:	bd38      	pop	{r3, r4, r5, pc}
 80186fa:	bf00      	nop

080186fc <uxr_compute_acknack>:
 80186fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018700:	8903      	ldrh	r3, [r0, #8]
 8018702:	8986      	ldrh	r6, [r0, #12]
 8018704:	4604      	mov	r4, r0
 8018706:	460d      	mov	r5, r1
 8018708:	b1d3      	cbz	r3, 8018740 <uxr_compute_acknack+0x44>
 801870a:	4630      	mov	r0, r6
 801870c:	2701      	movs	r7, #1
 801870e:	e003      	b.n	8018718 <uxr_compute_acknack+0x1c>
 8018710:	4567      	cmp	r7, ip
 8018712:	d215      	bcs.n	8018740 <uxr_compute_acknack+0x44>
 8018714:	89a0      	ldrh	r0, [r4, #12]
 8018716:	3701      	adds	r7, #1
 8018718:	b2b9      	uxth	r1, r7
 801871a:	f000 fb7f 	bl	8018e1c <uxr_seq_num_add>
 801871e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018722:	fbb0 f2fc 	udiv	r2, r0, ip
 8018726:	e9d4 1300 	ldrd	r1, r3, [r4]
 801872a:	fb0c 0212 	mls	r2, ip, r2, r0
 801872e:	b292      	uxth	r2, r2
 8018730:	fbb3 f3fc 	udiv	r3, r3, ip
 8018734:	fb02 1303 	mla	r3, r2, r3, r1
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	2b00      	cmp	r3, #0
 801873c:	d1e8      	bne.n	8018710 <uxr_compute_acknack+0x14>
 801873e:	4606      	mov	r6, r0
 8018740:	802e      	strh	r6, [r5, #0]
 8018742:	4630      	mov	r0, r6
 8018744:	2101      	movs	r1, #1
 8018746:	89e6      	ldrh	r6, [r4, #14]
 8018748:	f000 fb6c 	bl	8018e24 <uxr_seq_num_sub>
 801874c:	4601      	mov	r1, r0
 801874e:	4630      	mov	r0, r6
 8018750:	f000 fb68 	bl	8018e24 <uxr_seq_num_sub>
 8018754:	4606      	mov	r6, r0
 8018756:	b318      	cbz	r0, 80187a0 <uxr_compute_acknack+0xa4>
 8018758:	f04f 0900 	mov.w	r9, #0
 801875c:	464f      	mov	r7, r9
 801875e:	f04f 0801 	mov.w	r8, #1
 8018762:	fa1f f189 	uxth.w	r1, r9
 8018766:	8828      	ldrh	r0, [r5, #0]
 8018768:	f000 fb58 	bl	8018e1c <uxr_seq_num_add>
 801876c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018770:	6822      	ldr	r2, [r4, #0]
 8018772:	fbb0 f1fc 	udiv	r1, r0, ip
 8018776:	fb01 011c 	mls	r1, r1, ip, r0
 801877a:	b289      	uxth	r1, r1
 801877c:	6863      	ldr	r3, [r4, #4]
 801877e:	fbb3 f3fc 	udiv	r3, r3, ip
 8018782:	fb01 2303 	mla	r3, r1, r3, r2
 8018786:	fa08 f209 	lsl.w	r2, r8, r9
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	f109 0901 	add.w	r9, r9, #1
 8018790:	b90b      	cbnz	r3, 8018796 <uxr_compute_acknack+0x9a>
 8018792:	4317      	orrs	r7, r2
 8018794:	b2bf      	uxth	r7, r7
 8018796:	454e      	cmp	r6, r9
 8018798:	d1e3      	bne.n	8018762 <uxr_compute_acknack+0x66>
 801879a:	4638      	mov	r0, r7
 801879c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187a0:	4607      	mov	r7, r0
 80187a2:	4638      	mov	r0, r7
 80187a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080187a8 <uxr_init_output_best_effort_stream>:
 80187a8:	b410      	push	{r4}
 80187aa:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 80187ae:	81c4      	strh	r4, [r0, #14]
 80187b0:	e9c0 1300 	strd	r1, r3, [r0]
 80187b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80187b8:	7303      	strb	r3, [r0, #12]
 80187ba:	6082      	str	r2, [r0, #8]
 80187bc:	4770      	bx	lr
 80187be:	bf00      	nop

080187c0 <uxr_reset_output_best_effort_stream>:
 80187c0:	7b02      	ldrb	r2, [r0, #12]
 80187c2:	6042      	str	r2, [r0, #4]
 80187c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80187c8:	81c3      	strh	r3, [r0, #14]
 80187ca:	4770      	bx	lr

080187cc <uxr_prepare_best_effort_buffer_to_write>:
 80187cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187ce:	4604      	mov	r4, r0
 80187d0:	b083      	sub	sp, #12
 80187d2:	6840      	ldr	r0, [r0, #4]
 80187d4:	460d      	mov	r5, r1
 80187d6:	4616      	mov	r6, r2
 80187d8:	f7fa fa66 	bl	8012ca8 <uxr_submessage_padding>
 80187dc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80187e0:	4410      	add	r0, r2
 80187e2:	1942      	adds	r2, r0, r5
 80187e4:	4293      	cmp	r3, r2
 80187e6:	bf2c      	ite	cs
 80187e8:	2701      	movcs	r7, #1
 80187ea:	2700      	movcc	r7, #0
 80187ec:	d202      	bcs.n	80187f4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80187ee:	4638      	mov	r0, r7
 80187f0:	b003      	add	sp, #12
 80187f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80187f4:	9000      	str	r0, [sp, #0]
 80187f6:	6821      	ldr	r1, [r4, #0]
 80187f8:	4630      	mov	r0, r6
 80187fa:	2300      	movs	r3, #0
 80187fc:	f7f7 fec6 	bl	801058c <ucdr_init_buffer_origin_offset>
 8018800:	6861      	ldr	r1, [r4, #4]
 8018802:	4638      	mov	r0, r7
 8018804:	4429      	add	r1, r5
 8018806:	6061      	str	r1, [r4, #4]
 8018808:	b003      	add	sp, #12
 801880a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801880c <uxr_prepare_best_effort_buffer_to_send>:
 801880c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018810:	6845      	ldr	r5, [r0, #4]
 8018812:	4604      	mov	r4, r0
 8018814:	7b00      	ldrb	r0, [r0, #12]
 8018816:	4285      	cmp	r5, r0
 8018818:	bf8c      	ite	hi
 801881a:	2701      	movhi	r7, #1
 801881c:	2700      	movls	r7, #0
 801881e:	d802      	bhi.n	8018826 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 8018820:	4638      	mov	r0, r7
 8018822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018826:	4688      	mov	r8, r1
 8018828:	89e0      	ldrh	r0, [r4, #14]
 801882a:	2101      	movs	r1, #1
 801882c:	4615      	mov	r5, r2
 801882e:	461e      	mov	r6, r3
 8018830:	f000 faf4 	bl	8018e1c <uxr_seq_num_add>
 8018834:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018838:	81e0      	strh	r0, [r4, #14]
 801883a:	8030      	strh	r0, [r6, #0]
 801883c:	f8c8 2000 	str.w	r2, [r8]
 8018840:	602b      	str	r3, [r5, #0]
 8018842:	7b23      	ldrb	r3, [r4, #12]
 8018844:	6063      	str	r3, [r4, #4]
 8018846:	4638      	mov	r0, r7
 8018848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801884c <on_full_output_buffer>:
 801884c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801884e:	6802      	ldr	r2, [r0, #0]
 8018850:	460d      	mov	r5, r1
 8018852:	6809      	ldr	r1, [r1, #0]
 8018854:	892f      	ldrh	r7, [r5, #8]
 8018856:	686c      	ldr	r4, [r5, #4]
 8018858:	fbb4 f4f7 	udiv	r4, r4, r7
 801885c:	1a53      	subs	r3, r2, r1
 801885e:	fbb3 f3f4 	udiv	r3, r3, r4
 8018862:	3301      	adds	r3, #1
 8018864:	b29b      	uxth	r3, r3
 8018866:	fbb3 f2f7 	udiv	r2, r3, r7
 801886a:	fb07 3312 	mls	r3, r7, r2, r3
 801886e:	b29b      	uxth	r3, r3
 8018870:	fb04 f403 	mul.w	r4, r4, r3
 8018874:	7b2f      	ldrb	r7, [r5, #12]
 8018876:	590a      	ldr	r2, [r1, r4]
 8018878:	6903      	ldr	r3, [r0, #16]
 801887a:	443c      	add	r4, r7
 801887c:	3408      	adds	r4, #8
 801887e:	1bd2      	subs	r2, r2, r7
 8018880:	4606      	mov	r6, r0
 8018882:	4421      	add	r1, r4
 8018884:	3a04      	subs	r2, #4
 8018886:	f7f7 fe8b 	bl	80105a0 <ucdr_init_buffer_origin>
 801888a:	4630      	mov	r0, r6
 801888c:	4902      	ldr	r1, [pc, #8]	@ (8018898 <on_full_output_buffer+0x4c>)
 801888e:	462a      	mov	r2, r5
 8018890:	f7f7 fe64 	bl	801055c <ucdr_set_on_full_buffer_callback>
 8018894:	2000      	movs	r0, #0
 8018896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018898:	0801884d 	.word	0x0801884d

0801889c <uxr_init_output_reliable_stream>:
 801889c:	b430      	push	{r4, r5}
 801889e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80188a2:	6001      	str	r1, [r0, #0]
 80188a4:	8103      	strh	r3, [r0, #8]
 80188a6:	6042      	str	r2, [r0, #4]
 80188a8:	7304      	strb	r4, [r0, #12]
 80188aa:	b1b3      	cbz	r3, 80188da <uxr_init_output_reliable_stream+0x3e>
 80188ac:	600c      	str	r4, [r1, #0]
 80188ae:	8901      	ldrh	r1, [r0, #8]
 80188b0:	2901      	cmp	r1, #1
 80188b2:	d912      	bls.n	80188da <uxr_init_output_reliable_stream+0x3e>
 80188b4:	2201      	movs	r2, #1
 80188b6:	e9d0 5400 	ldrd	r5, r4, [r0]
 80188ba:	fbb2 f3f1 	udiv	r3, r2, r1
 80188be:	fb01 2313 	mls	r3, r1, r3, r2
 80188c2:	b29b      	uxth	r3, r3
 80188c4:	fbb4 f1f1 	udiv	r1, r4, r1
 80188c8:	fb03 f301 	mul.w	r3, r3, r1
 80188cc:	7b01      	ldrb	r1, [r0, #12]
 80188ce:	50e9      	str	r1, [r5, r3]
 80188d0:	3201      	adds	r2, #1
 80188d2:	8901      	ldrh	r1, [r0, #8]
 80188d4:	b292      	uxth	r2, r2
 80188d6:	4291      	cmp	r1, r2
 80188d8:	d8ed      	bhi.n	80188b6 <uxr_init_output_reliable_stream+0x1a>
 80188da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80188de:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80188e2:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80188e6:	4b05      	ldr	r3, [pc, #20]	@ (80188fc <uxr_init_output_reliable_stream+0x60>)
 80188e8:	f8c0 300e 	str.w	r3, [r0, #14]
 80188ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80188f0:	2300      	movs	r3, #0
 80188f2:	bc30      	pop	{r4, r5}
 80188f4:	8242      	strh	r2, [r0, #18]
 80188f6:	8403      	strh	r3, [r0, #32]
 80188f8:	4770      	bx	lr
 80188fa:	bf00      	nop
 80188fc:	ffff0000 	.word	0xffff0000

08018900 <uxr_reset_output_reliable_stream>:
 8018900:	8902      	ldrh	r2, [r0, #8]
 8018902:	b430      	push	{r4, r5}
 8018904:	b19a      	cbz	r2, 801892e <uxr_reset_output_reliable_stream+0x2e>
 8018906:	2400      	movs	r4, #0
 8018908:	4621      	mov	r1, r4
 801890a:	fbb1 f3f2 	udiv	r3, r1, r2
 801890e:	fb02 1313 	mls	r3, r2, r3, r1
 8018912:	e9d0 5100 	ldrd	r5, r1, [r0]
 8018916:	b29b      	uxth	r3, r3
 8018918:	fbb1 f2f2 	udiv	r2, r1, r2
 801891c:	fb03 f302 	mul.w	r3, r3, r2
 8018920:	7b02      	ldrb	r2, [r0, #12]
 8018922:	50ea      	str	r2, [r5, r3]
 8018924:	3401      	adds	r4, #1
 8018926:	8902      	ldrh	r2, [r0, #8]
 8018928:	b2a1      	uxth	r1, r4
 801892a:	428a      	cmp	r2, r1
 801892c:	d8ed      	bhi.n	801890a <uxr_reset_output_reliable_stream+0xa>
 801892e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018932:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018936:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801893a:	4b05      	ldr	r3, [pc, #20]	@ (8018950 <uxr_reset_output_reliable_stream+0x50>)
 801893c:	f8c0 300e 	str.w	r3, [r0, #14]
 8018940:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018944:	2300      	movs	r3, #0
 8018946:	bc30      	pop	{r4, r5}
 8018948:	8242      	strh	r2, [r0, #18]
 801894a:	8403      	strh	r3, [r0, #32]
 801894c:	4770      	bx	lr
 801894e:	bf00      	nop
 8018950:	ffff0000 	.word	0xffff0000

08018954 <uxr_prepare_reliable_buffer_to_write>:
 8018954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018958:	89c5      	ldrh	r5, [r0, #14]
 801895a:	4604      	mov	r4, r0
 801895c:	8900      	ldrh	r0, [r0, #8]
 801895e:	fbb5 f3f0 	udiv	r3, r5, r0
 8018962:	4688      	mov	r8, r1
 8018964:	e9d4 1600 	ldrd	r1, r6, [r4]
 8018968:	fb00 5313 	mls	r3, r0, r3, r5
 801896c:	b29b      	uxth	r3, r3
 801896e:	fbb6 f0f0 	udiv	r0, r6, r0
 8018972:	fb00 f303 	mul.w	r3, r0, r3
 8018976:	3304      	adds	r3, #4
 8018978:	18cb      	adds	r3, r1, r3
 801897a:	b091      	sub	sp, #68	@ 0x44
 801897c:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8018980:	9004      	str	r0, [sp, #16]
 8018982:	2104      	movs	r1, #4
 8018984:	4630      	mov	r0, r6
 8018986:	9305      	str	r3, [sp, #20]
 8018988:	9206      	str	r2, [sp, #24]
 801898a:	f7f7 fe15 	bl	80105b8 <ucdr_alignment>
 801898e:	1833      	adds	r3, r6, r0
 8018990:	9804      	ldr	r0, [sp, #16]
 8018992:	9303      	str	r3, [sp, #12]
 8018994:	eb03 0708 	add.w	r7, r3, r8
 8018998:	1f06      	subs	r6, r0, #4
 801899a:	42b7      	cmp	r7, r6
 801899c:	f240 80dc 	bls.w	8018b58 <uxr_prepare_reliable_buffer_to_write+0x204>
 80189a0:	f894 e00c 	ldrb.w	lr, [r4, #12]
 80189a4:	eb0e 0308 	add.w	r3, lr, r8
 80189a8:	42b3      	cmp	r3, r6
 80189aa:	f240 80c2 	bls.w	8018b32 <uxr_prepare_reliable_buffer_to_write+0x1de>
 80189ae:	9b03      	ldr	r3, [sp, #12]
 80189b0:	3304      	adds	r3, #4
 80189b2:	42b3      	cmp	r3, r6
 80189b4:	f080 8112 	bcs.w	8018bdc <uxr_prepare_reliable_buffer_to_write+0x288>
 80189b8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80189bc:	f1bc 0f00 	cmp.w	ip, #0
 80189c0:	f000 8127 	beq.w	8018c12 <uxr_prepare_reliable_buffer_to_write+0x2be>
 80189c4:	e9d4 7300 	ldrd	r7, r3, [r4]
 80189c8:	2100      	movs	r1, #0
 80189ca:	4608      	mov	r0, r1
 80189cc:	460a      	mov	r2, r1
 80189ce:	fbb3 f9fc 	udiv	r9, r3, ip
 80189d2:	fbb2 f3fc 	udiv	r3, r2, ip
 80189d6:	fb0c 2313 	mls	r3, ip, r3, r2
 80189da:	b29b      	uxth	r3, r3
 80189dc:	fb09 7303 	mla	r3, r9, r3, r7
 80189e0:	3101      	adds	r1, #1
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	459e      	cmp	lr, r3
 80189e6:	bf08      	it	eq
 80189e8:	3001      	addeq	r0, #1
 80189ea:	b28a      	uxth	r2, r1
 80189ec:	bf08      	it	eq
 80189ee:	b280      	uxtheq	r0, r0
 80189f0:	4562      	cmp	r2, ip
 80189f2:	d3ee      	bcc.n	80189d2 <uxr_prepare_reliable_buffer_to_write+0x7e>
 80189f4:	9b03      	ldr	r3, [sp, #12]
 80189f6:	1f37      	subs	r7, r6, #4
 80189f8:	b2bf      	uxth	r7, r7
 80189fa:	eba7 0903 	sub.w	r9, r7, r3
 80189fe:	fa1f f989 	uxth.w	r9, r9
 8018a02:	eba7 070e 	sub.w	r7, r7, lr
 8018a06:	b2bf      	uxth	r7, r7
 8018a08:	eba8 0809 	sub.w	r8, r8, r9
 8018a0c:	fbb8 faf7 	udiv	sl, r8, r7
 8018a10:	fb07 831a 	mls	r3, r7, sl, r8
 8018a14:	9707      	str	r7, [sp, #28]
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	f040 80bf 	bne.w	8018b9a <uxr_prepare_reliable_buffer_to_write+0x246>
 8018a1c:	fa1f fa8a 	uxth.w	sl, sl
 8018a20:	4582      	cmp	sl, r0
 8018a22:	f200 8095 	bhi.w	8018b50 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8018a26:	f10d 0b20 	add.w	fp, sp, #32
 8018a2a:	f1ba 0f00 	cmp.w	sl, #0
 8018a2e:	d03a      	beq.n	8018aa6 <uxr_prepare_reliable_buffer_to_write+0x152>
 8018a30:	f04f 0800 	mov.w	r8, #0
 8018a34:	f10d 0b20 	add.w	fp, sp, #32
 8018a38:	e000      	b.n	8018a3c <uxr_prepare_reliable_buffer_to_write+0xe8>
 8018a3a:	46b9      	mov	r9, r7
 8018a3c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8018a40:	fbb5 f1fc 	udiv	r1, r5, ip
 8018a44:	fb0c 5111 	mls	r1, ip, r1, r5
 8018a48:	b289      	uxth	r1, r1
 8018a4a:	fbb2 f2fc 	udiv	r2, r2, ip
 8018a4e:	fb01 f102 	mul.w	r1, r1, r2
 8018a52:	3104      	adds	r1, #4
 8018a54:	4419      	add	r1, r3
 8018a56:	4632      	mov	r2, r6
 8018a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a5c:	9300      	str	r3, [sp, #0]
 8018a5e:	4658      	mov	r0, fp
 8018a60:	2300      	movs	r3, #0
 8018a62:	f7f7 fd93 	bl	801058c <ucdr_init_buffer_origin_offset>
 8018a66:	464a      	mov	r2, r9
 8018a68:	2300      	movs	r3, #0
 8018a6a:	210d      	movs	r1, #13
 8018a6c:	4658      	mov	r0, fp
 8018a6e:	f7fa f8db 	bl	8012c28 <uxr_buffer_submessage_header>
 8018a72:	8920      	ldrh	r0, [r4, #8]
 8018a74:	fbb5 f3f0 	udiv	r3, r5, r0
 8018a78:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018a7c:	fb00 5313 	mls	r3, r0, r3, r5
 8018a80:	b29b      	uxth	r3, r3
 8018a82:	fbb1 f1f0 	udiv	r1, r1, r0
 8018a86:	fb03 f301 	mul.w	r3, r3, r1
 8018a8a:	4628      	mov	r0, r5
 8018a8c:	50d6      	str	r6, [r2, r3]
 8018a8e:	2101      	movs	r1, #1
 8018a90:	f000 f9c4 	bl	8018e1c <uxr_seq_num_add>
 8018a94:	f108 0801 	add.w	r8, r8, #1
 8018a98:	fa1f f388 	uxth.w	r3, r8
 8018a9c:	459a      	cmp	sl, r3
 8018a9e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018aa2:	4605      	mov	r5, r0
 8018aa4:	d8c9      	bhi.n	8018a3a <uxr_prepare_reliable_buffer_to_write+0xe6>
 8018aa6:	fbb5 f1fc 	udiv	r1, r5, ip
 8018aaa:	fb0c 5111 	mls	r1, ip, r1, r5
 8018aae:	b289      	uxth	r1, r1
 8018ab0:	6863      	ldr	r3, [r4, #4]
 8018ab2:	fbb3 fcfc 	udiv	ip, r3, ip
 8018ab6:	6823      	ldr	r3, [r4, #0]
 8018ab8:	fb01 f10c 	mul.w	r1, r1, ip
 8018abc:	3104      	adds	r1, #4
 8018abe:	4419      	add	r1, r3
 8018ac0:	4632      	mov	r2, r6
 8018ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018ac6:	9300      	str	r3, [sp, #0]
 8018ac8:	4658      	mov	r0, fp
 8018aca:	2300      	movs	r3, #0
 8018acc:	f7f7 fd5e 	bl	801058c <ucdr_init_buffer_origin_offset>
 8018ad0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018ad4:	4658      	mov	r0, fp
 8018ad6:	fa1f f288 	uxth.w	r2, r8
 8018ada:	2302      	movs	r3, #2
 8018adc:	210d      	movs	r1, #13
 8018ade:	f7fa f8a3 	bl	8012c28 <uxr_buffer_submessage_header>
 8018ae2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8018ae6:	8921      	ldrh	r1, [r4, #8]
 8018ae8:	9f03      	ldr	r7, [sp, #12]
 8018aea:	9307      	str	r3, [sp, #28]
 8018aec:	9b05      	ldr	r3, [sp, #20]
 8018aee:	7b26      	ldrb	r6, [r4, #12]
 8018af0:	fbb5 f0f1 	udiv	r0, r5, r1
 8018af4:	fbb2 f2f1 	udiv	r2, r2, r1
 8018af8:	fb01 5010 	mls	r0, r1, r0, r5
 8018afc:	1d39      	adds	r1, r7, #4
 8018afe:	440b      	add	r3, r1
 8018b00:	b280      	uxth	r0, r0
 8018b02:	fb00 f002 	mul.w	r0, r0, r2
 8018b06:	4619      	mov	r1, r3
 8018b08:	3604      	adds	r6, #4
 8018b0a:	9b07      	ldr	r3, [sp, #28]
 8018b0c:	9a04      	ldr	r2, [sp, #16]
 8018b0e:	4446      	add	r6, r8
 8018b10:	501e      	str	r6, [r3, r0]
 8018b12:	9e06      	ldr	r6, [sp, #24]
 8018b14:	3a08      	subs	r2, #8
 8018b16:	1bd2      	subs	r2, r2, r7
 8018b18:	4630      	mov	r0, r6
 8018b1a:	f7f7 fd49 	bl	80105b0 <ucdr_init_buffer>
 8018b1e:	4630      	mov	r0, r6
 8018b20:	493d      	ldr	r1, [pc, #244]	@ (8018c18 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 8018b22:	4622      	mov	r2, r4
 8018b24:	f7f7 fd1a 	bl	801055c <ucdr_set_on_full_buffer_callback>
 8018b28:	2001      	movs	r0, #1
 8018b2a:	81e5      	strh	r5, [r4, #14]
 8018b2c:	b011      	add	sp, #68	@ 0x44
 8018b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b32:	2101      	movs	r1, #1
 8018b34:	89e0      	ldrh	r0, [r4, #14]
 8018b36:	f000 f971 	bl	8018e1c <uxr_seq_num_add>
 8018b3a:	8921      	ldrh	r1, [r4, #8]
 8018b3c:	4605      	mov	r5, r0
 8018b3e:	8a60      	ldrh	r0, [r4, #18]
 8018b40:	f000 f96c 	bl	8018e1c <uxr_seq_num_add>
 8018b44:	4601      	mov	r1, r0
 8018b46:	4628      	mov	r0, r5
 8018b48:	f000 f970 	bl	8018e2c <uxr_seq_num_cmp>
 8018b4c:	2800      	cmp	r0, #0
 8018b4e:	dd2a      	ble.n	8018ba6 <uxr_prepare_reliable_buffer_to_write+0x252>
 8018b50:	2000      	movs	r0, #0
 8018b52:	b011      	add	sp, #68	@ 0x44
 8018b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b58:	8921      	ldrh	r1, [r4, #8]
 8018b5a:	8a60      	ldrh	r0, [r4, #18]
 8018b5c:	f000 f95e 	bl	8018e1c <uxr_seq_num_add>
 8018b60:	4601      	mov	r1, r0
 8018b62:	4628      	mov	r0, r5
 8018b64:	f000 f962 	bl	8018e2c <uxr_seq_num_cmp>
 8018b68:	2800      	cmp	r0, #0
 8018b6a:	dcf1      	bgt.n	8018b50 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8018b6c:	8921      	ldrh	r1, [r4, #8]
 8018b6e:	fbb5 f3f1 	udiv	r3, r5, r1
 8018b72:	e9d4 4200 	ldrd	r4, r2, [r4]
 8018b76:	fb01 5313 	mls	r3, r1, r3, r5
 8018b7a:	b29b      	uxth	r3, r3
 8018b7c:	fbb2 f2f1 	udiv	r2, r2, r1
 8018b80:	fb03 f302 	mul.w	r3, r3, r2
 8018b84:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 8018b88:	50e7      	str	r7, [r4, r3]
 8018b8a:	9b03      	ldr	r3, [sp, #12]
 8018b8c:	9300      	str	r3, [sp, #0]
 8018b8e:	463a      	mov	r2, r7
 8018b90:	2300      	movs	r3, #0
 8018b92:	f7f7 fcfb 	bl	801058c <ucdr_init_buffer_origin_offset>
 8018b96:	2001      	movs	r0, #1
 8018b98:	e7db      	b.n	8018b52 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8018b9a:	f10a 0a01 	add.w	sl, sl, #1
 8018b9e:	fa1f fa8a 	uxth.w	sl, sl
 8018ba2:	9307      	str	r3, [sp, #28]
 8018ba4:	e73c      	b.n	8018a20 <uxr_prepare_reliable_buffer_to_write+0xcc>
 8018ba6:	8920      	ldrh	r0, [r4, #8]
 8018ba8:	fbb5 f3f0 	udiv	r3, r5, r0
 8018bac:	fb00 5313 	mls	r3, r0, r3, r5
 8018bb0:	b29b      	uxth	r3, r3
 8018bb2:	6862      	ldr	r2, [r4, #4]
 8018bb4:	6821      	ldr	r1, [r4, #0]
 8018bb6:	fbb2 f0f0 	udiv	r0, r2, r0
 8018bba:	fb03 f300 	mul.w	r3, r3, r0
 8018bbe:	7b22      	ldrb	r2, [r4, #12]
 8018bc0:	9806      	ldr	r0, [sp, #24]
 8018bc2:	3304      	adds	r3, #4
 8018bc4:	4419      	add	r1, r3
 8018bc6:	4442      	add	r2, r8
 8018bc8:	f841 2c04 	str.w	r2, [r1, #-4]
 8018bcc:	7b23      	ldrb	r3, [r4, #12]
 8018bce:	9300      	str	r3, [sp, #0]
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	f7f7 fcdb 	bl	801058c <ucdr_init_buffer_origin_offset>
 8018bd6:	81e5      	strh	r5, [r4, #14]
 8018bd8:	2001      	movs	r0, #1
 8018bda:	e7ba      	b.n	8018b52 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8018bdc:	4628      	mov	r0, r5
 8018bde:	2101      	movs	r1, #1
 8018be0:	f000 f91c 	bl	8018e1c <uxr_seq_num_add>
 8018be4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018be8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018bec:	fbb3 f1fc 	udiv	r1, r3, ip
 8018bf0:	fbb0 f3fc 	udiv	r3, r0, ip
 8018bf4:	fb0c 0313 	mls	r3, ip, r3, r0
 8018bf8:	b29b      	uxth	r3, r3
 8018bfa:	fb03 f301 	mul.w	r3, r3, r1
 8018bfe:	3304      	adds	r3, #4
 8018c00:	18d3      	adds	r3, r2, r3
 8018c02:	9305      	str	r3, [sp, #20]
 8018c04:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018c08:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8018c0c:	9303      	str	r3, [sp, #12]
 8018c0e:	4605      	mov	r5, r0
 8018c10:	e6d4      	b.n	80189bc <uxr_prepare_reliable_buffer_to_write+0x68>
 8018c12:	4660      	mov	r0, ip
 8018c14:	e6ee      	b.n	80189f4 <uxr_prepare_reliable_buffer_to_write+0xa0>
 8018c16:	bf00      	nop
 8018c18:	0801884d 	.word	0x0801884d

08018c1c <uxr_prepare_next_reliable_buffer_to_send>:
 8018c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c20:	4605      	mov	r5, r0
 8018c22:	4688      	mov	r8, r1
 8018c24:	8a00      	ldrh	r0, [r0, #16]
 8018c26:	2101      	movs	r1, #1
 8018c28:	4617      	mov	r7, r2
 8018c2a:	461e      	mov	r6, r3
 8018c2c:	f000 f8f6 	bl	8018e1c <uxr_seq_num_add>
 8018c30:	8030      	strh	r0, [r6, #0]
 8018c32:	892a      	ldrh	r2, [r5, #8]
 8018c34:	fbb0 f3f2 	udiv	r3, r0, r2
 8018c38:	fb02 0413 	mls	r4, r2, r3, r0
 8018c3c:	b2a4      	uxth	r4, r4
 8018c3e:	686b      	ldr	r3, [r5, #4]
 8018c40:	fbb3 f2f2 	udiv	r2, r3, r2
 8018c44:	682b      	ldr	r3, [r5, #0]
 8018c46:	89e9      	ldrh	r1, [r5, #14]
 8018c48:	fb04 f402 	mul.w	r4, r4, r2
 8018c4c:	3404      	adds	r4, #4
 8018c4e:	4423      	add	r3, r4
 8018c50:	f8c8 3000 	str.w	r3, [r8]
 8018c54:	682b      	ldr	r3, [r5, #0]
 8018c56:	441c      	add	r4, r3
 8018c58:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018c5c:	603b      	str	r3, [r7, #0]
 8018c5e:	f000 f8e5 	bl	8018e2c <uxr_seq_num_cmp>
 8018c62:	2800      	cmp	r0, #0
 8018c64:	dd02      	ble.n	8018c6c <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8018c66:	2000      	movs	r0, #0
 8018c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c6c:	683a      	ldr	r2, [r7, #0]
 8018c6e:	7b2b      	ldrb	r3, [r5, #12]
 8018c70:	429a      	cmp	r2, r3
 8018c72:	d9f8      	bls.n	8018c66 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018c74:	8a69      	ldrh	r1, [r5, #18]
 8018c76:	8a28      	ldrh	r0, [r5, #16]
 8018c78:	f000 f8d4 	bl	8018e24 <uxr_seq_num_sub>
 8018c7c:	892b      	ldrh	r3, [r5, #8]
 8018c7e:	4283      	cmp	r3, r0
 8018c80:	d0f1      	beq.n	8018c66 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018c82:	8830      	ldrh	r0, [r6, #0]
 8018c84:	89eb      	ldrh	r3, [r5, #14]
 8018c86:	8228      	strh	r0, [r5, #16]
 8018c88:	4298      	cmp	r0, r3
 8018c8a:	d002      	beq.n	8018c92 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8018c8c:	2001      	movs	r0, #1
 8018c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c92:	2101      	movs	r1, #1
 8018c94:	f000 f8c2 	bl	8018e1c <uxr_seq_num_add>
 8018c98:	81e8      	strh	r0, [r5, #14]
 8018c9a:	2001      	movs	r0, #1
 8018c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018ca0 <uxr_update_output_stream_heartbeat_timestamp>:
 8018ca0:	b5d0      	push	{r4, r6, r7, lr}
 8018ca2:	8a01      	ldrh	r1, [r0, #16]
 8018ca4:	4604      	mov	r4, r0
 8018ca6:	8a40      	ldrh	r0, [r0, #18]
 8018ca8:	4616      	mov	r6, r2
 8018caa:	461f      	mov	r7, r3
 8018cac:	f000 f8be 	bl	8018e2c <uxr_seq_num_cmp>
 8018cb0:	2800      	cmp	r0, #0
 8018cb2:	db07      	blt.n	8018cc4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018cb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018cb8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018cbc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018cc0:	2000      	movs	r0, #0
 8018cc2:	bdd0      	pop	{r4, r6, r7, pc}
 8018cc4:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018cc8:	b948      	cbnz	r0, 8018cde <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8018cca:	2301      	movs	r3, #1
 8018ccc:	f884 3020 	strb.w	r3, [r4, #32]
 8018cd0:	f116 0364 	adds.w	r3, r6, #100	@ 0x64
 8018cd4:	f147 0200 	adc.w	r2, r7, #0
 8018cd8:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8018cdc:	bdd0      	pop	{r4, r6, r7, pc}
 8018cde:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018ce2:	4296      	cmp	r6, r2
 8018ce4:	eb77 0303 	sbcs.w	r3, r7, r3
 8018ce8:	bfa5      	ittet	ge
 8018cea:	3001      	addge	r0, #1
 8018cec:	f884 0020 	strbge.w	r0, [r4, #32]
 8018cf0:	2000      	movlt	r0, #0
 8018cf2:	2001      	movge	r0, #1
 8018cf4:	e7ec      	b.n	8018cd0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018cf6:	bf00      	nop

08018cf8 <uxr_begin_output_nack_buffer_it>:
 8018cf8:	8a40      	ldrh	r0, [r0, #18]
 8018cfa:	4770      	bx	lr

08018cfc <uxr_next_reliable_nack_buffer_to_send>:
 8018cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d00:	f890 9021 	ldrb.w	r9, [r0, #33]	@ 0x21
 8018d04:	f1b9 0f00 	cmp.w	r9, #0
 8018d08:	d011      	beq.n	8018d2e <uxr_next_reliable_nack_buffer_to_send+0x32>
 8018d0a:	4605      	mov	r5, r0
 8018d0c:	8818      	ldrh	r0, [r3, #0]
 8018d0e:	460f      	mov	r7, r1
 8018d10:	4690      	mov	r8, r2
 8018d12:	461e      	mov	r6, r3
 8018d14:	2101      	movs	r1, #1
 8018d16:	f000 f881 	bl	8018e1c <uxr_seq_num_add>
 8018d1a:	8030      	strh	r0, [r6, #0]
 8018d1c:	8a29      	ldrh	r1, [r5, #16]
 8018d1e:	f000 f885 	bl	8018e2c <uxr_seq_num_cmp>
 8018d22:	2800      	cmp	r0, #0
 8018d24:	dd06      	ble.n	8018d34 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8018d26:	f04f 0900 	mov.w	r9, #0
 8018d2a:	f885 9021 	strb.w	r9, [r5, #33]	@ 0x21
 8018d2e:	4648      	mov	r0, r9
 8018d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d34:	892a      	ldrh	r2, [r5, #8]
 8018d36:	8830      	ldrh	r0, [r6, #0]
 8018d38:	fbb0 f4f2 	udiv	r4, r0, r2
 8018d3c:	fb02 0414 	mls	r4, r2, r4, r0
 8018d40:	b2a4      	uxth	r4, r4
 8018d42:	686b      	ldr	r3, [r5, #4]
 8018d44:	fbb3 f2f2 	udiv	r2, r3, r2
 8018d48:	682b      	ldr	r3, [r5, #0]
 8018d4a:	fb04 f402 	mul.w	r4, r4, r2
 8018d4e:	3404      	adds	r4, #4
 8018d50:	4423      	add	r3, r4
 8018d52:	603b      	str	r3, [r7, #0]
 8018d54:	682b      	ldr	r3, [r5, #0]
 8018d56:	441c      	add	r4, r3
 8018d58:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018d5c:	f8c8 3000 	str.w	r3, [r8]
 8018d60:	7b2a      	ldrb	r2, [r5, #12]
 8018d62:	429a      	cmp	r2, r3
 8018d64:	d0d6      	beq.n	8018d14 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8018d66:	4648      	mov	r0, r9
 8018d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018d6c <uxr_process_acknack>:
 8018d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d6e:	4604      	mov	r4, r0
 8018d70:	460e      	mov	r6, r1
 8018d72:	4610      	mov	r0, r2
 8018d74:	2101      	movs	r1, #1
 8018d76:	f000 f855 	bl	8018e24 <uxr_seq_num_sub>
 8018d7a:	8a61      	ldrh	r1, [r4, #18]
 8018d7c:	f000 f852 	bl	8018e24 <uxr_seq_num_sub>
 8018d80:	b1c0      	cbz	r0, 8018db4 <uxr_process_acknack+0x48>
 8018d82:	4605      	mov	r5, r0
 8018d84:	2700      	movs	r7, #0
 8018d86:	2101      	movs	r1, #1
 8018d88:	8a60      	ldrh	r0, [r4, #18]
 8018d8a:	f000 f847 	bl	8018e1c <uxr_seq_num_add>
 8018d8e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018d92:	fbb0 f3fc 	udiv	r3, r0, ip
 8018d96:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018d9a:	fb0c 0313 	mls	r3, ip, r3, r0
 8018d9e:	b29b      	uxth	r3, r3
 8018da0:	fbb1 f1fc 	udiv	r1, r1, ip
 8018da4:	3701      	adds	r7, #1
 8018da6:	fb03 f301 	mul.w	r3, r3, r1
 8018daa:	42bd      	cmp	r5, r7
 8018dac:	7b21      	ldrb	r1, [r4, #12]
 8018dae:	8260      	strh	r0, [r4, #18]
 8018db0:	50d1      	str	r1, [r2, r3]
 8018db2:	d1e8      	bne.n	8018d86 <uxr_process_acknack+0x1a>
 8018db4:	3e00      	subs	r6, #0
 8018db6:	f04f 0300 	mov.w	r3, #0
 8018dba:	bf18      	it	ne
 8018dbc:	2601      	movne	r6, #1
 8018dbe:	f884 3020 	strb.w	r3, [r4, #32]
 8018dc2:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8018dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018dc8 <uxr_is_output_up_to_date>:
 8018dc8:	8a01      	ldrh	r1, [r0, #16]
 8018dca:	8a40      	ldrh	r0, [r0, #18]
 8018dcc:	b508      	push	{r3, lr}
 8018dce:	f000 f82d 	bl	8018e2c <uxr_seq_num_cmp>
 8018dd2:	fab0 f080 	clz	r0, r0
 8018dd6:	0940      	lsrs	r0, r0, #5
 8018dd8:	bd08      	pop	{r3, pc}
 8018dda:	bf00      	nop

08018ddc <get_available_free_slots>:
 8018ddc:	8901      	ldrh	r1, [r0, #8]
 8018dde:	b1d9      	cbz	r1, 8018e18 <get_available_free_slots+0x3c>
 8018de0:	b4f0      	push	{r4, r5, r6, r7}
 8018de2:	2400      	movs	r4, #0
 8018de4:	6845      	ldr	r5, [r0, #4]
 8018de6:	6807      	ldr	r7, [r0, #0]
 8018de8:	7b06      	ldrb	r6, [r0, #12]
 8018dea:	fbb5 f5f1 	udiv	r5, r5, r1
 8018dee:	4620      	mov	r0, r4
 8018df0:	4622      	mov	r2, r4
 8018df2:	fbb2 f3f1 	udiv	r3, r2, r1
 8018df6:	fb01 2313 	mls	r3, r1, r3, r2
 8018dfa:	b29b      	uxth	r3, r3
 8018dfc:	fb05 7303 	mla	r3, r5, r3, r7
 8018e00:	3401      	adds	r4, #1
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	429e      	cmp	r6, r3
 8018e06:	bf08      	it	eq
 8018e08:	3001      	addeq	r0, #1
 8018e0a:	b2a2      	uxth	r2, r4
 8018e0c:	bf08      	it	eq
 8018e0e:	b280      	uxtheq	r0, r0
 8018e10:	428a      	cmp	r2, r1
 8018e12:	d3ee      	bcc.n	8018df2 <get_available_free_slots+0x16>
 8018e14:	bcf0      	pop	{r4, r5, r6, r7}
 8018e16:	4770      	bx	lr
 8018e18:	4608      	mov	r0, r1
 8018e1a:	4770      	bx	lr

08018e1c <uxr_seq_num_add>:
 8018e1c:	4408      	add	r0, r1
 8018e1e:	b280      	uxth	r0, r0
 8018e20:	4770      	bx	lr
 8018e22:	bf00      	nop

08018e24 <uxr_seq_num_sub>:
 8018e24:	1a40      	subs	r0, r0, r1
 8018e26:	b280      	uxth	r0, r0
 8018e28:	4770      	bx	lr
 8018e2a:	bf00      	nop

08018e2c <uxr_seq_num_cmp>:
 8018e2c:	4288      	cmp	r0, r1
 8018e2e:	d011      	beq.n	8018e54 <uxr_seq_num_cmp+0x28>
 8018e30:	d309      	bcc.n	8018e46 <uxr_seq_num_cmp+0x1a>
 8018e32:	4288      	cmp	r0, r1
 8018e34:	d910      	bls.n	8018e58 <uxr_seq_num_cmp+0x2c>
 8018e36:	1a40      	subs	r0, r0, r1
 8018e38:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8018e3c:	bfd4      	ite	le
 8018e3e:	2001      	movle	r0, #1
 8018e40:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8018e44:	4770      	bx	lr
 8018e46:	1a0b      	subs	r3, r1, r0
 8018e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018e4c:	daf1      	bge.n	8018e32 <uxr_seq_num_cmp+0x6>
 8018e4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018e52:	4770      	bx	lr
 8018e54:	2000      	movs	r0, #0
 8018e56:	4770      	bx	lr
 8018e58:	2001      	movs	r0, #1
 8018e5a:	4770      	bx	lr

08018e5c <rcl_get_default_domain_id>:
 8018e5c:	b530      	push	{r4, r5, lr}
 8018e5e:	b083      	sub	sp, #12
 8018e60:	2300      	movs	r3, #0
 8018e62:	9300      	str	r3, [sp, #0]
 8018e64:	b1d0      	cbz	r0, 8018e9c <rcl_get_default_domain_id+0x40>
 8018e66:	4604      	mov	r4, r0
 8018e68:	4669      	mov	r1, sp
 8018e6a:	4815      	ldr	r0, [pc, #84]	@ (8018ec0 <rcl_get_default_domain_id+0x64>)
 8018e6c:	f7fd faf0 	bl	8016450 <rcutils_get_env>
 8018e70:	4602      	mov	r2, r0
 8018e72:	b110      	cbz	r0, 8018e7a <rcl_get_default_domain_id+0x1e>
 8018e74:	2001      	movs	r0, #1
 8018e76:	b003      	add	sp, #12
 8018e78:	bd30      	pop	{r4, r5, pc}
 8018e7a:	9b00      	ldr	r3, [sp, #0]
 8018e7c:	b18b      	cbz	r3, 8018ea2 <rcl_get_default_domain_id+0x46>
 8018e7e:	7818      	ldrb	r0, [r3, #0]
 8018e80:	2800      	cmp	r0, #0
 8018e82:	d0f8      	beq.n	8018e76 <rcl_get_default_domain_id+0x1a>
 8018e84:	4618      	mov	r0, r3
 8018e86:	a901      	add	r1, sp, #4
 8018e88:	9201      	str	r2, [sp, #4]
 8018e8a:	f000 fb1d 	bl	80194c8 <strtoul>
 8018e8e:	4605      	mov	r5, r0
 8018e90:	b150      	cbz	r0, 8018ea8 <rcl_get_default_domain_id+0x4c>
 8018e92:	1c43      	adds	r3, r0, #1
 8018e94:	d00d      	beq.n	8018eb2 <rcl_get_default_domain_id+0x56>
 8018e96:	6025      	str	r5, [r4, #0]
 8018e98:	2000      	movs	r0, #0
 8018e9a:	e7ec      	b.n	8018e76 <rcl_get_default_domain_id+0x1a>
 8018e9c:	200b      	movs	r0, #11
 8018e9e:	b003      	add	sp, #12
 8018ea0:	bd30      	pop	{r4, r5, pc}
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	b003      	add	sp, #12
 8018ea6:	bd30      	pop	{r4, r5, pc}
 8018ea8:	9b01      	ldr	r3, [sp, #4]
 8018eaa:	781b      	ldrb	r3, [r3, #0]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d0f2      	beq.n	8018e96 <rcl_get_default_domain_id+0x3a>
 8018eb0:	e7e0      	b.n	8018e74 <rcl_get_default_domain_id+0x18>
 8018eb2:	f001 fd1d 	bl	801a8f0 <__errno>
 8018eb6:	6803      	ldr	r3, [r0, #0]
 8018eb8:	2b22      	cmp	r3, #34	@ 0x22
 8018eba:	d1ec      	bne.n	8018e96 <rcl_get_default_domain_id+0x3a>
 8018ebc:	e7da      	b.n	8018e74 <rcl_get_default_domain_id+0x18>
 8018ebe:	bf00      	nop
 8018ec0:	0801e7b0 	.word	0x0801e7b0

08018ec4 <rcl_get_zero_initialized_guard_condition>:
 8018ec4:	4a03      	ldr	r2, [pc, #12]	@ (8018ed4 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018ec6:	4603      	mov	r3, r0
 8018ec8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018ecc:	e883 0003 	stmia.w	r3, {r0, r1}
 8018ed0:	4618      	mov	r0, r3
 8018ed2:	4770      	bx	lr
 8018ed4:	0801e7c0 	.word	0x0801e7c0

08018ed8 <rcl_guard_condition_init_from_rmw>:
 8018ed8:	b082      	sub	sp, #8
 8018eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ede:	b086      	sub	sp, #24
 8018ee0:	ac0c      	add	r4, sp, #48	@ 0x30
 8018ee2:	4684      	mov	ip, r0
 8018ee4:	f844 3f04 	str.w	r3, [r4, #4]!
 8018ee8:	460f      	mov	r7, r1
 8018eea:	4690      	mov	r8, r2
 8018eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018eee:	ad01      	add	r5, sp, #4
 8018ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018ef2:	6823      	ldr	r3, [r4, #0]
 8018ef4:	602b      	str	r3, [r5, #0]
 8018ef6:	a801      	add	r0, sp, #4
 8018ef8:	4664      	mov	r4, ip
 8018efa:	f7f5 fe77 	bl	800ebec <rcutils_allocator_is_valid>
 8018efe:	b328      	cbz	r0, 8018f4c <rcl_guard_condition_init_from_rmw+0x74>
 8018f00:	b324      	cbz	r4, 8018f4c <rcl_guard_condition_init_from_rmw+0x74>
 8018f02:	6866      	ldr	r6, [r4, #4]
 8018f04:	b9e6      	cbnz	r6, 8018f40 <rcl_guard_condition_init_from_rmw+0x68>
 8018f06:	f1b8 0f00 	cmp.w	r8, #0
 8018f0a:	d01f      	beq.n	8018f4c <rcl_guard_condition_init_from_rmw+0x74>
 8018f0c:	4640      	mov	r0, r8
 8018f0e:	f7fb f95b 	bl	80141c8 <rcl_context_is_valid>
 8018f12:	b308      	cbz	r0, 8018f58 <rcl_guard_condition_init_from_rmw+0x80>
 8018f14:	9b01      	ldr	r3, [sp, #4]
 8018f16:	9905      	ldr	r1, [sp, #20]
 8018f18:	201c      	movs	r0, #28
 8018f1a:	4798      	blx	r3
 8018f1c:	4605      	mov	r5, r0
 8018f1e:	6060      	str	r0, [r4, #4]
 8018f20:	b340      	cbz	r0, 8018f74 <rcl_guard_condition_init_from_rmw+0x9c>
 8018f22:	b1df      	cbz	r7, 8018f5c <rcl_guard_condition_init_from_rmw+0x84>
 8018f24:	6007      	str	r7, [r0, #0]
 8018f26:	7106      	strb	r6, [r0, #4]
 8018f28:	ac01      	add	r4, sp, #4
 8018f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f2c:	3508      	adds	r5, #8
 8018f2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018f30:	6823      	ldr	r3, [r4, #0]
 8018f32:	602b      	str	r3, [r5, #0]
 8018f34:	2000      	movs	r0, #0
 8018f36:	b006      	add	sp, #24
 8018f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f3c:	b002      	add	sp, #8
 8018f3e:	4770      	bx	lr
 8018f40:	2064      	movs	r0, #100	@ 0x64
 8018f42:	b006      	add	sp, #24
 8018f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f48:	b002      	add	sp, #8
 8018f4a:	4770      	bx	lr
 8018f4c:	200b      	movs	r0, #11
 8018f4e:	b006      	add	sp, #24
 8018f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f54:	b002      	add	sp, #8
 8018f56:	4770      	bx	lr
 8018f58:	2065      	movs	r0, #101	@ 0x65
 8018f5a:	e7f2      	b.n	8018f42 <rcl_guard_condition_init_from_rmw+0x6a>
 8018f5c:	f8d8 0000 	ldr.w	r0, [r8]
 8018f60:	3028      	adds	r0, #40	@ 0x28
 8018f62:	f000 f857 	bl	8019014 <rmw_create_guard_condition>
 8018f66:	6028      	str	r0, [r5, #0]
 8018f68:	6865      	ldr	r5, [r4, #4]
 8018f6a:	682e      	ldr	r6, [r5, #0]
 8018f6c:	b126      	cbz	r6, 8018f78 <rcl_guard_condition_init_from_rmw+0xa0>
 8018f6e:	2301      	movs	r3, #1
 8018f70:	712b      	strb	r3, [r5, #4]
 8018f72:	e7d9      	b.n	8018f28 <rcl_guard_condition_init_from_rmw+0x50>
 8018f74:	200a      	movs	r0, #10
 8018f76:	e7e4      	b.n	8018f42 <rcl_guard_condition_init_from_rmw+0x6a>
 8018f78:	4628      	mov	r0, r5
 8018f7a:	9b02      	ldr	r3, [sp, #8]
 8018f7c:	9905      	ldr	r1, [sp, #20]
 8018f7e:	4798      	blx	r3
 8018f80:	6066      	str	r6, [r4, #4]
 8018f82:	2001      	movs	r0, #1
 8018f84:	e7dd      	b.n	8018f42 <rcl_guard_condition_init_from_rmw+0x6a>
 8018f86:	bf00      	nop

08018f88 <rcl_guard_condition_fini>:
 8018f88:	b570      	push	{r4, r5, r6, lr}
 8018f8a:	b082      	sub	sp, #8
 8018f8c:	b1f0      	cbz	r0, 8018fcc <rcl_guard_condition_fini+0x44>
 8018f8e:	4604      	mov	r4, r0
 8018f90:	6840      	ldr	r0, [r0, #4]
 8018f92:	b158      	cbz	r0, 8018fac <rcl_guard_condition_fini+0x24>
 8018f94:	6803      	ldr	r3, [r0, #0]
 8018f96:	68c6      	ldr	r6, [r0, #12]
 8018f98:	6981      	ldr	r1, [r0, #24]
 8018f9a:	b15b      	cbz	r3, 8018fb4 <rcl_guard_condition_fini+0x2c>
 8018f9c:	7905      	ldrb	r5, [r0, #4]
 8018f9e:	b95d      	cbnz	r5, 8018fb8 <rcl_guard_condition_fini+0x30>
 8018fa0:	47b0      	blx	r6
 8018fa2:	2300      	movs	r3, #0
 8018fa4:	4628      	mov	r0, r5
 8018fa6:	6063      	str	r3, [r4, #4]
 8018fa8:	b002      	add	sp, #8
 8018faa:	bd70      	pop	{r4, r5, r6, pc}
 8018fac:	4605      	mov	r5, r0
 8018fae:	4628      	mov	r0, r5
 8018fb0:	b002      	add	sp, #8
 8018fb2:	bd70      	pop	{r4, r5, r6, pc}
 8018fb4:	461d      	mov	r5, r3
 8018fb6:	e7f3      	b.n	8018fa0 <rcl_guard_condition_fini+0x18>
 8018fb8:	4618      	mov	r0, r3
 8018fba:	9101      	str	r1, [sp, #4]
 8018fbc:	f000 f83e 	bl	801903c <rmw_destroy_guard_condition>
 8018fc0:	1e05      	subs	r5, r0, #0
 8018fc2:	9901      	ldr	r1, [sp, #4]
 8018fc4:	6860      	ldr	r0, [r4, #4]
 8018fc6:	bf18      	it	ne
 8018fc8:	2501      	movne	r5, #1
 8018fca:	e7e9      	b.n	8018fa0 <rcl_guard_condition_fini+0x18>
 8018fcc:	250b      	movs	r5, #11
 8018fce:	4628      	mov	r0, r5
 8018fd0:	b002      	add	sp, #8
 8018fd2:	bd70      	pop	{r4, r5, r6, pc}

08018fd4 <rcl_guard_condition_get_default_options>:
 8018fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fd6:	b087      	sub	sp, #28
 8018fd8:	4607      	mov	r7, r0
 8018fda:	466c      	mov	r4, sp
 8018fdc:	4668      	mov	r0, sp
 8018fde:	f7f5 fdf7 	bl	800ebd0 <rcutils_get_default_allocator>
 8018fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018fe4:	4d07      	ldr	r5, [pc, #28]	@ (8019004 <rcl_guard_condition_get_default_options+0x30>)
 8018fe6:	f8d4 c000 	ldr.w	ip, [r4]
 8018fea:	462e      	mov	r6, r5
 8018fec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8018fee:	462c      	mov	r4, r5
 8018ff0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018ff2:	463c      	mov	r4, r7
 8018ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018ff6:	4638      	mov	r0, r7
 8018ff8:	f8c6 c000 	str.w	ip, [r6]
 8018ffc:	f8c4 c000 	str.w	ip, [r4]
 8019000:	b007      	add	sp, #28
 8019002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019004:	20009e90 	.word	0x20009e90

08019008 <rcl_guard_condition_get_rmw_handle>:
 8019008:	b110      	cbz	r0, 8019010 <rcl_guard_condition_get_rmw_handle+0x8>
 801900a:	6840      	ldr	r0, [r0, #4]
 801900c:	b100      	cbz	r0, 8019010 <rcl_guard_condition_get_rmw_handle+0x8>
 801900e:	6800      	ldr	r0, [r0, #0]
 8019010:	4770      	bx	lr
 8019012:	bf00      	nop

08019014 <rmw_create_guard_condition>:
 8019014:	b538      	push	{r3, r4, r5, lr}
 8019016:	4605      	mov	r5, r0
 8019018:	4807      	ldr	r0, [pc, #28]	@ (8019038 <rmw_create_guard_condition+0x24>)
 801901a:	f7fd fd13 	bl	8016a44 <get_memory>
 801901e:	b148      	cbz	r0, 8019034 <rmw_create_guard_condition+0x20>
 8019020:	68c4      	ldr	r4, [r0, #12]
 8019022:	2300      	movs	r3, #0
 8019024:	61e5      	str	r5, [r4, #28]
 8019026:	7423      	strb	r3, [r4, #16]
 8019028:	f7fd fd74 	bl	8016b14 <rmw_get_implementation_identifier>
 801902c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019030:	f104 0014 	add.w	r0, r4, #20
 8019034:	bd38      	pop	{r3, r4, r5, pc}
 8019036:	bf00      	nop
 8019038:	2000d1b0 	.word	0x2000d1b0

0801903c <rmw_destroy_guard_condition>:
 801903c:	b508      	push	{r3, lr}
 801903e:	4b08      	ldr	r3, [pc, #32]	@ (8019060 <rmw_destroy_guard_condition+0x24>)
 8019040:	6819      	ldr	r1, [r3, #0]
 8019042:	b911      	cbnz	r1, 801904a <rmw_destroy_guard_condition+0xe>
 8019044:	e00a      	b.n	801905c <rmw_destroy_guard_condition+0x20>
 8019046:	6889      	ldr	r1, [r1, #8]
 8019048:	b141      	cbz	r1, 801905c <rmw_destroy_guard_condition+0x20>
 801904a:	68cb      	ldr	r3, [r1, #12]
 801904c:	3314      	adds	r3, #20
 801904e:	4298      	cmp	r0, r3
 8019050:	d1f9      	bne.n	8019046 <rmw_destroy_guard_condition+0xa>
 8019052:	4803      	ldr	r0, [pc, #12]	@ (8019060 <rmw_destroy_guard_condition+0x24>)
 8019054:	f7fd fd06 	bl	8016a64 <put_memory>
 8019058:	2000      	movs	r0, #0
 801905a:	bd08      	pop	{r3, pc}
 801905c:	2001      	movs	r0, #1
 801905e:	bd08      	pop	{r3, pc}
 8019060:	2000d1b0 	.word	0x2000d1b0

08019064 <calloc>:
 8019064:	4b02      	ldr	r3, [pc, #8]	@ (8019070 <calloc+0xc>)
 8019066:	460a      	mov	r2, r1
 8019068:	4601      	mov	r1, r0
 801906a:	6818      	ldr	r0, [r3, #0]
 801906c:	f000 b802 	b.w	8019074 <_calloc_r>
 8019070:	2000008c 	.word	0x2000008c

08019074 <_calloc_r>:
 8019074:	b570      	push	{r4, r5, r6, lr}
 8019076:	fba1 5402 	umull	r5, r4, r1, r2
 801907a:	b93c      	cbnz	r4, 801908c <_calloc_r+0x18>
 801907c:	4629      	mov	r1, r5
 801907e:	f000 f887 	bl	8019190 <_malloc_r>
 8019082:	4606      	mov	r6, r0
 8019084:	b928      	cbnz	r0, 8019092 <_calloc_r+0x1e>
 8019086:	2600      	movs	r6, #0
 8019088:	4630      	mov	r0, r6
 801908a:	bd70      	pop	{r4, r5, r6, pc}
 801908c:	220c      	movs	r2, #12
 801908e:	6002      	str	r2, [r0, #0]
 8019090:	e7f9      	b.n	8019086 <_calloc_r+0x12>
 8019092:	462a      	mov	r2, r5
 8019094:	4621      	mov	r1, r4
 8019096:	f001 fb3d 	bl	801a714 <memset>
 801909a:	e7f5      	b.n	8019088 <_calloc_r+0x14>

0801909c <getenv>:
 801909c:	b507      	push	{r0, r1, r2, lr}
 801909e:	4b04      	ldr	r3, [pc, #16]	@ (80190b0 <getenv+0x14>)
 80190a0:	4601      	mov	r1, r0
 80190a2:	aa01      	add	r2, sp, #4
 80190a4:	6818      	ldr	r0, [r3, #0]
 80190a6:	f000 f805 	bl	80190b4 <_findenv_r>
 80190aa:	b003      	add	sp, #12
 80190ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80190b0:	2000008c 	.word	0x2000008c

080190b4 <_findenv_r>:
 80190b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190b8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8019128 <_findenv_r+0x74>
 80190bc:	4606      	mov	r6, r0
 80190be:	4689      	mov	r9, r1
 80190c0:	4617      	mov	r7, r2
 80190c2:	f002 fac9 	bl	801b658 <__env_lock>
 80190c6:	f8da 4000 	ldr.w	r4, [sl]
 80190ca:	b134      	cbz	r4, 80190da <_findenv_r+0x26>
 80190cc:	464b      	mov	r3, r9
 80190ce:	4698      	mov	r8, r3
 80190d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80190d4:	b13a      	cbz	r2, 80190e6 <_findenv_r+0x32>
 80190d6:	2a3d      	cmp	r2, #61	@ 0x3d
 80190d8:	d1f9      	bne.n	80190ce <_findenv_r+0x1a>
 80190da:	4630      	mov	r0, r6
 80190dc:	f002 fac2 	bl	801b664 <__env_unlock>
 80190e0:	2000      	movs	r0, #0
 80190e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190e6:	eba8 0809 	sub.w	r8, r8, r9
 80190ea:	46a3      	mov	fp, r4
 80190ec:	f854 0b04 	ldr.w	r0, [r4], #4
 80190f0:	2800      	cmp	r0, #0
 80190f2:	d0f2      	beq.n	80190da <_findenv_r+0x26>
 80190f4:	4642      	mov	r2, r8
 80190f6:	4649      	mov	r1, r9
 80190f8:	f001 fb21 	bl	801a73e <strncmp>
 80190fc:	2800      	cmp	r0, #0
 80190fe:	d1f4      	bne.n	80190ea <_findenv_r+0x36>
 8019100:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019104:	eb03 0508 	add.w	r5, r3, r8
 8019108:	f813 3008 	ldrb.w	r3, [r3, r8]
 801910c:	2b3d      	cmp	r3, #61	@ 0x3d
 801910e:	d1ec      	bne.n	80190ea <_findenv_r+0x36>
 8019110:	f8da 3000 	ldr.w	r3, [sl]
 8019114:	ebab 0303 	sub.w	r3, fp, r3
 8019118:	109b      	asrs	r3, r3, #2
 801911a:	4630      	mov	r0, r6
 801911c:	603b      	str	r3, [r7, #0]
 801911e:	f002 faa1 	bl	801b664 <__env_unlock>
 8019122:	1c68      	adds	r0, r5, #1
 8019124:	e7dd      	b.n	80190e2 <_findenv_r+0x2e>
 8019126:	bf00      	nop
 8019128:	20000000 	.word	0x20000000

0801912c <malloc>:
 801912c:	4b02      	ldr	r3, [pc, #8]	@ (8019138 <malloc+0xc>)
 801912e:	4601      	mov	r1, r0
 8019130:	6818      	ldr	r0, [r3, #0]
 8019132:	f000 b82d 	b.w	8019190 <_malloc_r>
 8019136:	bf00      	nop
 8019138:	2000008c 	.word	0x2000008c

0801913c <free>:
 801913c:	4b02      	ldr	r3, [pc, #8]	@ (8019148 <free+0xc>)
 801913e:	4601      	mov	r1, r0
 8019140:	6818      	ldr	r0, [r3, #0]
 8019142:	f002 ba95 	b.w	801b670 <_free_r>
 8019146:	bf00      	nop
 8019148:	2000008c 	.word	0x2000008c

0801914c <sbrk_aligned>:
 801914c:	b570      	push	{r4, r5, r6, lr}
 801914e:	4e0f      	ldr	r6, [pc, #60]	@ (801918c <sbrk_aligned+0x40>)
 8019150:	460c      	mov	r4, r1
 8019152:	6831      	ldr	r1, [r6, #0]
 8019154:	4605      	mov	r5, r0
 8019156:	b911      	cbnz	r1, 801915e <sbrk_aligned+0x12>
 8019158:	f001 fba8 	bl	801a8ac <_sbrk_r>
 801915c:	6030      	str	r0, [r6, #0]
 801915e:	4621      	mov	r1, r4
 8019160:	4628      	mov	r0, r5
 8019162:	f001 fba3 	bl	801a8ac <_sbrk_r>
 8019166:	1c43      	adds	r3, r0, #1
 8019168:	d103      	bne.n	8019172 <sbrk_aligned+0x26>
 801916a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801916e:	4620      	mov	r0, r4
 8019170:	bd70      	pop	{r4, r5, r6, pc}
 8019172:	1cc4      	adds	r4, r0, #3
 8019174:	f024 0403 	bic.w	r4, r4, #3
 8019178:	42a0      	cmp	r0, r4
 801917a:	d0f8      	beq.n	801916e <sbrk_aligned+0x22>
 801917c:	1a21      	subs	r1, r4, r0
 801917e:	4628      	mov	r0, r5
 8019180:	f001 fb94 	bl	801a8ac <_sbrk_r>
 8019184:	3001      	adds	r0, #1
 8019186:	d1f2      	bne.n	801916e <sbrk_aligned+0x22>
 8019188:	e7ef      	b.n	801916a <sbrk_aligned+0x1e>
 801918a:	bf00      	nop
 801918c:	20009ea4 	.word	0x20009ea4

08019190 <_malloc_r>:
 8019190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019194:	1ccd      	adds	r5, r1, #3
 8019196:	f025 0503 	bic.w	r5, r5, #3
 801919a:	3508      	adds	r5, #8
 801919c:	2d0c      	cmp	r5, #12
 801919e:	bf38      	it	cc
 80191a0:	250c      	movcc	r5, #12
 80191a2:	2d00      	cmp	r5, #0
 80191a4:	4606      	mov	r6, r0
 80191a6:	db01      	blt.n	80191ac <_malloc_r+0x1c>
 80191a8:	42a9      	cmp	r1, r5
 80191aa:	d904      	bls.n	80191b6 <_malloc_r+0x26>
 80191ac:	230c      	movs	r3, #12
 80191ae:	6033      	str	r3, [r6, #0]
 80191b0:	2000      	movs	r0, #0
 80191b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80191b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801928c <_malloc_r+0xfc>
 80191ba:	f000 f869 	bl	8019290 <__malloc_lock>
 80191be:	f8d8 3000 	ldr.w	r3, [r8]
 80191c2:	461c      	mov	r4, r3
 80191c4:	bb44      	cbnz	r4, 8019218 <_malloc_r+0x88>
 80191c6:	4629      	mov	r1, r5
 80191c8:	4630      	mov	r0, r6
 80191ca:	f7ff ffbf 	bl	801914c <sbrk_aligned>
 80191ce:	1c43      	adds	r3, r0, #1
 80191d0:	4604      	mov	r4, r0
 80191d2:	d158      	bne.n	8019286 <_malloc_r+0xf6>
 80191d4:	f8d8 4000 	ldr.w	r4, [r8]
 80191d8:	4627      	mov	r7, r4
 80191da:	2f00      	cmp	r7, #0
 80191dc:	d143      	bne.n	8019266 <_malloc_r+0xd6>
 80191de:	2c00      	cmp	r4, #0
 80191e0:	d04b      	beq.n	801927a <_malloc_r+0xea>
 80191e2:	6823      	ldr	r3, [r4, #0]
 80191e4:	4639      	mov	r1, r7
 80191e6:	4630      	mov	r0, r6
 80191e8:	eb04 0903 	add.w	r9, r4, r3
 80191ec:	f001 fb5e 	bl	801a8ac <_sbrk_r>
 80191f0:	4581      	cmp	r9, r0
 80191f2:	d142      	bne.n	801927a <_malloc_r+0xea>
 80191f4:	6821      	ldr	r1, [r4, #0]
 80191f6:	1a6d      	subs	r5, r5, r1
 80191f8:	4629      	mov	r1, r5
 80191fa:	4630      	mov	r0, r6
 80191fc:	f7ff ffa6 	bl	801914c <sbrk_aligned>
 8019200:	3001      	adds	r0, #1
 8019202:	d03a      	beq.n	801927a <_malloc_r+0xea>
 8019204:	6823      	ldr	r3, [r4, #0]
 8019206:	442b      	add	r3, r5
 8019208:	6023      	str	r3, [r4, #0]
 801920a:	f8d8 3000 	ldr.w	r3, [r8]
 801920e:	685a      	ldr	r2, [r3, #4]
 8019210:	bb62      	cbnz	r2, 801926c <_malloc_r+0xdc>
 8019212:	f8c8 7000 	str.w	r7, [r8]
 8019216:	e00f      	b.n	8019238 <_malloc_r+0xa8>
 8019218:	6822      	ldr	r2, [r4, #0]
 801921a:	1b52      	subs	r2, r2, r5
 801921c:	d420      	bmi.n	8019260 <_malloc_r+0xd0>
 801921e:	2a0b      	cmp	r2, #11
 8019220:	d917      	bls.n	8019252 <_malloc_r+0xc2>
 8019222:	1961      	adds	r1, r4, r5
 8019224:	42a3      	cmp	r3, r4
 8019226:	6025      	str	r5, [r4, #0]
 8019228:	bf18      	it	ne
 801922a:	6059      	strne	r1, [r3, #4]
 801922c:	6863      	ldr	r3, [r4, #4]
 801922e:	bf08      	it	eq
 8019230:	f8c8 1000 	streq.w	r1, [r8]
 8019234:	5162      	str	r2, [r4, r5]
 8019236:	604b      	str	r3, [r1, #4]
 8019238:	4630      	mov	r0, r6
 801923a:	f000 f82f 	bl	801929c <__malloc_unlock>
 801923e:	f104 000b 	add.w	r0, r4, #11
 8019242:	1d23      	adds	r3, r4, #4
 8019244:	f020 0007 	bic.w	r0, r0, #7
 8019248:	1ac2      	subs	r2, r0, r3
 801924a:	bf1c      	itt	ne
 801924c:	1a1b      	subne	r3, r3, r0
 801924e:	50a3      	strne	r3, [r4, r2]
 8019250:	e7af      	b.n	80191b2 <_malloc_r+0x22>
 8019252:	6862      	ldr	r2, [r4, #4]
 8019254:	42a3      	cmp	r3, r4
 8019256:	bf0c      	ite	eq
 8019258:	f8c8 2000 	streq.w	r2, [r8]
 801925c:	605a      	strne	r2, [r3, #4]
 801925e:	e7eb      	b.n	8019238 <_malloc_r+0xa8>
 8019260:	4623      	mov	r3, r4
 8019262:	6864      	ldr	r4, [r4, #4]
 8019264:	e7ae      	b.n	80191c4 <_malloc_r+0x34>
 8019266:	463c      	mov	r4, r7
 8019268:	687f      	ldr	r7, [r7, #4]
 801926a:	e7b6      	b.n	80191da <_malloc_r+0x4a>
 801926c:	461a      	mov	r2, r3
 801926e:	685b      	ldr	r3, [r3, #4]
 8019270:	42a3      	cmp	r3, r4
 8019272:	d1fb      	bne.n	801926c <_malloc_r+0xdc>
 8019274:	2300      	movs	r3, #0
 8019276:	6053      	str	r3, [r2, #4]
 8019278:	e7de      	b.n	8019238 <_malloc_r+0xa8>
 801927a:	230c      	movs	r3, #12
 801927c:	6033      	str	r3, [r6, #0]
 801927e:	4630      	mov	r0, r6
 8019280:	f000 f80c 	bl	801929c <__malloc_unlock>
 8019284:	e794      	b.n	80191b0 <_malloc_r+0x20>
 8019286:	6005      	str	r5, [r0, #0]
 8019288:	e7d6      	b.n	8019238 <_malloc_r+0xa8>
 801928a:	bf00      	nop
 801928c:	20009ea8 	.word	0x20009ea8

08019290 <__malloc_lock>:
 8019290:	4801      	ldr	r0, [pc, #4]	@ (8019298 <__malloc_lock+0x8>)
 8019292:	f001 bb58 	b.w	801a946 <__retarget_lock_acquire_recursive>
 8019296:	bf00      	nop
 8019298:	20009fed 	.word	0x20009fed

0801929c <__malloc_unlock>:
 801929c:	4801      	ldr	r0, [pc, #4]	@ (80192a4 <__malloc_unlock+0x8>)
 801929e:	f001 bb53 	b.w	801a948 <__retarget_lock_release_recursive>
 80192a2:	bf00      	nop
 80192a4:	20009fed 	.word	0x20009fed

080192a8 <srand>:
 80192a8:	b538      	push	{r3, r4, r5, lr}
 80192aa:	4b10      	ldr	r3, [pc, #64]	@ (80192ec <srand+0x44>)
 80192ac:	681d      	ldr	r5, [r3, #0]
 80192ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80192b0:	4604      	mov	r4, r0
 80192b2:	b9b3      	cbnz	r3, 80192e2 <srand+0x3a>
 80192b4:	2018      	movs	r0, #24
 80192b6:	f7ff ff39 	bl	801912c <malloc>
 80192ba:	4602      	mov	r2, r0
 80192bc:	6328      	str	r0, [r5, #48]	@ 0x30
 80192be:	b920      	cbnz	r0, 80192ca <srand+0x22>
 80192c0:	4b0b      	ldr	r3, [pc, #44]	@ (80192f0 <srand+0x48>)
 80192c2:	480c      	ldr	r0, [pc, #48]	@ (80192f4 <srand+0x4c>)
 80192c4:	2146      	movs	r1, #70	@ 0x46
 80192c6:	f001 fb5d 	bl	801a984 <__assert_func>
 80192ca:	490b      	ldr	r1, [pc, #44]	@ (80192f8 <srand+0x50>)
 80192cc:	4b0b      	ldr	r3, [pc, #44]	@ (80192fc <srand+0x54>)
 80192ce:	e9c0 1300 	strd	r1, r3, [r0]
 80192d2:	4b0b      	ldr	r3, [pc, #44]	@ (8019300 <srand+0x58>)
 80192d4:	6083      	str	r3, [r0, #8]
 80192d6:	230b      	movs	r3, #11
 80192d8:	8183      	strh	r3, [r0, #12]
 80192da:	2100      	movs	r1, #0
 80192dc:	2001      	movs	r0, #1
 80192de:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80192e2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80192e4:	2200      	movs	r2, #0
 80192e6:	611c      	str	r4, [r3, #16]
 80192e8:	615a      	str	r2, [r3, #20]
 80192ea:	bd38      	pop	{r3, r4, r5, pc}
 80192ec:	2000008c 	.word	0x2000008c
 80192f0:	0801e7c8 	.word	0x0801e7c8
 80192f4:	0801e7df 	.word	0x0801e7df
 80192f8:	abcd330e 	.word	0xabcd330e
 80192fc:	e66d1234 	.word	0xe66d1234
 8019300:	0005deec 	.word	0x0005deec

08019304 <rand>:
 8019304:	4b16      	ldr	r3, [pc, #88]	@ (8019360 <rand+0x5c>)
 8019306:	b510      	push	{r4, lr}
 8019308:	681c      	ldr	r4, [r3, #0]
 801930a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801930c:	b9b3      	cbnz	r3, 801933c <rand+0x38>
 801930e:	2018      	movs	r0, #24
 8019310:	f7ff ff0c 	bl	801912c <malloc>
 8019314:	4602      	mov	r2, r0
 8019316:	6320      	str	r0, [r4, #48]	@ 0x30
 8019318:	b920      	cbnz	r0, 8019324 <rand+0x20>
 801931a:	4b12      	ldr	r3, [pc, #72]	@ (8019364 <rand+0x60>)
 801931c:	4812      	ldr	r0, [pc, #72]	@ (8019368 <rand+0x64>)
 801931e:	2152      	movs	r1, #82	@ 0x52
 8019320:	f001 fb30 	bl	801a984 <__assert_func>
 8019324:	4911      	ldr	r1, [pc, #68]	@ (801936c <rand+0x68>)
 8019326:	4b12      	ldr	r3, [pc, #72]	@ (8019370 <rand+0x6c>)
 8019328:	e9c0 1300 	strd	r1, r3, [r0]
 801932c:	4b11      	ldr	r3, [pc, #68]	@ (8019374 <rand+0x70>)
 801932e:	6083      	str	r3, [r0, #8]
 8019330:	230b      	movs	r3, #11
 8019332:	8183      	strh	r3, [r0, #12]
 8019334:	2100      	movs	r1, #0
 8019336:	2001      	movs	r0, #1
 8019338:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801933c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801933e:	480e      	ldr	r0, [pc, #56]	@ (8019378 <rand+0x74>)
 8019340:	690b      	ldr	r3, [r1, #16]
 8019342:	694c      	ldr	r4, [r1, #20]
 8019344:	4a0d      	ldr	r2, [pc, #52]	@ (801937c <rand+0x78>)
 8019346:	4358      	muls	r0, r3
 8019348:	fb02 0004 	mla	r0, r2, r4, r0
 801934c:	fba3 3202 	umull	r3, r2, r3, r2
 8019350:	3301      	adds	r3, #1
 8019352:	eb40 0002 	adc.w	r0, r0, r2
 8019356:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801935a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801935e:	bd10      	pop	{r4, pc}
 8019360:	2000008c 	.word	0x2000008c
 8019364:	0801e7c8 	.word	0x0801e7c8
 8019368:	0801e7df 	.word	0x0801e7df
 801936c:	abcd330e 	.word	0xabcd330e
 8019370:	e66d1234 	.word	0xe66d1234
 8019374:	0005deec 	.word	0x0005deec
 8019378:	5851f42d 	.word	0x5851f42d
 801937c:	4c957f2d 	.word	0x4c957f2d

08019380 <realloc>:
 8019380:	4b02      	ldr	r3, [pc, #8]	@ (801938c <realloc+0xc>)
 8019382:	460a      	mov	r2, r1
 8019384:	4601      	mov	r1, r0
 8019386:	6818      	ldr	r0, [r3, #0]
 8019388:	f000 b802 	b.w	8019390 <_realloc_r>
 801938c:	2000008c 	.word	0x2000008c

08019390 <_realloc_r>:
 8019390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019394:	4680      	mov	r8, r0
 8019396:	4615      	mov	r5, r2
 8019398:	460c      	mov	r4, r1
 801939a:	b921      	cbnz	r1, 80193a6 <_realloc_r+0x16>
 801939c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80193a0:	4611      	mov	r1, r2
 80193a2:	f7ff bef5 	b.w	8019190 <_malloc_r>
 80193a6:	b92a      	cbnz	r2, 80193b4 <_realloc_r+0x24>
 80193a8:	f002 f962 	bl	801b670 <_free_r>
 80193ac:	2400      	movs	r4, #0
 80193ae:	4620      	mov	r0, r4
 80193b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193b4:	f002 fe58 	bl	801c068 <_malloc_usable_size_r>
 80193b8:	4285      	cmp	r5, r0
 80193ba:	4606      	mov	r6, r0
 80193bc:	d802      	bhi.n	80193c4 <_realloc_r+0x34>
 80193be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80193c2:	d8f4      	bhi.n	80193ae <_realloc_r+0x1e>
 80193c4:	4629      	mov	r1, r5
 80193c6:	4640      	mov	r0, r8
 80193c8:	f7ff fee2 	bl	8019190 <_malloc_r>
 80193cc:	4607      	mov	r7, r0
 80193ce:	2800      	cmp	r0, #0
 80193d0:	d0ec      	beq.n	80193ac <_realloc_r+0x1c>
 80193d2:	42b5      	cmp	r5, r6
 80193d4:	462a      	mov	r2, r5
 80193d6:	4621      	mov	r1, r4
 80193d8:	bf28      	it	cs
 80193da:	4632      	movcs	r2, r6
 80193dc:	f001 fabd 	bl	801a95a <memcpy>
 80193e0:	4621      	mov	r1, r4
 80193e2:	4640      	mov	r0, r8
 80193e4:	f002 f944 	bl	801b670 <_free_r>
 80193e8:	463c      	mov	r4, r7
 80193ea:	e7e0      	b.n	80193ae <_realloc_r+0x1e>

080193ec <_strtoul_l.constprop.0>:
 80193ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80193f0:	4e34      	ldr	r6, [pc, #208]	@ (80194c4 <_strtoul_l.constprop.0+0xd8>)
 80193f2:	4686      	mov	lr, r0
 80193f4:	460d      	mov	r5, r1
 80193f6:	4628      	mov	r0, r5
 80193f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80193fc:	5d37      	ldrb	r7, [r6, r4]
 80193fe:	f017 0708 	ands.w	r7, r7, #8
 8019402:	d1f8      	bne.n	80193f6 <_strtoul_l.constprop.0+0xa>
 8019404:	2c2d      	cmp	r4, #45	@ 0x2d
 8019406:	d12f      	bne.n	8019468 <_strtoul_l.constprop.0+0x7c>
 8019408:	782c      	ldrb	r4, [r5, #0]
 801940a:	2701      	movs	r7, #1
 801940c:	1c85      	adds	r5, r0, #2
 801940e:	f033 0010 	bics.w	r0, r3, #16
 8019412:	d109      	bne.n	8019428 <_strtoul_l.constprop.0+0x3c>
 8019414:	2c30      	cmp	r4, #48	@ 0x30
 8019416:	d12c      	bne.n	8019472 <_strtoul_l.constprop.0+0x86>
 8019418:	7828      	ldrb	r0, [r5, #0]
 801941a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801941e:	2858      	cmp	r0, #88	@ 0x58
 8019420:	d127      	bne.n	8019472 <_strtoul_l.constprop.0+0x86>
 8019422:	786c      	ldrb	r4, [r5, #1]
 8019424:	2310      	movs	r3, #16
 8019426:	3502      	adds	r5, #2
 8019428:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801942c:	2600      	movs	r6, #0
 801942e:	fbb8 f8f3 	udiv	r8, r8, r3
 8019432:	fb03 f908 	mul.w	r9, r3, r8
 8019436:	ea6f 0909 	mvn.w	r9, r9
 801943a:	4630      	mov	r0, r6
 801943c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019440:	f1bc 0f09 	cmp.w	ip, #9
 8019444:	d81c      	bhi.n	8019480 <_strtoul_l.constprop.0+0x94>
 8019446:	4664      	mov	r4, ip
 8019448:	42a3      	cmp	r3, r4
 801944a:	dd2a      	ble.n	80194a2 <_strtoul_l.constprop.0+0xb6>
 801944c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8019450:	d007      	beq.n	8019462 <_strtoul_l.constprop.0+0x76>
 8019452:	4580      	cmp	r8, r0
 8019454:	d322      	bcc.n	801949c <_strtoul_l.constprop.0+0xb0>
 8019456:	d101      	bne.n	801945c <_strtoul_l.constprop.0+0x70>
 8019458:	45a1      	cmp	r9, r4
 801945a:	db1f      	blt.n	801949c <_strtoul_l.constprop.0+0xb0>
 801945c:	fb00 4003 	mla	r0, r0, r3, r4
 8019460:	2601      	movs	r6, #1
 8019462:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019466:	e7e9      	b.n	801943c <_strtoul_l.constprop.0+0x50>
 8019468:	2c2b      	cmp	r4, #43	@ 0x2b
 801946a:	bf04      	itt	eq
 801946c:	782c      	ldrbeq	r4, [r5, #0]
 801946e:	1c85      	addeq	r5, r0, #2
 8019470:	e7cd      	b.n	801940e <_strtoul_l.constprop.0+0x22>
 8019472:	2b00      	cmp	r3, #0
 8019474:	d1d8      	bne.n	8019428 <_strtoul_l.constprop.0+0x3c>
 8019476:	2c30      	cmp	r4, #48	@ 0x30
 8019478:	bf0c      	ite	eq
 801947a:	2308      	moveq	r3, #8
 801947c:	230a      	movne	r3, #10
 801947e:	e7d3      	b.n	8019428 <_strtoul_l.constprop.0+0x3c>
 8019480:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019484:	f1bc 0f19 	cmp.w	ip, #25
 8019488:	d801      	bhi.n	801948e <_strtoul_l.constprop.0+0xa2>
 801948a:	3c37      	subs	r4, #55	@ 0x37
 801948c:	e7dc      	b.n	8019448 <_strtoul_l.constprop.0+0x5c>
 801948e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019492:	f1bc 0f19 	cmp.w	ip, #25
 8019496:	d804      	bhi.n	80194a2 <_strtoul_l.constprop.0+0xb6>
 8019498:	3c57      	subs	r4, #87	@ 0x57
 801949a:	e7d5      	b.n	8019448 <_strtoul_l.constprop.0+0x5c>
 801949c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80194a0:	e7df      	b.n	8019462 <_strtoul_l.constprop.0+0x76>
 80194a2:	1c73      	adds	r3, r6, #1
 80194a4:	d106      	bne.n	80194b4 <_strtoul_l.constprop.0+0xc8>
 80194a6:	2322      	movs	r3, #34	@ 0x22
 80194a8:	f8ce 3000 	str.w	r3, [lr]
 80194ac:	4630      	mov	r0, r6
 80194ae:	b932      	cbnz	r2, 80194be <_strtoul_l.constprop.0+0xd2>
 80194b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80194b4:	b107      	cbz	r7, 80194b8 <_strtoul_l.constprop.0+0xcc>
 80194b6:	4240      	negs	r0, r0
 80194b8:	2a00      	cmp	r2, #0
 80194ba:	d0f9      	beq.n	80194b0 <_strtoul_l.constprop.0+0xc4>
 80194bc:	b106      	cbz	r6, 80194c0 <_strtoul_l.constprop.0+0xd4>
 80194be:	1e69      	subs	r1, r5, #1
 80194c0:	6011      	str	r1, [r2, #0]
 80194c2:	e7f5      	b.n	80194b0 <_strtoul_l.constprop.0+0xc4>
 80194c4:	0801e838 	.word	0x0801e838

080194c8 <strtoul>:
 80194c8:	4613      	mov	r3, r2
 80194ca:	460a      	mov	r2, r1
 80194cc:	4601      	mov	r1, r0
 80194ce:	4802      	ldr	r0, [pc, #8]	@ (80194d8 <strtoul+0x10>)
 80194d0:	6800      	ldr	r0, [r0, #0]
 80194d2:	f7ff bf8b 	b.w	80193ec <_strtoul_l.constprop.0>
 80194d6:	bf00      	nop
 80194d8:	2000008c 	.word	0x2000008c

080194dc <__cvt>:
 80194dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80194e0:	ec57 6b10 	vmov	r6, r7, d0
 80194e4:	2f00      	cmp	r7, #0
 80194e6:	460c      	mov	r4, r1
 80194e8:	4619      	mov	r1, r3
 80194ea:	463b      	mov	r3, r7
 80194ec:	bfbb      	ittet	lt
 80194ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80194f2:	461f      	movlt	r7, r3
 80194f4:	2300      	movge	r3, #0
 80194f6:	232d      	movlt	r3, #45	@ 0x2d
 80194f8:	700b      	strb	r3, [r1, #0]
 80194fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80194fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8019500:	4691      	mov	r9, r2
 8019502:	f023 0820 	bic.w	r8, r3, #32
 8019506:	bfbc      	itt	lt
 8019508:	4632      	movlt	r2, r6
 801950a:	4616      	movlt	r6, r2
 801950c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019510:	d005      	beq.n	801951e <__cvt+0x42>
 8019512:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8019516:	d100      	bne.n	801951a <__cvt+0x3e>
 8019518:	3401      	adds	r4, #1
 801951a:	2102      	movs	r1, #2
 801951c:	e000      	b.n	8019520 <__cvt+0x44>
 801951e:	2103      	movs	r1, #3
 8019520:	ab03      	add	r3, sp, #12
 8019522:	9301      	str	r3, [sp, #4]
 8019524:	ab02      	add	r3, sp, #8
 8019526:	9300      	str	r3, [sp, #0]
 8019528:	ec47 6b10 	vmov	d0, r6, r7
 801952c:	4653      	mov	r3, sl
 801952e:	4622      	mov	r2, r4
 8019530:	f001 face 	bl	801aad0 <_dtoa_r>
 8019534:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8019538:	4605      	mov	r5, r0
 801953a:	d119      	bne.n	8019570 <__cvt+0x94>
 801953c:	f019 0f01 	tst.w	r9, #1
 8019540:	d00e      	beq.n	8019560 <__cvt+0x84>
 8019542:	eb00 0904 	add.w	r9, r0, r4
 8019546:	2200      	movs	r2, #0
 8019548:	2300      	movs	r3, #0
 801954a:	4630      	mov	r0, r6
 801954c:	4639      	mov	r1, r7
 801954e:	f7e7 fad3 	bl	8000af8 <__aeabi_dcmpeq>
 8019552:	b108      	cbz	r0, 8019558 <__cvt+0x7c>
 8019554:	f8cd 900c 	str.w	r9, [sp, #12]
 8019558:	2230      	movs	r2, #48	@ 0x30
 801955a:	9b03      	ldr	r3, [sp, #12]
 801955c:	454b      	cmp	r3, r9
 801955e:	d31e      	bcc.n	801959e <__cvt+0xc2>
 8019560:	9b03      	ldr	r3, [sp, #12]
 8019562:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019564:	1b5b      	subs	r3, r3, r5
 8019566:	4628      	mov	r0, r5
 8019568:	6013      	str	r3, [r2, #0]
 801956a:	b004      	add	sp, #16
 801956c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019570:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019574:	eb00 0904 	add.w	r9, r0, r4
 8019578:	d1e5      	bne.n	8019546 <__cvt+0x6a>
 801957a:	7803      	ldrb	r3, [r0, #0]
 801957c:	2b30      	cmp	r3, #48	@ 0x30
 801957e:	d10a      	bne.n	8019596 <__cvt+0xba>
 8019580:	2200      	movs	r2, #0
 8019582:	2300      	movs	r3, #0
 8019584:	4630      	mov	r0, r6
 8019586:	4639      	mov	r1, r7
 8019588:	f7e7 fab6 	bl	8000af8 <__aeabi_dcmpeq>
 801958c:	b918      	cbnz	r0, 8019596 <__cvt+0xba>
 801958e:	f1c4 0401 	rsb	r4, r4, #1
 8019592:	f8ca 4000 	str.w	r4, [sl]
 8019596:	f8da 3000 	ldr.w	r3, [sl]
 801959a:	4499      	add	r9, r3
 801959c:	e7d3      	b.n	8019546 <__cvt+0x6a>
 801959e:	1c59      	adds	r1, r3, #1
 80195a0:	9103      	str	r1, [sp, #12]
 80195a2:	701a      	strb	r2, [r3, #0]
 80195a4:	e7d9      	b.n	801955a <__cvt+0x7e>

080195a6 <__exponent>:
 80195a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80195a8:	2900      	cmp	r1, #0
 80195aa:	bfba      	itte	lt
 80195ac:	4249      	neglt	r1, r1
 80195ae:	232d      	movlt	r3, #45	@ 0x2d
 80195b0:	232b      	movge	r3, #43	@ 0x2b
 80195b2:	2909      	cmp	r1, #9
 80195b4:	7002      	strb	r2, [r0, #0]
 80195b6:	7043      	strb	r3, [r0, #1]
 80195b8:	dd29      	ble.n	801960e <__exponent+0x68>
 80195ba:	f10d 0307 	add.w	r3, sp, #7
 80195be:	461d      	mov	r5, r3
 80195c0:	270a      	movs	r7, #10
 80195c2:	461a      	mov	r2, r3
 80195c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80195c8:	fb07 1416 	mls	r4, r7, r6, r1
 80195cc:	3430      	adds	r4, #48	@ 0x30
 80195ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 80195d2:	460c      	mov	r4, r1
 80195d4:	2c63      	cmp	r4, #99	@ 0x63
 80195d6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80195da:	4631      	mov	r1, r6
 80195dc:	dcf1      	bgt.n	80195c2 <__exponent+0x1c>
 80195de:	3130      	adds	r1, #48	@ 0x30
 80195e0:	1e94      	subs	r4, r2, #2
 80195e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80195e6:	1c41      	adds	r1, r0, #1
 80195e8:	4623      	mov	r3, r4
 80195ea:	42ab      	cmp	r3, r5
 80195ec:	d30a      	bcc.n	8019604 <__exponent+0x5e>
 80195ee:	f10d 0309 	add.w	r3, sp, #9
 80195f2:	1a9b      	subs	r3, r3, r2
 80195f4:	42ac      	cmp	r4, r5
 80195f6:	bf88      	it	hi
 80195f8:	2300      	movhi	r3, #0
 80195fa:	3302      	adds	r3, #2
 80195fc:	4403      	add	r3, r0
 80195fe:	1a18      	subs	r0, r3, r0
 8019600:	b003      	add	sp, #12
 8019602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019604:	f813 6b01 	ldrb.w	r6, [r3], #1
 8019608:	f801 6f01 	strb.w	r6, [r1, #1]!
 801960c:	e7ed      	b.n	80195ea <__exponent+0x44>
 801960e:	2330      	movs	r3, #48	@ 0x30
 8019610:	3130      	adds	r1, #48	@ 0x30
 8019612:	7083      	strb	r3, [r0, #2]
 8019614:	70c1      	strb	r1, [r0, #3]
 8019616:	1d03      	adds	r3, r0, #4
 8019618:	e7f1      	b.n	80195fe <__exponent+0x58>
	...

0801961c <_printf_float>:
 801961c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019620:	b08d      	sub	sp, #52	@ 0x34
 8019622:	460c      	mov	r4, r1
 8019624:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8019628:	4616      	mov	r6, r2
 801962a:	461f      	mov	r7, r3
 801962c:	4605      	mov	r5, r0
 801962e:	f001 f8af 	bl	801a790 <_localeconv_r>
 8019632:	6803      	ldr	r3, [r0, #0]
 8019634:	9304      	str	r3, [sp, #16]
 8019636:	4618      	mov	r0, r3
 8019638:	f7e6 fe32 	bl	80002a0 <strlen>
 801963c:	2300      	movs	r3, #0
 801963e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019640:	f8d8 3000 	ldr.w	r3, [r8]
 8019644:	9005      	str	r0, [sp, #20]
 8019646:	3307      	adds	r3, #7
 8019648:	f023 0307 	bic.w	r3, r3, #7
 801964c:	f103 0208 	add.w	r2, r3, #8
 8019650:	f894 a018 	ldrb.w	sl, [r4, #24]
 8019654:	f8d4 b000 	ldr.w	fp, [r4]
 8019658:	f8c8 2000 	str.w	r2, [r8]
 801965c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019660:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8019664:	9307      	str	r3, [sp, #28]
 8019666:	f8cd 8018 	str.w	r8, [sp, #24]
 801966a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801966e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019672:	4b9c      	ldr	r3, [pc, #624]	@ (80198e4 <_printf_float+0x2c8>)
 8019674:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019678:	f7e7 fa70 	bl	8000b5c <__aeabi_dcmpun>
 801967c:	bb70      	cbnz	r0, 80196dc <_printf_float+0xc0>
 801967e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019682:	4b98      	ldr	r3, [pc, #608]	@ (80198e4 <_printf_float+0x2c8>)
 8019684:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019688:	f7e7 fa4a 	bl	8000b20 <__aeabi_dcmple>
 801968c:	bb30      	cbnz	r0, 80196dc <_printf_float+0xc0>
 801968e:	2200      	movs	r2, #0
 8019690:	2300      	movs	r3, #0
 8019692:	4640      	mov	r0, r8
 8019694:	4649      	mov	r1, r9
 8019696:	f7e7 fa39 	bl	8000b0c <__aeabi_dcmplt>
 801969a:	b110      	cbz	r0, 80196a2 <_printf_float+0x86>
 801969c:	232d      	movs	r3, #45	@ 0x2d
 801969e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80196a2:	4a91      	ldr	r2, [pc, #580]	@ (80198e8 <_printf_float+0x2cc>)
 80196a4:	4b91      	ldr	r3, [pc, #580]	@ (80198ec <_printf_float+0x2d0>)
 80196a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80196aa:	bf94      	ite	ls
 80196ac:	4690      	movls	r8, r2
 80196ae:	4698      	movhi	r8, r3
 80196b0:	2303      	movs	r3, #3
 80196b2:	6123      	str	r3, [r4, #16]
 80196b4:	f02b 0304 	bic.w	r3, fp, #4
 80196b8:	6023      	str	r3, [r4, #0]
 80196ba:	f04f 0900 	mov.w	r9, #0
 80196be:	9700      	str	r7, [sp, #0]
 80196c0:	4633      	mov	r3, r6
 80196c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80196c4:	4621      	mov	r1, r4
 80196c6:	4628      	mov	r0, r5
 80196c8:	f000 f9d2 	bl	8019a70 <_printf_common>
 80196cc:	3001      	adds	r0, #1
 80196ce:	f040 808d 	bne.w	80197ec <_printf_float+0x1d0>
 80196d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80196d6:	b00d      	add	sp, #52	@ 0x34
 80196d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196dc:	4642      	mov	r2, r8
 80196de:	464b      	mov	r3, r9
 80196e0:	4640      	mov	r0, r8
 80196e2:	4649      	mov	r1, r9
 80196e4:	f7e7 fa3a 	bl	8000b5c <__aeabi_dcmpun>
 80196e8:	b140      	cbz	r0, 80196fc <_printf_float+0xe0>
 80196ea:	464b      	mov	r3, r9
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	bfbc      	itt	lt
 80196f0:	232d      	movlt	r3, #45	@ 0x2d
 80196f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80196f6:	4a7e      	ldr	r2, [pc, #504]	@ (80198f0 <_printf_float+0x2d4>)
 80196f8:	4b7e      	ldr	r3, [pc, #504]	@ (80198f4 <_printf_float+0x2d8>)
 80196fa:	e7d4      	b.n	80196a6 <_printf_float+0x8a>
 80196fc:	6863      	ldr	r3, [r4, #4]
 80196fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8019702:	9206      	str	r2, [sp, #24]
 8019704:	1c5a      	adds	r2, r3, #1
 8019706:	d13b      	bne.n	8019780 <_printf_float+0x164>
 8019708:	2306      	movs	r3, #6
 801970a:	6063      	str	r3, [r4, #4]
 801970c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8019710:	2300      	movs	r3, #0
 8019712:	6022      	str	r2, [r4, #0]
 8019714:	9303      	str	r3, [sp, #12]
 8019716:	ab0a      	add	r3, sp, #40	@ 0x28
 8019718:	e9cd a301 	strd	sl, r3, [sp, #4]
 801971c:	ab09      	add	r3, sp, #36	@ 0x24
 801971e:	9300      	str	r3, [sp, #0]
 8019720:	6861      	ldr	r1, [r4, #4]
 8019722:	ec49 8b10 	vmov	d0, r8, r9
 8019726:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801972a:	4628      	mov	r0, r5
 801972c:	f7ff fed6 	bl	80194dc <__cvt>
 8019730:	9b06      	ldr	r3, [sp, #24]
 8019732:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019734:	2b47      	cmp	r3, #71	@ 0x47
 8019736:	4680      	mov	r8, r0
 8019738:	d129      	bne.n	801978e <_printf_float+0x172>
 801973a:	1cc8      	adds	r0, r1, #3
 801973c:	db02      	blt.n	8019744 <_printf_float+0x128>
 801973e:	6863      	ldr	r3, [r4, #4]
 8019740:	4299      	cmp	r1, r3
 8019742:	dd41      	ble.n	80197c8 <_printf_float+0x1ac>
 8019744:	f1aa 0a02 	sub.w	sl, sl, #2
 8019748:	fa5f fa8a 	uxtb.w	sl, sl
 801974c:	3901      	subs	r1, #1
 801974e:	4652      	mov	r2, sl
 8019750:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8019754:	9109      	str	r1, [sp, #36]	@ 0x24
 8019756:	f7ff ff26 	bl	80195a6 <__exponent>
 801975a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801975c:	1813      	adds	r3, r2, r0
 801975e:	2a01      	cmp	r2, #1
 8019760:	4681      	mov	r9, r0
 8019762:	6123      	str	r3, [r4, #16]
 8019764:	dc02      	bgt.n	801976c <_printf_float+0x150>
 8019766:	6822      	ldr	r2, [r4, #0]
 8019768:	07d2      	lsls	r2, r2, #31
 801976a:	d501      	bpl.n	8019770 <_printf_float+0x154>
 801976c:	3301      	adds	r3, #1
 801976e:	6123      	str	r3, [r4, #16]
 8019770:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8019774:	2b00      	cmp	r3, #0
 8019776:	d0a2      	beq.n	80196be <_printf_float+0xa2>
 8019778:	232d      	movs	r3, #45	@ 0x2d
 801977a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801977e:	e79e      	b.n	80196be <_printf_float+0xa2>
 8019780:	9a06      	ldr	r2, [sp, #24]
 8019782:	2a47      	cmp	r2, #71	@ 0x47
 8019784:	d1c2      	bne.n	801970c <_printf_float+0xf0>
 8019786:	2b00      	cmp	r3, #0
 8019788:	d1c0      	bne.n	801970c <_printf_float+0xf0>
 801978a:	2301      	movs	r3, #1
 801978c:	e7bd      	b.n	801970a <_printf_float+0xee>
 801978e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8019792:	d9db      	bls.n	801974c <_printf_float+0x130>
 8019794:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8019798:	d118      	bne.n	80197cc <_printf_float+0x1b0>
 801979a:	2900      	cmp	r1, #0
 801979c:	6863      	ldr	r3, [r4, #4]
 801979e:	dd0b      	ble.n	80197b8 <_printf_float+0x19c>
 80197a0:	6121      	str	r1, [r4, #16]
 80197a2:	b913      	cbnz	r3, 80197aa <_printf_float+0x18e>
 80197a4:	6822      	ldr	r2, [r4, #0]
 80197a6:	07d0      	lsls	r0, r2, #31
 80197a8:	d502      	bpl.n	80197b0 <_printf_float+0x194>
 80197aa:	3301      	adds	r3, #1
 80197ac:	440b      	add	r3, r1
 80197ae:	6123      	str	r3, [r4, #16]
 80197b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80197b2:	f04f 0900 	mov.w	r9, #0
 80197b6:	e7db      	b.n	8019770 <_printf_float+0x154>
 80197b8:	b913      	cbnz	r3, 80197c0 <_printf_float+0x1a4>
 80197ba:	6822      	ldr	r2, [r4, #0]
 80197bc:	07d2      	lsls	r2, r2, #31
 80197be:	d501      	bpl.n	80197c4 <_printf_float+0x1a8>
 80197c0:	3302      	adds	r3, #2
 80197c2:	e7f4      	b.n	80197ae <_printf_float+0x192>
 80197c4:	2301      	movs	r3, #1
 80197c6:	e7f2      	b.n	80197ae <_printf_float+0x192>
 80197c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80197cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80197ce:	4299      	cmp	r1, r3
 80197d0:	db05      	blt.n	80197de <_printf_float+0x1c2>
 80197d2:	6823      	ldr	r3, [r4, #0]
 80197d4:	6121      	str	r1, [r4, #16]
 80197d6:	07d8      	lsls	r0, r3, #31
 80197d8:	d5ea      	bpl.n	80197b0 <_printf_float+0x194>
 80197da:	1c4b      	adds	r3, r1, #1
 80197dc:	e7e7      	b.n	80197ae <_printf_float+0x192>
 80197de:	2900      	cmp	r1, #0
 80197e0:	bfd4      	ite	le
 80197e2:	f1c1 0202 	rsble	r2, r1, #2
 80197e6:	2201      	movgt	r2, #1
 80197e8:	4413      	add	r3, r2
 80197ea:	e7e0      	b.n	80197ae <_printf_float+0x192>
 80197ec:	6823      	ldr	r3, [r4, #0]
 80197ee:	055a      	lsls	r2, r3, #21
 80197f0:	d407      	bmi.n	8019802 <_printf_float+0x1e6>
 80197f2:	6923      	ldr	r3, [r4, #16]
 80197f4:	4642      	mov	r2, r8
 80197f6:	4631      	mov	r1, r6
 80197f8:	4628      	mov	r0, r5
 80197fa:	47b8      	blx	r7
 80197fc:	3001      	adds	r0, #1
 80197fe:	d12b      	bne.n	8019858 <_printf_float+0x23c>
 8019800:	e767      	b.n	80196d2 <_printf_float+0xb6>
 8019802:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8019806:	f240 80dd 	bls.w	80199c4 <_printf_float+0x3a8>
 801980a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801980e:	2200      	movs	r2, #0
 8019810:	2300      	movs	r3, #0
 8019812:	f7e7 f971 	bl	8000af8 <__aeabi_dcmpeq>
 8019816:	2800      	cmp	r0, #0
 8019818:	d033      	beq.n	8019882 <_printf_float+0x266>
 801981a:	4a37      	ldr	r2, [pc, #220]	@ (80198f8 <_printf_float+0x2dc>)
 801981c:	2301      	movs	r3, #1
 801981e:	4631      	mov	r1, r6
 8019820:	4628      	mov	r0, r5
 8019822:	47b8      	blx	r7
 8019824:	3001      	adds	r0, #1
 8019826:	f43f af54 	beq.w	80196d2 <_printf_float+0xb6>
 801982a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801982e:	4543      	cmp	r3, r8
 8019830:	db02      	blt.n	8019838 <_printf_float+0x21c>
 8019832:	6823      	ldr	r3, [r4, #0]
 8019834:	07d8      	lsls	r0, r3, #31
 8019836:	d50f      	bpl.n	8019858 <_printf_float+0x23c>
 8019838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801983c:	4631      	mov	r1, r6
 801983e:	4628      	mov	r0, r5
 8019840:	47b8      	blx	r7
 8019842:	3001      	adds	r0, #1
 8019844:	f43f af45 	beq.w	80196d2 <_printf_float+0xb6>
 8019848:	f04f 0900 	mov.w	r9, #0
 801984c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8019850:	f104 0a1a 	add.w	sl, r4, #26
 8019854:	45c8      	cmp	r8, r9
 8019856:	dc09      	bgt.n	801986c <_printf_float+0x250>
 8019858:	6823      	ldr	r3, [r4, #0]
 801985a:	079b      	lsls	r3, r3, #30
 801985c:	f100 8103 	bmi.w	8019a66 <_printf_float+0x44a>
 8019860:	68e0      	ldr	r0, [r4, #12]
 8019862:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019864:	4298      	cmp	r0, r3
 8019866:	bfb8      	it	lt
 8019868:	4618      	movlt	r0, r3
 801986a:	e734      	b.n	80196d6 <_printf_float+0xba>
 801986c:	2301      	movs	r3, #1
 801986e:	4652      	mov	r2, sl
 8019870:	4631      	mov	r1, r6
 8019872:	4628      	mov	r0, r5
 8019874:	47b8      	blx	r7
 8019876:	3001      	adds	r0, #1
 8019878:	f43f af2b 	beq.w	80196d2 <_printf_float+0xb6>
 801987c:	f109 0901 	add.w	r9, r9, #1
 8019880:	e7e8      	b.n	8019854 <_printf_float+0x238>
 8019882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019884:	2b00      	cmp	r3, #0
 8019886:	dc39      	bgt.n	80198fc <_printf_float+0x2e0>
 8019888:	4a1b      	ldr	r2, [pc, #108]	@ (80198f8 <_printf_float+0x2dc>)
 801988a:	2301      	movs	r3, #1
 801988c:	4631      	mov	r1, r6
 801988e:	4628      	mov	r0, r5
 8019890:	47b8      	blx	r7
 8019892:	3001      	adds	r0, #1
 8019894:	f43f af1d 	beq.w	80196d2 <_printf_float+0xb6>
 8019898:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801989c:	ea59 0303 	orrs.w	r3, r9, r3
 80198a0:	d102      	bne.n	80198a8 <_printf_float+0x28c>
 80198a2:	6823      	ldr	r3, [r4, #0]
 80198a4:	07d9      	lsls	r1, r3, #31
 80198a6:	d5d7      	bpl.n	8019858 <_printf_float+0x23c>
 80198a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80198ac:	4631      	mov	r1, r6
 80198ae:	4628      	mov	r0, r5
 80198b0:	47b8      	blx	r7
 80198b2:	3001      	adds	r0, #1
 80198b4:	f43f af0d 	beq.w	80196d2 <_printf_float+0xb6>
 80198b8:	f04f 0a00 	mov.w	sl, #0
 80198bc:	f104 0b1a 	add.w	fp, r4, #26
 80198c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80198c2:	425b      	negs	r3, r3
 80198c4:	4553      	cmp	r3, sl
 80198c6:	dc01      	bgt.n	80198cc <_printf_float+0x2b0>
 80198c8:	464b      	mov	r3, r9
 80198ca:	e793      	b.n	80197f4 <_printf_float+0x1d8>
 80198cc:	2301      	movs	r3, #1
 80198ce:	465a      	mov	r2, fp
 80198d0:	4631      	mov	r1, r6
 80198d2:	4628      	mov	r0, r5
 80198d4:	47b8      	blx	r7
 80198d6:	3001      	adds	r0, #1
 80198d8:	f43f aefb 	beq.w	80196d2 <_printf_float+0xb6>
 80198dc:	f10a 0a01 	add.w	sl, sl, #1
 80198e0:	e7ee      	b.n	80198c0 <_printf_float+0x2a4>
 80198e2:	bf00      	nop
 80198e4:	7fefffff 	.word	0x7fefffff
 80198e8:	0801e938 	.word	0x0801e938
 80198ec:	0801e93c 	.word	0x0801e93c
 80198f0:	0801e940 	.word	0x0801e940
 80198f4:	0801e944 	.word	0x0801e944
 80198f8:	0801e948 	.word	0x0801e948
 80198fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80198fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8019902:	4553      	cmp	r3, sl
 8019904:	bfa8      	it	ge
 8019906:	4653      	movge	r3, sl
 8019908:	2b00      	cmp	r3, #0
 801990a:	4699      	mov	r9, r3
 801990c:	dc36      	bgt.n	801997c <_printf_float+0x360>
 801990e:	f04f 0b00 	mov.w	fp, #0
 8019912:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019916:	f104 021a 	add.w	r2, r4, #26
 801991a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801991c:	9306      	str	r3, [sp, #24]
 801991e:	eba3 0309 	sub.w	r3, r3, r9
 8019922:	455b      	cmp	r3, fp
 8019924:	dc31      	bgt.n	801998a <_printf_float+0x36e>
 8019926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019928:	459a      	cmp	sl, r3
 801992a:	dc3a      	bgt.n	80199a2 <_printf_float+0x386>
 801992c:	6823      	ldr	r3, [r4, #0]
 801992e:	07da      	lsls	r2, r3, #31
 8019930:	d437      	bmi.n	80199a2 <_printf_float+0x386>
 8019932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019934:	ebaa 0903 	sub.w	r9, sl, r3
 8019938:	9b06      	ldr	r3, [sp, #24]
 801993a:	ebaa 0303 	sub.w	r3, sl, r3
 801993e:	4599      	cmp	r9, r3
 8019940:	bfa8      	it	ge
 8019942:	4699      	movge	r9, r3
 8019944:	f1b9 0f00 	cmp.w	r9, #0
 8019948:	dc33      	bgt.n	80199b2 <_printf_float+0x396>
 801994a:	f04f 0800 	mov.w	r8, #0
 801994e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019952:	f104 0b1a 	add.w	fp, r4, #26
 8019956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019958:	ebaa 0303 	sub.w	r3, sl, r3
 801995c:	eba3 0309 	sub.w	r3, r3, r9
 8019960:	4543      	cmp	r3, r8
 8019962:	f77f af79 	ble.w	8019858 <_printf_float+0x23c>
 8019966:	2301      	movs	r3, #1
 8019968:	465a      	mov	r2, fp
 801996a:	4631      	mov	r1, r6
 801996c:	4628      	mov	r0, r5
 801996e:	47b8      	blx	r7
 8019970:	3001      	adds	r0, #1
 8019972:	f43f aeae 	beq.w	80196d2 <_printf_float+0xb6>
 8019976:	f108 0801 	add.w	r8, r8, #1
 801997a:	e7ec      	b.n	8019956 <_printf_float+0x33a>
 801997c:	4642      	mov	r2, r8
 801997e:	4631      	mov	r1, r6
 8019980:	4628      	mov	r0, r5
 8019982:	47b8      	blx	r7
 8019984:	3001      	adds	r0, #1
 8019986:	d1c2      	bne.n	801990e <_printf_float+0x2f2>
 8019988:	e6a3      	b.n	80196d2 <_printf_float+0xb6>
 801998a:	2301      	movs	r3, #1
 801998c:	4631      	mov	r1, r6
 801998e:	4628      	mov	r0, r5
 8019990:	9206      	str	r2, [sp, #24]
 8019992:	47b8      	blx	r7
 8019994:	3001      	adds	r0, #1
 8019996:	f43f ae9c 	beq.w	80196d2 <_printf_float+0xb6>
 801999a:	9a06      	ldr	r2, [sp, #24]
 801999c:	f10b 0b01 	add.w	fp, fp, #1
 80199a0:	e7bb      	b.n	801991a <_printf_float+0x2fe>
 80199a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80199a6:	4631      	mov	r1, r6
 80199a8:	4628      	mov	r0, r5
 80199aa:	47b8      	blx	r7
 80199ac:	3001      	adds	r0, #1
 80199ae:	d1c0      	bne.n	8019932 <_printf_float+0x316>
 80199b0:	e68f      	b.n	80196d2 <_printf_float+0xb6>
 80199b2:	9a06      	ldr	r2, [sp, #24]
 80199b4:	464b      	mov	r3, r9
 80199b6:	4442      	add	r2, r8
 80199b8:	4631      	mov	r1, r6
 80199ba:	4628      	mov	r0, r5
 80199bc:	47b8      	blx	r7
 80199be:	3001      	adds	r0, #1
 80199c0:	d1c3      	bne.n	801994a <_printf_float+0x32e>
 80199c2:	e686      	b.n	80196d2 <_printf_float+0xb6>
 80199c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80199c8:	f1ba 0f01 	cmp.w	sl, #1
 80199cc:	dc01      	bgt.n	80199d2 <_printf_float+0x3b6>
 80199ce:	07db      	lsls	r3, r3, #31
 80199d0:	d536      	bpl.n	8019a40 <_printf_float+0x424>
 80199d2:	2301      	movs	r3, #1
 80199d4:	4642      	mov	r2, r8
 80199d6:	4631      	mov	r1, r6
 80199d8:	4628      	mov	r0, r5
 80199da:	47b8      	blx	r7
 80199dc:	3001      	adds	r0, #1
 80199de:	f43f ae78 	beq.w	80196d2 <_printf_float+0xb6>
 80199e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80199e6:	4631      	mov	r1, r6
 80199e8:	4628      	mov	r0, r5
 80199ea:	47b8      	blx	r7
 80199ec:	3001      	adds	r0, #1
 80199ee:	f43f ae70 	beq.w	80196d2 <_printf_float+0xb6>
 80199f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80199f6:	2200      	movs	r2, #0
 80199f8:	2300      	movs	r3, #0
 80199fa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80199fe:	f7e7 f87b 	bl	8000af8 <__aeabi_dcmpeq>
 8019a02:	b9c0      	cbnz	r0, 8019a36 <_printf_float+0x41a>
 8019a04:	4653      	mov	r3, sl
 8019a06:	f108 0201 	add.w	r2, r8, #1
 8019a0a:	4631      	mov	r1, r6
 8019a0c:	4628      	mov	r0, r5
 8019a0e:	47b8      	blx	r7
 8019a10:	3001      	adds	r0, #1
 8019a12:	d10c      	bne.n	8019a2e <_printf_float+0x412>
 8019a14:	e65d      	b.n	80196d2 <_printf_float+0xb6>
 8019a16:	2301      	movs	r3, #1
 8019a18:	465a      	mov	r2, fp
 8019a1a:	4631      	mov	r1, r6
 8019a1c:	4628      	mov	r0, r5
 8019a1e:	47b8      	blx	r7
 8019a20:	3001      	adds	r0, #1
 8019a22:	f43f ae56 	beq.w	80196d2 <_printf_float+0xb6>
 8019a26:	f108 0801 	add.w	r8, r8, #1
 8019a2a:	45d0      	cmp	r8, sl
 8019a2c:	dbf3      	blt.n	8019a16 <_printf_float+0x3fa>
 8019a2e:	464b      	mov	r3, r9
 8019a30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019a34:	e6df      	b.n	80197f6 <_printf_float+0x1da>
 8019a36:	f04f 0800 	mov.w	r8, #0
 8019a3a:	f104 0b1a 	add.w	fp, r4, #26
 8019a3e:	e7f4      	b.n	8019a2a <_printf_float+0x40e>
 8019a40:	2301      	movs	r3, #1
 8019a42:	4642      	mov	r2, r8
 8019a44:	e7e1      	b.n	8019a0a <_printf_float+0x3ee>
 8019a46:	2301      	movs	r3, #1
 8019a48:	464a      	mov	r2, r9
 8019a4a:	4631      	mov	r1, r6
 8019a4c:	4628      	mov	r0, r5
 8019a4e:	47b8      	blx	r7
 8019a50:	3001      	adds	r0, #1
 8019a52:	f43f ae3e 	beq.w	80196d2 <_printf_float+0xb6>
 8019a56:	f108 0801 	add.w	r8, r8, #1
 8019a5a:	68e3      	ldr	r3, [r4, #12]
 8019a5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019a5e:	1a5b      	subs	r3, r3, r1
 8019a60:	4543      	cmp	r3, r8
 8019a62:	dcf0      	bgt.n	8019a46 <_printf_float+0x42a>
 8019a64:	e6fc      	b.n	8019860 <_printf_float+0x244>
 8019a66:	f04f 0800 	mov.w	r8, #0
 8019a6a:	f104 0919 	add.w	r9, r4, #25
 8019a6e:	e7f4      	b.n	8019a5a <_printf_float+0x43e>

08019a70 <_printf_common>:
 8019a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a74:	4616      	mov	r6, r2
 8019a76:	4698      	mov	r8, r3
 8019a78:	688a      	ldr	r2, [r1, #8]
 8019a7a:	690b      	ldr	r3, [r1, #16]
 8019a7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019a80:	4293      	cmp	r3, r2
 8019a82:	bfb8      	it	lt
 8019a84:	4613      	movlt	r3, r2
 8019a86:	6033      	str	r3, [r6, #0]
 8019a88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019a8c:	4607      	mov	r7, r0
 8019a8e:	460c      	mov	r4, r1
 8019a90:	b10a      	cbz	r2, 8019a96 <_printf_common+0x26>
 8019a92:	3301      	adds	r3, #1
 8019a94:	6033      	str	r3, [r6, #0]
 8019a96:	6823      	ldr	r3, [r4, #0]
 8019a98:	0699      	lsls	r1, r3, #26
 8019a9a:	bf42      	ittt	mi
 8019a9c:	6833      	ldrmi	r3, [r6, #0]
 8019a9e:	3302      	addmi	r3, #2
 8019aa0:	6033      	strmi	r3, [r6, #0]
 8019aa2:	6825      	ldr	r5, [r4, #0]
 8019aa4:	f015 0506 	ands.w	r5, r5, #6
 8019aa8:	d106      	bne.n	8019ab8 <_printf_common+0x48>
 8019aaa:	f104 0a19 	add.w	sl, r4, #25
 8019aae:	68e3      	ldr	r3, [r4, #12]
 8019ab0:	6832      	ldr	r2, [r6, #0]
 8019ab2:	1a9b      	subs	r3, r3, r2
 8019ab4:	42ab      	cmp	r3, r5
 8019ab6:	dc26      	bgt.n	8019b06 <_printf_common+0x96>
 8019ab8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019abc:	6822      	ldr	r2, [r4, #0]
 8019abe:	3b00      	subs	r3, #0
 8019ac0:	bf18      	it	ne
 8019ac2:	2301      	movne	r3, #1
 8019ac4:	0692      	lsls	r2, r2, #26
 8019ac6:	d42b      	bmi.n	8019b20 <_printf_common+0xb0>
 8019ac8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019acc:	4641      	mov	r1, r8
 8019ace:	4638      	mov	r0, r7
 8019ad0:	47c8      	blx	r9
 8019ad2:	3001      	adds	r0, #1
 8019ad4:	d01e      	beq.n	8019b14 <_printf_common+0xa4>
 8019ad6:	6823      	ldr	r3, [r4, #0]
 8019ad8:	6922      	ldr	r2, [r4, #16]
 8019ada:	f003 0306 	and.w	r3, r3, #6
 8019ade:	2b04      	cmp	r3, #4
 8019ae0:	bf02      	ittt	eq
 8019ae2:	68e5      	ldreq	r5, [r4, #12]
 8019ae4:	6833      	ldreq	r3, [r6, #0]
 8019ae6:	1aed      	subeq	r5, r5, r3
 8019ae8:	68a3      	ldr	r3, [r4, #8]
 8019aea:	bf0c      	ite	eq
 8019aec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019af0:	2500      	movne	r5, #0
 8019af2:	4293      	cmp	r3, r2
 8019af4:	bfc4      	itt	gt
 8019af6:	1a9b      	subgt	r3, r3, r2
 8019af8:	18ed      	addgt	r5, r5, r3
 8019afa:	2600      	movs	r6, #0
 8019afc:	341a      	adds	r4, #26
 8019afe:	42b5      	cmp	r5, r6
 8019b00:	d11a      	bne.n	8019b38 <_printf_common+0xc8>
 8019b02:	2000      	movs	r0, #0
 8019b04:	e008      	b.n	8019b18 <_printf_common+0xa8>
 8019b06:	2301      	movs	r3, #1
 8019b08:	4652      	mov	r2, sl
 8019b0a:	4641      	mov	r1, r8
 8019b0c:	4638      	mov	r0, r7
 8019b0e:	47c8      	blx	r9
 8019b10:	3001      	adds	r0, #1
 8019b12:	d103      	bne.n	8019b1c <_printf_common+0xac>
 8019b14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b1c:	3501      	adds	r5, #1
 8019b1e:	e7c6      	b.n	8019aae <_printf_common+0x3e>
 8019b20:	18e1      	adds	r1, r4, r3
 8019b22:	1c5a      	adds	r2, r3, #1
 8019b24:	2030      	movs	r0, #48	@ 0x30
 8019b26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019b2a:	4422      	add	r2, r4
 8019b2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019b30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019b34:	3302      	adds	r3, #2
 8019b36:	e7c7      	b.n	8019ac8 <_printf_common+0x58>
 8019b38:	2301      	movs	r3, #1
 8019b3a:	4622      	mov	r2, r4
 8019b3c:	4641      	mov	r1, r8
 8019b3e:	4638      	mov	r0, r7
 8019b40:	47c8      	blx	r9
 8019b42:	3001      	adds	r0, #1
 8019b44:	d0e6      	beq.n	8019b14 <_printf_common+0xa4>
 8019b46:	3601      	adds	r6, #1
 8019b48:	e7d9      	b.n	8019afe <_printf_common+0x8e>
	...

08019b4c <_printf_i>:
 8019b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019b50:	7e0f      	ldrb	r7, [r1, #24]
 8019b52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019b54:	2f78      	cmp	r7, #120	@ 0x78
 8019b56:	4691      	mov	r9, r2
 8019b58:	4680      	mov	r8, r0
 8019b5a:	460c      	mov	r4, r1
 8019b5c:	469a      	mov	sl, r3
 8019b5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019b62:	d807      	bhi.n	8019b74 <_printf_i+0x28>
 8019b64:	2f62      	cmp	r7, #98	@ 0x62
 8019b66:	d80a      	bhi.n	8019b7e <_printf_i+0x32>
 8019b68:	2f00      	cmp	r7, #0
 8019b6a:	f000 80d2 	beq.w	8019d12 <_printf_i+0x1c6>
 8019b6e:	2f58      	cmp	r7, #88	@ 0x58
 8019b70:	f000 80b9 	beq.w	8019ce6 <_printf_i+0x19a>
 8019b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019b78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019b7c:	e03a      	b.n	8019bf4 <_printf_i+0xa8>
 8019b7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019b82:	2b15      	cmp	r3, #21
 8019b84:	d8f6      	bhi.n	8019b74 <_printf_i+0x28>
 8019b86:	a101      	add	r1, pc, #4	@ (adr r1, 8019b8c <_printf_i+0x40>)
 8019b88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019b8c:	08019be5 	.word	0x08019be5
 8019b90:	08019bf9 	.word	0x08019bf9
 8019b94:	08019b75 	.word	0x08019b75
 8019b98:	08019b75 	.word	0x08019b75
 8019b9c:	08019b75 	.word	0x08019b75
 8019ba0:	08019b75 	.word	0x08019b75
 8019ba4:	08019bf9 	.word	0x08019bf9
 8019ba8:	08019b75 	.word	0x08019b75
 8019bac:	08019b75 	.word	0x08019b75
 8019bb0:	08019b75 	.word	0x08019b75
 8019bb4:	08019b75 	.word	0x08019b75
 8019bb8:	08019cf9 	.word	0x08019cf9
 8019bbc:	08019c23 	.word	0x08019c23
 8019bc0:	08019cb3 	.word	0x08019cb3
 8019bc4:	08019b75 	.word	0x08019b75
 8019bc8:	08019b75 	.word	0x08019b75
 8019bcc:	08019d1b 	.word	0x08019d1b
 8019bd0:	08019b75 	.word	0x08019b75
 8019bd4:	08019c23 	.word	0x08019c23
 8019bd8:	08019b75 	.word	0x08019b75
 8019bdc:	08019b75 	.word	0x08019b75
 8019be0:	08019cbb 	.word	0x08019cbb
 8019be4:	6833      	ldr	r3, [r6, #0]
 8019be6:	1d1a      	adds	r2, r3, #4
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	6032      	str	r2, [r6, #0]
 8019bec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019bf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019bf4:	2301      	movs	r3, #1
 8019bf6:	e09d      	b.n	8019d34 <_printf_i+0x1e8>
 8019bf8:	6833      	ldr	r3, [r6, #0]
 8019bfa:	6820      	ldr	r0, [r4, #0]
 8019bfc:	1d19      	adds	r1, r3, #4
 8019bfe:	6031      	str	r1, [r6, #0]
 8019c00:	0606      	lsls	r6, r0, #24
 8019c02:	d501      	bpl.n	8019c08 <_printf_i+0xbc>
 8019c04:	681d      	ldr	r5, [r3, #0]
 8019c06:	e003      	b.n	8019c10 <_printf_i+0xc4>
 8019c08:	0645      	lsls	r5, r0, #25
 8019c0a:	d5fb      	bpl.n	8019c04 <_printf_i+0xb8>
 8019c0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019c10:	2d00      	cmp	r5, #0
 8019c12:	da03      	bge.n	8019c1c <_printf_i+0xd0>
 8019c14:	232d      	movs	r3, #45	@ 0x2d
 8019c16:	426d      	negs	r5, r5
 8019c18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019c1c:	4859      	ldr	r0, [pc, #356]	@ (8019d84 <_printf_i+0x238>)
 8019c1e:	230a      	movs	r3, #10
 8019c20:	e011      	b.n	8019c46 <_printf_i+0xfa>
 8019c22:	6821      	ldr	r1, [r4, #0]
 8019c24:	6833      	ldr	r3, [r6, #0]
 8019c26:	0608      	lsls	r0, r1, #24
 8019c28:	f853 5b04 	ldr.w	r5, [r3], #4
 8019c2c:	d402      	bmi.n	8019c34 <_printf_i+0xe8>
 8019c2e:	0649      	lsls	r1, r1, #25
 8019c30:	bf48      	it	mi
 8019c32:	b2ad      	uxthmi	r5, r5
 8019c34:	2f6f      	cmp	r7, #111	@ 0x6f
 8019c36:	4853      	ldr	r0, [pc, #332]	@ (8019d84 <_printf_i+0x238>)
 8019c38:	6033      	str	r3, [r6, #0]
 8019c3a:	bf14      	ite	ne
 8019c3c:	230a      	movne	r3, #10
 8019c3e:	2308      	moveq	r3, #8
 8019c40:	2100      	movs	r1, #0
 8019c42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019c46:	6866      	ldr	r6, [r4, #4]
 8019c48:	60a6      	str	r6, [r4, #8]
 8019c4a:	2e00      	cmp	r6, #0
 8019c4c:	bfa2      	ittt	ge
 8019c4e:	6821      	ldrge	r1, [r4, #0]
 8019c50:	f021 0104 	bicge.w	r1, r1, #4
 8019c54:	6021      	strge	r1, [r4, #0]
 8019c56:	b90d      	cbnz	r5, 8019c5c <_printf_i+0x110>
 8019c58:	2e00      	cmp	r6, #0
 8019c5a:	d04b      	beq.n	8019cf4 <_printf_i+0x1a8>
 8019c5c:	4616      	mov	r6, r2
 8019c5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8019c62:	fb03 5711 	mls	r7, r3, r1, r5
 8019c66:	5dc7      	ldrb	r7, [r0, r7]
 8019c68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019c6c:	462f      	mov	r7, r5
 8019c6e:	42bb      	cmp	r3, r7
 8019c70:	460d      	mov	r5, r1
 8019c72:	d9f4      	bls.n	8019c5e <_printf_i+0x112>
 8019c74:	2b08      	cmp	r3, #8
 8019c76:	d10b      	bne.n	8019c90 <_printf_i+0x144>
 8019c78:	6823      	ldr	r3, [r4, #0]
 8019c7a:	07df      	lsls	r7, r3, #31
 8019c7c:	d508      	bpl.n	8019c90 <_printf_i+0x144>
 8019c7e:	6923      	ldr	r3, [r4, #16]
 8019c80:	6861      	ldr	r1, [r4, #4]
 8019c82:	4299      	cmp	r1, r3
 8019c84:	bfde      	ittt	le
 8019c86:	2330      	movle	r3, #48	@ 0x30
 8019c88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019c8c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8019c90:	1b92      	subs	r2, r2, r6
 8019c92:	6122      	str	r2, [r4, #16]
 8019c94:	f8cd a000 	str.w	sl, [sp]
 8019c98:	464b      	mov	r3, r9
 8019c9a:	aa03      	add	r2, sp, #12
 8019c9c:	4621      	mov	r1, r4
 8019c9e:	4640      	mov	r0, r8
 8019ca0:	f7ff fee6 	bl	8019a70 <_printf_common>
 8019ca4:	3001      	adds	r0, #1
 8019ca6:	d14a      	bne.n	8019d3e <_printf_i+0x1f2>
 8019ca8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019cac:	b004      	add	sp, #16
 8019cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cb2:	6823      	ldr	r3, [r4, #0]
 8019cb4:	f043 0320 	orr.w	r3, r3, #32
 8019cb8:	6023      	str	r3, [r4, #0]
 8019cba:	4833      	ldr	r0, [pc, #204]	@ (8019d88 <_printf_i+0x23c>)
 8019cbc:	2778      	movs	r7, #120	@ 0x78
 8019cbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019cc2:	6823      	ldr	r3, [r4, #0]
 8019cc4:	6831      	ldr	r1, [r6, #0]
 8019cc6:	061f      	lsls	r7, r3, #24
 8019cc8:	f851 5b04 	ldr.w	r5, [r1], #4
 8019ccc:	d402      	bmi.n	8019cd4 <_printf_i+0x188>
 8019cce:	065f      	lsls	r7, r3, #25
 8019cd0:	bf48      	it	mi
 8019cd2:	b2ad      	uxthmi	r5, r5
 8019cd4:	6031      	str	r1, [r6, #0]
 8019cd6:	07d9      	lsls	r1, r3, #31
 8019cd8:	bf44      	itt	mi
 8019cda:	f043 0320 	orrmi.w	r3, r3, #32
 8019cde:	6023      	strmi	r3, [r4, #0]
 8019ce0:	b11d      	cbz	r5, 8019cea <_printf_i+0x19e>
 8019ce2:	2310      	movs	r3, #16
 8019ce4:	e7ac      	b.n	8019c40 <_printf_i+0xf4>
 8019ce6:	4827      	ldr	r0, [pc, #156]	@ (8019d84 <_printf_i+0x238>)
 8019ce8:	e7e9      	b.n	8019cbe <_printf_i+0x172>
 8019cea:	6823      	ldr	r3, [r4, #0]
 8019cec:	f023 0320 	bic.w	r3, r3, #32
 8019cf0:	6023      	str	r3, [r4, #0]
 8019cf2:	e7f6      	b.n	8019ce2 <_printf_i+0x196>
 8019cf4:	4616      	mov	r6, r2
 8019cf6:	e7bd      	b.n	8019c74 <_printf_i+0x128>
 8019cf8:	6833      	ldr	r3, [r6, #0]
 8019cfa:	6825      	ldr	r5, [r4, #0]
 8019cfc:	6961      	ldr	r1, [r4, #20]
 8019cfe:	1d18      	adds	r0, r3, #4
 8019d00:	6030      	str	r0, [r6, #0]
 8019d02:	062e      	lsls	r6, r5, #24
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	d501      	bpl.n	8019d0c <_printf_i+0x1c0>
 8019d08:	6019      	str	r1, [r3, #0]
 8019d0a:	e002      	b.n	8019d12 <_printf_i+0x1c6>
 8019d0c:	0668      	lsls	r0, r5, #25
 8019d0e:	d5fb      	bpl.n	8019d08 <_printf_i+0x1bc>
 8019d10:	8019      	strh	r1, [r3, #0]
 8019d12:	2300      	movs	r3, #0
 8019d14:	6123      	str	r3, [r4, #16]
 8019d16:	4616      	mov	r6, r2
 8019d18:	e7bc      	b.n	8019c94 <_printf_i+0x148>
 8019d1a:	6833      	ldr	r3, [r6, #0]
 8019d1c:	1d1a      	adds	r2, r3, #4
 8019d1e:	6032      	str	r2, [r6, #0]
 8019d20:	681e      	ldr	r6, [r3, #0]
 8019d22:	6862      	ldr	r2, [r4, #4]
 8019d24:	2100      	movs	r1, #0
 8019d26:	4630      	mov	r0, r6
 8019d28:	f7e6 fa6a 	bl	8000200 <memchr>
 8019d2c:	b108      	cbz	r0, 8019d32 <_printf_i+0x1e6>
 8019d2e:	1b80      	subs	r0, r0, r6
 8019d30:	6060      	str	r0, [r4, #4]
 8019d32:	6863      	ldr	r3, [r4, #4]
 8019d34:	6123      	str	r3, [r4, #16]
 8019d36:	2300      	movs	r3, #0
 8019d38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019d3c:	e7aa      	b.n	8019c94 <_printf_i+0x148>
 8019d3e:	6923      	ldr	r3, [r4, #16]
 8019d40:	4632      	mov	r2, r6
 8019d42:	4649      	mov	r1, r9
 8019d44:	4640      	mov	r0, r8
 8019d46:	47d0      	blx	sl
 8019d48:	3001      	adds	r0, #1
 8019d4a:	d0ad      	beq.n	8019ca8 <_printf_i+0x15c>
 8019d4c:	6823      	ldr	r3, [r4, #0]
 8019d4e:	079b      	lsls	r3, r3, #30
 8019d50:	d413      	bmi.n	8019d7a <_printf_i+0x22e>
 8019d52:	68e0      	ldr	r0, [r4, #12]
 8019d54:	9b03      	ldr	r3, [sp, #12]
 8019d56:	4298      	cmp	r0, r3
 8019d58:	bfb8      	it	lt
 8019d5a:	4618      	movlt	r0, r3
 8019d5c:	e7a6      	b.n	8019cac <_printf_i+0x160>
 8019d5e:	2301      	movs	r3, #1
 8019d60:	4632      	mov	r2, r6
 8019d62:	4649      	mov	r1, r9
 8019d64:	4640      	mov	r0, r8
 8019d66:	47d0      	blx	sl
 8019d68:	3001      	adds	r0, #1
 8019d6a:	d09d      	beq.n	8019ca8 <_printf_i+0x15c>
 8019d6c:	3501      	adds	r5, #1
 8019d6e:	68e3      	ldr	r3, [r4, #12]
 8019d70:	9903      	ldr	r1, [sp, #12]
 8019d72:	1a5b      	subs	r3, r3, r1
 8019d74:	42ab      	cmp	r3, r5
 8019d76:	dcf2      	bgt.n	8019d5e <_printf_i+0x212>
 8019d78:	e7eb      	b.n	8019d52 <_printf_i+0x206>
 8019d7a:	2500      	movs	r5, #0
 8019d7c:	f104 0619 	add.w	r6, r4, #25
 8019d80:	e7f5      	b.n	8019d6e <_printf_i+0x222>
 8019d82:	bf00      	nop
 8019d84:	0801e94a 	.word	0x0801e94a
 8019d88:	0801e95b 	.word	0x0801e95b

08019d8c <_scanf_float>:
 8019d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d90:	b087      	sub	sp, #28
 8019d92:	4617      	mov	r7, r2
 8019d94:	9303      	str	r3, [sp, #12]
 8019d96:	688b      	ldr	r3, [r1, #8]
 8019d98:	1e5a      	subs	r2, r3, #1
 8019d9a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8019d9e:	bf81      	itttt	hi
 8019da0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8019da4:	eb03 0b05 	addhi.w	fp, r3, r5
 8019da8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8019dac:	608b      	strhi	r3, [r1, #8]
 8019dae:	680b      	ldr	r3, [r1, #0]
 8019db0:	460a      	mov	r2, r1
 8019db2:	f04f 0500 	mov.w	r5, #0
 8019db6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8019dba:	f842 3b1c 	str.w	r3, [r2], #28
 8019dbe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019dc2:	4680      	mov	r8, r0
 8019dc4:	460c      	mov	r4, r1
 8019dc6:	bf98      	it	ls
 8019dc8:	f04f 0b00 	movls.w	fp, #0
 8019dcc:	9201      	str	r2, [sp, #4]
 8019dce:	4616      	mov	r6, r2
 8019dd0:	46aa      	mov	sl, r5
 8019dd2:	46a9      	mov	r9, r5
 8019dd4:	9502      	str	r5, [sp, #8]
 8019dd6:	68a2      	ldr	r2, [r4, #8]
 8019dd8:	b152      	cbz	r2, 8019df0 <_scanf_float+0x64>
 8019dda:	683b      	ldr	r3, [r7, #0]
 8019ddc:	781b      	ldrb	r3, [r3, #0]
 8019dde:	2b4e      	cmp	r3, #78	@ 0x4e
 8019de0:	d864      	bhi.n	8019eac <_scanf_float+0x120>
 8019de2:	2b40      	cmp	r3, #64	@ 0x40
 8019de4:	d83c      	bhi.n	8019e60 <_scanf_float+0xd4>
 8019de6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8019dea:	b2c8      	uxtb	r0, r1
 8019dec:	280e      	cmp	r0, #14
 8019dee:	d93a      	bls.n	8019e66 <_scanf_float+0xda>
 8019df0:	f1b9 0f00 	cmp.w	r9, #0
 8019df4:	d003      	beq.n	8019dfe <_scanf_float+0x72>
 8019df6:	6823      	ldr	r3, [r4, #0]
 8019df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019dfc:	6023      	str	r3, [r4, #0]
 8019dfe:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8019e02:	f1ba 0f01 	cmp.w	sl, #1
 8019e06:	f200 8117 	bhi.w	801a038 <_scanf_float+0x2ac>
 8019e0a:	9b01      	ldr	r3, [sp, #4]
 8019e0c:	429e      	cmp	r6, r3
 8019e0e:	f200 8108 	bhi.w	801a022 <_scanf_float+0x296>
 8019e12:	2001      	movs	r0, #1
 8019e14:	b007      	add	sp, #28
 8019e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e1a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8019e1e:	2a0d      	cmp	r2, #13
 8019e20:	d8e6      	bhi.n	8019df0 <_scanf_float+0x64>
 8019e22:	a101      	add	r1, pc, #4	@ (adr r1, 8019e28 <_scanf_float+0x9c>)
 8019e24:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019e28:	08019f6f 	.word	0x08019f6f
 8019e2c:	08019df1 	.word	0x08019df1
 8019e30:	08019df1 	.word	0x08019df1
 8019e34:	08019df1 	.word	0x08019df1
 8019e38:	08019fcf 	.word	0x08019fcf
 8019e3c:	08019fa7 	.word	0x08019fa7
 8019e40:	08019df1 	.word	0x08019df1
 8019e44:	08019df1 	.word	0x08019df1
 8019e48:	08019f7d 	.word	0x08019f7d
 8019e4c:	08019df1 	.word	0x08019df1
 8019e50:	08019df1 	.word	0x08019df1
 8019e54:	08019df1 	.word	0x08019df1
 8019e58:	08019df1 	.word	0x08019df1
 8019e5c:	08019f35 	.word	0x08019f35
 8019e60:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8019e64:	e7db      	b.n	8019e1e <_scanf_float+0x92>
 8019e66:	290e      	cmp	r1, #14
 8019e68:	d8c2      	bhi.n	8019df0 <_scanf_float+0x64>
 8019e6a:	a001      	add	r0, pc, #4	@ (adr r0, 8019e70 <_scanf_float+0xe4>)
 8019e6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019e70:	08019f25 	.word	0x08019f25
 8019e74:	08019df1 	.word	0x08019df1
 8019e78:	08019f25 	.word	0x08019f25
 8019e7c:	08019fbb 	.word	0x08019fbb
 8019e80:	08019df1 	.word	0x08019df1
 8019e84:	08019ecd 	.word	0x08019ecd
 8019e88:	08019f0b 	.word	0x08019f0b
 8019e8c:	08019f0b 	.word	0x08019f0b
 8019e90:	08019f0b 	.word	0x08019f0b
 8019e94:	08019f0b 	.word	0x08019f0b
 8019e98:	08019f0b 	.word	0x08019f0b
 8019e9c:	08019f0b 	.word	0x08019f0b
 8019ea0:	08019f0b 	.word	0x08019f0b
 8019ea4:	08019f0b 	.word	0x08019f0b
 8019ea8:	08019f0b 	.word	0x08019f0b
 8019eac:	2b6e      	cmp	r3, #110	@ 0x6e
 8019eae:	d809      	bhi.n	8019ec4 <_scanf_float+0x138>
 8019eb0:	2b60      	cmp	r3, #96	@ 0x60
 8019eb2:	d8b2      	bhi.n	8019e1a <_scanf_float+0x8e>
 8019eb4:	2b54      	cmp	r3, #84	@ 0x54
 8019eb6:	d07b      	beq.n	8019fb0 <_scanf_float+0x224>
 8019eb8:	2b59      	cmp	r3, #89	@ 0x59
 8019eba:	d199      	bne.n	8019df0 <_scanf_float+0x64>
 8019ebc:	2d07      	cmp	r5, #7
 8019ebe:	d197      	bne.n	8019df0 <_scanf_float+0x64>
 8019ec0:	2508      	movs	r5, #8
 8019ec2:	e02c      	b.n	8019f1e <_scanf_float+0x192>
 8019ec4:	2b74      	cmp	r3, #116	@ 0x74
 8019ec6:	d073      	beq.n	8019fb0 <_scanf_float+0x224>
 8019ec8:	2b79      	cmp	r3, #121	@ 0x79
 8019eca:	e7f6      	b.n	8019eba <_scanf_float+0x12e>
 8019ecc:	6821      	ldr	r1, [r4, #0]
 8019ece:	05c8      	lsls	r0, r1, #23
 8019ed0:	d51b      	bpl.n	8019f0a <_scanf_float+0x17e>
 8019ed2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8019ed6:	6021      	str	r1, [r4, #0]
 8019ed8:	f109 0901 	add.w	r9, r9, #1
 8019edc:	f1bb 0f00 	cmp.w	fp, #0
 8019ee0:	d003      	beq.n	8019eea <_scanf_float+0x15e>
 8019ee2:	3201      	adds	r2, #1
 8019ee4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8019ee8:	60a2      	str	r2, [r4, #8]
 8019eea:	68a3      	ldr	r3, [r4, #8]
 8019eec:	3b01      	subs	r3, #1
 8019eee:	60a3      	str	r3, [r4, #8]
 8019ef0:	6923      	ldr	r3, [r4, #16]
 8019ef2:	3301      	adds	r3, #1
 8019ef4:	6123      	str	r3, [r4, #16]
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	3b01      	subs	r3, #1
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	607b      	str	r3, [r7, #4]
 8019efe:	f340 8087 	ble.w	801a010 <_scanf_float+0x284>
 8019f02:	683b      	ldr	r3, [r7, #0]
 8019f04:	3301      	adds	r3, #1
 8019f06:	603b      	str	r3, [r7, #0]
 8019f08:	e765      	b.n	8019dd6 <_scanf_float+0x4a>
 8019f0a:	eb1a 0105 	adds.w	r1, sl, r5
 8019f0e:	f47f af6f 	bne.w	8019df0 <_scanf_float+0x64>
 8019f12:	6822      	ldr	r2, [r4, #0]
 8019f14:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8019f18:	6022      	str	r2, [r4, #0]
 8019f1a:	460d      	mov	r5, r1
 8019f1c:	468a      	mov	sl, r1
 8019f1e:	f806 3b01 	strb.w	r3, [r6], #1
 8019f22:	e7e2      	b.n	8019eea <_scanf_float+0x15e>
 8019f24:	6822      	ldr	r2, [r4, #0]
 8019f26:	0610      	lsls	r0, r2, #24
 8019f28:	f57f af62 	bpl.w	8019df0 <_scanf_float+0x64>
 8019f2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8019f30:	6022      	str	r2, [r4, #0]
 8019f32:	e7f4      	b.n	8019f1e <_scanf_float+0x192>
 8019f34:	f1ba 0f00 	cmp.w	sl, #0
 8019f38:	d10e      	bne.n	8019f58 <_scanf_float+0x1cc>
 8019f3a:	f1b9 0f00 	cmp.w	r9, #0
 8019f3e:	d10e      	bne.n	8019f5e <_scanf_float+0x1d2>
 8019f40:	6822      	ldr	r2, [r4, #0]
 8019f42:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8019f46:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8019f4a:	d108      	bne.n	8019f5e <_scanf_float+0x1d2>
 8019f4c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019f50:	6022      	str	r2, [r4, #0]
 8019f52:	f04f 0a01 	mov.w	sl, #1
 8019f56:	e7e2      	b.n	8019f1e <_scanf_float+0x192>
 8019f58:	f1ba 0f02 	cmp.w	sl, #2
 8019f5c:	d055      	beq.n	801a00a <_scanf_float+0x27e>
 8019f5e:	2d01      	cmp	r5, #1
 8019f60:	d002      	beq.n	8019f68 <_scanf_float+0x1dc>
 8019f62:	2d04      	cmp	r5, #4
 8019f64:	f47f af44 	bne.w	8019df0 <_scanf_float+0x64>
 8019f68:	3501      	adds	r5, #1
 8019f6a:	b2ed      	uxtb	r5, r5
 8019f6c:	e7d7      	b.n	8019f1e <_scanf_float+0x192>
 8019f6e:	f1ba 0f01 	cmp.w	sl, #1
 8019f72:	f47f af3d 	bne.w	8019df0 <_scanf_float+0x64>
 8019f76:	f04f 0a02 	mov.w	sl, #2
 8019f7a:	e7d0      	b.n	8019f1e <_scanf_float+0x192>
 8019f7c:	b97d      	cbnz	r5, 8019f9e <_scanf_float+0x212>
 8019f7e:	f1b9 0f00 	cmp.w	r9, #0
 8019f82:	f47f af38 	bne.w	8019df6 <_scanf_float+0x6a>
 8019f86:	6822      	ldr	r2, [r4, #0]
 8019f88:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8019f8c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8019f90:	f040 8108 	bne.w	801a1a4 <_scanf_float+0x418>
 8019f94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019f98:	6022      	str	r2, [r4, #0]
 8019f9a:	2501      	movs	r5, #1
 8019f9c:	e7bf      	b.n	8019f1e <_scanf_float+0x192>
 8019f9e:	2d03      	cmp	r5, #3
 8019fa0:	d0e2      	beq.n	8019f68 <_scanf_float+0x1dc>
 8019fa2:	2d05      	cmp	r5, #5
 8019fa4:	e7de      	b.n	8019f64 <_scanf_float+0x1d8>
 8019fa6:	2d02      	cmp	r5, #2
 8019fa8:	f47f af22 	bne.w	8019df0 <_scanf_float+0x64>
 8019fac:	2503      	movs	r5, #3
 8019fae:	e7b6      	b.n	8019f1e <_scanf_float+0x192>
 8019fb0:	2d06      	cmp	r5, #6
 8019fb2:	f47f af1d 	bne.w	8019df0 <_scanf_float+0x64>
 8019fb6:	2507      	movs	r5, #7
 8019fb8:	e7b1      	b.n	8019f1e <_scanf_float+0x192>
 8019fba:	6822      	ldr	r2, [r4, #0]
 8019fbc:	0591      	lsls	r1, r2, #22
 8019fbe:	f57f af17 	bpl.w	8019df0 <_scanf_float+0x64>
 8019fc2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8019fc6:	6022      	str	r2, [r4, #0]
 8019fc8:	f8cd 9008 	str.w	r9, [sp, #8]
 8019fcc:	e7a7      	b.n	8019f1e <_scanf_float+0x192>
 8019fce:	6822      	ldr	r2, [r4, #0]
 8019fd0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8019fd4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8019fd8:	d006      	beq.n	8019fe8 <_scanf_float+0x25c>
 8019fda:	0550      	lsls	r0, r2, #21
 8019fdc:	f57f af08 	bpl.w	8019df0 <_scanf_float+0x64>
 8019fe0:	f1b9 0f00 	cmp.w	r9, #0
 8019fe4:	f000 80de 	beq.w	801a1a4 <_scanf_float+0x418>
 8019fe8:	0591      	lsls	r1, r2, #22
 8019fea:	bf58      	it	pl
 8019fec:	9902      	ldrpl	r1, [sp, #8]
 8019fee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019ff2:	bf58      	it	pl
 8019ff4:	eba9 0101 	subpl.w	r1, r9, r1
 8019ff8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8019ffc:	bf58      	it	pl
 8019ffe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a002:	6022      	str	r2, [r4, #0]
 801a004:	f04f 0900 	mov.w	r9, #0
 801a008:	e789      	b.n	8019f1e <_scanf_float+0x192>
 801a00a:	f04f 0a03 	mov.w	sl, #3
 801a00e:	e786      	b.n	8019f1e <_scanf_float+0x192>
 801a010:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801a014:	4639      	mov	r1, r7
 801a016:	4640      	mov	r0, r8
 801a018:	4798      	blx	r3
 801a01a:	2800      	cmp	r0, #0
 801a01c:	f43f aedb 	beq.w	8019dd6 <_scanf_float+0x4a>
 801a020:	e6e6      	b.n	8019df0 <_scanf_float+0x64>
 801a022:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a026:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a02a:	463a      	mov	r2, r7
 801a02c:	4640      	mov	r0, r8
 801a02e:	4798      	blx	r3
 801a030:	6923      	ldr	r3, [r4, #16]
 801a032:	3b01      	subs	r3, #1
 801a034:	6123      	str	r3, [r4, #16]
 801a036:	e6e8      	b.n	8019e0a <_scanf_float+0x7e>
 801a038:	1e6b      	subs	r3, r5, #1
 801a03a:	2b06      	cmp	r3, #6
 801a03c:	d824      	bhi.n	801a088 <_scanf_float+0x2fc>
 801a03e:	2d02      	cmp	r5, #2
 801a040:	d836      	bhi.n	801a0b0 <_scanf_float+0x324>
 801a042:	9b01      	ldr	r3, [sp, #4]
 801a044:	429e      	cmp	r6, r3
 801a046:	f67f aee4 	bls.w	8019e12 <_scanf_float+0x86>
 801a04a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a04e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a052:	463a      	mov	r2, r7
 801a054:	4640      	mov	r0, r8
 801a056:	4798      	blx	r3
 801a058:	6923      	ldr	r3, [r4, #16]
 801a05a:	3b01      	subs	r3, #1
 801a05c:	6123      	str	r3, [r4, #16]
 801a05e:	e7f0      	b.n	801a042 <_scanf_float+0x2b6>
 801a060:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a064:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801a068:	463a      	mov	r2, r7
 801a06a:	4640      	mov	r0, r8
 801a06c:	4798      	blx	r3
 801a06e:	6923      	ldr	r3, [r4, #16]
 801a070:	3b01      	subs	r3, #1
 801a072:	6123      	str	r3, [r4, #16]
 801a074:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801a078:	fa5f fa8a 	uxtb.w	sl, sl
 801a07c:	f1ba 0f02 	cmp.w	sl, #2
 801a080:	d1ee      	bne.n	801a060 <_scanf_float+0x2d4>
 801a082:	3d03      	subs	r5, #3
 801a084:	b2ed      	uxtb	r5, r5
 801a086:	1b76      	subs	r6, r6, r5
 801a088:	6823      	ldr	r3, [r4, #0]
 801a08a:	05da      	lsls	r2, r3, #23
 801a08c:	d530      	bpl.n	801a0f0 <_scanf_float+0x364>
 801a08e:	055b      	lsls	r3, r3, #21
 801a090:	d511      	bpl.n	801a0b6 <_scanf_float+0x32a>
 801a092:	9b01      	ldr	r3, [sp, #4]
 801a094:	429e      	cmp	r6, r3
 801a096:	f67f aebc 	bls.w	8019e12 <_scanf_float+0x86>
 801a09a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a09e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a0a2:	463a      	mov	r2, r7
 801a0a4:	4640      	mov	r0, r8
 801a0a6:	4798      	blx	r3
 801a0a8:	6923      	ldr	r3, [r4, #16]
 801a0aa:	3b01      	subs	r3, #1
 801a0ac:	6123      	str	r3, [r4, #16]
 801a0ae:	e7f0      	b.n	801a092 <_scanf_float+0x306>
 801a0b0:	46aa      	mov	sl, r5
 801a0b2:	46b3      	mov	fp, r6
 801a0b4:	e7de      	b.n	801a074 <_scanf_float+0x2e8>
 801a0b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a0ba:	6923      	ldr	r3, [r4, #16]
 801a0bc:	2965      	cmp	r1, #101	@ 0x65
 801a0be:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801a0c2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 801a0c6:	6123      	str	r3, [r4, #16]
 801a0c8:	d00c      	beq.n	801a0e4 <_scanf_float+0x358>
 801a0ca:	2945      	cmp	r1, #69	@ 0x45
 801a0cc:	d00a      	beq.n	801a0e4 <_scanf_float+0x358>
 801a0ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a0d2:	463a      	mov	r2, r7
 801a0d4:	4640      	mov	r0, r8
 801a0d6:	4798      	blx	r3
 801a0d8:	6923      	ldr	r3, [r4, #16]
 801a0da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a0de:	3b01      	subs	r3, #1
 801a0e0:	1eb5      	subs	r5, r6, #2
 801a0e2:	6123      	str	r3, [r4, #16]
 801a0e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a0e8:	463a      	mov	r2, r7
 801a0ea:	4640      	mov	r0, r8
 801a0ec:	4798      	blx	r3
 801a0ee:	462e      	mov	r6, r5
 801a0f0:	6822      	ldr	r2, [r4, #0]
 801a0f2:	f012 0210 	ands.w	r2, r2, #16
 801a0f6:	d001      	beq.n	801a0fc <_scanf_float+0x370>
 801a0f8:	2000      	movs	r0, #0
 801a0fa:	e68b      	b.n	8019e14 <_scanf_float+0x88>
 801a0fc:	7032      	strb	r2, [r6, #0]
 801a0fe:	6823      	ldr	r3, [r4, #0]
 801a100:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801a104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a108:	d11c      	bne.n	801a144 <_scanf_float+0x3b8>
 801a10a:	9b02      	ldr	r3, [sp, #8]
 801a10c:	454b      	cmp	r3, r9
 801a10e:	eba3 0209 	sub.w	r2, r3, r9
 801a112:	d123      	bne.n	801a15c <_scanf_float+0x3d0>
 801a114:	9901      	ldr	r1, [sp, #4]
 801a116:	2200      	movs	r2, #0
 801a118:	4640      	mov	r0, r8
 801a11a:	f002 fdb1 	bl	801cc80 <_strtod_r>
 801a11e:	9b03      	ldr	r3, [sp, #12]
 801a120:	6821      	ldr	r1, [r4, #0]
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	f011 0f02 	tst.w	r1, #2
 801a128:	ec57 6b10 	vmov	r6, r7, d0
 801a12c:	f103 0204 	add.w	r2, r3, #4
 801a130:	d01f      	beq.n	801a172 <_scanf_float+0x3e6>
 801a132:	9903      	ldr	r1, [sp, #12]
 801a134:	600a      	str	r2, [r1, #0]
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	e9c3 6700 	strd	r6, r7, [r3]
 801a13c:	68e3      	ldr	r3, [r4, #12]
 801a13e:	3301      	adds	r3, #1
 801a140:	60e3      	str	r3, [r4, #12]
 801a142:	e7d9      	b.n	801a0f8 <_scanf_float+0x36c>
 801a144:	9b04      	ldr	r3, [sp, #16]
 801a146:	2b00      	cmp	r3, #0
 801a148:	d0e4      	beq.n	801a114 <_scanf_float+0x388>
 801a14a:	9905      	ldr	r1, [sp, #20]
 801a14c:	230a      	movs	r3, #10
 801a14e:	3101      	adds	r1, #1
 801a150:	4640      	mov	r0, r8
 801a152:	f002 fe15 	bl	801cd80 <_strtol_r>
 801a156:	9b04      	ldr	r3, [sp, #16]
 801a158:	9e05      	ldr	r6, [sp, #20]
 801a15a:	1ac2      	subs	r2, r0, r3
 801a15c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801a160:	429e      	cmp	r6, r3
 801a162:	bf28      	it	cs
 801a164:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801a168:	4910      	ldr	r1, [pc, #64]	@ (801a1ac <_scanf_float+0x420>)
 801a16a:	4630      	mov	r0, r6
 801a16c:	f000 f988 	bl	801a480 <siprintf>
 801a170:	e7d0      	b.n	801a114 <_scanf_float+0x388>
 801a172:	f011 0f04 	tst.w	r1, #4
 801a176:	9903      	ldr	r1, [sp, #12]
 801a178:	600a      	str	r2, [r1, #0]
 801a17a:	d1dc      	bne.n	801a136 <_scanf_float+0x3aa>
 801a17c:	681d      	ldr	r5, [r3, #0]
 801a17e:	4632      	mov	r2, r6
 801a180:	463b      	mov	r3, r7
 801a182:	4630      	mov	r0, r6
 801a184:	4639      	mov	r1, r7
 801a186:	f7e6 fce9 	bl	8000b5c <__aeabi_dcmpun>
 801a18a:	b128      	cbz	r0, 801a198 <_scanf_float+0x40c>
 801a18c:	4808      	ldr	r0, [pc, #32]	@ (801a1b0 <_scanf_float+0x424>)
 801a18e:	f000 fbf3 	bl	801a978 <nanf>
 801a192:	ed85 0a00 	vstr	s0, [r5]
 801a196:	e7d1      	b.n	801a13c <_scanf_float+0x3b0>
 801a198:	4630      	mov	r0, r6
 801a19a:	4639      	mov	r1, r7
 801a19c:	f7e6 fd3c 	bl	8000c18 <__aeabi_d2f>
 801a1a0:	6028      	str	r0, [r5, #0]
 801a1a2:	e7cb      	b.n	801a13c <_scanf_float+0x3b0>
 801a1a4:	f04f 0900 	mov.w	r9, #0
 801a1a8:	e629      	b.n	8019dfe <_scanf_float+0x72>
 801a1aa:	bf00      	nop
 801a1ac:	0801e96c 	.word	0x0801e96c
 801a1b0:	0801e9ac 	.word	0x0801e9ac

0801a1b4 <std>:
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	b510      	push	{r4, lr}
 801a1b8:	4604      	mov	r4, r0
 801a1ba:	e9c0 3300 	strd	r3, r3, [r0]
 801a1be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a1c2:	6083      	str	r3, [r0, #8]
 801a1c4:	8181      	strh	r1, [r0, #12]
 801a1c6:	6643      	str	r3, [r0, #100]	@ 0x64
 801a1c8:	81c2      	strh	r2, [r0, #14]
 801a1ca:	6183      	str	r3, [r0, #24]
 801a1cc:	4619      	mov	r1, r3
 801a1ce:	2208      	movs	r2, #8
 801a1d0:	305c      	adds	r0, #92	@ 0x5c
 801a1d2:	f000 fa9f 	bl	801a714 <memset>
 801a1d6:	4b0d      	ldr	r3, [pc, #52]	@ (801a20c <std+0x58>)
 801a1d8:	6263      	str	r3, [r4, #36]	@ 0x24
 801a1da:	4b0d      	ldr	r3, [pc, #52]	@ (801a210 <std+0x5c>)
 801a1dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a1de:	4b0d      	ldr	r3, [pc, #52]	@ (801a214 <std+0x60>)
 801a1e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a1e2:	4b0d      	ldr	r3, [pc, #52]	@ (801a218 <std+0x64>)
 801a1e4:	6323      	str	r3, [r4, #48]	@ 0x30
 801a1e6:	4b0d      	ldr	r3, [pc, #52]	@ (801a21c <std+0x68>)
 801a1e8:	6224      	str	r4, [r4, #32]
 801a1ea:	429c      	cmp	r4, r3
 801a1ec:	d006      	beq.n	801a1fc <std+0x48>
 801a1ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a1f2:	4294      	cmp	r4, r2
 801a1f4:	d002      	beq.n	801a1fc <std+0x48>
 801a1f6:	33d0      	adds	r3, #208	@ 0xd0
 801a1f8:	429c      	cmp	r4, r3
 801a1fa:	d105      	bne.n	801a208 <std+0x54>
 801a1fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a204:	f000 bb9e 	b.w	801a944 <__retarget_lock_init_recursive>
 801a208:	bd10      	pop	{r4, pc}
 801a20a:	bf00      	nop
 801a20c:	0801a4c1 	.word	0x0801a4c1
 801a210:	0801a4e3 	.word	0x0801a4e3
 801a214:	0801a51b 	.word	0x0801a51b
 801a218:	0801a53f 	.word	0x0801a53f
 801a21c:	20009eac 	.word	0x20009eac

0801a220 <stdio_exit_handler>:
 801a220:	4a02      	ldr	r2, [pc, #8]	@ (801a22c <stdio_exit_handler+0xc>)
 801a222:	4903      	ldr	r1, [pc, #12]	@ (801a230 <stdio_exit_handler+0x10>)
 801a224:	4803      	ldr	r0, [pc, #12]	@ (801a234 <stdio_exit_handler+0x14>)
 801a226:	f000 b869 	b.w	801a2fc <_fwalk_sglue>
 801a22a:	bf00      	nop
 801a22c:	20000080 	.word	0x20000080
 801a230:	0801d3c1 	.word	0x0801d3c1
 801a234:	20000090 	.word	0x20000090

0801a238 <cleanup_stdio>:
 801a238:	6841      	ldr	r1, [r0, #4]
 801a23a:	4b0c      	ldr	r3, [pc, #48]	@ (801a26c <cleanup_stdio+0x34>)
 801a23c:	4299      	cmp	r1, r3
 801a23e:	b510      	push	{r4, lr}
 801a240:	4604      	mov	r4, r0
 801a242:	d001      	beq.n	801a248 <cleanup_stdio+0x10>
 801a244:	f003 f8bc 	bl	801d3c0 <_fflush_r>
 801a248:	68a1      	ldr	r1, [r4, #8]
 801a24a:	4b09      	ldr	r3, [pc, #36]	@ (801a270 <cleanup_stdio+0x38>)
 801a24c:	4299      	cmp	r1, r3
 801a24e:	d002      	beq.n	801a256 <cleanup_stdio+0x1e>
 801a250:	4620      	mov	r0, r4
 801a252:	f003 f8b5 	bl	801d3c0 <_fflush_r>
 801a256:	68e1      	ldr	r1, [r4, #12]
 801a258:	4b06      	ldr	r3, [pc, #24]	@ (801a274 <cleanup_stdio+0x3c>)
 801a25a:	4299      	cmp	r1, r3
 801a25c:	d004      	beq.n	801a268 <cleanup_stdio+0x30>
 801a25e:	4620      	mov	r0, r4
 801a260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a264:	f003 b8ac 	b.w	801d3c0 <_fflush_r>
 801a268:	bd10      	pop	{r4, pc}
 801a26a:	bf00      	nop
 801a26c:	20009eac 	.word	0x20009eac
 801a270:	20009f14 	.word	0x20009f14
 801a274:	20009f7c 	.word	0x20009f7c

0801a278 <global_stdio_init.part.0>:
 801a278:	b510      	push	{r4, lr}
 801a27a:	4b0b      	ldr	r3, [pc, #44]	@ (801a2a8 <global_stdio_init.part.0+0x30>)
 801a27c:	4c0b      	ldr	r4, [pc, #44]	@ (801a2ac <global_stdio_init.part.0+0x34>)
 801a27e:	4a0c      	ldr	r2, [pc, #48]	@ (801a2b0 <global_stdio_init.part.0+0x38>)
 801a280:	601a      	str	r2, [r3, #0]
 801a282:	4620      	mov	r0, r4
 801a284:	2200      	movs	r2, #0
 801a286:	2104      	movs	r1, #4
 801a288:	f7ff ff94 	bl	801a1b4 <std>
 801a28c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a290:	2201      	movs	r2, #1
 801a292:	2109      	movs	r1, #9
 801a294:	f7ff ff8e 	bl	801a1b4 <std>
 801a298:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a29c:	2202      	movs	r2, #2
 801a29e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2a2:	2112      	movs	r1, #18
 801a2a4:	f7ff bf86 	b.w	801a1b4 <std>
 801a2a8:	20009fe4 	.word	0x20009fe4
 801a2ac:	20009eac 	.word	0x20009eac
 801a2b0:	0801a221 	.word	0x0801a221

0801a2b4 <__sfp_lock_acquire>:
 801a2b4:	4801      	ldr	r0, [pc, #4]	@ (801a2bc <__sfp_lock_acquire+0x8>)
 801a2b6:	f000 bb46 	b.w	801a946 <__retarget_lock_acquire_recursive>
 801a2ba:	bf00      	nop
 801a2bc:	20009fee 	.word	0x20009fee

0801a2c0 <__sfp_lock_release>:
 801a2c0:	4801      	ldr	r0, [pc, #4]	@ (801a2c8 <__sfp_lock_release+0x8>)
 801a2c2:	f000 bb41 	b.w	801a948 <__retarget_lock_release_recursive>
 801a2c6:	bf00      	nop
 801a2c8:	20009fee 	.word	0x20009fee

0801a2cc <__sinit>:
 801a2cc:	b510      	push	{r4, lr}
 801a2ce:	4604      	mov	r4, r0
 801a2d0:	f7ff fff0 	bl	801a2b4 <__sfp_lock_acquire>
 801a2d4:	6a23      	ldr	r3, [r4, #32]
 801a2d6:	b11b      	cbz	r3, 801a2e0 <__sinit+0x14>
 801a2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2dc:	f7ff bff0 	b.w	801a2c0 <__sfp_lock_release>
 801a2e0:	4b04      	ldr	r3, [pc, #16]	@ (801a2f4 <__sinit+0x28>)
 801a2e2:	6223      	str	r3, [r4, #32]
 801a2e4:	4b04      	ldr	r3, [pc, #16]	@ (801a2f8 <__sinit+0x2c>)
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d1f5      	bne.n	801a2d8 <__sinit+0xc>
 801a2ec:	f7ff ffc4 	bl	801a278 <global_stdio_init.part.0>
 801a2f0:	e7f2      	b.n	801a2d8 <__sinit+0xc>
 801a2f2:	bf00      	nop
 801a2f4:	0801a239 	.word	0x0801a239
 801a2f8:	20009fe4 	.word	0x20009fe4

0801a2fc <_fwalk_sglue>:
 801a2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a300:	4607      	mov	r7, r0
 801a302:	4688      	mov	r8, r1
 801a304:	4614      	mov	r4, r2
 801a306:	2600      	movs	r6, #0
 801a308:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a30c:	f1b9 0901 	subs.w	r9, r9, #1
 801a310:	d505      	bpl.n	801a31e <_fwalk_sglue+0x22>
 801a312:	6824      	ldr	r4, [r4, #0]
 801a314:	2c00      	cmp	r4, #0
 801a316:	d1f7      	bne.n	801a308 <_fwalk_sglue+0xc>
 801a318:	4630      	mov	r0, r6
 801a31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a31e:	89ab      	ldrh	r3, [r5, #12]
 801a320:	2b01      	cmp	r3, #1
 801a322:	d907      	bls.n	801a334 <_fwalk_sglue+0x38>
 801a324:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a328:	3301      	adds	r3, #1
 801a32a:	d003      	beq.n	801a334 <_fwalk_sglue+0x38>
 801a32c:	4629      	mov	r1, r5
 801a32e:	4638      	mov	r0, r7
 801a330:	47c0      	blx	r8
 801a332:	4306      	orrs	r6, r0
 801a334:	3568      	adds	r5, #104	@ 0x68
 801a336:	e7e9      	b.n	801a30c <_fwalk_sglue+0x10>

0801a338 <iprintf>:
 801a338:	b40f      	push	{r0, r1, r2, r3}
 801a33a:	b507      	push	{r0, r1, r2, lr}
 801a33c:	4906      	ldr	r1, [pc, #24]	@ (801a358 <iprintf+0x20>)
 801a33e:	ab04      	add	r3, sp, #16
 801a340:	6808      	ldr	r0, [r1, #0]
 801a342:	f853 2b04 	ldr.w	r2, [r3], #4
 801a346:	6881      	ldr	r1, [r0, #8]
 801a348:	9301      	str	r3, [sp, #4]
 801a34a:	f002 fe9d 	bl	801d088 <_vfiprintf_r>
 801a34e:	b003      	add	sp, #12
 801a350:	f85d eb04 	ldr.w	lr, [sp], #4
 801a354:	b004      	add	sp, #16
 801a356:	4770      	bx	lr
 801a358:	2000008c 	.word	0x2000008c

0801a35c <_puts_r>:
 801a35c:	6a03      	ldr	r3, [r0, #32]
 801a35e:	b570      	push	{r4, r5, r6, lr}
 801a360:	6884      	ldr	r4, [r0, #8]
 801a362:	4605      	mov	r5, r0
 801a364:	460e      	mov	r6, r1
 801a366:	b90b      	cbnz	r3, 801a36c <_puts_r+0x10>
 801a368:	f7ff ffb0 	bl	801a2cc <__sinit>
 801a36c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a36e:	07db      	lsls	r3, r3, #31
 801a370:	d405      	bmi.n	801a37e <_puts_r+0x22>
 801a372:	89a3      	ldrh	r3, [r4, #12]
 801a374:	0598      	lsls	r0, r3, #22
 801a376:	d402      	bmi.n	801a37e <_puts_r+0x22>
 801a378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a37a:	f000 fae4 	bl	801a946 <__retarget_lock_acquire_recursive>
 801a37e:	89a3      	ldrh	r3, [r4, #12]
 801a380:	0719      	lsls	r1, r3, #28
 801a382:	d502      	bpl.n	801a38a <_puts_r+0x2e>
 801a384:	6923      	ldr	r3, [r4, #16]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d135      	bne.n	801a3f6 <_puts_r+0x9a>
 801a38a:	4621      	mov	r1, r4
 801a38c:	4628      	mov	r0, r5
 801a38e:	f000 f951 	bl	801a634 <__swsetup_r>
 801a392:	b380      	cbz	r0, 801a3f6 <_puts_r+0x9a>
 801a394:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801a398:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a39a:	07da      	lsls	r2, r3, #31
 801a39c:	d405      	bmi.n	801a3aa <_puts_r+0x4e>
 801a39e:	89a3      	ldrh	r3, [r4, #12]
 801a3a0:	059b      	lsls	r3, r3, #22
 801a3a2:	d402      	bmi.n	801a3aa <_puts_r+0x4e>
 801a3a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a3a6:	f000 facf 	bl	801a948 <__retarget_lock_release_recursive>
 801a3aa:	4628      	mov	r0, r5
 801a3ac:	bd70      	pop	{r4, r5, r6, pc}
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	da04      	bge.n	801a3bc <_puts_r+0x60>
 801a3b2:	69a2      	ldr	r2, [r4, #24]
 801a3b4:	429a      	cmp	r2, r3
 801a3b6:	dc17      	bgt.n	801a3e8 <_puts_r+0x8c>
 801a3b8:	290a      	cmp	r1, #10
 801a3ba:	d015      	beq.n	801a3e8 <_puts_r+0x8c>
 801a3bc:	6823      	ldr	r3, [r4, #0]
 801a3be:	1c5a      	adds	r2, r3, #1
 801a3c0:	6022      	str	r2, [r4, #0]
 801a3c2:	7019      	strb	r1, [r3, #0]
 801a3c4:	68a3      	ldr	r3, [r4, #8]
 801a3c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a3ca:	3b01      	subs	r3, #1
 801a3cc:	60a3      	str	r3, [r4, #8]
 801a3ce:	2900      	cmp	r1, #0
 801a3d0:	d1ed      	bne.n	801a3ae <_puts_r+0x52>
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	da11      	bge.n	801a3fa <_puts_r+0x9e>
 801a3d6:	4622      	mov	r2, r4
 801a3d8:	210a      	movs	r1, #10
 801a3da:	4628      	mov	r0, r5
 801a3dc:	f000 f8ec 	bl	801a5b8 <__swbuf_r>
 801a3e0:	3001      	adds	r0, #1
 801a3e2:	d0d7      	beq.n	801a394 <_puts_r+0x38>
 801a3e4:	250a      	movs	r5, #10
 801a3e6:	e7d7      	b.n	801a398 <_puts_r+0x3c>
 801a3e8:	4622      	mov	r2, r4
 801a3ea:	4628      	mov	r0, r5
 801a3ec:	f000 f8e4 	bl	801a5b8 <__swbuf_r>
 801a3f0:	3001      	adds	r0, #1
 801a3f2:	d1e7      	bne.n	801a3c4 <_puts_r+0x68>
 801a3f4:	e7ce      	b.n	801a394 <_puts_r+0x38>
 801a3f6:	3e01      	subs	r6, #1
 801a3f8:	e7e4      	b.n	801a3c4 <_puts_r+0x68>
 801a3fa:	6823      	ldr	r3, [r4, #0]
 801a3fc:	1c5a      	adds	r2, r3, #1
 801a3fe:	6022      	str	r2, [r4, #0]
 801a400:	220a      	movs	r2, #10
 801a402:	701a      	strb	r2, [r3, #0]
 801a404:	e7ee      	b.n	801a3e4 <_puts_r+0x88>
	...

0801a408 <puts>:
 801a408:	4b02      	ldr	r3, [pc, #8]	@ (801a414 <puts+0xc>)
 801a40a:	4601      	mov	r1, r0
 801a40c:	6818      	ldr	r0, [r3, #0]
 801a40e:	f7ff bfa5 	b.w	801a35c <_puts_r>
 801a412:	bf00      	nop
 801a414:	2000008c 	.word	0x2000008c

0801a418 <sniprintf>:
 801a418:	b40c      	push	{r2, r3}
 801a41a:	b530      	push	{r4, r5, lr}
 801a41c:	4b17      	ldr	r3, [pc, #92]	@ (801a47c <sniprintf+0x64>)
 801a41e:	1e0c      	subs	r4, r1, #0
 801a420:	681d      	ldr	r5, [r3, #0]
 801a422:	b09d      	sub	sp, #116	@ 0x74
 801a424:	da08      	bge.n	801a438 <sniprintf+0x20>
 801a426:	238b      	movs	r3, #139	@ 0x8b
 801a428:	602b      	str	r3, [r5, #0]
 801a42a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a42e:	b01d      	add	sp, #116	@ 0x74
 801a430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a434:	b002      	add	sp, #8
 801a436:	4770      	bx	lr
 801a438:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a43c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a440:	bf14      	ite	ne
 801a442:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801a446:	4623      	moveq	r3, r4
 801a448:	9304      	str	r3, [sp, #16]
 801a44a:	9307      	str	r3, [sp, #28]
 801a44c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a450:	9002      	str	r0, [sp, #8]
 801a452:	9006      	str	r0, [sp, #24]
 801a454:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a458:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a45a:	ab21      	add	r3, sp, #132	@ 0x84
 801a45c:	a902      	add	r1, sp, #8
 801a45e:	4628      	mov	r0, r5
 801a460:	9301      	str	r3, [sp, #4]
 801a462:	f002 fceb 	bl	801ce3c <_svfiprintf_r>
 801a466:	1c43      	adds	r3, r0, #1
 801a468:	bfbc      	itt	lt
 801a46a:	238b      	movlt	r3, #139	@ 0x8b
 801a46c:	602b      	strlt	r3, [r5, #0]
 801a46e:	2c00      	cmp	r4, #0
 801a470:	d0dd      	beq.n	801a42e <sniprintf+0x16>
 801a472:	9b02      	ldr	r3, [sp, #8]
 801a474:	2200      	movs	r2, #0
 801a476:	701a      	strb	r2, [r3, #0]
 801a478:	e7d9      	b.n	801a42e <sniprintf+0x16>
 801a47a:	bf00      	nop
 801a47c:	2000008c 	.word	0x2000008c

0801a480 <siprintf>:
 801a480:	b40e      	push	{r1, r2, r3}
 801a482:	b500      	push	{lr}
 801a484:	b09c      	sub	sp, #112	@ 0x70
 801a486:	ab1d      	add	r3, sp, #116	@ 0x74
 801a488:	9002      	str	r0, [sp, #8]
 801a48a:	9006      	str	r0, [sp, #24]
 801a48c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a490:	4809      	ldr	r0, [pc, #36]	@ (801a4b8 <siprintf+0x38>)
 801a492:	9107      	str	r1, [sp, #28]
 801a494:	9104      	str	r1, [sp, #16]
 801a496:	4909      	ldr	r1, [pc, #36]	@ (801a4bc <siprintf+0x3c>)
 801a498:	f853 2b04 	ldr.w	r2, [r3], #4
 801a49c:	9105      	str	r1, [sp, #20]
 801a49e:	6800      	ldr	r0, [r0, #0]
 801a4a0:	9301      	str	r3, [sp, #4]
 801a4a2:	a902      	add	r1, sp, #8
 801a4a4:	f002 fcca 	bl	801ce3c <_svfiprintf_r>
 801a4a8:	9b02      	ldr	r3, [sp, #8]
 801a4aa:	2200      	movs	r2, #0
 801a4ac:	701a      	strb	r2, [r3, #0]
 801a4ae:	b01c      	add	sp, #112	@ 0x70
 801a4b0:	f85d eb04 	ldr.w	lr, [sp], #4
 801a4b4:	b003      	add	sp, #12
 801a4b6:	4770      	bx	lr
 801a4b8:	2000008c 	.word	0x2000008c
 801a4bc:	ffff0208 	.word	0xffff0208

0801a4c0 <__sread>:
 801a4c0:	b510      	push	{r4, lr}
 801a4c2:	460c      	mov	r4, r1
 801a4c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4c8:	f000 f9de 	bl	801a888 <_read_r>
 801a4cc:	2800      	cmp	r0, #0
 801a4ce:	bfab      	itete	ge
 801a4d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a4d2:	89a3      	ldrhlt	r3, [r4, #12]
 801a4d4:	181b      	addge	r3, r3, r0
 801a4d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a4da:	bfac      	ite	ge
 801a4dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a4de:	81a3      	strhlt	r3, [r4, #12]
 801a4e0:	bd10      	pop	{r4, pc}

0801a4e2 <__swrite>:
 801a4e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4e6:	461f      	mov	r7, r3
 801a4e8:	898b      	ldrh	r3, [r1, #12]
 801a4ea:	05db      	lsls	r3, r3, #23
 801a4ec:	4605      	mov	r5, r0
 801a4ee:	460c      	mov	r4, r1
 801a4f0:	4616      	mov	r6, r2
 801a4f2:	d505      	bpl.n	801a500 <__swrite+0x1e>
 801a4f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4f8:	2302      	movs	r3, #2
 801a4fa:	2200      	movs	r2, #0
 801a4fc:	f000 f9b2 	bl	801a864 <_lseek_r>
 801a500:	89a3      	ldrh	r3, [r4, #12]
 801a502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a506:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a50a:	81a3      	strh	r3, [r4, #12]
 801a50c:	4632      	mov	r2, r6
 801a50e:	463b      	mov	r3, r7
 801a510:	4628      	mov	r0, r5
 801a512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a516:	f000 b9d9 	b.w	801a8cc <_write_r>

0801a51a <__sseek>:
 801a51a:	b510      	push	{r4, lr}
 801a51c:	460c      	mov	r4, r1
 801a51e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a522:	f000 f99f 	bl	801a864 <_lseek_r>
 801a526:	1c43      	adds	r3, r0, #1
 801a528:	89a3      	ldrh	r3, [r4, #12]
 801a52a:	bf15      	itete	ne
 801a52c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a52e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a532:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a536:	81a3      	strheq	r3, [r4, #12]
 801a538:	bf18      	it	ne
 801a53a:	81a3      	strhne	r3, [r4, #12]
 801a53c:	bd10      	pop	{r4, pc}

0801a53e <__sclose>:
 801a53e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a542:	f000 b929 	b.w	801a798 <_close_r>

0801a546 <_vsniprintf_r>:
 801a546:	b530      	push	{r4, r5, lr}
 801a548:	4614      	mov	r4, r2
 801a54a:	2c00      	cmp	r4, #0
 801a54c:	b09b      	sub	sp, #108	@ 0x6c
 801a54e:	4605      	mov	r5, r0
 801a550:	461a      	mov	r2, r3
 801a552:	da05      	bge.n	801a560 <_vsniprintf_r+0x1a>
 801a554:	238b      	movs	r3, #139	@ 0x8b
 801a556:	6003      	str	r3, [r0, #0]
 801a558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a55c:	b01b      	add	sp, #108	@ 0x6c
 801a55e:	bd30      	pop	{r4, r5, pc}
 801a560:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a564:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a568:	bf14      	ite	ne
 801a56a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801a56e:	4623      	moveq	r3, r4
 801a570:	9302      	str	r3, [sp, #8]
 801a572:	9305      	str	r3, [sp, #20]
 801a574:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a578:	9100      	str	r1, [sp, #0]
 801a57a:	9104      	str	r1, [sp, #16]
 801a57c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a580:	4669      	mov	r1, sp
 801a582:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a584:	f002 fc5a 	bl	801ce3c <_svfiprintf_r>
 801a588:	1c43      	adds	r3, r0, #1
 801a58a:	bfbc      	itt	lt
 801a58c:	238b      	movlt	r3, #139	@ 0x8b
 801a58e:	602b      	strlt	r3, [r5, #0]
 801a590:	2c00      	cmp	r4, #0
 801a592:	d0e3      	beq.n	801a55c <_vsniprintf_r+0x16>
 801a594:	9b00      	ldr	r3, [sp, #0]
 801a596:	2200      	movs	r2, #0
 801a598:	701a      	strb	r2, [r3, #0]
 801a59a:	e7df      	b.n	801a55c <_vsniprintf_r+0x16>

0801a59c <vsniprintf>:
 801a59c:	b507      	push	{r0, r1, r2, lr}
 801a59e:	9300      	str	r3, [sp, #0]
 801a5a0:	4613      	mov	r3, r2
 801a5a2:	460a      	mov	r2, r1
 801a5a4:	4601      	mov	r1, r0
 801a5a6:	4803      	ldr	r0, [pc, #12]	@ (801a5b4 <vsniprintf+0x18>)
 801a5a8:	6800      	ldr	r0, [r0, #0]
 801a5aa:	f7ff ffcc 	bl	801a546 <_vsniprintf_r>
 801a5ae:	b003      	add	sp, #12
 801a5b0:	f85d fb04 	ldr.w	pc, [sp], #4
 801a5b4:	2000008c 	.word	0x2000008c

0801a5b8 <__swbuf_r>:
 801a5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5ba:	460e      	mov	r6, r1
 801a5bc:	4614      	mov	r4, r2
 801a5be:	4605      	mov	r5, r0
 801a5c0:	b118      	cbz	r0, 801a5ca <__swbuf_r+0x12>
 801a5c2:	6a03      	ldr	r3, [r0, #32]
 801a5c4:	b90b      	cbnz	r3, 801a5ca <__swbuf_r+0x12>
 801a5c6:	f7ff fe81 	bl	801a2cc <__sinit>
 801a5ca:	69a3      	ldr	r3, [r4, #24]
 801a5cc:	60a3      	str	r3, [r4, #8]
 801a5ce:	89a3      	ldrh	r3, [r4, #12]
 801a5d0:	071a      	lsls	r2, r3, #28
 801a5d2:	d501      	bpl.n	801a5d8 <__swbuf_r+0x20>
 801a5d4:	6923      	ldr	r3, [r4, #16]
 801a5d6:	b943      	cbnz	r3, 801a5ea <__swbuf_r+0x32>
 801a5d8:	4621      	mov	r1, r4
 801a5da:	4628      	mov	r0, r5
 801a5dc:	f000 f82a 	bl	801a634 <__swsetup_r>
 801a5e0:	b118      	cbz	r0, 801a5ea <__swbuf_r+0x32>
 801a5e2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801a5e6:	4638      	mov	r0, r7
 801a5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5ea:	6823      	ldr	r3, [r4, #0]
 801a5ec:	6922      	ldr	r2, [r4, #16]
 801a5ee:	1a98      	subs	r0, r3, r2
 801a5f0:	6963      	ldr	r3, [r4, #20]
 801a5f2:	b2f6      	uxtb	r6, r6
 801a5f4:	4283      	cmp	r3, r0
 801a5f6:	4637      	mov	r7, r6
 801a5f8:	dc05      	bgt.n	801a606 <__swbuf_r+0x4e>
 801a5fa:	4621      	mov	r1, r4
 801a5fc:	4628      	mov	r0, r5
 801a5fe:	f002 fedf 	bl	801d3c0 <_fflush_r>
 801a602:	2800      	cmp	r0, #0
 801a604:	d1ed      	bne.n	801a5e2 <__swbuf_r+0x2a>
 801a606:	68a3      	ldr	r3, [r4, #8]
 801a608:	3b01      	subs	r3, #1
 801a60a:	60a3      	str	r3, [r4, #8]
 801a60c:	6823      	ldr	r3, [r4, #0]
 801a60e:	1c5a      	adds	r2, r3, #1
 801a610:	6022      	str	r2, [r4, #0]
 801a612:	701e      	strb	r6, [r3, #0]
 801a614:	6962      	ldr	r2, [r4, #20]
 801a616:	1c43      	adds	r3, r0, #1
 801a618:	429a      	cmp	r2, r3
 801a61a:	d004      	beq.n	801a626 <__swbuf_r+0x6e>
 801a61c:	89a3      	ldrh	r3, [r4, #12]
 801a61e:	07db      	lsls	r3, r3, #31
 801a620:	d5e1      	bpl.n	801a5e6 <__swbuf_r+0x2e>
 801a622:	2e0a      	cmp	r6, #10
 801a624:	d1df      	bne.n	801a5e6 <__swbuf_r+0x2e>
 801a626:	4621      	mov	r1, r4
 801a628:	4628      	mov	r0, r5
 801a62a:	f002 fec9 	bl	801d3c0 <_fflush_r>
 801a62e:	2800      	cmp	r0, #0
 801a630:	d0d9      	beq.n	801a5e6 <__swbuf_r+0x2e>
 801a632:	e7d6      	b.n	801a5e2 <__swbuf_r+0x2a>

0801a634 <__swsetup_r>:
 801a634:	b538      	push	{r3, r4, r5, lr}
 801a636:	4b29      	ldr	r3, [pc, #164]	@ (801a6dc <__swsetup_r+0xa8>)
 801a638:	4605      	mov	r5, r0
 801a63a:	6818      	ldr	r0, [r3, #0]
 801a63c:	460c      	mov	r4, r1
 801a63e:	b118      	cbz	r0, 801a648 <__swsetup_r+0x14>
 801a640:	6a03      	ldr	r3, [r0, #32]
 801a642:	b90b      	cbnz	r3, 801a648 <__swsetup_r+0x14>
 801a644:	f7ff fe42 	bl	801a2cc <__sinit>
 801a648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a64c:	0719      	lsls	r1, r3, #28
 801a64e:	d422      	bmi.n	801a696 <__swsetup_r+0x62>
 801a650:	06da      	lsls	r2, r3, #27
 801a652:	d407      	bmi.n	801a664 <__swsetup_r+0x30>
 801a654:	2209      	movs	r2, #9
 801a656:	602a      	str	r2, [r5, #0]
 801a658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a65c:	81a3      	strh	r3, [r4, #12]
 801a65e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a662:	e033      	b.n	801a6cc <__swsetup_r+0x98>
 801a664:	0758      	lsls	r0, r3, #29
 801a666:	d512      	bpl.n	801a68e <__swsetup_r+0x5a>
 801a668:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a66a:	b141      	cbz	r1, 801a67e <__swsetup_r+0x4a>
 801a66c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a670:	4299      	cmp	r1, r3
 801a672:	d002      	beq.n	801a67a <__swsetup_r+0x46>
 801a674:	4628      	mov	r0, r5
 801a676:	f000 fffb 	bl	801b670 <_free_r>
 801a67a:	2300      	movs	r3, #0
 801a67c:	6363      	str	r3, [r4, #52]	@ 0x34
 801a67e:	89a3      	ldrh	r3, [r4, #12]
 801a680:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a684:	81a3      	strh	r3, [r4, #12]
 801a686:	2300      	movs	r3, #0
 801a688:	6063      	str	r3, [r4, #4]
 801a68a:	6923      	ldr	r3, [r4, #16]
 801a68c:	6023      	str	r3, [r4, #0]
 801a68e:	89a3      	ldrh	r3, [r4, #12]
 801a690:	f043 0308 	orr.w	r3, r3, #8
 801a694:	81a3      	strh	r3, [r4, #12]
 801a696:	6923      	ldr	r3, [r4, #16]
 801a698:	b94b      	cbnz	r3, 801a6ae <__swsetup_r+0x7a>
 801a69a:	89a3      	ldrh	r3, [r4, #12]
 801a69c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a6a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a6a4:	d003      	beq.n	801a6ae <__swsetup_r+0x7a>
 801a6a6:	4621      	mov	r1, r4
 801a6a8:	4628      	mov	r0, r5
 801a6aa:	f002 fee9 	bl	801d480 <__smakebuf_r>
 801a6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a6b2:	f013 0201 	ands.w	r2, r3, #1
 801a6b6:	d00a      	beq.n	801a6ce <__swsetup_r+0x9a>
 801a6b8:	2200      	movs	r2, #0
 801a6ba:	60a2      	str	r2, [r4, #8]
 801a6bc:	6962      	ldr	r2, [r4, #20]
 801a6be:	4252      	negs	r2, r2
 801a6c0:	61a2      	str	r2, [r4, #24]
 801a6c2:	6922      	ldr	r2, [r4, #16]
 801a6c4:	b942      	cbnz	r2, 801a6d8 <__swsetup_r+0xa4>
 801a6c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a6ca:	d1c5      	bne.n	801a658 <__swsetup_r+0x24>
 801a6cc:	bd38      	pop	{r3, r4, r5, pc}
 801a6ce:	0799      	lsls	r1, r3, #30
 801a6d0:	bf58      	it	pl
 801a6d2:	6962      	ldrpl	r2, [r4, #20]
 801a6d4:	60a2      	str	r2, [r4, #8]
 801a6d6:	e7f4      	b.n	801a6c2 <__swsetup_r+0x8e>
 801a6d8:	2000      	movs	r0, #0
 801a6da:	e7f7      	b.n	801a6cc <__swsetup_r+0x98>
 801a6dc:	2000008c 	.word	0x2000008c

0801a6e0 <memmove>:
 801a6e0:	4288      	cmp	r0, r1
 801a6e2:	b510      	push	{r4, lr}
 801a6e4:	eb01 0402 	add.w	r4, r1, r2
 801a6e8:	d902      	bls.n	801a6f0 <memmove+0x10>
 801a6ea:	4284      	cmp	r4, r0
 801a6ec:	4623      	mov	r3, r4
 801a6ee:	d807      	bhi.n	801a700 <memmove+0x20>
 801a6f0:	1e43      	subs	r3, r0, #1
 801a6f2:	42a1      	cmp	r1, r4
 801a6f4:	d008      	beq.n	801a708 <memmove+0x28>
 801a6f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a6fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a6fe:	e7f8      	b.n	801a6f2 <memmove+0x12>
 801a700:	4402      	add	r2, r0
 801a702:	4601      	mov	r1, r0
 801a704:	428a      	cmp	r2, r1
 801a706:	d100      	bne.n	801a70a <memmove+0x2a>
 801a708:	bd10      	pop	{r4, pc}
 801a70a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a70e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a712:	e7f7      	b.n	801a704 <memmove+0x24>

0801a714 <memset>:
 801a714:	4402      	add	r2, r0
 801a716:	4603      	mov	r3, r0
 801a718:	4293      	cmp	r3, r2
 801a71a:	d100      	bne.n	801a71e <memset+0xa>
 801a71c:	4770      	bx	lr
 801a71e:	f803 1b01 	strb.w	r1, [r3], #1
 801a722:	e7f9      	b.n	801a718 <memset+0x4>

0801a724 <strchr>:
 801a724:	b2c9      	uxtb	r1, r1
 801a726:	4603      	mov	r3, r0
 801a728:	4618      	mov	r0, r3
 801a72a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a72e:	b112      	cbz	r2, 801a736 <strchr+0x12>
 801a730:	428a      	cmp	r2, r1
 801a732:	d1f9      	bne.n	801a728 <strchr+0x4>
 801a734:	4770      	bx	lr
 801a736:	2900      	cmp	r1, #0
 801a738:	bf18      	it	ne
 801a73a:	2000      	movne	r0, #0
 801a73c:	4770      	bx	lr

0801a73e <strncmp>:
 801a73e:	b510      	push	{r4, lr}
 801a740:	b16a      	cbz	r2, 801a75e <strncmp+0x20>
 801a742:	3901      	subs	r1, #1
 801a744:	1884      	adds	r4, r0, r2
 801a746:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a74a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a74e:	429a      	cmp	r2, r3
 801a750:	d103      	bne.n	801a75a <strncmp+0x1c>
 801a752:	42a0      	cmp	r0, r4
 801a754:	d001      	beq.n	801a75a <strncmp+0x1c>
 801a756:	2a00      	cmp	r2, #0
 801a758:	d1f5      	bne.n	801a746 <strncmp+0x8>
 801a75a:	1ad0      	subs	r0, r2, r3
 801a75c:	bd10      	pop	{r4, pc}
 801a75e:	4610      	mov	r0, r2
 801a760:	e7fc      	b.n	801a75c <strncmp+0x1e>

0801a762 <strstr>:
 801a762:	780a      	ldrb	r2, [r1, #0]
 801a764:	b570      	push	{r4, r5, r6, lr}
 801a766:	b96a      	cbnz	r2, 801a784 <strstr+0x22>
 801a768:	bd70      	pop	{r4, r5, r6, pc}
 801a76a:	429a      	cmp	r2, r3
 801a76c:	d109      	bne.n	801a782 <strstr+0x20>
 801a76e:	460c      	mov	r4, r1
 801a770:	4605      	mov	r5, r0
 801a772:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a776:	2b00      	cmp	r3, #0
 801a778:	d0f6      	beq.n	801a768 <strstr+0x6>
 801a77a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a77e:	429e      	cmp	r6, r3
 801a780:	d0f7      	beq.n	801a772 <strstr+0x10>
 801a782:	3001      	adds	r0, #1
 801a784:	7803      	ldrb	r3, [r0, #0]
 801a786:	2b00      	cmp	r3, #0
 801a788:	d1ef      	bne.n	801a76a <strstr+0x8>
 801a78a:	4618      	mov	r0, r3
 801a78c:	e7ec      	b.n	801a768 <strstr+0x6>
	...

0801a790 <_localeconv_r>:
 801a790:	4800      	ldr	r0, [pc, #0]	@ (801a794 <_localeconv_r+0x4>)
 801a792:	4770      	bx	lr
 801a794:	200001cc 	.word	0x200001cc

0801a798 <_close_r>:
 801a798:	b538      	push	{r3, r4, r5, lr}
 801a79a:	4d06      	ldr	r5, [pc, #24]	@ (801a7b4 <_close_r+0x1c>)
 801a79c:	2300      	movs	r3, #0
 801a79e:	4604      	mov	r4, r0
 801a7a0:	4608      	mov	r0, r1
 801a7a2:	602b      	str	r3, [r5, #0]
 801a7a4:	f7e9 fca6 	bl	80040f4 <_close>
 801a7a8:	1c43      	adds	r3, r0, #1
 801a7aa:	d102      	bne.n	801a7b2 <_close_r+0x1a>
 801a7ac:	682b      	ldr	r3, [r5, #0]
 801a7ae:	b103      	cbz	r3, 801a7b2 <_close_r+0x1a>
 801a7b0:	6023      	str	r3, [r4, #0]
 801a7b2:	bd38      	pop	{r3, r4, r5, pc}
 801a7b4:	20009fe8 	.word	0x20009fe8

0801a7b8 <_reclaim_reent>:
 801a7b8:	4b29      	ldr	r3, [pc, #164]	@ (801a860 <_reclaim_reent+0xa8>)
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	4283      	cmp	r3, r0
 801a7be:	b570      	push	{r4, r5, r6, lr}
 801a7c0:	4604      	mov	r4, r0
 801a7c2:	d04b      	beq.n	801a85c <_reclaim_reent+0xa4>
 801a7c4:	69c3      	ldr	r3, [r0, #28]
 801a7c6:	b1ab      	cbz	r3, 801a7f4 <_reclaim_reent+0x3c>
 801a7c8:	68db      	ldr	r3, [r3, #12]
 801a7ca:	b16b      	cbz	r3, 801a7e8 <_reclaim_reent+0x30>
 801a7cc:	2500      	movs	r5, #0
 801a7ce:	69e3      	ldr	r3, [r4, #28]
 801a7d0:	68db      	ldr	r3, [r3, #12]
 801a7d2:	5959      	ldr	r1, [r3, r5]
 801a7d4:	2900      	cmp	r1, #0
 801a7d6:	d13b      	bne.n	801a850 <_reclaim_reent+0x98>
 801a7d8:	3504      	adds	r5, #4
 801a7da:	2d80      	cmp	r5, #128	@ 0x80
 801a7dc:	d1f7      	bne.n	801a7ce <_reclaim_reent+0x16>
 801a7de:	69e3      	ldr	r3, [r4, #28]
 801a7e0:	4620      	mov	r0, r4
 801a7e2:	68d9      	ldr	r1, [r3, #12]
 801a7e4:	f000 ff44 	bl	801b670 <_free_r>
 801a7e8:	69e3      	ldr	r3, [r4, #28]
 801a7ea:	6819      	ldr	r1, [r3, #0]
 801a7ec:	b111      	cbz	r1, 801a7f4 <_reclaim_reent+0x3c>
 801a7ee:	4620      	mov	r0, r4
 801a7f0:	f000 ff3e 	bl	801b670 <_free_r>
 801a7f4:	6961      	ldr	r1, [r4, #20]
 801a7f6:	b111      	cbz	r1, 801a7fe <_reclaim_reent+0x46>
 801a7f8:	4620      	mov	r0, r4
 801a7fa:	f000 ff39 	bl	801b670 <_free_r>
 801a7fe:	69e1      	ldr	r1, [r4, #28]
 801a800:	b111      	cbz	r1, 801a808 <_reclaim_reent+0x50>
 801a802:	4620      	mov	r0, r4
 801a804:	f000 ff34 	bl	801b670 <_free_r>
 801a808:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a80a:	b111      	cbz	r1, 801a812 <_reclaim_reent+0x5a>
 801a80c:	4620      	mov	r0, r4
 801a80e:	f000 ff2f 	bl	801b670 <_free_r>
 801a812:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a814:	b111      	cbz	r1, 801a81c <_reclaim_reent+0x64>
 801a816:	4620      	mov	r0, r4
 801a818:	f000 ff2a 	bl	801b670 <_free_r>
 801a81c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801a81e:	b111      	cbz	r1, 801a826 <_reclaim_reent+0x6e>
 801a820:	4620      	mov	r0, r4
 801a822:	f000 ff25 	bl	801b670 <_free_r>
 801a826:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801a828:	b111      	cbz	r1, 801a830 <_reclaim_reent+0x78>
 801a82a:	4620      	mov	r0, r4
 801a82c:	f000 ff20 	bl	801b670 <_free_r>
 801a830:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801a832:	b111      	cbz	r1, 801a83a <_reclaim_reent+0x82>
 801a834:	4620      	mov	r0, r4
 801a836:	f000 ff1b 	bl	801b670 <_free_r>
 801a83a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801a83c:	b111      	cbz	r1, 801a844 <_reclaim_reent+0x8c>
 801a83e:	4620      	mov	r0, r4
 801a840:	f000 ff16 	bl	801b670 <_free_r>
 801a844:	6a23      	ldr	r3, [r4, #32]
 801a846:	b14b      	cbz	r3, 801a85c <_reclaim_reent+0xa4>
 801a848:	4620      	mov	r0, r4
 801a84a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a84e:	4718      	bx	r3
 801a850:	680e      	ldr	r6, [r1, #0]
 801a852:	4620      	mov	r0, r4
 801a854:	f000 ff0c 	bl	801b670 <_free_r>
 801a858:	4631      	mov	r1, r6
 801a85a:	e7bb      	b.n	801a7d4 <_reclaim_reent+0x1c>
 801a85c:	bd70      	pop	{r4, r5, r6, pc}
 801a85e:	bf00      	nop
 801a860:	2000008c 	.word	0x2000008c

0801a864 <_lseek_r>:
 801a864:	b538      	push	{r3, r4, r5, lr}
 801a866:	4d07      	ldr	r5, [pc, #28]	@ (801a884 <_lseek_r+0x20>)
 801a868:	4604      	mov	r4, r0
 801a86a:	4608      	mov	r0, r1
 801a86c:	4611      	mov	r1, r2
 801a86e:	2200      	movs	r2, #0
 801a870:	602a      	str	r2, [r5, #0]
 801a872:	461a      	mov	r2, r3
 801a874:	f7e9 fc65 	bl	8004142 <_lseek>
 801a878:	1c43      	adds	r3, r0, #1
 801a87a:	d102      	bne.n	801a882 <_lseek_r+0x1e>
 801a87c:	682b      	ldr	r3, [r5, #0]
 801a87e:	b103      	cbz	r3, 801a882 <_lseek_r+0x1e>
 801a880:	6023      	str	r3, [r4, #0]
 801a882:	bd38      	pop	{r3, r4, r5, pc}
 801a884:	20009fe8 	.word	0x20009fe8

0801a888 <_read_r>:
 801a888:	b538      	push	{r3, r4, r5, lr}
 801a88a:	4d07      	ldr	r5, [pc, #28]	@ (801a8a8 <_read_r+0x20>)
 801a88c:	4604      	mov	r4, r0
 801a88e:	4608      	mov	r0, r1
 801a890:	4611      	mov	r1, r2
 801a892:	2200      	movs	r2, #0
 801a894:	602a      	str	r2, [r5, #0]
 801a896:	461a      	mov	r2, r3
 801a898:	f7e9 fbf3 	bl	8004082 <_read>
 801a89c:	1c43      	adds	r3, r0, #1
 801a89e:	d102      	bne.n	801a8a6 <_read_r+0x1e>
 801a8a0:	682b      	ldr	r3, [r5, #0]
 801a8a2:	b103      	cbz	r3, 801a8a6 <_read_r+0x1e>
 801a8a4:	6023      	str	r3, [r4, #0]
 801a8a6:	bd38      	pop	{r3, r4, r5, pc}
 801a8a8:	20009fe8 	.word	0x20009fe8

0801a8ac <_sbrk_r>:
 801a8ac:	b538      	push	{r3, r4, r5, lr}
 801a8ae:	4d06      	ldr	r5, [pc, #24]	@ (801a8c8 <_sbrk_r+0x1c>)
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	4604      	mov	r4, r0
 801a8b4:	4608      	mov	r0, r1
 801a8b6:	602b      	str	r3, [r5, #0]
 801a8b8:	f7e9 fc50 	bl	800415c <_sbrk>
 801a8bc:	1c43      	adds	r3, r0, #1
 801a8be:	d102      	bne.n	801a8c6 <_sbrk_r+0x1a>
 801a8c0:	682b      	ldr	r3, [r5, #0]
 801a8c2:	b103      	cbz	r3, 801a8c6 <_sbrk_r+0x1a>
 801a8c4:	6023      	str	r3, [r4, #0]
 801a8c6:	bd38      	pop	{r3, r4, r5, pc}
 801a8c8:	20009fe8 	.word	0x20009fe8

0801a8cc <_write_r>:
 801a8cc:	b538      	push	{r3, r4, r5, lr}
 801a8ce:	4d07      	ldr	r5, [pc, #28]	@ (801a8ec <_write_r+0x20>)
 801a8d0:	4604      	mov	r4, r0
 801a8d2:	4608      	mov	r0, r1
 801a8d4:	4611      	mov	r1, r2
 801a8d6:	2200      	movs	r2, #0
 801a8d8:	602a      	str	r2, [r5, #0]
 801a8da:	461a      	mov	r2, r3
 801a8dc:	f7e9 fbee 	bl	80040bc <_write>
 801a8e0:	1c43      	adds	r3, r0, #1
 801a8e2:	d102      	bne.n	801a8ea <_write_r+0x1e>
 801a8e4:	682b      	ldr	r3, [r5, #0]
 801a8e6:	b103      	cbz	r3, 801a8ea <_write_r+0x1e>
 801a8e8:	6023      	str	r3, [r4, #0]
 801a8ea:	bd38      	pop	{r3, r4, r5, pc}
 801a8ec:	20009fe8 	.word	0x20009fe8

0801a8f0 <__errno>:
 801a8f0:	4b01      	ldr	r3, [pc, #4]	@ (801a8f8 <__errno+0x8>)
 801a8f2:	6818      	ldr	r0, [r3, #0]
 801a8f4:	4770      	bx	lr
 801a8f6:	bf00      	nop
 801a8f8:	2000008c 	.word	0x2000008c

0801a8fc <__libc_init_array>:
 801a8fc:	b570      	push	{r4, r5, r6, lr}
 801a8fe:	4d0d      	ldr	r5, [pc, #52]	@ (801a934 <__libc_init_array+0x38>)
 801a900:	4c0d      	ldr	r4, [pc, #52]	@ (801a938 <__libc_init_array+0x3c>)
 801a902:	1b64      	subs	r4, r4, r5
 801a904:	10a4      	asrs	r4, r4, #2
 801a906:	2600      	movs	r6, #0
 801a908:	42a6      	cmp	r6, r4
 801a90a:	d109      	bne.n	801a920 <__libc_init_array+0x24>
 801a90c:	4d0b      	ldr	r5, [pc, #44]	@ (801a93c <__libc_init_array+0x40>)
 801a90e:	4c0c      	ldr	r4, [pc, #48]	@ (801a940 <__libc_init_array+0x44>)
 801a910:	f003 f9c0 	bl	801dc94 <_init>
 801a914:	1b64      	subs	r4, r4, r5
 801a916:	10a4      	asrs	r4, r4, #2
 801a918:	2600      	movs	r6, #0
 801a91a:	42a6      	cmp	r6, r4
 801a91c:	d105      	bne.n	801a92a <__libc_init_array+0x2e>
 801a91e:	bd70      	pop	{r4, r5, r6, pc}
 801a920:	f855 3b04 	ldr.w	r3, [r5], #4
 801a924:	4798      	blx	r3
 801a926:	3601      	adds	r6, #1
 801a928:	e7ee      	b.n	801a908 <__libc_init_array+0xc>
 801a92a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a92e:	4798      	blx	r3
 801a930:	3601      	adds	r6, #1
 801a932:	e7f2      	b.n	801a91a <__libc_init_array+0x1e>
 801a934:	0801ec54 	.word	0x0801ec54
 801a938:	0801ec54 	.word	0x0801ec54
 801a93c:	0801ec54 	.word	0x0801ec54
 801a940:	0801ec58 	.word	0x0801ec58

0801a944 <__retarget_lock_init_recursive>:
 801a944:	4770      	bx	lr

0801a946 <__retarget_lock_acquire_recursive>:
 801a946:	4770      	bx	lr

0801a948 <__retarget_lock_release_recursive>:
 801a948:	4770      	bx	lr

0801a94a <strcpy>:
 801a94a:	4603      	mov	r3, r0
 801a94c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a950:	f803 2b01 	strb.w	r2, [r3], #1
 801a954:	2a00      	cmp	r2, #0
 801a956:	d1f9      	bne.n	801a94c <strcpy+0x2>
 801a958:	4770      	bx	lr

0801a95a <memcpy>:
 801a95a:	440a      	add	r2, r1
 801a95c:	4291      	cmp	r1, r2
 801a95e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801a962:	d100      	bne.n	801a966 <memcpy+0xc>
 801a964:	4770      	bx	lr
 801a966:	b510      	push	{r4, lr}
 801a968:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a96c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a970:	4291      	cmp	r1, r2
 801a972:	d1f9      	bne.n	801a968 <memcpy+0xe>
 801a974:	bd10      	pop	{r4, pc}
	...

0801a978 <nanf>:
 801a978:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a980 <nanf+0x8>
 801a97c:	4770      	bx	lr
 801a97e:	bf00      	nop
 801a980:	7fc00000 	.word	0x7fc00000

0801a984 <__assert_func>:
 801a984:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a986:	4614      	mov	r4, r2
 801a988:	461a      	mov	r2, r3
 801a98a:	4b09      	ldr	r3, [pc, #36]	@ (801a9b0 <__assert_func+0x2c>)
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	4605      	mov	r5, r0
 801a990:	68d8      	ldr	r0, [r3, #12]
 801a992:	b954      	cbnz	r4, 801a9aa <__assert_func+0x26>
 801a994:	4b07      	ldr	r3, [pc, #28]	@ (801a9b4 <__assert_func+0x30>)
 801a996:	461c      	mov	r4, r3
 801a998:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a99c:	9100      	str	r1, [sp, #0]
 801a99e:	462b      	mov	r3, r5
 801a9a0:	4905      	ldr	r1, [pc, #20]	@ (801a9b8 <__assert_func+0x34>)
 801a9a2:	f002 fd35 	bl	801d410 <fiprintf>
 801a9a6:	f002 fdd3 	bl	801d550 <abort>
 801a9aa:	4b04      	ldr	r3, [pc, #16]	@ (801a9bc <__assert_func+0x38>)
 801a9ac:	e7f4      	b.n	801a998 <__assert_func+0x14>
 801a9ae:	bf00      	nop
 801a9b0:	2000008c 	.word	0x2000008c
 801a9b4:	0801e9ac 	.word	0x0801e9ac
 801a9b8:	0801e97e 	.word	0x0801e97e
 801a9bc:	0801e971 	.word	0x0801e971

0801a9c0 <quorem>:
 801a9c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9c4:	6903      	ldr	r3, [r0, #16]
 801a9c6:	690c      	ldr	r4, [r1, #16]
 801a9c8:	42a3      	cmp	r3, r4
 801a9ca:	4607      	mov	r7, r0
 801a9cc:	db7e      	blt.n	801aacc <quorem+0x10c>
 801a9ce:	3c01      	subs	r4, #1
 801a9d0:	f101 0814 	add.w	r8, r1, #20
 801a9d4:	00a3      	lsls	r3, r4, #2
 801a9d6:	f100 0514 	add.w	r5, r0, #20
 801a9da:	9300      	str	r3, [sp, #0]
 801a9dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a9e0:	9301      	str	r3, [sp, #4]
 801a9e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a9e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a9ea:	3301      	adds	r3, #1
 801a9ec:	429a      	cmp	r2, r3
 801a9ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a9f2:	fbb2 f6f3 	udiv	r6, r2, r3
 801a9f6:	d32e      	bcc.n	801aa56 <quorem+0x96>
 801a9f8:	f04f 0a00 	mov.w	sl, #0
 801a9fc:	46c4      	mov	ip, r8
 801a9fe:	46ae      	mov	lr, r5
 801aa00:	46d3      	mov	fp, sl
 801aa02:	f85c 3b04 	ldr.w	r3, [ip], #4
 801aa06:	b298      	uxth	r0, r3
 801aa08:	fb06 a000 	mla	r0, r6, r0, sl
 801aa0c:	0c02      	lsrs	r2, r0, #16
 801aa0e:	0c1b      	lsrs	r3, r3, #16
 801aa10:	fb06 2303 	mla	r3, r6, r3, r2
 801aa14:	f8de 2000 	ldr.w	r2, [lr]
 801aa18:	b280      	uxth	r0, r0
 801aa1a:	b292      	uxth	r2, r2
 801aa1c:	1a12      	subs	r2, r2, r0
 801aa1e:	445a      	add	r2, fp
 801aa20:	f8de 0000 	ldr.w	r0, [lr]
 801aa24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801aa28:	b29b      	uxth	r3, r3
 801aa2a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801aa2e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801aa32:	b292      	uxth	r2, r2
 801aa34:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801aa38:	45e1      	cmp	r9, ip
 801aa3a:	f84e 2b04 	str.w	r2, [lr], #4
 801aa3e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801aa42:	d2de      	bcs.n	801aa02 <quorem+0x42>
 801aa44:	9b00      	ldr	r3, [sp, #0]
 801aa46:	58eb      	ldr	r3, [r5, r3]
 801aa48:	b92b      	cbnz	r3, 801aa56 <quorem+0x96>
 801aa4a:	9b01      	ldr	r3, [sp, #4]
 801aa4c:	3b04      	subs	r3, #4
 801aa4e:	429d      	cmp	r5, r3
 801aa50:	461a      	mov	r2, r3
 801aa52:	d32f      	bcc.n	801aab4 <quorem+0xf4>
 801aa54:	613c      	str	r4, [r7, #16]
 801aa56:	4638      	mov	r0, r7
 801aa58:	f001 f918 	bl	801bc8c <__mcmp>
 801aa5c:	2800      	cmp	r0, #0
 801aa5e:	db25      	blt.n	801aaac <quorem+0xec>
 801aa60:	4629      	mov	r1, r5
 801aa62:	2000      	movs	r0, #0
 801aa64:	f858 2b04 	ldr.w	r2, [r8], #4
 801aa68:	f8d1 c000 	ldr.w	ip, [r1]
 801aa6c:	fa1f fe82 	uxth.w	lr, r2
 801aa70:	fa1f f38c 	uxth.w	r3, ip
 801aa74:	eba3 030e 	sub.w	r3, r3, lr
 801aa78:	4403      	add	r3, r0
 801aa7a:	0c12      	lsrs	r2, r2, #16
 801aa7c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801aa80:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801aa84:	b29b      	uxth	r3, r3
 801aa86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801aa8a:	45c1      	cmp	r9, r8
 801aa8c:	f841 3b04 	str.w	r3, [r1], #4
 801aa90:	ea4f 4022 	mov.w	r0, r2, asr #16
 801aa94:	d2e6      	bcs.n	801aa64 <quorem+0xa4>
 801aa96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801aa9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801aa9e:	b922      	cbnz	r2, 801aaaa <quorem+0xea>
 801aaa0:	3b04      	subs	r3, #4
 801aaa2:	429d      	cmp	r5, r3
 801aaa4:	461a      	mov	r2, r3
 801aaa6:	d30b      	bcc.n	801aac0 <quorem+0x100>
 801aaa8:	613c      	str	r4, [r7, #16]
 801aaaa:	3601      	adds	r6, #1
 801aaac:	4630      	mov	r0, r6
 801aaae:	b003      	add	sp, #12
 801aab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aab4:	6812      	ldr	r2, [r2, #0]
 801aab6:	3b04      	subs	r3, #4
 801aab8:	2a00      	cmp	r2, #0
 801aaba:	d1cb      	bne.n	801aa54 <quorem+0x94>
 801aabc:	3c01      	subs	r4, #1
 801aabe:	e7c6      	b.n	801aa4e <quorem+0x8e>
 801aac0:	6812      	ldr	r2, [r2, #0]
 801aac2:	3b04      	subs	r3, #4
 801aac4:	2a00      	cmp	r2, #0
 801aac6:	d1ef      	bne.n	801aaa8 <quorem+0xe8>
 801aac8:	3c01      	subs	r4, #1
 801aaca:	e7ea      	b.n	801aaa2 <quorem+0xe2>
 801aacc:	2000      	movs	r0, #0
 801aace:	e7ee      	b.n	801aaae <quorem+0xee>

0801aad0 <_dtoa_r>:
 801aad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aad4:	69c7      	ldr	r7, [r0, #28]
 801aad6:	b099      	sub	sp, #100	@ 0x64
 801aad8:	ed8d 0b02 	vstr	d0, [sp, #8]
 801aadc:	ec55 4b10 	vmov	r4, r5, d0
 801aae0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801aae2:	9109      	str	r1, [sp, #36]	@ 0x24
 801aae4:	4683      	mov	fp, r0
 801aae6:	920e      	str	r2, [sp, #56]	@ 0x38
 801aae8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801aaea:	b97f      	cbnz	r7, 801ab0c <_dtoa_r+0x3c>
 801aaec:	2010      	movs	r0, #16
 801aaee:	f7fe fb1d 	bl	801912c <malloc>
 801aaf2:	4602      	mov	r2, r0
 801aaf4:	f8cb 001c 	str.w	r0, [fp, #28]
 801aaf8:	b920      	cbnz	r0, 801ab04 <_dtoa_r+0x34>
 801aafa:	4ba7      	ldr	r3, [pc, #668]	@ (801ad98 <_dtoa_r+0x2c8>)
 801aafc:	21ef      	movs	r1, #239	@ 0xef
 801aafe:	48a7      	ldr	r0, [pc, #668]	@ (801ad9c <_dtoa_r+0x2cc>)
 801ab00:	f7ff ff40 	bl	801a984 <__assert_func>
 801ab04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801ab08:	6007      	str	r7, [r0, #0]
 801ab0a:	60c7      	str	r7, [r0, #12]
 801ab0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ab10:	6819      	ldr	r1, [r3, #0]
 801ab12:	b159      	cbz	r1, 801ab2c <_dtoa_r+0x5c>
 801ab14:	685a      	ldr	r2, [r3, #4]
 801ab16:	604a      	str	r2, [r1, #4]
 801ab18:	2301      	movs	r3, #1
 801ab1a:	4093      	lsls	r3, r2
 801ab1c:	608b      	str	r3, [r1, #8]
 801ab1e:	4658      	mov	r0, fp
 801ab20:	f000 fe30 	bl	801b784 <_Bfree>
 801ab24:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ab28:	2200      	movs	r2, #0
 801ab2a:	601a      	str	r2, [r3, #0]
 801ab2c:	1e2b      	subs	r3, r5, #0
 801ab2e:	bfb9      	ittee	lt
 801ab30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801ab34:	9303      	strlt	r3, [sp, #12]
 801ab36:	2300      	movge	r3, #0
 801ab38:	6033      	strge	r3, [r6, #0]
 801ab3a:	9f03      	ldr	r7, [sp, #12]
 801ab3c:	4b98      	ldr	r3, [pc, #608]	@ (801ada0 <_dtoa_r+0x2d0>)
 801ab3e:	bfbc      	itt	lt
 801ab40:	2201      	movlt	r2, #1
 801ab42:	6032      	strlt	r2, [r6, #0]
 801ab44:	43bb      	bics	r3, r7
 801ab46:	d112      	bne.n	801ab6e <_dtoa_r+0x9e>
 801ab48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ab4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801ab4e:	6013      	str	r3, [r2, #0]
 801ab50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ab54:	4323      	orrs	r3, r4
 801ab56:	f000 854d 	beq.w	801b5f4 <_dtoa_r+0xb24>
 801ab5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ab5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801adb4 <_dtoa_r+0x2e4>
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	f000 854f 	beq.w	801b604 <_dtoa_r+0xb34>
 801ab66:	f10a 0303 	add.w	r3, sl, #3
 801ab6a:	f000 bd49 	b.w	801b600 <_dtoa_r+0xb30>
 801ab6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ab72:	2200      	movs	r2, #0
 801ab74:	ec51 0b17 	vmov	r0, r1, d7
 801ab78:	2300      	movs	r3, #0
 801ab7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801ab7e:	f7e5 ffbb 	bl	8000af8 <__aeabi_dcmpeq>
 801ab82:	4680      	mov	r8, r0
 801ab84:	b158      	cbz	r0, 801ab9e <_dtoa_r+0xce>
 801ab86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ab88:	2301      	movs	r3, #1
 801ab8a:	6013      	str	r3, [r2, #0]
 801ab8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ab8e:	b113      	cbz	r3, 801ab96 <_dtoa_r+0xc6>
 801ab90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ab92:	4b84      	ldr	r3, [pc, #528]	@ (801ada4 <_dtoa_r+0x2d4>)
 801ab94:	6013      	str	r3, [r2, #0]
 801ab96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801adb8 <_dtoa_r+0x2e8>
 801ab9a:	f000 bd33 	b.w	801b604 <_dtoa_r+0xb34>
 801ab9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801aba2:	aa16      	add	r2, sp, #88	@ 0x58
 801aba4:	a917      	add	r1, sp, #92	@ 0x5c
 801aba6:	4658      	mov	r0, fp
 801aba8:	f001 f990 	bl	801becc <__d2b>
 801abac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801abb0:	4681      	mov	r9, r0
 801abb2:	2e00      	cmp	r6, #0
 801abb4:	d077      	beq.n	801aca6 <_dtoa_r+0x1d6>
 801abb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801abb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801abbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801abc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801abc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801abc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801abcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801abd0:	4619      	mov	r1, r3
 801abd2:	2200      	movs	r2, #0
 801abd4:	4b74      	ldr	r3, [pc, #464]	@ (801ada8 <_dtoa_r+0x2d8>)
 801abd6:	f7e5 fb6f 	bl	80002b8 <__aeabi_dsub>
 801abda:	a369      	add	r3, pc, #420	@ (adr r3, 801ad80 <_dtoa_r+0x2b0>)
 801abdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abe0:	f7e5 fd22 	bl	8000628 <__aeabi_dmul>
 801abe4:	a368      	add	r3, pc, #416	@ (adr r3, 801ad88 <_dtoa_r+0x2b8>)
 801abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abea:	f7e5 fb67 	bl	80002bc <__adddf3>
 801abee:	4604      	mov	r4, r0
 801abf0:	4630      	mov	r0, r6
 801abf2:	460d      	mov	r5, r1
 801abf4:	f7e5 fcae 	bl	8000554 <__aeabi_i2d>
 801abf8:	a365      	add	r3, pc, #404	@ (adr r3, 801ad90 <_dtoa_r+0x2c0>)
 801abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abfe:	f7e5 fd13 	bl	8000628 <__aeabi_dmul>
 801ac02:	4602      	mov	r2, r0
 801ac04:	460b      	mov	r3, r1
 801ac06:	4620      	mov	r0, r4
 801ac08:	4629      	mov	r1, r5
 801ac0a:	f7e5 fb57 	bl	80002bc <__adddf3>
 801ac0e:	4604      	mov	r4, r0
 801ac10:	460d      	mov	r5, r1
 801ac12:	f7e5 ffb9 	bl	8000b88 <__aeabi_d2iz>
 801ac16:	2200      	movs	r2, #0
 801ac18:	4607      	mov	r7, r0
 801ac1a:	2300      	movs	r3, #0
 801ac1c:	4620      	mov	r0, r4
 801ac1e:	4629      	mov	r1, r5
 801ac20:	f7e5 ff74 	bl	8000b0c <__aeabi_dcmplt>
 801ac24:	b140      	cbz	r0, 801ac38 <_dtoa_r+0x168>
 801ac26:	4638      	mov	r0, r7
 801ac28:	f7e5 fc94 	bl	8000554 <__aeabi_i2d>
 801ac2c:	4622      	mov	r2, r4
 801ac2e:	462b      	mov	r3, r5
 801ac30:	f7e5 ff62 	bl	8000af8 <__aeabi_dcmpeq>
 801ac34:	b900      	cbnz	r0, 801ac38 <_dtoa_r+0x168>
 801ac36:	3f01      	subs	r7, #1
 801ac38:	2f16      	cmp	r7, #22
 801ac3a:	d851      	bhi.n	801ace0 <_dtoa_r+0x210>
 801ac3c:	4b5b      	ldr	r3, [pc, #364]	@ (801adac <_dtoa_r+0x2dc>)
 801ac3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ac42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ac4a:	f7e5 ff5f 	bl	8000b0c <__aeabi_dcmplt>
 801ac4e:	2800      	cmp	r0, #0
 801ac50:	d048      	beq.n	801ace4 <_dtoa_r+0x214>
 801ac52:	3f01      	subs	r7, #1
 801ac54:	2300      	movs	r3, #0
 801ac56:	9312      	str	r3, [sp, #72]	@ 0x48
 801ac58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ac5a:	1b9b      	subs	r3, r3, r6
 801ac5c:	1e5a      	subs	r2, r3, #1
 801ac5e:	bf44      	itt	mi
 801ac60:	f1c3 0801 	rsbmi	r8, r3, #1
 801ac64:	2300      	movmi	r3, #0
 801ac66:	9208      	str	r2, [sp, #32]
 801ac68:	bf54      	ite	pl
 801ac6a:	f04f 0800 	movpl.w	r8, #0
 801ac6e:	9308      	strmi	r3, [sp, #32]
 801ac70:	2f00      	cmp	r7, #0
 801ac72:	db39      	blt.n	801ace8 <_dtoa_r+0x218>
 801ac74:	9b08      	ldr	r3, [sp, #32]
 801ac76:	970f      	str	r7, [sp, #60]	@ 0x3c
 801ac78:	443b      	add	r3, r7
 801ac7a:	9308      	str	r3, [sp, #32]
 801ac7c:	2300      	movs	r3, #0
 801ac7e:	930a      	str	r3, [sp, #40]	@ 0x28
 801ac80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac82:	2b09      	cmp	r3, #9
 801ac84:	d864      	bhi.n	801ad50 <_dtoa_r+0x280>
 801ac86:	2b05      	cmp	r3, #5
 801ac88:	bfc4      	itt	gt
 801ac8a:	3b04      	subgt	r3, #4
 801ac8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801ac8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac90:	f1a3 0302 	sub.w	r3, r3, #2
 801ac94:	bfcc      	ite	gt
 801ac96:	2400      	movgt	r4, #0
 801ac98:	2401      	movle	r4, #1
 801ac9a:	2b03      	cmp	r3, #3
 801ac9c:	d863      	bhi.n	801ad66 <_dtoa_r+0x296>
 801ac9e:	e8df f003 	tbb	[pc, r3]
 801aca2:	372a      	.short	0x372a
 801aca4:	5535      	.short	0x5535
 801aca6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801acaa:	441e      	add	r6, r3
 801acac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801acb0:	2b20      	cmp	r3, #32
 801acb2:	bfc1      	itttt	gt
 801acb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801acb8:	409f      	lslgt	r7, r3
 801acba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801acbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 801acc2:	bfd6      	itet	le
 801acc4:	f1c3 0320 	rsble	r3, r3, #32
 801acc8:	ea47 0003 	orrgt.w	r0, r7, r3
 801accc:	fa04 f003 	lslle.w	r0, r4, r3
 801acd0:	f7e5 fc30 	bl	8000534 <__aeabi_ui2d>
 801acd4:	2201      	movs	r2, #1
 801acd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801acda:	3e01      	subs	r6, #1
 801acdc:	9214      	str	r2, [sp, #80]	@ 0x50
 801acde:	e777      	b.n	801abd0 <_dtoa_r+0x100>
 801ace0:	2301      	movs	r3, #1
 801ace2:	e7b8      	b.n	801ac56 <_dtoa_r+0x186>
 801ace4:	9012      	str	r0, [sp, #72]	@ 0x48
 801ace6:	e7b7      	b.n	801ac58 <_dtoa_r+0x188>
 801ace8:	427b      	negs	r3, r7
 801acea:	930a      	str	r3, [sp, #40]	@ 0x28
 801acec:	2300      	movs	r3, #0
 801acee:	eba8 0807 	sub.w	r8, r8, r7
 801acf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801acf4:	e7c4      	b.n	801ac80 <_dtoa_r+0x1b0>
 801acf6:	2300      	movs	r3, #0
 801acf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801acfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	dc35      	bgt.n	801ad6c <_dtoa_r+0x29c>
 801ad00:	2301      	movs	r3, #1
 801ad02:	9300      	str	r3, [sp, #0]
 801ad04:	9307      	str	r3, [sp, #28]
 801ad06:	461a      	mov	r2, r3
 801ad08:	920e      	str	r2, [sp, #56]	@ 0x38
 801ad0a:	e00b      	b.n	801ad24 <_dtoa_r+0x254>
 801ad0c:	2301      	movs	r3, #1
 801ad0e:	e7f3      	b.n	801acf8 <_dtoa_r+0x228>
 801ad10:	2300      	movs	r3, #0
 801ad12:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ad14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ad16:	18fb      	adds	r3, r7, r3
 801ad18:	9300      	str	r3, [sp, #0]
 801ad1a:	3301      	adds	r3, #1
 801ad1c:	2b01      	cmp	r3, #1
 801ad1e:	9307      	str	r3, [sp, #28]
 801ad20:	bfb8      	it	lt
 801ad22:	2301      	movlt	r3, #1
 801ad24:	f8db 001c 	ldr.w	r0, [fp, #28]
 801ad28:	2100      	movs	r1, #0
 801ad2a:	2204      	movs	r2, #4
 801ad2c:	f102 0514 	add.w	r5, r2, #20
 801ad30:	429d      	cmp	r5, r3
 801ad32:	d91f      	bls.n	801ad74 <_dtoa_r+0x2a4>
 801ad34:	6041      	str	r1, [r0, #4]
 801ad36:	4658      	mov	r0, fp
 801ad38:	f000 fce4 	bl	801b704 <_Balloc>
 801ad3c:	4682      	mov	sl, r0
 801ad3e:	2800      	cmp	r0, #0
 801ad40:	d13c      	bne.n	801adbc <_dtoa_r+0x2ec>
 801ad42:	4b1b      	ldr	r3, [pc, #108]	@ (801adb0 <_dtoa_r+0x2e0>)
 801ad44:	4602      	mov	r2, r0
 801ad46:	f240 11af 	movw	r1, #431	@ 0x1af
 801ad4a:	e6d8      	b.n	801aafe <_dtoa_r+0x2e>
 801ad4c:	2301      	movs	r3, #1
 801ad4e:	e7e0      	b.n	801ad12 <_dtoa_r+0x242>
 801ad50:	2401      	movs	r4, #1
 801ad52:	2300      	movs	r3, #0
 801ad54:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad56:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ad58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ad5c:	9300      	str	r3, [sp, #0]
 801ad5e:	9307      	str	r3, [sp, #28]
 801ad60:	2200      	movs	r2, #0
 801ad62:	2312      	movs	r3, #18
 801ad64:	e7d0      	b.n	801ad08 <_dtoa_r+0x238>
 801ad66:	2301      	movs	r3, #1
 801ad68:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ad6a:	e7f5      	b.n	801ad58 <_dtoa_r+0x288>
 801ad6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ad6e:	9300      	str	r3, [sp, #0]
 801ad70:	9307      	str	r3, [sp, #28]
 801ad72:	e7d7      	b.n	801ad24 <_dtoa_r+0x254>
 801ad74:	3101      	adds	r1, #1
 801ad76:	0052      	lsls	r2, r2, #1
 801ad78:	e7d8      	b.n	801ad2c <_dtoa_r+0x25c>
 801ad7a:	bf00      	nop
 801ad7c:	f3af 8000 	nop.w
 801ad80:	636f4361 	.word	0x636f4361
 801ad84:	3fd287a7 	.word	0x3fd287a7
 801ad88:	8b60c8b3 	.word	0x8b60c8b3
 801ad8c:	3fc68a28 	.word	0x3fc68a28
 801ad90:	509f79fb 	.word	0x509f79fb
 801ad94:	3fd34413 	.word	0x3fd34413
 801ad98:	0801e7c8 	.word	0x0801e7c8
 801ad9c:	0801e9ba 	.word	0x0801e9ba
 801ada0:	7ff00000 	.word	0x7ff00000
 801ada4:	0801e949 	.word	0x0801e949
 801ada8:	3ff80000 	.word	0x3ff80000
 801adac:	0801eab0 	.word	0x0801eab0
 801adb0:	0801ea12 	.word	0x0801ea12
 801adb4:	0801e9b6 	.word	0x0801e9b6
 801adb8:	0801e948 	.word	0x0801e948
 801adbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801adc0:	6018      	str	r0, [r3, #0]
 801adc2:	9b07      	ldr	r3, [sp, #28]
 801adc4:	2b0e      	cmp	r3, #14
 801adc6:	f200 80a4 	bhi.w	801af12 <_dtoa_r+0x442>
 801adca:	2c00      	cmp	r4, #0
 801adcc:	f000 80a1 	beq.w	801af12 <_dtoa_r+0x442>
 801add0:	2f00      	cmp	r7, #0
 801add2:	dd33      	ble.n	801ae3c <_dtoa_r+0x36c>
 801add4:	4bad      	ldr	r3, [pc, #692]	@ (801b08c <_dtoa_r+0x5bc>)
 801add6:	f007 020f 	and.w	r2, r7, #15
 801adda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801adde:	ed93 7b00 	vldr	d7, [r3]
 801ade2:	05f8      	lsls	r0, r7, #23
 801ade4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ade8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801adec:	d516      	bpl.n	801ae1c <_dtoa_r+0x34c>
 801adee:	4ba8      	ldr	r3, [pc, #672]	@ (801b090 <_dtoa_r+0x5c0>)
 801adf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801adf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801adf8:	f7e5 fd40 	bl	800087c <__aeabi_ddiv>
 801adfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ae00:	f004 040f 	and.w	r4, r4, #15
 801ae04:	2603      	movs	r6, #3
 801ae06:	4da2      	ldr	r5, [pc, #648]	@ (801b090 <_dtoa_r+0x5c0>)
 801ae08:	b954      	cbnz	r4, 801ae20 <_dtoa_r+0x350>
 801ae0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ae0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ae12:	f7e5 fd33 	bl	800087c <__aeabi_ddiv>
 801ae16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ae1a:	e028      	b.n	801ae6e <_dtoa_r+0x39e>
 801ae1c:	2602      	movs	r6, #2
 801ae1e:	e7f2      	b.n	801ae06 <_dtoa_r+0x336>
 801ae20:	07e1      	lsls	r1, r4, #31
 801ae22:	d508      	bpl.n	801ae36 <_dtoa_r+0x366>
 801ae24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ae28:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ae2c:	f7e5 fbfc 	bl	8000628 <__aeabi_dmul>
 801ae30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ae34:	3601      	adds	r6, #1
 801ae36:	1064      	asrs	r4, r4, #1
 801ae38:	3508      	adds	r5, #8
 801ae3a:	e7e5      	b.n	801ae08 <_dtoa_r+0x338>
 801ae3c:	f000 80d2 	beq.w	801afe4 <_dtoa_r+0x514>
 801ae40:	427c      	negs	r4, r7
 801ae42:	4b92      	ldr	r3, [pc, #584]	@ (801b08c <_dtoa_r+0x5bc>)
 801ae44:	4d92      	ldr	r5, [pc, #584]	@ (801b090 <_dtoa_r+0x5c0>)
 801ae46:	f004 020f 	and.w	r2, r4, #15
 801ae4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ae4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ae56:	f7e5 fbe7 	bl	8000628 <__aeabi_dmul>
 801ae5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ae5e:	1124      	asrs	r4, r4, #4
 801ae60:	2300      	movs	r3, #0
 801ae62:	2602      	movs	r6, #2
 801ae64:	2c00      	cmp	r4, #0
 801ae66:	f040 80b2 	bne.w	801afce <_dtoa_r+0x4fe>
 801ae6a:	2b00      	cmp	r3, #0
 801ae6c:	d1d3      	bne.n	801ae16 <_dtoa_r+0x346>
 801ae6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ae70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	f000 80b7 	beq.w	801afe8 <_dtoa_r+0x518>
 801ae7a:	4b86      	ldr	r3, [pc, #536]	@ (801b094 <_dtoa_r+0x5c4>)
 801ae7c:	2200      	movs	r2, #0
 801ae7e:	4620      	mov	r0, r4
 801ae80:	4629      	mov	r1, r5
 801ae82:	f7e5 fe43 	bl	8000b0c <__aeabi_dcmplt>
 801ae86:	2800      	cmp	r0, #0
 801ae88:	f000 80ae 	beq.w	801afe8 <_dtoa_r+0x518>
 801ae8c:	9b07      	ldr	r3, [sp, #28]
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	f000 80aa 	beq.w	801afe8 <_dtoa_r+0x518>
 801ae94:	9b00      	ldr	r3, [sp, #0]
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	dd37      	ble.n	801af0a <_dtoa_r+0x43a>
 801ae9a:	1e7b      	subs	r3, r7, #1
 801ae9c:	9304      	str	r3, [sp, #16]
 801ae9e:	4620      	mov	r0, r4
 801aea0:	4b7d      	ldr	r3, [pc, #500]	@ (801b098 <_dtoa_r+0x5c8>)
 801aea2:	2200      	movs	r2, #0
 801aea4:	4629      	mov	r1, r5
 801aea6:	f7e5 fbbf 	bl	8000628 <__aeabi_dmul>
 801aeaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aeae:	9c00      	ldr	r4, [sp, #0]
 801aeb0:	3601      	adds	r6, #1
 801aeb2:	4630      	mov	r0, r6
 801aeb4:	f7e5 fb4e 	bl	8000554 <__aeabi_i2d>
 801aeb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801aebc:	f7e5 fbb4 	bl	8000628 <__aeabi_dmul>
 801aec0:	4b76      	ldr	r3, [pc, #472]	@ (801b09c <_dtoa_r+0x5cc>)
 801aec2:	2200      	movs	r2, #0
 801aec4:	f7e5 f9fa 	bl	80002bc <__adddf3>
 801aec8:	4605      	mov	r5, r0
 801aeca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801aece:	2c00      	cmp	r4, #0
 801aed0:	f040 808d 	bne.w	801afee <_dtoa_r+0x51e>
 801aed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aed8:	4b71      	ldr	r3, [pc, #452]	@ (801b0a0 <_dtoa_r+0x5d0>)
 801aeda:	2200      	movs	r2, #0
 801aedc:	f7e5 f9ec 	bl	80002b8 <__aeabi_dsub>
 801aee0:	4602      	mov	r2, r0
 801aee2:	460b      	mov	r3, r1
 801aee4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801aee8:	462a      	mov	r2, r5
 801aeea:	4633      	mov	r3, r6
 801aeec:	f7e5 fe2c 	bl	8000b48 <__aeabi_dcmpgt>
 801aef0:	2800      	cmp	r0, #0
 801aef2:	f040 828b 	bne.w	801b40c <_dtoa_r+0x93c>
 801aef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aefa:	462a      	mov	r2, r5
 801aefc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801af00:	f7e5 fe04 	bl	8000b0c <__aeabi_dcmplt>
 801af04:	2800      	cmp	r0, #0
 801af06:	f040 8128 	bne.w	801b15a <_dtoa_r+0x68a>
 801af0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801af0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801af12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801af14:	2b00      	cmp	r3, #0
 801af16:	f2c0 815a 	blt.w	801b1ce <_dtoa_r+0x6fe>
 801af1a:	2f0e      	cmp	r7, #14
 801af1c:	f300 8157 	bgt.w	801b1ce <_dtoa_r+0x6fe>
 801af20:	4b5a      	ldr	r3, [pc, #360]	@ (801b08c <_dtoa_r+0x5bc>)
 801af22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801af26:	ed93 7b00 	vldr	d7, [r3]
 801af2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	ed8d 7b00 	vstr	d7, [sp]
 801af32:	da03      	bge.n	801af3c <_dtoa_r+0x46c>
 801af34:	9b07      	ldr	r3, [sp, #28]
 801af36:	2b00      	cmp	r3, #0
 801af38:	f340 8101 	ble.w	801b13e <_dtoa_r+0x66e>
 801af3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801af40:	4656      	mov	r6, sl
 801af42:	e9dd 2300 	ldrd	r2, r3, [sp]
 801af46:	4620      	mov	r0, r4
 801af48:	4629      	mov	r1, r5
 801af4a:	f7e5 fc97 	bl	800087c <__aeabi_ddiv>
 801af4e:	f7e5 fe1b 	bl	8000b88 <__aeabi_d2iz>
 801af52:	4680      	mov	r8, r0
 801af54:	f7e5 fafe 	bl	8000554 <__aeabi_i2d>
 801af58:	e9dd 2300 	ldrd	r2, r3, [sp]
 801af5c:	f7e5 fb64 	bl	8000628 <__aeabi_dmul>
 801af60:	4602      	mov	r2, r0
 801af62:	460b      	mov	r3, r1
 801af64:	4620      	mov	r0, r4
 801af66:	4629      	mov	r1, r5
 801af68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801af6c:	f7e5 f9a4 	bl	80002b8 <__aeabi_dsub>
 801af70:	f806 4b01 	strb.w	r4, [r6], #1
 801af74:	9d07      	ldr	r5, [sp, #28]
 801af76:	eba6 040a 	sub.w	r4, r6, sl
 801af7a:	42a5      	cmp	r5, r4
 801af7c:	4602      	mov	r2, r0
 801af7e:	460b      	mov	r3, r1
 801af80:	f040 8117 	bne.w	801b1b2 <_dtoa_r+0x6e2>
 801af84:	f7e5 f99a 	bl	80002bc <__adddf3>
 801af88:	e9dd 2300 	ldrd	r2, r3, [sp]
 801af8c:	4604      	mov	r4, r0
 801af8e:	460d      	mov	r5, r1
 801af90:	f7e5 fdda 	bl	8000b48 <__aeabi_dcmpgt>
 801af94:	2800      	cmp	r0, #0
 801af96:	f040 80f9 	bne.w	801b18c <_dtoa_r+0x6bc>
 801af9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801af9e:	4620      	mov	r0, r4
 801afa0:	4629      	mov	r1, r5
 801afa2:	f7e5 fda9 	bl	8000af8 <__aeabi_dcmpeq>
 801afa6:	b118      	cbz	r0, 801afb0 <_dtoa_r+0x4e0>
 801afa8:	f018 0f01 	tst.w	r8, #1
 801afac:	f040 80ee 	bne.w	801b18c <_dtoa_r+0x6bc>
 801afb0:	4649      	mov	r1, r9
 801afb2:	4658      	mov	r0, fp
 801afb4:	f000 fbe6 	bl	801b784 <_Bfree>
 801afb8:	2300      	movs	r3, #0
 801afba:	7033      	strb	r3, [r6, #0]
 801afbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801afbe:	3701      	adds	r7, #1
 801afc0:	601f      	str	r7, [r3, #0]
 801afc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	f000 831d 	beq.w	801b604 <_dtoa_r+0xb34>
 801afca:	601e      	str	r6, [r3, #0]
 801afcc:	e31a      	b.n	801b604 <_dtoa_r+0xb34>
 801afce:	07e2      	lsls	r2, r4, #31
 801afd0:	d505      	bpl.n	801afde <_dtoa_r+0x50e>
 801afd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 801afd6:	f7e5 fb27 	bl	8000628 <__aeabi_dmul>
 801afda:	3601      	adds	r6, #1
 801afdc:	2301      	movs	r3, #1
 801afde:	1064      	asrs	r4, r4, #1
 801afe0:	3508      	adds	r5, #8
 801afe2:	e73f      	b.n	801ae64 <_dtoa_r+0x394>
 801afe4:	2602      	movs	r6, #2
 801afe6:	e742      	b.n	801ae6e <_dtoa_r+0x39e>
 801afe8:	9c07      	ldr	r4, [sp, #28]
 801afea:	9704      	str	r7, [sp, #16]
 801afec:	e761      	b.n	801aeb2 <_dtoa_r+0x3e2>
 801afee:	4b27      	ldr	r3, [pc, #156]	@ (801b08c <_dtoa_r+0x5bc>)
 801aff0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801aff2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801aff6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801affa:	4454      	add	r4, sl
 801affc:	2900      	cmp	r1, #0
 801affe:	d053      	beq.n	801b0a8 <_dtoa_r+0x5d8>
 801b000:	4928      	ldr	r1, [pc, #160]	@ (801b0a4 <_dtoa_r+0x5d4>)
 801b002:	2000      	movs	r0, #0
 801b004:	f7e5 fc3a 	bl	800087c <__aeabi_ddiv>
 801b008:	4633      	mov	r3, r6
 801b00a:	462a      	mov	r2, r5
 801b00c:	f7e5 f954 	bl	80002b8 <__aeabi_dsub>
 801b010:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b014:	4656      	mov	r6, sl
 801b016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b01a:	f7e5 fdb5 	bl	8000b88 <__aeabi_d2iz>
 801b01e:	4605      	mov	r5, r0
 801b020:	f7e5 fa98 	bl	8000554 <__aeabi_i2d>
 801b024:	4602      	mov	r2, r0
 801b026:	460b      	mov	r3, r1
 801b028:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b02c:	f7e5 f944 	bl	80002b8 <__aeabi_dsub>
 801b030:	3530      	adds	r5, #48	@ 0x30
 801b032:	4602      	mov	r2, r0
 801b034:	460b      	mov	r3, r1
 801b036:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b03a:	f806 5b01 	strb.w	r5, [r6], #1
 801b03e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b042:	f7e5 fd63 	bl	8000b0c <__aeabi_dcmplt>
 801b046:	2800      	cmp	r0, #0
 801b048:	d171      	bne.n	801b12e <_dtoa_r+0x65e>
 801b04a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b04e:	4911      	ldr	r1, [pc, #68]	@ (801b094 <_dtoa_r+0x5c4>)
 801b050:	2000      	movs	r0, #0
 801b052:	f7e5 f931 	bl	80002b8 <__aeabi_dsub>
 801b056:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b05a:	f7e5 fd57 	bl	8000b0c <__aeabi_dcmplt>
 801b05e:	2800      	cmp	r0, #0
 801b060:	f040 8095 	bne.w	801b18e <_dtoa_r+0x6be>
 801b064:	42a6      	cmp	r6, r4
 801b066:	f43f af50 	beq.w	801af0a <_dtoa_r+0x43a>
 801b06a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801b06e:	4b0a      	ldr	r3, [pc, #40]	@ (801b098 <_dtoa_r+0x5c8>)
 801b070:	2200      	movs	r2, #0
 801b072:	f7e5 fad9 	bl	8000628 <__aeabi_dmul>
 801b076:	4b08      	ldr	r3, [pc, #32]	@ (801b098 <_dtoa_r+0x5c8>)
 801b078:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b07c:	2200      	movs	r2, #0
 801b07e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b082:	f7e5 fad1 	bl	8000628 <__aeabi_dmul>
 801b086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b08a:	e7c4      	b.n	801b016 <_dtoa_r+0x546>
 801b08c:	0801eab0 	.word	0x0801eab0
 801b090:	0801ea88 	.word	0x0801ea88
 801b094:	3ff00000 	.word	0x3ff00000
 801b098:	40240000 	.word	0x40240000
 801b09c:	401c0000 	.word	0x401c0000
 801b0a0:	40140000 	.word	0x40140000
 801b0a4:	3fe00000 	.word	0x3fe00000
 801b0a8:	4631      	mov	r1, r6
 801b0aa:	4628      	mov	r0, r5
 801b0ac:	f7e5 fabc 	bl	8000628 <__aeabi_dmul>
 801b0b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b0b4:	9415      	str	r4, [sp, #84]	@ 0x54
 801b0b6:	4656      	mov	r6, sl
 801b0b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b0bc:	f7e5 fd64 	bl	8000b88 <__aeabi_d2iz>
 801b0c0:	4605      	mov	r5, r0
 801b0c2:	f7e5 fa47 	bl	8000554 <__aeabi_i2d>
 801b0c6:	4602      	mov	r2, r0
 801b0c8:	460b      	mov	r3, r1
 801b0ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b0ce:	f7e5 f8f3 	bl	80002b8 <__aeabi_dsub>
 801b0d2:	3530      	adds	r5, #48	@ 0x30
 801b0d4:	f806 5b01 	strb.w	r5, [r6], #1
 801b0d8:	4602      	mov	r2, r0
 801b0da:	460b      	mov	r3, r1
 801b0dc:	42a6      	cmp	r6, r4
 801b0de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b0e2:	f04f 0200 	mov.w	r2, #0
 801b0e6:	d124      	bne.n	801b132 <_dtoa_r+0x662>
 801b0e8:	4bac      	ldr	r3, [pc, #688]	@ (801b39c <_dtoa_r+0x8cc>)
 801b0ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801b0ee:	f7e5 f8e5 	bl	80002bc <__adddf3>
 801b0f2:	4602      	mov	r2, r0
 801b0f4:	460b      	mov	r3, r1
 801b0f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b0fa:	f7e5 fd25 	bl	8000b48 <__aeabi_dcmpgt>
 801b0fe:	2800      	cmp	r0, #0
 801b100:	d145      	bne.n	801b18e <_dtoa_r+0x6be>
 801b102:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b106:	49a5      	ldr	r1, [pc, #660]	@ (801b39c <_dtoa_r+0x8cc>)
 801b108:	2000      	movs	r0, #0
 801b10a:	f7e5 f8d5 	bl	80002b8 <__aeabi_dsub>
 801b10e:	4602      	mov	r2, r0
 801b110:	460b      	mov	r3, r1
 801b112:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b116:	f7e5 fcf9 	bl	8000b0c <__aeabi_dcmplt>
 801b11a:	2800      	cmp	r0, #0
 801b11c:	f43f aef5 	beq.w	801af0a <_dtoa_r+0x43a>
 801b120:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801b122:	1e73      	subs	r3, r6, #1
 801b124:	9315      	str	r3, [sp, #84]	@ 0x54
 801b126:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b12a:	2b30      	cmp	r3, #48	@ 0x30
 801b12c:	d0f8      	beq.n	801b120 <_dtoa_r+0x650>
 801b12e:	9f04      	ldr	r7, [sp, #16]
 801b130:	e73e      	b.n	801afb0 <_dtoa_r+0x4e0>
 801b132:	4b9b      	ldr	r3, [pc, #620]	@ (801b3a0 <_dtoa_r+0x8d0>)
 801b134:	f7e5 fa78 	bl	8000628 <__aeabi_dmul>
 801b138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b13c:	e7bc      	b.n	801b0b8 <_dtoa_r+0x5e8>
 801b13e:	d10c      	bne.n	801b15a <_dtoa_r+0x68a>
 801b140:	4b98      	ldr	r3, [pc, #608]	@ (801b3a4 <_dtoa_r+0x8d4>)
 801b142:	2200      	movs	r2, #0
 801b144:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b148:	f7e5 fa6e 	bl	8000628 <__aeabi_dmul>
 801b14c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b150:	f7e5 fcf0 	bl	8000b34 <__aeabi_dcmpge>
 801b154:	2800      	cmp	r0, #0
 801b156:	f000 8157 	beq.w	801b408 <_dtoa_r+0x938>
 801b15a:	2400      	movs	r4, #0
 801b15c:	4625      	mov	r5, r4
 801b15e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b160:	43db      	mvns	r3, r3
 801b162:	9304      	str	r3, [sp, #16]
 801b164:	4656      	mov	r6, sl
 801b166:	2700      	movs	r7, #0
 801b168:	4621      	mov	r1, r4
 801b16a:	4658      	mov	r0, fp
 801b16c:	f000 fb0a 	bl	801b784 <_Bfree>
 801b170:	2d00      	cmp	r5, #0
 801b172:	d0dc      	beq.n	801b12e <_dtoa_r+0x65e>
 801b174:	b12f      	cbz	r7, 801b182 <_dtoa_r+0x6b2>
 801b176:	42af      	cmp	r7, r5
 801b178:	d003      	beq.n	801b182 <_dtoa_r+0x6b2>
 801b17a:	4639      	mov	r1, r7
 801b17c:	4658      	mov	r0, fp
 801b17e:	f000 fb01 	bl	801b784 <_Bfree>
 801b182:	4629      	mov	r1, r5
 801b184:	4658      	mov	r0, fp
 801b186:	f000 fafd 	bl	801b784 <_Bfree>
 801b18a:	e7d0      	b.n	801b12e <_dtoa_r+0x65e>
 801b18c:	9704      	str	r7, [sp, #16]
 801b18e:	4633      	mov	r3, r6
 801b190:	461e      	mov	r6, r3
 801b192:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b196:	2a39      	cmp	r2, #57	@ 0x39
 801b198:	d107      	bne.n	801b1aa <_dtoa_r+0x6da>
 801b19a:	459a      	cmp	sl, r3
 801b19c:	d1f8      	bne.n	801b190 <_dtoa_r+0x6c0>
 801b19e:	9a04      	ldr	r2, [sp, #16]
 801b1a0:	3201      	adds	r2, #1
 801b1a2:	9204      	str	r2, [sp, #16]
 801b1a4:	2230      	movs	r2, #48	@ 0x30
 801b1a6:	f88a 2000 	strb.w	r2, [sl]
 801b1aa:	781a      	ldrb	r2, [r3, #0]
 801b1ac:	3201      	adds	r2, #1
 801b1ae:	701a      	strb	r2, [r3, #0]
 801b1b0:	e7bd      	b.n	801b12e <_dtoa_r+0x65e>
 801b1b2:	4b7b      	ldr	r3, [pc, #492]	@ (801b3a0 <_dtoa_r+0x8d0>)
 801b1b4:	2200      	movs	r2, #0
 801b1b6:	f7e5 fa37 	bl	8000628 <__aeabi_dmul>
 801b1ba:	2200      	movs	r2, #0
 801b1bc:	2300      	movs	r3, #0
 801b1be:	4604      	mov	r4, r0
 801b1c0:	460d      	mov	r5, r1
 801b1c2:	f7e5 fc99 	bl	8000af8 <__aeabi_dcmpeq>
 801b1c6:	2800      	cmp	r0, #0
 801b1c8:	f43f aebb 	beq.w	801af42 <_dtoa_r+0x472>
 801b1cc:	e6f0      	b.n	801afb0 <_dtoa_r+0x4e0>
 801b1ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b1d0:	2a00      	cmp	r2, #0
 801b1d2:	f000 80db 	beq.w	801b38c <_dtoa_r+0x8bc>
 801b1d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b1d8:	2a01      	cmp	r2, #1
 801b1da:	f300 80bf 	bgt.w	801b35c <_dtoa_r+0x88c>
 801b1de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b1e0:	2a00      	cmp	r2, #0
 801b1e2:	f000 80b7 	beq.w	801b354 <_dtoa_r+0x884>
 801b1e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801b1ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b1ec:	4646      	mov	r6, r8
 801b1ee:	9a08      	ldr	r2, [sp, #32]
 801b1f0:	2101      	movs	r1, #1
 801b1f2:	441a      	add	r2, r3
 801b1f4:	4658      	mov	r0, fp
 801b1f6:	4498      	add	r8, r3
 801b1f8:	9208      	str	r2, [sp, #32]
 801b1fa:	f000 fbc1 	bl	801b980 <__i2b>
 801b1fe:	4605      	mov	r5, r0
 801b200:	b15e      	cbz	r6, 801b21a <_dtoa_r+0x74a>
 801b202:	9b08      	ldr	r3, [sp, #32]
 801b204:	2b00      	cmp	r3, #0
 801b206:	dd08      	ble.n	801b21a <_dtoa_r+0x74a>
 801b208:	42b3      	cmp	r3, r6
 801b20a:	9a08      	ldr	r2, [sp, #32]
 801b20c:	bfa8      	it	ge
 801b20e:	4633      	movge	r3, r6
 801b210:	eba8 0803 	sub.w	r8, r8, r3
 801b214:	1af6      	subs	r6, r6, r3
 801b216:	1ad3      	subs	r3, r2, r3
 801b218:	9308      	str	r3, [sp, #32]
 801b21a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b21c:	b1f3      	cbz	r3, 801b25c <_dtoa_r+0x78c>
 801b21e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b220:	2b00      	cmp	r3, #0
 801b222:	f000 80b7 	beq.w	801b394 <_dtoa_r+0x8c4>
 801b226:	b18c      	cbz	r4, 801b24c <_dtoa_r+0x77c>
 801b228:	4629      	mov	r1, r5
 801b22a:	4622      	mov	r2, r4
 801b22c:	4658      	mov	r0, fp
 801b22e:	f000 fc67 	bl	801bb00 <__pow5mult>
 801b232:	464a      	mov	r2, r9
 801b234:	4601      	mov	r1, r0
 801b236:	4605      	mov	r5, r0
 801b238:	4658      	mov	r0, fp
 801b23a:	f000 fbb7 	bl	801b9ac <__multiply>
 801b23e:	4649      	mov	r1, r9
 801b240:	9004      	str	r0, [sp, #16]
 801b242:	4658      	mov	r0, fp
 801b244:	f000 fa9e 	bl	801b784 <_Bfree>
 801b248:	9b04      	ldr	r3, [sp, #16]
 801b24a:	4699      	mov	r9, r3
 801b24c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b24e:	1b1a      	subs	r2, r3, r4
 801b250:	d004      	beq.n	801b25c <_dtoa_r+0x78c>
 801b252:	4649      	mov	r1, r9
 801b254:	4658      	mov	r0, fp
 801b256:	f000 fc53 	bl	801bb00 <__pow5mult>
 801b25a:	4681      	mov	r9, r0
 801b25c:	2101      	movs	r1, #1
 801b25e:	4658      	mov	r0, fp
 801b260:	f000 fb8e 	bl	801b980 <__i2b>
 801b264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b266:	4604      	mov	r4, r0
 801b268:	2b00      	cmp	r3, #0
 801b26a:	f000 81cf 	beq.w	801b60c <_dtoa_r+0xb3c>
 801b26e:	461a      	mov	r2, r3
 801b270:	4601      	mov	r1, r0
 801b272:	4658      	mov	r0, fp
 801b274:	f000 fc44 	bl	801bb00 <__pow5mult>
 801b278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b27a:	2b01      	cmp	r3, #1
 801b27c:	4604      	mov	r4, r0
 801b27e:	f300 8095 	bgt.w	801b3ac <_dtoa_r+0x8dc>
 801b282:	9b02      	ldr	r3, [sp, #8]
 801b284:	2b00      	cmp	r3, #0
 801b286:	f040 8087 	bne.w	801b398 <_dtoa_r+0x8c8>
 801b28a:	9b03      	ldr	r3, [sp, #12]
 801b28c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b290:	2b00      	cmp	r3, #0
 801b292:	f040 8089 	bne.w	801b3a8 <_dtoa_r+0x8d8>
 801b296:	9b03      	ldr	r3, [sp, #12]
 801b298:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b29c:	0d1b      	lsrs	r3, r3, #20
 801b29e:	051b      	lsls	r3, r3, #20
 801b2a0:	b12b      	cbz	r3, 801b2ae <_dtoa_r+0x7de>
 801b2a2:	9b08      	ldr	r3, [sp, #32]
 801b2a4:	3301      	adds	r3, #1
 801b2a6:	9308      	str	r3, [sp, #32]
 801b2a8:	f108 0801 	add.w	r8, r8, #1
 801b2ac:	2301      	movs	r3, #1
 801b2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801b2b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	f000 81b0 	beq.w	801b618 <_dtoa_r+0xb48>
 801b2b8:	6923      	ldr	r3, [r4, #16]
 801b2ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b2be:	6918      	ldr	r0, [r3, #16]
 801b2c0:	f000 fb12 	bl	801b8e8 <__hi0bits>
 801b2c4:	f1c0 0020 	rsb	r0, r0, #32
 801b2c8:	9b08      	ldr	r3, [sp, #32]
 801b2ca:	4418      	add	r0, r3
 801b2cc:	f010 001f 	ands.w	r0, r0, #31
 801b2d0:	d077      	beq.n	801b3c2 <_dtoa_r+0x8f2>
 801b2d2:	f1c0 0320 	rsb	r3, r0, #32
 801b2d6:	2b04      	cmp	r3, #4
 801b2d8:	dd6b      	ble.n	801b3b2 <_dtoa_r+0x8e2>
 801b2da:	9b08      	ldr	r3, [sp, #32]
 801b2dc:	f1c0 001c 	rsb	r0, r0, #28
 801b2e0:	4403      	add	r3, r0
 801b2e2:	4480      	add	r8, r0
 801b2e4:	4406      	add	r6, r0
 801b2e6:	9308      	str	r3, [sp, #32]
 801b2e8:	f1b8 0f00 	cmp.w	r8, #0
 801b2ec:	dd05      	ble.n	801b2fa <_dtoa_r+0x82a>
 801b2ee:	4649      	mov	r1, r9
 801b2f0:	4642      	mov	r2, r8
 801b2f2:	4658      	mov	r0, fp
 801b2f4:	f000 fc5e 	bl	801bbb4 <__lshift>
 801b2f8:	4681      	mov	r9, r0
 801b2fa:	9b08      	ldr	r3, [sp, #32]
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	dd05      	ble.n	801b30c <_dtoa_r+0x83c>
 801b300:	4621      	mov	r1, r4
 801b302:	461a      	mov	r2, r3
 801b304:	4658      	mov	r0, fp
 801b306:	f000 fc55 	bl	801bbb4 <__lshift>
 801b30a:	4604      	mov	r4, r0
 801b30c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d059      	beq.n	801b3c6 <_dtoa_r+0x8f6>
 801b312:	4621      	mov	r1, r4
 801b314:	4648      	mov	r0, r9
 801b316:	f000 fcb9 	bl	801bc8c <__mcmp>
 801b31a:	2800      	cmp	r0, #0
 801b31c:	da53      	bge.n	801b3c6 <_dtoa_r+0x8f6>
 801b31e:	1e7b      	subs	r3, r7, #1
 801b320:	9304      	str	r3, [sp, #16]
 801b322:	4649      	mov	r1, r9
 801b324:	2300      	movs	r3, #0
 801b326:	220a      	movs	r2, #10
 801b328:	4658      	mov	r0, fp
 801b32a:	f000 fa4d 	bl	801b7c8 <__multadd>
 801b32e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b330:	4681      	mov	r9, r0
 801b332:	2b00      	cmp	r3, #0
 801b334:	f000 8172 	beq.w	801b61c <_dtoa_r+0xb4c>
 801b338:	2300      	movs	r3, #0
 801b33a:	4629      	mov	r1, r5
 801b33c:	220a      	movs	r2, #10
 801b33e:	4658      	mov	r0, fp
 801b340:	f000 fa42 	bl	801b7c8 <__multadd>
 801b344:	9b00      	ldr	r3, [sp, #0]
 801b346:	2b00      	cmp	r3, #0
 801b348:	4605      	mov	r5, r0
 801b34a:	dc67      	bgt.n	801b41c <_dtoa_r+0x94c>
 801b34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b34e:	2b02      	cmp	r3, #2
 801b350:	dc41      	bgt.n	801b3d6 <_dtoa_r+0x906>
 801b352:	e063      	b.n	801b41c <_dtoa_r+0x94c>
 801b354:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b356:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801b35a:	e746      	b.n	801b1ea <_dtoa_r+0x71a>
 801b35c:	9b07      	ldr	r3, [sp, #28]
 801b35e:	1e5c      	subs	r4, r3, #1
 801b360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b362:	42a3      	cmp	r3, r4
 801b364:	bfbf      	itttt	lt
 801b366:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801b368:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801b36a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801b36c:	1ae3      	sublt	r3, r4, r3
 801b36e:	bfb4      	ite	lt
 801b370:	18d2      	addlt	r2, r2, r3
 801b372:	1b1c      	subge	r4, r3, r4
 801b374:	9b07      	ldr	r3, [sp, #28]
 801b376:	bfbc      	itt	lt
 801b378:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801b37a:	2400      	movlt	r4, #0
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	bfb5      	itete	lt
 801b380:	eba8 0603 	sublt.w	r6, r8, r3
 801b384:	9b07      	ldrge	r3, [sp, #28]
 801b386:	2300      	movlt	r3, #0
 801b388:	4646      	movge	r6, r8
 801b38a:	e730      	b.n	801b1ee <_dtoa_r+0x71e>
 801b38c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b38e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801b390:	4646      	mov	r6, r8
 801b392:	e735      	b.n	801b200 <_dtoa_r+0x730>
 801b394:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b396:	e75c      	b.n	801b252 <_dtoa_r+0x782>
 801b398:	2300      	movs	r3, #0
 801b39a:	e788      	b.n	801b2ae <_dtoa_r+0x7de>
 801b39c:	3fe00000 	.word	0x3fe00000
 801b3a0:	40240000 	.word	0x40240000
 801b3a4:	40140000 	.word	0x40140000
 801b3a8:	9b02      	ldr	r3, [sp, #8]
 801b3aa:	e780      	b.n	801b2ae <_dtoa_r+0x7de>
 801b3ac:	2300      	movs	r3, #0
 801b3ae:	930a      	str	r3, [sp, #40]	@ 0x28
 801b3b0:	e782      	b.n	801b2b8 <_dtoa_r+0x7e8>
 801b3b2:	d099      	beq.n	801b2e8 <_dtoa_r+0x818>
 801b3b4:	9a08      	ldr	r2, [sp, #32]
 801b3b6:	331c      	adds	r3, #28
 801b3b8:	441a      	add	r2, r3
 801b3ba:	4498      	add	r8, r3
 801b3bc:	441e      	add	r6, r3
 801b3be:	9208      	str	r2, [sp, #32]
 801b3c0:	e792      	b.n	801b2e8 <_dtoa_r+0x818>
 801b3c2:	4603      	mov	r3, r0
 801b3c4:	e7f6      	b.n	801b3b4 <_dtoa_r+0x8e4>
 801b3c6:	9b07      	ldr	r3, [sp, #28]
 801b3c8:	9704      	str	r7, [sp, #16]
 801b3ca:	2b00      	cmp	r3, #0
 801b3cc:	dc20      	bgt.n	801b410 <_dtoa_r+0x940>
 801b3ce:	9300      	str	r3, [sp, #0]
 801b3d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b3d2:	2b02      	cmp	r3, #2
 801b3d4:	dd1e      	ble.n	801b414 <_dtoa_r+0x944>
 801b3d6:	9b00      	ldr	r3, [sp, #0]
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	f47f aec0 	bne.w	801b15e <_dtoa_r+0x68e>
 801b3de:	4621      	mov	r1, r4
 801b3e0:	2205      	movs	r2, #5
 801b3e2:	4658      	mov	r0, fp
 801b3e4:	f000 f9f0 	bl	801b7c8 <__multadd>
 801b3e8:	4601      	mov	r1, r0
 801b3ea:	4604      	mov	r4, r0
 801b3ec:	4648      	mov	r0, r9
 801b3ee:	f000 fc4d 	bl	801bc8c <__mcmp>
 801b3f2:	2800      	cmp	r0, #0
 801b3f4:	f77f aeb3 	ble.w	801b15e <_dtoa_r+0x68e>
 801b3f8:	4656      	mov	r6, sl
 801b3fa:	2331      	movs	r3, #49	@ 0x31
 801b3fc:	f806 3b01 	strb.w	r3, [r6], #1
 801b400:	9b04      	ldr	r3, [sp, #16]
 801b402:	3301      	adds	r3, #1
 801b404:	9304      	str	r3, [sp, #16]
 801b406:	e6ae      	b.n	801b166 <_dtoa_r+0x696>
 801b408:	9c07      	ldr	r4, [sp, #28]
 801b40a:	9704      	str	r7, [sp, #16]
 801b40c:	4625      	mov	r5, r4
 801b40e:	e7f3      	b.n	801b3f8 <_dtoa_r+0x928>
 801b410:	9b07      	ldr	r3, [sp, #28]
 801b412:	9300      	str	r3, [sp, #0]
 801b414:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b416:	2b00      	cmp	r3, #0
 801b418:	f000 8104 	beq.w	801b624 <_dtoa_r+0xb54>
 801b41c:	2e00      	cmp	r6, #0
 801b41e:	dd05      	ble.n	801b42c <_dtoa_r+0x95c>
 801b420:	4629      	mov	r1, r5
 801b422:	4632      	mov	r2, r6
 801b424:	4658      	mov	r0, fp
 801b426:	f000 fbc5 	bl	801bbb4 <__lshift>
 801b42a:	4605      	mov	r5, r0
 801b42c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b42e:	2b00      	cmp	r3, #0
 801b430:	d05a      	beq.n	801b4e8 <_dtoa_r+0xa18>
 801b432:	6869      	ldr	r1, [r5, #4]
 801b434:	4658      	mov	r0, fp
 801b436:	f000 f965 	bl	801b704 <_Balloc>
 801b43a:	4606      	mov	r6, r0
 801b43c:	b928      	cbnz	r0, 801b44a <_dtoa_r+0x97a>
 801b43e:	4b84      	ldr	r3, [pc, #528]	@ (801b650 <_dtoa_r+0xb80>)
 801b440:	4602      	mov	r2, r0
 801b442:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801b446:	f7ff bb5a 	b.w	801aafe <_dtoa_r+0x2e>
 801b44a:	692a      	ldr	r2, [r5, #16]
 801b44c:	3202      	adds	r2, #2
 801b44e:	0092      	lsls	r2, r2, #2
 801b450:	f105 010c 	add.w	r1, r5, #12
 801b454:	300c      	adds	r0, #12
 801b456:	f7ff fa80 	bl	801a95a <memcpy>
 801b45a:	2201      	movs	r2, #1
 801b45c:	4631      	mov	r1, r6
 801b45e:	4658      	mov	r0, fp
 801b460:	f000 fba8 	bl	801bbb4 <__lshift>
 801b464:	f10a 0301 	add.w	r3, sl, #1
 801b468:	9307      	str	r3, [sp, #28]
 801b46a:	9b00      	ldr	r3, [sp, #0]
 801b46c:	4453      	add	r3, sl
 801b46e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b470:	9b02      	ldr	r3, [sp, #8]
 801b472:	f003 0301 	and.w	r3, r3, #1
 801b476:	462f      	mov	r7, r5
 801b478:	930a      	str	r3, [sp, #40]	@ 0x28
 801b47a:	4605      	mov	r5, r0
 801b47c:	9b07      	ldr	r3, [sp, #28]
 801b47e:	4621      	mov	r1, r4
 801b480:	3b01      	subs	r3, #1
 801b482:	4648      	mov	r0, r9
 801b484:	9300      	str	r3, [sp, #0]
 801b486:	f7ff fa9b 	bl	801a9c0 <quorem>
 801b48a:	4639      	mov	r1, r7
 801b48c:	9002      	str	r0, [sp, #8]
 801b48e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801b492:	4648      	mov	r0, r9
 801b494:	f000 fbfa 	bl	801bc8c <__mcmp>
 801b498:	462a      	mov	r2, r5
 801b49a:	9008      	str	r0, [sp, #32]
 801b49c:	4621      	mov	r1, r4
 801b49e:	4658      	mov	r0, fp
 801b4a0:	f000 fc10 	bl	801bcc4 <__mdiff>
 801b4a4:	68c2      	ldr	r2, [r0, #12]
 801b4a6:	4606      	mov	r6, r0
 801b4a8:	bb02      	cbnz	r2, 801b4ec <_dtoa_r+0xa1c>
 801b4aa:	4601      	mov	r1, r0
 801b4ac:	4648      	mov	r0, r9
 801b4ae:	f000 fbed 	bl	801bc8c <__mcmp>
 801b4b2:	4602      	mov	r2, r0
 801b4b4:	4631      	mov	r1, r6
 801b4b6:	4658      	mov	r0, fp
 801b4b8:	920e      	str	r2, [sp, #56]	@ 0x38
 801b4ba:	f000 f963 	bl	801b784 <_Bfree>
 801b4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b4c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b4c2:	9e07      	ldr	r6, [sp, #28]
 801b4c4:	ea43 0102 	orr.w	r1, r3, r2
 801b4c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b4ca:	4319      	orrs	r1, r3
 801b4cc:	d110      	bne.n	801b4f0 <_dtoa_r+0xa20>
 801b4ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801b4d2:	d029      	beq.n	801b528 <_dtoa_r+0xa58>
 801b4d4:	9b08      	ldr	r3, [sp, #32]
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	dd02      	ble.n	801b4e0 <_dtoa_r+0xa10>
 801b4da:	9b02      	ldr	r3, [sp, #8]
 801b4dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801b4e0:	9b00      	ldr	r3, [sp, #0]
 801b4e2:	f883 8000 	strb.w	r8, [r3]
 801b4e6:	e63f      	b.n	801b168 <_dtoa_r+0x698>
 801b4e8:	4628      	mov	r0, r5
 801b4ea:	e7bb      	b.n	801b464 <_dtoa_r+0x994>
 801b4ec:	2201      	movs	r2, #1
 801b4ee:	e7e1      	b.n	801b4b4 <_dtoa_r+0x9e4>
 801b4f0:	9b08      	ldr	r3, [sp, #32]
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	db04      	blt.n	801b500 <_dtoa_r+0xa30>
 801b4f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b4f8:	430b      	orrs	r3, r1
 801b4fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b4fc:	430b      	orrs	r3, r1
 801b4fe:	d120      	bne.n	801b542 <_dtoa_r+0xa72>
 801b500:	2a00      	cmp	r2, #0
 801b502:	dded      	ble.n	801b4e0 <_dtoa_r+0xa10>
 801b504:	4649      	mov	r1, r9
 801b506:	2201      	movs	r2, #1
 801b508:	4658      	mov	r0, fp
 801b50a:	f000 fb53 	bl	801bbb4 <__lshift>
 801b50e:	4621      	mov	r1, r4
 801b510:	4681      	mov	r9, r0
 801b512:	f000 fbbb 	bl	801bc8c <__mcmp>
 801b516:	2800      	cmp	r0, #0
 801b518:	dc03      	bgt.n	801b522 <_dtoa_r+0xa52>
 801b51a:	d1e1      	bne.n	801b4e0 <_dtoa_r+0xa10>
 801b51c:	f018 0f01 	tst.w	r8, #1
 801b520:	d0de      	beq.n	801b4e0 <_dtoa_r+0xa10>
 801b522:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801b526:	d1d8      	bne.n	801b4da <_dtoa_r+0xa0a>
 801b528:	9a00      	ldr	r2, [sp, #0]
 801b52a:	2339      	movs	r3, #57	@ 0x39
 801b52c:	7013      	strb	r3, [r2, #0]
 801b52e:	4633      	mov	r3, r6
 801b530:	461e      	mov	r6, r3
 801b532:	3b01      	subs	r3, #1
 801b534:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801b538:	2a39      	cmp	r2, #57	@ 0x39
 801b53a:	d052      	beq.n	801b5e2 <_dtoa_r+0xb12>
 801b53c:	3201      	adds	r2, #1
 801b53e:	701a      	strb	r2, [r3, #0]
 801b540:	e612      	b.n	801b168 <_dtoa_r+0x698>
 801b542:	2a00      	cmp	r2, #0
 801b544:	dd07      	ble.n	801b556 <_dtoa_r+0xa86>
 801b546:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801b54a:	d0ed      	beq.n	801b528 <_dtoa_r+0xa58>
 801b54c:	9a00      	ldr	r2, [sp, #0]
 801b54e:	f108 0301 	add.w	r3, r8, #1
 801b552:	7013      	strb	r3, [r2, #0]
 801b554:	e608      	b.n	801b168 <_dtoa_r+0x698>
 801b556:	9b07      	ldr	r3, [sp, #28]
 801b558:	9a07      	ldr	r2, [sp, #28]
 801b55a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801b55e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b560:	4293      	cmp	r3, r2
 801b562:	d028      	beq.n	801b5b6 <_dtoa_r+0xae6>
 801b564:	4649      	mov	r1, r9
 801b566:	2300      	movs	r3, #0
 801b568:	220a      	movs	r2, #10
 801b56a:	4658      	mov	r0, fp
 801b56c:	f000 f92c 	bl	801b7c8 <__multadd>
 801b570:	42af      	cmp	r7, r5
 801b572:	4681      	mov	r9, r0
 801b574:	f04f 0300 	mov.w	r3, #0
 801b578:	f04f 020a 	mov.w	r2, #10
 801b57c:	4639      	mov	r1, r7
 801b57e:	4658      	mov	r0, fp
 801b580:	d107      	bne.n	801b592 <_dtoa_r+0xac2>
 801b582:	f000 f921 	bl	801b7c8 <__multadd>
 801b586:	4607      	mov	r7, r0
 801b588:	4605      	mov	r5, r0
 801b58a:	9b07      	ldr	r3, [sp, #28]
 801b58c:	3301      	adds	r3, #1
 801b58e:	9307      	str	r3, [sp, #28]
 801b590:	e774      	b.n	801b47c <_dtoa_r+0x9ac>
 801b592:	f000 f919 	bl	801b7c8 <__multadd>
 801b596:	4629      	mov	r1, r5
 801b598:	4607      	mov	r7, r0
 801b59a:	2300      	movs	r3, #0
 801b59c:	220a      	movs	r2, #10
 801b59e:	4658      	mov	r0, fp
 801b5a0:	f000 f912 	bl	801b7c8 <__multadd>
 801b5a4:	4605      	mov	r5, r0
 801b5a6:	e7f0      	b.n	801b58a <_dtoa_r+0xaba>
 801b5a8:	9b00      	ldr	r3, [sp, #0]
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	bfcc      	ite	gt
 801b5ae:	461e      	movgt	r6, r3
 801b5b0:	2601      	movle	r6, #1
 801b5b2:	4456      	add	r6, sl
 801b5b4:	2700      	movs	r7, #0
 801b5b6:	4649      	mov	r1, r9
 801b5b8:	2201      	movs	r2, #1
 801b5ba:	4658      	mov	r0, fp
 801b5bc:	f000 fafa 	bl	801bbb4 <__lshift>
 801b5c0:	4621      	mov	r1, r4
 801b5c2:	4681      	mov	r9, r0
 801b5c4:	f000 fb62 	bl	801bc8c <__mcmp>
 801b5c8:	2800      	cmp	r0, #0
 801b5ca:	dcb0      	bgt.n	801b52e <_dtoa_r+0xa5e>
 801b5cc:	d102      	bne.n	801b5d4 <_dtoa_r+0xb04>
 801b5ce:	f018 0f01 	tst.w	r8, #1
 801b5d2:	d1ac      	bne.n	801b52e <_dtoa_r+0xa5e>
 801b5d4:	4633      	mov	r3, r6
 801b5d6:	461e      	mov	r6, r3
 801b5d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b5dc:	2a30      	cmp	r2, #48	@ 0x30
 801b5de:	d0fa      	beq.n	801b5d6 <_dtoa_r+0xb06>
 801b5e0:	e5c2      	b.n	801b168 <_dtoa_r+0x698>
 801b5e2:	459a      	cmp	sl, r3
 801b5e4:	d1a4      	bne.n	801b530 <_dtoa_r+0xa60>
 801b5e6:	9b04      	ldr	r3, [sp, #16]
 801b5e8:	3301      	adds	r3, #1
 801b5ea:	9304      	str	r3, [sp, #16]
 801b5ec:	2331      	movs	r3, #49	@ 0x31
 801b5ee:	f88a 3000 	strb.w	r3, [sl]
 801b5f2:	e5b9      	b.n	801b168 <_dtoa_r+0x698>
 801b5f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b5f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801b654 <_dtoa_r+0xb84>
 801b5fa:	b11b      	cbz	r3, 801b604 <_dtoa_r+0xb34>
 801b5fc:	f10a 0308 	add.w	r3, sl, #8
 801b600:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801b602:	6013      	str	r3, [r2, #0]
 801b604:	4650      	mov	r0, sl
 801b606:	b019      	add	sp, #100	@ 0x64
 801b608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b60e:	2b01      	cmp	r3, #1
 801b610:	f77f ae37 	ble.w	801b282 <_dtoa_r+0x7b2>
 801b614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b616:	930a      	str	r3, [sp, #40]	@ 0x28
 801b618:	2001      	movs	r0, #1
 801b61a:	e655      	b.n	801b2c8 <_dtoa_r+0x7f8>
 801b61c:	9b00      	ldr	r3, [sp, #0]
 801b61e:	2b00      	cmp	r3, #0
 801b620:	f77f aed6 	ble.w	801b3d0 <_dtoa_r+0x900>
 801b624:	4656      	mov	r6, sl
 801b626:	4621      	mov	r1, r4
 801b628:	4648      	mov	r0, r9
 801b62a:	f7ff f9c9 	bl	801a9c0 <quorem>
 801b62e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801b632:	f806 8b01 	strb.w	r8, [r6], #1
 801b636:	9b00      	ldr	r3, [sp, #0]
 801b638:	eba6 020a 	sub.w	r2, r6, sl
 801b63c:	4293      	cmp	r3, r2
 801b63e:	ddb3      	ble.n	801b5a8 <_dtoa_r+0xad8>
 801b640:	4649      	mov	r1, r9
 801b642:	2300      	movs	r3, #0
 801b644:	220a      	movs	r2, #10
 801b646:	4658      	mov	r0, fp
 801b648:	f000 f8be 	bl	801b7c8 <__multadd>
 801b64c:	4681      	mov	r9, r0
 801b64e:	e7ea      	b.n	801b626 <_dtoa_r+0xb56>
 801b650:	0801ea12 	.word	0x0801ea12
 801b654:	0801e9ad 	.word	0x0801e9ad

0801b658 <__env_lock>:
 801b658:	4801      	ldr	r0, [pc, #4]	@ (801b660 <__env_lock+0x8>)
 801b65a:	f7ff b974 	b.w	801a946 <__retarget_lock_acquire_recursive>
 801b65e:	bf00      	nop
 801b660:	20009fec 	.word	0x20009fec

0801b664 <__env_unlock>:
 801b664:	4801      	ldr	r0, [pc, #4]	@ (801b66c <__env_unlock+0x8>)
 801b666:	f7ff b96f 	b.w	801a948 <__retarget_lock_release_recursive>
 801b66a:	bf00      	nop
 801b66c:	20009fec 	.word	0x20009fec

0801b670 <_free_r>:
 801b670:	b538      	push	{r3, r4, r5, lr}
 801b672:	4605      	mov	r5, r0
 801b674:	2900      	cmp	r1, #0
 801b676:	d041      	beq.n	801b6fc <_free_r+0x8c>
 801b678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b67c:	1f0c      	subs	r4, r1, #4
 801b67e:	2b00      	cmp	r3, #0
 801b680:	bfb8      	it	lt
 801b682:	18e4      	addlt	r4, r4, r3
 801b684:	f7fd fe04 	bl	8019290 <__malloc_lock>
 801b688:	4a1d      	ldr	r2, [pc, #116]	@ (801b700 <_free_r+0x90>)
 801b68a:	6813      	ldr	r3, [r2, #0]
 801b68c:	b933      	cbnz	r3, 801b69c <_free_r+0x2c>
 801b68e:	6063      	str	r3, [r4, #4]
 801b690:	6014      	str	r4, [r2, #0]
 801b692:	4628      	mov	r0, r5
 801b694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b698:	f7fd be00 	b.w	801929c <__malloc_unlock>
 801b69c:	42a3      	cmp	r3, r4
 801b69e:	d908      	bls.n	801b6b2 <_free_r+0x42>
 801b6a0:	6820      	ldr	r0, [r4, #0]
 801b6a2:	1821      	adds	r1, r4, r0
 801b6a4:	428b      	cmp	r3, r1
 801b6a6:	bf01      	itttt	eq
 801b6a8:	6819      	ldreq	r1, [r3, #0]
 801b6aa:	685b      	ldreq	r3, [r3, #4]
 801b6ac:	1809      	addeq	r1, r1, r0
 801b6ae:	6021      	streq	r1, [r4, #0]
 801b6b0:	e7ed      	b.n	801b68e <_free_r+0x1e>
 801b6b2:	461a      	mov	r2, r3
 801b6b4:	685b      	ldr	r3, [r3, #4]
 801b6b6:	b10b      	cbz	r3, 801b6bc <_free_r+0x4c>
 801b6b8:	42a3      	cmp	r3, r4
 801b6ba:	d9fa      	bls.n	801b6b2 <_free_r+0x42>
 801b6bc:	6811      	ldr	r1, [r2, #0]
 801b6be:	1850      	adds	r0, r2, r1
 801b6c0:	42a0      	cmp	r0, r4
 801b6c2:	d10b      	bne.n	801b6dc <_free_r+0x6c>
 801b6c4:	6820      	ldr	r0, [r4, #0]
 801b6c6:	4401      	add	r1, r0
 801b6c8:	1850      	adds	r0, r2, r1
 801b6ca:	4283      	cmp	r3, r0
 801b6cc:	6011      	str	r1, [r2, #0]
 801b6ce:	d1e0      	bne.n	801b692 <_free_r+0x22>
 801b6d0:	6818      	ldr	r0, [r3, #0]
 801b6d2:	685b      	ldr	r3, [r3, #4]
 801b6d4:	6053      	str	r3, [r2, #4]
 801b6d6:	4408      	add	r0, r1
 801b6d8:	6010      	str	r0, [r2, #0]
 801b6da:	e7da      	b.n	801b692 <_free_r+0x22>
 801b6dc:	d902      	bls.n	801b6e4 <_free_r+0x74>
 801b6de:	230c      	movs	r3, #12
 801b6e0:	602b      	str	r3, [r5, #0]
 801b6e2:	e7d6      	b.n	801b692 <_free_r+0x22>
 801b6e4:	6820      	ldr	r0, [r4, #0]
 801b6e6:	1821      	adds	r1, r4, r0
 801b6e8:	428b      	cmp	r3, r1
 801b6ea:	bf04      	itt	eq
 801b6ec:	6819      	ldreq	r1, [r3, #0]
 801b6ee:	685b      	ldreq	r3, [r3, #4]
 801b6f0:	6063      	str	r3, [r4, #4]
 801b6f2:	bf04      	itt	eq
 801b6f4:	1809      	addeq	r1, r1, r0
 801b6f6:	6021      	streq	r1, [r4, #0]
 801b6f8:	6054      	str	r4, [r2, #4]
 801b6fa:	e7ca      	b.n	801b692 <_free_r+0x22>
 801b6fc:	bd38      	pop	{r3, r4, r5, pc}
 801b6fe:	bf00      	nop
 801b700:	20009ea8 	.word	0x20009ea8

0801b704 <_Balloc>:
 801b704:	b570      	push	{r4, r5, r6, lr}
 801b706:	69c6      	ldr	r6, [r0, #28]
 801b708:	4604      	mov	r4, r0
 801b70a:	460d      	mov	r5, r1
 801b70c:	b976      	cbnz	r6, 801b72c <_Balloc+0x28>
 801b70e:	2010      	movs	r0, #16
 801b710:	f7fd fd0c 	bl	801912c <malloc>
 801b714:	4602      	mov	r2, r0
 801b716:	61e0      	str	r0, [r4, #28]
 801b718:	b920      	cbnz	r0, 801b724 <_Balloc+0x20>
 801b71a:	4b18      	ldr	r3, [pc, #96]	@ (801b77c <_Balloc+0x78>)
 801b71c:	4818      	ldr	r0, [pc, #96]	@ (801b780 <_Balloc+0x7c>)
 801b71e:	216b      	movs	r1, #107	@ 0x6b
 801b720:	f7ff f930 	bl	801a984 <__assert_func>
 801b724:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b728:	6006      	str	r6, [r0, #0]
 801b72a:	60c6      	str	r6, [r0, #12]
 801b72c:	69e6      	ldr	r6, [r4, #28]
 801b72e:	68f3      	ldr	r3, [r6, #12]
 801b730:	b183      	cbz	r3, 801b754 <_Balloc+0x50>
 801b732:	69e3      	ldr	r3, [r4, #28]
 801b734:	68db      	ldr	r3, [r3, #12]
 801b736:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b73a:	b9b8      	cbnz	r0, 801b76c <_Balloc+0x68>
 801b73c:	2101      	movs	r1, #1
 801b73e:	fa01 f605 	lsl.w	r6, r1, r5
 801b742:	1d72      	adds	r2, r6, #5
 801b744:	0092      	lsls	r2, r2, #2
 801b746:	4620      	mov	r0, r4
 801b748:	f7fd fc94 	bl	8019074 <_calloc_r>
 801b74c:	b160      	cbz	r0, 801b768 <_Balloc+0x64>
 801b74e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b752:	e00e      	b.n	801b772 <_Balloc+0x6e>
 801b754:	2221      	movs	r2, #33	@ 0x21
 801b756:	2104      	movs	r1, #4
 801b758:	4620      	mov	r0, r4
 801b75a:	f7fd fc8b 	bl	8019074 <_calloc_r>
 801b75e:	69e3      	ldr	r3, [r4, #28]
 801b760:	60f0      	str	r0, [r6, #12]
 801b762:	68db      	ldr	r3, [r3, #12]
 801b764:	2b00      	cmp	r3, #0
 801b766:	d1e4      	bne.n	801b732 <_Balloc+0x2e>
 801b768:	2000      	movs	r0, #0
 801b76a:	bd70      	pop	{r4, r5, r6, pc}
 801b76c:	6802      	ldr	r2, [r0, #0]
 801b76e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b772:	2300      	movs	r3, #0
 801b774:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b778:	e7f7      	b.n	801b76a <_Balloc+0x66>
 801b77a:	bf00      	nop
 801b77c:	0801e7c8 	.word	0x0801e7c8
 801b780:	0801ea23 	.word	0x0801ea23

0801b784 <_Bfree>:
 801b784:	b570      	push	{r4, r5, r6, lr}
 801b786:	69c6      	ldr	r6, [r0, #28]
 801b788:	4605      	mov	r5, r0
 801b78a:	460c      	mov	r4, r1
 801b78c:	b976      	cbnz	r6, 801b7ac <_Bfree+0x28>
 801b78e:	2010      	movs	r0, #16
 801b790:	f7fd fccc 	bl	801912c <malloc>
 801b794:	4602      	mov	r2, r0
 801b796:	61e8      	str	r0, [r5, #28]
 801b798:	b920      	cbnz	r0, 801b7a4 <_Bfree+0x20>
 801b79a:	4b09      	ldr	r3, [pc, #36]	@ (801b7c0 <_Bfree+0x3c>)
 801b79c:	4809      	ldr	r0, [pc, #36]	@ (801b7c4 <_Bfree+0x40>)
 801b79e:	218f      	movs	r1, #143	@ 0x8f
 801b7a0:	f7ff f8f0 	bl	801a984 <__assert_func>
 801b7a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b7a8:	6006      	str	r6, [r0, #0]
 801b7aa:	60c6      	str	r6, [r0, #12]
 801b7ac:	b13c      	cbz	r4, 801b7be <_Bfree+0x3a>
 801b7ae:	69eb      	ldr	r3, [r5, #28]
 801b7b0:	6862      	ldr	r2, [r4, #4]
 801b7b2:	68db      	ldr	r3, [r3, #12]
 801b7b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b7b8:	6021      	str	r1, [r4, #0]
 801b7ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b7be:	bd70      	pop	{r4, r5, r6, pc}
 801b7c0:	0801e7c8 	.word	0x0801e7c8
 801b7c4:	0801ea23 	.word	0x0801ea23

0801b7c8 <__multadd>:
 801b7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b7cc:	690d      	ldr	r5, [r1, #16]
 801b7ce:	4607      	mov	r7, r0
 801b7d0:	460c      	mov	r4, r1
 801b7d2:	461e      	mov	r6, r3
 801b7d4:	f101 0c14 	add.w	ip, r1, #20
 801b7d8:	2000      	movs	r0, #0
 801b7da:	f8dc 3000 	ldr.w	r3, [ip]
 801b7de:	b299      	uxth	r1, r3
 801b7e0:	fb02 6101 	mla	r1, r2, r1, r6
 801b7e4:	0c1e      	lsrs	r6, r3, #16
 801b7e6:	0c0b      	lsrs	r3, r1, #16
 801b7e8:	fb02 3306 	mla	r3, r2, r6, r3
 801b7ec:	b289      	uxth	r1, r1
 801b7ee:	3001      	adds	r0, #1
 801b7f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b7f4:	4285      	cmp	r5, r0
 801b7f6:	f84c 1b04 	str.w	r1, [ip], #4
 801b7fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b7fe:	dcec      	bgt.n	801b7da <__multadd+0x12>
 801b800:	b30e      	cbz	r6, 801b846 <__multadd+0x7e>
 801b802:	68a3      	ldr	r3, [r4, #8]
 801b804:	42ab      	cmp	r3, r5
 801b806:	dc19      	bgt.n	801b83c <__multadd+0x74>
 801b808:	6861      	ldr	r1, [r4, #4]
 801b80a:	4638      	mov	r0, r7
 801b80c:	3101      	adds	r1, #1
 801b80e:	f7ff ff79 	bl	801b704 <_Balloc>
 801b812:	4680      	mov	r8, r0
 801b814:	b928      	cbnz	r0, 801b822 <__multadd+0x5a>
 801b816:	4602      	mov	r2, r0
 801b818:	4b0c      	ldr	r3, [pc, #48]	@ (801b84c <__multadd+0x84>)
 801b81a:	480d      	ldr	r0, [pc, #52]	@ (801b850 <__multadd+0x88>)
 801b81c:	21ba      	movs	r1, #186	@ 0xba
 801b81e:	f7ff f8b1 	bl	801a984 <__assert_func>
 801b822:	6922      	ldr	r2, [r4, #16]
 801b824:	3202      	adds	r2, #2
 801b826:	f104 010c 	add.w	r1, r4, #12
 801b82a:	0092      	lsls	r2, r2, #2
 801b82c:	300c      	adds	r0, #12
 801b82e:	f7ff f894 	bl	801a95a <memcpy>
 801b832:	4621      	mov	r1, r4
 801b834:	4638      	mov	r0, r7
 801b836:	f7ff ffa5 	bl	801b784 <_Bfree>
 801b83a:	4644      	mov	r4, r8
 801b83c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b840:	3501      	adds	r5, #1
 801b842:	615e      	str	r6, [r3, #20]
 801b844:	6125      	str	r5, [r4, #16]
 801b846:	4620      	mov	r0, r4
 801b848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b84c:	0801ea12 	.word	0x0801ea12
 801b850:	0801ea23 	.word	0x0801ea23

0801b854 <__s2b>:
 801b854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b858:	460c      	mov	r4, r1
 801b85a:	4615      	mov	r5, r2
 801b85c:	461f      	mov	r7, r3
 801b85e:	2209      	movs	r2, #9
 801b860:	3308      	adds	r3, #8
 801b862:	4606      	mov	r6, r0
 801b864:	fb93 f3f2 	sdiv	r3, r3, r2
 801b868:	2100      	movs	r1, #0
 801b86a:	2201      	movs	r2, #1
 801b86c:	429a      	cmp	r2, r3
 801b86e:	db09      	blt.n	801b884 <__s2b+0x30>
 801b870:	4630      	mov	r0, r6
 801b872:	f7ff ff47 	bl	801b704 <_Balloc>
 801b876:	b940      	cbnz	r0, 801b88a <__s2b+0x36>
 801b878:	4602      	mov	r2, r0
 801b87a:	4b19      	ldr	r3, [pc, #100]	@ (801b8e0 <__s2b+0x8c>)
 801b87c:	4819      	ldr	r0, [pc, #100]	@ (801b8e4 <__s2b+0x90>)
 801b87e:	21d3      	movs	r1, #211	@ 0xd3
 801b880:	f7ff f880 	bl	801a984 <__assert_func>
 801b884:	0052      	lsls	r2, r2, #1
 801b886:	3101      	adds	r1, #1
 801b888:	e7f0      	b.n	801b86c <__s2b+0x18>
 801b88a:	9b08      	ldr	r3, [sp, #32]
 801b88c:	6143      	str	r3, [r0, #20]
 801b88e:	2d09      	cmp	r5, #9
 801b890:	f04f 0301 	mov.w	r3, #1
 801b894:	6103      	str	r3, [r0, #16]
 801b896:	dd16      	ble.n	801b8c6 <__s2b+0x72>
 801b898:	f104 0909 	add.w	r9, r4, #9
 801b89c:	46c8      	mov	r8, r9
 801b89e:	442c      	add	r4, r5
 801b8a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b8a4:	4601      	mov	r1, r0
 801b8a6:	3b30      	subs	r3, #48	@ 0x30
 801b8a8:	220a      	movs	r2, #10
 801b8aa:	4630      	mov	r0, r6
 801b8ac:	f7ff ff8c 	bl	801b7c8 <__multadd>
 801b8b0:	45a0      	cmp	r8, r4
 801b8b2:	d1f5      	bne.n	801b8a0 <__s2b+0x4c>
 801b8b4:	f1a5 0408 	sub.w	r4, r5, #8
 801b8b8:	444c      	add	r4, r9
 801b8ba:	1b2d      	subs	r5, r5, r4
 801b8bc:	1963      	adds	r3, r4, r5
 801b8be:	42bb      	cmp	r3, r7
 801b8c0:	db04      	blt.n	801b8cc <__s2b+0x78>
 801b8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b8c6:	340a      	adds	r4, #10
 801b8c8:	2509      	movs	r5, #9
 801b8ca:	e7f6      	b.n	801b8ba <__s2b+0x66>
 801b8cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b8d0:	4601      	mov	r1, r0
 801b8d2:	3b30      	subs	r3, #48	@ 0x30
 801b8d4:	220a      	movs	r2, #10
 801b8d6:	4630      	mov	r0, r6
 801b8d8:	f7ff ff76 	bl	801b7c8 <__multadd>
 801b8dc:	e7ee      	b.n	801b8bc <__s2b+0x68>
 801b8de:	bf00      	nop
 801b8e0:	0801ea12 	.word	0x0801ea12
 801b8e4:	0801ea23 	.word	0x0801ea23

0801b8e8 <__hi0bits>:
 801b8e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b8ec:	4603      	mov	r3, r0
 801b8ee:	bf36      	itet	cc
 801b8f0:	0403      	lslcc	r3, r0, #16
 801b8f2:	2000      	movcs	r0, #0
 801b8f4:	2010      	movcc	r0, #16
 801b8f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b8fa:	bf3c      	itt	cc
 801b8fc:	021b      	lslcc	r3, r3, #8
 801b8fe:	3008      	addcc	r0, #8
 801b900:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b904:	bf3c      	itt	cc
 801b906:	011b      	lslcc	r3, r3, #4
 801b908:	3004      	addcc	r0, #4
 801b90a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b90e:	bf3c      	itt	cc
 801b910:	009b      	lslcc	r3, r3, #2
 801b912:	3002      	addcc	r0, #2
 801b914:	2b00      	cmp	r3, #0
 801b916:	db05      	blt.n	801b924 <__hi0bits+0x3c>
 801b918:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b91c:	f100 0001 	add.w	r0, r0, #1
 801b920:	bf08      	it	eq
 801b922:	2020      	moveq	r0, #32
 801b924:	4770      	bx	lr

0801b926 <__lo0bits>:
 801b926:	6803      	ldr	r3, [r0, #0]
 801b928:	4602      	mov	r2, r0
 801b92a:	f013 0007 	ands.w	r0, r3, #7
 801b92e:	d00b      	beq.n	801b948 <__lo0bits+0x22>
 801b930:	07d9      	lsls	r1, r3, #31
 801b932:	d421      	bmi.n	801b978 <__lo0bits+0x52>
 801b934:	0798      	lsls	r0, r3, #30
 801b936:	bf49      	itett	mi
 801b938:	085b      	lsrmi	r3, r3, #1
 801b93a:	089b      	lsrpl	r3, r3, #2
 801b93c:	2001      	movmi	r0, #1
 801b93e:	6013      	strmi	r3, [r2, #0]
 801b940:	bf5c      	itt	pl
 801b942:	6013      	strpl	r3, [r2, #0]
 801b944:	2002      	movpl	r0, #2
 801b946:	4770      	bx	lr
 801b948:	b299      	uxth	r1, r3
 801b94a:	b909      	cbnz	r1, 801b950 <__lo0bits+0x2a>
 801b94c:	0c1b      	lsrs	r3, r3, #16
 801b94e:	2010      	movs	r0, #16
 801b950:	b2d9      	uxtb	r1, r3
 801b952:	b909      	cbnz	r1, 801b958 <__lo0bits+0x32>
 801b954:	3008      	adds	r0, #8
 801b956:	0a1b      	lsrs	r3, r3, #8
 801b958:	0719      	lsls	r1, r3, #28
 801b95a:	bf04      	itt	eq
 801b95c:	091b      	lsreq	r3, r3, #4
 801b95e:	3004      	addeq	r0, #4
 801b960:	0799      	lsls	r1, r3, #30
 801b962:	bf04      	itt	eq
 801b964:	089b      	lsreq	r3, r3, #2
 801b966:	3002      	addeq	r0, #2
 801b968:	07d9      	lsls	r1, r3, #31
 801b96a:	d403      	bmi.n	801b974 <__lo0bits+0x4e>
 801b96c:	085b      	lsrs	r3, r3, #1
 801b96e:	f100 0001 	add.w	r0, r0, #1
 801b972:	d003      	beq.n	801b97c <__lo0bits+0x56>
 801b974:	6013      	str	r3, [r2, #0]
 801b976:	4770      	bx	lr
 801b978:	2000      	movs	r0, #0
 801b97a:	4770      	bx	lr
 801b97c:	2020      	movs	r0, #32
 801b97e:	4770      	bx	lr

0801b980 <__i2b>:
 801b980:	b510      	push	{r4, lr}
 801b982:	460c      	mov	r4, r1
 801b984:	2101      	movs	r1, #1
 801b986:	f7ff febd 	bl	801b704 <_Balloc>
 801b98a:	4602      	mov	r2, r0
 801b98c:	b928      	cbnz	r0, 801b99a <__i2b+0x1a>
 801b98e:	4b05      	ldr	r3, [pc, #20]	@ (801b9a4 <__i2b+0x24>)
 801b990:	4805      	ldr	r0, [pc, #20]	@ (801b9a8 <__i2b+0x28>)
 801b992:	f240 1145 	movw	r1, #325	@ 0x145
 801b996:	f7fe fff5 	bl	801a984 <__assert_func>
 801b99a:	2301      	movs	r3, #1
 801b99c:	6144      	str	r4, [r0, #20]
 801b99e:	6103      	str	r3, [r0, #16]
 801b9a0:	bd10      	pop	{r4, pc}
 801b9a2:	bf00      	nop
 801b9a4:	0801ea12 	.word	0x0801ea12
 801b9a8:	0801ea23 	.word	0x0801ea23

0801b9ac <__multiply>:
 801b9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9b0:	4614      	mov	r4, r2
 801b9b2:	690a      	ldr	r2, [r1, #16]
 801b9b4:	6923      	ldr	r3, [r4, #16]
 801b9b6:	429a      	cmp	r2, r3
 801b9b8:	bfa8      	it	ge
 801b9ba:	4623      	movge	r3, r4
 801b9bc:	460f      	mov	r7, r1
 801b9be:	bfa4      	itt	ge
 801b9c0:	460c      	movge	r4, r1
 801b9c2:	461f      	movge	r7, r3
 801b9c4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801b9c8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801b9cc:	68a3      	ldr	r3, [r4, #8]
 801b9ce:	6861      	ldr	r1, [r4, #4]
 801b9d0:	eb0a 0609 	add.w	r6, sl, r9
 801b9d4:	42b3      	cmp	r3, r6
 801b9d6:	b085      	sub	sp, #20
 801b9d8:	bfb8      	it	lt
 801b9da:	3101      	addlt	r1, #1
 801b9dc:	f7ff fe92 	bl	801b704 <_Balloc>
 801b9e0:	b930      	cbnz	r0, 801b9f0 <__multiply+0x44>
 801b9e2:	4602      	mov	r2, r0
 801b9e4:	4b44      	ldr	r3, [pc, #272]	@ (801baf8 <__multiply+0x14c>)
 801b9e6:	4845      	ldr	r0, [pc, #276]	@ (801bafc <__multiply+0x150>)
 801b9e8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b9ec:	f7fe ffca 	bl	801a984 <__assert_func>
 801b9f0:	f100 0514 	add.w	r5, r0, #20
 801b9f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b9f8:	462b      	mov	r3, r5
 801b9fa:	2200      	movs	r2, #0
 801b9fc:	4543      	cmp	r3, r8
 801b9fe:	d321      	bcc.n	801ba44 <__multiply+0x98>
 801ba00:	f107 0114 	add.w	r1, r7, #20
 801ba04:	f104 0214 	add.w	r2, r4, #20
 801ba08:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801ba0c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801ba10:	9302      	str	r3, [sp, #8]
 801ba12:	1b13      	subs	r3, r2, r4
 801ba14:	3b15      	subs	r3, #21
 801ba16:	f023 0303 	bic.w	r3, r3, #3
 801ba1a:	3304      	adds	r3, #4
 801ba1c:	f104 0715 	add.w	r7, r4, #21
 801ba20:	42ba      	cmp	r2, r7
 801ba22:	bf38      	it	cc
 801ba24:	2304      	movcc	r3, #4
 801ba26:	9301      	str	r3, [sp, #4]
 801ba28:	9b02      	ldr	r3, [sp, #8]
 801ba2a:	9103      	str	r1, [sp, #12]
 801ba2c:	428b      	cmp	r3, r1
 801ba2e:	d80c      	bhi.n	801ba4a <__multiply+0x9e>
 801ba30:	2e00      	cmp	r6, #0
 801ba32:	dd03      	ble.n	801ba3c <__multiply+0x90>
 801ba34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801ba38:	2b00      	cmp	r3, #0
 801ba3a:	d05b      	beq.n	801baf4 <__multiply+0x148>
 801ba3c:	6106      	str	r6, [r0, #16]
 801ba3e:	b005      	add	sp, #20
 801ba40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba44:	f843 2b04 	str.w	r2, [r3], #4
 801ba48:	e7d8      	b.n	801b9fc <__multiply+0x50>
 801ba4a:	f8b1 a000 	ldrh.w	sl, [r1]
 801ba4e:	f1ba 0f00 	cmp.w	sl, #0
 801ba52:	d024      	beq.n	801ba9e <__multiply+0xf2>
 801ba54:	f104 0e14 	add.w	lr, r4, #20
 801ba58:	46a9      	mov	r9, r5
 801ba5a:	f04f 0c00 	mov.w	ip, #0
 801ba5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ba62:	f8d9 3000 	ldr.w	r3, [r9]
 801ba66:	fa1f fb87 	uxth.w	fp, r7
 801ba6a:	b29b      	uxth	r3, r3
 801ba6c:	fb0a 330b 	mla	r3, sl, fp, r3
 801ba70:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801ba74:	f8d9 7000 	ldr.w	r7, [r9]
 801ba78:	4463      	add	r3, ip
 801ba7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ba7e:	fb0a c70b 	mla	r7, sl, fp, ip
 801ba82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801ba86:	b29b      	uxth	r3, r3
 801ba88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ba8c:	4572      	cmp	r2, lr
 801ba8e:	f849 3b04 	str.w	r3, [r9], #4
 801ba92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ba96:	d8e2      	bhi.n	801ba5e <__multiply+0xb2>
 801ba98:	9b01      	ldr	r3, [sp, #4]
 801ba9a:	f845 c003 	str.w	ip, [r5, r3]
 801ba9e:	9b03      	ldr	r3, [sp, #12]
 801baa0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801baa4:	3104      	adds	r1, #4
 801baa6:	f1b9 0f00 	cmp.w	r9, #0
 801baaa:	d021      	beq.n	801baf0 <__multiply+0x144>
 801baac:	682b      	ldr	r3, [r5, #0]
 801baae:	f104 0c14 	add.w	ip, r4, #20
 801bab2:	46ae      	mov	lr, r5
 801bab4:	f04f 0a00 	mov.w	sl, #0
 801bab8:	f8bc b000 	ldrh.w	fp, [ip]
 801babc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801bac0:	fb09 770b 	mla	r7, r9, fp, r7
 801bac4:	4457      	add	r7, sl
 801bac6:	b29b      	uxth	r3, r3
 801bac8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801bacc:	f84e 3b04 	str.w	r3, [lr], #4
 801bad0:	f85c 3b04 	ldr.w	r3, [ip], #4
 801bad4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bad8:	f8be 3000 	ldrh.w	r3, [lr]
 801badc:	fb09 330a 	mla	r3, r9, sl, r3
 801bae0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801bae4:	4562      	cmp	r2, ip
 801bae6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801baea:	d8e5      	bhi.n	801bab8 <__multiply+0x10c>
 801baec:	9f01      	ldr	r7, [sp, #4]
 801baee:	51eb      	str	r3, [r5, r7]
 801baf0:	3504      	adds	r5, #4
 801baf2:	e799      	b.n	801ba28 <__multiply+0x7c>
 801baf4:	3e01      	subs	r6, #1
 801baf6:	e79b      	b.n	801ba30 <__multiply+0x84>
 801baf8:	0801ea12 	.word	0x0801ea12
 801bafc:	0801ea23 	.word	0x0801ea23

0801bb00 <__pow5mult>:
 801bb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb04:	4615      	mov	r5, r2
 801bb06:	f012 0203 	ands.w	r2, r2, #3
 801bb0a:	4607      	mov	r7, r0
 801bb0c:	460e      	mov	r6, r1
 801bb0e:	d007      	beq.n	801bb20 <__pow5mult+0x20>
 801bb10:	4c25      	ldr	r4, [pc, #148]	@ (801bba8 <__pow5mult+0xa8>)
 801bb12:	3a01      	subs	r2, #1
 801bb14:	2300      	movs	r3, #0
 801bb16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bb1a:	f7ff fe55 	bl	801b7c8 <__multadd>
 801bb1e:	4606      	mov	r6, r0
 801bb20:	10ad      	asrs	r5, r5, #2
 801bb22:	d03d      	beq.n	801bba0 <__pow5mult+0xa0>
 801bb24:	69fc      	ldr	r4, [r7, #28]
 801bb26:	b97c      	cbnz	r4, 801bb48 <__pow5mult+0x48>
 801bb28:	2010      	movs	r0, #16
 801bb2a:	f7fd faff 	bl	801912c <malloc>
 801bb2e:	4602      	mov	r2, r0
 801bb30:	61f8      	str	r0, [r7, #28]
 801bb32:	b928      	cbnz	r0, 801bb40 <__pow5mult+0x40>
 801bb34:	4b1d      	ldr	r3, [pc, #116]	@ (801bbac <__pow5mult+0xac>)
 801bb36:	481e      	ldr	r0, [pc, #120]	@ (801bbb0 <__pow5mult+0xb0>)
 801bb38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801bb3c:	f7fe ff22 	bl	801a984 <__assert_func>
 801bb40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bb44:	6004      	str	r4, [r0, #0]
 801bb46:	60c4      	str	r4, [r0, #12]
 801bb48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801bb4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bb50:	b94c      	cbnz	r4, 801bb66 <__pow5mult+0x66>
 801bb52:	f240 2171 	movw	r1, #625	@ 0x271
 801bb56:	4638      	mov	r0, r7
 801bb58:	f7ff ff12 	bl	801b980 <__i2b>
 801bb5c:	2300      	movs	r3, #0
 801bb5e:	f8c8 0008 	str.w	r0, [r8, #8]
 801bb62:	4604      	mov	r4, r0
 801bb64:	6003      	str	r3, [r0, #0]
 801bb66:	f04f 0900 	mov.w	r9, #0
 801bb6a:	07eb      	lsls	r3, r5, #31
 801bb6c:	d50a      	bpl.n	801bb84 <__pow5mult+0x84>
 801bb6e:	4631      	mov	r1, r6
 801bb70:	4622      	mov	r2, r4
 801bb72:	4638      	mov	r0, r7
 801bb74:	f7ff ff1a 	bl	801b9ac <__multiply>
 801bb78:	4631      	mov	r1, r6
 801bb7a:	4680      	mov	r8, r0
 801bb7c:	4638      	mov	r0, r7
 801bb7e:	f7ff fe01 	bl	801b784 <_Bfree>
 801bb82:	4646      	mov	r6, r8
 801bb84:	106d      	asrs	r5, r5, #1
 801bb86:	d00b      	beq.n	801bba0 <__pow5mult+0xa0>
 801bb88:	6820      	ldr	r0, [r4, #0]
 801bb8a:	b938      	cbnz	r0, 801bb9c <__pow5mult+0x9c>
 801bb8c:	4622      	mov	r2, r4
 801bb8e:	4621      	mov	r1, r4
 801bb90:	4638      	mov	r0, r7
 801bb92:	f7ff ff0b 	bl	801b9ac <__multiply>
 801bb96:	6020      	str	r0, [r4, #0]
 801bb98:	f8c0 9000 	str.w	r9, [r0]
 801bb9c:	4604      	mov	r4, r0
 801bb9e:	e7e4      	b.n	801bb6a <__pow5mult+0x6a>
 801bba0:	4630      	mov	r0, r6
 801bba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bba6:	bf00      	nop
 801bba8:	0801ea7c 	.word	0x0801ea7c
 801bbac:	0801e7c8 	.word	0x0801e7c8
 801bbb0:	0801ea23 	.word	0x0801ea23

0801bbb4 <__lshift>:
 801bbb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bbb8:	460c      	mov	r4, r1
 801bbba:	6849      	ldr	r1, [r1, #4]
 801bbbc:	6923      	ldr	r3, [r4, #16]
 801bbbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bbc2:	68a3      	ldr	r3, [r4, #8]
 801bbc4:	4607      	mov	r7, r0
 801bbc6:	4691      	mov	r9, r2
 801bbc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bbcc:	f108 0601 	add.w	r6, r8, #1
 801bbd0:	42b3      	cmp	r3, r6
 801bbd2:	db0b      	blt.n	801bbec <__lshift+0x38>
 801bbd4:	4638      	mov	r0, r7
 801bbd6:	f7ff fd95 	bl	801b704 <_Balloc>
 801bbda:	4605      	mov	r5, r0
 801bbdc:	b948      	cbnz	r0, 801bbf2 <__lshift+0x3e>
 801bbde:	4602      	mov	r2, r0
 801bbe0:	4b28      	ldr	r3, [pc, #160]	@ (801bc84 <__lshift+0xd0>)
 801bbe2:	4829      	ldr	r0, [pc, #164]	@ (801bc88 <__lshift+0xd4>)
 801bbe4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801bbe8:	f7fe fecc 	bl	801a984 <__assert_func>
 801bbec:	3101      	adds	r1, #1
 801bbee:	005b      	lsls	r3, r3, #1
 801bbf0:	e7ee      	b.n	801bbd0 <__lshift+0x1c>
 801bbf2:	2300      	movs	r3, #0
 801bbf4:	f100 0114 	add.w	r1, r0, #20
 801bbf8:	f100 0210 	add.w	r2, r0, #16
 801bbfc:	4618      	mov	r0, r3
 801bbfe:	4553      	cmp	r3, sl
 801bc00:	db33      	blt.n	801bc6a <__lshift+0xb6>
 801bc02:	6920      	ldr	r0, [r4, #16]
 801bc04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bc08:	f104 0314 	add.w	r3, r4, #20
 801bc0c:	f019 091f 	ands.w	r9, r9, #31
 801bc10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bc14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bc18:	d02b      	beq.n	801bc72 <__lshift+0xbe>
 801bc1a:	f1c9 0e20 	rsb	lr, r9, #32
 801bc1e:	468a      	mov	sl, r1
 801bc20:	2200      	movs	r2, #0
 801bc22:	6818      	ldr	r0, [r3, #0]
 801bc24:	fa00 f009 	lsl.w	r0, r0, r9
 801bc28:	4310      	orrs	r0, r2
 801bc2a:	f84a 0b04 	str.w	r0, [sl], #4
 801bc2e:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc32:	459c      	cmp	ip, r3
 801bc34:	fa22 f20e 	lsr.w	r2, r2, lr
 801bc38:	d8f3      	bhi.n	801bc22 <__lshift+0x6e>
 801bc3a:	ebac 0304 	sub.w	r3, ip, r4
 801bc3e:	3b15      	subs	r3, #21
 801bc40:	f023 0303 	bic.w	r3, r3, #3
 801bc44:	3304      	adds	r3, #4
 801bc46:	f104 0015 	add.w	r0, r4, #21
 801bc4a:	4584      	cmp	ip, r0
 801bc4c:	bf38      	it	cc
 801bc4e:	2304      	movcc	r3, #4
 801bc50:	50ca      	str	r2, [r1, r3]
 801bc52:	b10a      	cbz	r2, 801bc58 <__lshift+0xa4>
 801bc54:	f108 0602 	add.w	r6, r8, #2
 801bc58:	3e01      	subs	r6, #1
 801bc5a:	4638      	mov	r0, r7
 801bc5c:	612e      	str	r6, [r5, #16]
 801bc5e:	4621      	mov	r1, r4
 801bc60:	f7ff fd90 	bl	801b784 <_Bfree>
 801bc64:	4628      	mov	r0, r5
 801bc66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc6a:	f842 0f04 	str.w	r0, [r2, #4]!
 801bc6e:	3301      	adds	r3, #1
 801bc70:	e7c5      	b.n	801bbfe <__lshift+0x4a>
 801bc72:	3904      	subs	r1, #4
 801bc74:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc78:	f841 2f04 	str.w	r2, [r1, #4]!
 801bc7c:	459c      	cmp	ip, r3
 801bc7e:	d8f9      	bhi.n	801bc74 <__lshift+0xc0>
 801bc80:	e7ea      	b.n	801bc58 <__lshift+0xa4>
 801bc82:	bf00      	nop
 801bc84:	0801ea12 	.word	0x0801ea12
 801bc88:	0801ea23 	.word	0x0801ea23

0801bc8c <__mcmp>:
 801bc8c:	690a      	ldr	r2, [r1, #16]
 801bc8e:	4603      	mov	r3, r0
 801bc90:	6900      	ldr	r0, [r0, #16]
 801bc92:	1a80      	subs	r0, r0, r2
 801bc94:	b530      	push	{r4, r5, lr}
 801bc96:	d10e      	bne.n	801bcb6 <__mcmp+0x2a>
 801bc98:	3314      	adds	r3, #20
 801bc9a:	3114      	adds	r1, #20
 801bc9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801bca0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801bca4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bca8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801bcac:	4295      	cmp	r5, r2
 801bcae:	d003      	beq.n	801bcb8 <__mcmp+0x2c>
 801bcb0:	d205      	bcs.n	801bcbe <__mcmp+0x32>
 801bcb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bcb6:	bd30      	pop	{r4, r5, pc}
 801bcb8:	42a3      	cmp	r3, r4
 801bcba:	d3f3      	bcc.n	801bca4 <__mcmp+0x18>
 801bcbc:	e7fb      	b.n	801bcb6 <__mcmp+0x2a>
 801bcbe:	2001      	movs	r0, #1
 801bcc0:	e7f9      	b.n	801bcb6 <__mcmp+0x2a>
	...

0801bcc4 <__mdiff>:
 801bcc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcc8:	4689      	mov	r9, r1
 801bcca:	4606      	mov	r6, r0
 801bccc:	4611      	mov	r1, r2
 801bcce:	4648      	mov	r0, r9
 801bcd0:	4614      	mov	r4, r2
 801bcd2:	f7ff ffdb 	bl	801bc8c <__mcmp>
 801bcd6:	1e05      	subs	r5, r0, #0
 801bcd8:	d112      	bne.n	801bd00 <__mdiff+0x3c>
 801bcda:	4629      	mov	r1, r5
 801bcdc:	4630      	mov	r0, r6
 801bcde:	f7ff fd11 	bl	801b704 <_Balloc>
 801bce2:	4602      	mov	r2, r0
 801bce4:	b928      	cbnz	r0, 801bcf2 <__mdiff+0x2e>
 801bce6:	4b3f      	ldr	r3, [pc, #252]	@ (801bde4 <__mdiff+0x120>)
 801bce8:	f240 2137 	movw	r1, #567	@ 0x237
 801bcec:	483e      	ldr	r0, [pc, #248]	@ (801bde8 <__mdiff+0x124>)
 801bcee:	f7fe fe49 	bl	801a984 <__assert_func>
 801bcf2:	2301      	movs	r3, #1
 801bcf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bcf8:	4610      	mov	r0, r2
 801bcfa:	b003      	add	sp, #12
 801bcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd00:	bfbc      	itt	lt
 801bd02:	464b      	movlt	r3, r9
 801bd04:	46a1      	movlt	r9, r4
 801bd06:	4630      	mov	r0, r6
 801bd08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801bd0c:	bfba      	itte	lt
 801bd0e:	461c      	movlt	r4, r3
 801bd10:	2501      	movlt	r5, #1
 801bd12:	2500      	movge	r5, #0
 801bd14:	f7ff fcf6 	bl	801b704 <_Balloc>
 801bd18:	4602      	mov	r2, r0
 801bd1a:	b918      	cbnz	r0, 801bd24 <__mdiff+0x60>
 801bd1c:	4b31      	ldr	r3, [pc, #196]	@ (801bde4 <__mdiff+0x120>)
 801bd1e:	f240 2145 	movw	r1, #581	@ 0x245
 801bd22:	e7e3      	b.n	801bcec <__mdiff+0x28>
 801bd24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801bd28:	6926      	ldr	r6, [r4, #16]
 801bd2a:	60c5      	str	r5, [r0, #12]
 801bd2c:	f109 0310 	add.w	r3, r9, #16
 801bd30:	f109 0514 	add.w	r5, r9, #20
 801bd34:	f104 0e14 	add.w	lr, r4, #20
 801bd38:	f100 0b14 	add.w	fp, r0, #20
 801bd3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801bd40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801bd44:	9301      	str	r3, [sp, #4]
 801bd46:	46d9      	mov	r9, fp
 801bd48:	f04f 0c00 	mov.w	ip, #0
 801bd4c:	9b01      	ldr	r3, [sp, #4]
 801bd4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801bd52:	f853 af04 	ldr.w	sl, [r3, #4]!
 801bd56:	9301      	str	r3, [sp, #4]
 801bd58:	fa1f f38a 	uxth.w	r3, sl
 801bd5c:	4619      	mov	r1, r3
 801bd5e:	b283      	uxth	r3, r0
 801bd60:	1acb      	subs	r3, r1, r3
 801bd62:	0c00      	lsrs	r0, r0, #16
 801bd64:	4463      	add	r3, ip
 801bd66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801bd6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801bd6e:	b29b      	uxth	r3, r3
 801bd70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801bd74:	4576      	cmp	r6, lr
 801bd76:	f849 3b04 	str.w	r3, [r9], #4
 801bd7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bd7e:	d8e5      	bhi.n	801bd4c <__mdiff+0x88>
 801bd80:	1b33      	subs	r3, r6, r4
 801bd82:	3b15      	subs	r3, #21
 801bd84:	f023 0303 	bic.w	r3, r3, #3
 801bd88:	3415      	adds	r4, #21
 801bd8a:	3304      	adds	r3, #4
 801bd8c:	42a6      	cmp	r6, r4
 801bd8e:	bf38      	it	cc
 801bd90:	2304      	movcc	r3, #4
 801bd92:	441d      	add	r5, r3
 801bd94:	445b      	add	r3, fp
 801bd96:	461e      	mov	r6, r3
 801bd98:	462c      	mov	r4, r5
 801bd9a:	4544      	cmp	r4, r8
 801bd9c:	d30e      	bcc.n	801bdbc <__mdiff+0xf8>
 801bd9e:	f108 0103 	add.w	r1, r8, #3
 801bda2:	1b49      	subs	r1, r1, r5
 801bda4:	f021 0103 	bic.w	r1, r1, #3
 801bda8:	3d03      	subs	r5, #3
 801bdaa:	45a8      	cmp	r8, r5
 801bdac:	bf38      	it	cc
 801bdae:	2100      	movcc	r1, #0
 801bdb0:	440b      	add	r3, r1
 801bdb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bdb6:	b191      	cbz	r1, 801bdde <__mdiff+0x11a>
 801bdb8:	6117      	str	r7, [r2, #16]
 801bdba:	e79d      	b.n	801bcf8 <__mdiff+0x34>
 801bdbc:	f854 1b04 	ldr.w	r1, [r4], #4
 801bdc0:	46e6      	mov	lr, ip
 801bdc2:	0c08      	lsrs	r0, r1, #16
 801bdc4:	fa1c fc81 	uxtah	ip, ip, r1
 801bdc8:	4471      	add	r1, lr
 801bdca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801bdce:	b289      	uxth	r1, r1
 801bdd0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801bdd4:	f846 1b04 	str.w	r1, [r6], #4
 801bdd8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bddc:	e7dd      	b.n	801bd9a <__mdiff+0xd6>
 801bdde:	3f01      	subs	r7, #1
 801bde0:	e7e7      	b.n	801bdb2 <__mdiff+0xee>
 801bde2:	bf00      	nop
 801bde4:	0801ea12 	.word	0x0801ea12
 801bde8:	0801ea23 	.word	0x0801ea23

0801bdec <__ulp>:
 801bdec:	b082      	sub	sp, #8
 801bdee:	ed8d 0b00 	vstr	d0, [sp]
 801bdf2:	9a01      	ldr	r2, [sp, #4]
 801bdf4:	4b0f      	ldr	r3, [pc, #60]	@ (801be34 <__ulp+0x48>)
 801bdf6:	4013      	ands	r3, r2
 801bdf8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	dc08      	bgt.n	801be12 <__ulp+0x26>
 801be00:	425b      	negs	r3, r3
 801be02:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801be06:	ea4f 5223 	mov.w	r2, r3, asr #20
 801be0a:	da04      	bge.n	801be16 <__ulp+0x2a>
 801be0c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801be10:	4113      	asrs	r3, r2
 801be12:	2200      	movs	r2, #0
 801be14:	e008      	b.n	801be28 <__ulp+0x3c>
 801be16:	f1a2 0314 	sub.w	r3, r2, #20
 801be1a:	2b1e      	cmp	r3, #30
 801be1c:	bfda      	itte	le
 801be1e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801be22:	40da      	lsrle	r2, r3
 801be24:	2201      	movgt	r2, #1
 801be26:	2300      	movs	r3, #0
 801be28:	4619      	mov	r1, r3
 801be2a:	4610      	mov	r0, r2
 801be2c:	ec41 0b10 	vmov	d0, r0, r1
 801be30:	b002      	add	sp, #8
 801be32:	4770      	bx	lr
 801be34:	7ff00000 	.word	0x7ff00000

0801be38 <__b2d>:
 801be38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be3c:	6906      	ldr	r6, [r0, #16]
 801be3e:	f100 0814 	add.w	r8, r0, #20
 801be42:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801be46:	1f37      	subs	r7, r6, #4
 801be48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801be4c:	4610      	mov	r0, r2
 801be4e:	f7ff fd4b 	bl	801b8e8 <__hi0bits>
 801be52:	f1c0 0320 	rsb	r3, r0, #32
 801be56:	280a      	cmp	r0, #10
 801be58:	600b      	str	r3, [r1, #0]
 801be5a:	491b      	ldr	r1, [pc, #108]	@ (801bec8 <__b2d+0x90>)
 801be5c:	dc15      	bgt.n	801be8a <__b2d+0x52>
 801be5e:	f1c0 0c0b 	rsb	ip, r0, #11
 801be62:	fa22 f30c 	lsr.w	r3, r2, ip
 801be66:	45b8      	cmp	r8, r7
 801be68:	ea43 0501 	orr.w	r5, r3, r1
 801be6c:	bf34      	ite	cc
 801be6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801be72:	2300      	movcs	r3, #0
 801be74:	3015      	adds	r0, #21
 801be76:	fa02 f000 	lsl.w	r0, r2, r0
 801be7a:	fa23 f30c 	lsr.w	r3, r3, ip
 801be7e:	4303      	orrs	r3, r0
 801be80:	461c      	mov	r4, r3
 801be82:	ec45 4b10 	vmov	d0, r4, r5
 801be86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be8a:	45b8      	cmp	r8, r7
 801be8c:	bf3a      	itte	cc
 801be8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801be92:	f1a6 0708 	subcc.w	r7, r6, #8
 801be96:	2300      	movcs	r3, #0
 801be98:	380b      	subs	r0, #11
 801be9a:	d012      	beq.n	801bec2 <__b2d+0x8a>
 801be9c:	f1c0 0120 	rsb	r1, r0, #32
 801bea0:	fa23 f401 	lsr.w	r4, r3, r1
 801bea4:	4082      	lsls	r2, r0
 801bea6:	4322      	orrs	r2, r4
 801bea8:	4547      	cmp	r7, r8
 801beaa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801beae:	bf8c      	ite	hi
 801beb0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801beb4:	2200      	movls	r2, #0
 801beb6:	4083      	lsls	r3, r0
 801beb8:	40ca      	lsrs	r2, r1
 801beba:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801bebe:	4313      	orrs	r3, r2
 801bec0:	e7de      	b.n	801be80 <__b2d+0x48>
 801bec2:	ea42 0501 	orr.w	r5, r2, r1
 801bec6:	e7db      	b.n	801be80 <__b2d+0x48>
 801bec8:	3ff00000 	.word	0x3ff00000

0801becc <__d2b>:
 801becc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bed0:	460f      	mov	r7, r1
 801bed2:	2101      	movs	r1, #1
 801bed4:	ec59 8b10 	vmov	r8, r9, d0
 801bed8:	4616      	mov	r6, r2
 801beda:	f7ff fc13 	bl	801b704 <_Balloc>
 801bede:	4604      	mov	r4, r0
 801bee0:	b930      	cbnz	r0, 801bef0 <__d2b+0x24>
 801bee2:	4602      	mov	r2, r0
 801bee4:	4b23      	ldr	r3, [pc, #140]	@ (801bf74 <__d2b+0xa8>)
 801bee6:	4824      	ldr	r0, [pc, #144]	@ (801bf78 <__d2b+0xac>)
 801bee8:	f240 310f 	movw	r1, #783	@ 0x30f
 801beec:	f7fe fd4a 	bl	801a984 <__assert_func>
 801bef0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801bef4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bef8:	b10d      	cbz	r5, 801befe <__d2b+0x32>
 801befa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801befe:	9301      	str	r3, [sp, #4]
 801bf00:	f1b8 0300 	subs.w	r3, r8, #0
 801bf04:	d023      	beq.n	801bf4e <__d2b+0x82>
 801bf06:	4668      	mov	r0, sp
 801bf08:	9300      	str	r3, [sp, #0]
 801bf0a:	f7ff fd0c 	bl	801b926 <__lo0bits>
 801bf0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801bf12:	b1d0      	cbz	r0, 801bf4a <__d2b+0x7e>
 801bf14:	f1c0 0320 	rsb	r3, r0, #32
 801bf18:	fa02 f303 	lsl.w	r3, r2, r3
 801bf1c:	430b      	orrs	r3, r1
 801bf1e:	40c2      	lsrs	r2, r0
 801bf20:	6163      	str	r3, [r4, #20]
 801bf22:	9201      	str	r2, [sp, #4]
 801bf24:	9b01      	ldr	r3, [sp, #4]
 801bf26:	61a3      	str	r3, [r4, #24]
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	bf0c      	ite	eq
 801bf2c:	2201      	moveq	r2, #1
 801bf2e:	2202      	movne	r2, #2
 801bf30:	6122      	str	r2, [r4, #16]
 801bf32:	b1a5      	cbz	r5, 801bf5e <__d2b+0x92>
 801bf34:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801bf38:	4405      	add	r5, r0
 801bf3a:	603d      	str	r5, [r7, #0]
 801bf3c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801bf40:	6030      	str	r0, [r6, #0]
 801bf42:	4620      	mov	r0, r4
 801bf44:	b003      	add	sp, #12
 801bf46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf4a:	6161      	str	r1, [r4, #20]
 801bf4c:	e7ea      	b.n	801bf24 <__d2b+0x58>
 801bf4e:	a801      	add	r0, sp, #4
 801bf50:	f7ff fce9 	bl	801b926 <__lo0bits>
 801bf54:	9b01      	ldr	r3, [sp, #4]
 801bf56:	6163      	str	r3, [r4, #20]
 801bf58:	3020      	adds	r0, #32
 801bf5a:	2201      	movs	r2, #1
 801bf5c:	e7e8      	b.n	801bf30 <__d2b+0x64>
 801bf5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801bf62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801bf66:	6038      	str	r0, [r7, #0]
 801bf68:	6918      	ldr	r0, [r3, #16]
 801bf6a:	f7ff fcbd 	bl	801b8e8 <__hi0bits>
 801bf6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801bf72:	e7e5      	b.n	801bf40 <__d2b+0x74>
 801bf74:	0801ea12 	.word	0x0801ea12
 801bf78:	0801ea23 	.word	0x0801ea23

0801bf7c <__ratio>:
 801bf7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf80:	b085      	sub	sp, #20
 801bf82:	e9cd 1000 	strd	r1, r0, [sp]
 801bf86:	a902      	add	r1, sp, #8
 801bf88:	f7ff ff56 	bl	801be38 <__b2d>
 801bf8c:	9800      	ldr	r0, [sp, #0]
 801bf8e:	a903      	add	r1, sp, #12
 801bf90:	ec55 4b10 	vmov	r4, r5, d0
 801bf94:	f7ff ff50 	bl	801be38 <__b2d>
 801bf98:	9b01      	ldr	r3, [sp, #4]
 801bf9a:	6919      	ldr	r1, [r3, #16]
 801bf9c:	9b00      	ldr	r3, [sp, #0]
 801bf9e:	691b      	ldr	r3, [r3, #16]
 801bfa0:	1ac9      	subs	r1, r1, r3
 801bfa2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801bfa6:	1a9b      	subs	r3, r3, r2
 801bfa8:	ec5b ab10 	vmov	sl, fp, d0
 801bfac:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	bfce      	itee	gt
 801bfb4:	462a      	movgt	r2, r5
 801bfb6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801bfba:	465a      	movle	r2, fp
 801bfbc:	462f      	mov	r7, r5
 801bfbe:	46d9      	mov	r9, fp
 801bfc0:	bfcc      	ite	gt
 801bfc2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801bfc6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801bfca:	464b      	mov	r3, r9
 801bfcc:	4652      	mov	r2, sl
 801bfce:	4620      	mov	r0, r4
 801bfd0:	4639      	mov	r1, r7
 801bfd2:	f7e4 fc53 	bl	800087c <__aeabi_ddiv>
 801bfd6:	ec41 0b10 	vmov	d0, r0, r1
 801bfda:	b005      	add	sp, #20
 801bfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bfe0 <__copybits>:
 801bfe0:	3901      	subs	r1, #1
 801bfe2:	b570      	push	{r4, r5, r6, lr}
 801bfe4:	1149      	asrs	r1, r1, #5
 801bfe6:	6914      	ldr	r4, [r2, #16]
 801bfe8:	3101      	adds	r1, #1
 801bfea:	f102 0314 	add.w	r3, r2, #20
 801bfee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bff2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801bff6:	1f05      	subs	r5, r0, #4
 801bff8:	42a3      	cmp	r3, r4
 801bffa:	d30c      	bcc.n	801c016 <__copybits+0x36>
 801bffc:	1aa3      	subs	r3, r4, r2
 801bffe:	3b11      	subs	r3, #17
 801c000:	f023 0303 	bic.w	r3, r3, #3
 801c004:	3211      	adds	r2, #17
 801c006:	42a2      	cmp	r2, r4
 801c008:	bf88      	it	hi
 801c00a:	2300      	movhi	r3, #0
 801c00c:	4418      	add	r0, r3
 801c00e:	2300      	movs	r3, #0
 801c010:	4288      	cmp	r0, r1
 801c012:	d305      	bcc.n	801c020 <__copybits+0x40>
 801c014:	bd70      	pop	{r4, r5, r6, pc}
 801c016:	f853 6b04 	ldr.w	r6, [r3], #4
 801c01a:	f845 6f04 	str.w	r6, [r5, #4]!
 801c01e:	e7eb      	b.n	801bff8 <__copybits+0x18>
 801c020:	f840 3b04 	str.w	r3, [r0], #4
 801c024:	e7f4      	b.n	801c010 <__copybits+0x30>

0801c026 <__any_on>:
 801c026:	f100 0214 	add.w	r2, r0, #20
 801c02a:	6900      	ldr	r0, [r0, #16]
 801c02c:	114b      	asrs	r3, r1, #5
 801c02e:	4298      	cmp	r0, r3
 801c030:	b510      	push	{r4, lr}
 801c032:	db11      	blt.n	801c058 <__any_on+0x32>
 801c034:	dd0a      	ble.n	801c04c <__any_on+0x26>
 801c036:	f011 011f 	ands.w	r1, r1, #31
 801c03a:	d007      	beq.n	801c04c <__any_on+0x26>
 801c03c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c040:	fa24 f001 	lsr.w	r0, r4, r1
 801c044:	fa00 f101 	lsl.w	r1, r0, r1
 801c048:	428c      	cmp	r4, r1
 801c04a:	d10b      	bne.n	801c064 <__any_on+0x3e>
 801c04c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c050:	4293      	cmp	r3, r2
 801c052:	d803      	bhi.n	801c05c <__any_on+0x36>
 801c054:	2000      	movs	r0, #0
 801c056:	bd10      	pop	{r4, pc}
 801c058:	4603      	mov	r3, r0
 801c05a:	e7f7      	b.n	801c04c <__any_on+0x26>
 801c05c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c060:	2900      	cmp	r1, #0
 801c062:	d0f5      	beq.n	801c050 <__any_on+0x2a>
 801c064:	2001      	movs	r0, #1
 801c066:	e7f6      	b.n	801c056 <__any_on+0x30>

0801c068 <_malloc_usable_size_r>:
 801c068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c06c:	1f18      	subs	r0, r3, #4
 801c06e:	2b00      	cmp	r3, #0
 801c070:	bfbc      	itt	lt
 801c072:	580b      	ldrlt	r3, [r1, r0]
 801c074:	18c0      	addlt	r0, r0, r3
 801c076:	4770      	bx	lr

0801c078 <sulp>:
 801c078:	b570      	push	{r4, r5, r6, lr}
 801c07a:	4604      	mov	r4, r0
 801c07c:	460d      	mov	r5, r1
 801c07e:	ec45 4b10 	vmov	d0, r4, r5
 801c082:	4616      	mov	r6, r2
 801c084:	f7ff feb2 	bl	801bdec <__ulp>
 801c088:	ec51 0b10 	vmov	r0, r1, d0
 801c08c:	b17e      	cbz	r6, 801c0ae <sulp+0x36>
 801c08e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c092:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801c096:	2b00      	cmp	r3, #0
 801c098:	dd09      	ble.n	801c0ae <sulp+0x36>
 801c09a:	051b      	lsls	r3, r3, #20
 801c09c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801c0a0:	2400      	movs	r4, #0
 801c0a2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801c0a6:	4622      	mov	r2, r4
 801c0a8:	462b      	mov	r3, r5
 801c0aa:	f7e4 fabd 	bl	8000628 <__aeabi_dmul>
 801c0ae:	ec41 0b10 	vmov	d0, r0, r1
 801c0b2:	bd70      	pop	{r4, r5, r6, pc}
 801c0b4:	0000      	movs	r0, r0
	...

0801c0b8 <_strtod_l>:
 801c0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0bc:	b09f      	sub	sp, #124	@ 0x7c
 801c0be:	460c      	mov	r4, r1
 801c0c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 801c0c2:	2200      	movs	r2, #0
 801c0c4:	921a      	str	r2, [sp, #104]	@ 0x68
 801c0c6:	9005      	str	r0, [sp, #20]
 801c0c8:	f04f 0a00 	mov.w	sl, #0
 801c0cc:	f04f 0b00 	mov.w	fp, #0
 801c0d0:	460a      	mov	r2, r1
 801c0d2:	9219      	str	r2, [sp, #100]	@ 0x64
 801c0d4:	7811      	ldrb	r1, [r2, #0]
 801c0d6:	292b      	cmp	r1, #43	@ 0x2b
 801c0d8:	d04a      	beq.n	801c170 <_strtod_l+0xb8>
 801c0da:	d838      	bhi.n	801c14e <_strtod_l+0x96>
 801c0dc:	290d      	cmp	r1, #13
 801c0de:	d832      	bhi.n	801c146 <_strtod_l+0x8e>
 801c0e0:	2908      	cmp	r1, #8
 801c0e2:	d832      	bhi.n	801c14a <_strtod_l+0x92>
 801c0e4:	2900      	cmp	r1, #0
 801c0e6:	d03b      	beq.n	801c160 <_strtod_l+0xa8>
 801c0e8:	2200      	movs	r2, #0
 801c0ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c0ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801c0ee:	782a      	ldrb	r2, [r5, #0]
 801c0f0:	2a30      	cmp	r2, #48	@ 0x30
 801c0f2:	f040 80b3 	bne.w	801c25c <_strtod_l+0x1a4>
 801c0f6:	786a      	ldrb	r2, [r5, #1]
 801c0f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801c0fc:	2a58      	cmp	r2, #88	@ 0x58
 801c0fe:	d16e      	bne.n	801c1de <_strtod_l+0x126>
 801c100:	9302      	str	r3, [sp, #8]
 801c102:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c104:	9301      	str	r3, [sp, #4]
 801c106:	ab1a      	add	r3, sp, #104	@ 0x68
 801c108:	9300      	str	r3, [sp, #0]
 801c10a:	4a8e      	ldr	r2, [pc, #568]	@ (801c344 <_strtod_l+0x28c>)
 801c10c:	9805      	ldr	r0, [sp, #20]
 801c10e:	ab1b      	add	r3, sp, #108	@ 0x6c
 801c110:	a919      	add	r1, sp, #100	@ 0x64
 801c112:	f001 fa8b 	bl	801d62c <__gethex>
 801c116:	f010 060f 	ands.w	r6, r0, #15
 801c11a:	4604      	mov	r4, r0
 801c11c:	d005      	beq.n	801c12a <_strtod_l+0x72>
 801c11e:	2e06      	cmp	r6, #6
 801c120:	d128      	bne.n	801c174 <_strtod_l+0xbc>
 801c122:	3501      	adds	r5, #1
 801c124:	2300      	movs	r3, #0
 801c126:	9519      	str	r5, [sp, #100]	@ 0x64
 801c128:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c12a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	f040 858e 	bne.w	801cc4e <_strtod_l+0xb96>
 801c132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c134:	b1cb      	cbz	r3, 801c16a <_strtod_l+0xb2>
 801c136:	4652      	mov	r2, sl
 801c138:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801c13c:	ec43 2b10 	vmov	d0, r2, r3
 801c140:	b01f      	add	sp, #124	@ 0x7c
 801c142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c146:	2920      	cmp	r1, #32
 801c148:	d1ce      	bne.n	801c0e8 <_strtod_l+0x30>
 801c14a:	3201      	adds	r2, #1
 801c14c:	e7c1      	b.n	801c0d2 <_strtod_l+0x1a>
 801c14e:	292d      	cmp	r1, #45	@ 0x2d
 801c150:	d1ca      	bne.n	801c0e8 <_strtod_l+0x30>
 801c152:	2101      	movs	r1, #1
 801c154:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c156:	1c51      	adds	r1, r2, #1
 801c158:	9119      	str	r1, [sp, #100]	@ 0x64
 801c15a:	7852      	ldrb	r2, [r2, #1]
 801c15c:	2a00      	cmp	r2, #0
 801c15e:	d1c5      	bne.n	801c0ec <_strtod_l+0x34>
 801c160:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c162:	9419      	str	r4, [sp, #100]	@ 0x64
 801c164:	2b00      	cmp	r3, #0
 801c166:	f040 8570 	bne.w	801cc4a <_strtod_l+0xb92>
 801c16a:	4652      	mov	r2, sl
 801c16c:	465b      	mov	r3, fp
 801c16e:	e7e5      	b.n	801c13c <_strtod_l+0x84>
 801c170:	2100      	movs	r1, #0
 801c172:	e7ef      	b.n	801c154 <_strtod_l+0x9c>
 801c174:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c176:	b13a      	cbz	r2, 801c188 <_strtod_l+0xd0>
 801c178:	2135      	movs	r1, #53	@ 0x35
 801c17a:	a81c      	add	r0, sp, #112	@ 0x70
 801c17c:	f7ff ff30 	bl	801bfe0 <__copybits>
 801c180:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c182:	9805      	ldr	r0, [sp, #20]
 801c184:	f7ff fafe 	bl	801b784 <_Bfree>
 801c188:	3e01      	subs	r6, #1
 801c18a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c18c:	2e04      	cmp	r6, #4
 801c18e:	d806      	bhi.n	801c19e <_strtod_l+0xe6>
 801c190:	e8df f006 	tbb	[pc, r6]
 801c194:	201d0314 	.word	0x201d0314
 801c198:	14          	.byte	0x14
 801c199:	00          	.byte	0x00
 801c19a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801c19e:	05e1      	lsls	r1, r4, #23
 801c1a0:	bf48      	it	mi
 801c1a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801c1a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c1aa:	0d1b      	lsrs	r3, r3, #20
 801c1ac:	051b      	lsls	r3, r3, #20
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	d1bb      	bne.n	801c12a <_strtod_l+0x72>
 801c1b2:	f7fe fb9d 	bl	801a8f0 <__errno>
 801c1b6:	2322      	movs	r3, #34	@ 0x22
 801c1b8:	6003      	str	r3, [r0, #0]
 801c1ba:	e7b6      	b.n	801c12a <_strtod_l+0x72>
 801c1bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801c1c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801c1c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801c1c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c1cc:	e7e7      	b.n	801c19e <_strtod_l+0xe6>
 801c1ce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801c34c <_strtod_l+0x294>
 801c1d2:	e7e4      	b.n	801c19e <_strtod_l+0xe6>
 801c1d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801c1d8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801c1dc:	e7df      	b.n	801c19e <_strtod_l+0xe6>
 801c1de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c1e0:	1c5a      	adds	r2, r3, #1
 801c1e2:	9219      	str	r2, [sp, #100]	@ 0x64
 801c1e4:	785b      	ldrb	r3, [r3, #1]
 801c1e6:	2b30      	cmp	r3, #48	@ 0x30
 801c1e8:	d0f9      	beq.n	801c1de <_strtod_l+0x126>
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d09d      	beq.n	801c12a <_strtod_l+0x72>
 801c1ee:	2301      	movs	r3, #1
 801c1f0:	9309      	str	r3, [sp, #36]	@ 0x24
 801c1f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c1f4:	930c      	str	r3, [sp, #48]	@ 0x30
 801c1f6:	2300      	movs	r3, #0
 801c1f8:	9308      	str	r3, [sp, #32]
 801c1fa:	930a      	str	r3, [sp, #40]	@ 0x28
 801c1fc:	461f      	mov	r7, r3
 801c1fe:	220a      	movs	r2, #10
 801c200:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c202:	7805      	ldrb	r5, [r0, #0]
 801c204:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801c208:	b2d9      	uxtb	r1, r3
 801c20a:	2909      	cmp	r1, #9
 801c20c:	d928      	bls.n	801c260 <_strtod_l+0x1a8>
 801c20e:	494e      	ldr	r1, [pc, #312]	@ (801c348 <_strtod_l+0x290>)
 801c210:	2201      	movs	r2, #1
 801c212:	f7fe fa94 	bl	801a73e <strncmp>
 801c216:	2800      	cmp	r0, #0
 801c218:	d032      	beq.n	801c280 <_strtod_l+0x1c8>
 801c21a:	2000      	movs	r0, #0
 801c21c:	462a      	mov	r2, r5
 801c21e:	4681      	mov	r9, r0
 801c220:	463d      	mov	r5, r7
 801c222:	4603      	mov	r3, r0
 801c224:	2a65      	cmp	r2, #101	@ 0x65
 801c226:	d001      	beq.n	801c22c <_strtod_l+0x174>
 801c228:	2a45      	cmp	r2, #69	@ 0x45
 801c22a:	d114      	bne.n	801c256 <_strtod_l+0x19e>
 801c22c:	b91d      	cbnz	r5, 801c236 <_strtod_l+0x17e>
 801c22e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c230:	4302      	orrs	r2, r0
 801c232:	d095      	beq.n	801c160 <_strtod_l+0xa8>
 801c234:	2500      	movs	r5, #0
 801c236:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801c238:	1c62      	adds	r2, r4, #1
 801c23a:	9219      	str	r2, [sp, #100]	@ 0x64
 801c23c:	7862      	ldrb	r2, [r4, #1]
 801c23e:	2a2b      	cmp	r2, #43	@ 0x2b
 801c240:	d077      	beq.n	801c332 <_strtod_l+0x27a>
 801c242:	2a2d      	cmp	r2, #45	@ 0x2d
 801c244:	d07b      	beq.n	801c33e <_strtod_l+0x286>
 801c246:	f04f 0c00 	mov.w	ip, #0
 801c24a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801c24e:	2909      	cmp	r1, #9
 801c250:	f240 8082 	bls.w	801c358 <_strtod_l+0x2a0>
 801c254:	9419      	str	r4, [sp, #100]	@ 0x64
 801c256:	f04f 0800 	mov.w	r8, #0
 801c25a:	e0a2      	b.n	801c3a2 <_strtod_l+0x2ea>
 801c25c:	2300      	movs	r3, #0
 801c25e:	e7c7      	b.n	801c1f0 <_strtod_l+0x138>
 801c260:	2f08      	cmp	r7, #8
 801c262:	bfd5      	itete	le
 801c264:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801c266:	9908      	ldrgt	r1, [sp, #32]
 801c268:	fb02 3301 	mlale	r3, r2, r1, r3
 801c26c:	fb02 3301 	mlagt	r3, r2, r1, r3
 801c270:	f100 0001 	add.w	r0, r0, #1
 801c274:	bfd4      	ite	le
 801c276:	930a      	strle	r3, [sp, #40]	@ 0x28
 801c278:	9308      	strgt	r3, [sp, #32]
 801c27a:	3701      	adds	r7, #1
 801c27c:	9019      	str	r0, [sp, #100]	@ 0x64
 801c27e:	e7bf      	b.n	801c200 <_strtod_l+0x148>
 801c280:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c282:	1c5a      	adds	r2, r3, #1
 801c284:	9219      	str	r2, [sp, #100]	@ 0x64
 801c286:	785a      	ldrb	r2, [r3, #1]
 801c288:	b37f      	cbz	r7, 801c2ea <_strtod_l+0x232>
 801c28a:	4681      	mov	r9, r0
 801c28c:	463d      	mov	r5, r7
 801c28e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801c292:	2b09      	cmp	r3, #9
 801c294:	d912      	bls.n	801c2bc <_strtod_l+0x204>
 801c296:	2301      	movs	r3, #1
 801c298:	e7c4      	b.n	801c224 <_strtod_l+0x16c>
 801c29a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c29c:	1c5a      	adds	r2, r3, #1
 801c29e:	9219      	str	r2, [sp, #100]	@ 0x64
 801c2a0:	785a      	ldrb	r2, [r3, #1]
 801c2a2:	3001      	adds	r0, #1
 801c2a4:	2a30      	cmp	r2, #48	@ 0x30
 801c2a6:	d0f8      	beq.n	801c29a <_strtod_l+0x1e2>
 801c2a8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801c2ac:	2b08      	cmp	r3, #8
 801c2ae:	f200 84d3 	bhi.w	801cc58 <_strtod_l+0xba0>
 801c2b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c2b4:	930c      	str	r3, [sp, #48]	@ 0x30
 801c2b6:	4681      	mov	r9, r0
 801c2b8:	2000      	movs	r0, #0
 801c2ba:	4605      	mov	r5, r0
 801c2bc:	3a30      	subs	r2, #48	@ 0x30
 801c2be:	f100 0301 	add.w	r3, r0, #1
 801c2c2:	d02a      	beq.n	801c31a <_strtod_l+0x262>
 801c2c4:	4499      	add	r9, r3
 801c2c6:	eb00 0c05 	add.w	ip, r0, r5
 801c2ca:	462b      	mov	r3, r5
 801c2cc:	210a      	movs	r1, #10
 801c2ce:	4563      	cmp	r3, ip
 801c2d0:	d10d      	bne.n	801c2ee <_strtod_l+0x236>
 801c2d2:	1c69      	adds	r1, r5, #1
 801c2d4:	4401      	add	r1, r0
 801c2d6:	4428      	add	r0, r5
 801c2d8:	2808      	cmp	r0, #8
 801c2da:	dc16      	bgt.n	801c30a <_strtod_l+0x252>
 801c2dc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c2de:	230a      	movs	r3, #10
 801c2e0:	fb03 2300 	mla	r3, r3, r0, r2
 801c2e4:	930a      	str	r3, [sp, #40]	@ 0x28
 801c2e6:	2300      	movs	r3, #0
 801c2e8:	e018      	b.n	801c31c <_strtod_l+0x264>
 801c2ea:	4638      	mov	r0, r7
 801c2ec:	e7da      	b.n	801c2a4 <_strtod_l+0x1ec>
 801c2ee:	2b08      	cmp	r3, #8
 801c2f0:	f103 0301 	add.w	r3, r3, #1
 801c2f4:	dc03      	bgt.n	801c2fe <_strtod_l+0x246>
 801c2f6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801c2f8:	434e      	muls	r6, r1
 801c2fa:	960a      	str	r6, [sp, #40]	@ 0x28
 801c2fc:	e7e7      	b.n	801c2ce <_strtod_l+0x216>
 801c2fe:	2b10      	cmp	r3, #16
 801c300:	bfde      	ittt	le
 801c302:	9e08      	ldrle	r6, [sp, #32]
 801c304:	434e      	mulle	r6, r1
 801c306:	9608      	strle	r6, [sp, #32]
 801c308:	e7e1      	b.n	801c2ce <_strtod_l+0x216>
 801c30a:	280f      	cmp	r0, #15
 801c30c:	dceb      	bgt.n	801c2e6 <_strtod_l+0x22e>
 801c30e:	9808      	ldr	r0, [sp, #32]
 801c310:	230a      	movs	r3, #10
 801c312:	fb03 2300 	mla	r3, r3, r0, r2
 801c316:	9308      	str	r3, [sp, #32]
 801c318:	e7e5      	b.n	801c2e6 <_strtod_l+0x22e>
 801c31a:	4629      	mov	r1, r5
 801c31c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c31e:	1c50      	adds	r0, r2, #1
 801c320:	9019      	str	r0, [sp, #100]	@ 0x64
 801c322:	7852      	ldrb	r2, [r2, #1]
 801c324:	4618      	mov	r0, r3
 801c326:	460d      	mov	r5, r1
 801c328:	e7b1      	b.n	801c28e <_strtod_l+0x1d6>
 801c32a:	f04f 0900 	mov.w	r9, #0
 801c32e:	2301      	movs	r3, #1
 801c330:	e77d      	b.n	801c22e <_strtod_l+0x176>
 801c332:	f04f 0c00 	mov.w	ip, #0
 801c336:	1ca2      	adds	r2, r4, #2
 801c338:	9219      	str	r2, [sp, #100]	@ 0x64
 801c33a:	78a2      	ldrb	r2, [r4, #2]
 801c33c:	e785      	b.n	801c24a <_strtod_l+0x192>
 801c33e:	f04f 0c01 	mov.w	ip, #1
 801c342:	e7f8      	b.n	801c336 <_strtod_l+0x27e>
 801c344:	0801eb90 	.word	0x0801eb90
 801c348:	0801eb78 	.word	0x0801eb78
 801c34c:	7ff00000 	.word	0x7ff00000
 801c350:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c352:	1c51      	adds	r1, r2, #1
 801c354:	9119      	str	r1, [sp, #100]	@ 0x64
 801c356:	7852      	ldrb	r2, [r2, #1]
 801c358:	2a30      	cmp	r2, #48	@ 0x30
 801c35a:	d0f9      	beq.n	801c350 <_strtod_l+0x298>
 801c35c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801c360:	2908      	cmp	r1, #8
 801c362:	f63f af78 	bhi.w	801c256 <_strtod_l+0x19e>
 801c366:	3a30      	subs	r2, #48	@ 0x30
 801c368:	920e      	str	r2, [sp, #56]	@ 0x38
 801c36a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c36c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801c36e:	f04f 080a 	mov.w	r8, #10
 801c372:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c374:	1c56      	adds	r6, r2, #1
 801c376:	9619      	str	r6, [sp, #100]	@ 0x64
 801c378:	7852      	ldrb	r2, [r2, #1]
 801c37a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801c37e:	f1be 0f09 	cmp.w	lr, #9
 801c382:	d939      	bls.n	801c3f8 <_strtod_l+0x340>
 801c384:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c386:	1a76      	subs	r6, r6, r1
 801c388:	2e08      	cmp	r6, #8
 801c38a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801c38e:	dc03      	bgt.n	801c398 <_strtod_l+0x2e0>
 801c390:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c392:	4588      	cmp	r8, r1
 801c394:	bfa8      	it	ge
 801c396:	4688      	movge	r8, r1
 801c398:	f1bc 0f00 	cmp.w	ip, #0
 801c39c:	d001      	beq.n	801c3a2 <_strtod_l+0x2ea>
 801c39e:	f1c8 0800 	rsb	r8, r8, #0
 801c3a2:	2d00      	cmp	r5, #0
 801c3a4:	d14e      	bne.n	801c444 <_strtod_l+0x38c>
 801c3a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c3a8:	4308      	orrs	r0, r1
 801c3aa:	f47f aebe 	bne.w	801c12a <_strtod_l+0x72>
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	f47f aed6 	bne.w	801c160 <_strtod_l+0xa8>
 801c3b4:	2a69      	cmp	r2, #105	@ 0x69
 801c3b6:	d028      	beq.n	801c40a <_strtod_l+0x352>
 801c3b8:	dc25      	bgt.n	801c406 <_strtod_l+0x34e>
 801c3ba:	2a49      	cmp	r2, #73	@ 0x49
 801c3bc:	d025      	beq.n	801c40a <_strtod_l+0x352>
 801c3be:	2a4e      	cmp	r2, #78	@ 0x4e
 801c3c0:	f47f aece 	bne.w	801c160 <_strtod_l+0xa8>
 801c3c4:	499b      	ldr	r1, [pc, #620]	@ (801c634 <_strtod_l+0x57c>)
 801c3c6:	a819      	add	r0, sp, #100	@ 0x64
 801c3c8:	f001 fb52 	bl	801da70 <__match>
 801c3cc:	2800      	cmp	r0, #0
 801c3ce:	f43f aec7 	beq.w	801c160 <_strtod_l+0xa8>
 801c3d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c3d4:	781b      	ldrb	r3, [r3, #0]
 801c3d6:	2b28      	cmp	r3, #40	@ 0x28
 801c3d8:	d12e      	bne.n	801c438 <_strtod_l+0x380>
 801c3da:	4997      	ldr	r1, [pc, #604]	@ (801c638 <_strtod_l+0x580>)
 801c3dc:	aa1c      	add	r2, sp, #112	@ 0x70
 801c3de:	a819      	add	r0, sp, #100	@ 0x64
 801c3e0:	f001 fb5a 	bl	801da98 <__hexnan>
 801c3e4:	2805      	cmp	r0, #5
 801c3e6:	d127      	bne.n	801c438 <_strtod_l+0x380>
 801c3e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c3ea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801c3ee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801c3f2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801c3f6:	e698      	b.n	801c12a <_strtod_l+0x72>
 801c3f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c3fa:	fb08 2101 	mla	r1, r8, r1, r2
 801c3fe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801c402:	920e      	str	r2, [sp, #56]	@ 0x38
 801c404:	e7b5      	b.n	801c372 <_strtod_l+0x2ba>
 801c406:	2a6e      	cmp	r2, #110	@ 0x6e
 801c408:	e7da      	b.n	801c3c0 <_strtod_l+0x308>
 801c40a:	498c      	ldr	r1, [pc, #560]	@ (801c63c <_strtod_l+0x584>)
 801c40c:	a819      	add	r0, sp, #100	@ 0x64
 801c40e:	f001 fb2f 	bl	801da70 <__match>
 801c412:	2800      	cmp	r0, #0
 801c414:	f43f aea4 	beq.w	801c160 <_strtod_l+0xa8>
 801c418:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c41a:	4989      	ldr	r1, [pc, #548]	@ (801c640 <_strtod_l+0x588>)
 801c41c:	3b01      	subs	r3, #1
 801c41e:	a819      	add	r0, sp, #100	@ 0x64
 801c420:	9319      	str	r3, [sp, #100]	@ 0x64
 801c422:	f001 fb25 	bl	801da70 <__match>
 801c426:	b910      	cbnz	r0, 801c42e <_strtod_l+0x376>
 801c428:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c42a:	3301      	adds	r3, #1
 801c42c:	9319      	str	r3, [sp, #100]	@ 0x64
 801c42e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801c650 <_strtod_l+0x598>
 801c432:	f04f 0a00 	mov.w	sl, #0
 801c436:	e678      	b.n	801c12a <_strtod_l+0x72>
 801c438:	4882      	ldr	r0, [pc, #520]	@ (801c644 <_strtod_l+0x58c>)
 801c43a:	f001 f881 	bl	801d540 <nan>
 801c43e:	ec5b ab10 	vmov	sl, fp, d0
 801c442:	e672      	b.n	801c12a <_strtod_l+0x72>
 801c444:	eba8 0309 	sub.w	r3, r8, r9
 801c448:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c44a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c44c:	2f00      	cmp	r7, #0
 801c44e:	bf08      	it	eq
 801c450:	462f      	moveq	r7, r5
 801c452:	2d10      	cmp	r5, #16
 801c454:	462c      	mov	r4, r5
 801c456:	bfa8      	it	ge
 801c458:	2410      	movge	r4, #16
 801c45a:	f7e4 f86b 	bl	8000534 <__aeabi_ui2d>
 801c45e:	2d09      	cmp	r5, #9
 801c460:	4682      	mov	sl, r0
 801c462:	468b      	mov	fp, r1
 801c464:	dc13      	bgt.n	801c48e <_strtod_l+0x3d6>
 801c466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c468:	2b00      	cmp	r3, #0
 801c46a:	f43f ae5e 	beq.w	801c12a <_strtod_l+0x72>
 801c46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c470:	dd78      	ble.n	801c564 <_strtod_l+0x4ac>
 801c472:	2b16      	cmp	r3, #22
 801c474:	dc5f      	bgt.n	801c536 <_strtod_l+0x47e>
 801c476:	4974      	ldr	r1, [pc, #464]	@ (801c648 <_strtod_l+0x590>)
 801c478:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c47c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c480:	4652      	mov	r2, sl
 801c482:	465b      	mov	r3, fp
 801c484:	f7e4 f8d0 	bl	8000628 <__aeabi_dmul>
 801c488:	4682      	mov	sl, r0
 801c48a:	468b      	mov	fp, r1
 801c48c:	e64d      	b.n	801c12a <_strtod_l+0x72>
 801c48e:	4b6e      	ldr	r3, [pc, #440]	@ (801c648 <_strtod_l+0x590>)
 801c490:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c494:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801c498:	f7e4 f8c6 	bl	8000628 <__aeabi_dmul>
 801c49c:	4682      	mov	sl, r0
 801c49e:	9808      	ldr	r0, [sp, #32]
 801c4a0:	468b      	mov	fp, r1
 801c4a2:	f7e4 f847 	bl	8000534 <__aeabi_ui2d>
 801c4a6:	4602      	mov	r2, r0
 801c4a8:	460b      	mov	r3, r1
 801c4aa:	4650      	mov	r0, sl
 801c4ac:	4659      	mov	r1, fp
 801c4ae:	f7e3 ff05 	bl	80002bc <__adddf3>
 801c4b2:	2d0f      	cmp	r5, #15
 801c4b4:	4682      	mov	sl, r0
 801c4b6:	468b      	mov	fp, r1
 801c4b8:	ddd5      	ble.n	801c466 <_strtod_l+0x3ae>
 801c4ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c4bc:	1b2c      	subs	r4, r5, r4
 801c4be:	441c      	add	r4, r3
 801c4c0:	2c00      	cmp	r4, #0
 801c4c2:	f340 8096 	ble.w	801c5f2 <_strtod_l+0x53a>
 801c4c6:	f014 030f 	ands.w	r3, r4, #15
 801c4ca:	d00a      	beq.n	801c4e2 <_strtod_l+0x42a>
 801c4cc:	495e      	ldr	r1, [pc, #376]	@ (801c648 <_strtod_l+0x590>)
 801c4ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c4d2:	4652      	mov	r2, sl
 801c4d4:	465b      	mov	r3, fp
 801c4d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4da:	f7e4 f8a5 	bl	8000628 <__aeabi_dmul>
 801c4de:	4682      	mov	sl, r0
 801c4e0:	468b      	mov	fp, r1
 801c4e2:	f034 040f 	bics.w	r4, r4, #15
 801c4e6:	d073      	beq.n	801c5d0 <_strtod_l+0x518>
 801c4e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801c4ec:	dd48      	ble.n	801c580 <_strtod_l+0x4c8>
 801c4ee:	2400      	movs	r4, #0
 801c4f0:	46a0      	mov	r8, r4
 801c4f2:	940a      	str	r4, [sp, #40]	@ 0x28
 801c4f4:	46a1      	mov	r9, r4
 801c4f6:	9a05      	ldr	r2, [sp, #20]
 801c4f8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801c650 <_strtod_l+0x598>
 801c4fc:	2322      	movs	r3, #34	@ 0x22
 801c4fe:	6013      	str	r3, [r2, #0]
 801c500:	f04f 0a00 	mov.w	sl, #0
 801c504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c506:	2b00      	cmp	r3, #0
 801c508:	f43f ae0f 	beq.w	801c12a <_strtod_l+0x72>
 801c50c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c50e:	9805      	ldr	r0, [sp, #20]
 801c510:	f7ff f938 	bl	801b784 <_Bfree>
 801c514:	9805      	ldr	r0, [sp, #20]
 801c516:	4649      	mov	r1, r9
 801c518:	f7ff f934 	bl	801b784 <_Bfree>
 801c51c:	9805      	ldr	r0, [sp, #20]
 801c51e:	4641      	mov	r1, r8
 801c520:	f7ff f930 	bl	801b784 <_Bfree>
 801c524:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c526:	9805      	ldr	r0, [sp, #20]
 801c528:	f7ff f92c 	bl	801b784 <_Bfree>
 801c52c:	9805      	ldr	r0, [sp, #20]
 801c52e:	4621      	mov	r1, r4
 801c530:	f7ff f928 	bl	801b784 <_Bfree>
 801c534:	e5f9      	b.n	801c12a <_strtod_l+0x72>
 801c536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c538:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801c53c:	4293      	cmp	r3, r2
 801c53e:	dbbc      	blt.n	801c4ba <_strtod_l+0x402>
 801c540:	4c41      	ldr	r4, [pc, #260]	@ (801c648 <_strtod_l+0x590>)
 801c542:	f1c5 050f 	rsb	r5, r5, #15
 801c546:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801c54a:	4652      	mov	r2, sl
 801c54c:	465b      	mov	r3, fp
 801c54e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c552:	f7e4 f869 	bl	8000628 <__aeabi_dmul>
 801c556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c558:	1b5d      	subs	r5, r3, r5
 801c55a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801c55e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c562:	e78f      	b.n	801c484 <_strtod_l+0x3cc>
 801c564:	3316      	adds	r3, #22
 801c566:	dba8      	blt.n	801c4ba <_strtod_l+0x402>
 801c568:	4b37      	ldr	r3, [pc, #220]	@ (801c648 <_strtod_l+0x590>)
 801c56a:	eba9 0808 	sub.w	r8, r9, r8
 801c56e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801c572:	e9d8 2300 	ldrd	r2, r3, [r8]
 801c576:	4650      	mov	r0, sl
 801c578:	4659      	mov	r1, fp
 801c57a:	f7e4 f97f 	bl	800087c <__aeabi_ddiv>
 801c57e:	e783      	b.n	801c488 <_strtod_l+0x3d0>
 801c580:	4b32      	ldr	r3, [pc, #200]	@ (801c64c <_strtod_l+0x594>)
 801c582:	9308      	str	r3, [sp, #32]
 801c584:	2300      	movs	r3, #0
 801c586:	1124      	asrs	r4, r4, #4
 801c588:	4650      	mov	r0, sl
 801c58a:	4659      	mov	r1, fp
 801c58c:	461e      	mov	r6, r3
 801c58e:	2c01      	cmp	r4, #1
 801c590:	dc21      	bgt.n	801c5d6 <_strtod_l+0x51e>
 801c592:	b10b      	cbz	r3, 801c598 <_strtod_l+0x4e0>
 801c594:	4682      	mov	sl, r0
 801c596:	468b      	mov	fp, r1
 801c598:	492c      	ldr	r1, [pc, #176]	@ (801c64c <_strtod_l+0x594>)
 801c59a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801c59e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801c5a2:	4652      	mov	r2, sl
 801c5a4:	465b      	mov	r3, fp
 801c5a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c5aa:	f7e4 f83d 	bl	8000628 <__aeabi_dmul>
 801c5ae:	4b28      	ldr	r3, [pc, #160]	@ (801c650 <_strtod_l+0x598>)
 801c5b0:	460a      	mov	r2, r1
 801c5b2:	400b      	ands	r3, r1
 801c5b4:	4927      	ldr	r1, [pc, #156]	@ (801c654 <_strtod_l+0x59c>)
 801c5b6:	428b      	cmp	r3, r1
 801c5b8:	4682      	mov	sl, r0
 801c5ba:	d898      	bhi.n	801c4ee <_strtod_l+0x436>
 801c5bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801c5c0:	428b      	cmp	r3, r1
 801c5c2:	bf86      	itte	hi
 801c5c4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801c658 <_strtod_l+0x5a0>
 801c5c8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 801c5cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801c5d0:	2300      	movs	r3, #0
 801c5d2:	9308      	str	r3, [sp, #32]
 801c5d4:	e07a      	b.n	801c6cc <_strtod_l+0x614>
 801c5d6:	07e2      	lsls	r2, r4, #31
 801c5d8:	d505      	bpl.n	801c5e6 <_strtod_l+0x52e>
 801c5da:	9b08      	ldr	r3, [sp, #32]
 801c5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5e0:	f7e4 f822 	bl	8000628 <__aeabi_dmul>
 801c5e4:	2301      	movs	r3, #1
 801c5e6:	9a08      	ldr	r2, [sp, #32]
 801c5e8:	3208      	adds	r2, #8
 801c5ea:	3601      	adds	r6, #1
 801c5ec:	1064      	asrs	r4, r4, #1
 801c5ee:	9208      	str	r2, [sp, #32]
 801c5f0:	e7cd      	b.n	801c58e <_strtod_l+0x4d6>
 801c5f2:	d0ed      	beq.n	801c5d0 <_strtod_l+0x518>
 801c5f4:	4264      	negs	r4, r4
 801c5f6:	f014 020f 	ands.w	r2, r4, #15
 801c5fa:	d00a      	beq.n	801c612 <_strtod_l+0x55a>
 801c5fc:	4b12      	ldr	r3, [pc, #72]	@ (801c648 <_strtod_l+0x590>)
 801c5fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c602:	4650      	mov	r0, sl
 801c604:	4659      	mov	r1, fp
 801c606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c60a:	f7e4 f937 	bl	800087c <__aeabi_ddiv>
 801c60e:	4682      	mov	sl, r0
 801c610:	468b      	mov	fp, r1
 801c612:	1124      	asrs	r4, r4, #4
 801c614:	d0dc      	beq.n	801c5d0 <_strtod_l+0x518>
 801c616:	2c1f      	cmp	r4, #31
 801c618:	dd20      	ble.n	801c65c <_strtod_l+0x5a4>
 801c61a:	2400      	movs	r4, #0
 801c61c:	46a0      	mov	r8, r4
 801c61e:	940a      	str	r4, [sp, #40]	@ 0x28
 801c620:	46a1      	mov	r9, r4
 801c622:	9a05      	ldr	r2, [sp, #20]
 801c624:	2322      	movs	r3, #34	@ 0x22
 801c626:	f04f 0a00 	mov.w	sl, #0
 801c62a:	f04f 0b00 	mov.w	fp, #0
 801c62e:	6013      	str	r3, [r2, #0]
 801c630:	e768      	b.n	801c504 <_strtod_l+0x44c>
 801c632:	bf00      	nop
 801c634:	0801e945 	.word	0x0801e945
 801c638:	0801eb7c 	.word	0x0801eb7c
 801c63c:	0801e93d 	.word	0x0801e93d
 801c640:	0801e9b0 	.word	0x0801e9b0
 801c644:	0801e9ac 	.word	0x0801e9ac
 801c648:	0801eab0 	.word	0x0801eab0
 801c64c:	0801ea88 	.word	0x0801ea88
 801c650:	7ff00000 	.word	0x7ff00000
 801c654:	7ca00000 	.word	0x7ca00000
 801c658:	7fefffff 	.word	0x7fefffff
 801c65c:	f014 0310 	ands.w	r3, r4, #16
 801c660:	bf18      	it	ne
 801c662:	236a      	movne	r3, #106	@ 0x6a
 801c664:	4ea9      	ldr	r6, [pc, #676]	@ (801c90c <_strtod_l+0x854>)
 801c666:	9308      	str	r3, [sp, #32]
 801c668:	4650      	mov	r0, sl
 801c66a:	4659      	mov	r1, fp
 801c66c:	2300      	movs	r3, #0
 801c66e:	07e2      	lsls	r2, r4, #31
 801c670:	d504      	bpl.n	801c67c <_strtod_l+0x5c4>
 801c672:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c676:	f7e3 ffd7 	bl	8000628 <__aeabi_dmul>
 801c67a:	2301      	movs	r3, #1
 801c67c:	1064      	asrs	r4, r4, #1
 801c67e:	f106 0608 	add.w	r6, r6, #8
 801c682:	d1f4      	bne.n	801c66e <_strtod_l+0x5b6>
 801c684:	b10b      	cbz	r3, 801c68a <_strtod_l+0x5d2>
 801c686:	4682      	mov	sl, r0
 801c688:	468b      	mov	fp, r1
 801c68a:	9b08      	ldr	r3, [sp, #32]
 801c68c:	b1b3      	cbz	r3, 801c6bc <_strtod_l+0x604>
 801c68e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801c692:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801c696:	2b00      	cmp	r3, #0
 801c698:	4659      	mov	r1, fp
 801c69a:	dd0f      	ble.n	801c6bc <_strtod_l+0x604>
 801c69c:	2b1f      	cmp	r3, #31
 801c69e:	dd55      	ble.n	801c74c <_strtod_l+0x694>
 801c6a0:	2b34      	cmp	r3, #52	@ 0x34
 801c6a2:	bfde      	ittt	le
 801c6a4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 801c6a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801c6ac:	4093      	lslle	r3, r2
 801c6ae:	f04f 0a00 	mov.w	sl, #0
 801c6b2:	bfcc      	ite	gt
 801c6b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801c6b8:	ea03 0b01 	andle.w	fp, r3, r1
 801c6bc:	2200      	movs	r2, #0
 801c6be:	2300      	movs	r3, #0
 801c6c0:	4650      	mov	r0, sl
 801c6c2:	4659      	mov	r1, fp
 801c6c4:	f7e4 fa18 	bl	8000af8 <__aeabi_dcmpeq>
 801c6c8:	2800      	cmp	r0, #0
 801c6ca:	d1a6      	bne.n	801c61a <_strtod_l+0x562>
 801c6cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c6ce:	9300      	str	r3, [sp, #0]
 801c6d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c6d2:	9805      	ldr	r0, [sp, #20]
 801c6d4:	462b      	mov	r3, r5
 801c6d6:	463a      	mov	r2, r7
 801c6d8:	f7ff f8bc 	bl	801b854 <__s2b>
 801c6dc:	900a      	str	r0, [sp, #40]	@ 0x28
 801c6de:	2800      	cmp	r0, #0
 801c6e0:	f43f af05 	beq.w	801c4ee <_strtod_l+0x436>
 801c6e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c6e6:	2a00      	cmp	r2, #0
 801c6e8:	eba9 0308 	sub.w	r3, r9, r8
 801c6ec:	bfa8      	it	ge
 801c6ee:	2300      	movge	r3, #0
 801c6f0:	9312      	str	r3, [sp, #72]	@ 0x48
 801c6f2:	2400      	movs	r4, #0
 801c6f4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801c6f8:	9316      	str	r3, [sp, #88]	@ 0x58
 801c6fa:	46a0      	mov	r8, r4
 801c6fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c6fe:	9805      	ldr	r0, [sp, #20]
 801c700:	6859      	ldr	r1, [r3, #4]
 801c702:	f7fe ffff 	bl	801b704 <_Balloc>
 801c706:	4681      	mov	r9, r0
 801c708:	2800      	cmp	r0, #0
 801c70a:	f43f aef4 	beq.w	801c4f6 <_strtod_l+0x43e>
 801c70e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c710:	691a      	ldr	r2, [r3, #16]
 801c712:	3202      	adds	r2, #2
 801c714:	f103 010c 	add.w	r1, r3, #12
 801c718:	0092      	lsls	r2, r2, #2
 801c71a:	300c      	adds	r0, #12
 801c71c:	f7fe f91d 	bl	801a95a <memcpy>
 801c720:	ec4b ab10 	vmov	d0, sl, fp
 801c724:	9805      	ldr	r0, [sp, #20]
 801c726:	aa1c      	add	r2, sp, #112	@ 0x70
 801c728:	a91b      	add	r1, sp, #108	@ 0x6c
 801c72a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801c72e:	f7ff fbcd 	bl	801becc <__d2b>
 801c732:	901a      	str	r0, [sp, #104]	@ 0x68
 801c734:	2800      	cmp	r0, #0
 801c736:	f43f aede 	beq.w	801c4f6 <_strtod_l+0x43e>
 801c73a:	9805      	ldr	r0, [sp, #20]
 801c73c:	2101      	movs	r1, #1
 801c73e:	f7ff f91f 	bl	801b980 <__i2b>
 801c742:	4680      	mov	r8, r0
 801c744:	b948      	cbnz	r0, 801c75a <_strtod_l+0x6a2>
 801c746:	f04f 0800 	mov.w	r8, #0
 801c74a:	e6d4      	b.n	801c4f6 <_strtod_l+0x43e>
 801c74c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c750:	fa02 f303 	lsl.w	r3, r2, r3
 801c754:	ea03 0a0a 	and.w	sl, r3, sl
 801c758:	e7b0      	b.n	801c6bc <_strtod_l+0x604>
 801c75a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801c75c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801c75e:	2d00      	cmp	r5, #0
 801c760:	bfab      	itete	ge
 801c762:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801c764:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801c766:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801c768:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801c76a:	bfac      	ite	ge
 801c76c:	18ef      	addge	r7, r5, r3
 801c76e:	1b5e      	sublt	r6, r3, r5
 801c770:	9b08      	ldr	r3, [sp, #32]
 801c772:	1aed      	subs	r5, r5, r3
 801c774:	4415      	add	r5, r2
 801c776:	4b66      	ldr	r3, [pc, #408]	@ (801c910 <_strtod_l+0x858>)
 801c778:	3d01      	subs	r5, #1
 801c77a:	429d      	cmp	r5, r3
 801c77c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801c780:	da50      	bge.n	801c824 <_strtod_l+0x76c>
 801c782:	1b5b      	subs	r3, r3, r5
 801c784:	2b1f      	cmp	r3, #31
 801c786:	eba2 0203 	sub.w	r2, r2, r3
 801c78a:	f04f 0101 	mov.w	r1, #1
 801c78e:	dc3d      	bgt.n	801c80c <_strtod_l+0x754>
 801c790:	fa01 f303 	lsl.w	r3, r1, r3
 801c794:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c796:	2300      	movs	r3, #0
 801c798:	9310      	str	r3, [sp, #64]	@ 0x40
 801c79a:	18bd      	adds	r5, r7, r2
 801c79c:	9b08      	ldr	r3, [sp, #32]
 801c79e:	42af      	cmp	r7, r5
 801c7a0:	4416      	add	r6, r2
 801c7a2:	441e      	add	r6, r3
 801c7a4:	463b      	mov	r3, r7
 801c7a6:	bfa8      	it	ge
 801c7a8:	462b      	movge	r3, r5
 801c7aa:	42b3      	cmp	r3, r6
 801c7ac:	bfa8      	it	ge
 801c7ae:	4633      	movge	r3, r6
 801c7b0:	2b00      	cmp	r3, #0
 801c7b2:	bfc2      	ittt	gt
 801c7b4:	1aed      	subgt	r5, r5, r3
 801c7b6:	1af6      	subgt	r6, r6, r3
 801c7b8:	1aff      	subgt	r7, r7, r3
 801c7ba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	dd16      	ble.n	801c7ee <_strtod_l+0x736>
 801c7c0:	4641      	mov	r1, r8
 801c7c2:	9805      	ldr	r0, [sp, #20]
 801c7c4:	461a      	mov	r2, r3
 801c7c6:	f7ff f99b 	bl	801bb00 <__pow5mult>
 801c7ca:	4680      	mov	r8, r0
 801c7cc:	2800      	cmp	r0, #0
 801c7ce:	d0ba      	beq.n	801c746 <_strtod_l+0x68e>
 801c7d0:	4601      	mov	r1, r0
 801c7d2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c7d4:	9805      	ldr	r0, [sp, #20]
 801c7d6:	f7ff f8e9 	bl	801b9ac <__multiply>
 801c7da:	900e      	str	r0, [sp, #56]	@ 0x38
 801c7dc:	2800      	cmp	r0, #0
 801c7de:	f43f ae8a 	beq.w	801c4f6 <_strtod_l+0x43e>
 801c7e2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c7e4:	9805      	ldr	r0, [sp, #20]
 801c7e6:	f7fe ffcd 	bl	801b784 <_Bfree>
 801c7ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c7ec:	931a      	str	r3, [sp, #104]	@ 0x68
 801c7ee:	2d00      	cmp	r5, #0
 801c7f0:	dc1d      	bgt.n	801c82e <_strtod_l+0x776>
 801c7f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c7f4:	2b00      	cmp	r3, #0
 801c7f6:	dd23      	ble.n	801c840 <_strtod_l+0x788>
 801c7f8:	4649      	mov	r1, r9
 801c7fa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c7fc:	9805      	ldr	r0, [sp, #20]
 801c7fe:	f7ff f97f 	bl	801bb00 <__pow5mult>
 801c802:	4681      	mov	r9, r0
 801c804:	b9e0      	cbnz	r0, 801c840 <_strtod_l+0x788>
 801c806:	f04f 0900 	mov.w	r9, #0
 801c80a:	e674      	b.n	801c4f6 <_strtod_l+0x43e>
 801c80c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801c810:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801c814:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801c818:	35e2      	adds	r5, #226	@ 0xe2
 801c81a:	fa01 f305 	lsl.w	r3, r1, r5
 801c81e:	9310      	str	r3, [sp, #64]	@ 0x40
 801c820:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c822:	e7ba      	b.n	801c79a <_strtod_l+0x6e2>
 801c824:	2300      	movs	r3, #0
 801c826:	9310      	str	r3, [sp, #64]	@ 0x40
 801c828:	2301      	movs	r3, #1
 801c82a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c82c:	e7b5      	b.n	801c79a <_strtod_l+0x6e2>
 801c82e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c830:	9805      	ldr	r0, [sp, #20]
 801c832:	462a      	mov	r2, r5
 801c834:	f7ff f9be 	bl	801bbb4 <__lshift>
 801c838:	901a      	str	r0, [sp, #104]	@ 0x68
 801c83a:	2800      	cmp	r0, #0
 801c83c:	d1d9      	bne.n	801c7f2 <_strtod_l+0x73a>
 801c83e:	e65a      	b.n	801c4f6 <_strtod_l+0x43e>
 801c840:	2e00      	cmp	r6, #0
 801c842:	dd07      	ble.n	801c854 <_strtod_l+0x79c>
 801c844:	4649      	mov	r1, r9
 801c846:	9805      	ldr	r0, [sp, #20]
 801c848:	4632      	mov	r2, r6
 801c84a:	f7ff f9b3 	bl	801bbb4 <__lshift>
 801c84e:	4681      	mov	r9, r0
 801c850:	2800      	cmp	r0, #0
 801c852:	d0d8      	beq.n	801c806 <_strtod_l+0x74e>
 801c854:	2f00      	cmp	r7, #0
 801c856:	dd08      	ble.n	801c86a <_strtod_l+0x7b2>
 801c858:	4641      	mov	r1, r8
 801c85a:	9805      	ldr	r0, [sp, #20]
 801c85c:	463a      	mov	r2, r7
 801c85e:	f7ff f9a9 	bl	801bbb4 <__lshift>
 801c862:	4680      	mov	r8, r0
 801c864:	2800      	cmp	r0, #0
 801c866:	f43f ae46 	beq.w	801c4f6 <_strtod_l+0x43e>
 801c86a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c86c:	9805      	ldr	r0, [sp, #20]
 801c86e:	464a      	mov	r2, r9
 801c870:	f7ff fa28 	bl	801bcc4 <__mdiff>
 801c874:	4604      	mov	r4, r0
 801c876:	2800      	cmp	r0, #0
 801c878:	f43f ae3d 	beq.w	801c4f6 <_strtod_l+0x43e>
 801c87c:	68c3      	ldr	r3, [r0, #12]
 801c87e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c880:	2300      	movs	r3, #0
 801c882:	60c3      	str	r3, [r0, #12]
 801c884:	4641      	mov	r1, r8
 801c886:	f7ff fa01 	bl	801bc8c <__mcmp>
 801c88a:	2800      	cmp	r0, #0
 801c88c:	da46      	bge.n	801c91c <_strtod_l+0x864>
 801c88e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c890:	ea53 030a 	orrs.w	r3, r3, sl
 801c894:	d16c      	bne.n	801c970 <_strtod_l+0x8b8>
 801c896:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c89a:	2b00      	cmp	r3, #0
 801c89c:	d168      	bne.n	801c970 <_strtod_l+0x8b8>
 801c89e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c8a2:	0d1b      	lsrs	r3, r3, #20
 801c8a4:	051b      	lsls	r3, r3, #20
 801c8a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801c8aa:	d961      	bls.n	801c970 <_strtod_l+0x8b8>
 801c8ac:	6963      	ldr	r3, [r4, #20]
 801c8ae:	b913      	cbnz	r3, 801c8b6 <_strtod_l+0x7fe>
 801c8b0:	6923      	ldr	r3, [r4, #16]
 801c8b2:	2b01      	cmp	r3, #1
 801c8b4:	dd5c      	ble.n	801c970 <_strtod_l+0x8b8>
 801c8b6:	4621      	mov	r1, r4
 801c8b8:	2201      	movs	r2, #1
 801c8ba:	9805      	ldr	r0, [sp, #20]
 801c8bc:	f7ff f97a 	bl	801bbb4 <__lshift>
 801c8c0:	4641      	mov	r1, r8
 801c8c2:	4604      	mov	r4, r0
 801c8c4:	f7ff f9e2 	bl	801bc8c <__mcmp>
 801c8c8:	2800      	cmp	r0, #0
 801c8ca:	dd51      	ble.n	801c970 <_strtod_l+0x8b8>
 801c8cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c8d0:	9a08      	ldr	r2, [sp, #32]
 801c8d2:	0d1b      	lsrs	r3, r3, #20
 801c8d4:	051b      	lsls	r3, r3, #20
 801c8d6:	2a00      	cmp	r2, #0
 801c8d8:	d06b      	beq.n	801c9b2 <_strtod_l+0x8fa>
 801c8da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801c8de:	d868      	bhi.n	801c9b2 <_strtod_l+0x8fa>
 801c8e0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801c8e4:	f67f ae9d 	bls.w	801c622 <_strtod_l+0x56a>
 801c8e8:	4b0a      	ldr	r3, [pc, #40]	@ (801c914 <_strtod_l+0x85c>)
 801c8ea:	4650      	mov	r0, sl
 801c8ec:	4659      	mov	r1, fp
 801c8ee:	2200      	movs	r2, #0
 801c8f0:	f7e3 fe9a 	bl	8000628 <__aeabi_dmul>
 801c8f4:	4b08      	ldr	r3, [pc, #32]	@ (801c918 <_strtod_l+0x860>)
 801c8f6:	400b      	ands	r3, r1
 801c8f8:	4682      	mov	sl, r0
 801c8fa:	468b      	mov	fp, r1
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	f47f ae05 	bne.w	801c50c <_strtod_l+0x454>
 801c902:	9a05      	ldr	r2, [sp, #20]
 801c904:	2322      	movs	r3, #34	@ 0x22
 801c906:	6013      	str	r3, [r2, #0]
 801c908:	e600      	b.n	801c50c <_strtod_l+0x454>
 801c90a:	bf00      	nop
 801c90c:	0801eba8 	.word	0x0801eba8
 801c910:	fffffc02 	.word	0xfffffc02
 801c914:	39500000 	.word	0x39500000
 801c918:	7ff00000 	.word	0x7ff00000
 801c91c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801c920:	d165      	bne.n	801c9ee <_strtod_l+0x936>
 801c922:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c924:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c928:	b35a      	cbz	r2, 801c982 <_strtod_l+0x8ca>
 801c92a:	4a9f      	ldr	r2, [pc, #636]	@ (801cba8 <_strtod_l+0xaf0>)
 801c92c:	4293      	cmp	r3, r2
 801c92e:	d12b      	bne.n	801c988 <_strtod_l+0x8d0>
 801c930:	9b08      	ldr	r3, [sp, #32]
 801c932:	4651      	mov	r1, sl
 801c934:	b303      	cbz	r3, 801c978 <_strtod_l+0x8c0>
 801c936:	4b9d      	ldr	r3, [pc, #628]	@ (801cbac <_strtod_l+0xaf4>)
 801c938:	465a      	mov	r2, fp
 801c93a:	4013      	ands	r3, r2
 801c93c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801c940:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c944:	d81b      	bhi.n	801c97e <_strtod_l+0x8c6>
 801c946:	0d1b      	lsrs	r3, r3, #20
 801c948:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801c94c:	fa02 f303 	lsl.w	r3, r2, r3
 801c950:	4299      	cmp	r1, r3
 801c952:	d119      	bne.n	801c988 <_strtod_l+0x8d0>
 801c954:	4b96      	ldr	r3, [pc, #600]	@ (801cbb0 <_strtod_l+0xaf8>)
 801c956:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c958:	429a      	cmp	r2, r3
 801c95a:	d102      	bne.n	801c962 <_strtod_l+0x8aa>
 801c95c:	3101      	adds	r1, #1
 801c95e:	f43f adca 	beq.w	801c4f6 <_strtod_l+0x43e>
 801c962:	4b92      	ldr	r3, [pc, #584]	@ (801cbac <_strtod_l+0xaf4>)
 801c964:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c966:	401a      	ands	r2, r3
 801c968:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801c96c:	f04f 0a00 	mov.w	sl, #0
 801c970:	9b08      	ldr	r3, [sp, #32]
 801c972:	2b00      	cmp	r3, #0
 801c974:	d1b8      	bne.n	801c8e8 <_strtod_l+0x830>
 801c976:	e5c9      	b.n	801c50c <_strtod_l+0x454>
 801c978:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c97c:	e7e8      	b.n	801c950 <_strtod_l+0x898>
 801c97e:	4613      	mov	r3, r2
 801c980:	e7e6      	b.n	801c950 <_strtod_l+0x898>
 801c982:	ea53 030a 	orrs.w	r3, r3, sl
 801c986:	d0a1      	beq.n	801c8cc <_strtod_l+0x814>
 801c988:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c98a:	b1db      	cbz	r3, 801c9c4 <_strtod_l+0x90c>
 801c98c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c98e:	4213      	tst	r3, r2
 801c990:	d0ee      	beq.n	801c970 <_strtod_l+0x8b8>
 801c992:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c994:	9a08      	ldr	r2, [sp, #32]
 801c996:	4650      	mov	r0, sl
 801c998:	4659      	mov	r1, fp
 801c99a:	b1bb      	cbz	r3, 801c9cc <_strtod_l+0x914>
 801c99c:	f7ff fb6c 	bl	801c078 <sulp>
 801c9a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c9a4:	ec53 2b10 	vmov	r2, r3, d0
 801c9a8:	f7e3 fc88 	bl	80002bc <__adddf3>
 801c9ac:	4682      	mov	sl, r0
 801c9ae:	468b      	mov	fp, r1
 801c9b0:	e7de      	b.n	801c970 <_strtod_l+0x8b8>
 801c9b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801c9b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801c9ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801c9be:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801c9c2:	e7d5      	b.n	801c970 <_strtod_l+0x8b8>
 801c9c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c9c6:	ea13 0f0a 	tst.w	r3, sl
 801c9ca:	e7e1      	b.n	801c990 <_strtod_l+0x8d8>
 801c9cc:	f7ff fb54 	bl	801c078 <sulp>
 801c9d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c9d4:	ec53 2b10 	vmov	r2, r3, d0
 801c9d8:	f7e3 fc6e 	bl	80002b8 <__aeabi_dsub>
 801c9dc:	2200      	movs	r2, #0
 801c9de:	2300      	movs	r3, #0
 801c9e0:	4682      	mov	sl, r0
 801c9e2:	468b      	mov	fp, r1
 801c9e4:	f7e4 f888 	bl	8000af8 <__aeabi_dcmpeq>
 801c9e8:	2800      	cmp	r0, #0
 801c9ea:	d0c1      	beq.n	801c970 <_strtod_l+0x8b8>
 801c9ec:	e619      	b.n	801c622 <_strtod_l+0x56a>
 801c9ee:	4641      	mov	r1, r8
 801c9f0:	4620      	mov	r0, r4
 801c9f2:	f7ff fac3 	bl	801bf7c <__ratio>
 801c9f6:	ec57 6b10 	vmov	r6, r7, d0
 801c9fa:	2200      	movs	r2, #0
 801c9fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801ca00:	4630      	mov	r0, r6
 801ca02:	4639      	mov	r1, r7
 801ca04:	f7e4 f88c 	bl	8000b20 <__aeabi_dcmple>
 801ca08:	2800      	cmp	r0, #0
 801ca0a:	d06f      	beq.n	801caec <_strtod_l+0xa34>
 801ca0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d17a      	bne.n	801cb08 <_strtod_l+0xa50>
 801ca12:	f1ba 0f00 	cmp.w	sl, #0
 801ca16:	d158      	bne.n	801caca <_strtod_l+0xa12>
 801ca18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ca1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ca1e:	2b00      	cmp	r3, #0
 801ca20:	d15a      	bne.n	801cad8 <_strtod_l+0xa20>
 801ca22:	4b64      	ldr	r3, [pc, #400]	@ (801cbb4 <_strtod_l+0xafc>)
 801ca24:	2200      	movs	r2, #0
 801ca26:	4630      	mov	r0, r6
 801ca28:	4639      	mov	r1, r7
 801ca2a:	f7e4 f86f 	bl	8000b0c <__aeabi_dcmplt>
 801ca2e:	2800      	cmp	r0, #0
 801ca30:	d159      	bne.n	801cae6 <_strtod_l+0xa2e>
 801ca32:	4630      	mov	r0, r6
 801ca34:	4639      	mov	r1, r7
 801ca36:	4b60      	ldr	r3, [pc, #384]	@ (801cbb8 <_strtod_l+0xb00>)
 801ca38:	2200      	movs	r2, #0
 801ca3a:	f7e3 fdf5 	bl	8000628 <__aeabi_dmul>
 801ca3e:	4606      	mov	r6, r0
 801ca40:	460f      	mov	r7, r1
 801ca42:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801ca46:	9606      	str	r6, [sp, #24]
 801ca48:	9307      	str	r3, [sp, #28]
 801ca4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ca4e:	4d57      	ldr	r5, [pc, #348]	@ (801cbac <_strtod_l+0xaf4>)
 801ca50:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801ca54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ca56:	401d      	ands	r5, r3
 801ca58:	4b58      	ldr	r3, [pc, #352]	@ (801cbbc <_strtod_l+0xb04>)
 801ca5a:	429d      	cmp	r5, r3
 801ca5c:	f040 80b2 	bne.w	801cbc4 <_strtod_l+0xb0c>
 801ca60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ca62:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801ca66:	ec4b ab10 	vmov	d0, sl, fp
 801ca6a:	f7ff f9bf 	bl	801bdec <__ulp>
 801ca6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ca72:	ec51 0b10 	vmov	r0, r1, d0
 801ca76:	f7e3 fdd7 	bl	8000628 <__aeabi_dmul>
 801ca7a:	4652      	mov	r2, sl
 801ca7c:	465b      	mov	r3, fp
 801ca7e:	f7e3 fc1d 	bl	80002bc <__adddf3>
 801ca82:	460b      	mov	r3, r1
 801ca84:	4949      	ldr	r1, [pc, #292]	@ (801cbac <_strtod_l+0xaf4>)
 801ca86:	4a4e      	ldr	r2, [pc, #312]	@ (801cbc0 <_strtod_l+0xb08>)
 801ca88:	4019      	ands	r1, r3
 801ca8a:	4291      	cmp	r1, r2
 801ca8c:	4682      	mov	sl, r0
 801ca8e:	d942      	bls.n	801cb16 <_strtod_l+0xa5e>
 801ca90:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ca92:	4b47      	ldr	r3, [pc, #284]	@ (801cbb0 <_strtod_l+0xaf8>)
 801ca94:	429a      	cmp	r2, r3
 801ca96:	d103      	bne.n	801caa0 <_strtod_l+0x9e8>
 801ca98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ca9a:	3301      	adds	r3, #1
 801ca9c:	f43f ad2b 	beq.w	801c4f6 <_strtod_l+0x43e>
 801caa0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801cbb0 <_strtod_l+0xaf8>
 801caa4:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801caa8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801caaa:	9805      	ldr	r0, [sp, #20]
 801caac:	f7fe fe6a 	bl	801b784 <_Bfree>
 801cab0:	9805      	ldr	r0, [sp, #20]
 801cab2:	4649      	mov	r1, r9
 801cab4:	f7fe fe66 	bl	801b784 <_Bfree>
 801cab8:	9805      	ldr	r0, [sp, #20]
 801caba:	4641      	mov	r1, r8
 801cabc:	f7fe fe62 	bl	801b784 <_Bfree>
 801cac0:	9805      	ldr	r0, [sp, #20]
 801cac2:	4621      	mov	r1, r4
 801cac4:	f7fe fe5e 	bl	801b784 <_Bfree>
 801cac8:	e618      	b.n	801c6fc <_strtod_l+0x644>
 801caca:	f1ba 0f01 	cmp.w	sl, #1
 801cace:	d103      	bne.n	801cad8 <_strtod_l+0xa20>
 801cad0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cad2:	2b00      	cmp	r3, #0
 801cad4:	f43f ada5 	beq.w	801c622 <_strtod_l+0x56a>
 801cad8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801cb88 <_strtod_l+0xad0>
 801cadc:	4f35      	ldr	r7, [pc, #212]	@ (801cbb4 <_strtod_l+0xafc>)
 801cade:	ed8d 7b06 	vstr	d7, [sp, #24]
 801cae2:	2600      	movs	r6, #0
 801cae4:	e7b1      	b.n	801ca4a <_strtod_l+0x992>
 801cae6:	4f34      	ldr	r7, [pc, #208]	@ (801cbb8 <_strtod_l+0xb00>)
 801cae8:	2600      	movs	r6, #0
 801caea:	e7aa      	b.n	801ca42 <_strtod_l+0x98a>
 801caec:	4b32      	ldr	r3, [pc, #200]	@ (801cbb8 <_strtod_l+0xb00>)
 801caee:	4630      	mov	r0, r6
 801caf0:	4639      	mov	r1, r7
 801caf2:	2200      	movs	r2, #0
 801caf4:	f7e3 fd98 	bl	8000628 <__aeabi_dmul>
 801caf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cafa:	4606      	mov	r6, r0
 801cafc:	460f      	mov	r7, r1
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	d09f      	beq.n	801ca42 <_strtod_l+0x98a>
 801cb02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801cb06:	e7a0      	b.n	801ca4a <_strtod_l+0x992>
 801cb08:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801cb90 <_strtod_l+0xad8>
 801cb0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801cb10:	ec57 6b17 	vmov	r6, r7, d7
 801cb14:	e799      	b.n	801ca4a <_strtod_l+0x992>
 801cb16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801cb1a:	9b08      	ldr	r3, [sp, #32]
 801cb1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	d1c1      	bne.n	801caa8 <_strtod_l+0x9f0>
 801cb24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801cb28:	0d1b      	lsrs	r3, r3, #20
 801cb2a:	051b      	lsls	r3, r3, #20
 801cb2c:	429d      	cmp	r5, r3
 801cb2e:	d1bb      	bne.n	801caa8 <_strtod_l+0x9f0>
 801cb30:	4630      	mov	r0, r6
 801cb32:	4639      	mov	r1, r7
 801cb34:	f7e4 f928 	bl	8000d88 <__aeabi_d2lz>
 801cb38:	f7e3 fd48 	bl	80005cc <__aeabi_l2d>
 801cb3c:	4602      	mov	r2, r0
 801cb3e:	460b      	mov	r3, r1
 801cb40:	4630      	mov	r0, r6
 801cb42:	4639      	mov	r1, r7
 801cb44:	f7e3 fbb8 	bl	80002b8 <__aeabi_dsub>
 801cb48:	460b      	mov	r3, r1
 801cb4a:	4602      	mov	r2, r0
 801cb4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801cb50:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801cb54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cb56:	ea46 060a 	orr.w	r6, r6, sl
 801cb5a:	431e      	orrs	r6, r3
 801cb5c:	d06f      	beq.n	801cc3e <_strtod_l+0xb86>
 801cb5e:	a30e      	add	r3, pc, #56	@ (adr r3, 801cb98 <_strtod_l+0xae0>)
 801cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb64:	f7e3 ffd2 	bl	8000b0c <__aeabi_dcmplt>
 801cb68:	2800      	cmp	r0, #0
 801cb6a:	f47f accf 	bne.w	801c50c <_strtod_l+0x454>
 801cb6e:	a30c      	add	r3, pc, #48	@ (adr r3, 801cba0 <_strtod_l+0xae8>)
 801cb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cb78:	f7e3 ffe6 	bl	8000b48 <__aeabi_dcmpgt>
 801cb7c:	2800      	cmp	r0, #0
 801cb7e:	d093      	beq.n	801caa8 <_strtod_l+0x9f0>
 801cb80:	e4c4      	b.n	801c50c <_strtod_l+0x454>
 801cb82:	bf00      	nop
 801cb84:	f3af 8000 	nop.w
 801cb88:	00000000 	.word	0x00000000
 801cb8c:	bff00000 	.word	0xbff00000
 801cb90:	00000000 	.word	0x00000000
 801cb94:	3ff00000 	.word	0x3ff00000
 801cb98:	94a03595 	.word	0x94a03595
 801cb9c:	3fdfffff 	.word	0x3fdfffff
 801cba0:	35afe535 	.word	0x35afe535
 801cba4:	3fe00000 	.word	0x3fe00000
 801cba8:	000fffff 	.word	0x000fffff
 801cbac:	7ff00000 	.word	0x7ff00000
 801cbb0:	7fefffff 	.word	0x7fefffff
 801cbb4:	3ff00000 	.word	0x3ff00000
 801cbb8:	3fe00000 	.word	0x3fe00000
 801cbbc:	7fe00000 	.word	0x7fe00000
 801cbc0:	7c9fffff 	.word	0x7c9fffff
 801cbc4:	9b08      	ldr	r3, [sp, #32]
 801cbc6:	b323      	cbz	r3, 801cc12 <_strtod_l+0xb5a>
 801cbc8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801cbcc:	d821      	bhi.n	801cc12 <_strtod_l+0xb5a>
 801cbce:	a328      	add	r3, pc, #160	@ (adr r3, 801cc70 <_strtod_l+0xbb8>)
 801cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbd4:	4630      	mov	r0, r6
 801cbd6:	4639      	mov	r1, r7
 801cbd8:	f7e3 ffa2 	bl	8000b20 <__aeabi_dcmple>
 801cbdc:	b1a0      	cbz	r0, 801cc08 <_strtod_l+0xb50>
 801cbde:	4639      	mov	r1, r7
 801cbe0:	4630      	mov	r0, r6
 801cbe2:	f7e3 fff9 	bl	8000bd8 <__aeabi_d2uiz>
 801cbe6:	2801      	cmp	r0, #1
 801cbe8:	bf38      	it	cc
 801cbea:	2001      	movcc	r0, #1
 801cbec:	f7e3 fca2 	bl	8000534 <__aeabi_ui2d>
 801cbf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cbf2:	4606      	mov	r6, r0
 801cbf4:	460f      	mov	r7, r1
 801cbf6:	b9fb      	cbnz	r3, 801cc38 <_strtod_l+0xb80>
 801cbf8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cbfc:	9014      	str	r0, [sp, #80]	@ 0x50
 801cbfe:	9315      	str	r3, [sp, #84]	@ 0x54
 801cc00:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801cc04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801cc08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cc0a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801cc0e:	1b5b      	subs	r3, r3, r5
 801cc10:	9311      	str	r3, [sp, #68]	@ 0x44
 801cc12:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801cc16:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801cc1a:	f7ff f8e7 	bl	801bdec <__ulp>
 801cc1e:	4650      	mov	r0, sl
 801cc20:	ec53 2b10 	vmov	r2, r3, d0
 801cc24:	4659      	mov	r1, fp
 801cc26:	f7e3 fcff 	bl	8000628 <__aeabi_dmul>
 801cc2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801cc2e:	f7e3 fb45 	bl	80002bc <__adddf3>
 801cc32:	4682      	mov	sl, r0
 801cc34:	468b      	mov	fp, r1
 801cc36:	e770      	b.n	801cb1a <_strtod_l+0xa62>
 801cc38:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801cc3c:	e7e0      	b.n	801cc00 <_strtod_l+0xb48>
 801cc3e:	a30e      	add	r3, pc, #56	@ (adr r3, 801cc78 <_strtod_l+0xbc0>)
 801cc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc44:	f7e3 ff62 	bl	8000b0c <__aeabi_dcmplt>
 801cc48:	e798      	b.n	801cb7c <_strtod_l+0xac4>
 801cc4a:	2300      	movs	r3, #0
 801cc4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cc4e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801cc50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cc52:	6013      	str	r3, [r2, #0]
 801cc54:	f7ff ba6d 	b.w	801c132 <_strtod_l+0x7a>
 801cc58:	2a65      	cmp	r2, #101	@ 0x65
 801cc5a:	f43f ab66 	beq.w	801c32a <_strtod_l+0x272>
 801cc5e:	2a45      	cmp	r2, #69	@ 0x45
 801cc60:	f43f ab63 	beq.w	801c32a <_strtod_l+0x272>
 801cc64:	2301      	movs	r3, #1
 801cc66:	f7ff bb9e 	b.w	801c3a6 <_strtod_l+0x2ee>
 801cc6a:	bf00      	nop
 801cc6c:	f3af 8000 	nop.w
 801cc70:	ffc00000 	.word	0xffc00000
 801cc74:	41dfffff 	.word	0x41dfffff
 801cc78:	94a03595 	.word	0x94a03595
 801cc7c:	3fcfffff 	.word	0x3fcfffff

0801cc80 <_strtod_r>:
 801cc80:	4b01      	ldr	r3, [pc, #4]	@ (801cc88 <_strtod_r+0x8>)
 801cc82:	f7ff ba19 	b.w	801c0b8 <_strtod_l>
 801cc86:	bf00      	nop
 801cc88:	200000dc 	.word	0x200000dc

0801cc8c <_strtol_l.constprop.0>:
 801cc8c:	2b24      	cmp	r3, #36	@ 0x24
 801cc8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc92:	4686      	mov	lr, r0
 801cc94:	4690      	mov	r8, r2
 801cc96:	d801      	bhi.n	801cc9c <_strtol_l.constprop.0+0x10>
 801cc98:	2b01      	cmp	r3, #1
 801cc9a:	d106      	bne.n	801ccaa <_strtol_l.constprop.0+0x1e>
 801cc9c:	f7fd fe28 	bl	801a8f0 <__errno>
 801cca0:	2316      	movs	r3, #22
 801cca2:	6003      	str	r3, [r0, #0]
 801cca4:	2000      	movs	r0, #0
 801cca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ccaa:	4834      	ldr	r0, [pc, #208]	@ (801cd7c <_strtol_l.constprop.0+0xf0>)
 801ccac:	460d      	mov	r5, r1
 801ccae:	462a      	mov	r2, r5
 801ccb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ccb4:	5d06      	ldrb	r6, [r0, r4]
 801ccb6:	f016 0608 	ands.w	r6, r6, #8
 801ccba:	d1f8      	bne.n	801ccae <_strtol_l.constprop.0+0x22>
 801ccbc:	2c2d      	cmp	r4, #45	@ 0x2d
 801ccbe:	d12d      	bne.n	801cd1c <_strtol_l.constprop.0+0x90>
 801ccc0:	782c      	ldrb	r4, [r5, #0]
 801ccc2:	2601      	movs	r6, #1
 801ccc4:	1c95      	adds	r5, r2, #2
 801ccc6:	f033 0210 	bics.w	r2, r3, #16
 801ccca:	d109      	bne.n	801cce0 <_strtol_l.constprop.0+0x54>
 801cccc:	2c30      	cmp	r4, #48	@ 0x30
 801ccce:	d12a      	bne.n	801cd26 <_strtol_l.constprop.0+0x9a>
 801ccd0:	782a      	ldrb	r2, [r5, #0]
 801ccd2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801ccd6:	2a58      	cmp	r2, #88	@ 0x58
 801ccd8:	d125      	bne.n	801cd26 <_strtol_l.constprop.0+0x9a>
 801ccda:	786c      	ldrb	r4, [r5, #1]
 801ccdc:	2310      	movs	r3, #16
 801ccde:	3502      	adds	r5, #2
 801cce0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801cce4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801cce8:	2200      	movs	r2, #0
 801ccea:	fbbc f9f3 	udiv	r9, ip, r3
 801ccee:	4610      	mov	r0, r2
 801ccf0:	fb03 ca19 	mls	sl, r3, r9, ip
 801ccf4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801ccf8:	2f09      	cmp	r7, #9
 801ccfa:	d81b      	bhi.n	801cd34 <_strtol_l.constprop.0+0xa8>
 801ccfc:	463c      	mov	r4, r7
 801ccfe:	42a3      	cmp	r3, r4
 801cd00:	dd27      	ble.n	801cd52 <_strtol_l.constprop.0+0xc6>
 801cd02:	1c57      	adds	r7, r2, #1
 801cd04:	d007      	beq.n	801cd16 <_strtol_l.constprop.0+0x8a>
 801cd06:	4581      	cmp	r9, r0
 801cd08:	d320      	bcc.n	801cd4c <_strtol_l.constprop.0+0xc0>
 801cd0a:	d101      	bne.n	801cd10 <_strtol_l.constprop.0+0x84>
 801cd0c:	45a2      	cmp	sl, r4
 801cd0e:	db1d      	blt.n	801cd4c <_strtol_l.constprop.0+0xc0>
 801cd10:	fb00 4003 	mla	r0, r0, r3, r4
 801cd14:	2201      	movs	r2, #1
 801cd16:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cd1a:	e7eb      	b.n	801ccf4 <_strtol_l.constprop.0+0x68>
 801cd1c:	2c2b      	cmp	r4, #43	@ 0x2b
 801cd1e:	bf04      	itt	eq
 801cd20:	782c      	ldrbeq	r4, [r5, #0]
 801cd22:	1c95      	addeq	r5, r2, #2
 801cd24:	e7cf      	b.n	801ccc6 <_strtol_l.constprop.0+0x3a>
 801cd26:	2b00      	cmp	r3, #0
 801cd28:	d1da      	bne.n	801cce0 <_strtol_l.constprop.0+0x54>
 801cd2a:	2c30      	cmp	r4, #48	@ 0x30
 801cd2c:	bf0c      	ite	eq
 801cd2e:	2308      	moveq	r3, #8
 801cd30:	230a      	movne	r3, #10
 801cd32:	e7d5      	b.n	801cce0 <_strtol_l.constprop.0+0x54>
 801cd34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801cd38:	2f19      	cmp	r7, #25
 801cd3a:	d801      	bhi.n	801cd40 <_strtol_l.constprop.0+0xb4>
 801cd3c:	3c37      	subs	r4, #55	@ 0x37
 801cd3e:	e7de      	b.n	801ccfe <_strtol_l.constprop.0+0x72>
 801cd40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801cd44:	2f19      	cmp	r7, #25
 801cd46:	d804      	bhi.n	801cd52 <_strtol_l.constprop.0+0xc6>
 801cd48:	3c57      	subs	r4, #87	@ 0x57
 801cd4a:	e7d8      	b.n	801ccfe <_strtol_l.constprop.0+0x72>
 801cd4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cd50:	e7e1      	b.n	801cd16 <_strtol_l.constprop.0+0x8a>
 801cd52:	1c53      	adds	r3, r2, #1
 801cd54:	d108      	bne.n	801cd68 <_strtol_l.constprop.0+0xdc>
 801cd56:	2322      	movs	r3, #34	@ 0x22
 801cd58:	f8ce 3000 	str.w	r3, [lr]
 801cd5c:	4660      	mov	r0, ip
 801cd5e:	f1b8 0f00 	cmp.w	r8, #0
 801cd62:	d0a0      	beq.n	801cca6 <_strtol_l.constprop.0+0x1a>
 801cd64:	1e69      	subs	r1, r5, #1
 801cd66:	e006      	b.n	801cd76 <_strtol_l.constprop.0+0xea>
 801cd68:	b106      	cbz	r6, 801cd6c <_strtol_l.constprop.0+0xe0>
 801cd6a:	4240      	negs	r0, r0
 801cd6c:	f1b8 0f00 	cmp.w	r8, #0
 801cd70:	d099      	beq.n	801cca6 <_strtol_l.constprop.0+0x1a>
 801cd72:	2a00      	cmp	r2, #0
 801cd74:	d1f6      	bne.n	801cd64 <_strtol_l.constprop.0+0xd8>
 801cd76:	f8c8 1000 	str.w	r1, [r8]
 801cd7a:	e794      	b.n	801cca6 <_strtol_l.constprop.0+0x1a>
 801cd7c:	0801e838 	.word	0x0801e838

0801cd80 <_strtol_r>:
 801cd80:	f7ff bf84 	b.w	801cc8c <_strtol_l.constprop.0>

0801cd84 <__ssputs_r>:
 801cd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd88:	688e      	ldr	r6, [r1, #8]
 801cd8a:	461f      	mov	r7, r3
 801cd8c:	42be      	cmp	r6, r7
 801cd8e:	680b      	ldr	r3, [r1, #0]
 801cd90:	4682      	mov	sl, r0
 801cd92:	460c      	mov	r4, r1
 801cd94:	4690      	mov	r8, r2
 801cd96:	d82d      	bhi.n	801cdf4 <__ssputs_r+0x70>
 801cd98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cd9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801cda0:	d026      	beq.n	801cdf0 <__ssputs_r+0x6c>
 801cda2:	6965      	ldr	r5, [r4, #20]
 801cda4:	6909      	ldr	r1, [r1, #16]
 801cda6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cdaa:	eba3 0901 	sub.w	r9, r3, r1
 801cdae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cdb2:	1c7b      	adds	r3, r7, #1
 801cdb4:	444b      	add	r3, r9
 801cdb6:	106d      	asrs	r5, r5, #1
 801cdb8:	429d      	cmp	r5, r3
 801cdba:	bf38      	it	cc
 801cdbc:	461d      	movcc	r5, r3
 801cdbe:	0553      	lsls	r3, r2, #21
 801cdc0:	d527      	bpl.n	801ce12 <__ssputs_r+0x8e>
 801cdc2:	4629      	mov	r1, r5
 801cdc4:	f7fc f9e4 	bl	8019190 <_malloc_r>
 801cdc8:	4606      	mov	r6, r0
 801cdca:	b360      	cbz	r0, 801ce26 <__ssputs_r+0xa2>
 801cdcc:	6921      	ldr	r1, [r4, #16]
 801cdce:	464a      	mov	r2, r9
 801cdd0:	f7fd fdc3 	bl	801a95a <memcpy>
 801cdd4:	89a3      	ldrh	r3, [r4, #12]
 801cdd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801cdda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801cdde:	81a3      	strh	r3, [r4, #12]
 801cde0:	6126      	str	r6, [r4, #16]
 801cde2:	6165      	str	r5, [r4, #20]
 801cde4:	444e      	add	r6, r9
 801cde6:	eba5 0509 	sub.w	r5, r5, r9
 801cdea:	6026      	str	r6, [r4, #0]
 801cdec:	60a5      	str	r5, [r4, #8]
 801cdee:	463e      	mov	r6, r7
 801cdf0:	42be      	cmp	r6, r7
 801cdf2:	d900      	bls.n	801cdf6 <__ssputs_r+0x72>
 801cdf4:	463e      	mov	r6, r7
 801cdf6:	6820      	ldr	r0, [r4, #0]
 801cdf8:	4632      	mov	r2, r6
 801cdfa:	4641      	mov	r1, r8
 801cdfc:	f7fd fc70 	bl	801a6e0 <memmove>
 801ce00:	68a3      	ldr	r3, [r4, #8]
 801ce02:	1b9b      	subs	r3, r3, r6
 801ce04:	60a3      	str	r3, [r4, #8]
 801ce06:	6823      	ldr	r3, [r4, #0]
 801ce08:	4433      	add	r3, r6
 801ce0a:	6023      	str	r3, [r4, #0]
 801ce0c:	2000      	movs	r0, #0
 801ce0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce12:	462a      	mov	r2, r5
 801ce14:	f7fc fabc 	bl	8019390 <_realloc_r>
 801ce18:	4606      	mov	r6, r0
 801ce1a:	2800      	cmp	r0, #0
 801ce1c:	d1e0      	bne.n	801cde0 <__ssputs_r+0x5c>
 801ce1e:	6921      	ldr	r1, [r4, #16]
 801ce20:	4650      	mov	r0, sl
 801ce22:	f7fe fc25 	bl	801b670 <_free_r>
 801ce26:	230c      	movs	r3, #12
 801ce28:	f8ca 3000 	str.w	r3, [sl]
 801ce2c:	89a3      	ldrh	r3, [r4, #12]
 801ce2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ce32:	81a3      	strh	r3, [r4, #12]
 801ce34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ce38:	e7e9      	b.n	801ce0e <__ssputs_r+0x8a>
	...

0801ce3c <_svfiprintf_r>:
 801ce3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce40:	4698      	mov	r8, r3
 801ce42:	898b      	ldrh	r3, [r1, #12]
 801ce44:	061b      	lsls	r3, r3, #24
 801ce46:	b09d      	sub	sp, #116	@ 0x74
 801ce48:	4607      	mov	r7, r0
 801ce4a:	460d      	mov	r5, r1
 801ce4c:	4614      	mov	r4, r2
 801ce4e:	d510      	bpl.n	801ce72 <_svfiprintf_r+0x36>
 801ce50:	690b      	ldr	r3, [r1, #16]
 801ce52:	b973      	cbnz	r3, 801ce72 <_svfiprintf_r+0x36>
 801ce54:	2140      	movs	r1, #64	@ 0x40
 801ce56:	f7fc f99b 	bl	8019190 <_malloc_r>
 801ce5a:	6028      	str	r0, [r5, #0]
 801ce5c:	6128      	str	r0, [r5, #16]
 801ce5e:	b930      	cbnz	r0, 801ce6e <_svfiprintf_r+0x32>
 801ce60:	230c      	movs	r3, #12
 801ce62:	603b      	str	r3, [r7, #0]
 801ce64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ce68:	b01d      	add	sp, #116	@ 0x74
 801ce6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce6e:	2340      	movs	r3, #64	@ 0x40
 801ce70:	616b      	str	r3, [r5, #20]
 801ce72:	2300      	movs	r3, #0
 801ce74:	9309      	str	r3, [sp, #36]	@ 0x24
 801ce76:	2320      	movs	r3, #32
 801ce78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ce7c:	f8cd 800c 	str.w	r8, [sp, #12]
 801ce80:	2330      	movs	r3, #48	@ 0x30
 801ce82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d020 <_svfiprintf_r+0x1e4>
 801ce86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ce8a:	f04f 0901 	mov.w	r9, #1
 801ce8e:	4623      	mov	r3, r4
 801ce90:	469a      	mov	sl, r3
 801ce92:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ce96:	b10a      	cbz	r2, 801ce9c <_svfiprintf_r+0x60>
 801ce98:	2a25      	cmp	r2, #37	@ 0x25
 801ce9a:	d1f9      	bne.n	801ce90 <_svfiprintf_r+0x54>
 801ce9c:	ebba 0b04 	subs.w	fp, sl, r4
 801cea0:	d00b      	beq.n	801ceba <_svfiprintf_r+0x7e>
 801cea2:	465b      	mov	r3, fp
 801cea4:	4622      	mov	r2, r4
 801cea6:	4629      	mov	r1, r5
 801cea8:	4638      	mov	r0, r7
 801ceaa:	f7ff ff6b 	bl	801cd84 <__ssputs_r>
 801ceae:	3001      	adds	r0, #1
 801ceb0:	f000 80a7 	beq.w	801d002 <_svfiprintf_r+0x1c6>
 801ceb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ceb6:	445a      	add	r2, fp
 801ceb8:	9209      	str	r2, [sp, #36]	@ 0x24
 801ceba:	f89a 3000 	ldrb.w	r3, [sl]
 801cebe:	2b00      	cmp	r3, #0
 801cec0:	f000 809f 	beq.w	801d002 <_svfiprintf_r+0x1c6>
 801cec4:	2300      	movs	r3, #0
 801cec6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ceca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cece:	f10a 0a01 	add.w	sl, sl, #1
 801ced2:	9304      	str	r3, [sp, #16]
 801ced4:	9307      	str	r3, [sp, #28]
 801ced6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ceda:	931a      	str	r3, [sp, #104]	@ 0x68
 801cedc:	4654      	mov	r4, sl
 801cede:	2205      	movs	r2, #5
 801cee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cee4:	484e      	ldr	r0, [pc, #312]	@ (801d020 <_svfiprintf_r+0x1e4>)
 801cee6:	f7e3 f98b 	bl	8000200 <memchr>
 801ceea:	9a04      	ldr	r2, [sp, #16]
 801ceec:	b9d8      	cbnz	r0, 801cf26 <_svfiprintf_r+0xea>
 801ceee:	06d0      	lsls	r0, r2, #27
 801cef0:	bf44      	itt	mi
 801cef2:	2320      	movmi	r3, #32
 801cef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cef8:	0711      	lsls	r1, r2, #28
 801cefa:	bf44      	itt	mi
 801cefc:	232b      	movmi	r3, #43	@ 0x2b
 801cefe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cf02:	f89a 3000 	ldrb.w	r3, [sl]
 801cf06:	2b2a      	cmp	r3, #42	@ 0x2a
 801cf08:	d015      	beq.n	801cf36 <_svfiprintf_r+0xfa>
 801cf0a:	9a07      	ldr	r2, [sp, #28]
 801cf0c:	4654      	mov	r4, sl
 801cf0e:	2000      	movs	r0, #0
 801cf10:	f04f 0c0a 	mov.w	ip, #10
 801cf14:	4621      	mov	r1, r4
 801cf16:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cf1a:	3b30      	subs	r3, #48	@ 0x30
 801cf1c:	2b09      	cmp	r3, #9
 801cf1e:	d94b      	bls.n	801cfb8 <_svfiprintf_r+0x17c>
 801cf20:	b1b0      	cbz	r0, 801cf50 <_svfiprintf_r+0x114>
 801cf22:	9207      	str	r2, [sp, #28]
 801cf24:	e014      	b.n	801cf50 <_svfiprintf_r+0x114>
 801cf26:	eba0 0308 	sub.w	r3, r0, r8
 801cf2a:	fa09 f303 	lsl.w	r3, r9, r3
 801cf2e:	4313      	orrs	r3, r2
 801cf30:	9304      	str	r3, [sp, #16]
 801cf32:	46a2      	mov	sl, r4
 801cf34:	e7d2      	b.n	801cedc <_svfiprintf_r+0xa0>
 801cf36:	9b03      	ldr	r3, [sp, #12]
 801cf38:	1d19      	adds	r1, r3, #4
 801cf3a:	681b      	ldr	r3, [r3, #0]
 801cf3c:	9103      	str	r1, [sp, #12]
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	bfbb      	ittet	lt
 801cf42:	425b      	neglt	r3, r3
 801cf44:	f042 0202 	orrlt.w	r2, r2, #2
 801cf48:	9307      	strge	r3, [sp, #28]
 801cf4a:	9307      	strlt	r3, [sp, #28]
 801cf4c:	bfb8      	it	lt
 801cf4e:	9204      	strlt	r2, [sp, #16]
 801cf50:	7823      	ldrb	r3, [r4, #0]
 801cf52:	2b2e      	cmp	r3, #46	@ 0x2e
 801cf54:	d10a      	bne.n	801cf6c <_svfiprintf_r+0x130>
 801cf56:	7863      	ldrb	r3, [r4, #1]
 801cf58:	2b2a      	cmp	r3, #42	@ 0x2a
 801cf5a:	d132      	bne.n	801cfc2 <_svfiprintf_r+0x186>
 801cf5c:	9b03      	ldr	r3, [sp, #12]
 801cf5e:	1d1a      	adds	r2, r3, #4
 801cf60:	681b      	ldr	r3, [r3, #0]
 801cf62:	9203      	str	r2, [sp, #12]
 801cf64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cf68:	3402      	adds	r4, #2
 801cf6a:	9305      	str	r3, [sp, #20]
 801cf6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d030 <_svfiprintf_r+0x1f4>
 801cf70:	7821      	ldrb	r1, [r4, #0]
 801cf72:	2203      	movs	r2, #3
 801cf74:	4650      	mov	r0, sl
 801cf76:	f7e3 f943 	bl	8000200 <memchr>
 801cf7a:	b138      	cbz	r0, 801cf8c <_svfiprintf_r+0x150>
 801cf7c:	9b04      	ldr	r3, [sp, #16]
 801cf7e:	eba0 000a 	sub.w	r0, r0, sl
 801cf82:	2240      	movs	r2, #64	@ 0x40
 801cf84:	4082      	lsls	r2, r0
 801cf86:	4313      	orrs	r3, r2
 801cf88:	3401      	adds	r4, #1
 801cf8a:	9304      	str	r3, [sp, #16]
 801cf8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf90:	4824      	ldr	r0, [pc, #144]	@ (801d024 <_svfiprintf_r+0x1e8>)
 801cf92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cf96:	2206      	movs	r2, #6
 801cf98:	f7e3 f932 	bl	8000200 <memchr>
 801cf9c:	2800      	cmp	r0, #0
 801cf9e:	d036      	beq.n	801d00e <_svfiprintf_r+0x1d2>
 801cfa0:	4b21      	ldr	r3, [pc, #132]	@ (801d028 <_svfiprintf_r+0x1ec>)
 801cfa2:	bb1b      	cbnz	r3, 801cfec <_svfiprintf_r+0x1b0>
 801cfa4:	9b03      	ldr	r3, [sp, #12]
 801cfa6:	3307      	adds	r3, #7
 801cfa8:	f023 0307 	bic.w	r3, r3, #7
 801cfac:	3308      	adds	r3, #8
 801cfae:	9303      	str	r3, [sp, #12]
 801cfb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cfb2:	4433      	add	r3, r6
 801cfb4:	9309      	str	r3, [sp, #36]	@ 0x24
 801cfb6:	e76a      	b.n	801ce8e <_svfiprintf_r+0x52>
 801cfb8:	fb0c 3202 	mla	r2, ip, r2, r3
 801cfbc:	460c      	mov	r4, r1
 801cfbe:	2001      	movs	r0, #1
 801cfc0:	e7a8      	b.n	801cf14 <_svfiprintf_r+0xd8>
 801cfc2:	2300      	movs	r3, #0
 801cfc4:	3401      	adds	r4, #1
 801cfc6:	9305      	str	r3, [sp, #20]
 801cfc8:	4619      	mov	r1, r3
 801cfca:	f04f 0c0a 	mov.w	ip, #10
 801cfce:	4620      	mov	r0, r4
 801cfd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cfd4:	3a30      	subs	r2, #48	@ 0x30
 801cfd6:	2a09      	cmp	r2, #9
 801cfd8:	d903      	bls.n	801cfe2 <_svfiprintf_r+0x1a6>
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	d0c6      	beq.n	801cf6c <_svfiprintf_r+0x130>
 801cfde:	9105      	str	r1, [sp, #20]
 801cfe0:	e7c4      	b.n	801cf6c <_svfiprintf_r+0x130>
 801cfe2:	fb0c 2101 	mla	r1, ip, r1, r2
 801cfe6:	4604      	mov	r4, r0
 801cfe8:	2301      	movs	r3, #1
 801cfea:	e7f0      	b.n	801cfce <_svfiprintf_r+0x192>
 801cfec:	ab03      	add	r3, sp, #12
 801cfee:	9300      	str	r3, [sp, #0]
 801cff0:	462a      	mov	r2, r5
 801cff2:	4b0e      	ldr	r3, [pc, #56]	@ (801d02c <_svfiprintf_r+0x1f0>)
 801cff4:	a904      	add	r1, sp, #16
 801cff6:	4638      	mov	r0, r7
 801cff8:	f7fc fb10 	bl	801961c <_printf_float>
 801cffc:	1c42      	adds	r2, r0, #1
 801cffe:	4606      	mov	r6, r0
 801d000:	d1d6      	bne.n	801cfb0 <_svfiprintf_r+0x174>
 801d002:	89ab      	ldrh	r3, [r5, #12]
 801d004:	065b      	lsls	r3, r3, #25
 801d006:	f53f af2d 	bmi.w	801ce64 <_svfiprintf_r+0x28>
 801d00a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d00c:	e72c      	b.n	801ce68 <_svfiprintf_r+0x2c>
 801d00e:	ab03      	add	r3, sp, #12
 801d010:	9300      	str	r3, [sp, #0]
 801d012:	462a      	mov	r2, r5
 801d014:	4b05      	ldr	r3, [pc, #20]	@ (801d02c <_svfiprintf_r+0x1f0>)
 801d016:	a904      	add	r1, sp, #16
 801d018:	4638      	mov	r0, r7
 801d01a:	f7fc fd97 	bl	8019b4c <_printf_i>
 801d01e:	e7ed      	b.n	801cffc <_svfiprintf_r+0x1c0>
 801d020:	0801ebd0 	.word	0x0801ebd0
 801d024:	0801ebda 	.word	0x0801ebda
 801d028:	0801961d 	.word	0x0801961d
 801d02c:	0801cd85 	.word	0x0801cd85
 801d030:	0801ebd6 	.word	0x0801ebd6

0801d034 <__sfputc_r>:
 801d034:	6893      	ldr	r3, [r2, #8]
 801d036:	3b01      	subs	r3, #1
 801d038:	2b00      	cmp	r3, #0
 801d03a:	b410      	push	{r4}
 801d03c:	6093      	str	r3, [r2, #8]
 801d03e:	da08      	bge.n	801d052 <__sfputc_r+0x1e>
 801d040:	6994      	ldr	r4, [r2, #24]
 801d042:	42a3      	cmp	r3, r4
 801d044:	db01      	blt.n	801d04a <__sfputc_r+0x16>
 801d046:	290a      	cmp	r1, #10
 801d048:	d103      	bne.n	801d052 <__sfputc_r+0x1e>
 801d04a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d04e:	f7fd bab3 	b.w	801a5b8 <__swbuf_r>
 801d052:	6813      	ldr	r3, [r2, #0]
 801d054:	1c58      	adds	r0, r3, #1
 801d056:	6010      	str	r0, [r2, #0]
 801d058:	7019      	strb	r1, [r3, #0]
 801d05a:	4608      	mov	r0, r1
 801d05c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d060:	4770      	bx	lr

0801d062 <__sfputs_r>:
 801d062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d064:	4606      	mov	r6, r0
 801d066:	460f      	mov	r7, r1
 801d068:	4614      	mov	r4, r2
 801d06a:	18d5      	adds	r5, r2, r3
 801d06c:	42ac      	cmp	r4, r5
 801d06e:	d101      	bne.n	801d074 <__sfputs_r+0x12>
 801d070:	2000      	movs	r0, #0
 801d072:	e007      	b.n	801d084 <__sfputs_r+0x22>
 801d074:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d078:	463a      	mov	r2, r7
 801d07a:	4630      	mov	r0, r6
 801d07c:	f7ff ffda 	bl	801d034 <__sfputc_r>
 801d080:	1c43      	adds	r3, r0, #1
 801d082:	d1f3      	bne.n	801d06c <__sfputs_r+0xa>
 801d084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d088 <_vfiprintf_r>:
 801d088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d08c:	460d      	mov	r5, r1
 801d08e:	b09d      	sub	sp, #116	@ 0x74
 801d090:	4614      	mov	r4, r2
 801d092:	4698      	mov	r8, r3
 801d094:	4606      	mov	r6, r0
 801d096:	b118      	cbz	r0, 801d0a0 <_vfiprintf_r+0x18>
 801d098:	6a03      	ldr	r3, [r0, #32]
 801d09a:	b90b      	cbnz	r3, 801d0a0 <_vfiprintf_r+0x18>
 801d09c:	f7fd f916 	bl	801a2cc <__sinit>
 801d0a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d0a2:	07d9      	lsls	r1, r3, #31
 801d0a4:	d405      	bmi.n	801d0b2 <_vfiprintf_r+0x2a>
 801d0a6:	89ab      	ldrh	r3, [r5, #12]
 801d0a8:	059a      	lsls	r2, r3, #22
 801d0aa:	d402      	bmi.n	801d0b2 <_vfiprintf_r+0x2a>
 801d0ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d0ae:	f7fd fc4a 	bl	801a946 <__retarget_lock_acquire_recursive>
 801d0b2:	89ab      	ldrh	r3, [r5, #12]
 801d0b4:	071b      	lsls	r3, r3, #28
 801d0b6:	d501      	bpl.n	801d0bc <_vfiprintf_r+0x34>
 801d0b8:	692b      	ldr	r3, [r5, #16]
 801d0ba:	b99b      	cbnz	r3, 801d0e4 <_vfiprintf_r+0x5c>
 801d0bc:	4629      	mov	r1, r5
 801d0be:	4630      	mov	r0, r6
 801d0c0:	f7fd fab8 	bl	801a634 <__swsetup_r>
 801d0c4:	b170      	cbz	r0, 801d0e4 <_vfiprintf_r+0x5c>
 801d0c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d0c8:	07dc      	lsls	r4, r3, #31
 801d0ca:	d504      	bpl.n	801d0d6 <_vfiprintf_r+0x4e>
 801d0cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d0d0:	b01d      	add	sp, #116	@ 0x74
 801d0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0d6:	89ab      	ldrh	r3, [r5, #12]
 801d0d8:	0598      	lsls	r0, r3, #22
 801d0da:	d4f7      	bmi.n	801d0cc <_vfiprintf_r+0x44>
 801d0dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d0de:	f7fd fc33 	bl	801a948 <__retarget_lock_release_recursive>
 801d0e2:	e7f3      	b.n	801d0cc <_vfiprintf_r+0x44>
 801d0e4:	2300      	movs	r3, #0
 801d0e6:	9309      	str	r3, [sp, #36]	@ 0x24
 801d0e8:	2320      	movs	r3, #32
 801d0ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d0ee:	f8cd 800c 	str.w	r8, [sp, #12]
 801d0f2:	2330      	movs	r3, #48	@ 0x30
 801d0f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d2a4 <_vfiprintf_r+0x21c>
 801d0f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d0fc:	f04f 0901 	mov.w	r9, #1
 801d100:	4623      	mov	r3, r4
 801d102:	469a      	mov	sl, r3
 801d104:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d108:	b10a      	cbz	r2, 801d10e <_vfiprintf_r+0x86>
 801d10a:	2a25      	cmp	r2, #37	@ 0x25
 801d10c:	d1f9      	bne.n	801d102 <_vfiprintf_r+0x7a>
 801d10e:	ebba 0b04 	subs.w	fp, sl, r4
 801d112:	d00b      	beq.n	801d12c <_vfiprintf_r+0xa4>
 801d114:	465b      	mov	r3, fp
 801d116:	4622      	mov	r2, r4
 801d118:	4629      	mov	r1, r5
 801d11a:	4630      	mov	r0, r6
 801d11c:	f7ff ffa1 	bl	801d062 <__sfputs_r>
 801d120:	3001      	adds	r0, #1
 801d122:	f000 80a7 	beq.w	801d274 <_vfiprintf_r+0x1ec>
 801d126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d128:	445a      	add	r2, fp
 801d12a:	9209      	str	r2, [sp, #36]	@ 0x24
 801d12c:	f89a 3000 	ldrb.w	r3, [sl]
 801d130:	2b00      	cmp	r3, #0
 801d132:	f000 809f 	beq.w	801d274 <_vfiprintf_r+0x1ec>
 801d136:	2300      	movs	r3, #0
 801d138:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d13c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d140:	f10a 0a01 	add.w	sl, sl, #1
 801d144:	9304      	str	r3, [sp, #16]
 801d146:	9307      	str	r3, [sp, #28]
 801d148:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d14c:	931a      	str	r3, [sp, #104]	@ 0x68
 801d14e:	4654      	mov	r4, sl
 801d150:	2205      	movs	r2, #5
 801d152:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d156:	4853      	ldr	r0, [pc, #332]	@ (801d2a4 <_vfiprintf_r+0x21c>)
 801d158:	f7e3 f852 	bl	8000200 <memchr>
 801d15c:	9a04      	ldr	r2, [sp, #16]
 801d15e:	b9d8      	cbnz	r0, 801d198 <_vfiprintf_r+0x110>
 801d160:	06d1      	lsls	r1, r2, #27
 801d162:	bf44      	itt	mi
 801d164:	2320      	movmi	r3, #32
 801d166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d16a:	0713      	lsls	r3, r2, #28
 801d16c:	bf44      	itt	mi
 801d16e:	232b      	movmi	r3, #43	@ 0x2b
 801d170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d174:	f89a 3000 	ldrb.w	r3, [sl]
 801d178:	2b2a      	cmp	r3, #42	@ 0x2a
 801d17a:	d015      	beq.n	801d1a8 <_vfiprintf_r+0x120>
 801d17c:	9a07      	ldr	r2, [sp, #28]
 801d17e:	4654      	mov	r4, sl
 801d180:	2000      	movs	r0, #0
 801d182:	f04f 0c0a 	mov.w	ip, #10
 801d186:	4621      	mov	r1, r4
 801d188:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d18c:	3b30      	subs	r3, #48	@ 0x30
 801d18e:	2b09      	cmp	r3, #9
 801d190:	d94b      	bls.n	801d22a <_vfiprintf_r+0x1a2>
 801d192:	b1b0      	cbz	r0, 801d1c2 <_vfiprintf_r+0x13a>
 801d194:	9207      	str	r2, [sp, #28]
 801d196:	e014      	b.n	801d1c2 <_vfiprintf_r+0x13a>
 801d198:	eba0 0308 	sub.w	r3, r0, r8
 801d19c:	fa09 f303 	lsl.w	r3, r9, r3
 801d1a0:	4313      	orrs	r3, r2
 801d1a2:	9304      	str	r3, [sp, #16]
 801d1a4:	46a2      	mov	sl, r4
 801d1a6:	e7d2      	b.n	801d14e <_vfiprintf_r+0xc6>
 801d1a8:	9b03      	ldr	r3, [sp, #12]
 801d1aa:	1d19      	adds	r1, r3, #4
 801d1ac:	681b      	ldr	r3, [r3, #0]
 801d1ae:	9103      	str	r1, [sp, #12]
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	bfbb      	ittet	lt
 801d1b4:	425b      	neglt	r3, r3
 801d1b6:	f042 0202 	orrlt.w	r2, r2, #2
 801d1ba:	9307      	strge	r3, [sp, #28]
 801d1bc:	9307      	strlt	r3, [sp, #28]
 801d1be:	bfb8      	it	lt
 801d1c0:	9204      	strlt	r2, [sp, #16]
 801d1c2:	7823      	ldrb	r3, [r4, #0]
 801d1c4:	2b2e      	cmp	r3, #46	@ 0x2e
 801d1c6:	d10a      	bne.n	801d1de <_vfiprintf_r+0x156>
 801d1c8:	7863      	ldrb	r3, [r4, #1]
 801d1ca:	2b2a      	cmp	r3, #42	@ 0x2a
 801d1cc:	d132      	bne.n	801d234 <_vfiprintf_r+0x1ac>
 801d1ce:	9b03      	ldr	r3, [sp, #12]
 801d1d0:	1d1a      	adds	r2, r3, #4
 801d1d2:	681b      	ldr	r3, [r3, #0]
 801d1d4:	9203      	str	r2, [sp, #12]
 801d1d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d1da:	3402      	adds	r4, #2
 801d1dc:	9305      	str	r3, [sp, #20]
 801d1de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d2b4 <_vfiprintf_r+0x22c>
 801d1e2:	7821      	ldrb	r1, [r4, #0]
 801d1e4:	2203      	movs	r2, #3
 801d1e6:	4650      	mov	r0, sl
 801d1e8:	f7e3 f80a 	bl	8000200 <memchr>
 801d1ec:	b138      	cbz	r0, 801d1fe <_vfiprintf_r+0x176>
 801d1ee:	9b04      	ldr	r3, [sp, #16]
 801d1f0:	eba0 000a 	sub.w	r0, r0, sl
 801d1f4:	2240      	movs	r2, #64	@ 0x40
 801d1f6:	4082      	lsls	r2, r0
 801d1f8:	4313      	orrs	r3, r2
 801d1fa:	3401      	adds	r4, #1
 801d1fc:	9304      	str	r3, [sp, #16]
 801d1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d202:	4829      	ldr	r0, [pc, #164]	@ (801d2a8 <_vfiprintf_r+0x220>)
 801d204:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d208:	2206      	movs	r2, #6
 801d20a:	f7e2 fff9 	bl	8000200 <memchr>
 801d20e:	2800      	cmp	r0, #0
 801d210:	d03f      	beq.n	801d292 <_vfiprintf_r+0x20a>
 801d212:	4b26      	ldr	r3, [pc, #152]	@ (801d2ac <_vfiprintf_r+0x224>)
 801d214:	bb1b      	cbnz	r3, 801d25e <_vfiprintf_r+0x1d6>
 801d216:	9b03      	ldr	r3, [sp, #12]
 801d218:	3307      	adds	r3, #7
 801d21a:	f023 0307 	bic.w	r3, r3, #7
 801d21e:	3308      	adds	r3, #8
 801d220:	9303      	str	r3, [sp, #12]
 801d222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d224:	443b      	add	r3, r7
 801d226:	9309      	str	r3, [sp, #36]	@ 0x24
 801d228:	e76a      	b.n	801d100 <_vfiprintf_r+0x78>
 801d22a:	fb0c 3202 	mla	r2, ip, r2, r3
 801d22e:	460c      	mov	r4, r1
 801d230:	2001      	movs	r0, #1
 801d232:	e7a8      	b.n	801d186 <_vfiprintf_r+0xfe>
 801d234:	2300      	movs	r3, #0
 801d236:	3401      	adds	r4, #1
 801d238:	9305      	str	r3, [sp, #20]
 801d23a:	4619      	mov	r1, r3
 801d23c:	f04f 0c0a 	mov.w	ip, #10
 801d240:	4620      	mov	r0, r4
 801d242:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d246:	3a30      	subs	r2, #48	@ 0x30
 801d248:	2a09      	cmp	r2, #9
 801d24a:	d903      	bls.n	801d254 <_vfiprintf_r+0x1cc>
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	d0c6      	beq.n	801d1de <_vfiprintf_r+0x156>
 801d250:	9105      	str	r1, [sp, #20]
 801d252:	e7c4      	b.n	801d1de <_vfiprintf_r+0x156>
 801d254:	fb0c 2101 	mla	r1, ip, r1, r2
 801d258:	4604      	mov	r4, r0
 801d25a:	2301      	movs	r3, #1
 801d25c:	e7f0      	b.n	801d240 <_vfiprintf_r+0x1b8>
 801d25e:	ab03      	add	r3, sp, #12
 801d260:	9300      	str	r3, [sp, #0]
 801d262:	462a      	mov	r2, r5
 801d264:	4b12      	ldr	r3, [pc, #72]	@ (801d2b0 <_vfiprintf_r+0x228>)
 801d266:	a904      	add	r1, sp, #16
 801d268:	4630      	mov	r0, r6
 801d26a:	f7fc f9d7 	bl	801961c <_printf_float>
 801d26e:	4607      	mov	r7, r0
 801d270:	1c78      	adds	r0, r7, #1
 801d272:	d1d6      	bne.n	801d222 <_vfiprintf_r+0x19a>
 801d274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d276:	07d9      	lsls	r1, r3, #31
 801d278:	d405      	bmi.n	801d286 <_vfiprintf_r+0x1fe>
 801d27a:	89ab      	ldrh	r3, [r5, #12]
 801d27c:	059a      	lsls	r2, r3, #22
 801d27e:	d402      	bmi.n	801d286 <_vfiprintf_r+0x1fe>
 801d280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d282:	f7fd fb61 	bl	801a948 <__retarget_lock_release_recursive>
 801d286:	89ab      	ldrh	r3, [r5, #12]
 801d288:	065b      	lsls	r3, r3, #25
 801d28a:	f53f af1f 	bmi.w	801d0cc <_vfiprintf_r+0x44>
 801d28e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d290:	e71e      	b.n	801d0d0 <_vfiprintf_r+0x48>
 801d292:	ab03      	add	r3, sp, #12
 801d294:	9300      	str	r3, [sp, #0]
 801d296:	462a      	mov	r2, r5
 801d298:	4b05      	ldr	r3, [pc, #20]	@ (801d2b0 <_vfiprintf_r+0x228>)
 801d29a:	a904      	add	r1, sp, #16
 801d29c:	4630      	mov	r0, r6
 801d29e:	f7fc fc55 	bl	8019b4c <_printf_i>
 801d2a2:	e7e4      	b.n	801d26e <_vfiprintf_r+0x1e6>
 801d2a4:	0801ebd0 	.word	0x0801ebd0
 801d2a8:	0801ebda 	.word	0x0801ebda
 801d2ac:	0801961d 	.word	0x0801961d
 801d2b0:	0801d063 	.word	0x0801d063
 801d2b4:	0801ebd6 	.word	0x0801ebd6

0801d2b8 <__sflush_r>:
 801d2b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2c0:	0716      	lsls	r6, r2, #28
 801d2c2:	4605      	mov	r5, r0
 801d2c4:	460c      	mov	r4, r1
 801d2c6:	d454      	bmi.n	801d372 <__sflush_r+0xba>
 801d2c8:	684b      	ldr	r3, [r1, #4]
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	dc02      	bgt.n	801d2d4 <__sflush_r+0x1c>
 801d2ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d2d0:	2b00      	cmp	r3, #0
 801d2d2:	dd48      	ble.n	801d366 <__sflush_r+0xae>
 801d2d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d2d6:	2e00      	cmp	r6, #0
 801d2d8:	d045      	beq.n	801d366 <__sflush_r+0xae>
 801d2da:	2300      	movs	r3, #0
 801d2dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d2e0:	682f      	ldr	r7, [r5, #0]
 801d2e2:	6a21      	ldr	r1, [r4, #32]
 801d2e4:	602b      	str	r3, [r5, #0]
 801d2e6:	d030      	beq.n	801d34a <__sflush_r+0x92>
 801d2e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d2ea:	89a3      	ldrh	r3, [r4, #12]
 801d2ec:	0759      	lsls	r1, r3, #29
 801d2ee:	d505      	bpl.n	801d2fc <__sflush_r+0x44>
 801d2f0:	6863      	ldr	r3, [r4, #4]
 801d2f2:	1ad2      	subs	r2, r2, r3
 801d2f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d2f6:	b10b      	cbz	r3, 801d2fc <__sflush_r+0x44>
 801d2f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d2fa:	1ad2      	subs	r2, r2, r3
 801d2fc:	2300      	movs	r3, #0
 801d2fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d300:	6a21      	ldr	r1, [r4, #32]
 801d302:	4628      	mov	r0, r5
 801d304:	47b0      	blx	r6
 801d306:	1c43      	adds	r3, r0, #1
 801d308:	89a3      	ldrh	r3, [r4, #12]
 801d30a:	d106      	bne.n	801d31a <__sflush_r+0x62>
 801d30c:	6829      	ldr	r1, [r5, #0]
 801d30e:	291d      	cmp	r1, #29
 801d310:	d82b      	bhi.n	801d36a <__sflush_r+0xb2>
 801d312:	4a2a      	ldr	r2, [pc, #168]	@ (801d3bc <__sflush_r+0x104>)
 801d314:	410a      	asrs	r2, r1
 801d316:	07d6      	lsls	r6, r2, #31
 801d318:	d427      	bmi.n	801d36a <__sflush_r+0xb2>
 801d31a:	2200      	movs	r2, #0
 801d31c:	6062      	str	r2, [r4, #4]
 801d31e:	04d9      	lsls	r1, r3, #19
 801d320:	6922      	ldr	r2, [r4, #16]
 801d322:	6022      	str	r2, [r4, #0]
 801d324:	d504      	bpl.n	801d330 <__sflush_r+0x78>
 801d326:	1c42      	adds	r2, r0, #1
 801d328:	d101      	bne.n	801d32e <__sflush_r+0x76>
 801d32a:	682b      	ldr	r3, [r5, #0]
 801d32c:	b903      	cbnz	r3, 801d330 <__sflush_r+0x78>
 801d32e:	6560      	str	r0, [r4, #84]	@ 0x54
 801d330:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d332:	602f      	str	r7, [r5, #0]
 801d334:	b1b9      	cbz	r1, 801d366 <__sflush_r+0xae>
 801d336:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d33a:	4299      	cmp	r1, r3
 801d33c:	d002      	beq.n	801d344 <__sflush_r+0x8c>
 801d33e:	4628      	mov	r0, r5
 801d340:	f7fe f996 	bl	801b670 <_free_r>
 801d344:	2300      	movs	r3, #0
 801d346:	6363      	str	r3, [r4, #52]	@ 0x34
 801d348:	e00d      	b.n	801d366 <__sflush_r+0xae>
 801d34a:	2301      	movs	r3, #1
 801d34c:	4628      	mov	r0, r5
 801d34e:	47b0      	blx	r6
 801d350:	4602      	mov	r2, r0
 801d352:	1c50      	adds	r0, r2, #1
 801d354:	d1c9      	bne.n	801d2ea <__sflush_r+0x32>
 801d356:	682b      	ldr	r3, [r5, #0]
 801d358:	2b00      	cmp	r3, #0
 801d35a:	d0c6      	beq.n	801d2ea <__sflush_r+0x32>
 801d35c:	2b1d      	cmp	r3, #29
 801d35e:	d001      	beq.n	801d364 <__sflush_r+0xac>
 801d360:	2b16      	cmp	r3, #22
 801d362:	d11e      	bne.n	801d3a2 <__sflush_r+0xea>
 801d364:	602f      	str	r7, [r5, #0]
 801d366:	2000      	movs	r0, #0
 801d368:	e022      	b.n	801d3b0 <__sflush_r+0xf8>
 801d36a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d36e:	b21b      	sxth	r3, r3
 801d370:	e01b      	b.n	801d3aa <__sflush_r+0xf2>
 801d372:	690f      	ldr	r7, [r1, #16]
 801d374:	2f00      	cmp	r7, #0
 801d376:	d0f6      	beq.n	801d366 <__sflush_r+0xae>
 801d378:	0793      	lsls	r3, r2, #30
 801d37a:	680e      	ldr	r6, [r1, #0]
 801d37c:	bf08      	it	eq
 801d37e:	694b      	ldreq	r3, [r1, #20]
 801d380:	600f      	str	r7, [r1, #0]
 801d382:	bf18      	it	ne
 801d384:	2300      	movne	r3, #0
 801d386:	eba6 0807 	sub.w	r8, r6, r7
 801d38a:	608b      	str	r3, [r1, #8]
 801d38c:	f1b8 0f00 	cmp.w	r8, #0
 801d390:	dde9      	ble.n	801d366 <__sflush_r+0xae>
 801d392:	6a21      	ldr	r1, [r4, #32]
 801d394:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d396:	4643      	mov	r3, r8
 801d398:	463a      	mov	r2, r7
 801d39a:	4628      	mov	r0, r5
 801d39c:	47b0      	blx	r6
 801d39e:	2800      	cmp	r0, #0
 801d3a0:	dc08      	bgt.n	801d3b4 <__sflush_r+0xfc>
 801d3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d3a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d3aa:	81a3      	strh	r3, [r4, #12]
 801d3ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3b4:	4407      	add	r7, r0
 801d3b6:	eba8 0800 	sub.w	r8, r8, r0
 801d3ba:	e7e7      	b.n	801d38c <__sflush_r+0xd4>
 801d3bc:	dfbffffe 	.word	0xdfbffffe

0801d3c0 <_fflush_r>:
 801d3c0:	b538      	push	{r3, r4, r5, lr}
 801d3c2:	690b      	ldr	r3, [r1, #16]
 801d3c4:	4605      	mov	r5, r0
 801d3c6:	460c      	mov	r4, r1
 801d3c8:	b913      	cbnz	r3, 801d3d0 <_fflush_r+0x10>
 801d3ca:	2500      	movs	r5, #0
 801d3cc:	4628      	mov	r0, r5
 801d3ce:	bd38      	pop	{r3, r4, r5, pc}
 801d3d0:	b118      	cbz	r0, 801d3da <_fflush_r+0x1a>
 801d3d2:	6a03      	ldr	r3, [r0, #32]
 801d3d4:	b90b      	cbnz	r3, 801d3da <_fflush_r+0x1a>
 801d3d6:	f7fc ff79 	bl	801a2cc <__sinit>
 801d3da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d3de:	2b00      	cmp	r3, #0
 801d3e0:	d0f3      	beq.n	801d3ca <_fflush_r+0xa>
 801d3e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d3e4:	07d0      	lsls	r0, r2, #31
 801d3e6:	d404      	bmi.n	801d3f2 <_fflush_r+0x32>
 801d3e8:	0599      	lsls	r1, r3, #22
 801d3ea:	d402      	bmi.n	801d3f2 <_fflush_r+0x32>
 801d3ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d3ee:	f7fd faaa 	bl	801a946 <__retarget_lock_acquire_recursive>
 801d3f2:	4628      	mov	r0, r5
 801d3f4:	4621      	mov	r1, r4
 801d3f6:	f7ff ff5f 	bl	801d2b8 <__sflush_r>
 801d3fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d3fc:	07da      	lsls	r2, r3, #31
 801d3fe:	4605      	mov	r5, r0
 801d400:	d4e4      	bmi.n	801d3cc <_fflush_r+0xc>
 801d402:	89a3      	ldrh	r3, [r4, #12]
 801d404:	059b      	lsls	r3, r3, #22
 801d406:	d4e1      	bmi.n	801d3cc <_fflush_r+0xc>
 801d408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d40a:	f7fd fa9d 	bl	801a948 <__retarget_lock_release_recursive>
 801d40e:	e7dd      	b.n	801d3cc <_fflush_r+0xc>

0801d410 <fiprintf>:
 801d410:	b40e      	push	{r1, r2, r3}
 801d412:	b503      	push	{r0, r1, lr}
 801d414:	4601      	mov	r1, r0
 801d416:	ab03      	add	r3, sp, #12
 801d418:	4805      	ldr	r0, [pc, #20]	@ (801d430 <fiprintf+0x20>)
 801d41a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d41e:	6800      	ldr	r0, [r0, #0]
 801d420:	9301      	str	r3, [sp, #4]
 801d422:	f7ff fe31 	bl	801d088 <_vfiprintf_r>
 801d426:	b002      	add	sp, #8
 801d428:	f85d eb04 	ldr.w	lr, [sp], #4
 801d42c:	b003      	add	sp, #12
 801d42e:	4770      	bx	lr
 801d430:	2000008c 	.word	0x2000008c

0801d434 <__swhatbuf_r>:
 801d434:	b570      	push	{r4, r5, r6, lr}
 801d436:	460c      	mov	r4, r1
 801d438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d43c:	2900      	cmp	r1, #0
 801d43e:	b096      	sub	sp, #88	@ 0x58
 801d440:	4615      	mov	r5, r2
 801d442:	461e      	mov	r6, r3
 801d444:	da0d      	bge.n	801d462 <__swhatbuf_r+0x2e>
 801d446:	89a3      	ldrh	r3, [r4, #12]
 801d448:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d44c:	f04f 0100 	mov.w	r1, #0
 801d450:	bf14      	ite	ne
 801d452:	2340      	movne	r3, #64	@ 0x40
 801d454:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d458:	2000      	movs	r0, #0
 801d45a:	6031      	str	r1, [r6, #0]
 801d45c:	602b      	str	r3, [r5, #0]
 801d45e:	b016      	add	sp, #88	@ 0x58
 801d460:	bd70      	pop	{r4, r5, r6, pc}
 801d462:	466a      	mov	r2, sp
 801d464:	f000 f848 	bl	801d4f8 <_fstat_r>
 801d468:	2800      	cmp	r0, #0
 801d46a:	dbec      	blt.n	801d446 <__swhatbuf_r+0x12>
 801d46c:	9901      	ldr	r1, [sp, #4]
 801d46e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d472:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d476:	4259      	negs	r1, r3
 801d478:	4159      	adcs	r1, r3
 801d47a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d47e:	e7eb      	b.n	801d458 <__swhatbuf_r+0x24>

0801d480 <__smakebuf_r>:
 801d480:	898b      	ldrh	r3, [r1, #12]
 801d482:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d484:	079d      	lsls	r5, r3, #30
 801d486:	4606      	mov	r6, r0
 801d488:	460c      	mov	r4, r1
 801d48a:	d507      	bpl.n	801d49c <__smakebuf_r+0x1c>
 801d48c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d490:	6023      	str	r3, [r4, #0]
 801d492:	6123      	str	r3, [r4, #16]
 801d494:	2301      	movs	r3, #1
 801d496:	6163      	str	r3, [r4, #20]
 801d498:	b003      	add	sp, #12
 801d49a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d49c:	ab01      	add	r3, sp, #4
 801d49e:	466a      	mov	r2, sp
 801d4a0:	f7ff ffc8 	bl	801d434 <__swhatbuf_r>
 801d4a4:	9f00      	ldr	r7, [sp, #0]
 801d4a6:	4605      	mov	r5, r0
 801d4a8:	4639      	mov	r1, r7
 801d4aa:	4630      	mov	r0, r6
 801d4ac:	f7fb fe70 	bl	8019190 <_malloc_r>
 801d4b0:	b948      	cbnz	r0, 801d4c6 <__smakebuf_r+0x46>
 801d4b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d4b6:	059a      	lsls	r2, r3, #22
 801d4b8:	d4ee      	bmi.n	801d498 <__smakebuf_r+0x18>
 801d4ba:	f023 0303 	bic.w	r3, r3, #3
 801d4be:	f043 0302 	orr.w	r3, r3, #2
 801d4c2:	81a3      	strh	r3, [r4, #12]
 801d4c4:	e7e2      	b.n	801d48c <__smakebuf_r+0xc>
 801d4c6:	89a3      	ldrh	r3, [r4, #12]
 801d4c8:	6020      	str	r0, [r4, #0]
 801d4ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d4ce:	81a3      	strh	r3, [r4, #12]
 801d4d0:	9b01      	ldr	r3, [sp, #4]
 801d4d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d4d6:	b15b      	cbz	r3, 801d4f0 <__smakebuf_r+0x70>
 801d4d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d4dc:	4630      	mov	r0, r6
 801d4de:	f000 f81d 	bl	801d51c <_isatty_r>
 801d4e2:	b128      	cbz	r0, 801d4f0 <__smakebuf_r+0x70>
 801d4e4:	89a3      	ldrh	r3, [r4, #12]
 801d4e6:	f023 0303 	bic.w	r3, r3, #3
 801d4ea:	f043 0301 	orr.w	r3, r3, #1
 801d4ee:	81a3      	strh	r3, [r4, #12]
 801d4f0:	89a3      	ldrh	r3, [r4, #12]
 801d4f2:	431d      	orrs	r5, r3
 801d4f4:	81a5      	strh	r5, [r4, #12]
 801d4f6:	e7cf      	b.n	801d498 <__smakebuf_r+0x18>

0801d4f8 <_fstat_r>:
 801d4f8:	b538      	push	{r3, r4, r5, lr}
 801d4fa:	4d07      	ldr	r5, [pc, #28]	@ (801d518 <_fstat_r+0x20>)
 801d4fc:	2300      	movs	r3, #0
 801d4fe:	4604      	mov	r4, r0
 801d500:	4608      	mov	r0, r1
 801d502:	4611      	mov	r1, r2
 801d504:	602b      	str	r3, [r5, #0]
 801d506:	f7e6 fe01 	bl	800410c <_fstat>
 801d50a:	1c43      	adds	r3, r0, #1
 801d50c:	d102      	bne.n	801d514 <_fstat_r+0x1c>
 801d50e:	682b      	ldr	r3, [r5, #0]
 801d510:	b103      	cbz	r3, 801d514 <_fstat_r+0x1c>
 801d512:	6023      	str	r3, [r4, #0]
 801d514:	bd38      	pop	{r3, r4, r5, pc}
 801d516:	bf00      	nop
 801d518:	20009fe8 	.word	0x20009fe8

0801d51c <_isatty_r>:
 801d51c:	b538      	push	{r3, r4, r5, lr}
 801d51e:	4d06      	ldr	r5, [pc, #24]	@ (801d538 <_isatty_r+0x1c>)
 801d520:	2300      	movs	r3, #0
 801d522:	4604      	mov	r4, r0
 801d524:	4608      	mov	r0, r1
 801d526:	602b      	str	r3, [r5, #0]
 801d528:	f7e6 fe00 	bl	800412c <_isatty>
 801d52c:	1c43      	adds	r3, r0, #1
 801d52e:	d102      	bne.n	801d536 <_isatty_r+0x1a>
 801d530:	682b      	ldr	r3, [r5, #0]
 801d532:	b103      	cbz	r3, 801d536 <_isatty_r+0x1a>
 801d534:	6023      	str	r3, [r4, #0]
 801d536:	bd38      	pop	{r3, r4, r5, pc}
 801d538:	20009fe8 	.word	0x20009fe8
 801d53c:	00000000 	.word	0x00000000

0801d540 <nan>:
 801d540:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801d548 <nan+0x8>
 801d544:	4770      	bx	lr
 801d546:	bf00      	nop
 801d548:	00000000 	.word	0x00000000
 801d54c:	7ff80000 	.word	0x7ff80000

0801d550 <abort>:
 801d550:	b508      	push	{r3, lr}
 801d552:	2006      	movs	r0, #6
 801d554:	f000 fb82 	bl	801dc5c <raise>
 801d558:	2001      	movs	r0, #1
 801d55a:	f7e6 fd87 	bl	800406c <_exit>

0801d55e <rshift>:
 801d55e:	6903      	ldr	r3, [r0, #16]
 801d560:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d568:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d56c:	f100 0414 	add.w	r4, r0, #20
 801d570:	dd45      	ble.n	801d5fe <rshift+0xa0>
 801d572:	f011 011f 	ands.w	r1, r1, #31
 801d576:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d57a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d57e:	d10c      	bne.n	801d59a <rshift+0x3c>
 801d580:	f100 0710 	add.w	r7, r0, #16
 801d584:	4629      	mov	r1, r5
 801d586:	42b1      	cmp	r1, r6
 801d588:	d334      	bcc.n	801d5f4 <rshift+0x96>
 801d58a:	1a9b      	subs	r3, r3, r2
 801d58c:	009b      	lsls	r3, r3, #2
 801d58e:	1eea      	subs	r2, r5, #3
 801d590:	4296      	cmp	r6, r2
 801d592:	bf38      	it	cc
 801d594:	2300      	movcc	r3, #0
 801d596:	4423      	add	r3, r4
 801d598:	e015      	b.n	801d5c6 <rshift+0x68>
 801d59a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d59e:	f1c1 0820 	rsb	r8, r1, #32
 801d5a2:	40cf      	lsrs	r7, r1
 801d5a4:	f105 0e04 	add.w	lr, r5, #4
 801d5a8:	46a1      	mov	r9, r4
 801d5aa:	4576      	cmp	r6, lr
 801d5ac:	46f4      	mov	ip, lr
 801d5ae:	d815      	bhi.n	801d5dc <rshift+0x7e>
 801d5b0:	1a9a      	subs	r2, r3, r2
 801d5b2:	0092      	lsls	r2, r2, #2
 801d5b4:	3a04      	subs	r2, #4
 801d5b6:	3501      	adds	r5, #1
 801d5b8:	42ae      	cmp	r6, r5
 801d5ba:	bf38      	it	cc
 801d5bc:	2200      	movcc	r2, #0
 801d5be:	18a3      	adds	r3, r4, r2
 801d5c0:	50a7      	str	r7, [r4, r2]
 801d5c2:	b107      	cbz	r7, 801d5c6 <rshift+0x68>
 801d5c4:	3304      	adds	r3, #4
 801d5c6:	1b1a      	subs	r2, r3, r4
 801d5c8:	42a3      	cmp	r3, r4
 801d5ca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d5ce:	bf08      	it	eq
 801d5d0:	2300      	moveq	r3, #0
 801d5d2:	6102      	str	r2, [r0, #16]
 801d5d4:	bf08      	it	eq
 801d5d6:	6143      	streq	r3, [r0, #20]
 801d5d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d5dc:	f8dc c000 	ldr.w	ip, [ip]
 801d5e0:	fa0c fc08 	lsl.w	ip, ip, r8
 801d5e4:	ea4c 0707 	orr.w	r7, ip, r7
 801d5e8:	f849 7b04 	str.w	r7, [r9], #4
 801d5ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d5f0:	40cf      	lsrs	r7, r1
 801d5f2:	e7da      	b.n	801d5aa <rshift+0x4c>
 801d5f4:	f851 cb04 	ldr.w	ip, [r1], #4
 801d5f8:	f847 cf04 	str.w	ip, [r7, #4]!
 801d5fc:	e7c3      	b.n	801d586 <rshift+0x28>
 801d5fe:	4623      	mov	r3, r4
 801d600:	e7e1      	b.n	801d5c6 <rshift+0x68>

0801d602 <__hexdig_fun>:
 801d602:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801d606:	2b09      	cmp	r3, #9
 801d608:	d802      	bhi.n	801d610 <__hexdig_fun+0xe>
 801d60a:	3820      	subs	r0, #32
 801d60c:	b2c0      	uxtb	r0, r0
 801d60e:	4770      	bx	lr
 801d610:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801d614:	2b05      	cmp	r3, #5
 801d616:	d801      	bhi.n	801d61c <__hexdig_fun+0x1a>
 801d618:	3847      	subs	r0, #71	@ 0x47
 801d61a:	e7f7      	b.n	801d60c <__hexdig_fun+0xa>
 801d61c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801d620:	2b05      	cmp	r3, #5
 801d622:	d801      	bhi.n	801d628 <__hexdig_fun+0x26>
 801d624:	3827      	subs	r0, #39	@ 0x27
 801d626:	e7f1      	b.n	801d60c <__hexdig_fun+0xa>
 801d628:	2000      	movs	r0, #0
 801d62a:	4770      	bx	lr

0801d62c <__gethex>:
 801d62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d630:	b085      	sub	sp, #20
 801d632:	468a      	mov	sl, r1
 801d634:	9302      	str	r3, [sp, #8]
 801d636:	680b      	ldr	r3, [r1, #0]
 801d638:	9001      	str	r0, [sp, #4]
 801d63a:	4690      	mov	r8, r2
 801d63c:	1c9c      	adds	r4, r3, #2
 801d63e:	46a1      	mov	r9, r4
 801d640:	f814 0b01 	ldrb.w	r0, [r4], #1
 801d644:	2830      	cmp	r0, #48	@ 0x30
 801d646:	d0fa      	beq.n	801d63e <__gethex+0x12>
 801d648:	eba9 0303 	sub.w	r3, r9, r3
 801d64c:	f1a3 0b02 	sub.w	fp, r3, #2
 801d650:	f7ff ffd7 	bl	801d602 <__hexdig_fun>
 801d654:	4605      	mov	r5, r0
 801d656:	2800      	cmp	r0, #0
 801d658:	d168      	bne.n	801d72c <__gethex+0x100>
 801d65a:	49a0      	ldr	r1, [pc, #640]	@ (801d8dc <__gethex+0x2b0>)
 801d65c:	2201      	movs	r2, #1
 801d65e:	4648      	mov	r0, r9
 801d660:	f7fd f86d 	bl	801a73e <strncmp>
 801d664:	4607      	mov	r7, r0
 801d666:	2800      	cmp	r0, #0
 801d668:	d167      	bne.n	801d73a <__gethex+0x10e>
 801d66a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801d66e:	4626      	mov	r6, r4
 801d670:	f7ff ffc7 	bl	801d602 <__hexdig_fun>
 801d674:	2800      	cmp	r0, #0
 801d676:	d062      	beq.n	801d73e <__gethex+0x112>
 801d678:	4623      	mov	r3, r4
 801d67a:	7818      	ldrb	r0, [r3, #0]
 801d67c:	2830      	cmp	r0, #48	@ 0x30
 801d67e:	4699      	mov	r9, r3
 801d680:	f103 0301 	add.w	r3, r3, #1
 801d684:	d0f9      	beq.n	801d67a <__gethex+0x4e>
 801d686:	f7ff ffbc 	bl	801d602 <__hexdig_fun>
 801d68a:	fab0 f580 	clz	r5, r0
 801d68e:	096d      	lsrs	r5, r5, #5
 801d690:	f04f 0b01 	mov.w	fp, #1
 801d694:	464a      	mov	r2, r9
 801d696:	4616      	mov	r6, r2
 801d698:	3201      	adds	r2, #1
 801d69a:	7830      	ldrb	r0, [r6, #0]
 801d69c:	f7ff ffb1 	bl	801d602 <__hexdig_fun>
 801d6a0:	2800      	cmp	r0, #0
 801d6a2:	d1f8      	bne.n	801d696 <__gethex+0x6a>
 801d6a4:	498d      	ldr	r1, [pc, #564]	@ (801d8dc <__gethex+0x2b0>)
 801d6a6:	2201      	movs	r2, #1
 801d6a8:	4630      	mov	r0, r6
 801d6aa:	f7fd f848 	bl	801a73e <strncmp>
 801d6ae:	2800      	cmp	r0, #0
 801d6b0:	d13f      	bne.n	801d732 <__gethex+0x106>
 801d6b2:	b944      	cbnz	r4, 801d6c6 <__gethex+0x9a>
 801d6b4:	1c74      	adds	r4, r6, #1
 801d6b6:	4622      	mov	r2, r4
 801d6b8:	4616      	mov	r6, r2
 801d6ba:	3201      	adds	r2, #1
 801d6bc:	7830      	ldrb	r0, [r6, #0]
 801d6be:	f7ff ffa0 	bl	801d602 <__hexdig_fun>
 801d6c2:	2800      	cmp	r0, #0
 801d6c4:	d1f8      	bne.n	801d6b8 <__gethex+0x8c>
 801d6c6:	1ba4      	subs	r4, r4, r6
 801d6c8:	00a7      	lsls	r7, r4, #2
 801d6ca:	7833      	ldrb	r3, [r6, #0]
 801d6cc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801d6d0:	2b50      	cmp	r3, #80	@ 0x50
 801d6d2:	d13e      	bne.n	801d752 <__gethex+0x126>
 801d6d4:	7873      	ldrb	r3, [r6, #1]
 801d6d6:	2b2b      	cmp	r3, #43	@ 0x2b
 801d6d8:	d033      	beq.n	801d742 <__gethex+0x116>
 801d6da:	2b2d      	cmp	r3, #45	@ 0x2d
 801d6dc:	d034      	beq.n	801d748 <__gethex+0x11c>
 801d6de:	1c71      	adds	r1, r6, #1
 801d6e0:	2400      	movs	r4, #0
 801d6e2:	7808      	ldrb	r0, [r1, #0]
 801d6e4:	f7ff ff8d 	bl	801d602 <__hexdig_fun>
 801d6e8:	1e43      	subs	r3, r0, #1
 801d6ea:	b2db      	uxtb	r3, r3
 801d6ec:	2b18      	cmp	r3, #24
 801d6ee:	d830      	bhi.n	801d752 <__gethex+0x126>
 801d6f0:	f1a0 0210 	sub.w	r2, r0, #16
 801d6f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d6f8:	f7ff ff83 	bl	801d602 <__hexdig_fun>
 801d6fc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 801d700:	fa5f fc8c 	uxtb.w	ip, ip
 801d704:	f1bc 0f18 	cmp.w	ip, #24
 801d708:	f04f 030a 	mov.w	r3, #10
 801d70c:	d91e      	bls.n	801d74c <__gethex+0x120>
 801d70e:	b104      	cbz	r4, 801d712 <__gethex+0xe6>
 801d710:	4252      	negs	r2, r2
 801d712:	4417      	add	r7, r2
 801d714:	f8ca 1000 	str.w	r1, [sl]
 801d718:	b1ed      	cbz	r5, 801d756 <__gethex+0x12a>
 801d71a:	f1bb 0f00 	cmp.w	fp, #0
 801d71e:	bf0c      	ite	eq
 801d720:	2506      	moveq	r5, #6
 801d722:	2500      	movne	r5, #0
 801d724:	4628      	mov	r0, r5
 801d726:	b005      	add	sp, #20
 801d728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d72c:	2500      	movs	r5, #0
 801d72e:	462c      	mov	r4, r5
 801d730:	e7b0      	b.n	801d694 <__gethex+0x68>
 801d732:	2c00      	cmp	r4, #0
 801d734:	d1c7      	bne.n	801d6c6 <__gethex+0x9a>
 801d736:	4627      	mov	r7, r4
 801d738:	e7c7      	b.n	801d6ca <__gethex+0x9e>
 801d73a:	464e      	mov	r6, r9
 801d73c:	462f      	mov	r7, r5
 801d73e:	2501      	movs	r5, #1
 801d740:	e7c3      	b.n	801d6ca <__gethex+0x9e>
 801d742:	2400      	movs	r4, #0
 801d744:	1cb1      	adds	r1, r6, #2
 801d746:	e7cc      	b.n	801d6e2 <__gethex+0xb6>
 801d748:	2401      	movs	r4, #1
 801d74a:	e7fb      	b.n	801d744 <__gethex+0x118>
 801d74c:	fb03 0002 	mla	r0, r3, r2, r0
 801d750:	e7ce      	b.n	801d6f0 <__gethex+0xc4>
 801d752:	4631      	mov	r1, r6
 801d754:	e7de      	b.n	801d714 <__gethex+0xe8>
 801d756:	eba6 0309 	sub.w	r3, r6, r9
 801d75a:	3b01      	subs	r3, #1
 801d75c:	4629      	mov	r1, r5
 801d75e:	2b07      	cmp	r3, #7
 801d760:	dc0a      	bgt.n	801d778 <__gethex+0x14c>
 801d762:	9801      	ldr	r0, [sp, #4]
 801d764:	f7fd ffce 	bl	801b704 <_Balloc>
 801d768:	4604      	mov	r4, r0
 801d76a:	b940      	cbnz	r0, 801d77e <__gethex+0x152>
 801d76c:	4b5c      	ldr	r3, [pc, #368]	@ (801d8e0 <__gethex+0x2b4>)
 801d76e:	4602      	mov	r2, r0
 801d770:	21e4      	movs	r1, #228	@ 0xe4
 801d772:	485c      	ldr	r0, [pc, #368]	@ (801d8e4 <__gethex+0x2b8>)
 801d774:	f7fd f906 	bl	801a984 <__assert_func>
 801d778:	3101      	adds	r1, #1
 801d77a:	105b      	asrs	r3, r3, #1
 801d77c:	e7ef      	b.n	801d75e <__gethex+0x132>
 801d77e:	f100 0a14 	add.w	sl, r0, #20
 801d782:	2300      	movs	r3, #0
 801d784:	4655      	mov	r5, sl
 801d786:	469b      	mov	fp, r3
 801d788:	45b1      	cmp	r9, r6
 801d78a:	d337      	bcc.n	801d7fc <__gethex+0x1d0>
 801d78c:	f845 bb04 	str.w	fp, [r5], #4
 801d790:	eba5 050a 	sub.w	r5, r5, sl
 801d794:	10ad      	asrs	r5, r5, #2
 801d796:	6125      	str	r5, [r4, #16]
 801d798:	4658      	mov	r0, fp
 801d79a:	f7fe f8a5 	bl	801b8e8 <__hi0bits>
 801d79e:	016d      	lsls	r5, r5, #5
 801d7a0:	f8d8 6000 	ldr.w	r6, [r8]
 801d7a4:	1a2d      	subs	r5, r5, r0
 801d7a6:	42b5      	cmp	r5, r6
 801d7a8:	dd54      	ble.n	801d854 <__gethex+0x228>
 801d7aa:	1bad      	subs	r5, r5, r6
 801d7ac:	4629      	mov	r1, r5
 801d7ae:	4620      	mov	r0, r4
 801d7b0:	f7fe fc39 	bl	801c026 <__any_on>
 801d7b4:	4681      	mov	r9, r0
 801d7b6:	b178      	cbz	r0, 801d7d8 <__gethex+0x1ac>
 801d7b8:	1e6b      	subs	r3, r5, #1
 801d7ba:	1159      	asrs	r1, r3, #5
 801d7bc:	f003 021f 	and.w	r2, r3, #31
 801d7c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801d7c4:	f04f 0901 	mov.w	r9, #1
 801d7c8:	fa09 f202 	lsl.w	r2, r9, r2
 801d7cc:	420a      	tst	r2, r1
 801d7ce:	d003      	beq.n	801d7d8 <__gethex+0x1ac>
 801d7d0:	454b      	cmp	r3, r9
 801d7d2:	dc36      	bgt.n	801d842 <__gethex+0x216>
 801d7d4:	f04f 0902 	mov.w	r9, #2
 801d7d8:	4629      	mov	r1, r5
 801d7da:	4620      	mov	r0, r4
 801d7dc:	f7ff febf 	bl	801d55e <rshift>
 801d7e0:	442f      	add	r7, r5
 801d7e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d7e6:	42bb      	cmp	r3, r7
 801d7e8:	da42      	bge.n	801d870 <__gethex+0x244>
 801d7ea:	9801      	ldr	r0, [sp, #4]
 801d7ec:	4621      	mov	r1, r4
 801d7ee:	f7fd ffc9 	bl	801b784 <_Bfree>
 801d7f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d7f4:	2300      	movs	r3, #0
 801d7f6:	6013      	str	r3, [r2, #0]
 801d7f8:	25a3      	movs	r5, #163	@ 0xa3
 801d7fa:	e793      	b.n	801d724 <__gethex+0xf8>
 801d7fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801d800:	2a2e      	cmp	r2, #46	@ 0x2e
 801d802:	d012      	beq.n	801d82a <__gethex+0x1fe>
 801d804:	2b20      	cmp	r3, #32
 801d806:	d104      	bne.n	801d812 <__gethex+0x1e6>
 801d808:	f845 bb04 	str.w	fp, [r5], #4
 801d80c:	f04f 0b00 	mov.w	fp, #0
 801d810:	465b      	mov	r3, fp
 801d812:	7830      	ldrb	r0, [r6, #0]
 801d814:	9303      	str	r3, [sp, #12]
 801d816:	f7ff fef4 	bl	801d602 <__hexdig_fun>
 801d81a:	9b03      	ldr	r3, [sp, #12]
 801d81c:	f000 000f 	and.w	r0, r0, #15
 801d820:	4098      	lsls	r0, r3
 801d822:	ea4b 0b00 	orr.w	fp, fp, r0
 801d826:	3304      	adds	r3, #4
 801d828:	e7ae      	b.n	801d788 <__gethex+0x15c>
 801d82a:	45b1      	cmp	r9, r6
 801d82c:	d8ea      	bhi.n	801d804 <__gethex+0x1d8>
 801d82e:	492b      	ldr	r1, [pc, #172]	@ (801d8dc <__gethex+0x2b0>)
 801d830:	9303      	str	r3, [sp, #12]
 801d832:	2201      	movs	r2, #1
 801d834:	4630      	mov	r0, r6
 801d836:	f7fc ff82 	bl	801a73e <strncmp>
 801d83a:	9b03      	ldr	r3, [sp, #12]
 801d83c:	2800      	cmp	r0, #0
 801d83e:	d1e1      	bne.n	801d804 <__gethex+0x1d8>
 801d840:	e7a2      	b.n	801d788 <__gethex+0x15c>
 801d842:	1ea9      	subs	r1, r5, #2
 801d844:	4620      	mov	r0, r4
 801d846:	f7fe fbee 	bl	801c026 <__any_on>
 801d84a:	2800      	cmp	r0, #0
 801d84c:	d0c2      	beq.n	801d7d4 <__gethex+0x1a8>
 801d84e:	f04f 0903 	mov.w	r9, #3
 801d852:	e7c1      	b.n	801d7d8 <__gethex+0x1ac>
 801d854:	da09      	bge.n	801d86a <__gethex+0x23e>
 801d856:	1b75      	subs	r5, r6, r5
 801d858:	4621      	mov	r1, r4
 801d85a:	9801      	ldr	r0, [sp, #4]
 801d85c:	462a      	mov	r2, r5
 801d85e:	f7fe f9a9 	bl	801bbb4 <__lshift>
 801d862:	1b7f      	subs	r7, r7, r5
 801d864:	4604      	mov	r4, r0
 801d866:	f100 0a14 	add.w	sl, r0, #20
 801d86a:	f04f 0900 	mov.w	r9, #0
 801d86e:	e7b8      	b.n	801d7e2 <__gethex+0x1b6>
 801d870:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d874:	42bd      	cmp	r5, r7
 801d876:	dd6f      	ble.n	801d958 <__gethex+0x32c>
 801d878:	1bed      	subs	r5, r5, r7
 801d87a:	42ae      	cmp	r6, r5
 801d87c:	dc34      	bgt.n	801d8e8 <__gethex+0x2bc>
 801d87e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d882:	2b02      	cmp	r3, #2
 801d884:	d022      	beq.n	801d8cc <__gethex+0x2a0>
 801d886:	2b03      	cmp	r3, #3
 801d888:	d024      	beq.n	801d8d4 <__gethex+0x2a8>
 801d88a:	2b01      	cmp	r3, #1
 801d88c:	d115      	bne.n	801d8ba <__gethex+0x28e>
 801d88e:	42ae      	cmp	r6, r5
 801d890:	d113      	bne.n	801d8ba <__gethex+0x28e>
 801d892:	2e01      	cmp	r6, #1
 801d894:	d10b      	bne.n	801d8ae <__gethex+0x282>
 801d896:	9a02      	ldr	r2, [sp, #8]
 801d898:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d89c:	6013      	str	r3, [r2, #0]
 801d89e:	2301      	movs	r3, #1
 801d8a0:	6123      	str	r3, [r4, #16]
 801d8a2:	f8ca 3000 	str.w	r3, [sl]
 801d8a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d8a8:	2562      	movs	r5, #98	@ 0x62
 801d8aa:	601c      	str	r4, [r3, #0]
 801d8ac:	e73a      	b.n	801d724 <__gethex+0xf8>
 801d8ae:	1e71      	subs	r1, r6, #1
 801d8b0:	4620      	mov	r0, r4
 801d8b2:	f7fe fbb8 	bl	801c026 <__any_on>
 801d8b6:	2800      	cmp	r0, #0
 801d8b8:	d1ed      	bne.n	801d896 <__gethex+0x26a>
 801d8ba:	9801      	ldr	r0, [sp, #4]
 801d8bc:	4621      	mov	r1, r4
 801d8be:	f7fd ff61 	bl	801b784 <_Bfree>
 801d8c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d8c4:	2300      	movs	r3, #0
 801d8c6:	6013      	str	r3, [r2, #0]
 801d8c8:	2550      	movs	r5, #80	@ 0x50
 801d8ca:	e72b      	b.n	801d724 <__gethex+0xf8>
 801d8cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	d1f3      	bne.n	801d8ba <__gethex+0x28e>
 801d8d2:	e7e0      	b.n	801d896 <__gethex+0x26a>
 801d8d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d8d6:	2b00      	cmp	r3, #0
 801d8d8:	d1dd      	bne.n	801d896 <__gethex+0x26a>
 801d8da:	e7ee      	b.n	801d8ba <__gethex+0x28e>
 801d8dc:	0801eb78 	.word	0x0801eb78
 801d8e0:	0801ea12 	.word	0x0801ea12
 801d8e4:	0801ebe9 	.word	0x0801ebe9
 801d8e8:	1e6f      	subs	r7, r5, #1
 801d8ea:	f1b9 0f00 	cmp.w	r9, #0
 801d8ee:	d130      	bne.n	801d952 <__gethex+0x326>
 801d8f0:	b127      	cbz	r7, 801d8fc <__gethex+0x2d0>
 801d8f2:	4639      	mov	r1, r7
 801d8f4:	4620      	mov	r0, r4
 801d8f6:	f7fe fb96 	bl	801c026 <__any_on>
 801d8fa:	4681      	mov	r9, r0
 801d8fc:	117a      	asrs	r2, r7, #5
 801d8fe:	2301      	movs	r3, #1
 801d900:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801d904:	f007 071f 	and.w	r7, r7, #31
 801d908:	40bb      	lsls	r3, r7
 801d90a:	4213      	tst	r3, r2
 801d90c:	4629      	mov	r1, r5
 801d90e:	4620      	mov	r0, r4
 801d910:	bf18      	it	ne
 801d912:	f049 0902 	orrne.w	r9, r9, #2
 801d916:	f7ff fe22 	bl	801d55e <rshift>
 801d91a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801d91e:	1b76      	subs	r6, r6, r5
 801d920:	2502      	movs	r5, #2
 801d922:	f1b9 0f00 	cmp.w	r9, #0
 801d926:	d047      	beq.n	801d9b8 <__gethex+0x38c>
 801d928:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d92c:	2b02      	cmp	r3, #2
 801d92e:	d015      	beq.n	801d95c <__gethex+0x330>
 801d930:	2b03      	cmp	r3, #3
 801d932:	d017      	beq.n	801d964 <__gethex+0x338>
 801d934:	2b01      	cmp	r3, #1
 801d936:	d109      	bne.n	801d94c <__gethex+0x320>
 801d938:	f019 0f02 	tst.w	r9, #2
 801d93c:	d006      	beq.n	801d94c <__gethex+0x320>
 801d93e:	f8da 3000 	ldr.w	r3, [sl]
 801d942:	ea49 0903 	orr.w	r9, r9, r3
 801d946:	f019 0f01 	tst.w	r9, #1
 801d94a:	d10e      	bne.n	801d96a <__gethex+0x33e>
 801d94c:	f045 0510 	orr.w	r5, r5, #16
 801d950:	e032      	b.n	801d9b8 <__gethex+0x38c>
 801d952:	f04f 0901 	mov.w	r9, #1
 801d956:	e7d1      	b.n	801d8fc <__gethex+0x2d0>
 801d958:	2501      	movs	r5, #1
 801d95a:	e7e2      	b.n	801d922 <__gethex+0x2f6>
 801d95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d95e:	f1c3 0301 	rsb	r3, r3, #1
 801d962:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d966:	2b00      	cmp	r3, #0
 801d968:	d0f0      	beq.n	801d94c <__gethex+0x320>
 801d96a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d96e:	f104 0314 	add.w	r3, r4, #20
 801d972:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d976:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d97a:	f04f 0c00 	mov.w	ip, #0
 801d97e:	4618      	mov	r0, r3
 801d980:	f853 2b04 	ldr.w	r2, [r3], #4
 801d984:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801d988:	d01b      	beq.n	801d9c2 <__gethex+0x396>
 801d98a:	3201      	adds	r2, #1
 801d98c:	6002      	str	r2, [r0, #0]
 801d98e:	2d02      	cmp	r5, #2
 801d990:	f104 0314 	add.w	r3, r4, #20
 801d994:	d13c      	bne.n	801da10 <__gethex+0x3e4>
 801d996:	f8d8 2000 	ldr.w	r2, [r8]
 801d99a:	3a01      	subs	r2, #1
 801d99c:	42b2      	cmp	r2, r6
 801d99e:	d109      	bne.n	801d9b4 <__gethex+0x388>
 801d9a0:	1171      	asrs	r1, r6, #5
 801d9a2:	2201      	movs	r2, #1
 801d9a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d9a8:	f006 061f 	and.w	r6, r6, #31
 801d9ac:	fa02 f606 	lsl.w	r6, r2, r6
 801d9b0:	421e      	tst	r6, r3
 801d9b2:	d13a      	bne.n	801da2a <__gethex+0x3fe>
 801d9b4:	f045 0520 	orr.w	r5, r5, #32
 801d9b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d9ba:	601c      	str	r4, [r3, #0]
 801d9bc:	9b02      	ldr	r3, [sp, #8]
 801d9be:	601f      	str	r7, [r3, #0]
 801d9c0:	e6b0      	b.n	801d724 <__gethex+0xf8>
 801d9c2:	4299      	cmp	r1, r3
 801d9c4:	f843 cc04 	str.w	ip, [r3, #-4]
 801d9c8:	d8d9      	bhi.n	801d97e <__gethex+0x352>
 801d9ca:	68a3      	ldr	r3, [r4, #8]
 801d9cc:	459b      	cmp	fp, r3
 801d9ce:	db17      	blt.n	801da00 <__gethex+0x3d4>
 801d9d0:	6861      	ldr	r1, [r4, #4]
 801d9d2:	9801      	ldr	r0, [sp, #4]
 801d9d4:	3101      	adds	r1, #1
 801d9d6:	f7fd fe95 	bl	801b704 <_Balloc>
 801d9da:	4681      	mov	r9, r0
 801d9dc:	b918      	cbnz	r0, 801d9e6 <__gethex+0x3ba>
 801d9de:	4b1a      	ldr	r3, [pc, #104]	@ (801da48 <__gethex+0x41c>)
 801d9e0:	4602      	mov	r2, r0
 801d9e2:	2184      	movs	r1, #132	@ 0x84
 801d9e4:	e6c5      	b.n	801d772 <__gethex+0x146>
 801d9e6:	6922      	ldr	r2, [r4, #16]
 801d9e8:	3202      	adds	r2, #2
 801d9ea:	f104 010c 	add.w	r1, r4, #12
 801d9ee:	0092      	lsls	r2, r2, #2
 801d9f0:	300c      	adds	r0, #12
 801d9f2:	f7fc ffb2 	bl	801a95a <memcpy>
 801d9f6:	4621      	mov	r1, r4
 801d9f8:	9801      	ldr	r0, [sp, #4]
 801d9fa:	f7fd fec3 	bl	801b784 <_Bfree>
 801d9fe:	464c      	mov	r4, r9
 801da00:	6923      	ldr	r3, [r4, #16]
 801da02:	1c5a      	adds	r2, r3, #1
 801da04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801da08:	6122      	str	r2, [r4, #16]
 801da0a:	2201      	movs	r2, #1
 801da0c:	615a      	str	r2, [r3, #20]
 801da0e:	e7be      	b.n	801d98e <__gethex+0x362>
 801da10:	6922      	ldr	r2, [r4, #16]
 801da12:	455a      	cmp	r2, fp
 801da14:	dd0b      	ble.n	801da2e <__gethex+0x402>
 801da16:	2101      	movs	r1, #1
 801da18:	4620      	mov	r0, r4
 801da1a:	f7ff fda0 	bl	801d55e <rshift>
 801da1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801da22:	3701      	adds	r7, #1
 801da24:	42bb      	cmp	r3, r7
 801da26:	f6ff aee0 	blt.w	801d7ea <__gethex+0x1be>
 801da2a:	2501      	movs	r5, #1
 801da2c:	e7c2      	b.n	801d9b4 <__gethex+0x388>
 801da2e:	f016 061f 	ands.w	r6, r6, #31
 801da32:	d0fa      	beq.n	801da2a <__gethex+0x3fe>
 801da34:	4453      	add	r3, sl
 801da36:	f1c6 0620 	rsb	r6, r6, #32
 801da3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801da3e:	f7fd ff53 	bl	801b8e8 <__hi0bits>
 801da42:	42b0      	cmp	r0, r6
 801da44:	dbe7      	blt.n	801da16 <__gethex+0x3ea>
 801da46:	e7f0      	b.n	801da2a <__gethex+0x3fe>
 801da48:	0801ea12 	.word	0x0801ea12

0801da4c <L_shift>:
 801da4c:	f1c2 0208 	rsb	r2, r2, #8
 801da50:	0092      	lsls	r2, r2, #2
 801da52:	b570      	push	{r4, r5, r6, lr}
 801da54:	f1c2 0620 	rsb	r6, r2, #32
 801da58:	6843      	ldr	r3, [r0, #4]
 801da5a:	6804      	ldr	r4, [r0, #0]
 801da5c:	fa03 f506 	lsl.w	r5, r3, r6
 801da60:	432c      	orrs	r4, r5
 801da62:	40d3      	lsrs	r3, r2
 801da64:	6004      	str	r4, [r0, #0]
 801da66:	f840 3f04 	str.w	r3, [r0, #4]!
 801da6a:	4288      	cmp	r0, r1
 801da6c:	d3f4      	bcc.n	801da58 <L_shift+0xc>
 801da6e:	bd70      	pop	{r4, r5, r6, pc}

0801da70 <__match>:
 801da70:	b530      	push	{r4, r5, lr}
 801da72:	6803      	ldr	r3, [r0, #0]
 801da74:	3301      	adds	r3, #1
 801da76:	f811 4b01 	ldrb.w	r4, [r1], #1
 801da7a:	b914      	cbnz	r4, 801da82 <__match+0x12>
 801da7c:	6003      	str	r3, [r0, #0]
 801da7e:	2001      	movs	r0, #1
 801da80:	bd30      	pop	{r4, r5, pc}
 801da82:	f813 2b01 	ldrb.w	r2, [r3], #1
 801da86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801da8a:	2d19      	cmp	r5, #25
 801da8c:	bf98      	it	ls
 801da8e:	3220      	addls	r2, #32
 801da90:	42a2      	cmp	r2, r4
 801da92:	d0f0      	beq.n	801da76 <__match+0x6>
 801da94:	2000      	movs	r0, #0
 801da96:	e7f3      	b.n	801da80 <__match+0x10>

0801da98 <__hexnan>:
 801da98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da9c:	680b      	ldr	r3, [r1, #0]
 801da9e:	6801      	ldr	r1, [r0, #0]
 801daa0:	115e      	asrs	r6, r3, #5
 801daa2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801daa6:	f013 031f 	ands.w	r3, r3, #31
 801daaa:	b087      	sub	sp, #28
 801daac:	bf18      	it	ne
 801daae:	3604      	addne	r6, #4
 801dab0:	2500      	movs	r5, #0
 801dab2:	1f37      	subs	r7, r6, #4
 801dab4:	4682      	mov	sl, r0
 801dab6:	4690      	mov	r8, r2
 801dab8:	9301      	str	r3, [sp, #4]
 801daba:	f846 5c04 	str.w	r5, [r6, #-4]
 801dabe:	46b9      	mov	r9, r7
 801dac0:	463c      	mov	r4, r7
 801dac2:	9502      	str	r5, [sp, #8]
 801dac4:	46ab      	mov	fp, r5
 801dac6:	784a      	ldrb	r2, [r1, #1]
 801dac8:	1c4b      	adds	r3, r1, #1
 801daca:	9303      	str	r3, [sp, #12]
 801dacc:	b342      	cbz	r2, 801db20 <__hexnan+0x88>
 801dace:	4610      	mov	r0, r2
 801dad0:	9105      	str	r1, [sp, #20]
 801dad2:	9204      	str	r2, [sp, #16]
 801dad4:	f7ff fd95 	bl	801d602 <__hexdig_fun>
 801dad8:	2800      	cmp	r0, #0
 801dada:	d151      	bne.n	801db80 <__hexnan+0xe8>
 801dadc:	9a04      	ldr	r2, [sp, #16]
 801dade:	9905      	ldr	r1, [sp, #20]
 801dae0:	2a20      	cmp	r2, #32
 801dae2:	d818      	bhi.n	801db16 <__hexnan+0x7e>
 801dae4:	9b02      	ldr	r3, [sp, #8]
 801dae6:	459b      	cmp	fp, r3
 801dae8:	dd13      	ble.n	801db12 <__hexnan+0x7a>
 801daea:	454c      	cmp	r4, r9
 801daec:	d206      	bcs.n	801dafc <__hexnan+0x64>
 801daee:	2d07      	cmp	r5, #7
 801daf0:	dc04      	bgt.n	801dafc <__hexnan+0x64>
 801daf2:	462a      	mov	r2, r5
 801daf4:	4649      	mov	r1, r9
 801daf6:	4620      	mov	r0, r4
 801daf8:	f7ff ffa8 	bl	801da4c <L_shift>
 801dafc:	4544      	cmp	r4, r8
 801dafe:	d952      	bls.n	801dba6 <__hexnan+0x10e>
 801db00:	2300      	movs	r3, #0
 801db02:	f1a4 0904 	sub.w	r9, r4, #4
 801db06:	f844 3c04 	str.w	r3, [r4, #-4]
 801db0a:	f8cd b008 	str.w	fp, [sp, #8]
 801db0e:	464c      	mov	r4, r9
 801db10:	461d      	mov	r5, r3
 801db12:	9903      	ldr	r1, [sp, #12]
 801db14:	e7d7      	b.n	801dac6 <__hexnan+0x2e>
 801db16:	2a29      	cmp	r2, #41	@ 0x29
 801db18:	d157      	bne.n	801dbca <__hexnan+0x132>
 801db1a:	3102      	adds	r1, #2
 801db1c:	f8ca 1000 	str.w	r1, [sl]
 801db20:	f1bb 0f00 	cmp.w	fp, #0
 801db24:	d051      	beq.n	801dbca <__hexnan+0x132>
 801db26:	454c      	cmp	r4, r9
 801db28:	d206      	bcs.n	801db38 <__hexnan+0xa0>
 801db2a:	2d07      	cmp	r5, #7
 801db2c:	dc04      	bgt.n	801db38 <__hexnan+0xa0>
 801db2e:	462a      	mov	r2, r5
 801db30:	4649      	mov	r1, r9
 801db32:	4620      	mov	r0, r4
 801db34:	f7ff ff8a 	bl	801da4c <L_shift>
 801db38:	4544      	cmp	r4, r8
 801db3a:	d936      	bls.n	801dbaa <__hexnan+0x112>
 801db3c:	f1a8 0204 	sub.w	r2, r8, #4
 801db40:	4623      	mov	r3, r4
 801db42:	f853 1b04 	ldr.w	r1, [r3], #4
 801db46:	f842 1f04 	str.w	r1, [r2, #4]!
 801db4a:	429f      	cmp	r7, r3
 801db4c:	d2f9      	bcs.n	801db42 <__hexnan+0xaa>
 801db4e:	1b3b      	subs	r3, r7, r4
 801db50:	f023 0303 	bic.w	r3, r3, #3
 801db54:	3304      	adds	r3, #4
 801db56:	3401      	adds	r4, #1
 801db58:	3e03      	subs	r6, #3
 801db5a:	42b4      	cmp	r4, r6
 801db5c:	bf88      	it	hi
 801db5e:	2304      	movhi	r3, #4
 801db60:	4443      	add	r3, r8
 801db62:	2200      	movs	r2, #0
 801db64:	f843 2b04 	str.w	r2, [r3], #4
 801db68:	429f      	cmp	r7, r3
 801db6a:	d2fb      	bcs.n	801db64 <__hexnan+0xcc>
 801db6c:	683b      	ldr	r3, [r7, #0]
 801db6e:	b91b      	cbnz	r3, 801db78 <__hexnan+0xe0>
 801db70:	4547      	cmp	r7, r8
 801db72:	d128      	bne.n	801dbc6 <__hexnan+0x12e>
 801db74:	2301      	movs	r3, #1
 801db76:	603b      	str	r3, [r7, #0]
 801db78:	2005      	movs	r0, #5
 801db7a:	b007      	add	sp, #28
 801db7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db80:	3501      	adds	r5, #1
 801db82:	2d08      	cmp	r5, #8
 801db84:	f10b 0b01 	add.w	fp, fp, #1
 801db88:	dd06      	ble.n	801db98 <__hexnan+0x100>
 801db8a:	4544      	cmp	r4, r8
 801db8c:	d9c1      	bls.n	801db12 <__hexnan+0x7a>
 801db8e:	2300      	movs	r3, #0
 801db90:	f844 3c04 	str.w	r3, [r4, #-4]
 801db94:	2501      	movs	r5, #1
 801db96:	3c04      	subs	r4, #4
 801db98:	6822      	ldr	r2, [r4, #0]
 801db9a:	f000 000f 	and.w	r0, r0, #15
 801db9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801dba2:	6020      	str	r0, [r4, #0]
 801dba4:	e7b5      	b.n	801db12 <__hexnan+0x7a>
 801dba6:	2508      	movs	r5, #8
 801dba8:	e7b3      	b.n	801db12 <__hexnan+0x7a>
 801dbaa:	9b01      	ldr	r3, [sp, #4]
 801dbac:	2b00      	cmp	r3, #0
 801dbae:	d0dd      	beq.n	801db6c <__hexnan+0xd4>
 801dbb0:	f1c3 0320 	rsb	r3, r3, #32
 801dbb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dbb8:	40da      	lsrs	r2, r3
 801dbba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801dbbe:	4013      	ands	r3, r2
 801dbc0:	f846 3c04 	str.w	r3, [r6, #-4]
 801dbc4:	e7d2      	b.n	801db6c <__hexnan+0xd4>
 801dbc6:	3f04      	subs	r7, #4
 801dbc8:	e7d0      	b.n	801db6c <__hexnan+0xd4>
 801dbca:	2004      	movs	r0, #4
 801dbcc:	e7d5      	b.n	801db7a <__hexnan+0xe2>

0801dbce <__ascii_mbtowc>:
 801dbce:	b082      	sub	sp, #8
 801dbd0:	b901      	cbnz	r1, 801dbd4 <__ascii_mbtowc+0x6>
 801dbd2:	a901      	add	r1, sp, #4
 801dbd4:	b142      	cbz	r2, 801dbe8 <__ascii_mbtowc+0x1a>
 801dbd6:	b14b      	cbz	r3, 801dbec <__ascii_mbtowc+0x1e>
 801dbd8:	7813      	ldrb	r3, [r2, #0]
 801dbda:	600b      	str	r3, [r1, #0]
 801dbdc:	7812      	ldrb	r2, [r2, #0]
 801dbde:	1e10      	subs	r0, r2, #0
 801dbe0:	bf18      	it	ne
 801dbe2:	2001      	movne	r0, #1
 801dbe4:	b002      	add	sp, #8
 801dbe6:	4770      	bx	lr
 801dbe8:	4610      	mov	r0, r2
 801dbea:	e7fb      	b.n	801dbe4 <__ascii_mbtowc+0x16>
 801dbec:	f06f 0001 	mvn.w	r0, #1
 801dbf0:	e7f8      	b.n	801dbe4 <__ascii_mbtowc+0x16>

0801dbf2 <__ascii_wctomb>:
 801dbf2:	4603      	mov	r3, r0
 801dbf4:	4608      	mov	r0, r1
 801dbf6:	b141      	cbz	r1, 801dc0a <__ascii_wctomb+0x18>
 801dbf8:	2aff      	cmp	r2, #255	@ 0xff
 801dbfa:	d904      	bls.n	801dc06 <__ascii_wctomb+0x14>
 801dbfc:	228a      	movs	r2, #138	@ 0x8a
 801dbfe:	601a      	str	r2, [r3, #0]
 801dc00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dc04:	4770      	bx	lr
 801dc06:	700a      	strb	r2, [r1, #0]
 801dc08:	2001      	movs	r0, #1
 801dc0a:	4770      	bx	lr

0801dc0c <_raise_r>:
 801dc0c:	291f      	cmp	r1, #31
 801dc0e:	b538      	push	{r3, r4, r5, lr}
 801dc10:	4605      	mov	r5, r0
 801dc12:	460c      	mov	r4, r1
 801dc14:	d904      	bls.n	801dc20 <_raise_r+0x14>
 801dc16:	2316      	movs	r3, #22
 801dc18:	6003      	str	r3, [r0, #0]
 801dc1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dc1e:	bd38      	pop	{r3, r4, r5, pc}
 801dc20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801dc22:	b112      	cbz	r2, 801dc2a <_raise_r+0x1e>
 801dc24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dc28:	b94b      	cbnz	r3, 801dc3e <_raise_r+0x32>
 801dc2a:	4628      	mov	r0, r5
 801dc2c:	f000 f830 	bl	801dc90 <_getpid_r>
 801dc30:	4622      	mov	r2, r4
 801dc32:	4601      	mov	r1, r0
 801dc34:	4628      	mov	r0, r5
 801dc36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dc3a:	f000 b817 	b.w	801dc6c <_kill_r>
 801dc3e:	2b01      	cmp	r3, #1
 801dc40:	d00a      	beq.n	801dc58 <_raise_r+0x4c>
 801dc42:	1c59      	adds	r1, r3, #1
 801dc44:	d103      	bne.n	801dc4e <_raise_r+0x42>
 801dc46:	2316      	movs	r3, #22
 801dc48:	6003      	str	r3, [r0, #0]
 801dc4a:	2001      	movs	r0, #1
 801dc4c:	e7e7      	b.n	801dc1e <_raise_r+0x12>
 801dc4e:	2100      	movs	r1, #0
 801dc50:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801dc54:	4620      	mov	r0, r4
 801dc56:	4798      	blx	r3
 801dc58:	2000      	movs	r0, #0
 801dc5a:	e7e0      	b.n	801dc1e <_raise_r+0x12>

0801dc5c <raise>:
 801dc5c:	4b02      	ldr	r3, [pc, #8]	@ (801dc68 <raise+0xc>)
 801dc5e:	4601      	mov	r1, r0
 801dc60:	6818      	ldr	r0, [r3, #0]
 801dc62:	f7ff bfd3 	b.w	801dc0c <_raise_r>
 801dc66:	bf00      	nop
 801dc68:	2000008c 	.word	0x2000008c

0801dc6c <_kill_r>:
 801dc6c:	b538      	push	{r3, r4, r5, lr}
 801dc6e:	4d07      	ldr	r5, [pc, #28]	@ (801dc8c <_kill_r+0x20>)
 801dc70:	2300      	movs	r3, #0
 801dc72:	4604      	mov	r4, r0
 801dc74:	4608      	mov	r0, r1
 801dc76:	4611      	mov	r1, r2
 801dc78:	602b      	str	r3, [r5, #0]
 801dc7a:	f7e6 f9e7 	bl	800404c <_kill>
 801dc7e:	1c43      	adds	r3, r0, #1
 801dc80:	d102      	bne.n	801dc88 <_kill_r+0x1c>
 801dc82:	682b      	ldr	r3, [r5, #0]
 801dc84:	b103      	cbz	r3, 801dc88 <_kill_r+0x1c>
 801dc86:	6023      	str	r3, [r4, #0]
 801dc88:	bd38      	pop	{r3, r4, r5, pc}
 801dc8a:	bf00      	nop
 801dc8c:	20009fe8 	.word	0x20009fe8

0801dc90 <_getpid_r>:
 801dc90:	f7e6 b9d4 	b.w	800403c <_getpid>

0801dc94 <_init>:
 801dc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc96:	bf00      	nop
 801dc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dc9a:	bc08      	pop	{r3}
 801dc9c:	469e      	mov	lr, r3
 801dc9e:	4770      	bx	lr

0801dca0 <_fini>:
 801dca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dca2:	bf00      	nop
 801dca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dca6:	bc08      	pop	{r3}
 801dca8:	469e      	mov	lr, r3
 801dcaa:	4770      	bx	lr
