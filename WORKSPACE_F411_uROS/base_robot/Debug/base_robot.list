
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dbbc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f64  0801dd60  0801dd60  0001ed60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ecc4  0801ecc4  0002024c  2**0
                  CONTENTS
  4 .ARM          00000008  0801ecc4  0801ecc4  0001fcc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801eccc  0801eccc  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801eccc  0801eccc  0001fccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ecd0  0801ecd0  0001fcd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  0801ecd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e770  20000250  0801ef20  00020250  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000e9c0  0801ef20  000209c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000e4c90  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001814b  00000000  00000000  00104f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000043a0  00000000  00000000  0011d058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000172d  00000000  00000000  001213f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002425e  00000000  00000000  00122b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0006f762  00000000  00000000  00146d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b86b8  00000000  00000000  001b64e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000009c  00000000  00000000  0026eb9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000115a4  00000000  00000000  0026ec3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  002801e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00057bbf  00000000  00000000  0028024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00009b70  00000000  00000000  002d7e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000250 	.word	0x20000250
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801dd44 	.word	0x0801dd44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000254 	.word	0x20000254
 80001dc:	0801dd44 	.word	0x0801dd44

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cd6:	f000 b9eb 	b.w	80010b0 <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d6c:	f000 b9a0 	b.w	80010b0 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	@ (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	@ (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	460c      	mov	r4, r1
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d14e      	bne.n	8000e9e <__udivmoddi4+0xaa>
 8000e00:	4694      	mov	ip, r2
 8000e02:	458c      	cmp	ip, r1
 8000e04:	4686      	mov	lr, r0
 8000e06:	fab2 f282 	clz	r2, r2
 8000e0a:	d962      	bls.n	8000ed2 <__udivmoddi4+0xde>
 8000e0c:	b14a      	cbz	r2, 8000e22 <__udivmoddi4+0x2e>
 8000e0e:	f1c2 0320 	rsb	r3, r2, #32
 8000e12:	4091      	lsls	r1, r2
 8000e14:	fa20 f303 	lsr.w	r3, r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	4319      	orrs	r1, r3
 8000e1e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e26:	fa1f f68c 	uxth.w	r6, ip
 8000e2a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e32:	fb07 1114 	mls	r1, r7, r4, r1
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb04 f106 	mul.w	r1, r4, r6
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x64>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e4a:	f080 8112 	bcs.w	8001072 <__udivmoddi4+0x27e>
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	f240 810f 	bls.w	8001072 <__udivmoddi4+0x27e>
 8000e54:	3c02      	subs	r4, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1a59      	subs	r1, r3, r1
 8000e5a:	fa1f f38e 	uxth.w	r3, lr
 8000e5e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e62:	fb07 1110 	mls	r1, r7, r0, r1
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f606 	mul.w	r6, r0, r6
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	d90a      	bls.n	8000e88 <__udivmoddi4+0x94>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000e7a:	f080 80fc 	bcs.w	8001076 <__udivmoddi4+0x282>
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	f240 80f9 	bls.w	8001076 <__udivmoddi4+0x282>
 8000e84:	4463      	add	r3, ip
 8000e86:	3802      	subs	r0, #2
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e8e:	2100      	movs	r1, #0
 8000e90:	b11d      	cbz	r5, 8000e9a <__udivmoddi4+0xa6>
 8000e92:	40d3      	lsrs	r3, r2
 8000e94:	2200      	movs	r2, #0
 8000e96:	e9c5 3200 	strd	r3, r2, [r5]
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d905      	bls.n	8000eae <__udivmoddi4+0xba>
 8000ea2:	b10d      	cbz	r5, 8000ea8 <__udivmoddi4+0xb4>
 8000ea4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e7f5      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000eae:	fab3 f183 	clz	r1, r3
 8000eb2:	2900      	cmp	r1, #0
 8000eb4:	d146      	bne.n	8000f44 <__udivmoddi4+0x150>
 8000eb6:	42a3      	cmp	r3, r4
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0xcc>
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	f0c0 80f0 	bcc.w	80010a0 <__udivmoddi4+0x2ac>
 8000ec0:	1a86      	subs	r6, r0, r2
 8000ec2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d0e6      	beq.n	8000e9a <__udivmoddi4+0xa6>
 8000ecc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ed0:	e7e3      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	f040 8090 	bne.w	8000ff8 <__udivmoddi4+0x204>
 8000ed8:	eba1 040c 	sub.w	r4, r1, ip
 8000edc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee0:	fa1f f78c 	uxth.w	r7, ip
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eee:	fb08 4416 	mls	r4, r8, r6, r4
 8000ef2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ef6:	fb07 f006 	mul.w	r0, r7, r6
 8000efa:	4298      	cmp	r0, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x11c>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x11a>
 8000f08:	4298      	cmp	r0, r3
 8000f0a:	f200 80cd 	bhi.w	80010a8 <__udivmoddi4+0x2b4>
 8000f0e:	4626      	mov	r6, r4
 8000f10:	1a1c      	subs	r4, r3, r0
 8000f12:	fa1f f38e 	uxth.w	r3, lr
 8000f16:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f1a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f1e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f22:	fb00 f707 	mul.w	r7, r0, r7
 8000f26:	429f      	cmp	r7, r3
 8000f28:	d908      	bls.n	8000f3c <__udivmoddi4+0x148>
 8000f2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f32:	d202      	bcs.n	8000f3a <__udivmoddi4+0x146>
 8000f34:	429f      	cmp	r7, r3
 8000f36:	f200 80b0 	bhi.w	800109a <__udivmoddi4+0x2a6>
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	1bdb      	subs	r3, r3, r7
 8000f3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f42:	e7a5      	b.n	8000e90 <__udivmoddi4+0x9c>
 8000f44:	f1c1 0620 	rsb	r6, r1, #32
 8000f48:	408b      	lsls	r3, r1
 8000f4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f54:	fa04 f301 	lsl.w	r3, r4, r1
 8000f58:	ea43 030c 	orr.w	r3, r3, ip
 8000f5c:	40f4      	lsrs	r4, r6
 8000f5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f62:	0c38      	lsrs	r0, r7, #16
 8000f64:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f68:	fbb4 fef0 	udiv	lr, r4, r0
 8000f6c:	fa1f fc87 	uxth.w	ip, r7
 8000f70:	fb00 441e 	mls	r4, r0, lr, r4
 8000f74:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f78:	fb0e f90c 	mul.w	r9, lr, ip
 8000f7c:	45a1      	cmp	r9, r4
 8000f7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f82:	d90a      	bls.n	8000f9a <__udivmoddi4+0x1a6>
 8000f84:	193c      	adds	r4, r7, r4
 8000f86:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f8a:	f080 8084 	bcs.w	8001096 <__udivmoddi4+0x2a2>
 8000f8e:	45a1      	cmp	r9, r4
 8000f90:	f240 8081 	bls.w	8001096 <__udivmoddi4+0x2a2>
 8000f94:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f98:	443c      	add	r4, r7
 8000f9a:	eba4 0409 	sub.w	r4, r4, r9
 8000f9e:	fa1f f983 	uxth.w	r9, r3
 8000fa2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fa6:	fb00 4413 	mls	r4, r0, r3, r4
 8000faa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fae:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fb2:	45a4      	cmp	ip, r4
 8000fb4:	d907      	bls.n	8000fc6 <__udivmoddi4+0x1d2>
 8000fb6:	193c      	adds	r4, r7, r4
 8000fb8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000fbc:	d267      	bcs.n	800108e <__udivmoddi4+0x29a>
 8000fbe:	45a4      	cmp	ip, r4
 8000fc0:	d965      	bls.n	800108e <__udivmoddi4+0x29a>
 8000fc2:	3b02      	subs	r3, #2
 8000fc4:	443c      	add	r4, r7
 8000fc6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fca:	fba0 9302 	umull	r9, r3, r0, r2
 8000fce:	eba4 040c 	sub.w	r4, r4, ip
 8000fd2:	429c      	cmp	r4, r3
 8000fd4:	46ce      	mov	lr, r9
 8000fd6:	469c      	mov	ip, r3
 8000fd8:	d351      	bcc.n	800107e <__udivmoddi4+0x28a>
 8000fda:	d04e      	beq.n	800107a <__udivmoddi4+0x286>
 8000fdc:	b155      	cbz	r5, 8000ff4 <__udivmoddi4+0x200>
 8000fde:	ebb8 030e 	subs.w	r3, r8, lr
 8000fe2:	eb64 040c 	sbc.w	r4, r4, ip
 8000fe6:	fa04 f606 	lsl.w	r6, r4, r6
 8000fea:	40cb      	lsrs	r3, r1
 8000fec:	431e      	orrs	r6, r3
 8000fee:	40cc      	lsrs	r4, r1
 8000ff0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	e750      	b.n	8000e9a <__udivmoddi4+0xa6>
 8000ff8:	f1c2 0320 	rsb	r3, r2, #32
 8000ffc:	fa20 f103 	lsr.w	r1, r0, r3
 8001000:	fa0c fc02 	lsl.w	ip, ip, r2
 8001004:	fa24 f303 	lsr.w	r3, r4, r3
 8001008:	4094      	lsls	r4, r2
 800100a:	430c      	orrs	r4, r1
 800100c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001010:	fa00 fe02 	lsl.w	lr, r0, r2
 8001014:	fa1f f78c 	uxth.w	r7, ip
 8001018:	fbb3 f0f8 	udiv	r0, r3, r8
 800101c:	fb08 3110 	mls	r1, r8, r0, r3
 8001020:	0c23      	lsrs	r3, r4, #16
 8001022:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001026:	fb00 f107 	mul.w	r1, r0, r7
 800102a:	4299      	cmp	r1, r3
 800102c:	d908      	bls.n	8001040 <__udivmoddi4+0x24c>
 800102e:	eb1c 0303 	adds.w	r3, ip, r3
 8001032:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001036:	d22c      	bcs.n	8001092 <__udivmoddi4+0x29e>
 8001038:	4299      	cmp	r1, r3
 800103a:	d92a      	bls.n	8001092 <__udivmoddi4+0x29e>
 800103c:	3802      	subs	r0, #2
 800103e:	4463      	add	r3, ip
 8001040:	1a5b      	subs	r3, r3, r1
 8001042:	b2a4      	uxth	r4, r4
 8001044:	fbb3 f1f8 	udiv	r1, r3, r8
 8001048:	fb08 3311 	mls	r3, r8, r1, r3
 800104c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001050:	fb01 f307 	mul.w	r3, r1, r7
 8001054:	42a3      	cmp	r3, r4
 8001056:	d908      	bls.n	800106a <__udivmoddi4+0x276>
 8001058:	eb1c 0404 	adds.w	r4, ip, r4
 800105c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001060:	d213      	bcs.n	800108a <__udivmoddi4+0x296>
 8001062:	42a3      	cmp	r3, r4
 8001064:	d911      	bls.n	800108a <__udivmoddi4+0x296>
 8001066:	3902      	subs	r1, #2
 8001068:	4464      	add	r4, ip
 800106a:	1ae4      	subs	r4, r4, r3
 800106c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001070:	e739      	b.n	8000ee6 <__udivmoddi4+0xf2>
 8001072:	4604      	mov	r4, r0
 8001074:	e6f0      	b.n	8000e58 <__udivmoddi4+0x64>
 8001076:	4608      	mov	r0, r1
 8001078:	e706      	b.n	8000e88 <__udivmoddi4+0x94>
 800107a:	45c8      	cmp	r8, r9
 800107c:	d2ae      	bcs.n	8000fdc <__udivmoddi4+0x1e8>
 800107e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001082:	eb63 0c07 	sbc.w	ip, r3, r7
 8001086:	3801      	subs	r0, #1
 8001088:	e7a8      	b.n	8000fdc <__udivmoddi4+0x1e8>
 800108a:	4631      	mov	r1, r6
 800108c:	e7ed      	b.n	800106a <__udivmoddi4+0x276>
 800108e:	4603      	mov	r3, r0
 8001090:	e799      	b.n	8000fc6 <__udivmoddi4+0x1d2>
 8001092:	4630      	mov	r0, r6
 8001094:	e7d4      	b.n	8001040 <__udivmoddi4+0x24c>
 8001096:	46d6      	mov	lr, sl
 8001098:	e77f      	b.n	8000f9a <__udivmoddi4+0x1a6>
 800109a:	4463      	add	r3, ip
 800109c:	3802      	subs	r0, #2
 800109e:	e74d      	b.n	8000f3c <__udivmoddi4+0x148>
 80010a0:	4606      	mov	r6, r0
 80010a2:	4623      	mov	r3, r4
 80010a4:	4608      	mov	r0, r1
 80010a6:	e70f      	b.n	8000ec8 <__udivmoddi4+0xd4>
 80010a8:	3e02      	subs	r6, #2
 80010aa:	4463      	add	r3, ip
 80010ac:	e730      	b.n	8000f10 <__udivmoddi4+0x11c>
 80010ae:	bf00      	nop

080010b0 <__aeabi_idiv0>:
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop

080010b4 <millis>:
// Locally used functions (private)
//---------------------------------------------------------
uint8_t VL53L0X_performSingleRefCalibration(uint8_t vhv_init_byte);

uint8_t millis()
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0

return 0;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	460a      	mov	r2, r1
 80010ce:	71fb      	strb	r3, [r7, #7]
 80010d0:	4613      	mov	r3, r2
 80010d2:	71bb      	strb	r3, [r7, #6]
	i2c1_WriteRegBuffer(0x53,reg,&value,1);
 80010d4:	1dba      	adds	r2, r7, #6
 80010d6:	79f9      	ldrb	r1, [r7, #7]
 80010d8:	2301      	movs	r3, #1
 80010da:	2053      	movs	r0, #83	@ 0x53
 80010dc:	f001 f818 	bl	8002110 <i2c1_WriteRegBuffer>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <writeReg16Bit>:
// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	80bb      	strh	r3, [r7, #4]
	uint8_t tab[2];
	tab[0]= ((value >> 8));
 80010f8:	88bb      	ldrh	r3, [r7, #4]
 80010fa:	0a1b      	lsrs	r3, r3, #8
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	733b      	strb	r3, [r7, #12]
	tab[1] = ((value ) & 0xFF);
 8001102:	88bb      	ldrh	r3, [r7, #4]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	737b      	strb	r3, [r7, #13]
	i2c1_WriteRegBuffer(0x53,reg,tab,2);
 8001108:	f107 020c 	add.w	r2, r7, #12
 800110c:	79f9      	ldrb	r1, [r7, #7]
 800110e:	2302      	movs	r3, #2
 8001110:	2053      	movs	r0, #83	@ 0x53
 8001112:	f000 fffd 	bl	8002110 <i2c1_WriteRegBuffer>
}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <writeReg32Bit>:
// Write a 32-bit register
void writeReg32Bit(uint8_t reg, uint32_t value){
 800111e:	b580      	push	{r7, lr}
 8001120:	b084      	sub	sp, #16
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	6039      	str	r1, [r7, #0]
 8001128:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[4];
		tab[3]= ((value >> 24) & 0xFF);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	0e1b      	lsrs	r3, r3, #24
 800112e:	b2db      	uxtb	r3, r3
 8001130:	73fb      	strb	r3, [r7, #15]
		tab[2]= ((value >> 16) & 0xFF);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	0c1b      	lsrs	r3, r3, #16
 8001136:	b2db      	uxtb	r3, r3
 8001138:	73bb      	strb	r3, [r7, #14]
		tab[1]= ((value >> 8) & 0xFF);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	b2db      	uxtb	r3, r3
 8001140:	737b      	strb	r3, [r7, #13]
		tab[0] = ((value ) & 0xFF);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	733b      	strb	r3, [r7, #12]
		i2c1_WriteRegBuffer(0x53,reg,tab,4);
 8001148:	f107 020c 	add.w	r2, r7, #12
 800114c:	79f9      	ldrb	r1, [r7, #7]
 800114e:	2304      	movs	r3, #4
 8001150:	2053      	movs	r0, #83	@ 0x53
 8001152:	f000 ffdd 	bl	8002110 <i2c1_WriteRegBuffer>
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <readReg>:
// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
  	uint8_t value=0;
 8001168:	2300      	movs	r3, #0
 800116a:	73fb      	strb	r3, [r7, #15]
  	i2c1_ReadRegBuffer(0x53,reg,&value,1);
 800116c:	f107 020f 	add.w	r2, r7, #15
 8001170:	79f9      	ldrb	r1, [r7, #7]
 8001172:	2301      	movs	r3, #1
 8001174:	2053      	movs	r0, #83	@ 0x53
 8001176:	f000 ff99 	bl	80020ac <i2c1_ReadRegBuffer>
  	return value;
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <readReg16Bit>:
// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[2];
	i2c1_ReadRegBuffer(0x53,reg,tab,2);
 800118e:	f107 020c 	add.w	r2, r7, #12
 8001192:	79f9      	ldrb	r1, [r7, #7]
 8001194:	2302      	movs	r3, #2
 8001196:	2053      	movs	r0, #83	@ 0x53
 8001198:	f000 ff88 	bl	80020ac <i2c1_ReadRegBuffer>
  	uint16_t value= ((uint16_t)tab[0] << 8) | (uint16_t)tab[1];
 800119c:	7b3b      	ldrb	r3, [r7, #12]
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7b7b      	ldrb	r3, [r7, #13]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	81fb      	strh	r3, [r7, #14]
  	return value;
 80011ac:	89fb      	ldrh	r3, [r7, #14]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <readMulti>:


// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	6039      	str	r1, [r7, #0]
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	4613      	mov	r3, r2
 80011c4:	71bb      	strb	r3, [r7, #6]
	uint8_t value=0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]

  while (count-- > 0)
 80011ca:	e00b      	b.n	80011e4 <readMulti+0x2e>
  {
	  i2c1_ReadRegBuffer(0x53,reg,&value,1);
 80011cc:	f107 020f 	add.w	r2, r7, #15
 80011d0:	79f9      	ldrb	r1, [r7, #7]
 80011d2:	2301      	movs	r3, #1
 80011d4:	2053      	movs	r0, #83	@ 0x53
 80011d6:	f000 ff69 	bl	80020ac <i2c1_ReadRegBuffer>
    *(dst++) = value;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	603a      	str	r2, [r7, #0]
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	701a      	strb	r2, [r3, #0]
  while (count-- > 0)
 80011e4:	79bb      	ldrb	r3, [r7, #6]
 80011e6:	1e5a      	subs	r2, r3, #1
 80011e8:	71ba      	strb	r2, [r7, #6]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1ee      	bne.n	80011cc <readMulti+0x16>
  }
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <VL53L0X_validateInterface>:
uint8_t VL53L0X_getAddress() {
  return g_i2cAddr;
}
//===========================================================================
uint8_t VL53L0X_validateInterface()
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
	uint16_t var=0;
 80011fe:	2300      	movs	r3, #0
 8001200:	80fb      	strh	r3, [r7, #6]
	var = readReg(0xC0);
 8001202:	20c0      	movs	r0, #192	@ 0xc0
 8001204:	f7ff ffab 	bl	800115e <readReg>
 8001208:	4603      	mov	r3, r0
 800120a:	80fb      	strh	r3, [r7, #6]
	if ( var == 0xEE)
 800120c:	88fb      	ldrh	r3, [r7, #6]
 800120e:	2bee      	cmp	r3, #238	@ 0xee
 8001210:	d121      	bne.n	8001256 <VL53L0X_validateInterface+0x5e>
	{
		var =readReg(0xC1);
 8001212:	20c1      	movs	r0, #193	@ 0xc1
 8001214:	f7ff ffa3 	bl	800115e <readReg>
 8001218:	4603      	mov	r3, r0
 800121a:	80fb      	strh	r3, [r7, #6]
		if ( var == 0xAA)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	2baa      	cmp	r3, #170	@ 0xaa
 8001220:	d119      	bne.n	8001256 <VL53L0X_validateInterface+0x5e>
		{
			var =readReg(0xC2);
 8001222:	20c2      	movs	r0, #194	@ 0xc2
 8001224:	f7ff ff9b 	bl	800115e <readReg>
 8001228:	4603      	mov	r3, r0
 800122a:	80fb      	strh	r3, [r7, #6]
			if ( var == 0x10)
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	2b10      	cmp	r3, #16
 8001230:	d111      	bne.n	8001256 <VL53L0X_validateInterface+0x5e>
			{
				var =readReg16Bit(0x51);
 8001232:	2051      	movs	r0, #81	@ 0x51
 8001234:	f7ff ffa6 	bl	8001184 <readReg16Bit>
 8001238:	4603      	mov	r3, r0
 800123a:	80fb      	strh	r3, [r7, #6]
				if ( var == 0x0096) // doc 0x0099 ??
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	2b96      	cmp	r3, #150	@ 0x96
 8001240:	d109      	bne.n	8001256 <VL53L0X_validateInterface+0x5e>
				{
					var =readReg16Bit(0x61);
 8001242:	2061      	movs	r0, #97	@ 0x61
 8001244:	f7ff ff9e 	bl	8001184 <readReg16Bit>
 8001248:	4603      	mov	r3, r0
 800124a:	80fb      	strh	r3, [r7, #6]
					if ( var == 0x0000)
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <VL53L0X_validateInterface+0x5e>
					{
						return 0;
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <VL53L0X_validateInterface+0x60>
					}
				}
			}
		}
	}
	return -1;
 8001256:	23ff      	movs	r3, #255	@ 0xff
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <VL53L0X_init>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
uint8_t VL53L0X_init( ){
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
  //****************************************************************************
  // DATA INIT
  // "Set I2C standard mode"
  writeReg(I2C_MODE, 0x00);
 8001266:	2100      	movs	r1, #0
 8001268:	2088      	movs	r0, #136	@ 0x88
 800126a:	f7ff ff2b 	bl	80010c4 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 800126e:	2101      	movs	r1, #1
 8001270:	2080      	movs	r0, #128	@ 0x80
 8001272:	f7ff ff27 	bl	80010c4 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x01);
 8001276:	2101      	movs	r1, #1
 8001278:	20ff      	movs	r0, #255	@ 0xff
 800127a:	f7ff ff23 	bl	80010c4 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 800127e:	2100      	movs	r1, #0
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff ff1f 	bl	80010c4 <writeReg>
  g_stopVariable = readReg(0x91);
 8001286:	2091      	movs	r0, #145	@ 0x91
 8001288:	f7ff ff69 	bl	800115e <readReg>
 800128c:	4603      	mov	r3, r0
 800128e:	461a      	mov	r2, r3
 8001290:	4bde      	ldr	r3, [pc, #888]	@ (800160c <VL53L0X_init+0x3ac>)
 8001292:	701a      	strb	r2, [r3, #0]
  writeReg(SYSRANGE_START, 0x01);
 8001294:	2101      	movs	r1, #1
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff ff14 	bl	80010c4 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 800129c:	2100      	movs	r1, #0
 800129e:	20ff      	movs	r0, #255	@ 0xff
 80012a0:	f7ff ff10 	bl	80010c4 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 80012a4:	2100      	movs	r1, #0
 80012a6:	2080      	movs	r0, #128	@ 0x80
 80012a8:	f7ff ff0c 	bl	80010c4 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80012ac:	2060      	movs	r0, #96	@ 0x60
 80012ae:	f7ff ff56 	bl	800115e <readReg>
 80012b2:	4603      	mov	r3, r0
 80012b4:	f043 0312 	orr.w	r3, r3, #18
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	4619      	mov	r1, r3
 80012bc:	2060      	movs	r0, #96	@ 0x60
 80012be:	f7ff ff01 	bl	80010c4 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  VL53L0X_setSignalRateLimit(0.25);
 80012c2:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 80012c6:	f000 f9a3 	bl	8001610 <VL53L0X_setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80012ca:	21ff      	movs	r1, #255	@ 0xff
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff fef9 	bl	80010c4 <writeReg>
  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!VL53L0X_getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 80012d2:	1dba      	adds	r2, r7, #6
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f9e9 	bl	80016b0 <VL53L0X_getSpadInfo>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d101      	bne.n	80012e8 <VL53L0X_init+0x88>
 80012e4:	2300      	movs	r3, #0
 80012e6:	e18d      	b.n	8001604 <VL53L0X_init+0x3a4>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 80012e8:	463b      	mov	r3, r7
 80012ea:	2206      	movs	r2, #6
 80012ec:	4619      	mov	r1, r3
 80012ee:	20b0      	movs	r0, #176	@ 0xb0
 80012f0:	f7ff ff61 	bl	80011b6 <readMulti>
  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)
  writeReg(INTERNAL_TUNING_2, 0x01);
 80012f4:	2101      	movs	r1, #1
 80012f6:	20ff      	movs	r0, #255	@ 0xff
 80012f8:	f7ff fee4 	bl	80010c4 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80012fc:	2100      	movs	r1, #0
 80012fe:	204f      	movs	r0, #79	@ 0x4f
 8001300:	f7ff fee0 	bl	80010c4 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8001304:	212c      	movs	r1, #44	@ 0x2c
 8001306:	204e      	movs	r0, #78	@ 0x4e
 8001308:	f7ff fedc 	bl	80010c4 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 800130c:	2100      	movs	r1, #0
 800130e:	20ff      	movs	r0, #255	@ 0xff
 8001310:	f7ff fed8 	bl	80010c4 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001314:	21b4      	movs	r1, #180	@ 0xb4
 8001316:	20b6      	movs	r0, #182	@ 0xb6
 8001318:	f7ff fed4 	bl	80010c4 <writeReg>
  // -- VL53L0X_set_reference_spads() end
  //****************************************************************************
  // LOAD TUNING SETTINGS
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(INTERNAL_TUNING_2, 0x01);
 800131c:	2101      	movs	r1, #1
 800131e:	20ff      	movs	r0, #255	@ 0xff
 8001320:	f7ff fed0 	bl	80010c4 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 8001324:	2100      	movs	r1, #0
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff fecc 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 800132c:	2100      	movs	r1, #0
 800132e:	20ff      	movs	r0, #255	@ 0xff
 8001330:	f7ff fec8 	bl	80010c4 <writeReg>
  writeReg(SYSTEM_RANGE_CONFIG, 0x00);
 8001334:	2100      	movs	r1, #0
 8001336:	2009      	movs	r0, #9
 8001338:	f7ff fec4 	bl	80010c4 <writeReg>
  writeReg(0x10, 0x00);
 800133c:	2100      	movs	r1, #0
 800133e:	2010      	movs	r0, #16
 8001340:	f7ff fec0 	bl	80010c4 <writeReg>
  writeReg(0x11, 0x00);
 8001344:	2100      	movs	r1, #0
 8001346:	2011      	movs	r0, #17
 8001348:	f7ff febc 	bl	80010c4 <writeReg>

  writeReg(0x24, 0x01);
 800134c:	2101      	movs	r1, #1
 800134e:	2024      	movs	r0, #36	@ 0x24
 8001350:	f7ff feb8 	bl	80010c4 <writeReg>
  writeReg(0x25, 0xFF);
 8001354:	21ff      	movs	r1, #255	@ 0xff
 8001356:	2025      	movs	r0, #37	@ 0x25
 8001358:	f7ff feb4 	bl	80010c4 <writeReg>
  writeReg(0x75, 0x00);
 800135c:	2100      	movs	r1, #0
 800135e:	2075      	movs	r0, #117	@ 0x75
 8001360:	f7ff feb0 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001364:	2101      	movs	r1, #1
 8001366:	20ff      	movs	r0, #255	@ 0xff
 8001368:	f7ff feac 	bl	80010c4 <writeReg>
  writeReg(0x4E, 0x2C);
 800136c:	212c      	movs	r1, #44	@ 0x2c
 800136e:	204e      	movs	r0, #78	@ 0x4e
 8001370:	f7ff fea8 	bl	80010c4 <writeReg>
  writeReg(0x48, 0x00);
 8001374:	2100      	movs	r1, #0
 8001376:	2048      	movs	r0, #72	@ 0x48
 8001378:	f7ff fea4 	bl	80010c4 <writeReg>
  writeReg(0x30, 0x20);
 800137c:	2120      	movs	r1, #32
 800137e:	2030      	movs	r0, #48	@ 0x30
 8001380:	f7ff fea0 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001384:	2100      	movs	r1, #0
 8001386:	20ff      	movs	r0, #255	@ 0xff
 8001388:	f7ff fe9c 	bl	80010c4 <writeReg>
  writeReg(0x30, 0x09);
 800138c:	2109      	movs	r1, #9
 800138e:	2030      	movs	r0, #48	@ 0x30
 8001390:	f7ff fe98 	bl	80010c4 <writeReg>
  writeReg(0x54, 0x00);
 8001394:	2100      	movs	r1, #0
 8001396:	2054      	movs	r0, #84	@ 0x54
 8001398:	f7ff fe94 	bl	80010c4 <writeReg>
  writeReg(0x31, 0x04);
 800139c:	2104      	movs	r1, #4
 800139e:	2031      	movs	r0, #49	@ 0x31
 80013a0:	f7ff fe90 	bl	80010c4 <writeReg>
  writeReg(0x32, 0x03);
 80013a4:	2103      	movs	r1, #3
 80013a6:	2032      	movs	r0, #50	@ 0x32
 80013a8:	f7ff fe8c 	bl	80010c4 <writeReg>
  writeReg(0x40, 0x83);
 80013ac:	2183      	movs	r1, #131	@ 0x83
 80013ae:	2040      	movs	r0, #64	@ 0x40
 80013b0:	f7ff fe88 	bl	80010c4 <writeReg>
  writeReg(0x46, 0x25);
 80013b4:	2125      	movs	r1, #37	@ 0x25
 80013b6:	2046      	movs	r0, #70	@ 0x46
 80013b8:	f7ff fe84 	bl	80010c4 <writeReg>
  writeReg(0x60, 0x00);
 80013bc:	2100      	movs	r1, #0
 80013be:	2060      	movs	r0, #96	@ 0x60
 80013c0:	f7ff fe80 	bl	80010c4 <writeReg>
  writeReg(0x27, 0x00);
 80013c4:	2100      	movs	r1, #0
 80013c6:	2027      	movs	r0, #39	@ 0x27
 80013c8:	f7ff fe7c 	bl	80010c4 <writeReg>
  writeReg(0x50, 0x06);
 80013cc:	2106      	movs	r1, #6
 80013ce:	2050      	movs	r0, #80	@ 0x50
 80013d0:	f7ff fe78 	bl	80010c4 <writeReg>
  writeReg(0x51, 0x00);
 80013d4:	2100      	movs	r1, #0
 80013d6:	2051      	movs	r0, #81	@ 0x51
 80013d8:	f7ff fe74 	bl	80010c4 <writeReg>
  writeReg(0x52, 0x96);
 80013dc:	2196      	movs	r1, #150	@ 0x96
 80013de:	2052      	movs	r0, #82	@ 0x52
 80013e0:	f7ff fe70 	bl	80010c4 <writeReg>
  writeReg(0x56, 0x08);
 80013e4:	2108      	movs	r1, #8
 80013e6:	2056      	movs	r0, #86	@ 0x56
 80013e8:	f7ff fe6c 	bl	80010c4 <writeReg>
  writeReg(0x57, 0x30);
 80013ec:	2130      	movs	r1, #48	@ 0x30
 80013ee:	2057      	movs	r0, #87	@ 0x57
 80013f0:	f7ff fe68 	bl	80010c4 <writeReg>
  writeReg(0x61, 0x00);
 80013f4:	2100      	movs	r1, #0
 80013f6:	2061      	movs	r0, #97	@ 0x61
 80013f8:	f7ff fe64 	bl	80010c4 <writeReg>
  writeReg(0x62, 0x00);
 80013fc:	2100      	movs	r1, #0
 80013fe:	2062      	movs	r0, #98	@ 0x62
 8001400:	f7ff fe60 	bl	80010c4 <writeReg>
  writeReg(0x64, 0x00);
 8001404:	2100      	movs	r1, #0
 8001406:	2064      	movs	r0, #100	@ 0x64
 8001408:	f7ff fe5c 	bl	80010c4 <writeReg>
  writeReg(0x65, 0x00);
 800140c:	2100      	movs	r1, #0
 800140e:	2065      	movs	r0, #101	@ 0x65
 8001410:	f7ff fe58 	bl	80010c4 <writeReg>
  writeReg(0x66, 0xA0);
 8001414:	21a0      	movs	r1, #160	@ 0xa0
 8001416:	2066      	movs	r0, #102	@ 0x66
 8001418:	f7ff fe54 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 800141c:	2101      	movs	r1, #1
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	f7ff fe50 	bl	80010c4 <writeReg>
  writeReg(0x22, 0x32);
 8001424:	2132      	movs	r1, #50	@ 0x32
 8001426:	2022      	movs	r0, #34	@ 0x22
 8001428:	f7ff fe4c 	bl	80010c4 <writeReg>
  writeReg(0x47, 0x14);
 800142c:	2114      	movs	r1, #20
 800142e:	2047      	movs	r0, #71	@ 0x47
 8001430:	f7ff fe48 	bl	80010c4 <writeReg>
  writeReg(0x49, 0xFF);
 8001434:	21ff      	movs	r1, #255	@ 0xff
 8001436:	2049      	movs	r0, #73	@ 0x49
 8001438:	f7ff fe44 	bl	80010c4 <writeReg>
  writeReg(0x4A, 0x00);
 800143c:	2100      	movs	r1, #0
 800143e:	204a      	movs	r0, #74	@ 0x4a
 8001440:	f7ff fe40 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001444:	2100      	movs	r1, #0
 8001446:	20ff      	movs	r0, #255	@ 0xff
 8001448:	f7ff fe3c 	bl	80010c4 <writeReg>
  writeReg(0x7A, 0x0A);
 800144c:	210a      	movs	r1, #10
 800144e:	207a      	movs	r0, #122	@ 0x7a
 8001450:	f7ff fe38 	bl	80010c4 <writeReg>
  writeReg(0x7B, 0x00);
 8001454:	2100      	movs	r1, #0
 8001456:	207b      	movs	r0, #123	@ 0x7b
 8001458:	f7ff fe34 	bl	80010c4 <writeReg>
  writeReg(0x78, 0x21);
 800145c:	2121      	movs	r1, #33	@ 0x21
 800145e:	2078      	movs	r0, #120	@ 0x78
 8001460:	f7ff fe30 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001464:	2101      	movs	r1, #1
 8001466:	20ff      	movs	r0, #255	@ 0xff
 8001468:	f7ff fe2c 	bl	80010c4 <writeReg>
  writeReg(0x23, 0x34);
 800146c:	2134      	movs	r1, #52	@ 0x34
 800146e:	2023      	movs	r0, #35	@ 0x23
 8001470:	f7ff fe28 	bl	80010c4 <writeReg>
  writeReg(0x42, 0x00);
 8001474:	2100      	movs	r1, #0
 8001476:	2042      	movs	r0, #66	@ 0x42
 8001478:	f7ff fe24 	bl	80010c4 <writeReg>
  writeReg(0x44, 0xFF);
 800147c:	21ff      	movs	r1, #255	@ 0xff
 800147e:	2044      	movs	r0, #68	@ 0x44
 8001480:	f7ff fe20 	bl	80010c4 <writeReg>
  writeReg(0x45, 0x26);
 8001484:	2126      	movs	r1, #38	@ 0x26
 8001486:	2045      	movs	r0, #69	@ 0x45
 8001488:	f7ff fe1c 	bl	80010c4 <writeReg>
  writeReg(0x46, 0x05);
 800148c:	2105      	movs	r1, #5
 800148e:	2046      	movs	r0, #70	@ 0x46
 8001490:	f7ff fe18 	bl	80010c4 <writeReg>
  writeReg(0x40, 0x40);
 8001494:	2140      	movs	r1, #64	@ 0x40
 8001496:	2040      	movs	r0, #64	@ 0x40
 8001498:	f7ff fe14 	bl	80010c4 <writeReg>
  writeReg(0x0E, 0x06);
 800149c:	2106      	movs	r1, #6
 800149e:	200e      	movs	r0, #14
 80014a0:	f7ff fe10 	bl	80010c4 <writeReg>
  writeReg(0x20, 0x1A);
 80014a4:	211a      	movs	r1, #26
 80014a6:	2020      	movs	r0, #32
 80014a8:	f7ff fe0c 	bl	80010c4 <writeReg>
  writeReg(0x43, 0x40);
 80014ac:	2140      	movs	r1, #64	@ 0x40
 80014ae:	2043      	movs	r0, #67	@ 0x43
 80014b0:	f7ff fe08 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 80014b4:	2100      	movs	r1, #0
 80014b6:	20ff      	movs	r0, #255	@ 0xff
 80014b8:	f7ff fe04 	bl	80010c4 <writeReg>
  writeReg(0x34, 0x03);
 80014bc:	2103      	movs	r1, #3
 80014be:	2034      	movs	r0, #52	@ 0x34
 80014c0:	f7ff fe00 	bl	80010c4 <writeReg>
  writeReg(0x35, 0x44);
 80014c4:	2144      	movs	r1, #68	@ 0x44
 80014c6:	2035      	movs	r0, #53	@ 0x35
 80014c8:	f7ff fdfc 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 80014cc:	2101      	movs	r1, #1
 80014ce:	20ff      	movs	r0, #255	@ 0xff
 80014d0:	f7ff fdf8 	bl	80010c4 <writeReg>
  writeReg(0x31, 0x04);
 80014d4:	2104      	movs	r1, #4
 80014d6:	2031      	movs	r0, #49	@ 0x31
 80014d8:	f7ff fdf4 	bl	80010c4 <writeReg>
  writeReg(0x4B, 0x09);
 80014dc:	2109      	movs	r1, #9
 80014de:	204b      	movs	r0, #75	@ 0x4b
 80014e0:	f7ff fdf0 	bl	80010c4 <writeReg>
  writeReg(0x4C, 0x05);
 80014e4:	2105      	movs	r1, #5
 80014e6:	204c      	movs	r0, #76	@ 0x4c
 80014e8:	f7ff fdec 	bl	80010c4 <writeReg>
  writeReg(0x4D, 0x04);
 80014ec:	2104      	movs	r1, #4
 80014ee:	204d      	movs	r0, #77	@ 0x4d
 80014f0:	f7ff fde8 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 80014f4:	2100      	movs	r1, #0
 80014f6:	20ff      	movs	r0, #255	@ 0xff
 80014f8:	f7ff fde4 	bl	80010c4 <writeReg>
  writeReg(0x44, 0x00);
 80014fc:	2100      	movs	r1, #0
 80014fe:	2044      	movs	r0, #68	@ 0x44
 8001500:	f7ff fde0 	bl	80010c4 <writeReg>
  writeReg(0x45, 0x20);
 8001504:	2120      	movs	r1, #32
 8001506:	2045      	movs	r0, #69	@ 0x45
 8001508:	f7ff fddc 	bl	80010c4 <writeReg>
  writeReg(0x47, 0x08);
 800150c:	2108      	movs	r1, #8
 800150e:	2047      	movs	r0, #71	@ 0x47
 8001510:	f7ff fdd8 	bl	80010c4 <writeReg>
  writeReg(0x48, 0x28);
 8001514:	2128      	movs	r1, #40	@ 0x28
 8001516:	2048      	movs	r0, #72	@ 0x48
 8001518:	f7ff fdd4 	bl	80010c4 <writeReg>
  writeReg(0x67, 0x00);
 800151c:	2100      	movs	r1, #0
 800151e:	2067      	movs	r0, #103	@ 0x67
 8001520:	f7ff fdd0 	bl	80010c4 <writeReg>
  writeReg(0x70, 0x04);
 8001524:	2104      	movs	r1, #4
 8001526:	2070      	movs	r0, #112	@ 0x70
 8001528:	f7ff fdcc 	bl	80010c4 <writeReg>
  writeReg(0x71, 0x01);
 800152c:	2101      	movs	r1, #1
 800152e:	2071      	movs	r0, #113	@ 0x71
 8001530:	f7ff fdc8 	bl	80010c4 <writeReg>
  writeReg(0x72, 0xFE);
 8001534:	21fe      	movs	r1, #254	@ 0xfe
 8001536:	2072      	movs	r0, #114	@ 0x72
 8001538:	f7ff fdc4 	bl	80010c4 <writeReg>
  writeReg(0x76, 0x00);
 800153c:	2100      	movs	r1, #0
 800153e:	2076      	movs	r0, #118	@ 0x76
 8001540:	f7ff fdc0 	bl	80010c4 <writeReg>
  writeReg(0x77, 0x00);
 8001544:	2100      	movs	r1, #0
 8001546:	2077      	movs	r0, #119	@ 0x77
 8001548:	f7ff fdbc 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 800154c:	2101      	movs	r1, #1
 800154e:	20ff      	movs	r0, #255	@ 0xff
 8001550:	f7ff fdb8 	bl	80010c4 <writeReg>
  writeReg(0x0D, 0x01);
 8001554:	2101      	movs	r1, #1
 8001556:	200d      	movs	r0, #13
 8001558:	f7ff fdb4 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 800155c:	2100      	movs	r1, #0
 800155e:	20ff      	movs	r0, #255	@ 0xff
 8001560:	f7ff fdb0 	bl	80010c4 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 8001564:	2101      	movs	r1, #1
 8001566:	2080      	movs	r0, #128	@ 0x80
 8001568:	f7ff fdac 	bl	80010c4 <writeReg>
  writeReg(0x01, 0xF8);
 800156c:	21f8      	movs	r1, #248	@ 0xf8
 800156e:	2001      	movs	r0, #1
 8001570:	f7ff fda8 	bl	80010c4 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 8001574:	2101      	movs	r1, #1
 8001576:	20ff      	movs	r0, #255	@ 0xff
 8001578:	f7ff fda4 	bl	80010c4 <writeReg>
  writeReg(0x8E, 0x01);
 800157c:	2101      	movs	r1, #1
 800157e:	208e      	movs	r0, #142	@ 0x8e
 8001580:	f7ff fda0 	bl	80010c4 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 8001584:	2101      	movs	r1, #1
 8001586:	2000      	movs	r0, #0
 8001588:	f7ff fd9c 	bl	80010c4 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 800158c:	2100      	movs	r1, #0
 800158e:	20ff      	movs	r0, #255	@ 0xff
 8001590:	f7ff fd98 	bl	80010c4 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 8001594:	2100      	movs	r1, #0
 8001596:	2080      	movs	r0, #128	@ 0x80
 8001598:	f7ff fd94 	bl	80010c4 <writeReg>
  //***************************************************************************
  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 800159c:	2104      	movs	r1, #4
 800159e:	200a      	movs	r0, #10
 80015a0:	f7ff fd90 	bl	80010c4 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80015a4:	2084      	movs	r0, #132	@ 0x84
 80015a6:	f7ff fdda 	bl	800115e <readReg>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f023 0310 	bic.w	r3, r3, #16
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4619      	mov	r1, r3
 80015b4:	2084      	movs	r0, #132	@ 0x84
 80015b6:	f7ff fd85 	bl	80010c4 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80015ba:	2101      	movs	r1, #1
 80015bc:	200b      	movs	r0, #11
 80015be:	f7ff fd81 	bl	80010c4 <writeReg>
  //***************************************************************************
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80015c2:	21e8      	movs	r1, #232	@ 0xe8
 80015c4:	2001      	movs	r0, #1
 80015c6:	f7ff fd7d 	bl	80010c4 <writeReg>
  //***************************************************************************
  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())
  // -- VL53L0X_perform_vhv_calibration() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 80015ca:	2101      	movs	r1, #1
 80015cc:	2001      	movs	r0, #1
 80015ce:	f7ff fd79 	bl	80010c4 <writeReg>
  if (!VL53L0X_performSingleRefCalibration(0x40)) { return false; }
 80015d2:	2040      	movs	r0, #64	@ 0x40
 80015d4:	f000 f852 	bl	800167c <VL53L0X_performSingleRefCalibration>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <VL53L0X_init+0x382>
 80015de:	2300      	movs	r3, #0
 80015e0:	e010      	b.n	8001604 <VL53L0X_init+0x3a4>
  //***************************************************************************
  // -- VL53L0X_perform_phase_calibration() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 80015e2:	2102      	movs	r1, #2
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff fd6d 	bl	80010c4 <writeReg>
  if (!VL53L0X_performSingleRefCalibration(0x00)) { return false; }
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 f846 	bl	800167c <VL53L0X_performSingleRefCalibration>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <VL53L0X_init+0x39a>
 80015f6:	2300      	movs	r3, #0
 80015f8:	e004      	b.n	8001604 <VL53L0X_init+0x3a4>
  //***************************************************************************
  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80015fa:	21e8      	movs	r1, #232	@ 0xe8
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7ff fd61 	bl	80010c4 <writeReg>
  //***************************************************************************
  return true;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000026c 	.word	0x2000026c

08001610 <VL53L0X_setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
uint8_t VL53L0X_setSignalRateLimit(float limit_Mcps)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 800161a:	edd7 7a01 	vldr	s15, [r7, #4]
 800161e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001626:	d40a      	bmi.n	800163e <VL53L0X_setSignalRateLimit+0x2e>
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7fe ffa5 	bl	8000578 <__aeabi_f2d>
 800162e:	a311      	add	r3, pc, #68	@ (adr r3, 8001674 <VL53L0X_setSignalRateLimit+0x64>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	f7ff fa88 	bl	8000b48 <__aeabi_dcmpgt>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <VL53L0X_setSignalRateLimit+0x32>
 800163e:	2300      	movs	r3, #0
 8001640:	e00f      	b.n	8001662 <VL53L0X_setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8001642:	edd7 7a01 	vldr	s15, [r7, #4]
 8001646:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001670 <VL53L0X_setSignalRateLimit+0x60>
 800164a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800164e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001652:	ee17 3a90 	vmov	r3, s15
 8001656:	b29b      	uxth	r3, r3
 8001658:	4619      	mov	r1, r3
 800165a:	2044      	movs	r0, #68	@ 0x44
 800165c:	f7ff fd44 	bl	80010e8 <writeReg16Bit>
  return true;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	f3af 8000 	nop.w
 8001670:	43000000 	.word	0x43000000
 8001674:	0a3d70a4 	.word	0x0a3d70a4
 8001678:	407fffd7 	.word	0x407fffd7

0800167c <VL53L0X_performSingleRefCalibration>:
  return temp;
}
//=============================================================================
// based on VL53L0X_perform_single_ref_calibration()
uint8_t VL53L0X_performSingleRefCalibration(uint8_t vhv_init_byte)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4619      	mov	r1, r3
 8001690:	2000      	movs	r0, #0
 8001692:	f7ff fd17 	bl	80010c4 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001696:	2101      	movs	r1, #1
 8001698:	200b      	movs	r0, #11
 800169a:	f7ff fd13 	bl	80010c4 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 800169e:	2100      	movs	r1, #0
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff fd0f 	bl	80010c4 <writeReg>
  return true;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <VL53L0X_getSpadInfo>:
//=============================================================================
// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
uint8_t VL53L0X_getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80016ba:	2101      	movs	r1, #1
 80016bc:	2080      	movs	r0, #128	@ 0x80
 80016be:	f7ff fd01 	bl	80010c4 <writeReg>
  writeReg(0xFF, 0x01);
 80016c2:	2101      	movs	r1, #1
 80016c4:	20ff      	movs	r0, #255	@ 0xff
 80016c6:	f7ff fcfd 	bl	80010c4 <writeReg>
  writeReg(0x00, 0x00);
 80016ca:	2100      	movs	r1, #0
 80016cc:	2000      	movs	r0, #0
 80016ce:	f7ff fcf9 	bl	80010c4 <writeReg>

  writeReg(0xFF, 0x06);
 80016d2:	2106      	movs	r1, #6
 80016d4:	20ff      	movs	r0, #255	@ 0xff
 80016d6:	f7ff fcf5 	bl	80010c4 <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 80016da:	2083      	movs	r0, #131	@ 0x83
 80016dc:	f7ff fd3f 	bl	800115e <readReg>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	4619      	mov	r1, r3
 80016ea:	2083      	movs	r0, #131	@ 0x83
 80016ec:	f7ff fcea 	bl	80010c4 <writeReg>
  writeReg(0xFF, 0x07);
 80016f0:	2107      	movs	r1, #7
 80016f2:	20ff      	movs	r0, #255	@ 0xff
 80016f4:	f7ff fce6 	bl	80010c4 <writeReg>
  writeReg(0x81, 0x01);
 80016f8:	2101      	movs	r1, #1
 80016fa:	2081      	movs	r0, #129	@ 0x81
 80016fc:	f7ff fce2 	bl	80010c4 <writeReg>

  writeReg(0x80, 0x01);
 8001700:	2101      	movs	r1, #1
 8001702:	2080      	movs	r0, #128	@ 0x80
 8001704:	f7ff fcde 	bl	80010c4 <writeReg>

  writeReg(0x94, 0x6b);
 8001708:	216b      	movs	r1, #107	@ 0x6b
 800170a:	2094      	movs	r0, #148	@ 0x94
 800170c:	f7ff fcda 	bl	80010c4 <writeReg>
  writeReg(0x83, 0x00);
 8001710:	2100      	movs	r1, #0
 8001712:	2083      	movs	r0, #131	@ 0x83
 8001714:	f7ff fcd6 	bl	80010c4 <writeReg>
  startTimeout();
 8001718:	f7ff fccc 	bl	80010b4 <millis>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	4b2e      	ldr	r3, [pc, #184]	@ (80017dc <VL53L0X_getSpadInfo+0x12c>)
 8001722:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83) == 0x00)
 8001724:	e010      	b.n	8001748 <VL53L0X_getSpadInfo+0x98>
  {
    if (checkTimeoutExpired()) { return false; }
 8001726:	4b2e      	ldr	r3, [pc, #184]	@ (80017e0 <VL53L0X_getSpadInfo+0x130>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00c      	beq.n	8001748 <VL53L0X_getSpadInfo+0x98>
 800172e:	f7ff fcc1 	bl	80010b4 <millis>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b29      	ldr	r3, [pc, #164]	@ (80017dc <VL53L0X_getSpadInfo+0x12c>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	4a28      	ldr	r2, [pc, #160]	@ (80017e0 <VL53L0X_getSpadInfo+0x130>)
 800173e:	8812      	ldrh	r2, [r2, #0]
 8001740:	4293      	cmp	r3, r2
 8001742:	dd01      	ble.n	8001748 <VL53L0X_getSpadInfo+0x98>
 8001744:	2300      	movs	r3, #0
 8001746:	e044      	b.n	80017d2 <VL53L0X_getSpadInfo+0x122>
  while (readReg(0x83) == 0x00)
 8001748:	2083      	movs	r0, #131	@ 0x83
 800174a:	f7ff fd08 	bl	800115e <readReg>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0e8      	beq.n	8001726 <VL53L0X_getSpadInfo+0x76>
  }
  writeReg(0x83, 0x01);
 8001754:	2101      	movs	r1, #1
 8001756:	2083      	movs	r0, #131	@ 0x83
 8001758:	f7ff fcb4 	bl	80010c4 <writeReg>
  tmp = readReg(0x92);
 800175c:	2092      	movs	r0, #146	@ 0x92
 800175e:	f7ff fcfe 	bl	800115e <readReg>
 8001762:	4603      	mov	r3, r0
 8001764:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800176c:	b2da      	uxtb	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	09db      	lsrs	r3, r3, #7
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf14      	ite	ne
 8001780:	2301      	movne	r3, #1
 8001782:	2300      	moveq	r3, #0
 8001784:	b2da      	uxtb	r2, r3
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 800178a:	2100      	movs	r1, #0
 800178c:	2081      	movs	r0, #129	@ 0x81
 800178e:	f7ff fc99 	bl	80010c4 <writeReg>
  writeReg(0xFF, 0x06);
 8001792:	2106      	movs	r1, #6
 8001794:	20ff      	movs	r0, #255	@ 0xff
 8001796:	f7ff fc95 	bl	80010c4 <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 800179a:	2083      	movs	r0, #131	@ 0x83
 800179c:	f7ff fcdf 	bl	800115e <readReg>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f023 0304 	bic.w	r3, r3, #4
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	4619      	mov	r1, r3
 80017aa:	2083      	movs	r0, #131	@ 0x83
 80017ac:	f7ff fc8a 	bl	80010c4 <writeReg>
  writeReg(0xFF, 0x01);
 80017b0:	2101      	movs	r1, #1
 80017b2:	20ff      	movs	r0, #255	@ 0xff
 80017b4:	f7ff fc86 	bl	80010c4 <writeReg>
  writeReg(0x00, 0x01);
 80017b8:	2101      	movs	r1, #1
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff fc82 	bl	80010c4 <writeReg>

  writeReg(0xFF, 0x00);
 80017c0:	2100      	movs	r1, #0
 80017c2:	20ff      	movs	r0, #255	@ 0xff
 80017c4:	f7ff fc7e 	bl	80010c4 <writeReg>
  writeReg(0x80, 0x00);
 80017c8:	2100      	movs	r1, #0
 80017ca:	2080      	movs	r0, #128	@ 0x80
 80017cc:	f7ff fc7a 	bl	80010c4 <writeReg>

  return true;
 80017d0:	2301      	movs	r3, #1
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2000026e 	.word	0x2000026e
 80017e0:	20000270 	.word	0x20000270

080017e4 <VL53L0X_startContinuous>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X_startContinuous(uint32_t period_ms)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  writeReg(0x80, 0x01);
 80017ec:	2101      	movs	r1, #1
 80017ee:	2080      	movs	r0, #128	@ 0x80
 80017f0:	f7ff fc68 	bl	80010c4 <writeReg>
  writeReg(0xFF, 0x01);
 80017f4:	2101      	movs	r1, #1
 80017f6:	20ff      	movs	r0, #255	@ 0xff
 80017f8:	f7ff fc64 	bl	80010c4 <writeReg>
  writeReg(0x00, 0x00);
 80017fc:	2100      	movs	r1, #0
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff fc60 	bl	80010c4 <writeReg>
  writeReg(0x91, g_stopVariable);
 8001804:	4b19      	ldr	r3, [pc, #100]	@ (800186c <VL53L0X_startContinuous+0x88>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	2091      	movs	r0, #145	@ 0x91
 800180c:	f7ff fc5a 	bl	80010c4 <writeReg>
  writeReg(0x00, 0x01);
 8001810:	2101      	movs	r1, #1
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff fc56 	bl	80010c4 <writeReg>
  writeReg(0xFF, 0x00);
 8001818:	2100      	movs	r1, #0
 800181a:	20ff      	movs	r0, #255	@ 0xff
 800181c:	f7ff fc52 	bl	80010c4 <writeReg>
  writeReg(0x80, 0x00);
 8001820:	2100      	movs	r1, #0
 8001822:	2080      	movs	r0, #128	@ 0x80
 8001824:	f7ff fc4e 	bl	80010c4 <writeReg>

  if (period_ms != 0)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d015      	beq.n	800185a <VL53L0X_startContinuous+0x76>
  {
    // continuous timed mode
    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 800182e:	20f8      	movs	r0, #248	@ 0xf8
 8001830:	f7ff fca8 	bl	8001184 <readReg16Bit>
 8001834:	4603      	mov	r3, r0
 8001836:	81fb      	strh	r3, [r7, #14]

    if (osc_calibrate_val != 0)
 8001838:	89fb      	ldrh	r3, [r7, #14]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d004      	beq.n	8001848 <VL53L0X_startContinuous+0x64>
    {
      period_ms *= osc_calibrate_val;
 800183e:	89fa      	ldrh	r2, [r7, #14]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	fb02 f303 	mul.w	r3, r2, r3
 8001846:	607b      	str	r3, [r7, #4]
    }
    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 8001848:	6879      	ldr	r1, [r7, #4]
 800184a:	2004      	movs	r0, #4
 800184c:	f7ff fc67 	bl	800111e <writeReg32Bit>
    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 8001850:	2104      	movs	r1, #4
 8001852:	2000      	movs	r0, #0
 8001854:	f7ff fc36 	bl	80010c4 <writeReg>
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
  }
}
 8001858:	e003      	b.n	8001862 <VL53L0X_startContinuous+0x7e>
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 800185a:	2102      	movs	r1, #2
 800185c:	2000      	movs	r0, #0
 800185e:	f7ff fc31 	bl	80010c4 <writeReg>
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	2000026c 	.word	0x2000026c

08001870 <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 8001874:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <captDistIR_Init+0x5c>)
 8001876:	4a16      	ldr	r2, [pc, #88]	@ (80018d0 <captDistIR_Init+0x60>)
 8001878:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 800187a:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <captDistIR_Init+0x5c>)
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <captDistIR_Init+0x5c>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <captDistIR_Init+0x5c>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <captDistIR_Init+0x5c>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <captDistIR_Init+0x5c>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 8001898:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <captDistIR_Init+0x5c>)
 800189a:	2202      	movs	r2, #2
 800189c:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 800189e:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <captDistIR_Init+0x5c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	@ 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 80018a4:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <captDistIR_Init+0x5c>)
 80018a6:	2202      	movs	r2, #2
 80018a8:	629a      	str	r2, [r3, #40]	@ 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 80018aa:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <captDistIR_Init+0x5c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 80018b0:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <captDistIR_Init+0x5c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	631a      	str	r2, [r3, #48]	@ 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 80018b6:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <captDistIR_Init+0x5c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 80018bc:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <captDistIR_Init+0x5c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 80018c2:	4802      	ldr	r0, [pc, #8]	@ (80018cc <captDistIR_Init+0x5c>)
 80018c4:	f002 ffc6 	bl	8004854 <HAL_ADC_Init>
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000274 	.word	0x20000274
 80018d0:	40012000 	.word	0x40012000

080018d4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	@ 0x28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80018e0:	f00a fd2a 	bl	800c338 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80018e4:	4b5a      	ldr	r3, [pc, #360]	@ (8001a50 <pvPortMallocMicroROS+0x17c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80018ec:	f000 f992 	bl	8001c14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80018f0:	4b58      	ldr	r3, [pc, #352]	@ (8001a54 <pvPortMallocMicroROS+0x180>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f040 8090 	bne.w	8001a1e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d01e      	beq.n	8001942 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001904:	2208      	movs	r2, #8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	2b00      	cmp	r3, #0
 8001914:	d015      	beq.n	8001942 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f023 0307 	bic.w	r3, r3, #7
 800191c:	3308      	adds	r3, #8
 800191e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00b      	beq.n	8001942 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800192a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800192e:	f383 8811 	msr	BASEPRI, r3
 8001932:	f3bf 8f6f 	isb	sy
 8001936:	f3bf 8f4f 	dsb	sy
 800193a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	e7fd      	b.n	800193e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d06a      	beq.n	8001a1e <pvPortMallocMicroROS+0x14a>
 8001948:	4b43      	ldr	r3, [pc, #268]	@ (8001a58 <pvPortMallocMicroROS+0x184>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	d865      	bhi.n	8001a1e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001952:	4b42      	ldr	r3, [pc, #264]	@ (8001a5c <pvPortMallocMicroROS+0x188>)
 8001954:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001956:	4b41      	ldr	r3, [pc, #260]	@ (8001a5c <pvPortMallocMicroROS+0x188>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800195c:	e004      	b.n	8001968 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800195e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001960:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	429a      	cmp	r2, r3
 8001970:	d903      	bls.n	800197a <pvPortMallocMicroROS+0xa6>
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f1      	bne.n	800195e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800197a:	4b35      	ldr	r3, [pc, #212]	@ (8001a50 <pvPortMallocMicroROS+0x17c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001980:	429a      	cmp	r2, r3
 8001982:	d04c      	beq.n	8001a1e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2208      	movs	r2, #8
 800198a:	4413      	add	r3, r2
 800198c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	1ad2      	subs	r2, r2, r3
 800199e:	2308      	movs	r3, #8
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d920      	bls.n	80019e8 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80019a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4413      	add	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00b      	beq.n	80019d0 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80019b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019bc:	f383 8811 	msr	BASEPRI, r3
 80019c0:	f3bf 8f6f 	isb	sy
 80019c4:	f3bf 8f4f 	dsb	sy
 80019c8:	613b      	str	r3, [r7, #16]
}
 80019ca:	bf00      	nop
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80019d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	1ad2      	subs	r2, r2, r3
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80019e2:	69b8      	ldr	r0, [r7, #24]
 80019e4:	f000 f978 	bl	8001cd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <pvPortMallocMicroROS+0x184>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	4a19      	ldr	r2, [pc, #100]	@ (8001a58 <pvPortMallocMicroROS+0x184>)
 80019f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80019f6:	4b18      	ldr	r3, [pc, #96]	@ (8001a58 <pvPortMallocMicroROS+0x184>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <pvPortMallocMicroROS+0x18c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d203      	bcs.n	8001a0a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001a02:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <pvPortMallocMicroROS+0x184>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a16      	ldr	r2, [pc, #88]	@ (8001a60 <pvPortMallocMicroROS+0x18c>)
 8001a08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <pvPortMallocMicroROS+0x180>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001a1e:	f00a fc99 	bl	800c354 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00b      	beq.n	8001a44 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a30:	f383 8811 	msr	BASEPRI, r3
 8001a34:	f3bf 8f6f 	isb	sy
 8001a38:	f3bf 8f4f 	dsb	sy
 8001a3c:	60fb      	str	r3, [r7, #12]
}
 8001a3e:	bf00      	nop
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001a44:	69fb      	ldr	r3, [r7, #28]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3728      	adds	r7, #40	@ 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200042c0 	.word	0x200042c0
 8001a54:	200042cc 	.word	0x200042cc
 8001a58:	200042c4 	.word	0x200042c4
 8001a5c:	200042b8 	.word	0x200042b8
 8001a60:	200042c8 	.word	0x200042c8

08001a64 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d04a      	beq.n	8001b0c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001a76:	2308      	movs	r3, #8
 8001a78:	425b      	negs	r3, r3
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	4b22      	ldr	r3, [pc, #136]	@ (8001b14 <vPortFreeMicroROS+0xb0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10b      	bne.n	8001aaa <vPortFreeMicroROS+0x46>
	__asm volatile
 8001a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a96:	f383 8811 	msr	BASEPRI, r3
 8001a9a:	f3bf 8f6f 	isb	sy
 8001a9e:	f3bf 8f4f 	dsb	sy
 8001aa2:	60fb      	str	r3, [r7, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	e7fd      	b.n	8001aa6 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00b      	beq.n	8001aca <vPortFreeMicroROS+0x66>
	__asm volatile
 8001ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ab6:	f383 8811 	msr	BASEPRI, r3
 8001aba:	f3bf 8f6f 	isb	sy
 8001abe:	f3bf 8f4f 	dsb	sy
 8001ac2:	60bb      	str	r3, [r7, #8]
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	e7fd      	b.n	8001ac6 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <vPortFreeMicroROS+0xb0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d019      	beq.n	8001b0c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d115      	bne.n	8001b0c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <vPortFreeMicroROS+0xb0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	43db      	mvns	r3, r3
 8001aea:	401a      	ands	r2, r3
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001af0:	f00a fc22 	bl	800c338 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <vPortFreeMicroROS+0xb4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a06      	ldr	r2, [pc, #24]	@ (8001b18 <vPortFreeMicroROS+0xb4>)
 8001b00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001b02:	6938      	ldr	r0, [r7, #16]
 8001b04:	f000 f8e8 	bl	8001cd8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001b08:	f00a fc24 	bl	800c354 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001b0c:	bf00      	nop
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200042cc 	.word	0x200042cc
 8001b18:	200042c4 	.word	0x200042c4

08001b1c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001b28:	2308      	movs	r3, #8
 8001b2a:	425b      	negs	r3, r3
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	4413      	add	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <getBlockSize+0x38>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]

	return count;
 8001b44:	68fb      	ldr	r3, [r7, #12]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	371c      	adds	r7, #28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200042cc 	.word	0x200042cc

08001b58 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001b62:	f00a fbe9 	bl	800c338 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001b66:	6838      	ldr	r0, [r7, #0]
 8001b68:	f7ff feb4 	bl	80018d4 <pvPortMallocMicroROS>
 8001b6c:	6138      	str	r0, [r7, #16]

	uint8_t *puc = ( uint8_t * ) pv;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	60fb      	str	r3, [r7, #12]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001b72:	2308      	movs	r3, #8
 8001b74:	425b      	negs	r3, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4413      	add	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
	pxLink = ( void * ) puc;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	60bb      	str	r3, [r7, #8]


	char *in_src = (char*)pv;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	61fb      	str	r3, [r7, #28]
  	char *in_dest = (char*)newmem;
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	61bb      	str	r3, [r7, #24]
	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <pvPortReallocMicroROS+0x70>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	4013      	ands	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]

  	while(count--)
 8001b96:	e007      	b.n	8001ba8 <pvPortReallocMicroROS+0x50>
    	*in_dest++ = *in_src++;
 8001b98:	69fa      	ldr	r2, [r7, #28]
 8001b9a:	1c53      	adds	r3, r2, #1
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	1c59      	adds	r1, r3, #1
 8001ba2:	61b9      	str	r1, [r7, #24]
 8001ba4:	7812      	ldrb	r2, [r2, #0]
 8001ba6:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	1e5a      	subs	r2, r3, #1
 8001bac:	617a      	str	r2, [r7, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f2      	bne.n	8001b98 <pvPortReallocMicroROS+0x40>

	vPortFreeMicroROS(pv);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff56 	bl	8001a64 <vPortFreeMicroROS>

	( void ) xTaskResumeAll();
 8001bb8:	f00a fbcc 	bl	800c354 <xTaskResumeAll>

	return newmem;
 8001bbc:	693b      	ldr	r3, [r7, #16]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200042cc 	.word	0x200042cc

08001bcc <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001bd6:	f00a fbaf 	bl	800c338 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001be4:	6978      	ldr	r0, [r7, #20]
 8001be6:	f7ff fe75 	bl	80018d4 <pvPortMallocMicroROS>
 8001bea:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001bf0:	e004      	b.n	8001bfc <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1c5a      	adds	r2, r3, #1
 8001bf6:	613a      	str	r2, [r7, #16]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	1e5a      	subs	r2, r3, #1
 8001c00:	617a      	str	r2, [r7, #20]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f5      	bne.n	8001bf2 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001c06:	f00a fba5 	bl	800c354 <xTaskResumeAll>
  	return mem;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001c1a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001c20:	4b27      	ldr	r3, [pc, #156]	@ (8001cc0 <prvHeapInit+0xac>)
 8001c22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00c      	beq.n	8001c48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3307      	adds	r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f023 0307 	bic.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc0 <prvHeapInit+0xac>)
 8001c44:	4413      	add	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cc4 <prvHeapInit+0xb0>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001c52:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc4 <prvHeapInit+0xb0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001c60:	2208      	movs	r2, #8
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f023 0307 	bic.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4a15      	ldr	r2, [pc, #84]	@ (8001cc8 <prvHeapInit+0xb4>)
 8001c74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001c76:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <prvHeapInit+0xb4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001c7e:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <prvHeapInit+0xb4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	1ad2      	subs	r2, r2, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <prvHeapInit+0xb4>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <prvHeapInit+0xb8>)
 8001ca2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a09      	ldr	r2, [pc, #36]	@ (8001cd0 <prvHeapInit+0xbc>)
 8001caa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001cac:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <prvHeapInit+0xc0>)
 8001cae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001cb2:	601a      	str	r2, [r3, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	200002b8 	.word	0x200002b8
 8001cc4:	200042b8 	.word	0x200042b8
 8001cc8:	200042c0 	.word	0x200042c0
 8001ccc:	200042c8 	.word	0x200042c8
 8001cd0:	200042c4 	.word	0x200042c4
 8001cd4:	200042cc 	.word	0x200042cc

08001cd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001ce0:	4b28      	ldr	r3, [pc, #160]	@ (8001d84 <prvInsertBlockIntoFreeList+0xac>)
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	e002      	b.n	8001cec <prvInsertBlockIntoFreeList+0x14>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d8f7      	bhi.n	8001ce6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	68ba      	ldr	r2, [r7, #8]
 8001d00:	4413      	add	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d108      	bne.n	8001d1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	441a      	add	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	441a      	add	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d118      	bne.n	8001d60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b15      	ldr	r3, [pc, #84]	@ (8001d88 <prvInsertBlockIntoFreeList+0xb0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d00d      	beq.n	8001d56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	441a      	add	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	e008      	b.n	8001d68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001d56:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <prvInsertBlockIntoFreeList+0xb0>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	e003      	b.n	8001d68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d002      	beq.n	8001d76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	200042b8 	.word	0x200042b8
 8001d88:	200042c0 	.word	0x200042c0

08001d8c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001d9a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001d9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001da0:	4904      	ldr	r1, [pc, #16]	@ (8001db4 <cubemx_transport_open+0x28>)
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f007 fe62 	bl	8009a6c <HAL_UART_Receive_DMA>
    return true;
 8001da8:	2301      	movs	r3, #1
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200042d0 	.word	0x200042d0

08001db8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001dc6:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f007 fe7f 	bl	8009acc <HAL_UART_DMAStop>
    return true;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001dec:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b20      	cmp	r3, #32
 8001df8:	d11c      	bne.n	8001e34 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	6978      	ldr	r0, [r7, #20]
 8001e04:	f007 fdb4 	bl	8009970 <HAL_UART_Transmit_DMA>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001e0c:	e002      	b.n	8001e14 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001e0e:	2001      	movs	r0, #1
 8001e10:	f009 f8cc 	bl	800afac <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001e14:	7cfb      	ldrb	r3, [r7, #19]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d105      	bne.n	8001e26 <cubemx_transport_write+0x4e>
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d1f3      	bne.n	8001e0e <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001e26:	7cfb      	ldrb	r3, [r7, #19]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <cubemx_transport_write+0x58>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	e002      	b.n	8001e36 <cubemx_transport_write+0x5e>
 8001e30:	2300      	movs	r3, #0
 8001e32:	e000      	b.n	8001e36 <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001e34:	2300      	movs	r3, #0
    }
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b088      	sub	sp, #32
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001e54:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e5a:	b672      	cpsid	i
}
 8001e5c:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001edc <cubemx_transport_read+0x9c>)
 8001e6c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e6e:	b662      	cpsie	i
}
 8001e70:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3301      	adds	r3, #1
 8001e76:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f009 f897 	bl	800afac <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001e7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ee0 <cubemx_transport_read+0xa0>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b16      	ldr	r3, [pc, #88]	@ (8001edc <cubemx_transport_read+0x9c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d103      	bne.n	8001e92 <cubemx_transport_read+0x52>
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	dbe3      	blt.n	8001e5a <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001e96:	e011      	b.n	8001ebc <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <cubemx_transport_read+0xa0>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	440b      	add	r3, r1
 8001ea2:	4910      	ldr	r1, [pc, #64]	@ (8001ee4 <cubemx_transport_read+0xa4>)
 8001ea4:	5c8a      	ldrb	r2, [r1, r2]
 8001ea6:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <cubemx_transport_read+0xa0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3301      	adds	r3, #1
 8001eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee0 <cubemx_transport_read+0xa0>)
 8001eb4:	6013      	str	r3, [r2, #0]
        wrote++;
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <cubemx_transport_read+0xa0>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <cubemx_transport_read+0x9c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d003      	beq.n	8001ed0 <cubemx_transport_read+0x90>
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d3e3      	bcc.n	8001e98 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3720      	adds	r7, #32
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20004ad4 	.word	0x20004ad4
 8001ee0:	20004ad0 	.word	0x20004ad0
 8001ee4:	200042d0 	.word	0x200042d0

08001ee8 <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08a      	sub	sp, #40	@ 0x28
 8001eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	605a      	str	r2, [r3, #4]
 8001ef8:	609a      	str	r2, [r3, #8]
 8001efa:	60da      	str	r2, [r3, #12]
 8001efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	4a2c      	ldr	r2, [pc, #176]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	4b26      	ldr	r3, [pc, #152]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	4a25      	ldr	r2, [pc, #148]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2a:	4b23      	ldr	r3, [pc, #140]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f46:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	4a17      	ldr	r2, [pc, #92]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f5c:	f043 0302 	orr.w	r3, r3, #2
 8001f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <MX_GPIO_Init+0xd0>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2120      	movs	r1, #32
 8001f72:	4812      	ldr	r0, [pc, #72]	@ (8001fbc <MX_GPIO_Init+0xd4>)
 8001f74:	f003 fbf8 	bl	8005768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f7e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480c      	ldr	r0, [pc, #48]	@ (8001fc0 <MX_GPIO_Init+0xd8>)
 8001f90:	f003 fa66 	bl	8005460 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f94:	2320      	movs	r3, #32
 8001f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4804      	ldr	r0, [pc, #16]	@ (8001fbc <MX_GPIO_Init+0xd4>)
 8001fac:	f003 fa58 	bl	8005460 <HAL_GPIO_Init>

}
 8001fb0:	bf00      	nop
 8001fb2:	3728      	adds	r7, #40	@ 0x28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	40020800 	.word	0x40020800

08001fc4 <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fd4:	d017      	beq.n	8002006 <HAL_GPIO_EXTI_Callback+0x42>
 8001fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fda:	dc16      	bgt.n	800200a <HAL_GPIO_EXTI_Callback+0x46>
 8001fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe0:	d00e      	beq.n	8002000 <HAL_GPIO_EXTI_Callback+0x3c>
 8001fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe6:	dc10      	bgt.n	800200a <HAL_GPIO_EXTI_Callback+0x46>
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d010      	beq.n	800200e <HAL_GPIO_EXTI_Callback+0x4a>
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	dc0c      	bgt.n	800200a <HAL_GPIO_EXTI_Callback+0x46>
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d002      	beq.n	8001ffa <HAL_GPIO_EXTI_Callback+0x36>
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d00c      	beq.n	8002012 <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 8001ff8:	e007      	b.n	800200a <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 8001ffa:	f001 fbfb 	bl	80037f4 <quadEncoder_CallbackIndexR>
					break;
 8001ffe:	e009      	b.n	8002014 <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 8002000:	f001 fbcc 	bl	800379c <quadEncoder_CallbackIndexL>
					break;
 8002004:	e006      	b.n	8002014 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8002006:	bf00      	nop
 8002008:	e004      	b.n	8002014 <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 800200a:	bf00      	nop
 800200c:	e002      	b.n	8002014 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 800200e:	bf00      	nop
 8002010:	e000      	b.n	8002014 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8002012:	bf00      	nop


	}
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002020:	4b12      	ldr	r3, [pc, #72]	@ (800206c <MX_I2C1_Init+0x50>)
 8002022:	4a13      	ldr	r2, [pc, #76]	@ (8002070 <MX_I2C1_Init+0x54>)
 8002024:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002026:	4b11      	ldr	r3, [pc, #68]	@ (800206c <MX_I2C1_Init+0x50>)
 8002028:	4a12      	ldr	r2, [pc, #72]	@ (8002074 <MX_I2C1_Init+0x58>)
 800202a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800202c:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <MX_I2C1_Init+0x50>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002032:	4b0e      	ldr	r3, [pc, #56]	@ (800206c <MX_I2C1_Init+0x50>)
 8002034:	2200      	movs	r2, #0
 8002036:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002038:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <MX_I2C1_Init+0x50>)
 800203a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800203e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002040:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <MX_I2C1_Init+0x50>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002046:	4b09      	ldr	r3, [pc, #36]	@ (800206c <MX_I2C1_Init+0x50>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800204c:	4b07      	ldr	r3, [pc, #28]	@ (800206c <MX_I2C1_Init+0x50>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <MX_I2C1_Init+0x50>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002058:	4804      	ldr	r0, [pc, #16]	@ (800206c <MX_I2C1_Init+0x50>)
 800205a:	f003 fbb7 	bl	80057cc <HAL_I2C_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002064:	f000 fff4 	bl	8003050 <Error_Handler>
  }

}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20004ad8 	.word	0x20004ad8
 8002070:	40005400 	.word	0x40005400
 8002074:	00061a80 	.word	0x00061a80

08002078 <i2c1_WriteBuffer>:

//======================================================================
// Transmit n_data bytes to i2c slave
//======================================================================
int i2c1_WriteBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af02      	add	r7, sp, #8
 800207e:	4603      	mov	r3, r0
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, data, n_data , 100);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	b29b      	uxth	r3, r3
 800208a:	89f9      	ldrh	r1, [r7, #14]
 800208c:	2264      	movs	r2, #100	@ 0x64
 800208e:	9200      	str	r2, [sp, #0]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <i2c1_WriteBuffer+0x30>)
 8002094:	f003 fcde 	bl	8005a54 <HAL_I2C_Master_Transmit>
 8002098:	4603      	mov	r3, r0
 800209a:	617b      	str	r3, [r7, #20]
	return status;
 800209c:	697b      	ldr	r3, [r7, #20]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20004ad8 	.word	0x20004ad8

080020ac <i2c1_ReadRegBuffer>:
}
//======================================================================
// Receive n_data bytes - located at regAddr - from i2c slave
//======================================================================
int i2c1_ReadRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af02      	add	r7, sp, #8
 80020b2:	60ba      	str	r2, [r7, #8]
 80020b4:	607b      	str	r3, [r7, #4]
 80020b6:	4603      	mov	r3, r0
 80020b8:	81fb      	strh	r3, [r7, #14]
 80020ba:	460b      	mov	r3, r1
 80020bc:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr;
    RegAddr=regAddr;
 80020be:	7b7b      	ldrb	r3, [r7, #13]
 80020c0:	74fb      	strb	r3, [r7, #19]
    do{
        status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, &RegAddr, 1, 100);
 80020c2:	f107 0213 	add.w	r2, r7, #19
 80020c6:	89f9      	ldrh	r1, [r7, #14]
 80020c8:	2364      	movs	r3, #100	@ 0x64
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	2301      	movs	r3, #1
 80020ce:	480f      	ldr	r0, [pc, #60]	@ (800210c <i2c1_ReadRegBuffer+0x60>)
 80020d0:	f003 fcc0 	bl	8005a54 <HAL_I2C_Master_Transmit>
 80020d4:	4603      	mov	r3, r0
 80020d6:	617b      	str	r3, [r7, #20]
        if( status )
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10f      	bne.n	80020fe <i2c1_ReadRegBuffer+0x52>
            break;
        status =HAL_I2C_Master_Receive(&hi2c1, addrSlave, data, n_data, n_data*100);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2164      	movs	r1, #100	@ 0x64
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	89f9      	ldrh	r1, [r7, #14]
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	4613      	mov	r3, r2
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	4806      	ldr	r0, [pc, #24]	@ (800210c <i2c1_ReadRegBuffer+0x60>)
 80020f4:	f003 fdac 	bl	8005c50 <HAL_I2C_Master_Receive>
 80020f8:	4603      	mov	r3, r0
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	e000      	b.n	8002100 <i2c1_ReadRegBuffer+0x54>
            break;
 80020fe:	bf00      	nop
    }while(0);
    return status;
 8002100:	697b      	ldr	r3, [r7, #20]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20004ad8 	.word	0x20004ad8

08002110 <i2c1_WriteRegBuffer>:

//======================================================================
// Write n_data bytes - have to be written at regAddr - to i2c slave
//======================================================================
int i2c1_WriteRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08c      	sub	sp, #48	@ 0x30
 8002114:	af02      	add	r7, sp, #8
 8002116:	60ba      	str	r2, [r7, #8]
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	4603      	mov	r3, r0
 800211c:	81fb      	strh	r3, [r7, #14]
 800211e:	460b      	mov	r3, r1
 8002120:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0]=regAddr;
 8002122:	7b7b      	ldrb	r3, [r7, #13]
 8002124:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr+1, data, n_data);
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	3301      	adds	r3, #1
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	4618      	mov	r0, r3
 8002132:	f018 fc6a 	bl	801aa0a <memcpy>
   status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, RegAddr, n_data+1, 100);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	b29b      	uxth	r3, r3
 800213a:	3301      	adds	r3, #1
 800213c:	b29b      	uxth	r3, r3
 800213e:	f107 0214 	add.w	r2, r7, #20
 8002142:	89f9      	ldrh	r1, [r7, #14]
 8002144:	2064      	movs	r0, #100	@ 0x64
 8002146:	9000      	str	r0, [sp, #0]
 8002148:	4804      	ldr	r0, [pc, #16]	@ (800215c <i2c1_WriteRegBuffer+0x4c>)
 800214a:	f003 fc83 	bl	8005a54 <HAL_I2C_Master_Transmit>
 800214e:	4603      	mov	r3, r0
 8002150:	627b      	str	r3, [r7, #36]	@ 0x24
     return status;
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002154:	4618      	mov	r0, r3
 8002156:	3728      	adds	r7, #40	@ 0x28
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	20004ad8 	.word	0x20004ad8

08002160 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif


PUTCHAR_PROTOTYPE
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002168:	1d39      	adds	r1, r7, #4
 800216a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800216e:	2201      	movs	r2, #1
 8002170:	4803      	ldr	r0, [pc, #12]	@ (8002180 <__io_putchar+0x20>)
 8002172:	f007 fb6b 	bl	800984c <HAL_UART_Transmit>
  return ch;
 8002176:	687b      	ldr	r3, [r7, #4]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20004b70 	.word	0x20004b70

08002184 <MX_USART1_UART_Init>:


void MX_USART1_UART_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8002188:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 800218a:	4a12      	ldr	r2, [pc, #72]	@ (80021d4 <MX_USART1_UART_Init+0x50>)
 800218c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 8002190:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002194:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002196:	4b0e      	ldr	r3, [pc, #56]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800219c:	4b0c      	ldr	r3, [pc, #48]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 800219e:	2200      	movs	r2, #0
 80021a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021a2:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021a8:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 80021aa:	220c      	movs	r2, #12
 80021ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ae:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ba:	4805      	ldr	r0, [pc, #20]	@ (80021d0 <MX_USART1_UART_Init+0x4c>)
 80021bc:	f007 faf9 	bl	80097b2 <HAL_UART_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80021c6:	f000 ff43 	bl	8003050 <Error_Handler>
  }
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20004b2c 	.word	0x20004b2c
 80021d4:	40011000 	.word	0x40011000

080021d8 <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80021dc:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 80021de:	4a12      	ldr	r2, [pc, #72]	@ (8002228 <MX_USART2_UART_Init+0x50>)
 80021e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021e2:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 80021e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021fc:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 80021fe:	220c      	movs	r2, #12
 8002200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002202:	4b08      	ldr	r3, [pc, #32]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 8002204:	2200      	movs	r2, #0
 8002206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 800220a:	2200      	movs	r2, #0
 800220c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800220e:	4805      	ldr	r0, [pc, #20]	@ (8002224 <MX_USART2_UART_Init+0x4c>)
 8002210:	f007 facf 	bl	80097b2 <HAL_UART_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800221a:	f000 ff19 	bl	8003050 <Error_Handler>
  }
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20004b70 	.word	0x20004b70
 8002228:	40004400 	.word	0x40004400

0800222c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	4b1f      	ldr	r3, [pc, #124]	@ (80022b4 <MX_DMA_Init+0x88>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	4a1e      	ldr	r2, [pc, #120]	@ (80022b4 <MX_DMA_Init+0x88>)
 800223c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002240:	6313      	str	r3, [r2, #48]	@ 0x30
 8002242:	4b1c      	ldr	r3, [pc, #112]	@ (80022b4 <MX_DMA_Init+0x88>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4b18      	ldr	r3, [pc, #96]	@ (80022b4 <MX_DMA_Init+0x88>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	4a17      	ldr	r2, [pc, #92]	@ (80022b4 <MX_DMA_Init+0x88>)
 8002258:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800225c:	6313      	str	r3, [r2, #48]	@ 0x30
 800225e:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <MX_DMA_Init+0x88>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800226a:	2200      	movs	r2, #0
 800226c:	2105      	movs	r1, #5
 800226e:	2010      	movs	r0, #16
 8002270:	f002 fcbc 	bl	8004bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002274:	2010      	movs	r0, #16
 8002276:	f002 fcd5 	bl	8004c24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2105      	movs	r1, #5
 800227e:	2011      	movs	r0, #17
 8002280:	f002 fcb4 	bl	8004bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002284:	2011      	movs	r0, #17
 8002286:	f002 fccd 	bl	8004c24 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2105      	movs	r1, #5
 800228e:	203a      	movs	r0, #58	@ 0x3a
 8002290:	f002 fcac 	bl	8004bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002294:	203a      	movs	r0, #58	@ 0x3a
 8002296:	f002 fcc5 	bl	8004c24 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2105      	movs	r1, #5
 800229e:	2046      	movs	r0, #70	@ 0x46
 80022a0:	f002 fca4 	bl	8004bec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80022a4:	2046      	movs	r0, #70	@ 0x46
 80022a6:	f002 fcbd 	bl	8004c24 <HAL_NVIC_EnableIRQ>

}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800

080022b8 <i2c_send_byteS>:
{
	i2c1_WriteBuffer(LCD_ADDRESS, &dta, 1);
}
//=================================================================
void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	70fb      	strb	r3, [r7, #3]
	i2c1_WriteBuffer(LCD_ADDRESS, dta, len);
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	461a      	mov	r2, r3
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	207c      	movs	r0, #124	@ 0x7c
 80022cc:	f7ff fed4 	bl	8002078 <i2c1_WriteBuffer>
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <groveLCD_begin>:
//=================================================================
void groveLCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
 80022e2:	460b      	mov	r3, r1
 80022e4:	71bb      	strb	r3, [r7, #6]
 80022e6:	4613      	mov	r3, r2
 80022e8:	717b      	strb	r3, [r7, #5]
    if (lines > 1) {
 80022ea:	79bb      	ldrb	r3, [r7, #6]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d906      	bls.n	80022fe <groveLCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 80022f0:	4b33      	ldr	r3, [pc, #204]	@ (80023c0 <groveLCD_begin+0xe8>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	f043 0308 	orr.w	r3, r3, #8
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b31      	ldr	r3, [pc, #196]	@ (80023c0 <groveLCD_begin+0xe8>)
 80022fc:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 80022fe:	4a31      	ldr	r2, [pc, #196]	@ (80023c4 <groveLCD_begin+0xec>)
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 8002304:	4b30      	ldr	r3, [pc, #192]	@ (80023c8 <groveLCD_begin+0xf0>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 800230a:	797b      	ldrb	r3, [r7, #5]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d009      	beq.n	8002324 <groveLCD_begin+0x4c>
 8002310:	79bb      	ldrb	r3, [r7, #6]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d106      	bne.n	8002324 <groveLCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 8002316:	4b2a      	ldr	r3, [pc, #168]	@ (80023c0 <groveLCD_begin+0xe8>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	b2da      	uxtb	r2, r3
 8002320:	4b27      	ldr	r3, [pc, #156]	@ (80023c0 <groveLCD_begin+0xe8>)
 8002322:	701a      	strb	r2, [r3, #0]
    }

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
    HAL_Delay(50);
 8002324:	2032      	movs	r0, #50	@ 0x32
 8002326:	f002 fa71 	bl	800480c <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 800232a:	4b25      	ldr	r3, [pc, #148]	@ (80023c0 <groveLCD_begin+0xe8>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	f043 0320 	orr.w	r3, r3, #32
 8002332:	b2db      	uxtb	r3, r3
 8002334:	4618      	mov	r0, r3
 8002336:	f000 f89b 	bl	8002470 <groveLCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 800233a:	2005      	movs	r0, #5
 800233c:	f002 fa66 	bl	800480c <HAL_Delay>

    // second try
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002340:	4b1f      	ldr	r3, [pc, #124]	@ (80023c0 <groveLCD_begin+0xe8>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	f043 0320 	orr.w	r3, r3, #32
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f890 	bl	8002470 <groveLCD_command>
    HAL_Delay(5);
 8002350:	2005      	movs	r0, #5
 8002352:	f002 fa5b 	bl	800480c <HAL_Delay>

    // third go
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002356:	4b1a      	ldr	r3, [pc, #104]	@ (80023c0 <groveLCD_begin+0xe8>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	f043 0320 	orr.w	r3, r3, #32
 800235e:	b2db      	uxtb	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f885 	bl	8002470 <groveLCD_command>


    // finally, set # lines, font size, etc.
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8002366:	4b16      	ldr	r3, [pc, #88]	@ (80023c0 <groveLCD_begin+0xe8>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	f043 0320 	orr.w	r3, r3, #32
 800236e:	b2db      	uxtb	r3, r3
 8002370:	4618      	mov	r0, r3
 8002372:	f000 f87d 	bl	8002470 <groveLCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8002376:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <groveLCD_begin+0xf4>)
 8002378:	2204      	movs	r2, #4
 800237a:	701a      	strb	r2, [r3, #0]
    groveLCD_display();
 800237c:	f000 f862 	bl	8002444 <groveLCD_display>

    // clear it off
    groveLCD_clear();
 8002380:	f000 f831 	bl	80023e6 <groveLCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8002384:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <groveLCD_begin+0xf8>)
 8002386:	2202      	movs	r2, #2
 8002388:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    groveLCD_command(LCD_ENTRYMODESET | _displaymode);
 800238a:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <groveLCD_begin+0xf8>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	b2db      	uxtb	r3, r3
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f86b 	bl	8002470 <groveLCD_command>


    // backlight init
    groveLCD_setReg(REG_MODE1, 0);
 800239a:	2100      	movs	r1, #0
 800239c:	2000      	movs	r0, #0
 800239e:	f000 f8a4 	bl	80024ea <groveLCD_setReg>
    // set LEDs controllable by both PWM and GRPPWM registers
    groveLCD_setReg(REG_OUTPUT, 0xFF);
 80023a2:	21ff      	movs	r1, #255	@ 0xff
 80023a4:	2008      	movs	r0, #8
 80023a6:	f000 f8a0 	bl	80024ea <groveLCD_setReg>
    // set MODE2 values
    // 0010 0000 -> 0x20  (DMBLNK to 1, ie blinky mode)
    groveLCD_setReg(REG_MODE2, 0x20);
 80023aa:	2120      	movs	r1, #32
 80023ac:	2001      	movs	r0, #1
 80023ae:	f000 f89c 	bl	80024ea <groveLCD_setReg>

    groveLCD_setColorWhite();
 80023b2:	f000 f80f 	bl	80023d4 <groveLCD_setColorWhite>

}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20004d34 	.word	0x20004d34
 80023c4:	20004d37 	.word	0x20004d37
 80023c8:	20004d38 	.word	0x20004d38
 80023cc:	20004d35 	.word	0x20004d35
 80023d0:	20004d36 	.word	0x20004d36

080023d4 <groveLCD_setColorWhite>:
//=================================================================
void groveLCD_setColorAll(){groveLCD_setRGB(0, 0, 0);}
void groveLCD_setColorWhite(){groveLCD_setRGB(255, 255, 255);}
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	22ff      	movs	r2, #255	@ 0xff
 80023da:	21ff      	movs	r1, #255	@ 0xff
 80023dc:	20ff      	movs	r0, #255	@ 0xff
 80023de:	f000 f896 	bl	800250e <groveLCD_setRGB>
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <groveLCD_clear>:
//=================================================================

/********** high level commands, for the user! */
void groveLCD_clear()
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	af00      	add	r7, sp, #0
	groveLCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 80023ea:	2001      	movs	r0, #1
 80023ec:	f000 f840 	bl	8002470 <groveLCD_command>
    HAL_Delay(2000);          // this command takes a long time!
 80023f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80023f4:	f002 fa0a 	bl	800480c <HAL_Delay>
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}

080023fc <groveLCD_setCursor>:
	groveLCD_command(LCD_RETURNHOME);        // set cursor position to zero
    HAL_Delay(2000);        // this command takes a long time!
}
//=================================================================
void groveLCD_setCursor(uint8_t col, uint8_t row)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	460a      	mov	r2, r1
 8002406:	71fb      	strb	r3, [r7, #7]
 8002408:	4613      	mov	r3, r2
 800240a:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 800240c:	79bb      	ldrb	r3, [r7, #6]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d104      	bne.n	800241c <groveLCD_setCursor+0x20>
 8002412:	79fb      	ldrb	r3, [r7, #7]
 8002414:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002418:	b2db      	uxtb	r3, r3
 800241a:	e003      	b.n	8002424 <groveLCD_setCursor+0x28>
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8002422:	b2db      	uxtb	r3, r3
 8002424:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 8002426:	2380      	movs	r3, #128	@ 0x80
 8002428:	733b      	strb	r3, [r7, #12]
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 800242e:	f107 030c 	add.w	r3, r7, #12
 8002432:	2102      	movs	r1, #2
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff ff3f 	bl	80022b8 <i2c_send_byteS>
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <groveLCD_display>:
{
    _displaycontrol &= ~LCD_DISPLAYON;
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
//=================================================================
void groveLCD_display() {
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 8002448:	4b08      	ldr	r3, [pc, #32]	@ (800246c <groveLCD_display+0x28>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	f043 0304 	orr.w	r3, r3, #4
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <groveLCD_display+0x28>)
 8002454:	701a      	strb	r2, [r3, #0]
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 8002456:	4b05      	ldr	r3, [pc, #20]	@ (800246c <groveLCD_display+0x28>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	f043 0308 	orr.w	r3, r3, #8
 800245e:	b2db      	uxtb	r3, r3
 8002460:	4618      	mov	r0, r3
 8002462:	f000 f805 	bl	8002470 <groveLCD_command>
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20004d35 	.word	0x20004d35

08002470 <groveLCD_command>:
//=================================================================
/*********** mid level commands, for sending data/cmds */

// send command
void groveLCD_command(uint8_t value)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 800247a:	2380      	movs	r3, #128	@ 0x80
 800247c:	733b      	strb	r3, [r7, #12]
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	2102      	movs	r1, #2
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff15 	bl	80022b8 <i2c_send_byteS>
}
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <groveLCD_write>:
//=================================================================
// send data
int groveLCD_write(uint8_t value)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	4603      	mov	r3, r0
 800249e:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 80024a0:	2340      	movs	r3, #64	@ 0x40
 80024a2:	733b      	strb	r3, [r7, #12]
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	2102      	movs	r1, #2
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ff02 	bl	80022b8 <i2c_send_byteS>
    return 1; // assume sucess
 80024b4:	2301      	movs	r3, #1
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <groveLCD_putString>:
//=================================================================
void groveLCD_putString(char* s)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 80024c6:	e007      	b.n	80024d8 <groveLCD_putString+0x1a>
	{
		groveLCD_write(*s);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ffe2 	bl	8002496 <groveLCD_write>
		s++;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3301      	adds	r3, #1
 80024d6:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f3      	bne.n	80024c8 <groveLCD_putString+0xa>
	}
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <groveLCD_setReg>:
//=================================================================
void groveLCD_setReg(unsigned char addr, unsigned char dta)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	460a      	mov	r2, r1
 80024f4:	71fb      	strb	r3, [r7, #7]
 80024f6:	4613      	mov	r3, r2
 80024f8:	71bb      	strb	r3, [r7, #6]
    i2c1_WriteRegBuffer(RGB_ADDRESS, addr,  &dta, 1);
 80024fa:	1dba      	adds	r2, r7, #6
 80024fc:	79f9      	ldrb	r1, [r7, #7]
 80024fe:	2301      	movs	r3, #1
 8002500:	20c4      	movs	r0, #196	@ 0xc4
 8002502:	f7ff fe05 	bl	8002110 <i2c1_WriteRegBuffer>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <groveLCD_setRGB>:
//=================================================================
void groveLCD_setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	71fb      	strb	r3, [r7, #7]
 8002518:	460b      	mov	r3, r1
 800251a:	71bb      	strb	r3, [r7, #6]
 800251c:	4613      	mov	r3, r2
 800251e:	717b      	strb	r3, [r7, #5]
	groveLCD_setReg(REG_RED, r);
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	4619      	mov	r1, r3
 8002524:	2004      	movs	r0, #4
 8002526:	f7ff ffe0 	bl	80024ea <groveLCD_setReg>
	groveLCD_setReg(REG_GREEN, g);
 800252a:	79bb      	ldrb	r3, [r7, #6]
 800252c:	4619      	mov	r1, r3
 800252e:	2003      	movs	r0, #3
 8002530:	f7ff ffdb 	bl	80024ea <groveLCD_setReg>
	groveLCD_setReg(REG_BLUE, b);
 8002534:	797b      	ldrb	r3, [r7, #5]
 8002536:	4619      	mov	r1, r3
 8002538:	2002      	movs	r0, #2
 800253a:	f7ff ffd6 	bl	80024ea <groveLCD_setReg>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <groveLCD_term_printf>:
    if(color > 3)return ;
    groveLCD_setRGB(color_define[color][0], color_define[color][1], color_define[color][2]);
}
//============================================================
void groveLCD_term_printf(const char* fmt, ...)
{
 8002548:	b40f      	push	{r0, r1, r2, r3}
 800254a:	b5b0      	push	{r4, r5, r7, lr}
 800254c:	b0a4      	sub	sp, #144	@ 0x90
 800254e:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 8002550:	2300      	movs	r3, #0
 8002552:	677b      	str	r3, [r7, #116]	@ 0x74

	va_start(ap, fmt);
 8002554:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002558:	64bb      	str	r3, [r7, #72]	@ 0x48

	while (*fmt != '\0') {
 800255a:	e1cd      	b.n	80028f8 <groveLCD_term_printf+0x3b0>
		if (*fmt =='%') {
 800255c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b25      	cmp	r3, #37	@ 0x25
 8002564:	f040 81bd 	bne.w	80028e2 <groveLCD_term_printf+0x39a>
			size=0; sp=1;
 8002568:	2300      	movs	r3, #0
 800256a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800256c:	2301      	movs	r3, #1
 800256e:	67bb      	str	r3, [r7, #120]	@ 0x78
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 8002570:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002574:	3301      	adds	r3, #1
 8002576:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800257a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b30      	cmp	r3, #48	@ 0x30
 8002582:	d106      	bne.n	8002592 <groveLCD_term_printf+0x4a>
 8002584:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002588:	3301      	adds	r3, #1
 800258a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800258e:	2300      	movs	r3, #0
 8002590:	67bb      	str	r3, [r7, #120]	@ 0x78
			ch=*fmt;
 8002592:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 800259c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80025a0:	2b30      	cmp	r3, #48	@ 0x30
 80025a2:	d92c      	bls.n	80025fe <groveLCD_term_printf+0xb6>
 80025a4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80025a8:	2b39      	cmp	r3, #57	@ 0x39
 80025aa:	d828      	bhi.n	80025fe <groveLCD_term_printf+0xb6>
				char tmp[10];
				int i=0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	673b      	str	r3, [r7, #112]	@ 0x70
				while ((ch>='0') && (ch<='9')) {
 80025b0:	e012      	b.n	80025d8 <groveLCD_term_printf+0x90>
					tmp[i++]=ch;
 80025b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	673a      	str	r2, [r7, #112]	@ 0x70
 80025b8:	3388      	adds	r3, #136	@ 0x88
 80025ba:	443b      	add	r3, r7
 80025bc:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 80025c0:	f803 2c88 	strb.w	r2, [r3, #-136]
					ch=*++fmt;
 80025c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025c8:	3301      	adds	r3, #1
 80025ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
				while ((ch>='0') && (ch<='9')) {
 80025d8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80025dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80025de:	d903      	bls.n	80025e8 <groveLCD_term_printf+0xa0>
 80025e0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80025e4:	2b39      	cmp	r3, #57	@ 0x39
 80025e6:	d9e4      	bls.n	80025b2 <groveLCD_term_printf+0x6a>
				}
				tmp[i]='\0';
 80025e8:	463a      	mov	r2, r7
 80025ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025ec:	4413      	add	r3, r2
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 80025f2:	463b      	mov	r3, r7
 80025f4:	210a      	movs	r1, #10
 80025f6:	4618      	mov	r0, r3
 80025f8:	f001 ff44 	bl	8004484 <str2num>
 80025fc:	67f8      	str	r0, [r7, #124]	@ 0x7c
			}
			switch (ch) {
 80025fe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002602:	2b25      	cmp	r3, #37	@ 0x25
 8002604:	d03c      	beq.n	8002680 <groveLCD_term_printf+0x138>
 8002606:	2b25      	cmp	r3, #37	@ 0x25
 8002608:	f2c0 8164 	blt.w	80028d4 <groveLCD_term_printf+0x38c>
 800260c:	2b78      	cmp	r3, #120	@ 0x78
 800260e:	f300 8161 	bgt.w	80028d4 <groveLCD_term_printf+0x38c>
 8002612:	2b63      	cmp	r3, #99	@ 0x63
 8002614:	f2c0 815e 	blt.w	80028d4 <groveLCD_term_printf+0x38c>
 8002618:	3b63      	subs	r3, #99	@ 0x63
 800261a:	2b15      	cmp	r3, #21
 800261c:	f200 815a 	bhi.w	80028d4 <groveLCD_term_printf+0x38c>
 8002620:	a201      	add	r2, pc, #4	@ (adr r2, 8002628 <groveLCD_term_printf+0xe0>)
 8002622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002626:	bf00      	nop
 8002628:	08002689 	.word	0x08002689
 800262c:	080026b3 	.word	0x080026b3
 8002630:	080028d5 	.word	0x080028d5
 8002634:	080027b3 	.word	0x080027b3
 8002638:	080028d5 	.word	0x080028d5
 800263c:	080028d5 	.word	0x080028d5
 8002640:	080028d5 	.word	0x080028d5
 8002644:	080028d5 	.word	0x080028d5
 8002648:	080028d5 	.word	0x080028d5
 800264c:	080028d5 	.word	0x080028d5
 8002650:	080028d5 	.word	0x080028d5
 8002654:	080028d5 	.word	0x080028d5
 8002658:	08002723 	.word	0x08002723
 800265c:	0800274f 	.word	0x0800274f
 8002660:	080028d5 	.word	0x080028d5
 8002664:	080028d5 	.word	0x080028d5
 8002668:	080026a1 	.word	0x080026a1
 800266c:	080028d5 	.word	0x080028d5
 8002670:	080026f7 	.word	0x080026f7
 8002674:	080028d5 	.word	0x080028d5
 8002678:	080028d5 	.word	0x080028d5
 800267c:	08002787 	.word	0x08002787
				case '%':
					groveLCD_write('%');
 8002680:	2025      	movs	r0, #37	@ 0x25
 8002682:	f7ff ff08 	bl	8002496 <groveLCD_write>
					break;
 8002686:	e132      	b.n	80028ee <groveLCD_term_printf+0x3a6>
				case 'c':
					ch = va_arg(ap, int);
 8002688:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800268a:	1d1a      	adds	r2, r3, #4
 800268c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
					groveLCD_write(ch);
 8002694:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fefc 	bl	8002496 <groveLCD_write>
					break;
 800269e:	e126      	b.n	80028ee <groveLCD_term_printf+0x3a6>
				case 's':
					p = va_arg(ap, char *);
 80026a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026a2:	1d1a      	adds	r2, r3, #4
 80026a4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
					groveLCD_putString(p);
 80026aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80026ac:	f7ff ff07 	bl	80024be <groveLCD_putString>
					break;
 80026b0:	e11d      	b.n	80028ee <groveLCD_term_printf+0x3a6>
				case 'd':
					ul = va_arg(ap, long);
 80026b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026b4:	1d1a      	adds	r2, r3, #4
 80026b6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					if ((long)ul < 0) {
 80026be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	da07      	bge.n	80026d6 <groveLCD_term_printf+0x18e>
						groveLCD_write('-');
 80026c6:	202d      	movs	r0, #45	@ 0x2d
 80026c8:	f7ff fee5 	bl	8002496 <groveLCD_write>
						ul = -(long)ul;
 80026cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026d0:	425b      	negs	r3, r3
 80026d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 80026d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026d8:	f107 000c 	add.w	r0, r7, #12
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80026e0:	220a      	movs	r2, #10
 80026e2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80026e6:	f001 fe49 	bl	800437c <num2str>
					groveLCD_putString(s);
 80026ea:	f107 030c 	add.w	r3, r7, #12
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fee5 	bl	80024be <groveLCD_putString>
					break;
 80026f4:	e0fb      	b.n	80028ee <groveLCD_term_printf+0x3a6>
				case 'u':
					ul = va_arg(ap, unsigned int);
 80026f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026f8:	1d1a      	adds	r2, r3, #4
 80026fa:	64ba      	str	r2, [r7, #72]	@ 0x48
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					num2str(s, ul, 10, size, sp);
 8002702:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002704:	f107 000c 	add.w	r0, r7, #12
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800270c:	220a      	movs	r2, #10
 800270e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8002712:	f001 fe33 	bl	800437c <num2str>
					groveLCD_putString(s);
 8002716:	f107 030c 	add.w	r3, r7, #12
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fecf 	bl	80024be <groveLCD_putString>
					break;
 8002720:	e0e5      	b.n	80028ee <groveLCD_term_printf+0x3a6>
				case 'o':
					ul = va_arg(ap, unsigned int);
 8002722:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002724:	1d1a      	adds	r2, r3, #4
 8002726:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					num2str(s, ul, 8, size, sp);
 800272e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002730:	f107 000c 	add.w	r0, r7, #12
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002738:	2208      	movs	r2, #8
 800273a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800273e:	f001 fe1d 	bl	800437c <num2str>
					groveLCD_putString(s);
 8002742:	f107 030c 	add.w	r3, r7, #12
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff feb9 	bl	80024be <groveLCD_putString>
					break;
 800274c:	e0cf      	b.n	80028ee <groveLCD_term_printf+0x3a6>
				case 'p':
					groveLCD_write('0');
 800274e:	2030      	movs	r0, #48	@ 0x30
 8002750:	f7ff fea1 	bl	8002496 <groveLCD_write>
					groveLCD_write('x');
 8002754:	2078      	movs	r0, #120	@ 0x78
 8002756:	f7ff fe9e 	bl	8002496 <groveLCD_write>
					ul = va_arg(ap, unsigned int);
 800275a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800275c:	1d1a      	adds	r2, r3, #4
 800275e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					num2str(s, ul, 16, size, sp);
 8002766:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002768:	f107 000c 	add.w	r0, r7, #12
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002770:	2210      	movs	r2, #16
 8002772:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8002776:	f001 fe01 	bl	800437c <num2str>
					groveLCD_putString(s);
 800277a:	f107 030c 	add.w	r3, r7, #12
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fe9d 	bl	80024be <groveLCD_putString>
					break;
 8002784:	e0b3      	b.n	80028ee <groveLCD_term_printf+0x3a6>
				case 'x':
					ul = va_arg(ap, unsigned int);
 8002786:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002788:	1d1a      	adds	r2, r3, #4
 800278a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					num2str(s, ul, 16, size, sp);
 8002792:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002794:	f107 000c 	add.w	r0, r7, #12
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800279c:	2210      	movs	r2, #16
 800279e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80027a2:	f001 fdeb 	bl	800437c <num2str>
					groveLCD_putString(s);
 80027a6:	f107 030c 	add.w	r3, r7, #12
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fe87 	bl	80024be <groveLCD_putString>
					break;
 80027b0:	e09d      	b.n	80028ee <groveLCD_term_printf+0x3a6>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 80027b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10c      	bne.n	80027d2 <groveLCD_term_printf+0x28a>
 80027b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027ba:	3307      	adds	r3, #7
 80027bc:	f023 0307 	bic.w	r3, r3, #7
 80027c0:	f103 0208 	add.w	r2, r3, #8
 80027c4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 80027ce:	2301      	movs	r3, #1
 80027d0:	677b      	str	r3, [r7, #116]	@ 0x74
					ull = va_arg(ap, long long unsigned int);
 80027d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027d4:	3307      	adds	r3, #7
 80027d6:	f023 0307 	bic.w	r3, r3, #7
 80027da:	f103 0208 	add.w	r2, r3, #8
 80027de:	64ba      	str	r2, [r7, #72]	@ 0x48
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
					int sign = ( ull & 0x80000000 ) >> 31;
 80027e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	0fc2      	lsrs	r2, r0, #31
 80027f6:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80027fa:	0fcb      	lsrs	r3, r1, #31
 80027fc:	4613      	mov	r3, r2
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	65fb      	str	r3, [r7, #92]	@ 0x5c
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 8002804:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002806:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800280a:	65bb      	str	r3, [r7, #88]	@ 0x58
					float mf = (float)m ;
 800280c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002816:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
					mf = mf / pow(2.0,20.0);
 800281a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800281e:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8002920 <groveLCD_term_printf+0x3d8>
 8002822:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002826:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
					mf = mf + 1.0;
 800282a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800282e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002832:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002836:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 800283a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	0dc2      	lsrs	r2, r0, #23
 8002848:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800284c:	0dcb      	lsrs	r3, r1, #23
 800284e:	4613      	mov	r3, r2
 8002850:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002854:	653b      	str	r3, [r7, #80]	@ 0x50
					e = e | (( ull & 0x000F00000 ) >> 20);
 8002856:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	0d02      	lsrs	r2, r0, #20
 8002864:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002868:	0d0b      	lsrs	r3, r1, #20
 800286a:	4613      	mov	r3, r2
 800286c:	f003 020f 	and.w	r2, r3, #15
 8002870:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002872:	4313      	orrs	r3, r2
 8002874:	653b      	str	r3, [r7, #80]	@ 0x50
					e = e - 127;
 8002876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002878:	3b7f      	subs	r3, #127	@ 0x7f
 800287a:	653b      	str	r3, [r7, #80]	@ 0x50
					float f = mf*myPow(2.0,e);
 800287c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800287e:	f7fd fe7b 	bl	8000578 <__aeabi_f2d>
 8002882:	4604      	mov	r4, r0
 8002884:	460d      	mov	r5, r1
 8002886:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002888:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 8002918 <groveLCD_term_printf+0x3d0>
 800288c:	f001 ff08 	bl	80046a0 <myPow>
 8002890:	ec53 2b10 	vmov	r2, r3, d0
 8002894:	4620      	mov	r0, r4
 8002896:	4629      	mov	r1, r5
 8002898:	f7fd fec6 	bl	8000628 <__aeabi_dmul>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	f7fe f9b8 	bl	8000c18 <__aeabi_d2f>
 80028a8:	4603      	mov	r3, r0
 80028aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
					if(sign==1){ groveLCD_write('-'); }
 80028ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d102      	bne.n	80028b8 <groveLCD_term_printf+0x370>
 80028b2:	202d      	movs	r0, #45	@ 0x2d
 80028b4:	f7ff fdef 	bl	8002496 <groveLCD_write>
					float2str((char*)s, f, 5);
 80028b8:	f107 030c 	add.w	r3, r7, #12
 80028bc:	2105      	movs	r1, #5
 80028be:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 80028c2:	4618      	mov	r0, r3
 80028c4:	f001 fe9c 	bl	8004600 <float2str>
					groveLCD_putString((char*)s);
 80028c8:	f107 030c 	add.w	r3, r7, #12
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fdf6 	bl	80024be <groveLCD_putString>
					break;
 80028d2:	e00c      	b.n	80028ee <groveLCD_term_printf+0x3a6>

				default:
					groveLCD_write(*fmt);
 80028d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff fddb 	bl	8002496 <groveLCD_write>
 80028e0:	e005      	b.n	80028ee <groveLCD_term_printf+0x3a6>
			}
		} else groveLCD_write(*fmt);
 80028e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff fdd4 	bl	8002496 <groveLCD_write>
		fmt++;
 80028ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028f2:	3301      	adds	r3, #1
 80028f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	while (*fmt != '\0') {
 80028f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f47f ae2c 	bne.w	800255c <groveLCD_term_printf+0x14>
	}
	va_end(ap);
}
 8002904:	bf00      	nop
 8002906:	bf00      	nop
 8002908:	3788      	adds	r7, #136	@ 0x88
 800290a:	46bd      	mov	sp, r7
 800290c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002910:	b004      	add	sp, #16
 8002912:	4770      	bx	lr
 8002914:	f3af 8000 	nop.w
 8002918:	00000000 	.word	0x00000000
 800291c:	40000000 	.word	0x40000000
 8002920:	49800000 	.word	0x49800000
 8002924:	00000000 	.word	0x00000000

08002928 <task_A>:
int tab_speed[100];
int speed;

// Fonction de contrôle pour la roue gauche
static void task_A(void *pvParameters)
{
 8002928:	b5b0      	push	{r4, r5, r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	struct AMessage pxLMessage;
	int consigne = 0; // La vitesse à laquelle je souhaite rouler
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
	int speed_L=0; // vitesse roue gauche
 8002934:	2300      	movs	r3, #0
 8002936:	61bb      	str	r3, [r7, #24]


	for (;;)
	{
		// Synchronisation de l’asservissement
		xQueueReceive( qhL,  &( pxLMessage ) , portMAX_DELAY );
 8002938:	4b41      	ldr	r3, [pc, #260]	@ (8002a40 <task_A+0x118>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f107 0108 	add.w	r1, r7, #8
 8002940:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002944:	4618      	mov	r0, r3
 8002946:	f008 ff1b 	bl	800b780 <xQueueReceive>
		//printf("TASK A \r\n");
		// Vitesse moteur gauche
		speed_L = quadEncoder_GetSpeedL();
 800294a:	f000 fe83 	bl	8003654 <quadEncoder_GetSpeedL>
 800294e:	4603      	mov	r3, r0
 8002950:	61bb      	str	r3, [r7, #24]
		err_L=300-speed_L;
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8002958:	617b      	str	r3, [r7, #20]
		proportionalComponent_L=Kp_L*(float)err_L;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	ee07 3a90 	vmov	s15, r3
 8002960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002964:	ee17 0a90 	vmov	r0, s15
 8002968:	f7fd fe06 	bl	8000578 <__aeabi_f2d>
 800296c:	a330      	add	r3, pc, #192	@ (adr r3, 8002a30 <task_A+0x108>)
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	f7fd fe59 	bl	8000628 <__aeabi_dmul>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4610      	mov	r0, r2
 800297c:	4619      	mov	r1, r3
 800297e:	f7fe f94b 	bl	8000c18 <__aeabi_d2f>
 8002982:	4603      	mov	r3, r0
 8002984:	613b      	str	r3, [r7, #16]
		integralComponent_L=integralComponent_L+Kp_L*Ki_L*(float)err_L;
 8002986:	4b2f      	ldr	r3, [pc, #188]	@ (8002a44 <task_A+0x11c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fd fdf4 	bl	8000578 <__aeabi_f2d>
 8002990:	4604      	mov	r4, r0
 8002992:	460d      	mov	r5, r1
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	ee07 3a90 	vmov	s15, r3
 800299a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800299e:	ee17 0a90 	vmov	r0, s15
 80029a2:	f7fd fde9 	bl	8000578 <__aeabi_f2d>
 80029a6:	a324      	add	r3, pc, #144	@ (adr r3, 8002a38 <task_A+0x110>)
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	f7fd fe3c 	bl	8000628 <__aeabi_dmul>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4620      	mov	r0, r4
 80029b6:	4629      	mov	r1, r5
 80029b8:	f7fd fc80 	bl	80002bc <__adddf3>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f7fe f928 	bl	8000c18 <__aeabi_d2f>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002a44 <task_A+0x11c>)
 80029cc:	6013      	str	r3, [r2, #0]
		consigne = (int)(proportionalComponent_L+integralComponent_L);
 80029ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002a44 <task_A+0x11c>)
 80029d0:	ed93 7a00 	vldr	s14, [r3]
 80029d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80029d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029e0:	ee17 3a90 	vmov	r3, s15
 80029e4:	61fb      	str	r3, [r7, #28]

		switch(pxLMessage.command){
 80029e6:	7a3b      	ldrb	r3, [r7, #8]
 80029e8:	2b73      	cmp	r3, #115	@ 0x73
 80029ea:	d00f      	beq.n	8002a0c <task_A+0xe4>
 80029ec:	2b73      	cmp	r3, #115	@ 0x73
 80029ee:	dc11      	bgt.n	8002a14 <task_A+0xec>
 80029f0:	2b62      	cmp	r3, #98	@ 0x62
 80029f2:	d006      	beq.n	8002a02 <task_A+0xda>
 80029f4:	2b66      	cmp	r3, #102	@ 0x66
 80029f6:	d10d      	bne.n	8002a14 <task_A+0xec>
			case 'f':
				onMoveForward(2,consigne);
 80029f8:	69f9      	ldr	r1, [r7, #28]
 80029fa:	2002      	movs	r0, #2
 80029fc:	f000 fd10 	bl	8003420 <onMoveForward>
				break;
 8002a00:	e009      	b.n	8002a16 <task_A+0xee>
			case 'b':
				onMoveBackward(2,consigne);
 8002a02:	69f9      	ldr	r1, [r7, #28]
 8002a04:	2002      	movs	r0, #2
 8002a06:	f000 fd2d 	bl	8003464 <onMoveBackward>
				break;
 8002a0a:	e004      	b.n	8002a16 <task_A+0xee>
			case 's':
				stopMoving(2);
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	f000 fd4b 	bl	80034a8 <stopMoving>
				break;
 8002a12:	e000      	b.n	8002a16 <task_A+0xee>
			default:
				break;
 8002a14:	bf00      	nop
		}

		// Libère un sémaphore
		xSemaphoreGive( xSemaphore );
 8002a16:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <task_A+0x120>)
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2100      	movs	r1, #0
 8002a20:	f008 fd0e 	bl	800b440 <xQueueGenericSend>
		vTaskDelay(5);
 8002a24:	2005      	movs	r0, #5
 8002a26:	f009 fbe1 	bl	800c1ec <vTaskDelay>
		xQueueReceive( qhL,  &( pxLMessage ) , portMAX_DELAY );
 8002a2a:	e785      	b.n	8002938 <task_A+0x10>
 8002a2c:	f3af 8000 	nop.w
 8002a30:	47ae147b 	.word	0x47ae147b
 8002a34:	3f847ae1 	.word	0x3f847ae1
 8002a38:	ada2811d 	.word	0xada2811d
 8002a3c:	3f61cf06 	.word	0x3f61cf06
 8002a40:	20004d44 	.word	0x20004d44
 8002a44:	20004d58 	.word	0x20004d58
 8002a48:	20004d3c 	.word	0x20004d3c
 8002a4c:	00000000 	.word	0x00000000

08002a50 <task_B>:
	}
}

// Fonction de contrôle pour la roue droite
static void task_B(void *pvParameters)
{
 8002a50:	b5b0      	push	{r4, r5, r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	struct AMessage pxRMessage;
	int consigne = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
	int speed_R=0; // vitesse roue droite
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
	static float integralComponent_R=0.0;
	int i;

	for (;;)
	{
		xQueueReceive( qhR,  &( pxRMessage ) , portMAX_DELAY );
 8002a60:	4b41      	ldr	r3, [pc, #260]	@ (8002b68 <task_B+0x118>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f107 0108 	add.w	r1, r7, #8
 8002a68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f008 fe87 	bl	800b780 <xQueueReceive>
		//printf("TASK B \r\n");

		speed_R = quadEncoder_GetSpeedR();
 8002a72:	f000 fe41 	bl	80036f8 <quadEncoder_GetSpeedR>
 8002a76:	4603      	mov	r3, r0
 8002a78:	61bb      	str	r3, [r7, #24]
		err_R=300-speed_R;
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8002a80:	617b      	str	r3, [r7, #20]
		proportionalComponent_R=Kp_R*(float)err_R;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	ee07 3a90 	vmov	s15, r3
 8002a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a8c:	ee17 0a90 	vmov	r0, s15
 8002a90:	f7fd fd72 	bl	8000578 <__aeabi_f2d>
 8002a94:	a330      	add	r3, pc, #192	@ (adr r3, 8002b58 <task_B+0x108>)
 8002a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9a:	f7fd fdc5 	bl	8000628 <__aeabi_dmul>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f7fe f8b7 	bl	8000c18 <__aeabi_d2f>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	613b      	str	r3, [r7, #16]
		integralComponent_R=integralComponent_R+Kp_R*Ki_R*(float)err_R;
 8002aae:	4b2f      	ldr	r3, [pc, #188]	@ (8002b6c <task_B+0x11c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd fd60 	bl	8000578 <__aeabi_f2d>
 8002ab8:	4604      	mov	r4, r0
 8002aba:	460d      	mov	r5, r1
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac6:	ee17 0a90 	vmov	r0, s15
 8002aca:	f7fd fd55 	bl	8000578 <__aeabi_f2d>
 8002ace:	a324      	add	r3, pc, #144	@ (adr r3, 8002b60 <task_B+0x110>)
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	f7fd fda8 	bl	8000628 <__aeabi_dmul>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4620      	mov	r0, r4
 8002ade:	4629      	mov	r1, r5
 8002ae0:	f7fd fbec 	bl	80002bc <__adddf3>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	f7fe f894 	bl	8000c18 <__aeabi_d2f>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b6c <task_B+0x11c>)
 8002af4:	6013      	str	r3, [r2, #0]
		consigne = (int)(proportionalComponent_R+integralComponent_R);
 8002af6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b6c <task_B+0x11c>)
 8002af8:	ed93 7a00 	vldr	s14, [r3]
 8002afc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b08:	ee17 3a90 	vmov	r3, s15
 8002b0c:	61fb      	str	r3, [r7, #28]

		switch(pxRMessage.command){
 8002b0e:	7a3b      	ldrb	r3, [r7, #8]
 8002b10:	2b73      	cmp	r3, #115	@ 0x73
 8002b12:	d00f      	beq.n	8002b34 <task_B+0xe4>
 8002b14:	2b73      	cmp	r3, #115	@ 0x73
 8002b16:	dc11      	bgt.n	8002b3c <task_B+0xec>
 8002b18:	2b62      	cmp	r3, #98	@ 0x62
 8002b1a:	d006      	beq.n	8002b2a <task_B+0xda>
 8002b1c:	2b66      	cmp	r3, #102	@ 0x66
 8002b1e:	d10d      	bne.n	8002b3c <task_B+0xec>
			case 'f':
				onMoveForward(1,consigne);
 8002b20:	69f9      	ldr	r1, [r7, #28]
 8002b22:	2001      	movs	r0, #1
 8002b24:	f000 fc7c 	bl	8003420 <onMoveForward>
				break;
 8002b28:	e009      	b.n	8002b3e <task_B+0xee>
			case 'b':
				onMoveBackward(1,consigne);
 8002b2a:	69f9      	ldr	r1, [r7, #28]
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	f000 fc99 	bl	8003464 <onMoveBackward>
				break;
 8002b32:	e004      	b.n	8002b3e <task_B+0xee>
			case 's':
				stopMoving(1);
 8002b34:	2001      	movs	r0, #1
 8002b36:	f000 fcb7 	bl	80034a8 <stopMoving>
				break;
 8002b3a:	e000      	b.n	8002b3e <task_B+0xee>
			default:
				break;
 8002b3c:	bf00      	nop
		}

		xSemaphoreGive( xSemaphore );
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b70 <task_B+0x120>)
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	2300      	movs	r3, #0
 8002b44:	2200      	movs	r2, #0
 8002b46:	2100      	movs	r1, #0
 8002b48:	f008 fc7a 	bl	800b440 <xQueueGenericSend>
		vTaskDelay(5);
 8002b4c:	2005      	movs	r0, #5
 8002b4e:	f009 fb4d 	bl	800c1ec <vTaskDelay>
		xQueueReceive( qhR,  &( pxRMessage ) , portMAX_DELAY );
 8002b52:	e785      	b.n	8002a60 <task_B+0x10>
 8002b54:	f3af 8000 	nop.w
 8002b58:	47ae147b 	.word	0x47ae147b
 8002b5c:	3f847ae1 	.word	0x3f847ae1
 8002b60:	13813813 	.word	0x13813813
 8002b64:	3f638138 	.word	0x3f638138
 8002b68:	20004d48 	.word	0x20004d48
 8002b6c:	20004d5c 	.word	0x20004d5c
 8002b70:	20004d3c 	.word	0x20004d3c

08002b74 <task_C>:
	}
}

// Générateur d'ordres pour le contrôle des moteurs du robot
static void task_C( void *pvParameters )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	struct AMessage pxMessage;
	pxMessage.command='b';
 8002b7c:	2362      	movs	r3, #98	@ 0x62
 8002b7e:	723b      	strb	r3, [r7, #8]
	pxMessage.data=100;
 8002b80:	2364      	movs	r3, #100	@ 0x64
 8002b82:	60fb      	str	r3, [r7, #12]
	vTaskDelay(1000); // attendre 1s
 8002b84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b88:	f009 fb30 	bl	800c1ec <vTaskDelay>

	// envoi régulier des ordres de mise à jour
	for (;;)
	{
	    //printf("TASK C \r\n");
	    xQueueSend( qhL, ( void * ) &pxMessage,  portMAX_DELAY ); // envoi queue gauche
 8002b8c:	4b12      	ldr	r3, [pc, #72]	@ (8002bd8 <task_C+0x64>)
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	f107 0108 	add.w	r1, r7, #8
 8002b94:	2300      	movs	r3, #0
 8002b96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b9a:	f008 fc51 	bl	800b440 <xQueueGenericSend>
	    xSemaphoreTake( xSemaphore, portMAX_DELAY );
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bdc <task_C+0x68>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f008 fecc 	bl	800b944 <xQueueSemaphoreTake>


	    xQueueSend( qhR, ( void * ) &pxMessage,  portMAX_DELAY ); // envoi queue droite
 8002bac:	4b0c      	ldr	r3, [pc, #48]	@ (8002be0 <task_C+0x6c>)
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	f107 0108 	add.w	r1, r7, #8
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002bba:	f008 fc41 	bl	800b440 <xQueueGenericSend>
	    xSemaphoreTake( xSemaphore, portMAX_DELAY );
 8002bbe:	4b07      	ldr	r3, [pc, #28]	@ (8002bdc <task_C+0x68>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f008 febc 	bl	800b944 <xQueueSemaphoreTake>

	    vTaskDelay(SAMPLING_PERIOD_ms);
 8002bcc:	2005      	movs	r0, #5
 8002bce:	f009 fb0d 	bl	800c1ec <vTaskDelay>
	    xQueueSend( qhL, ( void * ) &pxMessage,  portMAX_DELAY ); // envoi queue gauche
 8002bd2:	bf00      	nop
 8002bd4:	e7da      	b.n	8002b8c <task_C+0x18>
 8002bd6:	bf00      	nop
 8002bd8:	20004d44 	.word	0x20004d44
 8002bdc:	20004d3c 	.word	0x20004d3c
 8002be0:	20004d48 	.word	0x20004d48

08002be4 <main>:
#endif


//=========================================================================
int main(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af02      	add	r7, sp, #8
  int ret=0;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
  int tab_dist[2];

  HAL_Init();
 8002bee:	f001 fdcb 	bl	8004788 <HAL_Init>
  SystemClock_Config();
 8002bf2:	f001 fb59 	bl	80042a8 <SystemClock_Config>
  MX_GPIO_Init();
 8002bf6:	f7ff f977 	bl	8001ee8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002bfa:	f7ff fb17 	bl	800222c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002bfe:	f7ff fac1 	bl	8002184 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002c02:	f7ff fae9 	bl	80021d8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002c06:	f7ff fa09 	bl	800201c <MX_I2C1_Init>

  motorCommand_Init();
 8002c0a:	f000 fb8d 	bl	8003328 <motorCommand_Init>
  quadEncoder_Init();
 8002c0e:	f000 fc65 	bl	80034dc <quadEncoder_Init>
  captDistIR_Init();
 8002c12:	f7fe fe2d 	bl	8001870 <captDistIR_Init>

  HAL_Delay(500);
 8002c16:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c1a:	f001 fdf7 	bl	800480c <HAL_Delay>

  // Affichage via UART2 sur Terminal série $ minicom -D /dev/ttyACM0
  printf("hello\r\n"); // REM : ne pas oublier le \n
 8002c1e:	4867      	ldr	r0, [pc, #412]	@ (8002dbc <main+0x1d8>)
 8002c20:	f017 fc4a 	bl	801a4b8 <puts>

  VL53L0X_init();
 8002c24:	f7fe fb1c 	bl	8001260 <VL53L0X_init>

  ret = VL53L0X_validateInterface();
 8002c28:	f7fe fae6 	bl	80011f8 <VL53L0X_validateInterface>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	617b      	str	r3, [r7, #20]
  if(ret ==0)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d103      	bne.n	8002c3e <main+0x5a>
  {
	  printf("VL53L0X OK\r\n");
 8002c36:	4862      	ldr	r0, [pc, #392]	@ (8002dc0 <main+0x1dc>)
 8002c38:	f017 fc3e 	bl	801a4b8 <puts>
 8002c3c:	e002      	b.n	8002c44 <main+0x60>
  }
  else
  {
	  printf("!! PROBLEME VL53L0X !!\r\n");
 8002c3e:	4861      	ldr	r0, [pc, #388]	@ (8002dc4 <main+0x1e0>)
 8002c40:	f017 fc3a 	bl	801a4b8 <puts>
  }
  VL53L0X_startContinuous(0);
 8002c44:	2000      	movs	r0, #0
 8002c46:	f7fe fdcd 	bl	80017e4 <VL53L0X_startContinuous>

  int a, b;
  groveLCD_begin(16,2,0); // !! cette fonction prend du temps
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2102      	movs	r1, #2
 8002c4e:	2010      	movs	r0, #16
 8002c50:	f7ff fb42 	bl	80022d8 <groveLCD_begin>
  HAL_Delay(100);
 8002c54:	2064      	movs	r0, #100	@ 0x64
 8002c56:	f001 fdd9 	bl	800480c <HAL_Delay>
  groveLCD_display();
 8002c5a:	f7ff fbf3 	bl	8002444 <groveLCD_display>
  a=5; b=2;
 8002c5e:	2305      	movs	r3, #5
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	2302      	movs	r3, #2
 8002c64:	60fb      	str	r3, [r7, #12]
  groveLCD_term_printf("%d+%d=%d",a,b,a+b);
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	6939      	ldr	r1, [r7, #16]
 8002c70:	4855      	ldr	r0, [pc, #340]	@ (8002dc8 <main+0x1e4>)
 8002c72:	f7ff fc69 	bl	8002548 <groveLCD_term_printf>
  groveLCD_setCursor(0,0);
 8002c76:	2100      	movs	r1, #0
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f7ff fbbf 	bl	80023fc <groveLCD_setCursor>
  groveLCD_term_printf("hello");
 8002c7e:	4853      	ldr	r0, [pc, #332]	@ (8002dcc <main+0x1e8>)
 8002c80:	f7ff fc62 	bl	8002548 <groveLCD_term_printf>


  HAL_Delay(50);
 8002c84:	2032      	movs	r0, #50	@ 0x32
 8002c86:	f001 fdc1 	bl	800480c <HAL_Delay>

#if FIND_MOTOR_INIT_POS

  int16_t speed=0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	817b      	strh	r3, [r7, #10]
// RECHERCHE DE LA POSITION INITIALE ( 1er signal 'index' du capteur )
// Evite une erreur pour une mesure de vitesse 
	Left_first_index_reached = 0;
 8002c8e:	4b50      	ldr	r3, [pc, #320]	@ (8002dd0 <main+0x1ec>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
	 while( Left_first_index_reached != 1 )
 8002c94:	e009      	b.n	8002caa <main+0xc6>
	 {
		motorLeft_SetDuty(130);
 8002c96:	2082      	movs	r0, #130	@ 0x82
 8002c98:	f000 fba2 	bl	80033e0 <motorLeft_SetDuty>
		HAL_Delay(SAMPLING_PERIOD_ms);
 8002c9c:	2005      	movs	r0, #5
 8002c9e:	f001 fdb5 	bl	800480c <HAL_Delay>
		speed = quadEncoder_GetSpeedL();
 8002ca2:	f000 fcd7 	bl	8003654 <quadEncoder_GetSpeedL>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	817b      	strh	r3, [r7, #10]
	 while( Left_first_index_reached != 1 )
 8002caa:	4b49      	ldr	r3, [pc, #292]	@ (8002dd0 <main+0x1ec>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d1f1      	bne.n	8002c96 <main+0xb2>
	 }

	Right_first_index_reached = 0;
 8002cb2:	4b48      	ldr	r3, [pc, #288]	@ (8002dd4 <main+0x1f0>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
	 while( Right_first_index_reached != 1 )
 8002cb8:	e009      	b.n	8002cce <main+0xea>
	 {
		motorRight_SetDuty(130);
 8002cba:	2082      	movs	r0, #130	@ 0x82
 8002cbc:	f000 fba0 	bl	8003400 <motorRight_SetDuty>
		HAL_Delay(SAMPLING_PERIOD_ms);
 8002cc0:	2005      	movs	r0, #5
 8002cc2:	f001 fda3 	bl	800480c <HAL_Delay>
		speed = quadEncoder_GetSpeedR();
 8002cc6:	f000 fd17 	bl	80036f8 <quadEncoder_GetSpeedR>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	817b      	strh	r3, [r7, #10]
	 while( Right_first_index_reached != 1 )
 8002cce:	4b41      	ldr	r3, [pc, #260]	@ (8002dd4 <main+0x1f0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d1f1      	bne.n	8002cba <main+0xd6>
	 }

	 motorLeft_SetDuty(50);
 8002cd6:	2032      	movs	r0, #50	@ 0x32
 8002cd8:	f000 fb82 	bl	80033e0 <motorLeft_SetDuty>
	 motorRight_SetDuty(50);
 8002cdc:	2032      	movs	r0, #50	@ 0x32
 8002cde:	f000 fb8f 	bl	8003400 <motorRight_SetDuty>
	 HAL_Delay(200);
 8002ce2:	20c8      	movs	r0, #200	@ 0xc8
 8002ce4:	f001 fd92 	bl	800480c <HAL_Delay>

	 speed = quadEncoder_GetSpeedL();
 8002ce8:	f000 fcb4 	bl	8003654 <quadEncoder_GetSpeedL>
 8002cec:	4603      	mov	r3, r0
 8002cee:	817b      	strh	r3, [r7, #10]
	 speed = quadEncoder_GetSpeedR();
 8002cf0:	f000 fd02 	bl	80036f8 <quadEncoder_GetSpeedR>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	817b      	strh	r3, [r7, #10]
#endif

  osKernelInitialize();
 8002cf8:	f008 f90e 	bl	800af18 <osKernelInitialize>

  xTaskCreate( microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	2318      	movs	r3, #24
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2300      	movs	r3, #0
 8002d06:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002d0a:	4933      	ldr	r1, [pc, #204]	@ (8002dd8 <main+0x1f4>)
 8002d0c:	4833      	ldr	r0, [pc, #204]	@ (8002ddc <main+0x1f8>)
 8002d0e:	f009 f90f 	bl	800bf30 <xTaskCreate>
#if SYNCHRO_EX == EX1
	xTaskCreate( task_A, ( const portCHAR * ) "task A", 128 /* stack size */, NULL, 26, NULL );
 8002d12:	2300      	movs	r3, #0
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	231a      	movs	r3, #26
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	2280      	movs	r2, #128	@ 0x80
 8002d1e:	4930      	ldr	r1, [pc, #192]	@ (8002de0 <main+0x1fc>)
 8002d20:	4830      	ldr	r0, [pc, #192]	@ (8002de4 <main+0x200>)
 8002d22:	f009 f905 	bl	800bf30 <xTaskCreate>
	xTaskCreate( task_B, ( const portCHAR * ) "task B", 128 /* stack size */, NULL, 25, NULL );
 8002d26:	2300      	movs	r3, #0
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	2319      	movs	r3, #25
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2280      	movs	r2, #128	@ 0x80
 8002d32:	492d      	ldr	r1, [pc, #180]	@ (8002de8 <main+0x204>)
 8002d34:	482d      	ldr	r0, [pc, #180]	@ (8002dec <main+0x208>)
 8002d36:	f009 f8fb 	bl	800bf30 <xTaskCreate>
	xTaskCreate( task_C, ( signed portCHAR * ) "task C", 128 /* stack size */, NULL, 28, NULL );
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9301      	str	r3, [sp, #4]
 8002d3e:	231c      	movs	r3, #28
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2300      	movs	r3, #0
 8002d44:	2280      	movs	r2, #128	@ 0x80
 8002d46:	492a      	ldr	r1, [pc, #168]	@ (8002df0 <main+0x20c>)
 8002d48:	482a      	ldr	r0, [pc, #168]	@ (8002df4 <main+0x210>)
 8002d4a:	f009 f8f1 	bl	800bf30 <xTaskCreate>
#elif SYNCHRO_EX == EX3
	xTaskCreate( task_E, ( signed portCHAR * ) "task E", 128 /* stack size */, NULL, 30, NULL );
	xTaskCreate( task_F, ( signed portCHAR * ) "task F", 128 /* stack size */, NULL, 29, NULL );
#endif

	vSemaphoreCreateBinary(xSemaphore);
 8002d4e:	2203      	movs	r2, #3
 8002d50:	2100      	movs	r1, #0
 8002d52:	2001      	movs	r0, #1
 8002d54:	f008 fb15 	bl	800b382 <xQueueGenericCreate>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	4a27      	ldr	r2, [pc, #156]	@ (8002df8 <main+0x214>)
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b26      	ldr	r3, [pc, #152]	@ (8002df8 <main+0x214>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d006      	beq.n	8002d74 <main+0x190>
 8002d66:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <main+0x214>)
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f008 fb66 	bl	800b440 <xQueueGenericSend>
	xSemaphoreTake( xSemaphore, portMAX_DELAY );
 8002d74:	4b20      	ldr	r3, [pc, #128]	@ (8002df8 <main+0x214>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f008 fde1 	bl	800b944 <xQueueSemaphoreTake>

	qh = xQueueCreate( 1, sizeof(struct AMessage ) );
 8002d82:	2200      	movs	r2, #0
 8002d84:	2108      	movs	r1, #8
 8002d86:	2001      	movs	r0, #1
 8002d88:	f008 fafb 	bl	800b382 <xQueueGenericCreate>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8002dfc <main+0x218>)
 8002d90:	6013      	str	r3, [r2, #0]

#if SYNCHRO_EX == EX1
	qhL = xQueueCreate( 1, sizeof(struct AMessage ) ); //queue gauche
 8002d92:	2200      	movs	r2, #0
 8002d94:	2108      	movs	r1, #8
 8002d96:	2001      	movs	r0, #1
 8002d98:	f008 faf3 	bl	800b382 <xQueueGenericCreate>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4a18      	ldr	r2, [pc, #96]	@ (8002e00 <main+0x21c>)
 8002da0:	6013      	str	r3, [r2, #0]
	qhR = xQueueCreate( 1, sizeof(struct AMessage ) ); //queue droite
 8002da2:	2200      	movs	r2, #0
 8002da4:	2108      	movs	r1, #8
 8002da6:	2001      	movs	r0, #1
 8002da8:	f008 faeb 	bl	800b382 <xQueueGenericCreate>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4a15      	ldr	r2, [pc, #84]	@ (8002e04 <main+0x220>)
 8002db0:	6013      	str	r3, [r2, #0]
#endif

  osKernelStart();
 8002db2:	f008 f8d5 	bl	800af60 <osKernelStart>

  while (1)
 8002db6:	bf00      	nop
 8002db8:	e7fd      	b.n	8002db6 <main+0x1d2>
 8002dba:	bf00      	nop
 8002dbc:	0801dd6c 	.word	0x0801dd6c
 8002dc0:	0801dd74 	.word	0x0801dd74
 8002dc4:	0801dd80 	.word	0x0801dd80
 8002dc8:	0801dd98 	.word	0x0801dd98
 8002dcc:	0801dda4 	.word	0x0801dda4
 8002dd0:	20004d50 	.word	0x20004d50
 8002dd4:	20004d54 	.word	0x20004d54
 8002dd8:	0801ddac 	.word	0x0801ddac
 8002ddc:	08002e2d 	.word	0x08002e2d
 8002de0:	0801ddbc 	.word	0x0801ddbc
 8002de4:	08002929 	.word	0x08002929
 8002de8:	0801ddc4 	.word	0x0801ddc4
 8002dec:	08002a51 	.word	0x08002a51
 8002df0:	0801ddcc 	.word	0x0801ddcc
 8002df4:	08002b75 	.word	0x08002b75
 8002df8:	20004d3c 	.word	0x20004d3c
 8002dfc:	20004d40 	.word	0x20004d40
 8002e00:	20004d44 	.word	0x20004d44
 8002e04:	20004d48 	.word	0x20004d48

08002e08 <subscription_callback>:
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);


void subscription_callback(const void * msgin)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  const std_msgs__msg__String * msg = (const std_msgs__msg__String *)msgin;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	60fb      	str	r3, [r7, #12]

  // Process message
  printf("Received from HOST: %s\n\r", msg->data);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e18:	4803      	ldr	r0, [pc, #12]	@ (8002e28 <subscription_callback+0x20>)
 8002e1a:	f017 fae5 	bl	801a3e8 <iprintf>
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	0801ddd4 	.word	0x0801ddd4

08002e2c <microros_task>:


void microros_task(void *argument)
{
 8002e2c:	b5b0      	push	{r4, r5, r7, lr}
 8002e2e:	b0d6      	sub	sp, #344	@ 0x158
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002e36:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002e3a:	6018      	str	r0, [r3, #0]
  rmw_uros_set_custom_transport( true, (void *) &huart1, cubemx_transport_open,  cubemx_transport_close,  cubemx_transport_write, cubemx_transport_read);
 8002e3c:	4b68      	ldr	r3, [pc, #416]	@ (8002fe0 <microros_task+0x1b4>)
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	4b68      	ldr	r3, [pc, #416]	@ (8002fe4 <microros_task+0x1b8>)
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	4b68      	ldr	r3, [pc, #416]	@ (8002fe8 <microros_task+0x1bc>)
 8002e46:	4a69      	ldr	r2, [pc, #420]	@ (8002fec <microros_task+0x1c0>)
 8002e48:	4969      	ldr	r1, [pc, #420]	@ (8002ff0 <microros_task+0x1c4>)
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	f00c f97e 	bl	800f14c <rmw_uros_set_custom_transport>

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002e50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002e54:	4618      	mov	r0, r3
 8002e56:	f00b fee5 	bl	800ec24 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8002e5a:	4b66      	ldr	r3, [pc, #408]	@ (8002ff4 <microros_task+0x1c8>)
 8002e5c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  freeRTOS_allocator.deallocate = microros_deallocate;
 8002e60:	4b65      	ldr	r3, [pc, #404]	@ (8002ff8 <microros_task+0x1cc>)
 8002e62:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  freeRTOS_allocator.reallocate = microros_reallocate;
 8002e66:	4b65      	ldr	r3, [pc, #404]	@ (8002ffc <microros_task+0x1d0>)
 8002e68:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002e6c:	4b64      	ldr	r3, [pc, #400]	@ (8003000 <microros_task+0x1d4>)
 8002e6e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8002e72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002e76:	4618      	mov	r0, r3
 8002e78:	f00b fee2 	bl	800ec40 <rcutils_set_default_allocator>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f083 0301 	eor.w	r3, r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <microros_task+0x66>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8002e88:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8002e8c:	485d      	ldr	r0, [pc, #372]	@ (8003004 <microros_task+0x1d8>)
 8002e8e:	f017 faab 	bl	801a3e8 <iprintf>
  }

  // micro-ROS app
  rclc_support_t support;
  rcl_allocator_t allocator;
  allocator = rcl_get_default_allocator();
 8002e92:	463b      	mov	r3, r7
 8002e94:	4618      	mov	r0, r3
 8002e96:	f00b fef3 	bl	800ec80 <rcutils_get_default_allocator>
 8002e9a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8002e9e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002ea2:	f107 04ec 	add.w	r4, r7, #236	@ 0xec
 8002ea6:	461d      	mov	r5, r3
 8002ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002eac:	682b      	ldr	r3, [r5, #0]
 8002eae:	6023      	str	r3, [r4, #0]

  // create node
  rcl_node_t node;
  rcl_node_options_t node_ops = rcl_node_get_default_options();
 8002eb0:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f00b f8fd 	bl	800e0b4 <rcl_node_get_default_options>
  rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8002eba:	f00a ffd5 	bl	800de68 <rcl_get_zero_initialized_init_options>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  rcl_init_options_init(&init_options, allocator);
 8002ec4:	f107 04c4 	add.w	r4, r7, #196	@ 0xc4
 8002ec8:	466a      	mov	r2, sp
 8002eca:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8002ece:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ed2:	e882 0003 	stmia.w	r2, {r0, r1}
 8002ed6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002eda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002edc:	4620      	mov	r0, r4
 8002ede:	f00a ffc5 	bl	800de6c <rcl_init_options_init>
  rcl_init_options_set_domain_id(&init_options, ROS_DOMAIN_ID);
 8002ee2:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8002ee6:	2106      	movs	r1, #6
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f00b f8db 	bl	800e0a4 <rcl_init_options_set_domain_id>

  rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8002eee:	f107 02c4 	add.w	r2, r7, #196	@ 0xc4
 8002ef2:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8002ef6:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	4613      	mov	r3, r2
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	f00b fda7 	bl	800ea54 <rclc_support_init_with_options>
  rclc_node_init_default(&node, "STM32_Node","", &support);
 8002f06:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002f0a:	f107 00e4 	add.w	r0, r7, #228	@ 0xe4
 8002f0e:	4a3e      	ldr	r2, [pc, #248]	@ (8003008 <microros_task+0x1dc>)
 8002f10:	493e      	ldr	r1, [pc, #248]	@ (800300c <microros_task+0x1e0>)
 8002f12:	f00b fddb 	bl	800eacc <rclc_node_init_default>

  // create publisher
  rcl_publisher_t publisher;
  std_msgs__msg__String sensor_dist_back_msg;
  rclc_publisher_init_default(&publisher, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),"/sensor/dist_back");
 8002f16:	f00d fae9 	bl	80104ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 8002f20:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 8002f24:	4b3a      	ldr	r3, [pc, #232]	@ (8003010 <microros_task+0x1e4>)
 8002f26:	f00b fe0d 	bl	800eb44 <rclc_publisher_init_default>

  // create subscriber
  rcl_subscription_t subscriber;
  std_msgs__msg__String str_msg;
  rclc_subscription_init_default(&subscriber,&node,ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),"/command/move");
 8002f2a:	f00d fadf 	bl	80104ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	f107 01e4 	add.w	r1, r7, #228	@ 0xe4
 8002f34:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8002f38:	4b36      	ldr	r3, [pc, #216]	@ (8003014 <microros_task+0x1e8>)
 8002f3a:	f00b fe37 	bl	800ebac <rclc_subscription_init_default>
  // Add subscription to the executor
  rclc_executor_t executor;
  rclc_executor_init(&executor, &support.context, 1, &allocator); // ! 'NUMBER OF HANDLES' A MODIFIER EN FONCTION DU NOMBRE DE TOPICS
 8002f3e:	f107 02ec 	add.w	r2, r7, #236	@ 0xec
 8002f42:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002f46:	1d19      	adds	r1, r3, #4
 8002f48:	f107 0020 	add.w	r0, r7, #32
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f00b fb22 	bl	800e598 <rclc_executor_init>
  rclc_executor_add_subscription(&executor, &subscriber, &str_msg, &subscription_callback, ON_NEW_DATA);
 8002f54:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8002f58:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 8002f5c:	f107 0020 	add.w	r0, r7, #32
 8002f60:	2300      	movs	r3, #0
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4b2c      	ldr	r3, [pc, #176]	@ (8003018 <microros_task+0x1ec>)
 8002f66:	f00b fb8b 	bl	800e680 <rclc_executor_add_subscription>

  str_msg.data.data = (char * ) malloc(ARRAY_LEN * sizeof(char));
 8002f6a:	2064      	movs	r0, #100	@ 0x64
 8002f6c:	f016 f936 	bl	80191dc <malloc>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  str_msg.data.size = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  str_msg.data.capacity = ARRAY_LEN;
 8002f7c:	2364      	movs	r3, #100	@ 0x64
 8002f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

  for(;;)
  {
	  sprintf(str_msg.data.data, "from STM32 : mes_vl53 : #%d", (int32_t)mes_vl53);
 8002f82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f86:	4a25      	ldr	r2, [pc, #148]	@ (800301c <microros_task+0x1f0>)
 8002f88:	8812      	ldrh	r2, [r2, #0]
 8002f8a:	4925      	ldr	r1, [pc, #148]	@ (8003020 <microros_task+0x1f4>)
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f017 facf 	bl	801a530 <siprintf>
	  str_msg.data.size = strlen(str_msg.data.data);
 8002f92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd f982 	bl	80002a0 <strlen>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      rcl_ret_t ret = rcl_publish(&publisher, &str_msg, NULL);
 8002fa2:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8002fa6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002faa:	2200      	movs	r2, #0
 8002fac:	4618      	mov	r0, r3
 8002fae:	f00b f9d9 	bl	800e364 <rcl_publish>
 8002fb2:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c

		if (ret != RCL_RET_OK)
 8002fb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d004      	beq.n	8002fc8 <microros_task+0x19c>
		{
		  printf("Error publishing (line %d)\n\r", __LINE__);
 8002fbe:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8002fc2:	4818      	ldr	r0, [pc, #96]	@ (8003024 <microros_task+0x1f8>)
 8002fc4:	f017 fa10 	bl	801a3e8 <iprintf>
		}
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 8002fc8:	f107 0120 	add.w	r1, r7, #32
 8002fcc:	4a16      	ldr	r2, [pc, #88]	@ (8003028 <microros_task+0x1fc>)
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	4608      	mov	r0, r1
 8002fd4:	f00b fd08 	bl	800e9e8 <rclc_executor_spin_some>
    osDelay(10);
 8002fd8:	200a      	movs	r0, #10
 8002fda:	f007 ffe7 	bl	800afac <osDelay>
  {
 8002fde:	e7d0      	b.n	8002f82 <microros_task+0x156>
 8002fe0:	08001e41 	.word	0x08001e41
 8002fe4:	08001dd9 	.word	0x08001dd9
 8002fe8:	08001db9 	.word	0x08001db9
 8002fec:	08001d8d 	.word	0x08001d8d
 8002ff0:	20004b2c 	.word	0x20004b2c
 8002ff4:	0800305d 	.word	0x0800305d
 8002ff8:	080030a1 	.word	0x080030a1
 8002ffc:	080030d9 	.word	0x080030d9
 8003000:	08003145 	.word	0x08003145
 8003004:	0801ddf0 	.word	0x0801ddf0
 8003008:	0801de18 	.word	0x0801de18
 800300c:	0801de1c 	.word	0x0801de1c
 8003010:	0801de28 	.word	0x0801de28
 8003014:	0801de3c 	.word	0x0801de3c
 8003018:	08002e09 	.word	0x08002e09
 800301c:	20004d4c 	.word	0x20004d4c
 8003020:	0801de4c 	.word	0x0801de4c
 8003024:	0801de68 	.word	0x0801de68
 8003028:	00989680 	.word	0x00989680

0800302c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a04      	ldr	r2, [pc, #16]	@ (800304c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d101      	bne.n	8003042 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800303e:	f001 fbc5 	bl	80047cc <HAL_IncTick>
  }
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40000800 	.word	0x40000800

08003050 <Error_Handler>:

//=========================================================================
void Error_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003054:	b672      	cpsid	i
}
 8003056:	bf00      	nop
  __disable_irq();
  while (1)
 8003058:	bf00      	nop
 800305a:	e7fd      	b.n	8003058 <Error_Handler+0x8>

0800305c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8003066:	4b0c      	ldr	r3, [pc, #48]	@ (8003098 <microros_allocate+0x3c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4413      	add	r3, r2
 8003070:	461a      	mov	r2, r3
 8003072:	4b09      	ldr	r3, [pc, #36]	@ (8003098 <microros_allocate+0x3c>)
 8003074:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003076:	4b09      	ldr	r3, [pc, #36]	@ (800309c <microros_allocate+0x40>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4413      	add	r3, r2
 8003080:	461a      	mov	r2, r3
 8003082:	4b06      	ldr	r3, [pc, #24]	@ (800309c <microros_allocate+0x40>)
 8003084:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fe fc24 	bl	80018d4 <pvPortMallocMicroROS>
 800308c:	4603      	mov	r3, r0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20004d60 	.word	0x20004d60
 800309c:	20004d64 	.word	0x20004d64

080030a0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00c      	beq.n	80030ca <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7fe fd33 	bl	8001b1c <getBlockSize>
 80030b6:	4603      	mov	r3, r0
 80030b8:	4a06      	ldr	r2, [pc, #24]	@ (80030d4 <microros_deallocate+0x34>)
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	461a      	mov	r2, r3
 80030c0:	4b04      	ldr	r3, [pc, #16]	@ (80030d4 <microros_deallocate+0x34>)
 80030c2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f7fe fccd 	bl	8001a64 <vPortFreeMicroROS>
  }
}
 80030ca:	bf00      	nop
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20004d64 	.word	0x20004d64

080030d8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80030e4:	4b15      	ldr	r3, [pc, #84]	@ (800313c <microros_reallocate+0x64>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4413      	add	r3, r2
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b12      	ldr	r3, [pc, #72]	@ (800313c <microros_reallocate+0x64>)
 80030f2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80030f4:	4b12      	ldr	r3, [pc, #72]	@ (8003140 <microros_reallocate+0x68>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4413      	add	r3, r2
 80030fe:	461a      	mov	r2, r3
 8003100:	4b0f      	ldr	r3, [pc, #60]	@ (8003140 <microros_reallocate+0x68>)
 8003102:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800310a:	68b8      	ldr	r0, [r7, #8]
 800310c:	f7fe fbe2 	bl	80018d4 <pvPortMallocMicroROS>
 8003110:	4603      	mov	r3, r0
 8003112:	e00e      	b.n	8003132 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7fe fd01 	bl	8001b1c <getBlockSize>
 800311a:	4603      	mov	r3, r0
 800311c:	4a08      	ldr	r2, [pc, #32]	@ (8003140 <microros_reallocate+0x68>)
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	461a      	mov	r2, r3
 8003124:	4b06      	ldr	r3, [pc, #24]	@ (8003140 <microros_reallocate+0x68>)
 8003126:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f7fe fd14 	bl	8001b58 <pvPortReallocMicroROS>
 8003130:	4603      	mov	r3, r0
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20004d60 	.word	0x20004d60
 8003140:	20004d64 	.word	0x20004d64

08003144 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	fb02 f303 	mul.w	r3, r2, r3
 8003158:	4a0c      	ldr	r2, [pc, #48]	@ (800318c <microros_zero_allocate+0x48>)
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	4413      	add	r3, r2
 800315e:	461a      	mov	r2, r3
 8003160:	4b0a      	ldr	r3, [pc, #40]	@ (800318c <microros_zero_allocate+0x48>)
 8003162:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	fb02 f303 	mul.w	r3, r2, r3
 800316c:	4a08      	ldr	r2, [pc, #32]	@ (8003190 <microros_zero_allocate+0x4c>)
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	4413      	add	r3, r2
 8003172:	461a      	mov	r2, r3
 8003174:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <microros_zero_allocate+0x4c>)
 8003176:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7fe fd26 	bl	8001bcc <pvPortCallocMicroROS>
 8003180:	4603      	mov	r3, r0
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20004d60 	.word	0x20004d60
 8003190:	20004d64 	.word	0x20004d64
 8003194:	00000000 	.word	0x00000000

08003198 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8003198:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800319c:	b086      	sub	sp, #24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80031aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031ae:	a320      	add	r3, pc, #128	@ (adr r3, 8003230 <UTILS_NanosecondsToTimespec+0x98>)
 80031b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b4:	f7fd fd80 	bl	8000cb8 <__aeabi_ldivmod>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80031c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031c6:	a31a      	add	r3, pc, #104	@ (adr r3, 8003230 <UTILS_NanosecondsToTimespec+0x98>)
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f7fd fd74 	bl	8000cb8 <__aeabi_ldivmod>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	da20      	bge.n	800321e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4a11      	ldr	r2, [pc, #68]	@ (8003228 <UTILS_NanosecondsToTimespec+0x90>)
 80031e2:	fb82 1203 	smull	r1, r2, r2, r3
 80031e6:	1712      	asrs	r2, r2, #28
 80031e8:	17db      	asrs	r3, r3, #31
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	3301      	adds	r3, #1
 80031ee:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	6979      	ldr	r1, [r7, #20]
 80031f8:	17c8      	asrs	r0, r1, #31
 80031fa:	460c      	mov	r4, r1
 80031fc:	4605      	mov	r5, r0
 80031fe:	ebb2 0804 	subs.w	r8, r2, r4
 8003202:	eb63 0905 	sbc.w	r9, r3, r5
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	4906      	ldr	r1, [pc, #24]	@ (800322c <UTILS_NanosecondsToTimespec+0x94>)
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	441a      	add	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	609a      	str	r2, [r3, #8]
    }
}
 800321e:	bf00      	nop
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003228:	44b82fa1 	.word	0x44b82fa1
 800322c:	3b9aca00 	.word	0x3b9aca00
 8003230:	3b9aca00 	.word	0x3b9aca00
 8003234:	00000000 	.word	0x00000000

08003238 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800323c:	b08e      	sub	sp, #56	@ 0x38
 800323e:	af00      	add	r7, sp, #0
 8003240:	6278      	str	r0, [r7, #36]	@ 0x24
 8003242:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003244:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8003248:	2300      	movs	r3, #0
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800325a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800325e:	4618      	mov	r0, r3
 8003260:	f009 fafc 	bl	800c85c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003266:	17da      	asrs	r2, r3, #31
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	61fa      	str	r2, [r7, #28]
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	69b9      	ldr	r1, [r7, #24]
 8003276:	000b      	movs	r3, r1
 8003278:	2200      	movs	r2, #0
 800327a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800327e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003280:	2200      	movs	r2, #0
 8003282:	461c      	mov	r4, r3
 8003284:	4615      	mov	r5, r2
 8003286:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800328a:	1911      	adds	r1, r2, r4
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	416b      	adcs	r3, r5
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003296:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800329a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	f04f 0400 	mov.w	r4, #0
 80032a6:	f04f 0500 	mov.w	r5, #0
 80032aa:	015d      	lsls	r5, r3, #5
 80032ac:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80032b0:	0154      	lsls	r4, r2, #5
 80032b2:	4622      	mov	r2, r4
 80032b4:	462b      	mov	r3, r5
 80032b6:	ebb2 0800 	subs.w	r8, r2, r0
 80032ba:	eb63 0901 	sbc.w	r9, r3, r1
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80032ca:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80032ce:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80032d2:	4690      	mov	r8, r2
 80032d4:	4699      	mov	r9, r3
 80032d6:	eb18 0a00 	adds.w	sl, r8, r0
 80032da:	eb49 0b01 	adc.w	fp, r9, r1
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80032ea:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032ee:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032f2:	ebb2 040a 	subs.w	r4, r2, sl
 80032f6:	603c      	str	r4, [r7, #0]
 80032f8:	eb63 030b 	sbc.w	r3, r3, fp
 80032fc:	607b      	str	r3, [r7, #4]
 80032fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003302:	4623      	mov	r3, r4
 8003304:	181b      	adds	r3, r3, r0
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	462b      	mov	r3, r5
 800330a:	eb41 0303 	adc.w	r3, r1, r3
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	6a3a      	ldr	r2, [r7, #32]
 8003312:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003316:	f7ff ff3f 	bl	8003198 <UTILS_NanosecondsToTimespec>

    return 0;
 800331a:	2300      	movs	r3, #0
 800331c:	4618      	mov	r0, r3
 800331e:	3738      	adds	r7, #56	@ 0x38
 8003320:	46bd      	mov	sp, r7
 8003322:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003328 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 8003332:	4b25      	ldr	r3, [pc, #148]	@ (80033c8 <motorCommand_Init+0xa0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a25      	ldr	r2, [pc, #148]	@ (80033cc <motorCommand_Init+0xa4>)
 8003338:	fba2 2303 	umull	r2, r3, r2, r3
 800333c:	0d9b      	lsrs	r3, r3, #22
 800333e:	3b01      	subs	r3, #1
 8003340:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 8003342:	4b23      	ldr	r3, [pc, #140]	@ (80033d0 <motorCommand_Init+0xa8>)
 8003344:	4a23      	ldr	r2, [pc, #140]	@ (80033d4 <motorCommand_Init+0xac>)
 8003346:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 8003348:	4b21      	ldr	r3, [pc, #132]	@ (80033d0 <motorCommand_Init+0xa8>)
 800334a:	22c7      	movs	r2, #199	@ 0xc7
 800334c:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 800334e:	4a20      	ldr	r2, [pc, #128]	@ (80033d0 <motorCommand_Init+0xa8>)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 8003354:	4b1e      	ldr	r3, [pc, #120]	@ (80033d0 <motorCommand_Init+0xa8>)
 8003356:	2200      	movs	r2, #0
 8003358:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800335a:	4b1d      	ldr	r3, [pc, #116]	@ (80033d0 <motorCommand_Init+0xa8>)
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 8003360:	481b      	ldr	r0, [pc, #108]	@ (80033d0 <motorCommand_Init+0xa8>)
 8003362:	f005 fb45 	bl	80089f0 <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003366:	4b1c      	ldr	r3, [pc, #112]	@ (80033d8 <motorCommand_Init+0xb0>)
 8003368:	2260      	movs	r2, #96	@ 0x60
 800336a:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 800336c:	4b1a      	ldr	r3, [pc, #104]	@ (80033d8 <motorCommand_Init+0xb0>)
 800336e:	2205      	movs	r2, #5
 8003370:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003372:	4b19      	ldr	r3, [pc, #100]	@ (80033d8 <motorCommand_Init+0xb0>)
 8003374:	2200      	movs	r2, #0
 8003376:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003378:	4b17      	ldr	r3, [pc, #92]	@ (80033d8 <motorCommand_Init+0xb0>)
 800337a:	2200      	movs	r2, #0
 800337c:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 800337e:	2200      	movs	r2, #0
 8003380:	4915      	ldr	r1, [pc, #84]	@ (80033d8 <motorCommand_Init+0xb0>)
 8003382:	4813      	ldr	r0, [pc, #76]	@ (80033d0 <motorCommand_Init+0xa8>)
 8003384:	f005 fee6 	bl	8009154 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 8003388:	2204      	movs	r2, #4
 800338a:	4913      	ldr	r1, [pc, #76]	@ (80033d8 <motorCommand_Init+0xb0>)
 800338c:	4810      	ldr	r0, [pc, #64]	@ (80033d0 <motorCommand_Init+0xa8>)
 800338e:	f005 fee1 	bl	8009154 <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 8003392:	4b0f      	ldr	r3, [pc, #60]	@ (80033d0 <motorCommand_Init+0xa8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2264      	movs	r2, #100	@ 0x64
 8003398:	635a      	str	r2, [r3, #52]	@ 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 800339a:	4b0d      	ldr	r3, [pc, #52]	@ (80033d0 <motorCommand_Init+0xa8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2264      	movs	r2, #100	@ 0x64
 80033a0:	639a      	str	r2, [r3, #56]	@ 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 80033a2:	2100      	movs	r1, #0
 80033a4:	480a      	ldr	r0, [pc, #40]	@ (80033d0 <motorCommand_Init+0xa8>)
 80033a6:	f005 fbdf 	bl	8008b68 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 80033aa:	2104      	movs	r1, #4
 80033ac:	4808      	ldr	r0, [pc, #32]	@ (80033d0 <motorCommand_Init+0xa8>)
 80033ae:	f005 fbdb 	bl	8008b68 <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80033b2:	2200      	movs	r2, #0
 80033b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033b8:	4808      	ldr	r0, [pc, #32]	@ (80033dc <motorCommand_Init+0xb4>)
 80033ba:	f002 f9d5 	bl	8005768 <HAL_GPIO_WritePin>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000008 	.word	0x20000008
 80033cc:	6b5fca6b 	.word	0x6b5fca6b
 80033d0:	20004d68 	.word	0x20004d68
 80033d4:	40000400 	.word	0x40000400
 80033d8:	20004db0 	.word	0x20004db0
 80033dc:	40020000 	.word	0x40020000

080033e0 <motorLeft_SetDuty>:

//=================================================================
//			SET DUTY CYCLE LEFT
//=================================================================
void motorLeft_SetDuty(int duty)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, duty);
 80033e8:	4b04      	ldr	r3, [pc, #16]	@ (80033fc <motorLeft_SetDuty+0x1c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	20004d68 	.word	0x20004d68

08003400 <motorRight_SetDuty>:
//=================================================================
//			SET DUTY CYCLE RIGHT
//=================================================================
void motorRight_SetDuty(int duty)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, duty);
 8003408:	4b04      	ldr	r3, [pc, #16]	@ (800341c <motorRight_SetDuty+0x1c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	20004d68 	.word	0x20004d68

08003420 <onMoveForward>:
//=================================================================


//RobotState robot_state = STOPPED;

void onMoveForward(int index,int consigne) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
	if(index==1){
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d107      	bne.n	8003440 <onMoveForward+0x20>
		motorRight_SetDuty(-(consigne+100));
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ffe1 	bl	8003400 <motorRight_SetDuty>
 800343e:	e007      	b.n	8003450 <onMoveForward+0x30>
	}
	else if(index==2){
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b02      	cmp	r3, #2
 8003444:	d104      	bne.n	8003450 <onMoveForward+0x30>
		motorLeft_SetDuty(consigne+100);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	3364      	adds	r3, #100	@ 0x64
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff ffc8 	bl	80033e0 <motorLeft_SetDuty>
	}
    robot_state = MOVING_FORWARD;
 8003450:	4b03      	ldr	r3, [pc, #12]	@ (8003460 <onMoveForward+0x40>)
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000000 	.word	0x20000000

08003464 <onMoveBackward>:

void onMoveBackward(int index,int consigne) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
	if(index==1){
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d105      	bne.n	8003480 <onMoveBackward+0x1c>
		motorRight_SetDuty(consigne+100);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	3364      	adds	r3, #100	@ 0x64
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff ffc1 	bl	8003400 <motorRight_SetDuty>
 800347e:	e009      	b.n	8003494 <onMoveBackward+0x30>
	}
	else if(index==2){
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d106      	bne.n	8003494 <onMoveBackward+0x30>
		motorLeft_SetDuty(-(consigne+100)); //centrer le rapport cyclique, ce qui place les moteurs au repos si duty = 100
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff ffa6 	bl	80033e0 <motorLeft_SetDuty>
	}
    robot_state = MOVING_BACKWARD;
 8003494:	4b03      	ldr	r3, [pc, #12]	@ (80034a4 <onMoveBackward+0x40>)
 8003496:	2201      	movs	r2, #1
 8003498:	701a      	strb	r2, [r3, #0]
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000000 	.word	0x20000000

080034a8 <stopMoving>:

void stopMoving(int index) {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	if(index==1){
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d103      	bne.n	80034be <stopMoving+0x16>
		motorRight_SetDuty(0);
 80034b6:	2000      	movs	r0, #0
 80034b8:	f7ff ffa2 	bl	8003400 <motorRight_SetDuty>
 80034bc:	e005      	b.n	80034ca <stopMoving+0x22>
	}
	else if(index==2){
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d102      	bne.n	80034ca <stopMoving+0x22>
		motorLeft_SetDuty(0);
 80034c4:	2000      	movs	r0, #0
 80034c6:	f7ff ff8b 	bl	80033e0 <motorLeft_SetDuty>
	}
    robot_state = STOPPED;
 80034ca:	4b03      	ldr	r3, [pc, #12]	@ (80034d8 <stopMoving+0x30>)
 80034cc:	2204      	movs	r2, #4
 80034ce:	701a      	strb	r2, [r3, #0]
}
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20000000 	.word	0x20000000

080034dc <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08a      	sub	sp, #40	@ 0x28
 80034e0:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 80034e2:	4b35      	ldr	r3, [pc, #212]	@ (80035b8 <quadEncoder_Init+0xdc>)
 80034e4:	4a35      	ldr	r2, [pc, #212]	@ (80035bc <quadEncoder_Init+0xe0>)
 80034e6:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 80034e8:	4b33      	ldr	r3, [pc, #204]	@ (80035b8 <quadEncoder_Init+0xdc>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ee:	4b32      	ldr	r3, [pc, #200]	@ (80035b8 <quadEncoder_Init+0xdc>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 80034f4:	4b30      	ldr	r3, [pc, #192]	@ (80035b8 <quadEncoder_Init+0xdc>)
 80034f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034fa:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034fc:	4b2e      	ldr	r3, [pc, #184]	@ (80035b8 <quadEncoder_Init+0xdc>)
 80034fe:	2200      	movs	r2, #0
 8003500:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003502:	2303      	movs	r3, #3
 8003504:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800350a:	2301      	movs	r3, #1
 800350c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 800350e:	2308      	movs	r3, #8
 8003510:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8003512:	230f      	movs	r3, #15
 8003514:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003516:	2300      	movs	r3, #0
 8003518:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 800351a:	2301      	movs	r3, #1
 800351c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 800351e:	2308      	movs	r3, #8
 8003520:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8003522:	230f      	movs	r3, #15
 8003524:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 8003526:	1d3b      	adds	r3, r7, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4823      	ldr	r0, [pc, #140]	@ (80035b8 <quadEncoder_Init+0xdc>)
 800352c:	f005 fbcc 	bl	8008cc8 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 8003530:	4b21      	ldr	r3, [pc, #132]	@ (80035b8 <quadEncoder_Init+0xdc>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2200      	movs	r2, #0
 8003536:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8003538:	2100      	movs	r1, #0
 800353a:	481f      	ldr	r0, [pc, #124]	@ (80035b8 <quadEncoder_Init+0xdc>)
 800353c:	f005 fc74 	bl	8008e28 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8003540:	2104      	movs	r1, #4
 8003542:	481d      	ldr	r0, [pc, #116]	@ (80035b8 <quadEncoder_Init+0xdc>)
 8003544:	f005 fc70 	bl	8008e28 <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 8003548:	4b1d      	ldr	r3, [pc, #116]	@ (80035c0 <quadEncoder_Init+0xe4>)
 800354a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800354e:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 8003550:	4b1b      	ldr	r3, [pc, #108]	@ (80035c0 <quadEncoder_Init+0xe4>)
 8003552:	2200      	movs	r2, #0
 8003554:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003556:	4b1a      	ldr	r3, [pc, #104]	@ (80035c0 <quadEncoder_Init+0xe4>)
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 800355c:	4b18      	ldr	r3, [pc, #96]	@ (80035c0 <quadEncoder_Init+0xe4>)
 800355e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003562:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003564:	4b16      	ldr	r3, [pc, #88]	@ (80035c0 <quadEncoder_Init+0xe4>)
 8003566:	2200      	movs	r2, #0
 8003568:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800356a:	2303      	movs	r3, #3
 800356c:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800356e:	2300      	movs	r3, #0
 8003570:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003572:	2301      	movs	r3, #1
 8003574:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8003576:	2308      	movs	r3, #8
 8003578:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 800357a:	230f      	movs	r3, #15
 800357c:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800357e:	2300      	movs	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8003582:	2301      	movs	r3, #1
 8003584:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8003586:	2308      	movs	r3, #8
 8003588:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 800358a:	230f      	movs	r3, #15
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 800358e:	1d3b      	adds	r3, r7, #4
 8003590:	4619      	mov	r1, r3
 8003592:	480b      	ldr	r0, [pc, #44]	@ (80035c0 <quadEncoder_Init+0xe4>)
 8003594:	f005 fb98 	bl	8008cc8 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 8003598:	4b09      	ldr	r3, [pc, #36]	@ (80035c0 <quadEncoder_Init+0xe4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2200      	movs	r2, #0
 800359e:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 80035a0:	2100      	movs	r1, #0
 80035a2:	4807      	ldr	r0, [pc, #28]	@ (80035c0 <quadEncoder_Init+0xe4>)
 80035a4:	f005 fc40 	bl	8008e28 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 80035a8:	2104      	movs	r1, #4
 80035aa:	4805      	ldr	r0, [pc, #20]	@ (80035c0 <quadEncoder_Init+0xe4>)
 80035ac:	f005 fc3c 	bl	8008e28 <HAL_TIM_Encoder_Start>
}
 80035b0:	bf00      	nop
 80035b2:	3728      	adds	r7, #40	@ 0x28
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	20004dcc 	.word	0x20004dcc
 80035bc:	40010000 	.word	0x40010000
 80035c0:	20004e14 	.word	0x20004e14

080035c4 <quadEncoder_PosCalcL>:
//================================================================
//		POSITION LEFT CALC
//================================================================

void quadEncoder_PosCalcL(int* AngPos)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM1->CNT;
 80035d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <quadEncoder_PosCalcL+0x40>)
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3304      	adds	r3, #4
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6812      	ldr	r2, [r2, #0]
 80035de:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f641 129b 	movw	r2, #6555	@ 0x199b
 80035e6:	fb02 f303 	mul.w	r3, r2, r3
 80035ea:	4a07      	ldr	r2, [pc, #28]	@ (8003608 <quadEncoder_PosCalcL+0x44>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	099b      	lsrs	r3, r3, #6
 80035f2:	461a      	mov	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	601a      	str	r2, [r3, #0]
}
 80035f8:	bf00      	nop
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	40010000 	.word	0x40010000
 8003608:	10624dd3 	.word	0x10624dd3

0800360c <quadEncoder_PosCalcR>:
//================================================================
//		POSITION RIGHT CALC
//================================================================

void quadEncoder_PosCalcR(int* AngPos)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM2->CNT;
 8003618:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800361c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361e:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f641 129b 	movw	r2, #6555	@ 0x199b
 8003630:	fb02 f303 	mul.w	r3, r2, r3
 8003634:	4a06      	ldr	r2, [pc, #24]	@ (8003650 <quadEncoder_PosCalcR+0x44>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	099b      	lsrs	r3, r3, #6
 800363c:	461a      	mov	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	601a      	str	r2, [r3, #0]
}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	10624dd3 	.word	0x10624dd3

08003654 <quadEncoder_GetSpeedL>:
//		SPEED LEFT
//--> must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedL(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedL=0;

	quadEncoder_PosCalcL(AngPos);
 8003658:	4824      	ldr	r0, [pc, #144]	@ (80036ec <quadEncoder_GetSpeedL+0x98>)
 800365a:	f7ff ffb3 	bl	80035c4 <quadEncoder_PosCalcL>
	SpeedL = AngPos[0] - AngPos[1];
 800365e:	4b23      	ldr	r3, [pc, #140]	@ (80036ec <quadEncoder_GetSpeedL+0x98>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	b29a      	uxth	r2, r3
 8003664:	4b21      	ldr	r3, [pc, #132]	@ (80036ec <quadEncoder_GetSpeedL+0x98>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	b29b      	uxth	r3, r3
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	b29b      	uxth	r3, r3
 800366e:	b21a      	sxth	r2, r3
 8003670:	4b1f      	ldr	r3, [pc, #124]	@ (80036f0 <quadEncoder_GetSpeedL+0x9c>)
 8003672:	801a      	strh	r2, [r3, #0]
	if (SpeedL >= 0)
 8003674:	4b1e      	ldr	r3, [pc, #120]	@ (80036f0 <quadEncoder_GetSpeedL+0x9c>)
 8003676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800367a:	2b00      	cmp	r3, #0
 800367c:	db10      	blt.n	80036a0 <quadEncoder_GetSpeedL+0x4c>
	{
		if (SpeedL >= HALF_MAX_COUNT)
 800367e:	4b1c      	ldr	r3, [pc, #112]	@ (80036f0 <quadEncoder_GetSpeedL+0x9c>)
 8003680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003684:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003688:	db1a      	blt.n	80036c0 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL - MAX_COUNT;
 800368a:	4b19      	ldr	r3, [pc, #100]	@ (80036f0 <quadEncoder_GetSpeedL+0x9c>)
 800368c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003690:	b29b      	uxth	r3, r3
 8003692:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8003696:	b29b      	uxth	r3, r3
 8003698:	b21a      	sxth	r2, r3
 800369a:	4b15      	ldr	r3, [pc, #84]	@ (80036f0 <quadEncoder_GetSpeedL+0x9c>)
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	e00f      	b.n	80036c0 <quadEncoder_GetSpeedL+0x6c>
			}
	}
	else
	{
		if (SpeedL < -HALF_MAX_COUNT)
 80036a0:	4b13      	ldr	r3, [pc, #76]	@ (80036f0 <quadEncoder_GetSpeedL+0x9c>)
 80036a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036a6:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 80036aa:	da09      	bge.n	80036c0 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL + MAX_COUNT;
 80036ac:	4b10      	ldr	r3, [pc, #64]	@ (80036f0 <quadEncoder_GetSpeedL+0x9c>)
 80036ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	b21a      	sxth	r2, r3
 80036bc:	4b0c      	ldr	r3, [pc, #48]	@ (80036f0 <quadEncoder_GetSpeedL+0x9c>)
 80036be:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedL=(SpeedL*60*1000)/(32767*TE_ms);
 80036c0:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <quadEncoder_GetSpeedL+0x9c>)
 80036c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036c6:	461a      	mov	r2, r3
 80036c8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80036cc:	fb02 f303 	mul.w	r3, r2, r3
 80036d0:	4a08      	ldr	r2, [pc, #32]	@ (80036f4 <quadEncoder_GetSpeedL+0xa0>)
 80036d2:	fb82 1203 	smull	r1, r2, r2, r3
 80036d6:	1412      	asrs	r2, r2, #16
 80036d8:	17db      	asrs	r3, r3, #31
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	b21a      	sxth	r2, r3
 80036de:	4b04      	ldr	r3, [pc, #16]	@ (80036f0 <quadEncoder_GetSpeedL+0x9c>)
 80036e0:	801a      	strh	r2, [r3, #0]
	return SpeedL;
 80036e2:	4b03      	ldr	r3, [pc, #12]	@ (80036f0 <quadEncoder_GetSpeedL+0x9c>)
 80036e4:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20004e64 	.word	0x20004e64
 80036f0:	20004e6c 	.word	0x20004e6c
 80036f4:	66673335 	.word	0x66673335

080036f8 <quadEncoder_GetSpeedR>:
//		SPEED RIGHT
//-->  must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedR(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedR=0;


	quadEncoder_PosCalcR(AngPos);
 80036fc:	4824      	ldr	r0, [pc, #144]	@ (8003790 <quadEncoder_GetSpeedR+0x98>)
 80036fe:	f7ff ff85 	bl	800360c <quadEncoder_PosCalcR>
	SpeedR = AngPos[0] - AngPos[1];
 8003702:	4b23      	ldr	r3, [pc, #140]	@ (8003790 <quadEncoder_GetSpeedR+0x98>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	b29a      	uxth	r2, r3
 8003708:	4b21      	ldr	r3, [pc, #132]	@ (8003790 <quadEncoder_GetSpeedR+0x98>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	b29b      	uxth	r3, r3
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	b29b      	uxth	r3, r3
 8003712:	b21a      	sxth	r2, r3
 8003714:	4b1f      	ldr	r3, [pc, #124]	@ (8003794 <quadEncoder_GetSpeedR+0x9c>)
 8003716:	801a      	strh	r2, [r3, #0]
	if (SpeedR >= 0)
 8003718:	4b1e      	ldr	r3, [pc, #120]	@ (8003794 <quadEncoder_GetSpeedR+0x9c>)
 800371a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800371e:	2b00      	cmp	r3, #0
 8003720:	db10      	blt.n	8003744 <quadEncoder_GetSpeedR+0x4c>
	{
		if (SpeedR >= HALF_MAX_COUNT)
 8003722:	4b1c      	ldr	r3, [pc, #112]	@ (8003794 <quadEncoder_GetSpeedR+0x9c>)
 8003724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003728:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800372c:	db1a      	blt.n	8003764 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR - MAX_COUNT;
 800372e:	4b19      	ldr	r3, [pc, #100]	@ (8003794 <quadEncoder_GetSpeedR+0x9c>)
 8003730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003734:	b29b      	uxth	r3, r3
 8003736:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800373a:	b29b      	uxth	r3, r3
 800373c:	b21a      	sxth	r2, r3
 800373e:	4b15      	ldr	r3, [pc, #84]	@ (8003794 <quadEncoder_GetSpeedR+0x9c>)
 8003740:	801a      	strh	r2, [r3, #0]
 8003742:	e00f      	b.n	8003764 <quadEncoder_GetSpeedR+0x6c>
			}
	}
	else
	{
		if (SpeedR < -HALF_MAX_COUNT)
 8003744:	4b13      	ldr	r3, [pc, #76]	@ (8003794 <quadEncoder_GetSpeedR+0x9c>)
 8003746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800374a:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 800374e:	da09      	bge.n	8003764 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR + MAX_COUNT;
 8003750:	4b10      	ldr	r3, [pc, #64]	@ (8003794 <quadEncoder_GetSpeedR+0x9c>)
 8003752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003756:	b29b      	uxth	r3, r3
 8003758:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800375c:	b29b      	uxth	r3, r3
 800375e:	b21a      	sxth	r2, r3
 8003760:	4b0c      	ldr	r3, [pc, #48]	@ (8003794 <quadEncoder_GetSpeedR+0x9c>)
 8003762:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedR=(SpeedR*60*1000)/(32767*TE_ms);
 8003764:	4b0b      	ldr	r3, [pc, #44]	@ (8003794 <quadEncoder_GetSpeedR+0x9c>)
 8003766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800376a:	461a      	mov	r2, r3
 800376c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003770:	fb02 f303 	mul.w	r3, r2, r3
 8003774:	4a08      	ldr	r2, [pc, #32]	@ (8003798 <quadEncoder_GetSpeedR+0xa0>)
 8003776:	fb82 1203 	smull	r1, r2, r2, r3
 800377a:	1412      	asrs	r2, r2, #16
 800377c:	17db      	asrs	r3, r3, #31
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	b21a      	sxth	r2, r3
 8003782:	4b04      	ldr	r3, [pc, #16]	@ (8003794 <quadEncoder_GetSpeedR+0x9c>)
 8003784:	801a      	strh	r2, [r3, #0]
	return SpeedR;
 8003786:	4b03      	ldr	r3, [pc, #12]	@ (8003794 <quadEncoder_GetSpeedR+0x9c>)
 8003788:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20004e70 	.word	0x20004e70
 8003794:	20004e78 	.word	0x20004e78
 8003798:	66673335 	.word	0x66673335

0800379c <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 80037a0:	4b11      	ldr	r3, [pc, #68]	@ (80037e8 <quadEncoder_CallbackIndexL+0x4c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b10      	cmp	r3, #16
 80037ac:	d105      	bne.n	80037ba <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 80037ae:	4b0f      	ldr	r3, [pc, #60]	@ (80037ec <quadEncoder_CallbackIndexL+0x50>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	4a0d      	ldr	r2, [pc, #52]	@ (80037ec <quadEncoder_CallbackIndexL+0x50>)
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	e004      	b.n	80037c4 <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 80037ba:	4b0c      	ldr	r3, [pc, #48]	@ (80037ec <quadEncoder_CallbackIndexL+0x50>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3301      	adds	r3, #1
 80037c0:	4a0a      	ldr	r2, [pc, #40]	@ (80037ec <quadEncoder_CallbackIndexL+0x50>)
 80037c2:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 80037c4:	4b08      	ldr	r3, [pc, #32]	@ (80037e8 <quadEncoder_CallbackIndexL+0x4c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2200      	movs	r2, #0
 80037ca:	625a      	str	r2, [r3, #36]	@ 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 80037cc:	2100      	movs	r1, #0
 80037ce:	4806      	ldr	r0, [pc, #24]	@ (80037e8 <quadEncoder_CallbackIndexL+0x4c>)
 80037d0:	f005 fb2a 	bl	8008e28 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 80037d4:	2104      	movs	r1, #4
 80037d6:	4804      	ldr	r0, [pc, #16]	@ (80037e8 <quadEncoder_CallbackIndexL+0x4c>)
 80037d8:	f005 fb26 	bl	8008e28 <HAL_TIM_Encoder_Start>

				Left_first_index_reached = 1;
 80037dc:	4b04      	ldr	r3, [pc, #16]	@ (80037f0 <quadEncoder_CallbackIndexL+0x54>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]

}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20004dcc 	.word	0x20004dcc
 80037ec:	20004e5c 	.word	0x20004e5c
 80037f0:	20004d50 	.word	0x20004d50

080037f4 <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 80037f8:	4b11      	ldr	r3, [pc, #68]	@ (8003840 <quadEncoder_CallbackIndexR+0x4c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b10      	cmp	r3, #16
 8003804:	d105      	bne.n	8003812 <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 8003806:	4b0f      	ldr	r3, [pc, #60]	@ (8003844 <quadEncoder_CallbackIndexR+0x50>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3b01      	subs	r3, #1
 800380c:	4a0d      	ldr	r2, [pc, #52]	@ (8003844 <quadEncoder_CallbackIndexR+0x50>)
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	e004      	b.n	800381c <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 8003812:	4b0c      	ldr	r3, [pc, #48]	@ (8003844 <quadEncoder_CallbackIndexR+0x50>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3301      	adds	r3, #1
 8003818:	4a0a      	ldr	r2, [pc, #40]	@ (8003844 <quadEncoder_CallbackIndexR+0x50>)
 800381a:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 800381c:	4b08      	ldr	r3, [pc, #32]	@ (8003840 <quadEncoder_CallbackIndexR+0x4c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2200      	movs	r2, #0
 8003822:	625a      	str	r2, [r3, #36]	@ 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8003824:	2100      	movs	r1, #0
 8003826:	4806      	ldr	r0, [pc, #24]	@ (8003840 <quadEncoder_CallbackIndexR+0x4c>)
 8003828:	f005 fafe 	bl	8008e28 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 800382c:	2104      	movs	r1, #4
 800382e:	4804      	ldr	r0, [pc, #16]	@ (8003840 <quadEncoder_CallbackIndexR+0x4c>)
 8003830:	f005 fafa 	bl	8008e28 <HAL_TIM_Encoder_Start>

				Right_first_index_reached = 1;
 8003834:	4b04      	ldr	r3, [pc, #16]	@ (8003848 <quadEncoder_CallbackIndexR+0x54>)
 8003836:	2201      	movs	r2, #1
 8003838:	601a      	str	r2, [r3, #0]

}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20004e14 	.word	0x20004e14
 8003844:	20004e60 	.word	0x20004e60
 8003848:	20004d54 	.word	0x20004d54

0800384c <HAL_MspInit>:
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);
void HAL_GPIO_MspInit(void);

void HAL_MspInit(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	4b33      	ldr	r3, [pc, #204]	@ (8003924 <HAL_MspInit+0xd8>)
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	4a32      	ldr	r2, [pc, #200]	@ (8003924 <HAL_MspInit+0xd8>)
 800385c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003860:	6453      	str	r3, [r2, #68]	@ 0x44
 8003862:	4b30      	ldr	r3, [pc, #192]	@ (8003924 <HAL_MspInit+0xd8>)
 8003864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	4b2c      	ldr	r3, [pc, #176]	@ (8003924 <HAL_MspInit+0xd8>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003876:	4a2b      	ldr	r2, [pc, #172]	@ (8003924 <HAL_MspInit+0xd8>)
 8003878:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800387c:	6413      	str	r3, [r2, #64]	@ 0x40
 800387e:	4b29      	ldr	r3, [pc, #164]	@ (8003924 <HAL_MspInit+0xd8>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	4b25      	ldr	r3, [pc, #148]	@ (8003924 <HAL_MspInit+0xd8>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003892:	4a24      	ldr	r2, [pc, #144]	@ (8003924 <HAL_MspInit+0xd8>)
 8003894:	f043 0304 	orr.w	r3, r3, #4
 8003898:	6313      	str	r3, [r2, #48]	@ 0x30
 800389a:	4b22      	ldr	r3, [pc, #136]	@ (8003924 <HAL_MspInit+0xd8>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003924 <HAL_MspInit+0xd8>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003924 <HAL_MspInit+0xd8>)
 80038b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003924 <HAL_MspInit+0xd8>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	4b17      	ldr	r3, [pc, #92]	@ (8003924 <HAL_MspInit+0xd8>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ca:	4a16      	ldr	r2, [pc, #88]	@ (8003924 <HAL_MspInit+0xd8>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80038d2:	4b14      	ldr	r3, [pc, #80]	@ (8003924 <HAL_MspInit+0xd8>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	4b10      	ldr	r3, [pc, #64]	@ (8003924 <HAL_MspInit+0xd8>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e6:	4a0f      	ldr	r2, [pc, #60]	@ (8003924 <HAL_MspInit+0xd8>)
 80038e8:	f043 0302 	orr.w	r3, r3, #2
 80038ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <HAL_MspInit+0xd8>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	603b      	str	r3, [r7, #0]
 80038f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80038fa:	2200      	movs	r2, #0
 80038fc:	210f      	movs	r1, #15
 80038fe:	f06f 0001 	mvn.w	r0, #1
 8003902:	f001 f973 	bl	8004bec <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 8003906:	f000 f8a3 	bl	8003a50 <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 800390a:	f000 f823 	bl	8003954 <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 800390e:	f000 f861 	bl	80039d4 <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 8003912:	f000 f8ff 	bl	8003b14 <HAL_adcir_MspInit>
  HAL_GPIO_MspInit();
 8003916:	f000 f807 	bl	8003928 <HAL_GPIO_MspInit>

}
 800391a:	bf00      	nop
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800

08003928 <HAL_GPIO_MspInit>:
/******************************************************************
			GPIO : contrôle période d'échantillonage
GPIO OUTPUT	-->	PB4
******************************************************************/
void HAL_GPIO_MspInit(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800392e:	2310      	movs	r3, #16
 8003930:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // hal_gpio.h
 8003932:	2301      	movs	r3, #1
 8003934:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 800393a:	2301      	movs	r3, #1
 800393c:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800393e:	1d3b      	adds	r3, r7, #4
 8003940:	4619      	mov	r1, r3
 8003942:	4803      	ldr	r0, [pc, #12]	@ (8003950 <HAL_GPIO_MspInit+0x28>)
 8003944:	f001 fd8c 	bl	8005460 <HAL_GPIO_Init>

}
 8003948:	bf00      	nop
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40020400 	.word	0x40020400

08003954 <HAL_Encoder_Timer1_MspInit>:
PWM1/1	-->	PA8		-- Encodeur Voie A
PWM1/2	--> PA9		-- Encodeur Voie B
EXTI1	--> PB10		-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	603b      	str	r3, [r7, #0]
 800395e:	4b1a      	ldr	r3, [pc, #104]	@ (80039c8 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	4a19      	ldr	r2, [pc, #100]	@ (80039c8 <HAL_Encoder_Timer1_MspInit+0x74>)
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	6453      	str	r3, [r2, #68]	@ 0x44
 800396a:	4b17      	ldr	r3, [pc, #92]	@ (80039c8 <HAL_Encoder_Timer1_MspInit+0x74>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003976:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800397a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 800397c:	2302      	movs	r3, #2
 800397e:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003980:	2301      	movs	r3, #1
 8003982:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003984:	2301      	movs	r3, #1
 8003986:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 8003988:	2301      	movs	r3, #1
 800398a:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800398c:	1d3b      	adds	r3, r7, #4
 800398e:	4619      	mov	r1, r3
 8003990:	480e      	ldr	r0, [pc, #56]	@ (80039cc <HAL_Encoder_Timer1_MspInit+0x78>)
 8003992:	f001 fd65 	bl	8005460 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003996:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800399a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800399c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80039a0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039a6:	1d3b      	adds	r3, r7, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	4809      	ldr	r0, [pc, #36]	@ (80039d0 <HAL_Encoder_Timer1_MspInit+0x7c>)
 80039ac:	f001 fd58 	bl	8005460 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 80039b0:	2200      	movs	r2, #0
 80039b2:	2107      	movs	r1, #7
 80039b4:	2028      	movs	r0, #40	@ 0x28
 80039b6:	f001 f919 	bl	8004bec <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80039ba:	2028      	movs	r0, #40	@ 0x28
 80039bc:	f001 f932 	bl	8004c24 <HAL_NVIC_EnableIRQ>
}
 80039c0:	bf00      	nop
 80039c2:	3718      	adds	r7, #24
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40020000 	.word	0x40020000
 80039d0:	40020400 	.word	0x40020400

080039d4 <HAL_Encoder_Timer2_MspInit>:
PWM2/1	-->	PA0		-- Encodeur Voie A
PWM2/2	--> PA1		-- Encodeur Voie B
EXTI 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE();
 80039da:	2300      	movs	r3, #0
 80039dc:	603b      	str	r3, [r7, #0]
 80039de:	4b19      	ldr	r3, [pc, #100]	@ (8003a44 <HAL_Encoder_Timer2_MspInit+0x70>)
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	4a18      	ldr	r2, [pc, #96]	@ (8003a44 <HAL_Encoder_Timer2_MspInit+0x70>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ea:	4b16      	ldr	r3, [pc, #88]	@ (8003a44 <HAL_Encoder_Timer2_MspInit+0x70>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80039f6:	2303      	movs	r3, #3
 80039f8:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 80039fa:	2302      	movs	r3, #2
 80039fc:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039fe:	2301      	movs	r3, #1
 8003a00:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003a02:	2301      	movs	r3, #1
 8003a04:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 8003a06:	2301      	movs	r3, #1
 8003a08:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0a:	1d3b      	adds	r3, r7, #4
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	480e      	ldr	r0, [pc, #56]	@ (8003a48 <HAL_Encoder_Timer2_MspInit+0x74>)
 8003a10:	f001 fd26 	bl	8005460 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a14:	2301      	movs	r3, #1
 8003a16:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a18:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003a1c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a22:	1d3b      	adds	r3, r7, #4
 8003a24:	4619      	mov	r1, r3
 8003a26:	4809      	ldr	r0, [pc, #36]	@ (8003a4c <HAL_Encoder_Timer2_MspInit+0x78>)
 8003a28:	f001 fd1a 	bl	8005460 <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2106      	movs	r1, #6
 8003a30:	2006      	movs	r0, #6
 8003a32:	f001 f8db 	bl	8004bec <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003a36:	2006      	movs	r0, #6
 8003a38:	f001 f8f4 	bl	8004c24 <HAL_NVIC_EnableIRQ>
}
 8003a3c:	bf00      	nop
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40020000 	.word	0x40020000
 8003a4c:	40020800 	.word	0x40020800

08003a50 <HAL_PWM_Timer3_MspInit>:
PA6 --> PWM3/1
PC7 --> PWM3/2
PB3 --> ENABLE MOTEUR (actif état Bas)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003b04 <HAL_PWM_Timer3_MspInit+0xb4>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5e:	4a29      	ldr	r2, [pc, #164]	@ (8003b04 <HAL_PWM_Timer3_MspInit+0xb4>)
 8003a60:	f043 0302 	orr.w	r3, r3, #2
 8003a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a66:	4b27      	ldr	r3, [pc, #156]	@ (8003b04 <HAL_PWM_Timer3_MspInit+0xb4>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003a72:	2340      	movs	r3, #64	@ 0x40
 8003a74:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a76:	2302      	movs	r3, #2
 8003a78:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 8003a82:	2302      	movs	r3, #2
 8003a84:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	4619      	mov	r1, r3
 8003a8a:	481f      	ldr	r0, [pc, #124]	@ (8003b08 <HAL_PWM_Timer3_MspInit+0xb8>)
 8003a8c:	f001 fce8 	bl	8005460 <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a90:	2380      	movs	r3, #128	@ 0x80
 8003a92:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a94:	2302      	movs	r3, #2
 8003a96:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aa4:	1d3b      	adds	r3, r7, #4
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4818      	ldr	r0, [pc, #96]	@ (8003b0c <HAL_PWM_Timer3_MspInit+0xbc>)
 8003aaa:	f001 fcd9 	bl	8005460 <HAL_GPIO_Init>
	  GPIO_InitStruct.Pull = GPIO_NOPULL;

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);*/

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003aae:	2308      	movs	r3, #8
 8003ab0:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003aba:	2302      	movs	r3, #2
 8003abc:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003abe:	1d3b      	adds	r3, r7, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4813      	ldr	r0, [pc, #76]	@ (8003b10 <HAL_PWM_Timer3_MspInit+0xc0>)
 8003ac4:	f001 fccc 	bl	8005460 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8003ac8:	2201      	movs	r2, #1
 8003aca:	2108      	movs	r1, #8
 8003acc:	4810      	ldr	r0, [pc, #64]	@ (8003b10 <HAL_PWM_Timer3_MspInit+0xc0>)
 8003ace:	f001 fe4b 	bl	8005768 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003ad2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ad6:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae4:	1d3b      	adds	r3, r7, #4
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4807      	ldr	r0, [pc, #28]	@ (8003b08 <HAL_PWM_Timer3_MspInit+0xb8>)
 8003aea:	f001 fcb9 	bl	8005460 <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8003aee:	2201      	movs	r2, #1
 8003af0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003af4:	4804      	ldr	r0, [pc, #16]	@ (8003b08 <HAL_PWM_Timer3_MspInit+0xb8>)
 8003af6:	f001 fe37 	bl	8005768 <HAL_GPIO_WritePin>




}
 8003afa:	bf00      	nop
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40020000 	.word	0x40020000
 8003b0c:	40020800 	.word	0x40020800
 8003b10:	40020400 	.word	0x40020400

08003b14 <HAL_adcir_MspInit>:
ADC1_4	--> PA4
ADC1_8	--> PB0
http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	4b13      	ldr	r3, [pc, #76]	@ (8003b6c <HAL_adcir_MspInit+0x58>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b22:	4a12      	ldr	r2, [pc, #72]	@ (8003b6c <HAL_adcir_MspInit+0x58>)
 8003b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b2a:	4b10      	ldr	r3, [pc, #64]	@ (8003b6c <HAL_adcir_MspInit+0x58>)
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 8003b36:	2310      	movs	r3, #16
 8003b38:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b42:	1d3b      	adds	r3, r7, #4
 8003b44:	4619      	mov	r1, r3
 8003b46:	480a      	ldr	r0, [pc, #40]	@ (8003b70 <HAL_adcir_MspInit+0x5c>)
 8003b48:	f001 fc8a 	bl	8005460 <HAL_GPIO_Init>


	  GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b50:	2303      	movs	r3, #3
 8003b52:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b58:	1d3b      	adds	r3, r7, #4
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4805      	ldr	r0, [pc, #20]	@ (8003b74 <HAL_adcir_MspInit+0x60>)
 8003b5e:	f001 fc7f 	bl	8005460 <HAL_GPIO_Init>

}
 8003b62:	bf00      	nop
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	40020000 	.word	0x40020000
 8003b74:	40020400 	.word	0x40020400

08003b78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
******************************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	@ 0x28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b80:	f107 0314 	add.w	r3, r7, #20
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]
 8003b88:	605a      	str	r2, [r3, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
 8003b8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a21      	ldr	r2, [pc, #132]	@ (8003c1c <HAL_I2C_MspInit+0xa4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d13c      	bne.n	8003c14 <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	4b20      	ldr	r3, [pc, #128]	@ (8003c20 <HAL_I2C_MspInit+0xa8>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8003c20 <HAL_I2C_MspInit+0xa8>)
 8003ba4:	f043 0302 	orr.w	r3, r3, #2
 8003ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003baa:	4b1d      	ldr	r3, [pc, #116]	@ (8003c20 <HAL_I2C_MspInit+0xa8>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003bb6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bbc:	2312      	movs	r3, #18
 8003bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003bc8:	2304      	movs	r3, #4
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bcc:	f107 0314 	add.w	r3, r7, #20
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4814      	ldr	r0, [pc, #80]	@ (8003c24 <HAL_I2C_MspInit+0xac>)
 8003bd4:	f001 fc44 	bl	8005460 <HAL_GPIO_Init>

    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	4b10      	ldr	r3, [pc, #64]	@ (8003c20 <HAL_I2C_MspInit+0xa8>)
 8003bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be0:	4a0f      	ldr	r2, [pc, #60]	@ (8003c20 <HAL_I2C_MspInit+0xa8>)
 8003be2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003be6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003be8:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <HAL_I2C_MspInit+0xa8>)
 8003bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bf0:	60fb      	str	r3, [r7, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	2020      	movs	r0, #32
 8003bfa:	f000 fff7 	bl	8004bec <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003bfe:	2020      	movs	r0, #32
 8003c00:	f001 f810 	bl	8004c24 <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 8003c04:	2200      	movs	r2, #0
 8003c06:	210b      	movs	r1, #11
 8003c08:	201f      	movs	r0, #31
 8003c0a:	f000 ffef 	bl	8004bec <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003c0e:	201f      	movs	r0, #31
 8003c10:	f001 f808 	bl	8004c24 <HAL_NVIC_EnableIRQ>
  }

}
 8003c14:	bf00      	nop
 8003c16:	3728      	adds	r7, #40	@ 0x28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40005400 	.word	0x40005400
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40020400 	.word	0x40020400

08003c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
******************************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08c      	sub	sp, #48	@ 0x30
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c30:	f107 031c 	add.w	r3, r7, #28
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	605a      	str	r2, [r3, #4]
 8003c3a:	609a      	str	r2, [r3, #8]
 8003c3c:	60da      	str	r2, [r3, #12]
 8003c3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4aa2      	ldr	r2, [pc, #648]	@ (8003ed0 <HAL_UART_MspInit+0x2a8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	f040 80a5 	bne.w	8003d96 <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61bb      	str	r3, [r7, #24]
 8003c50:	4ba0      	ldr	r3, [pc, #640]	@ (8003ed4 <HAL_UART_MspInit+0x2ac>)
 8003c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c54:	4a9f      	ldr	r2, [pc, #636]	@ (8003ed4 <HAL_UART_MspInit+0x2ac>)
 8003c56:	f043 0310 	orr.w	r3, r3, #16
 8003c5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c5c:	4b9d      	ldr	r3, [pc, #628]	@ (8003ed4 <HAL_UART_MspInit+0x2ac>)
 8003c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c60:	f003 0310 	and.w	r3, r3, #16
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	4b99      	ldr	r3, [pc, #612]	@ (8003ed4 <HAL_UART_MspInit+0x2ac>)
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c70:	4a98      	ldr	r2, [pc, #608]	@ (8003ed4 <HAL_UART_MspInit+0x2ac>)
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c78:	4b96      	ldr	r3, [pc, #600]	@ (8003ed4 <HAL_UART_MspInit+0x2ac>)
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c92:	2303      	movs	r3, #3
 8003c94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c96:	2307      	movs	r3, #7
 8003c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9a:	f107 031c 	add.w	r3, r7, #28
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	488d      	ldr	r0, [pc, #564]	@ (8003ed8 <HAL_UART_MspInit+0x2b0>)
 8003ca2:	f001 fbdd 	bl	8005460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ca6:	2340      	movs	r3, #64	@ 0x40
 8003ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003caa:	2302      	movs	r3, #2
 8003cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cb6:	2307      	movs	r3, #7
 8003cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cba:	f107 031c 	add.w	r3, r7, #28
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4886      	ldr	r0, [pc, #536]	@ (8003edc <HAL_UART_MspInit+0x2b4>)
 8003cc2:	f001 fbcd 	bl	8005460 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003cc6:	4b86      	ldr	r3, [pc, #536]	@ (8003ee0 <HAL_UART_MspInit+0x2b8>)
 8003cc8:	4a86      	ldr	r2, [pc, #536]	@ (8003ee4 <HAL_UART_MspInit+0x2bc>)
 8003cca:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003ccc:	4b84      	ldr	r3, [pc, #528]	@ (8003ee0 <HAL_UART_MspInit+0x2b8>)
 8003cce:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003cd2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cd4:	4b82      	ldr	r3, [pc, #520]	@ (8003ee0 <HAL_UART_MspInit+0x2b8>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cda:	4b81      	ldr	r3, [pc, #516]	@ (8003ee0 <HAL_UART_MspInit+0x2b8>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ce0:	4b7f      	ldr	r3, [pc, #508]	@ (8003ee0 <HAL_UART_MspInit+0x2b8>)
 8003ce2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ce6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ce8:	4b7d      	ldr	r3, [pc, #500]	@ (8003ee0 <HAL_UART_MspInit+0x2b8>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cee:	4b7c      	ldr	r3, [pc, #496]	@ (8003ee0 <HAL_UART_MspInit+0x2b8>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003cf4:	4b7a      	ldr	r3, [pc, #488]	@ (8003ee0 <HAL_UART_MspInit+0x2b8>)
 8003cf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cfa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003cfc:	4b78      	ldr	r3, [pc, #480]	@ (8003ee0 <HAL_UART_MspInit+0x2b8>)
 8003cfe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003d02:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d04:	4b76      	ldr	r3, [pc, #472]	@ (8003ee0 <HAL_UART_MspInit+0x2b8>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003d0a:	4875      	ldr	r0, [pc, #468]	@ (8003ee0 <HAL_UART_MspInit+0x2b8>)
 8003d0c:	f000 ff98 	bl	8004c40 <HAL_DMA_Init>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 8003d16:	f7ff f99b 	bl	8003050 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a70      	ldr	r2, [pc, #448]	@ (8003ee0 <HAL_UART_MspInit+0x2b8>)
 8003d1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d20:	4a6f      	ldr	r2, [pc, #444]	@ (8003ee0 <HAL_UART_MspInit+0x2b8>)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003d26:	4b70      	ldr	r3, [pc, #448]	@ (8003ee8 <HAL_UART_MspInit+0x2c0>)
 8003d28:	4a70      	ldr	r2, [pc, #448]	@ (8003eec <HAL_UART_MspInit+0x2c4>)
 8003d2a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003d2c:	4b6e      	ldr	r3, [pc, #440]	@ (8003ee8 <HAL_UART_MspInit+0x2c0>)
 8003d2e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003d32:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d34:	4b6c      	ldr	r3, [pc, #432]	@ (8003ee8 <HAL_UART_MspInit+0x2c0>)
 8003d36:	2240      	movs	r2, #64	@ 0x40
 8003d38:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d3a:	4b6b      	ldr	r3, [pc, #428]	@ (8003ee8 <HAL_UART_MspInit+0x2c0>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d40:	4b69      	ldr	r3, [pc, #420]	@ (8003ee8 <HAL_UART_MspInit+0x2c0>)
 8003d42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d46:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d48:	4b67      	ldr	r3, [pc, #412]	@ (8003ee8 <HAL_UART_MspInit+0x2c0>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d4e:	4b66      	ldr	r3, [pc, #408]	@ (8003ee8 <HAL_UART_MspInit+0x2c0>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003d54:	4b64      	ldr	r3, [pc, #400]	@ (8003ee8 <HAL_UART_MspInit+0x2c0>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003d5a:	4b63      	ldr	r3, [pc, #396]	@ (8003ee8 <HAL_UART_MspInit+0x2c0>)
 8003d5c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003d60:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d62:	4b61      	ldr	r3, [pc, #388]	@ (8003ee8 <HAL_UART_MspInit+0x2c0>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003d68:	485f      	ldr	r0, [pc, #380]	@ (8003ee8 <HAL_UART_MspInit+0x2c0>)
 8003d6a:	f000 ff69 	bl	8004c40 <HAL_DMA_Init>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8003d74:	f7ff f96c 	bl	8003050 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ee8 <HAL_UART_MspInit+0x2c0>)
 8003d7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d7e:	4a5a      	ldr	r2, [pc, #360]	@ (8003ee8 <HAL_UART_MspInit+0x2c0>)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003d84:	2200      	movs	r2, #0
 8003d86:	2105      	movs	r1, #5
 8003d88:	2025      	movs	r0, #37	@ 0x25
 8003d8a:	f000 ff2f 	bl	8004bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d8e:	2025      	movs	r0, #37	@ 0x25
 8003d90:	f000 ff48 	bl	8004c24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d94:	e098      	b.n	8003ec8 <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a55      	ldr	r2, [pc, #340]	@ (8003ef0 <HAL_UART_MspInit+0x2c8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	f040 8093 	bne.w	8003ec8 <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003da2:	2300      	movs	r3, #0
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	4b4b      	ldr	r3, [pc, #300]	@ (8003ed4 <HAL_UART_MspInit+0x2ac>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	4a4a      	ldr	r2, [pc, #296]	@ (8003ed4 <HAL_UART_MspInit+0x2ac>)
 8003dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003db2:	4b48      	ldr	r3, [pc, #288]	@ (8003ed4 <HAL_UART_MspInit+0x2ac>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	4b44      	ldr	r3, [pc, #272]	@ (8003ed4 <HAL_UART_MspInit+0x2ac>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	4a43      	ldr	r2, [pc, #268]	@ (8003ed4 <HAL_UART_MspInit+0x2ac>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dce:	4b41      	ldr	r3, [pc, #260]	@ (8003ed4 <HAL_UART_MspInit+0x2ac>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003dda:	230c      	movs	r3, #12
 8003ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dde:	2302      	movs	r3, #2
 8003de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de6:	2303      	movs	r3, #3
 8003de8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003dea:	2307      	movs	r3, #7
 8003dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dee:	f107 031c 	add.w	r3, r7, #28
 8003df2:	4619      	mov	r1, r3
 8003df4:	4838      	ldr	r0, [pc, #224]	@ (8003ed8 <HAL_UART_MspInit+0x2b0>)
 8003df6:	f001 fb33 	bl	8005460 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8003ef4 <HAL_UART_MspInit+0x2cc>)
 8003dfc:	4a3e      	ldr	r2, [pc, #248]	@ (8003ef8 <HAL_UART_MspInit+0x2d0>)
 8003dfe:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003e00:	4b3c      	ldr	r3, [pc, #240]	@ (8003ef4 <HAL_UART_MspInit+0x2cc>)
 8003e02:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003e06:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e08:	4b3a      	ldr	r3, [pc, #232]	@ (8003ef4 <HAL_UART_MspInit+0x2cc>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e0e:	4b39      	ldr	r3, [pc, #228]	@ (8003ef4 <HAL_UART_MspInit+0x2cc>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e14:	4b37      	ldr	r3, [pc, #220]	@ (8003ef4 <HAL_UART_MspInit+0x2cc>)
 8003e16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e1a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e1c:	4b35      	ldr	r3, [pc, #212]	@ (8003ef4 <HAL_UART_MspInit+0x2cc>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e22:	4b34      	ldr	r3, [pc, #208]	@ (8003ef4 <HAL_UART_MspInit+0x2cc>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003e28:	4b32      	ldr	r3, [pc, #200]	@ (8003ef4 <HAL_UART_MspInit+0x2cc>)
 8003e2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e2e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003e30:	4b30      	ldr	r3, [pc, #192]	@ (8003ef4 <HAL_UART_MspInit+0x2cc>)
 8003e32:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003e36:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e38:	4b2e      	ldr	r3, [pc, #184]	@ (8003ef4 <HAL_UART_MspInit+0x2cc>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003e3e:	482d      	ldr	r0, [pc, #180]	@ (8003ef4 <HAL_UART_MspInit+0x2cc>)
 8003e40:	f000 fefe 	bl	8004c40 <HAL_DMA_Init>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_UART_MspInit+0x226>
      Error_Handler();
 8003e4a:	f7ff f901 	bl	8003050 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a28      	ldr	r2, [pc, #160]	@ (8003ef4 <HAL_UART_MspInit+0x2cc>)
 8003e52:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e54:	4a27      	ldr	r2, [pc, #156]	@ (8003ef4 <HAL_UART_MspInit+0x2cc>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003e5a:	4b28      	ldr	r3, [pc, #160]	@ (8003efc <HAL_UART_MspInit+0x2d4>)
 8003e5c:	4a28      	ldr	r2, [pc, #160]	@ (8003f00 <HAL_UART_MspInit+0x2d8>)
 8003e5e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003e60:	4b26      	ldr	r3, [pc, #152]	@ (8003efc <HAL_UART_MspInit+0x2d4>)
 8003e62:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003e66:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e68:	4b24      	ldr	r3, [pc, #144]	@ (8003efc <HAL_UART_MspInit+0x2d4>)
 8003e6a:	2240      	movs	r2, #64	@ 0x40
 8003e6c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e6e:	4b23      	ldr	r3, [pc, #140]	@ (8003efc <HAL_UART_MspInit+0x2d4>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e74:	4b21      	ldr	r3, [pc, #132]	@ (8003efc <HAL_UART_MspInit+0x2d4>)
 8003e76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e7a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003efc <HAL_UART_MspInit+0x2d4>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e82:	4b1e      	ldr	r3, [pc, #120]	@ (8003efc <HAL_UART_MspInit+0x2d4>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003e88:	4b1c      	ldr	r3, [pc, #112]	@ (8003efc <HAL_UART_MspInit+0x2d4>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8003efc <HAL_UART_MspInit+0x2d4>)
 8003e90:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003e94:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e96:	4b19      	ldr	r3, [pc, #100]	@ (8003efc <HAL_UART_MspInit+0x2d4>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003e9c:	4817      	ldr	r0, [pc, #92]	@ (8003efc <HAL_UART_MspInit+0x2d4>)
 8003e9e:	f000 fecf 	bl	8004c40 <HAL_DMA_Init>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_UART_MspInit+0x284>
      Error_Handler();
 8003ea8:	f7ff f8d2 	bl	8003050 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a13      	ldr	r2, [pc, #76]	@ (8003efc <HAL_UART_MspInit+0x2d4>)
 8003eb0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003eb2:	4a12      	ldr	r2, [pc, #72]	@ (8003efc <HAL_UART_MspInit+0x2d4>)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2105      	movs	r1, #5
 8003ebc:	2026      	movs	r0, #38	@ 0x26
 8003ebe:	f000 fe95 	bl	8004bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ec2:	2026      	movs	r0, #38	@ 0x26
 8003ec4:	f000 feae 	bl	8004c24 <HAL_NVIC_EnableIRQ>
}
 8003ec8:	bf00      	nop
 8003eca:	3730      	adds	r7, #48	@ 0x30
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40011000 	.word	0x40011000
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	40020400 	.word	0x40020400
 8003ee0:	20004bb4 	.word	0x20004bb4
 8003ee4:	40026440 	.word	0x40026440
 8003ee8:	20004c14 	.word	0x20004c14
 8003eec:	400264b8 	.word	0x400264b8
 8003ef0:	40004400 	.word	0x40004400
 8003ef4:	20004c74 	.word	0x20004c74
 8003ef8:	40026088 	.word	0x40026088
 8003efc:	20004cd4 	.word	0x20004cd4
 8003f00:	400260a0 	.word	0x400260a0

08003f04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08c      	sub	sp, #48	@ 0x30
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003f14:	2300      	movs	r3, #0
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	4b2f      	ldr	r3, [pc, #188]	@ (8003fd8 <HAL_InitTick+0xd4>)
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8003fd8 <HAL_InitTick+0xd4>)
 8003f1e:	f043 0304 	orr.w	r3, r3, #4
 8003f22:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f24:	4b2c      	ldr	r3, [pc, #176]	@ (8003fd8 <HAL_InitTick+0xd4>)
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f30:	f107 020c 	add.w	r2, r7, #12
 8003f34:	f107 0310 	add.w	r3, r7, #16
 8003f38:	4611      	mov	r1, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f004 fd26 	bl	800898c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003f40:	f004 fd10 	bl	8008964 <HAL_RCC_GetPCLK2Freq>
 8003f44:	4603      	mov	r3, r0
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4c:	4a23      	ldr	r2, [pc, #140]	@ (8003fdc <HAL_InitTick+0xd8>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	0c9b      	lsrs	r3, r3, #18
 8003f54:	3b01      	subs	r3, #1
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 8003f58:	4b21      	ldr	r3, [pc, #132]	@ (8003fe0 <HAL_InitTick+0xdc>)
 8003f5a:	4a22      	ldr	r2, [pc, #136]	@ (8003fe4 <HAL_InitTick+0xe0>)
 8003f5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003f5e:	4b20      	ldr	r3, [pc, #128]	@ (8003fe0 <HAL_InitTick+0xdc>)
 8003f60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003f64:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003f66:	4a1e      	ldr	r2, [pc, #120]	@ (8003fe0 <HAL_InitTick+0xdc>)
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe0 <HAL_InitTick+0xdc>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f72:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <HAL_InitTick+0xdc>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f78:	4b19      	ldr	r3, [pc, #100]	@ (8003fe0 <HAL_InitTick+0xdc>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003f7e:	4818      	ldr	r0, [pc, #96]	@ (8003fe0 <HAL_InitTick+0xdc>)
 8003f80:	f004 fd36 	bl	80089f0 <HAL_TIM_Base_Init>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003f8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d11b      	bne.n	8003fca <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003f92:	4813      	ldr	r0, [pc, #76]	@ (8003fe0 <HAL_InitTick+0xdc>)
 8003f94:	f004 fd86 	bl	8008aa4 <HAL_TIM_Base_Start_IT>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003f9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d111      	bne.n	8003fca <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003fa6:	201e      	movs	r0, #30
 8003fa8:	f000 fe3c 	bl	8004c24 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b0f      	cmp	r3, #15
 8003fb0:	d808      	bhi.n	8003fc4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	201e      	movs	r0, #30
 8003fb8:	f000 fe18 	bl	8004bec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe8 <HAL_InitTick+0xe4>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e002      	b.n	8003fca <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003fca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3730      	adds	r7, #48	@ 0x30
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40023800 	.word	0x40023800
 8003fdc:	431bde83 	.word	0x431bde83
 8003fe0:	20004e7c 	.word	0x20004e7c
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	20000020 	.word	0x20000020

08003fec <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  while (1)
 8003ff0:	bf00      	nop
 8003ff2:	e7fd      	b.n	8003ff0 <NMI_Handler+0x4>

08003ff4 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0

  while (1)
 8003ff8:	bf00      	nop
 8003ffa:	e7fd      	b.n	8003ff8 <HardFault_Handler+0x4>

08003ffc <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  while (1)
 8004000:	bf00      	nop
 8004002:	e7fd      	b.n	8004000 <MemManage_Handler+0x4>

08004004 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  while (1)
 8004008:	bf00      	nop
 800400a:	e7fd      	b.n	8004008 <BusFault_Handler+0x4>

0800400c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  while (1)
 8004010:	bf00      	nop
 8004012:	e7fd      	b.n	8004010 <UsageFault_Handler+0x4>

08004014 <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004028:	4802      	ldr	r0, [pc, #8]	@ (8004034 <DMA1_Stream5_IRQHandler+0x10>)
 800402a:	f000 ffa1 	bl	8004f70 <HAL_DMA_IRQHandler>
}
 800402e:	bf00      	nop
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20004c74 	.word	0x20004c74

08004038 <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800403c:	4802      	ldr	r0, [pc, #8]	@ (8004048 <DMA1_Stream6_IRQHandler+0x10>)
 800403e:	f000 ff97 	bl	8004f70 <HAL_DMA_IRQHandler>
}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20004cd4 	.word	0x20004cd4

0800404c <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8004050:	4802      	ldr	r0, [pc, #8]	@ (800405c <TIM4_IRQHandler+0x10>)
 8004052:	f004 ff77 	bl	8008f44 <HAL_TIM_IRQHandler>
}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20004e7c 	.word	0x20004e7c

08004060 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8004064:	4802      	ldr	r0, [pc, #8]	@ (8004070 <USART1_IRQHandler+0x10>)
 8004066:	f005 fdb1 	bl	8009bcc <HAL_UART_IRQHandler>
}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20004b2c 	.word	0x20004b2c

08004074 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 8004078:	4802      	ldr	r0, [pc, #8]	@ (8004084 <USART2_IRQHandler+0x10>)
 800407a:	f005 fda7 	bl	8009bcc <HAL_UART_IRQHandler>
}
 800407e:	bf00      	nop
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20004b70 	.word	0x20004b70

08004088 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800408c:	4802      	ldr	r0, [pc, #8]	@ (8004098 <DMA2_Stream2_IRQHandler+0x10>)
 800408e:	f000 ff6f 	bl	8004f70 <HAL_DMA_IRQHandler>
}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20004bb4 	.word	0x20004bb4

0800409c <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80040a0:	4802      	ldr	r0, [pc, #8]	@ (80040ac <DMA2_Stream7_IRQHandler+0x10>)
 80040a2:	f000 ff65 	bl	8004f70 <HAL_DMA_IRQHandler>
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20004c14 	.word	0x20004c14

080040b0 <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80040b4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80040b8:	f001 fb70 	bl	800579c <HAL_GPIO_EXTI_IRQHandler>
}
 80040bc:	bf00      	nop
 80040be:	bd80      	pop	{r7, pc}

080040c0 <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80040c4:	2001      	movs	r0, #1
 80040c6:	f001 fb69 	bl	800579c <HAL_GPIO_EXTI_IRQHandler>
}
 80040ca:	bf00      	nop
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 80040d4:	4802      	ldr	r0, [pc, #8]	@ (80040e0 <I2C1_EV_IRQHandler+0x10>)
 80040d6:	f001 ffe1 	bl	800609c <HAL_I2C_EV_IRQHandler>
}
 80040da:	bf00      	nop
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20004ad8 	.word	0x20004ad8

080040e4 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 80040e8:	4802      	ldr	r0, [pc, #8]	@ (80040f4 <I2C1_ER_IRQHandler+0x10>)
 80040ea:	f002 f92a 	bl	8006342 <HAL_I2C_ER_IRQHandler>
}
 80040ee:	bf00      	nop
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20004ad8 	.word	0x20004ad8

080040f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
	return 1;
 80040fc:	2301      	movs	r3, #1
}
 80040fe:	4618      	mov	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <_kill>:

int _kill(int pid, int sig)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004112:	f016 fc45 	bl	801a9a0 <__errno>
 8004116:	4603      	mov	r3, r0
 8004118:	2216      	movs	r2, #22
 800411a:	601a      	str	r2, [r3, #0]
	return -1;
 800411c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <_exit>:

void _exit (int status)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004130:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff ffe7 	bl	8004108 <_kill>
	while (1) {}		/* Make sure we hang here */
 800413a:	bf00      	nop
 800413c:	e7fd      	b.n	800413a <_exit+0x12>

0800413e <_read>:
}

//__attribute__((weak)) int _read(int file, char *ptr, int len)
int _read(int file, char *ptr, int len)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b086      	sub	sp, #24
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	e00a      	b.n	8004166 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004150:	f3af 8000 	nop.w
 8004154:	4601      	mov	r1, r0
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	60ba      	str	r2, [r7, #8]
 800415c:	b2ca      	uxtb	r2, r1
 800415e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	3301      	adds	r3, #1
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	429a      	cmp	r2, r3
 800416c:	dbf0      	blt.n	8004150 <_read+0x12>
	}

return len;
 800416e:	687b      	ldr	r3, [r7, #4]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <_write>:

//__attribute__((weak)) int _write(int file, char *ptr, int len)
int _write(int file, char *ptr, int len)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	e009      	b.n	800419e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	60ba      	str	r2, [r7, #8]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fd ffe4 	bl	8002160 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	3301      	adds	r3, #1
 800419c:	617b      	str	r3, [r7, #20]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	dbf1      	blt.n	800418a <_write+0x12>
	}
	return len;
 80041a6:	687b      	ldr	r3, [r7, #4]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3718      	adds	r7, #24
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <_close>:

int _close(int file)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	return -1;
 80041b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80041bc:	4618      	mov	r0, r3
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041d8:	605a      	str	r2, [r3, #4]
	return 0;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <_isatty>:

int _isatty(int file)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
	return 1;
 80041f0:	2301      	movs	r3, #1
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041fe:	b480      	push	{r7}
 8004200:	b085      	sub	sp, #20
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
	return 0;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004220:	4a14      	ldr	r2, [pc, #80]	@ (8004274 <_sbrk+0x5c>)
 8004222:	4b15      	ldr	r3, [pc, #84]	@ (8004278 <_sbrk+0x60>)
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800422c:	4b13      	ldr	r3, [pc, #76]	@ (800427c <_sbrk+0x64>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004234:	4b11      	ldr	r3, [pc, #68]	@ (800427c <_sbrk+0x64>)
 8004236:	4a12      	ldr	r2, [pc, #72]	@ (8004280 <_sbrk+0x68>)
 8004238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800423a:	4b10      	ldr	r3, [pc, #64]	@ (800427c <_sbrk+0x64>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4413      	add	r3, r2
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	429a      	cmp	r2, r3
 8004246:	d207      	bcs.n	8004258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004248:	f016 fbaa 	bl	801a9a0 <__errno>
 800424c:	4603      	mov	r3, r0
 800424e:	220c      	movs	r2, #12
 8004250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004252:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004256:	e009      	b.n	800426c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004258:	4b08      	ldr	r3, [pc, #32]	@ (800427c <_sbrk+0x64>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800425e:	4b07      	ldr	r3, [pc, #28]	@ (800427c <_sbrk+0x64>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4413      	add	r3, r2
 8004266:	4a05      	ldr	r2, [pc, #20]	@ (800427c <_sbrk+0x64>)
 8004268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800426a:	68fb      	ldr	r3, [r7, #12]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20020000 	.word	0x20020000
 8004278:	00000400 	.word	0x00000400
 800427c:	20004ec8 	.word	0x20004ec8
 8004280:	2000e9c0 	.word	0x2000e9c0

08004284 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004288:	4b06      	ldr	r3, [pc, #24]	@ (80042a4 <SystemInit+0x20>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428e:	4a05      	ldr	r2, [pc, #20]	@ (80042a4 <SystemInit+0x20>)
 8004290:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004294:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	e000ed00 	.word	0xe000ed00

080042a8 <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b094      	sub	sp, #80	@ 0x50
 80042ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042ae:	f107 0320 	add.w	r3, r7, #32
 80042b2:	2230      	movs	r2, #48	@ 0x30
 80042b4:	2100      	movs	r1, #0
 80042b6:	4618      	mov	r0, r3
 80042b8:	f016 fa84 	bl	801a7c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042bc:	f107 030c 	add.w	r3, r7, #12
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	609a      	str	r2, [r3, #8]
 80042c8:	60da      	str	r2, [r3, #12]
 80042ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80042cc:	2300      	movs	r3, #0
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	4b28      	ldr	r3, [pc, #160]	@ (8004374 <SystemClock_Config+0xcc>)
 80042d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d4:	4a27      	ldr	r2, [pc, #156]	@ (8004374 <SystemClock_Config+0xcc>)
 80042d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042da:	6413      	str	r3, [r2, #64]	@ 0x40
 80042dc:	4b25      	ldr	r3, [pc, #148]	@ (8004374 <SystemClock_Config+0xcc>)
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80042e8:	2300      	movs	r3, #0
 80042ea:	607b      	str	r3, [r7, #4]
 80042ec:	4b22      	ldr	r3, [pc, #136]	@ (8004378 <SystemClock_Config+0xd0>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a21      	ldr	r2, [pc, #132]	@ (8004378 <SystemClock_Config+0xd0>)
 80042f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	4b1f      	ldr	r3, [pc, #124]	@ (8004378 <SystemClock_Config+0xd0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004300:	607b      	str	r3, [r7, #4]
 8004302:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004304:	2301      	movs	r3, #1
 8004306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004308:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800430c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800430e:	2302      	movs	r3, #2
 8004310:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004312:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004316:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004318:	2308      	movs	r3, #8
 800431a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 800431c:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8004320:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8004322:	2306      	movs	r3, #6
 8004324:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004326:	2304      	movs	r3, #4
 8004328:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800432a:	f107 0320 	add.w	r3, r7, #32
 800432e:	4618      	mov	r0, r3
 8004330:	f003 fe94 	bl	800805c <HAL_RCC_OscConfig>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800433a:	f7fe fe89 	bl	8003050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800433e:	230f      	movs	r3, #15
 8004340:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004342:	2302      	movs	r3, #2
 8004344:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800434a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800434e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8004350:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004354:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004356:	f107 030c 	add.w	r3, r7, #12
 800435a:	2102      	movs	r1, #2
 800435c:	4618      	mov	r0, r3
 800435e:	f004 f8f5 	bl	800854c <HAL_RCC_ClockConfig>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004368:	f7fe fe72 	bl	8003050 <Error_Handler>
  }
}
 800436c:	bf00      	nop
 800436e:	3750      	adds	r7, #80	@ 0x50
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40023800 	.word	0x40023800
 8004378:	40007000 	.word	0x40007000

0800437c <num2str>:
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 800437c:	b480      	push	{r7}
 800437e:	b089      	sub	sp, #36	@ 0x24
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	fbb3 f2f2 	udiv	r2, r3, r2
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	fb01 f202 	mul.w	r2, r1, r2
 800439c:	1a9a      	subs	r2, r3, r2
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1c59      	adds	r1, r3, #1
 80043a2:	60f9      	str	r1, [r7, #12]
 80043a4:	4936      	ldr	r1, [pc, #216]	@ (8004480 <num2str+0x104>)
 80043a6:	5c8a      	ldrb	r2, [r1, r2]
 80043a8:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e9      	bne.n	800438e <num2str+0x12>
        *s='\0';
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 80043c8:	2300      	movs	r3, #0
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	e01a      	b.n	8004404 <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	76fb      	strb	r3, [r7, #27]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	441a      	add	r2, r3
 80043e4:	6979      	ldr	r1, [r7, #20]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	440b      	add	r3, r1
 80043ea:	7812      	ldrb	r2, [r2, #0]
 80043ec:	701a      	strb	r2, [r3, #0]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	3b01      	subs	r3, #1
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4413      	add	r3, r2
 80043fa:	7efa      	ldrb	r2, [r7, #27]
 80043fc:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3301      	adds	r3, #1
 8004402:	61fb      	str	r3, [r7, #28]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	085b      	lsrs	r3, r3, #1
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	429a      	cmp	r2, r3
 800440c:	d3df      	bcc.n	80043ce <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d22d      	bcs.n	8004472 <num2str+0xf6>
                for (i=cnt;i==0;i--)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	e00e      	b.n	800443a <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	441a      	add	r2, r3
 8004422:	69f9      	ldr	r1, [r7, #28]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	4419      	add	r1, r3
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1acb      	subs	r3, r1, r3
 800442c:	6979      	ldr	r1, [r7, #20]
 800442e:	440b      	add	r3, r1
 8004430:	7812      	ldrb	r2, [r2, #0]
 8004432:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	3b01      	subs	r3, #1
 8004438:	61fb      	str	r3, [r7, #28]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d0ed      	beq.n	800441c <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 8004440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <num2str+0xd0>
 8004446:	2320      	movs	r3, #32
 8004448:	76fb      	strb	r3, [r7, #27]
 800444a:	e001      	b.n	8004450 <num2str+0xd4>
 800444c:	2330      	movs	r3, #48	@ 0x30
 800444e:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 8004450:	2300      	movs	r3, #0
 8004452:	61fb      	str	r3, [r7, #28]
 8004454:	e007      	b.n	8004466 <num2str+0xea>
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	4413      	add	r3, r2
 800445c:	7efa      	ldrb	r2, [r7, #27]
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	3301      	adds	r3, #1
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	429a      	cmp	r2, r3
 8004470:	d3f1      	bcc.n	8004456 <num2str+0xda>
        }
}
 8004472:	bf00      	nop
 8004474:	3724      	adds	r7, #36	@ 0x24
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	2000000c 	.word	0x2000000c

08004484 <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 800449c:	e02e      	b.n	80044fc <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	2b2f      	cmp	r3, #47	@ 0x2f
 80044a2:	d906      	bls.n	80044b2 <str2num+0x2e>
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	2b39      	cmp	r3, #57	@ 0x39
 80044a8:	d803      	bhi.n	80044b2 <str2num+0x2e>
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
 80044ac:	3b30      	subs	r3, #48	@ 0x30
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	e018      	b.n	80044e4 <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d109      	bne.n	80044cc <str2num+0x48>
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
 80044ba:	2b40      	cmp	r3, #64	@ 0x40
 80044bc:	d906      	bls.n	80044cc <str2num+0x48>
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	2b46      	cmp	r3, #70	@ 0x46
 80044c2:	d803      	bhi.n	80044cc <str2num+0x48>
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	3b37      	subs	r3, #55	@ 0x37
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	e00b      	b.n	80044e4 <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	2b10      	cmp	r3, #16
 80044d0:	d117      	bne.n	8004502 <str2num+0x7e>
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b60      	cmp	r3, #96	@ 0x60
 80044d6:	d914      	bls.n	8004502 <str2num+0x7e>
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	2b66      	cmp	r3, #102	@ 0x66
 80044dc:	d811      	bhi.n	8004502 <str2num+0x7e>
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	3b57      	subs	r3, #87	@ 0x57
 80044e2:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	fb02 f303 	mul.w	r3, r2, r3
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
		ch=*s++;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1cd      	bne.n	800449e <str2num+0x1a>
	}
	return u;
 8004502:	697b      	ldr	r3, [r7, #20]
}
 8004504:	4618      	mov	r0, r3
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	3b01      	subs	r3, #1
 8004522:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004524:	e018      	b.n	8004558 <reverse+0x48>
    {
        temp = str[i];
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	4413      	add	r3, r2
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	441a      	add	r2, r3
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	440b      	add	r3, r1
 800453c:	7812      	ldrb	r2, [r2, #0]
 800453e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4413      	add	r3, r2
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	701a      	strb	r2, [r3, #0]
        i++; j--;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	3301      	adds	r3, #1
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	3b01      	subs	r3, #1
 8004556:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	429a      	cmp	r2, r3
 800455e:	dbe2      	blt.n	8004526 <reverse+0x16>
    }
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop
 8004564:	371c      	adds	r7, #28
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
	...

08004570 <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
    int i = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
    while (x)
 8004580:	e01d      	b.n	80045be <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4b1d      	ldr	r3, [pc, #116]	@ (80045fc <intToStr+0x8c>)
 8004586:	fb83 1302 	smull	r1, r3, r3, r2
 800458a:	1099      	asrs	r1, r3, #2
 800458c:	17d3      	asrs	r3, r2, #31
 800458e:	1ac9      	subs	r1, r1, r3
 8004590:	460b      	mov	r3, r1
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	1ad1      	subs	r1, r2, r3
 800459a:	b2ca      	uxtb	r2, r1
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	1c59      	adds	r1, r3, #1
 80045a0:	6179      	str	r1, [r7, #20]
 80045a2:	4619      	mov	r1, r3
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	440b      	add	r3, r1
 80045a8:	3230      	adds	r2, #48	@ 0x30
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]
        x = x/10;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4a12      	ldr	r2, [pc, #72]	@ (80045fc <intToStr+0x8c>)
 80045b2:	fb82 1203 	smull	r1, r2, r2, r3
 80045b6:	1092      	asrs	r2, r2, #2
 80045b8:	17db      	asrs	r3, r3, #31
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	60fb      	str	r3, [r7, #12]
    while (x)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1de      	bne.n	8004582 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80045c4:	e007      	b.n	80045d6 <intToStr+0x66>
        str[i++] = '0';
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	617a      	str	r2, [r7, #20]
 80045cc:	461a      	mov	r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4413      	add	r3, r2
 80045d2:	2230      	movs	r2, #48	@ 0x30
 80045d4:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	429a      	cmp	r2, r3
 80045dc:	dbf3      	blt.n	80045c6 <intToStr+0x56>

    reverse(str, i);
 80045de:	6979      	ldr	r1, [r7, #20]
 80045e0:	68b8      	ldr	r0, [r7, #8]
 80045e2:	f7ff ff95 	bl	8004510 <reverse>
    str[i] = '\0';
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	4413      	add	r3, r2
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
    return i;
 80045f0:	697b      	ldr	r3, [r7, #20]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	66666667 	.word	0x66666667

08004600 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b088      	sub	sp, #32
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	ed87 0a02 	vstr	s0, [r7, #8]
 800460c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 800460e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004616:	ee17 3a90 	vmov	r3, s15
 800461a:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004626:	ed97 7a02 	vldr	s14, [r7, #8]
 800462a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800462e:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8004632:	2200      	movs	r2, #0
 8004634:	68f9      	ldr	r1, [r7, #12]
 8004636:	69f8      	ldr	r0, [r7, #28]
 8004638:	f7ff ff9a 	bl	8004570 <intToStr>
 800463c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d025      	beq.n	8004690 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	4413      	add	r3, r2
 800464a:	222e      	movs	r2, #46	@ 0x2e
 800464c:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 8004698 <float2str+0x98>
 8004654:	f000 f824 	bl	80046a0 <myPow>
 8004658:	ec53 2b10 	vmov	r2, r3, d0
 800465c:	4610      	mov	r0, r2
 800465e:	4619      	mov	r1, r3
 8004660:	f7fc fada 	bl	8000c18 <__aeabi_d2f>
 8004664:	ee07 0a10 	vmov	s14, r0
 8004668:	edd7 7a06 	vldr	s15, [r7, #24]
 800466c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004670:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 8004674:	edd7 7a06 	vldr	s15, [r7, #24]
 8004678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	3301      	adds	r3, #1
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	4619      	mov	r1, r3
 8004688:	ee17 0a90 	vmov	r0, s15
 800468c:	f7ff ff70 	bl	8004570 <intToStr>
    }
}
 8004690:	bf00      	nop
 8004692:	3720      	adds	r7, #32
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	00000000 	.word	0x00000000
 800469c:	40240000 	.word	0x40240000

080046a0 <myPow>:
//=================================================================
double myPow(double x, int n) {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	ed87 0b02 	vstr	d0, [r7, #8]
 80046aa:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bfb8      	it	lt
 80046b2:	425b      	neglt	r3, r3
 80046b4:	61fb      	str	r3, [r7, #28]
    double result = 1;
 80046b6:	f04f 0200 	mov.w	r2, #0
 80046ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004730 <myPow+0x90>)
 80046bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 80046c0:	e01b      	b.n	80046fa <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f003 0301 	and.w	r3, r3, #1
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d009      	beq.n	80046e0 <myPow+0x40>
        {
            result = result * x;
 80046cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80046d4:	f7fb ffa8 	bl	8000628 <__aeabi_dmul>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	085b      	lsrs	r3, r3, #1
 80046e4:	61fb      	str	r3, [r7, #28]
        x = x * x;
 80046e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046ee:	f7fb ff9b 	bl	8000628 <__aeabi_dmul>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1e0      	bne.n	80046c2 <myPow+0x22>
    }

    if(n < 0)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	da09      	bge.n	800471a <myPow+0x7a>
    {
        return 1/result;
 8004706:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800470a:	f04f 0000 	mov.w	r0, #0
 800470e:	4908      	ldr	r1, [pc, #32]	@ (8004730 <myPow+0x90>)
 8004710:	f7fc f8b4 	bl	800087c <__aeabi_ddiv>
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	e001      	b.n	800471e <myPow+0x7e>
    }
    return result;
 800471a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800471e:	ec43 2b17 	vmov	d7, r2, r3
 8004722:	eeb0 0a47 	vmov.f32	s0, s14
 8004726:	eef0 0a67 	vmov.f32	s1, s15
 800472a:	3720      	adds	r7, #32
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	3ff00000 	.word	0x3ff00000

08004734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004734:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800476c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004738:	480d      	ldr	r0, [pc, #52]	@ (8004770 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800473a:	490e      	ldr	r1, [pc, #56]	@ (8004774 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800473c:	4a0e      	ldr	r2, [pc, #56]	@ (8004778 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800473e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004740:	e002      	b.n	8004748 <LoopCopyDataInit>

08004742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004746:	3304      	adds	r3, #4

08004748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800474a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800474c:	d3f9      	bcc.n	8004742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800474e:	4a0b      	ldr	r2, [pc, #44]	@ (800477c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004750:	4c0b      	ldr	r4, [pc, #44]	@ (8004780 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004754:	e001      	b.n	800475a <LoopFillZerobss>

08004756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004758:	3204      	adds	r2, #4

0800475a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800475a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800475c:	d3fb      	bcc.n	8004756 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800475e:	f7ff fd91 	bl	8004284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004762:	f016 f923 	bl	801a9ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004766:	f7fe fa3d 	bl	8002be4 <main>
  bx  lr    
 800476a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800476c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004770:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004774:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 8004778:	0801ecd4 	.word	0x0801ecd4
  ldr r2, =_sbss
 800477c:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8004780:	2000e9c0 	.word	0x2000e9c0

08004784 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004784:	e7fe      	b.n	8004784 <ADC_IRQHandler>
	...

08004788 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800478c:	4b0e      	ldr	r3, [pc, #56]	@ (80047c8 <HAL_Init+0x40>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0d      	ldr	r2, [pc, #52]	@ (80047c8 <HAL_Init+0x40>)
 8004792:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004796:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004798:	4b0b      	ldr	r3, [pc, #44]	@ (80047c8 <HAL_Init+0x40>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a0a      	ldr	r2, [pc, #40]	@ (80047c8 <HAL_Init+0x40>)
 800479e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047a4:	4b08      	ldr	r3, [pc, #32]	@ (80047c8 <HAL_Init+0x40>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a07      	ldr	r2, [pc, #28]	@ (80047c8 <HAL_Init+0x40>)
 80047aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047b0:	2003      	movs	r0, #3
 80047b2:	f000 fa10 	bl	8004bd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047b6:	200f      	movs	r0, #15
 80047b8:	f7ff fba4 	bl	8003f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047bc:	f7ff f846 	bl	800384c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	40023c00 	.word	0x40023c00

080047cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047d0:	4b06      	ldr	r3, [pc, #24]	@ (80047ec <HAL_IncTick+0x20>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	4b06      	ldr	r3, [pc, #24]	@ (80047f0 <HAL_IncTick+0x24>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4413      	add	r3, r2
 80047dc:	4a04      	ldr	r2, [pc, #16]	@ (80047f0 <HAL_IncTick+0x24>)
 80047de:	6013      	str	r3, [r2, #0]
}
 80047e0:	bf00      	nop
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	20000024 	.word	0x20000024
 80047f0:	20004ecc 	.word	0x20004ecc

080047f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  return uwTick;
 80047f8:	4b03      	ldr	r3, [pc, #12]	@ (8004808 <HAL_GetTick+0x14>)
 80047fa:	681b      	ldr	r3, [r3, #0]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20004ecc 	.word	0x20004ecc

0800480c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004814:	f7ff ffee 	bl	80047f4 <HAL_GetTick>
 8004818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004824:	d005      	beq.n	8004832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004826:	4b0a      	ldr	r3, [pc, #40]	@ (8004850 <HAL_Delay+0x44>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	461a      	mov	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004832:	bf00      	nop
 8004834:	f7ff ffde 	bl	80047f4 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	429a      	cmp	r2, r3
 8004842:	d8f7      	bhi.n	8004834 <HAL_Delay+0x28>
  {
  }
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20000024 	.word	0x20000024

08004854 <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e01b      	b.n	800489e <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f817 	bl	80048a6 <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f81b 	bl	80048bc <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80048c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004a78 <ADC_Init+0x1bc>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	4a6b      	ldr	r2, [pc, #428]	@ (8004a78 <ADC_Init+0x1bc>)
 80048ca:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80048ce:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80048d0:	4b69      	ldr	r3, [pc, #420]	@ (8004a78 <ADC_Init+0x1bc>)
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4967      	ldr	r1, [pc, #412]	@ (8004a78 <ADC_Init+0x1bc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6859      	ldr	r1, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	021a      	lsls	r2, r3, #8
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689a      	ldr	r2, [r3, #8]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004932:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6899      	ldr	r1, [r3, #8]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004954:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6899      	ldr	r1, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689a      	ldr	r2, [r3, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004976:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6899      	ldr	r1, [r3, #8]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0202 	bic.w	r2, r2, #2
 8004998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6899      	ldr	r1, [r3, #8]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	005a      	lsls	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01b      	beq.n	80049ee <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049c4:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80049d4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6859      	ldr	r1, [r3, #4]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e0:	3b01      	subs	r3, #1
 80049e2:	035a      	lsls	r2, r3, #13
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
 80049ec:	e007      	b.n	80049fe <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049fc:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004a0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	051a      	lsls	r2, r3, #20
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	689a      	ldr	r2, [r3, #8]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004a32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6899      	ldr	r1, [r3, #8]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	025a      	lsls	r2, r3, #9
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689a      	ldr	r2, [r3, #8]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6899      	ldr	r1, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	029a      	lsls	r2, r3, #10
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	609a      	str	r2, [r3, #8]
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40012300 	.word	0x40012300

08004a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aae:	4a04      	ldr	r2, [pc, #16]	@ (8004ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	60d3      	str	r3, [r2, #12]
}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	e000ed00 	.word	0xe000ed00

08004ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ac8:	4b04      	ldr	r3, [pc, #16]	@ (8004adc <__NVIC_GetPriorityGrouping+0x18>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	0a1b      	lsrs	r3, r3, #8
 8004ace:	f003 0307 	and.w	r3, r3, #7
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	e000ed00 	.word	0xe000ed00

08004ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	db0b      	blt.n	8004b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	f003 021f 	and.w	r2, r3, #31
 8004af8:	4907      	ldr	r1, [pc, #28]	@ (8004b18 <__NVIC_EnableIRQ+0x38>)
 8004afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	2001      	movs	r0, #1
 8004b02:	fa00 f202 	lsl.w	r2, r0, r2
 8004b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	e000e100 	.word	0xe000e100

08004b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	4603      	mov	r3, r0
 8004b24:	6039      	str	r1, [r7, #0]
 8004b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	db0a      	blt.n	8004b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	490c      	ldr	r1, [pc, #48]	@ (8004b68 <__NVIC_SetPriority+0x4c>)
 8004b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3a:	0112      	lsls	r2, r2, #4
 8004b3c:	b2d2      	uxtb	r2, r2
 8004b3e:	440b      	add	r3, r1
 8004b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b44:	e00a      	b.n	8004b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	4908      	ldr	r1, [pc, #32]	@ (8004b6c <__NVIC_SetPriority+0x50>)
 8004b4c:	79fb      	ldrb	r3, [r7, #7]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	3b04      	subs	r3, #4
 8004b54:	0112      	lsls	r2, r2, #4
 8004b56:	b2d2      	uxtb	r2, r2
 8004b58:	440b      	add	r3, r1
 8004b5a:	761a      	strb	r2, [r3, #24]
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	e000e100 	.word	0xe000e100
 8004b6c:	e000ed00 	.word	0xe000ed00

08004b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b089      	sub	sp, #36	@ 0x24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f003 0307 	and.w	r3, r3, #7
 8004b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	f1c3 0307 	rsb	r3, r3, #7
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	bf28      	it	cs
 8004b8e:	2304      	movcs	r3, #4
 8004b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	3304      	adds	r3, #4
 8004b96:	2b06      	cmp	r3, #6
 8004b98:	d902      	bls.n	8004ba0 <NVIC_EncodePriority+0x30>
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	3b03      	subs	r3, #3
 8004b9e:	e000      	b.n	8004ba2 <NVIC_EncodePriority+0x32>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ba4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	43da      	mvns	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	401a      	ands	r2, r3
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc2:	43d9      	mvns	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc8:	4313      	orrs	r3, r2
         );
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3724      	adds	r7, #36	@ 0x24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff ff4c 	bl	8004a7c <__NVIC_SetPriorityGrouping>
}
 8004be4:	bf00      	nop
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bfe:	f7ff ff61 	bl	8004ac4 <__NVIC_GetPriorityGrouping>
 8004c02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	68b9      	ldr	r1, [r7, #8]
 8004c08:	6978      	ldr	r0, [r7, #20]
 8004c0a:	f7ff ffb1 	bl	8004b70 <NVIC_EncodePriority>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c14:	4611      	mov	r1, r2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff ff80 	bl	8004b1c <__NVIC_SetPriority>
}
 8004c1c:	bf00      	nop
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7ff ff54 	bl	8004ae0 <__NVIC_EnableIRQ>
}
 8004c38:	bf00      	nop
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c4c:	f7ff fdd2 	bl	80047f4 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e099      	b.n	8004d90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0201 	bic.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c7c:	e00f      	b.n	8004c9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c7e:	f7ff fdb9 	bl	80047f4 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b05      	cmp	r3, #5
 8004c8a:	d908      	bls.n	8004c9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2220      	movs	r2, #32
 8004c90:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2203      	movs	r2, #3
 8004c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e078      	b.n	8004d90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e8      	bne.n	8004c7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cb4:	697a      	ldr	r2, [r7, #20]
 8004cb6:	4b38      	ldr	r3, [pc, #224]	@ (8004d98 <HAL_DMA_Init+0x158>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ce2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d107      	bne.n	8004d08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d00:	4313      	orrs	r3, r2
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f023 0307 	bic.w	r3, r3, #7
 8004d1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d117      	bne.n	8004d62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00e      	beq.n	8004d62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fb0f 	bl	8005368 <DMA_CheckFifoParam>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d008      	beq.n	8004d62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2240      	movs	r2, #64	@ 0x40
 8004d54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e016      	b.n	8004d90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fac6 	bl	80052fc <DMA_CalcBaseAndBitshift>
 8004d70:	4603      	mov	r3, r0
 8004d72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d78:	223f      	movs	r2, #63	@ 0x3f
 8004d7a:	409a      	lsls	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	f010803f 	.word	0xf010803f

08004d9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_DMA_Start_IT+0x26>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e040      	b.n	8004e44 <HAL_DMA_Start_IT+0xa8>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d12f      	bne.n	8004e36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fa58 	bl	80052a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df4:	223f      	movs	r2, #63	@ 0x3f
 8004df6:	409a      	lsls	r2, r3
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0216 	orr.w	r2, r2, #22
 8004e0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0208 	orr.w	r2, r2, #8
 8004e22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0201 	orr.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	e005      	b.n	8004e42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
 8004e40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e5a:	f7ff fccb 	bl	80047f4 <HAL_GetTick>
 8004e5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d008      	beq.n	8004e7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2280      	movs	r2, #128	@ 0x80
 8004e70:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e052      	b.n	8004f24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f022 0216 	bic.w	r2, r2, #22
 8004e8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	695a      	ldr	r2, [r3, #20]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d103      	bne.n	8004eae <HAL_DMA_Abort+0x62>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0208 	bic.w	r2, r2, #8
 8004ebc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0201 	bic.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ece:	e013      	b.n	8004ef8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ed0:	f7ff fc90 	bl	80047f4 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b05      	cmp	r3, #5
 8004edc:	d90c      	bls.n	8004ef8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e015      	b.n	8004f24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e4      	bne.n	8004ed0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f0a:	223f      	movs	r2, #63	@ 0x3f
 8004f0c:	409a      	lsls	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d004      	beq.n	8004f4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2280      	movs	r2, #128	@ 0x80
 8004f44:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e00c      	b.n	8004f64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2205      	movs	r2, #5
 8004f4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f7c:	4b8e      	ldr	r3, [pc, #568]	@ (80051b8 <HAL_DMA_IRQHandler+0x248>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a8e      	ldr	r2, [pc, #568]	@ (80051bc <HAL_DMA_IRQHandler+0x24c>)
 8004f82:	fba2 2303 	umull	r2, r3, r2, r3
 8004f86:	0a9b      	lsrs	r3, r3, #10
 8004f88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f9a:	2208      	movs	r2, #8
 8004f9c:	409a      	lsls	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d01a      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d013      	beq.n	8004fdc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0204 	bic.w	r2, r2, #4
 8004fc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc8:	2208      	movs	r2, #8
 8004fca:	409a      	lsls	r2, r3
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd4:	f043 0201 	orr.w	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	409a      	lsls	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d012      	beq.n	8005012 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00b      	beq.n	8005012 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ffe:	2201      	movs	r2, #1
 8005000:	409a      	lsls	r2, r3
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800500a:	f043 0202 	orr.w	r2, r3, #2
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005016:	2204      	movs	r2, #4
 8005018:	409a      	lsls	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4013      	ands	r3, r2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d012      	beq.n	8005048 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00b      	beq.n	8005048 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005034:	2204      	movs	r2, #4
 8005036:	409a      	lsls	r2, r3
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005040:	f043 0204 	orr.w	r2, r3, #4
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800504c:	2210      	movs	r2, #16
 800504e:	409a      	lsls	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4013      	ands	r3, r2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d043      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d03c      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506a:	2210      	movs	r2, #16
 800506c:	409a      	lsls	r2, r3
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d018      	beq.n	80050b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d108      	bne.n	80050a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	d024      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	4798      	blx	r3
 800509e:	e01f      	b.n	80050e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d01b      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	4798      	blx	r3
 80050b0:	e016      	b.n	80050e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d107      	bne.n	80050d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0208 	bic.w	r2, r2, #8
 80050ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e4:	2220      	movs	r2, #32
 80050e6:	409a      	lsls	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4013      	ands	r3, r2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 808f 	beq.w	8005210 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 8087 	beq.w	8005210 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005106:	2220      	movs	r2, #32
 8005108:	409a      	lsls	r2, r3
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b05      	cmp	r3, #5
 8005118:	d136      	bne.n	8005188 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0216 	bic.w	r2, r2, #22
 8005128:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005138:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d103      	bne.n	800514a <HAL_DMA_IRQHandler+0x1da>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005146:	2b00      	cmp	r3, #0
 8005148:	d007      	beq.n	800515a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0208 	bic.w	r2, r2, #8
 8005158:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800515e:	223f      	movs	r2, #63	@ 0x3f
 8005160:	409a      	lsls	r2, r3
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800517a:	2b00      	cmp	r3, #0
 800517c:	d07e      	beq.n	800527c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	4798      	blx	r3
        }
        return;
 8005186:	e079      	b.n	800527c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d01d      	beq.n	80051d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10d      	bne.n	80051c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d031      	beq.n	8005210 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	4798      	blx	r3
 80051b4:	e02c      	b.n	8005210 <HAL_DMA_IRQHandler+0x2a0>
 80051b6:	bf00      	nop
 80051b8:	20000008 	.word	0x20000008
 80051bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d023      	beq.n	8005210 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	4798      	blx	r3
 80051d0:	e01e      	b.n	8005210 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10f      	bne.n	8005200 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0210 	bic.w	r2, r2, #16
 80051ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005214:	2b00      	cmp	r3, #0
 8005216:	d032      	beq.n	800527e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d022      	beq.n	800526a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2205      	movs	r2, #5
 8005228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0201 	bic.w	r2, r2, #1
 800523a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	3301      	adds	r3, #1
 8005240:	60bb      	str	r3, [r7, #8]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	429a      	cmp	r2, r3
 8005246:	d307      	bcc.n	8005258 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f2      	bne.n	800523c <HAL_DMA_IRQHandler+0x2cc>
 8005256:	e000      	b.n	800525a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005258:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d005      	beq.n	800527e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	4798      	blx	r3
 800527a:	e000      	b.n	800527e <HAL_DMA_IRQHandler+0x30e>
        return;
 800527c:	bf00      	nop
    }
  }
}
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005292:	b2db      	uxtb	r3, r3
}
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80052bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b40      	cmp	r3, #64	@ 0x40
 80052cc:	d108      	bne.n	80052e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052de:	e007      	b.n	80052f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	60da      	str	r2, [r3, #12]
}
 80052f0:	bf00      	nop
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	b2db      	uxtb	r3, r3
 800530a:	3b10      	subs	r3, #16
 800530c:	4a14      	ldr	r2, [pc, #80]	@ (8005360 <DMA_CalcBaseAndBitshift+0x64>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	091b      	lsrs	r3, r3, #4
 8005314:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005316:	4a13      	ldr	r2, [pc, #76]	@ (8005364 <DMA_CalcBaseAndBitshift+0x68>)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b03      	cmp	r3, #3
 8005328:	d909      	bls.n	800533e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005332:	f023 0303 	bic.w	r3, r3, #3
 8005336:	1d1a      	adds	r2, r3, #4
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	659a      	str	r2, [r3, #88]	@ 0x58
 800533c:	e007      	b.n	800534e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005346:	f023 0303 	bic.w	r3, r3, #3
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	aaaaaaab 	.word	0xaaaaaaab
 8005364:	0801def8 	.word	0x0801def8

08005368 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005378:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d11f      	bne.n	80053c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b03      	cmp	r3, #3
 8005386:	d856      	bhi.n	8005436 <DMA_CheckFifoParam+0xce>
 8005388:	a201      	add	r2, pc, #4	@ (adr r2, 8005390 <DMA_CheckFifoParam+0x28>)
 800538a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538e:	bf00      	nop
 8005390:	080053a1 	.word	0x080053a1
 8005394:	080053b3 	.word	0x080053b3
 8005398:	080053a1 	.word	0x080053a1
 800539c:	08005437 	.word	0x08005437
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d046      	beq.n	800543a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053b0:	e043      	b.n	800543a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053ba:	d140      	bne.n	800543e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053c0:	e03d      	b.n	800543e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ca:	d121      	bne.n	8005410 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d837      	bhi.n	8005442 <DMA_CheckFifoParam+0xda>
 80053d2:	a201      	add	r2, pc, #4	@ (adr r2, 80053d8 <DMA_CheckFifoParam+0x70>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	080053e9 	.word	0x080053e9
 80053dc:	080053ef 	.word	0x080053ef
 80053e0:	080053e9 	.word	0x080053e9
 80053e4:	08005401 	.word	0x08005401
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	73fb      	strb	r3, [r7, #15]
      break;
 80053ec:	e030      	b.n	8005450 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d025      	beq.n	8005446 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053fe:	e022      	b.n	8005446 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005404:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005408:	d11f      	bne.n	800544a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800540e:	e01c      	b.n	800544a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d903      	bls.n	800541e <DMA_CheckFifoParam+0xb6>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b03      	cmp	r3, #3
 800541a:	d003      	beq.n	8005424 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800541c:	e018      	b.n	8005450 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	73fb      	strb	r3, [r7, #15]
      break;
 8005422:	e015      	b.n	8005450 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005428:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00e      	beq.n	800544e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
      break;
 8005434:	e00b      	b.n	800544e <DMA_CheckFifoParam+0xe6>
      break;
 8005436:	bf00      	nop
 8005438:	e00a      	b.n	8005450 <DMA_CheckFifoParam+0xe8>
      break;
 800543a:	bf00      	nop
 800543c:	e008      	b.n	8005450 <DMA_CheckFifoParam+0xe8>
      break;
 800543e:	bf00      	nop
 8005440:	e006      	b.n	8005450 <DMA_CheckFifoParam+0xe8>
      break;
 8005442:	bf00      	nop
 8005444:	e004      	b.n	8005450 <DMA_CheckFifoParam+0xe8>
      break;
 8005446:	bf00      	nop
 8005448:	e002      	b.n	8005450 <DMA_CheckFifoParam+0xe8>
      break;   
 800544a:	bf00      	nop
 800544c:	e000      	b.n	8005450 <DMA_CheckFifoParam+0xe8>
      break;
 800544e:	bf00      	nop
    }
  } 
  
  return status; 
 8005450:	7bfb      	ldrb	r3, [r7, #15]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop

08005460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005460:	b480      	push	{r7}
 8005462:	b089      	sub	sp, #36	@ 0x24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800546e:	2300      	movs	r3, #0
 8005470:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005472:	2300      	movs	r3, #0
 8005474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005476:	2300      	movs	r3, #0
 8005478:	61fb      	str	r3, [r7, #28]
 800547a:	e159      	b.n	8005730 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800547c:	2201      	movs	r2, #1
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	fa02 f303 	lsl.w	r3, r2, r3
 8005484:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4013      	ands	r3, r2
 800548e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	429a      	cmp	r2, r3
 8005496:	f040 8148 	bne.w	800572a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d005      	beq.n	80054b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d130      	bne.n	8005514 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	005b      	lsls	r3, r3, #1
 80054bc:	2203      	movs	r2, #3
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	43db      	mvns	r3, r3
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	4013      	ands	r3, r2
 80054c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	4313      	orrs	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054e8:	2201      	movs	r2, #1
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	43db      	mvns	r3, r3
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	4013      	ands	r3, r2
 80054f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	091b      	lsrs	r3, r3, #4
 80054fe:	f003 0201 	and.w	r2, r3, #1
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	4313      	orrs	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f003 0303 	and.w	r3, r3, #3
 800551c:	2b03      	cmp	r3, #3
 800551e:	d017      	beq.n	8005550 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	2203      	movs	r2, #3
 800552c:	fa02 f303 	lsl.w	r3, r2, r3
 8005530:	43db      	mvns	r3, r3
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	4013      	ands	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4313      	orrs	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 0303 	and.w	r3, r3, #3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d123      	bne.n	80055a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	08da      	lsrs	r2, r3, #3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3208      	adds	r2, #8
 8005564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005568:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	220f      	movs	r2, #15
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	43db      	mvns	r3, r3
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4013      	ands	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4313      	orrs	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	08da      	lsrs	r2, r3, #3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3208      	adds	r2, #8
 800559e:	69b9      	ldr	r1, [r7, #24]
 80055a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	2203      	movs	r2, #3
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	43db      	mvns	r3, r3
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	4013      	ands	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f003 0203 	and.w	r2, r3, #3
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	fa02 f303 	lsl.w	r3, r2, r3
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 80a2 	beq.w	800572a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	4b57      	ldr	r3, [pc, #348]	@ (8005748 <HAL_GPIO_Init+0x2e8>)
 80055ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ee:	4a56      	ldr	r2, [pc, #344]	@ (8005748 <HAL_GPIO_Init+0x2e8>)
 80055f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80055f6:	4b54      	ldr	r3, [pc, #336]	@ (8005748 <HAL_GPIO_Init+0x2e8>)
 80055f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005602:	4a52      	ldr	r2, [pc, #328]	@ (800574c <HAL_GPIO_Init+0x2ec>)
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	089b      	lsrs	r3, r3, #2
 8005608:	3302      	adds	r3, #2
 800560a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800560e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	220f      	movs	r2, #15
 800561a:	fa02 f303 	lsl.w	r3, r2, r3
 800561e:	43db      	mvns	r3, r3
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	4013      	ands	r3, r2
 8005624:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a49      	ldr	r2, [pc, #292]	@ (8005750 <HAL_GPIO_Init+0x2f0>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d019      	beq.n	8005662 <HAL_GPIO_Init+0x202>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a48      	ldr	r2, [pc, #288]	@ (8005754 <HAL_GPIO_Init+0x2f4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d013      	beq.n	800565e <HAL_GPIO_Init+0x1fe>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a47      	ldr	r2, [pc, #284]	@ (8005758 <HAL_GPIO_Init+0x2f8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00d      	beq.n	800565a <HAL_GPIO_Init+0x1fa>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a46      	ldr	r2, [pc, #280]	@ (800575c <HAL_GPIO_Init+0x2fc>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d007      	beq.n	8005656 <HAL_GPIO_Init+0x1f6>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a45      	ldr	r2, [pc, #276]	@ (8005760 <HAL_GPIO_Init+0x300>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d101      	bne.n	8005652 <HAL_GPIO_Init+0x1f2>
 800564e:	2304      	movs	r3, #4
 8005650:	e008      	b.n	8005664 <HAL_GPIO_Init+0x204>
 8005652:	2307      	movs	r3, #7
 8005654:	e006      	b.n	8005664 <HAL_GPIO_Init+0x204>
 8005656:	2303      	movs	r3, #3
 8005658:	e004      	b.n	8005664 <HAL_GPIO_Init+0x204>
 800565a:	2302      	movs	r3, #2
 800565c:	e002      	b.n	8005664 <HAL_GPIO_Init+0x204>
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <HAL_GPIO_Init+0x204>
 8005662:	2300      	movs	r3, #0
 8005664:	69fa      	ldr	r2, [r7, #28]
 8005666:	f002 0203 	and.w	r2, r2, #3
 800566a:	0092      	lsls	r2, r2, #2
 800566c:	4093      	lsls	r3, r2
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	4313      	orrs	r3, r2
 8005672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005674:	4935      	ldr	r1, [pc, #212]	@ (800574c <HAL_GPIO_Init+0x2ec>)
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	089b      	lsrs	r3, r3, #2
 800567a:	3302      	adds	r3, #2
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005682:	4b38      	ldr	r3, [pc, #224]	@ (8005764 <HAL_GPIO_Init+0x304>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	43db      	mvns	r3, r3
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	4013      	ands	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056a6:	4a2f      	ldr	r2, [pc, #188]	@ (8005764 <HAL_GPIO_Init+0x304>)
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005764 <HAL_GPIO_Init+0x304>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	43db      	mvns	r3, r3
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4013      	ands	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d003      	beq.n	80056d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056d0:	4a24      	ldr	r2, [pc, #144]	@ (8005764 <HAL_GPIO_Init+0x304>)
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056d6:	4b23      	ldr	r3, [pc, #140]	@ (8005764 <HAL_GPIO_Init+0x304>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	43db      	mvns	r3, r3
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4013      	ands	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005764 <HAL_GPIO_Init+0x304>)
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005700:	4b18      	ldr	r3, [pc, #96]	@ (8005764 <HAL_GPIO_Init+0x304>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	43db      	mvns	r3, r3
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	4013      	ands	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005724:	4a0f      	ldr	r2, [pc, #60]	@ (8005764 <HAL_GPIO_Init+0x304>)
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	3301      	adds	r3, #1
 800572e:	61fb      	str	r3, [r7, #28]
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	2b0f      	cmp	r3, #15
 8005734:	f67f aea2 	bls.w	800547c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005738:	bf00      	nop
 800573a:	bf00      	nop
 800573c:	3724      	adds	r7, #36	@ 0x24
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40023800 	.word	0x40023800
 800574c:	40013800 	.word	0x40013800
 8005750:	40020000 	.word	0x40020000
 8005754:	40020400 	.word	0x40020400
 8005758:	40020800 	.word	0x40020800
 800575c:	40020c00 	.word	0x40020c00
 8005760:	40021000 	.word	0x40021000
 8005764:	40013c00 	.word	0x40013c00

08005768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	807b      	strh	r3, [r7, #2]
 8005774:	4613      	mov	r3, r2
 8005776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005778:	787b      	ldrb	r3, [r7, #1]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800577e:	887a      	ldrh	r2, [r7, #2]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005784:	e003      	b.n	800578e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005786:	887b      	ldrh	r3, [r7, #2]
 8005788:	041a      	lsls	r2, r3, #16
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	619a      	str	r2, [r3, #24]
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
	...

0800579c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	4603      	mov	r3, r0
 80057a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057a6:	4b08      	ldr	r3, [pc, #32]	@ (80057c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057a8:	695a      	ldr	r2, [r3, #20]
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	4013      	ands	r3, r2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d006      	beq.n	80057c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057b2:	4a05      	ldr	r2, [pc, #20]	@ (80057c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057b4:	88fb      	ldrh	r3, [r7, #6]
 80057b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fc fc02 	bl	8001fc4 <HAL_GPIO_EXTI_Callback>
  }
}
 80057c0:	bf00      	nop
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	40013c00 	.word	0x40013c00

080057cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e12b      	b.n	8005a36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fe f9c0 	bl	8003b78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2224      	movs	r2, #36	@ 0x24
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800581e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800582e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005830:	f003 f884 	bl	800893c <HAL_RCC_GetPCLK1Freq>
 8005834:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	4a81      	ldr	r2, [pc, #516]	@ (8005a40 <HAL_I2C_Init+0x274>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d807      	bhi.n	8005850 <HAL_I2C_Init+0x84>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4a80      	ldr	r2, [pc, #512]	@ (8005a44 <HAL_I2C_Init+0x278>)
 8005844:	4293      	cmp	r3, r2
 8005846:	bf94      	ite	ls
 8005848:	2301      	movls	r3, #1
 800584a:	2300      	movhi	r3, #0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	e006      	b.n	800585e <HAL_I2C_Init+0x92>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4a7d      	ldr	r2, [pc, #500]	@ (8005a48 <HAL_I2C_Init+0x27c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	bf94      	ite	ls
 8005858:	2301      	movls	r3, #1
 800585a:	2300      	movhi	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e0e7      	b.n	8005a36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4a78      	ldr	r2, [pc, #480]	@ (8005a4c <HAL_I2C_Init+0x280>)
 800586a:	fba2 2303 	umull	r2, r3, r2, r3
 800586e:	0c9b      	lsrs	r3, r3, #18
 8005870:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	4a6a      	ldr	r2, [pc, #424]	@ (8005a40 <HAL_I2C_Init+0x274>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d802      	bhi.n	80058a0 <HAL_I2C_Init+0xd4>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	3301      	adds	r3, #1
 800589e:	e009      	b.n	80058b4 <HAL_I2C_Init+0xe8>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	4a69      	ldr	r2, [pc, #420]	@ (8005a50 <HAL_I2C_Init+0x284>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	099b      	lsrs	r3, r3, #6
 80058b2:	3301      	adds	r3, #1
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6812      	ldr	r2, [r2, #0]
 80058b8:	430b      	orrs	r3, r1
 80058ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80058c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	495c      	ldr	r1, [pc, #368]	@ (8005a40 <HAL_I2C_Init+0x274>)
 80058d0:	428b      	cmp	r3, r1
 80058d2:	d819      	bhi.n	8005908 <HAL_I2C_Init+0x13c>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	1e59      	subs	r1, r3, #1
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	fbb1 f3f3 	udiv	r3, r1, r3
 80058e2:	1c59      	adds	r1, r3, #1
 80058e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80058e8:	400b      	ands	r3, r1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <HAL_I2C_Init+0x138>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1e59      	subs	r1, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80058fc:	3301      	adds	r3, #1
 80058fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005902:	e051      	b.n	80059a8 <HAL_I2C_Init+0x1dc>
 8005904:	2304      	movs	r3, #4
 8005906:	e04f      	b.n	80059a8 <HAL_I2C_Init+0x1dc>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d111      	bne.n	8005934 <HAL_I2C_Init+0x168>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	1e58      	subs	r0, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6859      	ldr	r1, [r3, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	440b      	add	r3, r1
 800591e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005922:	3301      	adds	r3, #1
 8005924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005928:	2b00      	cmp	r3, #0
 800592a:	bf0c      	ite	eq
 800592c:	2301      	moveq	r3, #1
 800592e:	2300      	movne	r3, #0
 8005930:	b2db      	uxtb	r3, r3
 8005932:	e012      	b.n	800595a <HAL_I2C_Init+0x18e>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	1e58      	subs	r0, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6859      	ldr	r1, [r3, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	0099      	lsls	r1, r3, #2
 8005944:	440b      	add	r3, r1
 8005946:	fbb0 f3f3 	udiv	r3, r0, r3
 800594a:	3301      	adds	r3, #1
 800594c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005950:	2b00      	cmp	r3, #0
 8005952:	bf0c      	ite	eq
 8005954:	2301      	moveq	r3, #1
 8005956:	2300      	movne	r3, #0
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <HAL_I2C_Init+0x196>
 800595e:	2301      	movs	r3, #1
 8005960:	e022      	b.n	80059a8 <HAL_I2C_Init+0x1dc>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10e      	bne.n	8005988 <HAL_I2C_Init+0x1bc>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	1e58      	subs	r0, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6859      	ldr	r1, [r3, #4]
 8005972:	460b      	mov	r3, r1
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	440b      	add	r3, r1
 8005978:	fbb0 f3f3 	udiv	r3, r0, r3
 800597c:	3301      	adds	r3, #1
 800597e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005986:	e00f      	b.n	80059a8 <HAL_I2C_Init+0x1dc>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	1e58      	subs	r0, r3, #1
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6859      	ldr	r1, [r3, #4]
 8005990:	460b      	mov	r3, r1
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	440b      	add	r3, r1
 8005996:	0099      	lsls	r1, r3, #2
 8005998:	440b      	add	r3, r1
 800599a:	fbb0 f3f3 	udiv	r3, r0, r3
 800599e:	3301      	adds	r3, #1
 80059a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	6809      	ldr	r1, [r1, #0]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	69da      	ldr	r2, [r3, #28]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80059d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6911      	ldr	r1, [r2, #16]
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	68d2      	ldr	r2, [r2, #12]
 80059e2:	4311      	orrs	r1, r2
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6812      	ldr	r2, [r2, #0]
 80059e8:	430b      	orrs	r3, r1
 80059ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695a      	ldr	r2, [r3, #20]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3710      	adds	r7, #16
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	000186a0 	.word	0x000186a0
 8005a44:	001e847f 	.word	0x001e847f
 8005a48:	003d08ff 	.word	0x003d08ff
 8005a4c:	431bde83 	.word	0x431bde83
 8005a50:	10624dd3 	.word	0x10624dd3

08005a54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	607a      	str	r2, [r7, #4]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	460b      	mov	r3, r1
 8005a62:	817b      	strh	r3, [r7, #10]
 8005a64:	4613      	mov	r3, r2
 8005a66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a68:	f7fe fec4 	bl	80047f4 <HAL_GetTick>
 8005a6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	f040 80e0 	bne.w	8005c3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	2319      	movs	r3, #25
 8005a82:	2201      	movs	r2, #1
 8005a84:	4970      	ldr	r1, [pc, #448]	@ (8005c48 <HAL_I2C_Master_Transmit+0x1f4>)
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f002 f8be 	bl	8007c08 <I2C_WaitOnFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005a92:	2302      	movs	r3, #2
 8005a94:	e0d3      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_I2C_Master_Transmit+0x50>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e0cc      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x1ea>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d007      	beq.n	8005aca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f042 0201 	orr.w	r2, r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ad8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2221      	movs	r2, #33	@ 0x21
 8005ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2210      	movs	r2, #16
 8005ae6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	893a      	ldrh	r2, [r7, #8]
 8005afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4a50      	ldr	r2, [pc, #320]	@ (8005c4c <HAL_I2C_Master_Transmit+0x1f8>)
 8005b0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005b0c:	8979      	ldrh	r1, [r7, #10]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	6a3a      	ldr	r2, [r7, #32]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f001 fe80 	bl	8007818 <I2C_MasterRequestWrite>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e08d      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b22:	2300      	movs	r3, #0
 8005b24:	613b      	str	r3, [r7, #16]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b38:	e066      	b.n	8005c08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	6a39      	ldr	r1, [r7, #32]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f002 f938 	bl	8007db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00d      	beq.n	8005b66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d107      	bne.n	8005b62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e06b      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6a:	781a      	ldrb	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d11b      	bne.n	8005bdc <HAL_I2C_Master_Transmit+0x188>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d017      	beq.n	8005bdc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb0:	781a      	ldrb	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	6a39      	ldr	r1, [r7, #32]
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f002 f928 	bl	8007e36 <I2C_WaitOnBTFFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00d      	beq.n	8005c08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d107      	bne.n	8005c04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e01a      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d194      	bne.n	8005b3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	e000      	b.n	8005c3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c3c:	2302      	movs	r3, #2
  }
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	00100002 	.word	0x00100002
 8005c4c:	ffff0000 	.word	0xffff0000

08005c50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08c      	sub	sp, #48	@ 0x30
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	607a      	str	r2, [r7, #4]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	817b      	strh	r3, [r7, #10]
 8005c60:	4613      	mov	r3, r2
 8005c62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c64:	f7fe fdc6 	bl	80047f4 <HAL_GetTick>
 8005c68:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	f040 820b 	bne.w	800608e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	2319      	movs	r3, #25
 8005c7e:	2201      	movs	r2, #1
 8005c80:	497c      	ldr	r1, [pc, #496]	@ (8005e74 <HAL_I2C_Master_Receive+0x224>)
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f001 ffc0 	bl	8007c08 <I2C_WaitOnFlagUntilTimeout>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e1fe      	b.n	8006090 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_I2C_Master_Receive+0x50>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e1f7      	b.n	8006090 <HAL_I2C_Master_Receive+0x440>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d007      	beq.n	8005cc6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f042 0201 	orr.w	r2, r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2222      	movs	r2, #34	@ 0x22
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2210      	movs	r2, #16
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	893a      	ldrh	r2, [r7, #8]
 8005cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4a5c      	ldr	r2, [pc, #368]	@ (8005e78 <HAL_I2C_Master_Receive+0x228>)
 8005d06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005d08:	8979      	ldrh	r1, [r7, #10]
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f001 fe04 	bl	800791c <I2C_MasterRequestRead>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e1b8      	b.n	8006090 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d113      	bne.n	8005d4e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d26:	2300      	movs	r3, #0
 8005d28:	623b      	str	r3, [r7, #32]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	623b      	str	r3, [r7, #32]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	623b      	str	r3, [r7, #32]
 8005d3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	e18c      	b.n	8006068 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d11b      	bne.n	8005d8e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d66:	2300      	movs	r3, #0
 8005d68:	61fb      	str	r3, [r7, #28]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	61fb      	str	r3, [r7, #28]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	61fb      	str	r3, [r7, #28]
 8005d7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	e16c      	b.n	8006068 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d11b      	bne.n	8005dce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005da4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005db4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005db6:	2300      	movs	r3, #0
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	61bb      	str	r3, [r7, #24]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	61bb      	str	r3, [r7, #24]
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	e14c      	b.n	8006068 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ddc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dde:	2300      	movs	r3, #0
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	617b      	str	r3, [r7, #20]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005df4:	e138      	b.n	8006068 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	f200 80f1 	bhi.w	8005fe2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d123      	bne.n	8005e50 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f002 f885 	bl	8007f1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e139      	b.n	8006090 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e38:	3b01      	subs	r3, #1
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	3b01      	subs	r3, #1
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e4e:	e10b      	b.n	8006068 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d14e      	bne.n	8005ef6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5e:	2200      	movs	r2, #0
 8005e60:	4906      	ldr	r1, [pc, #24]	@ (8005e7c <HAL_I2C_Master_Receive+0x22c>)
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f001 fed0 	bl	8007c08 <I2C_WaitOnFlagUntilTimeout>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d008      	beq.n	8005e80 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e10e      	b.n	8006090 <HAL_I2C_Master_Receive+0x440>
 8005e72:	bf00      	nop
 8005e74:	00100002 	.word	0x00100002
 8005e78:	ffff0000 	.word	0xffff0000
 8005e7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	691a      	ldr	r2, [r3, #16]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea2:	1c5a      	adds	r2, r3, #1
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed4:	1c5a      	adds	r2, r3, #1
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3b01      	subs	r3, #1
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ef4:	e0b8      	b.n	8006068 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efc:	2200      	movs	r2, #0
 8005efe:	4966      	ldr	r1, [pc, #408]	@ (8006098 <HAL_I2C_Master_Receive+0x448>)
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f001 fe81 	bl	8007c08 <I2C_WaitOnFlagUntilTimeout>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e0bf      	b.n	8006090 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691a      	ldr	r2, [r3, #16]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f58:	2200      	movs	r2, #0
 8005f5a:	494f      	ldr	r1, [pc, #316]	@ (8006098 <HAL_I2C_Master_Receive+0x448>)
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f001 fe53 	bl	8007c08 <I2C_WaitOnFlagUntilTimeout>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e091      	b.n	8006090 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691a      	ldr	r2, [r3, #16]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	691a      	ldr	r2, [r3, #16]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb8:	b2d2      	uxtb	r2, r2
 8005fba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005fe0:	e042      	b.n	8006068 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f001 ff98 	bl	8007f1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e04c      	b.n	8006090 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	691a      	ldr	r2, [r3, #16]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006012:	3b01      	subs	r3, #1
 8006014:	b29a      	uxth	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800601e:	b29b      	uxth	r3, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	f003 0304 	and.w	r3, r3, #4
 8006032:	2b04      	cmp	r3, #4
 8006034:	d118      	bne.n	8006068 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006052:	3b01      	subs	r3, #1
 8006054:	b29a      	uxth	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800606c:	2b00      	cmp	r3, #0
 800606e:	f47f aec2 	bne.w	8005df6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2200      	movs	r2, #0
 800607e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	e000      	b.n	8006090 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800608e:	2302      	movs	r3, #2
  }
}
 8006090:	4618      	mov	r0, r3
 8006092:	3728      	adds	r7, #40	@ 0x28
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	00010004 	.word	0x00010004

0800609c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060c4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	2b10      	cmp	r3, #16
 80060ca:	d003      	beq.n	80060d4 <HAL_I2C_EV_IRQHandler+0x38>
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	2b40      	cmp	r3, #64	@ 0x40
 80060d0:	f040 80b1 	bne.w	8006236 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10d      	bne.n	800610a <HAL_I2C_EV_IRQHandler+0x6e>
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80060f4:	d003      	beq.n	80060fe <HAL_I2C_EV_IRQHandler+0x62>
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80060fc:	d101      	bne.n	8006102 <HAL_I2C_EV_IRQHandler+0x66>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <HAL_I2C_EV_IRQHandler+0x68>
 8006102:	2300      	movs	r3, #0
 8006104:	2b01      	cmp	r3, #1
 8006106:	f000 8114 	beq.w	8006332 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <HAL_I2C_EV_IRQHandler+0x90>
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800611a:	2b00      	cmp	r3, #0
 800611c:	d006      	beq.n	800612c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 ff81 	bl	8008026 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fd5e 	bl	8006be6 <I2C_Master_SB>
 800612a:	e083      	b.n	8006234 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d008      	beq.n	8006148 <HAL_I2C_EV_IRQHandler+0xac>
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800613c:	2b00      	cmp	r3, #0
 800613e:	d003      	beq.n	8006148 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fdd6 	bl	8006cf2 <I2C_Master_ADD10>
 8006146:	e075      	b.n	8006234 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d008      	beq.n	8006164 <HAL_I2C_EV_IRQHandler+0xc8>
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fdf2 	bl	8006d46 <I2C_Master_ADDR>
 8006162:	e067      	b.n	8006234 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	d036      	beq.n	80061dc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006178:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800617c:	f000 80db 	beq.w	8006336 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00d      	beq.n	80061a6 <HAL_I2C_EV_IRQHandler+0x10a>
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006190:	2b00      	cmp	r3, #0
 8006192:	d008      	beq.n	80061a6 <HAL_I2C_EV_IRQHandler+0x10a>
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b00      	cmp	r3, #0
 800619c:	d103      	bne.n	80061a6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f9d6 	bl	8006550 <I2C_MasterTransmit_TXE>
 80061a4:	e046      	b.n	8006234 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 80c2 	beq.w	8006336 <HAL_I2C_EV_IRQHandler+0x29a>
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 80bc 	beq.w	8006336 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80061be:	7bbb      	ldrb	r3, [r7, #14]
 80061c0:	2b21      	cmp	r3, #33	@ 0x21
 80061c2:	d103      	bne.n	80061cc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fa5f 	bl	8006688 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061ca:	e0b4      	b.n	8006336 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	2b40      	cmp	r3, #64	@ 0x40
 80061d0:	f040 80b1 	bne.w	8006336 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 facd 	bl	8006774 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80061da:	e0ac      	b.n	8006336 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061ea:	f000 80a4 	beq.w	8006336 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00d      	beq.n	8006214 <HAL_I2C_EV_IRQHandler+0x178>
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d008      	beq.n	8006214 <HAL_I2C_EV_IRQHandler+0x178>
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d103      	bne.n	8006214 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fb45 	bl	800689c <I2C_MasterReceive_RXNE>
 8006212:	e00f      	b.n	8006234 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 808b 	beq.w	8006336 <HAL_I2C_EV_IRQHandler+0x29a>
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 8085 	beq.w	8006336 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 fbf0 	bl	8006a12 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006232:	e080      	b.n	8006336 <HAL_I2C_EV_IRQHandler+0x29a>
 8006234:	e07f      	b.n	8006336 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d004      	beq.n	8006248 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	61fb      	str	r3, [r7, #28]
 8006246:	e007      	b.n	8006258 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d011      	beq.n	8006286 <HAL_I2C_EV_IRQHandler+0x1ea>
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00c      	beq.n	8006286 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006270:	2b00      	cmp	r3, #0
 8006272:	d003      	beq.n	800627c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800627c:	69b9      	ldr	r1, [r7, #24]
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 ffb0 	bl	80071e4 <I2C_Slave_ADDR>
 8006284:	e05a      	b.n	800633c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	f003 0310 	and.w	r3, r3, #16
 800628c:	2b00      	cmp	r3, #0
 800628e:	d008      	beq.n	80062a2 <HAL_I2C_EV_IRQHandler+0x206>
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 ffea 	bl	8007274 <I2C_Slave_STOPF>
 80062a0:	e04c      	b.n	800633c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062a2:	7bbb      	ldrb	r3, [r7, #14]
 80062a4:	2b21      	cmp	r3, #33	@ 0x21
 80062a6:	d002      	beq.n	80062ae <HAL_I2C_EV_IRQHandler+0x212>
 80062a8:	7bbb      	ldrb	r3, [r7, #14]
 80062aa:	2b29      	cmp	r3, #41	@ 0x29
 80062ac:	d120      	bne.n	80062f0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00d      	beq.n	80062d4 <HAL_I2C_EV_IRQHandler+0x238>
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d008      	beq.n	80062d4 <HAL_I2C_EV_IRQHandler+0x238>
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d103      	bne.n	80062d4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 fecb 	bl	8007068 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062d2:	e032      	b.n	800633a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	f003 0304 	and.w	r3, r3, #4
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d02d      	beq.n	800633a <HAL_I2C_EV_IRQHandler+0x29e>
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d028      	beq.n	800633a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fefa 	bl	80070e2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062ee:	e024      	b.n	800633a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00d      	beq.n	8006316 <HAL_I2C_EV_IRQHandler+0x27a>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006300:	2b00      	cmp	r3, #0
 8006302:	d008      	beq.n	8006316 <HAL_I2C_EV_IRQHandler+0x27a>
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	d103      	bne.n	8006316 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 ff08 	bl	8007124 <I2C_SlaveReceive_RXNE>
 8006314:	e012      	b.n	800633c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00d      	beq.n	800633c <HAL_I2C_EV_IRQHandler+0x2a0>
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006326:	2b00      	cmp	r3, #0
 8006328:	d008      	beq.n	800633c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 ff38 	bl	80071a0 <I2C_SlaveReceive_BTF>
 8006330:	e004      	b.n	800633c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8006332:	bf00      	nop
 8006334:	e002      	b.n	800633c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006336:	bf00      	nop
 8006338:	e000      	b.n	800633c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800633a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b08a      	sub	sp, #40	@ 0x28
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800635a:	2300      	movs	r3, #0
 800635c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006364:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00d      	beq.n	800638c <HAL_I2C_ER_IRQHandler+0x4a>
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006376:	2b00      	cmp	r3, #0
 8006378:	d008      	beq.n	800638c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637c:	f043 0301 	orr.w	r3, r3, #1
 8006380:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800638a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00d      	beq.n	80063b2 <HAL_I2C_ER_IRQHandler+0x70>
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800639c:	2b00      	cmp	r3, #0
 800639e:	d008      	beq.n	80063b2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	f043 0302 	orr.w	r3, r3, #2
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80063b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d03e      	beq.n	800643a <HAL_I2C_ER_IRQHandler+0xf8>
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d039      	beq.n	800643a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80063c6:	7efb      	ldrb	r3, [r7, #27]
 80063c8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063d8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063de:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80063e0:	7ebb      	ldrb	r3, [r7, #26]
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d112      	bne.n	800640c <HAL_I2C_ER_IRQHandler+0xca>
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10f      	bne.n	800640c <HAL_I2C_ER_IRQHandler+0xca>
 80063ec:	7cfb      	ldrb	r3, [r7, #19]
 80063ee:	2b21      	cmp	r3, #33	@ 0x21
 80063f0:	d008      	beq.n	8006404 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80063f2:	7cfb      	ldrb	r3, [r7, #19]
 80063f4:	2b29      	cmp	r3, #41	@ 0x29
 80063f6:	d005      	beq.n	8006404 <HAL_I2C_ER_IRQHandler+0xc2>
 80063f8:	7cfb      	ldrb	r3, [r7, #19]
 80063fa:	2b28      	cmp	r3, #40	@ 0x28
 80063fc:	d106      	bne.n	800640c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b21      	cmp	r3, #33	@ 0x21
 8006402:	d103      	bne.n	800640c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f001 f865 	bl	80074d4 <I2C_Slave_AF>
 800640a:	e016      	b.n	800643a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006414:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006418:	f043 0304 	orr.w	r3, r3, #4
 800641c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800641e:	7efb      	ldrb	r3, [r7, #27]
 8006420:	2b10      	cmp	r3, #16
 8006422:	d002      	beq.n	800642a <HAL_I2C_ER_IRQHandler+0xe8>
 8006424:	7efb      	ldrb	r3, [r7, #27]
 8006426:	2b40      	cmp	r3, #64	@ 0x40
 8006428:	d107      	bne.n	800643a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006438:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00d      	beq.n	8006460 <HAL_I2C_ER_IRQHandler+0x11e>
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800644a:	2b00      	cmp	r3, #0
 800644c:	d008      	beq.n	8006460 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	f043 0308 	orr.w	r3, r3, #8
 8006454:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800645e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006462:	2b00      	cmp	r3, #0
 8006464:	d008      	beq.n	8006478 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800646a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646c:	431a      	orrs	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 f89e 	bl	80075b4 <I2C_ITError>
  }
}
 8006478:	bf00      	nop
 800647a:	3728      	adds	r7, #40	@ 0x28
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	70fb      	strb	r3, [r7, #3]
 80064dc:	4613      	mov	r3, r2
 80064de:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80064e0:	bf00      	nop
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b084      	sub	sp, #16
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800655e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006566:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006572:	2b00      	cmp	r3, #0
 8006574:	d150      	bne.n	8006618 <I2C_MasterTransmit_TXE+0xc8>
 8006576:	7bfb      	ldrb	r3, [r7, #15]
 8006578:	2b21      	cmp	r3, #33	@ 0x21
 800657a:	d14d      	bne.n	8006618 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b08      	cmp	r3, #8
 8006580:	d01d      	beq.n	80065be <I2C_MasterTransmit_TXE+0x6e>
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b20      	cmp	r3, #32
 8006586:	d01a      	beq.n	80065be <I2C_MasterTransmit_TXE+0x6e>
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800658e:	d016      	beq.n	80065be <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800659e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2211      	movs	r2, #17
 80065a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff ff62 	bl	8006480 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80065bc:	e060      	b.n	8006680 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80065cc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065dc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b40      	cmp	r3, #64	@ 0x40
 80065f6:	d107      	bne.n	8006608 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f7ff ff7d 	bl	8006500 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006606:	e03b      	b.n	8006680 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7ff ff35 	bl	8006480 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006616:	e033      	b.n	8006680 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	2b21      	cmp	r3, #33	@ 0x21
 800661c:	d005      	beq.n	800662a <I2C_MasterTransmit_TXE+0xda>
 800661e:	7bbb      	ldrb	r3, [r7, #14]
 8006620:	2b40      	cmp	r3, #64	@ 0x40
 8006622:	d12d      	bne.n	8006680 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	2b22      	cmp	r3, #34	@ 0x22
 8006628:	d12a      	bne.n	8006680 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800662e:	b29b      	uxth	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	d108      	bne.n	8006646 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006642:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006644:	e01c      	b.n	8006680 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b40      	cmp	r3, #64	@ 0x40
 8006650:	d103      	bne.n	800665a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f88e 	bl	8006774 <I2C_MemoryTransmit_TXE_BTF>
}
 8006658:	e012      	b.n	8006680 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800665e:	781a      	ldrb	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006674:	b29b      	uxth	r3, r3
 8006676:	3b01      	subs	r3, #1
 8006678:	b29a      	uxth	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800667e:	e7ff      	b.n	8006680 <I2C_MasterTransmit_TXE+0x130>
 8006680:	bf00      	nop
 8006682:	3710      	adds	r7, #16
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006694:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800669c:	b2db      	uxtb	r3, r3
 800669e:	2b21      	cmp	r3, #33	@ 0x21
 80066a0:	d164      	bne.n	800676c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d012      	beq.n	80066d2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b0:	781a      	ldrb	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	3b01      	subs	r3, #1
 80066ca:	b29a      	uxth	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80066d0:	e04c      	b.n	800676c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d01d      	beq.n	8006714 <I2C_MasterTransmit_BTF+0x8c>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b20      	cmp	r3, #32
 80066dc:	d01a      	beq.n	8006714 <I2C_MasterTransmit_BTF+0x8c>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066e4:	d016      	beq.n	8006714 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80066f4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2211      	movs	r2, #17
 80066fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2220      	movs	r2, #32
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff feb7 	bl	8006480 <HAL_I2C_MasterTxCpltCallback>
}
 8006712:	e02b      	b.n	800676c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006722:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006732:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b40      	cmp	r3, #64	@ 0x40
 800674c:	d107      	bne.n	800675e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7ff fed2 	bl	8006500 <HAL_I2C_MemTxCpltCallback>
}
 800675c:	e006      	b.n	800676c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7ff fe8a 	bl	8006480 <HAL_I2C_MasterTxCpltCallback>
}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006782:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006788:	2b00      	cmp	r3, #0
 800678a:	d11d      	bne.n	80067c8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006790:	2b01      	cmp	r3, #1
 8006792:	d10b      	bne.n	80067ac <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006798:	b2da      	uxtb	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067a4:	1c9a      	adds	r2, r3, #2
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80067aa:	e073      	b.n	8006894 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	121b      	asrs	r3, r3, #8
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067c0:	1c5a      	adds	r2, r3, #1
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80067c6:	e065      	b.n	8006894 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d10b      	bne.n	80067e8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80067e6:	e055      	b.n	8006894 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d151      	bne.n	8006894 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	2b22      	cmp	r3, #34	@ 0x22
 80067f4:	d10d      	bne.n	8006812 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006804:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006810:	e040      	b.n	8006894 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006816:	b29b      	uxth	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	d015      	beq.n	8006848 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800681c:	7bfb      	ldrb	r3, [r7, #15]
 800681e:	2b21      	cmp	r3, #33	@ 0x21
 8006820:	d112      	bne.n	8006848 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006826:	781a      	ldrb	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800683c:	b29b      	uxth	r3, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006846:	e025      	b.n	8006894 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	d120      	bne.n	8006894 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	2b21      	cmp	r3, #33	@ 0x21
 8006856:	d11d      	bne.n	8006894 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006866:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006876:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7ff fe36 	bl	8006500 <HAL_I2C_MemTxCpltCallback>
}
 8006894:	bf00      	nop
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	2b22      	cmp	r3, #34	@ 0x22
 80068ae:	f040 80ac 	bne.w	8006a0a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2b03      	cmp	r3, #3
 80068be:	d921      	bls.n	8006904 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	691a      	ldr	r2, [r3, #16]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	f040 808c 	bne.w	8006a0a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006900:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006902:	e082      	b.n	8006a0a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006908:	2b02      	cmp	r3, #2
 800690a:	d075      	beq.n	80069f8 <I2C_MasterReceive_RXNE+0x15c>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d002      	beq.n	8006918 <I2C_MasterReceive_RXNE+0x7c>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d16f      	bne.n	80069f8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 facd 	bl	8007eb8 <I2C_WaitOnSTOPRequestThroughIT>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d142      	bne.n	80069aa <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006932:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006942:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800694e:	b2d2      	uxtb	r2, r2
 8006950:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006960:	b29b      	uxth	r3, r3
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2220      	movs	r2, #32
 800696e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b40      	cmp	r3, #64	@ 0x40
 800697c:	d10a      	bne.n	8006994 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff fdc1 	bl	8006514 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006992:	e03a      	b.n	8006a0a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2212      	movs	r2, #18
 80069a0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7ff fd76 	bl	8006494 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80069a8:	e02f      	b.n	8006a0a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685a      	ldr	r2, [r3, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80069b8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691a      	ldr	r2, [r3, #16]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069cc:	1c5a      	adds	r2, r3, #1
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	3b01      	subs	r3, #1
 80069da:	b29a      	uxth	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff fd99 	bl	8006528 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80069f6:	e008      	b.n	8006a0a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a06:	605a      	str	r2, [r3, #4]
}
 8006a08:	e7ff      	b.n	8006a0a <I2C_MasterReceive_RXNE+0x16e>
 8006a0a:	bf00      	nop
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b084      	sub	sp, #16
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	d11b      	bne.n	8006a62 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a38:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	691a      	ldr	r2, [r3, #16]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4c:	1c5a      	adds	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006a60:	e0bd      	b.n	8006bde <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	2b03      	cmp	r3, #3
 8006a6a:	d129      	bne.n	8006ac0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a7a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	d00a      	beq.n	8006a98 <I2C_MasterReceive_BTF+0x86>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d007      	beq.n	8006a98 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a96:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	691a      	ldr	r2, [r3, #16]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006abe:	e08e      	b.n	8006bde <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d176      	bne.n	8006bb8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d002      	beq.n	8006ad6 <I2C_MasterReceive_BTF+0xc4>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b10      	cmp	r3, #16
 8006ad4:	d108      	bne.n	8006ae8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	e019      	b.n	8006b1c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b04      	cmp	r3, #4
 8006aec:	d002      	beq.n	8006af4 <I2C_MasterReceive_BTF+0xe2>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d108      	bne.n	8006b06 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	e00a      	b.n	8006b1c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2b10      	cmp	r3, #16
 8006b0a:	d007      	beq.n	8006b1c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b1a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	691a      	ldr	r2, [r3, #16]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b54:	1c5a      	adds	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	3b01      	subs	r3, #1
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006b76:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b40      	cmp	r3, #64	@ 0x40
 8006b8a:	d10a      	bne.n	8006ba2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7ff fcba 	bl	8006514 <HAL_I2C_MemRxCpltCallback>
}
 8006ba0:	e01d      	b.n	8006bde <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2212      	movs	r2, #18
 8006bae:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff fc6f 	bl	8006494 <HAL_I2C_MasterRxCpltCallback>
}
 8006bb6:	e012      	b.n	8006bde <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691a      	ldr	r2, [r3, #16]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc2:	b2d2      	uxtb	r2, r2
 8006bc4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006bde:	bf00      	nop
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006be6:	b480      	push	{r7}
 8006be8:	b083      	sub	sp, #12
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b40      	cmp	r3, #64	@ 0x40
 8006bf8:	d117      	bne.n	8006c2a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d109      	bne.n	8006c16 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c12:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006c14:	e067      	b.n	8006ce6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	f043 0301 	orr.w	r3, r3, #1
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	611a      	str	r2, [r3, #16]
}
 8006c28:	e05d      	b.n	8006ce6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c32:	d133      	bne.n	8006c9c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b21      	cmp	r3, #33	@ 0x21
 8006c3e:	d109      	bne.n	8006c54 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	461a      	mov	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c50:	611a      	str	r2, [r3, #16]
 8006c52:	e008      	b.n	8006c66 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	f043 0301 	orr.w	r3, r3, #1
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d004      	beq.n	8006c78 <I2C_Master_SB+0x92>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d108      	bne.n	8006c8a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d032      	beq.n	8006ce6 <I2C_Master_SB+0x100>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d02d      	beq.n	8006ce6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c98:	605a      	str	r2, [r3, #4]
}
 8006c9a:	e024      	b.n	8006ce6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10e      	bne.n	8006cc2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	11db      	asrs	r3, r3, #7
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	f003 0306 	and.w	r3, r3, #6
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	f063 030f 	orn	r3, r3, #15
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	611a      	str	r2, [r3, #16]
}
 8006cc0:	e011      	b.n	8006ce6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d10d      	bne.n	8006ce6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	11db      	asrs	r3, r3, #7
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	f003 0306 	and.w	r3, r3, #6
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	f063 030e 	orn	r3, r3, #14
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	611a      	str	r2, [r3, #16]
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d004      	beq.n	8006d18 <I2C_Master_ADD10+0x26>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d108      	bne.n	8006d2a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00c      	beq.n	8006d3a <I2C_Master_ADD10+0x48>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d007      	beq.n	8006d3a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d38:	605a      	str	r2, [r3, #4]
  }
}
 8006d3a:	bf00      	nop
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b091      	sub	sp, #68	@ 0x44
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d62:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b22      	cmp	r3, #34	@ 0x22
 8006d6e:	f040 8169 	bne.w	8007044 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10f      	bne.n	8006d9a <I2C_Master_ADDR+0x54>
 8006d7a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006d7e:	2b40      	cmp	r3, #64	@ 0x40
 8006d80:	d10b      	bne.n	8006d9a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d82:	2300      	movs	r3, #0
 8006d84:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d98:	e160      	b.n	800705c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d11d      	bne.n	8006dde <I2C_Master_ADDR+0x98>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006daa:	d118      	bne.n	8006dde <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dac:	2300      	movs	r3, #0
 8006dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006dd0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	651a      	str	r2, [r3, #80]	@ 0x50
 8006ddc:	e13e      	b.n	800705c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d113      	bne.n	8006e10 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006de8:	2300      	movs	r3, #0
 8006dea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	e115      	b.n	800703c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	f040 808a 	bne.w	8006f30 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e22:	d137      	bne.n	8006e94 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e32:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e42:	d113      	bne.n	8006e6c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e52:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e54:	2300      	movs	r3, #0
 8006e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6a:	e0e7      	b.n	800703c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	623b      	str	r3, [r7, #32]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	623b      	str	r3, [r7, #32]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	623b      	str	r3, [r7, #32]
 8006e80:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	e0d3      	b.n	800703c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e96:	2b08      	cmp	r3, #8
 8006e98:	d02e      	beq.n	8006ef8 <I2C_Master_ADDR+0x1b2>
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9c:	2b20      	cmp	r3, #32
 8006e9e:	d02b      	beq.n	8006ef8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea2:	2b12      	cmp	r3, #18
 8006ea4:	d102      	bne.n	8006eac <I2C_Master_ADDR+0x166>
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d125      	bne.n	8006ef8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d00e      	beq.n	8006ed0 <I2C_Master_ADDR+0x18a>
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d00b      	beq.n	8006ed0 <I2C_Master_ADDR+0x18a>
 8006eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eba:	2b10      	cmp	r3, #16
 8006ebc:	d008      	beq.n	8006ed0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	e007      	b.n	8006ee0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ede:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	61fb      	str	r3, [r7, #28]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	61fb      	str	r3, [r7, #28]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	61fb      	str	r3, [r7, #28]
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	e0a1      	b.n	800703c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f06:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f08:	2300      	movs	r3, #0
 8006f0a:	61bb      	str	r3, [r7, #24]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	61bb      	str	r3, [r7, #24]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	e085      	b.n	800703c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d14d      	bne.n	8006fd6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d016      	beq.n	8006f6e <I2C_Master_ADDR+0x228>
 8006f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d013      	beq.n	8006f6e <I2C_Master_ADDR+0x228>
 8006f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f48:	2b10      	cmp	r3, #16
 8006f4a:	d010      	beq.n	8006f6e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f5a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	e007      	b.n	8006f7e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f7c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f8c:	d117      	bne.n	8006fbe <I2C_Master_ADDR+0x278>
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f94:	d00b      	beq.n	8006fae <I2C_Master_ADDR+0x268>
 8006f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d008      	beq.n	8006fae <I2C_Master_ADDR+0x268>
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d005      	beq.n	8006fae <I2C_Master_ADDR+0x268>
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fa4:	2b10      	cmp	r3, #16
 8006fa6:	d002      	beq.n	8006fae <I2C_Master_ADDR+0x268>
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d107      	bne.n	8006fbe <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006fbc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	617b      	str	r3, [r7, #20]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	e032      	b.n	800703c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006fe4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ff4:	d117      	bne.n	8007026 <I2C_Master_ADDR+0x2e0>
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ffc:	d00b      	beq.n	8007016 <I2C_Master_ADDR+0x2d0>
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007000:	2b01      	cmp	r3, #1
 8007002:	d008      	beq.n	8007016 <I2C_Master_ADDR+0x2d0>
 8007004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007006:	2b08      	cmp	r3, #8
 8007008:	d005      	beq.n	8007016 <I2C_Master_ADDR+0x2d0>
 800700a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800700c:	2b10      	cmp	r3, #16
 800700e:	d002      	beq.n	8007016 <I2C_Master_ADDR+0x2d0>
 8007010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007012:	2b20      	cmp	r3, #32
 8007014:	d107      	bne.n	8007026 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007024:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007026:	2300      	movs	r3, #0
 8007028:	613b      	str	r3, [r7, #16]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	613b      	str	r3, [r7, #16]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007042:	e00b      	b.n	800705c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	68fb      	ldr	r3, [r7, #12]
}
 800705a:	e7ff      	b.n	800705c <I2C_Master_ADDR+0x316>
 800705c:	bf00      	nop
 800705e:	3744      	adds	r7, #68	@ 0x44
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007076:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d02b      	beq.n	80070da <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007086:	781a      	ldrb	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800709c:	b29b      	uxth	r3, r3
 800709e:	3b01      	subs	r3, #1
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d114      	bne.n	80070da <I2C_SlaveTransmit_TXE+0x72>
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	2b29      	cmp	r3, #41	@ 0x29
 80070b4:	d111      	bne.n	80070da <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2221      	movs	r2, #33	@ 0x21
 80070ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2228      	movs	r2, #40	@ 0x28
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff f9e7 	bl	80064a8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80070da:	bf00      	nop
 80070dc:	3710      	adds	r7, #16
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d011      	beq.n	8007118 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f8:	781a      	ldrb	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800710e:	b29b      	uxth	r3, r3
 8007110:	3b01      	subs	r3, #1
 8007112:	b29a      	uxth	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007132:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007138:	b29b      	uxth	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	d02c      	beq.n	8007198 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	691a      	ldr	r2, [r3, #16]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007148:	b2d2      	uxtb	r2, r2
 800714a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007150:	1c5a      	adds	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800715a:	b29b      	uxth	r3, r3
 800715c:	3b01      	subs	r3, #1
 800715e:	b29a      	uxth	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d114      	bne.n	8007198 <I2C_SlaveReceive_RXNE+0x74>
 800716e:	7bfb      	ldrb	r3, [r7, #15]
 8007170:	2b2a      	cmp	r3, #42	@ 0x2a
 8007172:	d111      	bne.n	8007198 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007182:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2222      	movs	r2, #34	@ 0x22
 8007188:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2228      	movs	r2, #40	@ 0x28
 800718e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f7ff f992 	bl	80064bc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007198:	bf00      	nop
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d012      	beq.n	80071d8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3b01      	subs	r3, #1
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80071fe:	2b28      	cmp	r3, #40	@ 0x28
 8007200:	d125      	bne.n	800724e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007210:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800721c:	2301      	movs	r3, #1
 800721e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007226:	2b00      	cmp	r3, #0
 8007228:	d103      	bne.n	8007232 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	81bb      	strh	r3, [r7, #12]
 8007230:	e002      	b.n	8007238 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007240:	89ba      	ldrh	r2, [r7, #12]
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f7ff f942 	bl	80064d0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800724c:	e00e      	b.n	800726c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800724e:	2300      	movs	r3, #0
 8007250:	60bb      	str	r3, [r7, #8]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	60bb      	str	r3, [r7, #8]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	60bb      	str	r3, [r7, #8]
 8007262:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800726c:	bf00      	nop
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007282:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007292:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007294:	2300      	movs	r3, #0
 8007296:	60bb      	str	r3, [r7, #8]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	60bb      	str	r3, [r7, #8]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0201 	orr.w	r2, r2, #1
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072c0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072d0:	d172      	bne.n	80073b8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	2b22      	cmp	r3, #34	@ 0x22
 80072d6:	d002      	beq.n	80072de <I2C_Slave_STOPF+0x6a>
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
 80072da:	2b2a      	cmp	r3, #42	@ 0x2a
 80072dc:	d135      	bne.n	800734a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d005      	beq.n	8007302 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fa:	f043 0204 	orr.w	r2, r3, #4
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007310:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007316:	4618      	mov	r0, r3
 8007318:	f7fd ffb4 	bl	8005284 <HAL_DMA_GetState>
 800731c:	4603      	mov	r3, r0
 800731e:	2b01      	cmp	r3, #1
 8007320:	d049      	beq.n	80073b6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007326:	4a69      	ldr	r2, [pc, #420]	@ (80074cc <I2C_Slave_STOPF+0x258>)
 8007328:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732e:	4618      	mov	r0, r3
 8007330:	f7fd fdfc 	bl	8004f2c <HAL_DMA_Abort_IT>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d03d      	beq.n	80073b6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007344:	4610      	mov	r0, r2
 8007346:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007348:	e035      	b.n	80073b6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	b29a      	uxth	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007366:	f043 0204 	orr.w	r2, r3, #4
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800737c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007382:	4618      	mov	r0, r3
 8007384:	f7fd ff7e 	bl	8005284 <HAL_DMA_GetState>
 8007388:	4603      	mov	r3, r0
 800738a:	2b01      	cmp	r3, #1
 800738c:	d014      	beq.n	80073b8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007392:	4a4e      	ldr	r2, [pc, #312]	@ (80074cc <I2C_Slave_STOPF+0x258>)
 8007394:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800739a:	4618      	mov	r0, r3
 800739c:	f7fd fdc6 	bl	8004f2c <HAL_DMA_Abort_IT>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d008      	beq.n	80073b8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80073b0:	4610      	mov	r0, r2
 80073b2:	4798      	blx	r3
 80073b4:	e000      	b.n	80073b8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80073b6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073bc:	b29b      	uxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d03e      	beq.n	8007440 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	f003 0304 	and.w	r3, r3, #4
 80073cc:	2b04      	cmp	r3, #4
 80073ce:	d112      	bne.n	80073f6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691a      	ldr	r2, [r3, #16]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073da:	b2d2      	uxtb	r2, r2
 80073dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	3b01      	subs	r3, #1
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007400:	2b40      	cmp	r3, #64	@ 0x40
 8007402:	d112      	bne.n	800742a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	691a      	ldr	r2, [r3, #16]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007420:	b29b      	uxth	r3, r3
 8007422:	3b01      	subs	r3, #1
 8007424:	b29a      	uxth	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800742e:	b29b      	uxth	r3, r3
 8007430:	2b00      	cmp	r3, #0
 8007432:	d005      	beq.n	8007440 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007438:	f043 0204 	orr.w	r2, r3, #4
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f8b3 	bl	80075b4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800744e:	e039      	b.n	80074c4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	2b2a      	cmp	r3, #42	@ 0x2a
 8007454:	d109      	bne.n	800746a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2228      	movs	r2, #40	@ 0x28
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7ff f829 	bl	80064bc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b28      	cmp	r3, #40	@ 0x28
 8007474:	d111      	bne.n	800749a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a15      	ldr	r2, [pc, #84]	@ (80074d0 <I2C_Slave_STOPF+0x25c>)
 800747a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2220      	movs	r2, #32
 8007486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff f82a 	bl	80064ec <HAL_I2C_ListenCpltCallback>
}
 8007498:	e014      	b.n	80074c4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749e:	2b22      	cmp	r3, #34	@ 0x22
 80074a0:	d002      	beq.n	80074a8 <I2C_Slave_STOPF+0x234>
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	2b22      	cmp	r3, #34	@ 0x22
 80074a6:	d10d      	bne.n	80074c4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2220      	movs	r2, #32
 80074b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7fe fffc 	bl	80064bc <HAL_I2C_SlaveRxCpltCallback>
}
 80074c4:	bf00      	nop
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	08007ab9 	.word	0x08007ab9
 80074d0:	ffff0000 	.word	0xffff0000

080074d4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074e2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d002      	beq.n	80074f6 <I2C_Slave_AF+0x22>
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	d129      	bne.n	800754a <I2C_Slave_AF+0x76>
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	2b28      	cmp	r3, #40	@ 0x28
 80074fa:	d126      	bne.n	800754a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a2c      	ldr	r2, [pc, #176]	@ (80075b0 <I2C_Slave_AF+0xdc>)
 8007500:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007510:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800751a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800752a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fe ffd2 	bl	80064ec <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007548:	e02e      	b.n	80075a8 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	2b21      	cmp	r3, #33	@ 0x21
 800754e:	d126      	bne.n	800759e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a17      	ldr	r2, [pc, #92]	@ (80075b0 <I2C_Slave_AF+0xdc>)
 8007554:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2221      	movs	r2, #33	@ 0x21
 800755a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2220      	movs	r2, #32
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800757a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007584:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007594:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7fe ff86 	bl	80064a8 <HAL_I2C_SlaveTxCpltCallback>
}
 800759c:	e004      	b.n	80075a8 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80075a6:	615a      	str	r2, [r3, #20]
}
 80075a8:	bf00      	nop
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	ffff0000 	.word	0xffff0000

080075b4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075ca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80075cc:	7bbb      	ldrb	r3, [r7, #14]
 80075ce:	2b10      	cmp	r3, #16
 80075d0:	d002      	beq.n	80075d8 <I2C_ITError+0x24>
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	2b40      	cmp	r3, #64	@ 0x40
 80075d6:	d10a      	bne.n	80075ee <I2C_ITError+0x3a>
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	2b22      	cmp	r3, #34	@ 0x22
 80075dc:	d107      	bne.n	80075ee <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075ec:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80075f4:	2b28      	cmp	r3, #40	@ 0x28
 80075f6:	d107      	bne.n	8007608 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2228      	movs	r2, #40	@ 0x28
 8007602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007606:	e015      	b.n	8007634 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007612:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007616:	d00a      	beq.n	800762e <I2C_ITError+0x7a>
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	2b60      	cmp	r3, #96	@ 0x60
 800761c:	d007      	beq.n	800762e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2220      	movs	r2, #32
 8007622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800763e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007642:	d162      	bne.n	800770a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685a      	ldr	r2, [r3, #4]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007652:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007658:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b01      	cmp	r3, #1
 8007660:	d020      	beq.n	80076a4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007666:	4a6a      	ldr	r2, [pc, #424]	@ (8007810 <I2C_ITError+0x25c>)
 8007668:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800766e:	4618      	mov	r0, r3
 8007670:	f7fd fc5c 	bl	8004f2c <HAL_DMA_Abort_IT>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 8089 	beq.w	800778e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0201 	bic.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2220      	movs	r2, #32
 8007690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800769e:	4610      	mov	r0, r2
 80076a0:	4798      	blx	r3
 80076a2:	e074      	b.n	800778e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a8:	4a59      	ldr	r2, [pc, #356]	@ (8007810 <I2C_ITError+0x25c>)
 80076aa:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fd fc3b 	bl	8004f2c <HAL_DMA_Abort_IT>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d068      	beq.n	800778e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076c6:	2b40      	cmp	r3, #64	@ 0x40
 80076c8:	d10b      	bne.n	80076e2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	691a      	ldr	r2, [r3, #16]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d4:	b2d2      	uxtb	r2, r2
 80076d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 0201 	bic.w	r2, r2, #1
 80076f0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2220      	movs	r2, #32
 80076f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007704:	4610      	mov	r0, r2
 8007706:	4798      	blx	r3
 8007708:	e041      	b.n	800778e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b60      	cmp	r3, #96	@ 0x60
 8007714:	d125      	bne.n	8007762 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2220      	movs	r2, #32
 800771a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800772e:	2b40      	cmp	r3, #64	@ 0x40
 8007730:	d10b      	bne.n	800774a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	691a      	ldr	r2, [r3, #16]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773c:	b2d2      	uxtb	r2, r2
 800773e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f022 0201 	bic.w	r2, r2, #1
 8007758:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7fe feee 	bl	800653c <HAL_I2C_AbortCpltCallback>
 8007760:	e015      	b.n	800778e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	695b      	ldr	r3, [r3, #20]
 8007768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800776c:	2b40      	cmp	r3, #64	@ 0x40
 800776e:	d10b      	bne.n	8007788 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007782:	1c5a      	adds	r2, r3, #1
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7fe fecd 	bl	8006528 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007792:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10e      	bne.n	80077bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d109      	bne.n	80077bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d104      	bne.n	80077bc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d007      	beq.n	80077cc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80077ca:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077d2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b04      	cmp	r3, #4
 80077de:	d113      	bne.n	8007808 <I2C_ITError+0x254>
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	2b28      	cmp	r3, #40	@ 0x28
 80077e4:	d110      	bne.n	8007808 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a0a      	ldr	r2, [pc, #40]	@ (8007814 <I2C_ITError+0x260>)
 80077ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7fe fe72 	bl	80064ec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007808:	bf00      	nop
 800780a:	3710      	adds	r7, #16
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	08007ab9 	.word	0x08007ab9
 8007814:	ffff0000 	.word	0xffff0000

08007818 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b088      	sub	sp, #32
 800781c:	af02      	add	r7, sp, #8
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	607a      	str	r2, [r7, #4]
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	460b      	mov	r3, r1
 8007826:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b08      	cmp	r3, #8
 8007832:	d006      	beq.n	8007842 <I2C_MasterRequestWrite+0x2a>
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d003      	beq.n	8007842 <I2C_MasterRequestWrite+0x2a>
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007840:	d108      	bne.n	8007854 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	e00b      	b.n	800786c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007858:	2b12      	cmp	r3, #18
 800785a:	d107      	bne.n	800786c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800786a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 f9c5 	bl	8007c08 <I2C_WaitOnFlagUntilTimeout>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00d      	beq.n	80078a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800788e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007892:	d103      	bne.n	800789c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800789a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e035      	b.n	800790c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078a8:	d108      	bne.n	80078bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078aa:	897b      	ldrh	r3, [r7, #10]
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	461a      	mov	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80078b8:	611a      	str	r2, [r3, #16]
 80078ba:	e01b      	b.n	80078f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80078bc:	897b      	ldrh	r3, [r7, #10]
 80078be:	11db      	asrs	r3, r3, #7
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	f003 0306 	and.w	r3, r3, #6
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f063 030f 	orn	r3, r3, #15
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	490e      	ldr	r1, [pc, #56]	@ (8007914 <I2C_MasterRequestWrite+0xfc>)
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 f9eb 	bl	8007cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e010      	b.n	800790c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80078ea:	897b      	ldrh	r3, [r7, #10]
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	4907      	ldr	r1, [pc, #28]	@ (8007918 <I2C_MasterRequestWrite+0x100>)
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 f9db 	bl	8007cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007900:	4603      	mov	r3, r0
 8007902:	2b00      	cmp	r3, #0
 8007904:	d001      	beq.n	800790a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e000      	b.n	800790c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	00010008 	.word	0x00010008
 8007918:	00010002 	.word	0x00010002

0800791c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af02      	add	r7, sp, #8
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	607a      	str	r2, [r7, #4]
 8007926:	603b      	str	r3, [r7, #0]
 8007928:	460b      	mov	r3, r1
 800792a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007930:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007940:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2b08      	cmp	r3, #8
 8007946:	d006      	beq.n	8007956 <I2C_MasterRequestRead+0x3a>
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d003      	beq.n	8007956 <I2C_MasterRequestRead+0x3a>
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007954:	d108      	bne.n	8007968 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	e00b      	b.n	8007980 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800796c:	2b11      	cmp	r3, #17
 800796e:	d107      	bne.n	8007980 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800797e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f000 f93b 	bl	8007c08 <I2C_WaitOnFlagUntilTimeout>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00d      	beq.n	80079b4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079a6:	d103      	bne.n	80079b0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e079      	b.n	8007aa8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80079bc:	d108      	bne.n	80079d0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80079be:	897b      	ldrh	r3, [r7, #10]
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	f043 0301 	orr.w	r3, r3, #1
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	611a      	str	r2, [r3, #16]
 80079ce:	e05f      	b.n	8007a90 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80079d0:	897b      	ldrh	r3, [r7, #10]
 80079d2:	11db      	asrs	r3, r3, #7
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	f003 0306 	and.w	r3, r3, #6
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	f063 030f 	orn	r3, r3, #15
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	4930      	ldr	r1, [pc, #192]	@ (8007ab0 <I2C_MasterRequestRead+0x194>)
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f000 f961 	bl	8007cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e054      	b.n	8007aa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80079fe:	897b      	ldrh	r3, [r7, #10]
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	4929      	ldr	r1, [pc, #164]	@ (8007ab4 <I2C_MasterRequestRead+0x198>)
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 f951 	bl	8007cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e044      	b.n	8007aa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a1e:	2300      	movs	r3, #0
 8007a20:	613b      	str	r3, [r7, #16]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	613b      	str	r3, [r7, #16]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	613b      	str	r3, [r7, #16]
 8007a32:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a42:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 f8d9 	bl	8007c08 <I2C_WaitOnFlagUntilTimeout>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00d      	beq.n	8007a78 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a6a:	d103      	bne.n	8007a74 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a72:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e017      	b.n	8007aa8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007a78:	897b      	ldrh	r3, [r7, #10]
 8007a7a:	11db      	asrs	r3, r3, #7
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	f003 0306 	and.w	r3, r3, #6
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	f063 030e 	orn	r3, r3, #14
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	4907      	ldr	r1, [pc, #28]	@ (8007ab4 <I2C_MasterRequestRead+0x198>)
 8007a96:	68f8      	ldr	r0, [r7, #12]
 8007a98:	f000 f90d 	bl	8007cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e000      	b.n	8007aa8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	00010008 	.word	0x00010008
 8007ab4:	00010002 	.word	0x00010002

08007ab8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ad0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ad2:	4b4b      	ldr	r3, [pc, #300]	@ (8007c00 <I2C_DMAAbort+0x148>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	08db      	lsrs	r3, r3, #3
 8007ad8:	4a4a      	ldr	r2, [pc, #296]	@ (8007c04 <I2C_DMAAbort+0x14c>)
 8007ada:	fba2 2303 	umull	r2, r3, r2, r3
 8007ade:	0a1a      	lsrs	r2, r3, #8
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	00da      	lsls	r2, r3, #3
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d106      	bne.n	8007b00 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af6:	f043 0220 	orr.w	r2, r3, #32
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8007afe:	e00a      	b.n	8007b16 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b14:	d0ea      	beq.n	8007aec <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b22:	2200      	movs	r2, #0
 8007b24:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b32:	2200      	movs	r2, #0
 8007b34:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b44:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d003      	beq.n	8007b5c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b58:	2200      	movs	r2, #0
 8007b5a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d003      	beq.n	8007b6c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b68:	2200      	movs	r2, #0
 8007b6a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f022 0201 	bic.w	r2, r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	2b60      	cmp	r3, #96	@ 0x60
 8007b86:	d10e      	bne.n	8007ba6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	2220      	movs	r2, #32
 8007b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007b9e:	6978      	ldr	r0, [r7, #20]
 8007ba0:	f7fe fccc 	bl	800653c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007ba4:	e027      	b.n	8007bf6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007ba6:	7cfb      	ldrb	r3, [r7, #19]
 8007ba8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007bac:	2b28      	cmp	r3, #40	@ 0x28
 8007bae:	d117      	bne.n	8007be0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0201 	orr.w	r2, r2, #1
 8007bbe:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007bce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2228      	movs	r2, #40	@ 0x28
 8007bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007bde:	e007      	b.n	8007bf0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007bf0:	6978      	ldr	r0, [r7, #20]
 8007bf2:	f7fe fc99 	bl	8006528 <HAL_I2C_ErrorCallback>
}
 8007bf6:	bf00      	nop
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	20000008 	.word	0x20000008
 8007c04:	14f8b589 	.word	0x14f8b589

08007c08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	4613      	mov	r3, r2
 8007c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c18:	e025      	b.n	8007c66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c20:	d021      	beq.n	8007c66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c22:	f7fc fde7 	bl	80047f4 <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d302      	bcc.n	8007c38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d116      	bne.n	8007c66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c52:	f043 0220 	orr.w	r2, r3, #32
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e023      	b.n	8007cae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	0c1b      	lsrs	r3, r3, #16
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d10d      	bne.n	8007c8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	43da      	mvns	r2, r3
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	bf0c      	ite	eq
 8007c82:	2301      	moveq	r3, #1
 8007c84:	2300      	movne	r3, #0
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	461a      	mov	r2, r3
 8007c8a:	e00c      	b.n	8007ca6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	43da      	mvns	r2, r3
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	4013      	ands	r3, r2
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	bf0c      	ite	eq
 8007c9e:	2301      	moveq	r3, #1
 8007ca0:	2300      	movne	r3, #0
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	79fb      	ldrb	r3, [r7, #7]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d0b6      	beq.n	8007c1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	60f8      	str	r0, [r7, #12]
 8007cbe:	60b9      	str	r1, [r7, #8]
 8007cc0:	607a      	str	r2, [r7, #4]
 8007cc2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007cc4:	e051      	b.n	8007d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cd4:	d123      	bne.n	8007d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007ce4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007cee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0a:	f043 0204 	orr.w	r2, r3, #4
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e046      	b.n	8007dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d24:	d021      	beq.n	8007d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d26:	f7fc fd65 	bl	80047f4 <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d302      	bcc.n	8007d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d116      	bne.n	8007d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d56:	f043 0220 	orr.w	r2, r3, #32
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e020      	b.n	8007dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	0c1b      	lsrs	r3, r3, #16
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d10c      	bne.n	8007d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	695b      	ldr	r3, [r3, #20]
 8007d7a:	43da      	mvns	r2, r3
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	bf14      	ite	ne
 8007d86:	2301      	movne	r3, #1
 8007d88:	2300      	moveq	r3, #0
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	e00b      	b.n	8007da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	43da      	mvns	r2, r3
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	4013      	ands	r3, r2
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	bf14      	ite	ne
 8007da0:	2301      	movne	r3, #1
 8007da2:	2300      	moveq	r3, #0
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d18d      	bne.n	8007cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007dc0:	e02d      	b.n	8007e1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f000 f900 	bl	8007fc8 <I2C_IsAcknowledgeFailed>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d001      	beq.n	8007dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e02d      	b.n	8007e2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dd8:	d021      	beq.n	8007e1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dda:	f7fc fd0b 	bl	80047f4 <HAL_GetTick>
 8007dde:	4602      	mov	r2, r0
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	1ad3      	subs	r3, r2, r3
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d302      	bcc.n	8007df0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d116      	bne.n	8007e1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e0a:	f043 0220 	orr.w	r2, r3, #32
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e007      	b.n	8007e2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e28:	2b80      	cmp	r3, #128	@ 0x80
 8007e2a:	d1ca      	bne.n	8007dc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007e42:	e02d      	b.n	8007ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 f8bf 	bl	8007fc8 <I2C_IsAcknowledgeFailed>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e02d      	b.n	8007eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e5a:	d021      	beq.n	8007ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e5c:	f7fc fcca 	bl	80047f4 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d302      	bcc.n	8007e72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d116      	bne.n	8007ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e8c:	f043 0220 	orr.w	r2, r3, #32
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e007      	b.n	8007eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	f003 0304 	and.w	r3, r3, #4
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d1ca      	bne.n	8007e44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ec4:	4b13      	ldr	r3, [pc, #76]	@ (8007f14 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	08db      	lsrs	r3, r3, #3
 8007eca:	4a13      	ldr	r2, [pc, #76]	@ (8007f18 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed0:	0a1a      	lsrs	r2, r3, #8
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3b01      	subs	r3, #1
 8007ede:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d107      	bne.n	8007ef6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eea:	f043 0220 	orr.w	r2, r3, #32
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e008      	b.n	8007f08 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f04:	d0e9      	beq.n	8007eda <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	20000008 	.word	0x20000008
 8007f18:	14f8b589 	.word	0x14f8b589

08007f1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007f28:	e042      	b.n	8007fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b10      	cmp	r3, #16
 8007f36:	d119      	bne.n	8007f6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f06f 0210 	mvn.w	r2, #16
 8007f40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2220      	movs	r2, #32
 8007f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e029      	b.n	8007fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f6c:	f7fc fc42 	bl	80047f4 <HAL_GetTick>
 8007f70:	4602      	mov	r2, r0
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d302      	bcc.n	8007f82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d116      	bne.n	8007fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f9c:	f043 0220 	orr.w	r2, r3, #32
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e007      	b.n	8007fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fba:	2b40      	cmp	r3, #64	@ 0x40
 8007fbc:	d1b5      	bne.n	8007f2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fde:	d11b      	bne.n	8008018 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007fe8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008004:	f043 0204 	orr.w	r2, r3, #4
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e000      	b.n	800801a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008032:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008036:	d103      	bne.n	8008040 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800803e:	e007      	b.n	8008050 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008044:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008048:	d102      	bne.n	8008050 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2208      	movs	r2, #8
 800804e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e267      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b00      	cmp	r3, #0
 8008078:	d075      	beq.n	8008166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800807a:	4b88      	ldr	r3, [pc, #544]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f003 030c 	and.w	r3, r3, #12
 8008082:	2b04      	cmp	r3, #4
 8008084:	d00c      	beq.n	80080a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008086:	4b85      	ldr	r3, [pc, #532]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800808e:	2b08      	cmp	r3, #8
 8008090:	d112      	bne.n	80080b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008092:	4b82      	ldr	r3, [pc, #520]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800809a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800809e:	d10b      	bne.n	80080b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080a0:	4b7e      	ldr	r3, [pc, #504]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d05b      	beq.n	8008164 <HAL_RCC_OscConfig+0x108>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d157      	bne.n	8008164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e242      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080c0:	d106      	bne.n	80080d0 <HAL_RCC_OscConfig+0x74>
 80080c2:	4b76      	ldr	r3, [pc, #472]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a75      	ldr	r2, [pc, #468]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 80080c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080cc:	6013      	str	r3, [r2, #0]
 80080ce:	e01d      	b.n	800810c <HAL_RCC_OscConfig+0xb0>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080d8:	d10c      	bne.n	80080f4 <HAL_RCC_OscConfig+0x98>
 80080da:	4b70      	ldr	r3, [pc, #448]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a6f      	ldr	r2, [pc, #444]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 80080e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80080e4:	6013      	str	r3, [r2, #0]
 80080e6:	4b6d      	ldr	r3, [pc, #436]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a6c      	ldr	r2, [pc, #432]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 80080ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	e00b      	b.n	800810c <HAL_RCC_OscConfig+0xb0>
 80080f4:	4b69      	ldr	r3, [pc, #420]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a68      	ldr	r2, [pc, #416]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 80080fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	4b66      	ldr	r3, [pc, #408]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a65      	ldr	r2, [pc, #404]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 8008106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800810a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d013      	beq.n	800813c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008114:	f7fc fb6e 	bl	80047f4 <HAL_GetTick>
 8008118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800811a:	e008      	b.n	800812e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800811c:	f7fc fb6a 	bl	80047f4 <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	2b64      	cmp	r3, #100	@ 0x64
 8008128:	d901      	bls.n	800812e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e207      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800812e:	4b5b      	ldr	r3, [pc, #364]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d0f0      	beq.n	800811c <HAL_RCC_OscConfig+0xc0>
 800813a:	e014      	b.n	8008166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800813c:	f7fc fb5a 	bl	80047f4 <HAL_GetTick>
 8008140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008142:	e008      	b.n	8008156 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008144:	f7fc fb56 	bl	80047f4 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	2b64      	cmp	r3, #100	@ 0x64
 8008150:	d901      	bls.n	8008156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e1f3      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008156:	4b51      	ldr	r3, [pc, #324]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1f0      	bne.n	8008144 <HAL_RCC_OscConfig+0xe8>
 8008162:	e000      	b.n	8008166 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0302 	and.w	r3, r3, #2
 800816e:	2b00      	cmp	r3, #0
 8008170:	d063      	beq.n	800823a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008172:	4b4a      	ldr	r3, [pc, #296]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	f003 030c 	and.w	r3, r3, #12
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00b      	beq.n	8008196 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800817e:	4b47      	ldr	r3, [pc, #284]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008186:	2b08      	cmp	r3, #8
 8008188:	d11c      	bne.n	80081c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800818a:	4b44      	ldr	r3, [pc, #272]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d116      	bne.n	80081c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008196:	4b41      	ldr	r3, [pc, #260]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d005      	beq.n	80081ae <HAL_RCC_OscConfig+0x152>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d001      	beq.n	80081ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e1c7      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081ae:	4b3b      	ldr	r3, [pc, #236]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	4937      	ldr	r1, [pc, #220]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081c2:	e03a      	b.n	800823a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d020      	beq.n	800820e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081cc:	4b34      	ldr	r3, [pc, #208]	@ (80082a0 <HAL_RCC_OscConfig+0x244>)
 80081ce:	2201      	movs	r2, #1
 80081d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d2:	f7fc fb0f 	bl	80047f4 <HAL_GetTick>
 80081d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081d8:	e008      	b.n	80081ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081da:	f7fc fb0b 	bl	80047f4 <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d901      	bls.n	80081ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e1a8      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081ec:	4b2b      	ldr	r3, [pc, #172]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d0f0      	beq.n	80081da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081f8:	4b28      	ldr	r3, [pc, #160]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	4925      	ldr	r1, [pc, #148]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 8008208:	4313      	orrs	r3, r2
 800820a:	600b      	str	r3, [r1, #0]
 800820c:	e015      	b.n	800823a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800820e:	4b24      	ldr	r3, [pc, #144]	@ (80082a0 <HAL_RCC_OscConfig+0x244>)
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008214:	f7fc faee 	bl	80047f4 <HAL_GetTick>
 8008218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800821a:	e008      	b.n	800822e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800821c:	f7fc faea 	bl	80047f4 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b02      	cmp	r3, #2
 8008228:	d901      	bls.n	800822e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e187      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800822e:	4b1b      	ldr	r3, [pc, #108]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1f0      	bne.n	800821c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0308 	and.w	r3, r3, #8
 8008242:	2b00      	cmp	r3, #0
 8008244:	d036      	beq.n	80082b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d016      	beq.n	800827c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800824e:	4b15      	ldr	r3, [pc, #84]	@ (80082a4 <HAL_RCC_OscConfig+0x248>)
 8008250:	2201      	movs	r2, #1
 8008252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008254:	f7fc face 	bl	80047f4 <HAL_GetTick>
 8008258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800825a:	e008      	b.n	800826e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800825c:	f7fc faca 	bl	80047f4 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b02      	cmp	r3, #2
 8008268:	d901      	bls.n	800826e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e167      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800826e:	4b0b      	ldr	r3, [pc, #44]	@ (800829c <HAL_RCC_OscConfig+0x240>)
 8008270:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008272:	f003 0302 	and.w	r3, r3, #2
 8008276:	2b00      	cmp	r3, #0
 8008278:	d0f0      	beq.n	800825c <HAL_RCC_OscConfig+0x200>
 800827a:	e01b      	b.n	80082b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800827c:	4b09      	ldr	r3, [pc, #36]	@ (80082a4 <HAL_RCC_OscConfig+0x248>)
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008282:	f7fc fab7 	bl	80047f4 <HAL_GetTick>
 8008286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008288:	e00e      	b.n	80082a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800828a:	f7fc fab3 	bl	80047f4 <HAL_GetTick>
 800828e:	4602      	mov	r2, r0
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	1ad3      	subs	r3, r2, r3
 8008294:	2b02      	cmp	r3, #2
 8008296:	d907      	bls.n	80082a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e150      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
 800829c:	40023800 	.word	0x40023800
 80082a0:	42470000 	.word	0x42470000
 80082a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082a8:	4b88      	ldr	r3, [pc, #544]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 80082aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1ea      	bne.n	800828a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f003 0304 	and.w	r3, r3, #4
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f000 8097 	beq.w	80083f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082c2:	2300      	movs	r3, #0
 80082c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082c6:	4b81      	ldr	r3, [pc, #516]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 80082c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10f      	bne.n	80082f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082d2:	2300      	movs	r3, #0
 80082d4:	60bb      	str	r3, [r7, #8]
 80082d6:	4b7d      	ldr	r3, [pc, #500]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 80082d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082da:	4a7c      	ldr	r2, [pc, #496]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 80082dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80082e2:	4b7a      	ldr	r3, [pc, #488]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 80082e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082ea:	60bb      	str	r3, [r7, #8]
 80082ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082ee:	2301      	movs	r3, #1
 80082f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082f2:	4b77      	ldr	r3, [pc, #476]	@ (80084d0 <HAL_RCC_OscConfig+0x474>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d118      	bne.n	8008330 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082fe:	4b74      	ldr	r3, [pc, #464]	@ (80084d0 <HAL_RCC_OscConfig+0x474>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a73      	ldr	r2, [pc, #460]	@ (80084d0 <HAL_RCC_OscConfig+0x474>)
 8008304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800830a:	f7fc fa73 	bl	80047f4 <HAL_GetTick>
 800830e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008310:	e008      	b.n	8008324 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008312:	f7fc fa6f 	bl	80047f4 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	2b02      	cmp	r3, #2
 800831e:	d901      	bls.n	8008324 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e10c      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008324:	4b6a      	ldr	r3, [pc, #424]	@ (80084d0 <HAL_RCC_OscConfig+0x474>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0f0      	beq.n	8008312 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d106      	bne.n	8008346 <HAL_RCC_OscConfig+0x2ea>
 8008338:	4b64      	ldr	r3, [pc, #400]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 800833a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800833c:	4a63      	ldr	r2, [pc, #396]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 800833e:	f043 0301 	orr.w	r3, r3, #1
 8008342:	6713      	str	r3, [r2, #112]	@ 0x70
 8008344:	e01c      	b.n	8008380 <HAL_RCC_OscConfig+0x324>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	2b05      	cmp	r3, #5
 800834c:	d10c      	bne.n	8008368 <HAL_RCC_OscConfig+0x30c>
 800834e:	4b5f      	ldr	r3, [pc, #380]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 8008350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008352:	4a5e      	ldr	r2, [pc, #376]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 8008354:	f043 0304 	orr.w	r3, r3, #4
 8008358:	6713      	str	r3, [r2, #112]	@ 0x70
 800835a:	4b5c      	ldr	r3, [pc, #368]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 800835c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800835e:	4a5b      	ldr	r2, [pc, #364]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 8008360:	f043 0301 	orr.w	r3, r3, #1
 8008364:	6713      	str	r3, [r2, #112]	@ 0x70
 8008366:	e00b      	b.n	8008380 <HAL_RCC_OscConfig+0x324>
 8008368:	4b58      	ldr	r3, [pc, #352]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 800836a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800836c:	4a57      	ldr	r2, [pc, #348]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 800836e:	f023 0301 	bic.w	r3, r3, #1
 8008372:	6713      	str	r3, [r2, #112]	@ 0x70
 8008374:	4b55      	ldr	r3, [pc, #340]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 8008376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008378:	4a54      	ldr	r2, [pc, #336]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 800837a:	f023 0304 	bic.w	r3, r3, #4
 800837e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d015      	beq.n	80083b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008388:	f7fc fa34 	bl	80047f4 <HAL_GetTick>
 800838c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800838e:	e00a      	b.n	80083a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008390:	f7fc fa30 	bl	80047f4 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800839e:	4293      	cmp	r3, r2
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e0cb      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083a6:	4b49      	ldr	r3, [pc, #292]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 80083a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d0ee      	beq.n	8008390 <HAL_RCC_OscConfig+0x334>
 80083b2:	e014      	b.n	80083de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083b4:	f7fc fa1e 	bl	80047f4 <HAL_GetTick>
 80083b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083ba:	e00a      	b.n	80083d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083bc:	f7fc fa1a 	bl	80047f4 <HAL_GetTick>
 80083c0:	4602      	mov	r2, r0
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d901      	bls.n	80083d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e0b5      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083d2:	4b3e      	ldr	r3, [pc, #248]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 80083d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1ee      	bne.n	80083bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083de:	7dfb      	ldrb	r3, [r7, #23]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d105      	bne.n	80083f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083e4:	4b39      	ldr	r3, [pc, #228]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 80083e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e8:	4a38      	ldr	r2, [pc, #224]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 80083ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 80a1 	beq.w	800853c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083fa:	4b34      	ldr	r3, [pc, #208]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 80083fc:	689b      	ldr	r3, [r3, #8]
 80083fe:	f003 030c 	and.w	r3, r3, #12
 8008402:	2b08      	cmp	r3, #8
 8008404:	d05c      	beq.n	80084c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	2b02      	cmp	r3, #2
 800840c:	d141      	bne.n	8008492 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800840e:	4b31      	ldr	r3, [pc, #196]	@ (80084d4 <HAL_RCC_OscConfig+0x478>)
 8008410:	2200      	movs	r2, #0
 8008412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008414:	f7fc f9ee 	bl	80047f4 <HAL_GetTick>
 8008418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800841a:	e008      	b.n	800842e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800841c:	f7fc f9ea 	bl	80047f4 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	2b02      	cmp	r3, #2
 8008428:	d901      	bls.n	800842e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e087      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800842e:	4b27      	ldr	r3, [pc, #156]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1f0      	bne.n	800841c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	69da      	ldr	r2, [r3, #28]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	431a      	orrs	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008448:	019b      	lsls	r3, r3, #6
 800844a:	431a      	orrs	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008450:	085b      	lsrs	r3, r3, #1
 8008452:	3b01      	subs	r3, #1
 8008454:	041b      	lsls	r3, r3, #16
 8008456:	431a      	orrs	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845c:	061b      	lsls	r3, r3, #24
 800845e:	491b      	ldr	r1, [pc, #108]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 8008460:	4313      	orrs	r3, r2
 8008462:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008464:	4b1b      	ldr	r3, [pc, #108]	@ (80084d4 <HAL_RCC_OscConfig+0x478>)
 8008466:	2201      	movs	r2, #1
 8008468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800846a:	f7fc f9c3 	bl	80047f4 <HAL_GetTick>
 800846e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008470:	e008      	b.n	8008484 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008472:	f7fc f9bf 	bl	80047f4 <HAL_GetTick>
 8008476:	4602      	mov	r2, r0
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	2b02      	cmp	r3, #2
 800847e:	d901      	bls.n	8008484 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008480:	2303      	movs	r3, #3
 8008482:	e05c      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008484:	4b11      	ldr	r3, [pc, #68]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d0f0      	beq.n	8008472 <HAL_RCC_OscConfig+0x416>
 8008490:	e054      	b.n	800853c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008492:	4b10      	ldr	r3, [pc, #64]	@ (80084d4 <HAL_RCC_OscConfig+0x478>)
 8008494:	2200      	movs	r2, #0
 8008496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008498:	f7fc f9ac 	bl	80047f4 <HAL_GetTick>
 800849c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800849e:	e008      	b.n	80084b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084a0:	f7fc f9a8 	bl	80047f4 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e045      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084b2:	4b06      	ldr	r3, [pc, #24]	@ (80084cc <HAL_RCC_OscConfig+0x470>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1f0      	bne.n	80084a0 <HAL_RCC_OscConfig+0x444>
 80084be:	e03d      	b.n	800853c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d107      	bne.n	80084d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e038      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
 80084cc:	40023800 	.word	0x40023800
 80084d0:	40007000 	.word	0x40007000
 80084d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80084d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008548 <HAL_RCC_OscConfig+0x4ec>)
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d028      	beq.n	8008538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d121      	bne.n	8008538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084fe:	429a      	cmp	r2, r3
 8008500:	d11a      	bne.n	8008538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008508:	4013      	ands	r3, r2
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800850e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008510:	4293      	cmp	r3, r2
 8008512:	d111      	bne.n	8008538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800851e:	085b      	lsrs	r3, r3, #1
 8008520:	3b01      	subs	r3, #1
 8008522:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008524:	429a      	cmp	r2, r3
 8008526:	d107      	bne.n	8008538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008532:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008534:	429a      	cmp	r2, r3
 8008536:	d001      	beq.n	800853c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e000      	b.n	800853e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	40023800 	.word	0x40023800

0800854c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d101      	bne.n	8008560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e0cc      	b.n	80086fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008560:	4b68      	ldr	r3, [pc, #416]	@ (8008704 <HAL_RCC_ClockConfig+0x1b8>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0307 	and.w	r3, r3, #7
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	429a      	cmp	r2, r3
 800856c:	d90c      	bls.n	8008588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800856e:	4b65      	ldr	r3, [pc, #404]	@ (8008704 <HAL_RCC_ClockConfig+0x1b8>)
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	b2d2      	uxtb	r2, r2
 8008574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008576:	4b63      	ldr	r3, [pc, #396]	@ (8008704 <HAL_RCC_ClockConfig+0x1b8>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0307 	and.w	r3, r3, #7
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	429a      	cmp	r2, r3
 8008582:	d001      	beq.n	8008588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e0b8      	b.n	80086fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0302 	and.w	r3, r3, #2
 8008590:	2b00      	cmp	r3, #0
 8008592:	d020      	beq.n	80085d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	2b00      	cmp	r3, #0
 800859e:	d005      	beq.n	80085ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085a0:	4b59      	ldr	r3, [pc, #356]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	4a58      	ldr	r2, [pc, #352]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 80085a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80085aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0308 	and.w	r3, r3, #8
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d005      	beq.n	80085c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085b8:	4b53      	ldr	r3, [pc, #332]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	4a52      	ldr	r2, [pc, #328]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 80085be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80085c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085c4:	4b50      	ldr	r3, [pc, #320]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	494d      	ldr	r1, [pc, #308]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d044      	beq.n	800866c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d107      	bne.n	80085fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085ea:	4b47      	ldr	r3, [pc, #284]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d119      	bne.n	800862a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e07f      	b.n	80086fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d003      	beq.n	800860a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008606:	2b03      	cmp	r3, #3
 8008608:	d107      	bne.n	800861a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800860a:	4b3f      	ldr	r3, [pc, #252]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d109      	bne.n	800862a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e06f      	b.n	80086fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800861a:	4b3b      	ldr	r3, [pc, #236]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0302 	and.w	r3, r3, #2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e067      	b.n	80086fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800862a:	4b37      	ldr	r3, [pc, #220]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f023 0203 	bic.w	r2, r3, #3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	4934      	ldr	r1, [pc, #208]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 8008638:	4313      	orrs	r3, r2
 800863a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800863c:	f7fc f8da 	bl	80047f4 <HAL_GetTick>
 8008640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008642:	e00a      	b.n	800865a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008644:	f7fc f8d6 	bl	80047f4 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008652:	4293      	cmp	r3, r2
 8008654:	d901      	bls.n	800865a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008656:	2303      	movs	r3, #3
 8008658:	e04f      	b.n	80086fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800865a:	4b2b      	ldr	r3, [pc, #172]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f003 020c 	and.w	r2, r3, #12
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	429a      	cmp	r2, r3
 800866a:	d1eb      	bne.n	8008644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800866c:	4b25      	ldr	r3, [pc, #148]	@ (8008704 <HAL_RCC_ClockConfig+0x1b8>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0307 	and.w	r3, r3, #7
 8008674:	683a      	ldr	r2, [r7, #0]
 8008676:	429a      	cmp	r2, r3
 8008678:	d20c      	bcs.n	8008694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800867a:	4b22      	ldr	r3, [pc, #136]	@ (8008704 <HAL_RCC_ClockConfig+0x1b8>)
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	b2d2      	uxtb	r2, r2
 8008680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008682:	4b20      	ldr	r3, [pc, #128]	@ (8008704 <HAL_RCC_ClockConfig+0x1b8>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 0307 	and.w	r3, r3, #7
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	429a      	cmp	r2, r3
 800868e:	d001      	beq.n	8008694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e032      	b.n	80086fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f003 0304 	and.w	r3, r3, #4
 800869c:	2b00      	cmp	r3, #0
 800869e:	d008      	beq.n	80086b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086a0:	4b19      	ldr	r3, [pc, #100]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	4916      	ldr	r1, [pc, #88]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0308 	and.w	r3, r3, #8
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d009      	beq.n	80086d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086be:	4b12      	ldr	r3, [pc, #72]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	00db      	lsls	r3, r3, #3
 80086cc:	490e      	ldr	r1, [pc, #56]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80086d2:	f000 f821 	bl	8008718 <HAL_RCC_GetSysClockFreq>
 80086d6:	4602      	mov	r2, r0
 80086d8:	4b0b      	ldr	r3, [pc, #44]	@ (8008708 <HAL_RCC_ClockConfig+0x1bc>)
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	091b      	lsrs	r3, r3, #4
 80086de:	f003 030f 	and.w	r3, r3, #15
 80086e2:	490a      	ldr	r1, [pc, #40]	@ (800870c <HAL_RCC_ClockConfig+0x1c0>)
 80086e4:	5ccb      	ldrb	r3, [r1, r3]
 80086e6:	fa22 f303 	lsr.w	r3, r2, r3
 80086ea:	4a09      	ldr	r2, [pc, #36]	@ (8008710 <HAL_RCC_ClockConfig+0x1c4>)
 80086ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80086ee:	4b09      	ldr	r3, [pc, #36]	@ (8008714 <HAL_RCC_ClockConfig+0x1c8>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fb fc06 	bl	8003f04 <HAL_InitTick>

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	40023c00 	.word	0x40023c00
 8008708:	40023800 	.word	0x40023800
 800870c:	0801dee0 	.word	0x0801dee0
 8008710:	20000008 	.word	0x20000008
 8008714:	20000020 	.word	0x20000020

08008718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800871c:	b094      	sub	sp, #80	@ 0x50
 800871e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	647b      	str	r3, [r7, #68]	@ 0x44
 8008724:	2300      	movs	r3, #0
 8008726:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008728:	2300      	movs	r3, #0
 800872a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800872c:	2300      	movs	r3, #0
 800872e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008730:	4b79      	ldr	r3, [pc, #484]	@ (8008918 <HAL_RCC_GetSysClockFreq+0x200>)
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f003 030c 	and.w	r3, r3, #12
 8008738:	2b08      	cmp	r3, #8
 800873a:	d00d      	beq.n	8008758 <HAL_RCC_GetSysClockFreq+0x40>
 800873c:	2b08      	cmp	r3, #8
 800873e:	f200 80e1 	bhi.w	8008904 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <HAL_RCC_GetSysClockFreq+0x34>
 8008746:	2b04      	cmp	r3, #4
 8008748:	d003      	beq.n	8008752 <HAL_RCC_GetSysClockFreq+0x3a>
 800874a:	e0db      	b.n	8008904 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800874c:	4b73      	ldr	r3, [pc, #460]	@ (800891c <HAL_RCC_GetSysClockFreq+0x204>)
 800874e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8008750:	e0db      	b.n	800890a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008752:	4b73      	ldr	r3, [pc, #460]	@ (8008920 <HAL_RCC_GetSysClockFreq+0x208>)
 8008754:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008756:	e0d8      	b.n	800890a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008758:	4b6f      	ldr	r3, [pc, #444]	@ (8008918 <HAL_RCC_GetSysClockFreq+0x200>)
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008760:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008762:	4b6d      	ldr	r3, [pc, #436]	@ (8008918 <HAL_RCC_GetSysClockFreq+0x200>)
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d063      	beq.n	8008836 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800876e:	4b6a      	ldr	r3, [pc, #424]	@ (8008918 <HAL_RCC_GetSysClockFreq+0x200>)
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	099b      	lsrs	r3, r3, #6
 8008774:	2200      	movs	r2, #0
 8008776:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008778:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800877a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008780:	633b      	str	r3, [r7, #48]	@ 0x30
 8008782:	2300      	movs	r3, #0
 8008784:	637b      	str	r3, [r7, #52]	@ 0x34
 8008786:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800878a:	4622      	mov	r2, r4
 800878c:	462b      	mov	r3, r5
 800878e:	f04f 0000 	mov.w	r0, #0
 8008792:	f04f 0100 	mov.w	r1, #0
 8008796:	0159      	lsls	r1, r3, #5
 8008798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800879c:	0150      	lsls	r0, r2, #5
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	4621      	mov	r1, r4
 80087a4:	1a51      	subs	r1, r2, r1
 80087a6:	6139      	str	r1, [r7, #16]
 80087a8:	4629      	mov	r1, r5
 80087aa:	eb63 0301 	sbc.w	r3, r3, r1
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	f04f 0200 	mov.w	r2, #0
 80087b4:	f04f 0300 	mov.w	r3, #0
 80087b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80087bc:	4659      	mov	r1, fp
 80087be:	018b      	lsls	r3, r1, #6
 80087c0:	4651      	mov	r1, sl
 80087c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80087c6:	4651      	mov	r1, sl
 80087c8:	018a      	lsls	r2, r1, #6
 80087ca:	4651      	mov	r1, sl
 80087cc:	ebb2 0801 	subs.w	r8, r2, r1
 80087d0:	4659      	mov	r1, fp
 80087d2:	eb63 0901 	sbc.w	r9, r3, r1
 80087d6:	f04f 0200 	mov.w	r2, #0
 80087da:	f04f 0300 	mov.w	r3, #0
 80087de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087ea:	4690      	mov	r8, r2
 80087ec:	4699      	mov	r9, r3
 80087ee:	4623      	mov	r3, r4
 80087f0:	eb18 0303 	adds.w	r3, r8, r3
 80087f4:	60bb      	str	r3, [r7, #8]
 80087f6:	462b      	mov	r3, r5
 80087f8:	eb49 0303 	adc.w	r3, r9, r3
 80087fc:	60fb      	str	r3, [r7, #12]
 80087fe:	f04f 0200 	mov.w	r2, #0
 8008802:	f04f 0300 	mov.w	r3, #0
 8008806:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800880a:	4629      	mov	r1, r5
 800880c:	024b      	lsls	r3, r1, #9
 800880e:	4621      	mov	r1, r4
 8008810:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008814:	4621      	mov	r1, r4
 8008816:	024a      	lsls	r2, r1, #9
 8008818:	4610      	mov	r0, r2
 800881a:	4619      	mov	r1, r3
 800881c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800881e:	2200      	movs	r2, #0
 8008820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008822:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008824:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008828:	f7f8 fa96 	bl	8000d58 <__aeabi_uldivmod>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4613      	mov	r3, r2
 8008832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008834:	e058      	b.n	80088e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008836:	4b38      	ldr	r3, [pc, #224]	@ (8008918 <HAL_RCC_GetSysClockFreq+0x200>)
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	099b      	lsrs	r3, r3, #6
 800883c:	2200      	movs	r2, #0
 800883e:	4618      	mov	r0, r3
 8008840:	4611      	mov	r1, r2
 8008842:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008846:	623b      	str	r3, [r7, #32]
 8008848:	2300      	movs	r3, #0
 800884a:	627b      	str	r3, [r7, #36]	@ 0x24
 800884c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008850:	4642      	mov	r2, r8
 8008852:	464b      	mov	r3, r9
 8008854:	f04f 0000 	mov.w	r0, #0
 8008858:	f04f 0100 	mov.w	r1, #0
 800885c:	0159      	lsls	r1, r3, #5
 800885e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008862:	0150      	lsls	r0, r2, #5
 8008864:	4602      	mov	r2, r0
 8008866:	460b      	mov	r3, r1
 8008868:	4641      	mov	r1, r8
 800886a:	ebb2 0a01 	subs.w	sl, r2, r1
 800886e:	4649      	mov	r1, r9
 8008870:	eb63 0b01 	sbc.w	fp, r3, r1
 8008874:	f04f 0200 	mov.w	r2, #0
 8008878:	f04f 0300 	mov.w	r3, #0
 800887c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008880:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008884:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008888:	ebb2 040a 	subs.w	r4, r2, sl
 800888c:	eb63 050b 	sbc.w	r5, r3, fp
 8008890:	f04f 0200 	mov.w	r2, #0
 8008894:	f04f 0300 	mov.w	r3, #0
 8008898:	00eb      	lsls	r3, r5, #3
 800889a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800889e:	00e2      	lsls	r2, r4, #3
 80088a0:	4614      	mov	r4, r2
 80088a2:	461d      	mov	r5, r3
 80088a4:	4643      	mov	r3, r8
 80088a6:	18e3      	adds	r3, r4, r3
 80088a8:	603b      	str	r3, [r7, #0]
 80088aa:	464b      	mov	r3, r9
 80088ac:	eb45 0303 	adc.w	r3, r5, r3
 80088b0:	607b      	str	r3, [r7, #4]
 80088b2:	f04f 0200 	mov.w	r2, #0
 80088b6:	f04f 0300 	mov.w	r3, #0
 80088ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80088be:	4629      	mov	r1, r5
 80088c0:	028b      	lsls	r3, r1, #10
 80088c2:	4621      	mov	r1, r4
 80088c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80088c8:	4621      	mov	r1, r4
 80088ca:	028a      	lsls	r2, r1, #10
 80088cc:	4610      	mov	r0, r2
 80088ce:	4619      	mov	r1, r3
 80088d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088d2:	2200      	movs	r2, #0
 80088d4:	61bb      	str	r3, [r7, #24]
 80088d6:	61fa      	str	r2, [r7, #28]
 80088d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088dc:	f7f8 fa3c 	bl	8000d58 <__aeabi_uldivmod>
 80088e0:	4602      	mov	r2, r0
 80088e2:	460b      	mov	r3, r1
 80088e4:	4613      	mov	r3, r2
 80088e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80088e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008918 <HAL_RCC_GetSysClockFreq+0x200>)
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	0c1b      	lsrs	r3, r3, #16
 80088ee:	f003 0303 	and.w	r3, r3, #3
 80088f2:	3301      	adds	r3, #1
 80088f4:	005b      	lsls	r3, r3, #1
 80088f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80088f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80088fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008900:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008902:	e002      	b.n	800890a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008904:	4b05      	ldr	r3, [pc, #20]	@ (800891c <HAL_RCC_GetSysClockFreq+0x204>)
 8008906:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800890a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800890c:	4618      	mov	r0, r3
 800890e:	3750      	adds	r7, #80	@ 0x50
 8008910:	46bd      	mov	sp, r7
 8008912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008916:	bf00      	nop
 8008918:	40023800 	.word	0x40023800
 800891c:	00f42400 	.word	0x00f42400
 8008920:	007a1200 	.word	0x007a1200

08008924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008924:	b480      	push	{r7}
 8008926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008928:	4b03      	ldr	r3, [pc, #12]	@ (8008938 <HAL_RCC_GetHCLKFreq+0x14>)
 800892a:	681b      	ldr	r3, [r3, #0]
}
 800892c:	4618      	mov	r0, r3
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop
 8008938:	20000008 	.word	0x20000008

0800893c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008940:	f7ff fff0 	bl	8008924 <HAL_RCC_GetHCLKFreq>
 8008944:	4602      	mov	r2, r0
 8008946:	4b05      	ldr	r3, [pc, #20]	@ (800895c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	0a9b      	lsrs	r3, r3, #10
 800894c:	f003 0307 	and.w	r3, r3, #7
 8008950:	4903      	ldr	r1, [pc, #12]	@ (8008960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008952:	5ccb      	ldrb	r3, [r1, r3]
 8008954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008958:	4618      	mov	r0, r3
 800895a:	bd80      	pop	{r7, pc}
 800895c:	40023800 	.word	0x40023800
 8008960:	0801def0 	.word	0x0801def0

08008964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008968:	f7ff ffdc 	bl	8008924 <HAL_RCC_GetHCLKFreq>
 800896c:	4602      	mov	r2, r0
 800896e:	4b05      	ldr	r3, [pc, #20]	@ (8008984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	0b5b      	lsrs	r3, r3, #13
 8008974:	f003 0307 	and.w	r3, r3, #7
 8008978:	4903      	ldr	r1, [pc, #12]	@ (8008988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800897a:	5ccb      	ldrb	r3, [r1, r3]
 800897c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008980:	4618      	mov	r0, r3
 8008982:	bd80      	pop	{r7, pc}
 8008984:	40023800 	.word	0x40023800
 8008988:	0801def0 	.word	0x0801def0

0800898c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	220f      	movs	r2, #15
 800899a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800899c:	4b12      	ldr	r3, [pc, #72]	@ (80089e8 <HAL_RCC_GetClockConfig+0x5c>)
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	f003 0203 	and.w	r2, r3, #3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80089a8:	4b0f      	ldr	r3, [pc, #60]	@ (80089e8 <HAL_RCC_GetClockConfig+0x5c>)
 80089aa:	689b      	ldr	r3, [r3, #8]
 80089ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80089b4:	4b0c      	ldr	r3, [pc, #48]	@ (80089e8 <HAL_RCC_GetClockConfig+0x5c>)
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80089c0:	4b09      	ldr	r3, [pc, #36]	@ (80089e8 <HAL_RCC_GetClockConfig+0x5c>)
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	08db      	lsrs	r3, r3, #3
 80089c6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80089ce:	4b07      	ldr	r3, [pc, #28]	@ (80089ec <HAL_RCC_GetClockConfig+0x60>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0207 	and.w	r2, r3, #7
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	601a      	str	r2, [r3, #0]
}
 80089da:	bf00      	nop
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	40023800 	.word	0x40023800
 80089ec:	40023c00 	.word	0x40023c00

080089f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e041      	b.n	8008a86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d106      	bne.n	8008a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f839 	bl	8008a8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	4610      	mov	r0, r2
 8008a30:	f000 fc7a 	bl	8009328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b083      	sub	sp, #12
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008a96:	bf00      	nop
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
	...

08008aa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d001      	beq.n	8008abc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e044      	b.n	8008b46 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68da      	ldr	r2, [r3, #12]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f042 0201 	orr.w	r2, r2, #1
 8008ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a1e      	ldr	r2, [pc, #120]	@ (8008b54 <HAL_TIM_Base_Start_IT+0xb0>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d018      	beq.n	8008b10 <HAL_TIM_Base_Start_IT+0x6c>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ae6:	d013      	beq.n	8008b10 <HAL_TIM_Base_Start_IT+0x6c>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a1a      	ldr	r2, [pc, #104]	@ (8008b58 <HAL_TIM_Base_Start_IT+0xb4>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d00e      	beq.n	8008b10 <HAL_TIM_Base_Start_IT+0x6c>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a19      	ldr	r2, [pc, #100]	@ (8008b5c <HAL_TIM_Base_Start_IT+0xb8>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d009      	beq.n	8008b10 <HAL_TIM_Base_Start_IT+0x6c>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a17      	ldr	r2, [pc, #92]	@ (8008b60 <HAL_TIM_Base_Start_IT+0xbc>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d004      	beq.n	8008b10 <HAL_TIM_Base_Start_IT+0x6c>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a16      	ldr	r2, [pc, #88]	@ (8008b64 <HAL_TIM_Base_Start_IT+0xc0>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d111      	bne.n	8008b34 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2b06      	cmp	r3, #6
 8008b20:	d010      	beq.n	8008b44 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f042 0201 	orr.w	r2, r2, #1
 8008b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b32:	e007      	b.n	8008b44 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f042 0201 	orr.w	r2, r2, #1
 8008b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3714      	adds	r7, #20
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop
 8008b54:	40010000 	.word	0x40010000
 8008b58:	40000400 	.word	0x40000400
 8008b5c:	40000800 	.word	0x40000800
 8008b60:	40000c00 	.word	0x40000c00
 8008b64:	40014000 	.word	0x40014000

08008b68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d109      	bne.n	8008b8c <HAL_TIM_PWM_Start+0x24>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	bf14      	ite	ne
 8008b84:	2301      	movne	r3, #1
 8008b86:	2300      	moveq	r3, #0
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	e022      	b.n	8008bd2 <HAL_TIM_PWM_Start+0x6a>
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d109      	bne.n	8008ba6 <HAL_TIM_PWM_Start+0x3e>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	bf14      	ite	ne
 8008b9e:	2301      	movne	r3, #1
 8008ba0:	2300      	moveq	r3, #0
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	e015      	b.n	8008bd2 <HAL_TIM_PWM_Start+0x6a>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b08      	cmp	r3, #8
 8008baa:	d109      	bne.n	8008bc0 <HAL_TIM_PWM_Start+0x58>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	bf14      	ite	ne
 8008bb8:	2301      	movne	r3, #1
 8008bba:	2300      	moveq	r3, #0
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	e008      	b.n	8008bd2 <HAL_TIM_PWM_Start+0x6a>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	bf14      	ite	ne
 8008bcc:	2301      	movne	r3, #1
 8008bce:	2300      	moveq	r3, #0
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e068      	b.n	8008cac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d104      	bne.n	8008bea <HAL_TIM_PWM_Start+0x82>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2202      	movs	r2, #2
 8008be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008be8:	e013      	b.n	8008c12 <HAL_TIM_PWM_Start+0xaa>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b04      	cmp	r3, #4
 8008bee:	d104      	bne.n	8008bfa <HAL_TIM_PWM_Start+0x92>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2202      	movs	r2, #2
 8008bf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bf8:	e00b      	b.n	8008c12 <HAL_TIM_PWM_Start+0xaa>
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	2b08      	cmp	r3, #8
 8008bfe:	d104      	bne.n	8008c0a <HAL_TIM_PWM_Start+0xa2>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2202      	movs	r2, #2
 8008c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c08:	e003      	b.n	8008c12 <HAL_TIM_PWM_Start+0xaa>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2202      	movs	r2, #2
 8008c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2201      	movs	r2, #1
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 fd90 	bl	8009740 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a23      	ldr	r2, [pc, #140]	@ (8008cb4 <HAL_TIM_PWM_Start+0x14c>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d107      	bne.n	8008c3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8008cb4 <HAL_TIM_PWM_Start+0x14c>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d018      	beq.n	8008c76 <HAL_TIM_PWM_Start+0x10e>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c4c:	d013      	beq.n	8008c76 <HAL_TIM_PWM_Start+0x10e>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a19      	ldr	r2, [pc, #100]	@ (8008cb8 <HAL_TIM_PWM_Start+0x150>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d00e      	beq.n	8008c76 <HAL_TIM_PWM_Start+0x10e>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a17      	ldr	r2, [pc, #92]	@ (8008cbc <HAL_TIM_PWM_Start+0x154>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d009      	beq.n	8008c76 <HAL_TIM_PWM_Start+0x10e>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a16      	ldr	r2, [pc, #88]	@ (8008cc0 <HAL_TIM_PWM_Start+0x158>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d004      	beq.n	8008c76 <HAL_TIM_PWM_Start+0x10e>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a14      	ldr	r2, [pc, #80]	@ (8008cc4 <HAL_TIM_PWM_Start+0x15c>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d111      	bne.n	8008c9a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f003 0307 	and.w	r3, r3, #7
 8008c80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2b06      	cmp	r3, #6
 8008c86:	d010      	beq.n	8008caa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f042 0201 	orr.w	r2, r2, #1
 8008c96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c98:	e007      	b.n	8008caa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f042 0201 	orr.w	r2, r2, #1
 8008ca8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	40010000 	.word	0x40010000
 8008cb8:	40000400 	.word	0x40000400
 8008cbc:	40000800 	.word	0x40000800
 8008cc0:	40000c00 	.word	0x40000c00
 8008cc4:	40014000 	.word	0x40014000

08008cc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e097      	b.n	8008e0c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d106      	bne.n	8008cf6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f88f 	bl	8008e14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	6812      	ldr	r2, [r2, #0]
 8008d08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d0c:	f023 0307 	bic.w	r3, r3, #7
 8008d10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	f000 fb03 	bl	8009328 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	6a1b      	ldr	r3, [r3, #32]
 8008d38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	697a      	ldr	r2, [r7, #20]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d4a:	f023 0303 	bic.w	r3, r3, #3
 8008d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	699b      	ldr	r3, [r3, #24]
 8008d58:	021b      	lsls	r3, r3, #8
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008d68:	f023 030c 	bic.w	r3, r3, #12
 8008d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	68da      	ldr	r2, [r3, #12]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	69db      	ldr	r3, [r3, #28]
 8008d82:	021b      	lsls	r3, r3, #8
 8008d84:	4313      	orrs	r3, r2
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	011a      	lsls	r2, r3, #4
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	031b      	lsls	r3, r3, #12
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008da6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008dae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	685a      	ldr	r2, [r3, #4]
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	011b      	lsls	r3, r3, #4
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	697a      	ldr	r2, [r7, #20]
 8008dc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	693a      	ldr	r2, [r7, #16]
 8008dd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2201      	movs	r2, #1
 8008dde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3718      	adds	r7, #24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008e40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008e50:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d110      	bne.n	8008e7a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d102      	bne.n	8008e64 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e5e:	7b7b      	ldrb	r3, [r7, #13]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d001      	beq.n	8008e68 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e069      	b.n	8008f3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2202      	movs	r2, #2
 8008e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e78:	e031      	b.n	8008ede <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	2b04      	cmp	r3, #4
 8008e7e:	d110      	bne.n	8008ea2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d102      	bne.n	8008e8c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e86:	7b3b      	ldrb	r3, [r7, #12]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d001      	beq.n	8008e90 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e055      	b.n	8008f3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2202      	movs	r2, #2
 8008e94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ea0:	e01d      	b.n	8008ede <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d108      	bne.n	8008eba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ea8:	7bbb      	ldrb	r3, [r7, #14]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d105      	bne.n	8008eba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008eae:	7b7b      	ldrb	r3, [r7, #13]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d102      	bne.n	8008eba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008eb4:	7b3b      	ldrb	r3, [r7, #12]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d001      	beq.n	8008ebe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e03e      	b.n	8008f3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2202      	movs	r2, #2
 8008ec2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2202      	movs	r2, #2
 8008eca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2202      	movs	r2, #2
 8008eda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d003      	beq.n	8008eec <HAL_TIM_Encoder_Start+0xc4>
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	2b04      	cmp	r3, #4
 8008ee8:	d008      	beq.n	8008efc <HAL_TIM_Encoder_Start+0xd4>
 8008eea:	e00f      	b.n	8008f0c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 fc23 	bl	8009740 <TIM_CCxChannelCmd>
      break;
 8008efa:	e016      	b.n	8008f2a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2201      	movs	r2, #1
 8008f02:	2104      	movs	r1, #4
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fc1b 	bl	8009740 <TIM_CCxChannelCmd>
      break;
 8008f0a:	e00e      	b.n	8008f2a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2201      	movs	r2, #1
 8008f12:	2100      	movs	r1, #0
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 fc13 	bl	8009740 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	2104      	movs	r1, #4
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 fc0c 	bl	8009740 <TIM_CCxChannelCmd>
      break;
 8008f28:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f042 0201 	orr.w	r2, r2, #1
 8008f38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	f003 0302 	and.w	r3, r3, #2
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d122      	bne.n	8008fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f003 0302 	and.w	r3, r3, #2
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d11b      	bne.n	8008fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f06f 0202 	mvn.w	r2, #2
 8008f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2201      	movs	r2, #1
 8008f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	f003 0303 	and.w	r3, r3, #3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d003      	beq.n	8008f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f9b0 	bl	80092ec <HAL_TIM_IC_CaptureCallback>
 8008f8c:	e005      	b.n	8008f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f9a2 	bl	80092d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f9b3 	bl	8009300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	f003 0304 	and.w	r3, r3, #4
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	d122      	bne.n	8008ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	d11b      	bne.n	8008ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f06f 0204 	mvn.w	r2, #4
 8008fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2202      	movs	r2, #2
 8008fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	699b      	ldr	r3, [r3, #24]
 8008fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f986 	bl	80092ec <HAL_TIM_IC_CaptureCallback>
 8008fe0:	e005      	b.n	8008fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 f978 	bl	80092d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f989 	bl	8009300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	f003 0308 	and.w	r3, r3, #8
 8008ffe:	2b08      	cmp	r3, #8
 8009000:	d122      	bne.n	8009048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	f003 0308 	and.w	r3, r3, #8
 800900c:	2b08      	cmp	r3, #8
 800900e:	d11b      	bne.n	8009048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f06f 0208 	mvn.w	r2, #8
 8009018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2204      	movs	r2, #4
 800901e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	69db      	ldr	r3, [r3, #28]
 8009026:	f003 0303 	and.w	r3, r3, #3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d003      	beq.n	8009036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f95c 	bl	80092ec <HAL_TIM_IC_CaptureCallback>
 8009034:	e005      	b.n	8009042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f94e 	bl	80092d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f95f 	bl	8009300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	f003 0310 	and.w	r3, r3, #16
 8009052:	2b10      	cmp	r3, #16
 8009054:	d122      	bne.n	800909c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f003 0310 	and.w	r3, r3, #16
 8009060:	2b10      	cmp	r3, #16
 8009062:	d11b      	bne.n	800909c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f06f 0210 	mvn.w	r2, #16
 800906c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2208      	movs	r2, #8
 8009072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	69db      	ldr	r3, [r3, #28]
 800907a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f932 	bl	80092ec <HAL_TIM_IC_CaptureCallback>
 8009088:	e005      	b.n	8009096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f924 	bl	80092d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f935 	bl	8009300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d10e      	bne.n	80090c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d107      	bne.n	80090c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f06f 0201 	mvn.w	r2, #1
 80090c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7f9 ffb2 	bl	800302c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090d2:	2b80      	cmp	r3, #128	@ 0x80
 80090d4:	d10e      	bne.n	80090f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090e0:	2b80      	cmp	r3, #128	@ 0x80
 80090e2:	d107      	bne.n	80090f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80090ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fb55 	bl	800979e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090fe:	2b40      	cmp	r3, #64	@ 0x40
 8009100:	d10e      	bne.n	8009120 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800910c:	2b40      	cmp	r3, #64	@ 0x40
 800910e:	d107      	bne.n	8009120 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f8fa 	bl	8009314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f003 0320 	and.w	r3, r3, #32
 800912a:	2b20      	cmp	r3, #32
 800912c:	d10e      	bne.n	800914c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f003 0320 	and.w	r3, r3, #32
 8009138:	2b20      	cmp	r3, #32
 800913a:	d107      	bne.n	800914c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f06f 0220 	mvn.w	r2, #32
 8009144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fb1f 	bl	800978a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800914c:	bf00      	nop
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009160:	2300      	movs	r3, #0
 8009162:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800916a:	2b01      	cmp	r3, #1
 800916c:	d101      	bne.n	8009172 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800916e:	2302      	movs	r3, #2
 8009170:	e0ae      	b.n	80092d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b0c      	cmp	r3, #12
 800917e:	f200 809f 	bhi.w	80092c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009182:	a201      	add	r2, pc, #4	@ (adr r2, 8009188 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009188:	080091bd 	.word	0x080091bd
 800918c:	080092c1 	.word	0x080092c1
 8009190:	080092c1 	.word	0x080092c1
 8009194:	080092c1 	.word	0x080092c1
 8009198:	080091fd 	.word	0x080091fd
 800919c:	080092c1 	.word	0x080092c1
 80091a0:	080092c1 	.word	0x080092c1
 80091a4:	080092c1 	.word	0x080092c1
 80091a8:	0800923f 	.word	0x0800923f
 80091ac:	080092c1 	.word	0x080092c1
 80091b0:	080092c1 	.word	0x080092c1
 80091b4:	080092c1 	.word	0x080092c1
 80091b8:	0800927f 	.word	0x0800927f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68b9      	ldr	r1, [r7, #8]
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 f930 	bl	8009428 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	699a      	ldr	r2, [r3, #24]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f042 0208 	orr.w	r2, r2, #8
 80091d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	699a      	ldr	r2, [r3, #24]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f022 0204 	bic.w	r2, r2, #4
 80091e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6999      	ldr	r1, [r3, #24]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	691a      	ldr	r2, [r3, #16]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	430a      	orrs	r2, r1
 80091f8:	619a      	str	r2, [r3, #24]
      break;
 80091fa:	e064      	b.n	80092c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	68b9      	ldr	r1, [r7, #8]
 8009202:	4618      	mov	r0, r3
 8009204:	f000 f976 	bl	80094f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	699a      	ldr	r2, [r3, #24]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	699a      	ldr	r2, [r3, #24]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6999      	ldr	r1, [r3, #24]
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	021a      	lsls	r2, r3, #8
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	430a      	orrs	r2, r1
 800923a:	619a      	str	r2, [r3, #24]
      break;
 800923c:	e043      	b.n	80092c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68b9      	ldr	r1, [r7, #8]
 8009244:	4618      	mov	r0, r3
 8009246:	f000 f9c1 	bl	80095cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	69da      	ldr	r2, [r3, #28]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f042 0208 	orr.w	r2, r2, #8
 8009258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	69da      	ldr	r2, [r3, #28]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f022 0204 	bic.w	r2, r2, #4
 8009268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	69d9      	ldr	r1, [r3, #28]
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	691a      	ldr	r2, [r3, #16]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	430a      	orrs	r2, r1
 800927a:	61da      	str	r2, [r3, #28]
      break;
 800927c:	e023      	b.n	80092c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	68b9      	ldr	r1, [r7, #8]
 8009284:	4618      	mov	r0, r3
 8009286:	f000 fa0b 	bl	80096a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	69da      	ldr	r2, [r3, #28]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	69da      	ldr	r2, [r3, #28]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	69d9      	ldr	r1, [r3, #28]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	021a      	lsls	r2, r3, #8
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	430a      	orrs	r2, r1
 80092bc:	61da      	str	r2, [r3, #28]
      break;
 80092be:	e002      	b.n	80092c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	75fb      	strb	r3, [r7, #23]
      break;
 80092c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80092ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3718      	adds	r7, #24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092d8:	b480      	push	{r7}
 80092da:	b083      	sub	sp, #12
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092e0:	bf00      	nop
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092f4:	bf00      	nop
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800931c:	bf00      	nop
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009328:	b480      	push	{r7}
 800932a:	b085      	sub	sp, #20
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a34      	ldr	r2, [pc, #208]	@ (800940c <TIM_Base_SetConfig+0xe4>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00f      	beq.n	8009360 <TIM_Base_SetConfig+0x38>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009346:	d00b      	beq.n	8009360 <TIM_Base_SetConfig+0x38>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a31      	ldr	r2, [pc, #196]	@ (8009410 <TIM_Base_SetConfig+0xe8>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d007      	beq.n	8009360 <TIM_Base_SetConfig+0x38>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a30      	ldr	r2, [pc, #192]	@ (8009414 <TIM_Base_SetConfig+0xec>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d003      	beq.n	8009360 <TIM_Base_SetConfig+0x38>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a2f      	ldr	r2, [pc, #188]	@ (8009418 <TIM_Base_SetConfig+0xf0>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d108      	bne.n	8009372 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009366:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	4313      	orrs	r3, r2
 8009370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a25      	ldr	r2, [pc, #148]	@ (800940c <TIM_Base_SetConfig+0xe4>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d01b      	beq.n	80093b2 <TIM_Base_SetConfig+0x8a>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009380:	d017      	beq.n	80093b2 <TIM_Base_SetConfig+0x8a>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a22      	ldr	r2, [pc, #136]	@ (8009410 <TIM_Base_SetConfig+0xe8>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d013      	beq.n	80093b2 <TIM_Base_SetConfig+0x8a>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a21      	ldr	r2, [pc, #132]	@ (8009414 <TIM_Base_SetConfig+0xec>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d00f      	beq.n	80093b2 <TIM_Base_SetConfig+0x8a>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a20      	ldr	r2, [pc, #128]	@ (8009418 <TIM_Base_SetConfig+0xf0>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d00b      	beq.n	80093b2 <TIM_Base_SetConfig+0x8a>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a1f      	ldr	r2, [pc, #124]	@ (800941c <TIM_Base_SetConfig+0xf4>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d007      	beq.n	80093b2 <TIM_Base_SetConfig+0x8a>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a1e      	ldr	r2, [pc, #120]	@ (8009420 <TIM_Base_SetConfig+0xf8>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d003      	beq.n	80093b2 <TIM_Base_SetConfig+0x8a>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a1d      	ldr	r2, [pc, #116]	@ (8009424 <TIM_Base_SetConfig+0xfc>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d108      	bne.n	80093c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	689a      	ldr	r2, [r3, #8]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a08      	ldr	r2, [pc, #32]	@ (800940c <TIM_Base_SetConfig+0xe4>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d103      	bne.n	80093f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	691a      	ldr	r2, [r3, #16]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	615a      	str	r2, [r3, #20]
}
 80093fe:	bf00      	nop
 8009400:	3714      	adds	r7, #20
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	40010000 	.word	0x40010000
 8009410:	40000400 	.word	0x40000400
 8009414:	40000800 	.word	0x40000800
 8009418:	40000c00 	.word	0x40000c00
 800941c:	40014000 	.word	0x40014000
 8009420:	40014400 	.word	0x40014400
 8009424:	40014800 	.word	0x40014800

08009428 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	f023 0201 	bic.w	r2, r3, #1
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a1b      	ldr	r3, [r3, #32]
 8009442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 0303 	bic.w	r3, r3, #3
 800945e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	4313      	orrs	r3, r2
 8009468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f023 0302 	bic.w	r3, r3, #2
 8009470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	4313      	orrs	r3, r2
 800947a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a1c      	ldr	r2, [pc, #112]	@ (80094f0 <TIM_OC1_SetConfig+0xc8>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d10c      	bne.n	800949e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	f023 0308 	bic.w	r3, r3, #8
 800948a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	697a      	ldr	r2, [r7, #20]
 8009492:	4313      	orrs	r3, r2
 8009494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f023 0304 	bic.w	r3, r3, #4
 800949c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4a13      	ldr	r2, [pc, #76]	@ (80094f0 <TIM_OC1_SetConfig+0xc8>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d111      	bne.n	80094ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80094b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	4313      	orrs	r3, r2
 80094be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	621a      	str	r2, [r3, #32]
}
 80094e4:	bf00      	nop
 80094e6:	371c      	adds	r7, #28
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	40010000 	.word	0x40010000

080094f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a1b      	ldr	r3, [r3, #32]
 8009502:	f023 0210 	bic.w	r2, r3, #16
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800952a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	021b      	lsls	r3, r3, #8
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	4313      	orrs	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f023 0320 	bic.w	r3, r3, #32
 800953e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	011b      	lsls	r3, r3, #4
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	4313      	orrs	r3, r2
 800954a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a1e      	ldr	r2, [pc, #120]	@ (80095c8 <TIM_OC2_SetConfig+0xd4>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d10d      	bne.n	8009570 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800955a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	011b      	lsls	r3, r3, #4
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	4313      	orrs	r3, r2
 8009566:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800956e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a15      	ldr	r2, [pc, #84]	@ (80095c8 <TIM_OC2_SetConfig+0xd4>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d113      	bne.n	80095a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800957e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	695b      	ldr	r3, [r3, #20]
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	4313      	orrs	r3, r2
 8009592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	4313      	orrs	r3, r2
 800959e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	685a      	ldr	r2, [r3, #4]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	697a      	ldr	r2, [r7, #20]
 80095b8:	621a      	str	r2, [r3, #32]
}
 80095ba:	bf00      	nop
 80095bc:	371c      	adds	r7, #28
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	40010000 	.word	0x40010000

080095cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f023 0303 	bic.w	r3, r3, #3
 8009602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	4313      	orrs	r3, r2
 800960c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	689b      	ldr	r3, [r3, #8]
 800961a:	021b      	lsls	r3, r3, #8
 800961c:	697a      	ldr	r2, [r7, #20]
 800961e:	4313      	orrs	r3, r2
 8009620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a1d      	ldr	r2, [pc, #116]	@ (800969c <TIM_OC3_SetConfig+0xd0>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d10d      	bne.n	8009646 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009630:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	021b      	lsls	r3, r3, #8
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	4313      	orrs	r3, r2
 800963c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009644:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a14      	ldr	r2, [pc, #80]	@ (800969c <TIM_OC3_SetConfig+0xd0>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d113      	bne.n	8009676 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800965c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	011b      	lsls	r3, r3, #4
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	4313      	orrs	r3, r2
 8009668:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	011b      	lsls	r3, r3, #4
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	4313      	orrs	r3, r2
 8009674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	697a      	ldr	r2, [r7, #20]
 800968e:	621a      	str	r2, [r3, #32]
}
 8009690:	bf00      	nop
 8009692:	371c      	adds	r7, #28
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	40010000 	.word	0x40010000

080096a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b087      	sub	sp, #28
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a1b      	ldr	r3, [r3, #32]
 80096ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	021b      	lsls	r3, r3, #8
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80096ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	031b      	lsls	r3, r3, #12
 80096f2:	693a      	ldr	r2, [r7, #16]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a10      	ldr	r2, [pc, #64]	@ (800973c <TIM_OC4_SetConfig+0x9c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d109      	bne.n	8009714 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009706:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	019b      	lsls	r3, r3, #6
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	4313      	orrs	r3, r2
 8009712:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	693a      	ldr	r2, [r7, #16]
 800972c:	621a      	str	r2, [r3, #32]
}
 800972e:	bf00      	nop
 8009730:	371c      	adds	r7, #28
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	40010000 	.word	0x40010000

08009740 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009740:	b480      	push	{r7}
 8009742:	b087      	sub	sp, #28
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	f003 031f 	and.w	r3, r3, #31
 8009752:	2201      	movs	r2, #1
 8009754:	fa02 f303 	lsl.w	r3, r2, r3
 8009758:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6a1a      	ldr	r2, [r3, #32]
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	43db      	mvns	r3, r3
 8009762:	401a      	ands	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6a1a      	ldr	r2, [r3, #32]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	f003 031f 	and.w	r3, r3, #31
 8009772:	6879      	ldr	r1, [r7, #4]
 8009774:	fa01 f303 	lsl.w	r3, r1, r3
 8009778:	431a      	orrs	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	621a      	str	r2, [r3, #32]
}
 800977e:	bf00      	nop
 8009780:	371c      	adds	r7, #28
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800978a:	b480      	push	{r7}
 800978c:	b083      	sub	sp, #12
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009792:	bf00      	nop
 8009794:	370c      	adds	r7, #12
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr

0800979e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800979e:	b480      	push	{r7}
 80097a0:	b083      	sub	sp, #12
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097a6:	bf00      	nop
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b082      	sub	sp, #8
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d101      	bne.n	80097c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	e03f      	b.n	8009844 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d106      	bne.n	80097de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f7fa fa25 	bl	8003c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2224      	movs	r2, #36	@ 0x24
 80097e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68da      	ldr	r2, [r3, #12]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80097f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f001 f8d6 	bl	800a9a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	691a      	ldr	r2, [r3, #16]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800980a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	695a      	ldr	r2, [r3, #20]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800981a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800982a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2220      	movs	r2, #32
 8009836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2220      	movs	r2, #32
 800983e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3708      	adds	r7, #8
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b08a      	sub	sp, #40	@ 0x28
 8009850:	af02      	add	r7, sp, #8
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	603b      	str	r3, [r7, #0]
 8009858:	4613      	mov	r3, r2
 800985a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800985c:	2300      	movs	r3, #0
 800985e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b20      	cmp	r3, #32
 800986a:	d17c      	bne.n	8009966 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d002      	beq.n	8009878 <HAL_UART_Transmit+0x2c>
 8009872:	88fb      	ldrh	r3, [r7, #6]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d101      	bne.n	800987c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e075      	b.n	8009968 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009882:	2b01      	cmp	r3, #1
 8009884:	d101      	bne.n	800988a <HAL_UART_Transmit+0x3e>
 8009886:	2302      	movs	r3, #2
 8009888:	e06e      	b.n	8009968 <HAL_UART_Transmit+0x11c>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2201      	movs	r2, #1
 800988e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2221      	movs	r2, #33	@ 0x21
 800989c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098a0:	f7fa ffa8 	bl	80047f4 <HAL_GetTick>
 80098a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	88fa      	ldrh	r2, [r7, #6]
 80098aa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	88fa      	ldrh	r2, [r7, #6]
 80098b0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098ba:	d108      	bne.n	80098ce <HAL_UART_Transmit+0x82>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d104      	bne.n	80098ce <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80098c4:	2300      	movs	r3, #0
 80098c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	61bb      	str	r3, [r7, #24]
 80098cc:	e003      	b.n	80098d6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80098d2:	2300      	movs	r3, #0
 80098d4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 80098de:	e02a      	b.n	8009936 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	9300      	str	r3, [sp, #0]
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	2200      	movs	r2, #0
 80098e8:	2180      	movs	r1, #128	@ 0x80
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 fd8d 	bl	800a40a <UART_WaitOnFlagUntilTimeout>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e036      	b.n	8009968 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10b      	bne.n	8009918 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	881b      	ldrh	r3, [r3, #0]
 8009904:	461a      	mov	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800990e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	3302      	adds	r3, #2
 8009914:	61bb      	str	r3, [r7, #24]
 8009916:	e007      	b.n	8009928 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	781a      	ldrb	r2, [r3, #0]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	3301      	adds	r3, #1
 8009926:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800992c:	b29b      	uxth	r3, r3
 800992e:	3b01      	subs	r3, #1
 8009930:	b29a      	uxth	r2, r3
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800993a:	b29b      	uxth	r3, r3
 800993c:	2b00      	cmp	r3, #0
 800993e:	d1cf      	bne.n	80098e0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	2200      	movs	r2, #0
 8009948:	2140      	movs	r1, #64	@ 0x40
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 fd5d 	bl	800a40a <UART_WaitOnFlagUntilTimeout>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009956:	2303      	movs	r3, #3
 8009958:	e006      	b.n	8009968 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2220      	movs	r2, #32
 800995e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	e000      	b.n	8009968 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009966:	2302      	movs	r3, #2
  }
}
 8009968:	4618      	mov	r0, r3
 800996a:	3720      	adds	r7, #32
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08c      	sub	sp, #48	@ 0x30
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	60b9      	str	r1, [r7, #8]
 800997a:	4613      	mov	r3, r2
 800997c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b20      	cmp	r3, #32
 8009988:	d165      	bne.n	8009a56 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <HAL_UART_Transmit_DMA+0x26>
 8009990:	88fb      	ldrh	r3, [r7, #6]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d101      	bne.n	800999a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e05e      	b.n	8009a58 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d101      	bne.n	80099a8 <HAL_UART_Transmit_DMA+0x38>
 80099a4:	2302      	movs	r3, #2
 80099a6:	e057      	b.n	8009a58 <HAL_UART_Transmit_DMA+0xe8>
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2201      	movs	r2, #1
 80099ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	88fa      	ldrh	r2, [r7, #6]
 80099ba:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	88fa      	ldrh	r2, [r7, #6]
 80099c0:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2221      	movs	r2, #33	@ 0x21
 80099cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099d4:	4a22      	ldr	r2, [pc, #136]	@ (8009a60 <HAL_UART_Transmit_DMA+0xf0>)
 80099d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099dc:	4a21      	ldr	r2, [pc, #132]	@ (8009a64 <HAL_UART_Transmit_DMA+0xf4>)
 80099de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099e4:	4a20      	ldr	r2, [pc, #128]	@ (8009a68 <HAL_UART_Transmit_DMA+0xf8>)
 80099e6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099ec:	2200      	movs	r2, #0
 80099ee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80099f0:	f107 0308 	add.w	r3, r7, #8
 80099f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80099fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099fc:	6819      	ldr	r1, [r3, #0]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	3304      	adds	r3, #4
 8009a04:	461a      	mov	r2, r3
 8009a06:	88fb      	ldrh	r3, [r7, #6]
 8009a08:	f7fb f9c8 	bl	8004d9c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009a14:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	3314      	adds	r3, #20
 8009a24:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	e853 3f00 	ldrex	r3, [r3]
 8009a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	3314      	adds	r3, #20
 8009a3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a3e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009a40:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a42:	6a39      	ldr	r1, [r7, #32]
 8009a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a46:	e841 2300 	strex	r3, r2, [r1]
 8009a4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1e5      	bne.n	8009a1e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	e000      	b.n	8009a58 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8009a56:	2302      	movs	r3, #2
  }
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3730      	adds	r7, #48	@ 0x30
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	0800a165 	.word	0x0800a165
 8009a64:	0800a1ff 	.word	0x0800a1ff
 8009a68:	0800a377 	.word	0x0800a377

08009a6c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	4613      	mov	r3, r2
 8009a78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	2b20      	cmp	r3, #32
 8009a84:	d11d      	bne.n	8009ac2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <HAL_UART_Receive_DMA+0x26>
 8009a8c:	88fb      	ldrh	r3, [r7, #6]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d101      	bne.n	8009a96 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e016      	b.n	8009ac4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d101      	bne.n	8009aa4 <HAL_UART_Receive_DMA+0x38>
 8009aa0:	2302      	movs	r3, #2
 8009aa2:	e00f      	b.n	8009ac4 <HAL_UART_Receive_DMA+0x58>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009ab2:	88fb      	ldrh	r3, [r7, #6]
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	68b9      	ldr	r1, [r7, #8]
 8009ab8:	68f8      	ldr	r0, [r7, #12]
 8009aba:	f000 fd15 	bl	800a4e8 <UART_Start_Receive_DMA>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	e000      	b.n	8009ac4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009ac2:	2302      	movs	r3, #2
  }
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b090      	sub	sp, #64	@ 0x40
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ae2:	2b80      	cmp	r3, #128	@ 0x80
 8009ae4:	bf0c      	ite	eq
 8009ae6:	2301      	moveq	r3, #1
 8009ae8:	2300      	movne	r3, #0
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	2b21      	cmp	r3, #33	@ 0x21
 8009af8:	d128      	bne.n	8009b4c <HAL_UART_DMAStop+0x80>
 8009afa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d025      	beq.n	8009b4c <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3314      	adds	r3, #20
 8009b06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0a:	e853 3f00 	ldrex	r3, [r3]
 8009b0e:	623b      	str	r3, [r7, #32]
   return(result);
 8009b10:	6a3b      	ldr	r3, [r7, #32]
 8009b12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3314      	adds	r3, #20
 8009b1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b20:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b28:	e841 2300 	strex	r3, r2, [r1]
 8009b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1e5      	bne.n	8009b00 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d004      	beq.n	8009b46 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7fb f983 	bl	8004e4c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fd6c 	bl	800a624 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b56:	2b40      	cmp	r3, #64	@ 0x40
 8009b58:	bf0c      	ite	eq
 8009b5a:	2301      	moveq	r3, #1
 8009b5c:	2300      	movne	r3, #0
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b22      	cmp	r3, #34	@ 0x22
 8009b6c:	d128      	bne.n	8009bc0 <HAL_UART_DMAStop+0xf4>
 8009b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d025      	beq.n	8009bc0 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	3314      	adds	r3, #20
 8009b7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	e853 3f00 	ldrex	r3, [r3]
 8009b82:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3314      	adds	r3, #20
 8009b92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b94:	61fa      	str	r2, [r7, #28]
 8009b96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b98:	69b9      	ldr	r1, [r7, #24]
 8009b9a:	69fa      	ldr	r2, [r7, #28]
 8009b9c:	e841 2300 	strex	r3, r2, [r1]
 8009ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1e5      	bne.n	8009b74 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d004      	beq.n	8009bba <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7fb f949 	bl	8004e4c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fd5a 	bl	800a674 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3740      	adds	r7, #64	@ 0x40
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
	...

08009bcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b0ba      	sub	sp, #232	@ 0xe8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	695b      	ldr	r3, [r3, #20]
 8009bee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c02:	f003 030f 	and.w	r3, r3, #15
 8009c06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d10f      	bne.n	8009c32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c16:	f003 0320 	and.w	r3, r3, #32
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d009      	beq.n	8009c32 <HAL_UART_IRQHandler+0x66>
 8009c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c22:	f003 0320 	and.w	r3, r3, #32
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d003      	beq.n	8009c32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fe01 	bl	800a832 <UART_Receive_IT>
      return;
 8009c30:	e256      	b.n	800a0e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f000 80de 	beq.w	8009df8 <HAL_UART_IRQHandler+0x22c>
 8009c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d106      	bne.n	8009c56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c4c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f000 80d1 	beq.w	8009df8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00b      	beq.n	8009c7a <HAL_UART_IRQHandler+0xae>
 8009c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d005      	beq.n	8009c7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c72:	f043 0201 	orr.w	r2, r3, #1
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c7e:	f003 0304 	and.w	r3, r3, #4
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00b      	beq.n	8009c9e <HAL_UART_IRQHandler+0xd2>
 8009c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c8a:	f003 0301 	and.w	r3, r3, #1
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d005      	beq.n	8009c9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c96:	f043 0202 	orr.w	r2, r3, #2
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ca2:	f003 0302 	and.w	r3, r3, #2
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00b      	beq.n	8009cc2 <HAL_UART_IRQHandler+0xf6>
 8009caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cae:	f003 0301 	and.w	r3, r3, #1
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d005      	beq.n	8009cc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cba:	f043 0204 	orr.w	r2, r3, #4
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cc6:	f003 0308 	and.w	r3, r3, #8
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d011      	beq.n	8009cf2 <HAL_UART_IRQHandler+0x126>
 8009cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cd2:	f003 0320 	and.w	r3, r3, #32
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d105      	bne.n	8009ce6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d005      	beq.n	8009cf2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cea:	f043 0208 	orr.w	r2, r3, #8
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	f000 81ed 	beq.w	800a0d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d00:	f003 0320 	and.w	r3, r3, #32
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d008      	beq.n	8009d1a <HAL_UART_IRQHandler+0x14e>
 8009d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d0c:	f003 0320 	and.w	r3, r3, #32
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fd8c 	bl	800a832 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d24:	2b40      	cmp	r3, #64	@ 0x40
 8009d26:	bf0c      	ite	eq
 8009d28:	2301      	moveq	r3, #1
 8009d2a:	2300      	movne	r3, #0
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d36:	f003 0308 	and.w	r3, r3, #8
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d103      	bne.n	8009d46 <HAL_UART_IRQHandler+0x17a>
 8009d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d04f      	beq.n	8009de6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fc94 	bl	800a674 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	695b      	ldr	r3, [r3, #20]
 8009d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d56:	2b40      	cmp	r3, #64	@ 0x40
 8009d58:	d141      	bne.n	8009dde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3314      	adds	r3, #20
 8009d60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d68:	e853 3f00 	ldrex	r3, [r3]
 8009d6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	3314      	adds	r3, #20
 8009d82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009d86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d96:	e841 2300 	strex	r3, r2, [r1]
 8009d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d1d9      	bne.n	8009d5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d013      	beq.n	8009dd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009db2:	4a7d      	ldr	r2, [pc, #500]	@ (8009fa8 <HAL_UART_IRQHandler+0x3dc>)
 8009db4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fb f8b6 	bl	8004f2c <HAL_DMA_Abort_IT>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d016      	beq.n	8009df4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd4:	e00e      	b.n	8009df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f9ae 	bl	800a138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ddc:	e00a      	b.n	8009df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f9aa 	bl	800a138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de4:	e006      	b.n	8009df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f9a6 	bl	800a138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8009df2:	e170      	b.n	800a0d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009df4:	bf00      	nop
    return;
 8009df6:	e16e      	b.n	800a0d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	f040 814a 	bne.w	800a096 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e06:	f003 0310 	and.w	r3, r3, #16
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f000 8143 	beq.w	800a096 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e14:	f003 0310 	and.w	r3, r3, #16
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	f000 813c 	beq.w	800a096 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60bb      	str	r3, [r7, #8]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	60bb      	str	r3, [r7, #8]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	60bb      	str	r3, [r7, #8]
 8009e32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e3e:	2b40      	cmp	r3, #64	@ 0x40
 8009e40:	f040 80b4 	bne.w	8009fac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 8140 	beq.w	800a0da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e62:	429a      	cmp	r2, r3
 8009e64:	f080 8139 	bcs.w	800a0da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e74:	69db      	ldr	r3, [r3, #28]
 8009e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e7a:	f000 8088 	beq.w	8009f8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	330c      	adds	r3, #12
 8009e84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e8c:	e853 3f00 	ldrex	r3, [r3]
 8009e90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	330c      	adds	r3, #12
 8009ea6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009eaa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009eae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009eb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009eba:	e841 2300 	strex	r3, r2, [r1]
 8009ebe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d1d9      	bne.n	8009e7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	3314      	adds	r3, #20
 8009ed0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ed4:	e853 3f00 	ldrex	r3, [r3]
 8009ed8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009eda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009edc:	f023 0301 	bic.w	r3, r3, #1
 8009ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3314      	adds	r3, #20
 8009eea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009eee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009ef2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009ef6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009efa:	e841 2300 	strex	r3, r2, [r1]
 8009efe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009f00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d1e1      	bne.n	8009eca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	3314      	adds	r3, #20
 8009f0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f10:	e853 3f00 	ldrex	r3, [r3]
 8009f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	3314      	adds	r3, #20
 8009f26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009f2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f32:	e841 2300 	strex	r3, r2, [r1]
 8009f36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1e3      	bne.n	8009f06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2220      	movs	r2, #32
 8009f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	330c      	adds	r3, #12
 8009f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f56:	e853 3f00 	ldrex	r3, [r3]
 8009f5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f5e:	f023 0310 	bic.w	r3, r3, #16
 8009f62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	330c      	adds	r3, #12
 8009f6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009f70:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009f72:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f78:	e841 2300 	strex	r3, r2, [r1]
 8009f7c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1e3      	bne.n	8009f4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7fa ff5f 	bl	8004e4c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	1ad3      	subs	r3, r2, r3
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 f8d4 	bl	800a14c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009fa4:	e099      	b.n	800a0da <HAL_UART_IRQHandler+0x50e>
 8009fa6:	bf00      	nop
 8009fa8:	0800a73b 	.word	0x0800a73b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	1ad3      	subs	r3, r2, r3
 8009fb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f000 808b 	beq.w	800a0de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 8086 	beq.w	800a0de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	330c      	adds	r3, #12
 8009fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fdc:	e853 3f00 	ldrex	r3, [r3]
 8009fe0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fe4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	330c      	adds	r3, #12
 8009ff2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009ff6:	647a      	str	r2, [r7, #68]	@ 0x44
 8009ff8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ffa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ffc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ffe:	e841 2300 	strex	r3, r2, [r1]
 800a002:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a006:	2b00      	cmp	r3, #0
 800a008:	d1e3      	bne.n	8009fd2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	3314      	adds	r3, #20
 800a010:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a014:	e853 3f00 	ldrex	r3, [r3]
 800a018:	623b      	str	r3, [r7, #32]
   return(result);
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	f023 0301 	bic.w	r3, r3, #1
 800a020:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	3314      	adds	r3, #20
 800a02a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a02e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a030:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a032:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a036:	e841 2300 	strex	r3, r2, [r1]
 800a03a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1e3      	bne.n	800a00a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2220      	movs	r2, #32
 800a046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	330c      	adds	r3, #12
 800a056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	e853 3f00 	ldrex	r3, [r3]
 800a05e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f023 0310 	bic.w	r3, r3, #16
 800a066:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	330c      	adds	r3, #12
 800a070:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a074:	61fa      	str	r2, [r7, #28]
 800a076:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a078:	69b9      	ldr	r1, [r7, #24]
 800a07a:	69fa      	ldr	r2, [r7, #28]
 800a07c:	e841 2300 	strex	r3, r2, [r1]
 800a080:	617b      	str	r3, [r7, #20]
   return(result);
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1e3      	bne.n	800a050 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a08c:	4619      	mov	r1, r3
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f85c 	bl	800a14c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a094:	e023      	b.n	800a0de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a09a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d009      	beq.n	800a0b6 <HAL_UART_IRQHandler+0x4ea>
 800a0a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d003      	beq.n	800a0b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 fb57 	bl	800a762 <UART_Transmit_IT>
    return;
 800a0b4:	e014      	b.n	800a0e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a0b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00e      	beq.n	800a0e0 <HAL_UART_IRQHandler+0x514>
 800a0c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d008      	beq.n	800a0e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fb97 	bl	800a802 <UART_EndTransmit_IT>
    return;
 800a0d4:	e004      	b.n	800a0e0 <HAL_UART_IRQHandler+0x514>
    return;
 800a0d6:	bf00      	nop
 800a0d8:	e002      	b.n	800a0e0 <HAL_UART_IRQHandler+0x514>
      return;
 800a0da:	bf00      	nop
 800a0dc:	e000      	b.n	800a0e0 <HAL_UART_IRQHandler+0x514>
      return;
 800a0de:	bf00      	nop
  }
}
 800a0e0:	37e8      	adds	r7, #232	@ 0xe8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop

0800a0e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	460b      	mov	r3, r1
 800a156:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b090      	sub	sp, #64	@ 0x40
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a170:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d137      	bne.n	800a1f0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a182:	2200      	movs	r2, #0
 800a184:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3314      	adds	r3, #20
 800a18c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a190:	e853 3f00 	ldrex	r3, [r3]
 800a194:	623b      	str	r3, [r7, #32]
   return(result);
 800a196:	6a3b      	ldr	r3, [r7, #32]
 800a198:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a19c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a19e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3314      	adds	r3, #20
 800a1a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800a1a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1ae:	e841 2300 	strex	r3, r2, [r1]
 800a1b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1e5      	bne.n	800a186 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a1ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	330c      	adds	r3, #12
 800a1c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	e853 3f00 	ldrex	r3, [r3]
 800a1c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a1d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	330c      	adds	r3, #12
 800a1d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1da:	61fa      	str	r2, [r7, #28]
 800a1dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1de:	69b9      	ldr	r1, [r7, #24]
 800a1e0:	69fa      	ldr	r2, [r7, #28]
 800a1e2:	e841 2300 	strex	r3, r2, [r1]
 800a1e6:	617b      	str	r3, [r7, #20]
   return(result);
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1e5      	bne.n	800a1ba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a1ee:	e002      	b.n	800a1f6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a1f0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a1f2:	f7ff ff79 	bl	800a0e8 <HAL_UART_TxCpltCallback>
}
 800a1f6:	bf00      	nop
 800a1f8:	3740      	adds	r7, #64	@ 0x40
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a20a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f7ff ff75 	bl	800a0fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a212:	bf00      	nop
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b09c      	sub	sp, #112	@ 0x70
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a226:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a232:	2b00      	cmp	r3, #0
 800a234:	d172      	bne.n	800a31c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800a236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a238:	2200      	movs	r2, #0
 800a23a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a23c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	330c      	adds	r3, #12
 800a242:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a246:	e853 3f00 	ldrex	r3, [r3]
 800a24a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a24c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a24e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a252:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a254:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	330c      	adds	r3, #12
 800a25a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a25c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a25e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a260:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a262:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a264:	e841 2300 	strex	r3, r2, [r1]
 800a268:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a26a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1e5      	bne.n	800a23c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	3314      	adds	r3, #20
 800a276:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a27a:	e853 3f00 	ldrex	r3, [r3]
 800a27e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a282:	f023 0301 	bic.w	r3, r3, #1
 800a286:	667b      	str	r3, [r7, #100]	@ 0x64
 800a288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	3314      	adds	r3, #20
 800a28e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a290:	647a      	str	r2, [r7, #68]	@ 0x44
 800a292:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a294:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a296:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a298:	e841 2300 	strex	r3, r2, [r1]
 800a29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a29e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1e5      	bne.n	800a270 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	3314      	adds	r3, #20
 800a2aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ae:	e853 3f00 	ldrex	r3, [r3]
 800a2b2:	623b      	str	r3, [r7, #32]
   return(result);
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2ba:	663b      	str	r3, [r7, #96]	@ 0x60
 800a2bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3314      	adds	r3, #20
 800a2c2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a2c4:	633a      	str	r2, [r7, #48]	@ 0x30
 800a2c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a2ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a2cc:	e841 2300 	strex	r3, r2, [r1]
 800a2d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1e5      	bne.n	800a2a4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a2d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2da:	2220      	movs	r2, #32
 800a2dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d119      	bne.n	800a31c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	330c      	adds	r3, #12
 800a2ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	e853 3f00 	ldrex	r3, [r3]
 800a2f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f023 0310 	bic.w	r3, r3, #16
 800a2fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a300:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	330c      	adds	r3, #12
 800a306:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a308:	61fa      	str	r2, [r7, #28]
 800a30a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30c:	69b9      	ldr	r1, [r7, #24]
 800a30e:	69fa      	ldr	r2, [r7, #28]
 800a310:	e841 2300 	strex	r3, r2, [r1]
 800a314:	617b      	str	r3, [r7, #20]
   return(result);
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1e5      	bne.n	800a2e8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a31c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a31e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a320:	2b01      	cmp	r3, #1
 800a322:	d106      	bne.n	800a332 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a324:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a326:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a328:	4619      	mov	r1, r3
 800a32a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a32c:	f7ff ff0e 	bl	800a14c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a330:	e002      	b.n	800a338 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800a332:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a334:	f7ff feec 	bl	800a110 <HAL_UART_RxCpltCallback>
}
 800a338:	bf00      	nop
 800a33a:	3770      	adds	r7, #112	@ 0x70
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}

0800a340 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a34c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a352:	2b01      	cmp	r3, #1
 800a354:	d108      	bne.n	800a368 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a35a:	085b      	lsrs	r3, r3, #1
 800a35c:	b29b      	uxth	r3, r3
 800a35e:	4619      	mov	r1, r3
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f7ff fef3 	bl	800a14c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a366:	e002      	b.n	800a36e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f7ff fedb 	bl	800a124 <HAL_UART_RxHalfCpltCallback>
}
 800a36e:	bf00      	nop
 800a370:	3710      	adds	r7, #16
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b084      	sub	sp, #16
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a37e:	2300      	movs	r3, #0
 800a380:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a386:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	695b      	ldr	r3, [r3, #20]
 800a38e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a392:	2b80      	cmp	r3, #128	@ 0x80
 800a394:	bf0c      	ite	eq
 800a396:	2301      	moveq	r3, #1
 800a398:	2300      	movne	r3, #0
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b21      	cmp	r3, #33	@ 0x21
 800a3a8:	d108      	bne.n	800a3bc <UART_DMAError+0x46>
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d005      	beq.n	800a3bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800a3b6:	68b8      	ldr	r0, [r7, #8]
 800a3b8:	f000 f934 	bl	800a624 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	695b      	ldr	r3, [r3, #20]
 800a3c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3c6:	2b40      	cmp	r3, #64	@ 0x40
 800a3c8:	bf0c      	ite	eq
 800a3ca:	2301      	moveq	r3, #1
 800a3cc:	2300      	movne	r3, #0
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a3d8:	b2db      	uxtb	r3, r3
 800a3da:	2b22      	cmp	r3, #34	@ 0x22
 800a3dc:	d108      	bne.n	800a3f0 <UART_DMAError+0x7a>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d005      	beq.n	800a3f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800a3ea:	68b8      	ldr	r0, [r7, #8]
 800a3ec:	f000 f942 	bl	800a674 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3f4:	f043 0210 	orr.w	r2, r3, #16
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a3fc:	68b8      	ldr	r0, [r7, #8]
 800a3fe:	f7ff fe9b 	bl	800a138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a402:	bf00      	nop
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b090      	sub	sp, #64	@ 0x40
 800a40e:	af00      	add	r7, sp, #0
 800a410:	60f8      	str	r0, [r7, #12]
 800a412:	60b9      	str	r1, [r7, #8]
 800a414:	603b      	str	r3, [r7, #0]
 800a416:	4613      	mov	r3, r2
 800a418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a41a:	e050      	b.n	800a4be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a41c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a41e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a422:	d04c      	beq.n	800a4be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a424:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a426:	2b00      	cmp	r3, #0
 800a428:	d007      	beq.n	800a43a <UART_WaitOnFlagUntilTimeout+0x30>
 800a42a:	f7fa f9e3 	bl	80047f4 <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a436:	429a      	cmp	r2, r3
 800a438:	d241      	bcs.n	800a4be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	330c      	adds	r3, #12
 800a440:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a444:	e853 3f00 	ldrex	r3, [r3]
 800a448:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a44c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800a450:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	330c      	adds	r3, #12
 800a458:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a45a:	637a      	str	r2, [r7, #52]	@ 0x34
 800a45c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a460:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a462:	e841 2300 	strex	r3, r2, [r1]
 800a466:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1e5      	bne.n	800a43a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	3314      	adds	r3, #20
 800a474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	e853 3f00 	ldrex	r3, [r3]
 800a47c:	613b      	str	r3, [r7, #16]
   return(result);
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	f023 0301 	bic.w	r3, r3, #1
 800a484:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	3314      	adds	r3, #20
 800a48c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a48e:	623a      	str	r2, [r7, #32]
 800a490:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a492:	69f9      	ldr	r1, [r7, #28]
 800a494:	6a3a      	ldr	r2, [r7, #32]
 800a496:	e841 2300 	strex	r3, r2, [r1]
 800a49a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1e5      	bne.n	800a46e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2220      	movs	r2, #32
 800a4a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2220      	movs	r2, #32
 800a4ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e00f      	b.n	800a4de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	bf0c      	ite	eq
 800a4ce:	2301      	moveq	r3, #1
 800a4d0:	2300      	movne	r3, #0
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	79fb      	ldrb	r3, [r7, #7]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d09f      	beq.n	800a41c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3740      	adds	r7, #64	@ 0x40
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
	...

0800a4e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b098      	sub	sp, #96	@ 0x60
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	88fa      	ldrh	r2, [r7, #6]
 800a500:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2222      	movs	r2, #34	@ 0x22
 800a50c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a514:	4a40      	ldr	r2, [pc, #256]	@ (800a618 <UART_Start_Receive_DMA+0x130>)
 800a516:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a51c:	4a3f      	ldr	r2, [pc, #252]	@ (800a61c <UART_Start_Receive_DMA+0x134>)
 800a51e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a524:	4a3e      	ldr	r2, [pc, #248]	@ (800a620 <UART_Start_Receive_DMA+0x138>)
 800a526:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a52c:	2200      	movs	r2, #0
 800a52e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800a530:	f107 0308 	add.w	r3, r7, #8
 800a534:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3304      	adds	r3, #4
 800a540:	4619      	mov	r1, r3
 800a542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	88fb      	ldrh	r3, [r7, #6]
 800a548:	f7fa fc28 	bl	8004d9c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800a54c:	2300      	movs	r3, #0
 800a54e:	613b      	str	r3, [r7, #16]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	613b      	str	r3, [r7, #16]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	613b      	str	r3, [r7, #16]
 800a560:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d019      	beq.n	800a5a6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	330c      	adds	r3, #12
 800a578:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a57c:	e853 3f00 	ldrex	r3, [r3]
 800a580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a588:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	330c      	adds	r3, #12
 800a590:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a592:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800a594:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a596:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a598:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a59a:	e841 2300 	strex	r3, r2, [r1]
 800a59e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a5a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1e5      	bne.n	800a572 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	3314      	adds	r3, #20
 800a5ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b0:	e853 3f00 	ldrex	r3, [r3]
 800a5b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5b8:	f043 0301 	orr.w	r3, r3, #1
 800a5bc:	657b      	str	r3, [r7, #84]	@ 0x54
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	3314      	adds	r3, #20
 800a5c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a5c6:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a5c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a5cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a5ce:	e841 2300 	strex	r3, r2, [r1]
 800a5d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1e5      	bne.n	800a5a6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	3314      	adds	r3, #20
 800a5e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	e853 3f00 	ldrex	r3, [r3]
 800a5e8:	617b      	str	r3, [r7, #20]
   return(result);
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5f0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3314      	adds	r3, #20
 800a5f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a5fa:	627a      	str	r2, [r7, #36]	@ 0x24
 800a5fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fe:	6a39      	ldr	r1, [r7, #32]
 800a600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a602:	e841 2300 	strex	r3, r2, [r1]
 800a606:	61fb      	str	r3, [r7, #28]
   return(result);
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1e5      	bne.n	800a5da <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3760      	adds	r7, #96	@ 0x60
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	0800a21b 	.word	0x0800a21b
 800a61c:	0800a341 	.word	0x0800a341
 800a620:	0800a377 	.word	0x0800a377

0800a624 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a624:	b480      	push	{r7}
 800a626:	b089      	sub	sp, #36	@ 0x24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	330c      	adds	r3, #12
 800a632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	e853 3f00 	ldrex	r3, [r3]
 800a63a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a642:	61fb      	str	r3, [r7, #28]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	330c      	adds	r3, #12
 800a64a:	69fa      	ldr	r2, [r7, #28]
 800a64c:	61ba      	str	r2, [r7, #24]
 800a64e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a650:	6979      	ldr	r1, [r7, #20]
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	e841 2300 	strex	r3, r2, [r1]
 800a658:	613b      	str	r3, [r7, #16]
   return(result);
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1e5      	bne.n	800a62c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2220      	movs	r2, #32
 800a664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800a668:	bf00      	nop
 800a66a:	3724      	adds	r7, #36	@ 0x24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a674:	b480      	push	{r7}
 800a676:	b095      	sub	sp, #84	@ 0x54
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	330c      	adds	r3, #12
 800a682:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a686:	e853 3f00 	ldrex	r3, [r3]
 800a68a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	330c      	adds	r3, #12
 800a69a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a69c:	643a      	str	r2, [r7, #64]	@ 0x40
 800a69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6a4:	e841 2300 	strex	r3, r2, [r1]
 800a6a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1e5      	bne.n	800a67c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	3314      	adds	r3, #20
 800a6b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b8:	6a3b      	ldr	r3, [r7, #32]
 800a6ba:	e853 3f00 	ldrex	r3, [r3]
 800a6be:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	f023 0301 	bic.w	r3, r3, #1
 800a6c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3314      	adds	r3, #20
 800a6ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a6d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6d8:	e841 2300 	strex	r3, r2, [r1]
 800a6dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1e5      	bne.n	800a6b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d119      	bne.n	800a720 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	330c      	adds	r3, #12
 800a6f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	e853 3f00 	ldrex	r3, [r3]
 800a6fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	f023 0310 	bic.w	r3, r3, #16
 800a702:	647b      	str	r3, [r7, #68]	@ 0x44
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	330c      	adds	r3, #12
 800a70a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a70c:	61ba      	str	r2, [r7, #24]
 800a70e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a710:	6979      	ldr	r1, [r7, #20]
 800a712:	69ba      	ldr	r2, [r7, #24]
 800a714:	e841 2300 	strex	r3, r2, [r1]
 800a718:	613b      	str	r3, [r7, #16]
   return(result);
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1e5      	bne.n	800a6ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2220      	movs	r2, #32
 800a724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2200      	movs	r2, #0
 800a72c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a72e:	bf00      	nop
 800a730:	3754      	adds	r7, #84	@ 0x54
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr

0800a73a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b084      	sub	sp, #16
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a746:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2200      	movs	r2, #0
 800a74c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f7ff fcef 	bl	800a138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a75a:	bf00      	nop
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}

0800a762 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a762:	b480      	push	{r7}
 800a764:	b085      	sub	sp, #20
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b21      	cmp	r3, #33	@ 0x21
 800a774:	d13e      	bne.n	800a7f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a77e:	d114      	bne.n	800a7aa <UART_Transmit_IT+0x48>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d110      	bne.n	800a7aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a1b      	ldr	r3, [r3, #32]
 800a78c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	881b      	ldrh	r3, [r3, #0]
 800a792:	461a      	mov	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a79c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	1c9a      	adds	r2, r3, #2
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	621a      	str	r2, [r3, #32]
 800a7a8:	e008      	b.n	800a7bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a1b      	ldr	r3, [r3, #32]
 800a7ae:	1c59      	adds	r1, r3, #1
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	6211      	str	r1, [r2, #32]
 800a7b4:	781a      	ldrb	r2, [r3, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10f      	bne.n	800a7f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68da      	ldr	r2, [r3, #12]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a7de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68da      	ldr	r2, [r3, #12]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a7ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	e000      	b.n	800a7f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a7f4:	2302      	movs	r3, #2
  }
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3714      	adds	r7, #20
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr

0800a802 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b082      	sub	sp, #8
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68da      	ldr	r2, [r3, #12]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a818:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2220      	movs	r2, #32
 800a81e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7ff fc60 	bl	800a0e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3708      	adds	r7, #8
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}

0800a832 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a832:	b580      	push	{r7, lr}
 800a834:	b08c      	sub	sp, #48	@ 0x30
 800a836:	af00      	add	r7, sp, #0
 800a838:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a840:	b2db      	uxtb	r3, r3
 800a842:	2b22      	cmp	r3, #34	@ 0x22
 800a844:	f040 80ab 	bne.w	800a99e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a850:	d117      	bne.n	800a882 <UART_Receive_IT+0x50>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d113      	bne.n	800a882 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a85a:	2300      	movs	r3, #0
 800a85c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a862:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a870:	b29a      	uxth	r2, r3
 800a872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a874:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a87a:	1c9a      	adds	r2, r3, #2
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a880:	e026      	b.n	800a8d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a886:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a888:	2300      	movs	r3, #0
 800a88a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a894:	d007      	beq.n	800a8a6 <UART_Receive_IT+0x74>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d10a      	bne.n	800a8b4 <UART_Receive_IT+0x82>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	691b      	ldr	r3, [r3, #16]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d106      	bne.n	800a8b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	b2da      	uxtb	r2, r3
 800a8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8b0:	701a      	strb	r2, [r3, #0]
 800a8b2:	e008      	b.n	800a8c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8c0:	b2da      	uxtb	r2, r3
 800a8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8ca:	1c5a      	adds	r2, r3, #1
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	4619      	mov	r1, r3
 800a8de:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d15a      	bne.n	800a99a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	68da      	ldr	r2, [r3, #12]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f022 0220 	bic.w	r2, r2, #32
 800a8f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	68da      	ldr	r2, [r3, #12]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a902:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	695a      	ldr	r2, [r3, #20]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f022 0201 	bic.w	r2, r2, #1
 800a912:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2220      	movs	r2, #32
 800a918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a920:	2b01      	cmp	r3, #1
 800a922:	d135      	bne.n	800a990 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	330c      	adds	r3, #12
 800a930:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	e853 3f00 	ldrex	r3, [r3]
 800a938:	613b      	str	r3, [r7, #16]
   return(result);
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	f023 0310 	bic.w	r3, r3, #16
 800a940:	627b      	str	r3, [r7, #36]	@ 0x24
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	330c      	adds	r3, #12
 800a948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a94a:	623a      	str	r2, [r7, #32]
 800a94c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94e:	69f9      	ldr	r1, [r7, #28]
 800a950:	6a3a      	ldr	r2, [r7, #32]
 800a952:	e841 2300 	strex	r3, r2, [r1]
 800a956:	61bb      	str	r3, [r7, #24]
   return(result);
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1e5      	bne.n	800a92a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0310 	and.w	r3, r3, #16
 800a968:	2b10      	cmp	r3, #16
 800a96a:	d10a      	bne.n	800a982 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a96c:	2300      	movs	r3, #0
 800a96e:	60fb      	str	r3, [r7, #12]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	60fb      	str	r3, [r7, #12]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	60fb      	str	r3, [r7, #12]
 800a980:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a986:	4619      	mov	r1, r3
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f7ff fbdf 	bl	800a14c <HAL_UARTEx_RxEventCallback>
 800a98e:	e002      	b.n	800a996 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f7ff fbbd 	bl	800a110 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a996:	2300      	movs	r3, #0
 800a998:	e002      	b.n	800a9a0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	e000      	b.n	800a9a0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a99e:	2302      	movs	r3, #2
  }
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3730      	adds	r7, #48	@ 0x30
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9ac:	b0c0      	sub	sp, #256	@ 0x100
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a9c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9c4:	68d9      	ldr	r1, [r3, #12]
 800a9c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	ea40 0301 	orr.w	r3, r0, r1
 800a9d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a9d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9d6:	689a      	ldr	r2, [r3, #8]
 800a9d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	431a      	orrs	r2, r3
 800a9e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	431a      	orrs	r2, r3
 800a9e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9ec:	69db      	ldr	r3, [r3, #28]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a9f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800aa00:	f021 010c 	bic.w	r1, r1, #12
 800aa04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800aa0e:	430b      	orrs	r3, r1
 800aa10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aa12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	695b      	ldr	r3, [r3, #20]
 800aa1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800aa1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa22:	6999      	ldr	r1, [r3, #24]
 800aa24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	ea40 0301 	orr.w	r3, r0, r1
 800aa2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aa30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	4b8f      	ldr	r3, [pc, #572]	@ (800ac74 <UART_SetConfig+0x2cc>)
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d005      	beq.n	800aa48 <UART_SetConfig+0xa0>
 800aa3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	4b8d      	ldr	r3, [pc, #564]	@ (800ac78 <UART_SetConfig+0x2d0>)
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d104      	bne.n	800aa52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aa48:	f7fd ff8c 	bl	8008964 <HAL_RCC_GetPCLK2Freq>
 800aa4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800aa50:	e003      	b.n	800aa5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aa52:	f7fd ff73 	bl	800893c <HAL_RCC_GetPCLK1Freq>
 800aa56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa5e:	69db      	ldr	r3, [r3, #28]
 800aa60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa64:	f040 810c 	bne.w	800ac80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aa68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aa72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800aa76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800aa7a:	4622      	mov	r2, r4
 800aa7c:	462b      	mov	r3, r5
 800aa7e:	1891      	adds	r1, r2, r2
 800aa80:	65b9      	str	r1, [r7, #88]	@ 0x58
 800aa82:	415b      	adcs	r3, r3
 800aa84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	eb12 0801 	adds.w	r8, r2, r1
 800aa90:	4629      	mov	r1, r5
 800aa92:	eb43 0901 	adc.w	r9, r3, r1
 800aa96:	f04f 0200 	mov.w	r2, #0
 800aa9a:	f04f 0300 	mov.w	r3, #0
 800aa9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aaa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aaa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800aaaa:	4690      	mov	r8, r2
 800aaac:	4699      	mov	r9, r3
 800aaae:	4623      	mov	r3, r4
 800aab0:	eb18 0303 	adds.w	r3, r8, r3
 800aab4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800aab8:	462b      	mov	r3, r5
 800aaba:	eb49 0303 	adc.w	r3, r9, r3
 800aabe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800aac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800aace:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800aad2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800aad6:	460b      	mov	r3, r1
 800aad8:	18db      	adds	r3, r3, r3
 800aada:	653b      	str	r3, [r7, #80]	@ 0x50
 800aadc:	4613      	mov	r3, r2
 800aade:	eb42 0303 	adc.w	r3, r2, r3
 800aae2:	657b      	str	r3, [r7, #84]	@ 0x54
 800aae4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800aae8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800aaec:	f7f6 f934 	bl	8000d58 <__aeabi_uldivmod>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	4b61      	ldr	r3, [pc, #388]	@ (800ac7c <UART_SetConfig+0x2d4>)
 800aaf6:	fba3 2302 	umull	r2, r3, r3, r2
 800aafa:	095b      	lsrs	r3, r3, #5
 800aafc:	011c      	lsls	r4, r3, #4
 800aafe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab02:	2200      	movs	r2, #0
 800ab04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ab0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ab10:	4642      	mov	r2, r8
 800ab12:	464b      	mov	r3, r9
 800ab14:	1891      	adds	r1, r2, r2
 800ab16:	64b9      	str	r1, [r7, #72]	@ 0x48
 800ab18:	415b      	adcs	r3, r3
 800ab1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800ab20:	4641      	mov	r1, r8
 800ab22:	eb12 0a01 	adds.w	sl, r2, r1
 800ab26:	4649      	mov	r1, r9
 800ab28:	eb43 0b01 	adc.w	fp, r3, r1
 800ab2c:	f04f 0200 	mov.w	r2, #0
 800ab30:	f04f 0300 	mov.w	r3, #0
 800ab34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ab38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ab3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab40:	4692      	mov	sl, r2
 800ab42:	469b      	mov	fp, r3
 800ab44:	4643      	mov	r3, r8
 800ab46:	eb1a 0303 	adds.w	r3, sl, r3
 800ab4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab4e:	464b      	mov	r3, r9
 800ab50:	eb4b 0303 	adc.w	r3, fp, r3
 800ab54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ab58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ab64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ab68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	18db      	adds	r3, r3, r3
 800ab70:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab72:	4613      	mov	r3, r2
 800ab74:	eb42 0303 	adc.w	r3, r2, r3
 800ab78:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ab7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ab82:	f7f6 f8e9 	bl	8000d58 <__aeabi_uldivmod>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4611      	mov	r1, r2
 800ab8c:	4b3b      	ldr	r3, [pc, #236]	@ (800ac7c <UART_SetConfig+0x2d4>)
 800ab8e:	fba3 2301 	umull	r2, r3, r3, r1
 800ab92:	095b      	lsrs	r3, r3, #5
 800ab94:	2264      	movs	r2, #100	@ 0x64
 800ab96:	fb02 f303 	mul.w	r3, r2, r3
 800ab9a:	1acb      	subs	r3, r1, r3
 800ab9c:	00db      	lsls	r3, r3, #3
 800ab9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800aba2:	4b36      	ldr	r3, [pc, #216]	@ (800ac7c <UART_SetConfig+0x2d4>)
 800aba4:	fba3 2302 	umull	r2, r3, r3, r2
 800aba8:	095b      	lsrs	r3, r3, #5
 800abaa:	005b      	lsls	r3, r3, #1
 800abac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800abb0:	441c      	add	r4, r3
 800abb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800abb6:	2200      	movs	r2, #0
 800abb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800abbc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800abc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800abc4:	4642      	mov	r2, r8
 800abc6:	464b      	mov	r3, r9
 800abc8:	1891      	adds	r1, r2, r2
 800abca:	63b9      	str	r1, [r7, #56]	@ 0x38
 800abcc:	415b      	adcs	r3, r3
 800abce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800abd4:	4641      	mov	r1, r8
 800abd6:	1851      	adds	r1, r2, r1
 800abd8:	6339      	str	r1, [r7, #48]	@ 0x30
 800abda:	4649      	mov	r1, r9
 800abdc:	414b      	adcs	r3, r1
 800abde:	637b      	str	r3, [r7, #52]	@ 0x34
 800abe0:	f04f 0200 	mov.w	r2, #0
 800abe4:	f04f 0300 	mov.w	r3, #0
 800abe8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800abec:	4659      	mov	r1, fp
 800abee:	00cb      	lsls	r3, r1, #3
 800abf0:	4651      	mov	r1, sl
 800abf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abf6:	4651      	mov	r1, sl
 800abf8:	00ca      	lsls	r2, r1, #3
 800abfa:	4610      	mov	r0, r2
 800abfc:	4619      	mov	r1, r3
 800abfe:	4603      	mov	r3, r0
 800ac00:	4642      	mov	r2, r8
 800ac02:	189b      	adds	r3, r3, r2
 800ac04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ac08:	464b      	mov	r3, r9
 800ac0a:	460a      	mov	r2, r1
 800ac0c:	eb42 0303 	adc.w	r3, r2, r3
 800ac10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ac14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ac20:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ac24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ac28:	460b      	mov	r3, r1
 800ac2a:	18db      	adds	r3, r3, r3
 800ac2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ac2e:	4613      	mov	r3, r2
 800ac30:	eb42 0303 	adc.w	r3, r2, r3
 800ac34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ac36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ac3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ac3e:	f7f6 f88b 	bl	8000d58 <__aeabi_uldivmod>
 800ac42:	4602      	mov	r2, r0
 800ac44:	460b      	mov	r3, r1
 800ac46:	4b0d      	ldr	r3, [pc, #52]	@ (800ac7c <UART_SetConfig+0x2d4>)
 800ac48:	fba3 1302 	umull	r1, r3, r3, r2
 800ac4c:	095b      	lsrs	r3, r3, #5
 800ac4e:	2164      	movs	r1, #100	@ 0x64
 800ac50:	fb01 f303 	mul.w	r3, r1, r3
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	00db      	lsls	r3, r3, #3
 800ac58:	3332      	adds	r3, #50	@ 0x32
 800ac5a:	4a08      	ldr	r2, [pc, #32]	@ (800ac7c <UART_SetConfig+0x2d4>)
 800ac5c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac60:	095b      	lsrs	r3, r3, #5
 800ac62:	f003 0207 	and.w	r2, r3, #7
 800ac66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4422      	add	r2, r4
 800ac6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ac70:	e106      	b.n	800ae80 <UART_SetConfig+0x4d8>
 800ac72:	bf00      	nop
 800ac74:	40011000 	.word	0x40011000
 800ac78:	40011400 	.word	0x40011400
 800ac7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ac80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac84:	2200      	movs	r2, #0
 800ac86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ac8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ac8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ac92:	4642      	mov	r2, r8
 800ac94:	464b      	mov	r3, r9
 800ac96:	1891      	adds	r1, r2, r2
 800ac98:	6239      	str	r1, [r7, #32]
 800ac9a:	415b      	adcs	r3, r3
 800ac9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aca2:	4641      	mov	r1, r8
 800aca4:	1854      	adds	r4, r2, r1
 800aca6:	4649      	mov	r1, r9
 800aca8:	eb43 0501 	adc.w	r5, r3, r1
 800acac:	f04f 0200 	mov.w	r2, #0
 800acb0:	f04f 0300 	mov.w	r3, #0
 800acb4:	00eb      	lsls	r3, r5, #3
 800acb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800acba:	00e2      	lsls	r2, r4, #3
 800acbc:	4614      	mov	r4, r2
 800acbe:	461d      	mov	r5, r3
 800acc0:	4643      	mov	r3, r8
 800acc2:	18e3      	adds	r3, r4, r3
 800acc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800acc8:	464b      	mov	r3, r9
 800acca:	eb45 0303 	adc.w	r3, r5, r3
 800acce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800acd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800acde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ace2:	f04f 0200 	mov.w	r2, #0
 800ace6:	f04f 0300 	mov.w	r3, #0
 800acea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800acee:	4629      	mov	r1, r5
 800acf0:	008b      	lsls	r3, r1, #2
 800acf2:	4621      	mov	r1, r4
 800acf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800acf8:	4621      	mov	r1, r4
 800acfa:	008a      	lsls	r2, r1, #2
 800acfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ad00:	f7f6 f82a 	bl	8000d58 <__aeabi_uldivmod>
 800ad04:	4602      	mov	r2, r0
 800ad06:	460b      	mov	r3, r1
 800ad08:	4b60      	ldr	r3, [pc, #384]	@ (800ae8c <UART_SetConfig+0x4e4>)
 800ad0a:	fba3 2302 	umull	r2, r3, r3, r2
 800ad0e:	095b      	lsrs	r3, r3, #5
 800ad10:	011c      	lsls	r4, r3, #4
 800ad12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ad16:	2200      	movs	r2, #0
 800ad18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ad1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ad20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800ad24:	4642      	mov	r2, r8
 800ad26:	464b      	mov	r3, r9
 800ad28:	1891      	adds	r1, r2, r2
 800ad2a:	61b9      	str	r1, [r7, #24]
 800ad2c:	415b      	adcs	r3, r3
 800ad2e:	61fb      	str	r3, [r7, #28]
 800ad30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ad34:	4641      	mov	r1, r8
 800ad36:	1851      	adds	r1, r2, r1
 800ad38:	6139      	str	r1, [r7, #16]
 800ad3a:	4649      	mov	r1, r9
 800ad3c:	414b      	adcs	r3, r1
 800ad3e:	617b      	str	r3, [r7, #20]
 800ad40:	f04f 0200 	mov.w	r2, #0
 800ad44:	f04f 0300 	mov.w	r3, #0
 800ad48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ad4c:	4659      	mov	r1, fp
 800ad4e:	00cb      	lsls	r3, r1, #3
 800ad50:	4651      	mov	r1, sl
 800ad52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad56:	4651      	mov	r1, sl
 800ad58:	00ca      	lsls	r2, r1, #3
 800ad5a:	4610      	mov	r0, r2
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	4603      	mov	r3, r0
 800ad60:	4642      	mov	r2, r8
 800ad62:	189b      	adds	r3, r3, r2
 800ad64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ad68:	464b      	mov	r3, r9
 800ad6a:	460a      	mov	r2, r1
 800ad6c:	eb42 0303 	adc.w	r3, r2, r3
 800ad70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ad74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ad7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ad80:	f04f 0200 	mov.w	r2, #0
 800ad84:	f04f 0300 	mov.w	r3, #0
 800ad88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ad8c:	4649      	mov	r1, r9
 800ad8e:	008b      	lsls	r3, r1, #2
 800ad90:	4641      	mov	r1, r8
 800ad92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad96:	4641      	mov	r1, r8
 800ad98:	008a      	lsls	r2, r1, #2
 800ad9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ad9e:	f7f5 ffdb 	bl	8000d58 <__aeabi_uldivmod>
 800ada2:	4602      	mov	r2, r0
 800ada4:	460b      	mov	r3, r1
 800ada6:	4611      	mov	r1, r2
 800ada8:	4b38      	ldr	r3, [pc, #224]	@ (800ae8c <UART_SetConfig+0x4e4>)
 800adaa:	fba3 2301 	umull	r2, r3, r3, r1
 800adae:	095b      	lsrs	r3, r3, #5
 800adb0:	2264      	movs	r2, #100	@ 0x64
 800adb2:	fb02 f303 	mul.w	r3, r2, r3
 800adb6:	1acb      	subs	r3, r1, r3
 800adb8:	011b      	lsls	r3, r3, #4
 800adba:	3332      	adds	r3, #50	@ 0x32
 800adbc:	4a33      	ldr	r2, [pc, #204]	@ (800ae8c <UART_SetConfig+0x4e4>)
 800adbe:	fba2 2303 	umull	r2, r3, r2, r3
 800adc2:	095b      	lsrs	r3, r3, #5
 800adc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800adc8:	441c      	add	r4, r3
 800adca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800adce:	2200      	movs	r2, #0
 800add0:	673b      	str	r3, [r7, #112]	@ 0x70
 800add2:	677a      	str	r2, [r7, #116]	@ 0x74
 800add4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800add8:	4642      	mov	r2, r8
 800adda:	464b      	mov	r3, r9
 800addc:	1891      	adds	r1, r2, r2
 800adde:	60b9      	str	r1, [r7, #8]
 800ade0:	415b      	adcs	r3, r3
 800ade2:	60fb      	str	r3, [r7, #12]
 800ade4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ade8:	4641      	mov	r1, r8
 800adea:	1851      	adds	r1, r2, r1
 800adec:	6039      	str	r1, [r7, #0]
 800adee:	4649      	mov	r1, r9
 800adf0:	414b      	adcs	r3, r1
 800adf2:	607b      	str	r3, [r7, #4]
 800adf4:	f04f 0200 	mov.w	r2, #0
 800adf8:	f04f 0300 	mov.w	r3, #0
 800adfc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ae00:	4659      	mov	r1, fp
 800ae02:	00cb      	lsls	r3, r1, #3
 800ae04:	4651      	mov	r1, sl
 800ae06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ae0a:	4651      	mov	r1, sl
 800ae0c:	00ca      	lsls	r2, r1, #3
 800ae0e:	4610      	mov	r0, r2
 800ae10:	4619      	mov	r1, r3
 800ae12:	4603      	mov	r3, r0
 800ae14:	4642      	mov	r2, r8
 800ae16:	189b      	adds	r3, r3, r2
 800ae18:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae1a:	464b      	mov	r3, r9
 800ae1c:	460a      	mov	r2, r1
 800ae1e:	eb42 0303 	adc.w	r3, r2, r3
 800ae22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae2e:	667a      	str	r2, [r7, #100]	@ 0x64
 800ae30:	f04f 0200 	mov.w	r2, #0
 800ae34:	f04f 0300 	mov.w	r3, #0
 800ae38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800ae3c:	4649      	mov	r1, r9
 800ae3e:	008b      	lsls	r3, r1, #2
 800ae40:	4641      	mov	r1, r8
 800ae42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ae46:	4641      	mov	r1, r8
 800ae48:	008a      	lsls	r2, r1, #2
 800ae4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800ae4e:	f7f5 ff83 	bl	8000d58 <__aeabi_uldivmod>
 800ae52:	4602      	mov	r2, r0
 800ae54:	460b      	mov	r3, r1
 800ae56:	4b0d      	ldr	r3, [pc, #52]	@ (800ae8c <UART_SetConfig+0x4e4>)
 800ae58:	fba3 1302 	umull	r1, r3, r3, r2
 800ae5c:	095b      	lsrs	r3, r3, #5
 800ae5e:	2164      	movs	r1, #100	@ 0x64
 800ae60:	fb01 f303 	mul.w	r3, r1, r3
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	011b      	lsls	r3, r3, #4
 800ae68:	3332      	adds	r3, #50	@ 0x32
 800ae6a:	4a08      	ldr	r2, [pc, #32]	@ (800ae8c <UART_SetConfig+0x4e4>)
 800ae6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae70:	095b      	lsrs	r3, r3, #5
 800ae72:	f003 020f 	and.w	r2, r3, #15
 800ae76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4422      	add	r2, r4
 800ae7e:	609a      	str	r2, [r3, #8]
}
 800ae80:	bf00      	nop
 800ae82:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ae86:	46bd      	mov	sp, r7
 800ae88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae8c:	51eb851f 	.word	0x51eb851f

0800ae90 <__NVIC_SetPriority>:
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4603      	mov	r3, r0
 800ae98:	6039      	str	r1, [r7, #0]
 800ae9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	db0a      	blt.n	800aeba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	b2da      	uxtb	r2, r3
 800aea8:	490c      	ldr	r1, [pc, #48]	@ (800aedc <__NVIC_SetPriority+0x4c>)
 800aeaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeae:	0112      	lsls	r2, r2, #4
 800aeb0:	b2d2      	uxtb	r2, r2
 800aeb2:	440b      	add	r3, r1
 800aeb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800aeb8:	e00a      	b.n	800aed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	b2da      	uxtb	r2, r3
 800aebe:	4908      	ldr	r1, [pc, #32]	@ (800aee0 <__NVIC_SetPriority+0x50>)
 800aec0:	79fb      	ldrb	r3, [r7, #7]
 800aec2:	f003 030f 	and.w	r3, r3, #15
 800aec6:	3b04      	subs	r3, #4
 800aec8:	0112      	lsls	r2, r2, #4
 800aeca:	b2d2      	uxtb	r2, r2
 800aecc:	440b      	add	r3, r1
 800aece:	761a      	strb	r2, [r3, #24]
}
 800aed0:	bf00      	nop
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr
 800aedc:	e000e100 	.word	0xe000e100
 800aee0:	e000ed00 	.word	0xe000ed00

0800aee4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800aee4:	b580      	push	{r7, lr}
 800aee6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800aee8:	4b05      	ldr	r3, [pc, #20]	@ (800af00 <SysTick_Handler+0x1c>)
 800aeea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800aeec:	f001 fe40 	bl	800cb70 <xTaskGetSchedulerState>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d001      	beq.n	800aefa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800aef6:	f002 fd37 	bl	800d968 <xPortSysTickHandler>
  }
}
 800aefa:	bf00      	nop
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	e000e010 	.word	0xe000e010

0800af04 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800af04:	b580      	push	{r7, lr}
 800af06:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800af08:	2100      	movs	r1, #0
 800af0a:	f06f 0004 	mvn.w	r0, #4
 800af0e:	f7ff ffbf 	bl	800ae90 <__NVIC_SetPriority>
#endif
}
 800af12:	bf00      	nop
 800af14:	bd80      	pop	{r7, pc}
	...

0800af18 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af1e:	f3ef 8305 	mrs	r3, IPSR
 800af22:	603b      	str	r3, [r7, #0]
  return(result);
 800af24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af26:	2b00      	cmp	r3, #0
 800af28:	d003      	beq.n	800af32 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800af2a:	f06f 0305 	mvn.w	r3, #5
 800af2e:	607b      	str	r3, [r7, #4]
 800af30:	e00c      	b.n	800af4c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800af32:	4b0a      	ldr	r3, [pc, #40]	@ (800af5c <osKernelInitialize+0x44>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d105      	bne.n	800af46 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800af3a:	4b08      	ldr	r3, [pc, #32]	@ (800af5c <osKernelInitialize+0x44>)
 800af3c:	2201      	movs	r2, #1
 800af3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800af40:	2300      	movs	r3, #0
 800af42:	607b      	str	r3, [r7, #4]
 800af44:	e002      	b.n	800af4c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800af46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800af4c:	687b      	ldr	r3, [r7, #4]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	370c      	adds	r7, #12
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	20004ed0 	.word	0x20004ed0

0800af60 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800af60:	b580      	push	{r7, lr}
 800af62:	b082      	sub	sp, #8
 800af64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af66:	f3ef 8305 	mrs	r3, IPSR
 800af6a:	603b      	str	r3, [r7, #0]
  return(result);
 800af6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <osKernelStart+0x1a>
    stat = osErrorISR;
 800af72:	f06f 0305 	mvn.w	r3, #5
 800af76:	607b      	str	r3, [r7, #4]
 800af78:	e010      	b.n	800af9c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800af7a:	4b0b      	ldr	r3, [pc, #44]	@ (800afa8 <osKernelStart+0x48>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d109      	bne.n	800af96 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800af82:	f7ff ffbf 	bl	800af04 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800af86:	4b08      	ldr	r3, [pc, #32]	@ (800afa8 <osKernelStart+0x48>)
 800af88:	2202      	movs	r2, #2
 800af8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800af8c:	f001 f964 	bl	800c258 <vTaskStartScheduler>
      stat = osOK;
 800af90:	2300      	movs	r3, #0
 800af92:	607b      	str	r3, [r7, #4]
 800af94:	e002      	b.n	800af9c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800af96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800af9c:	687b      	ldr	r3, [r7, #4]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	20004ed0 	.word	0x20004ed0

0800afac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afb4:	f3ef 8305 	mrs	r3, IPSR
 800afb8:	60bb      	str	r3, [r7, #8]
  return(result);
 800afba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d003      	beq.n	800afc8 <osDelay+0x1c>
    stat = osErrorISR;
 800afc0:	f06f 0305 	mvn.w	r3, #5
 800afc4:	60fb      	str	r3, [r7, #12]
 800afc6:	e007      	b.n	800afd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800afc8:	2300      	movs	r3, #0
 800afca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d002      	beq.n	800afd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f001 f90a 	bl	800c1ec <vTaskDelay>
    }
  }

  return (stat);
 800afd8:	68fb      	ldr	r3, [r7, #12]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
	...

0800afe4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	4a07      	ldr	r2, [pc, #28]	@ (800b010 <vApplicationGetIdleTaskMemory+0x2c>)
 800aff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	4a06      	ldr	r2, [pc, #24]	@ (800b014 <vApplicationGetIdleTaskMemory+0x30>)
 800affa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2280      	movs	r2, #128	@ 0x80
 800b000:	601a      	str	r2, [r3, #0]
}
 800b002:	bf00      	nop
 800b004:	3714      	adds	r7, #20
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	20004ed4 	.word	0x20004ed4
 800b014:	20004f7c 	.word	0x20004f7c

0800b018 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	4a07      	ldr	r2, [pc, #28]	@ (800b044 <vApplicationGetTimerTaskMemory+0x2c>)
 800b028:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	4a06      	ldr	r2, [pc, #24]	@ (800b048 <vApplicationGetTimerTaskMemory+0x30>)
 800b02e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b036:	601a      	str	r2, [r3, #0]
}
 800b038:	bf00      	nop
 800b03a:	3714      	adds	r7, #20
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr
 800b044:	2000517c 	.word	0x2000517c
 800b048:	20005224 	.word	0x20005224

0800b04c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f103 0208 	add.w	r2, r3, #8
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b064:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f103 0208 	add.w	r2, r3, #8
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f103 0208 	add.w	r2, r3, #8
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b09a:	bf00      	nop
 800b09c:	370c      	adds	r7, #12
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0a6:	b480      	push	{r7}
 800b0a8:	b085      	sub	sp, #20
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	689a      	ldr	r2, [r3, #8]
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	683a      	ldr	r2, [r7, #0]
 800b0ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	683a      	ldr	r2, [r7, #0]
 800b0d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	1c5a      	adds	r2, r3, #1
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	601a      	str	r2, [r3, #0]
}
 800b0e2:	bf00      	nop
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr

0800b0ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	b085      	sub	sp, #20
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
 800b0f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b104:	d103      	bne.n	800b10e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	e00c      	b.n	800b128 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	3308      	adds	r3, #8
 800b112:	60fb      	str	r3, [r7, #12]
 800b114:	e002      	b.n	800b11c <vListInsert+0x2e>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	60fb      	str	r3, [r7, #12]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	429a      	cmp	r2, r3
 800b126:	d2f6      	bcs.n	800b116 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	683a      	ldr	r2, [r7, #0]
 800b142:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	1c5a      	adds	r2, r3, #1
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	601a      	str	r2, [r3, #0]
}
 800b154:	bf00      	nop
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	691b      	ldr	r3, [r3, #16]
 800b16c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	6892      	ldr	r2, [r2, #8]
 800b176:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	6852      	ldr	r2, [r2, #4]
 800b180:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d103      	bne.n	800b194 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	689a      	ldr	r2, [r3, #8]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	1e5a      	subs	r2, r3, #1
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3714      	adds	r7, #20
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d10b      	bne.n	800b1e0 <xQueueGenericReset+0x2c>
	__asm volatile
 800b1c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1cc:	f383 8811 	msr	BASEPRI, r3
 800b1d0:	f3bf 8f6f 	isb	sy
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	60bb      	str	r3, [r7, #8]
}
 800b1da:	bf00      	nop
 800b1dc:	bf00      	nop
 800b1de:	e7fd      	b.n	800b1dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b1e0:	f002 fb32 	bl	800d848 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1ec:	68f9      	ldr	r1, [r7, #12]
 800b1ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b1f0:	fb01 f303 	mul.w	r3, r1, r3
 800b1f4:	441a      	add	r2, r3
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b210:	3b01      	subs	r3, #1
 800b212:	68f9      	ldr	r1, [r7, #12]
 800b214:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b216:	fb01 f303 	mul.w	r3, r1, r3
 800b21a:	441a      	add	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	22ff      	movs	r2, #255	@ 0xff
 800b224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	22ff      	movs	r2, #255	@ 0xff
 800b22c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d114      	bne.n	800b260 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d01a      	beq.n	800b274 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3310      	adds	r3, #16
 800b242:	4618      	mov	r0, r3
 800b244:	f001 faa6 	bl	800c794 <xTaskRemoveFromEventList>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d012      	beq.n	800b274 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b24e:	4b0d      	ldr	r3, [pc, #52]	@ (800b284 <xQueueGenericReset+0xd0>)
 800b250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b254:	601a      	str	r2, [r3, #0]
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	f3bf 8f6f 	isb	sy
 800b25e:	e009      	b.n	800b274 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	3310      	adds	r3, #16
 800b264:	4618      	mov	r0, r3
 800b266:	f7ff fef1 	bl	800b04c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	3324      	adds	r3, #36	@ 0x24
 800b26e:	4618      	mov	r0, r3
 800b270:	f7ff feec 	bl	800b04c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b274:	f002 fb1a 	bl	800d8ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b278:	2301      	movs	r3, #1
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	e000ed04 	.word	0xe000ed04

0800b288 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b08e      	sub	sp, #56	@ 0x38
 800b28c:	af02      	add	r7, sp, #8
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
 800b294:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10b      	bne.n	800b2b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a0:	f383 8811 	msr	BASEPRI, r3
 800b2a4:	f3bf 8f6f 	isb	sy
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b2ae:	bf00      	nop
 800b2b0:	bf00      	nop
 800b2b2:	e7fd      	b.n	800b2b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10b      	bne.n	800b2d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b2cc:	bf00      	nop
 800b2ce:	bf00      	nop
 800b2d0:	e7fd      	b.n	800b2ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d002      	beq.n	800b2de <xQueueGenericCreateStatic+0x56>
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d001      	beq.n	800b2e2 <xQueueGenericCreateStatic+0x5a>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e000      	b.n	800b2e4 <xQueueGenericCreateStatic+0x5c>
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d10b      	bne.n	800b300 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ec:	f383 8811 	msr	BASEPRI, r3
 800b2f0:	f3bf 8f6f 	isb	sy
 800b2f4:	f3bf 8f4f 	dsb	sy
 800b2f8:	623b      	str	r3, [r7, #32]
}
 800b2fa:	bf00      	nop
 800b2fc:	bf00      	nop
 800b2fe:	e7fd      	b.n	800b2fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d102      	bne.n	800b30c <xQueueGenericCreateStatic+0x84>
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d101      	bne.n	800b310 <xQueueGenericCreateStatic+0x88>
 800b30c:	2301      	movs	r3, #1
 800b30e:	e000      	b.n	800b312 <xQueueGenericCreateStatic+0x8a>
 800b310:	2300      	movs	r3, #0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d10b      	bne.n	800b32e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b31a:	f383 8811 	msr	BASEPRI, r3
 800b31e:	f3bf 8f6f 	isb	sy
 800b322:	f3bf 8f4f 	dsb	sy
 800b326:	61fb      	str	r3, [r7, #28]
}
 800b328:	bf00      	nop
 800b32a:	bf00      	nop
 800b32c:	e7fd      	b.n	800b32a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b32e:	2350      	movs	r3, #80	@ 0x50
 800b330:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2b50      	cmp	r3, #80	@ 0x50
 800b336:	d00b      	beq.n	800b350 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b33c:	f383 8811 	msr	BASEPRI, r3
 800b340:	f3bf 8f6f 	isb	sy
 800b344:	f3bf 8f4f 	dsb	sy
 800b348:	61bb      	str	r3, [r7, #24]
}
 800b34a:	bf00      	nop
 800b34c:	bf00      	nop
 800b34e:	e7fd      	b.n	800b34c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b350:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00d      	beq.n	800b378 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b364:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	4613      	mov	r3, r2
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	68b9      	ldr	r1, [r7, #8]
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f000 f840 	bl	800b3f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3730      	adds	r7, #48	@ 0x30
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}

0800b382 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b382:	b580      	push	{r7, lr}
 800b384:	b08a      	sub	sp, #40	@ 0x28
 800b386:	af02      	add	r7, sp, #8
 800b388:	60f8      	str	r0, [r7, #12]
 800b38a:	60b9      	str	r1, [r7, #8]
 800b38c:	4613      	mov	r3, r2
 800b38e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10b      	bne.n	800b3ae <xQueueGenericCreate+0x2c>
	__asm volatile
 800b396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b39a:	f383 8811 	msr	BASEPRI, r3
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	613b      	str	r3, [r7, #16]
}
 800b3a8:	bf00      	nop
 800b3aa:	bf00      	nop
 800b3ac:	e7fd      	b.n	800b3aa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	68ba      	ldr	r2, [r7, #8]
 800b3b2:	fb02 f303 	mul.w	r3, r2, r3
 800b3b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	3350      	adds	r3, #80	@ 0x50
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f002 fb65 	bl	800da8c <pvPortMalloc>
 800b3c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d011      	beq.n	800b3ee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	3350      	adds	r3, #80	@ 0x50
 800b3d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b3dc:	79fa      	ldrb	r2, [r7, #7]
 800b3de:	69bb      	ldr	r3, [r7, #24]
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	697a      	ldr	r2, [r7, #20]
 800b3e6:	68b9      	ldr	r1, [r7, #8]
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f000 f805 	bl	800b3f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b3ee:	69bb      	ldr	r3, [r7, #24]
	}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3720      	adds	r7, #32
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d103      	bne.n	800b414 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	69ba      	ldr	r2, [r7, #24]
 800b410:	601a      	str	r2, [r3, #0]
 800b412:	e002      	b.n	800b41a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b41a:	69bb      	ldr	r3, [r7, #24]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	68ba      	ldr	r2, [r7, #8]
 800b424:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b426:	2101      	movs	r1, #1
 800b428:	69b8      	ldr	r0, [r7, #24]
 800b42a:	f7ff fec3 	bl	800b1b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	78fa      	ldrb	r2, [r7, #3]
 800b432:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b436:	bf00      	nop
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
	...

0800b440 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b08e      	sub	sp, #56	@ 0x38
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b44e:	2300      	movs	r3, #0
 800b450:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d10b      	bne.n	800b474 <xQueueGenericSend+0x34>
	__asm volatile
 800b45c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b46e:	bf00      	nop
 800b470:	bf00      	nop
 800b472:	e7fd      	b.n	800b470 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d103      	bne.n	800b482 <xQueueGenericSend+0x42>
 800b47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d101      	bne.n	800b486 <xQueueGenericSend+0x46>
 800b482:	2301      	movs	r3, #1
 800b484:	e000      	b.n	800b488 <xQueueGenericSend+0x48>
 800b486:	2300      	movs	r3, #0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d10b      	bne.n	800b4a4 <xQueueGenericSend+0x64>
	__asm volatile
 800b48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b490:	f383 8811 	msr	BASEPRI, r3
 800b494:	f3bf 8f6f 	isb	sy
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b49e:	bf00      	nop
 800b4a0:	bf00      	nop
 800b4a2:	e7fd      	b.n	800b4a0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	d103      	bne.n	800b4b2 <xQueueGenericSend+0x72>
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d101      	bne.n	800b4b6 <xQueueGenericSend+0x76>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e000      	b.n	800b4b8 <xQueueGenericSend+0x78>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10b      	bne.n	800b4d4 <xQueueGenericSend+0x94>
	__asm volatile
 800b4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c0:	f383 8811 	msr	BASEPRI, r3
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	623b      	str	r3, [r7, #32]
}
 800b4ce:	bf00      	nop
 800b4d0:	bf00      	nop
 800b4d2:	e7fd      	b.n	800b4d0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4d4:	f001 fb4c 	bl	800cb70 <xTaskGetSchedulerState>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d102      	bne.n	800b4e4 <xQueueGenericSend+0xa4>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <xQueueGenericSend+0xa8>
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e000      	b.n	800b4ea <xQueueGenericSend+0xaa>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10b      	bne.n	800b506 <xQueueGenericSend+0xc6>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	61fb      	str	r3, [r7, #28]
}
 800b500:	bf00      	nop
 800b502:	bf00      	nop
 800b504:	e7fd      	b.n	800b502 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b506:	f002 f99f 	bl	800d848 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b50c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b512:	429a      	cmp	r2, r3
 800b514:	d302      	bcc.n	800b51c <xQueueGenericSend+0xdc>
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d129      	bne.n	800b570 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b51c:	683a      	ldr	r2, [r7, #0]
 800b51e:	68b9      	ldr	r1, [r7, #8]
 800b520:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b522:	f000 fb37 	bl	800bb94 <prvCopyDataToQueue>
 800b526:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d010      	beq.n	800b552 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b532:	3324      	adds	r3, #36	@ 0x24
 800b534:	4618      	mov	r0, r3
 800b536:	f001 f92d 	bl	800c794 <xTaskRemoveFromEventList>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d013      	beq.n	800b568 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b540:	4b3f      	ldr	r3, [pc, #252]	@ (800b640 <xQueueGenericSend+0x200>)
 800b542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b546:	601a      	str	r2, [r3, #0]
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	e00a      	b.n	800b568 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b554:	2b00      	cmp	r3, #0
 800b556:	d007      	beq.n	800b568 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b558:	4b39      	ldr	r3, [pc, #228]	@ (800b640 <xQueueGenericSend+0x200>)
 800b55a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b55e:	601a      	str	r2, [r3, #0]
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b568:	f002 f9a0 	bl	800d8ac <vPortExitCritical>
				return pdPASS;
 800b56c:	2301      	movs	r3, #1
 800b56e:	e063      	b.n	800b638 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d103      	bne.n	800b57e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b576:	f002 f999 	bl	800d8ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b57a:	2300      	movs	r3, #0
 800b57c:	e05c      	b.n	800b638 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b57e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b580:	2b00      	cmp	r3, #0
 800b582:	d106      	bne.n	800b592 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b584:	f107 0314 	add.w	r3, r7, #20
 800b588:	4618      	mov	r0, r3
 800b58a:	f001 f98f 	bl	800c8ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b58e:	2301      	movs	r3, #1
 800b590:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b592:	f002 f98b 	bl	800d8ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b596:	f000 fecf 	bl	800c338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b59a:	f002 f955 	bl	800d848 <vPortEnterCritical>
 800b59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b5a4:	b25b      	sxtb	r3, r3
 800b5a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b5aa:	d103      	bne.n	800b5b4 <xQueueGenericSend+0x174>
 800b5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b5ba:	b25b      	sxtb	r3, r3
 800b5bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b5c0:	d103      	bne.n	800b5ca <xQueueGenericSend+0x18a>
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b5ca:	f002 f96f 	bl	800d8ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5ce:	1d3a      	adds	r2, r7, #4
 800b5d0:	f107 0314 	add.w	r3, r7, #20
 800b5d4:	4611      	mov	r1, r2
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f001 f97e 	bl	800c8d8 <xTaskCheckForTimeOut>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d124      	bne.n	800b62c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b5e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5e4:	f000 fbce 	bl	800bd84 <prvIsQueueFull>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d018      	beq.n	800b620 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f0:	3310      	adds	r3, #16
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f001 f87a 	bl	800c6f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b5fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5fe:	f000 fb59 	bl	800bcb4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b602:	f000 fea7 	bl	800c354 <xTaskResumeAll>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f47f af7c 	bne.w	800b506 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b60e:	4b0c      	ldr	r3, [pc, #48]	@ (800b640 <xQueueGenericSend+0x200>)
 800b610:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b614:	601a      	str	r2, [r3, #0]
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	f3bf 8f6f 	isb	sy
 800b61e:	e772      	b.n	800b506 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b620:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b622:	f000 fb47 	bl	800bcb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b626:	f000 fe95 	bl	800c354 <xTaskResumeAll>
 800b62a:	e76c      	b.n	800b506 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b62c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b62e:	f000 fb41 	bl	800bcb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b632:	f000 fe8f 	bl	800c354 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b636:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3738      	adds	r7, #56	@ 0x38
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	e000ed04 	.word	0xe000ed04

0800b644 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b090      	sub	sp, #64	@ 0x40
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
 800b650:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10b      	bne.n	800b674 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b660:	f383 8811 	msr	BASEPRI, r3
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b66e:	bf00      	nop
 800b670:	bf00      	nop
 800b672:	e7fd      	b.n	800b670 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d103      	bne.n	800b682 <xQueueGenericSendFromISR+0x3e>
 800b67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b67c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d101      	bne.n	800b686 <xQueueGenericSendFromISR+0x42>
 800b682:	2301      	movs	r3, #1
 800b684:	e000      	b.n	800b688 <xQueueGenericSendFromISR+0x44>
 800b686:	2300      	movs	r3, #0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d10b      	bne.n	800b6a4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b690:	f383 8811 	msr	BASEPRI, r3
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b69e:	bf00      	nop
 800b6a0:	bf00      	nop
 800b6a2:	e7fd      	b.n	800b6a0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d103      	bne.n	800b6b2 <xQueueGenericSendFromISR+0x6e>
 800b6aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d101      	bne.n	800b6b6 <xQueueGenericSendFromISR+0x72>
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e000      	b.n	800b6b8 <xQueueGenericSendFromISR+0x74>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d10b      	bne.n	800b6d4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	623b      	str	r3, [r7, #32]
}
 800b6ce:	bf00      	nop
 800b6d0:	bf00      	nop
 800b6d2:	e7fd      	b.n	800b6d0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6d4:	f002 f998 	bl	800da08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b6d8:	f3ef 8211 	mrs	r2, BASEPRI
 800b6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e0:	f383 8811 	msr	BASEPRI, r3
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	61fa      	str	r2, [r7, #28]
 800b6ee:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b6f0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6f2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d302      	bcc.n	800b706 <xQueueGenericSendFromISR+0xc2>
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	2b02      	cmp	r3, #2
 800b704:	d12f      	bne.n	800b766 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b708:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b70c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b714:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	68b9      	ldr	r1, [r7, #8]
 800b71a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b71c:	f000 fa3a 	bl	800bb94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b720:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b728:	d112      	bne.n	800b750 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b72c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d016      	beq.n	800b760 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b734:	3324      	adds	r3, #36	@ 0x24
 800b736:	4618      	mov	r0, r3
 800b738:	f001 f82c 	bl	800c794 <xTaskRemoveFromEventList>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d00e      	beq.n	800b760 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d00b      	beq.n	800b760 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2201      	movs	r2, #1
 800b74c:	601a      	str	r2, [r3, #0]
 800b74e:	e007      	b.n	800b760 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b750:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b754:	3301      	adds	r3, #1
 800b756:	b2db      	uxtb	r3, r3
 800b758:	b25a      	sxtb	r2, r3
 800b75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b760:	2301      	movs	r3, #1
 800b762:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b764:	e001      	b.n	800b76a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b766:	2300      	movs	r3, #0
 800b768:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b76a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b76c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b774:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3740      	adds	r7, #64	@ 0x40
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b08c      	sub	sp, #48	@ 0x30
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b78c:	2300      	movs	r3, #0
 800b78e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b796:	2b00      	cmp	r3, #0
 800b798:	d10b      	bne.n	800b7b2 <xQueueReceive+0x32>
	__asm volatile
 800b79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b79e:	f383 8811 	msr	BASEPRI, r3
 800b7a2:	f3bf 8f6f 	isb	sy
 800b7a6:	f3bf 8f4f 	dsb	sy
 800b7aa:	623b      	str	r3, [r7, #32]
}
 800b7ac:	bf00      	nop
 800b7ae:	bf00      	nop
 800b7b0:	e7fd      	b.n	800b7ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d103      	bne.n	800b7c0 <xQueueReceive+0x40>
 800b7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d101      	bne.n	800b7c4 <xQueueReceive+0x44>
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e000      	b.n	800b7c6 <xQueueReceive+0x46>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d10b      	bne.n	800b7e2 <xQueueReceive+0x62>
	__asm volatile
 800b7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ce:	f383 8811 	msr	BASEPRI, r3
 800b7d2:	f3bf 8f6f 	isb	sy
 800b7d6:	f3bf 8f4f 	dsb	sy
 800b7da:	61fb      	str	r3, [r7, #28]
}
 800b7dc:	bf00      	nop
 800b7de:	bf00      	nop
 800b7e0:	e7fd      	b.n	800b7de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b7e2:	f001 f9c5 	bl	800cb70 <xTaskGetSchedulerState>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d102      	bne.n	800b7f2 <xQueueReceive+0x72>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d101      	bne.n	800b7f6 <xQueueReceive+0x76>
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e000      	b.n	800b7f8 <xQueueReceive+0x78>
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d10b      	bne.n	800b814 <xQueueReceive+0x94>
	__asm volatile
 800b7fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b800:	f383 8811 	msr	BASEPRI, r3
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	61bb      	str	r3, [r7, #24]
}
 800b80e:	bf00      	nop
 800b810:	bf00      	nop
 800b812:	e7fd      	b.n	800b810 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b814:	f002 f818 	bl	800d848 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b81c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b820:	2b00      	cmp	r3, #0
 800b822:	d01f      	beq.n	800b864 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b824:	68b9      	ldr	r1, [r7, #8]
 800b826:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b828:	f000 fa1e 	bl	800bc68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b82e:	1e5a      	subs	r2, r3, #1
 800b830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b832:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d00f      	beq.n	800b85c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b83e:	3310      	adds	r3, #16
 800b840:	4618      	mov	r0, r3
 800b842:	f000 ffa7 	bl	800c794 <xTaskRemoveFromEventList>
 800b846:	4603      	mov	r3, r0
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d007      	beq.n	800b85c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b84c:	4b3c      	ldr	r3, [pc, #240]	@ (800b940 <xQueueReceive+0x1c0>)
 800b84e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b85c:	f002 f826 	bl	800d8ac <vPortExitCritical>
				return pdPASS;
 800b860:	2301      	movs	r3, #1
 800b862:	e069      	b.n	800b938 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d103      	bne.n	800b872 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b86a:	f002 f81f 	bl	800d8ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b86e:	2300      	movs	r3, #0
 800b870:	e062      	b.n	800b938 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b874:	2b00      	cmp	r3, #0
 800b876:	d106      	bne.n	800b886 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b878:	f107 0310 	add.w	r3, r7, #16
 800b87c:	4618      	mov	r0, r3
 800b87e:	f001 f815 	bl	800c8ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b882:	2301      	movs	r3, #1
 800b884:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b886:	f002 f811 	bl	800d8ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b88a:	f000 fd55 	bl	800c338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b88e:	f001 ffdb 	bl	800d848 <vPortEnterCritical>
 800b892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b894:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b898:	b25b      	sxtb	r3, r3
 800b89a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b89e:	d103      	bne.n	800b8a8 <xQueueReceive+0x128>
 800b8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8ae:	b25b      	sxtb	r3, r3
 800b8b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b8b4:	d103      	bne.n	800b8be <xQueueReceive+0x13e>
 800b8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b8be:	f001 fff5 	bl	800d8ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8c2:	1d3a      	adds	r2, r7, #4
 800b8c4:	f107 0310 	add.w	r3, r7, #16
 800b8c8:	4611      	mov	r1, r2
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f001 f804 	bl	800c8d8 <xTaskCheckForTimeOut>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d123      	bne.n	800b91e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8d8:	f000 fa3e 	bl	800bd58 <prvIsQueueEmpty>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d017      	beq.n	800b912 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8e4:	3324      	adds	r3, #36	@ 0x24
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f000 ff00 	bl	800c6f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b8f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8f2:	f000 f9df 	bl	800bcb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b8f6:	f000 fd2d 	bl	800c354 <xTaskResumeAll>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d189      	bne.n	800b814 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b900:	4b0f      	ldr	r3, [pc, #60]	@ (800b940 <xQueueReceive+0x1c0>)
 800b902:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b906:	601a      	str	r2, [r3, #0]
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	f3bf 8f6f 	isb	sy
 800b910:	e780      	b.n	800b814 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b914:	f000 f9ce 	bl	800bcb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b918:	f000 fd1c 	bl	800c354 <xTaskResumeAll>
 800b91c:	e77a      	b.n	800b814 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b91e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b920:	f000 f9c8 	bl	800bcb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b924:	f000 fd16 	bl	800c354 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b928:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b92a:	f000 fa15 	bl	800bd58 <prvIsQueueEmpty>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	f43f af6f 	beq.w	800b814 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b936:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3730      	adds	r7, #48	@ 0x30
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	e000ed04 	.word	0xe000ed04

0800b944 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b08e      	sub	sp, #56	@ 0x38
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b94e:	2300      	movs	r3, #0
 800b950:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b956:	2300      	movs	r3, #0
 800b958:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b95a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d10b      	bne.n	800b978 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800b960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b964:	f383 8811 	msr	BASEPRI, r3
 800b968:	f3bf 8f6f 	isb	sy
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	623b      	str	r3, [r7, #32]
}
 800b972:	bf00      	nop
 800b974:	bf00      	nop
 800b976:	e7fd      	b.n	800b974 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b97a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d00b      	beq.n	800b998 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800b980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b984:	f383 8811 	msr	BASEPRI, r3
 800b988:	f3bf 8f6f 	isb	sy
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	61fb      	str	r3, [r7, #28]
}
 800b992:	bf00      	nop
 800b994:	bf00      	nop
 800b996:	e7fd      	b.n	800b994 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b998:	f001 f8ea 	bl	800cb70 <xTaskGetSchedulerState>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d102      	bne.n	800b9a8 <xQueueSemaphoreTake+0x64>
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d101      	bne.n	800b9ac <xQueueSemaphoreTake+0x68>
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e000      	b.n	800b9ae <xQueueSemaphoreTake+0x6a>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d10b      	bne.n	800b9ca <xQueueSemaphoreTake+0x86>
	__asm volatile
 800b9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b6:	f383 8811 	msr	BASEPRI, r3
 800b9ba:	f3bf 8f6f 	isb	sy
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	61bb      	str	r3, [r7, #24]
}
 800b9c4:	bf00      	nop
 800b9c6:	bf00      	nop
 800b9c8:	e7fd      	b.n	800b9c6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9ca:	f001 ff3d 	bl	800d848 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9d2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d024      	beq.n	800ba24 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b9da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9dc:	1e5a      	subs	r2, r3, #1
 800b9de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d104      	bne.n	800b9f4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b9ea:	f001 fa3b 	bl	800ce64 <pvTaskIncrementMutexHeldCount>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9f2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9f6:	691b      	ldr	r3, [r3, #16]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00f      	beq.n	800ba1c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9fe:	3310      	adds	r3, #16
 800ba00:	4618      	mov	r0, r3
 800ba02:	f000 fec7 	bl	800c794 <xTaskRemoveFromEventList>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d007      	beq.n	800ba1c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba0c:	4b54      	ldr	r3, [pc, #336]	@ (800bb60 <xQueueSemaphoreTake+0x21c>)
 800ba0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba12:	601a      	str	r2, [r3, #0]
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba1c:	f001 ff46 	bl	800d8ac <vPortExitCritical>
				return pdPASS;
 800ba20:	2301      	movs	r3, #1
 800ba22:	e098      	b.n	800bb56 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d112      	bne.n	800ba50 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ba2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00b      	beq.n	800ba48 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ba30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	617b      	str	r3, [r7, #20]
}
 800ba42:	bf00      	nop
 800ba44:	bf00      	nop
 800ba46:	e7fd      	b.n	800ba44 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ba48:	f001 ff30 	bl	800d8ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	e082      	b.n	800bb56 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d106      	bne.n	800ba64 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba56:	f107 030c 	add.w	r3, r7, #12
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f000 ff26 	bl	800c8ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba60:	2301      	movs	r3, #1
 800ba62:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba64:	f001 ff22 	bl	800d8ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba68:	f000 fc66 	bl	800c338 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba6c:	f001 feec 	bl	800d848 <vPortEnterCritical>
 800ba70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba76:	b25b      	sxtb	r3, r3
 800ba78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba7c:	d103      	bne.n	800ba86 <xQueueSemaphoreTake+0x142>
 800ba7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba80:	2200      	movs	r2, #0
 800ba82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba8c:	b25b      	sxtb	r3, r3
 800ba8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba92:	d103      	bne.n	800ba9c <xQueueSemaphoreTake+0x158>
 800ba94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba9c:	f001 ff06 	bl	800d8ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800baa0:	463a      	mov	r2, r7
 800baa2:	f107 030c 	add.w	r3, r7, #12
 800baa6:	4611      	mov	r1, r2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 ff15 	bl	800c8d8 <xTaskCheckForTimeOut>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d132      	bne.n	800bb1a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bab4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bab6:	f000 f94f 	bl	800bd58 <prvIsQueueEmpty>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d026      	beq.n	800bb0e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d109      	bne.n	800badc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800bac8:	f001 febe 	bl	800d848 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	4618      	mov	r0, r3
 800bad2:	f001 f86b 	bl	800cbac <xTaskPriorityInherit>
 800bad6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800bad8:	f001 fee8 	bl	800d8ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800badc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bade:	3324      	adds	r3, #36	@ 0x24
 800bae0:	683a      	ldr	r2, [r7, #0]
 800bae2:	4611      	mov	r1, r2
 800bae4:	4618      	mov	r0, r3
 800bae6:	f000 fe03 	bl	800c6f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800baea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800baec:	f000 f8e2 	bl	800bcb4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800baf0:	f000 fc30 	bl	800c354 <xTaskResumeAll>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	f47f af67 	bne.w	800b9ca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800bafc:	4b18      	ldr	r3, [pc, #96]	@ (800bb60 <xQueueSemaphoreTake+0x21c>)
 800bafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb02:	601a      	str	r2, [r3, #0]
 800bb04:	f3bf 8f4f 	dsb	sy
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	e75d      	b.n	800b9ca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bb0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb10:	f000 f8d0 	bl	800bcb4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb14:	f000 fc1e 	bl	800c354 <xTaskResumeAll>
 800bb18:	e757      	b.n	800b9ca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bb1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb1c:	f000 f8ca 	bl	800bcb4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb20:	f000 fc18 	bl	800c354 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb26:	f000 f917 	bl	800bd58 <prvIsQueueEmpty>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f43f af4c 	beq.w	800b9ca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bb32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00d      	beq.n	800bb54 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800bb38:	f001 fe86 	bl	800d848 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bb3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb3e:	f000 f811 	bl	800bb64 <prvGetDisinheritPriorityAfterTimeout>
 800bb42:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bb44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f001 f906 	bl	800cd5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bb50:	f001 feac 	bl	800d8ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3738      	adds	r7, #56	@ 0x38
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	e000ed04 	.word	0xe000ed04

0800bb64 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d006      	beq.n	800bb82 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800bb7e:	60fb      	str	r3, [r7, #12]
 800bb80:	e001      	b.n	800bb86 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bb82:	2300      	movs	r3, #0
 800bb84:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bb86:	68fb      	ldr	r3, [r7, #12]
	}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3714      	adds	r7, #20
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b086      	sub	sp, #24
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bba0:	2300      	movs	r3, #0
 800bba2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bba8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d10d      	bne.n	800bbce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d14d      	bne.n	800bc56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f001 f85c 	bl	800cc7c <xTaskPriorityDisinherit>
 800bbc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	609a      	str	r2, [r3, #8]
 800bbcc:	e043      	b.n	800bc56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d119      	bne.n	800bc08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	6858      	ldr	r0, [r3, #4]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbdc:	461a      	mov	r2, r3
 800bbde:	68b9      	ldr	r1, [r7, #8]
 800bbe0:	f00e ff13 	bl	801aa0a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	685a      	ldr	r2, [r3, #4]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbec:	441a      	add	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	685a      	ldr	r2, [r3, #4]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	689b      	ldr	r3, [r3, #8]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d32b      	bcc.n	800bc56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	605a      	str	r2, [r3, #4]
 800bc06:	e026      	b.n	800bc56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	68d8      	ldr	r0, [r3, #12]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc10:	461a      	mov	r2, r3
 800bc12:	68b9      	ldr	r1, [r7, #8]
 800bc14:	f00e fef9 	bl	801aa0a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	68da      	ldr	r2, [r3, #12]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc20:	425b      	negs	r3, r3
 800bc22:	441a      	add	r2, r3
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	68da      	ldr	r2, [r3, #12]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d207      	bcs.n	800bc44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	689a      	ldr	r2, [r3, #8]
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc3c:	425b      	negs	r3, r3
 800bc3e:	441a      	add	r2, r3
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2b02      	cmp	r3, #2
 800bc48:	d105      	bne.n	800bc56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	3b01      	subs	r3, #1
 800bc54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	1c5a      	adds	r2, r3, #1
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800bc5e:	697b      	ldr	r3, [r7, #20]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3718      	adds	r7, #24
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d018      	beq.n	800bcac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	68da      	ldr	r2, [r3, #12]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc82:	441a      	add	r2, r3
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	68da      	ldr	r2, [r3, #12]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d303      	bcc.n	800bc9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	68d9      	ldr	r1, [r3, #12]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bca4:	461a      	mov	r2, r3
 800bca6:	6838      	ldr	r0, [r7, #0]
 800bca8:	f00e feaf 	bl	801aa0a <memcpy>
	}
}
 800bcac:	bf00      	nop
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bcbc:	f001 fdc4 	bl	800d848 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bcc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bcc8:	e011      	b.n	800bcee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d012      	beq.n	800bcf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	3324      	adds	r3, #36	@ 0x24
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f000 fd5c 	bl	800c794 <xTaskRemoveFromEventList>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d001      	beq.n	800bce6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bce2:	f000 fe5d 	bl	800c9a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bce6:	7bfb      	ldrb	r3, [r7, #15]
 800bce8:	3b01      	subs	r3, #1
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bcee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	dce9      	bgt.n	800bcca <prvUnlockQueue+0x16>
 800bcf6:	e000      	b.n	800bcfa <prvUnlockQueue+0x46>
					break;
 800bcf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	22ff      	movs	r2, #255	@ 0xff
 800bcfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bd02:	f001 fdd3 	bl	800d8ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bd06:	f001 fd9f 	bl	800d848 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bd10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd12:	e011      	b.n	800bd38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	691b      	ldr	r3, [r3, #16]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d012      	beq.n	800bd42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	3310      	adds	r3, #16
 800bd20:	4618      	mov	r0, r3
 800bd22:	f000 fd37 	bl	800c794 <xTaskRemoveFromEventList>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d001      	beq.n	800bd30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bd2c:	f000 fe38 	bl	800c9a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bd30:	7bbb      	ldrb	r3, [r7, #14]
 800bd32:	3b01      	subs	r3, #1
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bd38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	dce9      	bgt.n	800bd14 <prvUnlockQueue+0x60>
 800bd40:	e000      	b.n	800bd44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bd42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	22ff      	movs	r2, #255	@ 0xff
 800bd48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bd4c:	f001 fdae 	bl	800d8ac <vPortExitCritical>
}
 800bd50:	bf00      	nop
 800bd52:	3710      	adds	r7, #16
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd60:	f001 fd72 	bl	800d848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d102      	bne.n	800bd72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	60fb      	str	r3, [r7, #12]
 800bd70:	e001      	b.n	800bd76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bd72:	2300      	movs	r3, #0
 800bd74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bd76:	f001 fd99 	bl	800d8ac <vPortExitCritical>

	return xReturn;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bd8c:	f001 fd5c 	bl	800d848 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d102      	bne.n	800bda2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	60fb      	str	r3, [r7, #12]
 800bda0:	e001      	b.n	800bda6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bda2:	2300      	movs	r3, #0
 800bda4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bda6:	f001 fd81 	bl	800d8ac <vPortExitCritical>

	return xReturn;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	60fb      	str	r3, [r7, #12]
 800bdc2:	e014      	b.n	800bdee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bdc4:	4a0f      	ldr	r2, [pc, #60]	@ (800be04 <vQueueAddToRegistry+0x50>)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d10b      	bne.n	800bde8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bdd0:	490c      	ldr	r1, [pc, #48]	@ (800be04 <vQueueAddToRegistry+0x50>)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	683a      	ldr	r2, [r7, #0]
 800bdd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bdda:	4a0a      	ldr	r2, [pc, #40]	@ (800be04 <vQueueAddToRegistry+0x50>)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	00db      	lsls	r3, r3, #3
 800bde0:	4413      	add	r3, r2
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bde6:	e006      	b.n	800bdf6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	3301      	adds	r3, #1
 800bdec:	60fb      	str	r3, [r7, #12]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2b07      	cmp	r3, #7
 800bdf2:	d9e7      	bls.n	800bdc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bdf4:	bf00      	nop
 800bdf6:	bf00      	nop
 800bdf8:	3714      	adds	r7, #20
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	20005624 	.word	0x20005624

0800be08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b086      	sub	sp, #24
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800be18:	f001 fd16 	bl	800d848 <vPortEnterCritical>
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800be22:	b25b      	sxtb	r3, r3
 800be24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be28:	d103      	bne.n	800be32 <vQueueWaitForMessageRestricted+0x2a>
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be38:	b25b      	sxtb	r3, r3
 800be3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be3e:	d103      	bne.n	800be48 <vQueueWaitForMessageRestricted+0x40>
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	2200      	movs	r2, #0
 800be44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800be48:	f001 fd30 	bl	800d8ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be50:	2b00      	cmp	r3, #0
 800be52:	d106      	bne.n	800be62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	3324      	adds	r3, #36	@ 0x24
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	68b9      	ldr	r1, [r7, #8]
 800be5c:	4618      	mov	r0, r3
 800be5e:	f000 fc6d 	bl	800c73c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800be62:	6978      	ldr	r0, [r7, #20]
 800be64:	f7ff ff26 	bl	800bcb4 <prvUnlockQueue>
	}
 800be68:	bf00      	nop
 800be6a:	3718      	adds	r7, #24
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800be70:	b580      	push	{r7, lr}
 800be72:	b08e      	sub	sp, #56	@ 0x38
 800be74:	af04      	add	r7, sp, #16
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	607a      	str	r2, [r7, #4]
 800be7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800be7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be80:	2b00      	cmp	r3, #0
 800be82:	d10b      	bne.n	800be9c <xTaskCreateStatic+0x2c>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	623b      	str	r3, [r7, #32]
}
 800be96:	bf00      	nop
 800be98:	bf00      	nop
 800be9a:	e7fd      	b.n	800be98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800be9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d10b      	bne.n	800beba <xTaskCreateStatic+0x4a>
	__asm volatile
 800bea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea6:	f383 8811 	msr	BASEPRI, r3
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	f3bf 8f4f 	dsb	sy
 800beb2:	61fb      	str	r3, [r7, #28]
}
 800beb4:	bf00      	nop
 800beb6:	bf00      	nop
 800beb8:	e7fd      	b.n	800beb6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800beba:	23a8      	movs	r3, #168	@ 0xa8
 800bebc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	2ba8      	cmp	r3, #168	@ 0xa8
 800bec2:	d00b      	beq.n	800bedc <xTaskCreateStatic+0x6c>
	__asm volatile
 800bec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec8:	f383 8811 	msr	BASEPRI, r3
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	61bb      	str	r3, [r7, #24]
}
 800bed6:	bf00      	nop
 800bed8:	bf00      	nop
 800beda:	e7fd      	b.n	800bed8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bedc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d01e      	beq.n	800bf22 <xTaskCreateStatic+0xb2>
 800bee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d01b      	beq.n	800bf22 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800beea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800beee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bef2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef6:	2202      	movs	r2, #2
 800bef8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800befc:	2300      	movs	r3, #0
 800befe:	9303      	str	r3, [sp, #12]
 800bf00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf02:	9302      	str	r3, [sp, #8]
 800bf04:	f107 0314 	add.w	r3, r7, #20
 800bf08:	9301      	str	r3, [sp, #4]
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf0c:	9300      	str	r3, [sp, #0]
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	68b9      	ldr	r1, [r7, #8]
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f000 f851 	bl	800bfbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bf1c:	f000 f8f6 	bl	800c10c <prvAddNewTaskToReadyList>
 800bf20:	e001      	b.n	800bf26 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800bf22:	2300      	movs	r3, #0
 800bf24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bf26:	697b      	ldr	r3, [r7, #20]
	}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	3728      	adds	r7, #40	@ 0x28
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}

0800bf30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b08c      	sub	sp, #48	@ 0x30
 800bf34:	af04      	add	r7, sp, #16
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	603b      	str	r3, [r7, #0]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bf40:	88fb      	ldrh	r3, [r7, #6]
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4618      	mov	r0, r3
 800bf46:	f001 fda1 	bl	800da8c <pvPortMalloc>
 800bf4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00e      	beq.n	800bf70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bf52:	20a8      	movs	r0, #168	@ 0xa8
 800bf54:	f001 fd9a 	bl	800da8c <pvPortMalloc>
 800bf58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d003      	beq.n	800bf68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	697a      	ldr	r2, [r7, #20]
 800bf64:	631a      	str	r2, [r3, #48]	@ 0x30
 800bf66:	e005      	b.n	800bf74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bf68:	6978      	ldr	r0, [r7, #20]
 800bf6a:	f001 fe5d 	bl	800dc28 <vPortFree>
 800bf6e:	e001      	b.n	800bf74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bf70:	2300      	movs	r3, #0
 800bf72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d017      	beq.n	800bfaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bf82:	88fa      	ldrh	r2, [r7, #6]
 800bf84:	2300      	movs	r3, #0
 800bf86:	9303      	str	r3, [sp, #12]
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	9302      	str	r3, [sp, #8]
 800bf8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf8e:	9301      	str	r3, [sp, #4]
 800bf90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf92:	9300      	str	r3, [sp, #0]
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	68b9      	ldr	r1, [r7, #8]
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f000 f80f 	bl	800bfbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bf9e:	69f8      	ldr	r0, [r7, #28]
 800bfa0:	f000 f8b4 	bl	800c10c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	61bb      	str	r3, [r7, #24]
 800bfa8:	e002      	b.n	800bfb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bfaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bfae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bfb0:	69bb      	ldr	r3, [r7, #24]
	}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3720      	adds	r7, #32
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}
	...

0800bfbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b088      	sub	sp, #32
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
 800bfc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bfca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfcc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	21a5      	movs	r1, #165	@ 0xa5
 800bfd6:	f00e fbf5 	bl	801a7c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bfda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bfe4:	3b01      	subs	r3, #1
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	4413      	add	r3, r2
 800bfea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	f023 0307 	bic.w	r3, r3, #7
 800bff2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	f003 0307 	and.w	r3, r3, #7
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00b      	beq.n	800c016 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	617b      	str	r3, [r7, #20]
}
 800c010:	bf00      	nop
 800c012:	bf00      	nop
 800c014:	e7fd      	b.n	800c012 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d01f      	beq.n	800c05c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c01c:	2300      	movs	r3, #0
 800c01e:	61fb      	str	r3, [r7, #28]
 800c020:	e012      	b.n	800c048 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	4413      	add	r3, r2
 800c028:	7819      	ldrb	r1, [r3, #0]
 800c02a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	4413      	add	r3, r2
 800c030:	3334      	adds	r3, #52	@ 0x34
 800c032:	460a      	mov	r2, r1
 800c034:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	4413      	add	r3, r2
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d006      	beq.n	800c050 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	3301      	adds	r3, #1
 800c046:	61fb      	str	r3, [r7, #28]
 800c048:	69fb      	ldr	r3, [r7, #28]
 800c04a:	2b0f      	cmp	r3, #15
 800c04c:	d9e9      	bls.n	800c022 <prvInitialiseNewTask+0x66>
 800c04e:	e000      	b.n	800c052 <prvInitialiseNewTask+0x96>
			{
				break;
 800c050:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c054:	2200      	movs	r2, #0
 800c056:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c05a:	e003      	b.n	800c064 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c066:	2b37      	cmp	r3, #55	@ 0x37
 800c068:	d901      	bls.n	800c06e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c06a:	2337      	movs	r3, #55	@ 0x37
 800c06c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c070:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c072:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c076:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c078:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07c:	2200      	movs	r2, #0
 800c07e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c082:	3304      	adds	r3, #4
 800c084:	4618      	mov	r0, r3
 800c086:	f7ff f801 	bl	800b08c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c08c:	3318      	adds	r3, #24
 800c08e:	4618      	mov	r0, r3
 800c090:	f7fe fffc 	bl	800b08c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c098:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0bc:	3354      	adds	r3, #84	@ 0x54
 800c0be:	224c      	movs	r2, #76	@ 0x4c
 800c0c0:	2100      	movs	r1, #0
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f00e fb7e 	bl	801a7c4 <memset>
 800c0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0ca:	4a0d      	ldr	r2, [pc, #52]	@ (800c100 <prvInitialiseNewTask+0x144>)
 800c0cc:	659a      	str	r2, [r3, #88]	@ 0x58
 800c0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d0:	4a0c      	ldr	r2, [pc, #48]	@ (800c104 <prvInitialiseNewTask+0x148>)
 800c0d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d6:	4a0c      	ldr	r2, [pc, #48]	@ (800c108 <prvInitialiseNewTask+0x14c>)
 800c0d8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c0da:	683a      	ldr	r2, [r7, #0]
 800c0dc:	68f9      	ldr	r1, [r7, #12]
 800c0de:	69b8      	ldr	r0, [r7, #24]
 800c0e0:	f001 fa82 	bl	800d5e8 <pxPortInitialiseStack>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d002      	beq.n	800c0f6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c0f6:	bf00      	nop
 800c0f8:	3720      	adds	r7, #32
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	20009eb4 	.word	0x20009eb4
 800c104:	20009f1c 	.word	0x20009f1c
 800c108:	20009f84 	.word	0x20009f84

0800c10c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c114:	f001 fb98 	bl	800d848 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c118:	4b2d      	ldr	r3, [pc, #180]	@ (800c1d0 <prvAddNewTaskToReadyList+0xc4>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	3301      	adds	r3, #1
 800c11e:	4a2c      	ldr	r2, [pc, #176]	@ (800c1d0 <prvAddNewTaskToReadyList+0xc4>)
 800c120:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c122:	4b2c      	ldr	r3, [pc, #176]	@ (800c1d4 <prvAddNewTaskToReadyList+0xc8>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d109      	bne.n	800c13e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c12a:	4a2a      	ldr	r2, [pc, #168]	@ (800c1d4 <prvAddNewTaskToReadyList+0xc8>)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c130:	4b27      	ldr	r3, [pc, #156]	@ (800c1d0 <prvAddNewTaskToReadyList+0xc4>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d110      	bne.n	800c15a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c138:	f000 fc56 	bl	800c9e8 <prvInitialiseTaskLists>
 800c13c:	e00d      	b.n	800c15a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c13e:	4b26      	ldr	r3, [pc, #152]	@ (800c1d8 <prvAddNewTaskToReadyList+0xcc>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d109      	bne.n	800c15a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c146:	4b23      	ldr	r3, [pc, #140]	@ (800c1d4 <prvAddNewTaskToReadyList+0xc8>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c150:	429a      	cmp	r2, r3
 800c152:	d802      	bhi.n	800c15a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c154:	4a1f      	ldr	r2, [pc, #124]	@ (800c1d4 <prvAddNewTaskToReadyList+0xc8>)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c15a:	4b20      	ldr	r3, [pc, #128]	@ (800c1dc <prvAddNewTaskToReadyList+0xd0>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	3301      	adds	r3, #1
 800c160:	4a1e      	ldr	r2, [pc, #120]	@ (800c1dc <prvAddNewTaskToReadyList+0xd0>)
 800c162:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c164:	4b1d      	ldr	r3, [pc, #116]	@ (800c1dc <prvAddNewTaskToReadyList+0xd0>)
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c170:	4b1b      	ldr	r3, [pc, #108]	@ (800c1e0 <prvAddNewTaskToReadyList+0xd4>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	429a      	cmp	r2, r3
 800c176:	d903      	bls.n	800c180 <prvAddNewTaskToReadyList+0x74>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c17c:	4a18      	ldr	r2, [pc, #96]	@ (800c1e0 <prvAddNewTaskToReadyList+0xd4>)
 800c17e:	6013      	str	r3, [r2, #0]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c184:	4613      	mov	r3, r2
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	4413      	add	r3, r2
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	4a15      	ldr	r2, [pc, #84]	@ (800c1e4 <prvAddNewTaskToReadyList+0xd8>)
 800c18e:	441a      	add	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	3304      	adds	r3, #4
 800c194:	4619      	mov	r1, r3
 800c196:	4610      	mov	r0, r2
 800c198:	f7fe ff85 	bl	800b0a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c19c:	f001 fb86 	bl	800d8ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c1a0:	4b0d      	ldr	r3, [pc, #52]	@ (800c1d8 <prvAddNewTaskToReadyList+0xcc>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00e      	beq.n	800c1c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c1d4 <prvAddNewTaskToReadyList+0xc8>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d207      	bcs.n	800c1c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c1b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c1e8 <prvAddNewTaskToReadyList+0xdc>)
 800c1b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1bc:	601a      	str	r2, [r3, #0]
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1c6:	bf00      	nop
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	20005b38 	.word	0x20005b38
 800c1d4:	20005664 	.word	0x20005664
 800c1d8:	20005b44 	.word	0x20005b44
 800c1dc:	20005b54 	.word	0x20005b54
 800c1e0:	20005b40 	.word	0x20005b40
 800c1e4:	20005668 	.word	0x20005668
 800c1e8:	e000ed04 	.word	0xe000ed04

0800c1ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d018      	beq.n	800c230 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c1fe:	4b14      	ldr	r3, [pc, #80]	@ (800c250 <vTaskDelay+0x64>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d00b      	beq.n	800c21e <vTaskDelay+0x32>
	__asm volatile
 800c206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c20a:	f383 8811 	msr	BASEPRI, r3
 800c20e:	f3bf 8f6f 	isb	sy
 800c212:	f3bf 8f4f 	dsb	sy
 800c216:	60bb      	str	r3, [r7, #8]
}
 800c218:	bf00      	nop
 800c21a:	bf00      	nop
 800c21c:	e7fd      	b.n	800c21a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c21e:	f000 f88b 	bl	800c338 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c222:	2100      	movs	r1, #0
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 fe31 	bl	800ce8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c22a:	f000 f893 	bl	800c354 <xTaskResumeAll>
 800c22e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d107      	bne.n	800c246 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c236:	4b07      	ldr	r3, [pc, #28]	@ (800c254 <vTaskDelay+0x68>)
 800c238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c23c:	601a      	str	r2, [r3, #0]
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c246:	bf00      	nop
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	20005b60 	.word	0x20005b60
 800c254:	e000ed04 	.word	0xe000ed04

0800c258 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b08a      	sub	sp, #40	@ 0x28
 800c25c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c25e:	2300      	movs	r3, #0
 800c260:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c262:	2300      	movs	r3, #0
 800c264:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c266:	463a      	mov	r2, r7
 800c268:	1d39      	adds	r1, r7, #4
 800c26a:	f107 0308 	add.w	r3, r7, #8
 800c26e:	4618      	mov	r0, r3
 800c270:	f7fe feb8 	bl	800afe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c274:	6839      	ldr	r1, [r7, #0]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	9202      	str	r2, [sp, #8]
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	2300      	movs	r3, #0
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	2300      	movs	r3, #0
 800c284:	460a      	mov	r2, r1
 800c286:	4924      	ldr	r1, [pc, #144]	@ (800c318 <vTaskStartScheduler+0xc0>)
 800c288:	4824      	ldr	r0, [pc, #144]	@ (800c31c <vTaskStartScheduler+0xc4>)
 800c28a:	f7ff fdf1 	bl	800be70 <xTaskCreateStatic>
 800c28e:	4603      	mov	r3, r0
 800c290:	4a23      	ldr	r2, [pc, #140]	@ (800c320 <vTaskStartScheduler+0xc8>)
 800c292:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c294:	4b22      	ldr	r3, [pc, #136]	@ (800c320 <vTaskStartScheduler+0xc8>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d002      	beq.n	800c2a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c29c:	2301      	movs	r3, #1
 800c29e:	617b      	str	r3, [r7, #20]
 800c2a0:	e001      	b.n	800c2a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d102      	bne.n	800c2b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c2ac:	f000 fe42 	bl	800cf34 <xTimerCreateTimerTask>
 800c2b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d11b      	bne.n	800c2f0 <vTaskStartScheduler+0x98>
	__asm volatile
 800c2b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2bc:	f383 8811 	msr	BASEPRI, r3
 800c2c0:	f3bf 8f6f 	isb	sy
 800c2c4:	f3bf 8f4f 	dsb	sy
 800c2c8:	613b      	str	r3, [r7, #16]
}
 800c2ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c2cc:	4b15      	ldr	r3, [pc, #84]	@ (800c324 <vTaskStartScheduler+0xcc>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	3354      	adds	r3, #84	@ 0x54
 800c2d2:	4a15      	ldr	r2, [pc, #84]	@ (800c328 <vTaskStartScheduler+0xd0>)
 800c2d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c2d6:	4b15      	ldr	r3, [pc, #84]	@ (800c32c <vTaskStartScheduler+0xd4>)
 800c2d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c2dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c2de:	4b14      	ldr	r3, [pc, #80]	@ (800c330 <vTaskStartScheduler+0xd8>)
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c2e4:	4b13      	ldr	r3, [pc, #76]	@ (800c334 <vTaskStartScheduler+0xdc>)
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c2ea:	f001 fa09 	bl	800d700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c2ee:	e00f      	b.n	800c310 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c2f6:	d10b      	bne.n	800c310 <vTaskStartScheduler+0xb8>
	__asm volatile
 800c2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2fc:	f383 8811 	msr	BASEPRI, r3
 800c300:	f3bf 8f6f 	isb	sy
 800c304:	f3bf 8f4f 	dsb	sy
 800c308:	60fb      	str	r3, [r7, #12]
}
 800c30a:	bf00      	nop
 800c30c:	bf00      	nop
 800c30e:	e7fd      	b.n	800c30c <vTaskStartScheduler+0xb4>
}
 800c310:	bf00      	nop
 800c312:	3718      	adds	r7, #24
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	0801de88 	.word	0x0801de88
 800c31c:	0800c9b9 	.word	0x0800c9b9
 800c320:	20005b5c 	.word	0x20005b5c
 800c324:	20005664 	.word	0x20005664
 800c328:	20000090 	.word	0x20000090
 800c32c:	20005b58 	.word	0x20005b58
 800c330:	20005b44 	.word	0x20005b44
 800c334:	20005b3c 	.word	0x20005b3c

0800c338 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c338:	b480      	push	{r7}
 800c33a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c33c:	4b04      	ldr	r3, [pc, #16]	@ (800c350 <vTaskSuspendAll+0x18>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	3301      	adds	r3, #1
 800c342:	4a03      	ldr	r2, [pc, #12]	@ (800c350 <vTaskSuspendAll+0x18>)
 800c344:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c346:	bf00      	nop
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr
 800c350:	20005b60 	.word	0x20005b60

0800c354 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c35a:	2300      	movs	r3, #0
 800c35c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c35e:	2300      	movs	r3, #0
 800c360:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c362:	4b42      	ldr	r3, [pc, #264]	@ (800c46c <xTaskResumeAll+0x118>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d10b      	bne.n	800c382 <xTaskResumeAll+0x2e>
	__asm volatile
 800c36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c36e:	f383 8811 	msr	BASEPRI, r3
 800c372:	f3bf 8f6f 	isb	sy
 800c376:	f3bf 8f4f 	dsb	sy
 800c37a:	603b      	str	r3, [r7, #0]
}
 800c37c:	bf00      	nop
 800c37e:	bf00      	nop
 800c380:	e7fd      	b.n	800c37e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c382:	f001 fa61 	bl	800d848 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c386:	4b39      	ldr	r3, [pc, #228]	@ (800c46c <xTaskResumeAll+0x118>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	3b01      	subs	r3, #1
 800c38c:	4a37      	ldr	r2, [pc, #220]	@ (800c46c <xTaskResumeAll+0x118>)
 800c38e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c390:	4b36      	ldr	r3, [pc, #216]	@ (800c46c <xTaskResumeAll+0x118>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d162      	bne.n	800c45e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c398:	4b35      	ldr	r3, [pc, #212]	@ (800c470 <xTaskResumeAll+0x11c>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d05e      	beq.n	800c45e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c3a0:	e02f      	b.n	800c402 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3a2:	4b34      	ldr	r3, [pc, #208]	@ (800c474 <xTaskResumeAll+0x120>)
 800c3a4:	68db      	ldr	r3, [r3, #12]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	3318      	adds	r3, #24
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7fe fed6 	bl	800b160 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	3304      	adds	r3, #4
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7fe fed1 	bl	800b160 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3c2:	4b2d      	ldr	r3, [pc, #180]	@ (800c478 <xTaskResumeAll+0x124>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d903      	bls.n	800c3d2 <xTaskResumeAll+0x7e>
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ce:	4a2a      	ldr	r2, [pc, #168]	@ (800c478 <xTaskResumeAll+0x124>)
 800c3d0:	6013      	str	r3, [r2, #0]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	009b      	lsls	r3, r3, #2
 800c3da:	4413      	add	r3, r2
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	4a27      	ldr	r2, [pc, #156]	@ (800c47c <xTaskResumeAll+0x128>)
 800c3e0:	441a      	add	r2, r3
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	3304      	adds	r3, #4
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	f7fe fe5c 	bl	800b0a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3f2:	4b23      	ldr	r3, [pc, #140]	@ (800c480 <xTaskResumeAll+0x12c>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d302      	bcc.n	800c402 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c3fc:	4b21      	ldr	r3, [pc, #132]	@ (800c484 <xTaskResumeAll+0x130>)
 800c3fe:	2201      	movs	r2, #1
 800c400:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c402:	4b1c      	ldr	r3, [pc, #112]	@ (800c474 <xTaskResumeAll+0x120>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1cb      	bne.n	800c3a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d001      	beq.n	800c414 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c410:	f000 fb8e 	bl	800cb30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c414:	4b1c      	ldr	r3, [pc, #112]	@ (800c488 <xTaskResumeAll+0x134>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d010      	beq.n	800c442 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c420:	f000 f846 	bl	800c4b0 <xTaskIncrementTick>
 800c424:	4603      	mov	r3, r0
 800c426:	2b00      	cmp	r3, #0
 800c428:	d002      	beq.n	800c430 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c42a:	4b16      	ldr	r3, [pc, #88]	@ (800c484 <xTaskResumeAll+0x130>)
 800c42c:	2201      	movs	r2, #1
 800c42e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	3b01      	subs	r3, #1
 800c434:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d1f1      	bne.n	800c420 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800c43c:	4b12      	ldr	r3, [pc, #72]	@ (800c488 <xTaskResumeAll+0x134>)
 800c43e:	2200      	movs	r2, #0
 800c440:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c442:	4b10      	ldr	r3, [pc, #64]	@ (800c484 <xTaskResumeAll+0x130>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d009      	beq.n	800c45e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c44a:	2301      	movs	r3, #1
 800c44c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c44e:	4b0f      	ldr	r3, [pc, #60]	@ (800c48c <xTaskResumeAll+0x138>)
 800c450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c454:	601a      	str	r2, [r3, #0]
 800c456:	f3bf 8f4f 	dsb	sy
 800c45a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c45e:	f001 fa25 	bl	800d8ac <vPortExitCritical>

	return xAlreadyYielded;
 800c462:	68bb      	ldr	r3, [r7, #8]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3710      	adds	r7, #16
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	20005b60 	.word	0x20005b60
 800c470:	20005b38 	.word	0x20005b38
 800c474:	20005af8 	.word	0x20005af8
 800c478:	20005b40 	.word	0x20005b40
 800c47c:	20005668 	.word	0x20005668
 800c480:	20005664 	.word	0x20005664
 800c484:	20005b4c 	.word	0x20005b4c
 800c488:	20005b48 	.word	0x20005b48
 800c48c:	e000ed04 	.word	0xe000ed04

0800c490 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c496:	4b05      	ldr	r3, [pc, #20]	@ (800c4ac <xTaskGetTickCount+0x1c>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c49c:	687b      	ldr	r3, [r7, #4]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	370c      	adds	r7, #12
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a8:	4770      	bx	lr
 800c4aa:	bf00      	nop
 800c4ac:	20005b3c 	.word	0x20005b3c

0800c4b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4ba:	4b4f      	ldr	r3, [pc, #316]	@ (800c5f8 <xTaskIncrementTick+0x148>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f040 8090 	bne.w	800c5e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c4c4:	4b4d      	ldr	r3, [pc, #308]	@ (800c5fc <xTaskIncrementTick+0x14c>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c4cc:	4a4b      	ldr	r2, [pc, #300]	@ (800c5fc <xTaskIncrementTick+0x14c>)
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d121      	bne.n	800c51c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c4d8:	4b49      	ldr	r3, [pc, #292]	@ (800c600 <xTaskIncrementTick+0x150>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00b      	beq.n	800c4fa <xTaskIncrementTick+0x4a>
	__asm volatile
 800c4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e6:	f383 8811 	msr	BASEPRI, r3
 800c4ea:	f3bf 8f6f 	isb	sy
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	603b      	str	r3, [r7, #0]
}
 800c4f4:	bf00      	nop
 800c4f6:	bf00      	nop
 800c4f8:	e7fd      	b.n	800c4f6 <xTaskIncrementTick+0x46>
 800c4fa:	4b41      	ldr	r3, [pc, #260]	@ (800c600 <xTaskIncrementTick+0x150>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	60fb      	str	r3, [r7, #12]
 800c500:	4b40      	ldr	r3, [pc, #256]	@ (800c604 <xTaskIncrementTick+0x154>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a3e      	ldr	r2, [pc, #248]	@ (800c600 <xTaskIncrementTick+0x150>)
 800c506:	6013      	str	r3, [r2, #0]
 800c508:	4a3e      	ldr	r2, [pc, #248]	@ (800c604 <xTaskIncrementTick+0x154>)
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	6013      	str	r3, [r2, #0]
 800c50e:	4b3e      	ldr	r3, [pc, #248]	@ (800c608 <xTaskIncrementTick+0x158>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	3301      	adds	r3, #1
 800c514:	4a3c      	ldr	r2, [pc, #240]	@ (800c608 <xTaskIncrementTick+0x158>)
 800c516:	6013      	str	r3, [r2, #0]
 800c518:	f000 fb0a 	bl	800cb30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c51c:	4b3b      	ldr	r3, [pc, #236]	@ (800c60c <xTaskIncrementTick+0x15c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	693a      	ldr	r2, [r7, #16]
 800c522:	429a      	cmp	r2, r3
 800c524:	d349      	bcc.n	800c5ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c526:	4b36      	ldr	r3, [pc, #216]	@ (800c600 <xTaskIncrementTick+0x150>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d104      	bne.n	800c53a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c530:	4b36      	ldr	r3, [pc, #216]	@ (800c60c <xTaskIncrementTick+0x15c>)
 800c532:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c536:	601a      	str	r2, [r3, #0]
					break;
 800c538:	e03f      	b.n	800c5ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c53a:	4b31      	ldr	r3, [pc, #196]	@ (800c600 <xTaskIncrementTick+0x150>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	68db      	ldr	r3, [r3, #12]
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c54a:	693a      	ldr	r2, [r7, #16]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	429a      	cmp	r2, r3
 800c550:	d203      	bcs.n	800c55a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c552:	4a2e      	ldr	r2, [pc, #184]	@ (800c60c <xTaskIncrementTick+0x15c>)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c558:	e02f      	b.n	800c5ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	3304      	adds	r3, #4
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fe fdfe 	bl	800b160 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d004      	beq.n	800c576 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	3318      	adds	r3, #24
 800c570:	4618      	mov	r0, r3
 800c572:	f7fe fdf5 	bl	800b160 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c57a:	4b25      	ldr	r3, [pc, #148]	@ (800c610 <xTaskIncrementTick+0x160>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d903      	bls.n	800c58a <xTaskIncrementTick+0xda>
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c586:	4a22      	ldr	r2, [pc, #136]	@ (800c610 <xTaskIncrementTick+0x160>)
 800c588:	6013      	str	r3, [r2, #0]
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c58e:	4613      	mov	r3, r2
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	4413      	add	r3, r2
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	4a1f      	ldr	r2, [pc, #124]	@ (800c614 <xTaskIncrementTick+0x164>)
 800c598:	441a      	add	r2, r3
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	3304      	adds	r3, #4
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4610      	mov	r0, r2
 800c5a2:	f7fe fd80 	bl	800b0a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5aa:	4b1b      	ldr	r3, [pc, #108]	@ (800c618 <xTaskIncrementTick+0x168>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d3b8      	bcc.n	800c526 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c5b8:	e7b5      	b.n	800c526 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c5ba:	4b17      	ldr	r3, [pc, #92]	@ (800c618 <xTaskIncrementTick+0x168>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5c0:	4914      	ldr	r1, [pc, #80]	@ (800c614 <xTaskIncrementTick+0x164>)
 800c5c2:	4613      	mov	r3, r2
 800c5c4:	009b      	lsls	r3, r3, #2
 800c5c6:	4413      	add	r3, r2
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	440b      	add	r3, r1
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d901      	bls.n	800c5d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c5d6:	4b11      	ldr	r3, [pc, #68]	@ (800c61c <xTaskIncrementTick+0x16c>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d007      	beq.n	800c5ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	617b      	str	r3, [r7, #20]
 800c5e2:	e004      	b.n	800c5ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c5e4:	4b0e      	ldr	r3, [pc, #56]	@ (800c620 <xTaskIncrementTick+0x170>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	4a0d      	ldr	r2, [pc, #52]	@ (800c620 <xTaskIncrementTick+0x170>)
 800c5ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c5ee:	697b      	ldr	r3, [r7, #20]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3718      	adds	r7, #24
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	20005b60 	.word	0x20005b60
 800c5fc:	20005b3c 	.word	0x20005b3c
 800c600:	20005af0 	.word	0x20005af0
 800c604:	20005af4 	.word	0x20005af4
 800c608:	20005b50 	.word	0x20005b50
 800c60c:	20005b58 	.word	0x20005b58
 800c610:	20005b40 	.word	0x20005b40
 800c614:	20005668 	.word	0x20005668
 800c618:	20005664 	.word	0x20005664
 800c61c:	20005b4c 	.word	0x20005b4c
 800c620:	20005b48 	.word	0x20005b48

0800c624 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c624:	b480      	push	{r7}
 800c626:	b085      	sub	sp, #20
 800c628:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c62a:	4b2b      	ldr	r3, [pc, #172]	@ (800c6d8 <vTaskSwitchContext+0xb4>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d003      	beq.n	800c63a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c632:	4b2a      	ldr	r3, [pc, #168]	@ (800c6dc <vTaskSwitchContext+0xb8>)
 800c634:	2201      	movs	r2, #1
 800c636:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c638:	e047      	b.n	800c6ca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c63a:	4b28      	ldr	r3, [pc, #160]	@ (800c6dc <vTaskSwitchContext+0xb8>)
 800c63c:	2200      	movs	r2, #0
 800c63e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c640:	4b27      	ldr	r3, [pc, #156]	@ (800c6e0 <vTaskSwitchContext+0xbc>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	60fb      	str	r3, [r7, #12]
 800c646:	e011      	b.n	800c66c <vTaskSwitchContext+0x48>
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d10b      	bne.n	800c666 <vTaskSwitchContext+0x42>
	__asm volatile
 800c64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c652:	f383 8811 	msr	BASEPRI, r3
 800c656:	f3bf 8f6f 	isb	sy
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	607b      	str	r3, [r7, #4]
}
 800c660:	bf00      	nop
 800c662:	bf00      	nop
 800c664:	e7fd      	b.n	800c662 <vTaskSwitchContext+0x3e>
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	3b01      	subs	r3, #1
 800c66a:	60fb      	str	r3, [r7, #12]
 800c66c:	491d      	ldr	r1, [pc, #116]	@ (800c6e4 <vTaskSwitchContext+0xc0>)
 800c66e:	68fa      	ldr	r2, [r7, #12]
 800c670:	4613      	mov	r3, r2
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	4413      	add	r3, r2
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	440b      	add	r3, r1
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d0e3      	beq.n	800c648 <vTaskSwitchContext+0x24>
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	4613      	mov	r3, r2
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	4413      	add	r3, r2
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	4a16      	ldr	r2, [pc, #88]	@ (800c6e4 <vTaskSwitchContext+0xc0>)
 800c68c:	4413      	add	r3, r2
 800c68e:	60bb      	str	r3, [r7, #8]
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	685a      	ldr	r2, [r3, #4]
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	605a      	str	r2, [r3, #4]
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	3308      	adds	r3, #8
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d104      	bne.n	800c6b0 <vTaskSwitchContext+0x8c>
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	685a      	ldr	r2, [r3, #4]
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	605a      	str	r2, [r3, #4]
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	4a0c      	ldr	r2, [pc, #48]	@ (800c6e8 <vTaskSwitchContext+0xc4>)
 800c6b8:	6013      	str	r3, [r2, #0]
 800c6ba:	4a09      	ldr	r2, [pc, #36]	@ (800c6e0 <vTaskSwitchContext+0xbc>)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c6c0:	4b09      	ldr	r3, [pc, #36]	@ (800c6e8 <vTaskSwitchContext+0xc4>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	3354      	adds	r3, #84	@ 0x54
 800c6c6:	4a09      	ldr	r2, [pc, #36]	@ (800c6ec <vTaskSwitchContext+0xc8>)
 800c6c8:	6013      	str	r3, [r2, #0]
}
 800c6ca:	bf00      	nop
 800c6cc:	3714      	adds	r7, #20
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	20005b60 	.word	0x20005b60
 800c6dc:	20005b4c 	.word	0x20005b4c
 800c6e0:	20005b40 	.word	0x20005b40
 800c6e4:	20005668 	.word	0x20005668
 800c6e8:	20005664 	.word	0x20005664
 800c6ec:	20000090 	.word	0x20000090

0800c6f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d10b      	bne.n	800c718 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c704:	f383 8811 	msr	BASEPRI, r3
 800c708:	f3bf 8f6f 	isb	sy
 800c70c:	f3bf 8f4f 	dsb	sy
 800c710:	60fb      	str	r3, [r7, #12]
}
 800c712:	bf00      	nop
 800c714:	bf00      	nop
 800c716:	e7fd      	b.n	800c714 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c718:	4b07      	ldr	r3, [pc, #28]	@ (800c738 <vTaskPlaceOnEventList+0x48>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	3318      	adds	r3, #24
 800c71e:	4619      	mov	r1, r3
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f7fe fce4 	bl	800b0ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c726:	2101      	movs	r1, #1
 800c728:	6838      	ldr	r0, [r7, #0]
 800c72a:	f000 fbaf 	bl	800ce8c <prvAddCurrentTaskToDelayedList>
}
 800c72e:	bf00      	nop
 800c730:	3710      	adds	r7, #16
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}
 800c736:	bf00      	nop
 800c738:	20005664 	.word	0x20005664

0800c73c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b086      	sub	sp, #24
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10b      	bne.n	800c766 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	617b      	str	r3, [r7, #20]
}
 800c760:	bf00      	nop
 800c762:	bf00      	nop
 800c764:	e7fd      	b.n	800c762 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c766:	4b0a      	ldr	r3, [pc, #40]	@ (800c790 <vTaskPlaceOnEventListRestricted+0x54>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	3318      	adds	r3, #24
 800c76c:	4619      	mov	r1, r3
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f7fe fc99 	bl	800b0a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d002      	beq.n	800c780 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800c77a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c77e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c780:	6879      	ldr	r1, [r7, #4]
 800c782:	68b8      	ldr	r0, [r7, #8]
 800c784:	f000 fb82 	bl	800ce8c <prvAddCurrentTaskToDelayedList>
	}
 800c788:	bf00      	nop
 800c78a:	3718      	adds	r7, #24
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	20005664 	.word	0x20005664

0800c794 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b086      	sub	sp, #24
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d10b      	bne.n	800c7c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ae:	f383 8811 	msr	BASEPRI, r3
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	f3bf 8f4f 	dsb	sy
 800c7ba:	60fb      	str	r3, [r7, #12]
}
 800c7bc:	bf00      	nop
 800c7be:	bf00      	nop
 800c7c0:	e7fd      	b.n	800c7be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	3318      	adds	r3, #24
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7fe fcca 	bl	800b160 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7cc:	4b1d      	ldr	r3, [pc, #116]	@ (800c844 <xTaskRemoveFromEventList+0xb0>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d11d      	bne.n	800c810 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	3304      	adds	r3, #4
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7fe fcc1 	bl	800b160 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7e2:	4b19      	ldr	r3, [pc, #100]	@ (800c848 <xTaskRemoveFromEventList+0xb4>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d903      	bls.n	800c7f2 <xTaskRemoveFromEventList+0x5e>
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7ee:	4a16      	ldr	r2, [pc, #88]	@ (800c848 <xTaskRemoveFromEventList+0xb4>)
 800c7f0:	6013      	str	r3, [r2, #0]
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	4413      	add	r3, r2
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	4a13      	ldr	r2, [pc, #76]	@ (800c84c <xTaskRemoveFromEventList+0xb8>)
 800c800:	441a      	add	r2, r3
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	3304      	adds	r3, #4
 800c806:	4619      	mov	r1, r3
 800c808:	4610      	mov	r0, r2
 800c80a:	f7fe fc4c 	bl	800b0a6 <vListInsertEnd>
 800c80e:	e005      	b.n	800c81c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	3318      	adds	r3, #24
 800c814:	4619      	mov	r1, r3
 800c816:	480e      	ldr	r0, [pc, #56]	@ (800c850 <xTaskRemoveFromEventList+0xbc>)
 800c818:	f7fe fc45 	bl	800b0a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c820:	4b0c      	ldr	r3, [pc, #48]	@ (800c854 <xTaskRemoveFromEventList+0xc0>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c826:	429a      	cmp	r2, r3
 800c828:	d905      	bls.n	800c836 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c82a:	2301      	movs	r3, #1
 800c82c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c82e:	4b0a      	ldr	r3, [pc, #40]	@ (800c858 <xTaskRemoveFromEventList+0xc4>)
 800c830:	2201      	movs	r2, #1
 800c832:	601a      	str	r2, [r3, #0]
 800c834:	e001      	b.n	800c83a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c836:	2300      	movs	r3, #0
 800c838:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c83a:	697b      	ldr	r3, [r7, #20]
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3718      	adds	r7, #24
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	20005b60 	.word	0x20005b60
 800c848:	20005b40 	.word	0x20005b40
 800c84c:	20005668 	.word	0x20005668
 800c850:	20005af8 	.word	0x20005af8
 800c854:	20005664 	.word	0x20005664
 800c858:	20005b4c 	.word	0x20005b4c

0800c85c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d10b      	bne.n	800c882 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800c86a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c86e:	f383 8811 	msr	BASEPRI, r3
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	f3bf 8f4f 	dsb	sy
 800c87a:	60fb      	str	r3, [r7, #12]
}
 800c87c:	bf00      	nop
 800c87e:	bf00      	nop
 800c880:	e7fd      	b.n	800c87e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800c882:	f000 ffe1 	bl	800d848 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c886:	4b07      	ldr	r3, [pc, #28]	@ (800c8a4 <vTaskSetTimeOutState+0x48>)
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800c88e:	4b06      	ldr	r3, [pc, #24]	@ (800c8a8 <vTaskSetTimeOutState+0x4c>)
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800c896:	f001 f809 	bl	800d8ac <vPortExitCritical>
}
 800c89a:	bf00      	nop
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	20005b50 	.word	0x20005b50
 800c8a8:	20005b3c 	.word	0x20005b3c

0800c8ac <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c8b4:	4b06      	ldr	r3, [pc, #24]	@ (800c8d0 <vTaskInternalSetTimeOutState+0x24>)
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c8bc:	4b05      	ldr	r3, [pc, #20]	@ (800c8d4 <vTaskInternalSetTimeOutState+0x28>)
 800c8be:	681a      	ldr	r2, [r3, #0]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	605a      	str	r2, [r3, #4]
}
 800c8c4:	bf00      	nop
 800c8c6:	370c      	adds	r7, #12
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr
 800c8d0:	20005b50 	.word	0x20005b50
 800c8d4:	20005b3c 	.word	0x20005b3c

0800c8d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b088      	sub	sp, #32
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d10b      	bne.n	800c900 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ec:	f383 8811 	msr	BASEPRI, r3
 800c8f0:	f3bf 8f6f 	isb	sy
 800c8f4:	f3bf 8f4f 	dsb	sy
 800c8f8:	613b      	str	r3, [r7, #16]
}
 800c8fa:	bf00      	nop
 800c8fc:	bf00      	nop
 800c8fe:	e7fd      	b.n	800c8fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d10b      	bne.n	800c91e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90a:	f383 8811 	msr	BASEPRI, r3
 800c90e:	f3bf 8f6f 	isb	sy
 800c912:	f3bf 8f4f 	dsb	sy
 800c916:	60fb      	str	r3, [r7, #12]
}
 800c918:	bf00      	nop
 800c91a:	bf00      	nop
 800c91c:	e7fd      	b.n	800c91a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c91e:	f000 ff93 	bl	800d848 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c922:	4b1d      	ldr	r3, [pc, #116]	@ (800c998 <xTaskCheckForTimeOut+0xc0>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	69ba      	ldr	r2, [r7, #24]
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c93a:	d102      	bne.n	800c942 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c93c:	2300      	movs	r3, #0
 800c93e:	61fb      	str	r3, [r7, #28]
 800c940:	e023      	b.n	800c98a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	4b15      	ldr	r3, [pc, #84]	@ (800c99c <xTaskCheckForTimeOut+0xc4>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d007      	beq.n	800c95e <xTaskCheckForTimeOut+0x86>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	69ba      	ldr	r2, [r7, #24]
 800c954:	429a      	cmp	r2, r3
 800c956:	d302      	bcc.n	800c95e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c958:	2301      	movs	r3, #1
 800c95a:	61fb      	str	r3, [r7, #28]
 800c95c:	e015      	b.n	800c98a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	429a      	cmp	r2, r3
 800c966:	d20b      	bcs.n	800c980 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	1ad2      	subs	r2, r2, r3
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f7ff ff99 	bl	800c8ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c97a:	2300      	movs	r3, #0
 800c97c:	61fb      	str	r3, [r7, #28]
 800c97e:	e004      	b.n	800c98a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	2200      	movs	r2, #0
 800c984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c986:	2301      	movs	r3, #1
 800c988:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c98a:	f000 ff8f 	bl	800d8ac <vPortExitCritical>

	return xReturn;
 800c98e:	69fb      	ldr	r3, [r7, #28]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3720      	adds	r7, #32
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	20005b3c 	.word	0x20005b3c
 800c99c:	20005b50 	.word	0x20005b50

0800c9a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c9a4:	4b03      	ldr	r3, [pc, #12]	@ (800c9b4 <vTaskMissedYield+0x14>)
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	601a      	str	r2, [r3, #0]
}
 800c9aa:	bf00      	nop
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr
 800c9b4:	20005b4c 	.word	0x20005b4c

0800c9b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c9c0:	f000 f852 	bl	800ca68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c9c4:	4b06      	ldr	r3, [pc, #24]	@ (800c9e0 <prvIdleTask+0x28>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d9f9      	bls.n	800c9c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c9cc:	4b05      	ldr	r3, [pc, #20]	@ (800c9e4 <prvIdleTask+0x2c>)
 800c9ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9d2:	601a      	str	r2, [r3, #0]
 800c9d4:	f3bf 8f4f 	dsb	sy
 800c9d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c9dc:	e7f0      	b.n	800c9c0 <prvIdleTask+0x8>
 800c9de:	bf00      	nop
 800c9e0:	20005668 	.word	0x20005668
 800c9e4:	e000ed04 	.word	0xe000ed04

0800c9e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	607b      	str	r3, [r7, #4]
 800c9f2:	e00c      	b.n	800ca0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	4413      	add	r3, r2
 800c9fc:	009b      	lsls	r3, r3, #2
 800c9fe:	4a12      	ldr	r2, [pc, #72]	@ (800ca48 <prvInitialiseTaskLists+0x60>)
 800ca00:	4413      	add	r3, r2
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fe fb22 	bl	800b04c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	607b      	str	r3, [r7, #4]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2b37      	cmp	r3, #55	@ 0x37
 800ca12:	d9ef      	bls.n	800c9f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ca14:	480d      	ldr	r0, [pc, #52]	@ (800ca4c <prvInitialiseTaskLists+0x64>)
 800ca16:	f7fe fb19 	bl	800b04c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ca1a:	480d      	ldr	r0, [pc, #52]	@ (800ca50 <prvInitialiseTaskLists+0x68>)
 800ca1c:	f7fe fb16 	bl	800b04c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ca20:	480c      	ldr	r0, [pc, #48]	@ (800ca54 <prvInitialiseTaskLists+0x6c>)
 800ca22:	f7fe fb13 	bl	800b04c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ca26:	480c      	ldr	r0, [pc, #48]	@ (800ca58 <prvInitialiseTaskLists+0x70>)
 800ca28:	f7fe fb10 	bl	800b04c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ca2c:	480b      	ldr	r0, [pc, #44]	@ (800ca5c <prvInitialiseTaskLists+0x74>)
 800ca2e:	f7fe fb0d 	bl	800b04c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ca32:	4b0b      	ldr	r3, [pc, #44]	@ (800ca60 <prvInitialiseTaskLists+0x78>)
 800ca34:	4a05      	ldr	r2, [pc, #20]	@ (800ca4c <prvInitialiseTaskLists+0x64>)
 800ca36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ca38:	4b0a      	ldr	r3, [pc, #40]	@ (800ca64 <prvInitialiseTaskLists+0x7c>)
 800ca3a:	4a05      	ldr	r2, [pc, #20]	@ (800ca50 <prvInitialiseTaskLists+0x68>)
 800ca3c:	601a      	str	r2, [r3, #0]
}
 800ca3e:	bf00      	nop
 800ca40:	3708      	adds	r7, #8
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	20005668 	.word	0x20005668
 800ca4c:	20005ac8 	.word	0x20005ac8
 800ca50:	20005adc 	.word	0x20005adc
 800ca54:	20005af8 	.word	0x20005af8
 800ca58:	20005b0c 	.word	0x20005b0c
 800ca5c:	20005b24 	.word	0x20005b24
 800ca60:	20005af0 	.word	0x20005af0
 800ca64:	20005af4 	.word	0x20005af4

0800ca68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b082      	sub	sp, #8
 800ca6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ca6e:	e019      	b.n	800caa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ca70:	f000 feea 	bl	800d848 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca74:	4b10      	ldr	r3, [pc, #64]	@ (800cab8 <prvCheckTasksWaitingTermination+0x50>)
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	3304      	adds	r3, #4
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fe fb6d 	bl	800b160 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ca86:	4b0d      	ldr	r3, [pc, #52]	@ (800cabc <prvCheckTasksWaitingTermination+0x54>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	3b01      	subs	r3, #1
 800ca8c:	4a0b      	ldr	r2, [pc, #44]	@ (800cabc <prvCheckTasksWaitingTermination+0x54>)
 800ca8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ca90:	4b0b      	ldr	r3, [pc, #44]	@ (800cac0 <prvCheckTasksWaitingTermination+0x58>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	3b01      	subs	r3, #1
 800ca96:	4a0a      	ldr	r2, [pc, #40]	@ (800cac0 <prvCheckTasksWaitingTermination+0x58>)
 800ca98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ca9a:	f000 ff07 	bl	800d8ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 f810 	bl	800cac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800caa4:	4b06      	ldr	r3, [pc, #24]	@ (800cac0 <prvCheckTasksWaitingTermination+0x58>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1e1      	bne.n	800ca70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800caac:	bf00      	nop
 800caae:	bf00      	nop
 800cab0:	3708      	adds	r7, #8
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}
 800cab6:	bf00      	nop
 800cab8:	20005b0c 	.word	0x20005b0c
 800cabc:	20005b38 	.word	0x20005b38
 800cac0:	20005b20 	.word	0x20005b20

0800cac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	3354      	adds	r3, #84	@ 0x54
 800cad0:	4618      	mov	r0, r3
 800cad2:	f00d fec9 	bl	801a868 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d108      	bne.n	800caf2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cae4:	4618      	mov	r0, r3
 800cae6:	f001 f89f 	bl	800dc28 <vPortFree>
				vPortFree( pxTCB );
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f001 f89c 	bl	800dc28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800caf0:	e019      	b.n	800cb26 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d103      	bne.n	800cb04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f001 f893 	bl	800dc28 <vPortFree>
	}
 800cb02:	e010      	b.n	800cb26 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800cb0a:	2b02      	cmp	r3, #2
 800cb0c:	d00b      	beq.n	800cb26 <prvDeleteTCB+0x62>
	__asm volatile
 800cb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb12:	f383 8811 	msr	BASEPRI, r3
 800cb16:	f3bf 8f6f 	isb	sy
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	60fb      	str	r3, [r7, #12]
}
 800cb20:	bf00      	nop
 800cb22:	bf00      	nop
 800cb24:	e7fd      	b.n	800cb22 <prvDeleteTCB+0x5e>
	}
 800cb26:	bf00      	nop
 800cb28:	3710      	adds	r7, #16
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
	...

0800cb30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb36:	4b0c      	ldr	r3, [pc, #48]	@ (800cb68 <prvResetNextTaskUnblockTime+0x38>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d104      	bne.n	800cb4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cb40:	4b0a      	ldr	r3, [pc, #40]	@ (800cb6c <prvResetNextTaskUnblockTime+0x3c>)
 800cb42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cb48:	e008      	b.n	800cb5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb4a:	4b07      	ldr	r3, [pc, #28]	@ (800cb68 <prvResetNextTaskUnblockTime+0x38>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	68db      	ldr	r3, [r3, #12]
 800cb52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	4a04      	ldr	r2, [pc, #16]	@ (800cb6c <prvResetNextTaskUnblockTime+0x3c>)
 800cb5a:	6013      	str	r3, [r2, #0]
}
 800cb5c:	bf00      	nop
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr
 800cb68:	20005af0 	.word	0x20005af0
 800cb6c:	20005b58 	.word	0x20005b58

0800cb70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cb70:	b480      	push	{r7}
 800cb72:	b083      	sub	sp, #12
 800cb74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cb76:	4b0b      	ldr	r3, [pc, #44]	@ (800cba4 <xTaskGetSchedulerState+0x34>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d102      	bne.n	800cb84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cb7e:	2301      	movs	r3, #1
 800cb80:	607b      	str	r3, [r7, #4]
 800cb82:	e008      	b.n	800cb96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb84:	4b08      	ldr	r3, [pc, #32]	@ (800cba8 <xTaskGetSchedulerState+0x38>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d102      	bne.n	800cb92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	607b      	str	r3, [r7, #4]
 800cb90:	e001      	b.n	800cb96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cb92:	2300      	movs	r3, #0
 800cb94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cb96:	687b      	ldr	r3, [r7, #4]
	}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	370c      	adds	r7, #12
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr
 800cba4:	20005b44 	.word	0x20005b44
 800cba8:	20005b60 	.word	0x20005b60

0800cbac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d051      	beq.n	800cc66 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbc6:	4b2a      	ldr	r3, [pc, #168]	@ (800cc70 <xTaskPriorityInherit+0xc4>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d241      	bcs.n	800cc54 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	699b      	ldr	r3, [r3, #24]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	db06      	blt.n	800cbe6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbd8:	4b25      	ldr	r3, [pc, #148]	@ (800cc70 <xTaskPriorityInherit+0xc4>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbde:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	6959      	ldr	r1, [r3, #20]
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cbee:	4613      	mov	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	4413      	add	r3, r2
 800cbf4:	009b      	lsls	r3, r3, #2
 800cbf6:	4a1f      	ldr	r2, [pc, #124]	@ (800cc74 <xTaskPriorityInherit+0xc8>)
 800cbf8:	4413      	add	r3, r2
 800cbfa:	4299      	cmp	r1, r3
 800cbfc:	d122      	bne.n	800cc44 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	3304      	adds	r3, #4
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fe faac 	bl	800b160 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc08:	4b19      	ldr	r3, [pc, #100]	@ (800cc70 <xTaskPriorityInherit+0xc4>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc16:	4b18      	ldr	r3, [pc, #96]	@ (800cc78 <xTaskPriorityInherit+0xcc>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d903      	bls.n	800cc26 <xTaskPriorityInherit+0x7a>
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc22:	4a15      	ldr	r2, [pc, #84]	@ (800cc78 <xTaskPriorityInherit+0xcc>)
 800cc24:	6013      	str	r3, [r2, #0]
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	4413      	add	r3, r2
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	4a10      	ldr	r2, [pc, #64]	@ (800cc74 <xTaskPriorityInherit+0xc8>)
 800cc34:	441a      	add	r2, r3
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	3304      	adds	r3, #4
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	4610      	mov	r0, r2
 800cc3e:	f7fe fa32 	bl	800b0a6 <vListInsertEnd>
 800cc42:	e004      	b.n	800cc4e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cc44:	4b0a      	ldr	r3, [pc, #40]	@ (800cc70 <xTaskPriorityInherit+0xc4>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cc4e:	2301      	movs	r3, #1
 800cc50:	60fb      	str	r3, [r7, #12]
 800cc52:	e008      	b.n	800cc66 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc58:	4b05      	ldr	r3, [pc, #20]	@ (800cc70 <xTaskPriorityInherit+0xc4>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d201      	bcs.n	800cc66 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cc62:	2301      	movs	r3, #1
 800cc64:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cc66:	68fb      	ldr	r3, [r7, #12]
	}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	20005664 	.word	0x20005664
 800cc74:	20005668 	.word	0x20005668
 800cc78:	20005b40 	.word	0x20005b40

0800cc7c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b086      	sub	sp, #24
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d058      	beq.n	800cd44 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cc92:	4b2f      	ldr	r3, [pc, #188]	@ (800cd50 <xTaskPriorityDisinherit+0xd4>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	693a      	ldr	r2, [r7, #16]
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d00b      	beq.n	800ccb4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800cc9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cca0:	f383 8811 	msr	BASEPRI, r3
 800cca4:	f3bf 8f6f 	isb	sy
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	60fb      	str	r3, [r7, #12]
}
 800ccae:	bf00      	nop
 800ccb0:	bf00      	nop
 800ccb2:	e7fd      	b.n	800ccb0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d10b      	bne.n	800ccd4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ccbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc0:	f383 8811 	msr	BASEPRI, r3
 800ccc4:	f3bf 8f6f 	isb	sy
 800ccc8:	f3bf 8f4f 	dsb	sy
 800cccc:	60bb      	str	r3, [r7, #8]
}
 800ccce:	bf00      	nop
 800ccd0:	bf00      	nop
 800ccd2:	e7fd      	b.n	800ccd0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccd8:	1e5a      	subs	r2, r3, #1
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d02c      	beq.n	800cd44 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d128      	bne.n	800cd44 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ccf2:	693b      	ldr	r3, [r7, #16]
 800ccf4:	3304      	adds	r3, #4
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fe fa32 	bl	800b160 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cd10:	693b      	ldr	r3, [r7, #16]
 800cd12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd14:	4b0f      	ldr	r3, [pc, #60]	@ (800cd54 <xTaskPriorityDisinherit+0xd8>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d903      	bls.n	800cd24 <xTaskPriorityDisinherit+0xa8>
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd20:	4a0c      	ldr	r2, [pc, #48]	@ (800cd54 <xTaskPriorityDisinherit+0xd8>)
 800cd22:	6013      	str	r3, [r2, #0]
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd28:	4613      	mov	r3, r2
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4413      	add	r3, r2
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	4a09      	ldr	r2, [pc, #36]	@ (800cd58 <xTaskPriorityDisinherit+0xdc>)
 800cd32:	441a      	add	r2, r3
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	3304      	adds	r3, #4
 800cd38:	4619      	mov	r1, r3
 800cd3a:	4610      	mov	r0, r2
 800cd3c:	f7fe f9b3 	bl	800b0a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cd40:	2301      	movs	r3, #1
 800cd42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cd44:	697b      	ldr	r3, [r7, #20]
	}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3718      	adds	r7, #24
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	20005664 	.word	0x20005664
 800cd54:	20005b40 	.word	0x20005b40
 800cd58:	20005668 	.word	0x20005668

0800cd5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b088      	sub	sp, #32
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d06c      	beq.n	800ce4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cd74:	69bb      	ldr	r3, [r7, #24]
 800cd76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d10b      	bne.n	800cd94 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800cd7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd80:	f383 8811 	msr	BASEPRI, r3
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	60fb      	str	r3, [r7, #12]
}
 800cd8e:	bf00      	nop
 800cd90:	bf00      	nop
 800cd92:	e7fd      	b.n	800cd90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd98:	683a      	ldr	r2, [r7, #0]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d902      	bls.n	800cda4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	61fb      	str	r3, [r7, #28]
 800cda2:	e002      	b.n	800cdaa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cda4:	69bb      	ldr	r3, [r7, #24]
 800cda6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cda8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdae:	69fa      	ldr	r2, [r7, #28]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d04c      	beq.n	800ce4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdb8:	697a      	ldr	r2, [r7, #20]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d147      	bne.n	800ce4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cdbe:	4b26      	ldr	r3, [pc, #152]	@ (800ce58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	69ba      	ldr	r2, [r7, #24]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d10b      	bne.n	800cde0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800cdc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdcc:	f383 8811 	msr	BASEPRI, r3
 800cdd0:	f3bf 8f6f 	isb	sy
 800cdd4:	f3bf 8f4f 	dsb	sy
 800cdd8:	60bb      	str	r3, [r7, #8]
}
 800cdda:	bf00      	nop
 800cddc:	bf00      	nop
 800cdde:	e7fd      	b.n	800cddc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cde0:	69bb      	ldr	r3, [r7, #24]
 800cde2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cde4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cde6:	69bb      	ldr	r3, [r7, #24]
 800cde8:	69fa      	ldr	r2, [r7, #28]
 800cdea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	699b      	ldr	r3, [r3, #24]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	db04      	blt.n	800cdfe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cdfe:	69bb      	ldr	r3, [r7, #24]
 800ce00:	6959      	ldr	r1, [r3, #20]
 800ce02:	693a      	ldr	r2, [r7, #16]
 800ce04:	4613      	mov	r3, r2
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	4413      	add	r3, r2
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	4a13      	ldr	r2, [pc, #76]	@ (800ce5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ce0e:	4413      	add	r3, r2
 800ce10:	4299      	cmp	r1, r3
 800ce12:	d11c      	bne.n	800ce4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	3304      	adds	r3, #4
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fe f9a1 	bl	800b160 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce22:	4b0f      	ldr	r3, [pc, #60]	@ (800ce60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d903      	bls.n	800ce32 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce2e:	4a0c      	ldr	r2, [pc, #48]	@ (800ce60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ce30:	6013      	str	r3, [r2, #0]
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce36:	4613      	mov	r3, r2
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	4413      	add	r3, r2
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	4a07      	ldr	r2, [pc, #28]	@ (800ce5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ce40:	441a      	add	r2, r3
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	3304      	adds	r3, #4
 800ce46:	4619      	mov	r1, r3
 800ce48:	4610      	mov	r0, r2
 800ce4a:	f7fe f92c 	bl	800b0a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce4e:	bf00      	nop
 800ce50:	3720      	adds	r7, #32
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	bf00      	nop
 800ce58:	20005664 	.word	0x20005664
 800ce5c:	20005668 	.word	0x20005668
 800ce60:	20005b40 	.word	0x20005b40

0800ce64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ce64:	b480      	push	{r7}
 800ce66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ce68:	4b07      	ldr	r3, [pc, #28]	@ (800ce88 <pvTaskIncrementMutexHeldCount+0x24>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d004      	beq.n	800ce7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ce70:	4b05      	ldr	r3, [pc, #20]	@ (800ce88 <pvTaskIncrementMutexHeldCount+0x24>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ce76:	3201      	adds	r2, #1
 800ce78:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800ce7a:	4b03      	ldr	r3, [pc, #12]	@ (800ce88 <pvTaskIncrementMutexHeldCount+0x24>)
 800ce7c:	681b      	ldr	r3, [r3, #0]
	}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr
 800ce88:	20005664 	.word	0x20005664

0800ce8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ce96:	4b21      	ldr	r3, [pc, #132]	@ (800cf1c <prvAddCurrentTaskToDelayedList+0x90>)
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce9c:	4b20      	ldr	r3, [pc, #128]	@ (800cf20 <prvAddCurrentTaskToDelayedList+0x94>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	3304      	adds	r3, #4
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7fe f95c 	bl	800b160 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ceae:	d10a      	bne.n	800cec6 <prvAddCurrentTaskToDelayedList+0x3a>
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d007      	beq.n	800cec6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ceb6:	4b1a      	ldr	r3, [pc, #104]	@ (800cf20 <prvAddCurrentTaskToDelayedList+0x94>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	3304      	adds	r3, #4
 800cebc:	4619      	mov	r1, r3
 800cebe:	4819      	ldr	r0, [pc, #100]	@ (800cf24 <prvAddCurrentTaskToDelayedList+0x98>)
 800cec0:	f7fe f8f1 	bl	800b0a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cec4:	e026      	b.n	800cf14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cec6:	68fa      	ldr	r2, [r7, #12]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	4413      	add	r3, r2
 800cecc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cece:	4b14      	ldr	r3, [pc, #80]	@ (800cf20 <prvAddCurrentTaskToDelayedList+0x94>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	68ba      	ldr	r2, [r7, #8]
 800ced4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ced6:	68ba      	ldr	r2, [r7, #8]
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d209      	bcs.n	800cef2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cede:	4b12      	ldr	r3, [pc, #72]	@ (800cf28 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	4b0f      	ldr	r3, [pc, #60]	@ (800cf20 <prvAddCurrentTaskToDelayedList+0x94>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	3304      	adds	r3, #4
 800cee8:	4619      	mov	r1, r3
 800ceea:	4610      	mov	r0, r2
 800ceec:	f7fe f8ff 	bl	800b0ee <vListInsert>
}
 800cef0:	e010      	b.n	800cf14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cef2:	4b0e      	ldr	r3, [pc, #56]	@ (800cf2c <prvAddCurrentTaskToDelayedList+0xa0>)
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	4b0a      	ldr	r3, [pc, #40]	@ (800cf20 <prvAddCurrentTaskToDelayedList+0x94>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	3304      	adds	r3, #4
 800cefc:	4619      	mov	r1, r3
 800cefe:	4610      	mov	r0, r2
 800cf00:	f7fe f8f5 	bl	800b0ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cf04:	4b0a      	ldr	r3, [pc, #40]	@ (800cf30 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	68ba      	ldr	r2, [r7, #8]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d202      	bcs.n	800cf14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cf0e:	4a08      	ldr	r2, [pc, #32]	@ (800cf30 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	6013      	str	r3, [r2, #0]
}
 800cf14:	bf00      	nop
 800cf16:	3710      	adds	r7, #16
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	20005b3c 	.word	0x20005b3c
 800cf20:	20005664 	.word	0x20005664
 800cf24:	20005b24 	.word	0x20005b24
 800cf28:	20005af4 	.word	0x20005af4
 800cf2c:	20005af0 	.word	0x20005af0
 800cf30:	20005b58 	.word	0x20005b58

0800cf34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b08a      	sub	sp, #40	@ 0x28
 800cf38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cf3e:	f000 fb13 	bl	800d568 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cf42:	4b1d      	ldr	r3, [pc, #116]	@ (800cfb8 <xTimerCreateTimerTask+0x84>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d021      	beq.n	800cf8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cf52:	1d3a      	adds	r2, r7, #4
 800cf54:	f107 0108 	add.w	r1, r7, #8
 800cf58:	f107 030c 	add.w	r3, r7, #12
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7fe f85b 	bl	800b018 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cf62:	6879      	ldr	r1, [r7, #4]
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	68fa      	ldr	r2, [r7, #12]
 800cf68:	9202      	str	r2, [sp, #8]
 800cf6a:	9301      	str	r3, [sp, #4]
 800cf6c:	2302      	movs	r3, #2
 800cf6e:	9300      	str	r3, [sp, #0]
 800cf70:	2300      	movs	r3, #0
 800cf72:	460a      	mov	r2, r1
 800cf74:	4911      	ldr	r1, [pc, #68]	@ (800cfbc <xTimerCreateTimerTask+0x88>)
 800cf76:	4812      	ldr	r0, [pc, #72]	@ (800cfc0 <xTimerCreateTimerTask+0x8c>)
 800cf78:	f7fe ff7a 	bl	800be70 <xTaskCreateStatic>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	4a11      	ldr	r2, [pc, #68]	@ (800cfc4 <xTimerCreateTimerTask+0x90>)
 800cf80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cf82:	4b10      	ldr	r3, [pc, #64]	@ (800cfc4 <xTimerCreateTimerTask+0x90>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d001      	beq.n	800cf8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d10b      	bne.n	800cfac <xTimerCreateTimerTask+0x78>
	__asm volatile
 800cf94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf98:	f383 8811 	msr	BASEPRI, r3
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	613b      	str	r3, [r7, #16]
}
 800cfa6:	bf00      	nop
 800cfa8:	bf00      	nop
 800cfaa:	e7fd      	b.n	800cfa8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800cfac:	697b      	ldr	r3, [r7, #20]
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3718      	adds	r7, #24
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	20005b94 	.word	0x20005b94
 800cfbc:	0801de90 	.word	0x0801de90
 800cfc0:	0800d101 	.word	0x0800d101
 800cfc4:	20005b98 	.word	0x20005b98

0800cfc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b08a      	sub	sp, #40	@ 0x28
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	60b9      	str	r1, [r7, #8]
 800cfd2:	607a      	str	r2, [r7, #4]
 800cfd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d10b      	bne.n	800cff8 <xTimerGenericCommand+0x30>
	__asm volatile
 800cfe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe4:	f383 8811 	msr	BASEPRI, r3
 800cfe8:	f3bf 8f6f 	isb	sy
 800cfec:	f3bf 8f4f 	dsb	sy
 800cff0:	623b      	str	r3, [r7, #32]
}
 800cff2:	bf00      	nop
 800cff4:	bf00      	nop
 800cff6:	e7fd      	b.n	800cff4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cff8:	4b19      	ldr	r3, [pc, #100]	@ (800d060 <xTimerGenericCommand+0x98>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d02a      	beq.n	800d056 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	2b05      	cmp	r3, #5
 800d010:	dc18      	bgt.n	800d044 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d012:	f7ff fdad 	bl	800cb70 <xTaskGetSchedulerState>
 800d016:	4603      	mov	r3, r0
 800d018:	2b02      	cmp	r3, #2
 800d01a:	d109      	bne.n	800d030 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d01c:	4b10      	ldr	r3, [pc, #64]	@ (800d060 <xTimerGenericCommand+0x98>)
 800d01e:	6818      	ldr	r0, [r3, #0]
 800d020:	f107 0110 	add.w	r1, r7, #16
 800d024:	2300      	movs	r3, #0
 800d026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d028:	f7fe fa0a 	bl	800b440 <xQueueGenericSend>
 800d02c:	6278      	str	r0, [r7, #36]	@ 0x24
 800d02e:	e012      	b.n	800d056 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d030:	4b0b      	ldr	r3, [pc, #44]	@ (800d060 <xTimerGenericCommand+0x98>)
 800d032:	6818      	ldr	r0, [r3, #0]
 800d034:	f107 0110 	add.w	r1, r7, #16
 800d038:	2300      	movs	r3, #0
 800d03a:	2200      	movs	r2, #0
 800d03c:	f7fe fa00 	bl	800b440 <xQueueGenericSend>
 800d040:	6278      	str	r0, [r7, #36]	@ 0x24
 800d042:	e008      	b.n	800d056 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d044:	4b06      	ldr	r3, [pc, #24]	@ (800d060 <xTimerGenericCommand+0x98>)
 800d046:	6818      	ldr	r0, [r3, #0]
 800d048:	f107 0110 	add.w	r1, r7, #16
 800d04c:	2300      	movs	r3, #0
 800d04e:	683a      	ldr	r2, [r7, #0]
 800d050:	f7fe faf8 	bl	800b644 <xQueueGenericSendFromISR>
 800d054:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d058:	4618      	mov	r0, r3
 800d05a:	3728      	adds	r7, #40	@ 0x28
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}
 800d060:	20005b94 	.word	0x20005b94

0800d064 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b088      	sub	sp, #32
 800d068:	af02      	add	r7, sp, #8
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d06e:	4b23      	ldr	r3, [pc, #140]	@ (800d0fc <prvProcessExpiredTimer+0x98>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	68db      	ldr	r3, [r3, #12]
 800d076:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	3304      	adds	r3, #4
 800d07c:	4618      	mov	r0, r3
 800d07e:	f7fe f86f 	bl	800b160 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d088:	f003 0304 	and.w	r3, r3, #4
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d023      	beq.n	800d0d8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	699a      	ldr	r2, [r3, #24]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	18d1      	adds	r1, r2, r3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	683a      	ldr	r2, [r7, #0]
 800d09c:	6978      	ldr	r0, [r7, #20]
 800d09e:	f000 f8d5 	bl	800d24c <prvInsertTimerInActiveList>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d020      	beq.n	800d0ea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	9300      	str	r3, [sp, #0]
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	6978      	ldr	r0, [r7, #20]
 800d0b4:	f7ff ff88 	bl	800cfc8 <xTimerGenericCommand>
 800d0b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d114      	bne.n	800d0ea <prvProcessExpiredTimer+0x86>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	60fb      	str	r3, [r7, #12]
}
 800d0d2:	bf00      	nop
 800d0d4:	bf00      	nop
 800d0d6:	e7fd      	b.n	800d0d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d0de:	f023 0301 	bic.w	r3, r3, #1
 800d0e2:	b2da      	uxtb	r2, r3
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	6a1b      	ldr	r3, [r3, #32]
 800d0ee:	6978      	ldr	r0, [r7, #20]
 800d0f0:	4798      	blx	r3
}
 800d0f2:	bf00      	nop
 800d0f4:	3718      	adds	r7, #24
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
 800d0fa:	bf00      	nop
 800d0fc:	20005b8c 	.word	0x20005b8c

0800d100 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d108:	f107 0308 	add.w	r3, r7, #8
 800d10c:	4618      	mov	r0, r3
 800d10e:	f000 f859 	bl	800d1c4 <prvGetNextExpireTime>
 800d112:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	4619      	mov	r1, r3
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	f000 f805 	bl	800d128 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d11e:	f000 f8d7 	bl	800d2d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d122:	bf00      	nop
 800d124:	e7f0      	b.n	800d108 <prvTimerTask+0x8>
	...

0800d128 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d132:	f7ff f901 	bl	800c338 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d136:	f107 0308 	add.w	r3, r7, #8
 800d13a:	4618      	mov	r0, r3
 800d13c:	f000 f866 	bl	800d20c <prvSampleTimeNow>
 800d140:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d130      	bne.n	800d1aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d10a      	bne.n	800d164 <prvProcessTimerOrBlockTask+0x3c>
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	429a      	cmp	r2, r3
 800d154:	d806      	bhi.n	800d164 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d156:	f7ff f8fd 	bl	800c354 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d15a:	68f9      	ldr	r1, [r7, #12]
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f7ff ff81 	bl	800d064 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d162:	e024      	b.n	800d1ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d008      	beq.n	800d17c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d16a:	4b13      	ldr	r3, [pc, #76]	@ (800d1b8 <prvProcessTimerOrBlockTask+0x90>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d101      	bne.n	800d178 <prvProcessTimerOrBlockTask+0x50>
 800d174:	2301      	movs	r3, #1
 800d176:	e000      	b.n	800d17a <prvProcessTimerOrBlockTask+0x52>
 800d178:	2300      	movs	r3, #0
 800d17a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d17c:	4b0f      	ldr	r3, [pc, #60]	@ (800d1bc <prvProcessTimerOrBlockTask+0x94>)
 800d17e:	6818      	ldr	r0, [r3, #0]
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	1ad3      	subs	r3, r2, r3
 800d186:	683a      	ldr	r2, [r7, #0]
 800d188:	4619      	mov	r1, r3
 800d18a:	f7fe fe3d 	bl	800be08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d18e:	f7ff f8e1 	bl	800c354 <xTaskResumeAll>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d10a      	bne.n	800d1ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d198:	4b09      	ldr	r3, [pc, #36]	@ (800d1c0 <prvProcessTimerOrBlockTask+0x98>)
 800d19a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d19e:	601a      	str	r2, [r3, #0]
 800d1a0:	f3bf 8f4f 	dsb	sy
 800d1a4:	f3bf 8f6f 	isb	sy
}
 800d1a8:	e001      	b.n	800d1ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d1aa:	f7ff f8d3 	bl	800c354 <xTaskResumeAll>
}
 800d1ae:	bf00      	nop
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	20005b90 	.word	0x20005b90
 800d1bc:	20005b94 	.word	0x20005b94
 800d1c0:	e000ed04 	.word	0xe000ed04

0800d1c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b085      	sub	sp, #20
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d1cc:	4b0e      	ldr	r3, [pc, #56]	@ (800d208 <prvGetNextExpireTime+0x44>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d101      	bne.n	800d1da <prvGetNextExpireTime+0x16>
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	e000      	b.n	800d1dc <prvGetNextExpireTime+0x18>
 800d1da:	2200      	movs	r2, #0
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d105      	bne.n	800d1f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d1e8:	4b07      	ldr	r3, [pc, #28]	@ (800d208 <prvGetNextExpireTime+0x44>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	68db      	ldr	r3, [r3, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	60fb      	str	r3, [r7, #12]
 800d1f2:	e001      	b.n	800d1f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3714      	adds	r7, #20
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop
 800d208:	20005b8c 	.word	0x20005b8c

0800d20c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b084      	sub	sp, #16
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d214:	f7ff f93c 	bl	800c490 <xTaskGetTickCount>
 800d218:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d21a:	4b0b      	ldr	r3, [pc, #44]	@ (800d248 <prvSampleTimeNow+0x3c>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	68fa      	ldr	r2, [r7, #12]
 800d220:	429a      	cmp	r2, r3
 800d222:	d205      	bcs.n	800d230 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d224:	f000 f93a 	bl	800d49c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	601a      	str	r2, [r3, #0]
 800d22e:	e002      	b.n	800d236 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2200      	movs	r2, #0
 800d234:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d236:	4a04      	ldr	r2, [pc, #16]	@ (800d248 <prvSampleTimeNow+0x3c>)
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d23c:	68fb      	ldr	r3, [r7, #12]
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	20005b9c 	.word	0x20005b9c

0800d24c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b086      	sub	sp, #24
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	607a      	str	r2, [r7, #4]
 800d258:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d25a:	2300      	movs	r3, #0
 800d25c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	68ba      	ldr	r2, [r7, #8]
 800d262:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	68fa      	ldr	r2, [r7, #12]
 800d268:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d26a:	68ba      	ldr	r2, [r7, #8]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d812      	bhi.n	800d298 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	1ad2      	subs	r2, r2, r3
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	699b      	ldr	r3, [r3, #24]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d302      	bcc.n	800d286 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d280:	2301      	movs	r3, #1
 800d282:	617b      	str	r3, [r7, #20]
 800d284:	e01b      	b.n	800d2be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d286:	4b10      	ldr	r3, [pc, #64]	@ (800d2c8 <prvInsertTimerInActiveList+0x7c>)
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	3304      	adds	r3, #4
 800d28e:	4619      	mov	r1, r3
 800d290:	4610      	mov	r0, r2
 800d292:	f7fd ff2c 	bl	800b0ee <vListInsert>
 800d296:	e012      	b.n	800d2be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d298:	687a      	ldr	r2, [r7, #4]
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d206      	bcs.n	800d2ae <prvInsertTimerInActiveList+0x62>
 800d2a0:	68ba      	ldr	r2, [r7, #8]
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d302      	bcc.n	800d2ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	617b      	str	r3, [r7, #20]
 800d2ac:	e007      	b.n	800d2be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d2ae:	4b07      	ldr	r3, [pc, #28]	@ (800d2cc <prvInsertTimerInActiveList+0x80>)
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	3304      	adds	r3, #4
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	4610      	mov	r0, r2
 800d2ba:	f7fd ff18 	bl	800b0ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d2be:	697b      	ldr	r3, [r7, #20]
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3718      	adds	r7, #24
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}
 800d2c8:	20005b90 	.word	0x20005b90
 800d2cc:	20005b8c 	.word	0x20005b8c

0800d2d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b08e      	sub	sp, #56	@ 0x38
 800d2d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d2d6:	e0ce      	b.n	800d476 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	da19      	bge.n	800d312 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d2de:	1d3b      	adds	r3, r7, #4
 800d2e0:	3304      	adds	r3, #4
 800d2e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d10b      	bne.n	800d302 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800d2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ee:	f383 8811 	msr	BASEPRI, r3
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	61fb      	str	r3, [r7, #28]
}
 800d2fc:	bf00      	nop
 800d2fe:	bf00      	nop
 800d300:	e7fd      	b.n	800d2fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d308:	6850      	ldr	r0, [r2, #4]
 800d30a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d30c:	6892      	ldr	r2, [r2, #8]
 800d30e:	4611      	mov	r1, r2
 800d310:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2b00      	cmp	r3, #0
 800d316:	f2c0 80ae 	blt.w	800d476 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d320:	695b      	ldr	r3, [r3, #20]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d004      	beq.n	800d330 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d328:	3304      	adds	r3, #4
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7fd ff18 	bl	800b160 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d330:	463b      	mov	r3, r7
 800d332:	4618      	mov	r0, r3
 800d334:	f7ff ff6a 	bl	800d20c <prvSampleTimeNow>
 800d338:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2b09      	cmp	r3, #9
 800d33e:	f200 8097 	bhi.w	800d470 <prvProcessReceivedCommands+0x1a0>
 800d342:	a201      	add	r2, pc, #4	@ (adr r2, 800d348 <prvProcessReceivedCommands+0x78>)
 800d344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d348:	0800d371 	.word	0x0800d371
 800d34c:	0800d371 	.word	0x0800d371
 800d350:	0800d371 	.word	0x0800d371
 800d354:	0800d3e7 	.word	0x0800d3e7
 800d358:	0800d3fb 	.word	0x0800d3fb
 800d35c:	0800d447 	.word	0x0800d447
 800d360:	0800d371 	.word	0x0800d371
 800d364:	0800d371 	.word	0x0800d371
 800d368:	0800d3e7 	.word	0x0800d3e7
 800d36c:	0800d3fb 	.word	0x0800d3fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d372:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d376:	f043 0301 	orr.w	r3, r3, #1
 800d37a:	b2da      	uxtb	r2, r3
 800d37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d37e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d382:	68ba      	ldr	r2, [r7, #8]
 800d384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d386:	699b      	ldr	r3, [r3, #24]
 800d388:	18d1      	adds	r1, r2, r3
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d38e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d390:	f7ff ff5c 	bl	800d24c <prvInsertTimerInActiveList>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d06c      	beq.n	800d474 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d39c:	6a1b      	ldr	r3, [r3, #32]
 800d39e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d3a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d3a8:	f003 0304 	and.w	r3, r3, #4
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d061      	beq.n	800d474 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d3b0:	68ba      	ldr	r2, [r7, #8]
 800d3b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3b4:	699b      	ldr	r3, [r3, #24]
 800d3b6:	441a      	add	r2, r3
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	9300      	str	r3, [sp, #0]
 800d3bc:	2300      	movs	r3, #0
 800d3be:	2100      	movs	r1, #0
 800d3c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d3c2:	f7ff fe01 	bl	800cfc8 <xTimerGenericCommand>
 800d3c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d3c8:	6a3b      	ldr	r3, [r7, #32]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d152      	bne.n	800d474 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800d3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d2:	f383 8811 	msr	BASEPRI, r3
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	f3bf 8f4f 	dsb	sy
 800d3de:	61bb      	str	r3, [r7, #24]
}
 800d3e0:	bf00      	nop
 800d3e2:	bf00      	nop
 800d3e4:	e7fd      	b.n	800d3e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d3ec:	f023 0301 	bic.w	r3, r3, #1
 800d3f0:	b2da      	uxtb	r2, r3
 800d3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d3f8:	e03d      	b.n	800d476 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d3fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d400:	f043 0301 	orr.w	r3, r3, #1
 800d404:	b2da      	uxtb	r2, r3
 800d406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d408:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d40c:	68ba      	ldr	r2, [r7, #8]
 800d40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d410:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d414:	699b      	ldr	r3, [r3, #24]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d10b      	bne.n	800d432 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800d41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d41e:	f383 8811 	msr	BASEPRI, r3
 800d422:	f3bf 8f6f 	isb	sy
 800d426:	f3bf 8f4f 	dsb	sy
 800d42a:	617b      	str	r3, [r7, #20]
}
 800d42c:	bf00      	nop
 800d42e:	bf00      	nop
 800d430:	e7fd      	b.n	800d42e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d434:	699a      	ldr	r2, [r3, #24]
 800d436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d438:	18d1      	adds	r1, r2, r3
 800d43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d43e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d440:	f7ff ff04 	bl	800d24c <prvInsertTimerInActiveList>
					break;
 800d444:	e017      	b.n	800d476 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d448:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d44c:	f003 0302 	and.w	r3, r3, #2
 800d450:	2b00      	cmp	r3, #0
 800d452:	d103      	bne.n	800d45c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800d454:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d456:	f000 fbe7 	bl	800dc28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d45a:	e00c      	b.n	800d476 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d45e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d462:	f023 0301 	bic.w	r3, r3, #1
 800d466:	b2da      	uxtb	r2, r3
 800d468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d46a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800d46e:	e002      	b.n	800d476 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800d470:	bf00      	nop
 800d472:	e000      	b.n	800d476 <prvProcessReceivedCommands+0x1a6>
					break;
 800d474:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d476:	4b08      	ldr	r3, [pc, #32]	@ (800d498 <prvProcessReceivedCommands+0x1c8>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	1d39      	adds	r1, r7, #4
 800d47c:	2200      	movs	r2, #0
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fe f97e 	bl	800b780 <xQueueReceive>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	f47f af26 	bne.w	800d2d8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800d48c:	bf00      	nop
 800d48e:	bf00      	nop
 800d490:	3730      	adds	r7, #48	@ 0x30
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	20005b94 	.word	0x20005b94

0800d49c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b088      	sub	sp, #32
 800d4a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d4a2:	e049      	b.n	800d538 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d4a4:	4b2e      	ldr	r3, [pc, #184]	@ (800d560 <prvSwitchTimerLists+0xc4>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4ae:	4b2c      	ldr	r3, [pc, #176]	@ (800d560 <prvSwitchTimerLists+0xc4>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	3304      	adds	r3, #4
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7fd fe4f 	bl	800b160 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	6a1b      	ldr	r3, [r3, #32]
 800d4c6:	68f8      	ldr	r0, [r7, #12]
 800d4c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800d4d0:	f003 0304 	and.w	r3, r3, #4
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d02f      	beq.n	800d538 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	699b      	ldr	r3, [r3, #24]
 800d4dc:	693a      	ldr	r2, [r7, #16]
 800d4de:	4413      	add	r3, r2
 800d4e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d4e2:	68ba      	ldr	r2, [r7, #8]
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d90e      	bls.n	800d508 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	68ba      	ldr	r2, [r7, #8]
 800d4ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	68fa      	ldr	r2, [r7, #12]
 800d4f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d4f6:	4b1a      	ldr	r3, [pc, #104]	@ (800d560 <prvSwitchTimerLists+0xc4>)
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	3304      	adds	r3, #4
 800d4fe:	4619      	mov	r1, r3
 800d500:	4610      	mov	r0, r2
 800d502:	f7fd fdf4 	bl	800b0ee <vListInsert>
 800d506:	e017      	b.n	800d538 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d508:	2300      	movs	r3, #0
 800d50a:	9300      	str	r3, [sp, #0]
 800d50c:	2300      	movs	r3, #0
 800d50e:	693a      	ldr	r2, [r7, #16]
 800d510:	2100      	movs	r1, #0
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f7ff fd58 	bl	800cfc8 <xTimerGenericCommand>
 800d518:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10b      	bne.n	800d538 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800d520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d524:	f383 8811 	msr	BASEPRI, r3
 800d528:	f3bf 8f6f 	isb	sy
 800d52c:	f3bf 8f4f 	dsb	sy
 800d530:	603b      	str	r3, [r7, #0]
}
 800d532:	bf00      	nop
 800d534:	bf00      	nop
 800d536:	e7fd      	b.n	800d534 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d538:	4b09      	ldr	r3, [pc, #36]	@ (800d560 <prvSwitchTimerLists+0xc4>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d1b0      	bne.n	800d4a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d542:	4b07      	ldr	r3, [pc, #28]	@ (800d560 <prvSwitchTimerLists+0xc4>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d548:	4b06      	ldr	r3, [pc, #24]	@ (800d564 <prvSwitchTimerLists+0xc8>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a04      	ldr	r2, [pc, #16]	@ (800d560 <prvSwitchTimerLists+0xc4>)
 800d54e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d550:	4a04      	ldr	r2, [pc, #16]	@ (800d564 <prvSwitchTimerLists+0xc8>)
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	6013      	str	r3, [r2, #0]
}
 800d556:	bf00      	nop
 800d558:	3718      	adds	r7, #24
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	20005b8c 	.word	0x20005b8c
 800d564:	20005b90 	.word	0x20005b90

0800d568 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d56e:	f000 f96b 	bl	800d848 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d572:	4b15      	ldr	r3, [pc, #84]	@ (800d5c8 <prvCheckForValidListAndQueue+0x60>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d120      	bne.n	800d5bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d57a:	4814      	ldr	r0, [pc, #80]	@ (800d5cc <prvCheckForValidListAndQueue+0x64>)
 800d57c:	f7fd fd66 	bl	800b04c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d580:	4813      	ldr	r0, [pc, #76]	@ (800d5d0 <prvCheckForValidListAndQueue+0x68>)
 800d582:	f7fd fd63 	bl	800b04c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d586:	4b13      	ldr	r3, [pc, #76]	@ (800d5d4 <prvCheckForValidListAndQueue+0x6c>)
 800d588:	4a10      	ldr	r2, [pc, #64]	@ (800d5cc <prvCheckForValidListAndQueue+0x64>)
 800d58a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d58c:	4b12      	ldr	r3, [pc, #72]	@ (800d5d8 <prvCheckForValidListAndQueue+0x70>)
 800d58e:	4a10      	ldr	r2, [pc, #64]	@ (800d5d0 <prvCheckForValidListAndQueue+0x68>)
 800d590:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d592:	2300      	movs	r3, #0
 800d594:	9300      	str	r3, [sp, #0]
 800d596:	4b11      	ldr	r3, [pc, #68]	@ (800d5dc <prvCheckForValidListAndQueue+0x74>)
 800d598:	4a11      	ldr	r2, [pc, #68]	@ (800d5e0 <prvCheckForValidListAndQueue+0x78>)
 800d59a:	2110      	movs	r1, #16
 800d59c:	200a      	movs	r0, #10
 800d59e:	f7fd fe73 	bl	800b288 <xQueueGenericCreateStatic>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	4a08      	ldr	r2, [pc, #32]	@ (800d5c8 <prvCheckForValidListAndQueue+0x60>)
 800d5a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d5a8:	4b07      	ldr	r3, [pc, #28]	@ (800d5c8 <prvCheckForValidListAndQueue+0x60>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d005      	beq.n	800d5bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d5b0:	4b05      	ldr	r3, [pc, #20]	@ (800d5c8 <prvCheckForValidListAndQueue+0x60>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	490b      	ldr	r1, [pc, #44]	@ (800d5e4 <prvCheckForValidListAndQueue+0x7c>)
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7fe fbfc 	bl	800bdb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d5bc:	f000 f976 	bl	800d8ac <vPortExitCritical>
}
 800d5c0:	bf00      	nop
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	20005b94 	.word	0x20005b94
 800d5cc:	20005b64 	.word	0x20005b64
 800d5d0:	20005b78 	.word	0x20005b78
 800d5d4:	20005b8c 	.word	0x20005b8c
 800d5d8:	20005b90 	.word	0x20005b90
 800d5dc:	20005c40 	.word	0x20005c40
 800d5e0:	20005ba0 	.word	0x20005ba0
 800d5e4:	0801de98 	.word	0x0801de98

0800d5e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b085      	sub	sp, #20
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	60f8      	str	r0, [r7, #12]
 800d5f0:	60b9      	str	r1, [r7, #8]
 800d5f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	3b04      	subs	r3, #4
 800d5f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	3b04      	subs	r3, #4
 800d606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	f023 0201 	bic.w	r2, r3, #1
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	3b04      	subs	r3, #4
 800d616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d618:	4a0c      	ldr	r2, [pc, #48]	@ (800d64c <pxPortInitialiseStack+0x64>)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	3b14      	subs	r3, #20
 800d622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	3b04      	subs	r3, #4
 800d62e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f06f 0202 	mvn.w	r2, #2
 800d636:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	3b20      	subs	r3, #32
 800d63c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d63e:	68fb      	ldr	r3, [r7, #12]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3714      	adds	r7, #20
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr
 800d64c:	0800d651 	.word	0x0800d651

0800d650 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d650:	b480      	push	{r7}
 800d652:	b085      	sub	sp, #20
 800d654:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d656:	2300      	movs	r3, #0
 800d658:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d65a:	4b13      	ldr	r3, [pc, #76]	@ (800d6a8 <prvTaskExitError+0x58>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d662:	d00b      	beq.n	800d67c <prvTaskExitError+0x2c>
	__asm volatile
 800d664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d668:	f383 8811 	msr	BASEPRI, r3
 800d66c:	f3bf 8f6f 	isb	sy
 800d670:	f3bf 8f4f 	dsb	sy
 800d674:	60fb      	str	r3, [r7, #12]
}
 800d676:	bf00      	nop
 800d678:	bf00      	nop
 800d67a:	e7fd      	b.n	800d678 <prvTaskExitError+0x28>
	__asm volatile
 800d67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d680:	f383 8811 	msr	BASEPRI, r3
 800d684:	f3bf 8f6f 	isb	sy
 800d688:	f3bf 8f4f 	dsb	sy
 800d68c:	60bb      	str	r3, [r7, #8]
}
 800d68e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d690:	bf00      	nop
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d0fc      	beq.n	800d692 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d698:	bf00      	nop
 800d69a:	bf00      	nop
 800d69c:	3714      	adds	r7, #20
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a4:	4770      	bx	lr
 800d6a6:	bf00      	nop
 800d6a8:	20000028 	.word	0x20000028
 800d6ac:	00000000 	.word	0x00000000

0800d6b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d6b0:	4b07      	ldr	r3, [pc, #28]	@ (800d6d0 <pxCurrentTCBConst2>)
 800d6b2:	6819      	ldr	r1, [r3, #0]
 800d6b4:	6808      	ldr	r0, [r1, #0]
 800d6b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ba:	f380 8809 	msr	PSP, r0
 800d6be:	f3bf 8f6f 	isb	sy
 800d6c2:	f04f 0000 	mov.w	r0, #0
 800d6c6:	f380 8811 	msr	BASEPRI, r0
 800d6ca:	4770      	bx	lr
 800d6cc:	f3af 8000 	nop.w

0800d6d0 <pxCurrentTCBConst2>:
 800d6d0:	20005664 	.word	0x20005664
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d6d4:	bf00      	nop
 800d6d6:	bf00      	nop

0800d6d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d6d8:	4808      	ldr	r0, [pc, #32]	@ (800d6fc <prvPortStartFirstTask+0x24>)
 800d6da:	6800      	ldr	r0, [r0, #0]
 800d6dc:	6800      	ldr	r0, [r0, #0]
 800d6de:	f380 8808 	msr	MSP, r0
 800d6e2:	f04f 0000 	mov.w	r0, #0
 800d6e6:	f380 8814 	msr	CONTROL, r0
 800d6ea:	b662      	cpsie	i
 800d6ec:	b661      	cpsie	f
 800d6ee:	f3bf 8f4f 	dsb	sy
 800d6f2:	f3bf 8f6f 	isb	sy
 800d6f6:	df00      	svc	0
 800d6f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d6fa:	bf00      	nop
 800d6fc:	e000ed08 	.word	0xe000ed08

0800d700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b086      	sub	sp, #24
 800d704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d706:	4b47      	ldr	r3, [pc, #284]	@ (800d824 <xPortStartScheduler+0x124>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a47      	ldr	r2, [pc, #284]	@ (800d828 <xPortStartScheduler+0x128>)
 800d70c:	4293      	cmp	r3, r2
 800d70e:	d10b      	bne.n	800d728 <xPortStartScheduler+0x28>
	__asm volatile
 800d710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d714:	f383 8811 	msr	BASEPRI, r3
 800d718:	f3bf 8f6f 	isb	sy
 800d71c:	f3bf 8f4f 	dsb	sy
 800d720:	613b      	str	r3, [r7, #16]
}
 800d722:	bf00      	nop
 800d724:	bf00      	nop
 800d726:	e7fd      	b.n	800d724 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d728:	4b3e      	ldr	r3, [pc, #248]	@ (800d824 <xPortStartScheduler+0x124>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4a3f      	ldr	r2, [pc, #252]	@ (800d82c <xPortStartScheduler+0x12c>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d10b      	bne.n	800d74a <xPortStartScheduler+0x4a>
	__asm volatile
 800d732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d736:	f383 8811 	msr	BASEPRI, r3
 800d73a:	f3bf 8f6f 	isb	sy
 800d73e:	f3bf 8f4f 	dsb	sy
 800d742:	60fb      	str	r3, [r7, #12]
}
 800d744:	bf00      	nop
 800d746:	bf00      	nop
 800d748:	e7fd      	b.n	800d746 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d74a:	4b39      	ldr	r3, [pc, #228]	@ (800d830 <xPortStartScheduler+0x130>)
 800d74c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	b2db      	uxtb	r3, r3
 800d754:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	22ff      	movs	r2, #255	@ 0xff
 800d75a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	b2db      	uxtb	r3, r3
 800d762:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d764:	78fb      	ldrb	r3, [r7, #3]
 800d766:	b2db      	uxtb	r3, r3
 800d768:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d76c:	b2da      	uxtb	r2, r3
 800d76e:	4b31      	ldr	r3, [pc, #196]	@ (800d834 <xPortStartScheduler+0x134>)
 800d770:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d772:	4b31      	ldr	r3, [pc, #196]	@ (800d838 <xPortStartScheduler+0x138>)
 800d774:	2207      	movs	r2, #7
 800d776:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d778:	e009      	b.n	800d78e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d77a:	4b2f      	ldr	r3, [pc, #188]	@ (800d838 <xPortStartScheduler+0x138>)
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	3b01      	subs	r3, #1
 800d780:	4a2d      	ldr	r2, [pc, #180]	@ (800d838 <xPortStartScheduler+0x138>)
 800d782:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d784:	78fb      	ldrb	r3, [r7, #3]
 800d786:	b2db      	uxtb	r3, r3
 800d788:	005b      	lsls	r3, r3, #1
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d78e:	78fb      	ldrb	r3, [r7, #3]
 800d790:	b2db      	uxtb	r3, r3
 800d792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d796:	2b80      	cmp	r3, #128	@ 0x80
 800d798:	d0ef      	beq.n	800d77a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d79a:	4b27      	ldr	r3, [pc, #156]	@ (800d838 <xPortStartScheduler+0x138>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f1c3 0307 	rsb	r3, r3, #7
 800d7a2:	2b04      	cmp	r3, #4
 800d7a4:	d00b      	beq.n	800d7be <xPortStartScheduler+0xbe>
	__asm volatile
 800d7a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7aa:	f383 8811 	msr	BASEPRI, r3
 800d7ae:	f3bf 8f6f 	isb	sy
 800d7b2:	f3bf 8f4f 	dsb	sy
 800d7b6:	60bb      	str	r3, [r7, #8]
}
 800d7b8:	bf00      	nop
 800d7ba:	bf00      	nop
 800d7bc:	e7fd      	b.n	800d7ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d7be:	4b1e      	ldr	r3, [pc, #120]	@ (800d838 <xPortStartScheduler+0x138>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	021b      	lsls	r3, r3, #8
 800d7c4:	4a1c      	ldr	r2, [pc, #112]	@ (800d838 <xPortStartScheduler+0x138>)
 800d7c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d7c8:	4b1b      	ldr	r3, [pc, #108]	@ (800d838 <xPortStartScheduler+0x138>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d7d0:	4a19      	ldr	r2, [pc, #100]	@ (800d838 <xPortStartScheduler+0x138>)
 800d7d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d7dc:	4b17      	ldr	r3, [pc, #92]	@ (800d83c <xPortStartScheduler+0x13c>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a16      	ldr	r2, [pc, #88]	@ (800d83c <xPortStartScheduler+0x13c>)
 800d7e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d7e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d7e8:	4b14      	ldr	r3, [pc, #80]	@ (800d83c <xPortStartScheduler+0x13c>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a13      	ldr	r2, [pc, #76]	@ (800d83c <xPortStartScheduler+0x13c>)
 800d7ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d7f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d7f4:	f000 f8da 	bl	800d9ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d7f8:	4b11      	ldr	r3, [pc, #68]	@ (800d840 <xPortStartScheduler+0x140>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d7fe:	f000 f8f9 	bl	800d9f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d802:	4b10      	ldr	r3, [pc, #64]	@ (800d844 <xPortStartScheduler+0x144>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	4a0f      	ldr	r2, [pc, #60]	@ (800d844 <xPortStartScheduler+0x144>)
 800d808:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d80c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d80e:	f7ff ff63 	bl	800d6d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d812:	f7fe ff07 	bl	800c624 <vTaskSwitchContext>
	prvTaskExitError();
 800d816:	f7ff ff1b 	bl	800d650 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3718      	adds	r7, #24
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	e000ed00 	.word	0xe000ed00
 800d828:	410fc271 	.word	0x410fc271
 800d82c:	410fc270 	.word	0x410fc270
 800d830:	e000e400 	.word	0xe000e400
 800d834:	20005c90 	.word	0x20005c90
 800d838:	20005c94 	.word	0x20005c94
 800d83c:	e000ed20 	.word	0xe000ed20
 800d840:	20000028 	.word	0x20000028
 800d844:	e000ef34 	.word	0xe000ef34

0800d848 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
	__asm volatile
 800d84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d852:	f383 8811 	msr	BASEPRI, r3
 800d856:	f3bf 8f6f 	isb	sy
 800d85a:	f3bf 8f4f 	dsb	sy
 800d85e:	607b      	str	r3, [r7, #4]
}
 800d860:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d862:	4b10      	ldr	r3, [pc, #64]	@ (800d8a4 <vPortEnterCritical+0x5c>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	3301      	adds	r3, #1
 800d868:	4a0e      	ldr	r2, [pc, #56]	@ (800d8a4 <vPortEnterCritical+0x5c>)
 800d86a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d86c:	4b0d      	ldr	r3, [pc, #52]	@ (800d8a4 <vPortEnterCritical+0x5c>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	2b01      	cmp	r3, #1
 800d872:	d110      	bne.n	800d896 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d874:	4b0c      	ldr	r3, [pc, #48]	@ (800d8a8 <vPortEnterCritical+0x60>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d00b      	beq.n	800d896 <vPortEnterCritical+0x4e>
	__asm volatile
 800d87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d882:	f383 8811 	msr	BASEPRI, r3
 800d886:	f3bf 8f6f 	isb	sy
 800d88a:	f3bf 8f4f 	dsb	sy
 800d88e:	603b      	str	r3, [r7, #0]
}
 800d890:	bf00      	nop
 800d892:	bf00      	nop
 800d894:	e7fd      	b.n	800d892 <vPortEnterCritical+0x4a>
	}
}
 800d896:	bf00      	nop
 800d898:	370c      	adds	r7, #12
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	20000028 	.word	0x20000028
 800d8a8:	e000ed04 	.word	0xe000ed04

0800d8ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d8b2:	4b12      	ldr	r3, [pc, #72]	@ (800d8fc <vPortExitCritical+0x50>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d10b      	bne.n	800d8d2 <vPortExitCritical+0x26>
	__asm volatile
 800d8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8be:	f383 8811 	msr	BASEPRI, r3
 800d8c2:	f3bf 8f6f 	isb	sy
 800d8c6:	f3bf 8f4f 	dsb	sy
 800d8ca:	607b      	str	r3, [r7, #4]
}
 800d8cc:	bf00      	nop
 800d8ce:	bf00      	nop
 800d8d0:	e7fd      	b.n	800d8ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d8d2:	4b0a      	ldr	r3, [pc, #40]	@ (800d8fc <vPortExitCritical+0x50>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	3b01      	subs	r3, #1
 800d8d8:	4a08      	ldr	r2, [pc, #32]	@ (800d8fc <vPortExitCritical+0x50>)
 800d8da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d8dc:	4b07      	ldr	r3, [pc, #28]	@ (800d8fc <vPortExitCritical+0x50>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d105      	bne.n	800d8f0 <vPortExitCritical+0x44>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	f383 8811 	msr	BASEPRI, r3
}
 800d8ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d8f0:	bf00      	nop
 800d8f2:	370c      	adds	r7, #12
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr
 800d8fc:	20000028 	.word	0x20000028

0800d900 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d900:	f3ef 8009 	mrs	r0, PSP
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	4b15      	ldr	r3, [pc, #84]	@ (800d960 <pxCurrentTCBConst>)
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	f01e 0f10 	tst.w	lr, #16
 800d910:	bf08      	it	eq
 800d912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d91a:	6010      	str	r0, [r2, #0]
 800d91c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d920:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d924:	f380 8811 	msr	BASEPRI, r0
 800d928:	f3bf 8f4f 	dsb	sy
 800d92c:	f3bf 8f6f 	isb	sy
 800d930:	f7fe fe78 	bl	800c624 <vTaskSwitchContext>
 800d934:	f04f 0000 	mov.w	r0, #0
 800d938:	f380 8811 	msr	BASEPRI, r0
 800d93c:	bc09      	pop	{r0, r3}
 800d93e:	6819      	ldr	r1, [r3, #0]
 800d940:	6808      	ldr	r0, [r1, #0]
 800d942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d946:	f01e 0f10 	tst.w	lr, #16
 800d94a:	bf08      	it	eq
 800d94c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d950:	f380 8809 	msr	PSP, r0
 800d954:	f3bf 8f6f 	isb	sy
 800d958:	4770      	bx	lr
 800d95a:	bf00      	nop
 800d95c:	f3af 8000 	nop.w

0800d960 <pxCurrentTCBConst>:
 800d960:	20005664 	.word	0x20005664
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d964:	bf00      	nop
 800d966:	bf00      	nop

0800d968 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
	__asm volatile
 800d96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d972:	f383 8811 	msr	BASEPRI, r3
 800d976:	f3bf 8f6f 	isb	sy
 800d97a:	f3bf 8f4f 	dsb	sy
 800d97e:	607b      	str	r3, [r7, #4]
}
 800d980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d982:	f7fe fd95 	bl	800c4b0 <xTaskIncrementTick>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d003      	beq.n	800d994 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d98c:	4b06      	ldr	r3, [pc, #24]	@ (800d9a8 <xPortSysTickHandler+0x40>)
 800d98e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d992:	601a      	str	r2, [r3, #0]
 800d994:	2300      	movs	r3, #0
 800d996:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	f383 8811 	msr	BASEPRI, r3
}
 800d99e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d9a0:	bf00      	nop
 800d9a2:	3708      	adds	r7, #8
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	e000ed04 	.word	0xe000ed04

0800d9ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d9b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d9e0 <vPortSetupTimerInterrupt+0x34>)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d9b6:	4b0b      	ldr	r3, [pc, #44]	@ (800d9e4 <vPortSetupTimerInterrupt+0x38>)
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d9bc:	4b0a      	ldr	r3, [pc, #40]	@ (800d9e8 <vPortSetupTimerInterrupt+0x3c>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4a0a      	ldr	r2, [pc, #40]	@ (800d9ec <vPortSetupTimerInterrupt+0x40>)
 800d9c2:	fba2 2303 	umull	r2, r3, r2, r3
 800d9c6:	099b      	lsrs	r3, r3, #6
 800d9c8:	4a09      	ldr	r2, [pc, #36]	@ (800d9f0 <vPortSetupTimerInterrupt+0x44>)
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d9ce:	4b04      	ldr	r3, [pc, #16]	@ (800d9e0 <vPortSetupTimerInterrupt+0x34>)
 800d9d0:	2207      	movs	r2, #7
 800d9d2:	601a      	str	r2, [r3, #0]
}
 800d9d4:	bf00      	nop
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop
 800d9e0:	e000e010 	.word	0xe000e010
 800d9e4:	e000e018 	.word	0xe000e018
 800d9e8:	20000008 	.word	0x20000008
 800d9ec:	10624dd3 	.word	0x10624dd3
 800d9f0:	e000e014 	.word	0xe000e014

0800d9f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d9f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800da04 <vPortEnableVFP+0x10>
 800d9f8:	6801      	ldr	r1, [r0, #0]
 800d9fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d9fe:	6001      	str	r1, [r0, #0]
 800da00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800da02:	bf00      	nop
 800da04:	e000ed88 	.word	0xe000ed88

0800da08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800da08:	b480      	push	{r7}
 800da0a:	b085      	sub	sp, #20
 800da0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800da0e:	f3ef 8305 	mrs	r3, IPSR
 800da12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2b0f      	cmp	r3, #15
 800da18:	d915      	bls.n	800da46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800da1a:	4a18      	ldr	r2, [pc, #96]	@ (800da7c <vPortValidateInterruptPriority+0x74>)
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	4413      	add	r3, r2
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800da24:	4b16      	ldr	r3, [pc, #88]	@ (800da80 <vPortValidateInterruptPriority+0x78>)
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	7afa      	ldrb	r2, [r7, #11]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d20b      	bcs.n	800da46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800da2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da32:	f383 8811 	msr	BASEPRI, r3
 800da36:	f3bf 8f6f 	isb	sy
 800da3a:	f3bf 8f4f 	dsb	sy
 800da3e:	607b      	str	r3, [r7, #4]
}
 800da40:	bf00      	nop
 800da42:	bf00      	nop
 800da44:	e7fd      	b.n	800da42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800da46:	4b0f      	ldr	r3, [pc, #60]	@ (800da84 <vPortValidateInterruptPriority+0x7c>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800da4e:	4b0e      	ldr	r3, [pc, #56]	@ (800da88 <vPortValidateInterruptPriority+0x80>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	429a      	cmp	r2, r3
 800da54:	d90b      	bls.n	800da6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800da56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da5a:	f383 8811 	msr	BASEPRI, r3
 800da5e:	f3bf 8f6f 	isb	sy
 800da62:	f3bf 8f4f 	dsb	sy
 800da66:	603b      	str	r3, [r7, #0]
}
 800da68:	bf00      	nop
 800da6a:	bf00      	nop
 800da6c:	e7fd      	b.n	800da6a <vPortValidateInterruptPriority+0x62>
	}
 800da6e:	bf00      	nop
 800da70:	3714      	adds	r7, #20
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr
 800da7a:	bf00      	nop
 800da7c:	e000e3f0 	.word	0xe000e3f0
 800da80:	20005c90 	.word	0x20005c90
 800da84:	e000ed0c 	.word	0xe000ed0c
 800da88:	20005c94 	.word	0x20005c94

0800da8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b08a      	sub	sp, #40	@ 0x28
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800da94:	2300      	movs	r3, #0
 800da96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800da98:	f7fe fc4e 	bl	800c338 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800da9c:	4b5c      	ldr	r3, [pc, #368]	@ (800dc10 <pvPortMalloc+0x184>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d101      	bne.n	800daa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800daa4:	f000 f924 	bl	800dcf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800daa8:	4b5a      	ldr	r3, [pc, #360]	@ (800dc14 <pvPortMalloc+0x188>)
 800daaa:	681a      	ldr	r2, [r3, #0]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	4013      	ands	r3, r2
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	f040 8095 	bne.w	800dbe0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d01e      	beq.n	800dafa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800dabc:	2208      	movs	r2, #8
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	4413      	add	r3, r2
 800dac2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f003 0307 	and.w	r3, r3, #7
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d015      	beq.n	800dafa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f023 0307 	bic.w	r3, r3, #7
 800dad4:	3308      	adds	r3, #8
 800dad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f003 0307 	and.w	r3, r3, #7
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d00b      	beq.n	800dafa <pvPortMalloc+0x6e>
	__asm volatile
 800dae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dae6:	f383 8811 	msr	BASEPRI, r3
 800daea:	f3bf 8f6f 	isb	sy
 800daee:	f3bf 8f4f 	dsb	sy
 800daf2:	617b      	str	r3, [r7, #20]
}
 800daf4:	bf00      	nop
 800daf6:	bf00      	nop
 800daf8:	e7fd      	b.n	800daf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d06f      	beq.n	800dbe0 <pvPortMalloc+0x154>
 800db00:	4b45      	ldr	r3, [pc, #276]	@ (800dc18 <pvPortMalloc+0x18c>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	687a      	ldr	r2, [r7, #4]
 800db06:	429a      	cmp	r2, r3
 800db08:	d86a      	bhi.n	800dbe0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800db0a:	4b44      	ldr	r3, [pc, #272]	@ (800dc1c <pvPortMalloc+0x190>)
 800db0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800db0e:	4b43      	ldr	r3, [pc, #268]	@ (800dc1c <pvPortMalloc+0x190>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db14:	e004      	b.n	800db20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800db16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800db1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800db20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	429a      	cmp	r2, r3
 800db28:	d903      	bls.n	800db32 <pvPortMalloc+0xa6>
 800db2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d1f1      	bne.n	800db16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800db32:	4b37      	ldr	r3, [pc, #220]	@ (800dc10 <pvPortMalloc+0x184>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db38:	429a      	cmp	r2, r3
 800db3a:	d051      	beq.n	800dbe0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800db3c:	6a3b      	ldr	r3, [r7, #32]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	2208      	movs	r2, #8
 800db42:	4413      	add	r3, r2
 800db44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800db46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	6a3b      	ldr	r3, [r7, #32]
 800db4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800db4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db50:	685a      	ldr	r2, [r3, #4]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	1ad2      	subs	r2, r2, r3
 800db56:	2308      	movs	r3, #8
 800db58:	005b      	lsls	r3, r3, #1
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d920      	bls.n	800dba0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800db5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	4413      	add	r3, r2
 800db64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	f003 0307 	and.w	r3, r3, #7
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d00b      	beq.n	800db88 <pvPortMalloc+0xfc>
	__asm volatile
 800db70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db74:	f383 8811 	msr	BASEPRI, r3
 800db78:	f3bf 8f6f 	isb	sy
 800db7c:	f3bf 8f4f 	dsb	sy
 800db80:	613b      	str	r3, [r7, #16]
}
 800db82:	bf00      	nop
 800db84:	bf00      	nop
 800db86:	e7fd      	b.n	800db84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800db88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db8a:	685a      	ldr	r2, [r3, #4]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	1ad2      	subs	r2, r2, r3
 800db90:	69bb      	ldr	r3, [r7, #24]
 800db92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800db94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800db9a:	69b8      	ldr	r0, [r7, #24]
 800db9c:	f000 f90a 	bl	800ddb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dba0:	4b1d      	ldr	r3, [pc, #116]	@ (800dc18 <pvPortMalloc+0x18c>)
 800dba2:	681a      	ldr	r2, [r3, #0]
 800dba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	1ad3      	subs	r3, r2, r3
 800dbaa:	4a1b      	ldr	r2, [pc, #108]	@ (800dc18 <pvPortMalloc+0x18c>)
 800dbac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dbae:	4b1a      	ldr	r3, [pc, #104]	@ (800dc18 <pvPortMalloc+0x18c>)
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	4b1b      	ldr	r3, [pc, #108]	@ (800dc20 <pvPortMalloc+0x194>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d203      	bcs.n	800dbc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dbba:	4b17      	ldr	r3, [pc, #92]	@ (800dc18 <pvPortMalloc+0x18c>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a18      	ldr	r2, [pc, #96]	@ (800dc20 <pvPortMalloc+0x194>)
 800dbc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dbc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbc4:	685a      	ldr	r2, [r3, #4]
 800dbc6:	4b13      	ldr	r3, [pc, #76]	@ (800dc14 <pvPortMalloc+0x188>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	431a      	orrs	r2, r3
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dbd6:	4b13      	ldr	r3, [pc, #76]	@ (800dc24 <pvPortMalloc+0x198>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	4a11      	ldr	r2, [pc, #68]	@ (800dc24 <pvPortMalloc+0x198>)
 800dbde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dbe0:	f7fe fbb8 	bl	800c354 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	f003 0307 	and.w	r3, r3, #7
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00b      	beq.n	800dc06 <pvPortMalloc+0x17a>
	__asm volatile
 800dbee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf2:	f383 8811 	msr	BASEPRI, r3
 800dbf6:	f3bf 8f6f 	isb	sy
 800dbfa:	f3bf 8f4f 	dsb	sy
 800dbfe:	60fb      	str	r3, [r7, #12]
}
 800dc00:	bf00      	nop
 800dc02:	bf00      	nop
 800dc04:	e7fd      	b.n	800dc02 <pvPortMalloc+0x176>
	return pvReturn;
 800dc06:	69fb      	ldr	r3, [r7, #28]
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3728      	adds	r7, #40	@ 0x28
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	20009ca0 	.word	0x20009ca0
 800dc14:	20009cb4 	.word	0x20009cb4
 800dc18:	20009ca4 	.word	0x20009ca4
 800dc1c:	20009c98 	.word	0x20009c98
 800dc20:	20009ca8 	.word	0x20009ca8
 800dc24:	20009cac 	.word	0x20009cac

0800dc28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b086      	sub	sp, #24
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d04f      	beq.n	800dcda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dc3a:	2308      	movs	r3, #8
 800dc3c:	425b      	negs	r3, r3
 800dc3e:	697a      	ldr	r2, [r7, #20]
 800dc40:	4413      	add	r3, r2
 800dc42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	685a      	ldr	r2, [r3, #4]
 800dc4c:	4b25      	ldr	r3, [pc, #148]	@ (800dce4 <vPortFree+0xbc>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4013      	ands	r3, r2
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d10b      	bne.n	800dc6e <vPortFree+0x46>
	__asm volatile
 800dc56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc5a:	f383 8811 	msr	BASEPRI, r3
 800dc5e:	f3bf 8f6f 	isb	sy
 800dc62:	f3bf 8f4f 	dsb	sy
 800dc66:	60fb      	str	r3, [r7, #12]
}
 800dc68:	bf00      	nop
 800dc6a:	bf00      	nop
 800dc6c:	e7fd      	b.n	800dc6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d00b      	beq.n	800dc8e <vPortFree+0x66>
	__asm volatile
 800dc76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc7a:	f383 8811 	msr	BASEPRI, r3
 800dc7e:	f3bf 8f6f 	isb	sy
 800dc82:	f3bf 8f4f 	dsb	sy
 800dc86:	60bb      	str	r3, [r7, #8]
}
 800dc88:	bf00      	nop
 800dc8a:	bf00      	nop
 800dc8c:	e7fd      	b.n	800dc8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	685a      	ldr	r2, [r3, #4]
 800dc92:	4b14      	ldr	r3, [pc, #80]	@ (800dce4 <vPortFree+0xbc>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	4013      	ands	r3, r2
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d01e      	beq.n	800dcda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d11a      	bne.n	800dcda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	685a      	ldr	r2, [r3, #4]
 800dca8:	4b0e      	ldr	r3, [pc, #56]	@ (800dce4 <vPortFree+0xbc>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	43db      	mvns	r3, r3
 800dcae:	401a      	ands	r2, r3
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dcb4:	f7fe fb40 	bl	800c338 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	685a      	ldr	r2, [r3, #4]
 800dcbc:	4b0a      	ldr	r3, [pc, #40]	@ (800dce8 <vPortFree+0xc0>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	4a09      	ldr	r2, [pc, #36]	@ (800dce8 <vPortFree+0xc0>)
 800dcc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dcc6:	6938      	ldr	r0, [r7, #16]
 800dcc8:	f000 f874 	bl	800ddb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dccc:	4b07      	ldr	r3, [pc, #28]	@ (800dcec <vPortFree+0xc4>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	4a06      	ldr	r2, [pc, #24]	@ (800dcec <vPortFree+0xc4>)
 800dcd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dcd6:	f7fe fb3d 	bl	800c354 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dcda:	bf00      	nop
 800dcdc:	3718      	adds	r7, #24
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	20009cb4 	.word	0x20009cb4
 800dce8:	20009ca4 	.word	0x20009ca4
 800dcec:	20009cb0 	.word	0x20009cb0

0800dcf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b085      	sub	sp, #20
 800dcf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dcf6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800dcfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dcfc:	4b27      	ldr	r3, [pc, #156]	@ (800dd9c <prvHeapInit+0xac>)
 800dcfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f003 0307 	and.w	r3, r3, #7
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d00c      	beq.n	800dd24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	3307      	adds	r3, #7
 800dd0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f023 0307 	bic.w	r3, r3, #7
 800dd16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dd18:	68ba      	ldr	r2, [r7, #8]
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	1ad3      	subs	r3, r2, r3
 800dd1e:	4a1f      	ldr	r2, [pc, #124]	@ (800dd9c <prvHeapInit+0xac>)
 800dd20:	4413      	add	r3, r2
 800dd22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dd28:	4a1d      	ldr	r2, [pc, #116]	@ (800dda0 <prvHeapInit+0xb0>)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dd2e:	4b1c      	ldr	r3, [pc, #112]	@ (800dda0 <prvHeapInit+0xb0>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	68ba      	ldr	r2, [r7, #8]
 800dd38:	4413      	add	r3, r2
 800dd3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dd3c:	2208      	movs	r2, #8
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	1a9b      	subs	r3, r3, r2
 800dd42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f023 0307 	bic.w	r3, r3, #7
 800dd4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	4a15      	ldr	r2, [pc, #84]	@ (800dda4 <prvHeapInit+0xb4>)
 800dd50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dd52:	4b14      	ldr	r3, [pc, #80]	@ (800dda4 <prvHeapInit+0xb4>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	2200      	movs	r2, #0
 800dd58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dd5a:	4b12      	ldr	r3, [pc, #72]	@ (800dda4 <prvHeapInit+0xb4>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	68fa      	ldr	r2, [r7, #12]
 800dd6a:	1ad2      	subs	r2, r2, r3
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dd70:	4b0c      	ldr	r3, [pc, #48]	@ (800dda4 <prvHeapInit+0xb4>)
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	4a0a      	ldr	r2, [pc, #40]	@ (800dda8 <prvHeapInit+0xb8>)
 800dd7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	685b      	ldr	r3, [r3, #4]
 800dd84:	4a09      	ldr	r2, [pc, #36]	@ (800ddac <prvHeapInit+0xbc>)
 800dd86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dd88:	4b09      	ldr	r3, [pc, #36]	@ (800ddb0 <prvHeapInit+0xc0>)
 800dd8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800dd8e:	601a      	str	r2, [r3, #0]
}
 800dd90:	bf00      	nop
 800dd92:	3714      	adds	r7, #20
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr
 800dd9c:	20005c98 	.word	0x20005c98
 800dda0:	20009c98 	.word	0x20009c98
 800dda4:	20009ca0 	.word	0x20009ca0
 800dda8:	20009ca8 	.word	0x20009ca8
 800ddac:	20009ca4 	.word	0x20009ca4
 800ddb0:	20009cb4 	.word	0x20009cb4

0800ddb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b085      	sub	sp, #20
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ddbc:	4b28      	ldr	r3, [pc, #160]	@ (800de60 <prvInsertBlockIntoFreeList+0xac>)
 800ddbe:	60fb      	str	r3, [r7, #12]
 800ddc0:	e002      	b.n	800ddc8 <prvInsertBlockIntoFreeList+0x14>
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	60fb      	str	r3, [r7, #12]
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d8f7      	bhi.n	800ddc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	685b      	ldr	r3, [r3, #4]
 800ddda:	68ba      	ldr	r2, [r7, #8]
 800dddc:	4413      	add	r3, r2
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	429a      	cmp	r2, r3
 800dde2:	d108      	bne.n	800ddf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	685a      	ldr	r2, [r3, #4]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	441a      	add	r2, r3
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	68ba      	ldr	r2, [r7, #8]
 800de00:	441a      	add	r2, r3
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	429a      	cmp	r2, r3
 800de08:	d118      	bne.n	800de3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	4b15      	ldr	r3, [pc, #84]	@ (800de64 <prvInsertBlockIntoFreeList+0xb0>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	429a      	cmp	r2, r3
 800de14:	d00d      	beq.n	800de32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	685a      	ldr	r2, [r3, #4]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	441a      	add	r2, r3
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	681a      	ldr	r2, [r3, #0]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	601a      	str	r2, [r3, #0]
 800de30:	e008      	b.n	800de44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800de32:	4b0c      	ldr	r3, [pc, #48]	@ (800de64 <prvInsertBlockIntoFreeList+0xb0>)
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	601a      	str	r2, [r3, #0]
 800de3a:	e003      	b.n	800de44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681a      	ldr	r2, [r3, #0]
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800de44:	68fa      	ldr	r2, [r7, #12]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	429a      	cmp	r2, r3
 800de4a:	d002      	beq.n	800de52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	687a      	ldr	r2, [r7, #4]
 800de50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de52:	bf00      	nop
 800de54:	3714      	adds	r7, #20
 800de56:	46bd      	mov	sp, r7
 800de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5c:	4770      	bx	lr
 800de5e:	bf00      	nop
 800de60:	20009c98 	.word	0x20009c98
 800de64:	20009ca0 	.word	0x20009ca0

0800de68 <rcl_get_zero_initialized_init_options>:
 800de68:	2000      	movs	r0, #0
 800de6a:	4770      	bx	lr

0800de6c <rcl_init_options_init>:
 800de6c:	b084      	sub	sp, #16
 800de6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de70:	b091      	sub	sp, #68	@ 0x44
 800de72:	af17      	add	r7, sp, #92	@ 0x5c
 800de74:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 800de78:	2800      	cmp	r0, #0
 800de7a:	d044      	beq.n	800df06 <rcl_init_options_init+0x9a>
 800de7c:	6803      	ldr	r3, [r0, #0]
 800de7e:	4606      	mov	r6, r0
 800de80:	b133      	cbz	r3, 800de90 <rcl_init_options_init+0x24>
 800de82:	2464      	movs	r4, #100	@ 0x64
 800de84:	4620      	mov	r0, r4
 800de86:	b011      	add	sp, #68	@ 0x44
 800de88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800de8c:	b004      	add	sp, #16
 800de8e:	4770      	bx	lr
 800de90:	4638      	mov	r0, r7
 800de92:	f000 ff03 	bl	800ec9c <rcutils_allocator_is_valid>
 800de96:	2800      	cmp	r0, #0
 800de98:	d035      	beq.n	800df06 <rcl_init_options_init+0x9a>
 800de9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800de9c:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800de9e:	2050      	movs	r0, #80	@ 0x50
 800dea0:	4798      	blx	r3
 800dea2:	4604      	mov	r4, r0
 800dea4:	6030      	str	r0, [r6, #0]
 800dea6:	2800      	cmp	r0, #0
 800dea8:	d02f      	beq.n	800df0a <rcl_init_options_init+0x9e>
 800deaa:	46bc      	mov	ip, r7
 800deac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800deb0:	4625      	mov	r5, r4
 800deb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800deb4:	f8dc 3000 	ldr.w	r3, [ip]
 800deb8:	602b      	str	r3, [r5, #0]
 800deba:	a802      	add	r0, sp, #8
 800debc:	ad02      	add	r5, sp, #8
 800debe:	f001 f8a9 	bl	800f014 <rmw_get_zero_initialized_init_options>
 800dec2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dec4:	3418      	adds	r4, #24
 800dec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800deca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800decc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ded0:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ded4:	6833      	ldr	r3, [r6, #0]
 800ded6:	e884 0003 	stmia.w	r4, {r0, r1}
 800deda:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 800dede:	e88d 0003 	stmia.w	sp, {r0, r1}
 800dee2:	f103 0018 	add.w	r0, r3, #24
 800dee6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800deea:	f001 f945 	bl	800f178 <rmw_init_options_init>
 800deee:	4604      	mov	r4, r0
 800def0:	2800      	cmp	r0, #0
 800def2:	d0c7      	beq.n	800de84 <rcl_init_options_init+0x18>
 800def4:	6830      	ldr	r0, [r6, #0]
 800def6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800def8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800defa:	4798      	blx	r3
 800defc:	4620      	mov	r0, r4
 800defe:	f006 f99d 	bl	801423c <rcl_convert_rmw_ret_to_rcl_ret>
 800df02:	4604      	mov	r4, r0
 800df04:	e7be      	b.n	800de84 <rcl_init_options_init+0x18>
 800df06:	240b      	movs	r4, #11
 800df08:	e7bc      	b.n	800de84 <rcl_init_options_init+0x18>
 800df0a:	240a      	movs	r4, #10
 800df0c:	e7ba      	b.n	800de84 <rcl_init_options_init+0x18>
 800df0e:	bf00      	nop

0800df10 <rcl_init_options_fini>:
 800df10:	b570      	push	{r4, r5, r6, lr}
 800df12:	b086      	sub	sp, #24
 800df14:	b1c0      	cbz	r0, 800df48 <rcl_init_options_fini+0x38>
 800df16:	6804      	ldr	r4, [r0, #0]
 800df18:	4606      	mov	r6, r0
 800df1a:	b1ac      	cbz	r4, 800df48 <rcl_init_options_fini+0x38>
 800df1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800df1e:	ad01      	add	r5, sp, #4
 800df20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800df22:	6823      	ldr	r3, [r4, #0]
 800df24:	602b      	str	r3, [r5, #0]
 800df26:	a801      	add	r0, sp, #4
 800df28:	f000 feb8 	bl	800ec9c <rcutils_allocator_is_valid>
 800df2c:	b160      	cbz	r0, 800df48 <rcl_init_options_fini+0x38>
 800df2e:	6830      	ldr	r0, [r6, #0]
 800df30:	3018      	adds	r0, #24
 800df32:	f001 f9bb 	bl	800f2ac <rmw_init_options_fini>
 800df36:	4604      	mov	r4, r0
 800df38:	b950      	cbnz	r0, 800df50 <rcl_init_options_fini+0x40>
 800df3a:	6830      	ldr	r0, [r6, #0]
 800df3c:	9b02      	ldr	r3, [sp, #8]
 800df3e:	9905      	ldr	r1, [sp, #20]
 800df40:	4798      	blx	r3
 800df42:	4620      	mov	r0, r4
 800df44:	b006      	add	sp, #24
 800df46:	bd70      	pop	{r4, r5, r6, pc}
 800df48:	240b      	movs	r4, #11
 800df4a:	4620      	mov	r0, r4
 800df4c:	b006      	add	sp, #24
 800df4e:	bd70      	pop	{r4, r5, r6, pc}
 800df50:	f006 f974 	bl	801423c <rcl_convert_rmw_ret_to_rcl_ret>
 800df54:	4604      	mov	r4, r0
 800df56:	e7f8      	b.n	800df4a <rcl_init_options_fini+0x3a>

0800df58 <rcl_init_options_copy>:
 800df58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df5c:	b096      	sub	sp, #88	@ 0x58
 800df5e:	2800      	cmp	r0, #0
 800df60:	d063      	beq.n	800e02a <rcl_init_options_copy+0xd2>
 800df62:	6806      	ldr	r6, [r0, #0]
 800df64:	4605      	mov	r5, r0
 800df66:	2e00      	cmp	r6, #0
 800df68:	d05f      	beq.n	800e02a <rcl_init_options_copy+0xd2>
 800df6a:	460c      	mov	r4, r1
 800df6c:	2900      	cmp	r1, #0
 800df6e:	d05c      	beq.n	800e02a <rcl_init_options_copy+0xd2>
 800df70:	680b      	ldr	r3, [r1, #0]
 800df72:	b123      	cbz	r3, 800df7e <rcl_init_options_copy+0x26>
 800df74:	2664      	movs	r6, #100	@ 0x64
 800df76:	4630      	mov	r0, r6
 800df78:	b016      	add	sp, #88	@ 0x58
 800df7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df7e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800df80:	af11      	add	r7, sp, #68	@ 0x44
 800df82:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800df84:	f10d 0844 	add.w	r8, sp, #68	@ 0x44
 800df88:	6833      	ldr	r3, [r6, #0]
 800df8a:	603b      	str	r3, [r7, #0]
 800df8c:	4640      	mov	r0, r8
 800df8e:	f000 fe85 	bl	800ec9c <rcutils_allocator_is_valid>
 800df92:	2800      	cmp	r0, #0
 800df94:	d049      	beq.n	800e02a <rcl_init_options_copy+0xd2>
 800df96:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df98:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800df9a:	2050      	movs	r0, #80	@ 0x50
 800df9c:	4798      	blx	r3
 800df9e:	4606      	mov	r6, r0
 800dfa0:	6020      	str	r0, [r4, #0]
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	d077      	beq.n	800e096 <rcl_init_options_copy+0x13e>
 800dfa6:	46c4      	mov	ip, r8
 800dfa8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800dfac:	4637      	mov	r7, r6
 800dfae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800dfb0:	f8dc 3000 	ldr.w	r3, [ip]
 800dfb4:	603b      	str	r3, [r7, #0]
 800dfb6:	a802      	add	r0, sp, #8
 800dfb8:	af02      	add	r7, sp, #8
 800dfba:	f001 f82b 	bl	800f014 <rmw_get_zero_initialized_init_options>
 800dfbe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dfc0:	3618      	adds	r6, #24
 800dfc2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dfc4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dfc6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dfc8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dfca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dfcc:	e897 0003 	ldmia.w	r7, {r0, r1}
 800dfd0:	ab16      	add	r3, sp, #88	@ 0x58
 800dfd2:	e886 0003 	stmia.w	r6, {r0, r1}
 800dfd6:	e913 0003 	ldmdb	r3, {r0, r1}
 800dfda:	6823      	ldr	r3, [r4, #0]
 800dfdc:	e88d 0003 	stmia.w	sp, {r0, r1}
 800dfe0:	f103 0018 	add.w	r0, r3, #24
 800dfe4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800dfe8:	f001 f8c6 	bl	800f178 <rmw_init_options_init>
 800dfec:	4606      	mov	r6, r0
 800dfee:	bb08      	cbnz	r0, 800e034 <rcl_init_options_copy+0xdc>
 800dff0:	682f      	ldr	r7, [r5, #0]
 800dff2:	f8d4 c000 	ldr.w	ip, [r4]
 800dff6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dff8:	4666      	mov	r6, ip
 800dffa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	6033      	str	r3, [r6, #0]
 800e000:	f10c 0018 	add.w	r0, ip, #24
 800e004:	f001 f952 	bl	800f2ac <rmw_init_options_fini>
 800e008:	4607      	mov	r7, r0
 800e00a:	b1f0      	cbz	r0, 800e04a <rcl_init_options_copy+0xf2>
 800e00c:	f000 fe54 	bl	800ecb8 <rcutils_get_error_string>
 800e010:	f000 fe68 	bl	800ece4 <rcutils_reset_error>
 800e014:	4620      	mov	r0, r4
 800e016:	f7ff ff7b 	bl	800df10 <rcl_init_options_fini>
 800e01a:	4606      	mov	r6, r0
 800e01c:	2800      	cmp	r0, #0
 800e01e:	d1aa      	bne.n	800df76 <rcl_init_options_copy+0x1e>
 800e020:	4638      	mov	r0, r7
 800e022:	f006 f90b 	bl	801423c <rcl_convert_rmw_ret_to_rcl_ret>
 800e026:	4606      	mov	r6, r0
 800e028:	e7a5      	b.n	800df76 <rcl_init_options_copy+0x1e>
 800e02a:	260b      	movs	r6, #11
 800e02c:	4630      	mov	r0, r6
 800e02e:	b016      	add	sp, #88	@ 0x58
 800e030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e034:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e036:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800e038:	6820      	ldr	r0, [r4, #0]
 800e03a:	4798      	blx	r3
 800e03c:	4630      	mov	r0, r6
 800e03e:	f006 f8fd 	bl	801423c <rcl_convert_rmw_ret_to_rcl_ret>
 800e042:	4606      	mov	r6, r0
 800e044:	2800      	cmp	r0, #0
 800e046:	d0d3      	beq.n	800dff0 <rcl_init_options_copy+0x98>
 800e048:	e795      	b.n	800df76 <rcl_init_options_copy+0x1e>
 800e04a:	a802      	add	r0, sp, #8
 800e04c:	ae02      	add	r6, sp, #8
 800e04e:	6827      	ldr	r7, [r4, #0]
 800e050:	f000 ffe0 	bl	800f014 <rmw_get_zero_initialized_init_options>
 800e054:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e056:	3718      	adds	r7, #24
 800e058:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e05a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e05c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e05e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e060:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e062:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e066:	682a      	ldr	r2, [r5, #0]
 800e068:	6823      	ldr	r3, [r4, #0]
 800e06a:	e887 0003 	stmia.w	r7, {r0, r1}
 800e06e:	f102 0018 	add.w	r0, r2, #24
 800e072:	f103 0118 	add.w	r1, r3, #24
 800e076:	f001 f8d7 	bl	800f228 <rmw_init_options_copy>
 800e07a:	4606      	mov	r6, r0
 800e07c:	2800      	cmp	r0, #0
 800e07e:	f43f af7a 	beq.w	800df76 <rcl_init_options_copy+0x1e>
 800e082:	f000 fe19 	bl	800ecb8 <rcutils_get_error_string>
 800e086:	f000 fe2d 	bl	800ece4 <rcutils_reset_error>
 800e08a:	4620      	mov	r0, r4
 800e08c:	f7ff ff40 	bl	800df10 <rcl_init_options_fini>
 800e090:	b118      	cbz	r0, 800e09a <rcl_init_options_copy+0x142>
 800e092:	4606      	mov	r6, r0
 800e094:	e76f      	b.n	800df76 <rcl_init_options_copy+0x1e>
 800e096:	260a      	movs	r6, #10
 800e098:	e76d      	b.n	800df76 <rcl_init_options_copy+0x1e>
 800e09a:	4630      	mov	r0, r6
 800e09c:	f006 f8ce 	bl	801423c <rcl_convert_rmw_ret_to_rcl_ret>
 800e0a0:	4606      	mov	r6, r0
 800e0a2:	e768      	b.n	800df76 <rcl_init_options_copy+0x1e>

0800e0a4 <rcl_init_options_set_domain_id>:
 800e0a4:	b120      	cbz	r0, 800e0b0 <rcl_init_options_set_domain_id+0xc>
 800e0a6:	6803      	ldr	r3, [r0, #0]
 800e0a8:	b113      	cbz	r3, 800e0b0 <rcl_init_options_set_domain_id+0xc>
 800e0aa:	6259      	str	r1, [r3, #36]	@ 0x24
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	4770      	bx	lr
 800e0b0:	200b      	movs	r0, #11
 800e0b2:	4770      	bx	lr

0800e0b4 <rcl_node_get_default_options>:
 800e0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0b6:	b087      	sub	sp, #28
 800e0b8:	4607      	mov	r7, r0
 800e0ba:	466d      	mov	r5, sp
 800e0bc:	4668      	mov	r0, sp
 800e0be:	f000 fddf 	bl	800ec80 <rcutils_get_default_allocator>
 800e0c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e0c4:	4c08      	ldr	r4, [pc, #32]	@ (800e0e8 <rcl_node_get_default_options+0x34>)
 800e0c6:	f8d5 c000 	ldr.w	ip, [r5]
 800e0ca:	1d26      	adds	r6, r4, #4
 800e0cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e0ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e0d0:	463d      	mov	r5, r7
 800e0d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e0d4:	f8c6 c000 	str.w	ip, [r6]
 800e0d8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e0dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e0e0:	4638      	mov	r0, r7
 800e0e2:	b007      	add	sp, #28
 800e0e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	2000002c 	.word	0x2000002c

0800e0ec <rcl_node_options_copy>:
 800e0ec:	b1c8      	cbz	r0, 800e122 <rcl_node_options_copy+0x36>
 800e0ee:	b4f0      	push	{r4, r5, r6, r7}
 800e0f0:	460f      	mov	r7, r1
 800e0f2:	b199      	cbz	r1, 800e11c <rcl_node_options_copy+0x30>
 800e0f4:	4288      	cmp	r0, r1
 800e0f6:	4606      	mov	r6, r0
 800e0f8:	d010      	beq.n	800e11c <rcl_node_options_copy+0x30>
 800e0fa:	4605      	mov	r5, r0
 800e0fc:	460c      	mov	r4, r1
 800e0fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800e102:	f844 3b04 	str.w	r3, [r4], #4
 800e106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e10a:	7e32      	ldrb	r2, [r6, #24]
 800e10c:	6829      	ldr	r1, [r5, #0]
 800e10e:	7e73      	ldrb	r3, [r6, #25]
 800e110:	6021      	str	r1, [r4, #0]
 800e112:	2000      	movs	r0, #0
 800e114:	763a      	strb	r2, [r7, #24]
 800e116:	767b      	strb	r3, [r7, #25]
 800e118:	bcf0      	pop	{r4, r5, r6, r7}
 800e11a:	4770      	bx	lr
 800e11c:	200b      	movs	r0, #11
 800e11e:	bcf0      	pop	{r4, r5, r6, r7}
 800e120:	4770      	bx	lr
 800e122:	200b      	movs	r0, #11
 800e124:	4770      	bx	lr
 800e126:	bf00      	nop

0800e128 <rcl_get_zero_initialized_publisher>:
 800e128:	4b01      	ldr	r3, [pc, #4]	@ (800e130 <rcl_get_zero_initialized_publisher+0x8>)
 800e12a:	6818      	ldr	r0, [r3, #0]
 800e12c:	4770      	bx	lr
 800e12e:	bf00      	nop
 800e130:	0801df00 	.word	0x0801df00

0800e134 <rcl_publisher_init>:
 800e134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e138:	b091      	sub	sp, #68	@ 0x44
 800e13a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 800e13c:	b3d7      	cbz	r7, 800e1b4 <rcl_publisher_init+0x80>
 800e13e:	f107 0950 	add.w	r9, r7, #80	@ 0x50
 800e142:	4604      	mov	r4, r0
 800e144:	4648      	mov	r0, r9
 800e146:	4688      	mov	r8, r1
 800e148:	4616      	mov	r6, r2
 800e14a:	461d      	mov	r5, r3
 800e14c:	f000 fda6 	bl	800ec9c <rcutils_allocator_is_valid>
 800e150:	b380      	cbz	r0, 800e1b4 <rcl_publisher_init+0x80>
 800e152:	b37c      	cbz	r4, 800e1b4 <rcl_publisher_init+0x80>
 800e154:	f8d4 a000 	ldr.w	sl, [r4]
 800e158:	f1ba 0f00 	cmp.w	sl, #0
 800e15c:	d004      	beq.n	800e168 <rcl_publisher_init+0x34>
 800e15e:	2564      	movs	r5, #100	@ 0x64
 800e160:	4628      	mov	r0, r5
 800e162:	b011      	add	sp, #68	@ 0x44
 800e164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e168:	4640      	mov	r0, r8
 800e16a:	f006 fd01 	bl	8014b70 <rcl_node_is_valid>
 800e16e:	b330      	cbz	r0, 800e1be <rcl_publisher_init+0x8a>
 800e170:	b306      	cbz	r6, 800e1b4 <rcl_publisher_init+0x80>
 800e172:	b1fd      	cbz	r5, 800e1b4 <rcl_publisher_init+0x80>
 800e174:	46ce      	mov	lr, r9
 800e176:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e17a:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 800e17e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e182:	f8de 3000 	ldr.w	r3, [lr]
 800e186:	f8cc 3000 	str.w	r3, [ip]
 800e18a:	f000 fdc3 	bl	800ed14 <rcutils_get_zero_initialized_string_map>
 800e18e:	ab10      	add	r3, sp, #64	@ 0x40
 800e190:	4684      	mov	ip, r0
 800e192:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800e196:	f8cd c020 	str.w	ip, [sp, #32]
 800e19a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e19e:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 800e1a2:	4651      	mov	r1, sl
 800e1a4:	a808      	add	r0, sp, #32
 800e1a6:	f000 fe2f 	bl	800ee08 <rcutils_string_map_init>
 800e1aa:	b150      	cbz	r0, 800e1c2 <rcl_publisher_init+0x8e>
 800e1ac:	280a      	cmp	r0, #10
 800e1ae:	d013      	beq.n	800e1d8 <rcl_publisher_init+0xa4>
 800e1b0:	2501      	movs	r5, #1
 800e1b2:	e7d5      	b.n	800e160 <rcl_publisher_init+0x2c>
 800e1b4:	250b      	movs	r5, #11
 800e1b6:	4628      	mov	r0, r5
 800e1b8:	b011      	add	sp, #68	@ 0x44
 800e1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1be:	25c8      	movs	r5, #200	@ 0xc8
 800e1c0:	e7ce      	b.n	800e160 <rcl_publisher_init+0x2c>
 800e1c2:	a808      	add	r0, sp, #32
 800e1c4:	f006 fa28 	bl	8014618 <rcl_get_default_topic_name_substitutions>
 800e1c8:	4682      	mov	sl, r0
 800e1ca:	b138      	cbz	r0, 800e1dc <rcl_publisher_init+0xa8>
 800e1cc:	a808      	add	r0, sp, #32
 800e1ce:	f000 fe5b 	bl	800ee88 <rcutils_string_map_fini>
 800e1d2:	f1ba 0f0a 	cmp.w	sl, #10
 800e1d6:	d1eb      	bne.n	800e1b0 <rcl_publisher_init+0x7c>
 800e1d8:	250a      	movs	r5, #10
 800e1da:	e7c1      	b.n	800e160 <rcl_publisher_init+0x2c>
 800e1dc:	4640      	mov	r0, r8
 800e1de:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800e1e2:	f006 fccf 	bl	8014b84 <rcl_node_get_name>
 800e1e6:	4682      	mov	sl, r0
 800e1e8:	4640      	mov	r0, r8
 800e1ea:	f006 fcd3 	bl	8014b94 <rcl_node_get_namespace>
 800e1ee:	4686      	mov	lr, r0
 800e1f0:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 800e1f4:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 800e1f8:	46ec      	mov	ip, sp
 800e1fa:	f8cd b014 	str.w	fp, [sp, #20]
 800e1fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e202:	f8d9 3000 	ldr.w	r3, [r9]
 800e206:	f8cc 3000 	str.w	r3, [ip]
 800e20a:	4628      	mov	r0, r5
 800e20c:	4651      	mov	r1, sl
 800e20e:	4672      	mov	r2, lr
 800e210:	ab08      	add	r3, sp, #32
 800e212:	f006 f89b 	bl	801434c <rcl_expand_topic_name>
 800e216:	4605      	mov	r5, r0
 800e218:	a808      	add	r0, sp, #32
 800e21a:	f000 fe35 	bl	800ee88 <rcutils_string_map_fini>
 800e21e:	b920      	cbnz	r0, 800e22a <rcl_publisher_init+0xf6>
 800e220:	b15d      	cbz	r5, 800e23a <rcl_publisher_init+0x106>
 800e222:	2d67      	cmp	r5, #103	@ 0x67
 800e224:	d002      	beq.n	800e22c <rcl_publisher_init+0xf8>
 800e226:	2d69      	cmp	r5, #105	@ 0x69
 800e228:	d05f      	beq.n	800e2ea <rcl_publisher_init+0x1b6>
 800e22a:	2501      	movs	r5, #1
 800e22c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e22e:	2800      	cmp	r0, #0
 800e230:	d096      	beq.n	800e160 <rcl_publisher_init+0x2c>
 800e232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e234:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e236:	4798      	blx	r3
 800e238:	e792      	b.n	800e160 <rcl_publisher_init+0x2c>
 800e23a:	4640      	mov	r0, r8
 800e23c:	f006 fcb2 	bl	8014ba4 <rcl_node_get_options>
 800e240:	2800      	cmp	r0, #0
 800e242:	d0f2      	beq.n	800e22a <rcl_publisher_init+0xf6>
 800e244:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e246:	f7f2 f82b 	bl	80002a0 <strlen>
 800e24a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e24c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e24e:	3001      	adds	r0, #1
 800e250:	4798      	blx	r3
 800e252:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e254:	9107      	str	r1, [sp, #28]
 800e256:	4681      	mov	r9, r0
 800e258:	4608      	mov	r0, r1
 800e25a:	f7f2 f821 	bl	80002a0 <strlen>
 800e25e:	9907      	ldr	r1, [sp, #28]
 800e260:	1c42      	adds	r2, r0, #1
 800e262:	4648      	mov	r0, r9
 800e264:	f00c fbd1 	bl	801aa0a <memcpy>
 800e268:	462a      	mov	r2, r5
 800e26a:	4648      	mov	r0, r9
 800e26c:	a90a      	add	r1, sp, #40	@ 0x28
 800e26e:	f000 fee7 	bl	800f040 <rmw_validate_full_topic_name>
 800e272:	2800      	cmp	r0, #0
 800e274:	d137      	bne.n	800e2e6 <rcl_publisher_init+0x1b2>
 800e276:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d138      	bne.n	800e2ee <rcl_publisher_init+0x1ba>
 800e27c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e27e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e280:	20c0      	movs	r0, #192	@ 0xc0
 800e282:	4798      	blx	r3
 800e284:	6020      	str	r0, [r4, #0]
 800e286:	b3a0      	cbz	r0, 800e2f2 <rcl_publisher_init+0x1be>
 800e288:	4640      	mov	r0, r8
 800e28a:	f006 fc93 	bl	8014bb4 <rcl_node_get_rmw_handle>
 800e28e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	4631      	mov	r1, r6
 800e296:	463b      	mov	r3, r7
 800e298:	464a      	mov	r2, r9
 800e29a:	6825      	ldr	r5, [r4, #0]
 800e29c:	f001 fb26 	bl	800f8ec <rmw_create_publisher>
 800e2a0:	6821      	ldr	r1, [r4, #0]
 800e2a2:	f8c5 00bc 	str.w	r0, [r5, #188]	@ 0xbc
 800e2a6:	f8d1 00bc 	ldr.w	r0, [r1, #188]	@ 0xbc
 800e2aa:	b388      	cbz	r0, 800e310 <rcl_publisher_init+0x1dc>
 800e2ac:	3168      	adds	r1, #104	@ 0x68
 800e2ae:	f001 fbfb 	bl	800faa8 <rmw_publisher_get_actual_qos>
 800e2b2:	6823      	ldr	r3, [r4, #0]
 800e2b4:	4605      	mov	r5, r0
 800e2b6:	b9f0      	cbnz	r0, 800e2f6 <rcl_publisher_init+0x1c2>
 800e2b8:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800e2bc:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	2268      	movs	r2, #104	@ 0x68
 800e2c4:	4639      	mov	r1, r7
 800e2c6:	f00c fba0 	bl	801aa0a <memcpy>
 800e2ca:	f8d8 2000 	ldr.w	r2, [r8]
 800e2ce:	f8c0 20b8 	str.w	r2, [r0, #184]	@ 0xb8
 800e2d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e2d4:	b110      	cbz	r0, 800e2dc <rcl_publisher_init+0x1a8>
 800e2d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2d8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e2da:	4798      	blx	r3
 800e2dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2de:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e2e0:	4648      	mov	r0, r9
 800e2e2:	4798      	blx	r3
 800e2e4:	e73c      	b.n	800e160 <rcl_publisher_init+0x2c>
 800e2e6:	2501      	movs	r5, #1
 800e2e8:	e7f3      	b.n	800e2d2 <rcl_publisher_init+0x19e>
 800e2ea:	2567      	movs	r5, #103	@ 0x67
 800e2ec:	e79e      	b.n	800e22c <rcl_publisher_init+0xf8>
 800e2ee:	2567      	movs	r5, #103	@ 0x67
 800e2f0:	e7ef      	b.n	800e2d2 <rcl_publisher_init+0x19e>
 800e2f2:	250a      	movs	r5, #10
 800e2f4:	e7ed      	b.n	800e2d2 <rcl_publisher_init+0x19e>
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d0f5      	beq.n	800e2e6 <rcl_publisher_init+0x1b2>
 800e2fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e2fe:	b13b      	cbz	r3, 800e310 <rcl_publisher_init+0x1dc>
 800e300:	4640      	mov	r0, r8
 800e302:	f006 fc57 	bl	8014bb4 <rcl_node_get_rmw_handle>
 800e306:	6823      	ldr	r3, [r4, #0]
 800e308:	f8d3 10bc 	ldr.w	r1, [r3, #188]	@ 0xbc
 800e30c:	f001 fbce 	bl	800faac <rmw_destroy_publisher>
 800e310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e312:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800e314:	6820      	ldr	r0, [r4, #0]
 800e316:	4798      	blx	r3
 800e318:	2300      	movs	r3, #0
 800e31a:	6023      	str	r3, [r4, #0]
 800e31c:	2501      	movs	r5, #1
 800e31e:	e7d8      	b.n	800e2d2 <rcl_publisher_init+0x19e>

0800e320 <rcl_publisher_get_default_options>:
 800e320:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e322:	4f0e      	ldr	r7, [pc, #56]	@ (800e35c <rcl_publisher_get_default_options+0x3c>)
 800e324:	490e      	ldr	r1, [pc, #56]	@ (800e360 <rcl_publisher_get_default_options+0x40>)
 800e326:	b087      	sub	sp, #28
 800e328:	4606      	mov	r6, r0
 800e32a:	2250      	movs	r2, #80	@ 0x50
 800e32c:	4638      	mov	r0, r7
 800e32e:	f00c fb6c 	bl	801aa0a <memcpy>
 800e332:	466c      	mov	r4, sp
 800e334:	4668      	mov	r0, sp
 800e336:	f000 fca3 	bl	800ec80 <rcutils_get_default_allocator>
 800e33a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e33c:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 800e340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e342:	6823      	ldr	r3, [r4, #0]
 800e344:	602b      	str	r3, [r5, #0]
 800e346:	f000 fe75 	bl	800f034 <rmw_get_default_publisher_options>
 800e34a:	4639      	mov	r1, r7
 800e34c:	6678      	str	r0, [r7, #100]	@ 0x64
 800e34e:	2268      	movs	r2, #104	@ 0x68
 800e350:	4630      	mov	r0, r6
 800e352:	f00c fb5a 	bl	801aa0a <memcpy>
 800e356:	4630      	mov	r0, r6
 800e358:	b007      	add	sp, #28
 800e35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e35c:	20009cb8 	.word	0x20009cb8
 800e360:	0801df08 	.word	0x0801df08

0800e364 <rcl_publish>:
 800e364:	b1f8      	cbz	r0, 800e3a6 <rcl_publish+0x42>
 800e366:	6803      	ldr	r3, [r0, #0]
 800e368:	b570      	push	{r4, r5, r6, lr}
 800e36a:	4604      	mov	r4, r0
 800e36c:	b1b3      	cbz	r3, 800e39c <rcl_publish+0x38>
 800e36e:	4616      	mov	r6, r2
 800e370:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800e374:	b192      	cbz	r2, 800e39c <rcl_publish+0x38>
 800e376:	f8d3 00b8 	ldr.w	r0, [r3, #184]	@ 0xb8
 800e37a:	460d      	mov	r5, r1
 800e37c:	f005 ff7c 	bl	8014278 <rcl_context_is_valid>
 800e380:	b160      	cbz	r0, 800e39c <rcl_publish+0x38>
 800e382:	6823      	ldr	r3, [r4, #0]
 800e384:	f8d3 00bc 	ldr.w	r0, [r3, #188]	@ 0xbc
 800e388:	b140      	cbz	r0, 800e39c <rcl_publish+0x38>
 800e38a:	b155      	cbz	r5, 800e3a2 <rcl_publish+0x3e>
 800e38c:	4632      	mov	r2, r6
 800e38e:	4629      	mov	r1, r5
 800e390:	f001 fa4c 	bl	800f82c <rmw_publish>
 800e394:	3800      	subs	r0, #0
 800e396:	bf18      	it	ne
 800e398:	2001      	movne	r0, #1
 800e39a:	bd70      	pop	{r4, r5, r6, pc}
 800e39c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e3a0:	bd70      	pop	{r4, r5, r6, pc}
 800e3a2:	200b      	movs	r0, #11
 800e3a4:	bd70      	pop	{r4, r5, r6, pc}
 800e3a6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e3aa:	4770      	bx	lr

0800e3ac <_rclc_check_for_new_data>:
 800e3ac:	b1e0      	cbz	r0, 800e3e8 <_rclc_check_for_new_data+0x3c>
 800e3ae:	7803      	ldrb	r3, [r0, #0]
 800e3b0:	2b08      	cmp	r3, #8
 800e3b2:	d81b      	bhi.n	800e3ec <_rclc_check_for_new_data+0x40>
 800e3b4:	e8df f003 	tbb	[pc, r3]
 800e3b8:	12161010 	.word	0x12161010
 800e3bc:	05050512 	.word	0x05050512
 800e3c0:	14          	.byte	0x14
 800e3c1:	00          	.byte	0x00
 800e3c2:	6a0b      	ldr	r3, [r1, #32]
 800e3c4:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e3c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3ca:	3b00      	subs	r3, #0
 800e3cc:	bf18      	it	ne
 800e3ce:	2301      	movne	r3, #1
 800e3d0:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	4770      	bx	lr
 800e3d8:	680b      	ldr	r3, [r1, #0]
 800e3da:	e7f3      	b.n	800e3c4 <_rclc_check_for_new_data+0x18>
 800e3dc:	698b      	ldr	r3, [r1, #24]
 800e3de:	e7f1      	b.n	800e3c4 <_rclc_check_for_new_data+0x18>
 800e3e0:	688b      	ldr	r3, [r1, #8]
 800e3e2:	e7ef      	b.n	800e3c4 <_rclc_check_for_new_data+0x18>
 800e3e4:	690b      	ldr	r3, [r1, #16]
 800e3e6:	e7ed      	b.n	800e3c4 <_rclc_check_for_new_data+0x18>
 800e3e8:	200b      	movs	r0, #11
 800e3ea:	4770      	bx	lr
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
 800e3f2:	2001      	movs	r0, #1
 800e3f4:	4770      	bx	lr
 800e3f6:	bf00      	nop

0800e3f8 <_rclc_take_new_data>:
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	d049      	beq.n	800e490 <_rclc_take_new_data+0x98>
 800e3fc:	b510      	push	{r4, lr}
 800e3fe:	7803      	ldrb	r3, [r0, #0]
 800e400:	b08e      	sub	sp, #56	@ 0x38
 800e402:	4604      	mov	r4, r0
 800e404:	2b08      	cmp	r3, #8
 800e406:	d84a      	bhi.n	800e49e <_rclc_take_new_data+0xa6>
 800e408:	e8df f003 	tbb	[pc, r3]
 800e40c:	2b121515 	.word	0x2b121515
 800e410:	0505052b 	.word	0x0505052b
 800e414:	12          	.byte	0x12
 800e415:	00          	.byte	0x00
 800e416:	6a0b      	ldr	r3, [r1, #32]
 800e418:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e41a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e41e:	b13b      	cbz	r3, 800e430 <_rclc_take_new_data+0x38>
 800e420:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800e424:	f104 0110 	add.w	r1, r4, #16
 800e428:	f006 fcc4 	bl	8014db4 <rcl_take_request>
 800e42c:	2800      	cmp	r0, #0
 800e42e:	d131      	bne.n	800e494 <_rclc_take_new_data+0x9c>
 800e430:	2000      	movs	r0, #0
 800e432:	b00e      	add	sp, #56	@ 0x38
 800e434:	bd10      	pop	{r4, pc}
 800e436:	680b      	ldr	r3, [r1, #0]
 800e438:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d0f6      	beq.n	800e430 <_rclc_take_new_data+0x38>
 800e442:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800e446:	2300      	movs	r3, #0
 800e448:	aa02      	add	r2, sp, #8
 800e44a:	f006 fe29 	bl	80150a0 <rcl_take>
 800e44e:	2800      	cmp	r0, #0
 800e450:	d0ef      	beq.n	800e432 <_rclc_take_new_data+0x3a>
 800e452:	f240 1391 	movw	r3, #401	@ 0x191
 800e456:	4298      	cmp	r0, r3
 800e458:	d115      	bne.n	800e486 <_rclc_take_new_data+0x8e>
 800e45a:	2300      	movs	r3, #0
 800e45c:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800e460:	e7e7      	b.n	800e432 <_rclc_take_new_data+0x3a>
 800e462:	698b      	ldr	r3, [r1, #24]
 800e464:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d0e0      	beq.n	800e430 <_rclc_take_new_data+0x38>
 800e46e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800e472:	f104 0110 	add.w	r1, r4, #16
 800e476:	f005 fea5 	bl	80141c4 <rcl_take_response>
 800e47a:	2800      	cmp	r0, #0
 800e47c:	d0d8      	beq.n	800e430 <_rclc_take_new_data+0x38>
 800e47e:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800e482:	4298      	cmp	r0, r3
 800e484:	d0d5      	beq.n	800e432 <_rclc_take_new_data+0x3a>
 800e486:	9001      	str	r0, [sp, #4]
 800e488:	f000 fc2c 	bl	800ece4 <rcutils_reset_error>
 800e48c:	9801      	ldr	r0, [sp, #4]
 800e48e:	e7d0      	b.n	800e432 <_rclc_take_new_data+0x3a>
 800e490:	200b      	movs	r0, #11
 800e492:	4770      	bx	lr
 800e494:	f240 2359 	movw	r3, #601	@ 0x259
 800e498:	4298      	cmp	r0, r3
 800e49a:	d0de      	beq.n	800e45a <_rclc_take_new_data+0x62>
 800e49c:	e7f3      	b.n	800e486 <_rclc_take_new_data+0x8e>
 800e49e:	2001      	movs	r0, #1
 800e4a0:	e7c7      	b.n	800e432 <_rclc_take_new_data+0x3a>
 800e4a2:	bf00      	nop

0800e4a4 <rclc_executor_trigger_any>:
 800e4a4:	b170      	cbz	r0, 800e4c4 <rclc_executor_trigger_any+0x20>
 800e4a6:	b179      	cbz	r1, 800e4c8 <rclc_executor_trigger_any+0x24>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	e005      	b.n	800e4ba <rclc_executor_trigger_any+0x16>
 800e4ae:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800e4b2:	3340      	adds	r3, #64	@ 0x40
 800e4b4:	b930      	cbnz	r0, 800e4c4 <rclc_executor_trigger_any+0x20>
 800e4b6:	4291      	cmp	r1, r2
 800e4b8:	d005      	beq.n	800e4c6 <rclc_executor_trigger_any+0x22>
 800e4ba:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800e4be:	3201      	adds	r2, #1
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	d1f4      	bne.n	800e4ae <rclc_executor_trigger_any+0xa>
 800e4c4:	4770      	bx	lr
 800e4c6:	4770      	bx	lr
 800e4c8:	4608      	mov	r0, r1
 800e4ca:	e7fb      	b.n	800e4c4 <rclc_executor_trigger_any+0x20>

0800e4cc <_rclc_execute.part.0>:
 800e4cc:	b530      	push	{r4, r5, lr}
 800e4ce:	7803      	ldrb	r3, [r0, #0]
 800e4d0:	b083      	sub	sp, #12
 800e4d2:	4604      	mov	r4, r0
 800e4d4:	2b08      	cmp	r3, #8
 800e4d6:	d85b      	bhi.n	800e590 <_rclc_execute.part.0+0xc4>
 800e4d8:	e8df f003 	tbb	[pc, r3]
 800e4dc:	3036271f 	.word	0x3036271f
 800e4e0:	0505053f 	.word	0x0505053f
 800e4e4:	1a          	.byte	0x1a
 800e4e5:	00          	.byte	0x00
 800e4e6:	2b06      	cmp	r3, #6
 800e4e8:	d049      	beq.n	800e57e <_rclc_execute.part.0+0xb2>
 800e4ea:	2b07      	cmp	r3, #7
 800e4ec:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e4ee:	d140      	bne.n	800e572 <_rclc_execute.part.0+0xa6>
 800e4f0:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800e4f4:	6880      	ldr	r0, [r0, #8]
 800e4f6:	4798      	blx	r3
 800e4f8:	f104 0110 	add.w	r1, r4, #16
 800e4fc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800e4fe:	6860      	ldr	r0, [r4, #4]
 800e500:	f006 fc90 	bl	8014e24 <rcl_send_response>
 800e504:	b138      	cbz	r0, 800e516 <_rclc_execute.part.0+0x4a>
 800e506:	9001      	str	r0, [sp, #4]
 800e508:	f000 fbec 	bl	800ece4 <rcutils_reset_error>
 800e50c:	9801      	ldr	r0, [sp, #4]
 800e50e:	e002      	b.n	800e516 <_rclc_execute.part.0+0x4a>
 800e510:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e512:	4798      	blx	r3
 800e514:	2000      	movs	r0, #0
 800e516:	b003      	add	sp, #12
 800e518:	bd30      	pop	{r4, r5, pc}
 800e51a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800e51e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e520:	b96d      	cbnz	r5, 800e53e <_rclc_execute.part.0+0x72>
 800e522:	4628      	mov	r0, r5
 800e524:	4798      	blx	r3
 800e526:	4628      	mov	r0, r5
 800e528:	e7f5      	b.n	800e516 <_rclc_execute.part.0+0x4a>
 800e52a:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800e52e:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800e532:	b1d5      	cbz	r5, 800e56a <_rclc_execute.part.0+0x9e>
 800e534:	6880      	ldr	r0, [r0, #8]
 800e536:	4798      	blx	r3
 800e538:	2000      	movs	r0, #0
 800e53a:	e7ec      	b.n	800e516 <_rclc_execute.part.0+0x4a>
 800e53c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e53e:	68a0      	ldr	r0, [r4, #8]
 800e540:	4798      	blx	r3
 800e542:	2000      	movs	r0, #0
 800e544:	b003      	add	sp, #12
 800e546:	bd30      	pop	{r4, r5, pc}
 800e548:	6840      	ldr	r0, [r0, #4]
 800e54a:	f006 fe9f 	bl	801528c <rcl_timer_call>
 800e54e:	f240 3321 	movw	r3, #801	@ 0x321
 800e552:	4298      	cmp	r0, r3
 800e554:	d1d6      	bne.n	800e504 <_rclc_execute.part.0+0x38>
 800e556:	2000      	movs	r0, #0
 800e558:	e7dd      	b.n	800e516 <_rclc_execute.part.0+0x4a>
 800e55a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e55c:	6880      	ldr	r0, [r0, #8]
 800e55e:	f104 0110 	add.w	r1, r4, #16
 800e562:	4798      	blx	r3
 800e564:	2000      	movs	r0, #0
 800e566:	b003      	add	sp, #12
 800e568:	bd30      	pop	{r4, r5, pc}
 800e56a:	4628      	mov	r0, r5
 800e56c:	4798      	blx	r3
 800e56e:	4628      	mov	r0, r5
 800e570:	e7d1      	b.n	800e516 <_rclc_execute.part.0+0x4a>
 800e572:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e574:	6880      	ldr	r0, [r0, #8]
 800e576:	4798      	blx	r3
 800e578:	f104 0110 	add.w	r1, r4, #16
 800e57c:	e7be      	b.n	800e4fc <_rclc_execute.part.0+0x30>
 800e57e:	f100 0110 	add.w	r1, r0, #16
 800e582:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e584:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800e586:	6880      	ldr	r0, [r0, #8]
 800e588:	9101      	str	r1, [sp, #4]
 800e58a:	4798      	blx	r3
 800e58c:	9901      	ldr	r1, [sp, #4]
 800e58e:	e7b5      	b.n	800e4fc <_rclc_execute.part.0+0x30>
 800e590:	2001      	movs	r0, #1
 800e592:	e7c0      	b.n	800e516 <_rclc_execute.part.0+0x4a>
 800e594:	0000      	movs	r0, r0
	...

0800e598 <rclc_executor_init>:
 800e598:	2800      	cmp	r0, #0
 800e59a:	d063      	beq.n	800e664 <rclc_executor_init+0xcc>
 800e59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a0:	460f      	mov	r7, r1
 800e5a2:	b0ae      	sub	sp, #184	@ 0xb8
 800e5a4:	2900      	cmp	r1, #0
 800e5a6:	d055      	beq.n	800e654 <rclc_executor_init+0xbc>
 800e5a8:	4605      	mov	r5, r0
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	4616      	mov	r6, r2
 800e5ae:	4698      	mov	r8, r3
 800e5b0:	f000 fb74 	bl	800ec9c <rcutils_allocator_is_valid>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	d04d      	beq.n	800e654 <rclc_executor_init+0xbc>
 800e5b8:	2e00      	cmp	r6, #0
 800e5ba:	d04b      	beq.n	800e654 <rclc_executor_init+0xbc>
 800e5bc:	492e      	ldr	r1, [pc, #184]	@ (800e678 <rclc_executor_init+0xe0>)
 800e5be:	2280      	movs	r2, #128	@ 0x80
 800e5c0:	a80e      	add	r0, sp, #56	@ 0x38
 800e5c2:	f00c fa22 	bl	801aa0a <memcpy>
 800e5c6:	2400      	movs	r4, #0
 800e5c8:	a90e      	add	r1, sp, #56	@ 0x38
 800e5ca:	2280      	movs	r2, #128	@ 0x80
 800e5cc:	4628      	mov	r0, r5
 800e5ce:	f00c fa1c 	bl	801aa0a <memcpy>
 800e5d2:	602f      	str	r7, [r5, #0]
 800e5d4:	4668      	mov	r0, sp
 800e5d6:	e9c5 6402 	strd	r6, r4, [r5, #8]
 800e5da:	466f      	mov	r7, sp
 800e5dc:	f007 f8b0 	bl	8015740 <rcl_get_zero_initialized_wait_set>
 800e5e0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e5e2:	f105 0c14 	add.w	ip, r5, #20
 800e5e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e5ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5f0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e5f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5f6:	a31e      	add	r3, pc, #120	@ (adr r3, 800e670 <rclc_executor_init+0xd8>)
 800e5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fc:	6839      	ldr	r1, [r7, #0]
 800e5fe:	f8cc 1000 	str.w	r1, [ip]
 800e602:	f8d8 7000 	ldr.w	r7, [r8]
 800e606:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e60a:	f8c5 8010 	str.w	r8, [r5, #16]
 800e60e:	e9c5 2318 	strd	r2, r3, [r5, #96]	@ 0x60
 800e612:	01b0      	lsls	r0, r6, #6
 800e614:	47b8      	blx	r7
 800e616:	6068      	str	r0, [r5, #4]
 800e618:	b908      	cbnz	r0, 800e61e <rclc_executor_init+0x86>
 800e61a:	e025      	b.n	800e668 <rclc_executor_init+0xd0>
 800e61c:	6868      	ldr	r0, [r5, #4]
 800e61e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800e622:	4631      	mov	r1, r6
 800e624:	3401      	adds	r4, #1
 800e626:	f000 fa01 	bl	800ea2c <rclc_executor_handle_init>
 800e62a:	42a6      	cmp	r6, r4
 800e62c:	d1f6      	bne.n	800e61c <rclc_executor_init+0x84>
 800e62e:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800e632:	f000 f9ef 	bl	800ea14 <rclc_executor_handle_counters_zero_init>
 800e636:	686b      	ldr	r3, [r5, #4]
 800e638:	4a10      	ldr	r2, [pc, #64]	@ (800e67c <rclc_executor_init+0xe4>)
 800e63a:	672a      	str	r2, [r5, #112]	@ 0x70
 800e63c:	2000      	movs	r0, #0
 800e63e:	6768      	str	r0, [r5, #116]	@ 0x74
 800e640:	b163      	cbz	r3, 800e65c <rclc_executor_init+0xc4>
 800e642:	692b      	ldr	r3, [r5, #16]
 800e644:	b153      	cbz	r3, 800e65c <rclc_executor_init+0xc4>
 800e646:	68ab      	ldr	r3, [r5, #8]
 800e648:	b143      	cbz	r3, 800e65c <rclc_executor_init+0xc4>
 800e64a:	f885 0078 	strb.w	r0, [r5, #120]	@ 0x78
 800e64e:	b02e      	add	sp, #184	@ 0xb8
 800e650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e654:	200b      	movs	r0, #11
 800e656:	b02e      	add	sp, #184	@ 0xb8
 800e658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e65c:	4618      	mov	r0, r3
 800e65e:	b02e      	add	sp, #184	@ 0xb8
 800e660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e664:	200b      	movs	r0, #11
 800e666:	4770      	bx	lr
 800e668:	200a      	movs	r0, #10
 800e66a:	e7f4      	b.n	800e656 <rclc_executor_init+0xbe>
 800e66c:	f3af 8000 	nop.w
 800e670:	3b9aca00 	.word	0x3b9aca00
 800e674:	00000000 	.word	0x00000000
 800e678:	0801df58 	.word	0x0801df58
 800e67c:	0800e4a5 	.word	0x0800e4a5

0800e680 <rclc_executor_add_subscription>:
 800e680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e684:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800e688:	b358      	cbz	r0, 800e6e2 <rclc_executor_add_subscription+0x62>
 800e68a:	b351      	cbz	r1, 800e6e2 <rclc_executor_add_subscription+0x62>
 800e68c:	b34a      	cbz	r2, 800e6e2 <rclc_executor_add_subscription+0x62>
 800e68e:	b343      	cbz	r3, 800e6e2 <rclc_executor_add_subscription+0x62>
 800e690:	4604      	mov	r4, r0
 800e692:	e9d0 0502 	ldrd	r0, r5, [r0, #8]
 800e696:	4285      	cmp	r5, r0
 800e698:	d302      	bcc.n	800e6a0 <rclc_executor_add_subscription+0x20>
 800e69a:	2001      	movs	r0, #1
 800e69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a0:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800e6a4:	ea4f 1885 	mov.w	r8, r5, lsl #6
 800e6a8:	eb0e 1685 	add.w	r6, lr, r5, lsl #6
 800e6ac:	f04f 0c00 	mov.w	ip, #0
 800e6b0:	f80e c008 	strb.w	ip, [lr, r8]
 800e6b4:	2001      	movs	r0, #1
 800e6b6:	3501      	adds	r5, #1
 800e6b8:	f104 0814 	add.w	r8, r4, #20
 800e6bc:	f886 0038 	strb.w	r0, [r6, #56]	@ 0x38
 800e6c0:	e9c6 1201 	strd	r1, r2, [r6, #4]
 800e6c4:	6333      	str	r3, [r6, #48]	@ 0x30
 800e6c6:	7077      	strb	r7, [r6, #1]
 800e6c8:	f8c6 c02c 	str.w	ip, [r6, #44]	@ 0x2c
 800e6cc:	4640      	mov	r0, r8
 800e6ce:	60e5      	str	r5, [r4, #12]
 800e6d0:	f007 f848 	bl	8015764 <rcl_wait_set_is_valid>
 800e6d4:	b940      	cbnz	r0, 800e6e8 <rclc_executor_add_subscription+0x68>
 800e6d6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800e6d8:	3301      	adds	r3, #1
 800e6da:	64a3      	str	r3, [r4, #72]	@ 0x48
 800e6dc:	2000      	movs	r0, #0
 800e6de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6e2:	200b      	movs	r0, #11
 800e6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6e8:	4640      	mov	r0, r8
 800e6ea:	f007 f841 	bl	8015770 <rcl_wait_set_fini>
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	d0f1      	beq.n	800e6d6 <rclc_executor_add_subscription+0x56>
 800e6f2:	e7d3      	b.n	800e69c <rclc_executor_add_subscription+0x1c>

0800e6f4 <rclc_executor_prepare>:
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	d03d      	beq.n	800e774 <rclc_executor_prepare+0x80>
 800e6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fc:	f100 0814 	add.w	r8, r0, #20
 800e700:	b09a      	sub	sp, #104	@ 0x68
 800e702:	4604      	mov	r4, r0
 800e704:	4640      	mov	r0, r8
 800e706:	f007 f82d 	bl	8015764 <rcl_wait_set_is_valid>
 800e70a:	b118      	cbz	r0, 800e714 <rclc_executor_prepare+0x20>
 800e70c:	2000      	movs	r0, #0
 800e70e:	b01a      	add	sp, #104	@ 0x68
 800e710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e714:	4640      	mov	r0, r8
 800e716:	f007 f82b 	bl	8015770 <rcl_wait_set_fini>
 800e71a:	2800      	cmp	r0, #0
 800e71c:	d127      	bne.n	800e76e <rclc_executor_prepare+0x7a>
 800e71e:	a80c      	add	r0, sp, #48	@ 0x30
 800e720:	ad0c      	add	r5, sp, #48	@ 0x30
 800e722:	f007 f80d 	bl	8015740 <rcl_get_zero_initialized_wait_set>
 800e726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e728:	4646      	mov	r6, r8
 800e72a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e72c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e72e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e732:	6927      	ldr	r7, [r4, #16]
 800e734:	682d      	ldr	r5, [r5, #0]
 800e736:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e738:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e73a:	6035      	str	r5, [r6, #0]
 800e73c:	ad04      	add	r5, sp, #16
 800e73e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e740:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	@ 0x50
 800e744:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800e746:	6826      	ldr	r6, [r4, #0]
 800e748:	6838      	ldr	r0, [r7, #0]
 800e74a:	6028      	str	r0, [r5, #0]
 800e74c:	e9cd 1602 	strd	r1, r6, [sp, #8]
 800e750:	e9cd 3200 	strd	r3, r2, [sp]
 800e754:	4640      	mov	r0, r8
 800e756:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e758:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 800e75a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e75c:	f007 fb26 	bl	8015dac <rcl_wait_set_init>
 800e760:	2800      	cmp	r0, #0
 800e762:	d0d4      	beq.n	800e70e <rclc_executor_prepare+0x1a>
 800e764:	900b      	str	r0, [sp, #44]	@ 0x2c
 800e766:	f000 fabd 	bl	800ece4 <rcutils_reset_error>
 800e76a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800e76c:	e7cf      	b.n	800e70e <rclc_executor_prepare+0x1a>
 800e76e:	f000 fab9 	bl	800ece4 <rcutils_reset_error>
 800e772:	e7d4      	b.n	800e71e <rclc_executor_prepare+0x2a>
 800e774:	200b      	movs	r0, #11
 800e776:	4770      	bx	lr

0800e778 <rclc_executor_spin_some.part.0>:
 800e778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e77c:	f100 0814 	add.w	r8, r0, #20
 800e780:	b083      	sub	sp, #12
 800e782:	4692      	mov	sl, r2
 800e784:	4699      	mov	r9, r3
 800e786:	4605      	mov	r5, r0
 800e788:	f7ff ffb4 	bl	800e6f4 <rclc_executor_prepare>
 800e78c:	4640      	mov	r0, r8
 800e78e:	f007 f8bb 	bl	8015908 <rcl_wait_set_clear>
 800e792:	4607      	mov	r7, r0
 800e794:	2800      	cmp	r0, #0
 800e796:	f040 80be 	bne.w	800e916 <rclc_executor_spin_some.part.0+0x19e>
 800e79a:	68ab      	ldr	r3, [r5, #8]
 800e79c:	4604      	mov	r4, r0
 800e79e:	b1eb      	cbz	r3, 800e7dc <rclc_executor_spin_some.part.0+0x64>
 800e7a0:	686e      	ldr	r6, [r5, #4]
 800e7a2:	eb06 1184 	add.w	r1, r6, r4, lsl #6
 800e7a6:	01a2      	lsls	r2, r4, #6
 800e7a8:	f891 3038 	ldrb.w	r3, [r1, #56]	@ 0x38
 800e7ac:	b1b3      	cbz	r3, 800e7dc <rclc_executor_spin_some.part.0+0x64>
 800e7ae:	5cb3      	ldrb	r3, [r6, r2]
 800e7b0:	2b08      	cmp	r3, #8
 800e7b2:	f200 80a9 	bhi.w	800e908 <rclc_executor_spin_some.part.0+0x190>
 800e7b6:	e8df f003 	tbb	[pc, r3]
 800e7ba:	8989      	.short	0x8989
 800e7bc:	057b7b93 	.word	0x057b7b93
 800e7c0:	0505      	.short	0x0505
 800e7c2:	9d          	.byte	0x9d
 800e7c3:	00          	.byte	0x00
 800e7c4:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800e7c8:	4640      	mov	r0, r8
 800e7ca:	6849      	ldr	r1, [r1, #4]
 800e7cc:	f007 fc04 	bl	8015fd8 <rcl_wait_set_add_service>
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	d175      	bne.n	800e8c0 <rclc_executor_spin_some.part.0+0x148>
 800e7d4:	68ab      	ldr	r3, [r5, #8]
 800e7d6:	3401      	adds	r4, #1
 800e7d8:	429c      	cmp	r4, r3
 800e7da:	d3e1      	bcc.n	800e7a0 <rclc_executor_spin_some.part.0+0x28>
 800e7dc:	464b      	mov	r3, r9
 800e7de:	4652      	mov	r2, sl
 800e7e0:	4640      	mov	r0, r8
 800e7e2:	f007 fc25 	bl	8016030 <rcl_wait>
 800e7e6:	f895 3078 	ldrb.w	r3, [r5, #120]	@ 0x78
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	f000 809b 	beq.w	800e926 <rclc_executor_spin_some.part.0+0x1ae>
 800e7f0:	2b01      	cmp	r3, #1
 800e7f2:	f040 8089 	bne.w	800e908 <rclc_executor_spin_some.part.0+0x190>
 800e7f6:	68ab      	ldr	r3, [r5, #8]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	f000 80ef 	beq.w	800e9dc <rclc_executor_spin_some.part.0+0x264>
 800e7fe:	2400      	movs	r4, #0
 800e800:	4626      	mov	r6, r4
 800e802:	f240 1991 	movw	r9, #401	@ 0x191
 800e806:	e00a      	b.n	800e81e <rclc_executor_spin_some.part.0+0xa6>
 800e808:	f7ff fdd0 	bl	800e3ac <_rclc_check_for_new_data>
 800e80c:	4604      	mov	r4, r0
 800e80e:	b110      	cbz	r0, 800e816 <rclc_executor_spin_some.part.0+0x9e>
 800e810:	4548      	cmp	r0, r9
 800e812:	f040 8086 	bne.w	800e922 <rclc_executor_spin_some.part.0+0x1aa>
 800e816:	68ab      	ldr	r3, [r5, #8]
 800e818:	429e      	cmp	r6, r3
 800e81a:	f080 80db 	bcs.w	800e9d4 <rclc_executor_spin_some.part.0+0x25c>
 800e81e:	686a      	ldr	r2, [r5, #4]
 800e820:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800e824:	4641      	mov	r1, r8
 800e826:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800e82a:	3601      	adds	r6, #1
 800e82c:	f1bc 0f00 	cmp.w	ip, #0
 800e830:	d1ea      	bne.n	800e808 <rclc_executor_spin_some.part.0+0x90>
 800e832:	4619      	mov	r1, r3
 800e834:	4610      	mov	r0, r2
 800e836:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 800e83a:	4798      	blx	r3
 800e83c:	2800      	cmp	r0, #0
 800e83e:	d070      	beq.n	800e922 <rclc_executor_spin_some.part.0+0x1aa>
 800e840:	68aa      	ldr	r2, [r5, #8]
 800e842:	2a00      	cmp	r2, #0
 800e844:	d06d      	beq.n	800e922 <rclc_executor_spin_some.part.0+0x1aa>
 800e846:	2600      	movs	r6, #0
 800e848:	f240 1991 	movw	r9, #401	@ 0x191
 800e84c:	e008      	b.n	800e860 <rclc_executor_spin_some.part.0+0xe8>
 800e84e:	f7ff fdd3 	bl	800e3f8 <_rclc_take_new_data>
 800e852:	4604      	mov	r4, r0
 800e854:	b108      	cbz	r0, 800e85a <rclc_executor_spin_some.part.0+0xe2>
 800e856:	4548      	cmp	r0, r9
 800e858:	d163      	bne.n	800e922 <rclc_executor_spin_some.part.0+0x1aa>
 800e85a:	68aa      	ldr	r2, [r5, #8]
 800e85c:	4296      	cmp	r6, r2
 800e85e:	d208      	bcs.n	800e872 <rclc_executor_spin_some.part.0+0xfa>
 800e860:	6868      	ldr	r0, [r5, #4]
 800e862:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800e866:	4641      	mov	r1, r8
 800e868:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800e86c:	3601      	adds	r6, #1
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d1ed      	bne.n	800e84e <rclc_executor_spin_some.part.0+0xd6>
 800e872:	2600      	movs	r6, #0
 800e874:	b932      	cbnz	r2, 800e884 <rclc_executor_spin_some.part.0+0x10c>
 800e876:	e054      	b.n	800e922 <rclc_executor_spin_some.part.0+0x1aa>
 800e878:	2901      	cmp	r1, #1
 800e87a:	d012      	beq.n	800e8a2 <rclc_executor_spin_some.part.0+0x12a>
 800e87c:	3601      	adds	r6, #1
 800e87e:	4296      	cmp	r6, r2
 800e880:	d245      	bcs.n	800e90e <rclc_executor_spin_some.part.0+0x196>
 800e882:	2400      	movs	r4, #0
 800e884:	686b      	ldr	r3, [r5, #4]
 800e886:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 800e88a:	4618      	mov	r0, r3
 800e88c:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 800e890:	2900      	cmp	r1, #0
 800e892:	d046      	beq.n	800e922 <rclc_executor_spin_some.part.0+0x1aa>
 800e894:	7859      	ldrb	r1, [r3, #1]
 800e896:	2900      	cmp	r1, #0
 800e898:	d1ee      	bne.n	800e878 <rclc_executor_spin_some.part.0+0x100>
 800e89a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d0ec      	beq.n	800e87c <rclc_executor_spin_some.part.0+0x104>
 800e8a2:	f7ff fe13 	bl	800e4cc <_rclc_execute.part.0>
 800e8a6:	2800      	cmp	r0, #0
 800e8a8:	f040 8096 	bne.w	800e9d8 <rclc_executor_spin_some.part.0+0x260>
 800e8ac:	68aa      	ldr	r2, [r5, #8]
 800e8ae:	e7e5      	b.n	800e87c <rclc_executor_spin_some.part.0+0x104>
 800e8b0:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800e8b4:	4640      	mov	r0, r8
 800e8b6:	6849      	ldr	r1, [r1, #4]
 800e8b8:	f007 fb62 	bl	8015f80 <rcl_wait_set_add_client>
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	d089      	beq.n	800e7d4 <rclc_executor_spin_some.part.0+0x5c>
 800e8c0:	9001      	str	r0, [sp, #4]
 800e8c2:	f000 fa0f 	bl	800ece4 <rcutils_reset_error>
 800e8c6:	9801      	ldr	r0, [sp, #4]
 800e8c8:	4607      	mov	r7, r0
 800e8ca:	e020      	b.n	800e90e <rclc_executor_spin_some.part.0+0x196>
 800e8cc:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800e8d0:	4640      	mov	r0, r8
 800e8d2:	6849      	ldr	r1, [r1, #4]
 800e8d4:	f006 ffec 	bl	80158b0 <rcl_wait_set_add_subscription>
 800e8d8:	2800      	cmp	r0, #0
 800e8da:	f43f af7b 	beq.w	800e7d4 <rclc_executor_spin_some.part.0+0x5c>
 800e8de:	e7ef      	b.n	800e8c0 <rclc_executor_spin_some.part.0+0x148>
 800e8e0:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800e8e4:	4640      	mov	r0, r8
 800e8e6:	6849      	ldr	r1, [r1, #4]
 800e8e8:	f007 fb1a 	bl	8015f20 <rcl_wait_set_add_timer>
 800e8ec:	2800      	cmp	r0, #0
 800e8ee:	f43f af71 	beq.w	800e7d4 <rclc_executor_spin_some.part.0+0x5c>
 800e8f2:	e7e5      	b.n	800e8c0 <rclc_executor_spin_some.part.0+0x148>
 800e8f4:	f101 0234 	add.w	r2, r1, #52	@ 0x34
 800e8f8:	4640      	mov	r0, r8
 800e8fa:	6849      	ldr	r1, [r1, #4]
 800e8fc:	f007 fae4 	bl	8015ec8 <rcl_wait_set_add_guard_condition>
 800e900:	2800      	cmp	r0, #0
 800e902:	f43f af67 	beq.w	800e7d4 <rclc_executor_spin_some.part.0+0x5c>
 800e906:	e7db      	b.n	800e8c0 <rclc_executor_spin_some.part.0+0x148>
 800e908:	f000 f9ec 	bl	800ece4 <rcutils_reset_error>
 800e90c:	2701      	movs	r7, #1
 800e90e:	4638      	mov	r0, r7
 800e910:	b003      	add	sp, #12
 800e912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e916:	f000 f9e5 	bl	800ece4 <rcutils_reset_error>
 800e91a:	4638      	mov	r0, r7
 800e91c:	b003      	add	sp, #12
 800e91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e922:	4627      	mov	r7, r4
 800e924:	e7f3      	b.n	800e90e <rclc_executor_spin_some.part.0+0x196>
 800e926:	68ab      	ldr	r3, [r5, #8]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d05a      	beq.n	800e9e2 <rclc_executor_spin_some.part.0+0x26a>
 800e92c:	2400      	movs	r4, #0
 800e92e:	4626      	mov	r6, r4
 800e930:	f240 1991 	movw	r9, #401	@ 0x191
 800e934:	e008      	b.n	800e948 <rclc_executor_spin_some.part.0+0x1d0>
 800e936:	f7ff fd39 	bl	800e3ac <_rclc_check_for_new_data>
 800e93a:	4604      	mov	r4, r0
 800e93c:	b108      	cbz	r0, 800e942 <rclc_executor_spin_some.part.0+0x1ca>
 800e93e:	4548      	cmp	r0, r9
 800e940:	d1ef      	bne.n	800e922 <rclc_executor_spin_some.part.0+0x1aa>
 800e942:	68ab      	ldr	r3, [r5, #8]
 800e944:	429e      	cmp	r6, r3
 800e946:	d243      	bcs.n	800e9d0 <rclc_executor_spin_some.part.0+0x258>
 800e948:	686a      	ldr	r2, [r5, #4]
 800e94a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800e94e:	4641      	mov	r1, r8
 800e950:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800e954:	3601      	adds	r6, #1
 800e956:	f1bc 0f00 	cmp.w	ip, #0
 800e95a:	d1ec      	bne.n	800e936 <rclc_executor_spin_some.part.0+0x1be>
 800e95c:	4619      	mov	r1, r3
 800e95e:	4610      	mov	r0, r2
 800e960:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 800e964:	4798      	blx	r3
 800e966:	2800      	cmp	r0, #0
 800e968:	d0db      	beq.n	800e922 <rclc_executor_spin_some.part.0+0x1aa>
 800e96a:	68ab      	ldr	r3, [r5, #8]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d0d8      	beq.n	800e922 <rclc_executor_spin_some.part.0+0x1aa>
 800e970:	f04f 0a00 	mov.w	sl, #0
 800e974:	f240 1691 	movw	r6, #401	@ 0x191
 800e978:	f240 2959 	movw	r9, #601	@ 0x259
 800e97c:	e00b      	b.n	800e996 <rclc_executor_spin_some.part.0+0x21e>
 800e97e:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800e982:	b113      	cbz	r3, 800e98a <rclc_executor_spin_some.part.0+0x212>
 800e984:	f7ff fda2 	bl	800e4cc <_rclc_execute.part.0>
 800e988:	bb30      	cbnz	r0, 800e9d8 <rclc_executor_spin_some.part.0+0x260>
 800e98a:	68ab      	ldr	r3, [r5, #8]
 800e98c:	f10a 0a01 	add.w	sl, sl, #1
 800e990:	459a      	cmp	sl, r3
 800e992:	d2bc      	bcs.n	800e90e <rclc_executor_spin_some.part.0+0x196>
 800e994:	2400      	movs	r4, #0
 800e996:	6868      	ldr	r0, [r5, #4]
 800e998:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800e99c:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800e9a0:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d0bc      	beq.n	800e922 <rclc_executor_spin_some.part.0+0x1aa>
 800e9a8:	4641      	mov	r1, r8
 800e9aa:	f7ff fd25 	bl	800e3f8 <_rclc_take_new_data>
 800e9ae:	b118      	cbz	r0, 800e9b8 <rclc_executor_spin_some.part.0+0x240>
 800e9b0:	42b0      	cmp	r0, r6
 800e9b2:	d001      	beq.n	800e9b8 <rclc_executor_spin_some.part.0+0x240>
 800e9b4:	4548      	cmp	r0, r9
 800e9b6:	d10f      	bne.n	800e9d8 <rclc_executor_spin_some.part.0+0x260>
 800e9b8:	6868      	ldr	r0, [r5, #4]
 800e9ba:	eb10 000b 	adds.w	r0, r0, fp
 800e9be:	d005      	beq.n	800e9cc <rclc_executor_spin_some.part.0+0x254>
 800e9c0:	7843      	ldrb	r3, [r0, #1]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d0db      	beq.n	800e97e <rclc_executor_spin_some.part.0+0x206>
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	d1df      	bne.n	800e98a <rclc_executor_spin_some.part.0+0x212>
 800e9ca:	e7db      	b.n	800e984 <rclc_executor_spin_some.part.0+0x20c>
 800e9cc:	270b      	movs	r7, #11
 800e9ce:	e79e      	b.n	800e90e <rclc_executor_spin_some.part.0+0x196>
 800e9d0:	686a      	ldr	r2, [r5, #4]
 800e9d2:	e7c3      	b.n	800e95c <rclc_executor_spin_some.part.0+0x1e4>
 800e9d4:	686a      	ldr	r2, [r5, #4]
 800e9d6:	e72c      	b.n	800e832 <rclc_executor_spin_some.part.0+0xba>
 800e9d8:	4607      	mov	r7, r0
 800e9da:	e798      	b.n	800e90e <rclc_executor_spin_some.part.0+0x196>
 800e9dc:	686a      	ldr	r2, [r5, #4]
 800e9de:	461c      	mov	r4, r3
 800e9e0:	e727      	b.n	800e832 <rclc_executor_spin_some.part.0+0xba>
 800e9e2:	686a      	ldr	r2, [r5, #4]
 800e9e4:	461c      	mov	r4, r3
 800e9e6:	e7b9      	b.n	800e95c <rclc_executor_spin_some.part.0+0x1e4>

0800e9e8 <rclc_executor_spin_some>:
 800e9e8:	b190      	cbz	r0, 800ea10 <rclc_executor_spin_some+0x28>
 800e9ea:	b570      	push	{r4, r5, r6, lr}
 800e9ec:	4604      	mov	r4, r0
 800e9ee:	6800      	ldr	r0, [r0, #0]
 800e9f0:	4616      	mov	r6, r2
 800e9f2:	461d      	mov	r5, r3
 800e9f4:	f005 fc40 	bl	8014278 <rcl_context_is_valid>
 800e9f8:	b130      	cbz	r0, 800ea08 <rclc_executor_spin_some+0x20>
 800e9fa:	4632      	mov	r2, r6
 800e9fc:	462b      	mov	r3, r5
 800e9fe:	4620      	mov	r0, r4
 800ea00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea04:	f7ff beb8 	b.w	800e778 <rclc_executor_spin_some.part.0>
 800ea08:	f000 f96c 	bl	800ece4 <rcutils_reset_error>
 800ea0c:	2001      	movs	r0, #1
 800ea0e:	bd70      	pop	{r4, r5, r6, pc}
 800ea10:	200b      	movs	r0, #11
 800ea12:	4770      	bx	lr

0800ea14 <rclc_executor_handle_counters_zero_init>:
 800ea14:	b140      	cbz	r0, 800ea28 <rclc_executor_handle_counters_zero_init+0x14>
 800ea16:	2300      	movs	r3, #0
 800ea18:	6003      	str	r3, [r0, #0]
 800ea1a:	6043      	str	r3, [r0, #4]
 800ea1c:	6083      	str	r3, [r0, #8]
 800ea1e:	60c3      	str	r3, [r0, #12]
 800ea20:	6103      	str	r3, [r0, #16]
 800ea22:	6143      	str	r3, [r0, #20]
 800ea24:	4618      	mov	r0, r3
 800ea26:	4770      	bx	lr
 800ea28:	200b      	movs	r0, #11
 800ea2a:	4770      	bx	lr

0800ea2c <rclc_executor_handle_init>:
 800ea2c:	b178      	cbz	r0, 800ea4e <rclc_executor_handle_init+0x22>
 800ea2e:	b430      	push	{r4, r5}
 800ea30:	4603      	mov	r3, r0
 800ea32:	2209      	movs	r2, #9
 800ea34:	2000      	movs	r0, #0
 800ea36:	2400      	movs	r4, #0
 800ea38:	2500      	movs	r5, #0
 800ea3a:	801a      	strh	r2, [r3, #0]
 800ea3c:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
 800ea40:	bc30      	pop	{r4, r5}
 800ea42:	e9c3 0001 	strd	r0, r0, [r3, #4]
 800ea46:	6359      	str	r1, [r3, #52]	@ 0x34
 800ea48:	6318      	str	r0, [r3, #48]	@ 0x30
 800ea4a:	8718      	strh	r0, [r3, #56]	@ 0x38
 800ea4c:	4770      	bx	lr
 800ea4e:	200b      	movs	r0, #11
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop

0800ea54 <rclc_support_init_with_options>:
 800ea54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea58:	b082      	sub	sp, #8
 800ea5a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ea5e:	b380      	cbz	r0, 800eac2 <rclc_support_init_with_options+0x6e>
 800ea60:	461c      	mov	r4, r3
 800ea62:	b373      	cbz	r3, 800eac2 <rclc_support_init_with_options+0x6e>
 800ea64:	f1b8 0f00 	cmp.w	r8, #0
 800ea68:	d02b      	beq.n	800eac2 <rclc_support_init_with_options+0x6e>
 800ea6a:	4605      	mov	r5, r0
 800ea6c:	460e      	mov	r6, r1
 800ea6e:	4617      	mov	r7, r2
 800ea70:	f7ff f9fa 	bl	800de68 <rcl_get_zero_initialized_init_options>
 800ea74:	4629      	mov	r1, r5
 800ea76:	6028      	str	r0, [r5, #0]
 800ea78:	4620      	mov	r0, r4
 800ea7a:	f7ff fa6d 	bl	800df58 <rcl_init_options_copy>
 800ea7e:	4604      	mov	r4, r0
 800ea80:	b9c8      	cbnz	r0, 800eab6 <rclc_support_init_with_options+0x62>
 800ea82:	466c      	mov	r4, sp
 800ea84:	4620      	mov	r0, r4
 800ea86:	f005 fbed 	bl	8014264 <rcl_get_zero_initialized_context>
 800ea8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ea8e:	1d2b      	adds	r3, r5, #4
 800ea90:	e883 0003 	stmia.w	r3, {r0, r1}
 800ea94:	462a      	mov	r2, r5
 800ea96:	4639      	mov	r1, r7
 800ea98:	4630      	mov	r0, r6
 800ea9a:	f005 fdc3 	bl	8014624 <rcl_init>
 800ea9e:	4604      	mov	r4, r0
 800eaa0:	b948      	cbnz	r0, 800eab6 <rclc_support_init_with_options+0x62>
 800eaa2:	f8c5 800c 	str.w	r8, [r5, #12]
 800eaa6:	4642      	mov	r2, r8
 800eaa8:	f105 0110 	add.w	r1, r5, #16
 800eaac:	2003      	movs	r0, #3
 800eaae:	f006 fb61 	bl	8015174 <rcl_clock_init>
 800eab2:	4604      	mov	r4, r0
 800eab4:	b108      	cbz	r0, 800eaba <rclc_support_init_with_options+0x66>
 800eab6:	f000 f915 	bl	800ece4 <rcutils_reset_error>
 800eaba:	4620      	mov	r0, r4
 800eabc:	b002      	add	sp, #8
 800eabe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac2:	240b      	movs	r4, #11
 800eac4:	4620      	mov	r0, r4
 800eac6:	b002      	add	sp, #8
 800eac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eacc <rclc_node_init_default>:
 800eacc:	b3b8      	cbz	r0, 800eb3e <rclc_node_init_default+0x72>
 800eace:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ead2:	460d      	mov	r5, r1
 800ead4:	b08f      	sub	sp, #60	@ 0x3c
 800ead6:	b329      	cbz	r1, 800eb24 <rclc_node_init_default+0x58>
 800ead8:	4616      	mov	r6, r2
 800eada:	b31a      	cbz	r2, 800eb24 <rclc_node_init_default+0x58>
 800eadc:	461f      	mov	r7, r3
 800eade:	b30b      	cbz	r3, 800eb24 <rclc_node_init_default+0x58>
 800eae0:	f10d 0810 	add.w	r8, sp, #16
 800eae4:	4604      	mov	r4, r0
 800eae6:	4640      	mov	r0, r8
 800eae8:	f005 fec8 	bl	801487c <rcl_get_zero_initialized_node>
 800eaec:	e898 0003 	ldmia.w	r8, {r0, r1}
 800eaf0:	f10d 091c 	add.w	r9, sp, #28
 800eaf4:	e884 0003 	stmia.w	r4, {r0, r1}
 800eaf8:	4648      	mov	r0, r9
 800eafa:	f7ff fadb 	bl	800e0b4 <rcl_node_get_default_options>
 800eafe:	4640      	mov	r0, r8
 800eb00:	f005 febc 	bl	801487c <rcl_get_zero_initialized_node>
 800eb04:	e898 0003 	ldmia.w	r8, {r0, r1}
 800eb08:	1d3b      	adds	r3, r7, #4
 800eb0a:	f8cd 9000 	str.w	r9, [sp]
 800eb0e:	4632      	mov	r2, r6
 800eb10:	e884 0003 	stmia.w	r4, {r0, r1}
 800eb14:	4629      	mov	r1, r5
 800eb16:	4620      	mov	r0, r4
 800eb18:	f005 feba 	bl	8014890 <rcl_node_init>
 800eb1c:	b930      	cbnz	r0, 800eb2c <rclc_node_init_default+0x60>
 800eb1e:	b00f      	add	sp, #60	@ 0x3c
 800eb20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb24:	200b      	movs	r0, #11
 800eb26:	b00f      	add	sp, #60	@ 0x3c
 800eb28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb2c:	9003      	str	r0, [sp, #12]
 800eb2e:	f000 f8d9 	bl	800ece4 <rcutils_reset_error>
 800eb32:	f000 f8d7 	bl	800ece4 <rcutils_reset_error>
 800eb36:	9803      	ldr	r0, [sp, #12]
 800eb38:	b00f      	add	sp, #60	@ 0x3c
 800eb3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eb3e:	200b      	movs	r0, #11
 800eb40:	4770      	bx	lr
 800eb42:	bf00      	nop

0800eb44 <rclc_publisher_init_default>:
 800eb44:	b368      	cbz	r0, 800eba2 <rclc_publisher_init_default+0x5e>
 800eb46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb4a:	460d      	mov	r5, r1
 800eb4c:	b09e      	sub	sp, #120	@ 0x78
 800eb4e:	b321      	cbz	r1, 800eb9a <rclc_publisher_init_default+0x56>
 800eb50:	4616      	mov	r6, r2
 800eb52:	b312      	cbz	r2, 800eb9a <rclc_publisher_init_default+0x56>
 800eb54:	461f      	mov	r7, r3
 800eb56:	b303      	cbz	r3, 800eb9a <rclc_publisher_init_default+0x56>
 800eb58:	4604      	mov	r4, r0
 800eb5a:	f7ff fae5 	bl	800e128 <rcl_get_zero_initialized_publisher>
 800eb5e:	f10d 0810 	add.w	r8, sp, #16
 800eb62:	6020      	str	r0, [r4, #0]
 800eb64:	4640      	mov	r0, r8
 800eb66:	f7ff fbdb 	bl	800e320 <rcl_publisher_get_default_options>
 800eb6a:	490f      	ldr	r1, [pc, #60]	@ (800eba8 <rclc_publisher_init_default+0x64>)
 800eb6c:	2250      	movs	r2, #80	@ 0x50
 800eb6e:	4640      	mov	r0, r8
 800eb70:	f00b ff4b 	bl	801aa0a <memcpy>
 800eb74:	f8cd 8000 	str.w	r8, [sp]
 800eb78:	463b      	mov	r3, r7
 800eb7a:	4632      	mov	r2, r6
 800eb7c:	4629      	mov	r1, r5
 800eb7e:	4620      	mov	r0, r4
 800eb80:	f7ff fad8 	bl	800e134 <rcl_publisher_init>
 800eb84:	b910      	cbnz	r0, 800eb8c <rclc_publisher_init_default+0x48>
 800eb86:	b01e      	add	sp, #120	@ 0x78
 800eb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb8c:	9003      	str	r0, [sp, #12]
 800eb8e:	f000 f8a9 	bl	800ece4 <rcutils_reset_error>
 800eb92:	9803      	ldr	r0, [sp, #12]
 800eb94:	b01e      	add	sp, #120	@ 0x78
 800eb96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb9a:	200b      	movs	r0, #11
 800eb9c:	b01e      	add	sp, #120	@ 0x78
 800eb9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eba2:	200b      	movs	r0, #11
 800eba4:	4770      	bx	lr
 800eba6:	bf00      	nop
 800eba8:	0801dfd8 	.word	0x0801dfd8

0800ebac <rclc_subscription_init_default>:
 800ebac:	b368      	cbz	r0, 800ec0a <rclc_subscription_init_default+0x5e>
 800ebae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebb2:	460d      	mov	r5, r1
 800ebb4:	b0a0      	sub	sp, #128	@ 0x80
 800ebb6:	b321      	cbz	r1, 800ec02 <rclc_subscription_init_default+0x56>
 800ebb8:	4616      	mov	r6, r2
 800ebba:	b312      	cbz	r2, 800ec02 <rclc_subscription_init_default+0x56>
 800ebbc:	461f      	mov	r7, r3
 800ebbe:	b303      	cbz	r3, 800ec02 <rclc_subscription_init_default+0x56>
 800ebc0:	4604      	mov	r4, r0
 800ebc2:	f006 f945 	bl	8014e50 <rcl_get_zero_initialized_subscription>
 800ebc6:	f10d 0810 	add.w	r8, sp, #16
 800ebca:	6020      	str	r0, [r4, #0]
 800ebcc:	4640      	mov	r0, r8
 800ebce:	f006 fa3b 	bl	8015048 <rcl_subscription_get_default_options>
 800ebd2:	490f      	ldr	r1, [pc, #60]	@ (800ec10 <rclc_subscription_init_default+0x64>)
 800ebd4:	2250      	movs	r2, #80	@ 0x50
 800ebd6:	4640      	mov	r0, r8
 800ebd8:	f00b ff17 	bl	801aa0a <memcpy>
 800ebdc:	f8cd 8000 	str.w	r8, [sp]
 800ebe0:	463b      	mov	r3, r7
 800ebe2:	4632      	mov	r2, r6
 800ebe4:	4629      	mov	r1, r5
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f006 f938 	bl	8014e5c <rcl_subscription_init>
 800ebec:	b910      	cbnz	r0, 800ebf4 <rclc_subscription_init_default+0x48>
 800ebee:	b020      	add	sp, #128	@ 0x80
 800ebf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebf4:	9003      	str	r0, [sp, #12]
 800ebf6:	f000 f875 	bl	800ece4 <rcutils_reset_error>
 800ebfa:	9803      	ldr	r0, [sp, #12]
 800ebfc:	b020      	add	sp, #128	@ 0x80
 800ebfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec02:	200b      	movs	r0, #11
 800ec04:	b020      	add	sp, #128	@ 0x80
 800ec06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec0a:	200b      	movs	r0, #11
 800ec0c:	4770      	bx	lr
 800ec0e:	bf00      	nop
 800ec10:	0801e028 	.word	0x0801e028

0800ec14 <__default_zero_allocate>:
 800ec14:	f00a ba7e 	b.w	8019114 <calloc>

0800ec18 <__default_reallocate>:
 800ec18:	f00a bc0a 	b.w	8019430 <realloc>

0800ec1c <__default_deallocate>:
 800ec1c:	f00a bae6 	b.w	80191ec <free>

0800ec20 <__default_allocate>:
 800ec20:	f00a badc 	b.w	80191dc <malloc>

0800ec24 <rcutils_get_zero_initialized_allocator>:
 800ec24:	b470      	push	{r4, r5, r6}
 800ec26:	4d05      	ldr	r5, [pc, #20]	@ (800ec3c <rcutils_get_zero_initialized_allocator+0x18>)
 800ec28:	4606      	mov	r6, r0
 800ec2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec2c:	4634      	mov	r4, r6
 800ec2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec30:	682b      	ldr	r3, [r5, #0]
 800ec32:	6023      	str	r3, [r4, #0]
 800ec34:	4630      	mov	r0, r6
 800ec36:	bc70      	pop	{r4, r5, r6}
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop
 800ec3c:	0801e078 	.word	0x0801e078

0800ec40 <rcutils_set_default_allocator>:
 800ec40:	b1a0      	cbz	r0, 800ec6c <rcutils_set_default_allocator+0x2c>
 800ec42:	6801      	ldr	r1, [r0, #0]
 800ec44:	b199      	cbz	r1, 800ec6e <rcutils_set_default_allocator+0x2e>
 800ec46:	b430      	push	{r4, r5}
 800ec48:	6844      	ldr	r4, [r0, #4]
 800ec4a:	b194      	cbz	r4, 800ec72 <rcutils_set_default_allocator+0x32>
 800ec4c:	68c5      	ldr	r5, [r0, #12]
 800ec4e:	b15d      	cbz	r5, 800ec68 <rcutils_set_default_allocator+0x28>
 800ec50:	6883      	ldr	r3, [r0, #8]
 800ec52:	b18b      	cbz	r3, 800ec78 <rcutils_set_default_allocator+0x38>
 800ec54:	4a09      	ldr	r2, [pc, #36]	@ (800ec7c <rcutils_set_default_allocator+0x3c>)
 800ec56:	e9c2 1400 	strd	r1, r4, [r2]
 800ec5a:	e9c2 3502 	strd	r3, r5, [r2, #8]
 800ec5e:	2000      	movs	r0, #0
 800ec60:	6110      	str	r0, [r2, #16]
 800ec62:	2001      	movs	r0, #1
 800ec64:	bc30      	pop	{r4, r5}
 800ec66:	4770      	bx	lr
 800ec68:	4628      	mov	r0, r5
 800ec6a:	e7fb      	b.n	800ec64 <rcutils_set_default_allocator+0x24>
 800ec6c:	4770      	bx	lr
 800ec6e:	4608      	mov	r0, r1
 800ec70:	4770      	bx	lr
 800ec72:	4620      	mov	r0, r4
 800ec74:	bc30      	pop	{r4, r5}
 800ec76:	4770      	bx	lr
 800ec78:	4618      	mov	r0, r3
 800ec7a:	e7f3      	b.n	800ec64 <rcutils_set_default_allocator+0x24>
 800ec7c:	20000048 	.word	0x20000048

0800ec80 <rcutils_get_default_allocator>:
 800ec80:	b470      	push	{r4, r5, r6}
 800ec82:	4d05      	ldr	r5, [pc, #20]	@ (800ec98 <rcutils_get_default_allocator+0x18>)
 800ec84:	4606      	mov	r6, r0
 800ec86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ec88:	4634      	mov	r4, r6
 800ec8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ec8c:	682b      	ldr	r3, [r5, #0]
 800ec8e:	6023      	str	r3, [r4, #0]
 800ec90:	4630      	mov	r0, r6
 800ec92:	bc70      	pop	{r4, r5, r6}
 800ec94:	4770      	bx	lr
 800ec96:	bf00      	nop
 800ec98:	20000048 	.word	0x20000048

0800ec9c <rcutils_allocator_is_valid>:
 800ec9c:	b158      	cbz	r0, 800ecb6 <rcutils_allocator_is_valid+0x1a>
 800ec9e:	6803      	ldr	r3, [r0, #0]
 800eca0:	b143      	cbz	r3, 800ecb4 <rcutils_allocator_is_valid+0x18>
 800eca2:	6843      	ldr	r3, [r0, #4]
 800eca4:	b133      	cbz	r3, 800ecb4 <rcutils_allocator_is_valid+0x18>
 800eca6:	68c3      	ldr	r3, [r0, #12]
 800eca8:	b123      	cbz	r3, 800ecb4 <rcutils_allocator_is_valid+0x18>
 800ecaa:	6880      	ldr	r0, [r0, #8]
 800ecac:	3800      	subs	r0, #0
 800ecae:	bf18      	it	ne
 800ecb0:	2001      	movne	r0, #1
 800ecb2:	4770      	bx	lr
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	4770      	bx	lr

0800ecb8 <rcutils_get_error_string>:
 800ecb8:	4b06      	ldr	r3, [pc, #24]	@ (800ecd4 <rcutils_get_error_string+0x1c>)
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	b13b      	cbz	r3, 800ecce <rcutils_get_error_string+0x16>
 800ecbe:	4b06      	ldr	r3, [pc, #24]	@ (800ecd8 <rcutils_get_error_string+0x20>)
 800ecc0:	781a      	ldrb	r2, [r3, #0]
 800ecc2:	b90a      	cbnz	r2, 800ecc8 <rcutils_get_error_string+0x10>
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	701a      	strb	r2, [r3, #0]
 800ecc8:	4b04      	ldr	r3, [pc, #16]	@ (800ecdc <rcutils_get_error_string+0x24>)
 800ecca:	7818      	ldrb	r0, [r3, #0]
 800eccc:	4770      	bx	lr
 800ecce:	4b04      	ldr	r3, [pc, #16]	@ (800ece0 <rcutils_get_error_string+0x28>)
 800ecd0:	7818      	ldrb	r0, [r3, #0]
 800ecd2:	4770      	bx	lr
 800ecd4:	20009d20 	.word	0x20009d20
 800ecd8:	20009d21 	.word	0x20009d21
 800ecdc:	20009ff8 	.word	0x20009ff8
 800ece0:	0801e08c 	.word	0x0801e08c

0800ece4 <rcutils_reset_error>:
 800ece4:	b4d0      	push	{r4, r6, r7}
 800ece6:	4a07      	ldr	r2, [pc, #28]	@ (800ed04 <rcutils_reset_error+0x20>)
 800ece8:	4807      	ldr	r0, [pc, #28]	@ (800ed08 <rcutils_reset_error+0x24>)
 800ecea:	4c08      	ldr	r4, [pc, #32]	@ (800ed0c <rcutils_reset_error+0x28>)
 800ecec:	4908      	ldr	r1, [pc, #32]	@ (800ed10 <rcutils_reset_error+0x2c>)
 800ecee:	2300      	movs	r3, #0
 800ecf0:	2600      	movs	r6, #0
 800ecf2:	2700      	movs	r7, #0
 800ecf4:	8013      	strh	r3, [r2, #0]
 800ecf6:	7003      	strb	r3, [r0, #0]
 800ecf8:	e9c2 6702 	strd	r6, r7, [r2, #8]
 800ecfc:	7023      	strb	r3, [r4, #0]
 800ecfe:	700b      	strb	r3, [r1, #0]
 800ed00:	bcd0      	pop	{r4, r6, r7}
 800ed02:	4770      	bx	lr
 800ed04:	2000a000 	.word	0x2000a000
 800ed08:	20009ff8 	.word	0x20009ff8
 800ed0c:	20009d21 	.word	0x20009d21
 800ed10:	20009d20 	.word	0x20009d20

0800ed14 <rcutils_get_zero_initialized_string_map>:
 800ed14:	4b01      	ldr	r3, [pc, #4]	@ (800ed1c <rcutils_get_zero_initialized_string_map+0x8>)
 800ed16:	2000      	movs	r0, #0
 800ed18:	6018      	str	r0, [r3, #0]
 800ed1a:	4770      	bx	lr
 800ed1c:	20009d24 	.word	0x20009d24

0800ed20 <rcutils_string_map_reserve>:
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d061      	beq.n	800ede8 <rcutils_string_map_reserve+0xc8>
 800ed24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed28:	6805      	ldr	r5, [r0, #0]
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	460c      	mov	r4, r1
 800ed2e:	4606      	mov	r6, r0
 800ed30:	b12d      	cbz	r5, 800ed3e <rcutils_string_map_reserve+0x1e>
 800ed32:	68eb      	ldr	r3, [r5, #12]
 800ed34:	42a3      	cmp	r3, r4
 800ed36:	d906      	bls.n	800ed46 <rcutils_string_map_reserve+0x26>
 800ed38:	461c      	mov	r4, r3
 800ed3a:	2d00      	cmp	r5, #0
 800ed3c:	d1f9      	bne.n	800ed32 <rcutils_string_map_reserve+0x12>
 800ed3e:	201f      	movs	r0, #31
 800ed40:	b003      	add	sp, #12
 800ed42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed46:	68ab      	ldr	r3, [r5, #8]
 800ed48:	42a3      	cmp	r3, r4
 800ed4a:	d049      	beq.n	800ede0 <rcutils_string_map_reserve+0xc0>
 800ed4c:	6a2f      	ldr	r7, [r5, #32]
 800ed4e:	2c00      	cmp	r4, #0
 800ed50:	d035      	beq.n	800edbe <rcutils_string_map_reserve+0x9e>
 800ed52:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800ed56:	d245      	bcs.n	800ede4 <rcutils_string_map_reserve+0xc4>
 800ed58:	ea4f 0884 	mov.w	r8, r4, lsl #2
 800ed5c:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800ed60:	6828      	ldr	r0, [r5, #0]
 800ed62:	4641      	mov	r1, r8
 800ed64:	463a      	mov	r2, r7
 800ed66:	47c8      	blx	r9
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d03b      	beq.n	800ede4 <rcutils_string_map_reserve+0xc4>
 800ed6c:	6833      	ldr	r3, [r6, #0]
 800ed6e:	463a      	mov	r2, r7
 800ed70:	6018      	str	r0, [r3, #0]
 800ed72:	4641      	mov	r1, r8
 800ed74:	6858      	ldr	r0, [r3, #4]
 800ed76:	47c8      	blx	r9
 800ed78:	2800      	cmp	r0, #0
 800ed7a:	d033      	beq.n	800ede4 <rcutils_string_map_reserve+0xc4>
 800ed7c:	6835      	ldr	r5, [r6, #0]
 800ed7e:	68ab      	ldr	r3, [r5, #8]
 800ed80:	6068      	str	r0, [r5, #4]
 800ed82:	42a3      	cmp	r3, r4
 800ed84:	d227      	bcs.n	800edd6 <rcutils_string_map_reserve+0xb6>
 800ed86:	682a      	ldr	r2, [r5, #0]
 800ed88:	eb00 0108 	add.w	r1, r0, r8
 800ed8c:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 800ed90:	428f      	cmp	r7, r1
 800ed92:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800ed96:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800ed9a:	d203      	bcs.n	800eda4 <rcutils_string_map_reserve+0x84>
 800ed9c:	eb02 0108 	add.w	r1, r2, r8
 800eda0:	428e      	cmp	r6, r1
 800eda2:	d323      	bcc.n	800edec <rcutils_string_map_reserve+0xcc>
 800eda4:	1ae3      	subs	r3, r4, r3
 800eda6:	009a      	lsls	r2, r3, #2
 800eda8:	4638      	mov	r0, r7
 800edaa:	2100      	movs	r1, #0
 800edac:	9201      	str	r2, [sp, #4]
 800edae:	f00b fd09 	bl	801a7c4 <memset>
 800edb2:	9a01      	ldr	r2, [sp, #4]
 800edb4:	4630      	mov	r0, r6
 800edb6:	2100      	movs	r1, #0
 800edb8:	f00b fd04 	bl	801a7c4 <memset>
 800edbc:	e00b      	b.n	800edd6 <rcutils_string_map_reserve+0xb6>
 800edbe:	f8d5 8014 	ldr.w	r8, [r5, #20]
 800edc2:	6828      	ldr	r0, [r5, #0]
 800edc4:	4639      	mov	r1, r7
 800edc6:	47c0      	blx	r8
 800edc8:	6833      	ldr	r3, [r6, #0]
 800edca:	4639      	mov	r1, r7
 800edcc:	6858      	ldr	r0, [r3, #4]
 800edce:	601c      	str	r4, [r3, #0]
 800edd0:	47c0      	blx	r8
 800edd2:	6835      	ldr	r5, [r6, #0]
 800edd4:	606c      	str	r4, [r5, #4]
 800edd6:	2000      	movs	r0, #0
 800edd8:	60ac      	str	r4, [r5, #8]
 800edda:	b003      	add	sp, #12
 800eddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ede0:	2000      	movs	r0, #0
 800ede2:	e7ad      	b.n	800ed40 <rcutils_string_map_reserve+0x20>
 800ede4:	200a      	movs	r0, #10
 800ede6:	e7ab      	b.n	800ed40 <rcutils_string_map_reserve+0x20>
 800ede8:	200b      	movs	r0, #11
 800edea:	4770      	bx	lr
 800edec:	1f13      	subs	r3, r2, #4
 800edee:	f1ac 0c04 	sub.w	ip, ip, #4
 800edf2:	4498      	add	r8, r3
 800edf4:	4460      	add	r0, ip
 800edf6:	4462      	add	r2, ip
 800edf8:	2300      	movs	r3, #0
 800edfa:	f842 3f04 	str.w	r3, [r2, #4]!
 800edfe:	4542      	cmp	r2, r8
 800ee00:	f840 3f04 	str.w	r3, [r0, #4]!
 800ee04:	d1f9      	bne.n	800edfa <rcutils_string_map_reserve+0xda>
 800ee06:	e7e6      	b.n	800edd6 <rcutils_string_map_reserve+0xb6>

0800ee08 <rcutils_string_map_init>:
 800ee08:	b082      	sub	sp, #8
 800ee0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee0c:	460e      	mov	r6, r1
 800ee0e:	a906      	add	r1, sp, #24
 800ee10:	e881 000c 	stmia.w	r1, {r2, r3}
 800ee14:	b380      	cbz	r0, 800ee78 <rcutils_string_map_init+0x70>
 800ee16:	6807      	ldr	r7, [r0, #0]
 800ee18:	4604      	mov	r4, r0
 800ee1a:	b12f      	cbz	r7, 800ee28 <rcutils_string_map_init+0x20>
 800ee1c:	251e      	movs	r5, #30
 800ee1e:	4628      	mov	r0, r5
 800ee20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ee24:	b002      	add	sp, #8
 800ee26:	4770      	bx	lr
 800ee28:	a806      	add	r0, sp, #24
 800ee2a:	f7ff ff37 	bl	800ec9c <rcutils_allocator_is_valid>
 800ee2e:	b318      	cbz	r0, 800ee78 <rcutils_string_map_init+0x70>
 800ee30:	9b06      	ldr	r3, [sp, #24]
 800ee32:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee34:	2024      	movs	r0, #36	@ 0x24
 800ee36:	4798      	blx	r3
 800ee38:	4605      	mov	r5, r0
 800ee3a:	6020      	str	r0, [r4, #0]
 800ee3c:	b310      	cbz	r0, 800ee84 <rcutils_string_map_init+0x7c>
 800ee3e:	f10d 0e18 	add.w	lr, sp, #24
 800ee42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee46:	f105 0c10 	add.w	ip, r5, #16
 800ee4a:	e9c5 7700 	strd	r7, r7, [r5]
 800ee4e:	e9c5 7702 	strd	r7, r7, [r5, #8]
 800ee52:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee56:	f8de 3000 	ldr.w	r3, [lr]
 800ee5a:	f8cc 3000 	str.w	r3, [ip]
 800ee5e:	4631      	mov	r1, r6
 800ee60:	4620      	mov	r0, r4
 800ee62:	f7ff ff5d 	bl	800ed20 <rcutils_string_map_reserve>
 800ee66:	4605      	mov	r5, r0
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	d0d8      	beq.n	800ee1e <rcutils_string_map_init+0x16>
 800ee6c:	9b07      	ldr	r3, [sp, #28]
 800ee6e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ee70:	6820      	ldr	r0, [r4, #0]
 800ee72:	4798      	blx	r3
 800ee74:	6027      	str	r7, [r4, #0]
 800ee76:	e7d2      	b.n	800ee1e <rcutils_string_map_init+0x16>
 800ee78:	250b      	movs	r5, #11
 800ee7a:	4628      	mov	r0, r5
 800ee7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ee80:	b002      	add	sp, #8
 800ee82:	4770      	bx	lr
 800ee84:	250a      	movs	r5, #10
 800ee86:	e7ca      	b.n	800ee1e <rcutils_string_map_init+0x16>

0800ee88 <rcutils_string_map_fini>:
 800ee88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee8c:	b082      	sub	sp, #8
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	d039      	beq.n	800ef06 <rcutils_string_map_fini+0x7e>
 800ee92:	6804      	ldr	r4, [r0, #0]
 800ee94:	4606      	mov	r6, r0
 800ee96:	2c00      	cmp	r4, #0
 800ee98:	d031      	beq.n	800eefe <rcutils_string_map_fini+0x76>
 800ee9a:	68a3      	ldr	r3, [r4, #8]
 800ee9c:	b323      	cbz	r3, 800eee8 <rcutils_string_map_fini+0x60>
 800ee9e:	2500      	movs	r5, #0
 800eea0:	6822      	ldr	r2, [r4, #0]
 800eea2:	46a8      	mov	r8, r5
 800eea4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800eea8:	b1d8      	cbz	r0, 800eee2 <rcutils_string_map_fini+0x5a>
 800eeaa:	6a21      	ldr	r1, [r4, #32]
 800eeac:	6967      	ldr	r7, [r4, #20]
 800eeae:	9101      	str	r1, [sp, #4]
 800eeb0:	47b8      	blx	r7
 800eeb2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800eeb6:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800eeba:	9901      	ldr	r1, [sp, #4]
 800eebc:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eec0:	47b8      	blx	r7
 800eec2:	68e3      	ldr	r3, [r4, #12]
 800eec4:	6862      	ldr	r2, [r4, #4]
 800eec6:	3b01      	subs	r3, #1
 800eec8:	f842 8025 	str.w	r8, [r2, r5, lsl #2]
 800eecc:	60e3      	str	r3, [r4, #12]
 800eece:	6834      	ldr	r4, [r6, #0]
 800eed0:	68a3      	ldr	r3, [r4, #8]
 800eed2:	3501      	adds	r5, #1
 800eed4:	429d      	cmp	r5, r3
 800eed6:	d207      	bcs.n	800eee8 <rcutils_string_map_fini+0x60>
 800eed8:	6822      	ldr	r2, [r4, #0]
 800eeda:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800eede:	2800      	cmp	r0, #0
 800eee0:	d1e3      	bne.n	800eeaa <rcutils_string_map_fini+0x22>
 800eee2:	3501      	adds	r5, #1
 800eee4:	429d      	cmp	r5, r3
 800eee6:	d3dd      	bcc.n	800eea4 <rcutils_string_map_fini+0x1c>
 800eee8:	2100      	movs	r1, #0
 800eeea:	4630      	mov	r0, r6
 800eeec:	f7ff ff18 	bl	800ed20 <rcutils_string_map_reserve>
 800eef0:	4604      	mov	r4, r0
 800eef2:	b920      	cbnz	r0, 800eefe <rcutils_string_map_fini+0x76>
 800eef4:	6830      	ldr	r0, [r6, #0]
 800eef6:	6943      	ldr	r3, [r0, #20]
 800eef8:	6a01      	ldr	r1, [r0, #32]
 800eefa:	4798      	blx	r3
 800eefc:	6034      	str	r4, [r6, #0]
 800eefe:	4620      	mov	r0, r4
 800ef00:	b002      	add	sp, #8
 800ef02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef06:	240b      	movs	r4, #11
 800ef08:	4620      	mov	r0, r4
 800ef0a:	b002      	add	sp, #8
 800ef0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ef10 <rcutils_string_map_getn>:
 800ef10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef14:	b082      	sub	sp, #8
 800ef16:	b308      	cbz	r0, 800ef5c <rcutils_string_map_getn+0x4c>
 800ef18:	6804      	ldr	r4, [r0, #0]
 800ef1a:	b304      	cbz	r4, 800ef5e <rcutils_string_map_getn+0x4e>
 800ef1c:	460d      	mov	r5, r1
 800ef1e:	b1e9      	cbz	r1, 800ef5c <rcutils_string_map_getn+0x4c>
 800ef20:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800ef24:	6827      	ldr	r7, [r4, #0]
 800ef26:	f1b9 0f00 	cmp.w	r9, #0
 800ef2a:	d017      	beq.n	800ef5c <rcutils_string_map_getn+0x4c>
 800ef2c:	4690      	mov	r8, r2
 800ef2e:	3f04      	subs	r7, #4
 800ef30:	2600      	movs	r6, #0
 800ef32:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800ef36:	9101      	str	r1, [sp, #4]
 800ef38:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800ef3c:	4608      	mov	r0, r1
 800ef3e:	3601      	adds	r6, #1
 800ef40:	b151      	cbz	r1, 800ef58 <rcutils_string_map_getn+0x48>
 800ef42:	f7f1 f9ad 	bl	80002a0 <strlen>
 800ef46:	4540      	cmp	r0, r8
 800ef48:	4602      	mov	r2, r0
 800ef4a:	9901      	ldr	r1, [sp, #4]
 800ef4c:	bf38      	it	cc
 800ef4e:	4642      	movcc	r2, r8
 800ef50:	4628      	mov	r0, r5
 800ef52:	f00b fc4c 	bl	801a7ee <strncmp>
 800ef56:	b130      	cbz	r0, 800ef66 <rcutils_string_map_getn+0x56>
 800ef58:	45b1      	cmp	r9, r6
 800ef5a:	d1ea      	bne.n	800ef32 <rcutils_string_map_getn+0x22>
 800ef5c:	2400      	movs	r4, #0
 800ef5e:	4620      	mov	r0, r4
 800ef60:	b002      	add	sp, #8
 800ef62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef66:	6863      	ldr	r3, [r4, #4]
 800ef68:	f853 400a 	ldr.w	r4, [r3, sl]
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	b002      	add	sp, #8
 800ef70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ef74 <rcutils_system_time_now>:
 800ef74:	b310      	cbz	r0, 800efbc <rcutils_system_time_now+0x48>
 800ef76:	b570      	push	{r4, r5, r6, lr}
 800ef78:	b084      	sub	sp, #16
 800ef7a:	4669      	mov	r1, sp
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	2001      	movs	r0, #1
 800ef80:	f7f4 f95a 	bl	8003238 <clock_gettime>
 800ef84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef88:	2800      	cmp	r0, #0
 800ef8a:	f171 0300 	sbcs.w	r3, r1, #0
 800ef8e:	db12      	blt.n	800efb6 <rcutils_system_time_now+0x42>
 800ef90:	9d02      	ldr	r5, [sp, #8]
 800ef92:	2d00      	cmp	r5, #0
 800ef94:	db0c      	blt.n	800efb0 <rcutils_system_time_now+0x3c>
 800ef96:	4e0a      	ldr	r6, [pc, #40]	@ (800efc0 <rcutils_system_time_now+0x4c>)
 800ef98:	fba0 2306 	umull	r2, r3, r0, r6
 800ef9c:	1952      	adds	r2, r2, r5
 800ef9e:	fb06 3301 	mla	r3, r6, r1, r3
 800efa2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800efa6:	2000      	movs	r0, #0
 800efa8:	e9c4 2300 	strd	r2, r3, [r4]
 800efac:	b004      	add	sp, #16
 800efae:	bd70      	pop	{r4, r5, r6, pc}
 800efb0:	ea50 0301 	orrs.w	r3, r0, r1
 800efb4:	d1ef      	bne.n	800ef96 <rcutils_system_time_now+0x22>
 800efb6:	2002      	movs	r0, #2
 800efb8:	b004      	add	sp, #16
 800efba:	bd70      	pop	{r4, r5, r6, pc}
 800efbc:	200b      	movs	r0, #11
 800efbe:	4770      	bx	lr
 800efc0:	3b9aca00 	.word	0x3b9aca00

0800efc4 <rcutils_steady_time_now>:
 800efc4:	b310      	cbz	r0, 800f00c <rcutils_steady_time_now+0x48>
 800efc6:	b570      	push	{r4, r5, r6, lr}
 800efc8:	b084      	sub	sp, #16
 800efca:	4669      	mov	r1, sp
 800efcc:	4604      	mov	r4, r0
 800efce:	2000      	movs	r0, #0
 800efd0:	f7f4 f932 	bl	8003238 <clock_gettime>
 800efd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800efd8:	2800      	cmp	r0, #0
 800efda:	f171 0300 	sbcs.w	r3, r1, #0
 800efde:	db12      	blt.n	800f006 <rcutils_steady_time_now+0x42>
 800efe0:	9d02      	ldr	r5, [sp, #8]
 800efe2:	2d00      	cmp	r5, #0
 800efe4:	db0c      	blt.n	800f000 <rcutils_steady_time_now+0x3c>
 800efe6:	4e0a      	ldr	r6, [pc, #40]	@ (800f010 <rcutils_steady_time_now+0x4c>)
 800efe8:	fba0 2306 	umull	r2, r3, r0, r6
 800efec:	1952      	adds	r2, r2, r5
 800efee:	fb06 3301 	mla	r3, r6, r1, r3
 800eff2:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
 800eff6:	2000      	movs	r0, #0
 800eff8:	e9c4 2300 	strd	r2, r3, [r4]
 800effc:	b004      	add	sp, #16
 800effe:	bd70      	pop	{r4, r5, r6, pc}
 800f000:	ea50 0301 	orrs.w	r3, r0, r1
 800f004:	d1ef      	bne.n	800efe6 <rcutils_steady_time_now+0x22>
 800f006:	2002      	movs	r0, #2
 800f008:	b004      	add	sp, #16
 800f00a:	bd70      	pop	{r4, r5, r6, pc}
 800f00c:	200b      	movs	r0, #11
 800f00e:	4770      	bx	lr
 800f010:	3b9aca00 	.word	0x3b9aca00

0800f014 <rmw_get_zero_initialized_init_options>:
 800f014:	b510      	push	{r4, lr}
 800f016:	2238      	movs	r2, #56	@ 0x38
 800f018:	4604      	mov	r4, r0
 800f01a:	2100      	movs	r1, #0
 800f01c:	f00b fbd2 	bl	801a7c4 <memset>
 800f020:	f104 0010 	add.w	r0, r4, #16
 800f024:	f000 f808 	bl	800f038 <rmw_get_default_security_options>
 800f028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f02c:	60e3      	str	r3, [r4, #12]
 800f02e:	4620      	mov	r0, r4
 800f030:	bd10      	pop	{r4, pc}
 800f032:	bf00      	nop

0800f034 <rmw_get_default_publisher_options>:
 800f034:	2000      	movs	r0, #0
 800f036:	4770      	bx	lr

0800f038 <rmw_get_default_security_options>:
 800f038:	2200      	movs	r2, #0
 800f03a:	7002      	strb	r2, [r0, #0]
 800f03c:	6042      	str	r2, [r0, #4]
 800f03e:	4770      	bx	lr

0800f040 <rmw_validate_full_topic_name>:
 800f040:	2800      	cmp	r0, #0
 800f042:	d062      	beq.n	800f10a <rmw_validate_full_topic_name+0xca>
 800f044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f048:	460d      	mov	r5, r1
 800f04a:	2900      	cmp	r1, #0
 800f04c:	d05f      	beq.n	800f10e <rmw_validate_full_topic_name+0xce>
 800f04e:	4616      	mov	r6, r2
 800f050:	4604      	mov	r4, r0
 800f052:	f7f1 f925 	bl	80002a0 <strlen>
 800f056:	b148      	cbz	r0, 800f06c <rmw_validate_full_topic_name+0x2c>
 800f058:	7823      	ldrb	r3, [r4, #0]
 800f05a:	2b2f      	cmp	r3, #47	@ 0x2f
 800f05c:	d00d      	beq.n	800f07a <rmw_validate_full_topic_name+0x3a>
 800f05e:	2302      	movs	r3, #2
 800f060:	602b      	str	r3, [r5, #0]
 800f062:	b13e      	cbz	r6, 800f074 <rmw_validate_full_topic_name+0x34>
 800f064:	2000      	movs	r0, #0
 800f066:	6030      	str	r0, [r6, #0]
 800f068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f06c:	2301      	movs	r3, #1
 800f06e:	602b      	str	r3, [r5, #0]
 800f070:	2e00      	cmp	r6, #0
 800f072:	d1f7      	bne.n	800f064 <rmw_validate_full_topic_name+0x24>
 800f074:	2000      	movs	r0, #0
 800f076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f07a:	1e47      	subs	r7, r0, #1
 800f07c:	5de3      	ldrb	r3, [r4, r7]
 800f07e:	2b2f      	cmp	r3, #47	@ 0x2f
 800f080:	d047      	beq.n	800f112 <rmw_validate_full_topic_name+0xd2>
 800f082:	1e63      	subs	r3, r4, #1
 800f084:	eb03 0900 	add.w	r9, r3, r0
 800f088:	f1c4 0e01 	rsb	lr, r4, #1
 800f08c:	eb0e 0803 	add.w	r8, lr, r3
 800f090:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800f094:	f021 0220 	bic.w	r2, r1, #32
 800f098:	3a41      	subs	r2, #65	@ 0x41
 800f09a:	2a19      	cmp	r2, #25
 800f09c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 800f0a0:	d90c      	bls.n	800f0bc <rmw_validate_full_topic_name+0x7c>
 800f0a2:	295f      	cmp	r1, #95	@ 0x5f
 800f0a4:	d00a      	beq.n	800f0bc <rmw_validate_full_topic_name+0x7c>
 800f0a6:	f1bc 0f0a 	cmp.w	ip, #10
 800f0aa:	d907      	bls.n	800f0bc <rmw_validate_full_topic_name+0x7c>
 800f0ac:	2304      	movs	r3, #4
 800f0ae:	602b      	str	r3, [r5, #0]
 800f0b0:	2e00      	cmp	r6, #0
 800f0b2:	d0df      	beq.n	800f074 <rmw_validate_full_topic_name+0x34>
 800f0b4:	f8c6 8000 	str.w	r8, [r6]
 800f0b8:	2000      	movs	r0, #0
 800f0ba:	e7d5      	b.n	800f068 <rmw_validate_full_topic_name+0x28>
 800f0bc:	454b      	cmp	r3, r9
 800f0be:	d1e5      	bne.n	800f08c <rmw_validate_full_topic_name+0x4c>
 800f0c0:	f8df e084 	ldr.w	lr, [pc, #132]	@ 800f148 <rmw_validate_full_topic_name+0x108>
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	f107 0801 	add.w	r8, r7, #1
 800f0ca:	e005      	b.n	800f0d8 <rmw_validate_full_topic_name+0x98>
 800f0cc:	4611      	mov	r1, r2
 800f0ce:	4288      	cmp	r0, r1
 800f0d0:	4613      	mov	r3, r2
 800f0d2:	f104 0401 	add.w	r4, r4, #1
 800f0d6:	d925      	bls.n	800f124 <rmw_validate_full_topic_name+0xe4>
 800f0d8:	429f      	cmp	r7, r3
 800f0da:	f103 0201 	add.w	r2, r3, #1
 800f0de:	d01e      	beq.n	800f11e <rmw_validate_full_topic_name+0xde>
 800f0e0:	7821      	ldrb	r1, [r4, #0]
 800f0e2:	292f      	cmp	r1, #47	@ 0x2f
 800f0e4:	d1f2      	bne.n	800f0cc <rmw_validate_full_topic_name+0x8c>
 800f0e6:	f894 c001 	ldrb.w	ip, [r4, #1]
 800f0ea:	1c5a      	adds	r2, r3, #1
 800f0ec:	f1bc 0f2f 	cmp.w	ip, #47	@ 0x2f
 800f0f0:	4611      	mov	r1, r2
 800f0f2:	d024      	beq.n	800f13e <rmw_validate_full_topic_name+0xfe>
 800f0f4:	f81c 300e 	ldrb.w	r3, [ip, lr]
 800f0f8:	075b      	lsls	r3, r3, #29
 800f0fa:	d5e8      	bpl.n	800f0ce <rmw_validate_full_topic_name+0x8e>
 800f0fc:	2306      	movs	r3, #6
 800f0fe:	602b      	str	r3, [r5, #0]
 800f100:	2e00      	cmp	r6, #0
 800f102:	d0b7      	beq.n	800f074 <rmw_validate_full_topic_name+0x34>
 800f104:	6032      	str	r2, [r6, #0]
 800f106:	2000      	movs	r0, #0
 800f108:	e7ae      	b.n	800f068 <rmw_validate_full_topic_name+0x28>
 800f10a:	200b      	movs	r0, #11
 800f10c:	4770      	bx	lr
 800f10e:	200b      	movs	r0, #11
 800f110:	e7aa      	b.n	800f068 <rmw_validate_full_topic_name+0x28>
 800f112:	2303      	movs	r3, #3
 800f114:	602b      	str	r3, [r5, #0]
 800f116:	2e00      	cmp	r6, #0
 800f118:	d0ac      	beq.n	800f074 <rmw_validate_full_topic_name+0x34>
 800f11a:	6037      	str	r7, [r6, #0]
 800f11c:	e7aa      	b.n	800f074 <rmw_validate_full_topic_name+0x34>
 800f11e:	4641      	mov	r1, r8
 800f120:	1c7a      	adds	r2, r7, #1
 800f122:	e7d4      	b.n	800f0ce <rmw_validate_full_topic_name+0x8e>
 800f124:	28f7      	cmp	r0, #247	@ 0xf7
 800f126:	d802      	bhi.n	800f12e <rmw_validate_full_topic_name+0xee>
 800f128:	2000      	movs	r0, #0
 800f12a:	6028      	str	r0, [r5, #0]
 800f12c:	e79c      	b.n	800f068 <rmw_validate_full_topic_name+0x28>
 800f12e:	2307      	movs	r3, #7
 800f130:	602b      	str	r3, [r5, #0]
 800f132:	2e00      	cmp	r6, #0
 800f134:	d09e      	beq.n	800f074 <rmw_validate_full_topic_name+0x34>
 800f136:	23f6      	movs	r3, #246	@ 0xf6
 800f138:	6033      	str	r3, [r6, #0]
 800f13a:	2000      	movs	r0, #0
 800f13c:	e794      	b.n	800f068 <rmw_validate_full_topic_name+0x28>
 800f13e:	2305      	movs	r3, #5
 800f140:	602b      	str	r3, [r5, #0]
 800f142:	2e00      	cmp	r6, #0
 800f144:	d1de      	bne.n	800f104 <rmw_validate_full_topic_name+0xc4>
 800f146:	e795      	b.n	800f074 <rmw_validate_full_topic_name+0x34>
 800f148:	0801e8b0 	.word	0x0801e8b0

0800f14c <rmw_uros_set_custom_transport>:
 800f14c:	b470      	push	{r4, r5, r6}
 800f14e:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800f152:	b162      	cbz	r2, 800f16e <rmw_uros_set_custom_transport+0x22>
 800f154:	b15b      	cbz	r3, 800f16e <rmw_uros_set_custom_transport+0x22>
 800f156:	b155      	cbz	r5, 800f16e <rmw_uros_set_custom_transport+0x22>
 800f158:	b14e      	cbz	r6, 800f16e <rmw_uros_set_custom_transport+0x22>
 800f15a:	4c06      	ldr	r4, [pc, #24]	@ (800f174 <rmw_uros_set_custom_transport+0x28>)
 800f15c:	7020      	strb	r0, [r4, #0]
 800f15e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f162:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f166:	6166      	str	r6, [r4, #20]
 800f168:	2000      	movs	r0, #0
 800f16a:	bc70      	pop	{r4, r5, r6}
 800f16c:	4770      	bx	lr
 800f16e:	200b      	movs	r0, #11
 800f170:	bc70      	pop	{r4, r5, r6}
 800f172:	4770      	bx	lr
 800f174:	2000a010 	.word	0x2000a010

0800f178 <rmw_init_options_init>:
 800f178:	b084      	sub	sp, #16
 800f17a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f17e:	ad09      	add	r5, sp, #36	@ 0x24
 800f180:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f184:	b130      	cbz	r0, 800f194 <rmw_init_options_init+0x1c>
 800f186:	4604      	mov	r4, r0
 800f188:	4628      	mov	r0, r5
 800f18a:	f7ff fd87 	bl	800ec9c <rcutils_allocator_is_valid>
 800f18e:	b108      	cbz	r0, 800f194 <rmw_init_options_init+0x1c>
 800f190:	68a3      	ldr	r3, [r4, #8]
 800f192:	b123      	cbz	r3, 800f19e <rmw_init_options_init+0x26>
 800f194:	200b      	movs	r0, #11
 800f196:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f19a:	b004      	add	sp, #16
 800f19c:	4770      	bx	lr
 800f19e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1a0:	4f1c      	ldr	r7, [pc, #112]	@ (800f214 <rmw_init_options_init+0x9c>)
 800f1a2:	682e      	ldr	r6, [r5, #0]
 800f1a4:	683d      	ldr	r5, [r7, #0]
 800f1a6:	60a5      	str	r5, [r4, #8]
 800f1a8:	f04f 0800 	mov.w	r8, #0
 800f1ac:	f04f 0900 	mov.w	r9, #0
 800f1b0:	f104 0520 	add.w	r5, r4, #32
 800f1b4:	e9c4 8900 	strd	r8, r9, [r4]
 800f1b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f1ba:	4b17      	ldr	r3, [pc, #92]	@ (800f218 <rmw_init_options_init+0xa0>)
 800f1bc:	4817      	ldr	r0, [pc, #92]	@ (800f21c <rmw_init_options_init+0xa4>)
 800f1be:	602e      	str	r6, [r5, #0]
 800f1c0:	4917      	ldr	r1, [pc, #92]	@ (800f220 <rmw_init_options_init+0xa8>)
 800f1c2:	61e3      	str	r3, [r4, #28]
 800f1c4:	2203      	movs	r2, #3
 800f1c6:	f000 ff37 	bl	8010038 <rmw_uxrce_init_init_options_impl_memory>
 800f1ca:	4814      	ldr	r0, [pc, #80]	@ (800f21c <rmw_init_options_init+0xa4>)
 800f1cc:	f007 fc92 	bl	8016af4 <get_memory>
 800f1d0:	b1e8      	cbz	r0, 800f20e <rmw_init_options_init+0x96>
 800f1d2:	4a14      	ldr	r2, [pc, #80]	@ (800f224 <rmw_init_options_init+0xac>)
 800f1d4:	68c3      	ldr	r3, [r0, #12]
 800f1d6:	6851      	ldr	r1, [r2, #4]
 800f1d8:	7810      	ldrb	r0, [r2, #0]
 800f1da:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1dc:	7418      	strb	r0, [r3, #16]
 800f1de:	6159      	str	r1, [r3, #20]
 800f1e0:	e9d2 5002 	ldrd	r5, r0, [r2, #8]
 800f1e4:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 800f1e8:	e9c3 5006 	strd	r5, r0, [r3, #24]
 800f1ec:	e9c3 1208 	strd	r1, r2, [r3, #32]
 800f1f0:	f003 fdd4 	bl	8012d9c <uxr_nanos>
 800f1f4:	f00a f8b0 	bl	8019358 <srand>
 800f1f8:	f00a f8dc 	bl	80193b4 <rand>
 800f1fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f1fe:	6298      	str	r0, [r3, #40]	@ 0x28
 800f200:	2800      	cmp	r0, #0
 800f202:	d0f9      	beq.n	800f1f8 <rmw_init_options_init+0x80>
 800f204:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f208:	2000      	movs	r0, #0
 800f20a:	b004      	add	sp, #16
 800f20c:	4770      	bx	lr
 800f20e:	2001      	movs	r0, #1
 800f210:	e7c1      	b.n	800f196 <rmw_init_options_init+0x1e>
 800f212:	bf00      	nop
 800f214:	0801e824 	.word	0x0801e824
 800f218:	0801e090 	.word	0x0801e090
 800f21c:	2000d32c 	.word	0x2000d32c
 800f220:	2000cf80 	.word	0x2000cf80
 800f224:	2000a010 	.word	0x2000a010

0800f228 <rmw_init_options_copy>:
 800f228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f22a:	b158      	cbz	r0, 800f244 <rmw_init_options_copy+0x1c>
 800f22c:	460e      	mov	r6, r1
 800f22e:	b149      	cbz	r1, 800f244 <rmw_init_options_copy+0x1c>
 800f230:	4604      	mov	r4, r0
 800f232:	6880      	ldr	r0, [r0, #8]
 800f234:	b120      	cbz	r0, 800f240 <rmw_init_options_copy+0x18>
 800f236:	4b1b      	ldr	r3, [pc, #108]	@ (800f2a4 <rmw_init_options_copy+0x7c>)
 800f238:	6819      	ldr	r1, [r3, #0]
 800f23a:	f7f0 ffd1 	bl	80001e0 <strcmp>
 800f23e:	bb60      	cbnz	r0, 800f29a <rmw_init_options_copy+0x72>
 800f240:	68b3      	ldr	r3, [r6, #8]
 800f242:	b113      	cbz	r3, 800f24a <rmw_init_options_copy+0x22>
 800f244:	230b      	movs	r3, #11
 800f246:	4618      	mov	r0, r3
 800f248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f24a:	4623      	mov	r3, r4
 800f24c:	4632      	mov	r2, r6
 800f24e:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800f252:	681d      	ldr	r5, [r3, #0]
 800f254:	6858      	ldr	r0, [r3, #4]
 800f256:	6899      	ldr	r1, [r3, #8]
 800f258:	68df      	ldr	r7, [r3, #12]
 800f25a:	60d7      	str	r7, [r2, #12]
 800f25c:	3310      	adds	r3, #16
 800f25e:	4563      	cmp	r3, ip
 800f260:	6015      	str	r5, [r2, #0]
 800f262:	6050      	str	r0, [r2, #4]
 800f264:	6091      	str	r1, [r2, #8]
 800f266:	f102 0210 	add.w	r2, r2, #16
 800f26a:	d1f2      	bne.n	800f252 <rmw_init_options_copy+0x2a>
 800f26c:	6819      	ldr	r1, [r3, #0]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	480d      	ldr	r0, [pc, #52]	@ (800f2a8 <rmw_init_options_copy+0x80>)
 800f272:	6053      	str	r3, [r2, #4]
 800f274:	6011      	str	r1, [r2, #0]
 800f276:	f007 fc3d 	bl	8016af4 <get_memory>
 800f27a:	b188      	cbz	r0, 800f2a0 <rmw_init_options_copy+0x78>
 800f27c:	68c5      	ldr	r5, [r0, #12]
 800f27e:	6375      	str	r5, [r6, #52]	@ 0x34
 800f280:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800f282:	3610      	adds	r6, #16
 800f284:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f286:	f105 0410 	add.w	r4, r5, #16
 800f28a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f28c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f290:	2300      	movs	r3, #0
 800f292:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f296:	4618      	mov	r0, r3
 800f298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f29a:	230c      	movs	r3, #12
 800f29c:	4618      	mov	r0, r3
 800f29e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	e7d0      	b.n	800f246 <rmw_init_options_copy+0x1e>
 800f2a4:	0801e824 	.word	0x0801e824
 800f2a8:	2000d32c 	.word	0x2000d32c

0800f2ac <rmw_init_options_fini>:
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d036      	beq.n	800f31e <rmw_init_options_fini+0x72>
 800f2b0:	b530      	push	{r4, r5, lr}
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	b08f      	sub	sp, #60	@ 0x3c
 800f2b6:	3020      	adds	r0, #32
 800f2b8:	f7ff fcf0 	bl	800ec9c <rcutils_allocator_is_valid>
 800f2bc:	b328      	cbz	r0, 800f30a <rmw_init_options_fini+0x5e>
 800f2be:	68a0      	ldr	r0, [r4, #8]
 800f2c0:	b120      	cbz	r0, 800f2cc <rmw_init_options_fini+0x20>
 800f2c2:	4b18      	ldr	r3, [pc, #96]	@ (800f324 <rmw_init_options_fini+0x78>)
 800f2c4:	6819      	ldr	r1, [r3, #0]
 800f2c6:	f7f0 ff8b 	bl	80001e0 <strcmp>
 800f2ca:	bb30      	cbnz	r0, 800f31a <rmw_init_options_fini+0x6e>
 800f2cc:	4b16      	ldr	r3, [pc, #88]	@ (800f328 <rmw_init_options_fini+0x7c>)
 800f2ce:	6819      	ldr	r1, [r3, #0]
 800f2d0:	b1f9      	cbz	r1, 800f312 <rmw_init_options_fini+0x66>
 800f2d2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800f2d4:	e001      	b.n	800f2da <rmw_init_options_fini+0x2e>
 800f2d6:	6889      	ldr	r1, [r1, #8]
 800f2d8:	b1d9      	cbz	r1, 800f312 <rmw_init_options_fini+0x66>
 800f2da:	68cb      	ldr	r3, [r1, #12]
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d1fa      	bne.n	800f2d6 <rmw_init_options_fini+0x2a>
 800f2e0:	4811      	ldr	r0, [pc, #68]	@ (800f328 <rmw_init_options_fini+0x7c>)
 800f2e2:	f007 fc17 	bl	8016b14 <put_memory>
 800f2e6:	466d      	mov	r5, sp
 800f2e8:	4668      	mov	r0, sp
 800f2ea:	f7ff fe93 	bl	800f014 <rmw_get_zero_initialized_init_options>
 800f2ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f2f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f2f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f2f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f2fe:	e884 0003 	stmia.w	r4, {r0, r1}
 800f302:	2300      	movs	r3, #0
 800f304:	4618      	mov	r0, r3
 800f306:	b00f      	add	sp, #60	@ 0x3c
 800f308:	bd30      	pop	{r4, r5, pc}
 800f30a:	230b      	movs	r3, #11
 800f30c:	4618      	mov	r0, r3
 800f30e:	b00f      	add	sp, #60	@ 0x3c
 800f310:	bd30      	pop	{r4, r5, pc}
 800f312:	2301      	movs	r3, #1
 800f314:	4618      	mov	r0, r3
 800f316:	b00f      	add	sp, #60	@ 0x3c
 800f318:	bd30      	pop	{r4, r5, pc}
 800f31a:	230c      	movs	r3, #12
 800f31c:	e7f2      	b.n	800f304 <rmw_init_options_fini+0x58>
 800f31e:	230b      	movs	r3, #11
 800f320:	4618      	mov	r0, r3
 800f322:	4770      	bx	lr
 800f324:	0801e824 	.word	0x0801e824
 800f328:	2000d32c 	.word	0x2000d32c

0800f32c <rmw_init>:
 800f32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f330:	b082      	sub	sp, #8
 800f332:	2800      	cmp	r0, #0
 800f334:	f000 80d6 	beq.w	800f4e4 <rmw_init+0x1b8>
 800f338:	460e      	mov	r6, r1
 800f33a:	2900      	cmp	r1, #0
 800f33c:	f000 80d2 	beq.w	800f4e4 <rmw_init+0x1b8>
 800f340:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f342:	4605      	mov	r5, r0
 800f344:	2b00      	cmp	r3, #0
 800f346:	f000 80cd 	beq.w	800f4e4 <rmw_init+0x1b8>
 800f34a:	4b79      	ldr	r3, [pc, #484]	@ (800f530 <rmw_init+0x204>)
 800f34c:	6880      	ldr	r0, [r0, #8]
 800f34e:	f8d3 9000 	ldr.w	r9, [r3]
 800f352:	b128      	cbz	r0, 800f360 <rmw_init+0x34>
 800f354:	4649      	mov	r1, r9
 800f356:	f7f0 ff43 	bl	80001e0 <strcmp>
 800f35a:	2800      	cmp	r0, #0
 800f35c:	f040 80cc 	bne.w	800f4f8 <rmw_init+0x1cc>
 800f360:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f364:	68eb      	ldr	r3, [r5, #12]
 800f366:	61f3      	str	r3, [r6, #28]
 800f368:	e9c6 0100 	strd	r0, r1, [r6]
 800f36c:	2201      	movs	r2, #1
 800f36e:	4971      	ldr	r1, [pc, #452]	@ (800f534 <rmw_init+0x208>)
 800f370:	4871      	ldr	r0, [pc, #452]	@ (800f538 <rmw_init+0x20c>)
 800f372:	f8c6 9008 	str.w	r9, [r6, #8]
 800f376:	f000 fe07 	bl	800ff88 <rmw_uxrce_init_session_memory>
 800f37a:	4870      	ldr	r0, [pc, #448]	@ (800f53c <rmw_init+0x210>)
 800f37c:	4970      	ldr	r1, [pc, #448]	@ (800f540 <rmw_init+0x214>)
 800f37e:	2204      	movs	r2, #4
 800f380:	f000 fe3c 	bl	800fffc <rmw_uxrce_init_static_input_buffer_memory>
 800f384:	486c      	ldr	r0, [pc, #432]	@ (800f538 <rmw_init+0x20c>)
 800f386:	f007 fbb5 	bl	8016af4 <get_memory>
 800f38a:	2800      	cmp	r0, #0
 800f38c:	f000 80af 	beq.w	800f4ee <rmw_init+0x1c2>
 800f390:	6b6f      	ldr	r7, [r5, #52]	@ 0x34
 800f392:	68c4      	ldr	r4, [r0, #12]
 800f394:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f396:	7c39      	ldrb	r1, [r7, #16]
 800f398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f39c:	9001      	str	r0, [sp, #4]
 800f39e:	6a38      	ldr	r0, [r7, #32]
 800f3a0:	9000      	str	r0, [sp, #0]
 800f3a2:	f104 0a10 	add.w	sl, r4, #16
 800f3a6:	4650      	mov	r0, sl
 800f3a8:	f001 fca0 	bl	8010cec <uxr_set_custom_transport_callbacks>
 800f3ac:	f241 5294 	movw	r2, #5524	@ 0x1594
 800f3b0:	f241 5398 	movw	r3, #5528	@ 0x1598
 800f3b4:	f04f 0800 	mov.w	r8, #0
 800f3b8:	f241 509c 	movw	r0, #5532	@ 0x159c
 800f3bc:	f504 51ad 	add.w	r1, r4, #5536	@ 0x15a0
 800f3c0:	f844 8002 	str.w	r8, [r4, r2]
 800f3c4:	f844 8003 	str.w	r8, [r4, r3]
 800f3c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f3cc:	f504 735e 	add.w	r3, r4, #888	@ 0x378
 800f3d0:	f844 8000 	str.w	r8, [r4, r0]
 800f3d4:	e9c4 33e1 	strd	r3, r3, [r4, #900]	@ 0x384
 800f3d8:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800f3dc:	4859      	ldr	r0, [pc, #356]	@ (800f544 <rmw_init+0x218>)
 800f3de:	f8c1 8000 	str.w	r8, [r1]
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	e9c4 98da 	strd	r9, r8, [r4, #872]	@ 0x368
 800f3e8:	4957      	ldr	r1, [pc, #348]	@ (800f548 <rmw_init+0x21c>)
 800f3ea:	64b4      	str	r4, [r6, #72]	@ 0x48
 800f3ec:	f000 fdb2 	bl	800ff54 <rmw_uxrce_init_node_memory>
 800f3f0:	4956      	ldr	r1, [pc, #344]	@ (800f54c <rmw_init+0x220>)
 800f3f2:	4857      	ldr	r0, [pc, #348]	@ (800f550 <rmw_init+0x224>)
 800f3f4:	2205      	movs	r2, #5
 800f3f6:	f000 fd93 	bl	800ff20 <rmw_uxrce_init_subscription_memory>
 800f3fa:	4956      	ldr	r1, [pc, #344]	@ (800f554 <rmw_init+0x228>)
 800f3fc:	4856      	ldr	r0, [pc, #344]	@ (800f558 <rmw_init+0x22c>)
 800f3fe:	220a      	movs	r2, #10
 800f400:	f000 fd74 	bl	800feec <rmw_uxrce_init_publisher_memory>
 800f404:	4955      	ldr	r1, [pc, #340]	@ (800f55c <rmw_init+0x230>)
 800f406:	4856      	ldr	r0, [pc, #344]	@ (800f560 <rmw_init+0x234>)
 800f408:	2201      	movs	r2, #1
 800f40a:	f000 fd3b 	bl	800fe84 <rmw_uxrce_init_service_memory>
 800f40e:	4955      	ldr	r1, [pc, #340]	@ (800f564 <rmw_init+0x238>)
 800f410:	4855      	ldr	r0, [pc, #340]	@ (800f568 <rmw_init+0x23c>)
 800f412:	2201      	movs	r2, #1
 800f414:	f000 fd50 	bl	800feb8 <rmw_uxrce_init_client_memory>
 800f418:	4954      	ldr	r1, [pc, #336]	@ (800f56c <rmw_init+0x240>)
 800f41a:	4855      	ldr	r0, [pc, #340]	@ (800f570 <rmw_init+0x244>)
 800f41c:	220f      	movs	r2, #15
 800f41e:	f000 fdd1 	bl	800ffc4 <rmw_uxrce_init_topic_memory>
 800f422:	4954      	ldr	r1, [pc, #336]	@ (800f574 <rmw_init+0x248>)
 800f424:	4854      	ldr	r0, [pc, #336]	@ (800f578 <rmw_init+0x24c>)
 800f426:	2203      	movs	r2, #3
 800f428:	f000 fe06 	bl	8010038 <rmw_uxrce_init_init_options_impl_memory>
 800f42c:	4953      	ldr	r1, [pc, #332]	@ (800f57c <rmw_init+0x250>)
 800f42e:	4854      	ldr	r0, [pc, #336]	@ (800f580 <rmw_init+0x254>)
 800f430:	2204      	movs	r2, #4
 800f432:	f000 fe1b 	bl	801006c <rmw_uxrce_init_wait_set_memory>
 800f436:	4953      	ldr	r1, [pc, #332]	@ (800f584 <rmw_init+0x258>)
 800f438:	4853      	ldr	r0, [pc, #332]	@ (800f588 <rmw_init+0x25c>)
 800f43a:	2204      	movs	r2, #4
 800f43c:	f000 fe32 	bl	80100a4 <rmw_uxrce_init_guard_condition_memory>
 800f440:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800f442:	6cb0      	ldr	r0, [r6, #72]	@ 0x48
 800f444:	4642      	mov	r2, r8
 800f446:	f000 fd05 	bl	800fe54 <rmw_uxrce_transport_init>
 800f44a:	4607      	mov	r7, r0
 800f44c:	2800      	cmp	r0, #0
 800f44e:	d158      	bne.n	800f502 <rmw_init+0x1d6>
 800f450:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800f452:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800f456:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f458:	4628      	mov	r0, r5
 800f45a:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800f45e:	f001 fe6b 	bl	8011138 <uxr_init_session>
 800f462:	494a      	ldr	r1, [pc, #296]	@ (800f58c <rmw_init+0x260>)
 800f464:	4622      	mov	r2, r4
 800f466:	4628      	mov	r0, r5
 800f468:	f001 fe88 	bl	801117c <uxr_set_topic_callback>
 800f46c:	4948      	ldr	r1, [pc, #288]	@ (800f590 <rmw_init+0x264>)
 800f46e:	463a      	mov	r2, r7
 800f470:	4628      	mov	r0, r5
 800f472:	f001 fe7f 	bl	8011174 <uxr_set_status_callback>
 800f476:	4947      	ldr	r1, [pc, #284]	@ (800f594 <rmw_init+0x268>)
 800f478:	463a      	mov	r2, r7
 800f47a:	4628      	mov	r0, r5
 800f47c:	f001 fe82 	bl	8011184 <uxr_set_request_callback>
 800f480:	4945      	ldr	r1, [pc, #276]	@ (800f598 <rmw_init+0x26c>)
 800f482:	463a      	mov	r2, r7
 800f484:	4628      	mov	r0, r5
 800f486:	f001 fe81 	bl	801118c <uxr_set_reply_callback>
 800f48a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f48e:	2304      	movs	r3, #4
 800f490:	0092      	lsls	r2, r2, #2
 800f492:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800f496:	4628      	mov	r0, r5
 800f498:	f001 feb8 	bl	801120c <uxr_create_input_reliable_stream>
 800f49c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f4a0:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800f4a4:	0092      	lsls	r2, r2, #2
 800f4a6:	2304      	movs	r3, #4
 800f4a8:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800f4ac:	4628      	mov	r0, r5
 800f4ae:	f001 fe83 	bl	80111b8 <uxr_create_output_reliable_stream>
 800f4b2:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	f001 fea2 	bl	8011200 <uxr_create_input_best_effort_stream>
 800f4bc:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800f4c0:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800f4c4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f4c8:	4628      	mov	r0, r5
 800f4ca:	3114      	adds	r1, #20
 800f4cc:	f001 fe62 	bl	8011194 <uxr_create_output_best_effort_stream>
 800f4d0:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800f4d4:	4628      	mov	r0, r5
 800f4d6:	f002 faf3 	bl	8011ac0 <uxr_create_session>
 800f4da:	b1f8      	cbz	r0, 800f51c <rmw_init+0x1f0>
 800f4dc:	4638      	mov	r0, r7
 800f4de:	b002      	add	sp, #8
 800f4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e4:	270b      	movs	r7, #11
 800f4e6:	4638      	mov	r0, r7
 800f4e8:	b002      	add	sp, #8
 800f4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ee:	2701      	movs	r7, #1
 800f4f0:	4638      	mov	r0, r7
 800f4f2:	b002      	add	sp, #8
 800f4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4f8:	270c      	movs	r7, #12
 800f4fa:	4638      	mov	r0, r7
 800f4fc:	b002      	add	sp, #8
 800f4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f502:	4650      	mov	r0, sl
 800f504:	f001 fc32 	bl	8010d6c <uxr_close_custom_transport>
 800f508:	480b      	ldr	r0, [pc, #44]	@ (800f538 <rmw_init+0x20c>)
 800f50a:	4621      	mov	r1, r4
 800f50c:	f007 fb02 	bl	8016b14 <put_memory>
 800f510:	4638      	mov	r0, r7
 800f512:	f8c6 8048 	str.w	r8, [r6, #72]	@ 0x48
 800f516:	b002      	add	sp, #8
 800f518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f51c:	4650      	mov	r0, sl
 800f51e:	f001 fc25 	bl	8010d6c <uxr_close_custom_transport>
 800f522:	4805      	ldr	r0, [pc, #20]	@ (800f538 <rmw_init+0x20c>)
 800f524:	4621      	mov	r1, r4
 800f526:	f007 faf5 	bl	8016b14 <put_memory>
 800f52a:	64b7      	str	r7, [r6, #72]	@ 0x48
 800f52c:	2701      	movs	r7, #1
 800f52e:	e7d5      	b.n	800f4dc <rmw_init+0x1b0>
 800f530:	0801e824 	.word	0x0801e824
 800f534:	2000d408 	.word	0x2000d408
 800f538:	2000d1d8 	.word	0x2000d1d8
 800f53c:	2000a030 	.word	0x2000a030
 800f540:	2000ae10 	.word	0x2000ae10
 800f544:	2000d004 	.word	0x2000d004
 800f548:	2000d1e8 	.word	0x2000d1e8
 800f54c:	2000a938 	.word	0x2000a938
 800f550:	2000d29c 	.word	0x2000d29c
 800f554:	2000a050 	.word	0x2000a050
 800f558:	2000a040 	.word	0x2000a040
 800f55c:	2000d340 	.word	0x2000d340
 800f560:	2000d28c 	.word	0x2000d28c
 800f564:	2000ad48 	.word	0x2000ad48
 800f568:	2000a8c0 	.word	0x2000a8c0
 800f56c:	2000d014 	.word	0x2000d014
 800f570:	2000d1c8 	.word	0x2000d1c8
 800f574:	2000cf80 	.word	0x2000cf80
 800f578:	2000d32c 	.word	0x2000d32c
 800f57c:	2000cf10 	.word	0x2000cf10
 800f580:	2000e9b0 	.word	0x2000e9b0
 800f584:	2000d2ac 	.word	0x2000d2ac
 800f588:	2000d1b8 	.word	0x2000d1b8
 800f58c:	08016935 	.word	0x08016935
 800f590:	0801692d 	.word	0x0801692d
 800f594:	080169c9 	.word	0x080169c9
 800f598:	08016a61 	.word	0x08016a61

0800f59c <rmw_context_fini>:
 800f59c:	4b17      	ldr	r3, [pc, #92]	@ (800f5fc <rmw_context_fini+0x60>)
 800f59e:	b570      	push	{r4, r5, r6, lr}
 800f5a0:	681c      	ldr	r4, [r3, #0]
 800f5a2:	4605      	mov	r5, r0
 800f5a4:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 800f5a6:	b33c      	cbz	r4, 800f5f8 <rmw_context_fini+0x5c>
 800f5a8:	2600      	movs	r6, #0
 800f5aa:	e9d4 4302 	ldrd	r4, r3, [r4, #8]
 800f5ae:	691a      	ldr	r2, [r3, #16]
 800f5b0:	4282      	cmp	r2, r0
 800f5b2:	d018      	beq.n	800f5e6 <rmw_context_fini+0x4a>
 800f5b4:	2c00      	cmp	r4, #0
 800f5b6:	d1f8      	bne.n	800f5aa <rmw_context_fini+0xe>
 800f5b8:	b188      	cbz	r0, 800f5de <rmw_context_fini+0x42>
 800f5ba:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f5be:	789b      	ldrb	r3, [r3, #2]
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	bf14      	ite	ne
 800f5c4:	210a      	movne	r1, #10
 800f5c6:	2100      	moveq	r1, #0
 800f5c8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f5cc:	f002 fc3a 	bl	8011e44 <uxr_delete_session_retries>
 800f5d0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f5d2:	f000 fd81 	bl	80100d8 <rmw_uxrce_fini_session_memory>
 800f5d6:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f5d8:	3010      	adds	r0, #16
 800f5da:	f001 fbc7 	bl	8010d6c <uxr_close_custom_transport>
 800f5de:	2300      	movs	r3, #0
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	64ab      	str	r3, [r5, #72]	@ 0x48
 800f5e4:	bd70      	pop	{r4, r5, r6, pc}
 800f5e6:	f103 0018 	add.w	r0, r3, #24
 800f5ea:	f000 f89b 	bl	800f724 <rmw_destroy_node>
 800f5ee:	4606      	mov	r6, r0
 800f5f0:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f5f2:	2c00      	cmp	r4, #0
 800f5f4:	d1d9      	bne.n	800f5aa <rmw_context_fini+0xe>
 800f5f6:	e7df      	b.n	800f5b8 <rmw_context_fini+0x1c>
 800f5f8:	4626      	mov	r6, r4
 800f5fa:	e7dd      	b.n	800f5b8 <rmw_context_fini+0x1c>
 800f5fc:	2000d004 	.word	0x2000d004

0800f600 <create_node>:
 800f600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f604:	b083      	sub	sp, #12
 800f606:	2b00      	cmp	r3, #0
 800f608:	d05f      	beq.n	800f6ca <create_node+0xca>
 800f60a:	4606      	mov	r6, r0
 800f60c:	4835      	ldr	r0, [pc, #212]	@ (800f6e4 <create_node+0xe4>)
 800f60e:	460f      	mov	r7, r1
 800f610:	4690      	mov	r8, r2
 800f612:	461d      	mov	r5, r3
 800f614:	f007 fa6e 	bl	8016af4 <get_memory>
 800f618:	2800      	cmp	r0, #0
 800f61a:	d056      	beq.n	800f6ca <create_node+0xca>
 800f61c:	68c4      	ldr	r4, [r0, #12]
 800f61e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800f620:	6123      	str	r3, [r4, #16]
 800f622:	f007 facf 	bl	8016bc4 <rmw_get_implementation_identifier>
 800f626:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800f62a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800f62e:	f8c4 9020 	str.w	r9, [r4, #32]
 800f632:	4630      	mov	r0, r6
 800f634:	f7f0 fe34 	bl	80002a0 <strlen>
 800f638:	1c42      	adds	r2, r0, #1
 800f63a:	2a3c      	cmp	r2, #60	@ 0x3c
 800f63c:	f104 0518 	add.w	r5, r4, #24
 800f640:	d840      	bhi.n	800f6c4 <create_node+0xc4>
 800f642:	4648      	mov	r0, r9
 800f644:	4631      	mov	r1, r6
 800f646:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800f64a:	f00b f9de 	bl	801aa0a <memcpy>
 800f64e:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800f652:	4638      	mov	r0, r7
 800f654:	f7f0 fe24 	bl	80002a0 <strlen>
 800f658:	1c42      	adds	r2, r0, #1
 800f65a:	2a3c      	cmp	r2, #60	@ 0x3c
 800f65c:	d832      	bhi.n	800f6c4 <create_node+0xc4>
 800f65e:	4639      	mov	r1, r7
 800f660:	4648      	mov	r0, r9
 800f662:	f00b f9d2 	bl	801aa0a <memcpy>
 800f666:	f241 5394 	movw	r3, #5524	@ 0x1594
 800f66a:	6922      	ldr	r2, [r4, #16]
 800f66c:	5ad0      	ldrh	r0, [r2, r3]
 800f66e:	2101      	movs	r1, #1
 800f670:	eb00 0c01 	add.w	ip, r0, r1
 800f674:	f822 c003 	strh.w	ip, [r2, r3]
 800f678:	f001 fb7c 	bl	8010d74 <uxr_object_id>
 800f67c:	6160      	str	r0, [r4, #20]
 800f67e:	783b      	ldrb	r3, [r7, #0]
 800f680:	2b2f      	cmp	r3, #47	@ 0x2f
 800f682:	d127      	bne.n	800f6d4 <create_node+0xd4>
 800f684:	787b      	ldrb	r3, [r7, #1]
 800f686:	bb2b      	cbnz	r3, 800f6d4 <create_node+0xd4>
 800f688:	4a17      	ldr	r2, [pc, #92]	@ (800f6e8 <create_node+0xe8>)
 800f68a:	4818      	ldr	r0, [pc, #96]	@ (800f6ec <create_node+0xec>)
 800f68c:	4633      	mov	r3, r6
 800f68e:	213c      	movs	r1, #60	@ 0x3c
 800f690:	f00a ff1a 	bl	801a4c8 <sniprintf>
 800f694:	6920      	ldr	r0, [r4, #16]
 800f696:	4b15      	ldr	r3, [pc, #84]	@ (800f6ec <create_node+0xec>)
 800f698:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800f69c:	9300      	str	r3, [sp, #0]
 800f69e:	2306      	movs	r3, #6
 800f6a0:	9301      	str	r3, [sp, #4]
 800f6a2:	6811      	ldr	r1, [r2, #0]
 800f6a4:	6962      	ldr	r2, [r4, #20]
 800f6a6:	fa1f f388 	uxth.w	r3, r8
 800f6aa:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f6ae:	f001 f8eb 	bl	8010888 <uxr_buffer_create_participant_bin>
 800f6b2:	4602      	mov	r2, r0
 800f6b4:	6920      	ldr	r0, [r4, #16]
 800f6b6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800f6ba:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800f6be:	f000 fe7b 	bl	80103b8 <run_xrce_session>
 800f6c2:	b918      	cbnz	r0, 800f6cc <create_node+0xcc>
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	f000 fd0d 	bl	80100e4 <rmw_uxrce_fini_node_memory>
 800f6ca:	2500      	movs	r5, #0
 800f6cc:	4628      	mov	r0, r5
 800f6ce:	b003      	add	sp, #12
 800f6d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6d4:	4a06      	ldr	r2, [pc, #24]	@ (800f6f0 <create_node+0xf0>)
 800f6d6:	9600      	str	r6, [sp, #0]
 800f6d8:	463b      	mov	r3, r7
 800f6da:	213c      	movs	r1, #60	@ 0x3c
 800f6dc:	4803      	ldr	r0, [pc, #12]	@ (800f6ec <create_node+0xec>)
 800f6de:	f00a fef3 	bl	801a4c8 <sniprintf>
 800f6e2:	e7d7      	b.n	800f694 <create_node+0x94>
 800f6e4:	2000d004 	.word	0x2000d004
 800f6e8:	0801e0d0 	.word	0x0801e0d0
 800f6ec:	20009d28 	.word	0x20009d28
 800f6f0:	0801e094 	.word	0x0801e094

0800f6f4 <rmw_create_node>:
 800f6f4:	b199      	cbz	r1, 800f71e <rmw_create_node+0x2a>
 800f6f6:	b430      	push	{r4, r5}
 800f6f8:	4615      	mov	r5, r2
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	780b      	ldrb	r3, [r1, #0]
 800f6fe:	460c      	mov	r4, r1
 800f700:	b153      	cbz	r3, 800f718 <rmw_create_node+0x24>
 800f702:	b14d      	cbz	r5, 800f718 <rmw_create_node+0x24>
 800f704:	782b      	ldrb	r3, [r5, #0]
 800f706:	b13b      	cbz	r3, 800f718 <rmw_create_node+0x24>
 800f708:	b902      	cbnz	r2, 800f70c <rmw_create_node+0x18>
 800f70a:	69c2      	ldr	r2, [r0, #28]
 800f70c:	4603      	mov	r3, r0
 800f70e:	4629      	mov	r1, r5
 800f710:	4620      	mov	r0, r4
 800f712:	bc30      	pop	{r4, r5}
 800f714:	f7ff bf74 	b.w	800f600 <create_node>
 800f718:	2000      	movs	r0, #0
 800f71a:	bc30      	pop	{r4, r5}
 800f71c:	4770      	bx	lr
 800f71e:	2000      	movs	r0, #0
 800f720:	4770      	bx	lr
 800f722:	bf00      	nop

0800f724 <rmw_destroy_node>:
 800f724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f726:	2800      	cmp	r0, #0
 800f728:	d066      	beq.n	800f7f8 <rmw_destroy_node+0xd4>
 800f72a:	4607      	mov	r7, r0
 800f72c:	6800      	ldr	r0, [r0, #0]
 800f72e:	b128      	cbz	r0, 800f73c <rmw_destroy_node+0x18>
 800f730:	4b34      	ldr	r3, [pc, #208]	@ (800f804 <rmw_destroy_node+0xe0>)
 800f732:	6819      	ldr	r1, [r3, #0]
 800f734:	f7f0 fd54 	bl	80001e0 <strcmp>
 800f738:	2800      	cmp	r0, #0
 800f73a:	d15d      	bne.n	800f7f8 <rmw_destroy_node+0xd4>
 800f73c:	687c      	ldr	r4, [r7, #4]
 800f73e:	2c00      	cmp	r4, #0
 800f740:	d05a      	beq.n	800f7f8 <rmw_destroy_node+0xd4>
 800f742:	4b31      	ldr	r3, [pc, #196]	@ (800f808 <rmw_destroy_node+0xe4>)
 800f744:	681d      	ldr	r5, [r3, #0]
 800f746:	2d00      	cmp	r5, #0
 800f748:	d059      	beq.n	800f7fe <rmw_destroy_node+0xda>
 800f74a:	2600      	movs	r6, #0
 800f74c:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800f750:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800f754:	429c      	cmp	r4, r3
 800f756:	d047      	beq.n	800f7e8 <rmw_destroy_node+0xc4>
 800f758:	2d00      	cmp	r5, #0
 800f75a:	d1f7      	bne.n	800f74c <rmw_destroy_node+0x28>
 800f75c:	4b2b      	ldr	r3, [pc, #172]	@ (800f80c <rmw_destroy_node+0xe8>)
 800f75e:	681d      	ldr	r5, [r3, #0]
 800f760:	b15d      	cbz	r5, 800f77a <rmw_destroy_node+0x56>
 800f762:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800f766:	6a0b      	ldr	r3, [r1, #32]
 800f768:	429c      	cmp	r4, r3
 800f76a:	d1f9      	bne.n	800f760 <rmw_destroy_node+0x3c>
 800f76c:	317c      	adds	r1, #124	@ 0x7c
 800f76e:	4638      	mov	r0, r7
 800f770:	f000 fb12 	bl	800fd98 <rmw_destroy_subscription>
 800f774:	4606      	mov	r6, r0
 800f776:	2d00      	cmp	r5, #0
 800f778:	d1f3      	bne.n	800f762 <rmw_destroy_node+0x3e>
 800f77a:	4b25      	ldr	r3, [pc, #148]	@ (800f810 <rmw_destroy_node+0xec>)
 800f77c:	681d      	ldr	r5, [r3, #0]
 800f77e:	b15d      	cbz	r5, 800f798 <rmw_destroy_node+0x74>
 800f780:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800f784:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f786:	429c      	cmp	r4, r3
 800f788:	d1f9      	bne.n	800f77e <rmw_destroy_node+0x5a>
 800f78a:	317c      	adds	r1, #124	@ 0x7c
 800f78c:	4638      	mov	r0, r7
 800f78e:	f000 f9dd 	bl	800fb4c <rmw_destroy_service>
 800f792:	4606      	mov	r6, r0
 800f794:	2d00      	cmp	r5, #0
 800f796:	d1f3      	bne.n	800f780 <rmw_destroy_node+0x5c>
 800f798:	4b1e      	ldr	r3, [pc, #120]	@ (800f814 <rmw_destroy_node+0xf0>)
 800f79a:	681d      	ldr	r5, [r3, #0]
 800f79c:	b15d      	cbz	r5, 800f7b6 <rmw_destroy_node+0x92>
 800f79e:	e9d5 5102 	ldrd	r5, r1, [r5, #8]
 800f7a2:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800f7a4:	429c      	cmp	r4, r3
 800f7a6:	d1f9      	bne.n	800f79c <rmw_destroy_node+0x78>
 800f7a8:	317c      	adds	r1, #124	@ 0x7c
 800f7aa:	4638      	mov	r0, r7
 800f7ac:	f007 f9c6 	bl	8016b3c <rmw_destroy_client>
 800f7b0:	4606      	mov	r6, r0
 800f7b2:	2d00      	cmp	r5, #0
 800f7b4:	d1f3      	bne.n	800f79e <rmw_destroy_node+0x7a>
 800f7b6:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 800f7ba:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800f7be:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f7c2:	6819      	ldr	r1, [r3, #0]
 800f7c4:	f001 f814 	bl	80107f0 <uxr_buffer_delete_entity>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	6920      	ldr	r0, [r4, #16]
 800f7cc:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800f7d0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800f7d4:	f000 fdf0 	bl	80103b8 <run_xrce_session>
 800f7d8:	2800      	cmp	r0, #0
 800f7da:	bf08      	it	eq
 800f7dc:	2602      	moveq	r6, #2
 800f7de:	4638      	mov	r0, r7
 800f7e0:	f000 fc80 	bl	80100e4 <rmw_uxrce_fini_node_memory>
 800f7e4:	4630      	mov	r0, r6
 800f7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7e8:	3184      	adds	r1, #132	@ 0x84
 800f7ea:	4638      	mov	r0, r7
 800f7ec:	f000 f95e 	bl	800faac <rmw_destroy_publisher>
 800f7f0:	4606      	mov	r6, r0
 800f7f2:	2d00      	cmp	r5, #0
 800f7f4:	d1aa      	bne.n	800f74c <rmw_destroy_node+0x28>
 800f7f6:	e7b1      	b.n	800f75c <rmw_destroy_node+0x38>
 800f7f8:	2601      	movs	r6, #1
 800f7fa:	4630      	mov	r0, r6
 800f7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7fe:	462e      	mov	r6, r5
 800f800:	e7ac      	b.n	800f75c <rmw_destroy_node+0x38>
 800f802:	bf00      	nop
 800f804:	0801e824 	.word	0x0801e824
 800f808:	2000a040 	.word	0x2000a040
 800f80c:	2000d29c 	.word	0x2000d29c
 800f810:	2000d28c 	.word	0x2000d28c
 800f814:	2000a8c0 	.word	0x2000a8c0

0800f818 <rmw_node_get_graph_guard_condition>:
 800f818:	6843      	ldr	r3, [r0, #4]
 800f81a:	6918      	ldr	r0, [r3, #16]
 800f81c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800f820:	4770      	bx	lr
 800f822:	bf00      	nop

0800f824 <flush_session>:
 800f824:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800f826:	f002 b8d3 	b.w	80119d0 <uxr_run_session_until_confirm_delivery>
 800f82a:	bf00      	nop

0800f82c <rmw_publish>:
 800f82c:	2800      	cmp	r0, #0
 800f82e:	d053      	beq.n	800f8d8 <rmw_publish+0xac>
 800f830:	b570      	push	{r4, r5, r6, lr}
 800f832:	460d      	mov	r5, r1
 800f834:	b08e      	sub	sp, #56	@ 0x38
 800f836:	2900      	cmp	r1, #0
 800f838:	d04b      	beq.n	800f8d2 <rmw_publish+0xa6>
 800f83a:	4604      	mov	r4, r0
 800f83c:	6800      	ldr	r0, [r0, #0]
 800f83e:	f000 fe3b 	bl	80104b8 <is_uxrce_rmw_identifier_valid>
 800f842:	2800      	cmp	r0, #0
 800f844:	d045      	beq.n	800f8d2 <rmw_publish+0xa6>
 800f846:	6866      	ldr	r6, [r4, #4]
 800f848:	2e00      	cmp	r6, #0
 800f84a:	d042      	beq.n	800f8d2 <rmw_publish+0xa6>
 800f84c:	69b4      	ldr	r4, [r6, #24]
 800f84e:	4628      	mov	r0, r5
 800f850:	6923      	ldr	r3, [r4, #16]
 800f852:	4798      	blx	r3
 800f854:	69f3      	ldr	r3, [r6, #28]
 800f856:	9005      	str	r0, [sp, #20]
 800f858:	b113      	cbz	r3, 800f860 <rmw_publish+0x34>
 800f85a:	a805      	add	r0, sp, #20
 800f85c:	4798      	blx	r3
 800f85e:	9805      	ldr	r0, [sp, #20]
 800f860:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f864:	691b      	ldr	r3, [r3, #16]
 800f866:	9000      	str	r0, [sp, #0]
 800f868:	6972      	ldr	r2, [r6, #20]
 800f86a:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f86c:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800f870:	ab06      	add	r3, sp, #24
 800f872:	f003 fb33 	bl	8012edc <uxr_prepare_output_stream>
 800f876:	b1d8      	cbz	r0, 800f8b0 <rmw_publish+0x84>
 800f878:	68a3      	ldr	r3, [r4, #8]
 800f87a:	4628      	mov	r0, r5
 800f87c:	a906      	add	r1, sp, #24
 800f87e:	4798      	blx	r3
 800f880:	6a33      	ldr	r3, [r6, #32]
 800f882:	4604      	mov	r4, r0
 800f884:	b10b      	cbz	r3, 800f88a <rmw_publish+0x5e>
 800f886:	a806      	add	r0, sp, #24
 800f888:	4798      	blx	r3
 800f88a:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800f88e:	2b01      	cmp	r3, #1
 800f890:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f894:	d022      	beq.n	800f8dc <rmw_publish+0xb0>
 800f896:	6918      	ldr	r0, [r3, #16]
 800f898:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800f89a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f89e:	f002 f897 	bl	80119d0 <uxr_run_session_until_confirm_delivery>
 800f8a2:	4020      	ands	r0, r4
 800f8a4:	b2c4      	uxtb	r4, r0
 800f8a6:	f084 0001 	eor.w	r0, r4, #1
 800f8aa:	b2c0      	uxtb	r0, r0
 800f8ac:	b00e      	add	sp, #56	@ 0x38
 800f8ae:	bd70      	pop	{r4, r5, r6, pc}
 800f8b0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800f8b4:	4a0c      	ldr	r2, [pc, #48]	@ (800f8e8 <rmw_publish+0xbc>)
 800f8b6:	6918      	ldr	r0, [r3, #16]
 800f8b8:	9b05      	ldr	r3, [sp, #20]
 800f8ba:	9300      	str	r3, [sp, #0]
 800f8bc:	e9cd 2601 	strd	r2, r6, [sp, #4]
 800f8c0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f8c4:	6972      	ldr	r2, [r6, #20]
 800f8c6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800f8c8:	ab06      	add	r3, sp, #24
 800f8ca:	f003 fb37 	bl	8012f3c <uxr_prepare_output_stream_fragmented>
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	d1d2      	bne.n	800f878 <rmw_publish+0x4c>
 800f8d2:	2001      	movs	r0, #1
 800f8d4:	b00e      	add	sp, #56	@ 0x38
 800f8d6:	bd70      	pop	{r4, r5, r6, pc}
 800f8d8:	2001      	movs	r0, #1
 800f8da:	4770      	bx	lr
 800f8dc:	6918      	ldr	r0, [r3, #16]
 800f8de:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f8e2:	f001 fcb9 	bl	8011258 <uxr_flash_output_streams>
 800f8e6:	e7de      	b.n	800f8a6 <rmw_publish+0x7a>
 800f8e8:	0800f825 	.word	0x0800f825

0800f8ec <rmw_create_publisher>:
 800f8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8f0:	b087      	sub	sp, #28
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	f000 80cc 	beq.w	800fa90 <rmw_create_publisher+0x1a4>
 800f8f8:	460e      	mov	r6, r1
 800f8fa:	2900      	cmp	r1, #0
 800f8fc:	f000 80c8 	beq.w	800fa90 <rmw_create_publisher+0x1a4>
 800f900:	4604      	mov	r4, r0
 800f902:	6800      	ldr	r0, [r0, #0]
 800f904:	4615      	mov	r5, r2
 800f906:	4698      	mov	r8, r3
 800f908:	f000 fdd6 	bl	80104b8 <is_uxrce_rmw_identifier_valid>
 800f90c:	2800      	cmp	r0, #0
 800f90e:	f000 80bf 	beq.w	800fa90 <rmw_create_publisher+0x1a4>
 800f912:	2d00      	cmp	r5, #0
 800f914:	f000 80bc 	beq.w	800fa90 <rmw_create_publisher+0x1a4>
 800f918:	782b      	ldrb	r3, [r5, #0]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	f000 80b8 	beq.w	800fa90 <rmw_create_publisher+0x1a4>
 800f920:	f1b8 0f00 	cmp.w	r8, #0
 800f924:	f000 80b4 	beq.w	800fa90 <rmw_create_publisher+0x1a4>
 800f928:	485c      	ldr	r0, [pc, #368]	@ (800fa9c <rmw_create_publisher+0x1b0>)
 800f92a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800f92e:	f007 f8e1 	bl	8016af4 <get_memory>
 800f932:	2800      	cmp	r0, #0
 800f934:	f000 80ac 	beq.w	800fa90 <rmw_create_publisher+0x1a4>
 800f938:	68c4      	ldr	r4, [r0, #12]
 800f93a:	2300      	movs	r3, #0
 800f93c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 800f940:	f007 f940 	bl	8016bc4 <rmw_get_implementation_identifier>
 800f944:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 800f948:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800f94c:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800f950:	4628      	mov	r0, r5
 800f952:	f7f0 fca5 	bl	80002a0 <strlen>
 800f956:	3001      	adds	r0, #1
 800f958:	283c      	cmp	r0, #60	@ 0x3c
 800f95a:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800f95e:	f200 8094 	bhi.w	800fa8a <rmw_create_publisher+0x19e>
 800f962:	4a4f      	ldr	r2, [pc, #316]	@ (800faa0 <rmw_create_publisher+0x1b4>)
 800f964:	462b      	mov	r3, r5
 800f966:	213c      	movs	r1, #60	@ 0x3c
 800f968:	4650      	mov	r0, sl
 800f96a:	f00a fdad 	bl	801a4c8 <sniprintf>
 800f96e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f972:	e9c4 391f 	strd	r3, r9, [r4, #124]	@ 0x7c
 800f976:	4641      	mov	r1, r8
 800f978:	2250      	movs	r2, #80	@ 0x50
 800f97a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800f97e:	f00b f844 	bl	801aa0a <memcpy>
 800f982:	f898 3008 	ldrb.w	r3, [r8, #8]
 800f986:	4947      	ldr	r1, [pc, #284]	@ (800faa4 <rmw_create_publisher+0x1b8>)
 800f988:	2b02      	cmp	r3, #2
 800f98a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f98e:	bf0c      	ite	eq
 800f990:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800f994:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800f998:	67a3      	str	r3, [r4, #120]	@ 0x78
 800f99a:	2300      	movs	r3, #0
 800f99c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f9a0:	4630      	mov	r0, r6
 800f9a2:	f000 fd97 	bl	80104d4 <get_message_typesupport_handle>
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	d06f      	beq.n	800fa8a <rmw_create_publisher+0x19e>
 800f9aa:	6842      	ldr	r2, [r0, #4]
 800f9ac:	61a2      	str	r2, [r4, #24]
 800f9ae:	2a00      	cmp	r2, #0
 800f9b0:	d06b      	beq.n	800fa8a <rmw_create_publisher+0x19e>
 800f9b2:	4629      	mov	r1, r5
 800f9b4:	4643      	mov	r3, r8
 800f9b6:	4648      	mov	r0, r9
 800f9b8:	f007 f90a 	bl	8016bd0 <create_topic>
 800f9bc:	6260      	str	r0, [r4, #36]	@ 0x24
 800f9be:	2800      	cmp	r0, #0
 800f9c0:	d063      	beq.n	800fa8a <rmw_create_publisher+0x19e>
 800f9c2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f9c6:	f241 5398 	movw	r3, #5528	@ 0x1598
 800f9ca:	2103      	movs	r1, #3
 800f9cc:	5ad0      	ldrh	r0, [r2, r3]
 800f9ce:	1c45      	adds	r5, r0, #1
 800f9d0:	52d5      	strh	r5, [r2, r3]
 800f9d2:	f001 f9cf 	bl	8010d74 <uxr_object_id>
 800f9d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f9da:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800f9de:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800f9e2:	6912      	ldr	r2, [r2, #16]
 800f9e4:	6120      	str	r0, [r4, #16]
 800f9e6:	f04f 0a06 	mov.w	sl, #6
 800f9ea:	f8cd a000 	str.w	sl, [sp]
 800f9ee:	6819      	ldr	r1, [r3, #0]
 800f9f0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800f9f4:	f502 7028 	add.w	r0, r2, #672	@ 0x2a0
 800f9f8:	6922      	ldr	r2, [r4, #16]
 800f9fa:	f000 ffab 	bl	8010954 <uxr_buffer_create_publisher_bin>
 800f9fe:	4602      	mov	r2, r0
 800fa00:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fa04:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fa08:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fa0c:	f000 fcd4 	bl	80103b8 <run_xrce_session>
 800fa10:	b3b8      	cbz	r0, 800fa82 <rmw_create_publisher+0x196>
 800fa12:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fa16:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800fa1a:	f241 539a 	movw	r3, #5530	@ 0x159a
 800fa1e:	2105      	movs	r1, #5
 800fa20:	5ad0      	ldrh	r0, [r2, r3]
 800fa22:	1c45      	adds	r5, r0, #1
 800fa24:	52d5      	strh	r5, [r2, r3]
 800fa26:	f001 f9a5 	bl	8010d74 <uxr_object_id>
 800fa2a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800fa2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fa32:	6915      	ldr	r5, [r2, #16]
 800fa34:	6160      	str	r0, [r4, #20]
 800fa36:	ae04      	add	r6, sp, #16
 800fa38:	4641      	mov	r1, r8
 800fa3a:	4630      	mov	r0, r6
 800fa3c:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800fa40:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800fa44:	f000 fcd4 	bl	80103f0 <convert_qos_profile>
 800fa48:	e896 0003 	ldmia.w	r6, {r0, r1}
 800fa4c:	f8cd a00c 	str.w	sl, [sp, #12]
 800fa50:	9001      	str	r0, [sp, #4]
 800fa52:	f8ad 1008 	strh.w	r1, [sp, #8]
 800fa56:	f8db 3010 	ldr.w	r3, [fp, #16]
 800fa5a:	9300      	str	r3, [sp, #0]
 800fa5c:	f505 7528 	add.w	r5, r5, #672	@ 0x2a0
 800fa60:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800fa64:	f8d8 1000 	ldr.w	r1, [r8]
 800fa68:	4628      	mov	r0, r5
 800fa6a:	f000 ffd1 	bl	8010a10 <uxr_buffer_create_datawriter_bin>
 800fa6e:	4602      	mov	r2, r0
 800fa70:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fa74:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fa78:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fa7c:	f000 fc9c 	bl	80103b8 <run_xrce_session>
 800fa80:	b938      	cbnz	r0, 800fa92 <rmw_create_publisher+0x1a6>
 800fa82:	4806      	ldr	r0, [pc, #24]	@ (800fa9c <rmw_create_publisher+0x1b0>)
 800fa84:	4621      	mov	r1, r4
 800fa86:	f007 f845 	bl	8016b14 <put_memory>
 800fa8a:	4638      	mov	r0, r7
 800fa8c:	f000 fb42 	bl	8010114 <rmw_uxrce_fini_publisher_memory>
 800fa90:	2700      	movs	r7, #0
 800fa92:	4638      	mov	r0, r7
 800fa94:	b007      	add	sp, #28
 800fa96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa9a:	bf00      	nop
 800fa9c:	2000a040 	.word	0x2000a040
 800faa0:	0801e0d0 	.word	0x0801e0d0
 800faa4:	0801e09c 	.word	0x0801e09c

0800faa8 <rmw_publisher_get_actual_qos>:
 800faa8:	2000      	movs	r0, #0
 800faaa:	4770      	bx	lr

0800faac <rmw_destroy_publisher>:
 800faac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faae:	b128      	cbz	r0, 800fabc <rmw_destroy_publisher+0x10>
 800fab0:	4604      	mov	r4, r0
 800fab2:	6800      	ldr	r0, [r0, #0]
 800fab4:	460d      	mov	r5, r1
 800fab6:	f000 fcff 	bl	80104b8 <is_uxrce_rmw_identifier_valid>
 800faba:	b910      	cbnz	r0, 800fac2 <rmw_destroy_publisher+0x16>
 800fabc:	2401      	movs	r4, #1
 800fabe:	4620      	mov	r0, r4
 800fac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fac2:	6863      	ldr	r3, [r4, #4]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d0f9      	beq.n	800fabc <rmw_destroy_publisher+0x10>
 800fac8:	2d00      	cmp	r5, #0
 800faca:	d0f7      	beq.n	800fabc <rmw_destroy_publisher+0x10>
 800facc:	6828      	ldr	r0, [r5, #0]
 800face:	f000 fcf3 	bl	80104b8 <is_uxrce_rmw_identifier_valid>
 800fad2:	2800      	cmp	r0, #0
 800fad4:	d0f2      	beq.n	800fabc <rmw_destroy_publisher+0x10>
 800fad6:	686c      	ldr	r4, [r5, #4]
 800fad8:	2c00      	cmp	r4, #0
 800fada:	d0ef      	beq.n	800fabc <rmw_destroy_publisher+0x10>
 800fadc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800fade:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800fae2:	f007 f8d7 	bl	8016c94 <destroy_topic>
 800fae6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800faea:	6962      	ldr	r2, [r4, #20]
 800faec:	6918      	ldr	r0, [r3, #16]
 800faee:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800faf2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800faf6:	6819      	ldr	r1, [r3, #0]
 800faf8:	f000 fe7a 	bl	80107f0 <uxr_buffer_delete_entity>
 800fafc:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 800fb00:	6922      	ldr	r2, [r4, #16]
 800fb02:	4603      	mov	r3, r0
 800fb04:	6908      	ldr	r0, [r1, #16]
 800fb06:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fb0a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fb0e:	6809      	ldr	r1, [r1, #0]
 800fb10:	461c      	mov	r4, r3
 800fb12:	f000 fe6d 	bl	80107f0 <uxr_buffer_delete_entity>
 800fb16:	4606      	mov	r6, r0
 800fb18:	6938      	ldr	r0, [r7, #16]
 800fb1a:	4622      	mov	r2, r4
 800fb1c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fb20:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fb24:	f000 fc48 	bl	80103b8 <run_xrce_session>
 800fb28:	4604      	mov	r4, r0
 800fb2a:	6938      	ldr	r0, [r7, #16]
 800fb2c:	4632      	mov	r2, r6
 800fb2e:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fb32:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fb36:	f000 fc3f 	bl	80103b8 <run_xrce_session>
 800fb3a:	b12c      	cbz	r4, 800fb48 <rmw_destroy_publisher+0x9c>
 800fb3c:	b120      	cbz	r0, 800fb48 <rmw_destroy_publisher+0x9c>
 800fb3e:	2400      	movs	r4, #0
 800fb40:	4628      	mov	r0, r5
 800fb42:	f000 fae7 	bl	8010114 <rmw_uxrce_fini_publisher_memory>
 800fb46:	e7ba      	b.n	800fabe <rmw_destroy_publisher+0x12>
 800fb48:	2402      	movs	r4, #2
 800fb4a:	e7f9      	b.n	800fb40 <rmw_destroy_publisher+0x94>

0800fb4c <rmw_destroy_service>:
 800fb4c:	b570      	push	{r4, r5, r6, lr}
 800fb4e:	b128      	cbz	r0, 800fb5c <rmw_destroy_service+0x10>
 800fb50:	4604      	mov	r4, r0
 800fb52:	6800      	ldr	r0, [r0, #0]
 800fb54:	460d      	mov	r5, r1
 800fb56:	f000 fcaf 	bl	80104b8 <is_uxrce_rmw_identifier_valid>
 800fb5a:	b910      	cbnz	r0, 800fb62 <rmw_destroy_service+0x16>
 800fb5c:	2401      	movs	r4, #1
 800fb5e:	4620      	mov	r0, r4
 800fb60:	bd70      	pop	{r4, r5, r6, pc}
 800fb62:	6863      	ldr	r3, [r4, #4]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d0f9      	beq.n	800fb5c <rmw_destroy_service+0x10>
 800fb68:	2d00      	cmp	r5, #0
 800fb6a:	d0f7      	beq.n	800fb5c <rmw_destroy_service+0x10>
 800fb6c:	6828      	ldr	r0, [r5, #0]
 800fb6e:	f000 fca3 	bl	80104b8 <is_uxrce_rmw_identifier_valid>
 800fb72:	2800      	cmp	r0, #0
 800fb74:	d0f2      	beq.n	800fb5c <rmw_destroy_service+0x10>
 800fb76:	686e      	ldr	r6, [r5, #4]
 800fb78:	2e00      	cmp	r6, #0
 800fb7a:	d0ef      	beq.n	800fb5c <rmw_destroy_service+0x10>
 800fb7c:	6864      	ldr	r4, [r4, #4]
 800fb7e:	6932      	ldr	r2, [r6, #16]
 800fb80:	6920      	ldr	r0, [r4, #16]
 800fb82:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fb86:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fb8a:	6819      	ldr	r1, [r3, #0]
 800fb8c:	f001 f95a 	bl	8010e44 <uxr_buffer_cancel_data>
 800fb90:	4602      	mov	r2, r0
 800fb92:	6920      	ldr	r0, [r4, #16]
 800fb94:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fb98:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fb9c:	f000 fc0c 	bl	80103b8 <run_xrce_session>
 800fba0:	6920      	ldr	r0, [r4, #16]
 800fba2:	6932      	ldr	r2, [r6, #16]
 800fba4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fba8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fbac:	6819      	ldr	r1, [r3, #0]
 800fbae:	f000 fe1f 	bl	80107f0 <uxr_buffer_delete_entity>
 800fbb2:	4602      	mov	r2, r0
 800fbb4:	6920      	ldr	r0, [r4, #16]
 800fbb6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fbba:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fbbe:	f000 fbfb 	bl	80103b8 <run_xrce_session>
 800fbc2:	2800      	cmp	r0, #0
 800fbc4:	4628      	mov	r0, r5
 800fbc6:	bf14      	ite	ne
 800fbc8:	2400      	movne	r4, #0
 800fbca:	2402      	moveq	r4, #2
 800fbcc:	f000 face 	bl	801016c <rmw_uxrce_fini_service_memory>
 800fbd0:	e7c5      	b.n	800fb5e <rmw_destroy_service+0x12>
 800fbd2:	bf00      	nop

0800fbd4 <rmw_create_subscription>:
 800fbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbd8:	b08d      	sub	sp, #52	@ 0x34
 800fbda:	2800      	cmp	r0, #0
 800fbdc:	f000 80cf 	beq.w	800fd7e <rmw_create_subscription+0x1aa>
 800fbe0:	460e      	mov	r6, r1
 800fbe2:	2900      	cmp	r1, #0
 800fbe4:	f000 80cb 	beq.w	800fd7e <rmw_create_subscription+0x1aa>
 800fbe8:	4604      	mov	r4, r0
 800fbea:	6800      	ldr	r0, [r0, #0]
 800fbec:	4615      	mov	r5, r2
 800fbee:	4698      	mov	r8, r3
 800fbf0:	f000 fc62 	bl	80104b8 <is_uxrce_rmw_identifier_valid>
 800fbf4:	2800      	cmp	r0, #0
 800fbf6:	f000 80c2 	beq.w	800fd7e <rmw_create_subscription+0x1aa>
 800fbfa:	2d00      	cmp	r5, #0
 800fbfc:	f000 80bf 	beq.w	800fd7e <rmw_create_subscription+0x1aa>
 800fc00:	782b      	ldrb	r3, [r5, #0]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	f000 80bb 	beq.w	800fd7e <rmw_create_subscription+0x1aa>
 800fc08:	f1b8 0f00 	cmp.w	r8, #0
 800fc0c:	f000 80b7 	beq.w	800fd7e <rmw_create_subscription+0x1aa>
 800fc10:	485d      	ldr	r0, [pc, #372]	@ (800fd88 <rmw_create_subscription+0x1b4>)
 800fc12:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fc16:	f006 ff6d 	bl	8016af4 <get_memory>
 800fc1a:	4604      	mov	r4, r0
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	f000 80af 	beq.w	800fd80 <rmw_create_subscription+0x1ac>
 800fc22:	68c7      	ldr	r7, [r0, #12]
 800fc24:	2300      	movs	r3, #0
 800fc26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fc2a:	f006 ffcb 	bl	8016bc4 <rmw_get_implementation_identifier>
 800fc2e:	f107 0a94 	add.w	sl, r7, #148	@ 0x94
 800fc32:	67f8      	str	r0, [r7, #124]	@ 0x7c
 800fc34:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 800fc38:	4628      	mov	r0, r5
 800fc3a:	f7f0 fb31 	bl	80002a0 <strlen>
 800fc3e:	3001      	adds	r0, #1
 800fc40:	283c      	cmp	r0, #60	@ 0x3c
 800fc42:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 800fc46:	f200 8097 	bhi.w	800fd78 <rmw_create_subscription+0x1a4>
 800fc4a:	4a50      	ldr	r2, [pc, #320]	@ (800fd8c <rmw_create_subscription+0x1b8>)
 800fc4c:	462b      	mov	r3, r5
 800fc4e:	213c      	movs	r1, #60	@ 0x3c
 800fc50:	4650      	mov	r0, sl
 800fc52:	f00a fc39 	bl	801a4c8 <sniprintf>
 800fc56:	4641      	mov	r1, r8
 800fc58:	f8c7 9020 	str.w	r9, [r7, #32]
 800fc5c:	2250      	movs	r2, #80	@ 0x50
 800fc5e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800fc62:	f00a fed2 	bl	801aa0a <memcpy>
 800fc66:	494a      	ldr	r1, [pc, #296]	@ (800fd90 <rmw_create_subscription+0x1bc>)
 800fc68:	4630      	mov	r0, r6
 800fc6a:	f000 fc33 	bl	80104d4 <get_message_typesupport_handle>
 800fc6e:	2800      	cmp	r0, #0
 800fc70:	f000 8082 	beq.w	800fd78 <rmw_create_subscription+0x1a4>
 800fc74:	6842      	ldr	r2, [r0, #4]
 800fc76:	61ba      	str	r2, [r7, #24]
 800fc78:	2a00      	cmp	r2, #0
 800fc7a:	d07d      	beq.n	800fd78 <rmw_create_subscription+0x1a4>
 800fc7c:	4629      	mov	r1, r5
 800fc7e:	4643      	mov	r3, r8
 800fc80:	4648      	mov	r0, r9
 800fc82:	f006 ffa5 	bl	8016bd0 <create_topic>
 800fc86:	61f8      	str	r0, [r7, #28]
 800fc88:	2800      	cmp	r0, #0
 800fc8a:	d075      	beq.n	800fd78 <rmw_create_subscription+0x1a4>
 800fc8c:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fc90:	f241 539c 	movw	r3, #5532	@ 0x159c
 800fc94:	2104      	movs	r1, #4
 800fc96:	5ad0      	ldrh	r0, [r2, r3]
 800fc98:	1c45      	adds	r5, r0, #1
 800fc9a:	52d5      	strh	r5, [r2, r3]
 800fc9c:	f001 f86a 	bl	8010d74 <uxr_object_id>
 800fca0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fca4:	6138      	str	r0, [r7, #16]
 800fca6:	f8d3 2384 	ldr.w	r2, [r3, #900]	@ 0x384
 800fcaa:	2606      	movs	r6, #6
 800fcac:	9600      	str	r6, [sp, #0]
 800fcae:	6811      	ldr	r1, [r2, #0]
 800fcb0:	693a      	ldr	r2, [r7, #16]
 800fcb2:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800fcb6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800fcba:	f000 fe79 	bl	80109b0 <uxr_buffer_create_subscriber_bin>
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fcc4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fcc8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fccc:	f000 fb74 	bl	80103b8 <run_xrce_session>
 800fcd0:	2800      	cmp	r0, #0
 800fcd2:	d04d      	beq.n	800fd70 <rmw_create_subscription+0x19c>
 800fcd4:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800fcd8:	f241 539e 	movw	r3, #5534	@ 0x159e
 800fcdc:	4631      	mov	r1, r6
 800fcde:	5ad0      	ldrh	r0, [r2, r3]
 800fce0:	1c45      	adds	r5, r0, #1
 800fce2:	52d5      	strh	r5, [r2, r3]
 800fce4:	f001 f846 	bl	8010d74 <uxr_object_id>
 800fce8:	ad08      	add	r5, sp, #32
 800fcea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fcee:	69fb      	ldr	r3, [r7, #28]
 800fcf0:	6178      	str	r0, [r7, #20]
 800fcf2:	4641      	mov	r1, r8
 800fcf4:	4628      	mov	r0, r5
 800fcf6:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 800fcfa:	9305      	str	r3, [sp, #20]
 800fcfc:	f000 fb78 	bl	80103f0 <convert_qos_profile>
 800fd00:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fd04:	9b05      	ldr	r3, [sp, #20]
 800fd06:	9001      	str	r0, [sp, #4]
 800fd08:	9603      	str	r6, [sp, #12]
 800fd0a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800fd0e:	691b      	ldr	r3, [r3, #16]
 800fd10:	9300      	str	r3, [sp, #0]
 800fd12:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 800fd16:	f8db 1000 	ldr.w	r1, [fp]
 800fd1a:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 800fd1e:	f000 feef 	bl	8010b00 <uxr_buffer_create_datareader_bin>
 800fd22:	4602      	mov	r2, r0
 800fd24:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fd28:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fd2c:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fd30:	f000 fb42 	bl	80103b8 <run_xrce_session>
 800fd34:	b1e0      	cbz	r0, 800fd70 <rmw_create_subscription+0x19c>
 800fd36:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 800fd3a:	f898 3008 	ldrb.w	r3, [r8, #8]
 800fd3e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800fd42:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800fd46:	2200      	movs	r2, #0
 800fd48:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 800fd4c:	2b02      	cmp	r3, #2
 800fd4e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fd52:	bf0c      	ite	eq
 800fd54:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 800fd58:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 800fd5c:	9307      	str	r3, [sp, #28]
 800fd5e:	aa0a      	add	r2, sp, #40	@ 0x28
 800fd60:	9200      	str	r2, [sp, #0]
 800fd62:	697a      	ldr	r2, [r7, #20]
 800fd64:	6809      	ldr	r1, [r1, #0]
 800fd66:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fd6a:	f001 f831 	bl	8010dd0 <uxr_buffer_request_data>
 800fd6e:	e007      	b.n	800fd80 <rmw_create_subscription+0x1ac>
 800fd70:	4805      	ldr	r0, [pc, #20]	@ (800fd88 <rmw_create_subscription+0x1b4>)
 800fd72:	4639      	mov	r1, r7
 800fd74:	f006 fece 	bl	8016b14 <put_memory>
 800fd78:	4620      	mov	r0, r4
 800fd7a:	f000 f9e1 	bl	8010140 <rmw_uxrce_fini_subscription_memory>
 800fd7e:	2400      	movs	r4, #0
 800fd80:	4620      	mov	r0, r4
 800fd82:	b00d      	add	sp, #52	@ 0x34
 800fd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd88:	2000d29c 	.word	0x2000d29c
 800fd8c:	0801e0d0 	.word	0x0801e0d0
 800fd90:	0801e09c 	.word	0x0801e09c

0800fd94 <rmw_subscription_get_actual_qos>:
 800fd94:	2000      	movs	r0, #0
 800fd96:	4770      	bx	lr

0800fd98 <rmw_destroy_subscription>:
 800fd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd9a:	b128      	cbz	r0, 800fda8 <rmw_destroy_subscription+0x10>
 800fd9c:	4604      	mov	r4, r0
 800fd9e:	6800      	ldr	r0, [r0, #0]
 800fda0:	460d      	mov	r5, r1
 800fda2:	f000 fb89 	bl	80104b8 <is_uxrce_rmw_identifier_valid>
 800fda6:	b910      	cbnz	r0, 800fdae <rmw_destroy_subscription+0x16>
 800fda8:	2401      	movs	r4, #1
 800fdaa:	4620      	mov	r0, r4
 800fdac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdae:	6863      	ldr	r3, [r4, #4]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d0f9      	beq.n	800fda8 <rmw_destroy_subscription+0x10>
 800fdb4:	2d00      	cmp	r5, #0
 800fdb6:	d0f7      	beq.n	800fda8 <rmw_destroy_subscription+0x10>
 800fdb8:	6828      	ldr	r0, [r5, #0]
 800fdba:	f000 fb7d 	bl	80104b8 <is_uxrce_rmw_identifier_valid>
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	d0f2      	beq.n	800fda8 <rmw_destroy_subscription+0x10>
 800fdc2:	686c      	ldr	r4, [r5, #4]
 800fdc4:	2c00      	cmp	r4, #0
 800fdc6:	d0ef      	beq.n	800fda8 <rmw_destroy_subscription+0x10>
 800fdc8:	6a26      	ldr	r6, [r4, #32]
 800fdca:	6962      	ldr	r2, [r4, #20]
 800fdcc:	6930      	ldr	r0, [r6, #16]
 800fdce:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fdd2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fdd6:	6819      	ldr	r1, [r3, #0]
 800fdd8:	f001 f834 	bl	8010e44 <uxr_buffer_cancel_data>
 800fddc:	4602      	mov	r2, r0
 800fdde:	6930      	ldr	r0, [r6, #16]
 800fde0:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fde4:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fde8:	f000 fae6 	bl	80103b8 <run_xrce_session>
 800fdec:	69e0      	ldr	r0, [r4, #28]
 800fdee:	f006 ff51 	bl	8016c94 <destroy_topic>
 800fdf2:	6a23      	ldr	r3, [r4, #32]
 800fdf4:	6962      	ldr	r2, [r4, #20]
 800fdf6:	6918      	ldr	r0, [r3, #16]
 800fdf8:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fdfc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fe00:	6819      	ldr	r1, [r3, #0]
 800fe02:	f000 fcf5 	bl	80107f0 <uxr_buffer_delete_entity>
 800fe06:	6a21      	ldr	r1, [r4, #32]
 800fe08:	6922      	ldr	r2, [r4, #16]
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	6908      	ldr	r0, [r1, #16]
 800fe0e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fe12:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fe16:	6809      	ldr	r1, [r1, #0]
 800fe18:	461c      	mov	r4, r3
 800fe1a:	f000 fce9 	bl	80107f0 <uxr_buffer_delete_entity>
 800fe1e:	4607      	mov	r7, r0
 800fe20:	6930      	ldr	r0, [r6, #16]
 800fe22:	4622      	mov	r2, r4
 800fe24:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fe28:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fe2c:	f000 fac4 	bl	80103b8 <run_xrce_session>
 800fe30:	4604      	mov	r4, r0
 800fe32:	6930      	ldr	r0, [r6, #16]
 800fe34:	463a      	mov	r2, r7
 800fe36:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fe3a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fe3e:	f000 fabb 	bl	80103b8 <run_xrce_session>
 800fe42:	b12c      	cbz	r4, 800fe50 <rmw_destroy_subscription+0xb8>
 800fe44:	b120      	cbz	r0, 800fe50 <rmw_destroy_subscription+0xb8>
 800fe46:	2400      	movs	r4, #0
 800fe48:	4628      	mov	r0, r5
 800fe4a:	f000 f979 	bl	8010140 <rmw_uxrce_fini_subscription_memory>
 800fe4e:	e7ac      	b.n	800fdaa <rmw_destroy_subscription+0x12>
 800fe50:	2402      	movs	r4, #2
 800fe52:	e7f9      	b.n	800fe48 <rmw_destroy_subscription+0xb0>

0800fe54 <rmw_uxrce_transport_init>:
 800fe54:	b508      	push	{r3, lr}
 800fe56:	b108      	cbz	r0, 800fe5c <rmw_uxrce_transport_init+0x8>
 800fe58:	f100 0210 	add.w	r2, r0, #16
 800fe5c:	b139      	cbz	r1, 800fe6e <rmw_uxrce_transport_init+0x1a>
 800fe5e:	6949      	ldr	r1, [r1, #20]
 800fe60:	4610      	mov	r0, r2
 800fe62:	f000 ff4f 	bl	8010d04 <uxr_init_custom_transport>
 800fe66:	f080 0001 	eor.w	r0, r0, #1
 800fe6a:	b2c0      	uxtb	r0, r0
 800fe6c:	bd08      	pop	{r3, pc}
 800fe6e:	4b04      	ldr	r3, [pc, #16]	@ (800fe80 <rmw_uxrce_transport_init+0x2c>)
 800fe70:	4610      	mov	r0, r2
 800fe72:	6859      	ldr	r1, [r3, #4]
 800fe74:	f000 ff46 	bl	8010d04 <uxr_init_custom_transport>
 800fe78:	f080 0001 	eor.w	r0, r0, #1
 800fe7c:	b2c0      	uxtb	r0, r0
 800fe7e:	bd08      	pop	{r3, pc}
 800fe80:	2000a010 	.word	0x2000a010

0800fe84 <rmw_uxrce_init_service_memory>:
 800fe84:	b1b2      	cbz	r2, 800feb4 <rmw_uxrce_init_service_memory+0x30>
 800fe86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe88:	7a07      	ldrb	r7, [r0, #8]
 800fe8a:	4605      	mov	r5, r0
 800fe8c:	b98f      	cbnz	r7, 800feb2 <rmw_uxrce_init_service_memory+0x2e>
 800fe8e:	e9c0 7700 	strd	r7, r7, [r0]
 800fe92:	460c      	mov	r4, r1
 800fe94:	23c8      	movs	r3, #200	@ 0xc8
 800fe96:	2101      	movs	r1, #1
 800fe98:	fb03 4602 	mla	r6, r3, r2, r4
 800fe9c:	60c3      	str	r3, [r0, #12]
 800fe9e:	7201      	strb	r1, [r0, #8]
 800fea0:	4621      	mov	r1, r4
 800fea2:	4628      	mov	r0, r5
 800fea4:	f006 fe36 	bl	8016b14 <put_memory>
 800fea8:	60e4      	str	r4, [r4, #12]
 800feaa:	f804 7bc8 	strb.w	r7, [r4], #200
 800feae:	42a6      	cmp	r6, r4
 800feb0:	d1f6      	bne.n	800fea0 <rmw_uxrce_init_service_memory+0x1c>
 800feb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800feb4:	4770      	bx	lr
 800feb6:	bf00      	nop

0800feb8 <rmw_uxrce_init_client_memory>:
 800feb8:	b1b2      	cbz	r2, 800fee8 <rmw_uxrce_init_client_memory+0x30>
 800feba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800febc:	7a07      	ldrb	r7, [r0, #8]
 800febe:	4605      	mov	r5, r0
 800fec0:	b98f      	cbnz	r7, 800fee6 <rmw_uxrce_init_client_memory+0x2e>
 800fec2:	e9c0 7700 	strd	r7, r7, [r0]
 800fec6:	460c      	mov	r4, r1
 800fec8:	23c8      	movs	r3, #200	@ 0xc8
 800feca:	2101      	movs	r1, #1
 800fecc:	fb03 4602 	mla	r6, r3, r2, r4
 800fed0:	60c3      	str	r3, [r0, #12]
 800fed2:	7201      	strb	r1, [r0, #8]
 800fed4:	4621      	mov	r1, r4
 800fed6:	4628      	mov	r0, r5
 800fed8:	f006 fe1c 	bl	8016b14 <put_memory>
 800fedc:	60e4      	str	r4, [r4, #12]
 800fede:	f804 7bc8 	strb.w	r7, [r4], #200
 800fee2:	42a6      	cmp	r6, r4
 800fee4:	d1f6      	bne.n	800fed4 <rmw_uxrce_init_client_memory+0x1c>
 800fee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fee8:	4770      	bx	lr
 800feea:	bf00      	nop

0800feec <rmw_uxrce_init_publisher_memory>:
 800feec:	b1b2      	cbz	r2, 800ff1c <rmw_uxrce_init_publisher_memory+0x30>
 800feee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fef0:	7a07      	ldrb	r7, [r0, #8]
 800fef2:	4605      	mov	r5, r0
 800fef4:	b98f      	cbnz	r7, 800ff1a <rmw_uxrce_init_publisher_memory+0x2e>
 800fef6:	e9c0 7700 	strd	r7, r7, [r0]
 800fefa:	460c      	mov	r4, r1
 800fefc:	23d8      	movs	r3, #216	@ 0xd8
 800fefe:	2101      	movs	r1, #1
 800ff00:	fb03 4602 	mla	r6, r3, r2, r4
 800ff04:	60c3      	str	r3, [r0, #12]
 800ff06:	7201      	strb	r1, [r0, #8]
 800ff08:	4621      	mov	r1, r4
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	f006 fe02 	bl	8016b14 <put_memory>
 800ff10:	60e4      	str	r4, [r4, #12]
 800ff12:	f804 7bd8 	strb.w	r7, [r4], #216
 800ff16:	42a6      	cmp	r6, r4
 800ff18:	d1f6      	bne.n	800ff08 <rmw_uxrce_init_publisher_memory+0x1c>
 800ff1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff1c:	4770      	bx	lr
 800ff1e:	bf00      	nop

0800ff20 <rmw_uxrce_init_subscription_memory>:
 800ff20:	b1b2      	cbz	r2, 800ff50 <rmw_uxrce_init_subscription_memory+0x30>
 800ff22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff24:	7a07      	ldrb	r7, [r0, #8]
 800ff26:	4605      	mov	r5, r0
 800ff28:	b98f      	cbnz	r7, 800ff4e <rmw_uxrce_init_subscription_memory+0x2e>
 800ff2a:	e9c0 7700 	strd	r7, r7, [r0]
 800ff2e:	460c      	mov	r4, r1
 800ff30:	23d0      	movs	r3, #208	@ 0xd0
 800ff32:	2101      	movs	r1, #1
 800ff34:	fb03 4602 	mla	r6, r3, r2, r4
 800ff38:	60c3      	str	r3, [r0, #12]
 800ff3a:	7201      	strb	r1, [r0, #8]
 800ff3c:	4621      	mov	r1, r4
 800ff3e:	4628      	mov	r0, r5
 800ff40:	f006 fde8 	bl	8016b14 <put_memory>
 800ff44:	60e4      	str	r4, [r4, #12]
 800ff46:	f804 7bd0 	strb.w	r7, [r4], #208
 800ff4a:	42a6      	cmp	r6, r4
 800ff4c:	d1f6      	bne.n	800ff3c <rmw_uxrce_init_subscription_memory+0x1c>
 800ff4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff50:	4770      	bx	lr
 800ff52:	bf00      	nop

0800ff54 <rmw_uxrce_init_node_memory>:
 800ff54:	b1b2      	cbz	r2, 800ff84 <rmw_uxrce_init_node_memory+0x30>
 800ff56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff58:	7a07      	ldrb	r7, [r0, #8]
 800ff5a:	4605      	mov	r5, r0
 800ff5c:	b98f      	cbnz	r7, 800ff82 <rmw_uxrce_init_node_memory+0x2e>
 800ff5e:	e9c0 7700 	strd	r7, r7, [r0]
 800ff62:	460c      	mov	r4, r1
 800ff64:	23a4      	movs	r3, #164	@ 0xa4
 800ff66:	2101      	movs	r1, #1
 800ff68:	fb03 4602 	mla	r6, r3, r2, r4
 800ff6c:	60c3      	str	r3, [r0, #12]
 800ff6e:	7201      	strb	r1, [r0, #8]
 800ff70:	4621      	mov	r1, r4
 800ff72:	4628      	mov	r0, r5
 800ff74:	f006 fdce 	bl	8016b14 <put_memory>
 800ff78:	60e4      	str	r4, [r4, #12]
 800ff7a:	f804 7ba4 	strb.w	r7, [r4], #164
 800ff7e:	42a6      	cmp	r6, r4
 800ff80:	d1f6      	bne.n	800ff70 <rmw_uxrce_init_node_memory+0x1c>
 800ff82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff84:	4770      	bx	lr
 800ff86:	bf00      	nop

0800ff88 <rmw_uxrce_init_session_memory>:
 800ff88:	b1d2      	cbz	r2, 800ffc0 <rmw_uxrce_init_session_memory+0x38>
 800ff8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff8e:	7a07      	ldrb	r7, [r0, #8]
 800ff90:	4605      	mov	r5, r0
 800ff92:	b99f      	cbnz	r7, 800ffbc <rmw_uxrce_init_session_memory+0x34>
 800ff94:	e9c0 7700 	strd	r7, r7, [r0]
 800ff98:	f241 53a8 	movw	r3, #5544	@ 0x15a8
 800ff9c:	460c      	mov	r4, r1
 800ff9e:	2101      	movs	r1, #1
 800ffa0:	fb03 4602 	mla	r6, r3, r2, r4
 800ffa4:	60c3      	str	r3, [r0, #12]
 800ffa6:	4698      	mov	r8, r3
 800ffa8:	7201      	strb	r1, [r0, #8]
 800ffaa:	4621      	mov	r1, r4
 800ffac:	4628      	mov	r0, r5
 800ffae:	f006 fdb1 	bl	8016b14 <put_memory>
 800ffb2:	60e4      	str	r4, [r4, #12]
 800ffb4:	7027      	strb	r7, [r4, #0]
 800ffb6:	4444      	add	r4, r8
 800ffb8:	42a6      	cmp	r6, r4
 800ffba:	d1f6      	bne.n	800ffaa <rmw_uxrce_init_session_memory+0x22>
 800ffbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc0:	4770      	bx	lr
 800ffc2:	bf00      	nop

0800ffc4 <rmw_uxrce_init_topic_memory>:
 800ffc4:	b1c2      	cbz	r2, 800fff8 <rmw_uxrce_init_topic_memory+0x34>
 800ffc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffc8:	7a07      	ldrb	r7, [r0, #8]
 800ffca:	4606      	mov	r6, r0
 800ffcc:	b99f      	cbnz	r7, 800fff6 <rmw_uxrce_init_topic_memory+0x32>
 800ffce:	e9c0 7700 	strd	r7, r7, [r0]
 800ffd2:	460c      	mov	r4, r1
 800ffd4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800ffd8:	2101      	movs	r1, #1
 800ffda:	231c      	movs	r3, #28
 800ffdc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ffe0:	7201      	strb	r1, [r0, #8]
 800ffe2:	60c3      	str	r3, [r0, #12]
 800ffe4:	4621      	mov	r1, r4
 800ffe6:	4630      	mov	r0, r6
 800ffe8:	f006 fd94 	bl	8016b14 <put_memory>
 800ffec:	60e4      	str	r4, [r4, #12]
 800ffee:	f804 7b1c 	strb.w	r7, [r4], #28
 800fff2:	42a5      	cmp	r5, r4
 800fff4:	d1f6      	bne.n	800ffe4 <rmw_uxrce_init_topic_memory+0x20>
 800fff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fff8:	4770      	bx	lr
 800fffa:	bf00      	nop

0800fffc <rmw_uxrce_init_static_input_buffer_memory>:
 800fffc:	b1d2      	cbz	r2, 8010034 <rmw_uxrce_init_static_input_buffer_memory+0x38>
 800fffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010000:	7a07      	ldrb	r7, [r0, #8]
 8010002:	4606      	mov	r6, r0
 8010004:	b9af      	cbnz	r7, 8010032 <rmw_uxrce_init_static_input_buffer_memory+0x36>
 8010006:	e9c0 7700 	strd	r7, r7, [r0]
 801000a:	460c      	mov	r4, r1
 801000c:	eb02 1242 	add.w	r2, r2, r2, lsl #5
 8010010:	2101      	movs	r1, #1
 8010012:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8010016:	eb04 1582 	add.w	r5, r4, r2, lsl #6
 801001a:	7201      	strb	r1, [r0, #8]
 801001c:	60c3      	str	r3, [r0, #12]
 801001e:	4621      	mov	r1, r4
 8010020:	4630      	mov	r0, r6
 8010022:	f006 fd77 	bl	8016b14 <put_memory>
 8010026:	60e4      	str	r4, [r4, #12]
 8010028:	7027      	strb	r7, [r4, #0]
 801002a:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 801002e:	42a5      	cmp	r5, r4
 8010030:	d1f5      	bne.n	801001e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8010032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010034:	4770      	bx	lr
 8010036:	bf00      	nop

08010038 <rmw_uxrce_init_init_options_impl_memory>:
 8010038:	b1b2      	cbz	r2, 8010068 <rmw_uxrce_init_init_options_impl_memory+0x30>
 801003a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801003c:	7a07      	ldrb	r7, [r0, #8]
 801003e:	4605      	mov	r5, r0
 8010040:	b98f      	cbnz	r7, 8010066 <rmw_uxrce_init_init_options_impl_memory+0x2e>
 8010042:	e9c0 7700 	strd	r7, r7, [r0]
 8010046:	460c      	mov	r4, r1
 8010048:	232c      	movs	r3, #44	@ 0x2c
 801004a:	2101      	movs	r1, #1
 801004c:	fb03 4602 	mla	r6, r3, r2, r4
 8010050:	60c3      	str	r3, [r0, #12]
 8010052:	7201      	strb	r1, [r0, #8]
 8010054:	4621      	mov	r1, r4
 8010056:	4628      	mov	r0, r5
 8010058:	f006 fd5c 	bl	8016b14 <put_memory>
 801005c:	60e4      	str	r4, [r4, #12]
 801005e:	f804 7b2c 	strb.w	r7, [r4], #44
 8010062:	42a6      	cmp	r6, r4
 8010064:	d1f6      	bne.n	8010054 <rmw_uxrce_init_init_options_impl_memory+0x1c>
 8010066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010068:	4770      	bx	lr
 801006a:	bf00      	nop

0801006c <rmw_uxrce_init_wait_set_memory>:
 801006c:	b1c2      	cbz	r2, 80100a0 <rmw_uxrce_init_wait_set_memory+0x34>
 801006e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010070:	7a07      	ldrb	r7, [r0, #8]
 8010072:	4606      	mov	r6, r0
 8010074:	b99f      	cbnz	r7, 801009e <rmw_uxrce_init_wait_set_memory+0x32>
 8010076:	e9c0 7700 	strd	r7, r7, [r0]
 801007a:	460c      	mov	r4, r1
 801007c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8010080:	2101      	movs	r1, #1
 8010082:	231c      	movs	r3, #28
 8010084:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010088:	7201      	strb	r1, [r0, #8]
 801008a:	60c3      	str	r3, [r0, #12]
 801008c:	4621      	mov	r1, r4
 801008e:	4630      	mov	r0, r6
 8010090:	f006 fd40 	bl	8016b14 <put_memory>
 8010094:	60e4      	str	r4, [r4, #12]
 8010096:	f804 7b1c 	strb.w	r7, [r4], #28
 801009a:	42a5      	cmp	r5, r4
 801009c:	d1f6      	bne.n	801008c <rmw_uxrce_init_wait_set_memory+0x20>
 801009e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100a0:	4770      	bx	lr
 80100a2:	bf00      	nop

080100a4 <rmw_uxrce_init_guard_condition_memory>:
 80100a4:	b1b2      	cbz	r2, 80100d4 <rmw_uxrce_init_guard_condition_memory+0x30>
 80100a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100a8:	7a07      	ldrb	r7, [r0, #8]
 80100aa:	4605      	mov	r5, r0
 80100ac:	b98f      	cbnz	r7, 80100d2 <rmw_uxrce_init_guard_condition_memory+0x2e>
 80100ae:	e9c0 7700 	strd	r7, r7, [r0]
 80100b2:	460c      	mov	r4, r1
 80100b4:	2320      	movs	r3, #32
 80100b6:	2101      	movs	r1, #1
 80100b8:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 80100bc:	7201      	strb	r1, [r0, #8]
 80100be:	60c3      	str	r3, [r0, #12]
 80100c0:	4621      	mov	r1, r4
 80100c2:	4628      	mov	r0, r5
 80100c4:	f006 fd26 	bl	8016b14 <put_memory>
 80100c8:	60e4      	str	r4, [r4, #12]
 80100ca:	f804 7b20 	strb.w	r7, [r4], #32
 80100ce:	42a6      	cmp	r6, r4
 80100d0:	d1f6      	bne.n	80100c0 <rmw_uxrce_init_guard_condition_memory+0x1c>
 80100d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100d4:	4770      	bx	lr
 80100d6:	bf00      	nop

080100d8 <rmw_uxrce_fini_session_memory>:
 80100d8:	4601      	mov	r1, r0
 80100da:	4801      	ldr	r0, [pc, #4]	@ (80100e0 <rmw_uxrce_fini_session_memory+0x8>)
 80100dc:	f006 bd1a 	b.w	8016b14 <put_memory>
 80100e0:	2000d1d8 	.word	0x2000d1d8

080100e4 <rmw_uxrce_fini_node_memory>:
 80100e4:	b538      	push	{r3, r4, r5, lr}
 80100e6:	4604      	mov	r4, r0
 80100e8:	6800      	ldr	r0, [r0, #0]
 80100ea:	b128      	cbz	r0, 80100f8 <rmw_uxrce_fini_node_memory+0x14>
 80100ec:	4b07      	ldr	r3, [pc, #28]	@ (801010c <rmw_uxrce_fini_node_memory+0x28>)
 80100ee:	6819      	ldr	r1, [r3, #0]
 80100f0:	f7f0 f876 	bl	80001e0 <strcmp>
 80100f4:	b940      	cbnz	r0, 8010108 <rmw_uxrce_fini_node_memory+0x24>
 80100f6:	6020      	str	r0, [r4, #0]
 80100f8:	6861      	ldr	r1, [r4, #4]
 80100fa:	b129      	cbz	r1, 8010108 <rmw_uxrce_fini_node_memory+0x24>
 80100fc:	2500      	movs	r5, #0
 80100fe:	4804      	ldr	r0, [pc, #16]	@ (8010110 <rmw_uxrce_fini_node_memory+0x2c>)
 8010100:	610d      	str	r5, [r1, #16]
 8010102:	f006 fd07 	bl	8016b14 <put_memory>
 8010106:	6065      	str	r5, [r4, #4]
 8010108:	bd38      	pop	{r3, r4, r5, pc}
 801010a:	bf00      	nop
 801010c:	0801e824 	.word	0x0801e824
 8010110:	2000d004 	.word	0x2000d004

08010114 <rmw_uxrce_fini_publisher_memory>:
 8010114:	b510      	push	{r4, lr}
 8010116:	4604      	mov	r4, r0
 8010118:	6800      	ldr	r0, [r0, #0]
 801011a:	b128      	cbz	r0, 8010128 <rmw_uxrce_fini_publisher_memory+0x14>
 801011c:	4b06      	ldr	r3, [pc, #24]	@ (8010138 <rmw_uxrce_fini_publisher_memory+0x24>)
 801011e:	6819      	ldr	r1, [r3, #0]
 8010120:	f7f0 f85e 	bl	80001e0 <strcmp>
 8010124:	b938      	cbnz	r0, 8010136 <rmw_uxrce_fini_publisher_memory+0x22>
 8010126:	6020      	str	r0, [r4, #0]
 8010128:	6861      	ldr	r1, [r4, #4]
 801012a:	b121      	cbz	r1, 8010136 <rmw_uxrce_fini_publisher_memory+0x22>
 801012c:	4803      	ldr	r0, [pc, #12]	@ (801013c <rmw_uxrce_fini_publisher_memory+0x28>)
 801012e:	f006 fcf1 	bl	8016b14 <put_memory>
 8010132:	2300      	movs	r3, #0
 8010134:	6063      	str	r3, [r4, #4]
 8010136:	bd10      	pop	{r4, pc}
 8010138:	0801e824 	.word	0x0801e824
 801013c:	2000a040 	.word	0x2000a040

08010140 <rmw_uxrce_fini_subscription_memory>:
 8010140:	b510      	push	{r4, lr}
 8010142:	4604      	mov	r4, r0
 8010144:	6800      	ldr	r0, [r0, #0]
 8010146:	b128      	cbz	r0, 8010154 <rmw_uxrce_fini_subscription_memory+0x14>
 8010148:	4b06      	ldr	r3, [pc, #24]	@ (8010164 <rmw_uxrce_fini_subscription_memory+0x24>)
 801014a:	6819      	ldr	r1, [r3, #0]
 801014c:	f7f0 f848 	bl	80001e0 <strcmp>
 8010150:	b938      	cbnz	r0, 8010162 <rmw_uxrce_fini_subscription_memory+0x22>
 8010152:	6020      	str	r0, [r4, #0]
 8010154:	6861      	ldr	r1, [r4, #4]
 8010156:	b121      	cbz	r1, 8010162 <rmw_uxrce_fini_subscription_memory+0x22>
 8010158:	4803      	ldr	r0, [pc, #12]	@ (8010168 <rmw_uxrce_fini_subscription_memory+0x28>)
 801015a:	f006 fcdb 	bl	8016b14 <put_memory>
 801015e:	2300      	movs	r3, #0
 8010160:	6063      	str	r3, [r4, #4]
 8010162:	bd10      	pop	{r4, pc}
 8010164:	0801e824 	.word	0x0801e824
 8010168:	2000d29c 	.word	0x2000d29c

0801016c <rmw_uxrce_fini_service_memory>:
 801016c:	b510      	push	{r4, lr}
 801016e:	4604      	mov	r4, r0
 8010170:	6800      	ldr	r0, [r0, #0]
 8010172:	b128      	cbz	r0, 8010180 <rmw_uxrce_fini_service_memory+0x14>
 8010174:	4b06      	ldr	r3, [pc, #24]	@ (8010190 <rmw_uxrce_fini_service_memory+0x24>)
 8010176:	6819      	ldr	r1, [r3, #0]
 8010178:	f7f0 f832 	bl	80001e0 <strcmp>
 801017c:	b938      	cbnz	r0, 801018e <rmw_uxrce_fini_service_memory+0x22>
 801017e:	6020      	str	r0, [r4, #0]
 8010180:	6861      	ldr	r1, [r4, #4]
 8010182:	b121      	cbz	r1, 801018e <rmw_uxrce_fini_service_memory+0x22>
 8010184:	4803      	ldr	r0, [pc, #12]	@ (8010194 <rmw_uxrce_fini_service_memory+0x28>)
 8010186:	f006 fcc5 	bl	8016b14 <put_memory>
 801018a:	2300      	movs	r3, #0
 801018c:	6063      	str	r3, [r4, #4]
 801018e:	bd10      	pop	{r4, pc}
 8010190:	0801e824 	.word	0x0801e824
 8010194:	2000d28c 	.word	0x2000d28c

08010198 <rmw_uxrce_fini_client_memory>:
 8010198:	b510      	push	{r4, lr}
 801019a:	4604      	mov	r4, r0
 801019c:	6800      	ldr	r0, [r0, #0]
 801019e:	b128      	cbz	r0, 80101ac <rmw_uxrce_fini_client_memory+0x14>
 80101a0:	4b06      	ldr	r3, [pc, #24]	@ (80101bc <rmw_uxrce_fini_client_memory+0x24>)
 80101a2:	6819      	ldr	r1, [r3, #0]
 80101a4:	f7f0 f81c 	bl	80001e0 <strcmp>
 80101a8:	b938      	cbnz	r0, 80101ba <rmw_uxrce_fini_client_memory+0x22>
 80101aa:	6020      	str	r0, [r4, #0]
 80101ac:	6861      	ldr	r1, [r4, #4]
 80101ae:	b121      	cbz	r1, 80101ba <rmw_uxrce_fini_client_memory+0x22>
 80101b0:	4803      	ldr	r0, [pc, #12]	@ (80101c0 <rmw_uxrce_fini_client_memory+0x28>)
 80101b2:	f006 fcaf 	bl	8016b14 <put_memory>
 80101b6:	2300      	movs	r3, #0
 80101b8:	6063      	str	r3, [r4, #4]
 80101ba:	bd10      	pop	{r4, pc}
 80101bc:	0801e824 	.word	0x0801e824
 80101c0:	2000a8c0 	.word	0x2000a8c0

080101c4 <rmw_uxrce_fini_topic_memory>:
 80101c4:	b510      	push	{r4, lr}
 80101c6:	4601      	mov	r1, r0
 80101c8:	4604      	mov	r4, r0
 80101ca:	4803      	ldr	r0, [pc, #12]	@ (80101d8 <rmw_uxrce_fini_topic_memory+0x14>)
 80101cc:	f006 fca2 	bl	8016b14 <put_memory>
 80101d0:	2300      	movs	r3, #0
 80101d2:	61a3      	str	r3, [r4, #24]
 80101d4:	bd10      	pop	{r4, pc}
 80101d6:	bf00      	nop
 80101d8:	2000d1c8 	.word	0x2000d1c8

080101dc <rmw_uxrce_get_static_input_buffer_for_entity>:
 80101dc:	b082      	sub	sp, #8
 80101de:	b4f0      	push	{r4, r5, r6, r7}
 80101e0:	4923      	ldr	r1, [pc, #140]	@ (8010270 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 80101e2:	ac04      	add	r4, sp, #16
 80101e4:	e884 000c 	stmia.w	r4, {r2, r3}
 80101e8:	680d      	ldr	r5, [r1, #0]
 80101ea:	9c05      	ldr	r4, [sp, #20]
 80101ec:	2d00      	cmp	r5, #0
 80101ee:	d03d      	beq.n	801026c <rmw_uxrce_get_static_input_buffer_for_entity+0x90>
 80101f0:	462b      	mov	r3, r5
 80101f2:	2100      	movs	r1, #0
 80101f4:	68da      	ldr	r2, [r3, #12]
 80101f6:	689b      	ldr	r3, [r3, #8]
 80101f8:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 80101fc:	4290      	cmp	r0, r2
 80101fe:	bf08      	it	eq
 8010200:	3101      	addeq	r1, #1
 8010202:	2b00      	cmp	r3, #0
 8010204:	d1f6      	bne.n	80101f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8010206:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801020a:	2b02      	cmp	r3, #2
 801020c:	d026      	beq.n	801025c <rmw_uxrce_get_static_input_buffer_for_entity+0x80>
 801020e:	d906      	bls.n	801021e <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8010210:	2b03      	cmp	r3, #3
 8010212:	d004      	beq.n	801021e <rmw_uxrce_get_static_input_buffer_for_entity+0x42>
 8010214:	2100      	movs	r1, #0
 8010216:	bcf0      	pop	{r4, r5, r6, r7}
 8010218:	4608      	mov	r0, r1
 801021a:	b002      	add	sp, #8
 801021c:	4770      	bx	lr
 801021e:	b304      	cbz	r4, 8010262 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010220:	428c      	cmp	r4, r1
 8010222:	d81e      	bhi.n	8010262 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010224:	2d00      	cmp	r5, #0
 8010226:	d0f5      	beq.n	8010214 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010228:	2100      	movs	r1, #0
 801022a:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801022e:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8010232:	e002      	b.n	801023a <rmw_uxrce_get_static_input_buffer_for_entity+0x5e>
 8010234:	68ad      	ldr	r5, [r5, #8]
 8010236:	2d00      	cmp	r5, #0
 8010238:	d0ed      	beq.n	8010216 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 801023a:	68eb      	ldr	r3, [r5, #12]
 801023c:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8010240:	4290      	cmp	r0, r2
 8010242:	d1f7      	bne.n	8010234 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8010244:	f603 0318 	addw	r3, r3, #2072	@ 0x818
 8010248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024c:	42b2      	cmp	r2, r6
 801024e:	eb73 0407 	sbcs.w	r4, r3, r7
 8010252:	daef      	bge.n	8010234 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 8010254:	4616      	mov	r6, r2
 8010256:	461f      	mov	r7, r3
 8010258:	4629      	mov	r1, r5
 801025a:	e7eb      	b.n	8010234 <rmw_uxrce_get_static_input_buffer_for_entity+0x58>
 801025c:	b10c      	cbz	r4, 8010262 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801025e:	428c      	cmp	r4, r1
 8010260:	d9d8      	bls.n	8010214 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8010262:	bcf0      	pop	{r4, r5, r6, r7}
 8010264:	4802      	ldr	r0, [pc, #8]	@ (8010270 <rmw_uxrce_get_static_input_buffer_for_entity+0x94>)
 8010266:	b002      	add	sp, #8
 8010268:	f006 bc44 	b.w	8016af4 <get_memory>
 801026c:	4629      	mov	r1, r5
 801026e:	e7ca      	b.n	8010206 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8010270:	2000a030 	.word	0x2000a030

08010274 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010274:	4b12      	ldr	r3, [pc, #72]	@ (80102c0 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	b1fb      	cbz	r3, 80102ba <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 801027a:	b4f0      	push	{r4, r5, r6, r7}
 801027c:	f04f 0c00 	mov.w	ip, #0
 8010280:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010284:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8010288:	e001      	b.n	801028e <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 801028a:	689b      	ldr	r3, [r3, #8]
 801028c:	b193      	cbz	r3, 80102b4 <rmw_uxrce_find_static_input_buffer_by_owner+0x40>
 801028e:	68da      	ldr	r2, [r3, #12]
 8010290:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8010294:	4288      	cmp	r0, r1
 8010296:	d1f8      	bne.n	801028a <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 8010298:	f602 0218 	addw	r2, r2, #2072	@ 0x818
 801029c:	e9d2 6700 	ldrd	r6, r7, [r2]
 80102a0:	42a6      	cmp	r6, r4
 80102a2:	eb77 0205 	sbcs.w	r2, r7, r5
 80102a6:	daf0      	bge.n	801028a <rmw_uxrce_find_static_input_buffer_by_owner+0x16>
 80102a8:	469c      	mov	ip, r3
 80102aa:	689b      	ldr	r3, [r3, #8]
 80102ac:	4634      	mov	r4, r6
 80102ae:	463d      	mov	r5, r7
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d1ec      	bne.n	801028e <rmw_uxrce_find_static_input_buffer_by_owner+0x1a>
 80102b4:	4660      	mov	r0, ip
 80102b6:	bcf0      	pop	{r4, r5, r6, r7}
 80102b8:	4770      	bx	lr
 80102ba:	4618      	mov	r0, r3
 80102bc:	4770      	bx	lr
 80102be:	bf00      	nop
 80102c0:	2000a030 	.word	0x2000a030
 80102c4:	00000000 	.word	0x00000000

080102c8 <rmw_uxrce_clean_expired_static_input_buffer>:
 80102c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102cc:	4e38      	ldr	r6, [pc, #224]	@ (80103b0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>)
 80102ce:	f8d6 8000 	ldr.w	r8, [r6]
 80102d2:	b083      	sub	sp, #12
 80102d4:	f006 fffa 	bl	80172cc <rmw_uros_epoch_nanos>
 80102d8:	f1b8 0f00 	cmp.w	r8, #0
 80102dc:	d05f      	beq.n	801039e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 80102de:	46b1      	mov	r9, r6
 80102e0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80102e4:	f896 3820 	ldrb.w	r3, [r6, #2080]	@ 0x820
 80102e8:	2b04      	cmp	r3, #4
 80102ea:	4682      	mov	sl, r0
 80102ec:	468b      	mov	fp, r1
 80102ee:	d02d      	beq.n	801034c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 80102f0:	2b05      	cmp	r3, #5
 80102f2:	d041      	beq.n	8010378 <rmw_uxrce_clean_expired_static_input_buffer+0xb0>
 80102f4:	2b03      	cmp	r3, #3
 80102f6:	d029      	beq.n	801034c <rmw_uxrce_clean_expired_static_input_buffer+0x84>
 80102f8:	2200      	movs	r2, #0
 80102fa:	2300      	movs	r3, #0
 80102fc:	e9cd 2300 	strd	r2, r3, [sp]
 8010300:	2001      	movs	r0, #1
 8010302:	2100      	movs	r1, #0
 8010304:	9b00      	ldr	r3, [sp, #0]
 8010306:	f606 0618 	addw	r6, r6, #2072	@ 0x818
 801030a:	e9d6 6700 	ldrd	r6, r7, [r6]
 801030e:	18c2      	adds	r2, r0, r3
 8010310:	9b01      	ldr	r3, [sp, #4]
 8010312:	eb41 0303 	adc.w	r3, r1, r3
 8010316:	1994      	adds	r4, r2, r6
 8010318:	eb43 0507 	adc.w	r5, r3, r7
 801031c:	4554      	cmp	r4, sl
 801031e:	eb75 020b 	sbcs.w	r2, r5, fp
 8010322:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010326:	db03      	blt.n	8010330 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8010328:	45b2      	cmp	sl, r6
 801032a:	eb7b 0207 	sbcs.w	r2, fp, r7
 801032e:	da05      	bge.n	801033c <rmw_uxrce_clean_expired_static_input_buffer+0x74>
 8010330:	4641      	mov	r1, r8
 8010332:	4648      	mov	r0, r9
 8010334:	9300      	str	r3, [sp, #0]
 8010336:	f006 fbed 	bl	8016b14 <put_memory>
 801033a:	9b00      	ldr	r3, [sp, #0]
 801033c:	b37b      	cbz	r3, 801039e <rmw_uxrce_clean_expired_static_input_buffer+0xd6>
 801033e:	4698      	mov	r8, r3
 8010340:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010344:	f896 3820 	ldrb.w	r3, [r6, #2080]	@ 0x820
 8010348:	2b04      	cmp	r3, #4
 801034a:	d1d1      	bne.n	80102f0 <rmw_uxrce_clean_expired_static_input_buffer+0x28>
 801034c:	f8d6 1814 	ldr.w	r1, [r6, #2068]	@ 0x814
 8010350:	e9d1 2310 	ldrd	r2, r3, [r1, #64]	@ 0x40
 8010354:	e9cd 2300 	strd	r2, r3, [sp]
 8010358:	4313      	orrs	r3, r2
 801035a:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	@ 0x48
 801035e:	d015      	beq.n	801038c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8010360:	9a01      	ldr	r2, [sp, #4]
 8010362:	4b14      	ldr	r3, [pc, #80]	@ (80103b4 <rmw_uxrce_clean_expired_static_input_buffer+0xec>)
 8010364:	fb03 f702 	mul.w	r7, r3, r2
 8010368:	9a00      	ldr	r2, [sp, #0]
 801036a:	fba2 2303 	umull	r2, r3, r2, r3
 801036e:	e9cd 2300 	strd	r2, r3, [sp]
 8010372:	443b      	add	r3, r7
 8010374:	9301      	str	r3, [sp, #4]
 8010376:	e7c5      	b.n	8010304 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 8010378:	f8d6 1814 	ldr.w	r1, [r6, #2068]	@ 0x814
 801037c:	e9d1 2312 	ldrd	r2, r3, [r1, #72]	@ 0x48
 8010380:	e9cd 2300 	strd	r2, r3, [sp]
 8010384:	4313      	orrs	r3, r2
 8010386:	e9d1 0114 	ldrd	r0, r1, [r1, #80]	@ 0x50
 801038a:	d1e9      	bne.n	8010360 <rmw_uxrce_clean_expired_static_input_buffer+0x98>
 801038c:	ea50 0301 	orrs.w	r3, r0, r1
 8010390:	bf02      	ittt	eq
 8010392:	a305      	addeq	r3, pc, #20	@ (adr r3, 80103a8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>)
 8010394:	e9d3 2300 	ldrdeq	r2, r3, [r3]
 8010398:	e9cd 2300 	strdeq	r2, r3, [sp]
 801039c:	e7b2      	b.n	8010304 <rmw_uxrce_clean_expired_static_input_buffer+0x3c>
 801039e:	b003      	add	sp, #12
 80103a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103a4:	f3af 8000 	nop.w
 80103a8:	fc23ac00 	.word	0xfc23ac00
 80103ac:	00000006 	.word	0x00000006
 80103b0:	2000a030 	.word	0x2000a030
 80103b4:	3b9aca00 	.word	0x3b9aca00

080103b8 <run_xrce_session>:
 80103b8:	b510      	push	{r4, lr}
 80103ba:	788c      	ldrb	r4, [r1, #2]
 80103bc:	b086      	sub	sp, #24
 80103be:	2c01      	cmp	r4, #1
 80103c0:	f8ad 200e 	strh.w	r2, [sp, #14]
 80103c4:	d00c      	beq.n	80103e0 <run_xrce_session+0x28>
 80103c6:	4619      	mov	r1, r3
 80103c8:	2301      	movs	r3, #1
 80103ca:	9300      	str	r3, [sp, #0]
 80103cc:	f10d 020e 	add.w	r2, sp, #14
 80103d0:	f10d 0317 	add.w	r3, sp, #23
 80103d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80103d8:	f001 fb20 	bl	8011a1c <uxr_run_session_until_all_status>
 80103dc:	b006      	add	sp, #24
 80103de:	bd10      	pop	{r4, pc}
 80103e0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80103e4:	f000 ff38 	bl	8011258 <uxr_flash_output_streams>
 80103e8:	4620      	mov	r0, r4
 80103ea:	b006      	add	sp, #24
 80103ec:	bd10      	pop	{r4, pc}
 80103ee:	bf00      	nop

080103f0 <convert_qos_profile>:
 80103f0:	b430      	push	{r4, r5}
 80103f2:	7a0d      	ldrb	r5, [r1, #8]
 80103f4:	780c      	ldrb	r4, [r1, #0]
 80103f6:	7a4a      	ldrb	r2, [r1, #9]
 80103f8:	8889      	ldrh	r1, [r1, #4]
 80103fa:	8081      	strh	r1, [r0, #4]
 80103fc:	f1a5 0502 	sub.w	r5, r5, #2
 8010400:	f1a4 0402 	sub.w	r4, r4, #2
 8010404:	2a02      	cmp	r2, #2
 8010406:	fab5 f585 	clz	r5, r5
 801040a:	fab4 f484 	clz	r4, r4
 801040e:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8010412:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8010416:	bf18      	it	ne
 8010418:	2200      	movne	r2, #0
 801041a:	7045      	strb	r5, [r0, #1]
 801041c:	7084      	strb	r4, [r0, #2]
 801041e:	7002      	strb	r2, [r0, #0]
 8010420:	bc30      	pop	{r4, r5}
 8010422:	4770      	bx	lr

08010424 <generate_type_name>:
 8010424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010426:	2300      	movs	r3, #0
 8010428:	700b      	strb	r3, [r1, #0]
 801042a:	6803      	ldr	r3, [r0, #0]
 801042c:	b087      	sub	sp, #28
 801042e:	4614      	mov	r4, r2
 8010430:	b1d3      	cbz	r3, 8010468 <generate_type_name+0x44>
 8010432:	4d0f      	ldr	r5, [pc, #60]	@ (8010470 <generate_type_name+0x4c>)
 8010434:	462f      	mov	r7, r5
 8010436:	4a0f      	ldr	r2, [pc, #60]	@ (8010474 <generate_type_name+0x50>)
 8010438:	4e0f      	ldr	r6, [pc, #60]	@ (8010478 <generate_type_name+0x54>)
 801043a:	6840      	ldr	r0, [r0, #4]
 801043c:	9004      	str	r0, [sp, #16]
 801043e:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8010442:	4608      	mov	r0, r1
 8010444:	9205      	str	r2, [sp, #20]
 8010446:	9503      	str	r5, [sp, #12]
 8010448:	4a0c      	ldr	r2, [pc, #48]	@ (801047c <generate_type_name+0x58>)
 801044a:	9700      	str	r7, [sp, #0]
 801044c:	4621      	mov	r1, r4
 801044e:	f00a f83b 	bl	801a4c8 <sniprintf>
 8010452:	2800      	cmp	r0, #0
 8010454:	db05      	blt.n	8010462 <generate_type_name+0x3e>
 8010456:	4284      	cmp	r4, r0
 8010458:	bfd4      	ite	le
 801045a:	2000      	movle	r0, #0
 801045c:	2001      	movgt	r0, #1
 801045e:	b007      	add	sp, #28
 8010460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010462:	2000      	movs	r0, #0
 8010464:	b007      	add	sp, #28
 8010466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010468:	4b05      	ldr	r3, [pc, #20]	@ (8010480 <generate_type_name+0x5c>)
 801046a:	4d01      	ldr	r5, [pc, #4]	@ (8010470 <generate_type_name+0x4c>)
 801046c:	461f      	mov	r7, r3
 801046e:	e7e2      	b.n	8010436 <generate_type_name+0x12>
 8010470:	0801e0c0 	.word	0x0801e0c0
 8010474:	0801e0d4 	.word	0x0801e0d4
 8010478:	0801e0d8 	.word	0x0801e0d8
 801047c:	0801e0c4 	.word	0x0801e0c4
 8010480:	0801e5fc 	.word	0x0801e5fc

08010484 <generate_topic_name>:
 8010484:	b510      	push	{r4, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	4b09      	ldr	r3, [pc, #36]	@ (80104b0 <generate_topic_name+0x2c>)
 801048a:	9000      	str	r0, [sp, #0]
 801048c:	4614      	mov	r4, r2
 801048e:	4608      	mov	r0, r1
 8010490:	4611      	mov	r1, r2
 8010492:	4a08      	ldr	r2, [pc, #32]	@ (80104b4 <generate_topic_name+0x30>)
 8010494:	f00a f818 	bl	801a4c8 <sniprintf>
 8010498:	2800      	cmp	r0, #0
 801049a:	db05      	blt.n	80104a8 <generate_topic_name+0x24>
 801049c:	4284      	cmp	r4, r0
 801049e:	bfd4      	ite	le
 80104a0:	2000      	movle	r0, #0
 80104a2:	2001      	movgt	r0, #1
 80104a4:	b002      	add	sp, #8
 80104a6:	bd10      	pop	{r4, pc}
 80104a8:	2000      	movs	r0, #0
 80104aa:	b002      	add	sp, #8
 80104ac:	bd10      	pop	{r4, pc}
 80104ae:	bf00      	nop
 80104b0:	0801e0e4 	.word	0x0801e0e4
 80104b4:	0801e0dc 	.word	0x0801e0dc

080104b8 <is_uxrce_rmw_identifier_valid>:
 80104b8:	b510      	push	{r4, lr}
 80104ba:	4604      	mov	r4, r0
 80104bc:	b140      	cbz	r0, 80104d0 <is_uxrce_rmw_identifier_valid+0x18>
 80104be:	f006 fb81 	bl	8016bc4 <rmw_get_implementation_identifier>
 80104c2:	4601      	mov	r1, r0
 80104c4:	4620      	mov	r0, r4
 80104c6:	f7ef fe8b 	bl	80001e0 <strcmp>
 80104ca:	fab0 f080 	clz	r0, r0
 80104ce:	0940      	lsrs	r0, r0, #5
 80104d0:	bd10      	pop	{r4, pc}
 80104d2:	bf00      	nop

080104d4 <get_message_typesupport_handle>:
 80104d4:	6883      	ldr	r3, [r0, #8]
 80104d6:	4718      	bx	r3

080104d8 <get_message_typesupport_handle_function>:
 80104d8:	b510      	push	{r4, lr}
 80104da:	4604      	mov	r4, r0
 80104dc:	6800      	ldr	r0, [r0, #0]
 80104de:	f7ef fe7f 	bl	80001e0 <strcmp>
 80104e2:	2800      	cmp	r0, #0
 80104e4:	bf0c      	ite	eq
 80104e6:	4620      	moveq	r0, r4
 80104e8:	2000      	movne	r0, #0
 80104ea:	bd10      	pop	{r4, pc}

080104ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 80104ec:	f000 b862 	b.w	80105b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>

080104f0 <_String__max_serialized_size>:
 80104f0:	2000      	movs	r0, #0
 80104f2:	4770      	bx	lr

080104f4 <_String__cdr_serialize>:
 80104f4:	b1c0      	cbz	r0, 8010528 <_String__cdr_serialize+0x34>
 80104f6:	b570      	push	{r4, r5, r6, lr}
 80104f8:	6806      	ldr	r6, [r0, #0]
 80104fa:	460d      	mov	r5, r1
 80104fc:	4604      	mov	r4, r0
 80104fe:	b156      	cbz	r6, 8010516 <_String__cdr_serialize+0x22>
 8010500:	4630      	mov	r0, r6
 8010502:	f7ef fecd 	bl	80002a0 <strlen>
 8010506:	4631      	mov	r1, r6
 8010508:	6060      	str	r0, [r4, #4]
 801050a:	1c42      	adds	r2, r0, #1
 801050c:	4628      	mov	r0, r5
 801050e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010512:	f000 b915 	b.w	8010740 <ucdr_serialize_sequence_char>
 8010516:	4630      	mov	r0, r6
 8010518:	6060      	str	r0, [r4, #4]
 801051a:	4632      	mov	r2, r6
 801051c:	4631      	mov	r1, r6
 801051e:	4628      	mov	r0, r5
 8010520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010524:	f000 b90c 	b.w	8010740 <ucdr_serialize_sequence_char>
 8010528:	4770      	bx	lr
 801052a:	bf00      	nop

0801052c <get_serialized_size_std_msgs__msg__String>:
 801052c:	b510      	push	{r4, lr}
 801052e:	4604      	mov	r4, r0
 8010530:	b130      	cbz	r0, 8010540 <get_serialized_size_std_msgs__msg__String+0x14>
 8010532:	4608      	mov	r0, r1
 8010534:	2104      	movs	r1, #4
 8010536:	f000 f897 	bl	8010668 <ucdr_alignment>
 801053a:	6863      	ldr	r3, [r4, #4]
 801053c:	3305      	adds	r3, #5
 801053e:	4418      	add	r0, r3
 8010540:	bd10      	pop	{r4, pc}
 8010542:	bf00      	nop

08010544 <_String__cdr_deserialize>:
 8010544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010546:	460c      	mov	r4, r1
 8010548:	b083      	sub	sp, #12
 801054a:	b1a1      	cbz	r1, 8010576 <_String__cdr_deserialize+0x32>
 801054c:	688f      	ldr	r7, [r1, #8]
 801054e:	6809      	ldr	r1, [r1, #0]
 8010550:	ab01      	add	r3, sp, #4
 8010552:	463a      	mov	r2, r7
 8010554:	4606      	mov	r6, r0
 8010556:	f000 f905 	bl	8010764 <ucdr_deserialize_sequence_char>
 801055a:	9b01      	ldr	r3, [sp, #4]
 801055c:	4605      	mov	r5, r0
 801055e:	b920      	cbnz	r0, 801056a <_String__cdr_deserialize+0x26>
 8010560:	429f      	cmp	r7, r3
 8010562:	d30c      	bcc.n	801057e <_String__cdr_deserialize+0x3a>
 8010564:	4628      	mov	r0, r5
 8010566:	b003      	add	sp, #12
 8010568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801056a:	b103      	cbz	r3, 801056e <_String__cdr_deserialize+0x2a>
 801056c:	3b01      	subs	r3, #1
 801056e:	4628      	mov	r0, r5
 8010570:	6063      	str	r3, [r4, #4]
 8010572:	b003      	add	sp, #12
 8010574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010576:	460d      	mov	r5, r1
 8010578:	4628      	mov	r0, r5
 801057a:	b003      	add	sp, #12
 801057c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801057e:	2101      	movs	r1, #1
 8010580:	75b0      	strb	r0, [r6, #22]
 8010582:	7571      	strb	r1, [r6, #21]
 8010584:	6060      	str	r0, [r4, #4]
 8010586:	4630      	mov	r0, r6
 8010588:	f000 f884 	bl	8010694 <ucdr_align_to>
 801058c:	4630      	mov	r0, r6
 801058e:	9901      	ldr	r1, [sp, #4]
 8010590:	f000 f8b6 	bl	8010700 <ucdr_advance_buffer>
 8010594:	4628      	mov	r0, r5
 8010596:	b003      	add	sp, #12
 8010598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801059a:	bf00      	nop

0801059c <_String__get_serialized_size>:
 801059c:	b510      	push	{r4, lr}
 801059e:	4604      	mov	r4, r0
 80105a0:	b130      	cbz	r0, 80105b0 <_String__get_serialized_size+0x14>
 80105a2:	2104      	movs	r1, #4
 80105a4:	2000      	movs	r0, #0
 80105a6:	f000 f85f 	bl	8010668 <ucdr_alignment>
 80105aa:	6863      	ldr	r3, [r4, #4]
 80105ac:	3305      	adds	r3, #5
 80105ae:	4418      	add	r0, r3
 80105b0:	bd10      	pop	{r4, pc}
 80105b2:	bf00      	nop

080105b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 80105b4:	4800      	ldr	r0, [pc, #0]	@ (80105b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 80105b6:	4770      	bx	lr
 80105b8:	2000005c 	.word	0x2000005c

080105bc <ucdr_check_buffer_available_for>:
 80105bc:	7d83      	ldrb	r3, [r0, #22]
 80105be:	b93b      	cbnz	r3, 80105d0 <ucdr_check_buffer_available_for+0x14>
 80105c0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80105c4:	4419      	add	r1, r3
 80105c6:	4288      	cmp	r0, r1
 80105c8:	bf34      	ite	cc
 80105ca:	2000      	movcc	r0, #0
 80105cc:	2001      	movcs	r0, #1
 80105ce:	4770      	bx	lr
 80105d0:	2000      	movs	r0, #0
 80105d2:	4770      	bx	lr

080105d4 <ucdr_check_final_buffer_behavior>:
 80105d4:	7d83      	ldrb	r3, [r0, #22]
 80105d6:	b943      	cbnz	r3, 80105ea <ucdr_check_final_buffer_behavior+0x16>
 80105d8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80105dc:	4291      	cmp	r1, r2
 80105de:	b510      	push	{r4, lr}
 80105e0:	4604      	mov	r4, r0
 80105e2:	d205      	bcs.n	80105f0 <ucdr_check_final_buffer_behavior+0x1c>
 80105e4:	2301      	movs	r3, #1
 80105e6:	4618      	mov	r0, r3
 80105e8:	bd10      	pop	{r4, pc}
 80105ea:	2300      	movs	r3, #0
 80105ec:	4618      	mov	r0, r3
 80105ee:	4770      	bx	lr
 80105f0:	6982      	ldr	r2, [r0, #24]
 80105f2:	b13a      	cbz	r2, 8010604 <ucdr_check_final_buffer_behavior+0x30>
 80105f4:	69c1      	ldr	r1, [r0, #28]
 80105f6:	4790      	blx	r2
 80105f8:	f080 0301 	eor.w	r3, r0, #1
 80105fc:	b2db      	uxtb	r3, r3
 80105fe:	75a0      	strb	r0, [r4, #22]
 8010600:	4618      	mov	r0, r3
 8010602:	bd10      	pop	{r4, pc}
 8010604:	2001      	movs	r0, #1
 8010606:	75a0      	strb	r0, [r4, #22]
 8010608:	e7fa      	b.n	8010600 <ucdr_check_final_buffer_behavior+0x2c>
 801060a:	bf00      	nop

0801060c <ucdr_set_on_full_buffer_callback>:
 801060c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010610:	4770      	bx	lr
 8010612:	bf00      	nop

08010614 <ucdr_init_buffer_origin_offset_endian>:
 8010614:	b430      	push	{r4, r5}
 8010616:	9c02      	ldr	r4, [sp, #8]
 8010618:	f89d 500c 	ldrb.w	r5, [sp, #12]
 801061c:	6001      	str	r1, [r0, #0]
 801061e:	440a      	add	r2, r1
 8010620:	60c3      	str	r3, [r0, #12]
 8010622:	4421      	add	r1, r4
 8010624:	441c      	add	r4, r3
 8010626:	2300      	movs	r3, #0
 8010628:	6104      	str	r4, [r0, #16]
 801062a:	7505      	strb	r5, [r0, #20]
 801062c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8010630:	bc30      	pop	{r4, r5}
 8010632:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8010636:	7543      	strb	r3, [r0, #21]
 8010638:	7583      	strb	r3, [r0, #22]
 801063a:	4770      	bx	lr

0801063c <ucdr_init_buffer_origin_offset>:
 801063c:	b510      	push	{r4, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	9c04      	ldr	r4, [sp, #16]
 8010642:	9400      	str	r4, [sp, #0]
 8010644:	2401      	movs	r4, #1
 8010646:	9401      	str	r4, [sp, #4]
 8010648:	f7ff ffe4 	bl	8010614 <ucdr_init_buffer_origin_offset_endian>
 801064c:	b002      	add	sp, #8
 801064e:	bd10      	pop	{r4, pc}

08010650 <ucdr_init_buffer_origin>:
 8010650:	b510      	push	{r4, lr}
 8010652:	b082      	sub	sp, #8
 8010654:	2400      	movs	r4, #0
 8010656:	9400      	str	r4, [sp, #0]
 8010658:	f7ff fff0 	bl	801063c <ucdr_init_buffer_origin_offset>
 801065c:	b002      	add	sp, #8
 801065e:	bd10      	pop	{r4, pc}

08010660 <ucdr_init_buffer>:
 8010660:	2300      	movs	r3, #0
 8010662:	f7ff bff5 	b.w	8010650 <ucdr_init_buffer_origin>
 8010666:	bf00      	nop

08010668 <ucdr_alignment>:
 8010668:	fbb0 f3f1 	udiv	r3, r0, r1
 801066c:	fb03 0011 	mls	r0, r3, r1, r0
 8010670:	1a08      	subs	r0, r1, r0
 8010672:	3901      	subs	r1, #1
 8010674:	4008      	ands	r0, r1
 8010676:	4770      	bx	lr

08010678 <ucdr_buffer_alignment>:
 8010678:	7d43      	ldrb	r3, [r0, #21]
 801067a:	428b      	cmp	r3, r1
 801067c:	d208      	bcs.n	8010690 <ucdr_buffer_alignment+0x18>
 801067e:	6903      	ldr	r3, [r0, #16]
 8010680:	fbb3 f0f1 	udiv	r0, r3, r1
 8010684:	fb01 3010 	mls	r0, r1, r0, r3
 8010688:	1a08      	subs	r0, r1, r0
 801068a:	3901      	subs	r1, #1
 801068c:	4008      	ands	r0, r1
 801068e:	4770      	bx	lr
 8010690:	2000      	movs	r0, #0
 8010692:	4770      	bx	lr

08010694 <ucdr_align_to>:
 8010694:	b570      	push	{r4, r5, r6, lr}
 8010696:	4604      	mov	r4, r0
 8010698:	460e      	mov	r6, r1
 801069a:	f7ff ffed 	bl	8010678 <ucdr_buffer_alignment>
 801069e:	68a5      	ldr	r5, [r4, #8]
 80106a0:	6863      	ldr	r3, [r4, #4]
 80106a2:	6922      	ldr	r2, [r4, #16]
 80106a4:	7566      	strb	r6, [r4, #21]
 80106a6:	4405      	add	r5, r0
 80106a8:	42ab      	cmp	r3, r5
 80106aa:	4410      	add	r0, r2
 80106ac:	bf28      	it	cs
 80106ae:	462b      	movcs	r3, r5
 80106b0:	6120      	str	r0, [r4, #16]
 80106b2:	60a3      	str	r3, [r4, #8]
 80106b4:	bd70      	pop	{r4, r5, r6, pc}
 80106b6:	bf00      	nop

080106b8 <ucdr_buffer_length>:
 80106b8:	6882      	ldr	r2, [r0, #8]
 80106ba:	6800      	ldr	r0, [r0, #0]
 80106bc:	1a10      	subs	r0, r2, r0
 80106be:	4770      	bx	lr

080106c0 <ucdr_buffer_remaining>:
 80106c0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80106c4:	1a10      	subs	r0, r2, r0
 80106c6:	4770      	bx	lr

080106c8 <ucdr_check_final_buffer_behavior_array>:
 80106c8:	b538      	push	{r3, r4, r5, lr}
 80106ca:	7d83      	ldrb	r3, [r0, #22]
 80106cc:	b963      	cbnz	r3, 80106e8 <ucdr_check_final_buffer_behavior_array+0x20>
 80106ce:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80106d2:	429a      	cmp	r2, r3
 80106d4:	4604      	mov	r4, r0
 80106d6:	460d      	mov	r5, r1
 80106d8:	d308      	bcc.n	80106ec <ucdr_check_final_buffer_behavior_array+0x24>
 80106da:	b139      	cbz	r1, 80106ec <ucdr_check_final_buffer_behavior_array+0x24>
 80106dc:	6983      	ldr	r3, [r0, #24]
 80106de:	b163      	cbz	r3, 80106fa <ucdr_check_final_buffer_behavior_array+0x32>
 80106e0:	69c1      	ldr	r1, [r0, #28]
 80106e2:	4798      	blx	r3
 80106e4:	75a0      	strb	r0, [r4, #22]
 80106e6:	b108      	cbz	r0, 80106ec <ucdr_check_final_buffer_behavior_array+0x24>
 80106e8:	2000      	movs	r0, #0
 80106ea:	bd38      	pop	{r3, r4, r5, pc}
 80106ec:	4620      	mov	r0, r4
 80106ee:	f7ff ffe7 	bl	80106c0 <ucdr_buffer_remaining>
 80106f2:	42a8      	cmp	r0, r5
 80106f4:	bf28      	it	cs
 80106f6:	4628      	movcs	r0, r5
 80106f8:	bd38      	pop	{r3, r4, r5, pc}
 80106fa:	2301      	movs	r3, #1
 80106fc:	7583      	strb	r3, [r0, #22]
 80106fe:	e7f3      	b.n	80106e8 <ucdr_check_final_buffer_behavior_array+0x20>

08010700 <ucdr_advance_buffer>:
 8010700:	b538      	push	{r3, r4, r5, lr}
 8010702:	4604      	mov	r4, r0
 8010704:	460d      	mov	r5, r1
 8010706:	f7ff ff59 	bl	80105bc <ucdr_check_buffer_available_for>
 801070a:	b178      	cbz	r0, 801072c <ucdr_advance_buffer+0x2c>
 801070c:	68a3      	ldr	r3, [r4, #8]
 801070e:	6921      	ldr	r1, [r4, #16]
 8010710:	442b      	add	r3, r5
 8010712:	60a3      	str	r3, [r4, #8]
 8010714:	2301      	movs	r3, #1
 8010716:	4429      	add	r1, r5
 8010718:	7563      	strb	r3, [r4, #21]
 801071a:	6121      	str	r1, [r4, #16]
 801071c:	bd38      	pop	{r3, r4, r5, pc}
 801071e:	68a2      	ldr	r2, [r4, #8]
 8010720:	6923      	ldr	r3, [r4, #16]
 8010722:	4402      	add	r2, r0
 8010724:	4403      	add	r3, r0
 8010726:	1a2d      	subs	r5, r5, r0
 8010728:	60a2      	str	r2, [r4, #8]
 801072a:	6123      	str	r3, [r4, #16]
 801072c:	2201      	movs	r2, #1
 801072e:	4629      	mov	r1, r5
 8010730:	4620      	mov	r0, r4
 8010732:	f7ff ffc9 	bl	80106c8 <ucdr_check_final_buffer_behavior_array>
 8010736:	2800      	cmp	r0, #0
 8010738:	d1f1      	bne.n	801071e <ucdr_advance_buffer+0x1e>
 801073a:	2301      	movs	r3, #1
 801073c:	7563      	strb	r3, [r4, #21]
 801073e:	bd38      	pop	{r3, r4, r5, pc}

08010740 <ucdr_serialize_sequence_char>:
 8010740:	b570      	push	{r4, r5, r6, lr}
 8010742:	460e      	mov	r6, r1
 8010744:	4615      	mov	r5, r2
 8010746:	7d01      	ldrb	r1, [r0, #20]
 8010748:	4604      	mov	r4, r0
 801074a:	f007 f9d7 	bl	8017afc <ucdr_serialize_endian_uint32_t>
 801074e:	b90d      	cbnz	r5, 8010754 <ucdr_serialize_sequence_char+0x14>
 8010750:	2001      	movs	r0, #1
 8010752:	bd70      	pop	{r4, r5, r6, pc}
 8010754:	7d21      	ldrb	r1, [r4, #20]
 8010756:	462b      	mov	r3, r5
 8010758:	4632      	mov	r2, r6
 801075a:	4620      	mov	r0, r4
 801075c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010760:	f006 bdc2 	b.w	80172e8 <ucdr_serialize_endian_array_char>

08010764 <ucdr_deserialize_sequence_char>:
 8010764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010768:	461d      	mov	r5, r3
 801076a:	4616      	mov	r6, r2
 801076c:	460f      	mov	r7, r1
 801076e:	461a      	mov	r2, r3
 8010770:	7d01      	ldrb	r1, [r0, #20]
 8010772:	4604      	mov	r4, r0
 8010774:	f007 faea 	bl	8017d4c <ucdr_deserialize_endian_uint32_t>
 8010778:	682b      	ldr	r3, [r5, #0]
 801077a:	429e      	cmp	r6, r3
 801077c:	bf3c      	itt	cc
 801077e:	2201      	movcc	r2, #1
 8010780:	75a2      	strbcc	r2, [r4, #22]
 8010782:	b913      	cbnz	r3, 801078a <ucdr_deserialize_sequence_char+0x26>
 8010784:	2001      	movs	r0, #1
 8010786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801078a:	7d21      	ldrb	r1, [r4, #20]
 801078c:	463a      	mov	r2, r7
 801078e:	4620      	mov	r0, r4
 8010790:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010794:	f006 bdda 	b.w	801734c <ucdr_deserialize_endian_array_char>

08010798 <ucdr_serialize_sequence_uint8_t>:
 8010798:	b570      	push	{r4, r5, r6, lr}
 801079a:	460e      	mov	r6, r1
 801079c:	4615      	mov	r5, r2
 801079e:	7d01      	ldrb	r1, [r0, #20]
 80107a0:	4604      	mov	r4, r0
 80107a2:	f007 f9ab 	bl	8017afc <ucdr_serialize_endian_uint32_t>
 80107a6:	b90d      	cbnz	r5, 80107ac <ucdr_serialize_sequence_uint8_t+0x14>
 80107a8:	2001      	movs	r0, #1
 80107aa:	bd70      	pop	{r4, r5, r6, pc}
 80107ac:	7d21      	ldrb	r1, [r4, #20]
 80107ae:	462b      	mov	r3, r5
 80107b0:	4632      	mov	r2, r6
 80107b2:	4620      	mov	r0, r4
 80107b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80107b8:	f006 be2c 	b.w	8017414 <ucdr_serialize_endian_array_uint8_t>

080107bc <ucdr_deserialize_sequence_uint8_t>:
 80107bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107c0:	461d      	mov	r5, r3
 80107c2:	4616      	mov	r6, r2
 80107c4:	460f      	mov	r7, r1
 80107c6:	461a      	mov	r2, r3
 80107c8:	7d01      	ldrb	r1, [r0, #20]
 80107ca:	4604      	mov	r4, r0
 80107cc:	f007 fabe 	bl	8017d4c <ucdr_deserialize_endian_uint32_t>
 80107d0:	682b      	ldr	r3, [r5, #0]
 80107d2:	429e      	cmp	r6, r3
 80107d4:	bf3c      	itt	cc
 80107d6:	2201      	movcc	r2, #1
 80107d8:	75a2      	strbcc	r2, [r4, #22]
 80107da:	b913      	cbnz	r3, 80107e2 <ucdr_deserialize_sequence_uint8_t+0x26>
 80107dc:	2001      	movs	r0, #1
 80107de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107e2:	7d21      	ldrb	r1, [r4, #20]
 80107e4:	463a      	mov	r2, r7
 80107e6:	4620      	mov	r0, r4
 80107e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107ec:	f006 be76 	b.w	80174dc <ucdr_deserialize_endian_array_uint8_t>

080107f0 <uxr_buffer_delete_entity>:
 80107f0:	b530      	push	{r4, r5, lr}
 80107f2:	b08f      	sub	sp, #60	@ 0x3c
 80107f4:	2403      	movs	r4, #3
 80107f6:	2500      	movs	r5, #0
 80107f8:	e9cd 4500 	strd	r4, r5, [sp]
 80107fc:	9202      	str	r2, [sp, #8]
 80107fe:	ab06      	add	r3, sp, #24
 8010800:	2204      	movs	r2, #4
 8010802:	9103      	str	r1, [sp, #12]
 8010804:	4604      	mov	r4, r0
 8010806:	f001 fb45 	bl	8011e94 <uxr_prepare_stream_to_write_submessage>
 801080a:	b918      	cbnz	r0, 8010814 <uxr_buffer_delete_entity+0x24>
 801080c:	4604      	mov	r4, r0
 801080e:	4620      	mov	r0, r4
 8010810:	b00f      	add	sp, #60	@ 0x3c
 8010812:	bd30      	pop	{r4, r5, pc}
 8010814:	9902      	ldr	r1, [sp, #8]
 8010816:	aa05      	add	r2, sp, #20
 8010818:	4620      	mov	r0, r4
 801081a:	f001 fc75 	bl	8012108 <uxr_init_base_object_request>
 801081e:	a905      	add	r1, sp, #20
 8010820:	4604      	mov	r4, r0
 8010822:	a806      	add	r0, sp, #24
 8010824:	f003 fb2e 	bl	8013e84 <uxr_serialize_DELETE_Payload>
 8010828:	4620      	mov	r0, r4
 801082a:	b00f      	add	sp, #60	@ 0x3c
 801082c:	bd30      	pop	{r4, r5, pc}
 801082e:	bf00      	nop

08010830 <uxr_common_create_entity>:
 8010830:	b530      	push	{r4, r5, lr}
 8010832:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8010836:	b08d      	sub	sp, #52	@ 0x34
 8010838:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801083c:	2d01      	cmp	r5, #1
 801083e:	bf0c      	ite	eq
 8010840:	f003 0201 	andeq.w	r2, r3, #1
 8010844:	2200      	movne	r2, #0
 8010846:	330e      	adds	r3, #14
 8010848:	4604      	mov	r4, r0
 801084a:	441a      	add	r2, r3
 801084c:	f89d 0040 	ldrb.w	r0, [sp, #64]	@ 0x40
 8010850:	9001      	str	r0, [sp, #4]
 8010852:	2101      	movs	r1, #1
 8010854:	9100      	str	r1, [sp, #0]
 8010856:	b292      	uxth	r2, r2
 8010858:	9903      	ldr	r1, [sp, #12]
 801085a:	ab04      	add	r3, sp, #16
 801085c:	4620      	mov	r0, r4
 801085e:	f001 fb19 	bl	8011e94 <uxr_prepare_stream_to_write_submessage>
 8010862:	b918      	cbnz	r0, 801086c <uxr_common_create_entity+0x3c>
 8010864:	4604      	mov	r4, r0
 8010866:	4620      	mov	r0, r4
 8010868:	b00d      	add	sp, #52	@ 0x34
 801086a:	bd30      	pop	{r4, r5, pc}
 801086c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801086e:	9902      	ldr	r1, [sp, #8]
 8010870:	4620      	mov	r0, r4
 8010872:	f001 fc49 	bl	8012108 <uxr_init_base_object_request>
 8010876:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8010878:	4604      	mov	r4, r0
 801087a:	a804      	add	r0, sp, #16
 801087c:	f003 fa56 	bl	8013d2c <uxr_serialize_CREATE_Payload>
 8010880:	4620      	mov	r0, r4
 8010882:	b00d      	add	sp, #52	@ 0x34
 8010884:	bd30      	pop	{r4, r5, pc}
 8010886:	bf00      	nop

08010888 <uxr_buffer_create_participant_bin>:
 8010888:	b5f0      	push	{r4, r5, r6, r7, lr}
 801088a:	f5ad 7d17 	sub.w	sp, sp, #604	@ 0x25c
 801088e:	ac11      	add	r4, sp, #68	@ 0x44
 8010890:	9103      	str	r1, [sp, #12]
 8010892:	9e9c      	ldr	r6, [sp, #624]	@ 0x270
 8010894:	f8a4 3210 	strh.w	r3, [r4, #528]	@ 0x210
 8010898:	2103      	movs	r1, #3
 801089a:	7221      	strb	r1, [r4, #8]
 801089c:	2301      	movs	r3, #1
 801089e:	2100      	movs	r1, #0
 80108a0:	7123      	strb	r3, [r4, #4]
 80108a2:	f89d 7274 	ldrb.w	r7, [sp, #628]	@ 0x274
 80108a6:	9202      	str	r2, [sp, #8]
 80108a8:	4605      	mov	r5, r0
 80108aa:	f88d 1014 	strb.w	r1, [sp, #20]
 80108ae:	b1ce      	cbz	r6, 80108e4 <uxr_buffer_create_participant_bin+0x5c>
 80108b0:	f88d 301c 	strb.w	r3, [sp, #28]
 80108b4:	9608      	str	r6, [sp, #32]
 80108b6:	a809      	add	r0, sp, #36	@ 0x24
 80108b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80108bc:	a915      	add	r1, sp, #84	@ 0x54
 80108be:	f7ff fecf 	bl	8010660 <ucdr_init_buffer>
 80108c2:	a905      	add	r1, sp, #20
 80108c4:	a809      	add	r0, sp, #36	@ 0x24
 80108c6:	f002 fdf9 	bl	80134bc <uxr_serialize_OBJK_DomainParticipant_Binary>
 80108ca:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80108cc:	9401      	str	r4, [sp, #4]
 80108ce:	b283      	uxth	r3, r0
 80108d0:	9700      	str	r7, [sp, #0]
 80108d2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80108d6:	60e0      	str	r0, [r4, #12]
 80108d8:	4628      	mov	r0, r5
 80108da:	f7ff ffa9 	bl	8010830 <uxr_common_create_entity>
 80108de:	f50d 7d17 	add.w	sp, sp, #604	@ 0x25c
 80108e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108e4:	f88d 601c 	strb.w	r6, [sp, #28]
 80108e8:	e7e5      	b.n	80108b6 <uxr_buffer_create_participant_bin+0x2e>
 80108ea:	bf00      	nop

080108ec <uxr_buffer_create_topic_bin>:
 80108ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108ee:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80108f2:	ac13      	add	r4, sp, #76	@ 0x4c
 80108f4:	4605      	mov	r5, r0
 80108f6:	9105      	str	r1, [sp, #20]
 80108f8:	4618      	mov	r0, r3
 80108fa:	a997      	add	r1, sp, #604	@ 0x25c
 80108fc:	2602      	movs	r6, #2
 80108fe:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010902:	f89d 7280 	ldrb.w	r7, [sp, #640]	@ 0x280
 8010906:	f88d 6050 	strb.w	r6, [sp, #80]	@ 0x50
 801090a:	9e9f      	ldr	r6, [sp, #636]	@ 0x27c
 801090c:	f000 fa54 	bl	8010db8 <uxr_object_id_to_raw>
 8010910:	9a9e      	ldr	r2, [sp, #632]	@ 0x278
 8010912:	9206      	str	r2, [sp, #24]
 8010914:	2303      	movs	r3, #3
 8010916:	2101      	movs	r1, #1
 8010918:	7223      	strb	r3, [r4, #8]
 801091a:	a80b      	add	r0, sp, #44	@ 0x2c
 801091c:	2300      	movs	r3, #0
 801091e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010922:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8010926:	a917      	add	r1, sp, #92	@ 0x5c
 8010928:	f88d 301c 	strb.w	r3, [sp, #28]
 801092c:	960a      	str	r6, [sp, #40]	@ 0x28
 801092e:	f7ff fe97 	bl	8010660 <ucdr_init_buffer>
 8010932:	a906      	add	r1, sp, #24
 8010934:	a80b      	add	r0, sp, #44	@ 0x2c
 8010936:	f002 fde3 	bl	8013500 <uxr_serialize_OBJK_Topic_Binary>
 801093a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801093c:	9401      	str	r4, [sp, #4]
 801093e:	9700      	str	r7, [sp, #0]
 8010940:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010944:	4628      	mov	r0, r5
 8010946:	b2b3      	uxth	r3, r6
 8010948:	60e6      	str	r6, [r4, #12]
 801094a:	f7ff ff71 	bl	8010830 <uxr_common_create_entity>
 801094e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8010952:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010954 <uxr_buffer_create_publisher_bin>:
 8010954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010956:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801095a:	ac0e      	add	r4, sp, #56	@ 0x38
 801095c:	4605      	mov	r5, r0
 801095e:	9105      	str	r1, [sp, #20]
 8010960:	4618      	mov	r0, r3
 8010962:	2603      	movs	r6, #3
 8010964:	a992      	add	r1, sp, #584	@ 0x248
 8010966:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801096a:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 801096e:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010972:	f000 fa21 	bl	8010db8 <uxr_object_id_to_raw>
 8010976:	2300      	movs	r3, #0
 8010978:	a806      	add	r0, sp, #24
 801097a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801097e:	a912      	add	r1, sp, #72	@ 0x48
 8010980:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010984:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010988:	7226      	strb	r6, [r4, #8]
 801098a:	f7ff fe69 	bl	8010660 <ucdr_init_buffer>
 801098e:	a993      	add	r1, sp, #588	@ 0x24c
 8010990:	a806      	add	r0, sp, #24
 8010992:	f002 fe69 	bl	8013668 <uxr_serialize_OBJK_Publisher_Binary>
 8010996:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010998:	9700      	str	r7, [sp, #0]
 801099a:	9401      	str	r4, [sp, #4]
 801099c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80109a0:	4628      	mov	r0, r5
 80109a2:	b2b3      	uxth	r3, r6
 80109a4:	60e6      	str	r6, [r4, #12]
 80109a6:	f7ff ff43 	bl	8010830 <uxr_common_create_entity>
 80109aa:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 80109ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080109b0 <uxr_buffer_create_subscriber_bin>:
 80109b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109b2:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80109b6:	ac0e      	add	r4, sp, #56	@ 0x38
 80109b8:	4605      	mov	r5, r0
 80109ba:	9105      	str	r1, [sp, #20]
 80109bc:	4618      	mov	r0, r3
 80109be:	a992      	add	r1, sp, #584	@ 0x248
 80109c0:	2604      	movs	r6, #4
 80109c2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80109c6:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80109ca:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80109ce:	f000 f9f3 	bl	8010db8 <uxr_object_id_to_raw>
 80109d2:	2103      	movs	r1, #3
 80109d4:	2300      	movs	r3, #0
 80109d6:	a806      	add	r0, sp, #24
 80109d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80109dc:	7221      	strb	r1, [r4, #8]
 80109de:	a912      	add	r1, sp, #72	@ 0x48
 80109e0:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80109e4:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80109e8:	f7ff fe3a 	bl	8010660 <ucdr_init_buffer>
 80109ec:	a993      	add	r1, sp, #588	@ 0x24c
 80109ee:	a806      	add	r0, sp, #24
 80109f0:	f002 feea 	bl	80137c8 <uxr_serialize_OBJK_Subscriber_Binary>
 80109f4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80109f6:	9700      	str	r7, [sp, #0]
 80109f8:	9401      	str	r4, [sp, #4]
 80109fa:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80109fe:	4628      	mov	r0, r5
 8010a00:	b2b3      	uxth	r3, r6
 8010a02:	60e6      	str	r6, [r4, #12]
 8010a04:	f7ff ff14 	bl	8010830 <uxr_common_create_entity>
 8010a08:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a0e:	bf00      	nop

08010a10 <uxr_buffer_create_datawriter_bin>:
 8010a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a14:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010a18:	ac1d      	add	r4, sp, #116	@ 0x74
 8010a1a:	2505      	movs	r5, #5
 8010a1c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010a20:	9105      	str	r1, [sp, #20]
 8010a22:	4606      	mov	r6, r0
 8010a24:	a9a1      	add	r1, sp, #644	@ 0x284
 8010a26:	4618      	mov	r0, r3
 8010a28:	7125      	strb	r5, [r4, #4]
 8010a2a:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8010a2e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010a32:	2703      	movs	r7, #3
 8010a34:	f000 f9c0 	bl	8010db8 <uxr_object_id_to_raw>
 8010a38:	a90e      	add	r1, sp, #56	@ 0x38
 8010a3a:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010a3c:	7227      	strb	r7, [r4, #8]
 8010a3e:	f000 f9bb 	bl	8010db8 <uxr_object_id_to_raw>
 8010a42:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010a46:	f89d 12a5 	ldrb.w	r1, [sp, #677]	@ 0x2a5
 8010a4a:	3d00      	subs	r5, #0
 8010a4c:	f04f 0300 	mov.w	r3, #0
 8010a50:	bf18      	it	ne
 8010a52:	2501      	movne	r5, #1
 8010a54:	2201      	movs	r2, #1
 8010a56:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010a5a:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 8010a5e:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010a62:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010a66:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010a6a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010a6e:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010a72:	bb89      	cbnz	r1, 8010ad8 <uxr_buffer_create_datawriter_bin+0xc8>
 8010a74:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010a78:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010a7c:	f04f 0c13 	mov.w	ip, #19
 8010a80:	250b      	movs	r5, #11
 8010a82:	2221      	movs	r2, #33	@ 0x21
 8010a84:	2111      	movs	r1, #17
 8010a86:	2009      	movs	r0, #9
 8010a88:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8010a8c:	b923      	cbnz	r3, 8010a98 <uxr_buffer_create_datawriter_bin+0x88>
 8010a8e:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010a92:	4672      	mov	r2, lr
 8010a94:	4661      	mov	r1, ip
 8010a96:	4628      	mov	r0, r5
 8010a98:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	d025      	beq.n	8010aec <uxr_buffer_create_datawriter_bin+0xdc>
 8010aa0:	2b03      	cmp	r3, #3
 8010aa2:	d029      	beq.n	8010af8 <uxr_buffer_create_datawriter_bin+0xe8>
 8010aa4:	b32b      	cbz	r3, 8010af2 <uxr_buffer_create_datawriter_bin+0xe2>
 8010aa6:	a806      	add	r0, sp, #24
 8010aa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010aac:	a921      	add	r1, sp, #132	@ 0x84
 8010aae:	f7ff fdd7 	bl	8010660 <ucdr_init_buffer>
 8010ab2:	a90e      	add	r1, sp, #56	@ 0x38
 8010ab4:	a806      	add	r0, sp, #24
 8010ab6:	f002 ff39 	bl	801392c <uxr_serialize_OBJK_DataWriter_Binary>
 8010aba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010abc:	9401      	str	r4, [sp, #4]
 8010abe:	b283      	uxth	r3, r0
 8010ac0:	f8cd 8000 	str.w	r8, [sp]
 8010ac4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010ac8:	60e0      	str	r0, [r4, #12]
 8010aca:	4630      	mov	r0, r6
 8010acc:	f7ff feb0 	bl	8010830 <uxr_common_create_entity>
 8010ad0:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ad8:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010adc:	f04f 0c12 	mov.w	ip, #18
 8010ae0:	250a      	movs	r5, #10
 8010ae2:	2220      	movs	r2, #32
 8010ae4:	2110      	movs	r1, #16
 8010ae6:	2008      	movs	r0, #8
 8010ae8:	2702      	movs	r7, #2
 8010aea:	e7cd      	b.n	8010a88 <uxr_buffer_create_datawriter_bin+0x78>
 8010aec:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010af0:	e7d9      	b.n	8010aa6 <uxr_buffer_create_datawriter_bin+0x96>
 8010af2:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010af6:	e7d6      	b.n	8010aa6 <uxr_buffer_create_datawriter_bin+0x96>
 8010af8:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010afc:	e7d3      	b.n	8010aa6 <uxr_buffer_create_datawriter_bin+0x96>
 8010afe:	bf00      	nop

08010b00 <uxr_buffer_create_datareader_bin>:
 8010b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b04:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8010b08:	ac1f      	add	r4, sp, #124	@ 0x7c
 8010b0a:	2506      	movs	r5, #6
 8010b0c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010b10:	9105      	str	r1, [sp, #20]
 8010b12:	4606      	mov	r6, r0
 8010b14:	a9a3      	add	r1, sp, #652	@ 0x28c
 8010b16:	4618      	mov	r0, r3
 8010b18:	7125      	strb	r5, [r4, #4]
 8010b1a:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 8010b1e:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 8010b22:	2703      	movs	r7, #3
 8010b24:	f000 f948 	bl	8010db8 <uxr_object_id_to_raw>
 8010b28:	a90e      	add	r1, sp, #56	@ 0x38
 8010b2a:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 8010b2c:	7227      	strb	r7, [r4, #8]
 8010b2e:	f000 f943 	bl	8010db8 <uxr_object_id_to_raw>
 8010b32:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010b36:	f89d 12ad 	ldrb.w	r1, [sp, #685]	@ 0x2ad
 8010b3a:	3d00      	subs	r5, #0
 8010b3c:	f04f 0300 	mov.w	r3, #0
 8010b40:	bf18      	it	ne
 8010b42:	2501      	movne	r5, #1
 8010b44:	2201      	movs	r2, #1
 8010b46:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010b4a:	f88d 203a 	strb.w	r2, [sp, #58]	@ 0x3a
 8010b4e:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 8010b52:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010b56:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010b5a:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010b5e:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010b62:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010b66:	bb89      	cbnz	r1, 8010bcc <uxr_buffer_create_datareader_bin+0xcc>
 8010b68:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010b6c:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010b70:	f04f 0c13 	mov.w	ip, #19
 8010b74:	250b      	movs	r5, #11
 8010b76:	2221      	movs	r2, #33	@ 0x21
 8010b78:	2111      	movs	r1, #17
 8010b7a:	2009      	movs	r0, #9
 8010b7c:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8010b80:	b923      	cbnz	r3, 8010b8c <uxr_buffer_create_datareader_bin+0x8c>
 8010b82:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010b86:	4672      	mov	r2, lr
 8010b88:	4661      	mov	r1, ip
 8010b8a:	4628      	mov	r0, r5
 8010b8c:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8010b90:	2b01      	cmp	r3, #1
 8010b92:	d025      	beq.n	8010be0 <uxr_buffer_create_datareader_bin+0xe0>
 8010b94:	2b03      	cmp	r3, #3
 8010b96:	d029      	beq.n	8010bec <uxr_buffer_create_datareader_bin+0xec>
 8010b98:	b32b      	cbz	r3, 8010be6 <uxr_buffer_create_datareader_bin+0xe6>
 8010b9a:	a806      	add	r0, sp, #24
 8010b9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ba0:	a923      	add	r1, sp, #140	@ 0x8c
 8010ba2:	f7ff fd5d 	bl	8010660 <ucdr_init_buffer>
 8010ba6:	a90e      	add	r1, sp, #56	@ 0x38
 8010ba8:	a806      	add	r0, sp, #24
 8010baa:	f002 fe83 	bl	80138b4 <uxr_serialize_OBJK_DataReader_Binary>
 8010bae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010bb0:	9401      	str	r4, [sp, #4]
 8010bb2:	b283      	uxth	r3, r0
 8010bb4:	f8cd 8000 	str.w	r8, [sp]
 8010bb8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010bbc:	60e0      	str	r0, [r4, #12]
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	f7ff fe36 	bl	8010830 <uxr_common_create_entity>
 8010bc4:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8010bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bcc:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010bd0:	f04f 0c12 	mov.w	ip, #18
 8010bd4:	250a      	movs	r5, #10
 8010bd6:	2220      	movs	r2, #32
 8010bd8:	2110      	movs	r1, #16
 8010bda:	2008      	movs	r0, #8
 8010bdc:	2702      	movs	r7, #2
 8010bde:	e7cd      	b.n	8010b7c <uxr_buffer_create_datareader_bin+0x7c>
 8010be0:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010be4:	e7d9      	b.n	8010b9a <uxr_buffer_create_datareader_bin+0x9a>
 8010be6:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010bea:	e7d6      	b.n	8010b9a <uxr_buffer_create_datareader_bin+0x9a>
 8010bec:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010bf0:	e7d3      	b.n	8010b9a <uxr_buffer_create_datareader_bin+0x9a>
 8010bf2:	bf00      	nop

08010bf4 <get_custom_error>:
 8010bf4:	4b01      	ldr	r3, [pc, #4]	@ (8010bfc <get_custom_error+0x8>)
 8010bf6:	7818      	ldrb	r0, [r3, #0]
 8010bf8:	4770      	bx	lr
 8010bfa:	bf00      	nop
 8010bfc:	20009d64 	.word	0x20009d64

08010c00 <recv_custom_msg>:
 8010c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c04:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8010c08:	b089      	sub	sp, #36	@ 0x24
 8010c0a:	2600      	movs	r6, #0
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	9305      	str	r3, [sp, #20]
 8010c10:	468a      	mov	sl, r1
 8010c12:	4693      	mov	fp, r2
 8010c14:	f88d 601e 	strb.w	r6, [sp, #30]
 8010c18:	b325      	cbz	r5, 8010c64 <recv_custom_msg+0x64>
 8010c1a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 8010c1e:	f10d 081f 	add.w	r8, sp, #31
 8010c22:	af05      	add	r7, sp, #20
 8010c24:	f10d 061e 	add.w	r6, sp, #30
 8010c28:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8010c2c:	e002      	b.n	8010c34 <recv_custom_msg+0x34>
 8010c2e:	9b05      	ldr	r3, [sp, #20]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	dd0f      	ble.n	8010c54 <recv_custom_msg+0x54>
 8010c34:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010c38:	e9cd 5600 	strd	r5, r6, [sp]
 8010c3c:	4623      	mov	r3, r4
 8010c3e:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8010c42:	4622      	mov	r2, r4
 8010c44:	4648      	mov	r0, r9
 8010c46:	f001 fc7d 	bl	8012544 <uxr_read_framed_msg>
 8010c4a:	2800      	cmp	r0, #0
 8010c4c:	d0ef      	beq.n	8010c2e <recv_custom_msg+0x2e>
 8010c4e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010c52:	b1b3      	cbz	r3, 8010c82 <recv_custom_msg+0x82>
 8010c54:	4b0f      	ldr	r3, [pc, #60]	@ (8010c94 <recv_custom_msg+0x94>)
 8010c56:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010c5a:	701a      	strb	r2, [r3, #0]
 8010c5c:	2000      	movs	r0, #0
 8010c5e:	b009      	add	sp, #36	@ 0x24
 8010c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c64:	f10d 021f 	add.w	r2, sp, #31
 8010c68:	9200      	str	r2, [sp, #0]
 8010c6a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8010c6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010c72:	4601      	mov	r1, r0
 8010c74:	47a8      	blx	r5
 8010c76:	2800      	cmp	r0, #0
 8010c78:	d0ec      	beq.n	8010c54 <recv_custom_msg+0x54>
 8010c7a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d1e8      	bne.n	8010c54 <recv_custom_msg+0x54>
 8010c82:	f8cb 0000 	str.w	r0, [fp]
 8010c86:	2001      	movs	r0, #1
 8010c88:	f8ca 4000 	str.w	r4, [sl]
 8010c8c:	b009      	add	sp, #36	@ 0x24
 8010c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c92:	bf00      	nop
 8010c94:	20009d64 	.word	0x20009d64

08010c98 <send_custom_msg>:
 8010c98:	b570      	push	{r4, r5, r6, lr}
 8010c9a:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 8010c9e:	b086      	sub	sp, #24
 8010ca0:	4616      	mov	r6, r2
 8010ca2:	b975      	cbnz	r5, 8010cc2 <send_custom_msg+0x2a>
 8010ca4:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 8010ca8:	f10d 0317 	add.w	r3, sp, #23
 8010cac:	47a0      	blx	r4
 8010cae:	b108      	cbz	r0, 8010cb4 <send_custom_msg+0x1c>
 8010cb0:	42b0      	cmp	r0, r6
 8010cb2:	d015      	beq.n	8010ce0 <send_custom_msg+0x48>
 8010cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8010ce8 <send_custom_msg+0x50>)
 8010cb6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010cba:	701a      	strb	r2, [r3, #0]
 8010cbc:	2000      	movs	r0, #0
 8010cbe:	b006      	add	sp, #24
 8010cc0:	bd70      	pop	{r4, r5, r6, pc}
 8010cc2:	460b      	mov	r3, r1
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	f10d 0117 	add.w	r1, sp, #23
 8010cca:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8010cce:	9600      	str	r6, [sp, #0]
 8010cd0:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 8010cd4:	4602      	mov	r2, r0
 8010cd6:	f200 2002 	addw	r0, r0, #514	@ 0x202
 8010cda:	f001 fa4b 	bl	8012174 <uxr_write_framed_msg>
 8010cde:	e7e6      	b.n	8010cae <send_custom_msg+0x16>
 8010ce0:	2001      	movs	r0, #1
 8010ce2:	b006      	add	sp, #24
 8010ce4:	bd70      	pop	{r4, r5, r6, pc}
 8010ce6:	bf00      	nop
 8010ce8:	20009d64 	.word	0x20009d64

08010cec <uxr_set_custom_transport_callbacks>:
 8010cec:	b430      	push	{r4, r5}
 8010cee:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 8010cf2:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 8010cf6:	e9c0 549c 	strd	r5, r4, [r0, #624]	@ 0x270
 8010cfa:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 8010cfe:	bc30      	pop	{r4, r5}
 8010d00:	4770      	bx	lr
 8010d02:	bf00      	nop

08010d04 <uxr_init_custom_transport>:
 8010d04:	b538      	push	{r3, r4, r5, lr}
 8010d06:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8010d0a:	b303      	cbz	r3, 8010d4e <uxr_init_custom_transport+0x4a>
 8010d0c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8010d10:	4604      	mov	r4, r0
 8010d12:	b1e2      	cbz	r2, 8010d4e <uxr_init_custom_transport+0x4a>
 8010d14:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8010d18:	b1ca      	cbz	r2, 8010d4e <uxr_init_custom_transport+0x4a>
 8010d1a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 8010d1e:	b1b2      	cbz	r2, 8010d4e <uxr_init_custom_transport+0x4a>
 8010d20:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8010d24:	4798      	blx	r3
 8010d26:	4605      	mov	r5, r0
 8010d28:	b188      	cbz	r0, 8010d4e <uxr_init_custom_transport+0x4a>
 8010d2a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8010d2e:	b98b      	cbnz	r3, 8010d54 <uxr_init_custom_transport+0x50>
 8010d30:	480b      	ldr	r0, [pc, #44]	@ (8010d60 <uxr_init_custom_transport+0x5c>)
 8010d32:	490c      	ldr	r1, [pc, #48]	@ (8010d64 <uxr_init_custom_transport+0x60>)
 8010d34:	4a0c      	ldr	r2, [pc, #48]	@ (8010d68 <uxr_init_custom_transport+0x64>)
 8010d36:	f8c4 4278 	str.w	r4, [r4, #632]	@ 0x278
 8010d3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010d3e:	e9c4 019f 	strd	r0, r1, [r4, #636]	@ 0x27c
 8010d42:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8010d46:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8010d4a:	4628      	mov	r0, r5
 8010d4c:	bd38      	pop	{r3, r4, r5, pc}
 8010d4e:	2500      	movs	r5, #0
 8010d50:	4628      	mov	r0, r5
 8010d52:	bd38      	pop	{r3, r4, r5, pc}
 8010d54:	2100      	movs	r1, #0
 8010d56:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8010d5a:	f001 fa05 	bl	8012168 <uxr_init_framing_io>
 8010d5e:	e7e7      	b.n	8010d30 <uxr_init_custom_transport+0x2c>
 8010d60:	08010c99 	.word	0x08010c99
 8010d64:	08010c01 	.word	0x08010c01
 8010d68:	08010bf5 	.word	0x08010bf5

08010d6c <uxr_close_custom_transport>:
 8010d6c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8010d70:	4718      	bx	r3
 8010d72:	bf00      	nop

08010d74 <uxr_object_id>:
 8010d74:	b082      	sub	sp, #8
 8010d76:	2300      	movs	r3, #0
 8010d78:	f88d 1006 	strb.w	r1, [sp, #6]
 8010d7c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010d80:	f360 030f 	bfi	r3, r0, #0, #16
 8010d84:	f362 431f 	bfi	r3, r2, #16, #16
 8010d88:	4618      	mov	r0, r3
 8010d8a:	b002      	add	sp, #8
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop

08010d90 <uxr_object_id_from_raw>:
 8010d90:	7843      	ldrb	r3, [r0, #1]
 8010d92:	7801      	ldrb	r1, [r0, #0]
 8010d94:	b082      	sub	sp, #8
 8010d96:	f003 000f 	and.w	r0, r3, #15
 8010d9a:	f88d 0006 	strb.w	r0, [sp, #6]
 8010d9e:	091b      	lsrs	r3, r3, #4
 8010da0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8010da4:	2200      	movs	r2, #0
 8010da6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8010daa:	f363 020f 	bfi	r2, r3, #0, #16
 8010dae:	f361 421f 	bfi	r2, r1, #16, #16
 8010db2:	4610      	mov	r0, r2
 8010db4:	b002      	add	sp, #8
 8010db6:	4770      	bx	lr

08010db8 <uxr_object_id_to_raw>:
 8010db8:	4602      	mov	r2, r0
 8010dba:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8010dc4:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8010dc8:	700a      	strb	r2, [r1, #0]
 8010dca:	704b      	strb	r3, [r1, #1]
 8010dcc:	b002      	add	sp, #8
 8010dce:	4770      	bx	lr

08010dd0 <uxr_buffer_request_data>:
 8010dd0:	b530      	push	{r4, r5, lr}
 8010dd2:	b095      	sub	sp, #84	@ 0x54
 8010dd4:	4604      	mov	r4, r0
 8010dd6:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8010dd8:	9105      	str	r1, [sp, #20]
 8010dda:	2d00      	cmp	r5, #0
 8010ddc:	bf14      	ite	ne
 8010dde:	2101      	movne	r1, #1
 8010de0:	2100      	moveq	r1, #0
 8010de2:	9204      	str	r2, [sp, #16]
 8010de4:	f04f 0200 	mov.w	r2, #0
 8010de8:	9303      	str	r3, [sp, #12]
 8010dea:	f88d 301c 	strb.w	r3, [sp, #28]
 8010dee:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8010df2:	f88d 201d 	strb.w	r2, [sp, #29]
 8010df6:	f88d 201e 	strb.w	r2, [sp, #30]
 8010dfa:	d021      	beq.n	8010e40 <uxr_buffer_request_data+0x70>
 8010dfc:	686a      	ldr	r2, [r5, #4]
 8010dfe:	682b      	ldr	r3, [r5, #0]
 8010e00:	f8cd 202a 	str.w	r2, [sp, #42]	@ 0x2a
 8010e04:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 8010e08:	2210      	movs	r2, #16
 8010e0a:	2000      	movs	r0, #0
 8010e0c:	2108      	movs	r1, #8
 8010e0e:	e9cd 1000 	strd	r1, r0, [sp]
 8010e12:	ab0c      	add	r3, sp, #48	@ 0x30
 8010e14:	9905      	ldr	r1, [sp, #20]
 8010e16:	4620      	mov	r0, r4
 8010e18:	f001 f83c 	bl	8011e94 <uxr_prepare_stream_to_write_submessage>
 8010e1c:	b918      	cbnz	r0, 8010e26 <uxr_buffer_request_data+0x56>
 8010e1e:	4604      	mov	r4, r0
 8010e20:	4620      	mov	r0, r4
 8010e22:	b015      	add	sp, #84	@ 0x54
 8010e24:	bd30      	pop	{r4, r5, pc}
 8010e26:	9904      	ldr	r1, [sp, #16]
 8010e28:	aa06      	add	r2, sp, #24
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	f001 f96c 	bl	8012108 <uxr_init_base_object_request>
 8010e30:	a906      	add	r1, sp, #24
 8010e32:	4604      	mov	r4, r0
 8010e34:	a80c      	add	r0, sp, #48	@ 0x30
 8010e36:	f003 f8cf 	bl	8013fd8 <uxr_serialize_READ_DATA_Payload>
 8010e3a:	4620      	mov	r0, r4
 8010e3c:	b015      	add	sp, #84	@ 0x54
 8010e3e:	bd30      	pop	{r4, r5, pc}
 8010e40:	2208      	movs	r2, #8
 8010e42:	e7e2      	b.n	8010e0a <uxr_buffer_request_data+0x3a>

08010e44 <uxr_buffer_cancel_data>:
 8010e44:	b530      	push	{r4, r5, lr}
 8010e46:	b095      	sub	sp, #84	@ 0x54
 8010e48:	2400      	movs	r4, #0
 8010e4a:	2308      	movs	r3, #8
 8010e4c:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8010e50:	9300      	str	r3, [sp, #0]
 8010e52:	9205      	str	r2, [sp, #20]
 8010e54:	2501      	movs	r5, #1
 8010e56:	ab0c      	add	r3, sp, #48	@ 0x30
 8010e58:	2210      	movs	r2, #16
 8010e5a:	f8ad 401c 	strh.w	r4, [sp, #28]
 8010e5e:	f88d 401e 	strb.w	r4, [sp, #30]
 8010e62:	f8cd 4026 	str.w	r4, [sp, #38]	@ 0x26
 8010e66:	f8cd 402a 	str.w	r4, [sp, #42]	@ 0x2a
 8010e6a:	9103      	str	r1, [sp, #12]
 8010e6c:	4604      	mov	r4, r0
 8010e6e:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8010e72:	f001 f80f 	bl	8011e94 <uxr_prepare_stream_to_write_submessage>
 8010e76:	b918      	cbnz	r0, 8010e80 <uxr_buffer_cancel_data+0x3c>
 8010e78:	4604      	mov	r4, r0
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	b015      	add	sp, #84	@ 0x54
 8010e7e:	bd30      	pop	{r4, r5, pc}
 8010e80:	9905      	ldr	r1, [sp, #20]
 8010e82:	aa06      	add	r2, sp, #24
 8010e84:	4620      	mov	r0, r4
 8010e86:	f001 f93f 	bl	8012108 <uxr_init_base_object_request>
 8010e8a:	a906      	add	r1, sp, #24
 8010e8c:	4604      	mov	r4, r0
 8010e8e:	a80c      	add	r0, sp, #48	@ 0x30
 8010e90:	f003 f8a2 	bl	8013fd8 <uxr_serialize_READ_DATA_Payload>
 8010e94:	4620      	mov	r0, r4
 8010e96:	b015      	add	sp, #84	@ 0x54
 8010e98:	bd30      	pop	{r4, r5, pc}
 8010e9a:	bf00      	nop

08010e9c <read_submessage_format>:
 8010e9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ea0:	b095      	sub	sp, #84	@ 0x54
 8010ea2:	f8bd 9078 	ldrh.w	r9, [sp, #120]	@ 0x78
 8010ea6:	b113      	cbz	r3, 8010eae <read_submessage_format+0x12>
 8010ea8:	b015      	add	sp, #84	@ 0x54
 8010eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010eae:	460c      	mov	r4, r1
 8010eb0:	4616      	mov	r6, r2
 8010eb2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8010eb6:	461d      	mov	r5, r3
 8010eb8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010eba:	9304      	str	r3, [sp, #16]
 8010ebc:	1a52      	subs	r2, r2, r1
 8010ebe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010ec0:	9305      	str	r3, [sp, #20]
 8010ec2:	4607      	mov	r7, r0
 8010ec4:	a80c      	add	r0, sp, #48	@ 0x30
 8010ec6:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 8010eca:	f7ff fbc9 	bl	8010660 <ucdr_init_buffer>
 8010ece:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010ed2:	a80c      	add	r0, sp, #48	@ 0x30
 8010ed4:	f7ff fb9a 	bl	801060c <ucdr_set_on_full_buffer_callback>
 8010ed8:	69e3      	ldr	r3, [r4, #28]
 8010eda:	b193      	cbz	r3, 8010f02 <read_submessage_format+0x66>
 8010edc:	f1b8 0f07 	cmp.w	r8, #7
 8010ee0:	751d      	strb	r5, [r3, #20]
 8010ee2:	d03e      	beq.n	8010f62 <read_submessage_format+0xc6>
 8010ee4:	f1b8 0f08 	cmp.w	r8, #8
 8010ee8:	d02c      	beq.n	8010f44 <read_submessage_format+0xa8>
 8010eea:	f1b8 0f06 	cmp.w	r8, #6
 8010eee:	d011      	beq.n	8010f14 <read_submessage_format+0x78>
 8010ef0:	2201      	movs	r2, #1
 8010ef2:	751a      	strb	r2, [r3, #20]
 8010ef4:	4631      	mov	r1, r6
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f7ff fc02 	bl	8010700 <ucdr_advance_buffer>
 8010efc:	b015      	add	sp, #84	@ 0x54
 8010efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f02:	f1b8 0f07 	cmp.w	r8, #7
 8010f06:	d02c      	beq.n	8010f62 <read_submessage_format+0xc6>
 8010f08:	f1b8 0f08 	cmp.w	r8, #8
 8010f0c:	d01a      	beq.n	8010f44 <read_submessage_format+0xa8>
 8010f0e:	f1b8 0f06 	cmp.w	r8, #6
 8010f12:	d1ef      	bne.n	8010ef4 <read_submessage_format+0x58>
 8010f14:	f8d7 5088 	ldr.w	r5, [r7, #136]	@ 0x88
 8010f18:	b18d      	cbz	r5, 8010f3e <read_submessage_format+0xa2>
 8010f1a:	2306      	movs	r3, #6
 8010f1c:	f88d 3016 	strb.w	r3, [sp, #22]
 8010f20:	aa0c      	add	r2, sp, #48	@ 0x30
 8010f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010f26:	9302      	str	r3, [sp, #8]
 8010f28:	9200      	str	r2, [sp, #0]
 8010f2a:	9b04      	ldr	r3, [sp, #16]
 8010f2c:	9905      	ldr	r1, [sp, #20]
 8010f2e:	9601      	str	r6, [sp, #4]
 8010f30:	464a      	mov	r2, r9
 8010f32:	4638      	mov	r0, r7
 8010f34:	47a8      	blx	r5
 8010f36:	2301      	movs	r3, #1
 8010f38:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010f3c:	69e3      	ldr	r3, [r4, #28]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d1d6      	bne.n	8010ef0 <read_submessage_format+0x54>
 8010f42:	e7d7      	b.n	8010ef4 <read_submessage_format+0x58>
 8010f44:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8010f48:	2a00      	cmp	r2, #0
 8010f4a:	d0f8      	beq.n	8010f3e <read_submessage_format+0xa2>
 8010f4c:	a906      	add	r1, sp, #24
 8010f4e:	a80c      	add	r0, sp, #48	@ 0x30
 8010f50:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8010f52:	f003 f907 	bl	8014164 <uxr_deserialize_SampleIdentity>
 8010f56:	2800      	cmp	r0, #0
 8010f58:	d13c      	bne.n	8010fd4 <read_submessage_format+0x138>
 8010f5a:	69e3      	ldr	r3, [r4, #28]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d1c7      	bne.n	8010ef0 <read_submessage_format+0x54>
 8010f60:	e7c8      	b.n	8010ef4 <read_submessage_format+0x58>
 8010f62:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010f66:	b132      	cbz	r2, 8010f76 <read_submessage_format+0xda>
 8010f68:	a906      	add	r1, sp, #24
 8010f6a:	a80c      	add	r0, sp, #48	@ 0x30
 8010f6c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8010f6e:	f002 fdb7 	bl	8013ae0 <uxr_deserialize_BaseObjectRequest>
 8010f72:	b930      	cbnz	r0, 8010f82 <read_submessage_format+0xe6>
 8010f74:	69e3      	ldr	r3, [r4, #28]
 8010f76:	68a2      	ldr	r2, [r4, #8]
 8010f78:	4432      	add	r2, r6
 8010f7a:	60a2      	str	r2, [r4, #8]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d1b7      	bne.n	8010ef0 <read_submessage_format+0x54>
 8010f80:	e7b8      	b.n	8010ef4 <read_submessage_format+0x58>
 8010f82:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010f86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010f88:	1a52      	subs	r2, r2, r1
 8010f8a:	a80c      	add	r0, sp, #48	@ 0x30
 8010f8c:	1aed      	subs	r5, r5, r3
 8010f8e:	f7ff fb67 	bl	8010660 <ucdr_init_buffer>
 8010f92:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010f96:	a80c      	add	r0, sp, #48	@ 0x30
 8010f98:	f7ff fb38 	bl	801060c <ucdr_set_on_full_buffer_callback>
 8010f9c:	4435      	add	r5, r6
 8010f9e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8010fa2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8010fa6:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8010faa:	9002      	str	r0, [sp, #8]
 8010fac:	2207      	movs	r2, #7
 8010fae:	f88d 2016 	strb.w	r2, [sp, #22]
 8010fb2:	b2ad      	uxth	r5, r5
 8010fb4:	aa0c      	add	r2, sp, #48	@ 0x30
 8010fb6:	9200      	str	r2, [sp, #0]
 8010fb8:	9501      	str	r5, [sp, #4]
 8010fba:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8010fbe:	b29b      	uxth	r3, r3
 8010fc0:	9905      	ldr	r1, [sp, #20]
 8010fc2:	f8d7 50ac 	ldr.w	r5, [r7, #172]	@ 0xac
 8010fc6:	464a      	mov	r2, r9
 8010fc8:	4638      	mov	r0, r7
 8010fca:	47a8      	blx	r5
 8010fcc:	2301      	movs	r3, #1
 8010fce:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8010fd2:	e7cf      	b.n	8010f74 <read_submessage_format+0xd8>
 8010fd4:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8010fd8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010fda:	1a52      	subs	r2, r2, r1
 8010fdc:	a80c      	add	r0, sp, #48	@ 0x30
 8010fde:	1aed      	subs	r5, r5, r3
 8010fe0:	f7ff fb3e 	bl	8010660 <ucdr_init_buffer>
 8010fe4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8010fe8:	a80c      	add	r0, sp, #48	@ 0x30
 8010fea:	f7ff fb0f 	bl	801060c <ucdr_set_on_full_buffer_callback>
 8010fee:	4435      	add	r5, r6
 8010ff0:	2308      	movs	r3, #8
 8010ff2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8010ff6:	f88d 3016 	strb.w	r3, [sp, #22]
 8010ffa:	b2ad      	uxth	r5, r5
 8010ffc:	ab0c      	add	r3, sp, #48	@ 0x30
 8010ffe:	9300      	str	r3, [sp, #0]
 8011000:	9002      	str	r0, [sp, #8]
 8011002:	9501      	str	r5, [sp, #4]
 8011004:	ab06      	add	r3, sp, #24
 8011006:	9905      	ldr	r1, [sp, #20]
 8011008:	f8d7 50a4 	ldr.w	r5, [r7, #164]	@ 0xa4
 801100c:	464a      	mov	r2, r9
 801100e:	4638      	mov	r0, r7
 8011010:	47a8      	blx	r5
 8011012:	2301      	movs	r3, #1
 8011014:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011018:	e79f      	b.n	8010f5a <read_submessage_format+0xbe>
 801101a:	bf00      	nop

0801101c <on_get_fragmentation_info>:
 801101c:	b500      	push	{lr}
 801101e:	b08b      	sub	sp, #44	@ 0x2c
 8011020:	4601      	mov	r1, r0
 8011022:	2204      	movs	r2, #4
 8011024:	a802      	add	r0, sp, #8
 8011026:	f7ff fb1b 	bl	8010660 <ucdr_init_buffer>
 801102a:	f10d 0305 	add.w	r3, sp, #5
 801102e:	a802      	add	r0, sp, #8
 8011030:	f10d 0206 	add.w	r2, sp, #6
 8011034:	a901      	add	r1, sp, #4
 8011036:	f001 fe69 	bl	8012d0c <uxr_read_submessage_header>
 801103a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801103e:	2b0d      	cmp	r3, #13
 8011040:	d003      	beq.n	801104a <on_get_fragmentation_info+0x2e>
 8011042:	2000      	movs	r0, #0
 8011044:	b00b      	add	sp, #44	@ 0x2c
 8011046:	f85d fb04 	ldr.w	pc, [sp], #4
 801104a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801104e:	f013 0f02 	tst.w	r3, #2
 8011052:	bf14      	ite	ne
 8011054:	2002      	movne	r0, #2
 8011056:	2001      	moveq	r0, #1
 8011058:	b00b      	add	sp, #44	@ 0x2c
 801105a:	f85d fb04 	ldr.w	pc, [sp], #4
 801105e:	bf00      	nop

08011060 <read_submessage_get_info>:
 8011060:	b570      	push	{r4, r5, r6, lr}
 8011062:	2500      	movs	r5, #0
 8011064:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8011068:	4604      	mov	r4, r0
 801106a:	f44f 7224 	mov.w	r2, #656	@ 0x290
 801106e:	460e      	mov	r6, r1
 8011070:	a810      	add	r0, sp, #64	@ 0x40
 8011072:	4629      	mov	r1, r5
 8011074:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8011078:	f009 fba4 	bl	801a7c4 <memset>
 801107c:	a903      	add	r1, sp, #12
 801107e:	4630      	mov	r0, r6
 8011080:	f002 feec 	bl	8013e5c <uxr_deserialize_GET_INFO_Payload>
 8011084:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8011088:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801108c:	4620      	mov	r0, r4
 801108e:	f001 f833 	bl	80120f8 <uxr_session_header_offset>
 8011092:	462b      	mov	r3, r5
 8011094:	9000      	str	r0, [sp, #0]
 8011096:	a905      	add	r1, sp, #20
 8011098:	a808      	add	r0, sp, #32
 801109a:	220c      	movs	r2, #12
 801109c:	f7ff face 	bl	801063c <ucdr_init_buffer_origin_offset>
 80110a0:	a910      	add	r1, sp, #64	@ 0x40
 80110a2:	a808      	add	r0, sp, #32
 80110a4:	f002 ff4c 	bl	8013f40 <uxr_serialize_INFO_Payload>
 80110a8:	9b08      	ldr	r3, [sp, #32]
 80110aa:	462a      	mov	r2, r5
 80110ac:	4629      	mov	r1, r5
 80110ae:	4620      	mov	r0, r4
 80110b0:	f000 ffca 	bl	8012048 <uxr_stamp_session_header>
 80110b4:	a808      	add	r0, sp, #32
 80110b6:	f7ff faff 	bl	80106b8 <ucdr_buffer_length>
 80110ba:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80110bc:	4602      	mov	r2, r0
 80110be:	a905      	add	r1, sp, #20
 80110c0:	e9d3 0400 	ldrd	r0, r4, [r3]
 80110c4:	47a0      	blx	r4
 80110c6:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80110ca:	bd70      	pop	{r4, r5, r6, pc}

080110cc <write_submessage_acknack.isra.0>:
 80110cc:	b570      	push	{r4, r5, r6, lr}
 80110ce:	b092      	sub	sp, #72	@ 0x48
 80110d0:	4605      	mov	r5, r0
 80110d2:	460e      	mov	r6, r1
 80110d4:	4614      	mov	r4, r2
 80110d6:	f001 f80f 	bl	80120f8 <uxr_session_header_offset>
 80110da:	a905      	add	r1, sp, #20
 80110dc:	9000      	str	r0, [sp, #0]
 80110de:	2300      	movs	r3, #0
 80110e0:	a80a      	add	r0, sp, #40	@ 0x28
 80110e2:	2211      	movs	r2, #17
 80110e4:	f7ff faaa 	bl	801063c <ucdr_init_buffer_origin_offset>
 80110e8:	2218      	movs	r2, #24
 80110ea:	fb02 5404 	mla	r4, r2, r4, r5
 80110ee:	2300      	movs	r3, #0
 80110f0:	2205      	movs	r2, #5
 80110f2:	3450      	adds	r4, #80	@ 0x50
 80110f4:	a80a      	add	r0, sp, #40	@ 0x28
 80110f6:	210a      	movs	r1, #10
 80110f8:	f001 fdee 	bl	8012cd8 <uxr_buffer_submessage_header>
 80110fc:	a903      	add	r1, sp, #12
 80110fe:	4620      	mov	r0, r4
 8011100:	f007 fb54 	bl	80187ac <uxr_compute_acknack>
 8011104:	a903      	add	r1, sp, #12
 8011106:	ba43      	rev16	r3, r0
 8011108:	a80a      	add	r0, sp, #40	@ 0x28
 801110a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801110e:	f88d 6010 	strb.w	r6, [sp, #16]
 8011112:	f002 ff85 	bl	8014020 <uxr_serialize_ACKNACK_Payload>
 8011116:	2200      	movs	r2, #0
 8011118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801111a:	4611      	mov	r1, r2
 801111c:	4628      	mov	r0, r5
 801111e:	f000 ff93 	bl	8012048 <uxr_stamp_session_header>
 8011122:	a80a      	add	r0, sp, #40	@ 0x28
 8011124:	f7ff fac8 	bl	80106b8 <ucdr_buffer_length>
 8011128:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 801112a:	4602      	mov	r2, r0
 801112c:	a905      	add	r1, sp, #20
 801112e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011132:	47a0      	blx	r4
 8011134:	b012      	add	sp, #72	@ 0x48
 8011136:	bd70      	pop	{r4, r5, r6, pc}

08011138 <uxr_init_session>:
 8011138:	b5d0      	push	{r4, r6, r7, lr}
 801113a:	2300      	movs	r3, #0
 801113c:	2600      	movs	r6, #0
 801113e:	2700      	movs	r7, #0
 8011140:	e9c0 6726 	strd	r6, r7, [r0, #152]	@ 0x98
 8011144:	4604      	mov	r4, r0
 8011146:	6701      	str	r1, [r0, #112]	@ 0x70
 8011148:	e9c0 331d 	strd	r3, r3, [r0, #116]	@ 0x74
 801114c:	e9c0 331f 	strd	r3, r3, [r0, #124]	@ 0x7c
 8011150:	e9c0 3321 	strd	r3, r3, [r0, #132]	@ 0x84
 8011154:	e9c0 3323 	strd	r3, r3, [r0, #140]	@ 0x8c
 8011158:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
 801115c:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8011160:	2181      	movs	r1, #129	@ 0x81
 8011162:	f000 fedb 	bl	8011f1c <uxr_init_session_info>
 8011166:	f104 0008 	add.w	r0, r4, #8
 801116a:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
 801116e:	f001 bccf 	b.w	8012b10 <uxr_init_stream_storage>
 8011172:	bf00      	nop

08011174 <uxr_set_status_callback>:
 8011174:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8011178:	4770      	bx	lr
 801117a:	bf00      	nop

0801117c <uxr_set_topic_callback>:
 801117c:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8011180:	4770      	bx	lr
 8011182:	bf00      	nop

08011184 <uxr_set_request_callback>:
 8011184:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8011188:	4770      	bx	lr
 801118a:	bf00      	nop

0801118c <uxr_set_reply_callback>:
 801118c:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8011190:	4770      	bx	lr
 8011192:	bf00      	nop

08011194 <uxr_create_output_best_effort_stream>:
 8011194:	b510      	push	{r4, lr}
 8011196:	b084      	sub	sp, #16
 8011198:	e9cd 2100 	strd	r2, r1, [sp]
 801119c:	4604      	mov	r4, r0
 801119e:	f000 ffab 	bl	80120f8 <uxr_session_header_offset>
 80111a2:	e9dd 2100 	ldrd	r2, r1, [sp]
 80111a6:	4603      	mov	r3, r0
 80111a8:	f104 0008 	add.w	r0, r4, #8
 80111ac:	b004      	add	sp, #16
 80111ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111b2:	f001 bcf7 	b.w	8012ba4 <uxr_add_output_best_effort_buffer>
 80111b6:	bf00      	nop

080111b8 <uxr_create_output_reliable_stream>:
 80111b8:	b530      	push	{r4, r5, lr}
 80111ba:	b089      	sub	sp, #36	@ 0x24
 80111bc:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80111c0:	9303      	str	r3, [sp, #12]
 80111c2:	4604      	mov	r4, r0
 80111c4:	f000 ff98 	bl	80120f8 <uxr_session_header_offset>
 80111c8:	4605      	mov	r5, r0
 80111ca:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80111ce:	9905      	ldr	r1, [sp, #20]
 80111d0:	9500      	str	r5, [sp, #0]
 80111d2:	f104 0008 	add.w	r0, r4, #8
 80111d6:	f001 fcf7 	bl	8012bc8 <uxr_add_output_reliable_buffer>
 80111da:	2200      	movs	r2, #0
 80111dc:	b2c3      	uxtb	r3, r0
 80111de:	f363 0207 	bfi	r2, r3, #0, #8
 80111e2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80111e6:	f363 220f 	bfi	r2, r3, #8, #8
 80111ea:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80111ee:	f363 4217 	bfi	r2, r3, #16, #8
 80111f2:	0e03      	lsrs	r3, r0, #24
 80111f4:	f363 621f 	bfi	r2, r3, #24, #8
 80111f8:	4610      	mov	r0, r2
 80111fa:	b009      	add	sp, #36	@ 0x24
 80111fc:	bd30      	pop	{r4, r5, pc}
 80111fe:	bf00      	nop

08011200 <uxr_create_input_best_effort_stream>:
 8011200:	b082      	sub	sp, #8
 8011202:	3008      	adds	r0, #8
 8011204:	b002      	add	sp, #8
 8011206:	f001 bcf9 	b.w	8012bfc <uxr_add_input_best_effort_buffer>
 801120a:	bf00      	nop

0801120c <uxr_create_input_reliable_stream>:
 801120c:	b510      	push	{r4, lr}
 801120e:	b084      	sub	sp, #16
 8011210:	4c0b      	ldr	r4, [pc, #44]	@ (8011240 <uxr_create_input_reliable_stream+0x34>)
 8011212:	9400      	str	r4, [sp, #0]
 8011214:	3008      	adds	r0, #8
 8011216:	f001 fd07 	bl	8012c28 <uxr_add_input_reliable_buffer>
 801121a:	2200      	movs	r2, #0
 801121c:	b2c3      	uxtb	r3, r0
 801121e:	f363 0207 	bfi	r2, r3, #0, #8
 8011222:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011226:	f363 220f 	bfi	r2, r3, #8, #8
 801122a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801122e:	f363 4217 	bfi	r2, r3, #16, #8
 8011232:	0e03      	lsrs	r3, r0, #24
 8011234:	f363 621f 	bfi	r2, r3, #24, #8
 8011238:	4610      	mov	r0, r2
 801123a:	b004      	add	sp, #16
 801123c:	bd10      	pop	{r4, pc}
 801123e:	bf00      	nop
 8011240:	0801101d 	.word	0x0801101d

08011244 <uxr_epoch_nanos>:
 8011244:	b510      	push	{r4, lr}
 8011246:	4604      	mov	r4, r0
 8011248:	f001 fda8 	bl	8012d9c <uxr_nanos>
 801124c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8011250:	1ac0      	subs	r0, r0, r3
 8011252:	eb61 0102 	sbc.w	r1, r1, r2
 8011256:	bd10      	pop	{r4, pc}

08011258 <uxr_flash_output_streams>:
 8011258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801125c:	7e03      	ldrb	r3, [r0, #24]
 801125e:	b084      	sub	sp, #16
 8011260:	4604      	mov	r4, r0
 8011262:	b1fb      	cbz	r3, 80112a4 <uxr_flash_output_streams+0x4c>
 8011264:	f04f 0900 	mov.w	r9, #0
 8011268:	4648      	mov	r0, r9
 801126a:	f10d 0802 	add.w	r8, sp, #2
 801126e:	af03      	add	r7, sp, #12
 8011270:	ae02      	add	r6, sp, #8
 8011272:	2201      	movs	r2, #1
 8011274:	4611      	mov	r1, r2
 8011276:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801127a:	f001 fbf3 	bl	8012a64 <uxr_stream_id>
 801127e:	3508      	adds	r5, #8
 8011280:	4684      	mov	ip, r0
 8011282:	4643      	mov	r3, r8
 8011284:	4628      	mov	r0, r5
 8011286:	463a      	mov	r2, r7
 8011288:	4631      	mov	r1, r6
 801128a:	f8cd c004 	str.w	ip, [sp, #4]
 801128e:	f007 fb15 	bl	80188bc <uxr_prepare_best_effort_buffer_to_send>
 8011292:	2800      	cmp	r0, #0
 8011294:	d13d      	bne.n	8011312 <uxr_flash_output_streams+0xba>
 8011296:	7e23      	ldrb	r3, [r4, #24]
 8011298:	f109 0901 	add.w	r9, r9, #1
 801129c:	fa5f f089 	uxtb.w	r0, r9
 80112a0:	4283      	cmp	r3, r0
 80112a2:	d8e6      	bhi.n	8011272 <uxr_flash_output_streams+0x1a>
 80112a4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80112a8:	b383      	cbz	r3, 801130c <uxr_flash_output_streams+0xb4>
 80112aa:	f04f 0900 	mov.w	r9, #0
 80112ae:	4648      	mov	r0, r9
 80112b0:	f10d 0802 	add.w	r8, sp, #2
 80112b4:	af03      	add	r7, sp, #12
 80112b6:	ae02      	add	r6, sp, #8
 80112b8:	2201      	movs	r2, #1
 80112ba:	2102      	movs	r1, #2
 80112bc:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80112c0:	f001 fbd0 	bl	8012a64 <uxr_stream_id>
 80112c4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80112c8:	3520      	adds	r5, #32
 80112ca:	9001      	str	r0, [sp, #4]
 80112cc:	e00c      	b.n	80112e8 <uxr_flash_output_streams+0x90>
 80112ce:	9b02      	ldr	r3, [sp, #8]
 80112d0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80112d4:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80112d8:	f000 feb6 	bl	8012048 <uxr_stamp_session_header>
 80112dc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80112de:	9a03      	ldr	r2, [sp, #12]
 80112e0:	9902      	ldr	r1, [sp, #8]
 80112e2:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80112e6:	47d0      	blx	sl
 80112e8:	4643      	mov	r3, r8
 80112ea:	463a      	mov	r2, r7
 80112ec:	4631      	mov	r1, r6
 80112ee:	4628      	mov	r0, r5
 80112f0:	f007 fcec 	bl	8018ccc <uxr_prepare_next_reliable_buffer_to_send>
 80112f4:	4603      	mov	r3, r0
 80112f6:	4620      	mov	r0, r4
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d1e8      	bne.n	80112ce <uxr_flash_output_streams+0x76>
 80112fc:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8011300:	f109 0901 	add.w	r9, r9, #1
 8011304:	fa5f f089 	uxtb.w	r0, r9
 8011308:	4283      	cmp	r3, r0
 801130a:	d8d5      	bhi.n	80112b8 <uxr_flash_output_streams+0x60>
 801130c:	b004      	add	sp, #16
 801130e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011312:	9b02      	ldr	r3, [sp, #8]
 8011314:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011318:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801131c:	4620      	mov	r0, r4
 801131e:	f000 fe93 	bl	8012048 <uxr_stamp_session_header>
 8011322:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011324:	9a03      	ldr	r2, [sp, #12]
 8011326:	9902      	ldr	r1, [sp, #8]
 8011328:	e9d3 0500 	ldrd	r0, r5, [r3]
 801132c:	47a8      	blx	r5
 801132e:	f109 0901 	add.w	r9, r9, #1
 8011332:	7e23      	ldrb	r3, [r4, #24]
 8011334:	fa5f f089 	uxtb.w	r0, r9
 8011338:	4283      	cmp	r3, r0
 801133a:	d89a      	bhi.n	8011272 <uxr_flash_output_streams+0x1a>
 801133c:	e7b2      	b.n	80112a4 <uxr_flash_output_streams+0x4c>
 801133e:	bf00      	nop

08011340 <read_submessage_info>:
 8011340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011344:	460d      	mov	r5, r1
 8011346:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 801134a:	4669      	mov	r1, sp
 801134c:	4607      	mov	r7, r0
 801134e:	4628      	mov	r0, r5
 8011350:	f002 fc8a 	bl	8013c68 <uxr_deserialize_BaseObjectReply>
 8011354:	a902      	add	r1, sp, #8
 8011356:	4604      	mov	r4, r0
 8011358:	4628      	mov	r0, r5
 801135a:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801135e:	f006 f905 	bl	801756c <ucdr_deserialize_bool>
 8011362:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011366:	4004      	ands	r4, r0
 8011368:	b2e4      	uxtb	r4, r4
 801136a:	b95b      	cbnz	r3, 8011384 <read_submessage_info+0x44>
 801136c:	a987      	add	r1, sp, #540	@ 0x21c
 801136e:	4628      	mov	r0, r5
 8011370:	f006 f8fc 	bl	801756c <ucdr_deserialize_bool>
 8011374:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8011378:	4606      	mov	r6, r0
 801137a:	b94b      	cbnz	r3, 8011390 <read_submessage_info+0x50>
 801137c:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8011380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011384:	a903      	add	r1, sp, #12
 8011386:	4628      	mov	r0, r5
 8011388:	f002 fafc 	bl	8013984 <uxr_deserialize_ObjectVariant>
 801138c:	4004      	ands	r4, r0
 801138e:	e7ed      	b.n	801136c <read_submessage_info+0x2c>
 8011390:	a988      	add	r1, sp, #544	@ 0x220
 8011392:	4628      	mov	r0, r5
 8011394:	f006 f91a 	bl	80175cc <ucdr_deserialize_uint8_t>
 8011398:	4234      	tst	r4, r6
 801139a:	d0ef      	beq.n	801137c <read_submessage_info+0x3c>
 801139c:	2800      	cmp	r0, #0
 801139e:	d0ed      	beq.n	801137c <read_submessage_info+0x3c>
 80113a0:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 80113a4:	2b0d      	cmp	r3, #13
 80113a6:	d1e9      	bne.n	801137c <read_submessage_info+0x3c>
 80113a8:	4628      	mov	r0, r5
 80113aa:	a98a      	add	r1, sp, #552	@ 0x228
 80113ac:	f006 feb4 	bl	8018118 <ucdr_deserialize_int16_t>
 80113b0:	b140      	cbz	r0, 80113c4 <read_submessage_info+0x84>
 80113b2:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	dd07      	ble.n	80113ca <read_submessage_info+0x8a>
 80113ba:	f1b8 0f00 	cmp.w	r8, #0
 80113be:	bf14      	ite	ne
 80113c0:	2001      	movne	r0, #1
 80113c2:	2002      	moveq	r0, #2
 80113c4:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 80113c8:	e7d8      	b.n	801137c <read_submessage_info+0x3c>
 80113ca:	2000      	movs	r0, #0
 80113cc:	e7fa      	b.n	80113c4 <read_submessage_info+0x84>
 80113ce:	bf00      	nop

080113d0 <read_submessage_list>:
 80113d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113d4:	b098      	sub	sp, #96	@ 0x60
 80113d6:	f8df 9304 	ldr.w	r9, [pc, #772]	@ 80116dc <read_submessage_list+0x30c>
 80113da:	920b      	str	r2, [sp, #44]	@ 0x2c
 80113dc:	4604      	mov	r4, r0
 80113de:	4688      	mov	r8, r1
 80113e0:	f10d 0337 	add.w	r3, sp, #55	@ 0x37
 80113e4:	aa0e      	add	r2, sp, #56	@ 0x38
 80113e6:	f10d 0136 	add.w	r1, sp, #54	@ 0x36
 80113ea:	4640      	mov	r0, r8
 80113ec:	f001 fc8e 	bl	8012d0c <uxr_read_submessage_header>
 80113f0:	2800      	cmp	r0, #0
 80113f2:	f000 813d 	beq.w	8011670 <read_submessage_list+0x2a0>
 80113f6:	f89d 3036 	ldrb.w	r3, [sp, #54]	@ 0x36
 80113fa:	f89d 202e 	ldrb.w	r2, [sp, #46]	@ 0x2e
 80113fe:	3b02      	subs	r3, #2
 8011400:	2b0d      	cmp	r3, #13
 8011402:	d8ed      	bhi.n	80113e0 <read_submessage_list+0x10>
 8011404:	a101      	add	r1, pc, #4	@ (adr r1, 801140c <read_submessage_list+0x3c>)
 8011406:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801140a:	bf00      	nop
 801140c:	08011667 	.word	0x08011667
 8011410:	080113e1 	.word	0x080113e1
 8011414:	08011657 	.word	0x08011657
 8011418:	080115fb 	.word	0x080115fb
 801141c:	080115f1 	.word	0x080115f1
 8011420:	080113e1 	.word	0x080113e1
 8011424:	080113e1 	.word	0x080113e1
 8011428:	08011553 	.word	0x08011553
 801142c:	080114e5 	.word	0x080114e5
 8011430:	080114a3 	.word	0x080114a3
 8011434:	080113e1 	.word	0x080113e1
 8011438:	080113e1 	.word	0x080113e1
 801143c:	080113e1 	.word	0x080113e1
 8011440:	08011445 	.word	0x08011445
 8011444:	a912      	add	r1, sp, #72	@ 0x48
 8011446:	4640      	mov	r0, r8
 8011448:	f002 fe3a 	bl	80140c0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801144c:	f8d4 5090 	ldr.w	r5, [r4, #144]	@ 0x90
 8011450:	2d00      	cmp	r5, #0
 8011452:	f000 8115 	beq.w	8011680 <read_submessage_list+0x2b0>
 8011456:	f001 fca1 	bl	8012d9c <uxr_nanos>
 801145a:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 801145c:	460b      	mov	r3, r1
 801145e:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8011460:	2700      	movs	r7, #0
 8011462:	fbc9 6701 	smlal	r6, r7, r9, r1
 8011466:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801146a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801146c:	4602      	mov	r2, r0
 801146e:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8011470:	460e      	mov	r6, r1
 8011472:	2700      	movs	r7, #0
 8011474:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8011478:	9106      	str	r1, [sp, #24]
 801147a:	fbc9 6700 	smlal	r6, r7, r9, r0
 801147e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8011480:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011484:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8011486:	2700      	movs	r7, #0
 8011488:	4608      	mov	r0, r1
 801148a:	4639      	mov	r1, r7
 801148c:	fbc9 0106 	smlal	r0, r1, r9, r6
 8011490:	e9cd 0100 	strd	r0, r1, [sp]
 8011494:	4620      	mov	r0, r4
 8011496:	47a8      	blx	r5
 8011498:	f04f 0301 	mov.w	r3, #1
 801149c:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80114a0:	e79e      	b.n	80113e0 <read_submessage_list+0x10>
 80114a2:	a912      	add	r1, sp, #72	@ 0x48
 80114a4:	4640      	mov	r0, r8
 80114a6:	f002 fdf9 	bl	801409c <uxr_deserialize_HEARTBEAT_Payload>
 80114aa:	2100      	movs	r1, #0
 80114ac:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 80114b0:	f001 fb02 	bl	8012ab8 <uxr_stream_id_from_raw>
 80114b4:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80114b8:	4603      	mov	r3, r0
 80114ba:	4629      	mov	r1, r5
 80114bc:	f104 0008 	add.w	r0, r4, #8
 80114c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80114c2:	f001 fbe7 	bl	8012c94 <uxr_get_input_reliable_stream>
 80114c6:	2800      	cmp	r0, #0
 80114c8:	d08a      	beq.n	80113e0 <read_submessage_list+0x10>
 80114ca:	f8bd 204a 	ldrh.w	r2, [sp, #74]	@ 0x4a
 80114ce:	f8bd 1048 	ldrh.w	r1, [sp, #72]	@ 0x48
 80114d2:	f007 f95f 	bl	8018794 <uxr_process_heartbeat>
 80114d6:	f89d 1044 	ldrb.w	r1, [sp, #68]	@ 0x44
 80114da:	462a      	mov	r2, r5
 80114dc:	4620      	mov	r0, r4
 80114de:	f7ff fdf5 	bl	80110cc <write_submessage_acknack.isra.0>
 80114e2:	e77d      	b.n	80113e0 <read_submessage_list+0x10>
 80114e4:	a912      	add	r1, sp, #72	@ 0x48
 80114e6:	4640      	mov	r0, r8
 80114e8:	f002 fdb0 	bl	801404c <uxr_deserialize_ACKNACK_Payload>
 80114ec:	2100      	movs	r1, #0
 80114ee:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 80114f2:	f001 fae1 	bl	8012ab8 <uxr_stream_id_from_raw>
 80114f6:	4603      	mov	r3, r0
 80114f8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80114fc:	f104 0008 	add.w	r0, r4, #8
 8011500:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011502:	f001 fbb1 	bl	8012c68 <uxr_get_output_reliable_stream>
 8011506:	4605      	mov	r5, r0
 8011508:	2800      	cmp	r0, #0
 801150a:	f43f af69 	beq.w	80113e0 <read_submessage_list+0x10>
 801150e:	f89d 304a 	ldrb.w	r3, [sp, #74]	@ 0x4a
 8011512:	f89d 104b 	ldrb.w	r1, [sp, #75]	@ 0x4b
 8011516:	f8bd 2048 	ldrh.w	r2, [sp, #72]	@ 0x48
 801151a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801151e:	b289      	uxth	r1, r1
 8011520:	f007 fc7c 	bl	8018e1c <uxr_process_acknack>
 8011524:	4628      	mov	r0, r5
 8011526:	f007 fc3f 	bl	8018da8 <uxr_begin_output_nack_buffer_it>
 801152a:	af10      	add	r7, sp, #64	@ 0x40
 801152c:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8011530:	e005      	b.n	801153e <read_submessage_list+0x16e>
 8011532:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011534:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011536:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011538:	e9d3 0600 	ldrd	r0, r6, [r3]
 801153c:	47b0      	blx	r6
 801153e:	f10d 033a 	add.w	r3, sp, #58	@ 0x3a
 8011542:	aa11      	add	r2, sp, #68	@ 0x44
 8011544:	4639      	mov	r1, r7
 8011546:	4628      	mov	r0, r5
 8011548:	f007 fc30 	bl	8018dac <uxr_next_reliable_nack_buffer_to_send>
 801154c:	2800      	cmp	r0, #0
 801154e:	d1f0      	bne.n	8011532 <read_submessage_list+0x162>
 8011550:	e746      	b.n	80113e0 <read_submessage_list+0x10>
 8011552:	f89d 302d 	ldrb.w	r3, [sp, #45]	@ 0x2d
 8011556:	f88d 203e 	strb.w	r2, [sp, #62]	@ 0x3e
 801155a:	af10      	add	r7, sp, #64	@ 0x40
 801155c:	f89d 202f 	ldrb.w	r2, [sp, #47]	@ 0x2f
 8011560:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
 8011564:	4639      	mov	r1, r7
 8011566:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 801156a:	f89d 6037 	ldrb.w	r6, [sp, #55]	@ 0x37
 801156e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8011572:	f88d 203f 	strb.w	r2, [sp, #63]	@ 0x3f
 8011576:	4640      	mov	r0, r8
 8011578:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 801157c:	f002 fab0 	bl	8013ae0 <uxr_deserialize_BaseObjectRequest>
 8011580:	4638      	mov	r0, r7
 8011582:	a911      	add	r1, sp, #68	@ 0x44
 8011584:	f10d 023a 	add.w	r2, sp, #58	@ 0x3a
 8011588:	f000 fddc 	bl	8012144 <uxr_parse_base_object_request>
 801158c:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8011590:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8011592:	f8bd 703a 	ldrh.w	r7, [sp, #58]	@ 0x3a
 8011596:	9112      	str	r1, [sp, #72]	@ 0x48
 8011598:	3d04      	subs	r5, #4
 801159a:	f006 060e 	and.w	r6, r6, #14
 801159e:	b2ad      	uxth	r5, r5
 80115a0:	f1ba 0f00 	cmp.w	sl, #0
 80115a4:	d006      	beq.n	80115b4 <read_submessage_list+0x1e4>
 80115a6:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80115aa:	9300      	str	r3, [sp, #0]
 80115ac:	463a      	mov	r2, r7
 80115ae:	2300      	movs	r3, #0
 80115b0:	4620      	mov	r0, r4
 80115b2:	47d0      	blx	sl
 80115b4:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80115b6:	b168      	cbz	r0, 80115d4 <read_submessage_list+0x204>
 80115b8:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 80115ba:	2300      	movs	r3, #0
 80115bc:	3902      	subs	r1, #2
 80115be:	e002      	b.n	80115c6 <read_submessage_list+0x1f6>
 80115c0:	3301      	adds	r3, #1
 80115c2:	4283      	cmp	r3, r0
 80115c4:	d006      	beq.n	80115d4 <read_submessage_list+0x204>
 80115c6:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 80115ca:	42ba      	cmp	r2, r7
 80115cc:	d1f8      	bne.n	80115c0 <read_submessage_list+0x1f0>
 80115ce:	6fa2      	ldr	r2, [r4, #120]	@ 0x78
 80115d0:	2100      	movs	r1, #0
 80115d2:	54d1      	strb	r1, [r2, r3]
 80115d4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80115d6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80115d8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 80115dc:	9302      	str	r3, [sp, #8]
 80115de:	e9cd 1000 	strd	r1, r0, [sp]
 80115e2:	4633      	mov	r3, r6
 80115e4:	462a      	mov	r2, r5
 80115e6:	4641      	mov	r1, r8
 80115e8:	4620      	mov	r0, r4
 80115ea:	f7ff fc57 	bl	8010e9c <read_submessage_format>
 80115ee:	e6f7      	b.n	80113e0 <read_submessage_list+0x10>
 80115f0:	4641      	mov	r1, r8
 80115f2:	4620      	mov	r0, r4
 80115f4:	f7ff fea4 	bl	8011340 <read_submessage_info>
 80115f8:	e6f2      	b.n	80113e0 <read_submessage_list+0x10>
 80115fa:	2a00      	cmp	r2, #0
 80115fc:	d03b      	beq.n	8011676 <read_submessage_list+0x2a6>
 80115fe:	a912      	add	r1, sp, #72	@ 0x48
 8011600:	4640      	mov	r0, r8
 8011602:	f002 fc7f 	bl	8013f04 <uxr_deserialize_STATUS_Payload>
 8011606:	a910      	add	r1, sp, #64	@ 0x40
 8011608:	aa0f      	add	r2, sp, #60	@ 0x3c
 801160a:	a812      	add	r0, sp, #72	@ 0x48
 801160c:	f000 fd9a 	bl	8012144 <uxr_parse_base_object_request>
 8011610:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 8011614:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011616:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 801161a:	f8bd 603c 	ldrh.w	r6, [sp, #60]	@ 0x3c
 801161e:	9111      	str	r1, [sp, #68]	@ 0x44
 8011620:	b135      	cbz	r5, 8011630 <read_submessage_list+0x260>
 8011622:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011626:	9300      	str	r3, [sp, #0]
 8011628:	4632      	mov	r2, r6
 801162a:	463b      	mov	r3, r7
 801162c:	4620      	mov	r0, r4
 801162e:	47a8      	blx	r5
 8011630:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8011632:	2b00      	cmp	r3, #0
 8011634:	f43f aed4 	beq.w	80113e0 <read_submessage_list+0x10>
 8011638:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 801163a:	2100      	movs	r1, #0
 801163c:	3802      	subs	r0, #2
 801163e:	e003      	b.n	8011648 <read_submessage_list+0x278>
 8011640:	3101      	adds	r1, #1
 8011642:	4299      	cmp	r1, r3
 8011644:	f43f aecc 	beq.w	80113e0 <read_submessage_list+0x10>
 8011648:	f830 2f02 	ldrh.w	r2, [r0, #2]!
 801164c:	42b2      	cmp	r2, r6
 801164e:	d1f7      	bne.n	8011640 <read_submessage_list+0x270>
 8011650:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011652:	545f      	strb	r7, [r3, r1]
 8011654:	e6c4      	b.n	80113e0 <read_submessage_list+0x10>
 8011656:	2a00      	cmp	r2, #0
 8011658:	f47f aec2 	bne.w	80113e0 <read_submessage_list+0x10>
 801165c:	4641      	mov	r1, r8
 801165e:	4620      	mov	r0, r4
 8011660:	f000 fcb4 	bl	8011fcc <uxr_read_create_session_status>
 8011664:	e6bc      	b.n	80113e0 <read_submessage_list+0x10>
 8011666:	4641      	mov	r1, r8
 8011668:	4620      	mov	r0, r4
 801166a:	f7ff fcf9 	bl	8011060 <read_submessage_get_info>
 801166e:	e6b7      	b.n	80113e0 <read_submessage_list+0x10>
 8011670:	b018      	add	sp, #96	@ 0x60
 8011672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011676:	4641      	mov	r1, r8
 8011678:	4620      	mov	r0, r4
 801167a:	f000 fcb3 	bl	8011fe4 <uxr_read_delete_session_status>
 801167e:	e6af      	b.n	80113e0 <read_submessage_list+0x10>
 8011680:	f001 fb8c 	bl	8012d9c <uxr_nanos>
 8011684:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011686:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8011688:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801168a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801168c:	2700      	movs	r7, #0
 801168e:	fbc9 6703 	smlal	r6, r7, r9, r3
 8011692:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8011694:	eb16 0c00 	adds.w	ip, r6, r0
 8011698:	4618      	mov	r0, r3
 801169a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801169c:	eb47 0e01 	adc.w	lr, r7, r1
 80116a0:	461e      	mov	r6, r3
 80116a2:	2100      	movs	r1, #0
 80116a4:	2700      	movs	r7, #0
 80116a6:	fbc9 0105 	smlal	r0, r1, r9, r5
 80116aa:	fbc9 6702 	smlal	r6, r7, r9, r2
 80116ae:	1983      	adds	r3, r0, r6
 80116b0:	eb41 0207 	adc.w	r2, r1, r7
 80116b4:	ebbc 0303 	subs.w	r3, ip, r3
 80116b8:	9308      	str	r3, [sp, #32]
 80116ba:	eb6e 0302 	sbc.w	r3, lr, r2
 80116be:	9309      	str	r3, [sp, #36]	@ 0x24
 80116c0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80116c4:	0fd3      	lsrs	r3, r2, #31
 80116c6:	18c9      	adds	r1, r1, r3
 80116c8:	f142 0200 	adc.w	r2, r2, #0
 80116cc:	084b      	lsrs	r3, r1, #1
 80116ce:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80116d2:	1052      	asrs	r2, r2, #1
 80116d4:	e9c4 3226 	strd	r3, r2, [r4, #152]	@ 0x98
 80116d8:	e6de      	b.n	8011498 <read_submessage_list+0xc8>
 80116da:	bf00      	nop
 80116dc:	3b9aca00 	.word	0x3b9aca00

080116e0 <listen_message_reliably>:
 80116e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116e4:	1e0b      	subs	r3, r1, #0
 80116e6:	b09d      	sub	sp, #116	@ 0x74
 80116e8:	bfb8      	it	lt
 80116ea:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 80116ee:	9305      	str	r3, [sp, #20]
 80116f0:	4607      	mov	r7, r0
 80116f2:	f001 fb37 	bl	8012d64 <uxr_millis>
 80116f6:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80116fa:	4681      	mov	r9, r0
 80116fc:	2a00      	cmp	r2, #0
 80116fe:	f000 8095 	beq.w	801182c <listen_message_reliably+0x14c>
 8011702:	2600      	movs	r6, #0
 8011704:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011708:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 801170c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011710:	4630      	mov	r0, r6
 8011712:	4688      	mov	r8, r1
 8011714:	46ca      	mov	sl, r9
 8011716:	e00f      	b.n	8011738 <listen_message_reliably+0x58>
 8011718:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 801171c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011720:	42a2      	cmp	r2, r4
 8011722:	eb73 0105 	sbcs.w	r1, r3, r5
 8011726:	bfb8      	it	lt
 8011728:	e9cd 2302 	strdlt	r2, r3, [sp, #8]
 801172c:	3601      	adds	r6, #1
 801172e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8011732:	b2f0      	uxtb	r0, r6
 8011734:	4283      	cmp	r3, r0
 8011736:	d951      	bls.n	80117dc <listen_message_reliably+0xfc>
 8011738:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801173c:	2201      	movs	r2, #1
 801173e:	2102      	movs	r1, #2
 8011740:	f001 f990 	bl	8012a64 <uxr_stream_id>
 8011744:	00e4      	lsls	r4, r4, #3
 8011746:	f104 0520 	add.w	r5, r4, #32
 801174a:	443d      	add	r5, r7
 801174c:	4601      	mov	r1, r0
 801174e:	4643      	mov	r3, r8
 8011750:	4652      	mov	r2, sl
 8011752:	4628      	mov	r0, r5
 8011754:	9109      	str	r1, [sp, #36]	@ 0x24
 8011756:	f007 fafb 	bl	8018d50 <uxr_update_output_stream_heartbeat_timestamp>
 801175a:	193b      	adds	r3, r7, r4
 801175c:	2800      	cmp	r0, #0
 801175e:	d0db      	beq.n	8011718 <listen_message_reliably+0x38>
 8011760:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8011764:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8011768:	4638      	mov	r0, r7
 801176a:	f000 fcc5 	bl	80120f8 <uxr_session_header_offset>
 801176e:	3501      	adds	r5, #1
 8011770:	f10d 0b50 	add.w	fp, sp, #80	@ 0x50
 8011774:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011778:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 801177c:	9000      	str	r0, [sp, #0]
 801177e:	2300      	movs	r3, #0
 8011780:	4658      	mov	r0, fp
 8011782:	2211      	movs	r2, #17
 8011784:	a90c      	add	r1, sp, #48	@ 0x30
 8011786:	f7fe ff59 	bl	801063c <ucdr_init_buffer_origin_offset>
 801178a:	2300      	movs	r3, #0
 801178c:	2205      	movs	r2, #5
 801178e:	210b      	movs	r1, #11
 8011790:	4658      	mov	r0, fp
 8011792:	f001 faa1 	bl	8012cd8 <uxr_buffer_submessage_header>
 8011796:	8968      	ldrh	r0, [r5, #10]
 8011798:	2101      	movs	r1, #1
 801179a:	f007 fb97 	bl	8018ecc <uxr_seq_num_add>
 801179e:	892a      	ldrh	r2, [r5, #8]
 80117a0:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 80117a4:	4603      	mov	r3, r0
 80117a6:	a90a      	add	r1, sp, #40	@ 0x28
 80117a8:	4658      	mov	r0, fp
 80117aa:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80117ae:	f88d 902c 	strb.w	r9, [sp, #44]	@ 0x2c
 80117b2:	f002 fc5f 	bl	8014074 <uxr_serialize_HEARTBEAT_Payload>
 80117b6:	2200      	movs	r2, #0
 80117b8:	4611      	mov	r1, r2
 80117ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80117bc:	4638      	mov	r0, r7
 80117be:	f000 fc43 	bl	8012048 <uxr_stamp_session_header>
 80117c2:	4658      	mov	r0, fp
 80117c4:	f7fe ff78 	bl	80106b8 <ucdr_buffer_length>
 80117c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80117ca:	4602      	mov	r2, r0
 80117cc:	a90c      	add	r1, sp, #48	@ 0x30
 80117ce:	e9d3 0500 	ldrd	r0, r5, [r3]
 80117d2:	443c      	add	r4, r7
 80117d4:	47a8      	blx	r5
 80117d6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 80117da:	e79f      	b.n	801171c <listen_message_reliably+0x3c>
 80117dc:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80117e0:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80117e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80117e8:	4294      	cmp	r4, r2
 80117ea:	bf08      	it	eq
 80117ec:	428b      	cmpeq	r3, r1
 80117ee:	d01d      	beq.n	801182c <listen_message_reliably+0x14c>
 80117f0:	eba3 030a 	sub.w	r3, r3, sl
 80117f4:	9905      	ldr	r1, [sp, #20]
 80117f6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	bf08      	it	eq
 80117fc:	2301      	moveq	r3, #1
 80117fe:	4299      	cmp	r1, r3
 8011800:	bfa8      	it	ge
 8011802:	4619      	movge	r1, r3
 8011804:	6894      	ldr	r4, [r2, #8]
 8011806:	6810      	ldr	r0, [r2, #0]
 8011808:	4689      	mov	r9, r1
 801180a:	460b      	mov	r3, r1
 801180c:	aa08      	add	r2, sp, #32
 801180e:	a907      	add	r1, sp, #28
 8011810:	47a0      	blx	r4
 8011812:	b968      	cbnz	r0, 8011830 <listen_message_reliably+0x150>
 8011814:	9b05      	ldr	r3, [sp, #20]
 8011816:	eba3 0309 	sub.w	r3, r3, r9
 801181a:	2b00      	cmp	r3, #0
 801181c:	9305      	str	r3, [sp, #20]
 801181e:	f73f af68 	bgt.w	80116f2 <listen_message_reliably+0x12>
 8011822:	4604      	mov	r4, r0
 8011824:	4620      	mov	r0, r4
 8011826:	b01d      	add	sp, #116	@ 0x74
 8011828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801182c:	9b05      	ldr	r3, [sp, #20]
 801182e:	e7e1      	b.n	80117f4 <listen_message_reliably+0x114>
 8011830:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011834:	4604      	mov	r4, r0
 8011836:	a80c      	add	r0, sp, #48	@ 0x30
 8011838:	f7fe ff12 	bl	8010660 <ucdr_init_buffer>
 801183c:	2500      	movs	r5, #0
 801183e:	a90c      	add	r1, sp, #48	@ 0x30
 8011840:	f10d 031a 	add.w	r3, sp, #26
 8011844:	aa06      	add	r2, sp, #24
 8011846:	4638      	mov	r0, r7
 8011848:	f88d 5018 	strb.w	r5, [sp, #24]
 801184c:	f000 fc12 	bl	8012074 <uxr_read_session_header>
 8011850:	b918      	cbnz	r0, 801185a <listen_message_reliably+0x17a>
 8011852:	4620      	mov	r0, r4
 8011854:	b01d      	add	sp, #116	@ 0x74
 8011856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801185a:	4629      	mov	r1, r5
 801185c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011860:	f001 f92a 	bl	8012ab8 <uxr_stream_id_from_raw>
 8011864:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8011868:	2e01      	cmp	r6, #1
 801186a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 801186e:	900a      	str	r0, [sp, #40]	@ 0x28
 8011870:	fa5f fa80 	uxtb.w	sl, r0
 8011874:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011878:	d04b      	beq.n	8011912 <listen_message_reliably+0x232>
 801187a:	2e02      	cmp	r6, #2
 801187c:	d00f      	beq.n	801189e <listen_message_reliably+0x1be>
 801187e:	2e00      	cmp	r6, #0
 8011880:	d1e7      	bne.n	8011852 <listen_message_reliably+0x172>
 8011882:	4631      	mov	r1, r6
 8011884:	4630      	mov	r0, r6
 8011886:	f001 f917 	bl	8012ab8 <uxr_stream_id_from_raw>
 801188a:	a90c      	add	r1, sp, #48	@ 0x30
 801188c:	4602      	mov	r2, r0
 801188e:	4638      	mov	r0, r7
 8011890:	920a      	str	r2, [sp, #40]	@ 0x28
 8011892:	f7ff fd9d 	bl	80113d0 <read_submessage_list>
 8011896:	4620      	mov	r0, r4
 8011898:	b01d      	add	sp, #116	@ 0x74
 801189a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801189e:	4629      	mov	r1, r5
 80118a0:	f107 0008 	add.w	r0, r7, #8
 80118a4:	f001 f9f6 	bl	8012c94 <uxr_get_input_reliable_stream>
 80118a8:	4680      	mov	r8, r0
 80118aa:	b348      	cbz	r0, 8011900 <listen_message_reliably+0x220>
 80118ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80118ae:	9202      	str	r2, [sp, #8]
 80118b0:	a80c      	add	r0, sp, #48	@ 0x30
 80118b2:	f7fe ff05 	bl	80106c0 <ucdr_buffer_remaining>
 80118b6:	4603      	mov	r3, r0
 80118b8:	f10d 0019 	add.w	r0, sp, #25
 80118bc:	9000      	str	r0, [sp, #0]
 80118be:	9a02      	ldr	r2, [sp, #8]
 80118c0:	4649      	mov	r1, r9
 80118c2:	4640      	mov	r0, r8
 80118c4:	f006 fe68 	bl	8018598 <uxr_receive_reliable_message>
 80118c8:	b1d0      	cbz	r0, 8011900 <listen_message_reliably+0x220>
 80118ca:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d037      	beq.n	8011942 <listen_message_reliably+0x262>
 80118d2:	ae14      	add	r6, sp, #80	@ 0x50
 80118d4:	f04f 0902 	mov.w	r9, #2
 80118d8:	e008      	b.n	80118ec <listen_message_reliably+0x20c>
 80118da:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 80118de:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 80118e2:	f88d 902a 	strb.w	r9, [sp, #42]	@ 0x2a
 80118e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80118e8:	f7ff fd72 	bl	80113d0 <read_submessage_list>
 80118ec:	4631      	mov	r1, r6
 80118ee:	2204      	movs	r2, #4
 80118f0:	4640      	mov	r0, r8
 80118f2:	f006 fed1 	bl	8018698 <uxr_next_input_reliable_buffer_available>
 80118f6:	4603      	mov	r3, r0
 80118f8:	4631      	mov	r1, r6
 80118fa:	4638      	mov	r0, r7
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d1ec      	bne.n	80118da <listen_message_reliably+0x1fa>
 8011900:	4638      	mov	r0, r7
 8011902:	462a      	mov	r2, r5
 8011904:	4651      	mov	r1, sl
 8011906:	f7ff fbe1 	bl	80110cc <write_submessage_acknack.isra.0>
 801190a:	4620      	mov	r0, r4
 801190c:	b01d      	add	sp, #116	@ 0x74
 801190e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011912:	4629      	mov	r1, r5
 8011914:	f107 0008 	add.w	r0, r7, #8
 8011918:	f001 f9b2 	bl	8012c80 <uxr_get_input_best_effort_stream>
 801191c:	2800      	cmp	r0, #0
 801191e:	d098      	beq.n	8011852 <listen_message_reliably+0x172>
 8011920:	4649      	mov	r1, r9
 8011922:	f006 fdb5 	bl	8018490 <uxr_receive_best_effort_message>
 8011926:	2800      	cmp	r0, #0
 8011928:	d093      	beq.n	8011852 <listen_message_reliably+0x172>
 801192a:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 801192e:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8011932:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8011936:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011938:	a90c      	add	r1, sp, #48	@ 0x30
 801193a:	4638      	mov	r0, r7
 801193c:	f7ff fd48 	bl	80113d0 <read_submessage_list>
 8011940:	e787      	b.n	8011852 <listen_message_reliably+0x172>
 8011942:	f88d a028 	strb.w	sl, [sp, #40]	@ 0x28
 8011946:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 801194a:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801194e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011950:	a90c      	add	r1, sp, #48	@ 0x30
 8011952:	4638      	mov	r0, r7
 8011954:	f7ff fd3c 	bl	80113d0 <read_submessage_list>
 8011958:	e7bb      	b.n	80118d2 <listen_message_reliably+0x1f2>
 801195a:	bf00      	nop

0801195c <uxr_run_session_timeout>:
 801195c:	b570      	push	{r4, r5, r6, lr}
 801195e:	4604      	mov	r4, r0
 8011960:	460d      	mov	r5, r1
 8011962:	f001 f9ff 	bl	8012d64 <uxr_millis>
 8011966:	4606      	mov	r6, r0
 8011968:	4620      	mov	r0, r4
 801196a:	f7ff fc75 	bl	8011258 <uxr_flash_output_streams>
 801196e:	4629      	mov	r1, r5
 8011970:	4620      	mov	r0, r4
 8011972:	f7ff feb5 	bl	80116e0 <listen_message_reliably>
 8011976:	f001 f9f5 	bl	8012d64 <uxr_millis>
 801197a:	1b83      	subs	r3, r0, r6
 801197c:	1ae9      	subs	r1, r5, r3
 801197e:	2900      	cmp	r1, #0
 8011980:	dcf6      	bgt.n	8011970 <uxr_run_session_timeout+0x14>
 8011982:	f104 0008 	add.w	r0, r4, #8
 8011986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801198a:	f001 b98f 	b.w	8012cac <uxr_output_streams_confirmed>
 801198e:	bf00      	nop

08011990 <uxr_run_session_until_data>:
 8011990:	b570      	push	{r4, r5, r6, lr}
 8011992:	4604      	mov	r4, r0
 8011994:	460d      	mov	r5, r1
 8011996:	f001 f9e5 	bl	8012d64 <uxr_millis>
 801199a:	4606      	mov	r6, r0
 801199c:	4620      	mov	r0, r4
 801199e:	f7ff fc5b 	bl	8011258 <uxr_flash_output_streams>
 80119a2:	2300      	movs	r3, #0
 80119a4:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 80119a8:	4629      	mov	r1, r5
 80119aa:	e005      	b.n	80119b8 <uxr_run_session_until_data+0x28>
 80119ac:	f001 f9da 	bl	8012d64 <uxr_millis>
 80119b0:	1b83      	subs	r3, r0, r6
 80119b2:	1ae9      	subs	r1, r5, r3
 80119b4:	2900      	cmp	r1, #0
 80119b6:	dd07      	ble.n	80119c8 <uxr_run_session_until_data+0x38>
 80119b8:	4620      	mov	r0, r4
 80119ba:	f7ff fe91 	bl	80116e0 <listen_message_reliably>
 80119be:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80119c2:	2800      	cmp	r0, #0
 80119c4:	d0f2      	beq.n	80119ac <uxr_run_session_until_data+0x1c>
 80119c6:	bd70      	pop	{r4, r5, r6, pc}
 80119c8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 80119cc:	bd70      	pop	{r4, r5, r6, pc}
 80119ce:	bf00      	nop

080119d0 <uxr_run_session_until_confirm_delivery>:
 80119d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119d4:	4606      	mov	r6, r0
 80119d6:	460d      	mov	r5, r1
 80119d8:	f001 f9c4 	bl	8012d64 <uxr_millis>
 80119dc:	4607      	mov	r7, r0
 80119de:	4630      	mov	r0, r6
 80119e0:	f7ff fc3a 	bl	8011258 <uxr_flash_output_streams>
 80119e4:	2d00      	cmp	r5, #0
 80119e6:	f106 0808 	add.w	r8, r6, #8
 80119ea:	bfa8      	it	ge
 80119ec:	462c      	movge	r4, r5
 80119ee:	da07      	bge.n	8011a00 <uxr_run_session_until_confirm_delivery+0x30>
 80119f0:	e00e      	b.n	8011a10 <uxr_run_session_until_confirm_delivery+0x40>
 80119f2:	f7ff fe75 	bl	80116e0 <listen_message_reliably>
 80119f6:	f001 f9b5 	bl	8012d64 <uxr_millis>
 80119fa:	1bc3      	subs	r3, r0, r7
 80119fc:	1aec      	subs	r4, r5, r3
 80119fe:	d407      	bmi.n	8011a10 <uxr_run_session_until_confirm_delivery+0x40>
 8011a00:	4640      	mov	r0, r8
 8011a02:	f001 f953 	bl	8012cac <uxr_output_streams_confirmed>
 8011a06:	4603      	mov	r3, r0
 8011a08:	4621      	mov	r1, r4
 8011a0a:	4630      	mov	r0, r6
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d0f0      	beq.n	80119f2 <uxr_run_session_until_confirm_delivery+0x22>
 8011a10:	4640      	mov	r0, r8
 8011a12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011a16:	f001 b949 	b.w	8012cac <uxr_output_streams_confirmed>
 8011a1a:	bf00      	nop

08011a1c <uxr_run_session_until_all_status>:
 8011a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a20:	9d08      	ldr	r5, [sp, #32]
 8011a22:	460f      	mov	r7, r1
 8011a24:	4692      	mov	sl, r2
 8011a26:	461c      	mov	r4, r3
 8011a28:	4606      	mov	r6, r0
 8011a2a:	f7ff fc15 	bl	8011258 <uxr_flash_output_streams>
 8011a2e:	b125      	cbz	r5, 8011a3a <uxr_run_session_until_all_status+0x1e>
 8011a30:	462a      	mov	r2, r5
 8011a32:	21ff      	movs	r1, #255	@ 0xff
 8011a34:	4620      	mov	r0, r4
 8011a36:	f008 fec5 	bl	801a7c4 <memset>
 8011a3a:	e9c6 a41d 	strd	sl, r4, [r6, #116]	@ 0x74
 8011a3e:	67f5      	str	r5, [r6, #124]	@ 0x7c
 8011a40:	f001 f990 	bl	8012d64 <uxr_millis>
 8011a44:	f104 39ff 	add.w	r9, r4, #4294967295	@ 0xffffffff
 8011a48:	f1aa 0a02 	sub.w	sl, sl, #2
 8011a4c:	4680      	mov	r8, r0
 8011a4e:	4639      	mov	r1, r7
 8011a50:	4630      	mov	r0, r6
 8011a52:	f7ff fe45 	bl	80116e0 <listen_message_reliably>
 8011a56:	f001 f985 	bl	8012d64 <uxr_millis>
 8011a5a:	eba0 0008 	sub.w	r0, r0, r8
 8011a5e:	1a39      	subs	r1, r7, r0
 8011a60:	b33d      	cbz	r5, 8011ab2 <uxr_run_session_until_all_status+0x96>
 8011a62:	46cc      	mov	ip, r9
 8011a64:	464a      	mov	r2, r9
 8011a66:	2301      	movs	r3, #1
 8011a68:	e002      	b.n	8011a70 <uxr_run_session_until_all_status+0x54>
 8011a6a:	42ab      	cmp	r3, r5
 8011a6c:	d20c      	bcs.n	8011a88 <uxr_run_session_until_all_status+0x6c>
 8011a6e:	3301      	adds	r3, #1
 8011a70:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8011a74:	2cff      	cmp	r4, #255	@ 0xff
 8011a76:	d1f8      	bne.n	8011a6a <uxr_run_session_until_all_status+0x4e>
 8011a78:	42ab      	cmp	r3, r5
 8011a7a:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 8011a7e:	d213      	bcs.n	8011aa8 <uxr_run_session_until_all_status+0x8c>
 8011a80:	2800      	cmp	r0, #0
 8011a82:	d0f4      	beq.n	8011a6e <uxr_run_session_until_all_status+0x52>
 8011a84:	2900      	cmp	r1, #0
 8011a86:	dce3      	bgt.n	8011a50 <uxr_run_session_until_all_status+0x34>
 8011a88:	2300      	movs	r3, #0
 8011a8a:	444d      	add	r5, r9
 8011a8c:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011a8e:	e001      	b.n	8011a94 <uxr_run_session_until_all_status+0x78>
 8011a90:	2b01      	cmp	r3, #1
 8011a92:	d812      	bhi.n	8011aba <uxr_run_session_until_all_status+0x9e>
 8011a94:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8011a98:	4565      	cmp	r5, ip
 8011a9a:	d1f9      	bne.n	8011a90 <uxr_run_session_until_all_status+0x74>
 8011a9c:	2b01      	cmp	r3, #1
 8011a9e:	bf8c      	ite	hi
 8011aa0:	2000      	movhi	r0, #0
 8011aa2:	2001      	movls	r0, #1
 8011aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aa8:	2900      	cmp	r1, #0
 8011aaa:	dded      	ble.n	8011a88 <uxr_run_session_until_all_status+0x6c>
 8011aac:	2800      	cmp	r0, #0
 8011aae:	d1cf      	bne.n	8011a50 <uxr_run_session_until_all_status+0x34>
 8011ab0:	e7ea      	b.n	8011a88 <uxr_run_session_until_all_status+0x6c>
 8011ab2:	67f5      	str	r5, [r6, #124]	@ 0x7c
 8011ab4:	2001      	movs	r0, #1
 8011ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011aba:	2000      	movs	r0, #0
 8011abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011ac0 <uxr_create_session>:
 8011ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ac4:	ed2d 8b02 	vpush	{d8}
 8011ac8:	f100 0808 	add.w	r8, r0, #8
 8011acc:	b0a9      	sub	sp, #164	@ 0xa4
 8011ace:	4604      	mov	r4, r0
 8011ad0:	4640      	mov	r0, r8
 8011ad2:	f001 f827 	bl	8012b24 <uxr_reset_stream_storage>
 8011ad6:	4620      	mov	r0, r4
 8011ad8:	f000 fb0e 	bl	80120f8 <uxr_session_header_offset>
 8011adc:	a909      	add	r1, sp, #36	@ 0x24
 8011ade:	9000      	str	r0, [sp, #0]
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	a810      	add	r0, sp, #64	@ 0x40
 8011ae4:	221c      	movs	r2, #28
 8011ae6:	f7fe fda9 	bl	801063c <ucdr_init_buffer_origin_offset>
 8011aea:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011aec:	8a1a      	ldrh	r2, [r3, #16]
 8011aee:	3a04      	subs	r2, #4
 8011af0:	b292      	uxth	r2, r2
 8011af2:	4620      	mov	r0, r4
 8011af4:	a910      	add	r1, sp, #64	@ 0x40
 8011af6:	f000 fa23 	bl	8011f40 <uxr_buffer_create_session>
 8011afa:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8011afc:	4620      	mov	r0, r4
 8011afe:	f000 fa8f 	bl	8012020 <uxr_stamp_create_session_header>
 8011b02:	a810      	add	r0, sp, #64	@ 0x40
 8011b04:	f7fe fdd8 	bl	80106b8 <ucdr_buffer_length>
 8011b08:	23ff      	movs	r3, #255	@ 0xff
 8011b0a:	ee08 0a10 	vmov	s16, r0
 8011b0e:	7163      	strb	r3, [r4, #5]
 8011b10:	f04f 090a 	mov.w	r9, #10
 8011b14:	46c2      	mov	sl, r8
 8011b16:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011b18:	ee18 2a10 	vmov	r2, s16
 8011b1c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011b20:	a909      	add	r1, sp, #36	@ 0x24
 8011b22:	47a8      	blx	r5
 8011b24:	f001 f91e 	bl	8012d64 <uxr_millis>
 8011b28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011b2c:	9002      	str	r0, [sp, #8]
 8011b2e:	e00c      	b.n	8011b4a <uxr_create_session+0x8a>
 8011b30:	f001 f918 	bl	8012d64 <uxr_millis>
 8011b34:	9b02      	ldr	r3, [sp, #8]
 8011b36:	7962      	ldrb	r2, [r4, #5]
 8011b38:	1ac0      	subs	r0, r0, r3
 8011b3a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	f340 8094 	ble.w	8011c6c <uxr_create_session+0x1ac>
 8011b44:	2aff      	cmp	r2, #255	@ 0xff
 8011b46:	f040 8097 	bne.w	8011c78 <uxr_create_session+0x1b8>
 8011b4a:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011b4c:	a905      	add	r1, sp, #20
 8011b4e:	6895      	ldr	r5, [r2, #8]
 8011b50:	6810      	ldr	r0, [r2, #0]
 8011b52:	aa06      	add	r2, sp, #24
 8011b54:	47a8      	blx	r5
 8011b56:	2800      	cmp	r0, #0
 8011b58:	d0ea      	beq.n	8011b30 <uxr_create_session+0x70>
 8011b5a:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8011b5e:	a818      	add	r0, sp, #96	@ 0x60
 8011b60:	f7fe fd7e 	bl	8010660 <ucdr_init_buffer>
 8011b64:	2500      	movs	r5, #0
 8011b66:	f10d 0312 	add.w	r3, sp, #18
 8011b6a:	aa04      	add	r2, sp, #16
 8011b6c:	a918      	add	r1, sp, #96	@ 0x60
 8011b6e:	4620      	mov	r0, r4
 8011b70:	f88d 5010 	strb.w	r5, [sp, #16]
 8011b74:	f000 fa7e 	bl	8012074 <uxr_read_session_header>
 8011b78:	2800      	cmp	r0, #0
 8011b7a:	d0d9      	beq.n	8011b30 <uxr_create_session+0x70>
 8011b7c:	4629      	mov	r1, r5
 8011b7e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8011b82:	f000 ff99 	bl	8012ab8 <uxr_stream_id_from_raw>
 8011b86:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011b8a:	2f01      	cmp	r7, #1
 8011b8c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8011b90:	f8bd b012 	ldrh.w	fp, [sp, #18]
 8011b94:	fa5f f880 	uxtb.w	r8, r0
 8011b98:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011b9c:	d04d      	beq.n	8011c3a <uxr_create_session+0x17a>
 8011b9e:	2f02      	cmp	r7, #2
 8011ba0:	d00c      	beq.n	8011bbc <uxr_create_session+0xfc>
 8011ba2:	2f00      	cmp	r7, #0
 8011ba4:	d1c4      	bne.n	8011b30 <uxr_create_session+0x70>
 8011ba6:	4639      	mov	r1, r7
 8011ba8:	4638      	mov	r0, r7
 8011baa:	f000 ff85 	bl	8012ab8 <uxr_stream_id_from_raw>
 8011bae:	a918      	add	r1, sp, #96	@ 0x60
 8011bb0:	4602      	mov	r2, r0
 8011bb2:	4620      	mov	r0, r4
 8011bb4:	9208      	str	r2, [sp, #32]
 8011bb6:	f7ff fc0b 	bl	80113d0 <read_submessage_list>
 8011bba:	e7b9      	b.n	8011b30 <uxr_create_session+0x70>
 8011bbc:	4629      	mov	r1, r5
 8011bbe:	4650      	mov	r0, sl
 8011bc0:	f001 f868 	bl	8012c94 <uxr_get_input_reliable_stream>
 8011bc4:	4606      	mov	r6, r0
 8011bc6:	b390      	cbz	r0, 8011c2e <uxr_create_session+0x16e>
 8011bc8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011bca:	9203      	str	r2, [sp, #12]
 8011bcc:	a818      	add	r0, sp, #96	@ 0x60
 8011bce:	f7fe fd77 	bl	80106c0 <ucdr_buffer_remaining>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	f10d 0011 	add.w	r0, sp, #17
 8011bd8:	9000      	str	r0, [sp, #0]
 8011bda:	9a03      	ldr	r2, [sp, #12]
 8011bdc:	4659      	mov	r1, fp
 8011bde:	4630      	mov	r0, r6
 8011be0:	f006 fcda 	bl	8018598 <uxr_receive_reliable_message>
 8011be4:	b318      	cbz	r0, 8011c2e <uxr_create_session+0x16e>
 8011be6:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8011bea:	b9b3      	cbnz	r3, 8011c1a <uxr_create_session+0x15a>
 8011bec:	f88d 8020 	strb.w	r8, [sp, #32]
 8011bf0:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8011bf4:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 8011bf8:	9a08      	ldr	r2, [sp, #32]
 8011bfa:	a918      	add	r1, sp, #96	@ 0x60
 8011bfc:	4620      	mov	r0, r4
 8011bfe:	f7ff fbe7 	bl	80113d0 <read_submessage_list>
 8011c02:	e00a      	b.n	8011c1a <uxr_create_session+0x15a>
 8011c04:	f04f 0302 	mov.w	r3, #2
 8011c08:	f88d 8020 	strb.w	r8, [sp, #32]
 8011c0c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8011c10:	f88d 3022 	strb.w	r3, [sp, #34]	@ 0x22
 8011c14:	9a08      	ldr	r2, [sp, #32]
 8011c16:	f7ff fbdb 	bl	80113d0 <read_submessage_list>
 8011c1a:	a920      	add	r1, sp, #128	@ 0x80
 8011c1c:	2204      	movs	r2, #4
 8011c1e:	4630      	mov	r0, r6
 8011c20:	f006 fd3a 	bl	8018698 <uxr_next_input_reliable_buffer_available>
 8011c24:	4603      	mov	r3, r0
 8011c26:	a920      	add	r1, sp, #128	@ 0x80
 8011c28:	4620      	mov	r0, r4
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d1ea      	bne.n	8011c04 <uxr_create_session+0x144>
 8011c2e:	462a      	mov	r2, r5
 8011c30:	4641      	mov	r1, r8
 8011c32:	4620      	mov	r0, r4
 8011c34:	f7ff fa4a 	bl	80110cc <write_submessage_acknack.isra.0>
 8011c38:	e77a      	b.n	8011b30 <uxr_create_session+0x70>
 8011c3a:	4629      	mov	r1, r5
 8011c3c:	4650      	mov	r0, sl
 8011c3e:	f001 f81f 	bl	8012c80 <uxr_get_input_best_effort_stream>
 8011c42:	2800      	cmp	r0, #0
 8011c44:	f43f af74 	beq.w	8011b30 <uxr_create_session+0x70>
 8011c48:	4659      	mov	r1, fp
 8011c4a:	f006 fc21 	bl	8018490 <uxr_receive_best_effort_message>
 8011c4e:	2800      	cmp	r0, #0
 8011c50:	f43f af6e 	beq.w	8011b30 <uxr_create_session+0x70>
 8011c54:	f88d 8020 	strb.w	r8, [sp, #32]
 8011c58:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 8011c5c:	f88d 7022 	strb.w	r7, [sp, #34]	@ 0x22
 8011c60:	9a08      	ldr	r2, [sp, #32]
 8011c62:	a918      	add	r1, sp, #96	@ 0x60
 8011c64:	4620      	mov	r0, r4
 8011c66:	f7ff fbb3 	bl	80113d0 <read_submessage_list>
 8011c6a:	e761      	b.n	8011b30 <uxr_create_session+0x70>
 8011c6c:	f1b9 0901 	subs.w	r9, r9, #1
 8011c70:	d002      	beq.n	8011c78 <uxr_create_session+0x1b8>
 8011c72:	2aff      	cmp	r2, #255	@ 0xff
 8011c74:	f43f af4f 	beq.w	8011b16 <uxr_create_session+0x56>
 8011c78:	b12a      	cbz	r2, 8011c86 <uxr_create_session+0x1c6>
 8011c7a:	2000      	movs	r0, #0
 8011c7c:	b029      	add	sp, #164	@ 0xa4
 8011c7e:	ecbd 8b02 	vpop	{d8}
 8011c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c86:	4650      	mov	r0, sl
 8011c88:	f000 ff4c 	bl	8012b24 <uxr_reset_stream_storage>
 8011c8c:	2001      	movs	r0, #1
 8011c8e:	b029      	add	sp, #164	@ 0xa4
 8011c90:	ecbd 8b02 	vpop	{d8}
 8011c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011c98 <wait_session_status>:
 8011c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c9c:	4604      	mov	r4, r0
 8011c9e:	b09d      	sub	sp, #116	@ 0x74
 8011ca0:	20ff      	movs	r0, #255	@ 0xff
 8011ca2:	7160      	strb	r0, [r4, #5]
 8011ca4:	9304      	str	r3, [sp, #16]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	f000 80b8 	beq.w	8011e1c <wait_session_status+0x184>
 8011cac:	2300      	movs	r3, #0
 8011cae:	468b      	mov	fp, r1
 8011cb0:	4692      	mov	sl, r2
 8011cb2:	9303      	str	r3, [sp, #12]
 8011cb4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011cb6:	4652      	mov	r2, sl
 8011cb8:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011cbc:	4659      	mov	r1, fp
 8011cbe:	47a8      	blx	r5
 8011cc0:	f001 f850 	bl	8012d64 <uxr_millis>
 8011cc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011cc8:	4605      	mov	r5, r0
 8011cca:	e009      	b.n	8011ce0 <wait_session_status+0x48>
 8011ccc:	f001 f84a 	bl	8012d64 <uxr_millis>
 8011cd0:	1b40      	subs	r0, r0, r5
 8011cd2:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	dd42      	ble.n	8011d60 <wait_session_status+0xc8>
 8011cda:	7960      	ldrb	r0, [r4, #5]
 8011cdc:	28ff      	cmp	r0, #255	@ 0xff
 8011cde:	d148      	bne.n	8011d72 <wait_session_status+0xda>
 8011ce0:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011ce2:	a908      	add	r1, sp, #32
 8011ce4:	6896      	ldr	r6, [r2, #8]
 8011ce6:	6810      	ldr	r0, [r2, #0]
 8011ce8:	aa09      	add	r2, sp, #36	@ 0x24
 8011cea:	47b0      	blx	r6
 8011cec:	2800      	cmp	r0, #0
 8011cee:	d0ed      	beq.n	8011ccc <wait_session_status+0x34>
 8011cf0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011cf4:	a80c      	add	r0, sp, #48	@ 0x30
 8011cf6:	f7fe fcb3 	bl	8010660 <ucdr_init_buffer>
 8011cfa:	2600      	movs	r6, #0
 8011cfc:	f10d 031e 	add.w	r3, sp, #30
 8011d00:	aa07      	add	r2, sp, #28
 8011d02:	a90c      	add	r1, sp, #48	@ 0x30
 8011d04:	4620      	mov	r0, r4
 8011d06:	f88d 601c 	strb.w	r6, [sp, #28]
 8011d0a:	f000 f9b3 	bl	8012074 <uxr_read_session_header>
 8011d0e:	2800      	cmp	r0, #0
 8011d10:	d0dc      	beq.n	8011ccc <wait_session_status+0x34>
 8011d12:	4631      	mov	r1, r6
 8011d14:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011d18:	f000 fece 	bl	8012ab8 <uxr_stream_id_from_raw>
 8011d1c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011d20:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011d24:	9302      	str	r3, [sp, #8]
 8011d26:	2f01      	cmp	r7, #1
 8011d28:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8011d2c:	fa5f f880 	uxtb.w	r8, r0
 8011d30:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011d34:	d058      	beq.n	8011de8 <wait_session_status+0x150>
 8011d36:	2f02      	cmp	r7, #2
 8011d38:	d021      	beq.n	8011d7e <wait_session_status+0xe6>
 8011d3a:	2f00      	cmp	r7, #0
 8011d3c:	d1c6      	bne.n	8011ccc <wait_session_status+0x34>
 8011d3e:	4639      	mov	r1, r7
 8011d40:	4638      	mov	r0, r7
 8011d42:	f000 feb9 	bl	8012ab8 <uxr_stream_id_from_raw>
 8011d46:	a90c      	add	r1, sp, #48	@ 0x30
 8011d48:	4602      	mov	r2, r0
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011d4e:	f7ff fb3f 	bl	80113d0 <read_submessage_list>
 8011d52:	f001 f807 	bl	8012d64 <uxr_millis>
 8011d56:	1b40      	subs	r0, r0, r5
 8011d58:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	dcbc      	bgt.n	8011cda <wait_session_status+0x42>
 8011d60:	9b03      	ldr	r3, [sp, #12]
 8011d62:	9a04      	ldr	r2, [sp, #16]
 8011d64:	7960      	ldrb	r0, [r4, #5]
 8011d66:	3301      	adds	r3, #1
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	9303      	str	r3, [sp, #12]
 8011d6c:	d001      	beq.n	8011d72 <wait_session_status+0xda>
 8011d6e:	28ff      	cmp	r0, #255	@ 0xff
 8011d70:	d0a0      	beq.n	8011cb4 <wait_session_status+0x1c>
 8011d72:	38ff      	subs	r0, #255	@ 0xff
 8011d74:	bf18      	it	ne
 8011d76:	2001      	movne	r0, #1
 8011d78:	b01d      	add	sp, #116	@ 0x74
 8011d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d7e:	4631      	mov	r1, r6
 8011d80:	f104 0008 	add.w	r0, r4, #8
 8011d84:	f000 ff86 	bl	8012c94 <uxr_get_input_reliable_stream>
 8011d88:	4681      	mov	r9, r0
 8011d8a:	b338      	cbz	r0, 8011ddc <wait_session_status+0x144>
 8011d8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d8e:	9205      	str	r2, [sp, #20]
 8011d90:	a80c      	add	r0, sp, #48	@ 0x30
 8011d92:	f7fe fc95 	bl	80106c0 <ucdr_buffer_remaining>
 8011d96:	4603      	mov	r3, r0
 8011d98:	f10d 001d 	add.w	r0, sp, #29
 8011d9c:	9000      	str	r0, [sp, #0]
 8011d9e:	9a05      	ldr	r2, [sp, #20]
 8011da0:	9902      	ldr	r1, [sp, #8]
 8011da2:	4648      	mov	r0, r9
 8011da4:	f006 fbf8 	bl	8018598 <uxr_receive_reliable_message>
 8011da8:	b1c0      	cbz	r0, 8011ddc <wait_session_status+0x144>
 8011daa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8011dae:	b95b      	cbnz	r3, 8011dc8 <wait_session_status+0x130>
 8011db0:	e03c      	b.n	8011e2c <wait_session_status+0x194>
 8011db2:	f04f 0302 	mov.w	r3, #2
 8011db6:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 8011dba:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011dbe:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8011dc2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011dc4:	f7ff fb04 	bl	80113d0 <read_submessage_list>
 8011dc8:	a914      	add	r1, sp, #80	@ 0x50
 8011dca:	2204      	movs	r2, #4
 8011dcc:	4648      	mov	r0, r9
 8011dce:	f006 fc63 	bl	8018698 <uxr_next_input_reliable_buffer_available>
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	a914      	add	r1, sp, #80	@ 0x50
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d1ea      	bne.n	8011db2 <wait_session_status+0x11a>
 8011ddc:	4632      	mov	r2, r6
 8011dde:	4641      	mov	r1, r8
 8011de0:	4620      	mov	r0, r4
 8011de2:	f7ff f973 	bl	80110cc <write_submessage_acknack.isra.0>
 8011de6:	e771      	b.n	8011ccc <wait_session_status+0x34>
 8011de8:	4631      	mov	r1, r6
 8011dea:	f104 0008 	add.w	r0, r4, #8
 8011dee:	f000 ff47 	bl	8012c80 <uxr_get_input_best_effort_stream>
 8011df2:	2800      	cmp	r0, #0
 8011df4:	f43f af6a 	beq.w	8011ccc <wait_session_status+0x34>
 8011df8:	9902      	ldr	r1, [sp, #8]
 8011dfa:	f006 fb49 	bl	8018490 <uxr_receive_best_effort_message>
 8011dfe:	2800      	cmp	r0, #0
 8011e00:	f43f af64 	beq.w	8011ccc <wait_session_status+0x34>
 8011e04:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 8011e08:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011e0c:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011e10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011e12:	a90c      	add	r1, sp, #48	@ 0x30
 8011e14:	4620      	mov	r0, r4
 8011e16:	f7ff fadb 	bl	80113d0 <read_submessage_list>
 8011e1a:	e757      	b.n	8011ccc <wait_session_status+0x34>
 8011e1c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011e1e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011e22:	47a0      	blx	r4
 8011e24:	2001      	movs	r0, #1
 8011e26:	b01d      	add	sp, #116	@ 0x74
 8011e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e2c:	f88d 802c 	strb.w	r8, [sp, #44]	@ 0x2c
 8011e30:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8011e34:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8011e38:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011e3a:	a90c      	add	r1, sp, #48	@ 0x30
 8011e3c:	4620      	mov	r0, r4
 8011e3e:	f7ff fac7 	bl	80113d0 <read_submessage_list>
 8011e42:	e7c1      	b.n	8011dc8 <wait_session_status+0x130>

08011e44 <uxr_delete_session_retries>:
 8011e44:	b530      	push	{r4, r5, lr}
 8011e46:	b08f      	sub	sp, #60	@ 0x3c
 8011e48:	4604      	mov	r4, r0
 8011e4a:	460d      	mov	r5, r1
 8011e4c:	f000 f954 	bl	80120f8 <uxr_session_header_offset>
 8011e50:	2300      	movs	r3, #0
 8011e52:	2210      	movs	r2, #16
 8011e54:	9000      	str	r0, [sp, #0]
 8011e56:	a902      	add	r1, sp, #8
 8011e58:	a806      	add	r0, sp, #24
 8011e5a:	f7fe fbef 	bl	801063c <ucdr_init_buffer_origin_offset>
 8011e5e:	a906      	add	r1, sp, #24
 8011e60:	4620      	mov	r0, r4
 8011e62:	f000 f897 	bl	8011f94 <uxr_buffer_delete_session>
 8011e66:	2200      	movs	r2, #0
 8011e68:	4611      	mov	r1, r2
 8011e6a:	9b06      	ldr	r3, [sp, #24]
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	f000 f8eb 	bl	8012048 <uxr_stamp_session_header>
 8011e72:	a806      	add	r0, sp, #24
 8011e74:	f7fe fc20 	bl	80106b8 <ucdr_buffer_length>
 8011e78:	462b      	mov	r3, r5
 8011e7a:	4602      	mov	r2, r0
 8011e7c:	a902      	add	r1, sp, #8
 8011e7e:	4620      	mov	r0, r4
 8011e80:	f7ff ff0a 	bl	8011c98 <wait_session_status>
 8011e84:	b118      	cbz	r0, 8011e8e <uxr_delete_session_retries+0x4a>
 8011e86:	7960      	ldrb	r0, [r4, #5]
 8011e88:	fab0 f080 	clz	r0, r0
 8011e8c:	0940      	lsrs	r0, r0, #5
 8011e8e:	b00f      	add	sp, #60	@ 0x3c
 8011e90:	bd30      	pop	{r4, r5, pc}
 8011e92:	bf00      	nop

08011e94 <uxr_prepare_stream_to_write_submessage>:
 8011e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e98:	b082      	sub	sp, #8
 8011e9a:	4682      	mov	sl, r0
 8011e9c:	4610      	mov	r0, r2
 8011e9e:	4615      	mov	r5, r2
 8011ea0:	461e      	mov	r6, r3
 8011ea2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 8011ea6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8011eaa:	9101      	str	r1, [sp, #4]
 8011eac:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8011eb0:	f000 ff52 	bl	8012d58 <uxr_submessage_padding>
 8011eb4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011eb8:	f105 0904 	add.w	r9, r5, #4
 8011ebc:	2b01      	cmp	r3, #1
 8011ebe:	4481      	add	r9, r0
 8011ec0:	d01d      	beq.n	8011efe <uxr_prepare_stream_to_write_submessage+0x6a>
 8011ec2:	2b02      	cmp	r3, #2
 8011ec4:	d116      	bne.n	8011ef4 <uxr_prepare_stream_to_write_submessage+0x60>
 8011ec6:	4621      	mov	r1, r4
 8011ec8:	f10a 0008 	add.w	r0, sl, #8
 8011ecc:	f000 fecc 	bl	8012c68 <uxr_get_output_reliable_stream>
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	b158      	cbz	r0, 8011eec <uxr_prepare_stream_to_write_submessage+0x58>
 8011ed4:	4649      	mov	r1, r9
 8011ed6:	4632      	mov	r2, r6
 8011ed8:	f006 fd94 	bl	8018a04 <uxr_prepare_reliable_buffer_to_write>
 8011edc:	4604      	mov	r4, r0
 8011ede:	b12c      	cbz	r4, 8011eec <uxr_prepare_stream_to_write_submessage+0x58>
 8011ee0:	4643      	mov	r3, r8
 8011ee2:	b2aa      	uxth	r2, r5
 8011ee4:	4639      	mov	r1, r7
 8011ee6:	4630      	mov	r0, r6
 8011ee8:	f000 fef6 	bl	8012cd8 <uxr_buffer_submessage_header>
 8011eec:	4620      	mov	r0, r4
 8011eee:	b002      	add	sp, #8
 8011ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ef4:	2400      	movs	r4, #0
 8011ef6:	4620      	mov	r0, r4
 8011ef8:	b002      	add	sp, #8
 8011efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011efe:	4621      	mov	r1, r4
 8011f00:	f10a 0008 	add.w	r0, sl, #8
 8011f04:	f000 fea8 	bl	8012c58 <uxr_get_output_best_effort_stream>
 8011f08:	4604      	mov	r4, r0
 8011f0a:	2800      	cmp	r0, #0
 8011f0c:	d0ee      	beq.n	8011eec <uxr_prepare_stream_to_write_submessage+0x58>
 8011f0e:	4649      	mov	r1, r9
 8011f10:	4632      	mov	r2, r6
 8011f12:	f006 fcb3 	bl	801887c <uxr_prepare_best_effort_buffer_to_write>
 8011f16:	4604      	mov	r4, r0
 8011f18:	e7e1      	b.n	8011ede <uxr_prepare_stream_to_write_submessage+0x4a>
 8011f1a:	bf00      	nop

08011f1c <uxr_init_session_info>:
 8011f1c:	b470      	push	{r4, r5, r6}
 8011f1e:	7102      	strb	r2, [r0, #4]
 8011f20:	0e16      	lsrs	r6, r2, #24
 8011f22:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8011f26:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8011f2a:	23ff      	movs	r3, #255	@ 0xff
 8011f2c:	2209      	movs	r2, #9
 8011f2e:	7046      	strb	r6, [r0, #1]
 8011f30:	7085      	strb	r5, [r0, #2]
 8011f32:	70c4      	strb	r4, [r0, #3]
 8011f34:	7001      	strb	r1, [r0, #0]
 8011f36:	bc70      	pop	{r4, r5, r6}
 8011f38:	80c2      	strh	r2, [r0, #6]
 8011f3a:	7143      	strb	r3, [r0, #5]
 8011f3c:	4770      	bx	lr
 8011f3e:	bf00      	nop

08011f40 <uxr_buffer_create_session>:
 8011f40:	b570      	push	{r4, r5, r6, lr}
 8011f42:	b088      	sub	sp, #32
 8011f44:	2300      	movs	r3, #0
 8011f46:	4d12      	ldr	r5, [pc, #72]	@ (8011f90 <uxr_buffer_create_session+0x50>)
 8011f48:	9307      	str	r3, [sp, #28]
 8011f4a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011f4e:	7802      	ldrb	r2, [r0, #0]
 8011f50:	9303      	str	r3, [sp, #12]
 8011f52:	460c      	mov	r4, r1
 8011f54:	f88d 200c 	strb.w	r2, [sp, #12]
 8011f58:	2101      	movs	r1, #1
 8011f5a:	682a      	ldr	r2, [r5, #0]
 8011f5c:	f8d0 6001 	ldr.w	r6, [r0, #1]
 8011f60:	88ad      	ldrh	r5, [r5, #4]
 8011f62:	80c1      	strh	r1, [r0, #6]
 8011f64:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011f68:	9200      	str	r2, [sp, #0]
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	2210      	movs	r2, #16
 8011f6e:	4620      	mov	r0, r4
 8011f70:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011f74:	9306      	str	r3, [sp, #24]
 8011f76:	f88d 300d 	strb.w	r3, [sp, #13]
 8011f7a:	9602      	str	r6, [sp, #8]
 8011f7c:	f8ad 5006 	strh.w	r5, [sp, #6]
 8011f80:	f000 feaa 	bl	8012cd8 <uxr_buffer_submessage_header>
 8011f84:	4620      	mov	r0, r4
 8011f86:	4669      	mov	r1, sp
 8011f88:	f001 fece 	bl	8013d28 <uxr_serialize_CREATE_CLIENT_Payload>
 8011f8c:	b008      	add	sp, #32
 8011f8e:	bd70      	pop	{r4, r5, r6, pc}
 8011f90:	0801dea0 	.word	0x0801dea0

08011f94 <uxr_buffer_delete_session>:
 8011f94:	b530      	push	{r4, r5, lr}
 8011f96:	4b0c      	ldr	r3, [pc, #48]	@ (8011fc8 <uxr_buffer_delete_session+0x34>)
 8011f98:	b083      	sub	sp, #12
 8011f9a:	891b      	ldrh	r3, [r3, #8]
 8011f9c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011fa0:	2202      	movs	r2, #2
 8011fa2:	460c      	mov	r4, r1
 8011fa4:	80c2      	strh	r2, [r0, #6]
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	2204      	movs	r2, #4
 8011faa:	4608      	mov	r0, r1
 8011fac:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8011fb0:	2103      	movs	r1, #3
 8011fb2:	f8ad 5004 	strh.w	r5, [sp, #4]
 8011fb6:	f000 fe8f 	bl	8012cd8 <uxr_buffer_submessage_header>
 8011fba:	4620      	mov	r0, r4
 8011fbc:	a901      	add	r1, sp, #4
 8011fbe:	f001 ff61 	bl	8013e84 <uxr_serialize_DELETE_Payload>
 8011fc2:	b003      	add	sp, #12
 8011fc4:	bd30      	pop	{r4, r5, pc}
 8011fc6:	bf00      	nop
 8011fc8:	0801dea0 	.word	0x0801dea0

08011fcc <uxr_read_create_session_status>:
 8011fcc:	b510      	push	{r4, lr}
 8011fce:	b088      	sub	sp, #32
 8011fd0:	4604      	mov	r4, r0
 8011fd2:	4608      	mov	r0, r1
 8011fd4:	a901      	add	r1, sp, #4
 8011fd6:	f001 ff65 	bl	8013ea4 <uxr_deserialize_STATUS_AGENT_Payload>
 8011fda:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011fde:	7163      	strb	r3, [r4, #5]
 8011fe0:	b008      	add	sp, #32
 8011fe2:	bd10      	pop	{r4, pc}

08011fe4 <uxr_read_delete_session_status>:
 8011fe4:	b510      	push	{r4, lr}
 8011fe6:	4604      	mov	r4, r0
 8011fe8:	b084      	sub	sp, #16
 8011fea:	4608      	mov	r0, r1
 8011fec:	a902      	add	r1, sp, #8
 8011fee:	f001 ff89 	bl	8013f04 <uxr_deserialize_STATUS_Payload>
 8011ff2:	88e3      	ldrh	r3, [r4, #6]
 8011ff4:	2b02      	cmp	r3, #2
 8011ff6:	d001      	beq.n	8011ffc <uxr_read_delete_session_status+0x18>
 8011ff8:	b004      	add	sp, #16
 8011ffa:	bd10      	pop	{r4, pc}
 8011ffc:	f10d 000a 	add.w	r0, sp, #10
 8012000:	f7fe fec6 	bl	8010d90 <uxr_object_id_from_raw>
 8012004:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012008:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801200c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012010:	b29b      	uxth	r3, r3
 8012012:	2b02      	cmp	r3, #2
 8012014:	bf04      	itt	eq
 8012016:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 801201a:	7163      	strbeq	r3, [r4, #5]
 801201c:	b004      	add	sp, #16
 801201e:	bd10      	pop	{r4, pc}

08012020 <uxr_stamp_create_session_header>:
 8012020:	b510      	push	{r4, lr}
 8012022:	4604      	mov	r4, r0
 8012024:	b08a      	sub	sp, #40	@ 0x28
 8012026:	a802      	add	r0, sp, #8
 8012028:	2208      	movs	r2, #8
 801202a:	f7fe fb19 	bl	8010660 <ucdr_init_buffer>
 801202e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012032:	9400      	str	r4, [sp, #0]
 8012034:	2300      	movs	r3, #0
 8012036:	a802      	add	r0, sp, #8
 8012038:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801203c:	461a      	mov	r2, r3
 801203e:	f001 f849 	bl	80130d4 <uxr_serialize_message_header>
 8012042:	b00a      	add	sp, #40	@ 0x28
 8012044:	bd10      	pop	{r4, pc}
 8012046:	bf00      	nop

08012048 <uxr_stamp_session_header>:
 8012048:	b570      	push	{r4, r5, r6, lr}
 801204a:	4604      	mov	r4, r0
 801204c:	b08c      	sub	sp, #48	@ 0x30
 801204e:	460d      	mov	r5, r1
 8012050:	4616      	mov	r6, r2
 8012052:	4619      	mov	r1, r3
 8012054:	a804      	add	r0, sp, #16
 8012056:	2208      	movs	r2, #8
 8012058:	9603      	str	r6, [sp, #12]
 801205a:	f7fe fb01 	bl	8010660 <ucdr_init_buffer>
 801205e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012062:	9b03      	ldr	r3, [sp, #12]
 8012064:	9400      	str	r4, [sp, #0]
 8012066:	462a      	mov	r2, r5
 8012068:	a804      	add	r0, sp, #16
 801206a:	f001 f833 	bl	80130d4 <uxr_serialize_message_header>
 801206e:	b00c      	add	sp, #48	@ 0x30
 8012070:	bd70      	pop	{r4, r5, r6, pc}
 8012072:	bf00      	nop

08012074 <uxr_read_session_header>:
 8012074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012078:	4607      	mov	r7, r0
 801207a:	b084      	sub	sp, #16
 801207c:	4608      	mov	r0, r1
 801207e:	460c      	mov	r4, r1
 8012080:	4615      	mov	r5, r2
 8012082:	461e      	mov	r6, r3
 8012084:	f7fe fb1c 	bl	80106c0 <ucdr_buffer_remaining>
 8012088:	2808      	cmp	r0, #8
 801208a:	d803      	bhi.n	8012094 <uxr_read_session_header+0x20>
 801208c:	2000      	movs	r0, #0
 801208e:	b004      	add	sp, #16
 8012090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012094:	f10d 080c 	add.w	r8, sp, #12
 8012098:	4633      	mov	r3, r6
 801209a:	462a      	mov	r2, r5
 801209c:	4620      	mov	r0, r4
 801209e:	f8cd 8000 	str.w	r8, [sp]
 80120a2:	f10d 010b 	add.w	r1, sp, #11
 80120a6:	f001 f833 	bl	8013110 <uxr_deserialize_message_header>
 80120aa:	783a      	ldrb	r2, [r7, #0]
 80120ac:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80120b0:	4293      	cmp	r3, r2
 80120b2:	d1eb      	bne.n	801208c <uxr_read_session_header+0x18>
 80120b4:	061b      	lsls	r3, r3, #24
 80120b6:	d41c      	bmi.n	80120f2 <uxr_read_session_header+0x7e>
 80120b8:	f898 2000 	ldrb.w	r2, [r8]
 80120bc:	787b      	ldrb	r3, [r7, #1]
 80120be:	429a      	cmp	r2, r3
 80120c0:	d003      	beq.n	80120ca <uxr_read_session_header+0x56>
 80120c2:	2001      	movs	r0, #1
 80120c4:	f080 0001 	eor.w	r0, r0, #1
 80120c8:	e7e1      	b.n	801208e <uxr_read_session_header+0x1a>
 80120ca:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80120ce:	78bb      	ldrb	r3, [r7, #2]
 80120d0:	429a      	cmp	r2, r3
 80120d2:	f107 0102 	add.w	r1, r7, #2
 80120d6:	d1f4      	bne.n	80120c2 <uxr_read_session_header+0x4e>
 80120d8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80120dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80120e0:	429a      	cmp	r2, r3
 80120e2:	d1ee      	bne.n	80120c2 <uxr_read_session_header+0x4e>
 80120e4:	784b      	ldrb	r3, [r1, #1]
 80120e6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d1e9      	bne.n	80120c2 <uxr_read_session_header+0x4e>
 80120ee:	2000      	movs	r0, #0
 80120f0:	e7e8      	b.n	80120c4 <uxr_read_session_header+0x50>
 80120f2:	2001      	movs	r0, #1
 80120f4:	e7cb      	b.n	801208e <uxr_read_session_header+0x1a>
 80120f6:	bf00      	nop

080120f8 <uxr_session_header_offset>:
 80120f8:	f990 3000 	ldrsb.w	r3, [r0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	bfac      	ite	ge
 8012100:	2008      	movge	r0, #8
 8012102:	2004      	movlt	r0, #4
 8012104:	4770      	bx	lr
 8012106:	bf00      	nop

08012108 <uxr_init_base_object_request>:
 8012108:	b530      	push	{r4, r5, lr}
 801210a:	88c3      	ldrh	r3, [r0, #6]
 801210c:	b083      	sub	sp, #12
 801210e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 8012112:	9101      	str	r1, [sp, #4]
 8012114:	f1a3 010a 	sub.w	r1, r3, #10
 8012118:	b289      	uxth	r1, r1
 801211a:	42a1      	cmp	r1, r4
 801211c:	d80e      	bhi.n	801213c <uxr_init_base_object_request+0x34>
 801211e:	3301      	adds	r3, #1
 8012120:	b29c      	uxth	r4, r3
 8012122:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8012126:	b2db      	uxtb	r3, r3
 8012128:	80c4      	strh	r4, [r0, #6]
 801212a:	1c91      	adds	r1, r2, #2
 801212c:	9801      	ldr	r0, [sp, #4]
 801212e:	7015      	strb	r5, [r2, #0]
 8012130:	7053      	strb	r3, [r2, #1]
 8012132:	f7fe fe41 	bl	8010db8 <uxr_object_id_to_raw>
 8012136:	4620      	mov	r0, r4
 8012138:	b003      	add	sp, #12
 801213a:	bd30      	pop	{r4, r5, pc}
 801213c:	230a      	movs	r3, #10
 801213e:	461c      	mov	r4, r3
 8012140:	2500      	movs	r5, #0
 8012142:	e7f1      	b.n	8012128 <uxr_init_base_object_request+0x20>

08012144 <uxr_parse_base_object_request>:
 8012144:	b570      	push	{r4, r5, r6, lr}
 8012146:	4604      	mov	r4, r0
 8012148:	3002      	adds	r0, #2
 801214a:	460d      	mov	r5, r1
 801214c:	4616      	mov	r6, r2
 801214e:	f7fe fe1f 	bl	8010d90 <uxr_object_id_from_raw>
 8012152:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8012156:	8028      	strh	r0, [r5, #0]
 8012158:	806b      	strh	r3, [r5, #2]
 801215a:	7822      	ldrb	r2, [r4, #0]
 801215c:	7863      	ldrb	r3, [r4, #1]
 801215e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012162:	8033      	strh	r3, [r6, #0]
 8012164:	bd70      	pop	{r4, r5, r6, pc}
 8012166:	bf00      	nop

08012168 <uxr_init_framing_io>:
 8012168:	2300      	movs	r3, #0
 801216a:	7041      	strb	r1, [r0, #1]
 801216c:	7003      	strb	r3, [r0, #0]
 801216e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8012170:	4770      	bx	lr
 8012172:	bf00      	nop

08012174 <uxr_write_framed_msg>:
 8012174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012178:	7845      	ldrb	r5, [r0, #1]
 801217a:	b085      	sub	sp, #20
 801217c:	4604      	mov	r4, r0
 801217e:	f1a5 0c7d 	sub.w	ip, r5, #125	@ 0x7d
 8012182:	f04f 0e7e 	mov.w	lr, #126	@ 0x7e
 8012186:	f1bc 0f01 	cmp.w	ip, #1
 801218a:	f89d 003c 	ldrb.w	r0, [sp, #60]	@ 0x3c
 801218e:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8012192:	f884 e038 	strb.w	lr, [r4, #56]	@ 0x38
 8012196:	460e      	mov	r6, r1
 8012198:	4617      	mov	r7, r2
 801219a:	469b      	mov	fp, r3
 801219c:	f240 8116 	bls.w	80123cc <uxr_write_framed_msg+0x258>
 80121a0:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80121a4:	2302      	movs	r3, #2
 80121a6:	2a01      	cmp	r2, #1
 80121a8:	f884 5039 	strb.w	r5, [r4, #57]	@ 0x39
 80121ac:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80121b0:	f240 8091 	bls.w	80122d6 <uxr_write_framed_msg+0x162>
 80121b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121b6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80121ba:	b2d9      	uxtb	r1, r3
 80121bc:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 80121c0:	2203      	movs	r2, #3
 80121c2:	2b01      	cmp	r3, #1
 80121c4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80121c8:	f240 809a 	bls.w	8012300 <uxr_write_framed_msg+0x18c>
 80121cc:	18a3      	adds	r3, r4, r2
 80121ce:	3201      	adds	r2, #1
 80121d0:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 80121d4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80121d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121da:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80121de:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80121e2:	2901      	cmp	r1, #1
 80121e4:	eb04 0102 	add.w	r1, r4, r2
 80121e8:	f240 8101 	bls.w	80123ee <uxr_write_framed_msg+0x27a>
 80121ec:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 80121f0:	3201      	adds	r2, #1
 80121f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121f4:	b2d2      	uxtb	r2, r2
 80121f6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	f000 8106 	beq.w	801240c <uxr_write_framed_msg+0x298>
 8012200:	f04f 0a00 	mov.w	sl, #0
 8012204:	46d1      	mov	r9, sl
 8012206:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801220a:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801220e:	2901      	cmp	r1, #1
 8012210:	f240 80a3 	bls.w	801235a <uxr_write_framed_msg+0x1e6>
 8012214:	2a29      	cmp	r2, #41	@ 0x29
 8012216:	d87f      	bhi.n	8012318 <uxr_write_framed_msg+0x1a4>
 8012218:	18a1      	adds	r1, r4, r2
 801221a:	3201      	adds	r2, #1
 801221c:	b2d2      	uxtb	r2, r2
 801221e:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8012222:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012226:	ea8a 0303 	eor.w	r3, sl, r3
 801222a:	4984      	ldr	r1, [pc, #528]	@ (801243c <uxr_write_framed_msg+0x2c8>)
 801222c:	b2db      	uxtb	r3, r3
 801222e:	f109 0901 	add.w	r9, r9, #1
 8012232:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012236:	ea83 2a1a 	eor.w	sl, r3, sl, lsr #8
 801223a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801223c:	454b      	cmp	r3, r9
 801223e:	d8e2      	bhi.n	8012206 <uxr_write_framed_msg+0x92>
 8012240:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8012244:	fa5f f98a 	uxtb.w	r9, sl
 8012248:	9301      	str	r3, [sp, #4]
 801224a:	f04f 0b00 	mov.w	fp, #0
 801224e:	f88d 900c 	strb.w	r9, [sp, #12]
 8012252:	f88d 300d 	strb.w	r3, [sp, #13]
 8012256:	f1a9 0a7d 	sub.w	sl, r9, #125	@ 0x7d
 801225a:	fa5f f18a 	uxtb.w	r1, sl
 801225e:	2901      	cmp	r1, #1
 8012260:	d920      	bls.n	80122a4 <uxr_write_framed_msg+0x130>
 8012262:	2a29      	cmp	r2, #41	@ 0x29
 8012264:	f240 808b 	bls.w	801237e <uxr_write_framed_msg+0x20a>
 8012268:	2500      	movs	r5, #0
 801226a:	e000      	b.n	801226e <uxr_write_framed_msg+0xfa>
 801226c:	b160      	cbz	r0, 8012288 <uxr_write_framed_msg+0x114>
 801226e:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012272:	1b52      	subs	r2, r2, r5
 8012274:	4421      	add	r1, r4
 8012276:	4643      	mov	r3, r8
 8012278:	4638      	mov	r0, r7
 801227a:	47b0      	blx	r6
 801227c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012280:	4405      	add	r5, r0
 8012282:	4295      	cmp	r5, r2
 8012284:	d3f2      	bcc.n	801226c <uxr_write_framed_msg+0xf8>
 8012286:	d003      	beq.n	8012290 <uxr_write_framed_msg+0x11c>
 8012288:	2000      	movs	r0, #0
 801228a:	b005      	add	sp, #20
 801228c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012290:	fa5f f18a 	uxtb.w	r1, sl
 8012294:	f04f 0300 	mov.w	r3, #0
 8012298:	2901      	cmp	r1, #1
 801229a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801229e:	f04f 0200 	mov.w	r2, #0
 80122a2:	d86c      	bhi.n	801237e <uxr_write_framed_msg+0x20a>
 80122a4:	1c51      	adds	r1, r2, #1
 80122a6:	b2c9      	uxtb	r1, r1
 80122a8:	2929      	cmp	r1, #41	@ 0x29
 80122aa:	d8dd      	bhi.n	8012268 <uxr_write_framed_msg+0xf4>
 80122ac:	18a0      	adds	r0, r4, r2
 80122ae:	3202      	adds	r2, #2
 80122b0:	f089 0920 	eor.w	r9, r9, #32
 80122b4:	b2d2      	uxtb	r2, r2
 80122b6:	4659      	mov	r1, fp
 80122b8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80122bc:	f880 9039 	strb.w	r9, [r0, #57]	@ 0x39
 80122c0:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80122c4:	f04f 0b01 	mov.w	fp, #1
 80122c8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80122cc:	2900      	cmp	r1, #0
 80122ce:	d162      	bne.n	8012396 <uxr_write_framed_msg+0x222>
 80122d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80122d4:	e7bf      	b.n	8012256 <uxr_write_framed_msg+0xe2>
 80122d6:	2204      	movs	r2, #4
 80122d8:	2503      	movs	r5, #3
 80122da:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80122dc:	4423      	add	r3, r4
 80122de:	b2c9      	uxtb	r1, r1
 80122e0:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 80122e4:	f883 c038 	strb.w	ip, [r3, #56]	@ 0x38
 80122e8:	4425      	add	r5, r4
 80122ea:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 80122ee:	f080 0020 	eor.w	r0, r0, #32
 80122f2:	2b01      	cmp	r3, #1
 80122f4:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 80122f8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80122fc:	f63f af66 	bhi.w	80121cc <uxr_write_framed_msg+0x58>
 8012300:	18a3      	adds	r3, r4, r2
 8012302:	f081 0120 	eor.w	r1, r1, #32
 8012306:	3202      	adds	r2, #2
 8012308:	207d      	movs	r0, #125	@ 0x7d
 801230a:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 801230e:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38
 8012312:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012316:	e75f      	b.n	80121d8 <uxr_write_framed_msg+0x64>
 8012318:	2500      	movs	r5, #0
 801231a:	e001      	b.n	8012320 <uxr_write_framed_msg+0x1ac>
 801231c:	2800      	cmp	r0, #0
 801231e:	d0b3      	beq.n	8012288 <uxr_write_framed_msg+0x114>
 8012320:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012324:	1b52      	subs	r2, r2, r5
 8012326:	4421      	add	r1, r4
 8012328:	4643      	mov	r3, r8
 801232a:	4638      	mov	r0, r7
 801232c:	47b0      	blx	r6
 801232e:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012332:	4405      	add	r5, r0
 8012334:	4295      	cmp	r5, r2
 8012336:	d3f1      	bcc.n	801231c <uxr_write_framed_msg+0x1a8>
 8012338:	d1a6      	bne.n	8012288 <uxr_write_framed_msg+0x114>
 801233a:	f04f 0300 	mov.w	r3, #0
 801233e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8012342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012344:	454b      	cmp	r3, r9
 8012346:	d971      	bls.n	801242c <uxr_write_framed_msg+0x2b8>
 8012348:	f81b 3009 	ldrb.w	r3, [fp, r9]
 801234c:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8012350:	2901      	cmp	r1, #1
 8012352:	f04f 0200 	mov.w	r2, #0
 8012356:	f63f af5d 	bhi.w	8012214 <uxr_write_framed_msg+0xa0>
 801235a:	1c51      	adds	r1, r2, #1
 801235c:	b2c9      	uxtb	r1, r1
 801235e:	2929      	cmp	r1, #41	@ 0x29
 8012360:	d8da      	bhi.n	8012318 <uxr_write_framed_msg+0x1a4>
 8012362:	18a0      	adds	r0, r4, r2
 8012364:	3202      	adds	r2, #2
 8012366:	b2d2      	uxtb	r2, r2
 8012368:	f083 0120 	eor.w	r1, r3, #32
 801236c:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 8012370:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 8012374:	f880 1039 	strb.w	r1, [r0, #57]	@ 0x39
 8012378:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801237c:	e753      	b.n	8012226 <uxr_write_framed_msg+0xb2>
 801237e:	18a0      	adds	r0, r4, r2
 8012380:	3201      	adds	r2, #1
 8012382:	b2d2      	uxtb	r2, r2
 8012384:	4659      	mov	r1, fp
 8012386:	f880 9038 	strb.w	r9, [r0, #56]	@ 0x38
 801238a:	f04f 0b01 	mov.w	fp, #1
 801238e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012392:	2900      	cmp	r1, #0
 8012394:	d09c      	beq.n	80122d0 <uxr_write_framed_msg+0x15c>
 8012396:	2500      	movs	r5, #0
 8012398:	e002      	b.n	80123a0 <uxr_write_framed_msg+0x22c>
 801239a:	2800      	cmp	r0, #0
 801239c:	f43f af74 	beq.w	8012288 <uxr_write_framed_msg+0x114>
 80123a0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80123a4:	1b52      	subs	r2, r2, r5
 80123a6:	4421      	add	r1, r4
 80123a8:	4643      	mov	r3, r8
 80123aa:	4638      	mov	r0, r7
 80123ac:	47b0      	blx	r6
 80123ae:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 80123b2:	4405      	add	r5, r0
 80123b4:	4295      	cmp	r5, r2
 80123b6:	d3f0      	bcc.n	801239a <uxr_write_framed_msg+0x226>
 80123b8:	f47f af66 	bne.w	8012288 <uxr_write_framed_msg+0x114>
 80123bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80123be:	2300      	movs	r3, #0
 80123c0:	b290      	uxth	r0, r2
 80123c2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80123c6:	b005      	add	sp, #20
 80123c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123cc:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 80123d0:	f085 0520 	eor.w	r5, r5, #32
 80123d4:	2303      	movs	r3, #3
 80123d6:	217d      	movs	r1, #125	@ 0x7d
 80123d8:	2a01      	cmp	r2, #1
 80123da:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
 80123de:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80123e2:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 80123e6:	d814      	bhi.n	8012412 <uxr_write_framed_msg+0x29e>
 80123e8:	2205      	movs	r2, #5
 80123ea:	2504      	movs	r5, #4
 80123ec:	e775      	b.n	80122da <uxr_write_framed_msg+0x166>
 80123ee:	f083 0320 	eor.w	r3, r3, #32
 80123f2:	f881 3039 	strb.w	r3, [r1, #57]	@ 0x39
 80123f6:	3202      	adds	r2, #2
 80123f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123fa:	b2d2      	uxtb	r2, r2
 80123fc:	207d      	movs	r0, #125	@ 0x7d
 80123fe:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8012402:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012406:	2b00      	cmp	r3, #0
 8012408:	f47f aefa 	bne.w	8012200 <uxr_write_framed_msg+0x8c>
 801240c:	9301      	str	r3, [sp, #4]
 801240e:	4699      	mov	r9, r3
 8012410:	e71b      	b.n	801224a <uxr_write_framed_msg+0xd6>
 8012412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012414:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8012418:	b2d9      	uxtb	r1, r3
 801241a:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 801241e:	2204      	movs	r2, #4
 8012420:	2b01      	cmp	r3, #1
 8012422:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012426:	f63f aed1 	bhi.w	80121cc <uxr_write_framed_msg+0x58>
 801242a:	e769      	b.n	8012300 <uxr_write_framed_msg+0x18c>
 801242c:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8012430:	fa5f f98a 	uxtb.w	r9, sl
 8012434:	9301      	str	r3, [sp, #4]
 8012436:	2200      	movs	r2, #0
 8012438:	e707      	b.n	801224a <uxr_write_framed_msg+0xd6>
 801243a:	bf00      	nop
 801243c:	0801e100 	.word	0x0801e100

08012440 <uxr_framing_read_transport>:
 8012440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012444:	4604      	mov	r4, r0
 8012446:	b083      	sub	sp, #12
 8012448:	461f      	mov	r7, r3
 801244a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801244e:	4689      	mov	r9, r1
 8012450:	4692      	mov	sl, r2
 8012452:	f000 fc87 	bl	8012d64 <uxr_millis>
 8012456:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801245a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801245e:	42b3      	cmp	r3, r6
 8012460:	4680      	mov	r8, r0
 8012462:	d05f      	beq.n	8012524 <uxr_framing_read_transport+0xe4>
 8012464:	d81b      	bhi.n	801249e <uxr_framing_read_transport+0x5e>
 8012466:	1e75      	subs	r5, r6, #1
 8012468:	1aed      	subs	r5, r5, r3
 801246a:	b2ed      	uxtb	r5, r5
 801246c:	2600      	movs	r6, #0
 801246e:	455d      	cmp	r5, fp
 8012470:	d81e      	bhi.n	80124b0 <uxr_framing_read_transport+0x70>
 8012472:	19ab      	adds	r3, r5, r6
 8012474:	455b      	cmp	r3, fp
 8012476:	bf84      	itt	hi
 8012478:	ebab 0605 	subhi.w	r6, fp, r5
 801247c:	b2f6      	uxtbhi	r6, r6
 801247e:	b9e5      	cbnz	r5, 80124ba <uxr_framing_read_transport+0x7a>
 8012480:	f04f 0b00 	mov.w	fp, #0
 8012484:	f000 fc6e 	bl	8012d64 <uxr_millis>
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	eba0 0008 	sub.w	r0, r0, r8
 801248e:	1a1b      	subs	r3, r3, r0
 8012490:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012494:	4658      	mov	r0, fp
 8012496:	603b      	str	r3, [r7, #0]
 8012498:	b003      	add	sp, #12
 801249a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801249e:	2e00      	cmp	r6, #0
 80124a0:	d048      	beq.n	8012534 <uxr_framing_read_transport+0xf4>
 80124a2:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80124a6:	b2ed      	uxtb	r5, r5
 80124a8:	3e01      	subs	r6, #1
 80124aa:	455d      	cmp	r5, fp
 80124ac:	b2f6      	uxtb	r6, r6
 80124ae:	d9e0      	bls.n	8012472 <uxr_framing_read_transport+0x32>
 80124b0:	fa5f f58b 	uxtb.w	r5, fp
 80124b4:	2600      	movs	r6, #0
 80124b6:	2d00      	cmp	r5, #0
 80124b8:	d0e2      	beq.n	8012480 <uxr_framing_read_transport+0x40>
 80124ba:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80124be:	3102      	adds	r1, #2
 80124c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80124c2:	9300      	str	r3, [sp, #0]
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	4421      	add	r1, r4
 80124c8:	462a      	mov	r2, r5
 80124ca:	4650      	mov	r0, sl
 80124cc:	47c8      	blx	r9
 80124ce:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80124d2:	4a1b      	ldr	r2, [pc, #108]	@ (8012540 <uxr_framing_read_transport+0x100>)
 80124d4:	4403      	add	r3, r0
 80124d6:	0859      	lsrs	r1, r3, #1
 80124d8:	fba2 2101 	umull	r2, r1, r2, r1
 80124dc:	0889      	lsrs	r1, r1, #2
 80124de:	222a      	movs	r2, #42	@ 0x2a
 80124e0:	fb02 3111 	mls	r1, r2, r1, r3
 80124e4:	4683      	mov	fp, r0
 80124e6:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80124ea:	2800      	cmp	r0, #0
 80124ec:	d0c8      	beq.n	8012480 <uxr_framing_read_transport+0x40>
 80124ee:	42a8      	cmp	r0, r5
 80124f0:	d1c8      	bne.n	8012484 <uxr_framing_read_transport+0x44>
 80124f2:	b31e      	cbz	r6, 801253c <uxr_framing_read_transport+0xfc>
 80124f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80124f6:	9300      	str	r3, [sp, #0]
 80124f8:	3102      	adds	r1, #2
 80124fa:	4421      	add	r1, r4
 80124fc:	4632      	mov	r2, r6
 80124fe:	2300      	movs	r3, #0
 8012500:	4650      	mov	r0, sl
 8012502:	47c8      	blx	r9
 8012504:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012508:	490d      	ldr	r1, [pc, #52]	@ (8012540 <uxr_framing_read_transport+0x100>)
 801250a:	181a      	adds	r2, r3, r0
 801250c:	0853      	lsrs	r3, r2, #1
 801250e:	fba1 1303 	umull	r1, r3, r1, r3
 8012512:	089b      	lsrs	r3, r3, #2
 8012514:	212a      	movs	r1, #42	@ 0x2a
 8012516:	fb01 2313 	mls	r3, r1, r3, r2
 801251a:	eb00 0b05 	add.w	fp, r0, r5
 801251e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8012522:	e7af      	b.n	8012484 <uxr_framing_read_transport+0x44>
 8012524:	2600      	movs	r6, #0
 8012526:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801252a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801252c:	d9c0      	bls.n	80124b0 <uxr_framing_read_transport+0x70>
 801252e:	2102      	movs	r1, #2
 8012530:	2529      	movs	r5, #41	@ 0x29
 8012532:	e7c5      	b.n	80124c0 <uxr_framing_read_transport+0x80>
 8012534:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8012538:	b2ed      	uxtb	r5, r5
 801253a:	e798      	b.n	801246e <uxr_framing_read_transport+0x2e>
 801253c:	46ab      	mov	fp, r5
 801253e:	e7a1      	b.n	8012484 <uxr_framing_read_transport+0x44>
 8012540:	30c30c31 	.word	0x30c30c31

08012544 <uxr_read_framed_msg>:
 8012544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012548:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 801254c:	f890 502d 	ldrb.w	r5, [r0, #45]	@ 0x2d
 8012550:	42ae      	cmp	r6, r5
 8012552:	b083      	sub	sp, #12
 8012554:	4604      	mov	r4, r0
 8012556:	461f      	mov	r7, r3
 8012558:	4689      	mov	r9, r1
 801255a:	4692      	mov	sl, r2
 801255c:	f000 817d 	beq.w	801285a <uxr_read_framed_msg+0x316>
 8012560:	7823      	ldrb	r3, [r4, #0]
 8012562:	4ecc      	ldr	r6, [pc, #816]	@ (8012894 <uxr_read_framed_msg+0x350>)
 8012564:	f8df 8330 	ldr.w	r8, [pc, #816]	@ 8012898 <uxr_read_framed_msg+0x354>
 8012568:	2b07      	cmp	r3, #7
 801256a:	d8fd      	bhi.n	8012568 <uxr_read_framed_msg+0x24>
 801256c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8012570:	00f40113 	.word	0x00f40113
 8012574:	00b700d4 	.word	0x00b700d4
 8012578:	004d008e 	.word	0x004d008e
 801257c:	00080030 	.word	0x00080030
 8012580:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012584:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012588:	4298      	cmp	r0, r3
 801258a:	f000 8141 	beq.w	8012810 <uxr_read_framed_msg+0x2cc>
 801258e:	18e2      	adds	r2, r4, r3
 8012590:	7891      	ldrb	r1, [r2, #2]
 8012592:	297d      	cmp	r1, #125	@ 0x7d
 8012594:	f000 81a2 	beq.w	80128dc <uxr_read_framed_msg+0x398>
 8012598:	3301      	adds	r3, #1
 801259a:	085a      	lsrs	r2, r3, #1
 801259c:	fba6 0202 	umull	r0, r2, r6, r2
 80125a0:	0892      	lsrs	r2, r2, #2
 80125a2:	202a      	movs	r0, #42	@ 0x2a
 80125a4:	fb00 3312 	mls	r3, r0, r2, r3
 80125a8:	297e      	cmp	r1, #126	@ 0x7e
 80125aa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80125ae:	f000 8251 	beq.w	8012a54 <uxr_read_framed_msg+0x510>
 80125b2:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80125b4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80125b6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80125ba:	b29b      	uxth	r3, r3
 80125bc:	2100      	movs	r1, #0
 80125be:	429a      	cmp	r2, r3
 80125c0:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80125c2:	7021      	strb	r1, [r4, #0]
 80125c4:	f000 8182 	beq.w	80128cc <uxr_read_framed_msg+0x388>
 80125c8:	2000      	movs	r0, #0
 80125ca:	b003      	add	sp, #12
 80125cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125d0:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80125d4:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80125d8:	4298      	cmp	r0, r3
 80125da:	f000 8128 	beq.w	801282e <uxr_read_framed_msg+0x2ea>
 80125de:	18e2      	adds	r2, r4, r3
 80125e0:	7891      	ldrb	r1, [r2, #2]
 80125e2:	297d      	cmp	r1, #125	@ 0x7d
 80125e4:	f000 8196 	beq.w	8012914 <uxr_read_framed_msg+0x3d0>
 80125e8:	3301      	adds	r3, #1
 80125ea:	085a      	lsrs	r2, r3, #1
 80125ec:	fba6 0202 	umull	r0, r2, r6, r2
 80125f0:	0892      	lsrs	r2, r2, #2
 80125f2:	202a      	movs	r0, #42	@ 0x2a
 80125f4:	fb00 3312 	mls	r3, r0, r2, r3
 80125f8:	297e      	cmp	r1, #126	@ 0x7e
 80125fa:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80125fe:	f000 8219 	beq.w	8012a34 <uxr_read_framed_msg+0x4f0>
 8012602:	2307      	movs	r3, #7
 8012604:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8012606:	7023      	strb	r3, [r4, #0]
 8012608:	e7ae      	b.n	8012568 <uxr_read_framed_msg+0x24>
 801260a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801260c:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 801260e:	429d      	cmp	r5, r3
 8012610:	d937      	bls.n	8012682 <uxr_read_framed_msg+0x13e>
 8012612:	ee07 9a90 	vmov	s15, r9
 8012616:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801261a:	e01e      	b.n	801265a <uxr_read_framed_msg+0x116>
 801261c:	f89e e002 	ldrb.w	lr, [lr, #2]
 8012620:	f1be 0f7d 	cmp.w	lr, #125	@ 0x7d
 8012624:	f000 80d2 	beq.w	80127cc <uxr_read_framed_msg+0x288>
 8012628:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801262c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012630:	f000 8214 	beq.w	8012a5c <uxr_read_framed_msg+0x518>
 8012634:	f807 e003 	strb.w	lr, [r7, r3]
 8012638:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 801263a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801263c:	8e25      	ldrh	r5, [r4, #48]	@ 0x30
 801263e:	ea80 010e 	eor.w	r1, r0, lr
 8012642:	b2c9      	uxtb	r1, r1
 8012644:	3301      	adds	r3, #1
 8012646:	f838 2011 	ldrh.w	r2, [r8, r1, lsl #1]
 801264a:	b29b      	uxth	r3, r3
 801264c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8012650:	42ab      	cmp	r3, r5
 8012652:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8012654:	8663      	strh	r3, [r4, #50]	@ 0x32
 8012656:	f080 8121 	bcs.w	801289c <uxr_read_framed_msg+0x358>
 801265a:	f894 102d 	ldrb.w	r1, [r4, #45]	@ 0x2d
 801265e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012662:	f101 0b01 	add.w	fp, r1, #1
 8012666:	ea4f 025b 	mov.w	r2, fp, lsr #1
 801266a:	fba6 9202 	umull	r9, r2, r6, r2
 801266e:	0892      	lsrs	r2, r2, #2
 8012670:	4288      	cmp	r0, r1
 8012672:	eb04 0e01 	add.w	lr, r4, r1
 8012676:	fb0c b212 	mls	r2, ip, r2, fp
 801267a:	d1cf      	bne.n	801261c <uxr_read_framed_msg+0xd8>
 801267c:	ee17 9a90 	vmov	r9, s15
 8012680:	429d      	cmp	r5, r3
 8012682:	f040 8112 	bne.w	80128aa <uxr_read_framed_msg+0x366>
 8012686:	2306      	movs	r3, #6
 8012688:	7023      	strb	r3, [r4, #0]
 801268a:	e76d      	b.n	8012568 <uxr_read_framed_msg+0x24>
 801268c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012690:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012694:	4298      	cmp	r0, r3
 8012696:	f000 80bb 	beq.w	8012810 <uxr_read_framed_msg+0x2cc>
 801269a:	18e2      	adds	r2, r4, r3
 801269c:	7891      	ldrb	r1, [r2, #2]
 801269e:	297d      	cmp	r1, #125	@ 0x7d
 80126a0:	f000 8153 	beq.w	801294a <uxr_read_framed_msg+0x406>
 80126a4:	3301      	adds	r3, #1
 80126a6:	085a      	lsrs	r2, r3, #1
 80126a8:	fba6 0202 	umull	r0, r2, r6, r2
 80126ac:	0892      	lsrs	r2, r2, #2
 80126ae:	202a      	movs	r0, #42	@ 0x2a
 80126b0:	fb00 3212 	mls	r2, r0, r2, r3
 80126b4:	297e      	cmp	r1, #126	@ 0x7e
 80126b6:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80126ba:	f000 81cb 	beq.w	8012a54 <uxr_read_framed_msg+0x510>
 80126be:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80126c0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80126c4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80126c6:	b29b      	uxth	r3, r3
 80126c8:	2000      	movs	r0, #0
 80126ca:	428b      	cmp	r3, r1
 80126cc:	8623      	strh	r3, [r4, #48]	@ 0x30
 80126ce:	8660      	strh	r0, [r4, #50]	@ 0x32
 80126d0:	86e0      	strh	r0, [r4, #54]	@ 0x36
 80126d2:	f240 80db 	bls.w	801288c <uxr_read_framed_msg+0x348>
 80126d6:	7020      	strb	r0, [r4, #0]
 80126d8:	b003      	add	sp, #12
 80126da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126de:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80126e2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80126e6:	4298      	cmp	r0, r3
 80126e8:	f000 80a1 	beq.w	801282e <uxr_read_framed_msg+0x2ea>
 80126ec:	18e2      	adds	r2, r4, r3
 80126ee:	7891      	ldrb	r1, [r2, #2]
 80126f0:	297d      	cmp	r1, #125	@ 0x7d
 80126f2:	f000 8167 	beq.w	80129c4 <uxr_read_framed_msg+0x480>
 80126f6:	3301      	adds	r3, #1
 80126f8:	085a      	lsrs	r2, r3, #1
 80126fa:	fba6 0202 	umull	r0, r2, r6, r2
 80126fe:	0892      	lsrs	r2, r2, #2
 8012700:	202a      	movs	r0, #42	@ 0x2a
 8012702:	fb00 3312 	mls	r3, r0, r2, r3
 8012706:	297e      	cmp	r1, #126	@ 0x7e
 8012708:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801270c:	f000 8192 	beq.w	8012a34 <uxr_read_framed_msg+0x4f0>
 8012710:	2304      	movs	r3, #4
 8012712:	8621      	strh	r1, [r4, #48]	@ 0x30
 8012714:	7023      	strb	r3, [r4, #0]
 8012716:	e727      	b.n	8012568 <uxr_read_framed_msg+0x24>
 8012718:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801271c:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012720:	4290      	cmp	r0, r2
 8012722:	f000 80b1 	beq.w	8012888 <uxr_read_framed_msg+0x344>
 8012726:	18a3      	adds	r3, r4, r2
 8012728:	7899      	ldrb	r1, [r3, #2]
 801272a:	297d      	cmp	r1, #125	@ 0x7d
 801272c:	f000 8166 	beq.w	80129fc <uxr_read_framed_msg+0x4b8>
 8012730:	3201      	adds	r2, #1
 8012732:	0850      	lsrs	r0, r2, #1
 8012734:	fba6 3000 	umull	r3, r0, r6, r0
 8012738:	0880      	lsrs	r0, r0, #2
 801273a:	232a      	movs	r3, #42	@ 0x2a
 801273c:	fb03 2210 	mls	r2, r3, r0, r2
 8012740:	297e      	cmp	r1, #126	@ 0x7e
 8012742:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012746:	f000 8187 	beq.w	8012a58 <uxr_read_framed_msg+0x514>
 801274a:	7863      	ldrb	r3, [r4, #1]
 801274c:	428b      	cmp	r3, r1
 801274e:	bf0c      	ite	eq
 8012750:	2303      	moveq	r3, #3
 8012752:	2300      	movne	r3, #0
 8012754:	7023      	strb	r3, [r4, #0]
 8012756:	e707      	b.n	8012568 <uxr_read_framed_msg+0x24>
 8012758:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801275c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012760:	2200      	movs	r2, #0
 8012762:	4299      	cmp	r1, r3
 8012764:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8012768:	d063      	beq.n	8012832 <uxr_read_framed_msg+0x2ee>
 801276a:	18e2      	adds	r2, r4, r3
 801276c:	7892      	ldrb	r2, [r2, #2]
 801276e:	2a7d      	cmp	r2, #125	@ 0x7d
 8012770:	f000 8107 	beq.w	8012982 <uxr_read_framed_msg+0x43e>
 8012774:	1c59      	adds	r1, r3, #1
 8012776:	084b      	lsrs	r3, r1, #1
 8012778:	fba6 0303 	umull	r0, r3, r6, r3
 801277c:	089b      	lsrs	r3, r3, #2
 801277e:	202a      	movs	r0, #42	@ 0x2a
 8012780:	fb00 1313 	mls	r3, r0, r3, r1
 8012784:	2a7e      	cmp	r2, #126	@ 0x7e
 8012786:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 801278a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801278e:	d050      	beq.n	8012832 <uxr_read_framed_msg+0x2ee>
 8012790:	2302      	movs	r3, #2
 8012792:	7023      	strb	r3, [r4, #0]
 8012794:	e6e8      	b.n	8012568 <uxr_read_framed_msg+0x24>
 8012796:	f894 e02c 	ldrb.w	lr, [r4, #44]	@ 0x2c
 801279a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801279e:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80127a2:	1c51      	adds	r1, r2, #1
 80127a4:	084b      	lsrs	r3, r1, #1
 80127a6:	fba6 5303 	umull	r5, r3, r6, r3
 80127aa:	089b      	lsrs	r3, r3, #2
 80127ac:	fb0c 1313 	mls	r3, ip, r3, r1
 80127b0:	4596      	cmp	lr, r2
 80127b2:	eb04 0002 	add.w	r0, r4, r2
 80127b6:	b2da      	uxtb	r2, r3
 80127b8:	f43f af06 	beq.w	80125c8 <uxr_read_framed_msg+0x84>
 80127bc:	7883      	ldrb	r3, [r0, #2]
 80127be:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80127c2:	2b7e      	cmp	r3, #126	@ 0x7e
 80127c4:	d1ed      	bne.n	80127a2 <uxr_read_framed_msg+0x25e>
 80127c6:	2301      	movs	r3, #1
 80127c8:	7023      	strb	r3, [r4, #0]
 80127ca:	e6cd      	b.n	8012568 <uxr_read_framed_msg+0x24>
 80127cc:	f101 0b01 	add.w	fp, r1, #1
 80127d0:	ea4f 025b 	mov.w	r2, fp, lsr #1
 80127d4:	fba6 e202 	umull	lr, r2, r6, r2
 80127d8:	3102      	adds	r1, #2
 80127da:	0892      	lsrs	r2, r2, #2
 80127dc:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 80127e0:	fb0c b212 	mls	r2, ip, r2, fp
 80127e4:	fba6 9e0e 	umull	r9, lr, r6, lr
 80127e8:	eb04 0b02 	add.w	fp, r4, r2
 80127ec:	b2d2      	uxtb	r2, r2
 80127ee:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 80127f2:	4290      	cmp	r0, r2
 80127f4:	fb0c 111e 	mls	r1, ip, lr, r1
 80127f8:	f43f af40 	beq.w	801267c <uxr_read_framed_msg+0x138>
 80127fc:	f89b e002 	ldrb.w	lr, [fp, #2]
 8012800:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8012804:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 8012808:	d036      	beq.n	8012878 <uxr_read_framed_msg+0x334>
 801280a:	f08e 0e20 	eor.w	lr, lr, #32
 801280e:	e711      	b.n	8012634 <uxr_read_framed_msg+0xf0>
 8012810:	2301      	movs	r3, #1
 8012812:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012814:	4649      	mov	r1, r9
 8012816:	e9cd 2300 	strd	r2, r3, [sp]
 801281a:	4620      	mov	r0, r4
 801281c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801281e:	4652      	mov	r2, sl
 8012820:	f7ff fe0e 	bl	8012440 <uxr_framing_read_transport>
 8012824:	2800      	cmp	r0, #0
 8012826:	f43f aecf 	beq.w	80125c8 <uxr_read_framed_msg+0x84>
 801282a:	7823      	ldrb	r3, [r4, #0]
 801282c:	e69c      	b.n	8012568 <uxr_read_framed_msg+0x24>
 801282e:	2302      	movs	r3, #2
 8012830:	e7ef      	b.n	8012812 <uxr_read_framed_msg+0x2ce>
 8012832:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012834:	2304      	movs	r3, #4
 8012836:	e9cd 2300 	strd	r2, r3, [sp]
 801283a:	4649      	mov	r1, r9
 801283c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801283e:	4652      	mov	r2, sl
 8012840:	4620      	mov	r0, r4
 8012842:	f7ff fdfd 	bl	8012440 <uxr_framing_read_transport>
 8012846:	2800      	cmp	r0, #0
 8012848:	d1ef      	bne.n	801282a <uxr_read_framed_msg+0x2e6>
 801284a:	f894 002e 	ldrb.w	r0, [r4, #46]	@ 0x2e
 801284e:	387e      	subs	r0, #126	@ 0x7e
 8012850:	bf18      	it	ne
 8012852:	2001      	movne	r0, #1
 8012854:	2800      	cmp	r0, #0
 8012856:	d0e8      	beq.n	801282a <uxr_read_framed_msg+0x2e6>
 8012858:	e6b6      	b.n	80125c8 <uxr_read_framed_msg+0x84>
 801285a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801285c:	2305      	movs	r3, #5
 801285e:	e9cd 5300 	strd	r5, r3, [sp]
 8012862:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012864:	f7ff fdec 	bl	8012440 <uxr_framing_read_transport>
 8012868:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801286c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012870:	429a      	cmp	r2, r3
 8012872:	f43f aea9 	beq.w	80125c8 <uxr_read_framed_msg+0x84>
 8012876:	e673      	b.n	8012560 <uxr_read_framed_msg+0x1c>
 8012878:	429d      	cmp	r5, r3
 801287a:	ee17 9a90 	vmov	r9, s15
 801287e:	f43f af02 	beq.w	8012686 <uxr_read_framed_msg+0x142>
 8012882:	2301      	movs	r3, #1
 8012884:	7023      	strb	r3, [r4, #0]
 8012886:	e66f      	b.n	8012568 <uxr_read_framed_msg+0x24>
 8012888:	2303      	movs	r3, #3
 801288a:	e7c2      	b.n	8012812 <uxr_read_framed_msg+0x2ce>
 801288c:	2305      	movs	r3, #5
 801288e:	7023      	strb	r3, [r4, #0]
 8012890:	e66a      	b.n	8012568 <uxr_read_framed_msg+0x24>
 8012892:	bf00      	nop
 8012894:	30c30c31 	.word	0x30c30c31
 8012898:	0801e100 	.word	0x0801e100
 801289c:	ee17 9a90 	vmov	r9, s15
 80128a0:	f43f aef1 	beq.w	8012686 <uxr_read_framed_msg+0x142>
 80128a4:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 80128a8:	d08d      	beq.n	80127c6 <uxr_read_framed_msg+0x282>
 80128aa:	1aeb      	subs	r3, r5, r3
 80128ac:	3302      	adds	r3, #2
 80128ae:	9301      	str	r3, [sp, #4]
 80128b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128b2:	9300      	str	r3, [sp, #0]
 80128b4:	4652      	mov	r2, sl
 80128b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80128b8:	4649      	mov	r1, r9
 80128ba:	4620      	mov	r0, r4
 80128bc:	f7ff fdc0 	bl	8012440 <uxr_framing_read_transport>
 80128c0:	fab0 f080 	clz	r0, r0
 80128c4:	0940      	lsrs	r0, r0, #5
 80128c6:	2800      	cmp	r0, #0
 80128c8:	d0af      	beq.n	801282a <uxr_read_framed_msg+0x2e6>
 80128ca:	e67d      	b.n	80125c8 <uxr_read_framed_msg+0x84>
 80128cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80128ce:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80128d2:	7013      	strb	r3, [r2, #0]
 80128d4:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80128d6:	b003      	add	sp, #12
 80128d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128dc:	1c59      	adds	r1, r3, #1
 80128de:	084a      	lsrs	r2, r1, #1
 80128e0:	fba6 5202 	umull	r5, r2, r6, r2
 80128e4:	0892      	lsrs	r2, r2, #2
 80128e6:	252a      	movs	r5, #42	@ 0x2a
 80128e8:	fb05 1212 	mls	r2, r5, r2, r1
 80128ec:	b2d1      	uxtb	r1, r2
 80128ee:	4288      	cmp	r0, r1
 80128f0:	d08e      	beq.n	8012810 <uxr_read_framed_msg+0x2cc>
 80128f2:	3302      	adds	r3, #2
 80128f4:	4422      	add	r2, r4
 80128f6:	0858      	lsrs	r0, r3, #1
 80128f8:	fba6 1000 	umull	r1, r0, r6, r0
 80128fc:	7891      	ldrb	r1, [r2, #2]
 80128fe:	0882      	lsrs	r2, r0, #2
 8012900:	fb05 3312 	mls	r3, r5, r2, r3
 8012904:	297e      	cmp	r1, #126	@ 0x7e
 8012906:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801290a:	f000 80a3 	beq.w	8012a54 <uxr_read_framed_msg+0x510>
 801290e:	f081 0120 	eor.w	r1, r1, #32
 8012912:	e64e      	b.n	80125b2 <uxr_read_framed_msg+0x6e>
 8012914:	1c59      	adds	r1, r3, #1
 8012916:	084a      	lsrs	r2, r1, #1
 8012918:	fba6 5202 	umull	r5, r2, r6, r2
 801291c:	0892      	lsrs	r2, r2, #2
 801291e:	252a      	movs	r5, #42	@ 0x2a
 8012920:	fb05 1212 	mls	r2, r5, r2, r1
 8012924:	b2d1      	uxtb	r1, r2
 8012926:	4288      	cmp	r0, r1
 8012928:	d081      	beq.n	801282e <uxr_read_framed_msg+0x2ea>
 801292a:	3302      	adds	r3, #2
 801292c:	4422      	add	r2, r4
 801292e:	0858      	lsrs	r0, r3, #1
 8012930:	fba6 1000 	umull	r1, r0, r6, r0
 8012934:	7891      	ldrb	r1, [r2, #2]
 8012936:	0882      	lsrs	r2, r0, #2
 8012938:	fb05 3312 	mls	r3, r5, r2, r3
 801293c:	297e      	cmp	r1, #126	@ 0x7e
 801293e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012942:	d077      	beq.n	8012a34 <uxr_read_framed_msg+0x4f0>
 8012944:	f081 0120 	eor.w	r1, r1, #32
 8012948:	e65b      	b.n	8012602 <uxr_read_framed_msg+0xbe>
 801294a:	1c59      	adds	r1, r3, #1
 801294c:	084a      	lsrs	r2, r1, #1
 801294e:	fba6 5202 	umull	r5, r2, r6, r2
 8012952:	0892      	lsrs	r2, r2, #2
 8012954:	252a      	movs	r5, #42	@ 0x2a
 8012956:	fb05 1212 	mls	r2, r5, r2, r1
 801295a:	b2d1      	uxtb	r1, r2
 801295c:	4288      	cmp	r0, r1
 801295e:	f43f af57 	beq.w	8012810 <uxr_read_framed_msg+0x2cc>
 8012962:	3302      	adds	r3, #2
 8012964:	4422      	add	r2, r4
 8012966:	0858      	lsrs	r0, r3, #1
 8012968:	fba6 1000 	umull	r1, r0, r6, r0
 801296c:	7891      	ldrb	r1, [r2, #2]
 801296e:	0882      	lsrs	r2, r0, #2
 8012970:	fb05 3312 	mls	r3, r5, r2, r3
 8012974:	297e      	cmp	r1, #126	@ 0x7e
 8012976:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801297a:	d06b      	beq.n	8012a54 <uxr_read_framed_msg+0x510>
 801297c:	f081 0120 	eor.w	r1, r1, #32
 8012980:	e69d      	b.n	80126be <uxr_read_framed_msg+0x17a>
 8012982:	1c5d      	adds	r5, r3, #1
 8012984:	086a      	lsrs	r2, r5, #1
 8012986:	fba6 0202 	umull	r0, r2, r6, r2
 801298a:	0892      	lsrs	r2, r2, #2
 801298c:	202a      	movs	r0, #42	@ 0x2a
 801298e:	fb00 5212 	mls	r2, r0, r2, r5
 8012992:	b2d5      	uxtb	r5, r2
 8012994:	42a9      	cmp	r1, r5
 8012996:	f43f af4c 	beq.w	8012832 <uxr_read_framed_msg+0x2ee>
 801299a:	3302      	adds	r3, #2
 801299c:	4422      	add	r2, r4
 801299e:	0859      	lsrs	r1, r3, #1
 80129a0:	fba6 5101 	umull	r5, r1, r6, r1
 80129a4:	7895      	ldrb	r5, [r2, #2]
 80129a6:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 80129aa:	088a      	lsrs	r2, r1, #2
 80129ac:	fb00 3312 	mls	r3, r0, r2, r3
 80129b0:	2d7e      	cmp	r5, #126	@ 0x7e
 80129b2:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80129b6:	f43f af3c 	beq.w	8012832 <uxr_read_framed_msg+0x2ee>
 80129ba:	f085 0520 	eor.w	r5, r5, #32
 80129be:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
 80129c2:	e6e5      	b.n	8012790 <uxr_read_framed_msg+0x24c>
 80129c4:	1c59      	adds	r1, r3, #1
 80129c6:	084a      	lsrs	r2, r1, #1
 80129c8:	fba6 5202 	umull	r5, r2, r6, r2
 80129cc:	0892      	lsrs	r2, r2, #2
 80129ce:	252a      	movs	r5, #42	@ 0x2a
 80129d0:	fb05 1212 	mls	r2, r5, r2, r1
 80129d4:	b2d1      	uxtb	r1, r2
 80129d6:	4288      	cmp	r0, r1
 80129d8:	f43f af29 	beq.w	801282e <uxr_read_framed_msg+0x2ea>
 80129dc:	3302      	adds	r3, #2
 80129de:	4422      	add	r2, r4
 80129e0:	0858      	lsrs	r0, r3, #1
 80129e2:	fba6 1000 	umull	r1, r0, r6, r0
 80129e6:	7891      	ldrb	r1, [r2, #2]
 80129e8:	0882      	lsrs	r2, r0, #2
 80129ea:	fb05 3312 	mls	r3, r5, r2, r3
 80129ee:	297e      	cmp	r1, #126	@ 0x7e
 80129f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80129f4:	d01e      	beq.n	8012a34 <uxr_read_framed_msg+0x4f0>
 80129f6:	f081 0120 	eor.w	r1, r1, #32
 80129fa:	e689      	b.n	8012710 <uxr_read_framed_msg+0x1cc>
 80129fc:	1c51      	adds	r1, r2, #1
 80129fe:	084b      	lsrs	r3, r1, #1
 8012a00:	fba6 5303 	umull	r5, r3, r6, r3
 8012a04:	089b      	lsrs	r3, r3, #2
 8012a06:	252a      	movs	r5, #42	@ 0x2a
 8012a08:	fb05 1313 	mls	r3, r5, r3, r1
 8012a0c:	b2d9      	uxtb	r1, r3
 8012a0e:	4288      	cmp	r0, r1
 8012a10:	f43f af3a 	beq.w	8012888 <uxr_read_framed_msg+0x344>
 8012a14:	3202      	adds	r2, #2
 8012a16:	4423      	add	r3, r4
 8012a18:	0850      	lsrs	r0, r2, #1
 8012a1a:	789b      	ldrb	r3, [r3, #2]
 8012a1c:	fba6 1000 	umull	r1, r0, r6, r0
 8012a20:	0880      	lsrs	r0, r0, #2
 8012a22:	fb05 2210 	mls	r2, r5, r0, r2
 8012a26:	2b7e      	cmp	r3, #126	@ 0x7e
 8012a28:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012a2c:	d014      	beq.n	8012a58 <uxr_read_framed_msg+0x514>
 8012a2e:	f083 0120 	eor.w	r1, r3, #32
 8012a32:	e68a      	b.n	801274a <uxr_read_framed_msg+0x206>
 8012a34:	2302      	movs	r3, #2
 8012a36:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012a38:	4649      	mov	r1, r9
 8012a3a:	e9cd 2300 	strd	r2, r3, [sp]
 8012a3e:	4620      	mov	r0, r4
 8012a40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012a42:	4652      	mov	r2, sl
 8012a44:	f7ff fcfc 	bl	8012440 <uxr_framing_read_transport>
 8012a48:	2800      	cmp	r0, #0
 8012a4a:	f47f aeee 	bne.w	801282a <uxr_read_framed_msg+0x2e6>
 8012a4e:	2301      	movs	r3, #1
 8012a50:	7023      	strb	r3, [r4, #0]
 8012a52:	e589      	b.n	8012568 <uxr_read_framed_msg+0x24>
 8012a54:	2301      	movs	r3, #1
 8012a56:	e7ee      	b.n	8012a36 <uxr_read_framed_msg+0x4f2>
 8012a58:	2303      	movs	r3, #3
 8012a5a:	e7ec      	b.n	8012a36 <uxr_read_framed_msg+0x4f2>
 8012a5c:	ee17 9a90 	vmov	r9, s15
 8012a60:	e6b1      	b.n	80127c6 <uxr_read_framed_msg+0x282>
 8012a62:	bf00      	nop

08012a64 <uxr_stream_id>:
 8012a64:	b410      	push	{r4}
 8012a66:	2901      	cmp	r1, #1
 8012a68:	b083      	sub	sp, #12
 8012a6a:	d01f      	beq.n	8012aac <uxr_stream_id+0x48>
 8012a6c:	2902      	cmp	r1, #2
 8012a6e:	f04f 0400 	mov.w	r4, #0
 8012a72:	d01e      	beq.n	8012ab2 <uxr_stream_id+0x4e>
 8012a74:	2300      	movs	r3, #0
 8012a76:	f364 0307 	bfi	r3, r4, #0, #8
 8012a7a:	f360 230f 	bfi	r3, r0, #8, #8
 8012a7e:	f361 4317 	bfi	r3, r1, #16, #8
 8012a82:	f362 631f 	bfi	r3, r2, #24, #8
 8012a86:	b2da      	uxtb	r2, r3
 8012a88:	2000      	movs	r0, #0
 8012a8a:	f362 0007 	bfi	r0, r2, #0, #8
 8012a8e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012a92:	f362 200f 	bfi	r0, r2, #8, #8
 8012a96:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012a9a:	f362 4017 	bfi	r0, r2, #16, #8
 8012a9e:	0e1b      	lsrs	r3, r3, #24
 8012aa0:	f363 601f 	bfi	r0, r3, #24, #8
 8012aa4:	b003      	add	sp, #12
 8012aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012aaa:	4770      	bx	lr
 8012aac:	1c44      	adds	r4, r0, #1
 8012aae:	b2e4      	uxtb	r4, r4
 8012ab0:	e7e0      	b.n	8012a74 <uxr_stream_id+0x10>
 8012ab2:	f080 0480 	eor.w	r4, r0, #128	@ 0x80
 8012ab6:	e7dd      	b.n	8012a74 <uxr_stream_id+0x10>

08012ab8 <uxr_stream_id_from_raw>:
 8012ab8:	b410      	push	{r4}
 8012aba:	b083      	sub	sp, #12
 8012abc:	b128      	cbz	r0, 8012aca <uxr_stream_id_from_raw+0x12>
 8012abe:	0603      	lsls	r3, r0, #24
 8012ac0:	d421      	bmi.n	8012b06 <uxr_stream_id_from_raw+0x4e>
 8012ac2:	1e42      	subs	r2, r0, #1
 8012ac4:	b2d2      	uxtb	r2, r2
 8012ac6:	2401      	movs	r4, #1
 8012ac8:	e001      	b.n	8012ace <uxr_stream_id_from_raw+0x16>
 8012aca:	4604      	mov	r4, r0
 8012acc:	4602      	mov	r2, r0
 8012ace:	2300      	movs	r3, #0
 8012ad0:	f360 0307 	bfi	r3, r0, #0, #8
 8012ad4:	f362 230f 	bfi	r3, r2, #8, #8
 8012ad8:	f364 4317 	bfi	r3, r4, #16, #8
 8012adc:	f361 631f 	bfi	r3, r1, #24, #8
 8012ae0:	b2da      	uxtb	r2, r3
 8012ae2:	2000      	movs	r0, #0
 8012ae4:	f362 0007 	bfi	r0, r2, #0, #8
 8012ae8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012aec:	f362 200f 	bfi	r0, r2, #8, #8
 8012af0:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012af4:	f362 4017 	bfi	r0, r2, #16, #8
 8012af8:	0e1b      	lsrs	r3, r3, #24
 8012afa:	f363 601f 	bfi	r0, r3, #24, #8
 8012afe:	b003      	add	sp, #12
 8012b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b04:	4770      	bx	lr
 8012b06:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8012b0a:	2402      	movs	r4, #2
 8012b0c:	e7df      	b.n	8012ace <uxr_stream_id_from_raw+0x16>
 8012b0e:	bf00      	nop

08012b10 <uxr_init_stream_storage>:
 8012b10:	2300      	movs	r3, #0
 8012b12:	7403      	strb	r3, [r0, #16]
 8012b14:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8012b18:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8012b1c:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8012b20:	4770      	bx	lr
 8012b22:	bf00      	nop

08012b24 <uxr_reset_stream_storage>:
 8012b24:	b570      	push	{r4, r5, r6, lr}
 8012b26:	7c03      	ldrb	r3, [r0, #16]
 8012b28:	4604      	mov	r4, r0
 8012b2a:	b153      	cbz	r3, 8012b42 <uxr_reset_stream_storage+0x1e>
 8012b2c:	4606      	mov	r6, r0
 8012b2e:	2500      	movs	r5, #0
 8012b30:	4630      	mov	r0, r6
 8012b32:	f005 fe9d 	bl	8018870 <uxr_reset_output_best_effort_stream>
 8012b36:	7c23      	ldrb	r3, [r4, #16]
 8012b38:	3501      	adds	r5, #1
 8012b3a:	42ab      	cmp	r3, r5
 8012b3c:	f106 0610 	add.w	r6, r6, #16
 8012b40:	d8f6      	bhi.n	8012b30 <uxr_reset_stream_storage+0xc>
 8012b42:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012b46:	b163      	cbz	r3, 8012b62 <uxr_reset_stream_storage+0x3e>
 8012b48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012b4c:	2500      	movs	r5, #0
 8012b4e:	4630      	mov	r0, r6
 8012b50:	f005 fc9a 	bl	8018488 <uxr_reset_input_best_effort_stream>
 8012b54:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012b58:	3501      	adds	r5, #1
 8012b5a:	42ab      	cmp	r3, r5
 8012b5c:	f106 0602 	add.w	r6, r6, #2
 8012b60:	d8f5      	bhi.n	8012b4e <uxr_reset_stream_storage+0x2a>
 8012b62:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012b66:	b163      	cbz	r3, 8012b82 <uxr_reset_stream_storage+0x5e>
 8012b68:	f104 0618 	add.w	r6, r4, #24
 8012b6c:	2500      	movs	r5, #0
 8012b6e:	4630      	mov	r0, r6
 8012b70:	f005 ff1e 	bl	80189b0 <uxr_reset_output_reliable_stream>
 8012b74:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012b78:	3501      	adds	r5, #1
 8012b7a:	42ab      	cmp	r3, r5
 8012b7c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8012b80:	d8f5      	bhi.n	8012b6e <uxr_reset_stream_storage+0x4a>
 8012b82:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012b86:	b163      	cbz	r3, 8012ba2 <uxr_reset_stream_storage+0x7e>
 8012b88:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8012b8c:	2500      	movs	r5, #0
 8012b8e:	4630      	mov	r0, r6
 8012b90:	f005 fce2 	bl	8018558 <uxr_reset_input_reliable_stream>
 8012b94:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012b98:	3501      	adds	r5, #1
 8012b9a:	42ab      	cmp	r3, r5
 8012b9c:	f106 0618 	add.w	r6, r6, #24
 8012ba0:	d8f5      	bhi.n	8012b8e <uxr_reset_stream_storage+0x6a>
 8012ba2:	bd70      	pop	{r4, r5, r6, pc}

08012ba4 <uxr_add_output_best_effort_buffer>:
 8012ba4:	b530      	push	{r4, r5, lr}
 8012ba6:	7c04      	ldrb	r4, [r0, #16]
 8012ba8:	1c65      	adds	r5, r4, #1
 8012baa:	b083      	sub	sp, #12
 8012bac:	7405      	strb	r5, [r0, #16]
 8012bae:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8012bb2:	f005 fe51 	bl	8018858 <uxr_init_output_best_effort_stream>
 8012bb6:	2201      	movs	r2, #1
 8012bb8:	4620      	mov	r0, r4
 8012bba:	4611      	mov	r1, r2
 8012bbc:	b003      	add	sp, #12
 8012bbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012bc2:	f7ff bf4f 	b.w	8012a64 <uxr_stream_id>
 8012bc6:	bf00      	nop

08012bc8 <uxr_add_output_reliable_buffer>:
 8012bc8:	b570      	push	{r4, r5, r6, lr}
 8012bca:	b084      	sub	sp, #16
 8012bcc:	f890 4040 	ldrb.w	r4, [r0, #64]	@ 0x40
 8012bd0:	f89d 6020 	ldrb.w	r6, [sp, #32]
 8012bd4:	9600      	str	r6, [sp, #0]
 8012bd6:	2528      	movs	r5, #40	@ 0x28
 8012bd8:	1c66      	adds	r6, r4, #1
 8012bda:	fb05 0504 	mla	r5, r5, r4, r0
 8012bde:	f880 6040 	strb.w	r6, [r0, #64]	@ 0x40
 8012be2:	f105 0018 	add.w	r0, r5, #24
 8012be6:	f005 feb1 	bl	801894c <uxr_init_output_reliable_stream>
 8012bea:	4620      	mov	r0, r4
 8012bec:	2201      	movs	r2, #1
 8012bee:	2102      	movs	r1, #2
 8012bf0:	b004      	add	sp, #16
 8012bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bf6:	f7ff bf35 	b.w	8012a64 <uxr_stream_id>
 8012bfa:	bf00      	nop

08012bfc <uxr_add_input_best_effort_buffer>:
 8012bfc:	b510      	push	{r4, lr}
 8012bfe:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8012c02:	1c62      	adds	r2, r4, #1
 8012c04:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8012c08:	b082      	sub	sp, #8
 8012c0a:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8012c0e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012c12:	f005 fc35 	bl	8018480 <uxr_init_input_best_effort_stream>
 8012c16:	4620      	mov	r0, r4
 8012c18:	2200      	movs	r2, #0
 8012c1a:	2101      	movs	r1, #1
 8012c1c:	b002      	add	sp, #8
 8012c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c22:	f7ff bf1f 	b.w	8012a64 <uxr_stream_id>
 8012c26:	bf00      	nop

08012c28 <uxr_add_input_reliable_buffer>:
 8012c28:	b570      	push	{r4, r5, r6, lr}
 8012c2a:	b084      	sub	sp, #16
 8012c2c:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 8012c30:	9e08      	ldr	r6, [sp, #32]
 8012c32:	9600      	str	r6, [sp, #0]
 8012c34:	2518      	movs	r5, #24
 8012c36:	1c66      	adds	r6, r4, #1
 8012c38:	fb05 0504 	mla	r5, r5, r4, r0
 8012c3c:	f880 6060 	strb.w	r6, [r0, #96]	@ 0x60
 8012c40:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8012c44:	f005 fc64 	bl	8018510 <uxr_init_input_reliable_stream>
 8012c48:	4620      	mov	r0, r4
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	2102      	movs	r1, #2
 8012c4e:	b004      	add	sp, #16
 8012c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012c54:	f7ff bf06 	b.w	8012a64 <uxr_stream_id>

08012c58 <uxr_get_output_best_effort_stream>:
 8012c58:	7c03      	ldrb	r3, [r0, #16]
 8012c5a:	428b      	cmp	r3, r1
 8012c5c:	bf8c      	ite	hi
 8012c5e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012c62:	2000      	movls	r0, #0
 8012c64:	4770      	bx	lr
 8012c66:	bf00      	nop

08012c68 <uxr_get_output_reliable_stream>:
 8012c68:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012c6c:	428b      	cmp	r3, r1
 8012c6e:	bf83      	ittte	hi
 8012c70:	2328      	movhi	r3, #40	@ 0x28
 8012c72:	fb03 0101 	mlahi	r1, r3, r1, r0
 8012c76:	f101 0018 	addhi.w	r0, r1, #24
 8012c7a:	2000      	movls	r0, #0
 8012c7c:	4770      	bx	lr
 8012c7e:	bf00      	nop

08012c80 <uxr_get_input_best_effort_stream>:
 8012c80:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8012c84:	428b      	cmp	r3, r1
 8012c86:	bf86      	itte	hi
 8012c88:	3121      	addhi	r1, #33	@ 0x21
 8012c8a:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8012c8e:	2000      	movls	r0, #0
 8012c90:	4770      	bx	lr
 8012c92:	bf00      	nop

08012c94 <uxr_get_input_reliable_stream>:
 8012c94:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8012c98:	428b      	cmp	r3, r1
 8012c9a:	bf83      	ittte	hi
 8012c9c:	2318      	movhi	r3, #24
 8012c9e:	fb03 0101 	mlahi	r1, r3, r1, r0
 8012ca2:	f101 0048 	addhi.w	r0, r1, #72	@ 0x48
 8012ca6:	2000      	movls	r0, #0
 8012ca8:	4770      	bx	lr
 8012caa:	bf00      	nop

08012cac <uxr_output_streams_confirmed>:
 8012cac:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8012cb0:	b183      	cbz	r3, 8012cd4 <uxr_output_streams_confirmed+0x28>
 8012cb2:	b570      	push	{r4, r5, r6, lr}
 8012cb4:	4606      	mov	r6, r0
 8012cb6:	f100 0518 	add.w	r5, r0, #24
 8012cba:	2400      	movs	r4, #0
 8012cbc:	e001      	b.n	8012cc2 <uxr_output_streams_confirmed+0x16>
 8012cbe:	3528      	adds	r5, #40	@ 0x28
 8012cc0:	b138      	cbz	r0, 8012cd2 <uxr_output_streams_confirmed+0x26>
 8012cc2:	4628      	mov	r0, r5
 8012cc4:	f006 f8d8 	bl	8018e78 <uxr_is_output_up_to_date>
 8012cc8:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8012ccc:	3401      	adds	r4, #1
 8012cce:	42a3      	cmp	r3, r4
 8012cd0:	d8f5      	bhi.n	8012cbe <uxr_output_streams_confirmed+0x12>
 8012cd2:	bd70      	pop	{r4, r5, r6, pc}
 8012cd4:	2001      	movs	r0, #1
 8012cd6:	4770      	bx	lr

08012cd8 <uxr_buffer_submessage_header>:
 8012cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cda:	4604      	mov	r4, r0
 8012cdc:	460e      	mov	r6, r1
 8012cde:	2104      	movs	r1, #4
 8012ce0:	4615      	mov	r5, r2
 8012ce2:	461f      	mov	r7, r3
 8012ce4:	f7fd fcd6 	bl	8010694 <ucdr_align_to>
 8012ce8:	2301      	movs	r3, #1
 8012cea:	ea47 0203 	orr.w	r2, r7, r3
 8012cee:	4631      	mov	r1, r6
 8012cf0:	7523      	strb	r3, [r4, #20]
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	462b      	mov	r3, r5
 8012cf6:	f000 fa2b 	bl	8013150 <uxr_serialize_submessage_header>
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	f7fd fce0 	bl	80106c0 <ucdr_buffer_remaining>
 8012d00:	42a8      	cmp	r0, r5
 8012d02:	bf34      	ite	cc
 8012d04:	2000      	movcc	r0, #0
 8012d06:	2001      	movcs	r0, #1
 8012d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d0a:	bf00      	nop

08012d0c <uxr_read_submessage_header>:
 8012d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d10:	4604      	mov	r4, r0
 8012d12:	460d      	mov	r5, r1
 8012d14:	2104      	movs	r1, #4
 8012d16:	4616      	mov	r6, r2
 8012d18:	4698      	mov	r8, r3
 8012d1a:	f7fd fcbb 	bl	8010694 <ucdr_align_to>
 8012d1e:	4620      	mov	r0, r4
 8012d20:	f7fd fcce 	bl	80106c0 <ucdr_buffer_remaining>
 8012d24:	2803      	cmp	r0, #3
 8012d26:	bf8c      	ite	hi
 8012d28:	2701      	movhi	r7, #1
 8012d2a:	2700      	movls	r7, #0
 8012d2c:	d802      	bhi.n	8012d34 <uxr_read_submessage_header+0x28>
 8012d2e:	4638      	mov	r0, r7
 8012d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d34:	4633      	mov	r3, r6
 8012d36:	4642      	mov	r2, r8
 8012d38:	4620      	mov	r0, r4
 8012d3a:	4629      	mov	r1, r5
 8012d3c:	f000 fa1c 	bl	8013178 <uxr_deserialize_submessage_header>
 8012d40:	f898 3000 	ldrb.w	r3, [r8]
 8012d44:	f003 02fe 	and.w	r2, r3, #254	@ 0xfe
 8012d48:	f003 0301 	and.w	r3, r3, #1
 8012d4c:	f888 2000 	strb.w	r2, [r8]
 8012d50:	7523      	strb	r3, [r4, #20]
 8012d52:	4638      	mov	r0, r7
 8012d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012d58 <uxr_submessage_padding>:
 8012d58:	f010 0003 	ands.w	r0, r0, #3
 8012d5c:	bf18      	it	ne
 8012d5e:	f1c0 0004 	rsbne	r0, r0, #4
 8012d62:	4770      	bx	lr

08012d64 <uxr_millis>:
 8012d64:	b510      	push	{r4, lr}
 8012d66:	b084      	sub	sp, #16
 8012d68:	4669      	mov	r1, sp
 8012d6a:	2001      	movs	r0, #1
 8012d6c:	f7f0 fa64 	bl	8003238 <clock_gettime>
 8012d70:	e9dd 2400 	ldrd	r2, r4, [sp]
 8012d74:	4907      	ldr	r1, [pc, #28]	@ (8012d94 <uxr_millis+0x30>)
 8012d76:	9802      	ldr	r0, [sp, #8]
 8012d78:	fba2 2301 	umull	r2, r3, r2, r1
 8012d7c:	fb01 3304 	mla	r3, r1, r4, r3
 8012d80:	4604      	mov	r4, r0
 8012d82:	1810      	adds	r0, r2, r0
 8012d84:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8012d88:	4a03      	ldr	r2, [pc, #12]	@ (8012d98 <uxr_millis+0x34>)
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	f7ed ff94 	bl	8000cb8 <__aeabi_ldivmod>
 8012d90:	b004      	add	sp, #16
 8012d92:	bd10      	pop	{r4, pc}
 8012d94:	3b9aca00 	.word	0x3b9aca00
 8012d98:	000f4240 	.word	0x000f4240

08012d9c <uxr_nanos>:
 8012d9c:	b510      	push	{r4, lr}
 8012d9e:	b084      	sub	sp, #16
 8012da0:	4669      	mov	r1, sp
 8012da2:	2001      	movs	r0, #1
 8012da4:	f7f0 fa48 	bl	8003238 <clock_gettime>
 8012da8:	e9dd 2400 	ldrd	r2, r4, [sp]
 8012dac:	4905      	ldr	r1, [pc, #20]	@ (8012dc4 <uxr_nanos+0x28>)
 8012dae:	9802      	ldr	r0, [sp, #8]
 8012db0:	fba2 2301 	umull	r2, r3, r2, r1
 8012db4:	fb01 3304 	mla	r3, r1, r4, r3
 8012db8:	4604      	mov	r4, r0
 8012dba:	1810      	adds	r0, r2, r0
 8012dbc:	eb43 71e4 	adc.w	r1, r3, r4, asr #31
 8012dc0:	b004      	add	sp, #16
 8012dc2:	bd10      	pop	{r4, pc}
 8012dc4:	3b9aca00 	.word	0x3b9aca00

08012dc8 <on_full_output_buffer_fragmented>:
 8012dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dcc:	460c      	mov	r4, r1
 8012dce:	b08a      	sub	sp, #40	@ 0x28
 8012dd0:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8012dd4:	4606      	mov	r6, r0
 8012dd6:	f104 0008 	add.w	r0, r4, #8
 8012dda:	f7ff ff45 	bl	8012c68 <uxr_get_output_reliable_stream>
 8012dde:	4605      	mov	r5, r0
 8012de0:	f006 f854 	bl	8018e8c <get_available_free_slots>
 8012de4:	b968      	cbnz	r0, 8012e02 <on_full_output_buffer_fragmented+0x3a>
 8012de6:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8012dea:	4620      	mov	r0, r4
 8012dec:	4798      	blx	r3
 8012dee:	b918      	cbnz	r0, 8012df8 <on_full_output_buffer_fragmented+0x30>
 8012df0:	2001      	movs	r0, #1
 8012df2:	b00a      	add	sp, #40	@ 0x28
 8012df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012df8:	4628      	mov	r0, r5
 8012dfa:	f006 f847 	bl	8018e8c <get_available_free_slots>
 8012dfe:	2800      	cmp	r0, #0
 8012e00:	d0f6      	beq.n	8012df0 <on_full_output_buffer_fragmented+0x28>
 8012e02:	8928      	ldrh	r0, [r5, #8]
 8012e04:	89eb      	ldrh	r3, [r5, #14]
 8012e06:	7b2a      	ldrb	r2, [r5, #12]
 8012e08:	fbb3 f1f0 	udiv	r1, r3, r0
 8012e0c:	f5c2 427f 	rsb	r2, r2, #65280	@ 0xff00
 8012e10:	fb00 3111 	mls	r1, r0, r1, r3
 8012e14:	b28b      	uxth	r3, r1
 8012e16:	32fc      	adds	r2, #252	@ 0xfc
 8012e18:	6869      	ldr	r1, [r5, #4]
 8012e1a:	fbb1 f1f0 	udiv	r1, r1, r0
 8012e1e:	1f0f      	subs	r7, r1, #4
 8012e20:	f8d4 00c4 	ldr.w	r0, [r4, #196]	@ 0xc4
 8012e24:	fb01 f103 	mul.w	r1, r1, r3
 8012e28:	443a      	add	r2, r7
 8012e2a:	682b      	ldr	r3, [r5, #0]
 8012e2c:	fa1f f882 	uxth.w	r8, r2
 8012e30:	3104      	adds	r1, #4
 8012e32:	4419      	add	r1, r3
 8012e34:	eba0 0008 	sub.w	r0, r0, r8
 8012e38:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 8012e3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e40:	9300      	str	r3, [sp, #0]
 8012e42:	463a      	mov	r2, r7
 8012e44:	2300      	movs	r3, #0
 8012e46:	a802      	add	r0, sp, #8
 8012e48:	f7fd fbf8 	bl	801063c <ucdr_init_buffer_origin_offset>
 8012e4c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8012e50:	f102 0308 	add.w	r3, r2, #8
 8012e54:	42bb      	cmp	r3, r7
 8012e56:	d927      	bls.n	8012ea8 <on_full_output_buffer_fragmented+0xe0>
 8012e58:	4642      	mov	r2, r8
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	210d      	movs	r1, #13
 8012e5e:	a802      	add	r0, sp, #8
 8012e60:	f7ff ff3a 	bl	8012cd8 <uxr_buffer_submessage_header>
 8012e64:	8928      	ldrh	r0, [r5, #8]
 8012e66:	89eb      	ldrh	r3, [r5, #14]
 8012e68:	fbb3 f1f0 	udiv	r1, r3, r0
 8012e6c:	fb00 3111 	mls	r1, r0, r1, r3
 8012e70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012e74:	b289      	uxth	r1, r1
 8012e76:	fbb3 f3f0 	udiv	r3, r3, r0
 8012e7a:	fb03 f301 	mul.w	r3, r3, r1
 8012e7e:	50d7      	str	r7, [r2, r3]
 8012e80:	89e8      	ldrh	r0, [r5, #14]
 8012e82:	2101      	movs	r1, #1
 8012e84:	f006 f822 	bl	8018ecc <uxr_seq_num_add>
 8012e88:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 8012e8c:	81e8      	strh	r0, [r5, #14]
 8012e8e:	1a52      	subs	r2, r2, r1
 8012e90:	4630      	mov	r0, r6
 8012e92:	f7fd fbe5 	bl	8010660 <ucdr_init_buffer>
 8012e96:	4630      	mov	r0, r6
 8012e98:	490f      	ldr	r1, [pc, #60]	@ (8012ed8 <on_full_output_buffer_fragmented+0x110>)
 8012e9a:	4622      	mov	r2, r4
 8012e9c:	f7fd fbb6 	bl	801060c <ucdr_set_on_full_buffer_callback>
 8012ea0:	2000      	movs	r0, #0
 8012ea2:	b00a      	add	sp, #40	@ 0x28
 8012ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ea8:	b292      	uxth	r2, r2
 8012eaa:	2302      	movs	r3, #2
 8012eac:	210d      	movs	r1, #13
 8012eae:	a802      	add	r0, sp, #8
 8012eb0:	f7ff ff12 	bl	8012cd8 <uxr_buffer_submessage_header>
 8012eb4:	8928      	ldrh	r0, [r5, #8]
 8012eb6:	89eb      	ldrh	r3, [r5, #14]
 8012eb8:	fbb3 f2f0 	udiv	r2, r3, r0
 8012ebc:	fb00 3212 	mls	r2, r0, r2, r3
 8012ec0:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
 8012ec4:	686b      	ldr	r3, [r5, #4]
 8012ec6:	fbb3 f3f0 	udiv	r3, r3, r0
 8012eca:	b292      	uxth	r2, r2
 8012ecc:	6828      	ldr	r0, [r5, #0]
 8012ece:	fb03 f302 	mul.w	r3, r3, r2
 8012ed2:	3108      	adds	r1, #8
 8012ed4:	50c1      	str	r1, [r0, r3]
 8012ed6:	e7d3      	b.n	8012e80 <on_full_output_buffer_fragmented+0xb8>
 8012ed8:	08012dc9 	.word	0x08012dc9

08012edc <uxr_prepare_output_stream>:
 8012edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ede:	b087      	sub	sp, #28
 8012ee0:	2407      	movs	r4, #7
 8012ee2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012ee4:	9202      	str	r2, [sp, #8]
 8012ee6:	2500      	movs	r5, #0
 8012ee8:	1d32      	adds	r2, r6, #4
 8012eea:	e9cd 4500 	strd	r4, r5, [sp]
 8012eee:	9103      	str	r1, [sp, #12]
 8012ef0:	461c      	mov	r4, r3
 8012ef2:	4606      	mov	r6, r0
 8012ef4:	f7fe ffce 	bl	8011e94 <uxr_prepare_stream_to_write_submessage>
 8012ef8:	f080 0201 	eor.w	r2, r0, #1
 8012efc:	b2d2      	uxtb	r2, r2
 8012efe:	75a2      	strb	r2, [r4, #22]
 8012f00:	b112      	cbz	r2, 8012f08 <uxr_prepare_output_stream+0x2c>
 8012f02:	4628      	mov	r0, r5
 8012f04:	b007      	add	sp, #28
 8012f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f08:	aa05      	add	r2, sp, #20
 8012f0a:	9902      	ldr	r1, [sp, #8]
 8012f0c:	4630      	mov	r0, r6
 8012f0e:	f7ff f8fb 	bl	8012108 <uxr_init_base_object_request>
 8012f12:	a905      	add	r1, sp, #20
 8012f14:	4605      	mov	r5, r0
 8012f16:	4620      	mov	r0, r4
 8012f18:	f001 f872 	bl	8014000 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012f1c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012f20:	e9d4 6706 	ldrd	r6, r7, [r4, #24]
 8012f24:	1a52      	subs	r2, r2, r1
 8012f26:	4620      	mov	r0, r4
 8012f28:	f7fd fb9a 	bl	8010660 <ucdr_init_buffer>
 8012f2c:	4620      	mov	r0, r4
 8012f2e:	463a      	mov	r2, r7
 8012f30:	4631      	mov	r1, r6
 8012f32:	f7fd fb6b 	bl	801060c <ucdr_set_on_full_buffer_callback>
 8012f36:	4628      	mov	r0, r5
 8012f38:	b007      	add	sp, #28
 8012f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012f3c <uxr_prepare_output_stream_fragmented>:
 8012f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f40:	b093      	sub	sp, #76	@ 0x4c
 8012f42:	4605      	mov	r5, r0
 8012f44:	9107      	str	r1, [sp, #28]
 8012f46:	3008      	adds	r0, #8
 8012f48:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8012f4c:	9303      	str	r3, [sp, #12]
 8012f4e:	9206      	str	r2, [sp, #24]
 8012f50:	f7ff fe8a 	bl	8012c68 <uxr_get_output_reliable_stream>
 8012f54:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012f58:	2b01      	cmp	r3, #1
 8012f5a:	f000 8094 	beq.w	8013086 <uxr_prepare_output_stream_fragmented+0x14a>
 8012f5e:	4604      	mov	r4, r0
 8012f60:	2800      	cmp	r0, #0
 8012f62:	f000 8090 	beq.w	8013086 <uxr_prepare_output_stream_fragmented+0x14a>
 8012f66:	f005 ff91 	bl	8018e8c <get_available_free_slots>
 8012f6a:	2800      	cmp	r0, #0
 8012f6c:	f000 8086 	beq.w	801307c <uxr_prepare_output_stream_fragmented+0x140>
 8012f70:	8922      	ldrh	r2, [r4, #8]
 8012f72:	89e7      	ldrh	r7, [r4, #14]
 8012f74:	fbb7 f8f2 	udiv	r8, r7, r2
 8012f78:	e9d4 3100 	ldrd	r3, r1, [r4]
 8012f7c:	fb02 7818 	mls	r8, r2, r8, r7
 8012f80:	fa1f f888 	uxth.w	r8, r8
 8012f84:	fbb1 f2f2 	udiv	r2, r1, r2
 8012f88:	fb02 f808 	mul.w	r8, r2, r8
 8012f8c:	f108 0804 	add.w	r8, r8, #4
 8012f90:	4498      	add	r8, r3
 8012f92:	7b23      	ldrb	r3, [r4, #12]
 8012f94:	f858 ac04 	ldr.w	sl, [r8, #-4]
 8012f98:	9204      	str	r2, [sp, #16]
 8012f9a:	4553      	cmp	r3, sl
 8012f9c:	f1a2 0b04 	sub.w	fp, r2, #4
 8012fa0:	d37d      	bcc.n	801309e <uxr_prepare_output_stream_fragmented+0x162>
 8012fa2:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012fa4:	f8cd a000 	str.w	sl, [sp]
 8012fa8:	f1ab 0904 	sub.w	r9, fp, #4
 8012fac:	eba9 0903 	sub.w	r9, r9, r3
 8012fb0:	3608      	adds	r6, #8
 8012fb2:	a80a      	add	r0, sp, #40	@ 0x28
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	465a      	mov	r2, fp
 8012fb8:	4641      	mov	r1, r8
 8012fba:	fa1f f989 	uxth.w	r9, r9
 8012fbe:	9605      	str	r6, [sp, #20]
 8012fc0:	f7fd fb3c 	bl	801063c <ucdr_init_buffer_origin_offset>
 8012fc4:	455e      	cmp	r6, fp
 8012fc6:	bf34      	ite	cc
 8012fc8:	2302      	movcc	r3, #2
 8012fca:	2300      	movcs	r3, #0
 8012fcc:	464a      	mov	r2, r9
 8012fce:	210d      	movs	r1, #13
 8012fd0:	a80a      	add	r0, sp, #40	@ 0x28
 8012fd2:	f7ff fe81 	bl	8012cd8 <uxr_buffer_submessage_header>
 8012fd6:	8920      	ldrh	r0, [r4, #8]
 8012fd8:	fbb7 f3f0 	udiv	r3, r7, r0
 8012fdc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8012fe0:	fb00 7313 	mls	r3, r0, r3, r7
 8012fe4:	b29b      	uxth	r3, r3
 8012fe6:	fbb1 f1f0 	udiv	r1, r1, r0
 8012fea:	fb03 f301 	mul.w	r3, r3, r1
 8012fee:	4638      	mov	r0, r7
 8012ff0:	f842 b003 	str.w	fp, [r2, r3]
 8012ff4:	2101      	movs	r1, #1
 8012ff6:	f005 ff69 	bl	8018ecc <uxr_seq_num_add>
 8012ffa:	9b04      	ldr	r3, [sp, #16]
 8012ffc:	9e03      	ldr	r6, [sp, #12]
 8012ffe:	f1a3 0208 	sub.w	r2, r3, #8
 8013002:	f10a 0104 	add.w	r1, sl, #4
 8013006:	4607      	mov	r7, r0
 8013008:	eba2 020a 	sub.w	r2, r2, sl
 801300c:	4441      	add	r1, r8
 801300e:	4630      	mov	r0, r6
 8013010:	f7fd fb26 	bl	8010660 <ucdr_init_buffer>
 8013014:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8013016:	81e7      	strh	r7, [r4, #14]
 8013018:	1d1a      	adds	r2, r3, #4
 801301a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 801301e:	bf28      	it	cs
 8013020:	2200      	movcs	r2, #0
 8013022:	b292      	uxth	r2, r2
 8013024:	2300      	movs	r3, #0
 8013026:	2107      	movs	r1, #7
 8013028:	4630      	mov	r0, r6
 801302a:	f7ff fe55 	bl	8012cd8 <uxr_buffer_submessage_header>
 801302e:	9906      	ldr	r1, [sp, #24]
 8013030:	aa09      	add	r2, sp, #36	@ 0x24
 8013032:	4628      	mov	r0, r5
 8013034:	f7ff f868 	bl	8012108 <uxr_init_base_object_request>
 8013038:	4604      	mov	r4, r0
 801303a:	b328      	cbz	r0, 8013088 <uxr_prepare_output_stream_fragmented+0x14c>
 801303c:	9e03      	ldr	r6, [sp, #12]
 801303e:	a909      	add	r1, sp, #36	@ 0x24
 8013040:	4630      	mov	r0, r6
 8013042:	f000 ffdd 	bl	8014000 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013046:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801304a:	4630      	mov	r0, r6
 801304c:	1a52      	subs	r2, r2, r1
 801304e:	f7fd fb07 	bl	8010660 <ucdr_init_buffer>
 8013052:	9a05      	ldr	r2, [sp, #20]
 8013054:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8013058:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801305a:	9b07      	ldr	r3, [sp, #28]
 801305c:	f8c5 20b8 	str.w	r2, [r5, #184]	@ 0xb8
 8013060:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8013062:	f8c5 20bc 	str.w	r2, [r5, #188]	@ 0xbc
 8013066:	4630      	mov	r0, r6
 8013068:	4919      	ldr	r1, [pc, #100]	@ (80130d0 <uxr_prepare_output_stream_fragmented+0x194>)
 801306a:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801306e:	462a      	mov	r2, r5
 8013070:	f7fd facc 	bl	801060c <ucdr_set_on_full_buffer_callback>
 8013074:	4620      	mov	r0, r4
 8013076:	b013      	add	sp, #76	@ 0x4c
 8013078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801307c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801307e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013080:	4628      	mov	r0, r5
 8013082:	4798      	blx	r3
 8013084:	b920      	cbnz	r0, 8013090 <uxr_prepare_output_stream_fragmented+0x154>
 8013086:	2400      	movs	r4, #0
 8013088:	4620      	mov	r0, r4
 801308a:	b013      	add	sp, #76	@ 0x4c
 801308c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013090:	4620      	mov	r0, r4
 8013092:	f005 fefb 	bl	8018e8c <get_available_free_slots>
 8013096:	2800      	cmp	r0, #0
 8013098:	f47f af6a 	bne.w	8012f70 <uxr_prepare_output_stream_fragmented+0x34>
 801309c:	e7f3      	b.n	8013086 <uxr_prepare_output_stream_fragmented+0x14a>
 801309e:	4638      	mov	r0, r7
 80130a0:	2101      	movs	r1, #1
 80130a2:	f005 ff13 	bl	8018ecc <uxr_seq_num_add>
 80130a6:	8922      	ldrh	r2, [r4, #8]
 80130a8:	fbb0 f8f2 	udiv	r8, r0, r2
 80130ac:	fb02 0818 	mls	r8, r2, r8, r0
 80130b0:	fa1f f888 	uxth.w	r8, r8
 80130b4:	6863      	ldr	r3, [r4, #4]
 80130b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80130ba:	6822      	ldr	r2, [r4, #0]
 80130bc:	fb08 f803 	mul.w	r8, r8, r3
 80130c0:	f108 0804 	add.w	r8, r8, #4
 80130c4:	4490      	add	r8, r2
 80130c6:	7b23      	ldrb	r3, [r4, #12]
 80130c8:	f858 ac04 	ldr.w	sl, [r8, #-4]
 80130cc:	4607      	mov	r7, r0
 80130ce:	e768      	b.n	8012fa2 <uxr_prepare_output_stream_fragmented+0x66>
 80130d0:	08012dc9 	.word	0x08012dc9

080130d4 <uxr_serialize_message_header>:
 80130d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130d6:	b083      	sub	sp, #12
 80130d8:	4616      	mov	r6, r2
 80130da:	4604      	mov	r4, r0
 80130dc:	9301      	str	r3, [sp, #4]
 80130de:	460d      	mov	r5, r1
 80130e0:	9f08      	ldr	r7, [sp, #32]
 80130e2:	f004 fa5d 	bl	80175a0 <ucdr_serialize_uint8_t>
 80130e6:	4631      	mov	r1, r6
 80130e8:	4620      	mov	r0, r4
 80130ea:	f004 fa59 	bl	80175a0 <ucdr_serialize_uint8_t>
 80130ee:	9a01      	ldr	r2, [sp, #4]
 80130f0:	4620      	mov	r0, r4
 80130f2:	2101      	movs	r1, #1
 80130f4:	f004 fb00 	bl	80176f8 <ucdr_serialize_endian_uint16_t>
 80130f8:	062b      	lsls	r3, r5, #24
 80130fa:	d501      	bpl.n	8013100 <uxr_serialize_message_header+0x2c>
 80130fc:	b003      	add	sp, #12
 80130fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013100:	4639      	mov	r1, r7
 8013102:	4620      	mov	r0, r4
 8013104:	2204      	movs	r2, #4
 8013106:	b003      	add	sp, #12
 8013108:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801310c:	f004 b950 	b.w	80173b0 <ucdr_serialize_array_uint8_t>

08013110 <uxr_deserialize_message_header>:
 8013110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013112:	b083      	sub	sp, #12
 8013114:	4616      	mov	r6, r2
 8013116:	4604      	mov	r4, r0
 8013118:	9301      	str	r3, [sp, #4]
 801311a:	460d      	mov	r5, r1
 801311c:	9f08      	ldr	r7, [sp, #32]
 801311e:	f004 fa55 	bl	80175cc <ucdr_deserialize_uint8_t>
 8013122:	4631      	mov	r1, r6
 8013124:	4620      	mov	r0, r4
 8013126:	f004 fa51 	bl	80175cc <ucdr_deserialize_uint8_t>
 801312a:	9a01      	ldr	r2, [sp, #4]
 801312c:	4620      	mov	r0, r4
 801312e:	2101      	movs	r1, #1
 8013130:	f004 fbd6 	bl	80178e0 <ucdr_deserialize_endian_uint16_t>
 8013134:	f995 3000 	ldrsb.w	r3, [r5]
 8013138:	2b00      	cmp	r3, #0
 801313a:	da01      	bge.n	8013140 <uxr_deserialize_message_header+0x30>
 801313c:	b003      	add	sp, #12
 801313e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013140:	4639      	mov	r1, r7
 8013142:	4620      	mov	r0, r4
 8013144:	2204      	movs	r2, #4
 8013146:	b003      	add	sp, #12
 8013148:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801314c:	f004 b994 	b.w	8017478 <ucdr_deserialize_array_uint8_t>

08013150 <uxr_serialize_submessage_header>:
 8013150:	b530      	push	{r4, r5, lr}
 8013152:	b083      	sub	sp, #12
 8013154:	4615      	mov	r5, r2
 8013156:	4604      	mov	r4, r0
 8013158:	9301      	str	r3, [sp, #4]
 801315a:	f004 fa21 	bl	80175a0 <ucdr_serialize_uint8_t>
 801315e:	4629      	mov	r1, r5
 8013160:	4620      	mov	r0, r4
 8013162:	f004 fa1d 	bl	80175a0 <ucdr_serialize_uint8_t>
 8013166:	9a01      	ldr	r2, [sp, #4]
 8013168:	4620      	mov	r0, r4
 801316a:	2101      	movs	r1, #1
 801316c:	b003      	add	sp, #12
 801316e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013172:	f004 bac1 	b.w	80176f8 <ucdr_serialize_endian_uint16_t>
 8013176:	bf00      	nop

08013178 <uxr_deserialize_submessage_header>:
 8013178:	b530      	push	{r4, r5, lr}
 801317a:	b083      	sub	sp, #12
 801317c:	4615      	mov	r5, r2
 801317e:	4604      	mov	r4, r0
 8013180:	9301      	str	r3, [sp, #4]
 8013182:	f004 fa23 	bl	80175cc <ucdr_deserialize_uint8_t>
 8013186:	4629      	mov	r1, r5
 8013188:	4620      	mov	r0, r4
 801318a:	f004 fa1f 	bl	80175cc <ucdr_deserialize_uint8_t>
 801318e:	9a01      	ldr	r2, [sp, #4]
 8013190:	4620      	mov	r0, r4
 8013192:	2101      	movs	r1, #1
 8013194:	b003      	add	sp, #12
 8013196:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801319a:	f004 bba1 	b.w	80178e0 <ucdr_deserialize_endian_uint16_t>
 801319e:	bf00      	nop

080131a0 <uxr_serialize_CLIENT_Representation>:
 80131a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131a4:	2204      	movs	r2, #4
 80131a6:	460c      	mov	r4, r1
 80131a8:	4605      	mov	r5, r0
 80131aa:	f004 f901 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 80131ae:	1d21      	adds	r1, r4, #4
 80131b0:	4607      	mov	r7, r0
 80131b2:	2202      	movs	r2, #2
 80131b4:	4628      	mov	r0, r5
 80131b6:	f004 f8fb 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 80131ba:	1da1      	adds	r1, r4, #6
 80131bc:	4007      	ands	r7, r0
 80131be:	2202      	movs	r2, #2
 80131c0:	4628      	mov	r0, r5
 80131c2:	f004 f8f5 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 80131c6:	fa5f f887 	uxtb.w	r8, r7
 80131ca:	2204      	movs	r2, #4
 80131cc:	4607      	mov	r7, r0
 80131ce:	f104 0108 	add.w	r1, r4, #8
 80131d2:	4628      	mov	r0, r5
 80131d4:	f004 f8ec 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 80131d8:	ea08 0707 	and.w	r7, r8, r7
 80131dc:	7b21      	ldrb	r1, [r4, #12]
 80131de:	4680      	mov	r8, r0
 80131e0:	4628      	mov	r0, r5
 80131e2:	f004 f9dd 	bl	80175a0 <ucdr_serialize_uint8_t>
 80131e6:	ea08 0807 	and.w	r8, r8, r7
 80131ea:	7b61      	ldrb	r1, [r4, #13]
 80131ec:	4607      	mov	r7, r0
 80131ee:	4628      	mov	r0, r5
 80131f0:	f004 f9a6 	bl	8017540 <ucdr_serialize_bool>
 80131f4:	7b63      	ldrb	r3, [r4, #13]
 80131f6:	ea08 0707 	and.w	r7, r8, r7
 80131fa:	ea07 0600 	and.w	r6, r7, r0
 80131fe:	b933      	cbnz	r3, 801320e <uxr_serialize_CLIENT_Representation+0x6e>
 8013200:	8ba1      	ldrh	r1, [r4, #28]
 8013202:	4628      	mov	r0, r5
 8013204:	f004 f9f8 	bl	80175f8 <ucdr_serialize_uint16_t>
 8013208:	4030      	ands	r0, r6
 801320a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801320e:	6921      	ldr	r1, [r4, #16]
 8013210:	4628      	mov	r0, r5
 8013212:	f004 fbdb 	bl	80179cc <ucdr_serialize_uint32_t>
 8013216:	6923      	ldr	r3, [r4, #16]
 8013218:	b1cb      	cbz	r3, 801324e <uxr_serialize_CLIENT_Representation+0xae>
 801321a:	b1d0      	cbz	r0, 8013252 <uxr_serialize_CLIENT_Representation+0xb2>
 801321c:	46a0      	mov	r8, r4
 801321e:	f04f 0900 	mov.w	r9, #0
 8013222:	e002      	b.n	801322a <uxr_serialize_CLIENT_Representation+0x8a>
 8013224:	f108 0808 	add.w	r8, r8, #8
 8013228:	b198      	cbz	r0, 8013252 <uxr_serialize_CLIENT_Representation+0xb2>
 801322a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801322e:	4628      	mov	r0, r5
 8013230:	f005 f90e 	bl	8018450 <ucdr_serialize_string>
 8013234:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8013238:	4607      	mov	r7, r0
 801323a:	4628      	mov	r0, r5
 801323c:	f005 f908 	bl	8018450 <ucdr_serialize_string>
 8013240:	6923      	ldr	r3, [r4, #16]
 8013242:	f109 0901 	add.w	r9, r9, #1
 8013246:	4038      	ands	r0, r7
 8013248:	4599      	cmp	r9, r3
 801324a:	b2c0      	uxtb	r0, r0
 801324c:	d3ea      	bcc.n	8013224 <uxr_serialize_CLIENT_Representation+0x84>
 801324e:	4006      	ands	r6, r0
 8013250:	e7d6      	b.n	8013200 <uxr_serialize_CLIENT_Representation+0x60>
 8013252:	2600      	movs	r6, #0
 8013254:	e7d4      	b.n	8013200 <uxr_serialize_CLIENT_Representation+0x60>
 8013256:	bf00      	nop

08013258 <uxr_deserialize_CLIENT_Representation>:
 8013258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801325c:	2204      	movs	r2, #4
 801325e:	460c      	mov	r4, r1
 8013260:	4605      	mov	r5, r0
 8013262:	f004 f909 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013266:	1d21      	adds	r1, r4, #4
 8013268:	4607      	mov	r7, r0
 801326a:	2202      	movs	r2, #2
 801326c:	4628      	mov	r0, r5
 801326e:	f004 f903 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013272:	1da1      	adds	r1, r4, #6
 8013274:	4007      	ands	r7, r0
 8013276:	2202      	movs	r2, #2
 8013278:	4628      	mov	r0, r5
 801327a:	f004 f8fd 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 801327e:	fa5f f887 	uxtb.w	r8, r7
 8013282:	2204      	movs	r2, #4
 8013284:	4607      	mov	r7, r0
 8013286:	f104 0108 	add.w	r1, r4, #8
 801328a:	4628      	mov	r0, r5
 801328c:	f004 f8f4 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013290:	ea08 0707 	and.w	r7, r8, r7
 8013294:	f104 010c 	add.w	r1, r4, #12
 8013298:	4680      	mov	r8, r0
 801329a:	4628      	mov	r0, r5
 801329c:	f004 f996 	bl	80175cc <ucdr_deserialize_uint8_t>
 80132a0:	ea08 0807 	and.w	r8, r8, r7
 80132a4:	f104 010d 	add.w	r1, r4, #13
 80132a8:	4607      	mov	r7, r0
 80132aa:	4628      	mov	r0, r5
 80132ac:	f004 f95e 	bl	801756c <ucdr_deserialize_bool>
 80132b0:	7b63      	ldrb	r3, [r4, #13]
 80132b2:	ea08 0707 	and.w	r7, r8, r7
 80132b6:	ea07 0600 	and.w	r6, r7, r0
 80132ba:	b93b      	cbnz	r3, 80132cc <uxr_deserialize_CLIENT_Representation+0x74>
 80132bc:	f104 011c 	add.w	r1, r4, #28
 80132c0:	4628      	mov	r0, r5
 80132c2:	f004 fa99 	bl	80177f8 <ucdr_deserialize_uint16_t>
 80132c6:	4030      	ands	r0, r6
 80132c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132cc:	f104 0110 	add.w	r1, r4, #16
 80132d0:	4628      	mov	r0, r5
 80132d2:	f004 fcab 	bl	8017c2c <ucdr_deserialize_uint32_t>
 80132d6:	6923      	ldr	r3, [r4, #16]
 80132d8:	2b01      	cmp	r3, #1
 80132da:	d903      	bls.n	80132e4 <uxr_deserialize_CLIENT_Representation+0x8c>
 80132dc:	2301      	movs	r3, #1
 80132de:	75ab      	strb	r3, [r5, #22]
 80132e0:	2600      	movs	r6, #0
 80132e2:	e7eb      	b.n	80132bc <uxr_deserialize_CLIENT_Representation+0x64>
 80132e4:	b1fb      	cbz	r3, 8013326 <uxr_deserialize_CLIENT_Representation+0xce>
 80132e6:	2800      	cmp	r0, #0
 80132e8:	d0fa      	beq.n	80132e0 <uxr_deserialize_CLIENT_Representation+0x88>
 80132ea:	46a0      	mov	r8, r4
 80132ec:	f04f 0900 	mov.w	r9, #0
 80132f0:	e003      	b.n	80132fa <uxr_deserialize_CLIENT_Representation+0xa2>
 80132f2:	f108 0808 	add.w	r8, r8, #8
 80132f6:	2800      	cmp	r0, #0
 80132f8:	d0f2      	beq.n	80132e0 <uxr_deserialize_CLIENT_Representation+0x88>
 80132fa:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80132fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013302:	4628      	mov	r0, r5
 8013304:	f005 f8b4 	bl	8018470 <ucdr_deserialize_string>
 8013308:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801330c:	4607      	mov	r7, r0
 801330e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013312:	4628      	mov	r0, r5
 8013314:	f005 f8ac 	bl	8018470 <ucdr_deserialize_string>
 8013318:	6923      	ldr	r3, [r4, #16]
 801331a:	f109 0901 	add.w	r9, r9, #1
 801331e:	4038      	ands	r0, r7
 8013320:	4599      	cmp	r9, r3
 8013322:	b2c0      	uxtb	r0, r0
 8013324:	d3e5      	bcc.n	80132f2 <uxr_deserialize_CLIENT_Representation+0x9a>
 8013326:	4006      	ands	r6, r0
 8013328:	e7c8      	b.n	80132bc <uxr_deserialize_CLIENT_Representation+0x64>
 801332a:	bf00      	nop

0801332c <uxr_serialize_AGENT_Representation>:
 801332c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013330:	2204      	movs	r2, #4
 8013332:	460c      	mov	r4, r1
 8013334:	4605      	mov	r5, r0
 8013336:	f004 f83b 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 801333a:	1d21      	adds	r1, r4, #4
 801333c:	4606      	mov	r6, r0
 801333e:	2202      	movs	r2, #2
 8013340:	4628      	mov	r0, r5
 8013342:	f004 f835 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8013346:	1da1      	adds	r1, r4, #6
 8013348:	4006      	ands	r6, r0
 801334a:	2202      	movs	r2, #2
 801334c:	4628      	mov	r0, r5
 801334e:	f004 f82f 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8013352:	b2f6      	uxtb	r6, r6
 8013354:	4603      	mov	r3, r0
 8013356:	7a21      	ldrb	r1, [r4, #8]
 8013358:	4628      	mov	r0, r5
 801335a:	401e      	ands	r6, r3
 801335c:	f004 f8f0 	bl	8017540 <ucdr_serialize_bool>
 8013360:	7a23      	ldrb	r3, [r4, #8]
 8013362:	ea00 0706 	and.w	r7, r0, r6
 8013366:	b913      	cbnz	r3, 801336e <uxr_serialize_AGENT_Representation+0x42>
 8013368:	4638      	mov	r0, r7
 801336a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801336e:	68e1      	ldr	r1, [r4, #12]
 8013370:	4628      	mov	r0, r5
 8013372:	f004 fb2b 	bl	80179cc <ucdr_serialize_uint32_t>
 8013376:	68e3      	ldr	r3, [r4, #12]
 8013378:	b313      	cbz	r3, 80133c0 <uxr_serialize_AGENT_Representation+0x94>
 801337a:	b1e8      	cbz	r0, 80133b8 <uxr_serialize_AGENT_Representation+0x8c>
 801337c:	46a0      	mov	r8, r4
 801337e:	f04f 0900 	mov.w	r9, #0
 8013382:	e002      	b.n	801338a <uxr_serialize_AGENT_Representation+0x5e>
 8013384:	f108 0808 	add.w	r8, r8, #8
 8013388:	b1b3      	cbz	r3, 80133b8 <uxr_serialize_AGENT_Representation+0x8c>
 801338a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801338e:	4628      	mov	r0, r5
 8013390:	f005 f85e 	bl	8018450 <ucdr_serialize_string>
 8013394:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013398:	4606      	mov	r6, r0
 801339a:	4628      	mov	r0, r5
 801339c:	f005 f858 	bl	8018450 <ucdr_serialize_string>
 80133a0:	68e2      	ldr	r2, [r4, #12]
 80133a2:	f109 0901 	add.w	r9, r9, #1
 80133a6:	ea06 0300 	and.w	r3, r6, r0
 80133aa:	4591      	cmp	r9, r2
 80133ac:	b2db      	uxtb	r3, r3
 80133ae:	d3e9      	bcc.n	8013384 <uxr_serialize_AGENT_Representation+0x58>
 80133b0:	401f      	ands	r7, r3
 80133b2:	4638      	mov	r0, r7
 80133b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133b8:	2700      	movs	r7, #0
 80133ba:	4638      	mov	r0, r7
 80133bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133c0:	4007      	ands	r7, r0
 80133c2:	e7d1      	b.n	8013368 <uxr_serialize_AGENT_Representation+0x3c>

080133c4 <uxr_serialize_ObjectVariant.part.0>:
 80133c4:	b570      	push	{r4, r5, r6, lr}
 80133c6:	780b      	ldrb	r3, [r1, #0]
 80133c8:	3b01      	subs	r3, #1
 80133ca:	460c      	mov	r4, r1
 80133cc:	4605      	mov	r5, r0
 80133ce:	2b0d      	cmp	r3, #13
 80133d0:	d869      	bhi.n	80134a6 <uxr_serialize_ObjectVariant.part.0+0xe2>
 80133d2:	e8df f003 	tbb	[pc, r3]
 80133d6:	074a      	.short	0x074a
 80133d8:	07073030 	.word	0x07073030
 80133dc:	21680707 	.word	0x21680707
 80133e0:	45632121 	.word	0x45632121
 80133e4:	7909      	ldrb	r1, [r1, #4]
 80133e6:	f004 f8db 	bl	80175a0 <ucdr_serialize_uint8_t>
 80133ea:	4606      	mov	r6, r0
 80133ec:	b158      	cbz	r0, 8013406 <uxr_serialize_ObjectVariant.part.0+0x42>
 80133ee:	7923      	ldrb	r3, [r4, #4]
 80133f0:	2b02      	cmp	r3, #2
 80133f2:	d003      	beq.n	80133fc <uxr_serialize_ObjectVariant.part.0+0x38>
 80133f4:	2b03      	cmp	r3, #3
 80133f6:	d029      	beq.n	801344c <uxr_serialize_ObjectVariant.part.0+0x88>
 80133f8:	2b01      	cmp	r3, #1
 80133fa:	d104      	bne.n	8013406 <uxr_serialize_ObjectVariant.part.0+0x42>
 80133fc:	68a1      	ldr	r1, [r4, #8]
 80133fe:	4628      	mov	r0, r5
 8013400:	f005 f826 	bl	8018450 <ucdr_serialize_string>
 8013404:	4606      	mov	r6, r0
 8013406:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801340a:	4628      	mov	r0, r5
 801340c:	2202      	movs	r2, #2
 801340e:	f003 ffcf 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8013412:	4030      	ands	r0, r6
 8013414:	b2c0      	uxtb	r0, r0
 8013416:	bd70      	pop	{r4, r5, r6, pc}
 8013418:	7909      	ldrb	r1, [r1, #4]
 801341a:	f004 f8c1 	bl	80175a0 <ucdr_serialize_uint8_t>
 801341e:	b1e8      	cbz	r0, 801345c <uxr_serialize_ObjectVariant.part.0+0x98>
 8013420:	7923      	ldrb	r3, [r4, #4]
 8013422:	2b01      	cmp	r3, #1
 8013424:	d001      	beq.n	801342a <uxr_serialize_ObjectVariant.part.0+0x66>
 8013426:	2b02      	cmp	r3, #2
 8013428:	d13d      	bne.n	80134a6 <uxr_serialize_ObjectVariant.part.0+0xe2>
 801342a:	68a1      	ldr	r1, [r4, #8]
 801342c:	4628      	mov	r0, r5
 801342e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013432:	f005 b80d 	b.w	8018450 <ucdr_serialize_string>
 8013436:	7909      	ldrb	r1, [r1, #4]
 8013438:	f004 f8b2 	bl	80175a0 <ucdr_serialize_uint8_t>
 801343c:	4606      	mov	r6, r0
 801343e:	2800      	cmp	r0, #0
 8013440:	d0e1      	beq.n	8013406 <uxr_serialize_ObjectVariant.part.0+0x42>
 8013442:	7923      	ldrb	r3, [r4, #4]
 8013444:	2b02      	cmp	r3, #2
 8013446:	d0d9      	beq.n	80133fc <uxr_serialize_ObjectVariant.part.0+0x38>
 8013448:	2b03      	cmp	r3, #3
 801344a:	d1dc      	bne.n	8013406 <uxr_serialize_ObjectVariant.part.0+0x42>
 801344c:	68a2      	ldr	r2, [r4, #8]
 801344e:	f104 010c 	add.w	r1, r4, #12
 8013452:	4628      	mov	r0, r5
 8013454:	f7fd f9a0 	bl	8010798 <ucdr_serialize_sequence_uint8_t>
 8013458:	4606      	mov	r6, r0
 801345a:	e7d4      	b.n	8013406 <uxr_serialize_ObjectVariant.part.0+0x42>
 801345c:	2000      	movs	r0, #0
 801345e:	bd70      	pop	{r4, r5, r6, pc}
 8013460:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013464:	3104      	adds	r1, #4
 8013466:	f7ff be9b 	b.w	80131a0 <uxr_serialize_CLIENT_Representation>
 801346a:	7909      	ldrb	r1, [r1, #4]
 801346c:	f004 f898 	bl	80175a0 <ucdr_serialize_uint8_t>
 8013470:	4606      	mov	r6, r0
 8013472:	b158      	cbz	r0, 801348c <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013474:	7923      	ldrb	r3, [r4, #4]
 8013476:	2b02      	cmp	r3, #2
 8013478:	d003      	beq.n	8013482 <uxr_serialize_ObjectVariant.part.0+0xbe>
 801347a:	2b03      	cmp	r3, #3
 801347c:	d015      	beq.n	80134aa <uxr_serialize_ObjectVariant.part.0+0xe6>
 801347e:	2b01      	cmp	r3, #1
 8013480:	d104      	bne.n	801348c <uxr_serialize_ObjectVariant.part.0+0xc8>
 8013482:	68a1      	ldr	r1, [r4, #8]
 8013484:	4628      	mov	r0, r5
 8013486:	f004 ffe3 	bl	8018450 <ucdr_serialize_string>
 801348a:	4606      	mov	r6, r0
 801348c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8013490:	4628      	mov	r0, r5
 8013492:	f004 fdc1 	bl	8018018 <ucdr_serialize_int16_t>
 8013496:	4030      	ands	r0, r6
 8013498:	b2c0      	uxtb	r0, r0
 801349a:	bd70      	pop	{r4, r5, r6, pc}
 801349c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134a0:	3104      	adds	r1, #4
 80134a2:	f7ff bf43 	b.w	801332c <uxr_serialize_AGENT_Representation>
 80134a6:	2001      	movs	r0, #1
 80134a8:	bd70      	pop	{r4, r5, r6, pc}
 80134aa:	68a2      	ldr	r2, [r4, #8]
 80134ac:	f104 010c 	add.w	r1, r4, #12
 80134b0:	4628      	mov	r0, r5
 80134b2:	f7fd f971 	bl	8010798 <ucdr_serialize_sequence_uint8_t>
 80134b6:	4606      	mov	r6, r0
 80134b8:	e7e8      	b.n	801348c <uxr_serialize_ObjectVariant.part.0+0xc8>
 80134ba:	bf00      	nop

080134bc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80134bc:	b570      	push	{r4, r5, r6, lr}
 80134be:	460d      	mov	r5, r1
 80134c0:	7809      	ldrb	r1, [r1, #0]
 80134c2:	4606      	mov	r6, r0
 80134c4:	f004 f83c 	bl	8017540 <ucdr_serialize_bool>
 80134c8:	782b      	ldrb	r3, [r5, #0]
 80134ca:	4604      	mov	r4, r0
 80134cc:	b94b      	cbnz	r3, 80134e2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80134ce:	7a29      	ldrb	r1, [r5, #8]
 80134d0:	4630      	mov	r0, r6
 80134d2:	f004 f835 	bl	8017540 <ucdr_serialize_bool>
 80134d6:	7a2b      	ldrb	r3, [r5, #8]
 80134d8:	4004      	ands	r4, r0
 80134da:	b2e4      	uxtb	r4, r4
 80134dc:	b943      	cbnz	r3, 80134f0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80134de:	4620      	mov	r0, r4
 80134e0:	bd70      	pop	{r4, r5, r6, pc}
 80134e2:	6869      	ldr	r1, [r5, #4]
 80134e4:	4630      	mov	r0, r6
 80134e6:	f004 ffb3 	bl	8018450 <ucdr_serialize_string>
 80134ea:	4004      	ands	r4, r0
 80134ec:	b2e4      	uxtb	r4, r4
 80134ee:	e7ee      	b.n	80134ce <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80134f0:	68e9      	ldr	r1, [r5, #12]
 80134f2:	4630      	mov	r0, r6
 80134f4:	f004 ffac 	bl	8018450 <ucdr_serialize_string>
 80134f8:	4004      	ands	r4, r0
 80134fa:	4620      	mov	r0, r4
 80134fc:	bd70      	pop	{r4, r5, r6, pc}
 80134fe:	bf00      	nop

08013500 <uxr_serialize_OBJK_Topic_Binary>:
 8013500:	b570      	push	{r4, r5, r6, lr}
 8013502:	460d      	mov	r5, r1
 8013504:	6809      	ldr	r1, [r1, #0]
 8013506:	4606      	mov	r6, r0
 8013508:	f004 ffa2 	bl	8018450 <ucdr_serialize_string>
 801350c:	7929      	ldrb	r1, [r5, #4]
 801350e:	4604      	mov	r4, r0
 8013510:	4630      	mov	r0, r6
 8013512:	f004 f815 	bl	8017540 <ucdr_serialize_bool>
 8013516:	792b      	ldrb	r3, [r5, #4]
 8013518:	4004      	ands	r4, r0
 801351a:	b2e4      	uxtb	r4, r4
 801351c:	b943      	cbnz	r3, 8013530 <uxr_serialize_OBJK_Topic_Binary+0x30>
 801351e:	7b29      	ldrb	r1, [r5, #12]
 8013520:	4630      	mov	r0, r6
 8013522:	f004 f80d 	bl	8017540 <ucdr_serialize_bool>
 8013526:	7b2b      	ldrb	r3, [r5, #12]
 8013528:	4004      	ands	r4, r0
 801352a:	b93b      	cbnz	r3, 801353c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 801352c:	4620      	mov	r0, r4
 801352e:	bd70      	pop	{r4, r5, r6, pc}
 8013530:	68a9      	ldr	r1, [r5, #8]
 8013532:	4630      	mov	r0, r6
 8013534:	f004 ff8c 	bl	8018450 <ucdr_serialize_string>
 8013538:	4004      	ands	r4, r0
 801353a:	e7f0      	b.n	801351e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 801353c:	6929      	ldr	r1, [r5, #16]
 801353e:	4630      	mov	r0, r6
 8013540:	f004 ff86 	bl	8018450 <ucdr_serialize_string>
 8013544:	4004      	ands	r4, r0
 8013546:	b2e4      	uxtb	r4, r4
 8013548:	4620      	mov	r0, r4
 801354a:	bd70      	pop	{r4, r5, r6, pc}

0801354c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 801354c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013550:	460c      	mov	r4, r1
 8013552:	7809      	ldrb	r1, [r1, #0]
 8013554:	4606      	mov	r6, r0
 8013556:	f003 fff3 	bl	8017540 <ucdr_serialize_bool>
 801355a:	7823      	ldrb	r3, [r4, #0]
 801355c:	4605      	mov	r5, r0
 801355e:	b96b      	cbnz	r3, 801357c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013560:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013564:	4630      	mov	r0, r6
 8013566:	f003 ffeb 	bl	8017540 <ucdr_serialize_bool>
 801356a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801356e:	4005      	ands	r5, r0
 8013570:	b2ed      	uxtb	r5, r5
 8013572:	2b00      	cmp	r3, #0
 8013574:	d169      	bne.n	801364a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013576:	4628      	mov	r0, r5
 8013578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801357c:	6861      	ldr	r1, [r4, #4]
 801357e:	4630      	mov	r0, r6
 8013580:	f004 fa24 	bl	80179cc <ucdr_serialize_uint32_t>
 8013584:	6863      	ldr	r3, [r4, #4]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d06b      	beq.n	8013662 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 801358a:	2800      	cmp	r0, #0
 801358c:	d067      	beq.n	801365e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801358e:	68a1      	ldr	r1, [r4, #8]
 8013590:	4630      	mov	r0, r6
 8013592:	f004 ff5d 	bl	8018450 <ucdr_serialize_string>
 8013596:	6863      	ldr	r3, [r4, #4]
 8013598:	2b01      	cmp	r3, #1
 801359a:	d953      	bls.n	8013644 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801359c:	2800      	cmp	r0, #0
 801359e:	d05e      	beq.n	801365e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80135a0:	68e1      	ldr	r1, [r4, #12]
 80135a2:	4630      	mov	r0, r6
 80135a4:	f004 ff54 	bl	8018450 <ucdr_serialize_string>
 80135a8:	6863      	ldr	r3, [r4, #4]
 80135aa:	2b02      	cmp	r3, #2
 80135ac:	d94a      	bls.n	8013644 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80135ae:	2800      	cmp	r0, #0
 80135b0:	d055      	beq.n	801365e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80135b2:	6921      	ldr	r1, [r4, #16]
 80135b4:	4630      	mov	r0, r6
 80135b6:	f004 ff4b 	bl	8018450 <ucdr_serialize_string>
 80135ba:	6863      	ldr	r3, [r4, #4]
 80135bc:	2b03      	cmp	r3, #3
 80135be:	d941      	bls.n	8013644 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80135c0:	2800      	cmp	r0, #0
 80135c2:	d04c      	beq.n	801365e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80135c4:	6961      	ldr	r1, [r4, #20]
 80135c6:	4630      	mov	r0, r6
 80135c8:	f004 ff42 	bl	8018450 <ucdr_serialize_string>
 80135cc:	6863      	ldr	r3, [r4, #4]
 80135ce:	2b04      	cmp	r3, #4
 80135d0:	d938      	bls.n	8013644 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80135d2:	2800      	cmp	r0, #0
 80135d4:	d043      	beq.n	801365e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80135d6:	69a1      	ldr	r1, [r4, #24]
 80135d8:	4630      	mov	r0, r6
 80135da:	f004 ff39 	bl	8018450 <ucdr_serialize_string>
 80135de:	6863      	ldr	r3, [r4, #4]
 80135e0:	2b05      	cmp	r3, #5
 80135e2:	d92f      	bls.n	8013644 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80135e4:	2800      	cmp	r0, #0
 80135e6:	d03a      	beq.n	801365e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80135e8:	69e1      	ldr	r1, [r4, #28]
 80135ea:	4630      	mov	r0, r6
 80135ec:	f004 ff30 	bl	8018450 <ucdr_serialize_string>
 80135f0:	6863      	ldr	r3, [r4, #4]
 80135f2:	2b06      	cmp	r3, #6
 80135f4:	d926      	bls.n	8013644 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80135f6:	b390      	cbz	r0, 801365e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80135f8:	6a21      	ldr	r1, [r4, #32]
 80135fa:	4630      	mov	r0, r6
 80135fc:	f004 ff28 	bl	8018450 <ucdr_serialize_string>
 8013600:	6863      	ldr	r3, [r4, #4]
 8013602:	2b07      	cmp	r3, #7
 8013604:	d91e      	bls.n	8013644 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013606:	b350      	cbz	r0, 801365e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013608:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801360a:	4630      	mov	r0, r6
 801360c:	f004 ff20 	bl	8018450 <ucdr_serialize_string>
 8013610:	6863      	ldr	r3, [r4, #4]
 8013612:	2b08      	cmp	r3, #8
 8013614:	d916      	bls.n	8013644 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013616:	b310      	cbz	r0, 801365e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013618:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801361a:	4630      	mov	r0, r6
 801361c:	f004 ff18 	bl	8018450 <ucdr_serialize_string>
 8013620:	6863      	ldr	r3, [r4, #4]
 8013622:	2b09      	cmp	r3, #9
 8013624:	d90e      	bls.n	8013644 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013626:	b1d0      	cbz	r0, 801365e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013628:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801362c:	2709      	movs	r7, #9
 801362e:	e000      	b.n	8013632 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013630:	b1a8      	cbz	r0, 801365e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013632:	f858 1b04 	ldr.w	r1, [r8], #4
 8013636:	4630      	mov	r0, r6
 8013638:	f004 ff0a 	bl	8018450 <ucdr_serialize_string>
 801363c:	6862      	ldr	r2, [r4, #4]
 801363e:	3701      	adds	r7, #1
 8013640:	4297      	cmp	r7, r2
 8013642:	d3f5      	bcc.n	8013630 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013644:	4005      	ands	r5, r0
 8013646:	b2ed      	uxtb	r5, r5
 8013648:	e78a      	b.n	8013560 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801364a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801364c:	4630      	mov	r0, r6
 801364e:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013652:	f7fd f8a1 	bl	8010798 <ucdr_serialize_sequence_uint8_t>
 8013656:	4005      	ands	r5, r0
 8013658:	4628      	mov	r0, r5
 801365a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801365e:	2500      	movs	r5, #0
 8013660:	e77e      	b.n	8013560 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013662:	4028      	ands	r0, r5
 8013664:	b2c5      	uxtb	r5, r0
 8013666:	e77b      	b.n	8013560 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013668 <uxr_serialize_OBJK_Publisher_Binary>:
 8013668:	b570      	push	{r4, r5, r6, lr}
 801366a:	460d      	mov	r5, r1
 801366c:	7809      	ldrb	r1, [r1, #0]
 801366e:	4606      	mov	r6, r0
 8013670:	f003 ff66 	bl	8017540 <ucdr_serialize_bool>
 8013674:	782b      	ldrb	r3, [r5, #0]
 8013676:	4604      	mov	r4, r0
 8013678:	b94b      	cbnz	r3, 801368e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 801367a:	7a29      	ldrb	r1, [r5, #8]
 801367c:	4630      	mov	r0, r6
 801367e:	f003 ff5f 	bl	8017540 <ucdr_serialize_bool>
 8013682:	7a2b      	ldrb	r3, [r5, #8]
 8013684:	4004      	ands	r4, r0
 8013686:	b2e4      	uxtb	r4, r4
 8013688:	b943      	cbnz	r3, 801369c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 801368a:	4620      	mov	r0, r4
 801368c:	bd70      	pop	{r4, r5, r6, pc}
 801368e:	6869      	ldr	r1, [r5, #4]
 8013690:	4630      	mov	r0, r6
 8013692:	f004 fedd 	bl	8018450 <ucdr_serialize_string>
 8013696:	4004      	ands	r4, r0
 8013698:	b2e4      	uxtb	r4, r4
 801369a:	e7ee      	b.n	801367a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 801369c:	f105 010c 	add.w	r1, r5, #12
 80136a0:	4630      	mov	r0, r6
 80136a2:	f7ff ff53 	bl	801354c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80136a6:	4004      	ands	r4, r0
 80136a8:	4620      	mov	r0, r4
 80136aa:	bd70      	pop	{r4, r5, r6, pc}

080136ac <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80136ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136b0:	460c      	mov	r4, r1
 80136b2:	7809      	ldrb	r1, [r1, #0]
 80136b4:	4606      	mov	r6, r0
 80136b6:	f003 ff43 	bl	8017540 <ucdr_serialize_bool>
 80136ba:	7823      	ldrb	r3, [r4, #0]
 80136bc:	4605      	mov	r5, r0
 80136be:	b96b      	cbnz	r3, 80136dc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 80136c0:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80136c4:	4630      	mov	r0, r6
 80136c6:	f003 ff3b 	bl	8017540 <ucdr_serialize_bool>
 80136ca:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80136ce:	4005      	ands	r5, r0
 80136d0:	b2ed      	uxtb	r5, r5
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d169      	bne.n	80137aa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 80136d6:	4628      	mov	r0, r5
 80136d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136dc:	6861      	ldr	r1, [r4, #4]
 80136de:	4630      	mov	r0, r6
 80136e0:	f004 f974 	bl	80179cc <ucdr_serialize_uint32_t>
 80136e4:	6863      	ldr	r3, [r4, #4]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d06b      	beq.n	80137c2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 80136ea:	2800      	cmp	r0, #0
 80136ec:	d067      	beq.n	80137be <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80136ee:	68a1      	ldr	r1, [r4, #8]
 80136f0:	4630      	mov	r0, r6
 80136f2:	f004 fead 	bl	8018450 <ucdr_serialize_string>
 80136f6:	6863      	ldr	r3, [r4, #4]
 80136f8:	2b01      	cmp	r3, #1
 80136fa:	d953      	bls.n	80137a4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80136fc:	2800      	cmp	r0, #0
 80136fe:	d05e      	beq.n	80137be <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013700:	68e1      	ldr	r1, [r4, #12]
 8013702:	4630      	mov	r0, r6
 8013704:	f004 fea4 	bl	8018450 <ucdr_serialize_string>
 8013708:	6863      	ldr	r3, [r4, #4]
 801370a:	2b02      	cmp	r3, #2
 801370c:	d94a      	bls.n	80137a4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801370e:	2800      	cmp	r0, #0
 8013710:	d055      	beq.n	80137be <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013712:	6921      	ldr	r1, [r4, #16]
 8013714:	4630      	mov	r0, r6
 8013716:	f004 fe9b 	bl	8018450 <ucdr_serialize_string>
 801371a:	6863      	ldr	r3, [r4, #4]
 801371c:	2b03      	cmp	r3, #3
 801371e:	d941      	bls.n	80137a4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013720:	2800      	cmp	r0, #0
 8013722:	d04c      	beq.n	80137be <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013724:	6961      	ldr	r1, [r4, #20]
 8013726:	4630      	mov	r0, r6
 8013728:	f004 fe92 	bl	8018450 <ucdr_serialize_string>
 801372c:	6863      	ldr	r3, [r4, #4]
 801372e:	2b04      	cmp	r3, #4
 8013730:	d938      	bls.n	80137a4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013732:	2800      	cmp	r0, #0
 8013734:	d043      	beq.n	80137be <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013736:	69a1      	ldr	r1, [r4, #24]
 8013738:	4630      	mov	r0, r6
 801373a:	f004 fe89 	bl	8018450 <ucdr_serialize_string>
 801373e:	6863      	ldr	r3, [r4, #4]
 8013740:	2b05      	cmp	r3, #5
 8013742:	d92f      	bls.n	80137a4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013744:	2800      	cmp	r0, #0
 8013746:	d03a      	beq.n	80137be <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013748:	69e1      	ldr	r1, [r4, #28]
 801374a:	4630      	mov	r0, r6
 801374c:	f004 fe80 	bl	8018450 <ucdr_serialize_string>
 8013750:	6863      	ldr	r3, [r4, #4]
 8013752:	2b06      	cmp	r3, #6
 8013754:	d926      	bls.n	80137a4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013756:	b390      	cbz	r0, 80137be <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013758:	6a21      	ldr	r1, [r4, #32]
 801375a:	4630      	mov	r0, r6
 801375c:	f004 fe78 	bl	8018450 <ucdr_serialize_string>
 8013760:	6863      	ldr	r3, [r4, #4]
 8013762:	2b07      	cmp	r3, #7
 8013764:	d91e      	bls.n	80137a4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013766:	b350      	cbz	r0, 80137be <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013768:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801376a:	4630      	mov	r0, r6
 801376c:	f004 fe70 	bl	8018450 <ucdr_serialize_string>
 8013770:	6863      	ldr	r3, [r4, #4]
 8013772:	2b08      	cmp	r3, #8
 8013774:	d916      	bls.n	80137a4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013776:	b310      	cbz	r0, 80137be <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013778:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801377a:	4630      	mov	r0, r6
 801377c:	f004 fe68 	bl	8018450 <ucdr_serialize_string>
 8013780:	6863      	ldr	r3, [r4, #4]
 8013782:	2b09      	cmp	r3, #9
 8013784:	d90e      	bls.n	80137a4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013786:	b1d0      	cbz	r0, 80137be <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013788:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 801378c:	2709      	movs	r7, #9
 801378e:	e000      	b.n	8013792 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8013790:	b1a8      	cbz	r0, 80137be <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013792:	f858 1b04 	ldr.w	r1, [r8], #4
 8013796:	4630      	mov	r0, r6
 8013798:	f004 fe5a 	bl	8018450 <ucdr_serialize_string>
 801379c:	6862      	ldr	r2, [r4, #4]
 801379e:	3701      	adds	r7, #1
 80137a0:	4297      	cmp	r7, r2
 80137a2:	d3f5      	bcc.n	8013790 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80137a4:	4005      	ands	r5, r0
 80137a6:	b2ed      	uxtb	r5, r5
 80137a8:	e78a      	b.n	80136c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80137aa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80137ac:	4630      	mov	r0, r6
 80137ae:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80137b2:	f7fc fff1 	bl	8010798 <ucdr_serialize_sequence_uint8_t>
 80137b6:	4005      	ands	r5, r0
 80137b8:	4628      	mov	r0, r5
 80137ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137be:	2500      	movs	r5, #0
 80137c0:	e77e      	b.n	80136c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80137c2:	4028      	ands	r0, r5
 80137c4:	b2c5      	uxtb	r5, r0
 80137c6:	e77b      	b.n	80136c0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080137c8 <uxr_serialize_OBJK_Subscriber_Binary>:
 80137c8:	b570      	push	{r4, r5, r6, lr}
 80137ca:	460d      	mov	r5, r1
 80137cc:	7809      	ldrb	r1, [r1, #0]
 80137ce:	4606      	mov	r6, r0
 80137d0:	f003 feb6 	bl	8017540 <ucdr_serialize_bool>
 80137d4:	782b      	ldrb	r3, [r5, #0]
 80137d6:	4604      	mov	r4, r0
 80137d8:	b94b      	cbnz	r3, 80137ee <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80137da:	7a29      	ldrb	r1, [r5, #8]
 80137dc:	4630      	mov	r0, r6
 80137de:	f003 feaf 	bl	8017540 <ucdr_serialize_bool>
 80137e2:	7a2b      	ldrb	r3, [r5, #8]
 80137e4:	4004      	ands	r4, r0
 80137e6:	b2e4      	uxtb	r4, r4
 80137e8:	b943      	cbnz	r3, 80137fc <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80137ea:	4620      	mov	r0, r4
 80137ec:	bd70      	pop	{r4, r5, r6, pc}
 80137ee:	6869      	ldr	r1, [r5, #4]
 80137f0:	4630      	mov	r0, r6
 80137f2:	f004 fe2d 	bl	8018450 <ucdr_serialize_string>
 80137f6:	4004      	ands	r4, r0
 80137f8:	b2e4      	uxtb	r4, r4
 80137fa:	e7ee      	b.n	80137da <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 80137fc:	f105 010c 	add.w	r1, r5, #12
 8013800:	4630      	mov	r0, r6
 8013802:	f7ff ff53 	bl	80136ac <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8013806:	4004      	ands	r4, r0
 8013808:	4620      	mov	r0, r4
 801380a:	bd70      	pop	{r4, r5, r6, pc}

0801380c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801380c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013810:	4688      	mov	r8, r1
 8013812:	8809      	ldrh	r1, [r1, #0]
 8013814:	4681      	mov	r9, r0
 8013816:	f003 feef 	bl	80175f8 <ucdr_serialize_uint16_t>
 801381a:	f898 1002 	ldrb.w	r1, [r8, #2]
 801381e:	4606      	mov	r6, r0
 8013820:	4648      	mov	r0, r9
 8013822:	f003 fe8d 	bl	8017540 <ucdr_serialize_bool>
 8013826:	f898 3002 	ldrb.w	r3, [r8, #2]
 801382a:	4030      	ands	r0, r6
 801382c:	b2c5      	uxtb	r5, r0
 801382e:	b9eb      	cbnz	r3, 801386c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013830:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013834:	4648      	mov	r0, r9
 8013836:	f003 fe83 	bl	8017540 <ucdr_serialize_bool>
 801383a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801383e:	4005      	ands	r5, r0
 8013840:	bb7b      	cbnz	r3, 80138a2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8013842:	f898 100c 	ldrb.w	r1, [r8, #12]
 8013846:	4648      	mov	r0, r9
 8013848:	f003 fe7a 	bl	8017540 <ucdr_serialize_bool>
 801384c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013850:	4005      	ands	r5, r0
 8013852:	b9f3      	cbnz	r3, 8013892 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8013854:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013858:	4648      	mov	r0, r9
 801385a:	f003 fe71 	bl	8017540 <ucdr_serialize_bool>
 801385e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8013862:	4005      	ands	r5, r0
 8013864:	b94b      	cbnz	r3, 801387a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8013866:	4628      	mov	r0, r5
 8013868:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801386c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013870:	4648      	mov	r0, r9
 8013872:	f003 fec1 	bl	80175f8 <ucdr_serialize_uint16_t>
 8013876:	4005      	ands	r5, r0
 8013878:	e7da      	b.n	8013830 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801387a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801387e:	4648      	mov	r0, r9
 8013880:	f108 011c 	add.w	r1, r8, #28
 8013884:	f7fc ff88 	bl	8010798 <ucdr_serialize_sequence_uint8_t>
 8013888:	4028      	ands	r0, r5
 801388a:	b2c5      	uxtb	r5, r0
 801388c:	4628      	mov	r0, r5
 801388e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013892:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013896:	4648      	mov	r0, r9
 8013898:	f004 f898 	bl	80179cc <ucdr_serialize_uint32_t>
 801389c:	4028      	ands	r0, r5
 801389e:	b2c5      	uxtb	r5, r0
 80138a0:	e7d8      	b.n	8013854 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80138a2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80138a6:	4648      	mov	r0, r9
 80138a8:	f004 f890 	bl	80179cc <ucdr_serialize_uint32_t>
 80138ac:	4028      	ands	r0, r5
 80138ae:	b2c5      	uxtb	r5, r0
 80138b0:	e7c7      	b.n	8013842 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80138b2:	bf00      	nop

080138b4 <uxr_serialize_OBJK_DataReader_Binary>:
 80138b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138b6:	2202      	movs	r2, #2
 80138b8:	460c      	mov	r4, r1
 80138ba:	4606      	mov	r6, r0
 80138bc:	f003 fd78 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 80138c0:	78a1      	ldrb	r1, [r4, #2]
 80138c2:	4605      	mov	r5, r0
 80138c4:	4630      	mov	r0, r6
 80138c6:	f003 fe3b 	bl	8017540 <ucdr_serialize_bool>
 80138ca:	78a3      	ldrb	r3, [r4, #2]
 80138cc:	4005      	ands	r5, r0
 80138ce:	b2ed      	uxtb	r5, r5
 80138d0:	b90b      	cbnz	r3, 80138d6 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80138d2:	4628      	mov	r0, r5
 80138d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138d6:	f104 0108 	add.w	r1, r4, #8
 80138da:	4630      	mov	r0, r6
 80138dc:	f7ff ff96 	bl	801380c <uxr_serialize_OBJK_Endpoint_QosBinary>
 80138e0:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80138e4:	4607      	mov	r7, r0
 80138e6:	4630      	mov	r0, r6
 80138e8:	f003 fe2a 	bl	8017540 <ucdr_serialize_bool>
 80138ec:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80138f0:	4038      	ands	r0, r7
 80138f2:	b2c7      	uxtb	r7, r0
 80138f4:	b95b      	cbnz	r3, 801390e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80138f6:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 80138fa:	4630      	mov	r0, r6
 80138fc:	f003 fe20 	bl	8017540 <ucdr_serialize_bool>
 8013900:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8013904:	4007      	ands	r7, r0
 8013906:	b94b      	cbnz	r3, 801391c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8013908:	403d      	ands	r5, r7
 801390a:	4628      	mov	r0, r5
 801390c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801390e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8013912:	4630      	mov	r0, r6
 8013914:	f004 fab0 	bl	8017e78 <ucdr_serialize_uint64_t>
 8013918:	4007      	ands	r7, r0
 801391a:	e7ec      	b.n	80138f6 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801391c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801391e:	4630      	mov	r0, r6
 8013920:	f004 fd96 	bl	8018450 <ucdr_serialize_string>
 8013924:	4007      	ands	r7, r0
 8013926:	b2ff      	uxtb	r7, r7
 8013928:	e7ee      	b.n	8013908 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801392a:	bf00      	nop

0801392c <uxr_serialize_OBJK_DataWriter_Binary>:
 801392c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801392e:	2202      	movs	r2, #2
 8013930:	460d      	mov	r5, r1
 8013932:	4606      	mov	r6, r0
 8013934:	f003 fd3c 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8013938:	78a9      	ldrb	r1, [r5, #2]
 801393a:	4604      	mov	r4, r0
 801393c:	4630      	mov	r0, r6
 801393e:	f003 fdff 	bl	8017540 <ucdr_serialize_bool>
 8013942:	78ab      	ldrb	r3, [r5, #2]
 8013944:	4004      	ands	r4, r0
 8013946:	b2e4      	uxtb	r4, r4
 8013948:	b90b      	cbnz	r3, 801394e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801394a:	4620      	mov	r0, r4
 801394c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801394e:	f105 0108 	add.w	r1, r5, #8
 8013952:	4630      	mov	r0, r6
 8013954:	f7ff ff5a 	bl	801380c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013958:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801395c:	4607      	mov	r7, r0
 801395e:	4630      	mov	r0, r6
 8013960:	f003 fdee 	bl	8017540 <ucdr_serialize_bool>
 8013964:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013968:	4007      	ands	r7, r0
 801396a:	b2ff      	uxtb	r7, r7
 801396c:	b913      	cbnz	r3, 8013974 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801396e:	403c      	ands	r4, r7
 8013970:	4620      	mov	r0, r4
 8013972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013974:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8013978:	4630      	mov	r0, r6
 801397a:	f004 fa7d 	bl	8017e78 <ucdr_serialize_uint64_t>
 801397e:	4007      	ands	r7, r0
 8013980:	e7f5      	b.n	801396e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8013982:	bf00      	nop

08013984 <uxr_deserialize_ObjectVariant>:
 8013984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013986:	4605      	mov	r5, r0
 8013988:	460e      	mov	r6, r1
 801398a:	f003 fe1f 	bl	80175cc <ucdr_deserialize_uint8_t>
 801398e:	b320      	cbz	r0, 80139da <uxr_deserialize_ObjectVariant+0x56>
 8013990:	7833      	ldrb	r3, [r6, #0]
 8013992:	3b01      	subs	r3, #1
 8013994:	4604      	mov	r4, r0
 8013996:	2b0d      	cmp	r3, #13
 8013998:	d81d      	bhi.n	80139d6 <uxr_deserialize_ObjectVariant+0x52>
 801399a:	e8df f003 	tbb	[pc, r3]
 801399e:	2107      	.short	0x2107
 80139a0:	21214b4b 	.word	0x21214b4b
 80139a4:	381c2121 	.word	0x381c2121
 80139a8:	876a3838 	.word	0x876a3838
 80139ac:	1d31      	adds	r1, r6, #4
 80139ae:	4628      	mov	r0, r5
 80139b0:	f003 fe0c 	bl	80175cc <ucdr_deserialize_uint8_t>
 80139b4:	4607      	mov	r7, r0
 80139b6:	b138      	cbz	r0, 80139c8 <uxr_deserialize_ObjectVariant+0x44>
 80139b8:	7933      	ldrb	r3, [r6, #4]
 80139ba:	2b02      	cmp	r3, #2
 80139bc:	d07c      	beq.n	8013ab8 <uxr_deserialize_ObjectVariant+0x134>
 80139be:	2b03      	cmp	r3, #3
 80139c0:	f000 8082 	beq.w	8013ac8 <uxr_deserialize_ObjectVariant+0x144>
 80139c4:	2b01      	cmp	r3, #1
 80139c6:	d077      	beq.n	8013ab8 <uxr_deserialize_ObjectVariant+0x134>
 80139c8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80139cc:	4628      	mov	r0, r5
 80139ce:	f004 fba3 	bl	8018118 <ucdr_deserialize_int16_t>
 80139d2:	4038      	ands	r0, r7
 80139d4:	b2c4      	uxtb	r4, r0
 80139d6:	4620      	mov	r0, r4
 80139d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139da:	2400      	movs	r4, #0
 80139dc:	4620      	mov	r0, r4
 80139de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139e0:	1d31      	adds	r1, r6, #4
 80139e2:	4628      	mov	r0, r5
 80139e4:	f003 fdf2 	bl	80175cc <ucdr_deserialize_uint8_t>
 80139e8:	4607      	mov	r7, r0
 80139ea:	b130      	cbz	r0, 80139fa <uxr_deserialize_ObjectVariant+0x76>
 80139ec:	7933      	ldrb	r3, [r6, #4]
 80139ee:	2b02      	cmp	r3, #2
 80139f0:	d037      	beq.n	8013a62 <uxr_deserialize_ObjectVariant+0xde>
 80139f2:	2b03      	cmp	r3, #3
 80139f4:	d02a      	beq.n	8013a4c <uxr_deserialize_ObjectVariant+0xc8>
 80139f6:	2b01      	cmp	r3, #1
 80139f8:	d033      	beq.n	8013a62 <uxr_deserialize_ObjectVariant+0xde>
 80139fa:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80139fe:	4628      	mov	r0, r5
 8013a00:	2202      	movs	r2, #2
 8013a02:	f003 fd39 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013a06:	4038      	ands	r0, r7
 8013a08:	b2c4      	uxtb	r4, r0
 8013a0a:	4620      	mov	r0, r4
 8013a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a0e:	1d31      	adds	r1, r6, #4
 8013a10:	4628      	mov	r0, r5
 8013a12:	f003 fddb 	bl	80175cc <ucdr_deserialize_uint8_t>
 8013a16:	2800      	cmp	r0, #0
 8013a18:	d0df      	beq.n	80139da <uxr_deserialize_ObjectVariant+0x56>
 8013a1a:	7933      	ldrb	r3, [r6, #4]
 8013a1c:	2b01      	cmp	r3, #1
 8013a1e:	d001      	beq.n	8013a24 <uxr_deserialize_ObjectVariant+0xa0>
 8013a20:	2b02      	cmp	r3, #2
 8013a22:	d1d8      	bne.n	80139d6 <uxr_deserialize_ObjectVariant+0x52>
 8013a24:	68b1      	ldr	r1, [r6, #8]
 8013a26:	4628      	mov	r0, r5
 8013a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013a30:	f004 bd1e 	b.w	8018470 <ucdr_deserialize_string>
 8013a34:	1d31      	adds	r1, r6, #4
 8013a36:	4628      	mov	r0, r5
 8013a38:	f003 fdc8 	bl	80175cc <ucdr_deserialize_uint8_t>
 8013a3c:	4607      	mov	r7, r0
 8013a3e:	2800      	cmp	r0, #0
 8013a40:	d0db      	beq.n	80139fa <uxr_deserialize_ObjectVariant+0x76>
 8013a42:	7933      	ldrb	r3, [r6, #4]
 8013a44:	2b02      	cmp	r3, #2
 8013a46:	d00c      	beq.n	8013a62 <uxr_deserialize_ObjectVariant+0xde>
 8013a48:	2b03      	cmp	r3, #3
 8013a4a:	d1d6      	bne.n	80139fa <uxr_deserialize_ObjectVariant+0x76>
 8013a4c:	f106 0308 	add.w	r3, r6, #8
 8013a50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a54:	f106 010c 	add.w	r1, r6, #12
 8013a58:	4628      	mov	r0, r5
 8013a5a:	f7fc feaf 	bl	80107bc <ucdr_deserialize_sequence_uint8_t>
 8013a5e:	4607      	mov	r7, r0
 8013a60:	e7cb      	b.n	80139fa <uxr_deserialize_ObjectVariant+0x76>
 8013a62:	68b1      	ldr	r1, [r6, #8]
 8013a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a68:	4628      	mov	r0, r5
 8013a6a:	f004 fd01 	bl	8018470 <ucdr_deserialize_string>
 8013a6e:	4607      	mov	r7, r0
 8013a70:	e7c3      	b.n	80139fa <uxr_deserialize_ObjectVariant+0x76>
 8013a72:	2204      	movs	r2, #4
 8013a74:	18b1      	adds	r1, r6, r2
 8013a76:	4628      	mov	r0, r5
 8013a78:	f003 fcfe 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013a7c:	2202      	movs	r2, #2
 8013a7e:	4604      	mov	r4, r0
 8013a80:	f106 0108 	add.w	r1, r6, #8
 8013a84:	4628      	mov	r0, r5
 8013a86:	f003 fcf7 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013a8a:	2202      	movs	r2, #2
 8013a8c:	4004      	ands	r4, r0
 8013a8e:	f106 010a 	add.w	r1, r6, #10
 8013a92:	4628      	mov	r0, r5
 8013a94:	f003 fcf0 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013a98:	b2e4      	uxtb	r4, r4
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	f106 010c 	add.w	r1, r6, #12
 8013aa0:	4628      	mov	r0, r5
 8013aa2:	401c      	ands	r4, r3
 8013aa4:	f003 fd62 	bl	801756c <ucdr_deserialize_bool>
 8013aa8:	4004      	ands	r4, r0
 8013aaa:	e794      	b.n	80139d6 <uxr_deserialize_ObjectVariant+0x52>
 8013aac:	1d31      	adds	r1, r6, #4
 8013aae:	4628      	mov	r0, r5
 8013ab0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013ab4:	f7ff bbd0 	b.w	8013258 <uxr_deserialize_CLIENT_Representation>
 8013ab8:	68b1      	ldr	r1, [r6, #8]
 8013aba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013abe:	4628      	mov	r0, r5
 8013ac0:	f004 fcd6 	bl	8018470 <ucdr_deserialize_string>
 8013ac4:	4607      	mov	r7, r0
 8013ac6:	e77f      	b.n	80139c8 <uxr_deserialize_ObjectVariant+0x44>
 8013ac8:	f106 0308 	add.w	r3, r6, #8
 8013acc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013ad0:	f106 010c 	add.w	r1, r6, #12
 8013ad4:	4628      	mov	r0, r5
 8013ad6:	f7fc fe71 	bl	80107bc <ucdr_deserialize_sequence_uint8_t>
 8013ada:	4607      	mov	r7, r0
 8013adc:	e774      	b.n	80139c8 <uxr_deserialize_ObjectVariant+0x44>
 8013ade:	bf00      	nop

08013ae0 <uxr_deserialize_BaseObjectRequest>:
 8013ae0:	b570      	push	{r4, r5, r6, lr}
 8013ae2:	2202      	movs	r2, #2
 8013ae4:	4605      	mov	r5, r0
 8013ae6:	460e      	mov	r6, r1
 8013ae8:	f003 fcc6 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013aec:	1cb1      	adds	r1, r6, #2
 8013aee:	4604      	mov	r4, r0
 8013af0:	2202      	movs	r2, #2
 8013af2:	4628      	mov	r0, r5
 8013af4:	f003 fcc0 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013af8:	4020      	ands	r0, r4
 8013afa:	b2c0      	uxtb	r0, r0
 8013afc:	bd70      	pop	{r4, r5, r6, pc}
 8013afe:	bf00      	nop

08013b00 <uxr_serialize_AGENT_ActivityInfo>:
 8013b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b04:	460e      	mov	r6, r1
 8013b06:	f9b1 1000 	ldrsh.w	r1, [r1]
 8013b0a:	4607      	mov	r7, r0
 8013b0c:	f004 fa84 	bl	8018018 <ucdr_serialize_int16_t>
 8013b10:	6871      	ldr	r1, [r6, #4]
 8013b12:	4680      	mov	r8, r0
 8013b14:	4638      	mov	r0, r7
 8013b16:	f003 ff59 	bl	80179cc <ucdr_serialize_uint32_t>
 8013b1a:	6873      	ldr	r3, [r6, #4]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d06a      	beq.n	8013bf6 <uxr_serialize_AGENT_ActivityInfo+0xf6>
 8013b20:	b318      	cbz	r0, 8013b6a <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8013b22:	f106 0904 	add.w	r9, r6, #4
 8013b26:	2500      	movs	r5, #0
 8013b28:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8013b2c:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8013b30:	7a21      	ldrb	r1, [r4, #8]
 8013b32:	4638      	mov	r0, r7
 8013b34:	f003 fd34 	bl	80175a0 <ucdr_serialize_uint8_t>
 8013b38:	2800      	cmp	r0, #0
 8013b3a:	d051      	beq.n	8013be0 <uxr_serialize_AGENT_ActivityInfo+0xe0>
 8013b3c:	7a23      	ldrb	r3, [r4, #8]
 8013b3e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8013b42:	00c9      	lsls	r1, r1, #3
 8013b44:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8013b48:	2b03      	cmp	r3, #3
 8013b4a:	d859      	bhi.n	8013c00 <uxr_serialize_AGENT_ActivityInfo+0x100>
 8013b4c:	e8df f003 	tbb	[pc, r3]
 8013b50:	02122436 	.word	0x02122436
 8013b54:	4449      	add	r1, r9
 8013b56:	4638      	mov	r0, r7
 8013b58:	6889      	ldr	r1, [r1, #8]
 8013b5a:	f004 fc79 	bl	8018450 <ucdr_serialize_string>
 8013b5e:	6873      	ldr	r3, [r6, #4]
 8013b60:	3501      	adds	r5, #1
 8013b62:	429d      	cmp	r5, r3
 8013b64:	d240      	bcs.n	8013be8 <uxr_serialize_AGENT_ActivityInfo+0xe8>
 8013b66:	2800      	cmp	r0, #0
 8013b68:	d1de      	bne.n	8013b28 <uxr_serialize_AGENT_ActivityInfo+0x28>
 8013b6a:	f04f 0800 	mov.w	r8, #0
 8013b6e:	4640      	mov	r0, r8
 8013b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b74:	3108      	adds	r1, #8
 8013b76:	4449      	add	r1, r9
 8013b78:	2210      	movs	r2, #16
 8013b7a:	4638      	mov	r0, r7
 8013b7c:	f003 fc18 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8013b80:	44aa      	add	sl, r5
 8013b82:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8013b86:	4604      	mov	r4, r0
 8013b88:	f8da 101c 	ldr.w	r1, [sl, #28]
 8013b8c:	4638      	mov	r0, r7
 8013b8e:	f003 ff1d 	bl	80179cc <ucdr_serialize_uint32_t>
 8013b92:	4020      	ands	r0, r4
 8013b94:	b2c0      	uxtb	r0, r0
 8013b96:	e7e2      	b.n	8013b5e <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8013b98:	3108      	adds	r1, #8
 8013b9a:	4449      	add	r1, r9
 8013b9c:	2204      	movs	r2, #4
 8013b9e:	4638      	mov	r0, r7
 8013ba0:	f003 fc06 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8013ba4:	44aa      	add	sl, r5
 8013ba6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8013baa:	4604      	mov	r4, r0
 8013bac:	f8ba 1010 	ldrh.w	r1, [sl, #16]
 8013bb0:	4638      	mov	r0, r7
 8013bb2:	f003 fd21 	bl	80175f8 <ucdr_serialize_uint16_t>
 8013bb6:	4020      	ands	r0, r4
 8013bb8:	b2c0      	uxtb	r0, r0
 8013bba:	e7d0      	b.n	8013b5e <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8013bbc:	3108      	adds	r1, #8
 8013bbe:	4449      	add	r1, r9
 8013bc0:	2202      	movs	r2, #2
 8013bc2:	4638      	mov	r0, r7
 8013bc4:	f003 fbf4 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8013bc8:	44aa      	add	sl, r5
 8013bca:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8013bce:	4604      	mov	r4, r0
 8013bd0:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8013bd4:	4638      	mov	r0, r7
 8013bd6:	f003 fce3 	bl	80175a0 <ucdr_serialize_uint8_t>
 8013bda:	4020      	ands	r0, r4
 8013bdc:	b2c0      	uxtb	r0, r0
 8013bde:	e7be      	b.n	8013b5e <uxr_serialize_AGENT_ActivityInfo+0x5e>
 8013be0:	6873      	ldr	r3, [r6, #4]
 8013be2:	3501      	adds	r5, #1
 8013be4:	429d      	cmp	r5, r3
 8013be6:	d3c0      	bcc.n	8013b6a <uxr_serialize_AGENT_ActivityInfo+0x6a>
 8013be8:	ea08 0000 	and.w	r0, r8, r0
 8013bec:	fa5f f880 	uxtb.w	r8, r0
 8013bf0:	4640      	mov	r0, r8
 8013bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bf6:	ea08 0800 	and.w	r8, r8, r0
 8013bfa:	fa5f f888 	uxtb.w	r8, r8
 8013bfe:	e7b6      	b.n	8013b6e <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8013c00:	6873      	ldr	r3, [r6, #4]
 8013c02:	3501      	adds	r5, #1
 8013c04:	42ab      	cmp	r3, r5
 8013c06:	f104 0418 	add.w	r4, r4, #24
 8013c0a:	d891      	bhi.n	8013b30 <uxr_serialize_AGENT_ActivityInfo+0x30>
 8013c0c:	e7af      	b.n	8013b6e <uxr_serialize_AGENT_ActivityInfo+0x6e>
 8013c0e:	bf00      	nop

08013c10 <uxr_serialize_ActivityInfoVariant>:
 8013c10:	b570      	push	{r4, r5, r6, lr}
 8013c12:	460d      	mov	r5, r1
 8013c14:	7809      	ldrb	r1, [r1, #0]
 8013c16:	4606      	mov	r6, r0
 8013c18:	f003 fcc2 	bl	80175a0 <ucdr_serialize_uint8_t>
 8013c1c:	b130      	cbz	r0, 8013c2c <uxr_serialize_ActivityInfoVariant+0x1c>
 8013c1e:	782b      	ldrb	r3, [r5, #0]
 8013c20:	2b06      	cmp	r3, #6
 8013c22:	d019      	beq.n	8013c58 <uxr_serialize_ActivityInfoVariant+0x48>
 8013c24:	2b0d      	cmp	r3, #13
 8013c26:	d010      	beq.n	8013c4a <uxr_serialize_ActivityInfoVariant+0x3a>
 8013c28:	2b05      	cmp	r3, #5
 8013c2a:	d000      	beq.n	8013c2e <uxr_serialize_ActivityInfoVariant+0x1e>
 8013c2c:	bd70      	pop	{r4, r5, r6, pc}
 8013c2e:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013c32:	4630      	mov	r0, r6
 8013c34:	f004 f9f0 	bl	8018018 <ucdr_serialize_int16_t>
 8013c38:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013c3c:	4604      	mov	r4, r0
 8013c3e:	4630      	mov	r0, r6
 8013c40:	f004 f91a 	bl	8017e78 <ucdr_serialize_uint64_t>
 8013c44:	4020      	ands	r0, r4
 8013c46:	b2c0      	uxtb	r0, r0
 8013c48:	bd70      	pop	{r4, r5, r6, pc}
 8013c4a:	f105 0108 	add.w	r1, r5, #8
 8013c4e:	4630      	mov	r0, r6
 8013c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c54:	f7ff bf54 	b.w	8013b00 <uxr_serialize_AGENT_ActivityInfo>
 8013c58:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013c5c:	4630      	mov	r0, r6
 8013c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c62:	f004 b9d9 	b.w	8018018 <ucdr_serialize_int16_t>
 8013c66:	bf00      	nop

08013c68 <uxr_deserialize_BaseObjectReply>:
 8013c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c6c:	2202      	movs	r2, #2
 8013c6e:	4606      	mov	r6, r0
 8013c70:	460f      	mov	r7, r1
 8013c72:	f003 fc01 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013c76:	2202      	movs	r2, #2
 8013c78:	1cb9      	adds	r1, r7, #2
 8013c7a:	4605      	mov	r5, r0
 8013c7c:	4630      	mov	r0, r6
 8013c7e:	f003 fbfb 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013c82:	1d39      	adds	r1, r7, #4
 8013c84:	4680      	mov	r8, r0
 8013c86:	4630      	mov	r0, r6
 8013c88:	f003 fca0 	bl	80175cc <ucdr_deserialize_uint8_t>
 8013c8c:	1d79      	adds	r1, r7, #5
 8013c8e:	4604      	mov	r4, r0
 8013c90:	4630      	mov	r0, r6
 8013c92:	f003 fc9b 	bl	80175cc <ucdr_deserialize_uint8_t>
 8013c96:	ea05 0508 	and.w	r5, r5, r8
 8013c9a:	402c      	ands	r4, r5
 8013c9c:	4020      	ands	r0, r4
 8013c9e:	b2c0      	uxtb	r0, r0
 8013ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013ca4 <uxr_serialize_ReadSpecification>:
 8013ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ca8:	460e      	mov	r6, r1
 8013caa:	7809      	ldrb	r1, [r1, #0]
 8013cac:	4607      	mov	r7, r0
 8013cae:	f003 fc77 	bl	80175a0 <ucdr_serialize_uint8_t>
 8013cb2:	7871      	ldrb	r1, [r6, #1]
 8013cb4:	4604      	mov	r4, r0
 8013cb6:	4638      	mov	r0, r7
 8013cb8:	f003 fc72 	bl	80175a0 <ucdr_serialize_uint8_t>
 8013cbc:	78b1      	ldrb	r1, [r6, #2]
 8013cbe:	4004      	ands	r4, r0
 8013cc0:	4638      	mov	r0, r7
 8013cc2:	f003 fc3d 	bl	8017540 <ucdr_serialize_bool>
 8013cc6:	78b3      	ldrb	r3, [r6, #2]
 8013cc8:	b2e4      	uxtb	r4, r4
 8013cca:	4004      	ands	r4, r0
 8013ccc:	b94b      	cbnz	r3, 8013ce2 <uxr_serialize_ReadSpecification+0x3e>
 8013cce:	7a31      	ldrb	r1, [r6, #8]
 8013cd0:	4638      	mov	r0, r7
 8013cd2:	f003 fc35 	bl	8017540 <ucdr_serialize_bool>
 8013cd6:	7a33      	ldrb	r3, [r6, #8]
 8013cd8:	4004      	ands	r4, r0
 8013cda:	b943      	cbnz	r3, 8013cee <uxr_serialize_ReadSpecification+0x4a>
 8013cdc:	4620      	mov	r0, r4
 8013cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ce2:	6871      	ldr	r1, [r6, #4]
 8013ce4:	4638      	mov	r0, r7
 8013ce6:	f004 fbb3 	bl	8018450 <ucdr_serialize_string>
 8013cea:	4004      	ands	r4, r0
 8013cec:	e7ef      	b.n	8013cce <uxr_serialize_ReadSpecification+0x2a>
 8013cee:	8971      	ldrh	r1, [r6, #10]
 8013cf0:	4638      	mov	r0, r7
 8013cf2:	f003 fc81 	bl	80175f8 <ucdr_serialize_uint16_t>
 8013cf6:	89b1      	ldrh	r1, [r6, #12]
 8013cf8:	4605      	mov	r5, r0
 8013cfa:	4638      	mov	r0, r7
 8013cfc:	f003 fc7c 	bl	80175f8 <ucdr_serialize_uint16_t>
 8013d00:	89f1      	ldrh	r1, [r6, #14]
 8013d02:	4005      	ands	r5, r0
 8013d04:	4638      	mov	r0, r7
 8013d06:	f003 fc77 	bl	80175f8 <ucdr_serialize_uint16_t>
 8013d0a:	8a31      	ldrh	r1, [r6, #16]
 8013d0c:	4680      	mov	r8, r0
 8013d0e:	4638      	mov	r0, r7
 8013d10:	f003 fc72 	bl	80175f8 <ucdr_serialize_uint16_t>
 8013d14:	b2ed      	uxtb	r5, r5
 8013d16:	4025      	ands	r5, r4
 8013d18:	ea08 0505 	and.w	r5, r8, r5
 8013d1c:	ea00 0405 	and.w	r4, r0, r5
 8013d20:	4620      	mov	r0, r4
 8013d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d26:	bf00      	nop

08013d28 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013d28:	f7ff ba3a 	b.w	80131a0 <uxr_serialize_CLIENT_Representation>

08013d2c <uxr_serialize_CREATE_Payload>:
 8013d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d2e:	2202      	movs	r2, #2
 8013d30:	4606      	mov	r6, r0
 8013d32:	460d      	mov	r5, r1
 8013d34:	f003 fb3c 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8013d38:	1ca9      	adds	r1, r5, #2
 8013d3a:	4604      	mov	r4, r0
 8013d3c:	2202      	movs	r2, #2
 8013d3e:	4630      	mov	r0, r6
 8013d40:	f003 fb36 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8013d44:	7929      	ldrb	r1, [r5, #4]
 8013d46:	4607      	mov	r7, r0
 8013d48:	4630      	mov	r0, r6
 8013d4a:	f003 fc29 	bl	80175a0 <ucdr_serialize_uint8_t>
 8013d4e:	b328      	cbz	r0, 8013d9c <uxr_serialize_CREATE_Payload+0x70>
 8013d50:	792b      	ldrb	r3, [r5, #4]
 8013d52:	403c      	ands	r4, r7
 8013d54:	3b01      	subs	r3, #1
 8013d56:	b2e4      	uxtb	r4, r4
 8013d58:	2b0d      	cmp	r3, #13
 8013d5a:	d81d      	bhi.n	8013d98 <uxr_serialize_CREATE_Payload+0x6c>
 8013d5c:	e8df f003 	tbb	[pc, r3]
 8013d60:	32320753 	.word	0x32320753
 8013d64:	07070707 	.word	0x07070707
 8013d68:	2121211c 	.word	0x2121211c
 8013d6c:	684c      	.short	0x684c
 8013d6e:	7a29      	ldrb	r1, [r5, #8]
 8013d70:	4630      	mov	r0, r6
 8013d72:	f003 fc15 	bl	80175a0 <ucdr_serialize_uint8_t>
 8013d76:	4607      	mov	r7, r0
 8013d78:	b130      	cbz	r0, 8013d88 <uxr_serialize_CREATE_Payload+0x5c>
 8013d7a:	7a2b      	ldrb	r3, [r5, #8]
 8013d7c:	2b02      	cmp	r3, #2
 8013d7e:	d035      	beq.n	8013dec <uxr_serialize_CREATE_Payload+0xc0>
 8013d80:	2b03      	cmp	r3, #3
 8013d82:	d02b      	beq.n	8013ddc <uxr_serialize_CREATE_Payload+0xb0>
 8013d84:	2b01      	cmp	r3, #1
 8013d86:	d031      	beq.n	8013dec <uxr_serialize_CREATE_Payload+0xc0>
 8013d88:	f505 7104 	add.w	r1, r5, #528	@ 0x210
 8013d8c:	4630      	mov	r0, r6
 8013d8e:	2202      	movs	r2, #2
 8013d90:	f003 fb0e 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8013d94:	4038      	ands	r0, r7
 8013d96:	4004      	ands	r4, r0
 8013d98:	4620      	mov	r0, r4
 8013d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d9c:	2400      	movs	r4, #0
 8013d9e:	4620      	mov	r0, r4
 8013da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013da2:	7a29      	ldrb	r1, [r5, #8]
 8013da4:	4630      	mov	r0, r6
 8013da6:	f003 fbfb 	bl	80175a0 <ucdr_serialize_uint8_t>
 8013daa:	2800      	cmp	r0, #0
 8013dac:	d0f6      	beq.n	8013d9c <uxr_serialize_CREATE_Payload+0x70>
 8013dae:	7a2b      	ldrb	r3, [r5, #8]
 8013db0:	2b01      	cmp	r3, #1
 8013db2:	d001      	beq.n	8013db8 <uxr_serialize_CREATE_Payload+0x8c>
 8013db4:	2b02      	cmp	r3, #2
 8013db6:	d1ef      	bne.n	8013d98 <uxr_serialize_CREATE_Payload+0x6c>
 8013db8:	68e9      	ldr	r1, [r5, #12]
 8013dba:	4630      	mov	r0, r6
 8013dbc:	f004 fb48 	bl	8018450 <ucdr_serialize_string>
 8013dc0:	4004      	ands	r4, r0
 8013dc2:	e7e9      	b.n	8013d98 <uxr_serialize_CREATE_Payload+0x6c>
 8013dc4:	7a29      	ldrb	r1, [r5, #8]
 8013dc6:	4630      	mov	r0, r6
 8013dc8:	f003 fbea 	bl	80175a0 <ucdr_serialize_uint8_t>
 8013dcc:	4607      	mov	r7, r0
 8013dce:	2800      	cmp	r0, #0
 8013dd0:	d0da      	beq.n	8013d88 <uxr_serialize_CREATE_Payload+0x5c>
 8013dd2:	7a2b      	ldrb	r3, [r5, #8]
 8013dd4:	2b02      	cmp	r3, #2
 8013dd6:	d009      	beq.n	8013dec <uxr_serialize_CREATE_Payload+0xc0>
 8013dd8:	2b03      	cmp	r3, #3
 8013dda:	d1d5      	bne.n	8013d88 <uxr_serialize_CREATE_Payload+0x5c>
 8013ddc:	68ea      	ldr	r2, [r5, #12]
 8013dde:	f105 0110 	add.w	r1, r5, #16
 8013de2:	4630      	mov	r0, r6
 8013de4:	f7fc fcd8 	bl	8010798 <ucdr_serialize_sequence_uint8_t>
 8013de8:	4607      	mov	r7, r0
 8013dea:	e7cd      	b.n	8013d88 <uxr_serialize_CREATE_Payload+0x5c>
 8013dec:	68e9      	ldr	r1, [r5, #12]
 8013dee:	4630      	mov	r0, r6
 8013df0:	f004 fb2e 	bl	8018450 <ucdr_serialize_string>
 8013df4:	4607      	mov	r7, r0
 8013df6:	e7c7      	b.n	8013d88 <uxr_serialize_CREATE_Payload+0x5c>
 8013df8:	f105 0108 	add.w	r1, r5, #8
 8013dfc:	4630      	mov	r0, r6
 8013dfe:	f7ff fa95 	bl	801332c <uxr_serialize_AGENT_Representation>
 8013e02:	4004      	ands	r4, r0
 8013e04:	e7c8      	b.n	8013d98 <uxr_serialize_CREATE_Payload+0x6c>
 8013e06:	7a29      	ldrb	r1, [r5, #8]
 8013e08:	4630      	mov	r0, r6
 8013e0a:	f003 fbc9 	bl	80175a0 <ucdr_serialize_uint8_t>
 8013e0e:	4607      	mov	r7, r0
 8013e10:	b130      	cbz	r0, 8013e20 <uxr_serialize_CREATE_Payload+0xf4>
 8013e12:	7a2b      	ldrb	r3, [r5, #8]
 8013e14:	2b02      	cmp	r3, #2
 8013e16:	d012      	beq.n	8013e3e <uxr_serialize_CREATE_Payload+0x112>
 8013e18:	2b03      	cmp	r3, #3
 8013e1a:	d016      	beq.n	8013e4a <uxr_serialize_CREATE_Payload+0x11e>
 8013e1c:	2b01      	cmp	r3, #1
 8013e1e:	d00e      	beq.n	8013e3e <uxr_serialize_CREATE_Payload+0x112>
 8013e20:	f9b5 1210 	ldrsh.w	r1, [r5, #528]	@ 0x210
 8013e24:	4630      	mov	r0, r6
 8013e26:	f004 f8f7 	bl	8018018 <ucdr_serialize_int16_t>
 8013e2a:	4038      	ands	r0, r7
 8013e2c:	4004      	ands	r4, r0
 8013e2e:	e7b3      	b.n	8013d98 <uxr_serialize_CREATE_Payload+0x6c>
 8013e30:	f105 0108 	add.w	r1, r5, #8
 8013e34:	4630      	mov	r0, r6
 8013e36:	f7ff f9b3 	bl	80131a0 <uxr_serialize_CLIENT_Representation>
 8013e3a:	4004      	ands	r4, r0
 8013e3c:	e7ac      	b.n	8013d98 <uxr_serialize_CREATE_Payload+0x6c>
 8013e3e:	68e9      	ldr	r1, [r5, #12]
 8013e40:	4630      	mov	r0, r6
 8013e42:	f004 fb05 	bl	8018450 <ucdr_serialize_string>
 8013e46:	4607      	mov	r7, r0
 8013e48:	e7ea      	b.n	8013e20 <uxr_serialize_CREATE_Payload+0xf4>
 8013e4a:	68ea      	ldr	r2, [r5, #12]
 8013e4c:	f105 0110 	add.w	r1, r5, #16
 8013e50:	4630      	mov	r0, r6
 8013e52:	f7fc fca1 	bl	8010798 <ucdr_serialize_sequence_uint8_t>
 8013e56:	4607      	mov	r7, r0
 8013e58:	e7e2      	b.n	8013e20 <uxr_serialize_CREATE_Payload+0xf4>
 8013e5a:	bf00      	nop

08013e5c <uxr_deserialize_GET_INFO_Payload>:
 8013e5c:	b570      	push	{r4, r5, r6, lr}
 8013e5e:	2202      	movs	r2, #2
 8013e60:	4605      	mov	r5, r0
 8013e62:	460e      	mov	r6, r1
 8013e64:	f003 fb08 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013e68:	1cb1      	adds	r1, r6, #2
 8013e6a:	2202      	movs	r2, #2
 8013e6c:	4604      	mov	r4, r0
 8013e6e:	4628      	mov	r0, r5
 8013e70:	f003 fb02 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013e74:	1d31      	adds	r1, r6, #4
 8013e76:	4004      	ands	r4, r0
 8013e78:	4628      	mov	r0, r5
 8013e7a:	f003 fed7 	bl	8017c2c <ucdr_deserialize_uint32_t>
 8013e7e:	b2e4      	uxtb	r4, r4
 8013e80:	4020      	ands	r0, r4
 8013e82:	bd70      	pop	{r4, r5, r6, pc}

08013e84 <uxr_serialize_DELETE_Payload>:
 8013e84:	b570      	push	{r4, r5, r6, lr}
 8013e86:	2202      	movs	r2, #2
 8013e88:	4605      	mov	r5, r0
 8013e8a:	460e      	mov	r6, r1
 8013e8c:	f003 fa90 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8013e90:	1cb1      	adds	r1, r6, #2
 8013e92:	4604      	mov	r4, r0
 8013e94:	2202      	movs	r2, #2
 8013e96:	4628      	mov	r0, r5
 8013e98:	f003 fa8a 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8013e9c:	4020      	ands	r0, r4
 8013e9e:	b2c0      	uxtb	r0, r0
 8013ea0:	bd70      	pop	{r4, r5, r6, pc}
 8013ea2:	bf00      	nop

08013ea4 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ea8:	4606      	mov	r6, r0
 8013eaa:	460f      	mov	r7, r1
 8013eac:	f003 fb8e 	bl	80175cc <ucdr_deserialize_uint8_t>
 8013eb0:	1c79      	adds	r1, r7, #1
 8013eb2:	4605      	mov	r5, r0
 8013eb4:	4630      	mov	r0, r6
 8013eb6:	f003 fb89 	bl	80175cc <ucdr_deserialize_uint8_t>
 8013eba:	1d39      	adds	r1, r7, #4
 8013ebc:	4681      	mov	r9, r0
 8013ebe:	2204      	movs	r2, #4
 8013ec0:	4630      	mov	r0, r6
 8013ec2:	f003 fad9 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013ec6:	f107 0108 	add.w	r1, r7, #8
 8013eca:	4604      	mov	r4, r0
 8013ecc:	2202      	movs	r2, #2
 8013ece:	4630      	mov	r0, r6
 8013ed0:	f003 fad2 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013ed4:	f107 010a 	add.w	r1, r7, #10
 8013ed8:	4680      	mov	r8, r0
 8013eda:	2202      	movs	r2, #2
 8013edc:	4630      	mov	r0, r6
 8013ede:	f003 facb 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013ee2:	ea05 0509 	and.w	r5, r5, r9
 8013ee6:	b2ed      	uxtb	r5, r5
 8013ee8:	402c      	ands	r4, r5
 8013eea:	f107 010c 	add.w	r1, r7, #12
 8013eee:	4605      	mov	r5, r0
 8013ef0:	4630      	mov	r0, r6
 8013ef2:	f003 fb3b 	bl	801756c <ucdr_deserialize_bool>
 8013ef6:	ea08 0404 	and.w	r4, r8, r4
 8013efa:	4025      	ands	r5, r4
 8013efc:	4028      	ands	r0, r5
 8013efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f02:	bf00      	nop

08013f04 <uxr_deserialize_STATUS_Payload>:
 8013f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f08:	2202      	movs	r2, #2
 8013f0a:	4606      	mov	r6, r0
 8013f0c:	460f      	mov	r7, r1
 8013f0e:	f003 fab3 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013f12:	2202      	movs	r2, #2
 8013f14:	1cb9      	adds	r1, r7, #2
 8013f16:	4605      	mov	r5, r0
 8013f18:	4630      	mov	r0, r6
 8013f1a:	f003 faad 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8013f1e:	1d39      	adds	r1, r7, #4
 8013f20:	4680      	mov	r8, r0
 8013f22:	4630      	mov	r0, r6
 8013f24:	f003 fb52 	bl	80175cc <ucdr_deserialize_uint8_t>
 8013f28:	1d79      	adds	r1, r7, #5
 8013f2a:	4604      	mov	r4, r0
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	f003 fb4d 	bl	80175cc <ucdr_deserialize_uint8_t>
 8013f32:	ea05 0508 	and.w	r5, r5, r8
 8013f36:	402c      	ands	r4, r5
 8013f38:	4020      	ands	r0, r4
 8013f3a:	b2c0      	uxtb	r0, r0
 8013f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013f40 <uxr_serialize_INFO_Payload>:
 8013f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f44:	2202      	movs	r2, #2
 8013f46:	460c      	mov	r4, r1
 8013f48:	4605      	mov	r5, r0
 8013f4a:	f003 fa31 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8013f4e:	2202      	movs	r2, #2
 8013f50:	4680      	mov	r8, r0
 8013f52:	1ca1      	adds	r1, r4, #2
 8013f54:	4628      	mov	r0, r5
 8013f56:	f003 fa2b 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8013f5a:	7921      	ldrb	r1, [r4, #4]
 8013f5c:	4607      	mov	r7, r0
 8013f5e:	4628      	mov	r0, r5
 8013f60:	f003 fb1e 	bl	80175a0 <ucdr_serialize_uint8_t>
 8013f64:	7961      	ldrb	r1, [r4, #5]
 8013f66:	4606      	mov	r6, r0
 8013f68:	4628      	mov	r0, r5
 8013f6a:	f003 fb19 	bl	80175a0 <ucdr_serialize_uint8_t>
 8013f6e:	ea08 0807 	and.w	r8, r8, r7
 8013f72:	ea06 0608 	and.w	r6, r6, r8
 8013f76:	4006      	ands	r6, r0
 8013f78:	7a21      	ldrb	r1, [r4, #8]
 8013f7a:	4628      	mov	r0, r5
 8013f7c:	f003 fae0 	bl	8017540 <ucdr_serialize_bool>
 8013f80:	7a23      	ldrb	r3, [r4, #8]
 8013f82:	b2f7      	uxtb	r7, r6
 8013f84:	4606      	mov	r6, r0
 8013f86:	b96b      	cbnz	r3, 8013fa4 <uxr_serialize_INFO_Payload+0x64>
 8013f88:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8013f8c:	4628      	mov	r0, r5
 8013f8e:	f003 fad7 	bl	8017540 <ucdr_serialize_bool>
 8013f92:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8013f96:	4030      	ands	r0, r6
 8013f98:	b2c6      	uxtb	r6, r0
 8013f9a:	b983      	cbnz	r3, 8013fbe <uxr_serialize_INFO_Payload+0x7e>
 8013f9c:	ea06 0007 	and.w	r0, r6, r7
 8013fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fa4:	7b21      	ldrb	r1, [r4, #12]
 8013fa6:	4628      	mov	r0, r5
 8013fa8:	f003 fafa 	bl	80175a0 <ucdr_serialize_uint8_t>
 8013fac:	b188      	cbz	r0, 8013fd2 <uxr_serialize_INFO_Payload+0x92>
 8013fae:	f104 010c 	add.w	r1, r4, #12
 8013fb2:	4628      	mov	r0, r5
 8013fb4:	f7ff fa06 	bl	80133c4 <uxr_serialize_ObjectVariant.part.0>
 8013fb8:	4030      	ands	r0, r6
 8013fba:	b2c6      	uxtb	r6, r0
 8013fbc:	e7e4      	b.n	8013f88 <uxr_serialize_INFO_Payload+0x48>
 8013fbe:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8013fc2:	4628      	mov	r0, r5
 8013fc4:	f7ff fe24 	bl	8013c10 <uxr_serialize_ActivityInfoVariant>
 8013fc8:	4006      	ands	r6, r0
 8013fca:	ea06 0007 	and.w	r0, r6, r7
 8013fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fd2:	4606      	mov	r6, r0
 8013fd4:	e7d8      	b.n	8013f88 <uxr_serialize_INFO_Payload+0x48>
 8013fd6:	bf00      	nop

08013fd8 <uxr_serialize_READ_DATA_Payload>:
 8013fd8:	b570      	push	{r4, r5, r6, lr}
 8013fda:	2202      	movs	r2, #2
 8013fdc:	4605      	mov	r5, r0
 8013fde:	460e      	mov	r6, r1
 8013fe0:	f003 f9e6 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8013fe4:	1cb1      	adds	r1, r6, #2
 8013fe6:	2202      	movs	r2, #2
 8013fe8:	4604      	mov	r4, r0
 8013fea:	4628      	mov	r0, r5
 8013fec:	f003 f9e0 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8013ff0:	1d31      	adds	r1, r6, #4
 8013ff2:	4004      	ands	r4, r0
 8013ff4:	4628      	mov	r0, r5
 8013ff6:	f7ff fe55 	bl	8013ca4 <uxr_serialize_ReadSpecification>
 8013ffa:	b2e4      	uxtb	r4, r4
 8013ffc:	4020      	ands	r0, r4
 8013ffe:	bd70      	pop	{r4, r5, r6, pc}

08014000 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8014000:	b570      	push	{r4, r5, r6, lr}
 8014002:	2202      	movs	r2, #2
 8014004:	4605      	mov	r5, r0
 8014006:	460e      	mov	r6, r1
 8014008:	f003 f9d2 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 801400c:	1cb1      	adds	r1, r6, #2
 801400e:	4604      	mov	r4, r0
 8014010:	2202      	movs	r2, #2
 8014012:	4628      	mov	r0, r5
 8014014:	f003 f9cc 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8014018:	4020      	ands	r0, r4
 801401a:	b2c0      	uxtb	r0, r0
 801401c:	bd70      	pop	{r4, r5, r6, pc}
 801401e:	bf00      	nop

08014020 <uxr_serialize_ACKNACK_Payload>:
 8014020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014022:	460f      	mov	r7, r1
 8014024:	460e      	mov	r6, r1
 8014026:	f837 1b02 	ldrh.w	r1, [r7], #2
 801402a:	4605      	mov	r5, r0
 801402c:	f003 fae4 	bl	80175f8 <ucdr_serialize_uint16_t>
 8014030:	4639      	mov	r1, r7
 8014032:	2202      	movs	r2, #2
 8014034:	4604      	mov	r4, r0
 8014036:	4628      	mov	r0, r5
 8014038:	f003 f9ba 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 801403c:	7931      	ldrb	r1, [r6, #4]
 801403e:	4004      	ands	r4, r0
 8014040:	4628      	mov	r0, r5
 8014042:	f003 faad 	bl	80175a0 <ucdr_serialize_uint8_t>
 8014046:	b2e4      	uxtb	r4, r4
 8014048:	4020      	ands	r0, r4
 801404a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801404c <uxr_deserialize_ACKNACK_Payload>:
 801404c:	b570      	push	{r4, r5, r6, lr}
 801404e:	4605      	mov	r5, r0
 8014050:	460e      	mov	r6, r1
 8014052:	f003 fbd1 	bl	80177f8 <ucdr_deserialize_uint16_t>
 8014056:	1cb1      	adds	r1, r6, #2
 8014058:	2202      	movs	r2, #2
 801405a:	4604      	mov	r4, r0
 801405c:	4628      	mov	r0, r5
 801405e:	f003 fa0b 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8014062:	1d31      	adds	r1, r6, #4
 8014064:	4004      	ands	r4, r0
 8014066:	4628      	mov	r0, r5
 8014068:	f003 fab0 	bl	80175cc <ucdr_deserialize_uint8_t>
 801406c:	b2e4      	uxtb	r4, r4
 801406e:	4020      	ands	r0, r4
 8014070:	bd70      	pop	{r4, r5, r6, pc}
 8014072:	bf00      	nop

08014074 <uxr_serialize_HEARTBEAT_Payload>:
 8014074:	b570      	push	{r4, r5, r6, lr}
 8014076:	460d      	mov	r5, r1
 8014078:	8809      	ldrh	r1, [r1, #0]
 801407a:	4606      	mov	r6, r0
 801407c:	f003 fabc 	bl	80175f8 <ucdr_serialize_uint16_t>
 8014080:	8869      	ldrh	r1, [r5, #2]
 8014082:	4604      	mov	r4, r0
 8014084:	4630      	mov	r0, r6
 8014086:	f003 fab7 	bl	80175f8 <ucdr_serialize_uint16_t>
 801408a:	7929      	ldrb	r1, [r5, #4]
 801408c:	4004      	ands	r4, r0
 801408e:	4630      	mov	r0, r6
 8014090:	f003 fa86 	bl	80175a0 <ucdr_serialize_uint8_t>
 8014094:	b2e4      	uxtb	r4, r4
 8014096:	4020      	ands	r0, r4
 8014098:	bd70      	pop	{r4, r5, r6, pc}
 801409a:	bf00      	nop

0801409c <uxr_deserialize_HEARTBEAT_Payload>:
 801409c:	b570      	push	{r4, r5, r6, lr}
 801409e:	4605      	mov	r5, r0
 80140a0:	460e      	mov	r6, r1
 80140a2:	f003 fba9 	bl	80177f8 <ucdr_deserialize_uint16_t>
 80140a6:	1cb1      	adds	r1, r6, #2
 80140a8:	4604      	mov	r4, r0
 80140aa:	4628      	mov	r0, r5
 80140ac:	f003 fba4 	bl	80177f8 <ucdr_deserialize_uint16_t>
 80140b0:	1d31      	adds	r1, r6, #4
 80140b2:	4004      	ands	r4, r0
 80140b4:	4628      	mov	r0, r5
 80140b6:	f003 fa89 	bl	80175cc <ucdr_deserialize_uint8_t>
 80140ba:	b2e4      	uxtb	r4, r4
 80140bc:	4020      	ands	r0, r4
 80140be:	bd70      	pop	{r4, r5, r6, pc}

080140c0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80140c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140c4:	4605      	mov	r5, r0
 80140c6:	460e      	mov	r6, r1
 80140c8:	f004 f932 	bl	8018330 <ucdr_deserialize_int32_t>
 80140cc:	1d31      	adds	r1, r6, #4
 80140ce:	4607      	mov	r7, r0
 80140d0:	4628      	mov	r0, r5
 80140d2:	f003 fdab 	bl	8017c2c <ucdr_deserialize_uint32_t>
 80140d6:	f106 0108 	add.w	r1, r6, #8
 80140da:	4680      	mov	r8, r0
 80140dc:	4628      	mov	r0, r5
 80140de:	f004 f927 	bl	8018330 <ucdr_deserialize_int32_t>
 80140e2:	f106 010c 	add.w	r1, r6, #12
 80140e6:	4604      	mov	r4, r0
 80140e8:	4628      	mov	r0, r5
 80140ea:	f003 fd9f 	bl	8017c2c <ucdr_deserialize_uint32_t>
 80140ee:	ea07 0708 	and.w	r7, r7, r8
 80140f2:	403c      	ands	r4, r7
 80140f4:	f106 0110 	add.w	r1, r6, #16
 80140f8:	4004      	ands	r4, r0
 80140fa:	4628      	mov	r0, r5
 80140fc:	f004 f918 	bl	8018330 <ucdr_deserialize_int32_t>
 8014100:	f106 0114 	add.w	r1, r6, #20
 8014104:	4603      	mov	r3, r0
 8014106:	4628      	mov	r0, r5
 8014108:	461d      	mov	r5, r3
 801410a:	f003 fd8f 	bl	8017c2c <ucdr_deserialize_uint32_t>
 801410e:	b2e4      	uxtb	r4, r4
 8014110:	402c      	ands	r4, r5
 8014112:	4020      	ands	r0, r4
 8014114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014118 <uxr_serialize_SampleIdentity>:
 8014118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801411c:	220c      	movs	r2, #12
 801411e:	4604      	mov	r4, r0
 8014120:	460d      	mov	r5, r1
 8014122:	f003 f945 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8014126:	2203      	movs	r2, #3
 8014128:	f105 010c 	add.w	r1, r5, #12
 801412c:	4607      	mov	r7, r0
 801412e:	4620      	mov	r0, r4
 8014130:	f003 f93e 	bl	80173b0 <ucdr_serialize_array_uint8_t>
 8014134:	7be9      	ldrb	r1, [r5, #15]
 8014136:	4680      	mov	r8, r0
 8014138:	4620      	mov	r0, r4
 801413a:	f003 fa31 	bl	80175a0 <ucdr_serialize_uint8_t>
 801413e:	6929      	ldr	r1, [r5, #16]
 8014140:	4606      	mov	r6, r0
 8014142:	4620      	mov	r0, r4
 8014144:	f004 f85c 	bl	8018200 <ucdr_serialize_int32_t>
 8014148:	6969      	ldr	r1, [r5, #20]
 801414a:	4603      	mov	r3, r0
 801414c:	4620      	mov	r0, r4
 801414e:	ea07 0708 	and.w	r7, r7, r8
 8014152:	461c      	mov	r4, r3
 8014154:	f003 fc3a 	bl	80179cc <ucdr_serialize_uint32_t>
 8014158:	403e      	ands	r6, r7
 801415a:	4034      	ands	r4, r6
 801415c:	4020      	ands	r0, r4
 801415e:	b2c0      	uxtb	r0, r0
 8014160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014164 <uxr_deserialize_SampleIdentity>:
 8014164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014168:	220c      	movs	r2, #12
 801416a:	4604      	mov	r4, r0
 801416c:	460d      	mov	r5, r1
 801416e:	f003 f983 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8014172:	2203      	movs	r2, #3
 8014174:	f105 010c 	add.w	r1, r5, #12
 8014178:	4607      	mov	r7, r0
 801417a:	4620      	mov	r0, r4
 801417c:	f003 f97c 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8014180:	f105 010f 	add.w	r1, r5, #15
 8014184:	4680      	mov	r8, r0
 8014186:	4620      	mov	r0, r4
 8014188:	f003 fa20 	bl	80175cc <ucdr_deserialize_uint8_t>
 801418c:	f105 0110 	add.w	r1, r5, #16
 8014190:	4606      	mov	r6, r0
 8014192:	4620      	mov	r0, r4
 8014194:	f004 f8cc 	bl	8018330 <ucdr_deserialize_int32_t>
 8014198:	f105 0114 	add.w	r1, r5, #20
 801419c:	4603      	mov	r3, r0
 801419e:	4620      	mov	r0, r4
 80141a0:	ea07 0708 	and.w	r7, r7, r8
 80141a4:	461c      	mov	r4, r3
 80141a6:	f003 fd41 	bl	8017c2c <ucdr_deserialize_uint32_t>
 80141aa:	403e      	ands	r6, r7
 80141ac:	4034      	ands	r4, r6
 80141ae:	4020      	ands	r0, r4
 80141b0:	b2c0      	uxtb	r0, r0
 80141b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141b6:	bf00      	nop

080141b8 <rcl_client_get_rmw_handle>:
 80141b8:	b110      	cbz	r0, 80141c0 <rcl_client_get_rmw_handle+0x8>
 80141ba:	6800      	ldr	r0, [r0, #0]
 80141bc:	b100      	cbz	r0, 80141c0 <rcl_client_get_rmw_handle+0x8>
 80141be:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80141c0:	4770      	bx	lr
 80141c2:	bf00      	nop

080141c4 <rcl_take_response>:
 80141c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141c6:	460e      	mov	r6, r1
 80141c8:	460c      	mov	r4, r1
 80141ca:	4607      	mov	r7, r0
 80141cc:	4694      	mov	ip, r2
 80141ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80141d0:	b08d      	sub	sp, #52	@ 0x34
 80141d2:	ad06      	add	r5, sp, #24
 80141d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80141d6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80141da:	e885 0003 	stmia.w	r5, {r0, r1}
 80141de:	b337      	cbz	r7, 801422e <rcl_take_response+0x6a>
 80141e0:	683b      	ldr	r3, [r7, #0]
 80141e2:	b323      	cbz	r3, 801422e <rcl_take_response+0x6a>
 80141e4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80141e6:	b310      	cbz	r0, 801422e <rcl_take_response+0x6a>
 80141e8:	4662      	mov	r2, ip
 80141ea:	b31a      	cbz	r2, 8014234 <rcl_take_response+0x70>
 80141ec:	2300      	movs	r3, #0
 80141ee:	2600      	movs	r6, #0
 80141f0:	2700      	movs	r7, #0
 80141f2:	f88d 3007 	strb.w	r3, [sp, #7]
 80141f6:	a902      	add	r1, sp, #8
 80141f8:	f10d 0307 	add.w	r3, sp, #7
 80141fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014200:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014204:	f002 fe24 	bl	8016e50 <rmw_take_response>
 8014208:	4606      	mov	r6, r0
 801420a:	b9a8      	cbnz	r0, 8014238 <rcl_take_response+0x74>
 801420c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014210:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8014214:	2a00      	cmp	r2, #0
 8014216:	bf08      	it	eq
 8014218:	461e      	moveq	r6, r3
 801421a:	ad06      	add	r5, sp, #24
 801421c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801421e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014220:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014224:	e884 0003 	stmia.w	r4, {r0, r1}
 8014228:	4630      	mov	r0, r6
 801422a:	b00d      	add	sp, #52	@ 0x34
 801422c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801422e:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8014232:	e7f2      	b.n	801421a <rcl_take_response+0x56>
 8014234:	260b      	movs	r6, #11
 8014236:	e7f0      	b.n	801421a <rcl_take_response+0x56>
 8014238:	2601      	movs	r6, #1
 801423a:	e7ee      	b.n	801421a <rcl_take_response+0x56>

0801423c <rcl_convert_rmw_ret_to_rcl_ret>:
 801423c:	280b      	cmp	r0, #11
 801423e:	dc0d      	bgt.n	801425c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8014240:	2800      	cmp	r0, #0
 8014242:	db09      	blt.n	8014258 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014244:	280b      	cmp	r0, #11
 8014246:	d807      	bhi.n	8014258 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014248:	e8df f000 	tbb	[pc, r0]
 801424c:	07060607 	.word	0x07060607
 8014250:	06060606 	.word	0x06060606
 8014254:	07070606 	.word	0x07070606
 8014258:	2001      	movs	r0, #1
 801425a:	4770      	bx	lr
 801425c:	28cb      	cmp	r0, #203	@ 0xcb
 801425e:	bf18      	it	ne
 8014260:	2001      	movne	r0, #1
 8014262:	4770      	bx	lr

08014264 <rcl_get_zero_initialized_context>:
 8014264:	4a03      	ldr	r2, [pc, #12]	@ (8014274 <rcl_get_zero_initialized_context+0x10>)
 8014266:	4603      	mov	r3, r0
 8014268:	e892 0003 	ldmia.w	r2, {r0, r1}
 801426c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014270:	4618      	mov	r0, r3
 8014272:	4770      	bx	lr
 8014274:	0801e300 	.word	0x0801e300

08014278 <rcl_context_is_valid>:
 8014278:	b118      	cbz	r0, 8014282 <rcl_context_is_valid+0xa>
 801427a:	6840      	ldr	r0, [r0, #4]
 801427c:	3800      	subs	r0, #0
 801427e:	bf18      	it	ne
 8014280:	2001      	movne	r0, #1
 8014282:	4770      	bx	lr

08014284 <__cleanup_context>:
 8014284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014288:	4606      	mov	r6, r0
 801428a:	6800      	ldr	r0, [r0, #0]
 801428c:	2300      	movs	r3, #0
 801428e:	6073      	str	r3, [r6, #4]
 8014290:	2800      	cmp	r0, #0
 8014292:	d04d      	beq.n	8014330 <__cleanup_context+0xac>
 8014294:	6947      	ldr	r7, [r0, #20]
 8014296:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801429a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801429e:	b137      	cbz	r7, 80142ae <__cleanup_context+0x2a>
 80142a0:	3014      	adds	r0, #20
 80142a2:	f7f9 fe35 	bl	800df10 <rcl_init_options_fini>
 80142a6:	4607      	mov	r7, r0
 80142a8:	2800      	cmp	r0, #0
 80142aa:	d148      	bne.n	801433e <__cleanup_context+0xba>
 80142ac:	6830      	ldr	r0, [r6, #0]
 80142ae:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80142b0:	b143      	cbz	r3, 80142c4 <__cleanup_context+0x40>
 80142b2:	3028      	adds	r0, #40	@ 0x28
 80142b4:	f7fb f972 	bl	800f59c <rmw_context_fini>
 80142b8:	b118      	cbz	r0, 80142c2 <__cleanup_context+0x3e>
 80142ba:	2f00      	cmp	r7, #0
 80142bc:	d042      	beq.n	8014344 <__cleanup_context+0xc0>
 80142be:	f7fa fd11 	bl	800ece4 <rcutils_reset_error>
 80142c2:	6830      	ldr	r0, [r6, #0]
 80142c4:	f8d0 c020 	ldr.w	ip, [r0, #32]
 80142c8:	f1bc 0f00 	cmp.w	ip, #0
 80142cc:	d01c      	beq.n	8014308 <__cleanup_context+0x84>
 80142ce:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80142d2:	2a01      	cmp	r2, #1
 80142d4:	f173 0100 	sbcs.w	r1, r3, #0
 80142d8:	db12      	blt.n	8014300 <__cleanup_context+0x7c>
 80142da:	2400      	movs	r4, #0
 80142dc:	2500      	movs	r5, #0
 80142de:	f85c 0024 	ldr.w	r0, [ip, r4, lsl #2]
 80142e2:	4649      	mov	r1, r9
 80142e4:	b1c0      	cbz	r0, 8014318 <__cleanup_context+0x94>
 80142e6:	47c0      	blx	r8
 80142e8:	6831      	ldr	r1, [r6, #0]
 80142ea:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80142ee:	3401      	adds	r4, #1
 80142f0:	f145 0500 	adc.w	r5, r5, #0
 80142f4:	4294      	cmp	r4, r2
 80142f6:	f8d1 c020 	ldr.w	ip, [r1, #32]
 80142fa:	eb75 0103 	sbcs.w	r1, r5, r3
 80142fe:	dbee      	blt.n	80142de <__cleanup_context+0x5a>
 8014300:	4660      	mov	r0, ip
 8014302:	4649      	mov	r1, r9
 8014304:	47c0      	blx	r8
 8014306:	6830      	ldr	r0, [r6, #0]
 8014308:	4649      	mov	r1, r9
 801430a:	47c0      	blx	r8
 801430c:	2300      	movs	r3, #0
 801430e:	e9c6 3300 	strd	r3, r3, [r6]
 8014312:	4638      	mov	r0, r7
 8014314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014318:	3401      	adds	r4, #1
 801431a:	f145 0500 	adc.w	r5, r5, #0
 801431e:	4294      	cmp	r4, r2
 8014320:	eb75 0103 	sbcs.w	r1, r5, r3
 8014324:	dbdb      	blt.n	80142de <__cleanup_context+0x5a>
 8014326:	4660      	mov	r0, ip
 8014328:	4649      	mov	r1, r9
 801432a:	47c0      	blx	r8
 801432c:	6830      	ldr	r0, [r6, #0]
 801432e:	e7eb      	b.n	8014308 <__cleanup_context+0x84>
 8014330:	4607      	mov	r7, r0
 8014332:	2300      	movs	r3, #0
 8014334:	e9c6 3300 	strd	r3, r3, [r6]
 8014338:	4638      	mov	r0, r7
 801433a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801433e:	f7fa fcd1 	bl	800ece4 <rcutils_reset_error>
 8014342:	e7b3      	b.n	80142ac <__cleanup_context+0x28>
 8014344:	f7ff ff7a 	bl	801423c <rcl_convert_rmw_ret_to_rcl_ret>
 8014348:	4607      	mov	r7, r0
 801434a:	e7b8      	b.n	80142be <__cleanup_context+0x3a>

0801434c <rcl_expand_topic_name>:
 801434c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014350:	b08b      	sub	sp, #44	@ 0x2c
 8014352:	9306      	str	r3, [sp, #24]
 8014354:	2800      	cmp	r0, #0
 8014356:	f000 80d2 	beq.w	80144fe <rcl_expand_topic_name+0x1b2>
 801435a:	460e      	mov	r6, r1
 801435c:	2900      	cmp	r1, #0
 801435e:	f000 80ce 	beq.w	80144fe <rcl_expand_topic_name+0x1b2>
 8014362:	4617      	mov	r7, r2
 8014364:	2a00      	cmp	r2, #0
 8014366:	f000 80ca 	beq.w	80144fe <rcl_expand_topic_name+0x1b2>
 801436a:	2b00      	cmp	r3, #0
 801436c:	f000 80c7 	beq.w	80144fe <rcl_expand_topic_name+0x1b2>
 8014370:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014372:	2b00      	cmp	r3, #0
 8014374:	f000 80c3 	beq.w	80144fe <rcl_expand_topic_name+0x1b2>
 8014378:	a909      	add	r1, sp, #36	@ 0x24
 801437a:	2200      	movs	r2, #0
 801437c:	4680      	mov	r8, r0
 801437e:	f001 f8f5 	bl	801556c <rcl_validate_topic_name>
 8014382:	4604      	mov	r4, r0
 8014384:	2800      	cmp	r0, #0
 8014386:	f040 80b6 	bne.w	80144f6 <rcl_expand_topic_name+0x1aa>
 801438a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801438c:	2b00      	cmp	r3, #0
 801438e:	f040 80bf 	bne.w	8014510 <rcl_expand_topic_name+0x1c4>
 8014392:	4602      	mov	r2, r0
 8014394:	a909      	add	r1, sp, #36	@ 0x24
 8014396:	4630      	mov	r0, r6
 8014398:	f002 fa6a 	bl	8016870 <rmw_validate_node_name>
 801439c:	2800      	cmp	r0, #0
 801439e:	f040 80b3 	bne.w	8014508 <rcl_expand_topic_name+0x1bc>
 80143a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80143a4:	2a00      	cmp	r2, #0
 80143a6:	f040 80b8 	bne.w	801451a <rcl_expand_topic_name+0x1ce>
 80143aa:	a909      	add	r1, sp, #36	@ 0x24
 80143ac:	4638      	mov	r0, r7
 80143ae:	f002 fa41 	bl	8016834 <rmw_validate_namespace>
 80143b2:	2800      	cmp	r0, #0
 80143b4:	f040 80a8 	bne.w	8014508 <rcl_expand_topic_name+0x1bc>
 80143b8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80143ba:	2c00      	cmp	r4, #0
 80143bc:	f040 80f6 	bne.w	80145ac <rcl_expand_topic_name+0x260>
 80143c0:	217b      	movs	r1, #123	@ 0x7b
 80143c2:	4640      	mov	r0, r8
 80143c4:	f006 fa06 	bl	801a7d4 <strchr>
 80143c8:	f898 3000 	ldrb.w	r3, [r8]
 80143cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80143ce:	4605      	mov	r5, r0
 80143d0:	f000 80c4 	beq.w	801455c <rcl_expand_topic_name+0x210>
 80143d4:	2b7e      	cmp	r3, #126	@ 0x7e
 80143d6:	d16f      	bne.n	80144b8 <rcl_expand_topic_name+0x16c>
 80143d8:	4638      	mov	r0, r7
 80143da:	f7eb ff61 	bl	80002a0 <strlen>
 80143de:	4b87      	ldr	r3, [pc, #540]	@ (80145fc <rcl_expand_topic_name+0x2b0>)
 80143e0:	4987      	ldr	r1, [pc, #540]	@ (8014600 <rcl_expand_topic_name+0x2b4>)
 80143e2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80143e4:	9604      	str	r6, [sp, #16]
 80143e6:	2801      	cmp	r0, #1
 80143e8:	bf0c      	ite	eq
 80143ea:	4618      	moveq	r0, r3
 80143ec:	4608      	movne	r0, r1
 80143ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80143f2:	e9cd 2300 	strd	r2, r3, [sp]
 80143f6:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80143fa:	f108 0101 	add.w	r1, r8, #1
 80143fe:	9105      	str	r1, [sp, #20]
 8014400:	ab14      	add	r3, sp, #80	@ 0x50
 8014402:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014404:	f002 f842 	bl	801648c <rcutils_format_string_limit>
 8014408:	4682      	mov	sl, r0
 801440a:	2800      	cmp	r0, #0
 801440c:	f000 80d0 	beq.w	80145b0 <rcl_expand_topic_name+0x264>
 8014410:	2d00      	cmp	r5, #0
 8014412:	f000 80aa 	beq.w	801456a <rcl_expand_topic_name+0x21e>
 8014416:	217b      	movs	r1, #123	@ 0x7b
 8014418:	f006 f9dc 	bl	801a7d4 <strchr>
 801441c:	46d1      	mov	r9, sl
 801441e:	4605      	mov	r5, r0
 8014420:	9407      	str	r4, [sp, #28]
 8014422:	46d3      	mov	fp, sl
 8014424:	464c      	mov	r4, r9
 8014426:	2d00      	cmp	r5, #0
 8014428:	f000 80c7 	beq.w	80145ba <rcl_expand_topic_name+0x26e>
 801442c:	217d      	movs	r1, #125	@ 0x7d
 801442e:	4620      	mov	r0, r4
 8014430:	f006 f9d0 	bl	801a7d4 <strchr>
 8014434:	eba0 0905 	sub.w	r9, r0, r5
 8014438:	f109 0a01 	add.w	sl, r9, #1
 801443c:	4871      	ldr	r0, [pc, #452]	@ (8014604 <rcl_expand_topic_name+0x2b8>)
 801443e:	4652      	mov	r2, sl
 8014440:	4629      	mov	r1, r5
 8014442:	f006 f9d4 	bl	801a7ee <strncmp>
 8014446:	2800      	cmp	r0, #0
 8014448:	f000 808d 	beq.w	8014566 <rcl_expand_topic_name+0x21a>
 801444c:	486e      	ldr	r0, [pc, #440]	@ (8014608 <rcl_expand_topic_name+0x2bc>)
 801444e:	4652      	mov	r2, sl
 8014450:	4629      	mov	r1, r5
 8014452:	f006 f9cc 	bl	801a7ee <strncmp>
 8014456:	b130      	cbz	r0, 8014466 <rcl_expand_topic_name+0x11a>
 8014458:	486c      	ldr	r0, [pc, #432]	@ (801460c <rcl_expand_topic_name+0x2c0>)
 801445a:	4652      	mov	r2, sl
 801445c:	4629      	mov	r1, r5
 801445e:	f006 f9c6 	bl	801a7ee <strncmp>
 8014462:	2800      	cmp	r0, #0
 8014464:	d15b      	bne.n	801451e <rcl_expand_topic_name+0x1d2>
 8014466:	46b9      	mov	r9, r7
 8014468:	ab16      	add	r3, sp, #88	@ 0x58
 801446a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801446e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014472:	ab14      	add	r3, sp, #80	@ 0x50
 8014474:	4628      	mov	r0, r5
 8014476:	cb0c      	ldmia	r3, {r2, r3}
 8014478:	4651      	mov	r1, sl
 801447a:	f002 f953 	bl	8016724 <rcutils_strndup>
 801447e:	4605      	mov	r5, r0
 8014480:	2800      	cmp	r0, #0
 8014482:	f000 80a4 	beq.w	80145ce <rcl_expand_topic_name+0x282>
 8014486:	464a      	mov	r2, r9
 8014488:	4620      	mov	r0, r4
 801448a:	ab14      	add	r3, sp, #80	@ 0x50
 801448c:	4629      	mov	r1, r5
 801448e:	f002 f84f 	bl	8016530 <rcutils_repl_str>
 8014492:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014494:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014496:	4604      	mov	r4, r0
 8014498:	4628      	mov	r0, r5
 801449a:	4798      	blx	r3
 801449c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801449e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80144a0:	4658      	mov	r0, fp
 80144a2:	4798      	blx	r3
 80144a4:	2c00      	cmp	r4, #0
 80144a6:	f000 8083 	beq.w	80145b0 <rcl_expand_topic_name+0x264>
 80144aa:	217b      	movs	r1, #123	@ 0x7b
 80144ac:	4620      	mov	r0, r4
 80144ae:	f006 f991 	bl	801a7d4 <strchr>
 80144b2:	46a3      	mov	fp, r4
 80144b4:	4605      	mov	r5, r0
 80144b6:	e7b6      	b.n	8014426 <rcl_expand_topic_name+0xda>
 80144b8:	2800      	cmp	r0, #0
 80144ba:	d151      	bne.n	8014560 <rcl_expand_topic_name+0x214>
 80144bc:	4638      	mov	r0, r7
 80144be:	f7eb feef 	bl	80002a0 <strlen>
 80144c2:	4b53      	ldr	r3, [pc, #332]	@ (8014610 <rcl_expand_topic_name+0x2c4>)
 80144c4:	4a53      	ldr	r2, [pc, #332]	@ (8014614 <rcl_expand_topic_name+0x2c8>)
 80144c6:	f8cd 8010 	str.w	r8, [sp, #16]
 80144ca:	2801      	cmp	r0, #1
 80144cc:	bf0c      	ite	eq
 80144ce:	4618      	moveq	r0, r3
 80144d0:	4610      	movne	r0, r2
 80144d2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80144d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80144d8:	e9cd 3200 	strd	r3, r2, [sp]
 80144dc:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80144e0:	ab14      	add	r3, sp, #80	@ 0x50
 80144e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80144e4:	f001 ffd2 	bl	801648c <rcutils_format_string_limit>
 80144e8:	4682      	mov	sl, r0
 80144ea:	4653      	mov	r3, sl
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d05f      	beq.n	80145b0 <rcl_expand_topic_name+0x264>
 80144f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80144f2:	f8c3 a000 	str.w	sl, [r3]
 80144f6:	4620      	mov	r0, r4
 80144f8:	b00b      	add	sp, #44	@ 0x2c
 80144fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144fe:	240b      	movs	r4, #11
 8014500:	4620      	mov	r0, r4
 8014502:	b00b      	add	sp, #44	@ 0x2c
 8014504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014508:	f7ff fe98 	bl	801423c <rcl_convert_rmw_ret_to_rcl_ret>
 801450c:	4604      	mov	r4, r0
 801450e:	e7f2      	b.n	80144f6 <rcl_expand_topic_name+0x1aa>
 8014510:	2467      	movs	r4, #103	@ 0x67
 8014512:	4620      	mov	r0, r4
 8014514:	b00b      	add	sp, #44	@ 0x2c
 8014516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801451a:	24c9      	movs	r4, #201	@ 0xc9
 801451c:	e7eb      	b.n	80144f6 <rcl_expand_topic_name+0x1aa>
 801451e:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8014522:	9806      	ldr	r0, [sp, #24]
 8014524:	1c69      	adds	r1, r5, #1
 8014526:	f7fa fcf3 	bl	800ef10 <rcutils_string_map_getn>
 801452a:	4681      	mov	r9, r0
 801452c:	2800      	cmp	r0, #0
 801452e:	d19b      	bne.n	8014468 <rcl_expand_topic_name+0x11c>
 8014530:	aa16      	add	r2, sp, #88	@ 0x58
 8014532:	ca07      	ldmia	r2, {r0, r1, r2}
 8014534:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014536:	f8c3 9000 	str.w	r9, [r3]
 801453a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801453e:	ab14      	add	r3, sp, #80	@ 0x50
 8014540:	cb0c      	ldmia	r3, {r2, r3}
 8014542:	4651      	mov	r1, sl
 8014544:	4628      	mov	r0, r5
 8014546:	f002 f8ed 	bl	8016724 <rcutils_strndup>
 801454a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801454c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801454e:	4798      	blx	r3
 8014550:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014552:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8014554:	4658      	mov	r0, fp
 8014556:	4798      	blx	r3
 8014558:	2469      	movs	r4, #105	@ 0x69
 801455a:	e7cc      	b.n	80144f6 <rcl_expand_topic_name+0x1aa>
 801455c:	2800      	cmp	r0, #0
 801455e:	d03e      	beq.n	80145de <rcl_expand_topic_name+0x292>
 8014560:	46c1      	mov	r9, r8
 8014562:	46a2      	mov	sl, r4
 8014564:	e75c      	b.n	8014420 <rcl_expand_topic_name+0xd4>
 8014566:	46b1      	mov	r9, r6
 8014568:	e77e      	b.n	8014468 <rcl_expand_topic_name+0x11c>
 801456a:	f89a 3000 	ldrb.w	r3, [sl]
 801456e:	2b2f      	cmp	r3, #47	@ 0x2f
 8014570:	d0be      	beq.n	80144f0 <rcl_expand_topic_name+0x1a4>
 8014572:	4638      	mov	r0, r7
 8014574:	f7eb fe94 	bl	80002a0 <strlen>
 8014578:	4b25      	ldr	r3, [pc, #148]	@ (8014610 <rcl_expand_topic_name+0x2c4>)
 801457a:	4926      	ldr	r1, [pc, #152]	@ (8014614 <rcl_expand_topic_name+0x2c8>)
 801457c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801457e:	f8cd a010 	str.w	sl, [sp, #16]
 8014582:	2801      	cmp	r0, #1
 8014584:	bf0c      	ite	eq
 8014586:	4618      	moveq	r0, r3
 8014588:	4608      	movne	r0, r1
 801458a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801458e:	e9cd 2300 	strd	r2, r3, [sp]
 8014592:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8014596:	ab14      	add	r3, sp, #80	@ 0x50
 8014598:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801459a:	f001 ff77 	bl	801648c <rcutils_format_string_limit>
 801459e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80145a0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80145a2:	4603      	mov	r3, r0
 80145a4:	4650      	mov	r0, sl
 80145a6:	469a      	mov	sl, r3
 80145a8:	4790      	blx	r2
 80145aa:	e79e      	b.n	80144ea <rcl_expand_topic_name+0x19e>
 80145ac:	24ca      	movs	r4, #202	@ 0xca
 80145ae:	e7a2      	b.n	80144f6 <rcl_expand_topic_name+0x1aa>
 80145b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80145b2:	2300      	movs	r3, #0
 80145b4:	6013      	str	r3, [r2, #0]
 80145b6:	240a      	movs	r4, #10
 80145b8:	e79d      	b.n	80144f6 <rcl_expand_topic_name+0x1aa>
 80145ba:	465b      	mov	r3, fp
 80145bc:	9c07      	ldr	r4, [sp, #28]
 80145be:	46da      	mov	sl, fp
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d1d2      	bne.n	801456a <rcl_expand_topic_name+0x21e>
 80145c4:	f898 3000 	ldrb.w	r3, [r8]
 80145c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80145ca:	d091      	beq.n	80144f0 <rcl_expand_topic_name+0x1a4>
 80145cc:	e776      	b.n	80144bc <rcl_expand_topic_name+0x170>
 80145ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80145d0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80145d2:	601d      	str	r5, [r3, #0]
 80145d4:	4658      	mov	r0, fp
 80145d6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80145d8:	4798      	blx	r3
 80145da:	240a      	movs	r4, #10
 80145dc:	e78b      	b.n	80144f6 <rcl_expand_topic_name+0x1aa>
 80145de:	e9dd 0117 	ldrd	r0, r1, [sp, #92]	@ 0x5c
 80145e2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80145e6:	ab14      	add	r3, sp, #80	@ 0x50
 80145e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80145ea:	4640      	mov	r0, r8
 80145ec:	f002 f878 	bl	80166e0 <rcutils_strdup>
 80145f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80145f2:	2800      	cmp	r0, #0
 80145f4:	bf08      	it	eq
 80145f6:	240a      	moveq	r4, #10
 80145f8:	6018      	str	r0, [r3, #0]
 80145fa:	e77c      	b.n	80144f6 <rcl_expand_topic_name+0x1aa>
 80145fc:	0801e0cc 	.word	0x0801e0cc
 8014600:	0801e308 	.word	0x0801e308
 8014604:	0801e310 	.word	0x0801e310
 8014608:	0801e318 	.word	0x0801e318
 801460c:	0801e320 	.word	0x0801e320
 8014610:	0801e0dc 	.word	0x0801e0dc
 8014614:	0801e094 	.word	0x0801e094

08014618 <rcl_get_default_topic_name_substitutions>:
 8014618:	2800      	cmp	r0, #0
 801461a:	bf0c      	ite	eq
 801461c:	200b      	moveq	r0, #11
 801461e:	2000      	movne	r0, #0
 8014620:	4770      	bx	lr
 8014622:	bf00      	nop

08014624 <rcl_init>:
 8014624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014628:	1e07      	subs	r7, r0, #0
 801462a:	b09f      	sub	sp, #124	@ 0x7c
 801462c:	4688      	mov	r8, r1
 801462e:	4692      	mov	sl, r2
 8014630:	4699      	mov	r9, r3
 8014632:	f340 8097 	ble.w	8014764 <rcl_init+0x140>
 8014636:	2900      	cmp	r1, #0
 8014638:	f000 8097 	beq.w	801476a <rcl_init+0x146>
 801463c:	1f0d      	subs	r5, r1, #4
 801463e:	2400      	movs	r4, #0
 8014640:	f855 6f04 	ldr.w	r6, [r5, #4]!
 8014644:	3401      	adds	r4, #1
 8014646:	2e00      	cmp	r6, #0
 8014648:	f000 808f 	beq.w	801476a <rcl_init+0x146>
 801464c:	42a7      	cmp	r7, r4
 801464e:	d1f7      	bne.n	8014640 <rcl_init+0x1c>
 8014650:	f1ba 0f00 	cmp.w	sl, #0
 8014654:	f000 8089 	beq.w	801476a <rcl_init+0x146>
 8014658:	f8da 4000 	ldr.w	r4, [sl]
 801465c:	2c00      	cmp	r4, #0
 801465e:	f000 8084 	beq.w	801476a <rcl_init+0x146>
 8014662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014664:	ad19      	add	r5, sp, #100	@ 0x64
 8014666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014668:	6823      	ldr	r3, [r4, #0]
 801466a:	602b      	str	r3, [r5, #0]
 801466c:	a819      	add	r0, sp, #100	@ 0x64
 801466e:	f7fa fb15 	bl	800ec9c <rcutils_allocator_is_valid>
 8014672:	2800      	cmp	r0, #0
 8014674:	d079      	beq.n	801476a <rcl_init+0x146>
 8014676:	f1b9 0f00 	cmp.w	r9, #0
 801467a:	d076      	beq.n	801476a <rcl_init+0x146>
 801467c:	f8d9 3000 	ldr.w	r3, [r9]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d177      	bne.n	8014774 <rcl_init+0x150>
 8014684:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8014688:	2178      	movs	r1, #120	@ 0x78
 801468a:	2001      	movs	r0, #1
 801468c:	4798      	blx	r3
 801468e:	4604      	mov	r4, r0
 8014690:	f8c9 0000 	str.w	r0, [r9]
 8014694:	2800      	cmp	r0, #0
 8014696:	f000 80ba 	beq.w	801480e <rcl_init+0x1ea>
 801469a:	a802      	add	r0, sp, #8
 801469c:	f002 f85e 	bl	801675c <rmw_get_zero_initialized_context>
 80146a0:	a902      	add	r1, sp, #8
 80146a2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80146a6:	2250      	movs	r2, #80	@ 0x50
 80146a8:	ac19      	add	r4, sp, #100	@ 0x64
 80146aa:	f006 f9ae 	bl	801aa0a <memcpy>
 80146ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146b0:	f8d9 5000 	ldr.w	r5, [r9]
 80146b4:	6826      	ldr	r6, [r4, #0]
 80146b6:	462c      	mov	r4, r5
 80146b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80146ba:	f105 0114 	add.w	r1, r5, #20
 80146be:	6026      	str	r6, [r4, #0]
 80146c0:	4650      	mov	r0, sl
 80146c2:	f7f9 fc49 	bl	800df58 <rcl_init_options_copy>
 80146c6:	4606      	mov	r6, r0
 80146c8:	2800      	cmp	r0, #0
 80146ca:	d144      	bne.n	8014756 <rcl_init+0x132>
 80146cc:	f8d9 a000 	ldr.w	sl, [r9]
 80146d0:	463c      	mov	r4, r7
 80146d2:	17fd      	asrs	r5, r7, #31
 80146d4:	e9ca 4506 	strd	r4, r5, [sl, #24]
 80146d8:	f8ca 0020 	str.w	r0, [sl, #32]
 80146dc:	2f00      	cmp	r7, #0
 80146de:	d050      	beq.n	8014782 <rcl_init+0x15e>
 80146e0:	f1b8 0f00 	cmp.w	r8, #0
 80146e4:	d04d      	beq.n	8014782 <rcl_init+0x15e>
 80146e6:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80146ea:	4638      	mov	r0, r7
 80146ec:	2104      	movs	r1, #4
 80146ee:	4798      	blx	r3
 80146f0:	f8ca 0020 	str.w	r0, [sl, #32]
 80146f4:	f8d9 a000 	ldr.w	sl, [r9]
 80146f8:	f8da 3020 	ldr.w	r3, [sl, #32]
 80146fc:	46d3      	mov	fp, sl
 80146fe:	b34b      	cbz	r3, 8014754 <rcl_init+0x130>
 8014700:	2f01      	cmp	r7, #1
 8014702:	f175 0300 	sbcs.w	r3, r5, #0
 8014706:	db3c      	blt.n	8014782 <rcl_init+0x15e>
 8014708:	f1a8 0804 	sub.w	r8, r8, #4
 801470c:	2600      	movs	r6, #0
 801470e:	2700      	movs	r7, #0
 8014710:	e00c      	b.n	801472c <rcl_init+0x108>
 8014712:	f8d8 1000 	ldr.w	r1, [r8]
 8014716:	f006 f978 	bl	801aa0a <memcpy>
 801471a:	3601      	adds	r6, #1
 801471c:	f147 0700 	adc.w	r7, r7, #0
 8014720:	42bd      	cmp	r5, r7
 8014722:	bf08      	it	eq
 8014724:	42b4      	cmpeq	r4, r6
 8014726:	d02a      	beq.n	801477e <rcl_init+0x15a>
 8014728:	f8d9 b000 	ldr.w	fp, [r9]
 801472c:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8014730:	f7eb fdb6 	bl	80002a0 <strlen>
 8014734:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014736:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8014738:	f8db a020 	ldr.w	sl, [fp, #32]
 801473c:	9001      	str	r0, [sp, #4]
 801473e:	4798      	blx	r3
 8014740:	f8d9 1000 	ldr.w	r1, [r9]
 8014744:	9a01      	ldr	r2, [sp, #4]
 8014746:	6a09      	ldr	r1, [r1, #32]
 8014748:	00b3      	lsls	r3, r6, #2
 801474a:	f84a 0003 	str.w	r0, [sl, r3]
 801474e:	58c8      	ldr	r0, [r1, r3]
 8014750:	2800      	cmp	r0, #0
 8014752:	d1de      	bne.n	8014712 <rcl_init+0xee>
 8014754:	260a      	movs	r6, #10
 8014756:	4648      	mov	r0, r9
 8014758:	f7ff fd94 	bl	8014284 <__cleanup_context>
 801475c:	4630      	mov	r0, r6
 801475e:	b01f      	add	sp, #124	@ 0x7c
 8014760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014764:	2900      	cmp	r1, #0
 8014766:	f43f af73 	beq.w	8014650 <rcl_init+0x2c>
 801476a:	260b      	movs	r6, #11
 801476c:	4630      	mov	r0, r6
 801476e:	b01f      	add	sp, #124	@ 0x7c
 8014770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014774:	2664      	movs	r6, #100	@ 0x64
 8014776:	4630      	mov	r0, r6
 8014778:	b01f      	add	sp, #124	@ 0x7c
 801477a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801477e:	f8d9 a000 	ldr.w	sl, [r9]
 8014782:	4a2c      	ldr	r2, [pc, #176]	@ (8014834 <rcl_init+0x210>)
 8014784:	6813      	ldr	r3, [r2, #0]
 8014786:	3301      	adds	r3, #1
 8014788:	d03b      	beq.n	8014802 <rcl_init+0x1de>
 801478a:	6013      	str	r3, [r2, #0]
 801478c:	4619      	mov	r1, r3
 801478e:	2000      	movs	r0, #0
 8014790:	f8da 4014 	ldr.w	r4, [sl, #20]
 8014794:	f8c9 3004 	str.w	r3, [r9, #4]
 8014798:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801479a:	3301      	adds	r3, #1
 801479c:	e9c4 1006 	strd	r1, r0, [r4, #24]
 80147a0:	d039      	beq.n	8014816 <rcl_init+0x1f2>
 80147a2:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80147a6:	b94b      	cbnz	r3, 80147bc <rcl_init+0x198>
 80147a8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 80147ac:	f000 f844 	bl	8014838 <rcl_get_localhost_only>
 80147b0:	4606      	mov	r6, r0
 80147b2:	2800      	cmp	r0, #0
 80147b4:	d1cf      	bne.n	8014756 <rcl_init+0x132>
 80147b6:	f8d9 3000 	ldr.w	r3, [r9]
 80147ba:	695c      	ldr	r4, [r3, #20]
 80147bc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80147be:	aa18      	add	r2, sp, #96	@ 0x60
 80147c0:	a917      	add	r1, sp, #92	@ 0x5c
 80147c2:	f000 fec1 	bl	8015548 <rcl_validate_enclave_name>
 80147c6:	4606      	mov	r6, r0
 80147c8:	2800      	cmp	r0, #0
 80147ca:	d1c4      	bne.n	8014756 <rcl_init+0x132>
 80147cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80147ce:	bb03      	cbnz	r3, 8014812 <rcl_init+0x1ee>
 80147d0:	f8d9 1000 	ldr.w	r1, [r9]
 80147d4:	694b      	ldr	r3, [r1, #20]
 80147d6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80147d8:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80147dc:	f000 fa9a 	bl	8014d14 <rcl_get_security_options_from_environment>
 80147e0:	4606      	mov	r6, r0
 80147e2:	2800      	cmp	r0, #0
 80147e4:	d1b7      	bne.n	8014756 <rcl_init+0x132>
 80147e6:	f8d9 1000 	ldr.w	r1, [r9]
 80147ea:	6948      	ldr	r0, [r1, #20]
 80147ec:	3128      	adds	r1, #40	@ 0x28
 80147ee:	3018      	adds	r0, #24
 80147f0:	f7fa fd9c 	bl	800f32c <rmw_init>
 80147f4:	4606      	mov	r6, r0
 80147f6:	2800      	cmp	r0, #0
 80147f8:	d0b8      	beq.n	801476c <rcl_init+0x148>
 80147fa:	f7ff fd1f 	bl	801423c <rcl_convert_rmw_ret_to_rcl_ret>
 80147fe:	4606      	mov	r6, r0
 8014800:	e7a9      	b.n	8014756 <rcl_init+0x132>
 8014802:	2401      	movs	r4, #1
 8014804:	4618      	mov	r0, r3
 8014806:	4621      	mov	r1, r4
 8014808:	6014      	str	r4, [r2, #0]
 801480a:	4623      	mov	r3, r4
 801480c:	e7c0      	b.n	8014790 <rcl_init+0x16c>
 801480e:	260a      	movs	r6, #10
 8014810:	e7ac      	b.n	801476c <rcl_init+0x148>
 8014812:	2601      	movs	r6, #1
 8014814:	e79f      	b.n	8014756 <rcl_init+0x132>
 8014816:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 801481a:	f004 fb77 	bl	8018f0c <rcl_get_default_domain_id>
 801481e:	4606      	mov	r6, r0
 8014820:	2800      	cmp	r0, #0
 8014822:	d198      	bne.n	8014756 <rcl_init+0x132>
 8014824:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014826:	3301      	adds	r3, #1
 8014828:	f8d9 3000 	ldr.w	r3, [r9]
 801482c:	bf08      	it	eq
 801482e:	6260      	streq	r0, [r4, #36]	@ 0x24
 8014830:	695c      	ldr	r4, [r3, #20]
 8014832:	e7b6      	b.n	80147a2 <rcl_init+0x17e>
 8014834:	20009d68 	.word	0x20009d68

08014838 <rcl_get_localhost_only>:
 8014838:	b510      	push	{r4, lr}
 801483a:	b082      	sub	sp, #8
 801483c:	2300      	movs	r3, #0
 801483e:	9301      	str	r3, [sp, #4]
 8014840:	b1b8      	cbz	r0, 8014872 <rcl_get_localhost_only+0x3a>
 8014842:	4604      	mov	r4, r0
 8014844:	a901      	add	r1, sp, #4
 8014846:	480c      	ldr	r0, [pc, #48]	@ (8014878 <rcl_get_localhost_only+0x40>)
 8014848:	f001 fe5a 	bl	8016500 <rcutils_get_env>
 801484c:	b110      	cbz	r0, 8014854 <rcl_get_localhost_only+0x1c>
 801484e:	2001      	movs	r0, #1
 8014850:	b002      	add	sp, #8
 8014852:	bd10      	pop	{r4, pc}
 8014854:	9b01      	ldr	r3, [sp, #4]
 8014856:	b113      	cbz	r3, 801485e <rcl_get_localhost_only+0x26>
 8014858:	781a      	ldrb	r2, [r3, #0]
 801485a:	2a31      	cmp	r2, #49	@ 0x31
 801485c:	d004      	beq.n	8014868 <rcl_get_localhost_only+0x30>
 801485e:	2302      	movs	r3, #2
 8014860:	2000      	movs	r0, #0
 8014862:	7023      	strb	r3, [r4, #0]
 8014864:	b002      	add	sp, #8
 8014866:	bd10      	pop	{r4, pc}
 8014868:	785b      	ldrb	r3, [r3, #1]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d1f7      	bne.n	801485e <rcl_get_localhost_only+0x26>
 801486e:	2301      	movs	r3, #1
 8014870:	e7f6      	b.n	8014860 <rcl_get_localhost_only+0x28>
 8014872:	200b      	movs	r0, #11
 8014874:	b002      	add	sp, #8
 8014876:	bd10      	pop	{r4, pc}
 8014878:	0801e32c 	.word	0x0801e32c

0801487c <rcl_get_zero_initialized_node>:
 801487c:	4a03      	ldr	r2, [pc, #12]	@ (801488c <rcl_get_zero_initialized_node+0x10>)
 801487e:	4603      	mov	r3, r0
 8014880:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014884:	e883 0003 	stmia.w	r3, {r0, r1}
 8014888:	4618      	mov	r0, r3
 801488a:	4770      	bx	lr
 801488c:	0801e348 	.word	0x0801e348

08014890 <rcl_node_init>:
 8014890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014894:	b09b      	sub	sp, #108	@ 0x6c
 8014896:	4604      	mov	r4, r0
 8014898:	f8dd 8090 	ldr.w	r8, [sp, #144]	@ 0x90
 801489c:	f04f 0c00 	mov.w	ip, #0
 80148a0:	a815      	add	r0, sp, #84	@ 0x54
 80148a2:	460e      	mov	r6, r1
 80148a4:	4615      	mov	r5, r2
 80148a6:	461f      	mov	r7, r3
 80148a8:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
 80148ac:	f004 fbea 	bl	8019084 <rcl_guard_condition_get_default_options>
 80148b0:	f1b8 0f00 	cmp.w	r8, #0
 80148b4:	f000 80fd 	beq.w	8014ab2 <rcl_node_init+0x222>
 80148b8:	f108 0b04 	add.w	fp, r8, #4
 80148bc:	4658      	mov	r0, fp
 80148be:	f7fa f9ed 	bl	800ec9c <rcutils_allocator_is_valid>
 80148c2:	2800      	cmp	r0, #0
 80148c4:	f000 80f5 	beq.w	8014ab2 <rcl_node_init+0x222>
 80148c8:	2e00      	cmp	r6, #0
 80148ca:	f000 80f2 	beq.w	8014ab2 <rcl_node_init+0x222>
 80148ce:	2d00      	cmp	r5, #0
 80148d0:	f000 80ef 	beq.w	8014ab2 <rcl_node_init+0x222>
 80148d4:	2c00      	cmp	r4, #0
 80148d6:	f000 80ec 	beq.w	8014ab2 <rcl_node_init+0x222>
 80148da:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80148de:	f1b9 0f00 	cmp.w	r9, #0
 80148e2:	f040 8112 	bne.w	8014b0a <rcl_node_init+0x27a>
 80148e6:	2f00      	cmp	r7, #0
 80148e8:	f000 80e3 	beq.w	8014ab2 <rcl_node_init+0x222>
 80148ec:	4638      	mov	r0, r7
 80148ee:	f7ff fcc3 	bl	8014278 <rcl_context_is_valid>
 80148f2:	4682      	mov	sl, r0
 80148f4:	2800      	cmp	r0, #0
 80148f6:	f000 80e2 	beq.w	8014abe <rcl_node_init+0x22e>
 80148fa:	464a      	mov	r2, r9
 80148fc:	a914      	add	r1, sp, #80	@ 0x50
 80148fe:	4630      	mov	r0, r6
 8014900:	f8cd 9050 	str.w	r9, [sp, #80]	@ 0x50
 8014904:	f001 ffb4 	bl	8016870 <rmw_validate_node_name>
 8014908:	4681      	mov	r9, r0
 801490a:	2800      	cmp	r0, #0
 801490c:	f040 80d3 	bne.w	8014ab6 <rcl_node_init+0x226>
 8014910:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8014912:	2800      	cmp	r0, #0
 8014914:	f040 8105 	bne.w	8014b22 <rcl_node_init+0x292>
 8014918:	4628      	mov	r0, r5
 801491a:	f7eb fcc1 	bl	80002a0 <strlen>
 801491e:	2800      	cmp	r0, #0
 8014920:	f040 80d0 	bne.w	8014ac4 <rcl_node_init+0x234>
 8014924:	4d8e      	ldr	r5, [pc, #568]	@ (8014b60 <rcl_node_init+0x2d0>)
 8014926:	a914      	add	r1, sp, #80	@ 0x50
 8014928:	2200      	movs	r2, #0
 801492a:	4628      	mov	r0, r5
 801492c:	f001 ff82 	bl	8016834 <rmw_validate_namespace>
 8014930:	4681      	mov	r9, r0
 8014932:	2800      	cmp	r0, #0
 8014934:	f040 80bf 	bne.w	8014ab6 <rcl_node_init+0x226>
 8014938:	4682      	mov	sl, r0
 801493a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801493c:	2b00      	cmp	r3, #0
 801493e:	f040 80f5 	bne.w	8014b2c <rcl_node_init+0x29c>
 8014942:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8014946:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801494a:	9307      	str	r3, [sp, #28]
 801494c:	2030      	movs	r0, #48	@ 0x30
 801494e:	4790      	blx	r2
 8014950:	4681      	mov	r9, r0
 8014952:	6060      	str	r0, [r4, #4]
 8014954:	2800      	cmp	r0, #0
 8014956:	f000 80de 	beq.w	8014b16 <rcl_node_init+0x286>
 801495a:	9b07      	ldr	r3, [sp, #28]
 801495c:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8014960:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8014964:	a80a      	add	r0, sp, #40	@ 0x28
 8014966:	f7f9 fba5 	bl	800e0b4 <rcl_node_get_default_options>
 801496a:	f10d 0e28 	add.w	lr, sp, #40	@ 0x28
 801496e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014972:	46cc      	mov	ip, r9
 8014974:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014978:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 801497c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8014980:	6861      	ldr	r1, [r4, #4]
 8014982:	6027      	str	r7, [r4, #0]
 8014984:	4640      	mov	r0, r8
 8014986:	f7f9 fbb1 	bl	800e0ec <rcl_node_options_copy>
 801498a:	2800      	cmp	r0, #0
 801498c:	d167      	bne.n	8014a5e <rcl_node_init+0x1ce>
 801498e:	4628      	mov	r0, r5
 8014990:	f7eb fc86 	bl	80002a0 <strlen>
 8014994:	4428      	add	r0, r5
 8014996:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801499a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801499e:	2b2f      	cmp	r3, #47	@ 0x2f
 80149a0:	bf08      	it	eq
 80149a2:	4970      	ldreq	r1, [pc, #448]	@ (8014b64 <rcl_node_init+0x2d4>)
 80149a4:	f8db 3010 	ldr.w	r3, [fp, #16]
 80149a8:	bf18      	it	ne
 80149aa:	496f      	ldrne	r1, [pc, #444]	@ (8014b68 <rcl_node_init+0x2d8>)
 80149ac:	9604      	str	r6, [sp, #16]
 80149ae:	e9cd 1502 	strd	r1, r5, [sp, #8]
 80149b2:	e9cd 3200 	strd	r3, r2, [sp]
 80149b6:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80149ba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80149be:	f001 fd65 	bl	801648c <rcutils_format_string_limit>
 80149c2:	f8c9 002c 	str.w	r0, [r9, #44]	@ 0x2c
 80149c6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80149ca:	f8d9 3000 	ldr.w	r3, [r9]
 80149ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80149d0:	1c59      	adds	r1, r3, #1
 80149d2:	f000 80b7 	beq.w	8014b44 <rcl_node_init+0x2b4>
 80149d6:	683a      	ldr	r2, [r7, #0]
 80149d8:	f8c9 301c 	str.w	r3, [r9, #28]
 80149dc:	6952      	ldr	r2, [r2, #20]
 80149de:	6821      	ldr	r1, [r4, #0]
 80149e0:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 80149e4:	6808      	ldr	r0, [r1, #0]
 80149e6:	f1a2 0201 	sub.w	r2, r2, #1
 80149ea:	fab2 f282 	clz	r2, r2
 80149ee:	0952      	lsrs	r2, r2, #5
 80149f0:	9200      	str	r2, [sp, #0]
 80149f2:	4631      	mov	r1, r6
 80149f4:	3028      	adds	r0, #40	@ 0x28
 80149f6:	462a      	mov	r2, r5
 80149f8:	f7fa fe7c 	bl	800f6f4 <rmw_create_node>
 80149fc:	6863      	ldr	r3, [r4, #4]
 80149fe:	f8c9 0020 	str.w	r0, [r9, #32]
 8014a02:	6a18      	ldr	r0, [r3, #32]
 8014a04:	b368      	cbz	r0, 8014a62 <rcl_node_init+0x1d2>
 8014a06:	f7fa ff07 	bl	800f818 <rmw_node_get_graph_guard_condition>
 8014a0a:	4681      	mov	r9, r0
 8014a0c:	b338      	cbz	r0, 8014a5e <rcl_node_init+0x1ce>
 8014a0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014a12:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014a16:	6866      	ldr	r6, [r4, #4]
 8014a18:	2008      	movs	r0, #8
 8014a1a:	4798      	blx	r3
 8014a1c:	6863      	ldr	r3, [r4, #4]
 8014a1e:	6270      	str	r0, [r6, #36]	@ 0x24
 8014a20:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8014a22:	b1f6      	cbz	r6, 8014a62 <rcl_node_init+0x1d2>
 8014a24:	a808      	add	r0, sp, #32
 8014a26:	f004 faa5 	bl	8018f74 <rcl_get_zero_initialized_guard_condition>
 8014a2a:	a808      	add	r0, sp, #32
 8014a2c:	c803      	ldmia	r0, {r0, r1}
 8014a2e:	e886 0003 	stmia.w	r6, {r0, r1}
 8014a32:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8014a36:	ae15      	add	r6, sp, #84	@ 0x54
 8014a38:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014a3a:	f8db 3000 	ldr.w	r3, [fp]
 8014a3e:	6033      	str	r3, [r6, #0]
 8014a40:	ab1a      	add	r3, sp, #104	@ 0x68
 8014a42:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014a46:	6866      	ldr	r6, [r4, #4]
 8014a48:	6a76      	ldr	r6, [r6, #36]	@ 0x24
 8014a4a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014a4e:	4649      	mov	r1, r9
 8014a50:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8014a52:	4630      	mov	r0, r6
 8014a54:	463a      	mov	r2, r7
 8014a56:	f004 fa97 	bl	8018f88 <rcl_guard_condition_init_from_rmw>
 8014a5a:	4681      	mov	r9, r0
 8014a5c:	b328      	cbz	r0, 8014aaa <rcl_node_init+0x21a>
 8014a5e:	6863      	ldr	r3, [r4, #4]
 8014a60:	b1f3      	cbz	r3, 8014aa0 <rcl_node_init+0x210>
 8014a62:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8014a64:	b128      	cbz	r0, 8014a72 <rcl_node_init+0x1e2>
 8014a66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014a6a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014a6e:	4798      	blx	r3
 8014a70:	6863      	ldr	r3, [r4, #4]
 8014a72:	6a18      	ldr	r0, [r3, #32]
 8014a74:	b110      	cbz	r0, 8014a7c <rcl_node_init+0x1ec>
 8014a76:	f7fa fe55 	bl	800f724 <rmw_destroy_node>
 8014a7a:	6863      	ldr	r3, [r4, #4]
 8014a7c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014a7e:	b148      	cbz	r0, 8014a94 <rcl_node_init+0x204>
 8014a80:	f004 fada 	bl	8019038 <rcl_guard_condition_fini>
 8014a84:	6862      	ldr	r2, [r4, #4]
 8014a86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014a8a:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8014a8c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014a90:	4798      	blx	r3
 8014a92:	6863      	ldr	r3, [r4, #4]
 8014a94:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8014a98:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	4790      	blx	r2
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	e9c4 3300 	strd	r3, r3, [r4]
 8014aa6:	f04f 0901 	mov.w	r9, #1
 8014aaa:	f1ba 0f00 	cmp.w	sl, #0
 8014aae:	d125      	bne.n	8014afc <rcl_node_init+0x26c>
 8014ab0:	e001      	b.n	8014ab6 <rcl_node_init+0x226>
 8014ab2:	f04f 090b 	mov.w	r9, #11
 8014ab6:	4648      	mov	r0, r9
 8014ab8:	b01b      	add	sp, #108	@ 0x6c
 8014aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014abe:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8014ac2:	e7f8      	b.n	8014ab6 <rcl_node_init+0x226>
 8014ac4:	782b      	ldrb	r3, [r5, #0]
 8014ac6:	2b2f      	cmp	r3, #47	@ 0x2f
 8014ac8:	f43f af2d 	beq.w	8014926 <rcl_node_init+0x96>
 8014acc:	4927      	ldr	r1, [pc, #156]	@ (8014b6c <rcl_node_init+0x2dc>)
 8014ace:	f8db 3010 	ldr.w	r3, [fp, #16]
 8014ad2:	9300      	str	r3, [sp, #0]
 8014ad4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014ad8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014adc:	9503      	str	r5, [sp, #12]
 8014ade:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8014ae2:	f001 fcd3 	bl	801648c <rcutils_format_string_limit>
 8014ae6:	4605      	mov	r5, r0
 8014ae8:	b348      	cbz	r0, 8014b3e <rcl_node_init+0x2ae>
 8014aea:	2200      	movs	r2, #0
 8014aec:	a914      	add	r1, sp, #80	@ 0x50
 8014aee:	9214      	str	r2, [sp, #80]	@ 0x50
 8014af0:	f001 fea0 	bl	8016834 <rmw_validate_namespace>
 8014af4:	4681      	mov	r9, r0
 8014af6:	2800      	cmp	r0, #0
 8014af8:	f43f af1f 	beq.w	801493a <rcl_node_init+0xaa>
 8014afc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014b00:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014b04:	4628      	mov	r0, r5
 8014b06:	4798      	blx	r3
 8014b08:	e7d5      	b.n	8014ab6 <rcl_node_init+0x226>
 8014b0a:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8014b0e:	4648      	mov	r0, r9
 8014b10:	b01b      	add	sp, #108	@ 0x6c
 8014b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b16:	f04f 090a 	mov.w	r9, #10
 8014b1a:	f1ba 0f00 	cmp.w	sl, #0
 8014b1e:	d1ed      	bne.n	8014afc <rcl_node_init+0x26c>
 8014b20:	e7c9      	b.n	8014ab6 <rcl_node_init+0x226>
 8014b22:	f001 fef7 	bl	8016914 <rmw_node_name_validation_result_string>
 8014b26:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8014b2a:	e7c4      	b.n	8014ab6 <rcl_node_init+0x226>
 8014b2c:	4618      	mov	r0, r3
 8014b2e:	f001 fe93 	bl	8016858 <rmw_namespace_validation_result_string>
 8014b32:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8014b36:	f1ba 0f00 	cmp.w	sl, #0
 8014b3a:	d1df      	bne.n	8014afc <rcl_node_init+0x26c>
 8014b3c:	e7bb      	b.n	8014ab6 <rcl_node_init+0x226>
 8014b3e:	f04f 090a 	mov.w	r9, #10
 8014b42:	e7b8      	b.n	8014ab6 <rcl_node_init+0x226>
 8014b44:	a813      	add	r0, sp, #76	@ 0x4c
 8014b46:	f004 f9e1 	bl	8018f0c <rcl_get_default_domain_id>
 8014b4a:	2800      	cmp	r0, #0
 8014b4c:	d187      	bne.n	8014a5e <rcl_node_init+0x1ce>
 8014b4e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8014b50:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014b54:	1c5a      	adds	r2, r3, #1
 8014b56:	bf04      	itt	eq
 8014b58:	9013      	streq	r0, [sp, #76]	@ 0x4c
 8014b5a:	4603      	moveq	r3, r0
 8014b5c:	e73b      	b.n	80149d6 <rcl_node_init+0x146>
 8014b5e:	bf00      	nop
 8014b60:	0801e090 	.word	0x0801e090
 8014b64:	0801e0dc 	.word	0x0801e0dc
 8014b68:	0801e094 	.word	0x0801e094
 8014b6c:	0801e344 	.word	0x0801e344

08014b70 <rcl_node_is_valid>:
 8014b70:	b130      	cbz	r0, 8014b80 <rcl_node_is_valid+0x10>
 8014b72:	6843      	ldr	r3, [r0, #4]
 8014b74:	b123      	cbz	r3, 8014b80 <rcl_node_is_valid+0x10>
 8014b76:	6a1b      	ldr	r3, [r3, #32]
 8014b78:	b113      	cbz	r3, 8014b80 <rcl_node_is_valid+0x10>
 8014b7a:	6800      	ldr	r0, [r0, #0]
 8014b7c:	f7ff bb7c 	b.w	8014278 <rcl_context_is_valid>
 8014b80:	2000      	movs	r0, #0
 8014b82:	4770      	bx	lr

08014b84 <rcl_node_get_name>:
 8014b84:	b120      	cbz	r0, 8014b90 <rcl_node_get_name+0xc>
 8014b86:	6840      	ldr	r0, [r0, #4]
 8014b88:	b110      	cbz	r0, 8014b90 <rcl_node_get_name+0xc>
 8014b8a:	6a00      	ldr	r0, [r0, #32]
 8014b8c:	b100      	cbz	r0, 8014b90 <rcl_node_get_name+0xc>
 8014b8e:	6880      	ldr	r0, [r0, #8]
 8014b90:	4770      	bx	lr
 8014b92:	bf00      	nop

08014b94 <rcl_node_get_namespace>:
 8014b94:	b120      	cbz	r0, 8014ba0 <rcl_node_get_namespace+0xc>
 8014b96:	6840      	ldr	r0, [r0, #4]
 8014b98:	b110      	cbz	r0, 8014ba0 <rcl_node_get_namespace+0xc>
 8014b9a:	6a00      	ldr	r0, [r0, #32]
 8014b9c:	b100      	cbz	r0, 8014ba0 <rcl_node_get_namespace+0xc>
 8014b9e:	68c0      	ldr	r0, [r0, #12]
 8014ba0:	4770      	bx	lr
 8014ba2:	bf00      	nop

08014ba4 <rcl_node_get_options>:
 8014ba4:	b128      	cbz	r0, 8014bb2 <rcl_node_get_options+0xe>
 8014ba6:	6840      	ldr	r0, [r0, #4]
 8014ba8:	b118      	cbz	r0, 8014bb2 <rcl_node_get_options+0xe>
 8014baa:	6a03      	ldr	r3, [r0, #32]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	bf08      	it	eq
 8014bb0:	2000      	moveq	r0, #0
 8014bb2:	4770      	bx	lr

08014bb4 <rcl_node_get_rmw_handle>:
 8014bb4:	b110      	cbz	r0, 8014bbc <rcl_node_get_rmw_handle+0x8>
 8014bb6:	6840      	ldr	r0, [r0, #4]
 8014bb8:	b100      	cbz	r0, 8014bbc <rcl_node_get_rmw_handle+0x8>
 8014bba:	6a00      	ldr	r0, [r0, #32]
 8014bbc:	4770      	bx	lr
 8014bbe:	bf00      	nop

08014bc0 <exact_match_lookup>:
 8014bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bc2:	f102 0708 	add.w	r7, r2, #8
 8014bc6:	460b      	mov	r3, r1
 8014bc8:	4614      	mov	r4, r2
 8014bca:	4606      	mov	r6, r0
 8014bcc:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014bd0:	b085      	sub	sp, #20
 8014bd2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	4918      	ldr	r1, [pc, #96]	@ (8014c3c <exact_match_lookup+0x7c>)
 8014bda:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014bde:	f001 fc47 	bl	8016470 <rcutils_join_path>
 8014be2:	7833      	ldrb	r3, [r6, #0]
 8014be4:	2b2f      	cmp	r3, #47	@ 0x2f
 8014be6:	4605      	mov	r5, r0
 8014be8:	d021      	beq.n	8014c2e <exact_match_lookup+0x6e>
 8014bea:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8014bee:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014bf2:	1c70      	adds	r0, r6, #1
 8014bf4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014bf8:	f001 fc40 	bl	801647c <rcutils_to_native_path>
 8014bfc:	4606      	mov	r6, r0
 8014bfe:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014c02:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014c06:	4631      	mov	r1, r6
 8014c08:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014c0c:	4628      	mov	r0, r5
 8014c0e:	f001 fc2f 	bl	8016470 <rcutils_join_path>
 8014c12:	6862      	ldr	r2, [r4, #4]
 8014c14:	6921      	ldr	r1, [r4, #16]
 8014c16:	4603      	mov	r3, r0
 8014c18:	4630      	mov	r0, r6
 8014c1a:	461e      	mov	r6, r3
 8014c1c:	4790      	blx	r2
 8014c1e:	4628      	mov	r0, r5
 8014c20:	6863      	ldr	r3, [r4, #4]
 8014c22:	6921      	ldr	r1, [r4, #16]
 8014c24:	4798      	blx	r3
 8014c26:	4635      	mov	r5, r6
 8014c28:	4628      	mov	r0, r5
 8014c2a:	b005      	add	sp, #20
 8014c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c2e:	7873      	ldrb	r3, [r6, #1]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d1da      	bne.n	8014bea <exact_match_lookup+0x2a>
 8014c34:	4628      	mov	r0, r5
 8014c36:	b005      	add	sp, #20
 8014c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c3a:	bf00      	nop
 8014c3c:	0801e38c 	.word	0x0801e38c

08014c40 <rcl_get_secure_root>:
 8014c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c44:	b085      	sub	sp, #20
 8014c46:	b168      	cbz	r0, 8014c64 <rcl_get_secure_root+0x24>
 8014c48:	4607      	mov	r7, r0
 8014c4a:	4608      	mov	r0, r1
 8014c4c:	460c      	mov	r4, r1
 8014c4e:	f7fa f825 	bl	800ec9c <rcutils_allocator_is_valid>
 8014c52:	b138      	cbz	r0, 8014c64 <rcl_get_secure_root+0x24>
 8014c54:	2300      	movs	r3, #0
 8014c56:	482d      	ldr	r0, [pc, #180]	@ (8014d0c <rcl_get_secure_root+0xcc>)
 8014c58:	9303      	str	r3, [sp, #12]
 8014c5a:	a903      	add	r1, sp, #12
 8014c5c:	f001 fc50 	bl	8016500 <rcutils_get_env>
 8014c60:	4605      	mov	r5, r0
 8014c62:	b120      	cbz	r0, 8014c6e <rcl_get_secure_root+0x2e>
 8014c64:	2500      	movs	r5, #0
 8014c66:	4628      	mov	r0, r5
 8014c68:	b005      	add	sp, #20
 8014c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014c6e:	9b03      	ldr	r3, [sp, #12]
 8014c70:	781a      	ldrb	r2, [r3, #0]
 8014c72:	2a00      	cmp	r2, #0
 8014c74:	d0f6      	beq.n	8014c64 <rcl_get_secure_root+0x24>
 8014c76:	f104 090c 	add.w	r9, r4, #12
 8014c7a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014c7e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014c82:	4618      	mov	r0, r3
 8014c84:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014c88:	f001 fd2a 	bl	80166e0 <rcutils_strdup>
 8014c8c:	4680      	mov	r8, r0
 8014c8e:	2800      	cmp	r0, #0
 8014c90:	d0e8      	beq.n	8014c64 <rcl_get_secure_root+0x24>
 8014c92:	481f      	ldr	r0, [pc, #124]	@ (8014d10 <rcl_get_secure_root+0xd0>)
 8014c94:	9503      	str	r5, [sp, #12]
 8014c96:	a903      	add	r1, sp, #12
 8014c98:	f001 fc32 	bl	8016500 <rcutils_get_env>
 8014c9c:	b160      	cbz	r0, 8014cb8 <rcl_get_secure_root+0x78>
 8014c9e:	2600      	movs	r6, #0
 8014ca0:	6863      	ldr	r3, [r4, #4]
 8014ca2:	6921      	ldr	r1, [r4, #16]
 8014ca4:	4630      	mov	r0, r6
 8014ca6:	4798      	blx	r3
 8014ca8:	4640      	mov	r0, r8
 8014caa:	6863      	ldr	r3, [r4, #4]
 8014cac:	6921      	ldr	r1, [r4, #16]
 8014cae:	4798      	blx	r3
 8014cb0:	4628      	mov	r0, r5
 8014cb2:	b005      	add	sp, #20
 8014cb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014cb8:	9b03      	ldr	r3, [sp, #12]
 8014cba:	781e      	ldrb	r6, [r3, #0]
 8014cbc:	b1f6      	cbz	r6, 8014cfc <rcl_get_secure_root+0xbc>
 8014cbe:	e899 0003 	ldmia.w	r9, {r0, r1}
 8014cc2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014ccc:	f001 fd08 	bl	80166e0 <rcutils_strdup>
 8014cd0:	4606      	mov	r6, r0
 8014cd2:	2800      	cmp	r0, #0
 8014cd4:	d0e3      	beq.n	8014c9e <rcl_get_secure_root+0x5e>
 8014cd6:	4622      	mov	r2, r4
 8014cd8:	4641      	mov	r1, r8
 8014cda:	f7ff ff71 	bl	8014bc0 <exact_match_lookup>
 8014cde:	4605      	mov	r5, r0
 8014ce0:	2d00      	cmp	r5, #0
 8014ce2:	d0dd      	beq.n	8014ca0 <rcl_get_secure_root+0x60>
 8014ce4:	4628      	mov	r0, r5
 8014ce6:	f001 fbc1 	bl	801646c <rcutils_is_directory>
 8014cea:	4607      	mov	r7, r0
 8014cec:	2800      	cmp	r0, #0
 8014cee:	d1d7      	bne.n	8014ca0 <rcl_get_secure_root+0x60>
 8014cf0:	4628      	mov	r0, r5
 8014cf2:	6863      	ldr	r3, [r4, #4]
 8014cf4:	6921      	ldr	r1, [r4, #16]
 8014cf6:	4798      	blx	r3
 8014cf8:	463d      	mov	r5, r7
 8014cfa:	e7d1      	b.n	8014ca0 <rcl_get_secure_root+0x60>
 8014cfc:	4638      	mov	r0, r7
 8014cfe:	4622      	mov	r2, r4
 8014d00:	4641      	mov	r1, r8
 8014d02:	f7ff ff5d 	bl	8014bc0 <exact_match_lookup>
 8014d06:	4605      	mov	r5, r0
 8014d08:	e7ea      	b.n	8014ce0 <rcl_get_secure_root+0xa0>
 8014d0a:	bf00      	nop
 8014d0c:	0801e398 	.word	0x0801e398
 8014d10:	0801e3b0 	.word	0x0801e3b0

08014d14 <rcl_get_security_options_from_environment>:
 8014d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d18:	b082      	sub	sp, #8
 8014d1a:	4607      	mov	r7, r0
 8014d1c:	4688      	mov	r8, r1
 8014d1e:	2400      	movs	r4, #0
 8014d20:	481d      	ldr	r0, [pc, #116]	@ (8014d98 <rcl_get_security_options_from_environment+0x84>)
 8014d22:	9401      	str	r4, [sp, #4]
 8014d24:	a901      	add	r1, sp, #4
 8014d26:	4616      	mov	r6, r2
 8014d28:	f001 fbea 	bl	8016500 <rcutils_get_env>
 8014d2c:	b120      	cbz	r0, 8014d38 <rcl_get_security_options_from_environment+0x24>
 8014d2e:	2501      	movs	r5, #1
 8014d30:	4628      	mov	r0, r5
 8014d32:	b002      	add	sp, #8
 8014d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d38:	4918      	ldr	r1, [pc, #96]	@ (8014d9c <rcl_get_security_options_from_environment+0x88>)
 8014d3a:	4604      	mov	r4, r0
 8014d3c:	9801      	ldr	r0, [sp, #4]
 8014d3e:	f7eb fa4f 	bl	80001e0 <strcmp>
 8014d42:	4605      	mov	r5, r0
 8014d44:	b9c8      	cbnz	r0, 8014d7a <rcl_get_security_options_from_environment+0x66>
 8014d46:	9001      	str	r0, [sp, #4]
 8014d48:	b1ee      	cbz	r6, 8014d86 <rcl_get_security_options_from_environment+0x72>
 8014d4a:	4815      	ldr	r0, [pc, #84]	@ (8014da0 <rcl_get_security_options_from_environment+0x8c>)
 8014d4c:	a901      	add	r1, sp, #4
 8014d4e:	f001 fbd7 	bl	8016500 <rcutils_get_env>
 8014d52:	2800      	cmp	r0, #0
 8014d54:	d1eb      	bne.n	8014d2e <rcl_get_security_options_from_environment+0x1a>
 8014d56:	4913      	ldr	r1, [pc, #76]	@ (8014da4 <rcl_get_security_options_from_environment+0x90>)
 8014d58:	9801      	ldr	r0, [sp, #4]
 8014d5a:	f7eb fa41 	bl	80001e0 <strcmp>
 8014d5e:	fab0 f080 	clz	r0, r0
 8014d62:	0940      	lsrs	r0, r0, #5
 8014d64:	7030      	strb	r0, [r6, #0]
 8014d66:	4641      	mov	r1, r8
 8014d68:	4638      	mov	r0, r7
 8014d6a:	f7ff ff69 	bl	8014c40 <rcl_get_secure_root>
 8014d6e:	b160      	cbz	r0, 8014d8a <rcl_get_security_options_from_environment+0x76>
 8014d70:	6070      	str	r0, [r6, #4]
 8014d72:	4628      	mov	r0, r5
 8014d74:	b002      	add	sp, #8
 8014d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d7a:	4625      	mov	r5, r4
 8014d7c:	4628      	mov	r0, r5
 8014d7e:	7034      	strb	r4, [r6, #0]
 8014d80:	b002      	add	sp, #8
 8014d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d86:	250b      	movs	r5, #11
 8014d88:	e7d2      	b.n	8014d30 <rcl_get_security_options_from_environment+0x1c>
 8014d8a:	7835      	ldrb	r5, [r6, #0]
 8014d8c:	f1a5 0501 	sub.w	r5, r5, #1
 8014d90:	fab5 f585 	clz	r5, r5
 8014d94:	096d      	lsrs	r5, r5, #5
 8014d96:	e7cb      	b.n	8014d30 <rcl_get_security_options_from_environment+0x1c>
 8014d98:	0801e350 	.word	0x0801e350
 8014d9c:	0801e364 	.word	0x0801e364
 8014da0:	0801e36c 	.word	0x0801e36c
 8014da4:	0801e384 	.word	0x0801e384

08014da8 <rcl_service_get_rmw_handle>:
 8014da8:	b110      	cbz	r0, 8014db0 <rcl_service_get_rmw_handle+0x8>
 8014daa:	6800      	ldr	r0, [r0, #0]
 8014dac:	b100      	cbz	r0, 8014db0 <rcl_service_get_rmw_handle+0x8>
 8014dae:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014db0:	4770      	bx	lr
 8014db2:	bf00      	nop

08014db4 <rcl_take_request>:
 8014db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014db6:	460e      	mov	r6, r1
 8014db8:	460c      	mov	r4, r1
 8014dba:	4607      	mov	r7, r0
 8014dbc:	4694      	mov	ip, r2
 8014dbe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014dc0:	b08d      	sub	sp, #52	@ 0x34
 8014dc2:	ad06      	add	r5, sp, #24
 8014dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014dc6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014dca:	e885 0003 	stmia.w	r5, {r0, r1}
 8014dce:	b1e7      	cbz	r7, 8014e0a <rcl_take_request+0x56>
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	b1d3      	cbz	r3, 8014e0a <rcl_take_request+0x56>
 8014dd4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014dd6:	b1c0      	cbz	r0, 8014e0a <rcl_take_request+0x56>
 8014dd8:	4662      	mov	r2, ip
 8014dda:	b30a      	cbz	r2, 8014e20 <rcl_take_request+0x6c>
 8014ddc:	2500      	movs	r5, #0
 8014dde:	f10d 0307 	add.w	r3, sp, #7
 8014de2:	a902      	add	r1, sp, #8
 8014de4:	f88d 5007 	strb.w	r5, [sp, #7]
 8014de8:	f001 ff76 	bl	8016cd8 <rmw_take_request>
 8014dec:	4606      	mov	r6, r0
 8014dee:	b178      	cbz	r0, 8014e10 <rcl_take_request+0x5c>
 8014df0:	280a      	cmp	r0, #10
 8014df2:	bf18      	it	ne
 8014df4:	2601      	movne	r6, #1
 8014df6:	ad06      	add	r5, sp, #24
 8014df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014dfc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014e00:	e884 0003 	stmia.w	r4, {r0, r1}
 8014e04:	4630      	mov	r0, r6
 8014e06:	b00d      	add	sp, #52	@ 0x34
 8014e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e0a:	f44f 7616 	mov.w	r6, #600	@ 0x258
 8014e0e:	e7f2      	b.n	8014df6 <rcl_take_request+0x42>
 8014e10:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014e14:	f240 2359 	movw	r3, #601	@ 0x259
 8014e18:	2a00      	cmp	r2, #0
 8014e1a:	bf08      	it	eq
 8014e1c:	461e      	moveq	r6, r3
 8014e1e:	e7ea      	b.n	8014df6 <rcl_take_request+0x42>
 8014e20:	260b      	movs	r6, #11
 8014e22:	e7e8      	b.n	8014df6 <rcl_take_request+0x42>

08014e24 <rcl_send_response>:
 8014e24:	b160      	cbz	r0, 8014e40 <rcl_send_response+0x1c>
 8014e26:	6800      	ldr	r0, [r0, #0]
 8014e28:	b150      	cbz	r0, 8014e40 <rcl_send_response+0x1c>
 8014e2a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014e2c:	b140      	cbz	r0, 8014e40 <rcl_send_response+0x1c>
 8014e2e:	b151      	cbz	r1, 8014e46 <rcl_send_response+0x22>
 8014e30:	b510      	push	{r4, lr}
 8014e32:	b152      	cbz	r2, 8014e4a <rcl_send_response+0x26>
 8014e34:	f001 ffae 	bl	8016d94 <rmw_send_response>
 8014e38:	3800      	subs	r0, #0
 8014e3a:	bf18      	it	ne
 8014e3c:	2001      	movne	r0, #1
 8014e3e:	bd10      	pop	{r4, pc}
 8014e40:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014e44:	4770      	bx	lr
 8014e46:	200b      	movs	r0, #11
 8014e48:	4770      	bx	lr
 8014e4a:	200b      	movs	r0, #11
 8014e4c:	bd10      	pop	{r4, pc}
 8014e4e:	bf00      	nop

08014e50 <rcl_get_zero_initialized_subscription>:
 8014e50:	4b01      	ldr	r3, [pc, #4]	@ (8014e58 <rcl_get_zero_initialized_subscription+0x8>)
 8014e52:	6818      	ldr	r0, [r3, #0]
 8014e54:	4770      	bx	lr
 8014e56:	bf00      	nop
 8014e58:	0801e3d0 	.word	0x0801e3d0

08014e5c <rcl_subscription_init>:
 8014e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e60:	b091      	sub	sp, #68	@ 0x44
 8014e62:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8014e64:	b1d7      	cbz	r7, 8014e9c <rcl_subscription_init+0x40>
 8014e66:	f107 0950 	add.w	r9, r7, #80	@ 0x50
 8014e6a:	4604      	mov	r4, r0
 8014e6c:	4648      	mov	r0, r9
 8014e6e:	4688      	mov	r8, r1
 8014e70:	4616      	mov	r6, r2
 8014e72:	461d      	mov	r5, r3
 8014e74:	f7f9 ff12 	bl	800ec9c <rcutils_allocator_is_valid>
 8014e78:	b180      	cbz	r0, 8014e9c <rcl_subscription_init+0x40>
 8014e7a:	b17c      	cbz	r4, 8014e9c <rcl_subscription_init+0x40>
 8014e7c:	4640      	mov	r0, r8
 8014e7e:	f7ff fe77 	bl	8014b70 <rcl_node_is_valid>
 8014e82:	b380      	cbz	r0, 8014ee6 <rcl_subscription_init+0x8a>
 8014e84:	b156      	cbz	r6, 8014e9c <rcl_subscription_init+0x40>
 8014e86:	b14d      	cbz	r5, 8014e9c <rcl_subscription_init+0x40>
 8014e88:	f8d4 a000 	ldr.w	sl, [r4]
 8014e8c:	f1ba 0f00 	cmp.w	sl, #0
 8014e90:	d009      	beq.n	8014ea6 <rcl_subscription_init+0x4a>
 8014e92:	2564      	movs	r5, #100	@ 0x64
 8014e94:	4628      	mov	r0, r5
 8014e96:	b011      	add	sp, #68	@ 0x44
 8014e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e9c:	250b      	movs	r5, #11
 8014e9e:	4628      	mov	r0, r5
 8014ea0:	b011      	add	sp, #68	@ 0x44
 8014ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ea6:	46ce      	mov	lr, r9
 8014ea8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014eac:	f10d 0c2c 	add.w	ip, sp, #44	@ 0x2c
 8014eb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014eb4:	f8de 3000 	ldr.w	r3, [lr]
 8014eb8:	f8cc 3000 	str.w	r3, [ip]
 8014ebc:	f7f9 ff2a 	bl	800ed14 <rcutils_get_zero_initialized_string_map>
 8014ec0:	ab10      	add	r3, sp, #64	@ 0x40
 8014ec2:	4684      	mov	ip, r0
 8014ec4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014ec8:	f8cd c020 	str.w	ip, [sp, #32]
 8014ecc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014ed0:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8014ed4:	4651      	mov	r1, sl
 8014ed6:	a808      	add	r0, sp, #32
 8014ed8:	f7f9 ff96 	bl	800ee08 <rcutils_string_map_init>
 8014edc:	b140      	cbz	r0, 8014ef0 <rcl_subscription_init+0x94>
 8014ede:	280a      	cmp	r0, #10
 8014ee0:	d011      	beq.n	8014f06 <rcl_subscription_init+0xaa>
 8014ee2:	2501      	movs	r5, #1
 8014ee4:	e7db      	b.n	8014e9e <rcl_subscription_init+0x42>
 8014ee6:	25c8      	movs	r5, #200	@ 0xc8
 8014ee8:	4628      	mov	r0, r5
 8014eea:	b011      	add	sp, #68	@ 0x44
 8014eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ef0:	a808      	add	r0, sp, #32
 8014ef2:	f7ff fb91 	bl	8014618 <rcl_get_default_topic_name_substitutions>
 8014ef6:	4682      	mov	sl, r0
 8014ef8:	b138      	cbz	r0, 8014f0a <rcl_subscription_init+0xae>
 8014efa:	a808      	add	r0, sp, #32
 8014efc:	f7f9 ffc4 	bl	800ee88 <rcutils_string_map_fini>
 8014f00:	f1ba 0f0a 	cmp.w	sl, #10
 8014f04:	d1ed      	bne.n	8014ee2 <rcl_subscription_init+0x86>
 8014f06:	250a      	movs	r5, #10
 8014f08:	e7c9      	b.n	8014e9e <rcl_subscription_init+0x42>
 8014f0a:	4640      	mov	r0, r8
 8014f0c:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8014f10:	f7ff fe38 	bl	8014b84 <rcl_node_get_name>
 8014f14:	4682      	mov	sl, r0
 8014f16:	4640      	mov	r0, r8
 8014f18:	f7ff fe3c 	bl	8014b94 <rcl_node_get_namespace>
 8014f1c:	4686      	mov	lr, r0
 8014f1e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
 8014f22:	f10d 0b24 	add.w	fp, sp, #36	@ 0x24
 8014f26:	46ec      	mov	ip, sp
 8014f28:	f8cd b014 	str.w	fp, [sp, #20]
 8014f2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f30:	f8d9 3000 	ldr.w	r3, [r9]
 8014f34:	f8cc 3000 	str.w	r3, [ip]
 8014f38:	4628      	mov	r0, r5
 8014f3a:	4651      	mov	r1, sl
 8014f3c:	4672      	mov	r2, lr
 8014f3e:	ab08      	add	r3, sp, #32
 8014f40:	f7ff fa04 	bl	801434c <rcl_expand_topic_name>
 8014f44:	4605      	mov	r5, r0
 8014f46:	a808      	add	r0, sp, #32
 8014f48:	f7f9 ff9e 	bl	800ee88 <rcutils_string_map_fini>
 8014f4c:	b920      	cbnz	r0, 8014f58 <rcl_subscription_init+0xfc>
 8014f4e:	b15d      	cbz	r5, 8014f68 <rcl_subscription_init+0x10c>
 8014f50:	2d67      	cmp	r5, #103	@ 0x67
 8014f52:	d002      	beq.n	8014f5a <rcl_subscription_init+0xfe>
 8014f54:	2d69      	cmp	r5, #105	@ 0x69
 8014f56:	d05a      	beq.n	801500e <rcl_subscription_init+0x1b2>
 8014f58:	2501      	movs	r5, #1
 8014f5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014f5c:	2800      	cmp	r0, #0
 8014f5e:	d09e      	beq.n	8014e9e <rcl_subscription_init+0x42>
 8014f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014f62:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014f64:	4798      	blx	r3
 8014f66:	e79a      	b.n	8014e9e <rcl_subscription_init+0x42>
 8014f68:	4640      	mov	r0, r8
 8014f6a:	f7ff fe1b 	bl	8014ba4 <rcl_node_get_options>
 8014f6e:	2800      	cmp	r0, #0
 8014f70:	d0f2      	beq.n	8014f58 <rcl_subscription_init+0xfc>
 8014f72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014f74:	f7eb f994 	bl	80002a0 <strlen>
 8014f78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014f7a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014f7c:	3001      	adds	r0, #1
 8014f7e:	4798      	blx	r3
 8014f80:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014f82:	9107      	str	r1, [sp, #28]
 8014f84:	4681      	mov	r9, r0
 8014f86:	4608      	mov	r0, r1
 8014f88:	f7eb f98a 	bl	80002a0 <strlen>
 8014f8c:	9907      	ldr	r1, [sp, #28]
 8014f8e:	1c42      	adds	r2, r0, #1
 8014f90:	4648      	mov	r0, r9
 8014f92:	f005 fd3a 	bl	801aa0a <memcpy>
 8014f96:	462a      	mov	r2, r5
 8014f98:	4648      	mov	r0, r9
 8014f9a:	a90a      	add	r1, sp, #40	@ 0x28
 8014f9c:	f7fa f850 	bl	800f040 <rmw_validate_full_topic_name>
 8014fa0:	2800      	cmp	r0, #0
 8014fa2:	d132      	bne.n	801500a <rcl_subscription_init+0x1ae>
 8014fa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d133      	bne.n	8015012 <rcl_subscription_init+0x1b6>
 8014faa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014fac:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014fae:	20c8      	movs	r0, #200	@ 0xc8
 8014fb0:	4798      	blx	r3
 8014fb2:	6020      	str	r0, [r4, #0]
 8014fb4:	b378      	cbz	r0, 8015016 <rcl_subscription_init+0x1ba>
 8014fb6:	4640      	mov	r0, r8
 8014fb8:	f7ff fdfc 	bl	8014bb4 <rcl_node_get_rmw_handle>
 8014fbc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8014fc0:	9300      	str	r3, [sp, #0]
 8014fc2:	4631      	mov	r1, r6
 8014fc4:	463b      	mov	r3, r7
 8014fc6:	464a      	mov	r2, r9
 8014fc8:	6825      	ldr	r5, [r4, #0]
 8014fca:	f7fa fe03 	bl	800fbd4 <rmw_create_subscription>
 8014fce:	6821      	ldr	r1, [r4, #0]
 8014fd0:	f8c5 00c0 	str.w	r0, [r5, #192]	@ 0xc0
 8014fd4:	f8d1 00c0 	ldr.w	r0, [r1, #192]	@ 0xc0
 8014fd8:	b368      	cbz	r0, 8015036 <rcl_subscription_init+0x1da>
 8014fda:	3170      	adds	r1, #112	@ 0x70
 8014fdc:	f7fa feda 	bl	800fd94 <rmw_subscription_get_actual_qos>
 8014fe0:	4605      	mov	r5, r0
 8014fe2:	b9d0      	cbnz	r0, 801501a <rcl_subscription_init+0x1be>
 8014fe4:	6820      	ldr	r0, [r4, #0]
 8014fe6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8014fea:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8014fee:	2270      	movs	r2, #112	@ 0x70
 8014ff0:	4639      	mov	r1, r7
 8014ff2:	f005 fd0a 	bl	801aa0a <memcpy>
 8014ff6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014ff8:	b110      	cbz	r0, 8015000 <rcl_subscription_init+0x1a4>
 8014ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014ffc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8014ffe:	4798      	blx	r3
 8015000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015002:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8015004:	4648      	mov	r0, r9
 8015006:	4798      	blx	r3
 8015008:	e749      	b.n	8014e9e <rcl_subscription_init+0x42>
 801500a:	2501      	movs	r5, #1
 801500c:	e7f3      	b.n	8014ff6 <rcl_subscription_init+0x19a>
 801500e:	2567      	movs	r5, #103	@ 0x67
 8015010:	e7a3      	b.n	8014f5a <rcl_subscription_init+0xfe>
 8015012:	2567      	movs	r5, #103	@ 0x67
 8015014:	e7ef      	b.n	8014ff6 <rcl_subscription_init+0x19a>
 8015016:	250a      	movs	r5, #10
 8015018:	e7ed      	b.n	8014ff6 <rcl_subscription_init+0x19a>
 801501a:	6823      	ldr	r3, [r4, #0]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d0f4      	beq.n	801500a <rcl_subscription_init+0x1ae>
 8015020:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8015024:	b13b      	cbz	r3, 8015036 <rcl_subscription_init+0x1da>
 8015026:	4640      	mov	r0, r8
 8015028:	f7ff fdc4 	bl	8014bb4 <rcl_node_get_rmw_handle>
 801502c:	6823      	ldr	r3, [r4, #0]
 801502e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8015032:	f7fa feb1 	bl	800fd98 <rmw_destroy_subscription>
 8015036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015038:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801503a:	6820      	ldr	r0, [r4, #0]
 801503c:	4798      	blx	r3
 801503e:	2300      	movs	r3, #0
 8015040:	6023      	str	r3, [r4, #0]
 8015042:	2501      	movs	r5, #1
 8015044:	e7d7      	b.n	8014ff6 <rcl_subscription_init+0x19a>
 8015046:	bf00      	nop

08015048 <rcl_subscription_get_default_options>:
 8015048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801504c:	4f12      	ldr	r7, [pc, #72]	@ (8015098 <rcl_subscription_get_default_options+0x50>)
 801504e:	4913      	ldr	r1, [pc, #76]	@ (801509c <rcl_subscription_get_default_options+0x54>)
 8015050:	b088      	sub	sp, #32
 8015052:	4606      	mov	r6, r0
 8015054:	2250      	movs	r2, #80	@ 0x50
 8015056:	4638      	mov	r0, r7
 8015058:	f005 fcd7 	bl	801aa0a <memcpy>
 801505c:	ac02      	add	r4, sp, #8
 801505e:	a802      	add	r0, sp, #8
 8015060:	f7f9 fe0e 	bl	800ec80 <rcutils_get_default_allocator>
 8015064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015066:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 801506a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801506c:	46e8      	mov	r8, sp
 801506e:	6823      	ldr	r3, [r4, #0]
 8015070:	602b      	str	r3, [r5, #0]
 8015072:	4640      	mov	r0, r8
 8015074:	f001 fb7a 	bl	801676c <rmw_get_default_subscription_options>
 8015078:	e898 0003 	ldmia.w	r8, {r0, r1}
 801507c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8015080:	e883 0003 	stmia.w	r3, {r0, r1}
 8015084:	2270      	movs	r2, #112	@ 0x70
 8015086:	4639      	mov	r1, r7
 8015088:	4630      	mov	r0, r6
 801508a:	f005 fcbe 	bl	801aa0a <memcpy>
 801508e:	4630      	mov	r0, r6
 8015090:	b008      	add	sp, #32
 8015092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015096:	bf00      	nop
 8015098:	20009d70 	.word	0x20009d70
 801509c:	0801e3d8 	.word	0x0801e3d8

080150a0 <rcl_take>:
 80150a0:	2800      	cmp	r0, #0
 80150a2:	d03f      	beq.n	8015124 <rcl_take+0x84>
 80150a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150a8:	4617      	mov	r7, r2
 80150aa:	6802      	ldr	r2, [r0, #0]
 80150ac:	b09d      	sub	sp, #116	@ 0x74
 80150ae:	4606      	mov	r6, r0
 80150b0:	b382      	cbz	r2, 8015114 <rcl_take+0x74>
 80150b2:	4699      	mov	r9, r3
 80150b4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80150b8:	b363      	cbz	r3, 8015114 <rcl_take+0x74>
 80150ba:	4688      	mov	r8, r1
 80150bc:	b381      	cbz	r1, 8015120 <rcl_take+0x80>
 80150be:	2f00      	cmp	r7, #0
 80150c0:	d034      	beq.n	801512c <rcl_take+0x8c>
 80150c2:	a802      	add	r0, sp, #8
 80150c4:	ac02      	add	r4, sp, #8
 80150c6:	f001 fb55 	bl	8016774 <rmw_get_zero_initialized_message_info>
 80150ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80150cc:	463d      	mov	r5, r7
 80150ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80150d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80150d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80150d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80150d8:	6834      	ldr	r4, [r6, #0]
 80150da:	f8d4 60c0 	ldr.w	r6, [r4, #192]	@ 0xc0
 80150de:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80150e2:	2400      	movs	r4, #0
 80150e4:	463b      	mov	r3, r7
 80150e6:	4630      	mov	r0, r6
 80150e8:	f8cd 9000 	str.w	r9, [sp]
 80150ec:	4641      	mov	r1, r8
 80150ee:	f10d 023f 	add.w	r2, sp, #63	@ 0x3f
 80150f2:	f88d 403f 	strb.w	r4, [sp, #63]	@ 0x3f
 80150f6:	f001 fef7 	bl	8016ee8 <rmw_take_with_info>
 80150fa:	4603      	mov	r3, r0
 80150fc:	b9c0      	cbnz	r0, 8015130 <rcl_take+0x90>
 80150fe:	f89d 103f 	ldrb.w	r1, [sp, #63]	@ 0x3f
 8015102:	f240 1291 	movw	r2, #401	@ 0x191
 8015106:	2900      	cmp	r1, #0
 8015108:	bf08      	it	eq
 801510a:	4613      	moveq	r3, r2
 801510c:	4618      	mov	r0, r3
 801510e:	b01d      	add	sp, #116	@ 0x74
 8015110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015114:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015118:	4618      	mov	r0, r3
 801511a:	b01d      	add	sp, #116	@ 0x74
 801511c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015120:	230b      	movs	r3, #11
 8015122:	e7f3      	b.n	801510c <rcl_take+0x6c>
 8015124:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8015128:	4618      	mov	r0, r3
 801512a:	4770      	bx	lr
 801512c:	af10      	add	r7, sp, #64	@ 0x40
 801512e:	e7c8      	b.n	80150c2 <rcl_take+0x22>
 8015130:	f7ff f884 	bl	801423c <rcl_convert_rmw_ret_to_rcl_ret>
 8015134:	4603      	mov	r3, r0
 8015136:	e7e9      	b.n	801510c <rcl_take+0x6c>

08015138 <rcl_subscription_get_rmw_handle>:
 8015138:	b118      	cbz	r0, 8015142 <rcl_subscription_get_rmw_handle+0xa>
 801513a:	6800      	ldr	r0, [r0, #0]
 801513c:	b108      	cbz	r0, 8015142 <rcl_subscription_get_rmw_handle+0xa>
 801513e:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8015142:	4770      	bx	lr

08015144 <rcl_get_system_time>:
 8015144:	4608      	mov	r0, r1
 8015146:	f7f9 bf15 	b.w	800ef74 <rcutils_system_time_now>
 801514a:	bf00      	nop

0801514c <rcl_get_steady_time>:
 801514c:	4608      	mov	r0, r1
 801514e:	f7f9 bf39 	b.w	800efc4 <rcutils_steady_time_now>
 8015152:	bf00      	nop

08015154 <rcl_get_ros_time>:
 8015154:	7a03      	ldrb	r3, [r0, #8]
 8015156:	b510      	push	{r4, lr}
 8015158:	460c      	mov	r4, r1
 801515a:	b133      	cbz	r3, 801516a <rcl_get_ros_time+0x16>
 801515c:	2105      	movs	r1, #5
 801515e:	f001 f8e3 	bl	8016328 <__atomic_load_8>
 8015162:	e9c4 0100 	strd	r0, r1, [r4]
 8015166:	2000      	movs	r0, #0
 8015168:	bd10      	pop	{r4, pc}
 801516a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801516e:	4608      	mov	r0, r1
 8015170:	f7f9 bf00 	b.w	800ef74 <rcutils_system_time_now>

08015174 <rcl_clock_init>:
 8015174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015178:	4606      	mov	r6, r0
 801517a:	4610      	mov	r0, r2
 801517c:	4614      	mov	r4, r2
 801517e:	460d      	mov	r5, r1
 8015180:	f7f9 fd8c 	bl	800ec9c <rcutils_allocator_is_valid>
 8015184:	b128      	cbz	r0, 8015192 <rcl_clock_init+0x1e>
 8015186:	2e03      	cmp	r6, #3
 8015188:	d803      	bhi.n	8015192 <rcl_clock_init+0x1e>
 801518a:	e8df f006 	tbb	[pc, r6]
 801518e:	2c1b      	.short	0x2c1b
 8015190:	0554      	.short	0x0554
 8015192:	200b      	movs	r0, #11
 8015194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015198:	2d00      	cmp	r5, #0
 801519a:	d0fa      	beq.n	8015192 <rcl_clock_init+0x1e>
 801519c:	2c00      	cmp	r4, #0
 801519e:	d0f8      	beq.n	8015192 <rcl_clock_init+0x1e>
 80151a0:	2600      	movs	r6, #0
 80151a2:	702e      	strb	r6, [r5, #0]
 80151a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80151a6:	f105 0714 	add.w	r7, r5, #20
 80151aa:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80151ae:	612e      	str	r6, [r5, #16]
 80151b0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80151b2:	6823      	ldr	r3, [r4, #0]
 80151b4:	603b      	str	r3, [r7, #0]
 80151b6:	2303      	movs	r3, #3
 80151b8:	4a2b      	ldr	r2, [pc, #172]	@ (8015268 <rcl_clock_init+0xf4>)
 80151ba:	702b      	strb	r3, [r5, #0]
 80151bc:	4630      	mov	r0, r6
 80151be:	60ea      	str	r2, [r5, #12]
 80151c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80151c4:	2d00      	cmp	r5, #0
 80151c6:	d0e4      	beq.n	8015192 <rcl_clock_init+0x1e>
 80151c8:	2600      	movs	r6, #0
 80151ca:	702e      	strb	r6, [r5, #0]
 80151cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80151ce:	f105 0714 	add.w	r7, r5, #20
 80151d2:	e9c5 6601 	strd	r6, r6, [r5, #4]
 80151d6:	e9c5 6603 	strd	r6, r6, [r5, #12]
 80151da:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80151dc:	6823      	ldr	r3, [r4, #0]
 80151de:	603b      	str	r3, [r7, #0]
 80151e0:	4630      	mov	r0, r6
 80151e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80151e6:	2d00      	cmp	r5, #0
 80151e8:	d0d3      	beq.n	8015192 <rcl_clock_init+0x1e>
 80151ea:	2c00      	cmp	r4, #0
 80151ec:	d0d1      	beq.n	8015192 <rcl_clock_init+0x1e>
 80151ee:	2600      	movs	r6, #0
 80151f0:	702e      	strb	r6, [r5, #0]
 80151f2:	46a4      	mov	ip, r4
 80151f4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80151f8:	f105 0714 	add.w	r7, r5, #20
 80151fc:	e9c5 6601 	strd	r6, r6, [r5, #4]
 8015200:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8015204:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015206:	f8dc 3000 	ldr.w	r3, [ip]
 801520a:	603b      	str	r3, [r7, #0]
 801520c:	6921      	ldr	r1, [r4, #16]
 801520e:	6823      	ldr	r3, [r4, #0]
 8015210:	2010      	movs	r0, #16
 8015212:	4798      	blx	r3
 8015214:	4603      	mov	r3, r0
 8015216:	6128      	str	r0, [r5, #16]
 8015218:	b318      	cbz	r0, 8015262 <rcl_clock_init+0xee>
 801521a:	f04f 0800 	mov.w	r8, #0
 801521e:	f04f 0900 	mov.w	r9, #0
 8015222:	7206      	strb	r6, [r0, #8]
 8015224:	e9c3 8900 	strd	r8, r9, [r3]
 8015228:	2301      	movs	r3, #1
 801522a:	4a10      	ldr	r2, [pc, #64]	@ (801526c <rcl_clock_init+0xf8>)
 801522c:	702b      	strb	r3, [r5, #0]
 801522e:	4630      	mov	r0, r6
 8015230:	60ea      	str	r2, [r5, #12]
 8015232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015236:	2d00      	cmp	r5, #0
 8015238:	d0ab      	beq.n	8015192 <rcl_clock_init+0x1e>
 801523a:	2c00      	cmp	r4, #0
 801523c:	d0a9      	beq.n	8015192 <rcl_clock_init+0x1e>
 801523e:	2600      	movs	r6, #0
 8015240:	702e      	strb	r6, [r5, #0]
 8015242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015244:	f105 0714 	add.w	r7, r5, #20
 8015248:	e9c5 6601 	strd	r6, r6, [r5, #4]
 801524c:	612e      	str	r6, [r5, #16]
 801524e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015250:	6823      	ldr	r3, [r4, #0]
 8015252:	603b      	str	r3, [r7, #0]
 8015254:	2302      	movs	r3, #2
 8015256:	4a06      	ldr	r2, [pc, #24]	@ (8015270 <rcl_clock_init+0xfc>)
 8015258:	702b      	strb	r3, [r5, #0]
 801525a:	4630      	mov	r0, r6
 801525c:	60ea      	str	r2, [r5, #12]
 801525e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015262:	200a      	movs	r0, #10
 8015264:	e796      	b.n	8015194 <rcl_clock_init+0x20>
 8015266:	bf00      	nop
 8015268:	0801514d 	.word	0x0801514d
 801526c:	08015155 	.word	0x08015155
 8015270:	08015145 	.word	0x08015145

08015274 <rcl_clock_get_now>:
 8015274:	b140      	cbz	r0, 8015288 <rcl_clock_get_now+0x14>
 8015276:	b139      	cbz	r1, 8015288 <rcl_clock_get_now+0x14>
 8015278:	7803      	ldrb	r3, [r0, #0]
 801527a:	b11b      	cbz	r3, 8015284 <rcl_clock_get_now+0x10>
 801527c:	68c3      	ldr	r3, [r0, #12]
 801527e:	b10b      	cbz	r3, 8015284 <rcl_clock_get_now+0x10>
 8015280:	6900      	ldr	r0, [r0, #16]
 8015282:	4718      	bx	r3
 8015284:	2001      	movs	r0, #1
 8015286:	4770      	bx	lr
 8015288:	200b      	movs	r0, #11
 801528a:	4770      	bx	lr

0801528c <rcl_timer_call>:
 801528c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015290:	b08b      	sub	sp, #44	@ 0x2c
 8015292:	2800      	cmp	r0, #0
 8015294:	d06e      	beq.n	8015374 <rcl_timer_call+0xe8>
 8015296:	6803      	ldr	r3, [r0, #0]
 8015298:	f3bf 8f5b 	dmb	ish
 801529c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80152a0:	f3bf 8f5b 	dmb	ish
 80152a4:	4604      	mov	r4, r0
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d159      	bne.n	801535e <rcl_timer_call+0xd2>
 80152aa:	6803      	ldr	r3, [r0, #0]
 80152ac:	a908      	add	r1, sp, #32
 80152ae:	6818      	ldr	r0, [r3, #0]
 80152b0:	f7ff ffe0 	bl	8015274 <rcl_clock_get_now>
 80152b4:	4605      	mov	r5, r0
 80152b6:	2800      	cmp	r0, #0
 80152b8:	d14d      	bne.n	8015356 <rcl_timer_call+0xca>
 80152ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80152be:	2a00      	cmp	r2, #0
 80152c0:	f173 0100 	sbcs.w	r1, r3, #0
 80152c4:	db51      	blt.n	801536a <rcl_timer_call+0xde>
 80152c6:	6820      	ldr	r0, [r4, #0]
 80152c8:	2605      	movs	r6, #5
 80152ca:	9600      	str	r6, [sp, #0]
 80152cc:	3020      	adds	r0, #32
 80152ce:	f001 f893 	bl	80163f8 <__atomic_exchange_8>
 80152d2:	6822      	ldr	r2, [r4, #0]
 80152d4:	f3bf 8f5b 	dmb	ish
 80152d8:	4682      	mov	sl, r0
 80152da:	f8d2 b010 	ldr.w	fp, [r2, #16]
 80152de:	f3bf 8f5b 	dmb	ish
 80152e2:	6820      	ldr	r0, [r4, #0]
 80152e4:	460b      	mov	r3, r1
 80152e6:	3028      	adds	r0, #40	@ 0x28
 80152e8:	4631      	mov	r1, r6
 80152ea:	9305      	str	r3, [sp, #20]
 80152ec:	f001 f81c 	bl	8016328 <__atomic_load_8>
 80152f0:	4603      	mov	r3, r0
 80152f2:	6820      	ldr	r0, [r4, #0]
 80152f4:	460a      	mov	r2, r1
 80152f6:	3018      	adds	r0, #24
 80152f8:	4631      	mov	r1, r6
 80152fa:	e9cd 2303 	strd	r2, r3, [sp, #12]
 80152fe:	f001 f813 	bl	8016328 <__atomic_load_8>
 8015302:	9b04      	ldr	r3, [sp, #16]
 8015304:	9a03      	ldr	r2, [sp, #12]
 8015306:	4606      	mov	r6, r0
 8015308:	460f      	mov	r7, r1
 801530a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801530e:	eb13 0806 	adds.w	r8, r3, r6
 8015312:	eb42 0907 	adc.w	r9, r2, r7
 8015316:	4580      	cmp	r8, r0
 8015318:	eb79 0301 	sbcs.w	r3, r9, r1
 801531c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015320:	460a      	mov	r2, r1
 8015322:	da04      	bge.n	801532e <rcl_timer_call+0xa2>
 8015324:	ea56 0307 	orrs.w	r3, r6, r7
 8015328:	d129      	bne.n	801537e <rcl_timer_call+0xf2>
 801532a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 801532e:	6820      	ldr	r0, [r4, #0]
 8015330:	2105      	movs	r1, #5
 8015332:	4642      	mov	r2, r8
 8015334:	464b      	mov	r3, r9
 8015336:	3028      	adds	r0, #40	@ 0x28
 8015338:	9100      	str	r1, [sp, #0]
 801533a:	f001 f829 	bl	8016390 <__atomic_store_8>
 801533e:	f1bb 0f00 	cmp.w	fp, #0
 8015342:	d008      	beq.n	8015356 <rcl_timer_call+0xca>
 8015344:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015348:	9905      	ldr	r1, [sp, #20]
 801534a:	ebb2 020a 	subs.w	r2, r2, sl
 801534e:	4620      	mov	r0, r4
 8015350:	eb63 0301 	sbc.w	r3, r3, r1
 8015354:	47d8      	blx	fp
 8015356:	4628      	mov	r0, r5
 8015358:	b00b      	add	sp, #44	@ 0x2c
 801535a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801535e:	f240 3521 	movw	r5, #801	@ 0x321
 8015362:	4628      	mov	r0, r5
 8015364:	b00b      	add	sp, #44	@ 0x2c
 8015366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801536a:	2501      	movs	r5, #1
 801536c:	4628      	mov	r0, r5
 801536e:	b00b      	add	sp, #44	@ 0x2c
 8015370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015374:	250b      	movs	r5, #11
 8015376:	4628      	mov	r0, r5
 8015378:	b00b      	add	sp, #44	@ 0x2c
 801537a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801537e:	ebb0 0008 	subs.w	r0, r0, r8
 8015382:	eb62 0109 	sbc.w	r1, r2, r9
 8015386:	f110 30ff 	adds.w	r0, r0, #4294967295	@ 0xffffffff
 801538a:	463b      	mov	r3, r7
 801538c:	f141 31ff 	adc.w	r1, r1, #4294967295	@ 0xffffffff
 8015390:	4632      	mov	r2, r6
 8015392:	f7eb fc91 	bl	8000cb8 <__aeabi_ldivmod>
 8015396:	1c43      	adds	r3, r0, #1
 8015398:	f141 0100 	adc.w	r1, r1, #0
 801539c:	fb00 7007 	mla	r0, r0, r7, r7
 80153a0:	fb06 0001 	mla	r0, r6, r1, r0
 80153a4:	fba3 6706 	umull	r6, r7, r3, r6
 80153a8:	4407      	add	r7, r0
 80153aa:	eb18 0806 	adds.w	r8, r8, r6
 80153ae:	eb49 0907 	adc.w	r9, r9, r7
 80153b2:	e7bc      	b.n	801532e <rcl_timer_call+0xa2>

080153b4 <rcl_timer_is_ready>:
 80153b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153b8:	b082      	sub	sp, #8
 80153ba:	b310      	cbz	r0, 8015402 <rcl_timer_is_ready+0x4e>
 80153bc:	4688      	mov	r8, r1
 80153be:	b301      	cbz	r1, 8015402 <rcl_timer_is_ready+0x4e>
 80153c0:	6803      	ldr	r3, [r0, #0]
 80153c2:	4604      	mov	r4, r0
 80153c4:	4669      	mov	r1, sp
 80153c6:	6818      	ldr	r0, [r3, #0]
 80153c8:	f7ff ff54 	bl	8015274 <rcl_clock_get_now>
 80153cc:	4605      	mov	r5, r0
 80153ce:	b118      	cbz	r0, 80153d8 <rcl_timer_is_ready+0x24>
 80153d0:	4628      	mov	r0, r5
 80153d2:	b002      	add	sp, #8
 80153d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153d8:	6820      	ldr	r0, [r4, #0]
 80153da:	2105      	movs	r1, #5
 80153dc:	3028      	adds	r0, #40	@ 0x28
 80153de:	f000 ffa3 	bl	8016328 <__atomic_load_8>
 80153e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80153e6:	1ac6      	subs	r6, r0, r3
 80153e8:	eb61 0702 	sbc.w	r7, r1, r2
 80153ec:	2e01      	cmp	r6, #1
 80153ee:	f177 0300 	sbcs.w	r3, r7, #0
 80153f2:	db0b      	blt.n	801540c <rcl_timer_is_ready+0x58>
 80153f4:	462b      	mov	r3, r5
 80153f6:	4628      	mov	r0, r5
 80153f8:	f888 3000 	strb.w	r3, [r8]
 80153fc:	b002      	add	sp, #8
 80153fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015402:	250b      	movs	r5, #11
 8015404:	4628      	mov	r0, r5
 8015406:	b002      	add	sp, #8
 8015408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801540c:	6823      	ldr	r3, [r4, #0]
 801540e:	f3bf 8f5b 	dmb	ish
 8015412:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015416:	f3bf 8f5b 	dmb	ish
 801541a:	fab3 f383 	clz	r3, r3
 801541e:	095b      	lsrs	r3, r3, #5
 8015420:	e7e9      	b.n	80153f6 <rcl_timer_is_ready+0x42>
 8015422:	bf00      	nop

08015424 <rcl_timer_get_time_until_next_call>:
 8015424:	b570      	push	{r4, r5, r6, lr}
 8015426:	b082      	sub	sp, #8
 8015428:	b1d8      	cbz	r0, 8015462 <rcl_timer_get_time_until_next_call+0x3e>
 801542a:	460d      	mov	r5, r1
 801542c:	b1c9      	cbz	r1, 8015462 <rcl_timer_get_time_until_next_call+0x3e>
 801542e:	6803      	ldr	r3, [r0, #0]
 8015430:	4604      	mov	r4, r0
 8015432:	4669      	mov	r1, sp
 8015434:	6818      	ldr	r0, [r3, #0]
 8015436:	f7ff ff1d 	bl	8015274 <rcl_clock_get_now>
 801543a:	4606      	mov	r6, r0
 801543c:	b110      	cbz	r0, 8015444 <rcl_timer_get_time_until_next_call+0x20>
 801543e:	4630      	mov	r0, r6
 8015440:	b002      	add	sp, #8
 8015442:	bd70      	pop	{r4, r5, r6, pc}
 8015444:	6820      	ldr	r0, [r4, #0]
 8015446:	2105      	movs	r1, #5
 8015448:	3028      	adds	r0, #40	@ 0x28
 801544a:	f000 ff6d 	bl	8016328 <__atomic_load_8>
 801544e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015452:	1ac0      	subs	r0, r0, r3
 8015454:	eb61 0102 	sbc.w	r1, r1, r2
 8015458:	e9c5 0100 	strd	r0, r1, [r5]
 801545c:	4630      	mov	r0, r6
 801545e:	b002      	add	sp, #8
 8015460:	bd70      	pop	{r4, r5, r6, pc}
 8015462:	260b      	movs	r6, #11
 8015464:	4630      	mov	r0, r6
 8015466:	b002      	add	sp, #8
 8015468:	bd70      	pop	{r4, r5, r6, pc}
 801546a:	bf00      	nop

0801546c <rcl_timer_is_canceled>:
 801546c:	b168      	cbz	r0, 801548a <rcl_timer_is_canceled+0x1e>
 801546e:	b161      	cbz	r1, 801548a <rcl_timer_is_canceled+0x1e>
 8015470:	6803      	ldr	r3, [r0, #0]
 8015472:	f3bf 8f5b 	dmb	ish
 8015476:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801547a:	f3bf 8f5b 	dmb	ish
 801547e:	3b00      	subs	r3, #0
 8015480:	bf18      	it	ne
 8015482:	2301      	movne	r3, #1
 8015484:	700b      	strb	r3, [r1, #0]
 8015486:	2000      	movs	r0, #0
 8015488:	4770      	bx	lr
 801548a:	200b      	movs	r0, #11
 801548c:	4770      	bx	lr
 801548e:	bf00      	nop

08015490 <rcl_timer_get_guard_condition>:
 8015490:	b130      	cbz	r0, 80154a0 <rcl_timer_get_guard_condition+0x10>
 8015492:	6800      	ldr	r0, [r0, #0]
 8015494:	b120      	cbz	r0, 80154a0 <rcl_timer_get_guard_condition+0x10>
 8015496:	68c3      	ldr	r3, [r0, #12]
 8015498:	b10b      	cbz	r3, 801549e <rcl_timer_get_guard_condition+0xe>
 801549a:	3008      	adds	r0, #8
 801549c:	4770      	bx	lr
 801549e:	4618      	mov	r0, r3
 80154a0:	4770      	bx	lr
 80154a2:	bf00      	nop

080154a4 <rcl_validate_enclave_name_with_size>:
 80154a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154a6:	b0c3      	sub	sp, #268	@ 0x10c
 80154a8:	b1d0      	cbz	r0, 80154e0 <rcl_validate_enclave_name_with_size+0x3c>
 80154aa:	4615      	mov	r5, r2
 80154ac:	b1c2      	cbz	r2, 80154e0 <rcl_validate_enclave_name_with_size+0x3c>
 80154ae:	461f      	mov	r7, r3
 80154b0:	466a      	mov	r2, sp
 80154b2:	ab01      	add	r3, sp, #4
 80154b4:	460e      	mov	r6, r1
 80154b6:	f001 f96f 	bl	8016798 <rmw_validate_namespace_with_size>
 80154ba:	4604      	mov	r4, r0
 80154bc:	b9e0      	cbnz	r0, 80154f8 <rcl_validate_enclave_name_with_size+0x54>
 80154be:	9b00      	ldr	r3, [sp, #0]
 80154c0:	b923      	cbnz	r3, 80154cc <rcl_validate_enclave_name_with_size+0x28>
 80154c2:	2300      	movs	r3, #0
 80154c4:	602b      	str	r3, [r5, #0]
 80154c6:	4620      	mov	r0, r4
 80154c8:	b043      	add	sp, #268	@ 0x10c
 80154ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154cc:	2b07      	cmp	r3, #7
 80154ce:	d00b      	beq.n	80154e8 <rcl_validate_enclave_name_with_size+0x44>
 80154d0:	1e5a      	subs	r2, r3, #1
 80154d2:	2a05      	cmp	r2, #5
 80154d4:	d82e      	bhi.n	8015534 <rcl_validate_enclave_name_with_size+0x90>
 80154d6:	e8df f002 	tbb	[pc, r2]
 80154da:	211e      	.short	0x211e
 80154dc:	152a2724 	.word	0x152a2724
 80154e0:	240b      	movs	r4, #11
 80154e2:	4620      	mov	r0, r4
 80154e4:	b043      	add	sp, #268	@ 0x10c
 80154e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154e8:	2eff      	cmp	r6, #255	@ 0xff
 80154ea:	d9ea      	bls.n	80154c2 <rcl_validate_enclave_name_with_size+0x1e>
 80154ec:	602b      	str	r3, [r5, #0]
 80154ee:	2f00      	cmp	r7, #0
 80154f0:	d0e9      	beq.n	80154c6 <rcl_validate_enclave_name_with_size+0x22>
 80154f2:	23fe      	movs	r3, #254	@ 0xfe
 80154f4:	603b      	str	r3, [r7, #0]
 80154f6:	e7e6      	b.n	80154c6 <rcl_validate_enclave_name_with_size+0x22>
 80154f8:	f7fe fea0 	bl	801423c <rcl_convert_rmw_ret_to_rcl_ret>
 80154fc:	4604      	mov	r4, r0
 80154fe:	4620      	mov	r0, r4
 8015500:	b043      	add	sp, #268	@ 0x10c
 8015502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015504:	2306      	movs	r3, #6
 8015506:	602b      	str	r3, [r5, #0]
 8015508:	2f00      	cmp	r7, #0
 801550a:	d0dc      	beq.n	80154c6 <rcl_validate_enclave_name_with_size+0x22>
 801550c:	9b01      	ldr	r3, [sp, #4]
 801550e:	603b      	str	r3, [r7, #0]
 8015510:	4620      	mov	r0, r4
 8015512:	b043      	add	sp, #268	@ 0x10c
 8015514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015516:	2301      	movs	r3, #1
 8015518:	602b      	str	r3, [r5, #0]
 801551a:	e7f5      	b.n	8015508 <rcl_validate_enclave_name_with_size+0x64>
 801551c:	2302      	movs	r3, #2
 801551e:	602b      	str	r3, [r5, #0]
 8015520:	e7f2      	b.n	8015508 <rcl_validate_enclave_name_with_size+0x64>
 8015522:	2303      	movs	r3, #3
 8015524:	602b      	str	r3, [r5, #0]
 8015526:	e7ef      	b.n	8015508 <rcl_validate_enclave_name_with_size+0x64>
 8015528:	2304      	movs	r3, #4
 801552a:	602b      	str	r3, [r5, #0]
 801552c:	e7ec      	b.n	8015508 <rcl_validate_enclave_name_with_size+0x64>
 801552e:	2305      	movs	r3, #5
 8015530:	602b      	str	r3, [r5, #0]
 8015532:	e7e9      	b.n	8015508 <rcl_validate_enclave_name_with_size+0x64>
 8015534:	4a03      	ldr	r2, [pc, #12]	@ (8015544 <rcl_validate_enclave_name_with_size+0xa0>)
 8015536:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801553a:	a802      	add	r0, sp, #8
 801553c:	f001 f8a4 	bl	8016688 <rcutils_snprintf>
 8015540:	2401      	movs	r4, #1
 8015542:	e7c0      	b.n	80154c6 <rcl_validate_enclave_name_with_size+0x22>
 8015544:	0801e428 	.word	0x0801e428

08015548 <rcl_validate_enclave_name>:
 8015548:	b168      	cbz	r0, 8015566 <rcl_validate_enclave_name+0x1e>
 801554a:	b570      	push	{r4, r5, r6, lr}
 801554c:	460d      	mov	r5, r1
 801554e:	4616      	mov	r6, r2
 8015550:	4604      	mov	r4, r0
 8015552:	f7ea fea5 	bl	80002a0 <strlen>
 8015556:	4633      	mov	r3, r6
 8015558:	4601      	mov	r1, r0
 801555a:	462a      	mov	r2, r5
 801555c:	4620      	mov	r0, r4
 801555e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015562:	f7ff bf9f 	b.w	80154a4 <rcl_validate_enclave_name_with_size>
 8015566:	200b      	movs	r0, #11
 8015568:	4770      	bx	lr
 801556a:	bf00      	nop

0801556c <rcl_validate_topic_name>:
 801556c:	2800      	cmp	r0, #0
 801556e:	f000 808b 	beq.w	8015688 <rcl_validate_topic_name+0x11c>
 8015572:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015576:	460e      	mov	r6, r1
 8015578:	2900      	cmp	r1, #0
 801557a:	f000 808c 	beq.w	8015696 <rcl_validate_topic_name+0x12a>
 801557e:	4617      	mov	r7, r2
 8015580:	4605      	mov	r5, r0
 8015582:	f7ea fe8d 	bl	80002a0 <strlen>
 8015586:	b1b0      	cbz	r0, 80155b6 <rcl_validate_topic_name+0x4a>
 8015588:	f895 9000 	ldrb.w	r9, [r5]
 801558c:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 801573c <rcl_validate_topic_name+0x1d0>
 8015590:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8015594:	f013 0304 	ands.w	r3, r3, #4
 8015598:	d178      	bne.n	801568c <rcl_validate_topic_name+0x120>
 801559a:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801559e:	f815 2008 	ldrb.w	r2, [r5, r8]
 80155a2:	2a2f      	cmp	r2, #47	@ 0x2f
 80155a4:	d10e      	bne.n	80155c4 <rcl_validate_topic_name+0x58>
 80155a6:	2202      	movs	r2, #2
 80155a8:	6032      	str	r2, [r6, #0]
 80155aa:	b36f      	cbz	r7, 8015608 <rcl_validate_topic_name+0x9c>
 80155ac:	f8c7 8000 	str.w	r8, [r7]
 80155b0:	4618      	mov	r0, r3
 80155b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155b6:	2301      	movs	r3, #1
 80155b8:	6033      	str	r3, [r6, #0]
 80155ba:	b32f      	cbz	r7, 8015608 <rcl_validate_topic_name+0x9c>
 80155bc:	2000      	movs	r0, #0
 80155be:	6038      	str	r0, [r7, #0]
 80155c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155c4:	461c      	mov	r4, r3
 80155c6:	4619      	mov	r1, r3
 80155c8:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80155cc:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80155d0:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80155d4:	f1be 0f09 	cmp.w	lr, #9
 80155d8:	d946      	bls.n	8015668 <rcl_validate_topic_name+0xfc>
 80155da:	f022 0e20 	bic.w	lr, r2, #32
 80155de:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 80155e2:	f1be 0f19 	cmp.w	lr, #25
 80155e6:	d93f      	bls.n	8015668 <rcl_validate_topic_name+0xfc>
 80155e8:	2a5f      	cmp	r2, #95	@ 0x5f
 80155ea:	d014      	beq.n	8015616 <rcl_validate_topic_name+0xaa>
 80155ec:	2a2f      	cmp	r2, #47	@ 0x2f
 80155ee:	d05b      	beq.n	80156a8 <rcl_validate_topic_name+0x13c>
 80155f0:	2a7e      	cmp	r2, #126	@ 0x7e
 80155f2:	d052      	beq.n	801569a <rcl_validate_topic_name+0x12e>
 80155f4:	2a7b      	cmp	r2, #123	@ 0x7b
 80155f6:	d00a      	beq.n	801560e <rcl_validate_topic_name+0xa2>
 80155f8:	2a7d      	cmp	r2, #125	@ 0x7d
 80155fa:	d16f      	bne.n	80156dc <rcl_validate_topic_name+0x170>
 80155fc:	2c00      	cmp	r4, #0
 80155fe:	d15e      	bne.n	80156be <rcl_validate_topic_name+0x152>
 8015600:	2305      	movs	r3, #5
 8015602:	6033      	str	r3, [r6, #0]
 8015604:	b107      	cbz	r7, 8015608 <rcl_validate_topic_name+0x9c>
 8015606:	6039      	str	r1, [r7, #0]
 8015608:	2000      	movs	r0, #0
 801560a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801560e:	2c00      	cmp	r4, #0
 8015610:	d14c      	bne.n	80156ac <rcl_validate_topic_name+0x140>
 8015612:	460b      	mov	r3, r1
 8015614:	2401      	movs	r4, #1
 8015616:	3101      	adds	r1, #1
 8015618:	4288      	cmp	r0, r1
 801561a:	d1d7      	bne.n	80155cc <rcl_validate_topic_name+0x60>
 801561c:	2c00      	cmp	r4, #0
 801561e:	d156      	bne.n	80156ce <rcl_validate_topic_name+0x162>
 8015620:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 8015624:	4620      	mov	r0, r4
 8015626:	d061      	beq.n	80156ec <rcl_validate_topic_name+0x180>
 8015628:	f108 0e01 	add.w	lr, r8, #1
 801562c:	e007      	b.n	801563e <rcl_validate_topic_name+0xd2>
 801562e:	2801      	cmp	r0, #1
 8015630:	d047      	beq.n	80156c2 <rcl_validate_topic_name+0x156>
 8015632:	461a      	mov	r2, r3
 8015634:	4291      	cmp	r1, r2
 8015636:	4618      	mov	r0, r3
 8015638:	f105 0501 	add.w	r5, r5, #1
 801563c:	d944      	bls.n	80156c8 <rcl_validate_topic_name+0x15c>
 801563e:	4580      	cmp	r8, r0
 8015640:	f100 0301 	add.w	r3, r0, #1
 8015644:	d037      	beq.n	80156b6 <rcl_validate_topic_name+0x14a>
 8015646:	782a      	ldrb	r2, [r5, #0]
 8015648:	2a2f      	cmp	r2, #47	@ 0x2f
 801564a:	d1f0      	bne.n	801562e <rcl_validate_topic_name+0xc2>
 801564c:	786b      	ldrb	r3, [r5, #1]
 801564e:	f81c 4003 	ldrb.w	r4, [ip, r3]
 8015652:	1c43      	adds	r3, r0, #1
 8015654:	0760      	lsls	r0, r4, #29
 8015656:	461a      	mov	r2, r3
 8015658:	d5ec      	bpl.n	8015634 <rcl_validate_topic_name+0xc8>
 801565a:	2304      	movs	r3, #4
 801565c:	6033      	str	r3, [r6, #0]
 801565e:	2f00      	cmp	r7, #0
 8015660:	d0d2      	beq.n	8015608 <rcl_validate_topic_name+0x9c>
 8015662:	603a      	str	r2, [r7, #0]
 8015664:	2000      	movs	r0, #0
 8015666:	e7ab      	b.n	80155c0 <rcl_validate_topic_name+0x54>
 8015668:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801566c:	0752      	lsls	r2, r2, #29
 801566e:	d5d2      	bpl.n	8015616 <rcl_validate_topic_name+0xaa>
 8015670:	2c00      	cmp	r4, #0
 8015672:	d0d0      	beq.n	8015616 <rcl_validate_topic_name+0xaa>
 8015674:	2900      	cmp	r1, #0
 8015676:	d0ce      	beq.n	8015616 <rcl_validate_topic_name+0xaa>
 8015678:	1e4a      	subs	r2, r1, #1
 801567a:	429a      	cmp	r2, r3
 801567c:	d1cb      	bne.n	8015616 <rcl_validate_topic_name+0xaa>
 801567e:	2309      	movs	r3, #9
 8015680:	6033      	str	r3, [r6, #0]
 8015682:	2f00      	cmp	r7, #0
 8015684:	d1bf      	bne.n	8015606 <rcl_validate_topic_name+0x9a>
 8015686:	e7bf      	b.n	8015608 <rcl_validate_topic_name+0x9c>
 8015688:	200b      	movs	r0, #11
 801568a:	4770      	bx	lr
 801568c:	2304      	movs	r3, #4
 801568e:	6033      	str	r3, [r6, #0]
 8015690:	2f00      	cmp	r7, #0
 8015692:	d193      	bne.n	80155bc <rcl_validate_topic_name+0x50>
 8015694:	e7b8      	b.n	8015608 <rcl_validate_topic_name+0x9c>
 8015696:	200b      	movs	r0, #11
 8015698:	e792      	b.n	80155c0 <rcl_validate_topic_name+0x54>
 801569a:	2900      	cmp	r1, #0
 801569c:	d0bb      	beq.n	8015616 <rcl_validate_topic_name+0xaa>
 801569e:	2306      	movs	r3, #6
 80156a0:	6033      	str	r3, [r6, #0]
 80156a2:	2f00      	cmp	r7, #0
 80156a4:	d1af      	bne.n	8015606 <rcl_validate_topic_name+0x9a>
 80156a6:	e7af      	b.n	8015608 <rcl_validate_topic_name+0x9c>
 80156a8:	2c00      	cmp	r4, #0
 80156aa:	d0b4      	beq.n	8015616 <rcl_validate_topic_name+0xaa>
 80156ac:	2308      	movs	r3, #8
 80156ae:	6033      	str	r3, [r6, #0]
 80156b0:	2f00      	cmp	r7, #0
 80156b2:	d1a8      	bne.n	8015606 <rcl_validate_topic_name+0x9a>
 80156b4:	e7a8      	b.n	8015608 <rcl_validate_topic_name+0x9c>
 80156b6:	4672      	mov	r2, lr
 80156b8:	f108 0301 	add.w	r3, r8, #1
 80156bc:	e7ba      	b.n	8015634 <rcl_validate_topic_name+0xc8>
 80156be:	2400      	movs	r4, #0
 80156c0:	e7a9      	b.n	8015616 <rcl_validate_topic_name+0xaa>
 80156c2:	2202      	movs	r2, #2
 80156c4:	4613      	mov	r3, r2
 80156c6:	e7b5      	b.n	8015634 <rcl_validate_topic_name+0xc8>
 80156c8:	2000      	movs	r0, #0
 80156ca:	6030      	str	r0, [r6, #0]
 80156cc:	e778      	b.n	80155c0 <rcl_validate_topic_name+0x54>
 80156ce:	2205      	movs	r2, #5
 80156d0:	6032      	str	r2, [r6, #0]
 80156d2:	2f00      	cmp	r7, #0
 80156d4:	d098      	beq.n	8015608 <rcl_validate_topic_name+0x9c>
 80156d6:	603b      	str	r3, [r7, #0]
 80156d8:	2000      	movs	r0, #0
 80156da:	e771      	b.n	80155c0 <rcl_validate_topic_name+0x54>
 80156dc:	2c00      	cmp	r4, #0
 80156de:	bf14      	ite	ne
 80156e0:	2308      	movne	r3, #8
 80156e2:	2303      	moveq	r3, #3
 80156e4:	6033      	str	r3, [r6, #0]
 80156e6:	2f00      	cmp	r7, #0
 80156e8:	d18d      	bne.n	8015606 <rcl_validate_topic_name+0x9a>
 80156ea:	e78d      	b.n	8015608 <rcl_validate_topic_name+0x9c>
 80156ec:	f108 0401 	add.w	r4, r8, #1
 80156f0:	e007      	b.n	8015702 <rcl_validate_topic_name+0x196>
 80156f2:	2801      	cmp	r0, #1
 80156f4:	d019      	beq.n	801572a <rcl_validate_topic_name+0x1be>
 80156f6:	461a      	mov	r2, r3
 80156f8:	4291      	cmp	r1, r2
 80156fa:	4618      	mov	r0, r3
 80156fc:	f105 0501 	add.w	r5, r5, #1
 8015700:	d9e2      	bls.n	80156c8 <rcl_validate_topic_name+0x15c>
 8015702:	4580      	cmp	r8, r0
 8015704:	f100 0301 	add.w	r3, r0, #1
 8015708:	d00b      	beq.n	8015722 <rcl_validate_topic_name+0x1b6>
 801570a:	782a      	ldrb	r2, [r5, #0]
 801570c:	2a2f      	cmp	r2, #47	@ 0x2f
 801570e:	d1f0      	bne.n	80156f2 <rcl_validate_topic_name+0x186>
 8015710:	786b      	ldrb	r3, [r5, #1]
 8015712:	f81c e003 	ldrb.w	lr, [ip, r3]
 8015716:	1c43      	adds	r3, r0, #1
 8015718:	f01e 0f04 	tst.w	lr, #4
 801571c:	461a      	mov	r2, r3
 801571e:	d0eb      	beq.n	80156f8 <rcl_validate_topic_name+0x18c>
 8015720:	e79b      	b.n	801565a <rcl_validate_topic_name+0xee>
 8015722:	4622      	mov	r2, r4
 8015724:	f108 0301 	add.w	r3, r8, #1
 8015728:	e7e6      	b.n	80156f8 <rcl_validate_topic_name+0x18c>
 801572a:	2307      	movs	r3, #7
 801572c:	6033      	str	r3, [r6, #0]
 801572e:	2f00      	cmp	r7, #0
 8015730:	f43f af6a 	beq.w	8015608 <rcl_validate_topic_name+0x9c>
 8015734:	6038      	str	r0, [r7, #0]
 8015736:	2000      	movs	r0, #0
 8015738:	e742      	b.n	80155c0 <rcl_validate_topic_name+0x54>
 801573a:	bf00      	nop
 801573c:	0801e8b0 	.word	0x0801e8b0

08015740 <rcl_get_zero_initialized_wait_set>:
 8015740:	b470      	push	{r4, r5, r6}
 8015742:	4d07      	ldr	r5, [pc, #28]	@ (8015760 <rcl_get_zero_initialized_wait_set+0x20>)
 8015744:	4606      	mov	r6, r0
 8015746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015748:	4634      	mov	r4, r6
 801574a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801574c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801574e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015754:	682b      	ldr	r3, [r5, #0]
 8015756:	6023      	str	r3, [r4, #0]
 8015758:	4630      	mov	r0, r6
 801575a:	bc70      	pop	{r4, r5, r6}
 801575c:	4770      	bx	lr
 801575e:	bf00      	nop
 8015760:	0801e488 	.word	0x0801e488

08015764 <rcl_wait_set_is_valid>:
 8015764:	b118      	cbz	r0, 801576e <rcl_wait_set_is_valid+0xa>
 8015766:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8015768:	3800      	subs	r0, #0
 801576a:	bf18      	it	ne
 801576c:	2001      	movne	r0, #1
 801576e:	4770      	bx	lr

08015770 <rcl_wait_set_fini>:
 8015770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015774:	b082      	sub	sp, #8
 8015776:	2800      	cmp	r0, #0
 8015778:	f000 8095 	beq.w	80158a6 <rcl_wait_set_fini+0x136>
 801577c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801577e:	4604      	mov	r4, r0
 8015780:	2e00      	cmp	r6, #0
 8015782:	f000 808c 	beq.w	801589e <rcl_wait_set_fini+0x12e>
 8015786:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8015788:	f001 fd8c 	bl	80172a4 <rmw_destroy_wait_set>
 801578c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801578e:	1e06      	subs	r6, r0, #0
 8015790:	bf18      	it	ne
 8015792:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8015796:	2d00      	cmp	r5, #0
 8015798:	f000 8081 	beq.w	801589e <rcl_wait_set_fini+0x12e>
 801579c:	6820      	ldr	r0, [r4, #0]
 801579e:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80157a2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80157a4:	2700      	movs	r7, #0
 80157a6:	6067      	str	r7, [r4, #4]
 80157a8:	602f      	str	r7, [r5, #0]
 80157aa:	b120      	cbz	r0, 80157b6 <rcl_wait_set_fini+0x46>
 80157ac:	9101      	str	r1, [sp, #4]
 80157ae:	47c0      	blx	r8
 80157b0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80157b2:	9901      	ldr	r1, [sp, #4]
 80157b4:	6027      	str	r7, [r4, #0]
 80157b6:	68a8      	ldr	r0, [r5, #8]
 80157b8:	b120      	cbz	r0, 80157c4 <rcl_wait_set_fini+0x54>
 80157ba:	47c0      	blx	r8
 80157bc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80157be:	2300      	movs	r3, #0
 80157c0:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80157c4:	68a0      	ldr	r0, [r4, #8]
 80157c6:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80157c8:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80157ca:	f04f 0800 	mov.w	r8, #0
 80157ce:	f8c4 800c 	str.w	r8, [r4, #12]
 80157d2:	f8c5 800c 	str.w	r8, [r5, #12]
 80157d6:	b128      	cbz	r0, 80157e4 <rcl_wait_set_fini+0x74>
 80157d8:	47b8      	blx	r7
 80157da:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80157dc:	f8c4 8008 	str.w	r8, [r4, #8]
 80157e0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80157e2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80157e4:	6968      	ldr	r0, [r5, #20]
 80157e6:	f04f 0800 	mov.w	r8, #0
 80157ea:	f8c5 8010 	str.w	r8, [r5, #16]
 80157ee:	b128      	cbz	r0, 80157fc <rcl_wait_set_fini+0x8c>
 80157f0:	47b8      	blx	r7
 80157f2:	f8c5 8014 	str.w	r8, [r5, #20]
 80157f6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80157f8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80157fa:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80157fc:	6920      	ldr	r0, [r4, #16]
 80157fe:	f04f 0800 	mov.w	r8, #0
 8015802:	f8c4 8014 	str.w	r8, [r4, #20]
 8015806:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801580a:	b128      	cbz	r0, 8015818 <rcl_wait_set_fini+0xa8>
 801580c:	47b8      	blx	r7
 801580e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015810:	f8c4 8010 	str.w	r8, [r4, #16]
 8015814:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015816:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015818:	69a0      	ldr	r0, [r4, #24]
 801581a:	f04f 0800 	mov.w	r8, #0
 801581e:	f8c4 801c 	str.w	r8, [r4, #28]
 8015822:	f8c5 8018 	str.w	r8, [r5, #24]
 8015826:	b128      	cbz	r0, 8015834 <rcl_wait_set_fini+0xc4>
 8015828:	9101      	str	r1, [sp, #4]
 801582a:	47b8      	blx	r7
 801582c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801582e:	9901      	ldr	r1, [sp, #4]
 8015830:	f8c4 8018 	str.w	r8, [r4, #24]
 8015834:	6a28      	ldr	r0, [r5, #32]
 8015836:	b120      	cbz	r0, 8015842 <rcl_wait_set_fini+0xd2>
 8015838:	47b8      	blx	r7
 801583a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801583c:	2300      	movs	r3, #0
 801583e:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8015842:	6a20      	ldr	r0, [r4, #32]
 8015844:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015848:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801584a:	2700      	movs	r7, #0
 801584c:	6267      	str	r7, [r4, #36]	@ 0x24
 801584e:	626f      	str	r7, [r5, #36]	@ 0x24
 8015850:	b120      	cbz	r0, 801585c <rcl_wait_set_fini+0xec>
 8015852:	9101      	str	r1, [sp, #4]
 8015854:	47c0      	blx	r8
 8015856:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015858:	9901      	ldr	r1, [sp, #4]
 801585a:	6227      	str	r7, [r4, #32]
 801585c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801585e:	b120      	cbz	r0, 801586a <rcl_wait_set_fini+0xfa>
 8015860:	47c0      	blx	r8
 8015862:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015864:	2300      	movs	r3, #0
 8015866:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801586a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801586c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015870:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015872:	2700      	movs	r7, #0
 8015874:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8015876:	632f      	str	r7, [r5, #48]	@ 0x30
 8015878:	b120      	cbz	r0, 8015884 <rcl_wait_set_fini+0x114>
 801587a:	9101      	str	r1, [sp, #4]
 801587c:	47c0      	blx	r8
 801587e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015880:	9901      	ldr	r1, [sp, #4]
 8015882:	62a7      	str	r7, [r4, #40]	@ 0x28
 8015884:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8015886:	b120      	cbz	r0, 8015892 <rcl_wait_set_fini+0x122>
 8015888:	47c0      	blx	r8
 801588a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801588c:	2300      	movs	r3, #0
 801588e:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8015892:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8015894:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015896:	4628      	mov	r0, r5
 8015898:	4798      	blx	r3
 801589a:	2300      	movs	r3, #0
 801589c:	6323      	str	r3, [r4, #48]	@ 0x30
 801589e:	4630      	mov	r0, r6
 80158a0:	b002      	add	sp, #8
 80158a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158a6:	260b      	movs	r6, #11
 80158a8:	4630      	mov	r0, r6
 80158aa:	b002      	add	sp, #8
 80158ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080158b0 <rcl_wait_set_add_subscription>:
 80158b0:	b320      	cbz	r0, 80158fc <rcl_wait_set_add_subscription+0x4c>
 80158b2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80158b4:	b570      	push	{r4, r5, r6, lr}
 80158b6:	4604      	mov	r4, r0
 80158b8:	b1d3      	cbz	r3, 80158f0 <rcl_wait_set_add_subscription+0x40>
 80158ba:	b319      	cbz	r1, 8015904 <rcl_wait_set_add_subscription+0x54>
 80158bc:	681d      	ldr	r5, [r3, #0]
 80158be:	6860      	ldr	r0, [r4, #4]
 80158c0:	4285      	cmp	r5, r0
 80158c2:	d218      	bcs.n	80158f6 <rcl_wait_set_add_subscription+0x46>
 80158c4:	6820      	ldr	r0, [r4, #0]
 80158c6:	1c6e      	adds	r6, r5, #1
 80158c8:	601e      	str	r6, [r3, #0]
 80158ca:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80158ce:	b102      	cbz	r2, 80158d2 <rcl_wait_set_add_subscription+0x22>
 80158d0:	6015      	str	r5, [r2, #0]
 80158d2:	4608      	mov	r0, r1
 80158d4:	f7ff fc30 	bl	8015138 <rcl_subscription_get_rmw_handle>
 80158d8:	b190      	cbz	r0, 8015900 <rcl_wait_set_add_subscription+0x50>
 80158da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158dc:	6842      	ldr	r2, [r0, #4]
 80158de:	689b      	ldr	r3, [r3, #8]
 80158e0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80158e4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80158e6:	6853      	ldr	r3, [r2, #4]
 80158e8:	3301      	adds	r3, #1
 80158ea:	6053      	str	r3, [r2, #4]
 80158ec:	2000      	movs	r0, #0
 80158ee:	bd70      	pop	{r4, r5, r6, pc}
 80158f0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80158f4:	bd70      	pop	{r4, r5, r6, pc}
 80158f6:	f240 3086 	movw	r0, #902	@ 0x386
 80158fa:	bd70      	pop	{r4, r5, r6, pc}
 80158fc:	200b      	movs	r0, #11
 80158fe:	4770      	bx	lr
 8015900:	2001      	movs	r0, #1
 8015902:	bd70      	pop	{r4, r5, r6, pc}
 8015904:	200b      	movs	r0, #11
 8015906:	bd70      	pop	{r4, r5, r6, pc}

08015908 <rcl_wait_set_clear>:
 8015908:	2800      	cmp	r0, #0
 801590a:	d073      	beq.n	80159f4 <rcl_wait_set_clear+0xec>
 801590c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801590e:	b510      	push	{r4, lr}
 8015910:	4604      	mov	r4, r0
 8015912:	2b00      	cmp	r3, #0
 8015914:	d070      	beq.n	80159f8 <rcl_wait_set_clear+0xf0>
 8015916:	6800      	ldr	r0, [r0, #0]
 8015918:	b138      	cbz	r0, 801592a <rcl_wait_set_clear+0x22>
 801591a:	6862      	ldr	r2, [r4, #4]
 801591c:	2100      	movs	r1, #0
 801591e:	0092      	lsls	r2, r2, #2
 8015920:	f004 ff50 	bl	801a7c4 <memset>
 8015924:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015926:	2200      	movs	r2, #0
 8015928:	601a      	str	r2, [r3, #0]
 801592a:	68a0      	ldr	r0, [r4, #8]
 801592c:	b138      	cbz	r0, 801593e <rcl_wait_set_clear+0x36>
 801592e:	68e2      	ldr	r2, [r4, #12]
 8015930:	2100      	movs	r1, #0
 8015932:	0092      	lsls	r2, r2, #2
 8015934:	f004 ff46 	bl	801a7c4 <memset>
 8015938:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801593a:	2200      	movs	r2, #0
 801593c:	60da      	str	r2, [r3, #12]
 801593e:	69a0      	ldr	r0, [r4, #24]
 8015940:	b138      	cbz	r0, 8015952 <rcl_wait_set_clear+0x4a>
 8015942:	69e2      	ldr	r2, [r4, #28]
 8015944:	2100      	movs	r1, #0
 8015946:	0092      	lsls	r2, r2, #2
 8015948:	f004 ff3c 	bl	801a7c4 <memset>
 801594c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801594e:	2200      	movs	r2, #0
 8015950:	619a      	str	r2, [r3, #24]
 8015952:	6a20      	ldr	r0, [r4, #32]
 8015954:	b138      	cbz	r0, 8015966 <rcl_wait_set_clear+0x5e>
 8015956:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015958:	2100      	movs	r1, #0
 801595a:	0092      	lsls	r2, r2, #2
 801595c:	f004 ff32 	bl	801a7c4 <memset>
 8015960:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015962:	2200      	movs	r2, #0
 8015964:	625a      	str	r2, [r3, #36]	@ 0x24
 8015966:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015968:	b138      	cbz	r0, 801597a <rcl_wait_set_clear+0x72>
 801596a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801596c:	2100      	movs	r1, #0
 801596e:	0092      	lsls	r2, r2, #2
 8015970:	f004 ff28 	bl	801a7c4 <memset>
 8015974:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015976:	2200      	movs	r2, #0
 8015978:	631a      	str	r2, [r3, #48]	@ 0x30
 801597a:	6920      	ldr	r0, [r4, #16]
 801597c:	b138      	cbz	r0, 801598e <rcl_wait_set_clear+0x86>
 801597e:	6962      	ldr	r2, [r4, #20]
 8015980:	2100      	movs	r1, #0
 8015982:	0092      	lsls	r2, r2, #2
 8015984:	f004 ff1e 	bl	801a7c4 <memset>
 8015988:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801598a:	2200      	movs	r2, #0
 801598c:	641a      	str	r2, [r3, #64]	@ 0x40
 801598e:	6898      	ldr	r0, [r3, #8]
 8015990:	b138      	cbz	r0, 80159a2 <rcl_wait_set_clear+0x9a>
 8015992:	685a      	ldr	r2, [r3, #4]
 8015994:	2100      	movs	r1, #0
 8015996:	0092      	lsls	r2, r2, #2
 8015998:	f004 ff14 	bl	801a7c4 <memset>
 801599c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801599e:	2200      	movs	r2, #0
 80159a0:	605a      	str	r2, [r3, #4]
 80159a2:	6958      	ldr	r0, [r3, #20]
 80159a4:	b138      	cbz	r0, 80159b6 <rcl_wait_set_clear+0xae>
 80159a6:	691a      	ldr	r2, [r3, #16]
 80159a8:	2100      	movs	r1, #0
 80159aa:	0092      	lsls	r2, r2, #2
 80159ac:	f004 ff0a 	bl	801a7c4 <memset>
 80159b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80159b2:	2200      	movs	r2, #0
 80159b4:	611a      	str	r2, [r3, #16]
 80159b6:	6a18      	ldr	r0, [r3, #32]
 80159b8:	b138      	cbz	r0, 80159ca <rcl_wait_set_clear+0xc2>
 80159ba:	69da      	ldr	r2, [r3, #28]
 80159bc:	2100      	movs	r1, #0
 80159be:	0092      	lsls	r2, r2, #2
 80159c0:	f004 ff00 	bl	801a7c4 <memset>
 80159c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80159c6:	2200      	movs	r2, #0
 80159c8:	61da      	str	r2, [r3, #28]
 80159ca:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80159cc:	b138      	cbz	r0, 80159de <rcl_wait_set_clear+0xd6>
 80159ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80159d0:	2100      	movs	r1, #0
 80159d2:	0092      	lsls	r2, r2, #2
 80159d4:	f004 fef6 	bl	801a7c4 <memset>
 80159d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80159da:	2200      	movs	r2, #0
 80159dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80159de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80159e0:	b138      	cbz	r0, 80159f2 <rcl_wait_set_clear+0xea>
 80159e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80159e4:	2100      	movs	r1, #0
 80159e6:	0092      	lsls	r2, r2, #2
 80159e8:	f004 feec 	bl	801a7c4 <memset>
 80159ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80159ee:	2000      	movs	r0, #0
 80159f0:	6358      	str	r0, [r3, #52]	@ 0x34
 80159f2:	bd10      	pop	{r4, pc}
 80159f4:	200b      	movs	r0, #11
 80159f6:	4770      	bx	lr
 80159f8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80159fc:	bd10      	pop	{r4, pc}
 80159fe:	bf00      	nop

08015a00 <rcl_wait_set_resize>:
 8015a00:	2800      	cmp	r0, #0
 8015a02:	f000 81a6 	beq.w	8015d52 <rcl_wait_set_resize+0x352>
 8015a06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a0a:	f8d0 a030 	ldr.w	sl, [r0, #48]	@ 0x30
 8015a0e:	b083      	sub	sp, #12
 8015a10:	4604      	mov	r4, r0
 8015a12:	f1ba 0f00 	cmp.w	sl, #0
 8015a16:	f000 819e 	beq.w	8015d56 <rcl_wait_set_resize+0x356>
 8015a1a:	461e      	mov	r6, r3
 8015a1c:	e9da b313 	ldrd	fp, r3, [sl, #76]	@ 0x4c
 8015a20:	f04f 0800 	mov.w	r8, #0
 8015a24:	f8da 9058 	ldr.w	r9, [sl, #88]	@ 0x58
 8015a28:	9300      	str	r3, [sp, #0]
 8015a2a:	f8c0 8004 	str.w	r8, [r0, #4]
 8015a2e:	460f      	mov	r7, r1
 8015a30:	4615      	mov	r5, r2
 8015a32:	f8ca 8000 	str.w	r8, [sl]
 8015a36:	2900      	cmp	r1, #0
 8015a38:	f000 80c9 	beq.w	8015bce <rcl_wait_set_resize+0x1ce>
 8015a3c:	ea4f 0a81 	mov.w	sl, r1, lsl #2
 8015a40:	6800      	ldr	r0, [r0, #0]
 8015a42:	4651      	mov	r1, sl
 8015a44:	464a      	mov	r2, r9
 8015a46:	4798      	blx	r3
 8015a48:	6020      	str	r0, [r4, #0]
 8015a4a:	2800      	cmp	r0, #0
 8015a4c:	f000 80d8 	beq.w	8015c00 <rcl_wait_set_resize+0x200>
 8015a50:	4652      	mov	r2, sl
 8015a52:	4641      	mov	r1, r8
 8015a54:	f004 feb6 	bl	801a7c4 <memset>
 8015a58:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015a5a:	6067      	str	r7, [r4, #4]
 8015a5c:	6898      	ldr	r0, [r3, #8]
 8015a5e:	f8c3 8004 	str.w	r8, [r3, #4]
 8015a62:	9301      	str	r3, [sp, #4]
 8015a64:	464a      	mov	r2, r9
 8015a66:	9b00      	ldr	r3, [sp, #0]
 8015a68:	4651      	mov	r1, sl
 8015a6a:	4798      	blx	r3
 8015a6c:	9b01      	ldr	r3, [sp, #4]
 8015a6e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015a70:	6098      	str	r0, [r3, #8]
 8015a72:	6897      	ldr	r7, [r2, #8]
 8015a74:	2f00      	cmp	r7, #0
 8015a76:	f000 80be 	beq.w	8015bf6 <rcl_wait_set_resize+0x1f6>
 8015a7a:	4652      	mov	r2, sl
 8015a7c:	4641      	mov	r1, r8
 8015a7e:	4638      	mov	r0, r7
 8015a80:	f004 fea0 	bl	801a7c4 <memset>
 8015a84:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015a88:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015a8c:	2700      	movs	r7, #0
 8015a8e:	e9da 2313 	ldrd	r2, r3, [sl, #76]	@ 0x4c
 8015a92:	60e7      	str	r7, [r4, #12]
 8015a94:	f8ca 700c 	str.w	r7, [sl, #12]
 8015a98:	2d00      	cmp	r5, #0
 8015a9a:	f040 80b5 	bne.w	8015c08 <rcl_wait_set_resize+0x208>
 8015a9e:	68a0      	ldr	r0, [r4, #8]
 8015aa0:	b130      	cbz	r0, 8015ab0 <rcl_wait_set_resize+0xb0>
 8015aa2:	4641      	mov	r1, r8
 8015aa4:	4790      	blx	r2
 8015aa6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015aaa:	60a5      	str	r5, [r4, #8]
 8015aac:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015ab0:	2700      	movs	r7, #0
 8015ab2:	19ad      	adds	r5, r5, r6
 8015ab4:	f8ca 7010 	str.w	r7, [sl, #16]
 8015ab8:	f040 80be 	bne.w	8015c38 <rcl_wait_set_resize+0x238>
 8015abc:	f8da 0014 	ldr.w	r0, [sl, #20]
 8015ac0:	b148      	cbz	r0, 8015ad6 <rcl_wait_set_resize+0xd6>
 8015ac2:	f8da 304c 	ldr.w	r3, [sl, #76]	@ 0x4c
 8015ac6:	4641      	mov	r1, r8
 8015ac8:	4798      	blx	r3
 8015aca:	f8ca 5014 	str.w	r5, [sl, #20]
 8015ace:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015ad2:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015ad6:	2500      	movs	r5, #0
 8015ad8:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8015adc:	6165      	str	r5, [r4, #20]
 8015ade:	f8ca 5040 	str.w	r5, [sl, #64]	@ 0x40
 8015ae2:	2e00      	cmp	r6, #0
 8015ae4:	f040 80bf 	bne.w	8015c66 <rcl_wait_set_resize+0x266>
 8015ae8:	6920      	ldr	r0, [r4, #16]
 8015aea:	b140      	cbz	r0, 8015afe <rcl_wait_set_resize+0xfe>
 8015aec:	4641      	mov	r1, r8
 8015aee:	47c8      	blx	r9
 8015af0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015af4:	6126      	str	r6, [r4, #16]
 8015af6:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8015afa:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015afe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015b00:	2500      	movs	r5, #0
 8015b02:	61e5      	str	r5, [r4, #28]
 8015b04:	f8ca 5018 	str.w	r5, [sl, #24]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	f040 80c1 	bne.w	8015c90 <rcl_wait_set_resize+0x290>
 8015b0e:	69a0      	ldr	r0, [r4, #24]
 8015b10:	b128      	cbz	r0, 8015b1e <rcl_wait_set_resize+0x11e>
 8015b12:	4641      	mov	r1, r8
 8015b14:	47c8      	blx	r9
 8015b16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015b18:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015b1c:	61a3      	str	r3, [r4, #24]
 8015b1e:	f8da 0020 	ldr.w	r0, [sl, #32]
 8015b22:	b130      	cbz	r0, 8015b32 <rcl_wait_set_resize+0x132>
 8015b24:	4641      	mov	r1, r8
 8015b26:	47c8      	blx	r9
 8015b28:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	e9ca 3307 	strd	r3, r3, [sl, #28]
 8015b32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015b34:	f8da 7058 	ldr.w	r7, [sl, #88]	@ 0x58
 8015b38:	2600      	movs	r6, #0
 8015b3a:	e9da 8913 	ldrd	r8, r9, [sl, #76]	@ 0x4c
 8015b3e:	6266      	str	r6, [r4, #36]	@ 0x24
 8015b40:	f8ca 6024 	str.w	r6, [sl, #36]	@ 0x24
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	f000 80c8 	beq.w	8015cda <rcl_wait_set_resize+0x2da>
 8015b4a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8015b4e:	6a20      	ldr	r0, [r4, #32]
 8015b50:	4651      	mov	r1, sl
 8015b52:	463a      	mov	r2, r7
 8015b54:	47c8      	blx	r9
 8015b56:	6220      	str	r0, [r4, #32]
 8015b58:	2800      	cmp	r0, #0
 8015b5a:	d051      	beq.n	8015c00 <rcl_wait_set_resize+0x200>
 8015b5c:	4652      	mov	r2, sl
 8015b5e:	4631      	mov	r1, r6
 8015b60:	f004 fe30 	bl	801a7c4 <memset>
 8015b64:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015b66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015b68:	6263      	str	r3, [r4, #36]	@ 0x24
 8015b6a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8015b6c:	62ae      	str	r6, [r5, #40]	@ 0x28
 8015b6e:	463a      	mov	r2, r7
 8015b70:	4651      	mov	r1, sl
 8015b72:	47c8      	blx	r9
 8015b74:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015b76:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8015b78:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8015b7a:	2d00      	cmp	r5, #0
 8015b7c:	f000 8105 	beq.w	8015d8a <rcl_wait_set_resize+0x38a>
 8015b80:	4652      	mov	r2, sl
 8015b82:	4631      	mov	r1, r6
 8015b84:	4628      	mov	r0, r5
 8015b86:	f004 fe1d 	bl	801a7c4 <memset>
 8015b8a:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015b8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b90:	f8da 6058 	ldr.w	r6, [sl, #88]	@ 0x58
 8015b94:	2500      	movs	r5, #0
 8015b96:	e9da 7913 	ldrd	r7, r9, [sl, #76]	@ 0x4c
 8015b9a:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8015b9c:	f8ca 5030 	str.w	r5, [sl, #48]	@ 0x30
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	f040 80af 	bne.w	8015d04 <rcl_wait_set_resize+0x304>
 8015ba6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015ba8:	b128      	cbz	r0, 8015bb6 <rcl_wait_set_resize+0x1b6>
 8015baa:	4631      	mov	r1, r6
 8015bac:	47b8      	blx	r7
 8015bae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015bb0:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015bb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015bb6:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8015bba:	b310      	cbz	r0, 8015c02 <rcl_wait_set_resize+0x202>
 8015bbc:	4631      	mov	r1, r6
 8015bbe:	47b8      	blx	r7
 8015bc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015bc2:	2000      	movs	r0, #0
 8015bc4:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8015bc8:	b003      	add	sp, #12
 8015bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bce:	6800      	ldr	r0, [r0, #0]
 8015bd0:	b120      	cbz	r0, 8015bdc <rcl_wait_set_resize+0x1dc>
 8015bd2:	4649      	mov	r1, r9
 8015bd4:	47d8      	blx	fp
 8015bd6:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015bda:	6027      	str	r7, [r4, #0]
 8015bdc:	f8da 0008 	ldr.w	r0, [sl, #8]
 8015be0:	2800      	cmp	r0, #0
 8015be2:	f43f af51 	beq.w	8015a88 <rcl_wait_set_resize+0x88>
 8015be6:	4649      	mov	r1, r9
 8015be8:	47d8      	blx	fp
 8015bea:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015bee:	2300      	movs	r3, #0
 8015bf0:	e9ca 3301 	strd	r3, r3, [sl, #4]
 8015bf4:	e748      	b.n	8015a88 <rcl_wait_set_resize+0x88>
 8015bf6:	6820      	ldr	r0, [r4, #0]
 8015bf8:	4649      	mov	r1, r9
 8015bfa:	47d8      	blx	fp
 8015bfc:	e9c4 7700 	strd	r7, r7, [r4]
 8015c00:	200a      	movs	r0, #10
 8015c02:	b003      	add	sp, #12
 8015c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c08:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8015c0c:	68a0      	ldr	r0, [r4, #8]
 8015c0e:	4642      	mov	r2, r8
 8015c10:	4649      	mov	r1, r9
 8015c12:	4798      	blx	r3
 8015c14:	60a0      	str	r0, [r4, #8]
 8015c16:	2800      	cmp	r0, #0
 8015c18:	d0f2      	beq.n	8015c00 <rcl_wait_set_resize+0x200>
 8015c1a:	4639      	mov	r1, r7
 8015c1c:	464a      	mov	r2, r9
 8015c1e:	f004 fdd1 	bl	801a7c4 <memset>
 8015c22:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015c26:	60e5      	str	r5, [r4, #12]
 8015c28:	2700      	movs	r7, #0
 8015c2a:	19ad      	adds	r5, r5, r6
 8015c2c:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015c30:	f8ca 7010 	str.w	r7, [sl, #16]
 8015c34:	f43f af42 	beq.w	8015abc <rcl_wait_set_resize+0xbc>
 8015c38:	00ad      	lsls	r5, r5, #2
 8015c3a:	4642      	mov	r2, r8
 8015c3c:	f8da 3050 	ldr.w	r3, [sl, #80]	@ 0x50
 8015c40:	f8da 0014 	ldr.w	r0, [sl, #20]
 8015c44:	4629      	mov	r1, r5
 8015c46:	4798      	blx	r3
 8015c48:	4680      	mov	r8, r0
 8015c4a:	f8ca 0014 	str.w	r0, [sl, #20]
 8015c4e:	2800      	cmp	r0, #0
 8015c50:	f000 8084 	beq.w	8015d5c <rcl_wait_set_resize+0x35c>
 8015c54:	462a      	mov	r2, r5
 8015c56:	4639      	mov	r1, r7
 8015c58:	f004 fdb4 	bl	801a7c4 <memset>
 8015c5c:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015c60:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015c64:	e737      	b.n	8015ad6 <rcl_wait_set_resize+0xd6>
 8015c66:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8015c6a:	6920      	ldr	r0, [r4, #16]
 8015c6c:	4642      	mov	r2, r8
 8015c6e:	4649      	mov	r1, r9
 8015c70:	47b8      	blx	r7
 8015c72:	6120      	str	r0, [r4, #16]
 8015c74:	2800      	cmp	r0, #0
 8015c76:	d0c3      	beq.n	8015c00 <rcl_wait_set_resize+0x200>
 8015c78:	464a      	mov	r2, r9
 8015c7a:	4629      	mov	r1, r5
 8015c7c:	f004 fda2 	bl	801a7c4 <memset>
 8015c80:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015c84:	6166      	str	r6, [r4, #20]
 8015c86:	e9da 9713 	ldrd	r9, r7, [sl, #76]	@ 0x4c
 8015c8a:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
 8015c8e:	e736      	b.n	8015afe <rcl_wait_set_resize+0xfe>
 8015c90:	009e      	lsls	r6, r3, #2
 8015c92:	69a0      	ldr	r0, [r4, #24]
 8015c94:	4631      	mov	r1, r6
 8015c96:	4642      	mov	r2, r8
 8015c98:	47b8      	blx	r7
 8015c9a:	61a0      	str	r0, [r4, #24]
 8015c9c:	2800      	cmp	r0, #0
 8015c9e:	d0af      	beq.n	8015c00 <rcl_wait_set_resize+0x200>
 8015ca0:	4632      	mov	r2, r6
 8015ca2:	4629      	mov	r1, r5
 8015ca4:	f004 fd8e 	bl	801a7c4 <memset>
 8015ca8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015cac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015cae:	61e3      	str	r3, [r4, #28]
 8015cb0:	f8da 0020 	ldr.w	r0, [sl, #32]
 8015cb4:	f8ca 501c 	str.w	r5, [sl, #28]
 8015cb8:	4642      	mov	r2, r8
 8015cba:	4631      	mov	r1, r6
 8015cbc:	47b8      	blx	r7
 8015cbe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015cc0:	f8ca 0020 	str.w	r0, [sl, #32]
 8015cc4:	6a1f      	ldr	r7, [r3, #32]
 8015cc6:	2f00      	cmp	r7, #0
 8015cc8:	d058      	beq.n	8015d7c <rcl_wait_set_resize+0x37c>
 8015cca:	4632      	mov	r2, r6
 8015ccc:	4629      	mov	r1, r5
 8015cce:	4638      	mov	r0, r7
 8015cd0:	f004 fd78 	bl	801a7c4 <memset>
 8015cd4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015cd8:	e72b      	b.n	8015b32 <rcl_wait_set_resize+0x132>
 8015cda:	6a20      	ldr	r0, [r4, #32]
 8015cdc:	b128      	cbz	r0, 8015cea <rcl_wait_set_resize+0x2ea>
 8015cde:	4639      	mov	r1, r7
 8015ce0:	47c0      	blx	r8
 8015ce2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015ce4:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015ce8:	6223      	str	r3, [r4, #32]
 8015cea:	f8da 002c 	ldr.w	r0, [sl, #44]	@ 0x2c
 8015cee:	2800      	cmp	r0, #0
 8015cf0:	f43f af4d 	beq.w	8015b8e <rcl_wait_set_resize+0x18e>
 8015cf4:	4639      	mov	r1, r7
 8015cf6:	47c0      	blx	r8
 8015cf8:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	e9ca 330a 	strd	r3, r3, [sl, #40]	@ 0x28
 8015d02:	e744      	b.n	8015b8e <rcl_wait_set_resize+0x18e>
 8015d04:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8015d08:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015d0a:	4641      	mov	r1, r8
 8015d0c:	4632      	mov	r2, r6
 8015d0e:	47c8      	blx	r9
 8015d10:	62a0      	str	r0, [r4, #40]	@ 0x28
 8015d12:	2800      	cmp	r0, #0
 8015d14:	f43f af74 	beq.w	8015c00 <rcl_wait_set_resize+0x200>
 8015d18:	4642      	mov	r2, r8
 8015d1a:	4629      	mov	r1, r5
 8015d1c:	f004 fd52 	bl	801a7c4 <memset>
 8015d20:	f8d4 a030 	ldr.w	sl, [r4, #48]	@ 0x30
 8015d24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d26:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015d28:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8015d2c:	f8ca 5034 	str.w	r5, [sl, #52]	@ 0x34
 8015d30:	4632      	mov	r2, r6
 8015d32:	4641      	mov	r1, r8
 8015d34:	47c8      	blx	r9
 8015d36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d38:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8015d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d3e:	b35b      	cbz	r3, 8015d98 <rcl_wait_set_resize+0x398>
 8015d40:	4642      	mov	r2, r8
 8015d42:	4618      	mov	r0, r3
 8015d44:	4629      	mov	r1, r5
 8015d46:	f004 fd3d 	bl	801a7c4 <memset>
 8015d4a:	4628      	mov	r0, r5
 8015d4c:	b003      	add	sp, #12
 8015d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d52:	200b      	movs	r0, #11
 8015d54:	4770      	bx	lr
 8015d56:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015d5a:	e752      	b.n	8015c02 <rcl_wait_set_resize+0x202>
 8015d5c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d5e:	68a0      	ldr	r0, [r4, #8]
 8015d60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015d62:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015d64:	4790      	blx	r2
 8015d66:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d68:	6920      	ldr	r0, [r4, #16]
 8015d6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015d6c:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015d6e:	e9c4 8802 	strd	r8, r8, [r4, #8]
 8015d72:	4790      	blx	r2
 8015d74:	e9c4 8804 	strd	r8, r8, [r4, #16]
 8015d78:	200a      	movs	r0, #10
 8015d7a:	e742      	b.n	8015c02 <rcl_wait_set_resize+0x202>
 8015d7c:	69a0      	ldr	r0, [r4, #24]
 8015d7e:	4641      	mov	r1, r8
 8015d80:	47c8      	blx	r9
 8015d82:	e9c4 7706 	strd	r7, r7, [r4, #24]
 8015d86:	200a      	movs	r0, #10
 8015d88:	e73b      	b.n	8015c02 <rcl_wait_set_resize+0x202>
 8015d8a:	6a20      	ldr	r0, [r4, #32]
 8015d8c:	4639      	mov	r1, r7
 8015d8e:	47c0      	blx	r8
 8015d90:	e9c4 5508 	strd	r5, r5, [r4, #32]
 8015d94:	200a      	movs	r0, #10
 8015d96:	e734      	b.n	8015c02 <rcl_wait_set_resize+0x202>
 8015d98:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015d9a:	9300      	str	r3, [sp, #0]
 8015d9c:	4631      	mov	r1, r6
 8015d9e:	47b8      	blx	r7
 8015da0:	9b00      	ldr	r3, [sp, #0]
 8015da2:	200a      	movs	r0, #10
 8015da4:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015da8:	e72b      	b.n	8015c02 <rcl_wait_set_resize+0x202>
 8015daa:	bf00      	nop

08015dac <rcl_wait_set_init>:
 8015dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015db0:	b084      	sub	sp, #16
 8015db2:	4604      	mov	r4, r0
 8015db4:	a810      	add	r0, sp, #64	@ 0x40
 8015db6:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8015dba:	460f      	mov	r7, r1
 8015dbc:	4690      	mov	r8, r2
 8015dbe:	4699      	mov	r9, r3
 8015dc0:	f7f8 ff6c 	bl	800ec9c <rcutils_allocator_is_valid>
 8015dc4:	2800      	cmp	r0, #0
 8015dc6:	d06b      	beq.n	8015ea0 <rcl_wait_set_init+0xf4>
 8015dc8:	2c00      	cmp	r4, #0
 8015dca:	d069      	beq.n	8015ea0 <rcl_wait_set_init+0xf4>
 8015dcc:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015dce:	b125      	cbz	r5, 8015dda <rcl_wait_set_init+0x2e>
 8015dd0:	2564      	movs	r5, #100	@ 0x64
 8015dd2:	4628      	mov	r0, r5
 8015dd4:	b004      	add	sp, #16
 8015dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dda:	f1ba 0f00 	cmp.w	sl, #0
 8015dde:	d05f      	beq.n	8015ea0 <rcl_wait_set_init+0xf4>
 8015de0:	4650      	mov	r0, sl
 8015de2:	f7fe fa49 	bl	8014278 <rcl_context_is_valid>
 8015de6:	2800      	cmp	r0, #0
 8015de8:	d067      	beq.n	8015eba <rcl_wait_set_init+0x10e>
 8015dea:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015dec:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8015dee:	205c      	movs	r0, #92	@ 0x5c
 8015df0:	4798      	blx	r3
 8015df2:	6320      	str	r0, [r4, #48]	@ 0x30
 8015df4:	2800      	cmp	r0, #0
 8015df6:	d062      	beq.n	8015ebe <rcl_wait_set_init+0x112>
 8015df8:	225c      	movs	r2, #92	@ 0x5c
 8015dfa:	4629      	mov	r1, r5
 8015dfc:	f004 fce2 	bl	801a7c4 <memset>
 8015e00:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015e04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015e08:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015e0a:	f8dc e000 	ldr.w	lr, [ip]
 8015e0e:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8015e12:	f106 0c48 	add.w	ip, r6, #72	@ 0x48
 8015e16:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8015e1a:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8015e1e:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8015e22:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8015e26:	60b5      	str	r5, [r6, #8]
 8015e28:	6075      	str	r5, [r6, #4]
 8015e2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015e2e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015e32:	1899      	adds	r1, r3, r2
 8015e34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e36:	f8da 0000 	ldr.w	r0, [sl]
 8015e3a:	f8cc e000 	str.w	lr, [ip]
 8015e3e:	4419      	add	r1, r3
 8015e40:	4441      	add	r1, r8
 8015e42:	3028      	adds	r0, #40	@ 0x28
 8015e44:	eb01 0147 	add.w	r1, r1, r7, lsl #1
 8015e48:	f001 fa22 	bl	8017290 <rmw_create_wait_set>
 8015e4c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e4e:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8015e50:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015e52:	b350      	cbz	r0, 8015eaa <rcl_wait_set_init+0xfe>
 8015e54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e56:	9302      	str	r3, [sp, #8]
 8015e58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015e5a:	9301      	str	r3, [sp, #4]
 8015e5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e5e:	9300      	str	r3, [sp, #0]
 8015e60:	4642      	mov	r2, r8
 8015e62:	464b      	mov	r3, r9
 8015e64:	4639      	mov	r1, r7
 8015e66:	4620      	mov	r0, r4
 8015e68:	f7ff fdca 	bl	8015a00 <rcl_wait_set_resize>
 8015e6c:	4605      	mov	r5, r0
 8015e6e:	2800      	cmp	r0, #0
 8015e70:	d0af      	beq.n	8015dd2 <rcl_wait_set_init+0x26>
 8015e72:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e74:	bb2b      	cbnz	r3, 8015ec2 <rcl_wait_set_init+0x116>
 8015e76:	2600      	movs	r6, #0
 8015e78:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015e7c:	9600      	str	r6, [sp, #0]
 8015e7e:	4633      	mov	r3, r6
 8015e80:	4632      	mov	r2, r6
 8015e82:	4631      	mov	r1, r6
 8015e84:	4620      	mov	r0, r4
 8015e86:	f7ff fdbb 	bl	8015a00 <rcl_wait_set_resize>
 8015e8a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015e8c:	2800      	cmp	r0, #0
 8015e8e:	d0a0      	beq.n	8015dd2 <rcl_wait_set_init+0x26>
 8015e90:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8015e92:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8015e94:	4798      	blx	r3
 8015e96:	4628      	mov	r0, r5
 8015e98:	6326      	str	r6, [r4, #48]	@ 0x30
 8015e9a:	b004      	add	sp, #16
 8015e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ea0:	250b      	movs	r5, #11
 8015ea2:	4628      	mov	r0, r5
 8015ea4:	b004      	add	sp, #16
 8015ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eaa:	2501      	movs	r5, #1
 8015eac:	f001 f9fa 	bl	80172a4 <rmw_destroy_wait_set>
 8015eb0:	2800      	cmp	r0, #0
 8015eb2:	bf18      	it	ne
 8015eb4:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8015eb8:	e7dd      	b.n	8015e76 <rcl_wait_set_init+0xca>
 8015eba:	2565      	movs	r5, #101	@ 0x65
 8015ebc:	e789      	b.n	8015dd2 <rcl_wait_set_init+0x26>
 8015ebe:	250a      	movs	r5, #10
 8015ec0:	e787      	b.n	8015dd2 <rcl_wait_set_init+0x26>
 8015ec2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015ec4:	e7f2      	b.n	8015eac <rcl_wait_set_init+0x100>
 8015ec6:	bf00      	nop

08015ec8 <rcl_wait_set_add_guard_condition>:
 8015ec8:	b320      	cbz	r0, 8015f14 <rcl_wait_set_add_guard_condition+0x4c>
 8015eca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015ecc:	b570      	push	{r4, r5, r6, lr}
 8015ece:	4604      	mov	r4, r0
 8015ed0:	b1d3      	cbz	r3, 8015f08 <rcl_wait_set_add_guard_condition+0x40>
 8015ed2:	b319      	cbz	r1, 8015f1c <rcl_wait_set_add_guard_condition+0x54>
 8015ed4:	68dd      	ldr	r5, [r3, #12]
 8015ed6:	68e0      	ldr	r0, [r4, #12]
 8015ed8:	4285      	cmp	r5, r0
 8015eda:	d218      	bcs.n	8015f0e <rcl_wait_set_add_guard_condition+0x46>
 8015edc:	68a0      	ldr	r0, [r4, #8]
 8015ede:	1c6e      	adds	r6, r5, #1
 8015ee0:	60de      	str	r6, [r3, #12]
 8015ee2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015ee6:	b102      	cbz	r2, 8015eea <rcl_wait_set_add_guard_condition+0x22>
 8015ee8:	6015      	str	r5, [r2, #0]
 8015eea:	4608      	mov	r0, r1
 8015eec:	f003 f8e4 	bl	80190b8 <rcl_guard_condition_get_rmw_handle>
 8015ef0:	b190      	cbz	r0, 8015f18 <rcl_wait_set_add_guard_condition+0x50>
 8015ef2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015ef4:	6842      	ldr	r2, [r0, #4]
 8015ef6:	695b      	ldr	r3, [r3, #20]
 8015ef8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015efc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015efe:	6913      	ldr	r3, [r2, #16]
 8015f00:	3301      	adds	r3, #1
 8015f02:	6113      	str	r3, [r2, #16]
 8015f04:	2000      	movs	r0, #0
 8015f06:	bd70      	pop	{r4, r5, r6, pc}
 8015f08:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015f0c:	bd70      	pop	{r4, r5, r6, pc}
 8015f0e:	f240 3086 	movw	r0, #902	@ 0x386
 8015f12:	bd70      	pop	{r4, r5, r6, pc}
 8015f14:	200b      	movs	r0, #11
 8015f16:	4770      	bx	lr
 8015f18:	2001      	movs	r0, #1
 8015f1a:	bd70      	pop	{r4, r5, r6, pc}
 8015f1c:	200b      	movs	r0, #11
 8015f1e:	bd70      	pop	{r4, r5, r6, pc}

08015f20 <rcl_wait_set_add_timer>:
 8015f20:	b340      	cbz	r0, 8015f74 <rcl_wait_set_add_timer+0x54>
 8015f22:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015f24:	b570      	push	{r4, r5, r6, lr}
 8015f26:	4604      	mov	r4, r0
 8015f28:	b1f3      	cbz	r3, 8015f68 <rcl_wait_set_add_timer+0x48>
 8015f2a:	b329      	cbz	r1, 8015f78 <rcl_wait_set_add_timer+0x58>
 8015f2c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8015f2e:	6965      	ldr	r5, [r4, #20]
 8015f30:	42a8      	cmp	r0, r5
 8015f32:	d21c      	bcs.n	8015f6e <rcl_wait_set_add_timer+0x4e>
 8015f34:	6925      	ldr	r5, [r4, #16]
 8015f36:	1c46      	adds	r6, r0, #1
 8015f38:	641e      	str	r6, [r3, #64]	@ 0x40
 8015f3a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8015f3e:	b102      	cbz	r2, 8015f42 <rcl_wait_set_add_timer+0x22>
 8015f40:	6010      	str	r0, [r2, #0]
 8015f42:	4608      	mov	r0, r1
 8015f44:	f7ff faa4 	bl	8015490 <rcl_timer_get_guard_condition>
 8015f48:	b168      	cbz	r0, 8015f66 <rcl_wait_set_add_timer+0x46>
 8015f4a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015f4c:	68e3      	ldr	r3, [r4, #12]
 8015f4e:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8015f50:	3b01      	subs	r3, #1
 8015f52:	441d      	add	r5, r3
 8015f54:	f003 f8b0 	bl	80190b8 <rcl_guard_condition_get_rmw_handle>
 8015f58:	b180      	cbz	r0, 8015f7c <rcl_wait_set_add_timer+0x5c>
 8015f5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015f5c:	6842      	ldr	r2, [r0, #4]
 8015f5e:	695b      	ldr	r3, [r3, #20]
 8015f60:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015f64:	2000      	movs	r0, #0
 8015f66:	bd70      	pop	{r4, r5, r6, pc}
 8015f68:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015f6c:	bd70      	pop	{r4, r5, r6, pc}
 8015f6e:	f240 3086 	movw	r0, #902	@ 0x386
 8015f72:	bd70      	pop	{r4, r5, r6, pc}
 8015f74:	200b      	movs	r0, #11
 8015f76:	4770      	bx	lr
 8015f78:	200b      	movs	r0, #11
 8015f7a:	bd70      	pop	{r4, r5, r6, pc}
 8015f7c:	2001      	movs	r0, #1
 8015f7e:	bd70      	pop	{r4, r5, r6, pc}

08015f80 <rcl_wait_set_add_client>:
 8015f80:	b320      	cbz	r0, 8015fcc <rcl_wait_set_add_client+0x4c>
 8015f82:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015f84:	b570      	push	{r4, r5, r6, lr}
 8015f86:	4604      	mov	r4, r0
 8015f88:	b1d3      	cbz	r3, 8015fc0 <rcl_wait_set_add_client+0x40>
 8015f8a:	b319      	cbz	r1, 8015fd4 <rcl_wait_set_add_client+0x54>
 8015f8c:	699d      	ldr	r5, [r3, #24]
 8015f8e:	69e0      	ldr	r0, [r4, #28]
 8015f90:	4285      	cmp	r5, r0
 8015f92:	d218      	bcs.n	8015fc6 <rcl_wait_set_add_client+0x46>
 8015f94:	69a0      	ldr	r0, [r4, #24]
 8015f96:	1c6e      	adds	r6, r5, #1
 8015f98:	619e      	str	r6, [r3, #24]
 8015f9a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015f9e:	b102      	cbz	r2, 8015fa2 <rcl_wait_set_add_client+0x22>
 8015fa0:	6015      	str	r5, [r2, #0]
 8015fa2:	4608      	mov	r0, r1
 8015fa4:	f7fe f908 	bl	80141b8 <rcl_client_get_rmw_handle>
 8015fa8:	b190      	cbz	r0, 8015fd0 <rcl_wait_set_add_client+0x50>
 8015faa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015fac:	6842      	ldr	r2, [r0, #4]
 8015fae:	6a1b      	ldr	r3, [r3, #32]
 8015fb0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015fb4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015fb6:	69d3      	ldr	r3, [r2, #28]
 8015fb8:	3301      	adds	r3, #1
 8015fba:	61d3      	str	r3, [r2, #28]
 8015fbc:	2000      	movs	r0, #0
 8015fbe:	bd70      	pop	{r4, r5, r6, pc}
 8015fc0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015fc4:	bd70      	pop	{r4, r5, r6, pc}
 8015fc6:	f240 3086 	movw	r0, #902	@ 0x386
 8015fca:	bd70      	pop	{r4, r5, r6, pc}
 8015fcc:	200b      	movs	r0, #11
 8015fce:	4770      	bx	lr
 8015fd0:	2001      	movs	r0, #1
 8015fd2:	bd70      	pop	{r4, r5, r6, pc}
 8015fd4:	200b      	movs	r0, #11
 8015fd6:	bd70      	pop	{r4, r5, r6, pc}

08015fd8 <rcl_wait_set_add_service>:
 8015fd8:	b320      	cbz	r0, 8016024 <rcl_wait_set_add_service+0x4c>
 8015fda:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015fdc:	b570      	push	{r4, r5, r6, lr}
 8015fde:	4604      	mov	r4, r0
 8015fe0:	b1d3      	cbz	r3, 8016018 <rcl_wait_set_add_service+0x40>
 8015fe2:	b319      	cbz	r1, 801602c <rcl_wait_set_add_service+0x54>
 8015fe4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8015fe6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8015fe8:	4285      	cmp	r5, r0
 8015fea:	d218      	bcs.n	801601e <rcl_wait_set_add_service+0x46>
 8015fec:	6a20      	ldr	r0, [r4, #32]
 8015fee:	1c6e      	adds	r6, r5, #1
 8015ff0:	625e      	str	r6, [r3, #36]	@ 0x24
 8015ff2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015ff6:	b102      	cbz	r2, 8015ffa <rcl_wait_set_add_service+0x22>
 8015ff8:	6015      	str	r5, [r2, #0]
 8015ffa:	4608      	mov	r0, r1
 8015ffc:	f7fe fed4 	bl	8014da8 <rcl_service_get_rmw_handle>
 8016000:	b190      	cbz	r0, 8016028 <rcl_wait_set_add_service+0x50>
 8016002:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016004:	6842      	ldr	r2, [r0, #4]
 8016006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016008:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801600c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801600e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8016010:	3301      	adds	r3, #1
 8016012:	6293      	str	r3, [r2, #40]	@ 0x28
 8016014:	2000      	movs	r0, #0
 8016016:	bd70      	pop	{r4, r5, r6, pc}
 8016018:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801601c:	bd70      	pop	{r4, r5, r6, pc}
 801601e:	f240 3086 	movw	r0, #902	@ 0x386
 8016022:	bd70      	pop	{r4, r5, r6, pc}
 8016024:	200b      	movs	r0, #11
 8016026:	4770      	bx	lr
 8016028:	2001      	movs	r0, #1
 801602a:	bd70      	pop	{r4, r5, r6, pc}
 801602c:	200b      	movs	r0, #11
 801602e:	bd70      	pop	{r4, r5, r6, pc}

08016030 <rcl_wait>:
 8016030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016034:	b08f      	sub	sp, #60	@ 0x3c
 8016036:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801603a:	2800      	cmp	r0, #0
 801603c:	f000 814c 	beq.w	80162d8 <rcl_wait+0x2a8>
 8016040:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 8016042:	4604      	mov	r4, r0
 8016044:	2d00      	cmp	r5, #0
 8016046:	f000 80bc 	beq.w	80161c2 <rcl_wait+0x192>
 801604a:	6843      	ldr	r3, [r0, #4]
 801604c:	b973      	cbnz	r3, 801606c <rcl_wait+0x3c>
 801604e:	68e3      	ldr	r3, [r4, #12]
 8016050:	b963      	cbnz	r3, 801606c <rcl_wait+0x3c>
 8016052:	6963      	ldr	r3, [r4, #20]
 8016054:	b953      	cbnz	r3, 801606c <rcl_wait+0x3c>
 8016056:	69e3      	ldr	r3, [r4, #28]
 8016058:	b943      	cbnz	r3, 801606c <rcl_wait+0x3c>
 801605a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801605c:	b933      	cbnz	r3, 801606c <rcl_wait+0x3c>
 801605e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8016060:	b923      	cbnz	r3, 801606c <rcl_wait+0x3c>
 8016062:	f240 3085 	movw	r0, #901	@ 0x385
 8016066:	b00f      	add	sp, #60	@ 0x3c
 8016068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801606c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016070:	2a01      	cmp	r2, #1
 8016072:	f173 0300 	sbcs.w	r3, r3, #0
 8016076:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8016078:	db56      	blt.n	8016128 <rcl_wait+0xf8>
 801607a:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 801607e:	2900      	cmp	r1, #0
 8016080:	f000 8149 	beq.w	8016316 <rcl_wait+0x2e6>
 8016084:	2300      	movs	r3, #0
 8016086:	9307      	str	r3, [sp, #28]
 8016088:	469b      	mov	fp, r3
 801608a:	f04f 0800 	mov.w	r8, #0
 801608e:	f04f 0900 	mov.w	r9, #0
 8016092:	e00d      	b.n	80160b0 <rcl_wait+0x80>
 8016094:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016096:	6922      	ldr	r2, [r4, #16]
 8016098:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 801609a:	f842 000a 	str.w	r0, [r2, sl]
 801609e:	f118 0801 	adds.w	r8, r8, #1
 80160a2:	f149 0900 	adc.w	r9, r9, #0
 80160a6:	2300      	movs	r3, #0
 80160a8:	4599      	cmp	r9, r3
 80160aa:	bf08      	it	eq
 80160ac:	4588      	cmpeq	r8, r1
 80160ae:	d243      	bcs.n	8016138 <rcl_wait+0x108>
 80160b0:	6922      	ldr	r2, [r4, #16]
 80160b2:	ea4f 0a88 	mov.w	sl, r8, lsl #2
 80160b6:	f852 000a 	ldr.w	r0, [r2, sl]
 80160ba:	2800      	cmp	r0, #0
 80160bc:	d0ef      	beq.n	801609e <rcl_wait+0x6e>
 80160be:	68e2      	ldr	r2, [r4, #12]
 80160c0:	6969      	ldr	r1, [r5, #20]
 80160c2:	4442      	add	r2, r8
 80160c4:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 80160c8:	b13b      	cbz	r3, 80160da <rcl_wait+0xaa>
 80160ca:	692a      	ldr	r2, [r5, #16]
 80160cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80160d0:	6921      	ldr	r1, [r4, #16]
 80160d2:	3201      	adds	r2, #1
 80160d4:	f851 000a 	ldr.w	r0, [r1, sl]
 80160d8:	612a      	str	r2, [r5, #16]
 80160da:	f10d 0127 	add.w	r1, sp, #39	@ 0x27
 80160de:	f88d b027 	strb.w	fp, [sp, #39]	@ 0x27
 80160e2:	f7ff f9c3 	bl	801546c <rcl_timer_is_canceled>
 80160e6:	2800      	cmp	r0, #0
 80160e8:	d1bd      	bne.n	8016066 <rcl_wait+0x36>
 80160ea:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 80160ee:	2a00      	cmp	r2, #0
 80160f0:	d1d0      	bne.n	8016094 <rcl_wait+0x64>
 80160f2:	6922      	ldr	r2, [r4, #16]
 80160f4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80160f8:	f852 000a 	ldr.w	r0, [r2, sl]
 80160fc:	a90a      	add	r1, sp, #40	@ 0x28
 80160fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016102:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016106:	f7ff f98d 	bl	8015424 <rcl_timer_get_time_until_next_call>
 801610a:	2800      	cmp	r0, #0
 801610c:	d1ab      	bne.n	8016066 <rcl_wait+0x36>
 801610e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8016112:	42b2      	cmp	r2, r6
 8016114:	eb73 0107 	sbcs.w	r1, r3, r7
 8016118:	da03      	bge.n	8016122 <rcl_wait+0xf2>
 801611a:	461f      	mov	r7, r3
 801611c:	2301      	movs	r3, #1
 801611e:	4616      	mov	r6, r2
 8016120:	9307      	str	r3, [sp, #28]
 8016122:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016124:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8016126:	e7ba      	b.n	801609e <rcl_wait+0x6e>
 8016128:	2900      	cmp	r1, #0
 801612a:	f000 80de 	beq.w	80162ea <rcl_wait+0x2ba>
 801612e:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016132:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016136:	e7a5      	b.n	8016084 <rcl_wait+0x54>
 8016138:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801613c:	4313      	orrs	r3, r2
 801613e:	d145      	bne.n	80161cc <rcl_wait+0x19c>
 8016140:	2300      	movs	r3, #0
 8016142:	2200      	movs	r2, #0
 8016144:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016148:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801614c:	ab0a      	add	r3, sp, #40	@ 0x28
 801614e:	9302      	str	r3, [sp, #8]
 8016150:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8016152:	9301      	str	r3, [sp, #4]
 8016154:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8016158:	9300      	str	r3, [sp, #0]
 801615a:	f105 0228 	add.w	r2, r5, #40	@ 0x28
 801615e:	f105 031c 	add.w	r3, r5, #28
 8016162:	f105 0110 	add.w	r1, r5, #16
 8016166:	1d28      	adds	r0, r5, #4
 8016168:	f000 ff12 	bl	8016f90 <rmw_wait>
 801616c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801616e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016170:	4680      	mov	r8, r0
 8016172:	b30a      	cbz	r2, 80161b8 <rcl_wait+0x188>
 8016174:	2500      	movs	r5, #0
 8016176:	462f      	mov	r7, r5
 8016178:	e004      	b.n	8016184 <rcl_wait+0x154>
 801617a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801617c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801617e:	3501      	adds	r5, #1
 8016180:	42aa      	cmp	r2, r5
 8016182:	d919      	bls.n	80161b8 <rcl_wait+0x188>
 8016184:	6922      	ldr	r2, [r4, #16]
 8016186:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801618a:	f10d 0127 	add.w	r1, sp, #39	@ 0x27
 801618e:	00ae      	lsls	r6, r5, #2
 8016190:	2800      	cmp	r0, #0
 8016192:	d0f3      	beq.n	801617c <rcl_wait+0x14c>
 8016194:	f88d 7027 	strb.w	r7, [sp, #39]	@ 0x27
 8016198:	f7ff f90c 	bl	80153b4 <rcl_timer_is_ready>
 801619c:	2800      	cmp	r0, #0
 801619e:	f47f af62 	bne.w	8016066 <rcl_wait+0x36>
 80161a2:	f89d 2027 	ldrb.w	r2, [sp, #39]	@ 0x27
 80161a6:	2a00      	cmp	r2, #0
 80161a8:	d1e7      	bne.n	801617a <rcl_wait+0x14a>
 80161aa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80161ac:	6921      	ldr	r1, [r4, #16]
 80161ae:	518a      	str	r2, [r1, r6]
 80161b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80161b2:	3501      	adds	r5, #1
 80161b4:	42aa      	cmp	r2, r5
 80161b6:	d8e5      	bhi.n	8016184 <rcl_wait+0x154>
 80161b8:	f038 0002 	bics.w	r0, r8, #2
 80161bc:	d029      	beq.n	8016212 <rcl_wait+0x1e2>
 80161be:	2001      	movs	r0, #1
 80161c0:	e751      	b.n	8016066 <rcl_wait+0x36>
 80161c2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80161c6:	b00f      	add	sp, #60	@ 0x3c
 80161c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80161d0:	2a01      	cmp	r2, #1
 80161d2:	f173 0300 	sbcs.w	r3, r3, #0
 80161d6:	f2c0 8083 	blt.w	80162e0 <rcl_wait+0x2b0>
 80161da:	2e00      	cmp	r6, #0
 80161dc:	f177 0300 	sbcs.w	r3, r7, #0
 80161e0:	bfbc      	itt	lt
 80161e2:	2600      	movlt	r6, #0
 80161e4:	2700      	movlt	r7, #0
 80161e6:	a34e      	add	r3, pc, #312	@ (adr r3, 8016320 <rcl_wait+0x2f0>)
 80161e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ec:	4630      	mov	r0, r6
 80161ee:	4639      	mov	r1, r7
 80161f0:	f7ea fd62 	bl	8000cb8 <__aeabi_ldivmod>
 80161f4:	a34a      	add	r3, pc, #296	@ (adr r3, 8016320 <rcl_wait+0x2f0>)
 80161f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161fa:	4680      	mov	r8, r0
 80161fc:	4689      	mov	r9, r1
 80161fe:	4630      	mov	r0, r6
 8016200:	4639      	mov	r1, r7
 8016202:	e9cd 890a 	strd	r8, r9, [sp, #40]	@ 0x28
 8016206:	f7ea fd57 	bl	8000cb8 <__aeabi_ldivmod>
 801620a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801620e:	ab0a      	add	r3, sp, #40	@ 0x28
 8016210:	e79d      	b.n	801614e <rcl_wait+0x11e>
 8016212:	6866      	ldr	r6, [r4, #4]
 8016214:	4602      	mov	r2, r0
 8016216:	b91e      	cbnz	r6, 8016220 <rcl_wait+0x1f0>
 8016218:	e00d      	b.n	8016236 <rcl_wait+0x206>
 801621a:	3201      	adds	r2, #1
 801621c:	42b2      	cmp	r2, r6
 801621e:	d00a      	beq.n	8016236 <rcl_wait+0x206>
 8016220:	6899      	ldr	r1, [r3, #8]
 8016222:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016226:	2900      	cmp	r1, #0
 8016228:	d1f7      	bne.n	801621a <rcl_wait+0x1ea>
 801622a:	6825      	ldr	r5, [r4, #0]
 801622c:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016230:	3201      	adds	r2, #1
 8016232:	42b2      	cmp	r2, r6
 8016234:	d1f4      	bne.n	8016220 <rcl_wait+0x1f0>
 8016236:	68e6      	ldr	r6, [r4, #12]
 8016238:	2200      	movs	r2, #0
 801623a:	b91e      	cbnz	r6, 8016244 <rcl_wait+0x214>
 801623c:	e00d      	b.n	801625a <rcl_wait+0x22a>
 801623e:	3201      	adds	r2, #1
 8016240:	42b2      	cmp	r2, r6
 8016242:	d00a      	beq.n	801625a <rcl_wait+0x22a>
 8016244:	6959      	ldr	r1, [r3, #20]
 8016246:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801624a:	2900      	cmp	r1, #0
 801624c:	d1f7      	bne.n	801623e <rcl_wait+0x20e>
 801624e:	68a5      	ldr	r5, [r4, #8]
 8016250:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016254:	3201      	adds	r2, #1
 8016256:	42b2      	cmp	r2, r6
 8016258:	d1f4      	bne.n	8016244 <rcl_wait+0x214>
 801625a:	69e6      	ldr	r6, [r4, #28]
 801625c:	2200      	movs	r2, #0
 801625e:	b91e      	cbnz	r6, 8016268 <rcl_wait+0x238>
 8016260:	e00d      	b.n	801627e <rcl_wait+0x24e>
 8016262:	3201      	adds	r2, #1
 8016264:	42b2      	cmp	r2, r6
 8016266:	d00a      	beq.n	801627e <rcl_wait+0x24e>
 8016268:	6a19      	ldr	r1, [r3, #32]
 801626a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801626e:	2900      	cmp	r1, #0
 8016270:	d1f7      	bne.n	8016262 <rcl_wait+0x232>
 8016272:	69a5      	ldr	r5, [r4, #24]
 8016274:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 8016278:	3201      	adds	r2, #1
 801627a:	42b2      	cmp	r2, r6
 801627c:	d1f4      	bne.n	8016268 <rcl_wait+0x238>
 801627e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8016280:	2200      	movs	r2, #0
 8016282:	b91e      	cbnz	r6, 801628c <rcl_wait+0x25c>
 8016284:	e00d      	b.n	80162a2 <rcl_wait+0x272>
 8016286:	3201      	adds	r2, #1
 8016288:	4296      	cmp	r6, r2
 801628a:	d00a      	beq.n	80162a2 <rcl_wait+0x272>
 801628c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801628e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016292:	2900      	cmp	r1, #0
 8016294:	d1f7      	bne.n	8016286 <rcl_wait+0x256>
 8016296:	6a25      	ldr	r5, [r4, #32]
 8016298:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 801629c:	3201      	adds	r2, #1
 801629e:	4296      	cmp	r6, r2
 80162a0:	d1f4      	bne.n	801628c <rcl_wait+0x25c>
 80162a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80162a4:	2200      	movs	r2, #0
 80162a6:	b91e      	cbnz	r6, 80162b0 <rcl_wait+0x280>
 80162a8:	e00d      	b.n	80162c6 <rcl_wait+0x296>
 80162aa:	3201      	adds	r2, #1
 80162ac:	42b2      	cmp	r2, r6
 80162ae:	d00a      	beq.n	80162c6 <rcl_wait+0x296>
 80162b0:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80162b2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80162b6:	2900      	cmp	r1, #0
 80162b8:	d1f7      	bne.n	80162aa <rcl_wait+0x27a>
 80162ba:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80162bc:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
 80162c0:	3201      	adds	r2, #1
 80162c2:	42b2      	cmp	r2, r6
 80162c4:	d1f4      	bne.n	80162b0 <rcl_wait+0x280>
 80162c6:	f1b8 0f02 	cmp.w	r8, #2
 80162ca:	f47f aecc 	bne.w	8016066 <rcl_wait+0x36>
 80162ce:	9b07      	ldr	r3, [sp, #28]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	bf08      	it	eq
 80162d4:	2002      	moveq	r0, #2
 80162d6:	e6c6      	b.n	8016066 <rcl_wait+0x36>
 80162d8:	200b      	movs	r0, #11
 80162da:	b00f      	add	sp, #60	@ 0x3c
 80162dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162e0:	9b07      	ldr	r3, [sp, #28]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	f47f af79 	bne.w	80161da <rcl_wait+0x1aa>
 80162e8:	e731      	b.n	801614e <rcl_wait+0x11e>
 80162ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80162ee:	4313      	orrs	r3, r2
 80162f0:	bf08      	it	eq
 80162f2:	9107      	streq	r1, [sp, #28]
 80162f4:	f43f af24 	beq.w	8016140 <rcl_wait+0x110>
 80162f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80162fc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8016300:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016304:	2a01      	cmp	r2, #1
 8016306:	f173 0300 	sbcs.w	r3, r3, #0
 801630a:	f04f 0300 	mov.w	r3, #0
 801630e:	9307      	str	r3, [sp, #28]
 8016310:	f6bf af63 	bge.w	80161da <rcl_wait+0x1aa>
 8016314:	e71b      	b.n	801614e <rcl_wait+0x11e>
 8016316:	4632      	mov	r2, r6
 8016318:	463b      	mov	r3, r7
 801631a:	e7f3      	b.n	8016304 <rcl_wait+0x2d4>
 801631c:	f3af 8000 	nop.w
 8016320:	3b9aca00 	.word	0x3b9aca00
 8016324:	00000000 	.word	0x00000000

08016328 <__atomic_load_8>:
 8016328:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801632c:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8016330:	4b14      	ldr	r3, [pc, #80]	@ (8016384 <__atomic_load_8+0x5c>)
 8016332:	4a15      	ldr	r2, [pc, #84]	@ (8016388 <__atomic_load_8+0x60>)
 8016334:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016338:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801633c:	fb03 f301 	mul.w	r3, r3, r1
 8016340:	ea83 33d3 	eor.w	r3, r3, r3, lsr #15
 8016344:	fba2 1203 	umull	r1, r2, r2, r3
 8016348:	0912      	lsrs	r2, r2, #4
 801634a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801634e:	b430      	push	{r4, r5}
 8016350:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
 8016354:	4c0d      	ldr	r4, [pc, #52]	@ (801638c <__atomic_load_8+0x64>)
 8016356:	1a9b      	subs	r3, r3, r2
 8016358:	18e1      	adds	r1, r4, r3
 801635a:	f04f 0501 	mov.w	r5, #1
 801635e:	e8d1 2f4f 	ldrexb	r2, [r1]
 8016362:	e8c1 5f4c 	strexb	ip, r5, [r1]
 8016366:	f1bc 0f00 	cmp.w	ip, #0
 801636a:	d1f8      	bne.n	801635e <__atomic_load_8+0x36>
 801636c:	f3bf 8f5b 	dmb	ish
 8016370:	b2d2      	uxtb	r2, r2
 8016372:	2a00      	cmp	r2, #0
 8016374:	d1f3      	bne.n	801635e <__atomic_load_8+0x36>
 8016376:	e9d0 0100 	ldrd	r0, r1, [r0]
 801637a:	f3bf 8f5b 	dmb	ish
 801637e:	54e2      	strb	r2, [r4, r3]
 8016380:	bc30      	pop	{r4, r5}
 8016382:	4770      	bx	lr
 8016384:	27d4eb2d 	.word	0x27d4eb2d
 8016388:	b21642c9 	.word	0xb21642c9
 801638c:	20009de0 	.word	0x20009de0

08016390 <__atomic_store_8>:
 8016390:	b4f0      	push	{r4, r5, r6, r7}
 8016392:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016396:	f085 053d 	eor.w	r5, r5, #61	@ 0x3d
 801639a:	4914      	ldr	r1, [pc, #80]	@ (80163ec <__atomic_store_8+0x5c>)
 801639c:	4c14      	ldr	r4, [pc, #80]	@ (80163f0 <__atomic_store_8+0x60>)
 801639e:	4e15      	ldr	r6, [pc, #84]	@ (80163f4 <__atomic_store_8+0x64>)
 80163a0:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 80163a4:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 80163a8:	fb01 f105 	mul.w	r1, r1, r5
 80163ac:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80163b0:	fba4 5401 	umull	r5, r4, r4, r1
 80163b4:	0924      	lsrs	r4, r4, #4
 80163b6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80163ba:	ebc4 04c5 	rsb	r4, r4, r5, lsl #3
 80163be:	1b09      	subs	r1, r1, r4
 80163c0:	1875      	adds	r5, r6, r1
 80163c2:	f04f 0701 	mov.w	r7, #1
 80163c6:	e8d5 4f4f 	ldrexb	r4, [r5]
 80163ca:	e8c5 7f4c 	strexb	ip, r7, [r5]
 80163ce:	f1bc 0f00 	cmp.w	ip, #0
 80163d2:	d1f8      	bne.n	80163c6 <__atomic_store_8+0x36>
 80163d4:	f3bf 8f5b 	dmb	ish
 80163d8:	b2e4      	uxtb	r4, r4
 80163da:	2c00      	cmp	r4, #0
 80163dc:	d1f3      	bne.n	80163c6 <__atomic_store_8+0x36>
 80163de:	e9c0 2300 	strd	r2, r3, [r0]
 80163e2:	f3bf 8f5b 	dmb	ish
 80163e6:	5474      	strb	r4, [r6, r1]
 80163e8:	bcf0      	pop	{r4, r5, r6, r7}
 80163ea:	4770      	bx	lr
 80163ec:	27d4eb2d 	.word	0x27d4eb2d
 80163f0:	b21642c9 	.word	0xb21642c9
 80163f4:	20009de0 	.word	0x20009de0

080163f8 <__atomic_exchange_8>:
 80163f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80163fc:	ea80 4510 	eor.w	r5, r0, r0, lsr #16
 8016400:	f085 053d 	eor.w	r5, r5, #61	@ 0x3d
 8016404:	4c16      	ldr	r4, [pc, #88]	@ (8016460 <__atomic_exchange_8+0x68>)
 8016406:	4917      	ldr	r1, [pc, #92]	@ (8016464 <__atomic_exchange_8+0x6c>)
 8016408:	4e17      	ldr	r6, [pc, #92]	@ (8016468 <__atomic_exchange_8+0x70>)
 801640a:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
 801640e:	ea85 1515 	eor.w	r5, r5, r5, lsr #4
 8016412:	fb04 f505 	mul.w	r5, r4, r5
 8016416:	ea85 35d5 	eor.w	r5, r5, r5, lsr #15
 801641a:	fba1 4105 	umull	r4, r1, r1, r5
 801641e:	0909      	lsrs	r1, r1, #4
 8016420:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8016424:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8016428:	1a6c      	subs	r4, r5, r1
 801642a:	1931      	adds	r1, r6, r4
 801642c:	f04f 0701 	mov.w	r7, #1
 8016430:	e8d1 5f4f 	ldrexb	r5, [r1]
 8016434:	e8c1 7f4c 	strexb	ip, r7, [r1]
 8016438:	f1bc 0f00 	cmp.w	ip, #0
 801643c:	d1f8      	bne.n	8016430 <__atomic_exchange_8+0x38>
 801643e:	f3bf 8f5b 	dmb	ish
 8016442:	b2ed      	uxtb	r5, r5
 8016444:	2d00      	cmp	r5, #0
 8016446:	d1f3      	bne.n	8016430 <__atomic_exchange_8+0x38>
 8016448:	e9d0 8900 	ldrd	r8, r9, [r0]
 801644c:	e9c0 2300 	strd	r2, r3, [r0]
 8016450:	f3bf 8f5b 	dmb	ish
 8016454:	5535      	strb	r5, [r6, r4]
 8016456:	4640      	mov	r0, r8
 8016458:	4649      	mov	r1, r9
 801645a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 801645e:	4770      	bx	lr
 8016460:	27d4eb2d 	.word	0x27d4eb2d
 8016464:	b21642c9 	.word	0xb21642c9
 8016468:	20009de0 	.word	0x20009de0

0801646c <rcutils_is_directory>:
 801646c:	2000      	movs	r0, #0
 801646e:	4770      	bx	lr

08016470 <rcutils_join_path>:
 8016470:	b082      	sub	sp, #8
 8016472:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016476:	2000      	movs	r0, #0
 8016478:	b002      	add	sp, #8
 801647a:	4770      	bx	lr

0801647c <rcutils_to_native_path>:
 801647c:	b084      	sub	sp, #16
 801647e:	a801      	add	r0, sp, #4
 8016480:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016484:	b004      	add	sp, #16
 8016486:	2000      	movs	r0, #0
 8016488:	4770      	bx	lr
 801648a:	bf00      	nop

0801648c <rcutils_format_string_limit>:
 801648c:	b40f      	push	{r0, r1, r2, r3}
 801648e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016490:	b083      	sub	sp, #12
 8016492:	ac08      	add	r4, sp, #32
 8016494:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8016496:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801649a:	b34e      	cbz	r6, 80164f0 <rcutils_format_string_limit+0x64>
 801649c:	a808      	add	r0, sp, #32
 801649e:	f7f8 fbfd 	bl	800ec9c <rcutils_allocator_is_valid>
 80164a2:	b328      	cbz	r0, 80164f0 <rcutils_format_string_limit+0x64>
 80164a4:	2100      	movs	r1, #0
 80164a6:	ab0f      	add	r3, sp, #60	@ 0x3c
 80164a8:	4608      	mov	r0, r1
 80164aa:	4632      	mov	r2, r6
 80164ac:	e9cd 3300 	strd	r3, r3, [sp]
 80164b0:	f000 f904 	bl	80166bc <rcutils_vsnprintf>
 80164b4:	1c43      	adds	r3, r0, #1
 80164b6:	4605      	mov	r5, r0
 80164b8:	d01a      	beq.n	80164f0 <rcutils_format_string_limit+0x64>
 80164ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80164bc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80164be:	1c47      	adds	r7, r0, #1
 80164c0:	429f      	cmp	r7, r3
 80164c2:	bf84      	itt	hi
 80164c4:	461f      	movhi	r7, r3
 80164c6:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 80164ca:	4638      	mov	r0, r7
 80164cc:	9b08      	ldr	r3, [sp, #32]
 80164ce:	4798      	blx	r3
 80164d0:	4604      	mov	r4, r0
 80164d2:	b168      	cbz	r0, 80164f0 <rcutils_format_string_limit+0x64>
 80164d4:	9b01      	ldr	r3, [sp, #4]
 80164d6:	4632      	mov	r2, r6
 80164d8:	4639      	mov	r1, r7
 80164da:	f000 f8ef 	bl	80166bc <rcutils_vsnprintf>
 80164de:	2800      	cmp	r0, #0
 80164e0:	db02      	blt.n	80164e8 <rcutils_format_string_limit+0x5c>
 80164e2:	2300      	movs	r3, #0
 80164e4:	5563      	strb	r3, [r4, r5]
 80164e6:	e004      	b.n	80164f2 <rcutils_format_string_limit+0x66>
 80164e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80164ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80164ec:	4620      	mov	r0, r4
 80164ee:	4798      	blx	r3
 80164f0:	2400      	movs	r4, #0
 80164f2:	4620      	mov	r0, r4
 80164f4:	b003      	add	sp, #12
 80164f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80164fa:	b004      	add	sp, #16
 80164fc:	4770      	bx	lr
 80164fe:	bf00      	nop

08016500 <rcutils_get_env>:
 8016500:	b168      	cbz	r0, 801651e <rcutils_get_env+0x1e>
 8016502:	b510      	push	{r4, lr}
 8016504:	460c      	mov	r4, r1
 8016506:	b129      	cbz	r1, 8016514 <rcutils_get_env+0x14>
 8016508:	f002 fe20 	bl	801914c <getenv>
 801650c:	b120      	cbz	r0, 8016518 <rcutils_get_env+0x18>
 801650e:	6020      	str	r0, [r4, #0]
 8016510:	2000      	movs	r0, #0
 8016512:	bd10      	pop	{r4, pc}
 8016514:	4803      	ldr	r0, [pc, #12]	@ (8016524 <rcutils_get_env+0x24>)
 8016516:	bd10      	pop	{r4, pc}
 8016518:	4b03      	ldr	r3, [pc, #12]	@ (8016528 <rcutils_get_env+0x28>)
 801651a:	6023      	str	r3, [r4, #0]
 801651c:	bd10      	pop	{r4, pc}
 801651e:	4803      	ldr	r0, [pc, #12]	@ (801652c <rcutils_get_env+0x2c>)
 8016520:	4770      	bx	lr
 8016522:	bf00      	nop
 8016524:	0801e4d8 	.word	0x0801e4d8
 8016528:	0801e5fc 	.word	0x0801e5fc
 801652c:	0801e4bc 	.word	0x0801e4bc

08016530 <rcutils_repl_str>:
 8016530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016534:	ed2d 8b02 	vpush	{d8}
 8016538:	b087      	sub	sp, #28
 801653a:	4680      	mov	r8, r0
 801653c:	4608      	mov	r0, r1
 801653e:	f8cd 8000 	str.w	r8, [sp]
 8016542:	ee08 2a10 	vmov	s16, r2
 8016546:	468a      	mov	sl, r1
 8016548:	4699      	mov	r9, r3
 801654a:	f7e9 fea9 	bl	80002a0 <strlen>
 801654e:	2600      	movs	r6, #0
 8016550:	4647      	mov	r7, r8
 8016552:	9001      	str	r0, [sp, #4]
 8016554:	46b3      	mov	fp, r6
 8016556:	2510      	movs	r5, #16
 8016558:	46b0      	mov	r8, r6
 801655a:	e01d      	b.n	8016598 <rcutils_repl_str+0x68>
 801655c:	f10b 0b01 	add.w	fp, fp, #1
 8016560:	455e      	cmp	r6, fp
 8016562:	d211      	bcs.n	8016588 <rcutils_repl_str+0x58>
 8016564:	442e      	add	r6, r5
 8016566:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801656a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801656e:	00b1      	lsls	r1, r6, #2
 8016570:	4798      	blx	r3
 8016572:	2800      	cmp	r0, #0
 8016574:	f000 8084 	beq.w	8016680 <rcutils_repl_str+0x150>
 8016578:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801657c:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8016580:	bf28      	it	cs
 8016582:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8016586:	4680      	mov	r8, r0
 8016588:	9a00      	ldr	r2, [sp, #0]
 801658a:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801658e:	1aa2      	subs	r2, r4, r2
 8016590:	f843 2c04 	str.w	r2, [r3, #-4]
 8016594:	9b01      	ldr	r3, [sp, #4]
 8016596:	18e7      	adds	r7, r4, r3
 8016598:	4651      	mov	r1, sl
 801659a:	4638      	mov	r0, r7
 801659c:	f004 f939 	bl	801a812 <strstr>
 80165a0:	4604      	mov	r4, r0
 80165a2:	4640      	mov	r0, r8
 80165a4:	2c00      	cmp	r4, #0
 80165a6:	d1d9      	bne.n	801655c <rcutils_repl_str+0x2c>
 80165a8:	46b8      	mov	r8, r7
 80165aa:	4607      	mov	r7, r0
 80165ac:	4640      	mov	r0, r8
 80165ae:	f7e9 fe77 	bl	80002a0 <strlen>
 80165b2:	9b00      	ldr	r3, [sp, #0]
 80165b4:	eba8 0303 	sub.w	r3, r8, r3
 80165b8:	181d      	adds	r5, r3, r0
 80165ba:	9504      	str	r5, [sp, #16]
 80165bc:	f1bb 0f00 	cmp.w	fp, #0
 80165c0:	d03d      	beq.n	801663e <rcutils_repl_str+0x10e>
 80165c2:	ee18 0a10 	vmov	r0, s16
 80165c6:	f7e9 fe6b 	bl	80002a0 <strlen>
 80165ca:	9b01      	ldr	r3, [sp, #4]
 80165cc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80165d0:	1ac3      	subs	r3, r0, r3
 80165d2:	fb0b 5303 	mla	r3, fp, r3, r5
 80165d6:	9305      	str	r3, [sp, #20]
 80165d8:	4606      	mov	r6, r0
 80165da:	1c58      	adds	r0, r3, #1
 80165dc:	f8d9 3000 	ldr.w	r3, [r9]
 80165e0:	4798      	blx	r3
 80165e2:	9003      	str	r0, [sp, #12]
 80165e4:	2800      	cmp	r0, #0
 80165e6:	d04c      	beq.n	8016682 <rcutils_repl_str+0x152>
 80165e8:	683a      	ldr	r2, [r7, #0]
 80165ea:	9900      	ldr	r1, [sp, #0]
 80165ec:	f004 fa0d 	bl	801aa0a <memcpy>
 80165f0:	9b03      	ldr	r3, [sp, #12]
 80165f2:	683d      	ldr	r5, [r7, #0]
 80165f4:	ee18 8a10 	vmov	r8, s16
 80165f8:	441d      	add	r5, r3
 80165fa:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 80165fe:	9302      	str	r3, [sp, #8]
 8016600:	46ba      	mov	sl, r7
 8016602:	4632      	mov	r2, r6
 8016604:	4641      	mov	r1, r8
 8016606:	4628      	mov	r0, r5
 8016608:	f004 f9ff 	bl	801aa0a <memcpy>
 801660c:	9b01      	ldr	r3, [sp, #4]
 801660e:	f85a 2b04 	ldr.w	r2, [sl], #4
 8016612:	441a      	add	r2, r3
 8016614:	9b00      	ldr	r3, [sp, #0]
 8016616:	1899      	adds	r1, r3, r2
 8016618:	9b02      	ldr	r3, [sp, #8]
 801661a:	4435      	add	r5, r6
 801661c:	429c      	cmp	r4, r3
 801661e:	4628      	mov	r0, r5
 8016620:	d025      	beq.n	801666e <rcutils_repl_str+0x13e>
 8016622:	f8da 3000 	ldr.w	r3, [sl]
 8016626:	3401      	adds	r4, #1
 8016628:	1a9a      	subs	r2, r3, r2
 801662a:	4415      	add	r5, r2
 801662c:	f004 f9ed 	bl	801aa0a <memcpy>
 8016630:	455c      	cmp	r4, fp
 8016632:	d3e6      	bcc.n	8016602 <rcutils_repl_str+0xd2>
 8016634:	9a03      	ldr	r2, [sp, #12]
 8016636:	9905      	ldr	r1, [sp, #20]
 8016638:	2300      	movs	r3, #0
 801663a:	5453      	strb	r3, [r2, r1]
 801663c:	e00b      	b.n	8016656 <rcutils_repl_str+0x126>
 801663e:	4628      	mov	r0, r5
 8016640:	f8d9 3000 	ldr.w	r3, [r9]
 8016644:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016648:	3001      	adds	r0, #1
 801664a:	4798      	blx	r3
 801664c:	9003      	str	r0, [sp, #12]
 801664e:	b110      	cbz	r0, 8016656 <rcutils_repl_str+0x126>
 8016650:	9900      	ldr	r1, [sp, #0]
 8016652:	f004 f9d2 	bl	801a9fa <strcpy>
 8016656:	4638      	mov	r0, r7
 8016658:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801665c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016660:	4798      	blx	r3
 8016662:	9803      	ldr	r0, [sp, #12]
 8016664:	b007      	add	sp, #28
 8016666:	ecbd 8b02 	vpop	{d8}
 801666a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801666e:	9b04      	ldr	r3, [sp, #16]
 8016670:	3401      	adds	r4, #1
 8016672:	1a9a      	subs	r2, r3, r2
 8016674:	4415      	add	r5, r2
 8016676:	f004 f9c8 	bl	801aa0a <memcpy>
 801667a:	455c      	cmp	r4, fp
 801667c:	d3c1      	bcc.n	8016602 <rcutils_repl_str+0xd2>
 801667e:	e7d9      	b.n	8016634 <rcutils_repl_str+0x104>
 8016680:	4647      	mov	r7, r8
 8016682:	2300      	movs	r3, #0
 8016684:	9303      	str	r3, [sp, #12]
 8016686:	e7e6      	b.n	8016656 <rcutils_repl_str+0x126>

08016688 <rcutils_snprintf>:
 8016688:	b40c      	push	{r2, r3}
 801668a:	b530      	push	{r4, r5, lr}
 801668c:	b083      	sub	sp, #12
 801668e:	ab06      	add	r3, sp, #24
 8016690:	f853 2b04 	ldr.w	r2, [r3], #4
 8016694:	9301      	str	r3, [sp, #4]
 8016696:	b152      	cbz	r2, 80166ae <rcutils_snprintf+0x26>
 8016698:	b138      	cbz	r0, 80166aa <rcutils_snprintf+0x22>
 801669a:	b141      	cbz	r1, 80166ae <rcutils_snprintf+0x26>
 801669c:	f003 ffd6 	bl	801a64c <vsniprintf>
 80166a0:	b003      	add	sp, #12
 80166a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80166a6:	b002      	add	sp, #8
 80166a8:	4770      	bx	lr
 80166aa:	2900      	cmp	r1, #0
 80166ac:	d0f6      	beq.n	801669c <rcutils_snprintf+0x14>
 80166ae:	f004 f977 	bl	801a9a0 <__errno>
 80166b2:	2316      	movs	r3, #22
 80166b4:	6003      	str	r3, [r0, #0]
 80166b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80166ba:	e7f1      	b.n	80166a0 <rcutils_snprintf+0x18>

080166bc <rcutils_vsnprintf>:
 80166bc:	b570      	push	{r4, r5, r6, lr}
 80166be:	b13a      	cbz	r2, 80166d0 <rcutils_vsnprintf+0x14>
 80166c0:	b120      	cbz	r0, 80166cc <rcutils_vsnprintf+0x10>
 80166c2:	b129      	cbz	r1, 80166d0 <rcutils_vsnprintf+0x14>
 80166c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80166c8:	f003 bfc0 	b.w	801a64c <vsniprintf>
 80166cc:	2900      	cmp	r1, #0
 80166ce:	d0f9      	beq.n	80166c4 <rcutils_vsnprintf+0x8>
 80166d0:	f004 f966 	bl	801a9a0 <__errno>
 80166d4:	2316      	movs	r3, #22
 80166d6:	6003      	str	r3, [r0, #0]
 80166d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80166dc:	bd70      	pop	{r4, r5, r6, pc}
 80166de:	bf00      	nop

080166e0 <rcutils_strdup>:
 80166e0:	b084      	sub	sp, #16
 80166e2:	b570      	push	{r4, r5, r6, lr}
 80166e4:	b082      	sub	sp, #8
 80166e6:	ac07      	add	r4, sp, #28
 80166e8:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80166ec:	4605      	mov	r5, r0
 80166ee:	b1b0      	cbz	r0, 801671e <rcutils_strdup+0x3e>
 80166f0:	f7e9 fdd6 	bl	80002a0 <strlen>
 80166f4:	1c42      	adds	r2, r0, #1
 80166f6:	9b07      	ldr	r3, [sp, #28]
 80166f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80166fa:	9201      	str	r2, [sp, #4]
 80166fc:	4606      	mov	r6, r0
 80166fe:	4610      	mov	r0, r2
 8016700:	4798      	blx	r3
 8016702:	4604      	mov	r4, r0
 8016704:	b128      	cbz	r0, 8016712 <rcutils_strdup+0x32>
 8016706:	9a01      	ldr	r2, [sp, #4]
 8016708:	4629      	mov	r1, r5
 801670a:	f004 f97e 	bl	801aa0a <memcpy>
 801670e:	2300      	movs	r3, #0
 8016710:	55a3      	strb	r3, [r4, r6]
 8016712:	4620      	mov	r0, r4
 8016714:	b002      	add	sp, #8
 8016716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801671a:	b004      	add	sp, #16
 801671c:	4770      	bx	lr
 801671e:	4604      	mov	r4, r0
 8016720:	e7f7      	b.n	8016712 <rcutils_strdup+0x32>
 8016722:	bf00      	nop

08016724 <rcutils_strndup>:
 8016724:	b082      	sub	sp, #8
 8016726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016728:	460e      	mov	r6, r1
 801672a:	a906      	add	r1, sp, #24
 801672c:	e881 000c 	stmia.w	r1, {r2, r3}
 8016730:	4605      	mov	r5, r0
 8016732:	b180      	cbz	r0, 8016756 <rcutils_strndup+0x32>
 8016734:	1c77      	adds	r7, r6, #1
 8016736:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016738:	4638      	mov	r0, r7
 801673a:	4790      	blx	r2
 801673c:	4604      	mov	r4, r0
 801673e:	b128      	cbz	r0, 801674c <rcutils_strndup+0x28>
 8016740:	463a      	mov	r2, r7
 8016742:	4629      	mov	r1, r5
 8016744:	f004 f961 	bl	801aa0a <memcpy>
 8016748:	2300      	movs	r3, #0
 801674a:	55a3      	strb	r3, [r4, r6]
 801674c:	4620      	mov	r0, r4
 801674e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016752:	b002      	add	sp, #8
 8016754:	4770      	bx	lr
 8016756:	4604      	mov	r4, r0
 8016758:	e7f8      	b.n	801674c <rcutils_strndup+0x28>
 801675a:	bf00      	nop

0801675c <rmw_get_zero_initialized_context>:
 801675c:	b510      	push	{r4, lr}
 801675e:	2250      	movs	r2, #80	@ 0x50
 8016760:	4604      	mov	r4, r0
 8016762:	2100      	movs	r1, #0
 8016764:	f004 f82e 	bl	801a7c4 <memset>
 8016768:	4620      	mov	r0, r4
 801676a:	bd10      	pop	{r4, pc}

0801676c <rmw_get_default_subscription_options>:
 801676c:	2200      	movs	r2, #0
 801676e:	6002      	str	r2, [r0, #0]
 8016770:	7102      	strb	r2, [r0, #4]
 8016772:	4770      	bx	lr

08016774 <rmw_get_zero_initialized_message_info>:
 8016774:	b470      	push	{r4, r5, r6}
 8016776:	4d07      	ldr	r5, [pc, #28]	@ (8016794 <rmw_get_zero_initialized_message_info+0x20>)
 8016778:	4606      	mov	r6, r0
 801677a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801677c:	4634      	mov	r4, r6
 801677e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016784:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016788:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801678c:	4630      	mov	r0, r6
 801678e:	bc70      	pop	{r4, r5, r6}
 8016790:	4770      	bx	lr
 8016792:	bf00      	nop
 8016794:	0801deb0 	.word	0x0801deb0

08016798 <rmw_validate_namespace_with_size>:
 8016798:	b340      	cbz	r0, 80167ec <rmw_validate_namespace_with_size+0x54>
 801679a:	b5d0      	push	{r4, r6, r7, lr}
 801679c:	4614      	mov	r4, r2
 801679e:	b0c2      	sub	sp, #264	@ 0x108
 80167a0:	b332      	cbz	r2, 80167f0 <rmw_validate_namespace_with_size+0x58>
 80167a2:	2901      	cmp	r1, #1
 80167a4:	460f      	mov	r7, r1
 80167a6:	461e      	mov	r6, r3
 80167a8:	d102      	bne.n	80167b0 <rmw_validate_namespace_with_size+0x18>
 80167aa:	7803      	ldrb	r3, [r0, #0]
 80167ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80167ae:	d019      	beq.n	80167e4 <rmw_validate_namespace_with_size+0x4c>
 80167b0:	aa01      	add	r2, sp, #4
 80167b2:	4669      	mov	r1, sp
 80167b4:	f7f8 fc44 	bl	800f040 <rmw_validate_full_topic_name>
 80167b8:	b990      	cbnz	r0, 80167e0 <rmw_validate_namespace_with_size+0x48>
 80167ba:	9b00      	ldr	r3, [sp, #0]
 80167bc:	b14b      	cbz	r3, 80167d2 <rmw_validate_namespace_with_size+0x3a>
 80167be:	2b07      	cmp	r3, #7
 80167c0:	d007      	beq.n	80167d2 <rmw_validate_namespace_with_size+0x3a>
 80167c2:	1e5a      	subs	r2, r3, #1
 80167c4:	2a05      	cmp	r2, #5
 80167c6:	d82b      	bhi.n	8016820 <rmw_validate_namespace_with_size+0x88>
 80167c8:	e8df f002 	tbb	[pc, r2]
 80167cc:	24211e1b 	.word	0x24211e1b
 80167d0:	1427      	.short	0x1427
 80167d2:	2ff5      	cmp	r7, #245	@ 0xf5
 80167d4:	d906      	bls.n	80167e4 <rmw_validate_namespace_with_size+0x4c>
 80167d6:	2307      	movs	r3, #7
 80167d8:	6023      	str	r3, [r4, #0]
 80167da:	b10e      	cbz	r6, 80167e0 <rmw_validate_namespace_with_size+0x48>
 80167dc:	23f4      	movs	r3, #244	@ 0xf4
 80167de:	6033      	str	r3, [r6, #0]
 80167e0:	b042      	add	sp, #264	@ 0x108
 80167e2:	bdd0      	pop	{r4, r6, r7, pc}
 80167e4:	2000      	movs	r0, #0
 80167e6:	6020      	str	r0, [r4, #0]
 80167e8:	b042      	add	sp, #264	@ 0x108
 80167ea:	bdd0      	pop	{r4, r6, r7, pc}
 80167ec:	200b      	movs	r0, #11
 80167ee:	4770      	bx	lr
 80167f0:	200b      	movs	r0, #11
 80167f2:	e7f5      	b.n	80167e0 <rmw_validate_namespace_with_size+0x48>
 80167f4:	2306      	movs	r3, #6
 80167f6:	6023      	str	r3, [r4, #0]
 80167f8:	2e00      	cmp	r6, #0
 80167fa:	d0f1      	beq.n	80167e0 <rmw_validate_namespace_with_size+0x48>
 80167fc:	9b01      	ldr	r3, [sp, #4]
 80167fe:	6033      	str	r3, [r6, #0]
 8016800:	e7ee      	b.n	80167e0 <rmw_validate_namespace_with_size+0x48>
 8016802:	2301      	movs	r3, #1
 8016804:	6023      	str	r3, [r4, #0]
 8016806:	e7f7      	b.n	80167f8 <rmw_validate_namespace_with_size+0x60>
 8016808:	2302      	movs	r3, #2
 801680a:	6023      	str	r3, [r4, #0]
 801680c:	e7f4      	b.n	80167f8 <rmw_validate_namespace_with_size+0x60>
 801680e:	2303      	movs	r3, #3
 8016810:	6023      	str	r3, [r4, #0]
 8016812:	e7f1      	b.n	80167f8 <rmw_validate_namespace_with_size+0x60>
 8016814:	2304      	movs	r3, #4
 8016816:	6023      	str	r3, [r4, #0]
 8016818:	e7ee      	b.n	80167f8 <rmw_validate_namespace_with_size+0x60>
 801681a:	2305      	movs	r3, #5
 801681c:	6023      	str	r3, [r4, #0]
 801681e:	e7eb      	b.n	80167f8 <rmw_validate_namespace_with_size+0x60>
 8016820:	4a03      	ldr	r2, [pc, #12]	@ (8016830 <rmw_validate_namespace_with_size+0x98>)
 8016822:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016826:	a802      	add	r0, sp, #8
 8016828:	f7ff ff2e 	bl	8016688 <rcutils_snprintf>
 801682c:	2001      	movs	r0, #1
 801682e:	e7d7      	b.n	80167e0 <rmw_validate_namespace_with_size+0x48>
 8016830:	0801e4f4 	.word	0x0801e4f4

08016834 <rmw_validate_namespace>:
 8016834:	b168      	cbz	r0, 8016852 <rmw_validate_namespace+0x1e>
 8016836:	b570      	push	{r4, r5, r6, lr}
 8016838:	460d      	mov	r5, r1
 801683a:	4616      	mov	r6, r2
 801683c:	4604      	mov	r4, r0
 801683e:	f7e9 fd2f 	bl	80002a0 <strlen>
 8016842:	4633      	mov	r3, r6
 8016844:	4601      	mov	r1, r0
 8016846:	462a      	mov	r2, r5
 8016848:	4620      	mov	r0, r4
 801684a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801684e:	f7ff bfa3 	b.w	8016798 <rmw_validate_namespace_with_size>
 8016852:	200b      	movs	r0, #11
 8016854:	4770      	bx	lr
 8016856:	bf00      	nop

08016858 <rmw_namespace_validation_result_string>:
 8016858:	2807      	cmp	r0, #7
 801685a:	bf9a      	itte	ls
 801685c:	4b02      	ldrls	r3, [pc, #8]	@ (8016868 <rmw_namespace_validation_result_string+0x10>)
 801685e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8016862:	4802      	ldrhi	r0, [pc, #8]	@ (801686c <rmw_namespace_validation_result_string+0x14>)
 8016864:	4770      	bx	lr
 8016866:	bf00      	nop
 8016868:	0801e6ec 	.word	0x0801e6ec
 801686c:	0801e544 	.word	0x0801e544

08016870 <rmw_validate_node_name>:
 8016870:	2800      	cmp	r0, #0
 8016872:	d03b      	beq.n	80168ec <rmw_validate_node_name+0x7c>
 8016874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016878:	460f      	mov	r7, r1
 801687a:	2900      	cmp	r1, #0
 801687c:	d038      	beq.n	80168f0 <rmw_validate_node_name+0x80>
 801687e:	4615      	mov	r5, r2
 8016880:	4604      	mov	r4, r0
 8016882:	f7e9 fd0d 	bl	80002a0 <strlen>
 8016886:	b1e0      	cbz	r0, 80168c2 <rmw_validate_node_name+0x52>
 8016888:	1e63      	subs	r3, r4, #1
 801688a:	eb03 0e00 	add.w	lr, r3, r0
 801688e:	f1c4 0c01 	rsb	ip, r4, #1
 8016892:	eb0c 0803 	add.w	r8, ip, r3
 8016896:	f813 6f01 	ldrb.w	r6, [r3, #1]!
 801689a:	f1a6 0130 	sub.w	r1, r6, #48	@ 0x30
 801689e:	f026 0220 	bic.w	r2, r6, #32
 80168a2:	2909      	cmp	r1, #9
 80168a4:	f1a2 0241 	sub.w	r2, r2, #65	@ 0x41
 80168a8:	d913      	bls.n	80168d2 <rmw_validate_node_name+0x62>
 80168aa:	2a19      	cmp	r2, #25
 80168ac:	d911      	bls.n	80168d2 <rmw_validate_node_name+0x62>
 80168ae:	2e5f      	cmp	r6, #95	@ 0x5f
 80168b0:	d00f      	beq.n	80168d2 <rmw_validate_node_name+0x62>
 80168b2:	2302      	movs	r3, #2
 80168b4:	603b      	str	r3, [r7, #0]
 80168b6:	b10d      	cbz	r5, 80168bc <rmw_validate_node_name+0x4c>
 80168b8:	f8c5 8000 	str.w	r8, [r5]
 80168bc:	2000      	movs	r0, #0
 80168be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168c2:	2301      	movs	r3, #1
 80168c4:	603b      	str	r3, [r7, #0]
 80168c6:	2d00      	cmp	r5, #0
 80168c8:	d0f8      	beq.n	80168bc <rmw_validate_node_name+0x4c>
 80168ca:	2000      	movs	r0, #0
 80168cc:	6028      	str	r0, [r5, #0]
 80168ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168d2:	4573      	cmp	r3, lr
 80168d4:	d1dd      	bne.n	8016892 <rmw_validate_node_name+0x22>
 80168d6:	7822      	ldrb	r2, [r4, #0]
 80168d8:	4b0d      	ldr	r3, [pc, #52]	@ (8016910 <rmw_validate_node_name+0xa0>)
 80168da:	5cd3      	ldrb	r3, [r2, r3]
 80168dc:	f013 0304 	ands.w	r3, r3, #4
 80168e0:	d110      	bne.n	8016904 <rmw_validate_node_name+0x94>
 80168e2:	28ff      	cmp	r0, #255	@ 0xff
 80168e4:	d806      	bhi.n	80168f4 <rmw_validate_node_name+0x84>
 80168e6:	603b      	str	r3, [r7, #0]
 80168e8:	4618      	mov	r0, r3
 80168ea:	e7e8      	b.n	80168be <rmw_validate_node_name+0x4e>
 80168ec:	200b      	movs	r0, #11
 80168ee:	4770      	bx	lr
 80168f0:	200b      	movs	r0, #11
 80168f2:	e7e4      	b.n	80168be <rmw_validate_node_name+0x4e>
 80168f4:	2204      	movs	r2, #4
 80168f6:	603a      	str	r2, [r7, #0]
 80168f8:	2d00      	cmp	r5, #0
 80168fa:	d0df      	beq.n	80168bc <rmw_validate_node_name+0x4c>
 80168fc:	22fe      	movs	r2, #254	@ 0xfe
 80168fe:	4618      	mov	r0, r3
 8016900:	602a      	str	r2, [r5, #0]
 8016902:	e7dc      	b.n	80168be <rmw_validate_node_name+0x4e>
 8016904:	2303      	movs	r3, #3
 8016906:	603b      	str	r3, [r7, #0]
 8016908:	2d00      	cmp	r5, #0
 801690a:	d1de      	bne.n	80168ca <rmw_validate_node_name+0x5a>
 801690c:	e7d6      	b.n	80168bc <rmw_validate_node_name+0x4c>
 801690e:	bf00      	nop
 8016910:	0801e8b0 	.word	0x0801e8b0

08016914 <rmw_node_name_validation_result_string>:
 8016914:	2804      	cmp	r0, #4
 8016916:	bf9a      	itte	ls
 8016918:	4b02      	ldrls	r3, [pc, #8]	@ (8016924 <rmw_node_name_validation_result_string+0x10>)
 801691a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801691e:	4802      	ldrhi	r0, [pc, #8]	@ (8016928 <rmw_node_name_validation_result_string+0x14>)
 8016920:	4770      	bx	lr
 8016922:	bf00      	nop
 8016924:	0801e7f8 	.word	0x0801e7f8
 8016928:	0801e70c 	.word	0x0801e70c

0801692c <on_status>:
 801692c:	b082      	sub	sp, #8
 801692e:	b002      	add	sp, #8
 8016930:	4770      	bx	lr
 8016932:	bf00      	nop

08016934 <on_topic>:
 8016934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016938:	4a21      	ldr	r2, [pc, #132]	@ (80169c0 <on_topic+0x8c>)
 801693a:	b094      	sub	sp, #80	@ 0x50
 801693c:	6812      	ldr	r2, [r2, #0]
 801693e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8016940:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8016944:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016946:	9312      	str	r3, [sp, #72]	@ 0x48
 8016948:	b3ba      	cbz	r2, 80169ba <on_topic+0x86>
 801694a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801694e:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8016952:	e001      	b.n	8016958 <on_topic+0x24>
 8016954:	6892      	ldr	r2, [r2, #8]
 8016956:	b382      	cbz	r2, 80169ba <on_topic+0x86>
 8016958:	68d4      	ldr	r4, [r2, #12]
 801695a:	8aa3      	ldrh	r3, [r4, #20]
 801695c:	428b      	cmp	r3, r1
 801695e:	d1f9      	bne.n	8016954 <on_topic+0x20>
 8016960:	7da3      	ldrb	r3, [r4, #22]
 8016962:	4283      	cmp	r3, r0
 8016964:	d1f6      	bne.n	8016954 <on_topic+0x20>
 8016966:	2248      	movs	r2, #72	@ 0x48
 8016968:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801696c:	4668      	mov	r0, sp
 801696e:	f004 f84c 	bl	801aa0a <memcpy>
 8016972:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8016976:	4620      	mov	r0, r4
 8016978:	f7f9 fc30 	bl	80101dc <rmw_uxrce_get_static_input_buffer_for_entity>
 801697c:	4607      	mov	r7, r0
 801697e:	b1e0      	cbz	r0, 80169ba <on_topic+0x86>
 8016980:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8016984:	462a      	mov	r2, r5
 8016986:	4630      	mov	r0, r6
 8016988:	f108 0110 	add.w	r1, r8, #16
 801698c:	f000 fd74 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8016990:	b930      	cbnz	r0, 80169a0 <on_topic+0x6c>
 8016992:	480c      	ldr	r0, [pc, #48]	@ (80169c4 <on_topic+0x90>)
 8016994:	4639      	mov	r1, r7
 8016996:	b014      	add	sp, #80	@ 0x50
 8016998:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801699c:	f000 b8ba 	b.w	8016b14 <put_memory>
 80169a0:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80169a4:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 80169a8:	f000 fc90 	bl	80172cc <rmw_uros_epoch_nanos>
 80169ac:	f608 0218 	addw	r2, r8, #2072	@ 0x818
 80169b0:	2305      	movs	r3, #5
 80169b2:	e9c2 0100 	strd	r0, r1, [r2]
 80169b6:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80169ba:	b014      	add	sp, #80	@ 0x50
 80169bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169c0:	2000d29c 	.word	0x2000d29c
 80169c4:	2000a030 	.word	0x2000a030

080169c8 <on_request>:
 80169c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80169cc:	4822      	ldr	r0, [pc, #136]	@ (8016a58 <on_request+0x90>)
 80169ce:	b095      	sub	sp, #84	@ 0x54
 80169d0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80169d2:	6801      	ldr	r1, [r0, #0]
 80169d4:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 80169d6:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 80169da:	2900      	cmp	r1, #0
 80169dc:	d039      	beq.n	8016a52 <on_request+0x8a>
 80169de:	461d      	mov	r5, r3
 80169e0:	e001      	b.n	80169e6 <on_request+0x1e>
 80169e2:	6889      	ldr	r1, [r1, #8]
 80169e4:	b3a9      	cbz	r1, 8016a52 <on_request+0x8a>
 80169e6:	68cc      	ldr	r4, [r1, #12]
 80169e8:	8b20      	ldrh	r0, [r4, #24]
 80169ea:	4290      	cmp	r0, r2
 80169ec:	d1f9      	bne.n	80169e2 <on_request+0x1a>
 80169ee:	2248      	movs	r2, #72	@ 0x48
 80169f0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80169f4:	4668      	mov	r0, sp
 80169f6:	f004 f808 	bl	801aa0a <memcpy>
 80169fa:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80169fe:	4620      	mov	r0, r4
 8016a00:	f7f9 fbec 	bl	80101dc <rmw_uxrce_get_static_input_buffer_for_entity>
 8016a04:	4680      	mov	r8, r0
 8016a06:	b320      	cbz	r0, 8016a52 <on_request+0x8a>
 8016a08:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8016a0c:	4632      	mov	r2, r6
 8016a0e:	4638      	mov	r0, r7
 8016a10:	f109 0110 	add.w	r1, r9, #16
 8016a14:	f000 fd30 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8016a18:	b930      	cbnz	r0, 8016a28 <on_request+0x60>
 8016a1a:	4810      	ldr	r0, [pc, #64]	@ (8016a5c <on_request+0x94>)
 8016a1c:	4641      	mov	r1, r8
 8016a1e:	b015      	add	sp, #84	@ 0x54
 8016a20:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a24:	f000 b876 	b.w	8016b14 <put_memory>
 8016a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a2a:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 8016a2e:	f609 0428 	addw	r4, r9, #2088	@ 0x828
 8016a32:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 8016a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016a38:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016a3c:	e884 0003 	stmia.w	r4, {r0, r1}
 8016a40:	f000 fc44 	bl	80172cc <rmw_uros_epoch_nanos>
 8016a44:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 8016a48:	2303      	movs	r3, #3
 8016a4a:	e9c2 0100 	strd	r0, r1, [r2]
 8016a4e:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 8016a52:	b015      	add	sp, #84	@ 0x54
 8016a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a58:	2000d28c 	.word	0x2000d28c
 8016a5c:	2000a030 	.word	0x2000a030

08016a60 <on_reply>:
 8016a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016a64:	4821      	ldr	r0, [pc, #132]	@ (8016aec <on_reply+0x8c>)
 8016a66:	b095      	sub	sp, #84	@ 0x54
 8016a68:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016a6a:	6801      	ldr	r1, [r0, #0]
 8016a6c:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 8016a6e:	f8bd 6074 	ldrh.w	r6, [sp, #116]	@ 0x74
 8016a72:	b3b9      	cbz	r1, 8016ae4 <on_reply+0x84>
 8016a74:	461d      	mov	r5, r3
 8016a76:	e001      	b.n	8016a7c <on_reply+0x1c>
 8016a78:	6889      	ldr	r1, [r1, #8]
 8016a7a:	b399      	cbz	r1, 8016ae4 <on_reply+0x84>
 8016a7c:	68cc      	ldr	r4, [r1, #12]
 8016a7e:	8b20      	ldrh	r0, [r4, #24]
 8016a80:	4290      	cmp	r0, r2
 8016a82:	d1f9      	bne.n	8016a78 <on_reply+0x18>
 8016a84:	2248      	movs	r2, #72	@ 0x48
 8016a86:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8016a8a:	4668      	mov	r0, sp
 8016a8c:	f003 ffbd 	bl	801aa0a <memcpy>
 8016a90:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 8016a94:	4620      	mov	r0, r4
 8016a96:	f7f9 fba1 	bl	80101dc <rmw_uxrce_get_static_input_buffer_for_entity>
 8016a9a:	4680      	mov	r8, r0
 8016a9c:	b310      	cbz	r0, 8016ae4 <on_reply+0x84>
 8016a9e:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8016aa2:	4632      	mov	r2, r6
 8016aa4:	4638      	mov	r0, r7
 8016aa6:	f109 0110 	add.w	r1, r9, #16
 8016aaa:	f000 fce5 	bl	8017478 <ucdr_deserialize_array_uint8_t>
 8016aae:	b930      	cbnz	r0, 8016abe <on_reply+0x5e>
 8016ab0:	480f      	ldr	r0, [pc, #60]	@ (8016af0 <on_reply+0x90>)
 8016ab2:	4641      	mov	r1, r8
 8016ab4:	b015      	add	sp, #84	@ 0x54
 8016ab6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016aba:	f000 b82b 	b.w	8016b14 <put_memory>
 8016abe:	b2aa      	uxth	r2, r5
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	f609 0128 	addw	r1, r9, #2088	@ 0x828
 8016ac6:	f8c9 4814 	str.w	r4, [r9, #2068]	@ 0x814
 8016aca:	f8c9 6810 	str.w	r6, [r9, #2064]	@ 0x810
 8016ace:	e9c1 2300 	strd	r2, r3, [r1]
 8016ad2:	f000 fbfb 	bl	80172cc <rmw_uros_epoch_nanos>
 8016ad6:	f609 0218 	addw	r2, r9, #2072	@ 0x818
 8016ada:	2304      	movs	r3, #4
 8016adc:	e9c2 0100 	strd	r0, r1, [r2]
 8016ae0:	f889 3820 	strb.w	r3, [r9, #2080]	@ 0x820
 8016ae4:	b015      	add	sp, #84	@ 0x54
 8016ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016aea:	bf00      	nop
 8016aec:	2000a8c0 	.word	0x2000a8c0
 8016af0:	2000a030 	.word	0x2000a030

08016af4 <get_memory>:
 8016af4:	4603      	mov	r3, r0
 8016af6:	6840      	ldr	r0, [r0, #4]
 8016af8:	b158      	cbz	r0, 8016b12 <get_memory+0x1e>
 8016afa:	6882      	ldr	r2, [r0, #8]
 8016afc:	605a      	str	r2, [r3, #4]
 8016afe:	b10a      	cbz	r2, 8016b04 <get_memory+0x10>
 8016b00:	2100      	movs	r1, #0
 8016b02:	6051      	str	r1, [r2, #4]
 8016b04:	681a      	ldr	r2, [r3, #0]
 8016b06:	6082      	str	r2, [r0, #8]
 8016b08:	b102      	cbz	r2, 8016b0c <get_memory+0x18>
 8016b0a:	6050      	str	r0, [r2, #4]
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	6042      	str	r2, [r0, #4]
 8016b10:	6018      	str	r0, [r3, #0]
 8016b12:	4770      	bx	lr

08016b14 <put_memory>:
 8016b14:	684b      	ldr	r3, [r1, #4]
 8016b16:	b10b      	cbz	r3, 8016b1c <put_memory+0x8>
 8016b18:	688a      	ldr	r2, [r1, #8]
 8016b1a:	609a      	str	r2, [r3, #8]
 8016b1c:	688a      	ldr	r2, [r1, #8]
 8016b1e:	b102      	cbz	r2, 8016b22 <put_memory+0xe>
 8016b20:	6053      	str	r3, [r2, #4]
 8016b22:	6803      	ldr	r3, [r0, #0]
 8016b24:	428b      	cmp	r3, r1
 8016b26:	6843      	ldr	r3, [r0, #4]
 8016b28:	bf08      	it	eq
 8016b2a:	6002      	streq	r2, [r0, #0]
 8016b2c:	608b      	str	r3, [r1, #8]
 8016b2e:	b103      	cbz	r3, 8016b32 <put_memory+0x1e>
 8016b30:	6059      	str	r1, [r3, #4]
 8016b32:	2300      	movs	r3, #0
 8016b34:	604b      	str	r3, [r1, #4]
 8016b36:	6041      	str	r1, [r0, #4]
 8016b38:	4770      	bx	lr
 8016b3a:	bf00      	nop

08016b3c <rmw_destroy_client>:
 8016b3c:	b570      	push	{r4, r5, r6, lr}
 8016b3e:	b128      	cbz	r0, 8016b4c <rmw_destroy_client+0x10>
 8016b40:	4604      	mov	r4, r0
 8016b42:	6800      	ldr	r0, [r0, #0]
 8016b44:	460d      	mov	r5, r1
 8016b46:	f7f9 fcb7 	bl	80104b8 <is_uxrce_rmw_identifier_valid>
 8016b4a:	b910      	cbnz	r0, 8016b52 <rmw_destroy_client+0x16>
 8016b4c:	2401      	movs	r4, #1
 8016b4e:	4620      	mov	r0, r4
 8016b50:	bd70      	pop	{r4, r5, r6, pc}
 8016b52:	6863      	ldr	r3, [r4, #4]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d0f9      	beq.n	8016b4c <rmw_destroy_client+0x10>
 8016b58:	2d00      	cmp	r5, #0
 8016b5a:	d0f7      	beq.n	8016b4c <rmw_destroy_client+0x10>
 8016b5c:	6828      	ldr	r0, [r5, #0]
 8016b5e:	f7f9 fcab 	bl	80104b8 <is_uxrce_rmw_identifier_valid>
 8016b62:	2800      	cmp	r0, #0
 8016b64:	d0f2      	beq.n	8016b4c <rmw_destroy_client+0x10>
 8016b66:	686e      	ldr	r6, [r5, #4]
 8016b68:	2e00      	cmp	r6, #0
 8016b6a:	d0ef      	beq.n	8016b4c <rmw_destroy_client+0x10>
 8016b6c:	6864      	ldr	r4, [r4, #4]
 8016b6e:	6932      	ldr	r2, [r6, #16]
 8016b70:	6920      	ldr	r0, [r4, #16]
 8016b72:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016b76:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016b7a:	6819      	ldr	r1, [r3, #0]
 8016b7c:	f7fa f962 	bl	8010e44 <uxr_buffer_cancel_data>
 8016b80:	4602      	mov	r2, r0
 8016b82:	6920      	ldr	r0, [r4, #16]
 8016b84:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016b88:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016b8c:	f7f9 fc14 	bl	80103b8 <run_xrce_session>
 8016b90:	6920      	ldr	r0, [r4, #16]
 8016b92:	6932      	ldr	r2, [r6, #16]
 8016b94:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016b98:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016b9c:	6819      	ldr	r1, [r3, #0]
 8016b9e:	f7f9 fe27 	bl	80107f0 <uxr_buffer_delete_entity>
 8016ba2:	4602      	mov	r2, r0
 8016ba4:	6920      	ldr	r0, [r4, #16]
 8016ba6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016baa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016bae:	f7f9 fc03 	bl	80103b8 <run_xrce_session>
 8016bb2:	2800      	cmp	r0, #0
 8016bb4:	4628      	mov	r0, r5
 8016bb6:	bf14      	ite	ne
 8016bb8:	2400      	movne	r4, #0
 8016bba:	2402      	moveq	r4, #2
 8016bbc:	f7f9 faec 	bl	8010198 <rmw_uxrce_fini_client_memory>
 8016bc0:	e7c5      	b.n	8016b4e <rmw_destroy_client+0x12>
 8016bc2:	bf00      	nop

08016bc4 <rmw_get_implementation_identifier>:
 8016bc4:	4b01      	ldr	r3, [pc, #4]	@ (8016bcc <rmw_get_implementation_identifier+0x8>)
 8016bc6:	6818      	ldr	r0, [r3, #0]
 8016bc8:	4770      	bx	lr
 8016bca:	bf00      	nop
 8016bcc:	0801e824 	.word	0x0801e824

08016bd0 <create_topic>:
 8016bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bd4:	4605      	mov	r5, r0
 8016bd6:	b084      	sub	sp, #16
 8016bd8:	482b      	ldr	r0, [pc, #172]	@ (8016c88 <create_topic+0xb8>)
 8016bda:	460f      	mov	r7, r1
 8016bdc:	4616      	mov	r6, r2
 8016bde:	f7ff ff89 	bl	8016af4 <get_memory>
 8016be2:	4604      	mov	r4, r0
 8016be4:	2800      	cmp	r0, #0
 8016be6:	d036      	beq.n	8016c56 <create_topic+0x86>
 8016be8:	692a      	ldr	r2, [r5, #16]
 8016bea:	68c4      	ldr	r4, [r0, #12]
 8016bec:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8016c90 <create_topic+0xc0>
 8016bf0:	61a5      	str	r5, [r4, #24]
 8016bf2:	f241 5396 	movw	r3, #5526	@ 0x1596
 8016bf6:	6166      	str	r6, [r4, #20]
 8016bf8:	5ad0      	ldrh	r0, [r2, r3]
 8016bfa:	1c41      	adds	r1, r0, #1
 8016bfc:	52d1      	strh	r1, [r2, r3]
 8016bfe:	2102      	movs	r1, #2
 8016c00:	f7fa f8b8 	bl	8010d74 <uxr_object_id>
 8016c04:	4641      	mov	r1, r8
 8016c06:	6120      	str	r0, [r4, #16]
 8016c08:	223c      	movs	r2, #60	@ 0x3c
 8016c0a:	4638      	mov	r0, r7
 8016c0c:	f7f9 fc3a 	bl	8010484 <generate_topic_name>
 8016c10:	4607      	mov	r7, r0
 8016c12:	b320      	cbz	r0, 8016c5e <create_topic+0x8e>
 8016c14:	4f1d      	ldr	r7, [pc, #116]	@ (8016c8c <create_topic+0xbc>)
 8016c16:	4630      	mov	r0, r6
 8016c18:	4639      	mov	r1, r7
 8016c1a:	2264      	movs	r2, #100	@ 0x64
 8016c1c:	f7f9 fc02 	bl	8010424 <generate_type_name>
 8016c20:	4606      	mov	r6, r0
 8016c22:	b320      	cbz	r0, 8016c6e <create_topic+0x9e>
 8016c24:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
 8016c28:	2106      	movs	r1, #6
 8016c2a:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8016c2e:	9701      	str	r7, [sp, #4]
 8016c30:	f8cd 8000 	str.w	r8, [sp]
 8016c34:	9102      	str	r1, [sp, #8]
 8016c36:	6811      	ldr	r1, [r2, #0]
 8016c38:	6922      	ldr	r2, [r4, #16]
 8016c3a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016c3e:	f7f9 fe55 	bl	80108ec <uxr_buffer_create_topic_bin>
 8016c42:	4602      	mov	r2, r0
 8016c44:	6928      	ldr	r0, [r5, #16]
 8016c46:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8016c4a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8016c4e:	f7f9 fbb3 	bl	80103b8 <run_xrce_session>
 8016c52:	4605      	mov	r5, r0
 8016c54:	b198      	cbz	r0, 8016c7e <create_topic+0xae>
 8016c56:	4620      	mov	r0, r4
 8016c58:	b004      	add	sp, #16
 8016c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c5e:	4620      	mov	r0, r4
 8016c60:	f7f9 fab0 	bl	80101c4 <rmw_uxrce_fini_topic_memory>
 8016c64:	463c      	mov	r4, r7
 8016c66:	4620      	mov	r0, r4
 8016c68:	b004      	add	sp, #16
 8016c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c6e:	4620      	mov	r0, r4
 8016c70:	f7f9 faa8 	bl	80101c4 <rmw_uxrce_fini_topic_memory>
 8016c74:	4634      	mov	r4, r6
 8016c76:	4620      	mov	r0, r4
 8016c78:	b004      	add	sp, #16
 8016c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c7e:	4620      	mov	r0, r4
 8016c80:	f7f9 faa0 	bl	80101c4 <rmw_uxrce_fini_topic_memory>
 8016c84:	462c      	mov	r4, r5
 8016c86:	e7e6      	b.n	8016c56 <create_topic+0x86>
 8016c88:	2000d1c8 	.word	0x2000d1c8
 8016c8c:	20009e34 	.word	0x20009e34
 8016c90:	20009df8 	.word	0x20009df8

08016c94 <destroy_topic>:
 8016c94:	b538      	push	{r3, r4, r5, lr}
 8016c96:	6985      	ldr	r5, [r0, #24]
 8016c98:	b1d5      	cbz	r5, 8016cd0 <destroy_topic+0x3c>
 8016c9a:	4604      	mov	r4, r0
 8016c9c:	6928      	ldr	r0, [r5, #16]
 8016c9e:	6922      	ldr	r2, [r4, #16]
 8016ca0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8016ca4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016ca8:	6819      	ldr	r1, [r3, #0]
 8016caa:	f7f9 fda1 	bl	80107f0 <uxr_buffer_delete_entity>
 8016cae:	4602      	mov	r2, r0
 8016cb0:	6928      	ldr	r0, [r5, #16]
 8016cb2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8016cb6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8016cba:	f7f9 fb7d 	bl	80103b8 <run_xrce_session>
 8016cbe:	2800      	cmp	r0, #0
 8016cc0:	4620      	mov	r0, r4
 8016cc2:	bf14      	ite	ne
 8016cc4:	2400      	movne	r4, #0
 8016cc6:	2402      	moveq	r4, #2
 8016cc8:	f7f9 fa7c 	bl	80101c4 <rmw_uxrce_fini_topic_memory>
 8016ccc:	4620      	mov	r0, r4
 8016cce:	bd38      	pop	{r3, r4, r5, pc}
 8016cd0:	2401      	movs	r4, #1
 8016cd2:	4620      	mov	r0, r4
 8016cd4:	bd38      	pop	{r3, r4, r5, pc}
 8016cd6:	bf00      	nop

08016cd8 <rmw_take_request>:
 8016cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016cdc:	4605      	mov	r5, r0
 8016cde:	6800      	ldr	r0, [r0, #0]
 8016ce0:	b089      	sub	sp, #36	@ 0x24
 8016ce2:	460c      	mov	r4, r1
 8016ce4:	4690      	mov	r8, r2
 8016ce6:	461e      	mov	r6, r3
 8016ce8:	b128      	cbz	r0, 8016cf6 <rmw_take_request+0x1e>
 8016cea:	4b28      	ldr	r3, [pc, #160]	@ (8016d8c <rmw_take_request+0xb4>)
 8016cec:	6819      	ldr	r1, [r3, #0]
 8016cee:	f7e9 fa77 	bl	80001e0 <strcmp>
 8016cf2:	2800      	cmp	r0, #0
 8016cf4:	d146      	bne.n	8016d84 <rmw_take_request+0xac>
 8016cf6:	b10e      	cbz	r6, 8016cfc <rmw_take_request+0x24>
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	7033      	strb	r3, [r6, #0]
 8016cfc:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016d00:	f7f9 fae2 	bl	80102c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8016d04:	4648      	mov	r0, r9
 8016d06:	f7f9 fab5 	bl	8010274 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016d0a:	4607      	mov	r7, r0
 8016d0c:	b3b0      	cbz	r0, 8016d7c <rmw_take_request+0xa4>
 8016d0e:	68c5      	ldr	r5, [r0, #12]
 8016d10:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 8016d14:	f8d5 183c 	ldr.w	r1, [r5, #2108]	@ 0x83c
 8016d18:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8016d1c:	7423      	strb	r3, [r4, #16]
 8016d1e:	e9c4 1208 	strd	r1, r2, [r4, #32]
 8016d22:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8016d26:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8016d2a:	74e2      	strb	r2, [r4, #19]
 8016d2c:	f8a4 3011 	strh.w	r3, [r4, #17]
 8016d30:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8016d34:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8016d38:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8016d3c:	61e1      	str	r1, [r4, #28]
 8016d3e:	6162      	str	r2, [r4, #20]
 8016d40:	61a3      	str	r3, [r4, #24]
 8016d42:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8016d46:	689b      	ldr	r3, [r3, #8]
 8016d48:	4798      	blx	r3
 8016d4a:	6844      	ldr	r4, [r0, #4]
 8016d4c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8016d50:	f105 0110 	add.w	r1, r5, #16
 8016d54:	4668      	mov	r0, sp
 8016d56:	f7f9 fc83 	bl	8010660 <ucdr_init_buffer>
 8016d5a:	68e3      	ldr	r3, [r4, #12]
 8016d5c:	4641      	mov	r1, r8
 8016d5e:	4668      	mov	r0, sp
 8016d60:	4798      	blx	r3
 8016d62:	4639      	mov	r1, r7
 8016d64:	4604      	mov	r4, r0
 8016d66:	480a      	ldr	r0, [pc, #40]	@ (8016d90 <rmw_take_request+0xb8>)
 8016d68:	f7ff fed4 	bl	8016b14 <put_memory>
 8016d6c:	b106      	cbz	r6, 8016d70 <rmw_take_request+0x98>
 8016d6e:	7034      	strb	r4, [r6, #0]
 8016d70:	f084 0001 	eor.w	r0, r4, #1
 8016d74:	b2c0      	uxtb	r0, r0
 8016d76:	b009      	add	sp, #36	@ 0x24
 8016d78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d7c:	2001      	movs	r0, #1
 8016d7e:	b009      	add	sp, #36	@ 0x24
 8016d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d84:	200c      	movs	r0, #12
 8016d86:	b009      	add	sp, #36	@ 0x24
 8016d88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d8c:	0801e824 	.word	0x0801e824
 8016d90:	2000a030 	.word	0x2000a030

08016d94 <rmw_send_response>:
 8016d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016d96:	4605      	mov	r5, r0
 8016d98:	6800      	ldr	r0, [r0, #0]
 8016d9a:	b091      	sub	sp, #68	@ 0x44
 8016d9c:	460c      	mov	r4, r1
 8016d9e:	4617      	mov	r7, r2
 8016da0:	b128      	cbz	r0, 8016dae <rmw_send_response+0x1a>
 8016da2:	4b2a      	ldr	r3, [pc, #168]	@ (8016e4c <rmw_send_response+0xb8>)
 8016da4:	6819      	ldr	r1, [r3, #0]
 8016da6:	f7e9 fa1b 	bl	80001e0 <strcmp>
 8016daa:	2800      	cmp	r0, #0
 8016dac:	d143      	bne.n	8016e36 <rmw_send_response+0xa2>
 8016dae:	4623      	mov	r3, r4
 8016db0:	4626      	mov	r6, r4
 8016db2:	f853 0f04 	ldr.w	r0, [r3, #4]!
 8016db6:	f836 ef01 	ldrh.w	lr, [r6, #1]!
 8016dba:	6859      	ldr	r1, [r3, #4]
 8016dbc:	686d      	ldr	r5, [r5, #4]
 8016dbe:	689a      	ldr	r2, [r3, #8]
 8016dc0:	78b3      	ldrb	r3, [r6, #2]
 8016dc2:	f894 c000 	ldrb.w	ip, [r4]
 8016dc6:	6966      	ldr	r6, [r4, #20]
 8016dc8:	f88d 3016 	strb.w	r3, [sp, #22]
 8016dcc:	ab02      	add	r3, sp, #8
 8016dce:	f8ad e014 	strh.w	lr, [sp, #20]
 8016dd2:	f88d c017 	strb.w	ip, [sp, #23]
 8016dd6:	9606      	str	r6, [sp, #24]
 8016dd8:	c307      	stmia	r3!, {r0, r1, r2}
 8016dda:	696b      	ldr	r3, [r5, #20]
 8016ddc:	6922      	ldr	r2, [r4, #16]
 8016dde:	9207      	str	r2, [sp, #28]
 8016de0:	68db      	ldr	r3, [r3, #12]
 8016de2:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 8016de4:	4798      	blx	r3
 8016de6:	4603      	mov	r3, r0
 8016de8:	4638      	mov	r0, r7
 8016dea:	685c      	ldr	r4, [r3, #4]
 8016dec:	6923      	ldr	r3, [r4, #16]
 8016dee:	4798      	blx	r3
 8016df0:	6933      	ldr	r3, [r6, #16]
 8016df2:	3018      	adds	r0, #24
 8016df4:	9000      	str	r0, [sp, #0]
 8016df6:	692a      	ldr	r2, [r5, #16]
 8016df8:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8016dfa:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8016dfe:	ab08      	add	r3, sp, #32
 8016e00:	f7fc f86c 	bl	8012edc <uxr_prepare_output_stream>
 8016e04:	b910      	cbnz	r0, 8016e0c <rmw_send_response+0x78>
 8016e06:	2001      	movs	r0, #1
 8016e08:	b011      	add	sp, #68	@ 0x44
 8016e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e0c:	a902      	add	r1, sp, #8
 8016e0e:	a808      	add	r0, sp, #32
 8016e10:	f7fd f982 	bl	8014118 <uxr_serialize_SampleIdentity>
 8016e14:	68a3      	ldr	r3, [r4, #8]
 8016e16:	a908      	add	r1, sp, #32
 8016e18:	4638      	mov	r0, r7
 8016e1a:	4798      	blx	r3
 8016e1c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8016e20:	6930      	ldr	r0, [r6, #16]
 8016e22:	2b01      	cmp	r3, #1
 8016e24:	d00a      	beq.n	8016e3c <rmw_send_response+0xa8>
 8016e26:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8016e28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016e2c:	f7fa fdd0 	bl	80119d0 <uxr_run_session_until_confirm_delivery>
 8016e30:	2000      	movs	r0, #0
 8016e32:	b011      	add	sp, #68	@ 0x44
 8016e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e36:	200c      	movs	r0, #12
 8016e38:	b011      	add	sp, #68	@ 0x44
 8016e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8016e40:	f7fa fa0a 	bl	8011258 <uxr_flash_output_streams>
 8016e44:	2000      	movs	r0, #0
 8016e46:	b011      	add	sp, #68	@ 0x44
 8016e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e4a:	bf00      	nop
 8016e4c:	0801e824 	.word	0x0801e824

08016e50 <rmw_take_response>:
 8016e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e54:	4604      	mov	r4, r0
 8016e56:	6800      	ldr	r0, [r0, #0]
 8016e58:	b089      	sub	sp, #36	@ 0x24
 8016e5a:	4688      	mov	r8, r1
 8016e5c:	4617      	mov	r7, r2
 8016e5e:	461d      	mov	r5, r3
 8016e60:	b120      	cbz	r0, 8016e6c <rmw_take_response+0x1c>
 8016e62:	4b1f      	ldr	r3, [pc, #124]	@ (8016ee0 <rmw_take_response+0x90>)
 8016e64:	6819      	ldr	r1, [r3, #0]
 8016e66:	f7e9 f9bb 	bl	80001e0 <strcmp>
 8016e6a:	bb88      	cbnz	r0, 8016ed0 <rmw_take_response+0x80>
 8016e6c:	b10d      	cbz	r5, 8016e72 <rmw_take_response+0x22>
 8016e6e:	2300      	movs	r3, #0
 8016e70:	702b      	strb	r3, [r5, #0]
 8016e72:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016e76:	f7f9 fa27 	bl	80102c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8016e7a:	4648      	mov	r0, r9
 8016e7c:	f7f9 f9fa 	bl	8010274 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016e80:	4606      	mov	r6, r0
 8016e82:	b348      	cbz	r0, 8016ed8 <rmw_take_response+0x88>
 8016e84:	68c4      	ldr	r4, [r0, #12]
 8016e86:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8016e8a:	f604 0328 	addw	r3, r4, #2088	@ 0x828
 8016e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e92:	68c9      	ldr	r1, [r1, #12]
 8016e94:	e9c8 2308 	strd	r2, r3, [r8, #32]
 8016e98:	4788      	blx	r1
 8016e9a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016e9e:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8016ea2:	f104 0110 	add.w	r1, r4, #16
 8016ea6:	4668      	mov	r0, sp
 8016ea8:	f7f9 fbda 	bl	8010660 <ucdr_init_buffer>
 8016eac:	4639      	mov	r1, r7
 8016eae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016eb2:	4668      	mov	r0, sp
 8016eb4:	4798      	blx	r3
 8016eb6:	4631      	mov	r1, r6
 8016eb8:	4604      	mov	r4, r0
 8016eba:	480a      	ldr	r0, [pc, #40]	@ (8016ee4 <rmw_take_response+0x94>)
 8016ebc:	f7ff fe2a 	bl	8016b14 <put_memory>
 8016ec0:	b105      	cbz	r5, 8016ec4 <rmw_take_response+0x74>
 8016ec2:	702c      	strb	r4, [r5, #0]
 8016ec4:	f084 0001 	eor.w	r0, r4, #1
 8016ec8:	b2c0      	uxtb	r0, r0
 8016eca:	b009      	add	sp, #36	@ 0x24
 8016ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ed0:	200c      	movs	r0, #12
 8016ed2:	b009      	add	sp, #36	@ 0x24
 8016ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ed8:	2001      	movs	r0, #1
 8016eda:	b009      	add	sp, #36	@ 0x24
 8016edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ee0:	0801e824 	.word	0x0801e824
 8016ee4:	2000a030 	.word	0x2000a030

08016ee8 <rmw_take_with_info>:
 8016ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016eea:	4604      	mov	r4, r0
 8016eec:	6800      	ldr	r0, [r0, #0]
 8016eee:	b089      	sub	sp, #36	@ 0x24
 8016ef0:	460f      	mov	r7, r1
 8016ef2:	4615      	mov	r5, r2
 8016ef4:	b128      	cbz	r0, 8016f02 <rmw_take_with_info+0x1a>
 8016ef6:	4b24      	ldr	r3, [pc, #144]	@ (8016f88 <rmw_take_with_info+0xa0>)
 8016ef8:	6819      	ldr	r1, [r3, #0]
 8016efa:	f7e9 f971 	bl	80001e0 <strcmp>
 8016efe:	2800      	cmp	r0, #0
 8016f00:	d13e      	bne.n	8016f80 <rmw_take_with_info+0x98>
 8016f02:	b305      	cbz	r5, 8016f46 <rmw_take_with_info+0x5e>
 8016f04:	6864      	ldr	r4, [r4, #4]
 8016f06:	2300      	movs	r3, #0
 8016f08:	702b      	strb	r3, [r5, #0]
 8016f0a:	f7f9 f9dd 	bl	80102c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8016f0e:	4620      	mov	r0, r4
 8016f10:	f7f9 f9b0 	bl	8010274 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016f14:	4606      	mov	r6, r0
 8016f16:	b1f0      	cbz	r0, 8016f56 <rmw_take_with_info+0x6e>
 8016f18:	68c1      	ldr	r1, [r0, #12]
 8016f1a:	4668      	mov	r0, sp
 8016f1c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016f20:	3110      	adds	r1, #16
 8016f22:	f7f9 fb9d 	bl	8010660 <ucdr_init_buffer>
 8016f26:	69a3      	ldr	r3, [r4, #24]
 8016f28:	4639      	mov	r1, r7
 8016f2a:	68db      	ldr	r3, [r3, #12]
 8016f2c:	4668      	mov	r0, sp
 8016f2e:	4798      	blx	r3
 8016f30:	4631      	mov	r1, r6
 8016f32:	4604      	mov	r4, r0
 8016f34:	4815      	ldr	r0, [pc, #84]	@ (8016f8c <rmw_take_with_info+0xa4>)
 8016f36:	f7ff fded 	bl	8016b14 <put_memory>
 8016f3a:	702c      	strb	r4, [r5, #0]
 8016f3c:	f084 0001 	eor.w	r0, r4, #1
 8016f40:	b2c0      	uxtb	r0, r0
 8016f42:	b009      	add	sp, #36	@ 0x24
 8016f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f46:	6864      	ldr	r4, [r4, #4]
 8016f48:	f7f9 f9be 	bl	80102c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8016f4c:	4620      	mov	r0, r4
 8016f4e:	f7f9 f991 	bl	8010274 <rmw_uxrce_find_static_input_buffer_by_owner>
 8016f52:	4605      	mov	r5, r0
 8016f54:	b910      	cbnz	r0, 8016f5c <rmw_take_with_info+0x74>
 8016f56:	2001      	movs	r0, #1
 8016f58:	b009      	add	sp, #36	@ 0x24
 8016f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f5c:	68e9      	ldr	r1, [r5, #12]
 8016f5e:	4668      	mov	r0, sp
 8016f60:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8016f64:	3110      	adds	r1, #16
 8016f66:	f7f9 fb7b 	bl	8010660 <ucdr_init_buffer>
 8016f6a:	69a3      	ldr	r3, [r4, #24]
 8016f6c:	4639      	mov	r1, r7
 8016f6e:	68db      	ldr	r3, [r3, #12]
 8016f70:	4668      	mov	r0, sp
 8016f72:	4798      	blx	r3
 8016f74:	4629      	mov	r1, r5
 8016f76:	4604      	mov	r4, r0
 8016f78:	4804      	ldr	r0, [pc, #16]	@ (8016f8c <rmw_take_with_info+0xa4>)
 8016f7a:	f7ff fdcb 	bl	8016b14 <put_memory>
 8016f7e:	e7dd      	b.n	8016f3c <rmw_take_with_info+0x54>
 8016f80:	200c      	movs	r0, #12
 8016f82:	b009      	add	sp, #36	@ 0x24
 8016f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f86:	bf00      	nop
 8016f88:	0801e824 	.word	0x0801e824
 8016f8c:	2000a030 	.word	0x2000a030

08016f90 <rmw_wait>:
 8016f90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f94:	460f      	mov	r7, r1
 8016f96:	4606      	mov	r6, r0
 8016f98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016f9a:	469a      	mov	sl, r3
 8016f9c:	4615      	mov	r5, r2
 8016f9e:	2a00      	cmp	r2, #0
 8016fa0:	f000 8122 	beq.w	80171e8 <rmw_wait+0x258>
 8016fa4:	2900      	cmp	r1, #0
 8016fa6:	f000 812a 	beq.w	80171fe <rmw_wait+0x26e>
 8016faa:	e9d1 2300 	ldrd	r2, r3, [r1]
 8016fae:	ea4f 1b42 	mov.w	fp, r2, lsl #5
 8016fb2:	015c      	lsls	r4, r3, #5
 8016fb4:	ebbb 0b02 	subs.w	fp, fp, r2
 8016fb8:	ea44 64d2 	orr.w	r4, r4, r2, lsr #27
 8016fbc:	eb64 0403 	sbc.w	r4, r4, r3
 8016fc0:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8016fc4:	00a4      	lsls	r4, r4, #2
 8016fc6:	ea44 749b 	orr.w	r4, r4, fp, lsr #30
 8016fca:	eb10 0b02 	adds.w	fp, r0, r2
 8016fce:	eb43 0404 	adc.w	r4, r3, r4
 8016fd2:	4aad      	ldr	r2, [pc, #692]	@ (8017288 <rmw_wait+0x2f8>)
 8016fd4:	2300      	movs	r3, #0
 8016fd6:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8016fda:	f7e9 febd 	bl	8000d58 <__aeabi_uldivmod>
 8016fde:	00e4      	lsls	r4, r4, #3
 8016fe0:	ea44 745b 	orr.w	r4, r4, fp, lsr #29
 8016fe4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8016fe8:	eb1b 0800 	adds.w	r8, fp, r0
 8016fec:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8016ff0:	eb44 0901 	adc.w	r9, r4, r1
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	4542      	cmp	r2, r8
 8016ff8:	eb73 0109 	sbcs.w	r1, r3, r9
 8016ffc:	f2c0 80f2 	blt.w	80171e4 <rmw_wait+0x254>
 8017000:	f7f9 f962 	bl	80102c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8017004:	4ba1      	ldr	r3, [pc, #644]	@ (801728c <rmw_wait+0x2fc>)
 8017006:	681c      	ldr	r4, [r3, #0]
 8017008:	b144      	cbz	r4, 801701c <rmw_wait+0x8c>
 801700a:	4623      	mov	r3, r4
 801700c:	f241 50a4 	movw	r0, #5540	@ 0x15a4
 8017010:	2100      	movs	r1, #0
 8017012:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8017016:	5411      	strb	r1, [r2, r0]
 8017018:	2b00      	cmp	r3, #0
 801701a:	d1fa      	bne.n	8017012 <rmw_wait+0x82>
 801701c:	b185      	cbz	r5, 8017040 <rmw_wait+0xb0>
 801701e:	6829      	ldr	r1, [r5, #0]
 8017020:	b171      	cbz	r1, 8017040 <rmw_wait+0xb0>
 8017022:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8017026:	2300      	movs	r3, #0
 8017028:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 801702c:	2001      	movs	r0, #1
 801702e:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017032:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017034:	3301      	adds	r3, #1
 8017036:	6912      	ldr	r2, [r2, #16]
 8017038:	4299      	cmp	r1, r3
 801703a:	f802 000c 	strb.w	r0, [r2, ip]
 801703e:	d1f6      	bne.n	801702e <rmw_wait+0x9e>
 8017040:	f1ba 0f00 	cmp.w	sl, #0
 8017044:	d011      	beq.n	801706a <rmw_wait+0xda>
 8017046:	f8da 1000 	ldr.w	r1, [sl]
 801704a:	b171      	cbz	r1, 801706a <rmw_wait+0xda>
 801704c:	f8da e004 	ldr.w	lr, [sl, #4]
 8017050:	2300      	movs	r3, #0
 8017052:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 8017056:	2001      	movs	r0, #1
 8017058:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 801705c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801705e:	3301      	adds	r3, #1
 8017060:	6912      	ldr	r2, [r2, #16]
 8017062:	4299      	cmp	r1, r3
 8017064:	f802 000c 	strb.w	r0, [r2, ip]
 8017068:	d1f6      	bne.n	8017058 <rmw_wait+0xc8>
 801706a:	b186      	cbz	r6, 801708e <rmw_wait+0xfe>
 801706c:	6831      	ldr	r1, [r6, #0]
 801706e:	b171      	cbz	r1, 801708e <rmw_wait+0xfe>
 8017070:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8017074:	2300      	movs	r3, #0
 8017076:	f241 5ca4 	movw	ip, #5540	@ 0x15a4
 801707a:	2001      	movs	r0, #1
 801707c:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
 8017080:	6a12      	ldr	r2, [r2, #32]
 8017082:	3301      	adds	r3, #1
 8017084:	6912      	ldr	r2, [r2, #16]
 8017086:	4299      	cmp	r1, r3
 8017088:	f802 000c 	strb.w	r0, [r2, ip]
 801708c:	d1f6      	bne.n	801707c <rmw_wait+0xec>
 801708e:	b34c      	cbz	r4, 80170e4 <rmw_wait+0x154>
 8017090:	4622      	mov	r2, r4
 8017092:	2300      	movs	r3, #0
 8017094:	f241 50a4 	movw	r0, #5540	@ 0x15a4
 8017098:	e9d2 2102 	ldrd	r2, r1, [r2, #8]
 801709c:	5c09      	ldrb	r1, [r1, r0]
 801709e:	440b      	add	r3, r1
 80170a0:	b2db      	uxtb	r3, r3
 80170a2:	2a00      	cmp	r2, #0
 80170a4:	d1f8      	bne.n	8017098 <rmw_wait+0x108>
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	f000 8082 	beq.w	80171b0 <rmw_wait+0x220>
 80170ac:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
 80170b0:	d00d      	beq.n	80170ce <rmw_wait+0x13e>
 80170b2:	ee07 8a90 	vmov	s15, r8
 80170b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80170ba:	ee07 3a90 	vmov	s15, r3
 80170be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80170c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80170c6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80170ca:	ee17 8a90 	vmov	r8, s15
 80170ce:	f241 59a4 	movw	r9, #5540	@ 0x15a4
 80170d2:	68e0      	ldr	r0, [r4, #12]
 80170d4:	f810 3009 	ldrb.w	r3, [r0, r9]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	f040 8093 	bne.w	8017204 <rmw_wait+0x274>
 80170de:	68a4      	ldr	r4, [r4, #8]
 80170e0:	2c00      	cmp	r4, #0
 80170e2:	d1f6      	bne.n	80170d2 <rmw_wait+0x142>
 80170e4:	2d00      	cmp	r5, #0
 80170e6:	f000 80ac 	beq.w	8017242 <rmw_wait+0x2b2>
 80170ea:	682b      	ldr	r3, [r5, #0]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	f000 8093 	beq.w	8017218 <rmw_wait+0x288>
 80170f2:	2400      	movs	r4, #0
 80170f4:	46a0      	mov	r8, r4
 80170f6:	686b      	ldr	r3, [r5, #4]
 80170f8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80170fc:	f7f9 f8ba 	bl	8010274 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017100:	2800      	cmp	r0, #0
 8017102:	d05f      	beq.n	80171c4 <rmw_wait+0x234>
 8017104:	682b      	ldr	r3, [r5, #0]
 8017106:	3401      	adds	r4, #1
 8017108:	42a3      	cmp	r3, r4
 801710a:	f04f 0801 	mov.w	r8, #1
 801710e:	d8f2      	bhi.n	80170f6 <rmw_wait+0x166>
 8017110:	f1ba 0f00 	cmp.w	sl, #0
 8017114:	d012      	beq.n	801713c <rmw_wait+0x1ac>
 8017116:	f8da 3000 	ldr.w	r3, [sl]
 801711a:	b17b      	cbz	r3, 801713c <rmw_wait+0x1ac>
 801711c:	2400      	movs	r4, #0
 801711e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017122:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017126:	f7f9 f8a5 	bl	8010274 <rmw_uxrce_find_static_input_buffer_by_owner>
 801712a:	2800      	cmp	r0, #0
 801712c:	d052      	beq.n	80171d4 <rmw_wait+0x244>
 801712e:	f8da 3000 	ldr.w	r3, [sl]
 8017132:	3401      	adds	r4, #1
 8017134:	42a3      	cmp	r3, r4
 8017136:	f04f 0801 	mov.w	r8, #1
 801713a:	d8f0      	bhi.n	801711e <rmw_wait+0x18e>
 801713c:	b1e6      	cbz	r6, 8017178 <rmw_wait+0x1e8>
 801713e:	6833      	ldr	r3, [r6, #0]
 8017140:	b1d3      	cbz	r3, 8017178 <rmw_wait+0x1e8>
 8017142:	2400      	movs	r4, #0
 8017144:	6873      	ldr	r3, [r6, #4]
 8017146:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801714a:	f7f9 f893 	bl	8010274 <rmw_uxrce_find_static_input_buffer_by_owner>
 801714e:	b160      	cbz	r0, 801716a <rmw_wait+0x1da>
 8017150:	6833      	ldr	r3, [r6, #0]
 8017152:	3401      	adds	r4, #1
 8017154:	42a3      	cmp	r3, r4
 8017156:	d96c      	bls.n	8017232 <rmw_wait+0x2a2>
 8017158:	6873      	ldr	r3, [r6, #4]
 801715a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801715e:	f04f 0801 	mov.w	r8, #1
 8017162:	f7f9 f887 	bl	8010274 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017166:	2800      	cmp	r0, #0
 8017168:	d1f2      	bne.n	8017150 <rmw_wait+0x1c0>
 801716a:	e9d6 3200 	ldrd	r3, r2, [r6]
 801716e:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017172:	3401      	adds	r4, #1
 8017174:	42a3      	cmp	r3, r4
 8017176:	d8e5      	bhi.n	8017144 <rmw_wait+0x1b4>
 8017178:	b1a7      	cbz	r7, 80171a4 <rmw_wait+0x214>
 801717a:	683c      	ldr	r4, [r7, #0]
 801717c:	b194      	cbz	r4, 80171a4 <rmw_wait+0x214>
 801717e:	2300      	movs	r3, #0
 8017180:	461d      	mov	r5, r3
 8017182:	e004      	b.n	801718e <rmw_wait+0x1fe>
 8017184:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8017188:	3301      	adds	r3, #1
 801718a:	42a3      	cmp	r3, r4
 801718c:	d00a      	beq.n	80171a4 <rmw_wait+0x214>
 801718e:	6878      	ldr	r0, [r7, #4]
 8017190:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017194:	7c0a      	ldrb	r2, [r1, #16]
 8017196:	2a00      	cmp	r2, #0
 8017198:	d0f4      	beq.n	8017184 <rmw_wait+0x1f4>
 801719a:	3301      	adds	r3, #1
 801719c:	42a3      	cmp	r3, r4
 801719e:	740d      	strb	r5, [r1, #16]
 80171a0:	4690      	mov	r8, r2
 80171a2:	d1f4      	bne.n	801718e <rmw_wait+0x1fe>
 80171a4:	f1b8 0f00 	cmp.w	r8, #0
 80171a8:	d040      	beq.n	801722c <rmw_wait+0x29c>
 80171aa:	2000      	movs	r0, #0
 80171ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171b0:	68e0      	ldr	r0, [r4, #12]
 80171b2:	2100      	movs	r1, #0
 80171b4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80171b8:	f7fa fbd0 	bl	801195c <uxr_run_session_timeout>
 80171bc:	68a4      	ldr	r4, [r4, #8]
 80171be:	2c00      	cmp	r4, #0
 80171c0:	d1f6      	bne.n	80171b0 <rmw_wait+0x220>
 80171c2:	e78f      	b.n	80170e4 <rmw_wait+0x154>
 80171c4:	e9d5 3200 	ldrd	r3, r2, [r5]
 80171c8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80171cc:	3401      	adds	r4, #1
 80171ce:	42a3      	cmp	r3, r4
 80171d0:	d891      	bhi.n	80170f6 <rmw_wait+0x166>
 80171d2:	e79d      	b.n	8017110 <rmw_wait+0x180>
 80171d4:	e9da 3200 	ldrd	r3, r2, [sl]
 80171d8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80171dc:	3401      	adds	r4, #1
 80171de:	429c      	cmp	r4, r3
 80171e0:	d39d      	bcc.n	801711e <rmw_wait+0x18e>
 80171e2:	e7ab      	b.n	801713c <rmw_wait+0x1ac>
 80171e4:	4690      	mov	r8, r2
 80171e6:	e70b      	b.n	8017000 <rmw_wait+0x70>
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	f47f aedb 	bne.w	8016fa4 <rmw_wait+0x14>
 80171ee:	2800      	cmp	r0, #0
 80171f0:	f47f aed8 	bne.w	8016fa4 <rmw_wait+0x14>
 80171f4:	2f00      	cmp	r7, #0
 80171f6:	d0d8      	beq.n	80171aa <rmw_wait+0x21a>
 80171f8:	2900      	cmp	r1, #0
 80171fa:	f47f aed6 	bne.w	8016faa <rmw_wait+0x1a>
 80171fe:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017202:	e6fd      	b.n	8017000 <rmw_wait+0x70>
 8017204:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017208:	4641      	mov	r1, r8
 801720a:	f7fa fbc1 	bl	8011990 <uxr_run_session_until_data>
 801720e:	68a4      	ldr	r4, [r4, #8]
 8017210:	2c00      	cmp	r4, #0
 8017212:	f47f af5e 	bne.w	80170d2 <rmw_wait+0x142>
 8017216:	e765      	b.n	80170e4 <rmw_wait+0x154>
 8017218:	f1ba 0f00 	cmp.w	sl, #0
 801721c:	d11e      	bne.n	801725c <rmw_wait+0x2cc>
 801721e:	b35e      	cbz	r6, 8017278 <rmw_wait+0x2e8>
 8017220:	6833      	ldr	r3, [r6, #0]
 8017222:	46d0      	mov	r8, sl
 8017224:	2b00      	cmp	r3, #0
 8017226:	d18c      	bne.n	8017142 <rmw_wait+0x1b2>
 8017228:	2f00      	cmp	r7, #0
 801722a:	d1a6      	bne.n	801717a <rmw_wait+0x1ea>
 801722c:	2002      	movs	r0, #2
 801722e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017232:	2f00      	cmp	r7, #0
 8017234:	d0b9      	beq.n	80171aa <rmw_wait+0x21a>
 8017236:	683c      	ldr	r4, [r7, #0]
 8017238:	f04f 0801 	mov.w	r8, #1
 801723c:	2c00      	cmp	r4, #0
 801723e:	d19e      	bne.n	801717e <rmw_wait+0x1ee>
 8017240:	e7b3      	b.n	80171aa <rmw_wait+0x21a>
 8017242:	f1ba 0f00 	cmp.w	sl, #0
 8017246:	d0ea      	beq.n	801721e <rmw_wait+0x28e>
 8017248:	f8da 3000 	ldr.w	r3, [sl]
 801724c:	46a8      	mov	r8, r5
 801724e:	2b00      	cmp	r3, #0
 8017250:	f47f af64 	bne.w	801711c <rmw_wait+0x18c>
 8017254:	2e00      	cmp	r6, #0
 8017256:	f47f af72 	bne.w	801713e <rmw_wait+0x1ae>
 801725a:	e009      	b.n	8017270 <rmw_wait+0x2e0>
 801725c:	f8da 2000 	ldr.w	r2, [sl]
 8017260:	4698      	mov	r8, r3
 8017262:	2a00      	cmp	r2, #0
 8017264:	f47f af5a 	bne.w	801711c <rmw_wait+0x18c>
 8017268:	4690      	mov	r8, r2
 801726a:	2e00      	cmp	r6, #0
 801726c:	f47f af67 	bne.w	801713e <rmw_wait+0x1ae>
 8017270:	46b0      	mov	r8, r6
 8017272:	2f00      	cmp	r7, #0
 8017274:	d181      	bne.n	801717a <rmw_wait+0x1ea>
 8017276:	e7d9      	b.n	801722c <rmw_wait+0x29c>
 8017278:	2f00      	cmp	r7, #0
 801727a:	d0d7      	beq.n	801722c <rmw_wait+0x29c>
 801727c:	683c      	ldr	r4, [r7, #0]
 801727e:	46b0      	mov	r8, r6
 8017280:	2c00      	cmp	r4, #0
 8017282:	f47f af7c 	bne.w	801717e <rmw_wait+0x1ee>
 8017286:	e7d1      	b.n	801722c <rmw_wait+0x29c>
 8017288:	000f4240 	.word	0x000f4240
 801728c:	2000d1d8 	.word	0x2000d1d8

08017290 <rmw_create_wait_set>:
 8017290:	b508      	push	{r3, lr}
 8017292:	4803      	ldr	r0, [pc, #12]	@ (80172a0 <rmw_create_wait_set+0x10>)
 8017294:	f7ff fc2e 	bl	8016af4 <get_memory>
 8017298:	b108      	cbz	r0, 801729e <rmw_create_wait_set+0xe>
 801729a:	68c0      	ldr	r0, [r0, #12]
 801729c:	3010      	adds	r0, #16
 801729e:	bd08      	pop	{r3, pc}
 80172a0:	2000e9b0 	.word	0x2000e9b0

080172a4 <rmw_destroy_wait_set>:
 80172a4:	b508      	push	{r3, lr}
 80172a6:	4b08      	ldr	r3, [pc, #32]	@ (80172c8 <rmw_destroy_wait_set+0x24>)
 80172a8:	6819      	ldr	r1, [r3, #0]
 80172aa:	b911      	cbnz	r1, 80172b2 <rmw_destroy_wait_set+0xe>
 80172ac:	e00a      	b.n	80172c4 <rmw_destroy_wait_set+0x20>
 80172ae:	6889      	ldr	r1, [r1, #8]
 80172b0:	b141      	cbz	r1, 80172c4 <rmw_destroy_wait_set+0x20>
 80172b2:	68cb      	ldr	r3, [r1, #12]
 80172b4:	3310      	adds	r3, #16
 80172b6:	4298      	cmp	r0, r3
 80172b8:	d1f9      	bne.n	80172ae <rmw_destroy_wait_set+0xa>
 80172ba:	4803      	ldr	r0, [pc, #12]	@ (80172c8 <rmw_destroy_wait_set+0x24>)
 80172bc:	f7ff fc2a 	bl	8016b14 <put_memory>
 80172c0:	2000      	movs	r0, #0
 80172c2:	bd08      	pop	{r3, pc}
 80172c4:	2001      	movs	r0, #1
 80172c6:	bd08      	pop	{r3, pc}
 80172c8:	2000e9b0 	.word	0x2000e9b0

080172cc <rmw_uros_epoch_nanos>:
 80172cc:	4b05      	ldr	r3, [pc, #20]	@ (80172e4 <rmw_uros_epoch_nanos+0x18>)
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	b123      	cbz	r3, 80172dc <rmw_uros_epoch_nanos+0x10>
 80172d2:	68d8      	ldr	r0, [r3, #12]
 80172d4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80172d8:	f7f9 bfb4 	b.w	8011244 <uxr_epoch_nanos>
 80172dc:	2000      	movs	r0, #0
 80172de:	2100      	movs	r1, #0
 80172e0:	4770      	bx	lr
 80172e2:	bf00      	nop
 80172e4:	2000d1d8 	.word	0x2000d1d8

080172e8 <ucdr_serialize_endian_array_char>:
 80172e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172ec:	4619      	mov	r1, r3
 80172ee:	461e      	mov	r6, r3
 80172f0:	4690      	mov	r8, r2
 80172f2:	4604      	mov	r4, r0
 80172f4:	f7f9 f962 	bl	80105bc <ucdr_check_buffer_available_for>
 80172f8:	b9e0      	cbnz	r0, 8017334 <ucdr_serialize_endian_array_char+0x4c>
 80172fa:	4637      	mov	r7, r6
 80172fc:	e009      	b.n	8017312 <ucdr_serialize_endian_array_char+0x2a>
 80172fe:	68a0      	ldr	r0, [r4, #8]
 8017300:	f003 fb83 	bl	801aa0a <memcpy>
 8017304:	68a2      	ldr	r2, [r4, #8]
 8017306:	6923      	ldr	r3, [r4, #16]
 8017308:	442a      	add	r2, r5
 801730a:	442b      	add	r3, r5
 801730c:	1b7f      	subs	r7, r7, r5
 801730e:	60a2      	str	r2, [r4, #8]
 8017310:	6123      	str	r3, [r4, #16]
 8017312:	2201      	movs	r2, #1
 8017314:	4639      	mov	r1, r7
 8017316:	4620      	mov	r0, r4
 8017318:	f7f9 f9d6 	bl	80106c8 <ucdr_check_final_buffer_behavior_array>
 801731c:	1bf1      	subs	r1, r6, r7
 801731e:	4441      	add	r1, r8
 8017320:	4605      	mov	r5, r0
 8017322:	4602      	mov	r2, r0
 8017324:	2800      	cmp	r0, #0
 8017326:	d1ea      	bne.n	80172fe <ucdr_serialize_endian_array_char+0x16>
 8017328:	2301      	movs	r3, #1
 801732a:	7da0      	ldrb	r0, [r4, #22]
 801732c:	7563      	strb	r3, [r4, #21]
 801732e:	4058      	eors	r0, r3
 8017330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017334:	4632      	mov	r2, r6
 8017336:	68a0      	ldr	r0, [r4, #8]
 8017338:	4641      	mov	r1, r8
 801733a:	f003 fb66 	bl	801aa0a <memcpy>
 801733e:	68a2      	ldr	r2, [r4, #8]
 8017340:	6923      	ldr	r3, [r4, #16]
 8017342:	4432      	add	r2, r6
 8017344:	4433      	add	r3, r6
 8017346:	60a2      	str	r2, [r4, #8]
 8017348:	6123      	str	r3, [r4, #16]
 801734a:	e7ed      	b.n	8017328 <ucdr_serialize_endian_array_char+0x40>

0801734c <ucdr_deserialize_endian_array_char>:
 801734c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017350:	4619      	mov	r1, r3
 8017352:	461e      	mov	r6, r3
 8017354:	4690      	mov	r8, r2
 8017356:	4604      	mov	r4, r0
 8017358:	f7f9 f930 	bl	80105bc <ucdr_check_buffer_available_for>
 801735c:	b9e0      	cbnz	r0, 8017398 <ucdr_deserialize_endian_array_char+0x4c>
 801735e:	4637      	mov	r7, r6
 8017360:	e009      	b.n	8017376 <ucdr_deserialize_endian_array_char+0x2a>
 8017362:	68a1      	ldr	r1, [r4, #8]
 8017364:	f003 fb51 	bl	801aa0a <memcpy>
 8017368:	68a2      	ldr	r2, [r4, #8]
 801736a:	6923      	ldr	r3, [r4, #16]
 801736c:	442a      	add	r2, r5
 801736e:	442b      	add	r3, r5
 8017370:	1b7f      	subs	r7, r7, r5
 8017372:	60a2      	str	r2, [r4, #8]
 8017374:	6123      	str	r3, [r4, #16]
 8017376:	2201      	movs	r2, #1
 8017378:	4639      	mov	r1, r7
 801737a:	4620      	mov	r0, r4
 801737c:	f7f9 f9a4 	bl	80106c8 <ucdr_check_final_buffer_behavior_array>
 8017380:	4605      	mov	r5, r0
 8017382:	1bf0      	subs	r0, r6, r7
 8017384:	4440      	add	r0, r8
 8017386:	462a      	mov	r2, r5
 8017388:	2d00      	cmp	r5, #0
 801738a:	d1ea      	bne.n	8017362 <ucdr_deserialize_endian_array_char+0x16>
 801738c:	2301      	movs	r3, #1
 801738e:	7da0      	ldrb	r0, [r4, #22]
 8017390:	7563      	strb	r3, [r4, #21]
 8017392:	4058      	eors	r0, r3
 8017394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017398:	4632      	mov	r2, r6
 801739a:	68a1      	ldr	r1, [r4, #8]
 801739c:	4640      	mov	r0, r8
 801739e:	f003 fb34 	bl	801aa0a <memcpy>
 80173a2:	68a2      	ldr	r2, [r4, #8]
 80173a4:	6923      	ldr	r3, [r4, #16]
 80173a6:	4432      	add	r2, r6
 80173a8:	4433      	add	r3, r6
 80173aa:	60a2      	str	r2, [r4, #8]
 80173ac:	6123      	str	r3, [r4, #16]
 80173ae:	e7ed      	b.n	801738c <ucdr_deserialize_endian_array_char+0x40>

080173b0 <ucdr_serialize_array_uint8_t>:
 80173b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173b4:	4688      	mov	r8, r1
 80173b6:	4611      	mov	r1, r2
 80173b8:	4616      	mov	r6, r2
 80173ba:	4604      	mov	r4, r0
 80173bc:	f7f9 f8fe 	bl	80105bc <ucdr_check_buffer_available_for>
 80173c0:	b9e0      	cbnz	r0, 80173fc <ucdr_serialize_array_uint8_t+0x4c>
 80173c2:	4637      	mov	r7, r6
 80173c4:	e009      	b.n	80173da <ucdr_serialize_array_uint8_t+0x2a>
 80173c6:	68a0      	ldr	r0, [r4, #8]
 80173c8:	f003 fb1f 	bl	801aa0a <memcpy>
 80173cc:	68a2      	ldr	r2, [r4, #8]
 80173ce:	6923      	ldr	r3, [r4, #16]
 80173d0:	442a      	add	r2, r5
 80173d2:	442b      	add	r3, r5
 80173d4:	1b7f      	subs	r7, r7, r5
 80173d6:	60a2      	str	r2, [r4, #8]
 80173d8:	6123      	str	r3, [r4, #16]
 80173da:	2201      	movs	r2, #1
 80173dc:	4639      	mov	r1, r7
 80173de:	4620      	mov	r0, r4
 80173e0:	f7f9 f972 	bl	80106c8 <ucdr_check_final_buffer_behavior_array>
 80173e4:	1bf1      	subs	r1, r6, r7
 80173e6:	4441      	add	r1, r8
 80173e8:	4605      	mov	r5, r0
 80173ea:	4602      	mov	r2, r0
 80173ec:	2800      	cmp	r0, #0
 80173ee:	d1ea      	bne.n	80173c6 <ucdr_serialize_array_uint8_t+0x16>
 80173f0:	2301      	movs	r3, #1
 80173f2:	7da0      	ldrb	r0, [r4, #22]
 80173f4:	7563      	strb	r3, [r4, #21]
 80173f6:	4058      	eors	r0, r3
 80173f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173fc:	4632      	mov	r2, r6
 80173fe:	68a0      	ldr	r0, [r4, #8]
 8017400:	4641      	mov	r1, r8
 8017402:	f003 fb02 	bl	801aa0a <memcpy>
 8017406:	68a3      	ldr	r3, [r4, #8]
 8017408:	6922      	ldr	r2, [r4, #16]
 801740a:	4433      	add	r3, r6
 801740c:	4432      	add	r2, r6
 801740e:	60a3      	str	r3, [r4, #8]
 8017410:	6122      	str	r2, [r4, #16]
 8017412:	e7ed      	b.n	80173f0 <ucdr_serialize_array_uint8_t+0x40>

08017414 <ucdr_serialize_endian_array_uint8_t>:
 8017414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017418:	4619      	mov	r1, r3
 801741a:	461e      	mov	r6, r3
 801741c:	4690      	mov	r8, r2
 801741e:	4604      	mov	r4, r0
 8017420:	f7f9 f8cc 	bl	80105bc <ucdr_check_buffer_available_for>
 8017424:	b9e0      	cbnz	r0, 8017460 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8017426:	4637      	mov	r7, r6
 8017428:	e009      	b.n	801743e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801742a:	68a0      	ldr	r0, [r4, #8]
 801742c:	f003 faed 	bl	801aa0a <memcpy>
 8017430:	68a2      	ldr	r2, [r4, #8]
 8017432:	6923      	ldr	r3, [r4, #16]
 8017434:	442a      	add	r2, r5
 8017436:	442b      	add	r3, r5
 8017438:	1b7f      	subs	r7, r7, r5
 801743a:	60a2      	str	r2, [r4, #8]
 801743c:	6123      	str	r3, [r4, #16]
 801743e:	2201      	movs	r2, #1
 8017440:	4639      	mov	r1, r7
 8017442:	4620      	mov	r0, r4
 8017444:	f7f9 f940 	bl	80106c8 <ucdr_check_final_buffer_behavior_array>
 8017448:	1bf1      	subs	r1, r6, r7
 801744a:	4441      	add	r1, r8
 801744c:	4605      	mov	r5, r0
 801744e:	4602      	mov	r2, r0
 8017450:	2800      	cmp	r0, #0
 8017452:	d1ea      	bne.n	801742a <ucdr_serialize_endian_array_uint8_t+0x16>
 8017454:	2301      	movs	r3, #1
 8017456:	7da0      	ldrb	r0, [r4, #22]
 8017458:	7563      	strb	r3, [r4, #21]
 801745a:	4058      	eors	r0, r3
 801745c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017460:	4632      	mov	r2, r6
 8017462:	68a0      	ldr	r0, [r4, #8]
 8017464:	4641      	mov	r1, r8
 8017466:	f003 fad0 	bl	801aa0a <memcpy>
 801746a:	68a2      	ldr	r2, [r4, #8]
 801746c:	6923      	ldr	r3, [r4, #16]
 801746e:	4432      	add	r2, r6
 8017470:	4433      	add	r3, r6
 8017472:	60a2      	str	r2, [r4, #8]
 8017474:	6123      	str	r3, [r4, #16]
 8017476:	e7ed      	b.n	8017454 <ucdr_serialize_endian_array_uint8_t+0x40>

08017478 <ucdr_deserialize_array_uint8_t>:
 8017478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801747c:	4688      	mov	r8, r1
 801747e:	4611      	mov	r1, r2
 8017480:	4616      	mov	r6, r2
 8017482:	4604      	mov	r4, r0
 8017484:	f7f9 f89a 	bl	80105bc <ucdr_check_buffer_available_for>
 8017488:	b9e0      	cbnz	r0, 80174c4 <ucdr_deserialize_array_uint8_t+0x4c>
 801748a:	4637      	mov	r7, r6
 801748c:	e009      	b.n	80174a2 <ucdr_deserialize_array_uint8_t+0x2a>
 801748e:	68a1      	ldr	r1, [r4, #8]
 8017490:	f003 fabb 	bl	801aa0a <memcpy>
 8017494:	68a2      	ldr	r2, [r4, #8]
 8017496:	6923      	ldr	r3, [r4, #16]
 8017498:	442a      	add	r2, r5
 801749a:	442b      	add	r3, r5
 801749c:	1b7f      	subs	r7, r7, r5
 801749e:	60a2      	str	r2, [r4, #8]
 80174a0:	6123      	str	r3, [r4, #16]
 80174a2:	2201      	movs	r2, #1
 80174a4:	4639      	mov	r1, r7
 80174a6:	4620      	mov	r0, r4
 80174a8:	f7f9 f90e 	bl	80106c8 <ucdr_check_final_buffer_behavior_array>
 80174ac:	4605      	mov	r5, r0
 80174ae:	1bf0      	subs	r0, r6, r7
 80174b0:	4440      	add	r0, r8
 80174b2:	462a      	mov	r2, r5
 80174b4:	2d00      	cmp	r5, #0
 80174b6:	d1ea      	bne.n	801748e <ucdr_deserialize_array_uint8_t+0x16>
 80174b8:	2301      	movs	r3, #1
 80174ba:	7da0      	ldrb	r0, [r4, #22]
 80174bc:	7563      	strb	r3, [r4, #21]
 80174be:	4058      	eors	r0, r3
 80174c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174c4:	4632      	mov	r2, r6
 80174c6:	68a1      	ldr	r1, [r4, #8]
 80174c8:	4640      	mov	r0, r8
 80174ca:	f003 fa9e 	bl	801aa0a <memcpy>
 80174ce:	68a3      	ldr	r3, [r4, #8]
 80174d0:	6922      	ldr	r2, [r4, #16]
 80174d2:	4433      	add	r3, r6
 80174d4:	4432      	add	r2, r6
 80174d6:	60a3      	str	r3, [r4, #8]
 80174d8:	6122      	str	r2, [r4, #16]
 80174da:	e7ed      	b.n	80174b8 <ucdr_deserialize_array_uint8_t+0x40>

080174dc <ucdr_deserialize_endian_array_uint8_t>:
 80174dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174e0:	4619      	mov	r1, r3
 80174e2:	461e      	mov	r6, r3
 80174e4:	4690      	mov	r8, r2
 80174e6:	4604      	mov	r4, r0
 80174e8:	f7f9 f868 	bl	80105bc <ucdr_check_buffer_available_for>
 80174ec:	b9e0      	cbnz	r0, 8017528 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80174ee:	4637      	mov	r7, r6
 80174f0:	e009      	b.n	8017506 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80174f2:	68a1      	ldr	r1, [r4, #8]
 80174f4:	f003 fa89 	bl	801aa0a <memcpy>
 80174f8:	68a2      	ldr	r2, [r4, #8]
 80174fa:	6923      	ldr	r3, [r4, #16]
 80174fc:	442a      	add	r2, r5
 80174fe:	442b      	add	r3, r5
 8017500:	1b7f      	subs	r7, r7, r5
 8017502:	60a2      	str	r2, [r4, #8]
 8017504:	6123      	str	r3, [r4, #16]
 8017506:	2201      	movs	r2, #1
 8017508:	4639      	mov	r1, r7
 801750a:	4620      	mov	r0, r4
 801750c:	f7f9 f8dc 	bl	80106c8 <ucdr_check_final_buffer_behavior_array>
 8017510:	4605      	mov	r5, r0
 8017512:	1bf0      	subs	r0, r6, r7
 8017514:	4440      	add	r0, r8
 8017516:	462a      	mov	r2, r5
 8017518:	2d00      	cmp	r5, #0
 801751a:	d1ea      	bne.n	80174f2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801751c:	2301      	movs	r3, #1
 801751e:	7da0      	ldrb	r0, [r4, #22]
 8017520:	7563      	strb	r3, [r4, #21]
 8017522:	4058      	eors	r0, r3
 8017524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017528:	4632      	mov	r2, r6
 801752a:	68a1      	ldr	r1, [r4, #8]
 801752c:	4640      	mov	r0, r8
 801752e:	f003 fa6c 	bl	801aa0a <memcpy>
 8017532:	68a2      	ldr	r2, [r4, #8]
 8017534:	6923      	ldr	r3, [r4, #16]
 8017536:	4432      	add	r2, r6
 8017538:	4433      	add	r3, r6
 801753a:	60a2      	str	r2, [r4, #8]
 801753c:	6123      	str	r3, [r4, #16]
 801753e:	e7ed      	b.n	801751c <ucdr_deserialize_endian_array_uint8_t+0x40>

08017540 <ucdr_serialize_bool>:
 8017540:	b538      	push	{r3, r4, r5, lr}
 8017542:	460d      	mov	r5, r1
 8017544:	2101      	movs	r1, #1
 8017546:	4604      	mov	r4, r0
 8017548:	f7f9 f844 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 801754c:	b148      	cbz	r0, 8017562 <ucdr_serialize_bool+0x22>
 801754e:	68a3      	ldr	r3, [r4, #8]
 8017550:	701d      	strb	r5, [r3, #0]
 8017552:	68a2      	ldr	r2, [r4, #8]
 8017554:	6923      	ldr	r3, [r4, #16]
 8017556:	3201      	adds	r2, #1
 8017558:	3301      	adds	r3, #1
 801755a:	2101      	movs	r1, #1
 801755c:	60a2      	str	r2, [r4, #8]
 801755e:	6123      	str	r3, [r4, #16]
 8017560:	7561      	strb	r1, [r4, #21]
 8017562:	7da0      	ldrb	r0, [r4, #22]
 8017564:	f080 0001 	eor.w	r0, r0, #1
 8017568:	bd38      	pop	{r3, r4, r5, pc}
 801756a:	bf00      	nop

0801756c <ucdr_deserialize_bool>:
 801756c:	b538      	push	{r3, r4, r5, lr}
 801756e:	460d      	mov	r5, r1
 8017570:	2101      	movs	r1, #1
 8017572:	4604      	mov	r4, r0
 8017574:	f7f9 f82e 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8017578:	b168      	cbz	r0, 8017596 <ucdr_deserialize_bool+0x2a>
 801757a:	68a2      	ldr	r2, [r4, #8]
 801757c:	6923      	ldr	r3, [r4, #16]
 801757e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8017582:	3900      	subs	r1, #0
 8017584:	f103 0301 	add.w	r3, r3, #1
 8017588:	bf18      	it	ne
 801758a:	2101      	movne	r1, #1
 801758c:	2001      	movs	r0, #1
 801758e:	7029      	strb	r1, [r5, #0]
 8017590:	60a2      	str	r2, [r4, #8]
 8017592:	6123      	str	r3, [r4, #16]
 8017594:	7560      	strb	r0, [r4, #21]
 8017596:	7da0      	ldrb	r0, [r4, #22]
 8017598:	f080 0001 	eor.w	r0, r0, #1
 801759c:	bd38      	pop	{r3, r4, r5, pc}
 801759e:	bf00      	nop

080175a0 <ucdr_serialize_uint8_t>:
 80175a0:	b538      	push	{r3, r4, r5, lr}
 80175a2:	460d      	mov	r5, r1
 80175a4:	2101      	movs	r1, #1
 80175a6:	4604      	mov	r4, r0
 80175a8:	f7f9 f814 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 80175ac:	b148      	cbz	r0, 80175c2 <ucdr_serialize_uint8_t+0x22>
 80175ae:	68a3      	ldr	r3, [r4, #8]
 80175b0:	701d      	strb	r5, [r3, #0]
 80175b2:	68a2      	ldr	r2, [r4, #8]
 80175b4:	6923      	ldr	r3, [r4, #16]
 80175b6:	3201      	adds	r2, #1
 80175b8:	3301      	adds	r3, #1
 80175ba:	2101      	movs	r1, #1
 80175bc:	60a2      	str	r2, [r4, #8]
 80175be:	6123      	str	r3, [r4, #16]
 80175c0:	7561      	strb	r1, [r4, #21]
 80175c2:	7da0      	ldrb	r0, [r4, #22]
 80175c4:	f080 0001 	eor.w	r0, r0, #1
 80175c8:	bd38      	pop	{r3, r4, r5, pc}
 80175ca:	bf00      	nop

080175cc <ucdr_deserialize_uint8_t>:
 80175cc:	b538      	push	{r3, r4, r5, lr}
 80175ce:	460d      	mov	r5, r1
 80175d0:	2101      	movs	r1, #1
 80175d2:	4604      	mov	r4, r0
 80175d4:	f7f8 fffe 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 80175d8:	b150      	cbz	r0, 80175f0 <ucdr_deserialize_uint8_t+0x24>
 80175da:	68a3      	ldr	r3, [r4, #8]
 80175dc:	781b      	ldrb	r3, [r3, #0]
 80175de:	702b      	strb	r3, [r5, #0]
 80175e0:	68a2      	ldr	r2, [r4, #8]
 80175e2:	6923      	ldr	r3, [r4, #16]
 80175e4:	3201      	adds	r2, #1
 80175e6:	3301      	adds	r3, #1
 80175e8:	2101      	movs	r1, #1
 80175ea:	60a2      	str	r2, [r4, #8]
 80175ec:	6123      	str	r3, [r4, #16]
 80175ee:	7561      	strb	r1, [r4, #21]
 80175f0:	7da0      	ldrb	r0, [r4, #22]
 80175f2:	f080 0001 	eor.w	r0, r0, #1
 80175f6:	bd38      	pop	{r3, r4, r5, pc}

080175f8 <ucdr_serialize_uint16_t>:
 80175f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175fc:	b082      	sub	sp, #8
 80175fe:	460b      	mov	r3, r1
 8017600:	2102      	movs	r1, #2
 8017602:	4604      	mov	r4, r0
 8017604:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017608:	f7f9 f836 	bl	8010678 <ucdr_buffer_alignment>
 801760c:	4601      	mov	r1, r0
 801760e:	4620      	mov	r0, r4
 8017610:	7d67      	ldrb	r7, [r4, #21]
 8017612:	f7f9 f875 	bl	8010700 <ucdr_advance_buffer>
 8017616:	4620      	mov	r0, r4
 8017618:	2102      	movs	r1, #2
 801761a:	f7f8 ffcf 	bl	80105bc <ucdr_check_buffer_available_for>
 801761e:	bb78      	cbnz	r0, 8017680 <ucdr_serialize_uint16_t+0x88>
 8017620:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8017624:	42b5      	cmp	r5, r6
 8017626:	d926      	bls.n	8017676 <ucdr_serialize_uint16_t+0x7e>
 8017628:	6922      	ldr	r2, [r4, #16]
 801762a:	60a5      	str	r5, [r4, #8]
 801762c:	1bad      	subs	r5, r5, r6
 801762e:	442a      	add	r2, r5
 8017630:	f1c5 0802 	rsb	r8, r5, #2
 8017634:	6122      	str	r2, [r4, #16]
 8017636:	4641      	mov	r1, r8
 8017638:	4620      	mov	r0, r4
 801763a:	f7f8 ffcb 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 801763e:	2800      	cmp	r0, #0
 8017640:	d03b      	beq.n	80176ba <ucdr_serialize_uint16_t+0xc2>
 8017642:	7d23      	ldrb	r3, [r4, #20]
 8017644:	2b01      	cmp	r3, #1
 8017646:	d04a      	beq.n	80176de <ucdr_serialize_uint16_t+0xe6>
 8017648:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801764c:	7033      	strb	r3, [r6, #0]
 801764e:	2d00      	cmp	r5, #0
 8017650:	d040      	beq.n	80176d4 <ucdr_serialize_uint16_t+0xdc>
 8017652:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017656:	7073      	strb	r3, [r6, #1]
 8017658:	6923      	ldr	r3, [r4, #16]
 801765a:	68a2      	ldr	r2, [r4, #8]
 801765c:	7da0      	ldrb	r0, [r4, #22]
 801765e:	3302      	adds	r3, #2
 8017660:	1b5b      	subs	r3, r3, r5
 8017662:	4442      	add	r2, r8
 8017664:	2102      	movs	r1, #2
 8017666:	f080 0001 	eor.w	r0, r0, #1
 801766a:	6123      	str	r3, [r4, #16]
 801766c:	60a2      	str	r2, [r4, #8]
 801766e:	7561      	strb	r1, [r4, #21]
 8017670:	b002      	add	sp, #8
 8017672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017676:	2102      	movs	r1, #2
 8017678:	4620      	mov	r0, r4
 801767a:	f7f8 ffab 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 801767e:	b190      	cbz	r0, 80176a6 <ucdr_serialize_uint16_t+0xae>
 8017680:	7d23      	ldrb	r3, [r4, #20]
 8017682:	2b01      	cmp	r3, #1
 8017684:	68a3      	ldr	r3, [r4, #8]
 8017686:	d014      	beq.n	80176b2 <ucdr_serialize_uint16_t+0xba>
 8017688:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801768c:	701a      	strb	r2, [r3, #0]
 801768e:	68a3      	ldr	r3, [r4, #8]
 8017690:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017694:	705a      	strb	r2, [r3, #1]
 8017696:	68a2      	ldr	r2, [r4, #8]
 8017698:	6923      	ldr	r3, [r4, #16]
 801769a:	3202      	adds	r2, #2
 801769c:	3302      	adds	r3, #2
 801769e:	2102      	movs	r1, #2
 80176a0:	60a2      	str	r2, [r4, #8]
 80176a2:	6123      	str	r3, [r4, #16]
 80176a4:	7561      	strb	r1, [r4, #21]
 80176a6:	7da0      	ldrb	r0, [r4, #22]
 80176a8:	f080 0001 	eor.w	r0, r0, #1
 80176ac:	b002      	add	sp, #8
 80176ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176b2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80176b6:	801a      	strh	r2, [r3, #0]
 80176b8:	e7ed      	b.n	8017696 <ucdr_serialize_uint16_t+0x9e>
 80176ba:	68a2      	ldr	r2, [r4, #8]
 80176bc:	6923      	ldr	r3, [r4, #16]
 80176be:	7da0      	ldrb	r0, [r4, #22]
 80176c0:	7567      	strb	r7, [r4, #21]
 80176c2:	1b52      	subs	r2, r2, r5
 80176c4:	1b5b      	subs	r3, r3, r5
 80176c6:	f080 0001 	eor.w	r0, r0, #1
 80176ca:	60a2      	str	r2, [r4, #8]
 80176cc:	6123      	str	r3, [r4, #16]
 80176ce:	b002      	add	sp, #8
 80176d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176d4:	68a3      	ldr	r3, [r4, #8]
 80176d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80176da:	701a      	strb	r2, [r3, #0]
 80176dc:	e7bc      	b.n	8017658 <ucdr_serialize_uint16_t+0x60>
 80176de:	4630      	mov	r0, r6
 80176e0:	f10d 0606 	add.w	r6, sp, #6
 80176e4:	4631      	mov	r1, r6
 80176e6:	462a      	mov	r2, r5
 80176e8:	f003 f98f 	bl	801aa0a <memcpy>
 80176ec:	68a0      	ldr	r0, [r4, #8]
 80176ee:	4642      	mov	r2, r8
 80176f0:	1971      	adds	r1, r6, r5
 80176f2:	f003 f98a 	bl	801aa0a <memcpy>
 80176f6:	e7af      	b.n	8017658 <ucdr_serialize_uint16_t+0x60>

080176f8 <ucdr_serialize_endian_uint16_t>:
 80176f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80176fc:	b083      	sub	sp, #12
 80176fe:	460d      	mov	r5, r1
 8017700:	2102      	movs	r1, #2
 8017702:	4604      	mov	r4, r0
 8017704:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017708:	f7f8 ffb6 	bl	8010678 <ucdr_buffer_alignment>
 801770c:	4601      	mov	r1, r0
 801770e:	4620      	mov	r0, r4
 8017710:	f894 8015 	ldrb.w	r8, [r4, #21]
 8017714:	f7f8 fff4 	bl	8010700 <ucdr_advance_buffer>
 8017718:	4620      	mov	r0, r4
 801771a:	2102      	movs	r1, #2
 801771c:	f7f8 ff4e 	bl	80105bc <ucdr_check_buffer_available_for>
 8017720:	bb70      	cbnz	r0, 8017780 <ucdr_serialize_endian_uint16_t+0x88>
 8017722:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8017726:	42be      	cmp	r6, r7
 8017728:	d925      	bls.n	8017776 <ucdr_serialize_endian_uint16_t+0x7e>
 801772a:	6922      	ldr	r2, [r4, #16]
 801772c:	60a6      	str	r6, [r4, #8]
 801772e:	1bf6      	subs	r6, r6, r7
 8017730:	4432      	add	r2, r6
 8017732:	f1c6 0902 	rsb	r9, r6, #2
 8017736:	6122      	str	r2, [r4, #16]
 8017738:	4649      	mov	r1, r9
 801773a:	4620      	mov	r0, r4
 801773c:	f7f8 ff4a 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8017740:	2800      	cmp	r0, #0
 8017742:	d039      	beq.n	80177b8 <ucdr_serialize_endian_uint16_t+0xc0>
 8017744:	2d01      	cmp	r5, #1
 8017746:	d04a      	beq.n	80177de <ucdr_serialize_endian_uint16_t+0xe6>
 8017748:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801774c:	703b      	strb	r3, [r7, #0]
 801774e:	2e00      	cmp	r6, #0
 8017750:	d040      	beq.n	80177d4 <ucdr_serialize_endian_uint16_t+0xdc>
 8017752:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017756:	707b      	strb	r3, [r7, #1]
 8017758:	6923      	ldr	r3, [r4, #16]
 801775a:	68a2      	ldr	r2, [r4, #8]
 801775c:	7da0      	ldrb	r0, [r4, #22]
 801775e:	3302      	adds	r3, #2
 8017760:	1b9b      	subs	r3, r3, r6
 8017762:	444a      	add	r2, r9
 8017764:	2102      	movs	r1, #2
 8017766:	f080 0001 	eor.w	r0, r0, #1
 801776a:	6123      	str	r3, [r4, #16]
 801776c:	60a2      	str	r2, [r4, #8]
 801776e:	7561      	strb	r1, [r4, #21]
 8017770:	b003      	add	sp, #12
 8017772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017776:	2102      	movs	r1, #2
 8017778:	4620      	mov	r0, r4
 801777a:	f7f8 ff2b 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 801777e:	b188      	cbz	r0, 80177a4 <ucdr_serialize_endian_uint16_t+0xac>
 8017780:	2d01      	cmp	r5, #1
 8017782:	68a3      	ldr	r3, [r4, #8]
 8017784:	d014      	beq.n	80177b0 <ucdr_serialize_endian_uint16_t+0xb8>
 8017786:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801778a:	701a      	strb	r2, [r3, #0]
 801778c:	68a3      	ldr	r3, [r4, #8]
 801778e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017792:	705a      	strb	r2, [r3, #1]
 8017794:	68a2      	ldr	r2, [r4, #8]
 8017796:	6923      	ldr	r3, [r4, #16]
 8017798:	3202      	adds	r2, #2
 801779a:	3302      	adds	r3, #2
 801779c:	2102      	movs	r1, #2
 801779e:	60a2      	str	r2, [r4, #8]
 80177a0:	6123      	str	r3, [r4, #16]
 80177a2:	7561      	strb	r1, [r4, #21]
 80177a4:	7da0      	ldrb	r0, [r4, #22]
 80177a6:	f080 0001 	eor.w	r0, r0, #1
 80177aa:	b003      	add	sp, #12
 80177ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177b0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80177b4:	801a      	strh	r2, [r3, #0]
 80177b6:	e7ed      	b.n	8017794 <ucdr_serialize_endian_uint16_t+0x9c>
 80177b8:	68a2      	ldr	r2, [r4, #8]
 80177ba:	6923      	ldr	r3, [r4, #16]
 80177bc:	7da0      	ldrb	r0, [r4, #22]
 80177be:	f884 8015 	strb.w	r8, [r4, #21]
 80177c2:	1b92      	subs	r2, r2, r6
 80177c4:	1b9b      	subs	r3, r3, r6
 80177c6:	f080 0001 	eor.w	r0, r0, #1
 80177ca:	60a2      	str	r2, [r4, #8]
 80177cc:	6123      	str	r3, [r4, #16]
 80177ce:	b003      	add	sp, #12
 80177d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177d4:	68a3      	ldr	r3, [r4, #8]
 80177d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80177da:	701a      	strb	r2, [r3, #0]
 80177dc:	e7bc      	b.n	8017758 <ucdr_serialize_endian_uint16_t+0x60>
 80177de:	f10d 0506 	add.w	r5, sp, #6
 80177e2:	4629      	mov	r1, r5
 80177e4:	4632      	mov	r2, r6
 80177e6:	4638      	mov	r0, r7
 80177e8:	f003 f90f 	bl	801aa0a <memcpy>
 80177ec:	68a0      	ldr	r0, [r4, #8]
 80177ee:	464a      	mov	r2, r9
 80177f0:	19a9      	adds	r1, r5, r6
 80177f2:	f003 f90a 	bl	801aa0a <memcpy>
 80177f6:	e7af      	b.n	8017758 <ucdr_serialize_endian_uint16_t+0x60>

080177f8 <ucdr_deserialize_uint16_t>:
 80177f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80177fc:	460d      	mov	r5, r1
 80177fe:	2102      	movs	r1, #2
 8017800:	4604      	mov	r4, r0
 8017802:	f7f8 ff39 	bl	8010678 <ucdr_buffer_alignment>
 8017806:	4601      	mov	r1, r0
 8017808:	4620      	mov	r0, r4
 801780a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801780e:	f7f8 ff77 	bl	8010700 <ucdr_advance_buffer>
 8017812:	4620      	mov	r0, r4
 8017814:	2102      	movs	r1, #2
 8017816:	f7f8 fed1 	bl	80105bc <ucdr_check_buffer_available_for>
 801781a:	bb60      	cbnz	r0, 8017876 <ucdr_deserialize_uint16_t+0x7e>
 801781c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8017820:	42be      	cmp	r6, r7
 8017822:	d923      	bls.n	801786c <ucdr_deserialize_uint16_t+0x74>
 8017824:	6922      	ldr	r2, [r4, #16]
 8017826:	60a6      	str	r6, [r4, #8]
 8017828:	1bf6      	subs	r6, r6, r7
 801782a:	4432      	add	r2, r6
 801782c:	f1c6 0902 	rsb	r9, r6, #2
 8017830:	6122      	str	r2, [r4, #16]
 8017832:	4649      	mov	r1, r9
 8017834:	4620      	mov	r0, r4
 8017836:	f7f8 fecd 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 801783a:	2800      	cmp	r0, #0
 801783c:	d034      	beq.n	80178a8 <ucdr_deserialize_uint16_t+0xb0>
 801783e:	7d23      	ldrb	r3, [r4, #20]
 8017840:	2b01      	cmp	r3, #1
 8017842:	d042      	beq.n	80178ca <ucdr_deserialize_uint16_t+0xd2>
 8017844:	787b      	ldrb	r3, [r7, #1]
 8017846:	702b      	strb	r3, [r5, #0]
 8017848:	2e00      	cmp	r6, #0
 801784a:	d03a      	beq.n	80178c2 <ucdr_deserialize_uint16_t+0xca>
 801784c:	783b      	ldrb	r3, [r7, #0]
 801784e:	706b      	strb	r3, [r5, #1]
 8017850:	6923      	ldr	r3, [r4, #16]
 8017852:	68a2      	ldr	r2, [r4, #8]
 8017854:	7da0      	ldrb	r0, [r4, #22]
 8017856:	2102      	movs	r1, #2
 8017858:	3302      	adds	r3, #2
 801785a:	1b9b      	subs	r3, r3, r6
 801785c:	444a      	add	r2, r9
 801785e:	7561      	strb	r1, [r4, #21]
 8017860:	6123      	str	r3, [r4, #16]
 8017862:	60a2      	str	r2, [r4, #8]
 8017864:	f080 0001 	eor.w	r0, r0, #1
 8017868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801786c:	2102      	movs	r1, #2
 801786e:	4620      	mov	r0, r4
 8017870:	f7f8 feb0 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8017874:	b180      	cbz	r0, 8017898 <ucdr_deserialize_uint16_t+0xa0>
 8017876:	7d23      	ldrb	r3, [r4, #20]
 8017878:	2b01      	cmp	r3, #1
 801787a:	68a3      	ldr	r3, [r4, #8]
 801787c:	d011      	beq.n	80178a2 <ucdr_deserialize_uint16_t+0xaa>
 801787e:	785b      	ldrb	r3, [r3, #1]
 8017880:	702b      	strb	r3, [r5, #0]
 8017882:	68a3      	ldr	r3, [r4, #8]
 8017884:	781b      	ldrb	r3, [r3, #0]
 8017886:	706b      	strb	r3, [r5, #1]
 8017888:	68a2      	ldr	r2, [r4, #8]
 801788a:	6923      	ldr	r3, [r4, #16]
 801788c:	3202      	adds	r2, #2
 801788e:	3302      	adds	r3, #2
 8017890:	2102      	movs	r1, #2
 8017892:	60a2      	str	r2, [r4, #8]
 8017894:	6123      	str	r3, [r4, #16]
 8017896:	7561      	strb	r1, [r4, #21]
 8017898:	7da0      	ldrb	r0, [r4, #22]
 801789a:	f080 0001 	eor.w	r0, r0, #1
 801789e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178a2:	881b      	ldrh	r3, [r3, #0]
 80178a4:	802b      	strh	r3, [r5, #0]
 80178a6:	e7ef      	b.n	8017888 <ucdr_deserialize_uint16_t+0x90>
 80178a8:	68a2      	ldr	r2, [r4, #8]
 80178aa:	6923      	ldr	r3, [r4, #16]
 80178ac:	7da0      	ldrb	r0, [r4, #22]
 80178ae:	f884 8015 	strb.w	r8, [r4, #21]
 80178b2:	1b92      	subs	r2, r2, r6
 80178b4:	1b9b      	subs	r3, r3, r6
 80178b6:	60a2      	str	r2, [r4, #8]
 80178b8:	6123      	str	r3, [r4, #16]
 80178ba:	f080 0001 	eor.w	r0, r0, #1
 80178be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178c2:	68a3      	ldr	r3, [r4, #8]
 80178c4:	781b      	ldrb	r3, [r3, #0]
 80178c6:	706b      	strb	r3, [r5, #1]
 80178c8:	e7c2      	b.n	8017850 <ucdr_deserialize_uint16_t+0x58>
 80178ca:	4639      	mov	r1, r7
 80178cc:	4632      	mov	r2, r6
 80178ce:	4628      	mov	r0, r5
 80178d0:	f003 f89b 	bl	801aa0a <memcpy>
 80178d4:	68a1      	ldr	r1, [r4, #8]
 80178d6:	464a      	mov	r2, r9
 80178d8:	19a8      	adds	r0, r5, r6
 80178da:	f003 f896 	bl	801aa0a <memcpy>
 80178de:	e7b7      	b.n	8017850 <ucdr_deserialize_uint16_t+0x58>

080178e0 <ucdr_deserialize_endian_uint16_t>:
 80178e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178e4:	460e      	mov	r6, r1
 80178e6:	2102      	movs	r1, #2
 80178e8:	4604      	mov	r4, r0
 80178ea:	4615      	mov	r5, r2
 80178ec:	f7f8 fec4 	bl	8010678 <ucdr_buffer_alignment>
 80178f0:	4601      	mov	r1, r0
 80178f2:	4620      	mov	r0, r4
 80178f4:	f894 9015 	ldrb.w	r9, [r4, #21]
 80178f8:	f7f8 ff02 	bl	8010700 <ucdr_advance_buffer>
 80178fc:	4620      	mov	r0, r4
 80178fe:	2102      	movs	r1, #2
 8017900:	f7f8 fe5c 	bl	80105bc <ucdr_check_buffer_available_for>
 8017904:	bb70      	cbnz	r0, 8017964 <ucdr_deserialize_endian_uint16_t+0x84>
 8017906:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 801790a:	4547      	cmp	r7, r8
 801790c:	d925      	bls.n	801795a <ucdr_deserialize_endian_uint16_t+0x7a>
 801790e:	6922      	ldr	r2, [r4, #16]
 8017910:	60a7      	str	r7, [r4, #8]
 8017912:	eba7 0708 	sub.w	r7, r7, r8
 8017916:	443a      	add	r2, r7
 8017918:	f1c7 0a02 	rsb	sl, r7, #2
 801791c:	6122      	str	r2, [r4, #16]
 801791e:	4651      	mov	r1, sl
 8017920:	4620      	mov	r0, r4
 8017922:	f7f8 fe57 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8017926:	2800      	cmp	r0, #0
 8017928:	d034      	beq.n	8017994 <ucdr_deserialize_endian_uint16_t+0xb4>
 801792a:	2e01      	cmp	r6, #1
 801792c:	d043      	beq.n	80179b6 <ucdr_deserialize_endian_uint16_t+0xd6>
 801792e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017932:	702b      	strb	r3, [r5, #0]
 8017934:	2f00      	cmp	r7, #0
 8017936:	d03a      	beq.n	80179ae <ucdr_deserialize_endian_uint16_t+0xce>
 8017938:	f898 3000 	ldrb.w	r3, [r8]
 801793c:	706b      	strb	r3, [r5, #1]
 801793e:	6923      	ldr	r3, [r4, #16]
 8017940:	68a2      	ldr	r2, [r4, #8]
 8017942:	7da0      	ldrb	r0, [r4, #22]
 8017944:	2102      	movs	r1, #2
 8017946:	3302      	adds	r3, #2
 8017948:	1bdb      	subs	r3, r3, r7
 801794a:	4452      	add	r2, sl
 801794c:	7561      	strb	r1, [r4, #21]
 801794e:	6123      	str	r3, [r4, #16]
 8017950:	60a2      	str	r2, [r4, #8]
 8017952:	f080 0001 	eor.w	r0, r0, #1
 8017956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801795a:	2102      	movs	r1, #2
 801795c:	4620      	mov	r0, r4
 801795e:	f7f8 fe39 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8017962:	b178      	cbz	r0, 8017984 <ucdr_deserialize_endian_uint16_t+0xa4>
 8017964:	2e01      	cmp	r6, #1
 8017966:	68a3      	ldr	r3, [r4, #8]
 8017968:	d011      	beq.n	801798e <ucdr_deserialize_endian_uint16_t+0xae>
 801796a:	785b      	ldrb	r3, [r3, #1]
 801796c:	702b      	strb	r3, [r5, #0]
 801796e:	68a3      	ldr	r3, [r4, #8]
 8017970:	781b      	ldrb	r3, [r3, #0]
 8017972:	706b      	strb	r3, [r5, #1]
 8017974:	68a2      	ldr	r2, [r4, #8]
 8017976:	6923      	ldr	r3, [r4, #16]
 8017978:	3202      	adds	r2, #2
 801797a:	3302      	adds	r3, #2
 801797c:	2102      	movs	r1, #2
 801797e:	60a2      	str	r2, [r4, #8]
 8017980:	6123      	str	r3, [r4, #16]
 8017982:	7561      	strb	r1, [r4, #21]
 8017984:	7da0      	ldrb	r0, [r4, #22]
 8017986:	f080 0001 	eor.w	r0, r0, #1
 801798a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801798e:	881b      	ldrh	r3, [r3, #0]
 8017990:	802b      	strh	r3, [r5, #0]
 8017992:	e7ef      	b.n	8017974 <ucdr_deserialize_endian_uint16_t+0x94>
 8017994:	68a2      	ldr	r2, [r4, #8]
 8017996:	6923      	ldr	r3, [r4, #16]
 8017998:	7da0      	ldrb	r0, [r4, #22]
 801799a:	f884 9015 	strb.w	r9, [r4, #21]
 801799e:	1bd2      	subs	r2, r2, r7
 80179a0:	1bdb      	subs	r3, r3, r7
 80179a2:	60a2      	str	r2, [r4, #8]
 80179a4:	6123      	str	r3, [r4, #16]
 80179a6:	f080 0001 	eor.w	r0, r0, #1
 80179aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179ae:	68a3      	ldr	r3, [r4, #8]
 80179b0:	781b      	ldrb	r3, [r3, #0]
 80179b2:	706b      	strb	r3, [r5, #1]
 80179b4:	e7c3      	b.n	801793e <ucdr_deserialize_endian_uint16_t+0x5e>
 80179b6:	4641      	mov	r1, r8
 80179b8:	463a      	mov	r2, r7
 80179ba:	4628      	mov	r0, r5
 80179bc:	f003 f825 	bl	801aa0a <memcpy>
 80179c0:	68a1      	ldr	r1, [r4, #8]
 80179c2:	4652      	mov	r2, sl
 80179c4:	19e8      	adds	r0, r5, r7
 80179c6:	f003 f820 	bl	801aa0a <memcpy>
 80179ca:	e7b8      	b.n	801793e <ucdr_deserialize_endian_uint16_t+0x5e>

080179cc <ucdr_serialize_uint32_t>:
 80179cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179d0:	b082      	sub	sp, #8
 80179d2:	4604      	mov	r4, r0
 80179d4:	9101      	str	r1, [sp, #4]
 80179d6:	2104      	movs	r1, #4
 80179d8:	f7f8 fe4e 	bl	8010678 <ucdr_buffer_alignment>
 80179dc:	4601      	mov	r1, r0
 80179de:	4620      	mov	r0, r4
 80179e0:	7d67      	ldrb	r7, [r4, #21]
 80179e2:	f7f8 fe8d 	bl	8010700 <ucdr_advance_buffer>
 80179e6:	4620      	mov	r0, r4
 80179e8:	2104      	movs	r1, #4
 80179ea:	f7f8 fde7 	bl	80105bc <ucdr_check_buffer_available_for>
 80179ee:	2800      	cmp	r0, #0
 80179f0:	d139      	bne.n	8017a66 <ucdr_serialize_uint32_t+0x9a>
 80179f2:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 80179f6:	42ae      	cmp	r6, r5
 80179f8:	d930      	bls.n	8017a5c <ucdr_serialize_uint32_t+0x90>
 80179fa:	6922      	ldr	r2, [r4, #16]
 80179fc:	60a6      	str	r6, [r4, #8]
 80179fe:	1b76      	subs	r6, r6, r5
 8017a00:	4432      	add	r2, r6
 8017a02:	f1c6 0804 	rsb	r8, r6, #4
 8017a06:	6122      	str	r2, [r4, #16]
 8017a08:	4641      	mov	r1, r8
 8017a0a:	4620      	mov	r0, r4
 8017a0c:	f7f8 fde2 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8017a10:	2800      	cmp	r0, #0
 8017a12:	d04c      	beq.n	8017aae <ucdr_serialize_uint32_t+0xe2>
 8017a14:	7d23      	ldrb	r3, [r4, #20]
 8017a16:	2b01      	cmp	r3, #1
 8017a18:	d063      	beq.n	8017ae2 <ucdr_serialize_uint32_t+0x116>
 8017a1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017a1e:	702b      	strb	r3, [r5, #0]
 8017a20:	2e00      	cmp	r6, #0
 8017a22:	d051      	beq.n	8017ac8 <ucdr_serialize_uint32_t+0xfc>
 8017a24:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017a28:	706b      	strb	r3, [r5, #1]
 8017a2a:	2e01      	cmp	r6, #1
 8017a2c:	d050      	beq.n	8017ad0 <ucdr_serialize_uint32_t+0x104>
 8017a2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8017a32:	70ab      	strb	r3, [r5, #2]
 8017a34:	2e02      	cmp	r6, #2
 8017a36:	d04f      	beq.n	8017ad8 <ucdr_serialize_uint32_t+0x10c>
 8017a38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8017a3c:	70eb      	strb	r3, [r5, #3]
 8017a3e:	6923      	ldr	r3, [r4, #16]
 8017a40:	68a2      	ldr	r2, [r4, #8]
 8017a42:	7da0      	ldrb	r0, [r4, #22]
 8017a44:	3304      	adds	r3, #4
 8017a46:	1b9b      	subs	r3, r3, r6
 8017a48:	4442      	add	r2, r8
 8017a4a:	2104      	movs	r1, #4
 8017a4c:	f080 0001 	eor.w	r0, r0, #1
 8017a50:	6123      	str	r3, [r4, #16]
 8017a52:	60a2      	str	r2, [r4, #8]
 8017a54:	7561      	strb	r1, [r4, #21]
 8017a56:	b002      	add	sp, #8
 8017a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a5c:	2104      	movs	r1, #4
 8017a5e:	4620      	mov	r0, r4
 8017a60:	f7f8 fdb8 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8017a64:	b1d0      	cbz	r0, 8017a9c <ucdr_serialize_uint32_t+0xd0>
 8017a66:	7d23      	ldrb	r3, [r4, #20]
 8017a68:	2b01      	cmp	r3, #1
 8017a6a:	68a3      	ldr	r3, [r4, #8]
 8017a6c:	d01c      	beq.n	8017aa8 <ucdr_serialize_uint32_t+0xdc>
 8017a6e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017a72:	701a      	strb	r2, [r3, #0]
 8017a74:	68a3      	ldr	r3, [r4, #8]
 8017a76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017a7a:	705a      	strb	r2, [r3, #1]
 8017a7c:	68a3      	ldr	r3, [r4, #8]
 8017a7e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017a82:	709a      	strb	r2, [r3, #2]
 8017a84:	68a3      	ldr	r3, [r4, #8]
 8017a86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017a8a:	70da      	strb	r2, [r3, #3]
 8017a8c:	68a2      	ldr	r2, [r4, #8]
 8017a8e:	6923      	ldr	r3, [r4, #16]
 8017a90:	3204      	adds	r2, #4
 8017a92:	3304      	adds	r3, #4
 8017a94:	2104      	movs	r1, #4
 8017a96:	60a2      	str	r2, [r4, #8]
 8017a98:	6123      	str	r3, [r4, #16]
 8017a9a:	7561      	strb	r1, [r4, #21]
 8017a9c:	7da0      	ldrb	r0, [r4, #22]
 8017a9e:	f080 0001 	eor.w	r0, r0, #1
 8017aa2:	b002      	add	sp, #8
 8017aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017aa8:	9a01      	ldr	r2, [sp, #4]
 8017aaa:	601a      	str	r2, [r3, #0]
 8017aac:	e7ee      	b.n	8017a8c <ucdr_serialize_uint32_t+0xc0>
 8017aae:	68a2      	ldr	r2, [r4, #8]
 8017ab0:	6923      	ldr	r3, [r4, #16]
 8017ab2:	7da0      	ldrb	r0, [r4, #22]
 8017ab4:	7567      	strb	r7, [r4, #21]
 8017ab6:	1b92      	subs	r2, r2, r6
 8017ab8:	1b9b      	subs	r3, r3, r6
 8017aba:	f080 0001 	eor.w	r0, r0, #1
 8017abe:	60a2      	str	r2, [r4, #8]
 8017ac0:	6123      	str	r3, [r4, #16]
 8017ac2:	b002      	add	sp, #8
 8017ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ac8:	68a3      	ldr	r3, [r4, #8]
 8017aca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017ace:	701a      	strb	r2, [r3, #0]
 8017ad0:	68a3      	ldr	r3, [r4, #8]
 8017ad2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017ad6:	701a      	strb	r2, [r3, #0]
 8017ad8:	68a3      	ldr	r3, [r4, #8]
 8017ada:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017ade:	701a      	strb	r2, [r3, #0]
 8017ae0:	e7ad      	b.n	8017a3e <ucdr_serialize_uint32_t+0x72>
 8017ae2:	4628      	mov	r0, r5
 8017ae4:	ad01      	add	r5, sp, #4
 8017ae6:	4629      	mov	r1, r5
 8017ae8:	4632      	mov	r2, r6
 8017aea:	f002 ff8e 	bl	801aa0a <memcpy>
 8017aee:	68a0      	ldr	r0, [r4, #8]
 8017af0:	4642      	mov	r2, r8
 8017af2:	19a9      	adds	r1, r5, r6
 8017af4:	f002 ff89 	bl	801aa0a <memcpy>
 8017af8:	e7a1      	b.n	8017a3e <ucdr_serialize_uint32_t+0x72>
 8017afa:	bf00      	nop

08017afc <ucdr_serialize_endian_uint32_t>:
 8017afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b00:	b083      	sub	sp, #12
 8017b02:	460d      	mov	r5, r1
 8017b04:	2104      	movs	r1, #4
 8017b06:	4604      	mov	r4, r0
 8017b08:	9201      	str	r2, [sp, #4]
 8017b0a:	f7f8 fdb5 	bl	8010678 <ucdr_buffer_alignment>
 8017b0e:	4601      	mov	r1, r0
 8017b10:	4620      	mov	r0, r4
 8017b12:	f894 8015 	ldrb.w	r8, [r4, #21]
 8017b16:	f7f8 fdf3 	bl	8010700 <ucdr_advance_buffer>
 8017b1a:	4620      	mov	r0, r4
 8017b1c:	2104      	movs	r1, #4
 8017b1e:	f7f8 fd4d 	bl	80105bc <ucdr_check_buffer_available_for>
 8017b22:	2800      	cmp	r0, #0
 8017b24:	d138      	bne.n	8017b98 <ucdr_serialize_endian_uint32_t+0x9c>
 8017b26:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8017b2a:	42b7      	cmp	r7, r6
 8017b2c:	d92f      	bls.n	8017b8e <ucdr_serialize_endian_uint32_t+0x92>
 8017b2e:	6922      	ldr	r2, [r4, #16]
 8017b30:	60a7      	str	r7, [r4, #8]
 8017b32:	1bbf      	subs	r7, r7, r6
 8017b34:	443a      	add	r2, r7
 8017b36:	f1c7 0904 	rsb	r9, r7, #4
 8017b3a:	6122      	str	r2, [r4, #16]
 8017b3c:	4649      	mov	r1, r9
 8017b3e:	4620      	mov	r0, r4
 8017b40:	f7f8 fd48 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8017b44:	2800      	cmp	r0, #0
 8017b46:	d04a      	beq.n	8017bde <ucdr_serialize_endian_uint32_t+0xe2>
 8017b48:	2d01      	cmp	r5, #1
 8017b4a:	d063      	beq.n	8017c14 <ucdr_serialize_endian_uint32_t+0x118>
 8017b4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017b50:	7033      	strb	r3, [r6, #0]
 8017b52:	2f00      	cmp	r7, #0
 8017b54:	d051      	beq.n	8017bfa <ucdr_serialize_endian_uint32_t+0xfe>
 8017b56:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017b5a:	7073      	strb	r3, [r6, #1]
 8017b5c:	2f01      	cmp	r7, #1
 8017b5e:	d050      	beq.n	8017c02 <ucdr_serialize_endian_uint32_t+0x106>
 8017b60:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8017b64:	70b3      	strb	r3, [r6, #2]
 8017b66:	2f02      	cmp	r7, #2
 8017b68:	d04f      	beq.n	8017c0a <ucdr_serialize_endian_uint32_t+0x10e>
 8017b6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8017b6e:	70f3      	strb	r3, [r6, #3]
 8017b70:	6923      	ldr	r3, [r4, #16]
 8017b72:	68a2      	ldr	r2, [r4, #8]
 8017b74:	7da0      	ldrb	r0, [r4, #22]
 8017b76:	3304      	adds	r3, #4
 8017b78:	1bdb      	subs	r3, r3, r7
 8017b7a:	444a      	add	r2, r9
 8017b7c:	2104      	movs	r1, #4
 8017b7e:	f080 0001 	eor.w	r0, r0, #1
 8017b82:	6123      	str	r3, [r4, #16]
 8017b84:	60a2      	str	r2, [r4, #8]
 8017b86:	7561      	strb	r1, [r4, #21]
 8017b88:	b003      	add	sp, #12
 8017b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b8e:	2104      	movs	r1, #4
 8017b90:	4620      	mov	r0, r4
 8017b92:	f7f8 fd1f 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8017b96:	b1c8      	cbz	r0, 8017bcc <ucdr_serialize_endian_uint32_t+0xd0>
 8017b98:	2d01      	cmp	r5, #1
 8017b9a:	68a3      	ldr	r3, [r4, #8]
 8017b9c:	d01c      	beq.n	8017bd8 <ucdr_serialize_endian_uint32_t+0xdc>
 8017b9e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017ba2:	701a      	strb	r2, [r3, #0]
 8017ba4:	68a3      	ldr	r3, [r4, #8]
 8017ba6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017baa:	705a      	strb	r2, [r3, #1]
 8017bac:	68a3      	ldr	r3, [r4, #8]
 8017bae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017bb2:	709a      	strb	r2, [r3, #2]
 8017bb4:	68a3      	ldr	r3, [r4, #8]
 8017bb6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017bba:	70da      	strb	r2, [r3, #3]
 8017bbc:	68a2      	ldr	r2, [r4, #8]
 8017bbe:	6923      	ldr	r3, [r4, #16]
 8017bc0:	3204      	adds	r2, #4
 8017bc2:	3304      	adds	r3, #4
 8017bc4:	2104      	movs	r1, #4
 8017bc6:	60a2      	str	r2, [r4, #8]
 8017bc8:	6123      	str	r3, [r4, #16]
 8017bca:	7561      	strb	r1, [r4, #21]
 8017bcc:	7da0      	ldrb	r0, [r4, #22]
 8017bce:	f080 0001 	eor.w	r0, r0, #1
 8017bd2:	b003      	add	sp, #12
 8017bd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017bd8:	9a01      	ldr	r2, [sp, #4]
 8017bda:	601a      	str	r2, [r3, #0]
 8017bdc:	e7ee      	b.n	8017bbc <ucdr_serialize_endian_uint32_t+0xc0>
 8017bde:	68a2      	ldr	r2, [r4, #8]
 8017be0:	6923      	ldr	r3, [r4, #16]
 8017be2:	7da0      	ldrb	r0, [r4, #22]
 8017be4:	f884 8015 	strb.w	r8, [r4, #21]
 8017be8:	1bd2      	subs	r2, r2, r7
 8017bea:	1bdb      	subs	r3, r3, r7
 8017bec:	f080 0001 	eor.w	r0, r0, #1
 8017bf0:	60a2      	str	r2, [r4, #8]
 8017bf2:	6123      	str	r3, [r4, #16]
 8017bf4:	b003      	add	sp, #12
 8017bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017bfa:	68a3      	ldr	r3, [r4, #8]
 8017bfc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017c00:	701a      	strb	r2, [r3, #0]
 8017c02:	68a3      	ldr	r3, [r4, #8]
 8017c04:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017c08:	701a      	strb	r2, [r3, #0]
 8017c0a:	68a3      	ldr	r3, [r4, #8]
 8017c0c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017c10:	701a      	strb	r2, [r3, #0]
 8017c12:	e7ad      	b.n	8017b70 <ucdr_serialize_endian_uint32_t+0x74>
 8017c14:	ad01      	add	r5, sp, #4
 8017c16:	4629      	mov	r1, r5
 8017c18:	463a      	mov	r2, r7
 8017c1a:	4630      	mov	r0, r6
 8017c1c:	f002 fef5 	bl	801aa0a <memcpy>
 8017c20:	68a0      	ldr	r0, [r4, #8]
 8017c22:	464a      	mov	r2, r9
 8017c24:	19e9      	adds	r1, r5, r7
 8017c26:	f002 fef0 	bl	801aa0a <memcpy>
 8017c2a:	e7a1      	b.n	8017b70 <ucdr_serialize_endian_uint32_t+0x74>

08017c2c <ucdr_deserialize_uint32_t>:
 8017c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c30:	460d      	mov	r5, r1
 8017c32:	2104      	movs	r1, #4
 8017c34:	4604      	mov	r4, r0
 8017c36:	f7f8 fd1f 	bl	8010678 <ucdr_buffer_alignment>
 8017c3a:	4601      	mov	r1, r0
 8017c3c:	4620      	mov	r0, r4
 8017c3e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8017c42:	f7f8 fd5d 	bl	8010700 <ucdr_advance_buffer>
 8017c46:	4620      	mov	r0, r4
 8017c48:	2104      	movs	r1, #4
 8017c4a:	f7f8 fcb7 	bl	80105bc <ucdr_check_buffer_available_for>
 8017c4e:	2800      	cmp	r0, #0
 8017c50:	d138      	bne.n	8017cc4 <ucdr_deserialize_uint32_t+0x98>
 8017c52:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8017c56:	42b7      	cmp	r7, r6
 8017c58:	d92f      	bls.n	8017cba <ucdr_deserialize_uint32_t+0x8e>
 8017c5a:	6922      	ldr	r2, [r4, #16]
 8017c5c:	60a7      	str	r7, [r4, #8]
 8017c5e:	1bbf      	subs	r7, r7, r6
 8017c60:	443a      	add	r2, r7
 8017c62:	f1c7 0904 	rsb	r9, r7, #4
 8017c66:	6122      	str	r2, [r4, #16]
 8017c68:	4649      	mov	r1, r9
 8017c6a:	4620      	mov	r0, r4
 8017c6c:	f7f8 fcb2 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8017c70:	2800      	cmp	r0, #0
 8017c72:	d046      	beq.n	8017d02 <ucdr_deserialize_uint32_t+0xd6>
 8017c74:	7d23      	ldrb	r3, [r4, #20]
 8017c76:	2b01      	cmp	r3, #1
 8017c78:	d05c      	beq.n	8017d34 <ucdr_deserialize_uint32_t+0x108>
 8017c7a:	78f3      	ldrb	r3, [r6, #3]
 8017c7c:	702b      	strb	r3, [r5, #0]
 8017c7e:	2f00      	cmp	r7, #0
 8017c80:	d04c      	beq.n	8017d1c <ucdr_deserialize_uint32_t+0xf0>
 8017c82:	78b3      	ldrb	r3, [r6, #2]
 8017c84:	706b      	strb	r3, [r5, #1]
 8017c86:	2f01      	cmp	r7, #1
 8017c88:	f105 0302 	add.w	r3, r5, #2
 8017c8c:	d04a      	beq.n	8017d24 <ucdr_deserialize_uint32_t+0xf8>
 8017c8e:	7873      	ldrb	r3, [r6, #1]
 8017c90:	70ab      	strb	r3, [r5, #2]
 8017c92:	2f02      	cmp	r7, #2
 8017c94:	f105 0303 	add.w	r3, r5, #3
 8017c98:	d048      	beq.n	8017d2c <ucdr_deserialize_uint32_t+0x100>
 8017c9a:	7833      	ldrb	r3, [r6, #0]
 8017c9c:	70eb      	strb	r3, [r5, #3]
 8017c9e:	6923      	ldr	r3, [r4, #16]
 8017ca0:	68a2      	ldr	r2, [r4, #8]
 8017ca2:	7da0      	ldrb	r0, [r4, #22]
 8017ca4:	2104      	movs	r1, #4
 8017ca6:	3304      	adds	r3, #4
 8017ca8:	1bdb      	subs	r3, r3, r7
 8017caa:	444a      	add	r2, r9
 8017cac:	7561      	strb	r1, [r4, #21]
 8017cae:	6123      	str	r3, [r4, #16]
 8017cb0:	60a2      	str	r2, [r4, #8]
 8017cb2:	f080 0001 	eor.w	r0, r0, #1
 8017cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cba:	2104      	movs	r1, #4
 8017cbc:	4620      	mov	r0, r4
 8017cbe:	f7f8 fc89 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8017cc2:	b1b0      	cbz	r0, 8017cf2 <ucdr_deserialize_uint32_t+0xc6>
 8017cc4:	7d23      	ldrb	r3, [r4, #20]
 8017cc6:	2b01      	cmp	r3, #1
 8017cc8:	68a3      	ldr	r3, [r4, #8]
 8017cca:	d017      	beq.n	8017cfc <ucdr_deserialize_uint32_t+0xd0>
 8017ccc:	78db      	ldrb	r3, [r3, #3]
 8017cce:	702b      	strb	r3, [r5, #0]
 8017cd0:	68a3      	ldr	r3, [r4, #8]
 8017cd2:	789b      	ldrb	r3, [r3, #2]
 8017cd4:	706b      	strb	r3, [r5, #1]
 8017cd6:	68a3      	ldr	r3, [r4, #8]
 8017cd8:	785b      	ldrb	r3, [r3, #1]
 8017cda:	70ab      	strb	r3, [r5, #2]
 8017cdc:	68a3      	ldr	r3, [r4, #8]
 8017cde:	781b      	ldrb	r3, [r3, #0]
 8017ce0:	70eb      	strb	r3, [r5, #3]
 8017ce2:	68a2      	ldr	r2, [r4, #8]
 8017ce4:	6923      	ldr	r3, [r4, #16]
 8017ce6:	3204      	adds	r2, #4
 8017ce8:	3304      	adds	r3, #4
 8017cea:	2104      	movs	r1, #4
 8017cec:	60a2      	str	r2, [r4, #8]
 8017cee:	6123      	str	r3, [r4, #16]
 8017cf0:	7561      	strb	r1, [r4, #21]
 8017cf2:	7da0      	ldrb	r0, [r4, #22]
 8017cf4:	f080 0001 	eor.w	r0, r0, #1
 8017cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	602b      	str	r3, [r5, #0]
 8017d00:	e7ef      	b.n	8017ce2 <ucdr_deserialize_uint32_t+0xb6>
 8017d02:	68a2      	ldr	r2, [r4, #8]
 8017d04:	6923      	ldr	r3, [r4, #16]
 8017d06:	7da0      	ldrb	r0, [r4, #22]
 8017d08:	f884 8015 	strb.w	r8, [r4, #21]
 8017d0c:	1bd2      	subs	r2, r2, r7
 8017d0e:	1bdb      	subs	r3, r3, r7
 8017d10:	60a2      	str	r2, [r4, #8]
 8017d12:	6123      	str	r3, [r4, #16]
 8017d14:	f080 0001 	eor.w	r0, r0, #1
 8017d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d1c:	68a3      	ldr	r3, [r4, #8]
 8017d1e:	789b      	ldrb	r3, [r3, #2]
 8017d20:	706b      	strb	r3, [r5, #1]
 8017d22:	1cab      	adds	r3, r5, #2
 8017d24:	68a2      	ldr	r2, [r4, #8]
 8017d26:	7852      	ldrb	r2, [r2, #1]
 8017d28:	f803 2b01 	strb.w	r2, [r3], #1
 8017d2c:	68a2      	ldr	r2, [r4, #8]
 8017d2e:	7812      	ldrb	r2, [r2, #0]
 8017d30:	701a      	strb	r2, [r3, #0]
 8017d32:	e7b4      	b.n	8017c9e <ucdr_deserialize_uint32_t+0x72>
 8017d34:	4631      	mov	r1, r6
 8017d36:	463a      	mov	r2, r7
 8017d38:	4628      	mov	r0, r5
 8017d3a:	f002 fe66 	bl	801aa0a <memcpy>
 8017d3e:	68a1      	ldr	r1, [r4, #8]
 8017d40:	464a      	mov	r2, r9
 8017d42:	19e8      	adds	r0, r5, r7
 8017d44:	f002 fe61 	bl	801aa0a <memcpy>
 8017d48:	e7a9      	b.n	8017c9e <ucdr_deserialize_uint32_t+0x72>
 8017d4a:	bf00      	nop

08017d4c <ucdr_deserialize_endian_uint32_t>:
 8017d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d50:	460e      	mov	r6, r1
 8017d52:	2104      	movs	r1, #4
 8017d54:	4604      	mov	r4, r0
 8017d56:	4615      	mov	r5, r2
 8017d58:	f7f8 fc8e 	bl	8010678 <ucdr_buffer_alignment>
 8017d5c:	4601      	mov	r1, r0
 8017d5e:	4620      	mov	r0, r4
 8017d60:	f894 9015 	ldrb.w	r9, [r4, #21]
 8017d64:	f7f8 fccc 	bl	8010700 <ucdr_advance_buffer>
 8017d68:	4620      	mov	r0, r4
 8017d6a:	2104      	movs	r1, #4
 8017d6c:	f7f8 fc26 	bl	80105bc <ucdr_check_buffer_available_for>
 8017d70:	2800      	cmp	r0, #0
 8017d72:	d13c      	bne.n	8017dee <ucdr_deserialize_endian_uint32_t+0xa2>
 8017d74:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8017d78:	42bb      	cmp	r3, r7
 8017d7a:	d933      	bls.n	8017de4 <ucdr_deserialize_endian_uint32_t+0x98>
 8017d7c:	6922      	ldr	r2, [r4, #16]
 8017d7e:	60a3      	str	r3, [r4, #8]
 8017d80:	eba3 0807 	sub.w	r8, r3, r7
 8017d84:	4442      	add	r2, r8
 8017d86:	f1c8 0a04 	rsb	sl, r8, #4
 8017d8a:	6122      	str	r2, [r4, #16]
 8017d8c:	4651      	mov	r1, sl
 8017d8e:	4620      	mov	r0, r4
 8017d90:	f7f8 fc20 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8017d94:	2800      	cmp	r0, #0
 8017d96:	d048      	beq.n	8017e2a <ucdr_deserialize_endian_uint32_t+0xde>
 8017d98:	2e01      	cmp	r6, #1
 8017d9a:	d061      	beq.n	8017e60 <ucdr_deserialize_endian_uint32_t+0x114>
 8017d9c:	78fb      	ldrb	r3, [r7, #3]
 8017d9e:	702b      	strb	r3, [r5, #0]
 8017da0:	f1b8 0f00 	cmp.w	r8, #0
 8017da4:	d050      	beq.n	8017e48 <ucdr_deserialize_endian_uint32_t+0xfc>
 8017da6:	78bb      	ldrb	r3, [r7, #2]
 8017da8:	706b      	strb	r3, [r5, #1]
 8017daa:	f1b8 0f01 	cmp.w	r8, #1
 8017dae:	f105 0302 	add.w	r3, r5, #2
 8017db2:	d04d      	beq.n	8017e50 <ucdr_deserialize_endian_uint32_t+0x104>
 8017db4:	787b      	ldrb	r3, [r7, #1]
 8017db6:	70ab      	strb	r3, [r5, #2]
 8017db8:	f1b8 0f02 	cmp.w	r8, #2
 8017dbc:	f105 0303 	add.w	r3, r5, #3
 8017dc0:	d04a      	beq.n	8017e58 <ucdr_deserialize_endian_uint32_t+0x10c>
 8017dc2:	783b      	ldrb	r3, [r7, #0]
 8017dc4:	70eb      	strb	r3, [r5, #3]
 8017dc6:	6923      	ldr	r3, [r4, #16]
 8017dc8:	68a2      	ldr	r2, [r4, #8]
 8017dca:	7da0      	ldrb	r0, [r4, #22]
 8017dcc:	2104      	movs	r1, #4
 8017dce:	3304      	adds	r3, #4
 8017dd0:	eba3 0308 	sub.w	r3, r3, r8
 8017dd4:	4452      	add	r2, sl
 8017dd6:	7561      	strb	r1, [r4, #21]
 8017dd8:	6123      	str	r3, [r4, #16]
 8017dda:	60a2      	str	r2, [r4, #8]
 8017ddc:	f080 0001 	eor.w	r0, r0, #1
 8017de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017de4:	2104      	movs	r1, #4
 8017de6:	4620      	mov	r0, r4
 8017de8:	f7f8 fbf4 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8017dec:	b1a8      	cbz	r0, 8017e1a <ucdr_deserialize_endian_uint32_t+0xce>
 8017dee:	2e01      	cmp	r6, #1
 8017df0:	68a3      	ldr	r3, [r4, #8]
 8017df2:	d017      	beq.n	8017e24 <ucdr_deserialize_endian_uint32_t+0xd8>
 8017df4:	78db      	ldrb	r3, [r3, #3]
 8017df6:	702b      	strb	r3, [r5, #0]
 8017df8:	68a3      	ldr	r3, [r4, #8]
 8017dfa:	789b      	ldrb	r3, [r3, #2]
 8017dfc:	706b      	strb	r3, [r5, #1]
 8017dfe:	68a3      	ldr	r3, [r4, #8]
 8017e00:	785b      	ldrb	r3, [r3, #1]
 8017e02:	70ab      	strb	r3, [r5, #2]
 8017e04:	68a3      	ldr	r3, [r4, #8]
 8017e06:	781b      	ldrb	r3, [r3, #0]
 8017e08:	70eb      	strb	r3, [r5, #3]
 8017e0a:	68a2      	ldr	r2, [r4, #8]
 8017e0c:	6923      	ldr	r3, [r4, #16]
 8017e0e:	3204      	adds	r2, #4
 8017e10:	3304      	adds	r3, #4
 8017e12:	2104      	movs	r1, #4
 8017e14:	60a2      	str	r2, [r4, #8]
 8017e16:	6123      	str	r3, [r4, #16]
 8017e18:	7561      	strb	r1, [r4, #21]
 8017e1a:	7da0      	ldrb	r0, [r4, #22]
 8017e1c:	f080 0001 	eor.w	r0, r0, #1
 8017e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	602b      	str	r3, [r5, #0]
 8017e28:	e7ef      	b.n	8017e0a <ucdr_deserialize_endian_uint32_t+0xbe>
 8017e2a:	68a2      	ldr	r2, [r4, #8]
 8017e2c:	6923      	ldr	r3, [r4, #16]
 8017e2e:	7da0      	ldrb	r0, [r4, #22]
 8017e30:	f884 9015 	strb.w	r9, [r4, #21]
 8017e34:	eba2 0208 	sub.w	r2, r2, r8
 8017e38:	eba3 0308 	sub.w	r3, r3, r8
 8017e3c:	60a2      	str	r2, [r4, #8]
 8017e3e:	6123      	str	r3, [r4, #16]
 8017e40:	f080 0001 	eor.w	r0, r0, #1
 8017e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e48:	68a3      	ldr	r3, [r4, #8]
 8017e4a:	789b      	ldrb	r3, [r3, #2]
 8017e4c:	706b      	strb	r3, [r5, #1]
 8017e4e:	1cab      	adds	r3, r5, #2
 8017e50:	68a2      	ldr	r2, [r4, #8]
 8017e52:	7852      	ldrb	r2, [r2, #1]
 8017e54:	f803 2b01 	strb.w	r2, [r3], #1
 8017e58:	68a2      	ldr	r2, [r4, #8]
 8017e5a:	7812      	ldrb	r2, [r2, #0]
 8017e5c:	701a      	strb	r2, [r3, #0]
 8017e5e:	e7b2      	b.n	8017dc6 <ucdr_deserialize_endian_uint32_t+0x7a>
 8017e60:	4639      	mov	r1, r7
 8017e62:	4642      	mov	r2, r8
 8017e64:	4628      	mov	r0, r5
 8017e66:	f002 fdd0 	bl	801aa0a <memcpy>
 8017e6a:	68a1      	ldr	r1, [r4, #8]
 8017e6c:	4652      	mov	r2, sl
 8017e6e:	eb05 0008 	add.w	r0, r5, r8
 8017e72:	f002 fdca 	bl	801aa0a <memcpy>
 8017e76:	e7a6      	b.n	8017dc6 <ucdr_deserialize_endian_uint32_t+0x7a>

08017e78 <ucdr_serialize_uint64_t>:
 8017e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e7c:	2108      	movs	r1, #8
 8017e7e:	b082      	sub	sp, #8
 8017e80:	4604      	mov	r4, r0
 8017e82:	e9cd 2300 	strd	r2, r3, [sp]
 8017e86:	f7f8 fbf7 	bl	8010678 <ucdr_buffer_alignment>
 8017e8a:	4601      	mov	r1, r0
 8017e8c:	4620      	mov	r0, r4
 8017e8e:	7d67      	ldrb	r7, [r4, #21]
 8017e90:	f7f8 fc36 	bl	8010700 <ucdr_advance_buffer>
 8017e94:	4620      	mov	r0, r4
 8017e96:	2108      	movs	r1, #8
 8017e98:	f7f8 fb90 	bl	80105bc <ucdr_check_buffer_available_for>
 8017e9c:	2800      	cmp	r0, #0
 8017e9e:	d14e      	bne.n	8017f3e <ucdr_serialize_uint64_t+0xc6>
 8017ea0:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8017ea4:	42b5      	cmp	r5, r6
 8017ea6:	d945      	bls.n	8017f34 <ucdr_serialize_uint64_t+0xbc>
 8017ea8:	6923      	ldr	r3, [r4, #16]
 8017eaa:	60a5      	str	r5, [r4, #8]
 8017eac:	1bad      	subs	r5, r5, r6
 8017eae:	442b      	add	r3, r5
 8017eb0:	f1c5 0808 	rsb	r8, r5, #8
 8017eb4:	6123      	str	r3, [r4, #16]
 8017eb6:	4641      	mov	r1, r8
 8017eb8:	4620      	mov	r0, r4
 8017eba:	f7f8 fb8b 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8017ebe:	2800      	cmp	r0, #0
 8017ec0:	d074      	beq.n	8017fac <ucdr_serialize_uint64_t+0x134>
 8017ec2:	7d23      	ldrb	r3, [r4, #20]
 8017ec4:	2b01      	cmp	r3, #1
 8017ec6:	f000 809b 	beq.w	8018000 <ucdr_serialize_uint64_t+0x188>
 8017eca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8017ece:	7033      	strb	r3, [r6, #0]
 8017ed0:	2d00      	cmp	r5, #0
 8017ed2:	d078      	beq.n	8017fc6 <ucdr_serialize_uint64_t+0x14e>
 8017ed4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017ed8:	7073      	strb	r3, [r6, #1]
 8017eda:	2d01      	cmp	r5, #1
 8017edc:	d077      	beq.n	8017fce <ucdr_serialize_uint64_t+0x156>
 8017ede:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8017ee2:	70b3      	strb	r3, [r6, #2]
 8017ee4:	2d02      	cmp	r5, #2
 8017ee6:	d076      	beq.n	8017fd6 <ucdr_serialize_uint64_t+0x15e>
 8017ee8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8017eec:	70f3      	strb	r3, [r6, #3]
 8017eee:	2d03      	cmp	r5, #3
 8017ef0:	d075      	beq.n	8017fde <ucdr_serialize_uint64_t+0x166>
 8017ef2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8017ef6:	7133      	strb	r3, [r6, #4]
 8017ef8:	2d04      	cmp	r5, #4
 8017efa:	d074      	beq.n	8017fe6 <ucdr_serialize_uint64_t+0x16e>
 8017efc:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8017f00:	7173      	strb	r3, [r6, #5]
 8017f02:	2d05      	cmp	r5, #5
 8017f04:	d073      	beq.n	8017fee <ucdr_serialize_uint64_t+0x176>
 8017f06:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8017f0a:	71b3      	strb	r3, [r6, #6]
 8017f0c:	2d06      	cmp	r5, #6
 8017f0e:	d072      	beq.n	8017ff6 <ucdr_serialize_uint64_t+0x17e>
 8017f10:	f89d 3000 	ldrb.w	r3, [sp]
 8017f14:	71f3      	strb	r3, [r6, #7]
 8017f16:	6923      	ldr	r3, [r4, #16]
 8017f18:	68a2      	ldr	r2, [r4, #8]
 8017f1a:	7da0      	ldrb	r0, [r4, #22]
 8017f1c:	3308      	adds	r3, #8
 8017f1e:	1b5d      	subs	r5, r3, r5
 8017f20:	4442      	add	r2, r8
 8017f22:	2308      	movs	r3, #8
 8017f24:	f080 0001 	eor.w	r0, r0, #1
 8017f28:	6125      	str	r5, [r4, #16]
 8017f2a:	60a2      	str	r2, [r4, #8]
 8017f2c:	7563      	strb	r3, [r4, #21]
 8017f2e:	b002      	add	sp, #8
 8017f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f34:	2108      	movs	r1, #8
 8017f36:	4620      	mov	r0, r4
 8017f38:	f7f8 fb4c 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8017f3c:	b350      	cbz	r0, 8017f94 <ucdr_serialize_uint64_t+0x11c>
 8017f3e:	7d23      	ldrb	r3, [r4, #20]
 8017f40:	2b01      	cmp	r3, #1
 8017f42:	d02d      	beq.n	8017fa0 <ucdr_serialize_uint64_t+0x128>
 8017f44:	68a3      	ldr	r3, [r4, #8]
 8017f46:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8017f4a:	701a      	strb	r2, [r3, #0]
 8017f4c:	68a3      	ldr	r3, [r4, #8]
 8017f4e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017f52:	705a      	strb	r2, [r3, #1]
 8017f54:	68a3      	ldr	r3, [r4, #8]
 8017f56:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017f5a:	709a      	strb	r2, [r3, #2]
 8017f5c:	68a3      	ldr	r3, [r4, #8]
 8017f5e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017f62:	70da      	strb	r2, [r3, #3]
 8017f64:	68a3      	ldr	r3, [r4, #8]
 8017f66:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8017f6a:	711a      	strb	r2, [r3, #4]
 8017f6c:	68a3      	ldr	r3, [r4, #8]
 8017f6e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8017f72:	715a      	strb	r2, [r3, #5]
 8017f74:	68a3      	ldr	r3, [r4, #8]
 8017f76:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8017f7a:	719a      	strb	r2, [r3, #6]
 8017f7c:	68a3      	ldr	r3, [r4, #8]
 8017f7e:	f89d 2000 	ldrb.w	r2, [sp]
 8017f82:	71da      	strb	r2, [r3, #7]
 8017f84:	68a2      	ldr	r2, [r4, #8]
 8017f86:	6923      	ldr	r3, [r4, #16]
 8017f88:	3208      	adds	r2, #8
 8017f8a:	3308      	adds	r3, #8
 8017f8c:	2108      	movs	r1, #8
 8017f8e:	60a2      	str	r2, [r4, #8]
 8017f90:	6123      	str	r3, [r4, #16]
 8017f92:	7561      	strb	r1, [r4, #21]
 8017f94:	7da0      	ldrb	r0, [r4, #22]
 8017f96:	f080 0001 	eor.w	r0, r0, #1
 8017f9a:	b002      	add	sp, #8
 8017f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fa0:	466b      	mov	r3, sp
 8017fa2:	cb03      	ldmia	r3!, {r0, r1}
 8017fa4:	68a3      	ldr	r3, [r4, #8]
 8017fa6:	6018      	str	r0, [r3, #0]
 8017fa8:	6059      	str	r1, [r3, #4]
 8017faa:	e7eb      	b.n	8017f84 <ucdr_serialize_uint64_t+0x10c>
 8017fac:	68a2      	ldr	r2, [r4, #8]
 8017fae:	6923      	ldr	r3, [r4, #16]
 8017fb0:	7da0      	ldrb	r0, [r4, #22]
 8017fb2:	7567      	strb	r7, [r4, #21]
 8017fb4:	1b52      	subs	r2, r2, r5
 8017fb6:	f080 0001 	eor.w	r0, r0, #1
 8017fba:	1b5d      	subs	r5, r3, r5
 8017fbc:	60a2      	str	r2, [r4, #8]
 8017fbe:	6125      	str	r5, [r4, #16]
 8017fc0:	b002      	add	sp, #8
 8017fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fc6:	68a3      	ldr	r3, [r4, #8]
 8017fc8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8017fcc:	701a      	strb	r2, [r3, #0]
 8017fce:	68a3      	ldr	r3, [r4, #8]
 8017fd0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8017fd4:	701a      	strb	r2, [r3, #0]
 8017fd6:	68a3      	ldr	r3, [r4, #8]
 8017fd8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8017fdc:	701a      	strb	r2, [r3, #0]
 8017fde:	68a3      	ldr	r3, [r4, #8]
 8017fe0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8017fe4:	701a      	strb	r2, [r3, #0]
 8017fe6:	68a3      	ldr	r3, [r4, #8]
 8017fe8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8017fec:	701a      	strb	r2, [r3, #0]
 8017fee:	68a3      	ldr	r3, [r4, #8]
 8017ff0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8017ff4:	701a      	strb	r2, [r3, #0]
 8017ff6:	68a3      	ldr	r3, [r4, #8]
 8017ff8:	f89d 2000 	ldrb.w	r2, [sp]
 8017ffc:	701a      	strb	r2, [r3, #0]
 8017ffe:	e78a      	b.n	8017f16 <ucdr_serialize_uint64_t+0x9e>
 8018000:	4630      	mov	r0, r6
 8018002:	466e      	mov	r6, sp
 8018004:	4631      	mov	r1, r6
 8018006:	462a      	mov	r2, r5
 8018008:	f002 fcff 	bl	801aa0a <memcpy>
 801800c:	68a0      	ldr	r0, [r4, #8]
 801800e:	4642      	mov	r2, r8
 8018010:	1971      	adds	r1, r6, r5
 8018012:	f002 fcfa 	bl	801aa0a <memcpy>
 8018016:	e77e      	b.n	8017f16 <ucdr_serialize_uint64_t+0x9e>

08018018 <ucdr_serialize_int16_t>:
 8018018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801801c:	b082      	sub	sp, #8
 801801e:	460b      	mov	r3, r1
 8018020:	2102      	movs	r1, #2
 8018022:	4604      	mov	r4, r0
 8018024:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018028:	f7f8 fb26 	bl	8010678 <ucdr_buffer_alignment>
 801802c:	4601      	mov	r1, r0
 801802e:	4620      	mov	r0, r4
 8018030:	7d67      	ldrb	r7, [r4, #21]
 8018032:	f7f8 fb65 	bl	8010700 <ucdr_advance_buffer>
 8018036:	4620      	mov	r0, r4
 8018038:	2102      	movs	r1, #2
 801803a:	f7f8 fabf 	bl	80105bc <ucdr_check_buffer_available_for>
 801803e:	bb78      	cbnz	r0, 80180a0 <ucdr_serialize_int16_t+0x88>
 8018040:	e9d4 5601 	ldrd	r5, r6, [r4, #4]
 8018044:	42b5      	cmp	r5, r6
 8018046:	d926      	bls.n	8018096 <ucdr_serialize_int16_t+0x7e>
 8018048:	6922      	ldr	r2, [r4, #16]
 801804a:	60a5      	str	r5, [r4, #8]
 801804c:	1bad      	subs	r5, r5, r6
 801804e:	442a      	add	r2, r5
 8018050:	f1c5 0802 	rsb	r8, r5, #2
 8018054:	6122      	str	r2, [r4, #16]
 8018056:	4641      	mov	r1, r8
 8018058:	4620      	mov	r0, r4
 801805a:	f7f8 fabb 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 801805e:	2800      	cmp	r0, #0
 8018060:	d03b      	beq.n	80180da <ucdr_serialize_int16_t+0xc2>
 8018062:	7d23      	ldrb	r3, [r4, #20]
 8018064:	2b01      	cmp	r3, #1
 8018066:	d04a      	beq.n	80180fe <ucdr_serialize_int16_t+0xe6>
 8018068:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801806c:	7033      	strb	r3, [r6, #0]
 801806e:	2d00      	cmp	r5, #0
 8018070:	d040      	beq.n	80180f4 <ucdr_serialize_int16_t+0xdc>
 8018072:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8018076:	7073      	strb	r3, [r6, #1]
 8018078:	6923      	ldr	r3, [r4, #16]
 801807a:	68a2      	ldr	r2, [r4, #8]
 801807c:	7da0      	ldrb	r0, [r4, #22]
 801807e:	3302      	adds	r3, #2
 8018080:	1b5b      	subs	r3, r3, r5
 8018082:	4442      	add	r2, r8
 8018084:	2102      	movs	r1, #2
 8018086:	f080 0001 	eor.w	r0, r0, #1
 801808a:	6123      	str	r3, [r4, #16]
 801808c:	60a2      	str	r2, [r4, #8]
 801808e:	7561      	strb	r1, [r4, #21]
 8018090:	b002      	add	sp, #8
 8018092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018096:	2102      	movs	r1, #2
 8018098:	4620      	mov	r0, r4
 801809a:	f7f8 fa9b 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 801809e:	b190      	cbz	r0, 80180c6 <ucdr_serialize_int16_t+0xae>
 80180a0:	7d23      	ldrb	r3, [r4, #20]
 80180a2:	2b01      	cmp	r3, #1
 80180a4:	68a3      	ldr	r3, [r4, #8]
 80180a6:	d014      	beq.n	80180d2 <ucdr_serialize_int16_t+0xba>
 80180a8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80180ac:	701a      	strb	r2, [r3, #0]
 80180ae:	68a3      	ldr	r3, [r4, #8]
 80180b0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80180b4:	705a      	strb	r2, [r3, #1]
 80180b6:	68a2      	ldr	r2, [r4, #8]
 80180b8:	6923      	ldr	r3, [r4, #16]
 80180ba:	3202      	adds	r2, #2
 80180bc:	3302      	adds	r3, #2
 80180be:	2102      	movs	r1, #2
 80180c0:	60a2      	str	r2, [r4, #8]
 80180c2:	6123      	str	r3, [r4, #16]
 80180c4:	7561      	strb	r1, [r4, #21]
 80180c6:	7da0      	ldrb	r0, [r4, #22]
 80180c8:	f080 0001 	eor.w	r0, r0, #1
 80180cc:	b002      	add	sp, #8
 80180ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180d2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80180d6:	801a      	strh	r2, [r3, #0]
 80180d8:	e7ed      	b.n	80180b6 <ucdr_serialize_int16_t+0x9e>
 80180da:	68a2      	ldr	r2, [r4, #8]
 80180dc:	6923      	ldr	r3, [r4, #16]
 80180de:	7da0      	ldrb	r0, [r4, #22]
 80180e0:	7567      	strb	r7, [r4, #21]
 80180e2:	1b52      	subs	r2, r2, r5
 80180e4:	1b5b      	subs	r3, r3, r5
 80180e6:	f080 0001 	eor.w	r0, r0, #1
 80180ea:	60a2      	str	r2, [r4, #8]
 80180ec:	6123      	str	r3, [r4, #16]
 80180ee:	b002      	add	sp, #8
 80180f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180f4:	68a3      	ldr	r3, [r4, #8]
 80180f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80180fa:	701a      	strb	r2, [r3, #0]
 80180fc:	e7bc      	b.n	8018078 <ucdr_serialize_int16_t+0x60>
 80180fe:	4630      	mov	r0, r6
 8018100:	f10d 0606 	add.w	r6, sp, #6
 8018104:	4631      	mov	r1, r6
 8018106:	462a      	mov	r2, r5
 8018108:	f002 fc7f 	bl	801aa0a <memcpy>
 801810c:	68a0      	ldr	r0, [r4, #8]
 801810e:	4642      	mov	r2, r8
 8018110:	1971      	adds	r1, r6, r5
 8018112:	f002 fc7a 	bl	801aa0a <memcpy>
 8018116:	e7af      	b.n	8018078 <ucdr_serialize_int16_t+0x60>

08018118 <ucdr_deserialize_int16_t>:
 8018118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801811c:	460d      	mov	r5, r1
 801811e:	2102      	movs	r1, #2
 8018120:	4604      	mov	r4, r0
 8018122:	f7f8 faa9 	bl	8010678 <ucdr_buffer_alignment>
 8018126:	4601      	mov	r1, r0
 8018128:	4620      	mov	r0, r4
 801812a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801812e:	f7f8 fae7 	bl	8010700 <ucdr_advance_buffer>
 8018132:	4620      	mov	r0, r4
 8018134:	2102      	movs	r1, #2
 8018136:	f7f8 fa41 	bl	80105bc <ucdr_check_buffer_available_for>
 801813a:	bb60      	cbnz	r0, 8018196 <ucdr_deserialize_int16_t+0x7e>
 801813c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8018140:	42be      	cmp	r6, r7
 8018142:	d923      	bls.n	801818c <ucdr_deserialize_int16_t+0x74>
 8018144:	6922      	ldr	r2, [r4, #16]
 8018146:	60a6      	str	r6, [r4, #8]
 8018148:	1bf6      	subs	r6, r6, r7
 801814a:	4432      	add	r2, r6
 801814c:	f1c6 0902 	rsb	r9, r6, #2
 8018150:	6122      	str	r2, [r4, #16]
 8018152:	4649      	mov	r1, r9
 8018154:	4620      	mov	r0, r4
 8018156:	f7f8 fa3d 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 801815a:	2800      	cmp	r0, #0
 801815c:	d034      	beq.n	80181c8 <ucdr_deserialize_int16_t+0xb0>
 801815e:	7d23      	ldrb	r3, [r4, #20]
 8018160:	2b01      	cmp	r3, #1
 8018162:	d042      	beq.n	80181ea <ucdr_deserialize_int16_t+0xd2>
 8018164:	787b      	ldrb	r3, [r7, #1]
 8018166:	702b      	strb	r3, [r5, #0]
 8018168:	2e00      	cmp	r6, #0
 801816a:	d03a      	beq.n	80181e2 <ucdr_deserialize_int16_t+0xca>
 801816c:	783b      	ldrb	r3, [r7, #0]
 801816e:	706b      	strb	r3, [r5, #1]
 8018170:	6923      	ldr	r3, [r4, #16]
 8018172:	68a2      	ldr	r2, [r4, #8]
 8018174:	7da0      	ldrb	r0, [r4, #22]
 8018176:	2102      	movs	r1, #2
 8018178:	3302      	adds	r3, #2
 801817a:	1b9b      	subs	r3, r3, r6
 801817c:	444a      	add	r2, r9
 801817e:	7561      	strb	r1, [r4, #21]
 8018180:	6123      	str	r3, [r4, #16]
 8018182:	60a2      	str	r2, [r4, #8]
 8018184:	f080 0001 	eor.w	r0, r0, #1
 8018188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801818c:	2102      	movs	r1, #2
 801818e:	4620      	mov	r0, r4
 8018190:	f7f8 fa20 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8018194:	b180      	cbz	r0, 80181b8 <ucdr_deserialize_int16_t+0xa0>
 8018196:	7d23      	ldrb	r3, [r4, #20]
 8018198:	2b01      	cmp	r3, #1
 801819a:	68a3      	ldr	r3, [r4, #8]
 801819c:	d011      	beq.n	80181c2 <ucdr_deserialize_int16_t+0xaa>
 801819e:	785b      	ldrb	r3, [r3, #1]
 80181a0:	702b      	strb	r3, [r5, #0]
 80181a2:	68a3      	ldr	r3, [r4, #8]
 80181a4:	781b      	ldrb	r3, [r3, #0]
 80181a6:	706b      	strb	r3, [r5, #1]
 80181a8:	68a2      	ldr	r2, [r4, #8]
 80181aa:	6923      	ldr	r3, [r4, #16]
 80181ac:	3202      	adds	r2, #2
 80181ae:	3302      	adds	r3, #2
 80181b0:	2102      	movs	r1, #2
 80181b2:	60a2      	str	r2, [r4, #8]
 80181b4:	6123      	str	r3, [r4, #16]
 80181b6:	7561      	strb	r1, [r4, #21]
 80181b8:	7da0      	ldrb	r0, [r4, #22]
 80181ba:	f080 0001 	eor.w	r0, r0, #1
 80181be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181c2:	881b      	ldrh	r3, [r3, #0]
 80181c4:	802b      	strh	r3, [r5, #0]
 80181c6:	e7ef      	b.n	80181a8 <ucdr_deserialize_int16_t+0x90>
 80181c8:	68a2      	ldr	r2, [r4, #8]
 80181ca:	6923      	ldr	r3, [r4, #16]
 80181cc:	7da0      	ldrb	r0, [r4, #22]
 80181ce:	f884 8015 	strb.w	r8, [r4, #21]
 80181d2:	1b92      	subs	r2, r2, r6
 80181d4:	1b9b      	subs	r3, r3, r6
 80181d6:	60a2      	str	r2, [r4, #8]
 80181d8:	6123      	str	r3, [r4, #16]
 80181da:	f080 0001 	eor.w	r0, r0, #1
 80181de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80181e2:	68a3      	ldr	r3, [r4, #8]
 80181e4:	781b      	ldrb	r3, [r3, #0]
 80181e6:	706b      	strb	r3, [r5, #1]
 80181e8:	e7c2      	b.n	8018170 <ucdr_deserialize_int16_t+0x58>
 80181ea:	4639      	mov	r1, r7
 80181ec:	4632      	mov	r2, r6
 80181ee:	4628      	mov	r0, r5
 80181f0:	f002 fc0b 	bl	801aa0a <memcpy>
 80181f4:	68a1      	ldr	r1, [r4, #8]
 80181f6:	464a      	mov	r2, r9
 80181f8:	19a8      	adds	r0, r5, r6
 80181fa:	f002 fc06 	bl	801aa0a <memcpy>
 80181fe:	e7b7      	b.n	8018170 <ucdr_deserialize_int16_t+0x58>

08018200 <ucdr_serialize_int32_t>:
 8018200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018204:	b082      	sub	sp, #8
 8018206:	4604      	mov	r4, r0
 8018208:	9101      	str	r1, [sp, #4]
 801820a:	2104      	movs	r1, #4
 801820c:	f7f8 fa34 	bl	8010678 <ucdr_buffer_alignment>
 8018210:	4601      	mov	r1, r0
 8018212:	4620      	mov	r0, r4
 8018214:	7d67      	ldrb	r7, [r4, #21]
 8018216:	f7f8 fa73 	bl	8010700 <ucdr_advance_buffer>
 801821a:	4620      	mov	r0, r4
 801821c:	2104      	movs	r1, #4
 801821e:	f7f8 f9cd 	bl	80105bc <ucdr_check_buffer_available_for>
 8018222:	2800      	cmp	r0, #0
 8018224:	d139      	bne.n	801829a <ucdr_serialize_int32_t+0x9a>
 8018226:	e9d4 6501 	ldrd	r6, r5, [r4, #4]
 801822a:	42ae      	cmp	r6, r5
 801822c:	d930      	bls.n	8018290 <ucdr_serialize_int32_t+0x90>
 801822e:	6922      	ldr	r2, [r4, #16]
 8018230:	60a6      	str	r6, [r4, #8]
 8018232:	1b76      	subs	r6, r6, r5
 8018234:	4432      	add	r2, r6
 8018236:	f1c6 0804 	rsb	r8, r6, #4
 801823a:	6122      	str	r2, [r4, #16]
 801823c:	4641      	mov	r1, r8
 801823e:	4620      	mov	r0, r4
 8018240:	f7f8 f9c8 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8018244:	2800      	cmp	r0, #0
 8018246:	d04c      	beq.n	80182e2 <ucdr_serialize_int32_t+0xe2>
 8018248:	7d23      	ldrb	r3, [r4, #20]
 801824a:	2b01      	cmp	r3, #1
 801824c:	d063      	beq.n	8018316 <ucdr_serialize_int32_t+0x116>
 801824e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8018252:	702b      	strb	r3, [r5, #0]
 8018254:	2e00      	cmp	r6, #0
 8018256:	d051      	beq.n	80182fc <ucdr_serialize_int32_t+0xfc>
 8018258:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801825c:	706b      	strb	r3, [r5, #1]
 801825e:	2e01      	cmp	r6, #1
 8018260:	d050      	beq.n	8018304 <ucdr_serialize_int32_t+0x104>
 8018262:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018266:	70ab      	strb	r3, [r5, #2]
 8018268:	2e02      	cmp	r6, #2
 801826a:	d04f      	beq.n	801830c <ucdr_serialize_int32_t+0x10c>
 801826c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8018270:	70eb      	strb	r3, [r5, #3]
 8018272:	6923      	ldr	r3, [r4, #16]
 8018274:	68a2      	ldr	r2, [r4, #8]
 8018276:	7da0      	ldrb	r0, [r4, #22]
 8018278:	3304      	adds	r3, #4
 801827a:	1b9b      	subs	r3, r3, r6
 801827c:	4442      	add	r2, r8
 801827e:	2104      	movs	r1, #4
 8018280:	f080 0001 	eor.w	r0, r0, #1
 8018284:	6123      	str	r3, [r4, #16]
 8018286:	60a2      	str	r2, [r4, #8]
 8018288:	7561      	strb	r1, [r4, #21]
 801828a:	b002      	add	sp, #8
 801828c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018290:	2104      	movs	r1, #4
 8018292:	4620      	mov	r0, r4
 8018294:	f7f8 f99e 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8018298:	b1d0      	cbz	r0, 80182d0 <ucdr_serialize_int32_t+0xd0>
 801829a:	7d23      	ldrb	r3, [r4, #20]
 801829c:	2b01      	cmp	r3, #1
 801829e:	68a3      	ldr	r3, [r4, #8]
 80182a0:	d01c      	beq.n	80182dc <ucdr_serialize_int32_t+0xdc>
 80182a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80182a6:	701a      	strb	r2, [r3, #0]
 80182a8:	68a3      	ldr	r3, [r4, #8]
 80182aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80182ae:	705a      	strb	r2, [r3, #1]
 80182b0:	68a3      	ldr	r3, [r4, #8]
 80182b2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80182b6:	709a      	strb	r2, [r3, #2]
 80182b8:	68a3      	ldr	r3, [r4, #8]
 80182ba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80182be:	70da      	strb	r2, [r3, #3]
 80182c0:	68a2      	ldr	r2, [r4, #8]
 80182c2:	6923      	ldr	r3, [r4, #16]
 80182c4:	3204      	adds	r2, #4
 80182c6:	3304      	adds	r3, #4
 80182c8:	2104      	movs	r1, #4
 80182ca:	60a2      	str	r2, [r4, #8]
 80182cc:	6123      	str	r3, [r4, #16]
 80182ce:	7561      	strb	r1, [r4, #21]
 80182d0:	7da0      	ldrb	r0, [r4, #22]
 80182d2:	f080 0001 	eor.w	r0, r0, #1
 80182d6:	b002      	add	sp, #8
 80182d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182dc:	9a01      	ldr	r2, [sp, #4]
 80182de:	601a      	str	r2, [r3, #0]
 80182e0:	e7ee      	b.n	80182c0 <ucdr_serialize_int32_t+0xc0>
 80182e2:	68a2      	ldr	r2, [r4, #8]
 80182e4:	6923      	ldr	r3, [r4, #16]
 80182e6:	7da0      	ldrb	r0, [r4, #22]
 80182e8:	7567      	strb	r7, [r4, #21]
 80182ea:	1b92      	subs	r2, r2, r6
 80182ec:	1b9b      	subs	r3, r3, r6
 80182ee:	f080 0001 	eor.w	r0, r0, #1
 80182f2:	60a2      	str	r2, [r4, #8]
 80182f4:	6123      	str	r3, [r4, #16]
 80182f6:	b002      	add	sp, #8
 80182f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182fc:	68a3      	ldr	r3, [r4, #8]
 80182fe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8018302:	701a      	strb	r2, [r3, #0]
 8018304:	68a3      	ldr	r3, [r4, #8]
 8018306:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801830a:	701a      	strb	r2, [r3, #0]
 801830c:	68a3      	ldr	r3, [r4, #8]
 801830e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8018312:	701a      	strb	r2, [r3, #0]
 8018314:	e7ad      	b.n	8018272 <ucdr_serialize_int32_t+0x72>
 8018316:	4628      	mov	r0, r5
 8018318:	ad01      	add	r5, sp, #4
 801831a:	4629      	mov	r1, r5
 801831c:	4632      	mov	r2, r6
 801831e:	f002 fb74 	bl	801aa0a <memcpy>
 8018322:	68a0      	ldr	r0, [r4, #8]
 8018324:	4642      	mov	r2, r8
 8018326:	19a9      	adds	r1, r5, r6
 8018328:	f002 fb6f 	bl	801aa0a <memcpy>
 801832c:	e7a1      	b.n	8018272 <ucdr_serialize_int32_t+0x72>
 801832e:	bf00      	nop

08018330 <ucdr_deserialize_int32_t>:
 8018330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018334:	460d      	mov	r5, r1
 8018336:	2104      	movs	r1, #4
 8018338:	4604      	mov	r4, r0
 801833a:	f7f8 f99d 	bl	8010678 <ucdr_buffer_alignment>
 801833e:	4601      	mov	r1, r0
 8018340:	4620      	mov	r0, r4
 8018342:	f894 8015 	ldrb.w	r8, [r4, #21]
 8018346:	f7f8 f9db 	bl	8010700 <ucdr_advance_buffer>
 801834a:	4620      	mov	r0, r4
 801834c:	2104      	movs	r1, #4
 801834e:	f7f8 f935 	bl	80105bc <ucdr_check_buffer_available_for>
 8018352:	2800      	cmp	r0, #0
 8018354:	d138      	bne.n	80183c8 <ucdr_deserialize_int32_t+0x98>
 8018356:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801835a:	42b7      	cmp	r7, r6
 801835c:	d92f      	bls.n	80183be <ucdr_deserialize_int32_t+0x8e>
 801835e:	6922      	ldr	r2, [r4, #16]
 8018360:	60a7      	str	r7, [r4, #8]
 8018362:	1bbf      	subs	r7, r7, r6
 8018364:	443a      	add	r2, r7
 8018366:	f1c7 0904 	rsb	r9, r7, #4
 801836a:	6122      	str	r2, [r4, #16]
 801836c:	4649      	mov	r1, r9
 801836e:	4620      	mov	r0, r4
 8018370:	f7f8 f930 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 8018374:	2800      	cmp	r0, #0
 8018376:	d046      	beq.n	8018406 <ucdr_deserialize_int32_t+0xd6>
 8018378:	7d23      	ldrb	r3, [r4, #20]
 801837a:	2b01      	cmp	r3, #1
 801837c:	d05c      	beq.n	8018438 <ucdr_deserialize_int32_t+0x108>
 801837e:	78f3      	ldrb	r3, [r6, #3]
 8018380:	702b      	strb	r3, [r5, #0]
 8018382:	2f00      	cmp	r7, #0
 8018384:	d04c      	beq.n	8018420 <ucdr_deserialize_int32_t+0xf0>
 8018386:	78b3      	ldrb	r3, [r6, #2]
 8018388:	706b      	strb	r3, [r5, #1]
 801838a:	2f01      	cmp	r7, #1
 801838c:	f105 0302 	add.w	r3, r5, #2
 8018390:	d04a      	beq.n	8018428 <ucdr_deserialize_int32_t+0xf8>
 8018392:	7873      	ldrb	r3, [r6, #1]
 8018394:	70ab      	strb	r3, [r5, #2]
 8018396:	2f02      	cmp	r7, #2
 8018398:	f105 0303 	add.w	r3, r5, #3
 801839c:	d048      	beq.n	8018430 <ucdr_deserialize_int32_t+0x100>
 801839e:	7833      	ldrb	r3, [r6, #0]
 80183a0:	70eb      	strb	r3, [r5, #3]
 80183a2:	6923      	ldr	r3, [r4, #16]
 80183a4:	68a2      	ldr	r2, [r4, #8]
 80183a6:	7da0      	ldrb	r0, [r4, #22]
 80183a8:	2104      	movs	r1, #4
 80183aa:	3304      	adds	r3, #4
 80183ac:	1bdb      	subs	r3, r3, r7
 80183ae:	444a      	add	r2, r9
 80183b0:	7561      	strb	r1, [r4, #21]
 80183b2:	6123      	str	r3, [r4, #16]
 80183b4:	60a2      	str	r2, [r4, #8]
 80183b6:	f080 0001 	eor.w	r0, r0, #1
 80183ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80183be:	2104      	movs	r1, #4
 80183c0:	4620      	mov	r0, r4
 80183c2:	f7f8 f907 	bl	80105d4 <ucdr_check_final_buffer_behavior>
 80183c6:	b1b0      	cbz	r0, 80183f6 <ucdr_deserialize_int32_t+0xc6>
 80183c8:	7d23      	ldrb	r3, [r4, #20]
 80183ca:	2b01      	cmp	r3, #1
 80183cc:	68a3      	ldr	r3, [r4, #8]
 80183ce:	d017      	beq.n	8018400 <ucdr_deserialize_int32_t+0xd0>
 80183d0:	78db      	ldrb	r3, [r3, #3]
 80183d2:	702b      	strb	r3, [r5, #0]
 80183d4:	68a3      	ldr	r3, [r4, #8]
 80183d6:	789b      	ldrb	r3, [r3, #2]
 80183d8:	706b      	strb	r3, [r5, #1]
 80183da:	68a3      	ldr	r3, [r4, #8]
 80183dc:	785b      	ldrb	r3, [r3, #1]
 80183de:	70ab      	strb	r3, [r5, #2]
 80183e0:	68a3      	ldr	r3, [r4, #8]
 80183e2:	781b      	ldrb	r3, [r3, #0]
 80183e4:	70eb      	strb	r3, [r5, #3]
 80183e6:	68a2      	ldr	r2, [r4, #8]
 80183e8:	6923      	ldr	r3, [r4, #16]
 80183ea:	3204      	adds	r2, #4
 80183ec:	3304      	adds	r3, #4
 80183ee:	2104      	movs	r1, #4
 80183f0:	60a2      	str	r2, [r4, #8]
 80183f2:	6123      	str	r3, [r4, #16]
 80183f4:	7561      	strb	r1, [r4, #21]
 80183f6:	7da0      	ldrb	r0, [r4, #22]
 80183f8:	f080 0001 	eor.w	r0, r0, #1
 80183fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018400:	681b      	ldr	r3, [r3, #0]
 8018402:	602b      	str	r3, [r5, #0]
 8018404:	e7ef      	b.n	80183e6 <ucdr_deserialize_int32_t+0xb6>
 8018406:	68a2      	ldr	r2, [r4, #8]
 8018408:	6923      	ldr	r3, [r4, #16]
 801840a:	7da0      	ldrb	r0, [r4, #22]
 801840c:	f884 8015 	strb.w	r8, [r4, #21]
 8018410:	1bd2      	subs	r2, r2, r7
 8018412:	1bdb      	subs	r3, r3, r7
 8018414:	60a2      	str	r2, [r4, #8]
 8018416:	6123      	str	r3, [r4, #16]
 8018418:	f080 0001 	eor.w	r0, r0, #1
 801841c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018420:	68a3      	ldr	r3, [r4, #8]
 8018422:	789b      	ldrb	r3, [r3, #2]
 8018424:	706b      	strb	r3, [r5, #1]
 8018426:	1cab      	adds	r3, r5, #2
 8018428:	68a2      	ldr	r2, [r4, #8]
 801842a:	7852      	ldrb	r2, [r2, #1]
 801842c:	f803 2b01 	strb.w	r2, [r3], #1
 8018430:	68a2      	ldr	r2, [r4, #8]
 8018432:	7812      	ldrb	r2, [r2, #0]
 8018434:	701a      	strb	r2, [r3, #0]
 8018436:	e7b4      	b.n	80183a2 <ucdr_deserialize_int32_t+0x72>
 8018438:	4631      	mov	r1, r6
 801843a:	463a      	mov	r2, r7
 801843c:	4628      	mov	r0, r5
 801843e:	f002 fae4 	bl	801aa0a <memcpy>
 8018442:	68a1      	ldr	r1, [r4, #8]
 8018444:	464a      	mov	r2, r9
 8018446:	19e8      	adds	r0, r5, r7
 8018448:	f002 fadf 	bl	801aa0a <memcpy>
 801844c:	e7a9      	b.n	80183a2 <ucdr_deserialize_int32_t+0x72>
 801844e:	bf00      	nop

08018450 <ucdr_serialize_string>:
 8018450:	b510      	push	{r4, lr}
 8018452:	b082      	sub	sp, #8
 8018454:	4604      	mov	r4, r0
 8018456:	4608      	mov	r0, r1
 8018458:	9101      	str	r1, [sp, #4]
 801845a:	f7e7 ff21 	bl	80002a0 <strlen>
 801845e:	9901      	ldr	r1, [sp, #4]
 8018460:	4602      	mov	r2, r0
 8018462:	3201      	adds	r2, #1
 8018464:	4620      	mov	r0, r4
 8018466:	b002      	add	sp, #8
 8018468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801846c:	f7f8 b968 	b.w	8010740 <ucdr_serialize_sequence_char>

08018470 <ucdr_deserialize_string>:
 8018470:	b500      	push	{lr}
 8018472:	b083      	sub	sp, #12
 8018474:	ab01      	add	r3, sp, #4
 8018476:	f7f8 f975 	bl	8010764 <ucdr_deserialize_sequence_char>
 801847a:	b003      	add	sp, #12
 801847c:	f85d fb04 	ldr.w	pc, [sp], #4

08018480 <uxr_init_input_best_effort_stream>:
 8018480:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018484:	8003      	strh	r3, [r0, #0]
 8018486:	4770      	bx	lr

08018488 <uxr_reset_input_best_effort_stream>:
 8018488:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801848c:	8003      	strh	r3, [r0, #0]
 801848e:	4770      	bx	lr

08018490 <uxr_receive_best_effort_message>:
 8018490:	b538      	push	{r3, r4, r5, lr}
 8018492:	4604      	mov	r4, r0
 8018494:	8800      	ldrh	r0, [r0, #0]
 8018496:	460d      	mov	r5, r1
 8018498:	f000 fd20 	bl	8018edc <uxr_seq_num_cmp>
 801849c:	4603      	mov	r3, r0
 801849e:	2b00      	cmp	r3, #0
 80184a0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80184a4:	bfb8      	it	lt
 80184a6:	8025      	strhlt	r5, [r4, #0]
 80184a8:	bd38      	pop	{r3, r4, r5, pc}
 80184aa:	bf00      	nop

080184ac <on_full_input_buffer>:
 80184ac:	b570      	push	{r4, r5, r6, lr}
 80184ae:	6802      	ldr	r2, [r0, #0]
 80184b0:	460d      	mov	r5, r1
 80184b2:	6809      	ldr	r1, [r1, #0]
 80184b4:	686c      	ldr	r4, [r5, #4]
 80184b6:	1a53      	subs	r3, r2, r1
 80184b8:	4606      	mov	r6, r0
 80184ba:	8928      	ldrh	r0, [r5, #8]
 80184bc:	fbb4 f4f0 	udiv	r4, r4, r0
 80184c0:	fbb3 f3f4 	udiv	r3, r3, r4
 80184c4:	3301      	adds	r3, #1
 80184c6:	b29b      	uxth	r3, r3
 80184c8:	fbb3 f2f0 	udiv	r2, r3, r0
 80184cc:	fb00 3312 	mls	r3, r0, r2, r3
 80184d0:	b29b      	uxth	r3, r3
 80184d2:	fb04 f403 	mul.w	r4, r4, r3
 80184d6:	1d23      	adds	r3, r4, #4
 80184d8:	440b      	add	r3, r1
 80184da:	7d28      	ldrb	r0, [r5, #20]
 80184dc:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80184e0:	b110      	cbz	r0, 80184e8 <on_full_input_buffer+0x3c>
 80184e2:	2000      	movs	r0, #0
 80184e4:	f843 0c04 	str.w	r0, [r3, #-4]
 80184e8:	2a03      	cmp	r2, #3
 80184ea:	d801      	bhi.n	80184f0 <on_full_input_buffer+0x44>
 80184ec:	2001      	movs	r0, #1
 80184ee:	bd70      	pop	{r4, r5, r6, pc}
 80184f0:	3408      	adds	r4, #8
 80184f2:	6933      	ldr	r3, [r6, #16]
 80184f4:	4421      	add	r1, r4
 80184f6:	4630      	mov	r0, r6
 80184f8:	3a04      	subs	r2, #4
 80184fa:	f7f8 f8a9 	bl	8010650 <ucdr_init_buffer_origin>
 80184fe:	4630      	mov	r0, r6
 8018500:	4902      	ldr	r1, [pc, #8]	@ (801850c <on_full_input_buffer+0x60>)
 8018502:	462a      	mov	r2, r5
 8018504:	f7f8 f882 	bl	801060c <ucdr_set_on_full_buffer_callback>
 8018508:	2000      	movs	r0, #0
 801850a:	bd70      	pop	{r4, r5, r6, pc}
 801850c:	080184ad 	.word	0x080184ad

08018510 <uxr_init_input_reliable_stream>:
 8018510:	b470      	push	{r4, r5, r6}
 8018512:	9c03      	ldr	r4, [sp, #12]
 8018514:	6001      	str	r1, [r0, #0]
 8018516:	2600      	movs	r6, #0
 8018518:	8103      	strh	r3, [r0, #8]
 801851a:	6042      	str	r2, [r0, #4]
 801851c:	6104      	str	r4, [r0, #16]
 801851e:	7506      	strb	r6, [r0, #20]
 8018520:	b1ab      	cbz	r3, 801854e <uxr_init_input_reliable_stream+0x3e>
 8018522:	600e      	str	r6, [r1, #0]
 8018524:	8901      	ldrh	r1, [r0, #8]
 8018526:	2901      	cmp	r1, #1
 8018528:	d911      	bls.n	801854e <uxr_init_input_reliable_stream+0x3e>
 801852a:	2201      	movs	r2, #1
 801852c:	e9d0 5400 	ldrd	r5, r4, [r0]
 8018530:	fbb2 f3f1 	udiv	r3, r2, r1
 8018534:	fb01 2313 	mls	r3, r1, r3, r2
 8018538:	b29b      	uxth	r3, r3
 801853a:	fbb4 f1f1 	udiv	r1, r4, r1
 801853e:	fb03 f301 	mul.w	r3, r3, r1
 8018542:	3201      	adds	r2, #1
 8018544:	50ee      	str	r6, [r5, r3]
 8018546:	8901      	ldrh	r1, [r0, #8]
 8018548:	b292      	uxth	r2, r2
 801854a:	4291      	cmp	r1, r2
 801854c:	d8ee      	bhi.n	801852c <uxr_init_input_reliable_stream+0x1c>
 801854e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018552:	bc70      	pop	{r4, r5, r6}
 8018554:	60c3      	str	r3, [r0, #12]
 8018556:	4770      	bx	lr

08018558 <uxr_reset_input_reliable_stream>:
 8018558:	8902      	ldrh	r2, [r0, #8]
 801855a:	b1ca      	cbz	r2, 8018590 <uxr_reset_input_reliable_stream+0x38>
 801855c:	b470      	push	{r4, r5, r6}
 801855e:	2400      	movs	r4, #0
 8018560:	4621      	mov	r1, r4
 8018562:	4626      	mov	r6, r4
 8018564:	fbb1 f3f2 	udiv	r3, r1, r2
 8018568:	fb02 1313 	mls	r3, r2, r3, r1
 801856c:	e9d0 5100 	ldrd	r5, r1, [r0]
 8018570:	b29b      	uxth	r3, r3
 8018572:	fbb1 f2f2 	udiv	r2, r1, r2
 8018576:	fb03 f302 	mul.w	r3, r3, r2
 801857a:	3401      	adds	r4, #1
 801857c:	50ee      	str	r6, [r5, r3]
 801857e:	8902      	ldrh	r2, [r0, #8]
 8018580:	b2a1      	uxth	r1, r4
 8018582:	428a      	cmp	r2, r1
 8018584:	d8ee      	bhi.n	8018564 <uxr_reset_input_reliable_stream+0xc>
 8018586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801858a:	bc70      	pop	{r4, r5, r6}
 801858c:	60c3      	str	r3, [r0, #12]
 801858e:	4770      	bx	lr
 8018590:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018594:	60c3      	str	r3, [r0, #12]
 8018596:	4770      	bx	lr

08018598 <uxr_receive_reliable_message>:
 8018598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801859c:	4604      	mov	r4, r0
 801859e:	460d      	mov	r5, r1
 80185a0:	8901      	ldrh	r1, [r0, #8]
 80185a2:	8980      	ldrh	r0, [r0, #12]
 80185a4:	4690      	mov	r8, r2
 80185a6:	461f      	mov	r7, r3
 80185a8:	f000 fc90 	bl	8018ecc <uxr_seq_num_add>
 80185ac:	4629      	mov	r1, r5
 80185ae:	4606      	mov	r6, r0
 80185b0:	89a0      	ldrh	r0, [r4, #12]
 80185b2:	f000 fc93 	bl	8018edc <uxr_seq_num_cmp>
 80185b6:	2800      	cmp	r0, #0
 80185b8:	db0a      	blt.n	80185d0 <uxr_receive_reliable_message+0x38>
 80185ba:	2600      	movs	r6, #0
 80185bc:	89e0      	ldrh	r0, [r4, #14]
 80185be:	4629      	mov	r1, r5
 80185c0:	f000 fc8c 	bl	8018edc <uxr_seq_num_cmp>
 80185c4:	2800      	cmp	r0, #0
 80185c6:	bfb8      	it	lt
 80185c8:	81e5      	strhlt	r5, [r4, #14]
 80185ca:	4630      	mov	r0, r6
 80185cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185d0:	4630      	mov	r0, r6
 80185d2:	4629      	mov	r1, r5
 80185d4:	f000 fc82 	bl	8018edc <uxr_seq_num_cmp>
 80185d8:	2800      	cmp	r0, #0
 80185da:	dbee      	blt.n	80185ba <uxr_receive_reliable_message+0x22>
 80185dc:	6923      	ldr	r3, [r4, #16]
 80185de:	4640      	mov	r0, r8
 80185e0:	4798      	blx	r3
 80185e2:	2101      	movs	r1, #1
 80185e4:	4681      	mov	r9, r0
 80185e6:	89a0      	ldrh	r0, [r4, #12]
 80185e8:	f000 fc70 	bl	8018ecc <uxr_seq_num_add>
 80185ec:	f1b9 0f00 	cmp.w	r9, #0
 80185f0:	d101      	bne.n	80185f6 <uxr_receive_reliable_message+0x5e>
 80185f2:	4285      	cmp	r5, r0
 80185f4:	d049      	beq.n	801868a <uxr_receive_reliable_message+0xf2>
 80185f6:	8921      	ldrh	r1, [r4, #8]
 80185f8:	fbb5 f3f1 	udiv	r3, r5, r1
 80185fc:	fb01 5313 	mls	r3, r1, r3, r5
 8018600:	b29b      	uxth	r3, r3
 8018602:	6862      	ldr	r2, [r4, #4]
 8018604:	6820      	ldr	r0, [r4, #0]
 8018606:	fbb2 f2f1 	udiv	r2, r2, r1
 801860a:	fb03 f302 	mul.w	r3, r3, r2
 801860e:	3304      	adds	r3, #4
 8018610:	4418      	add	r0, r3
 8018612:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018616:	2b00      	cmp	r3, #0
 8018618:	d1cf      	bne.n	80185ba <uxr_receive_reliable_message+0x22>
 801861a:	4641      	mov	r1, r8
 801861c:	463a      	mov	r2, r7
 801861e:	f002 f9f4 	bl	801aa0a <memcpy>
 8018622:	8921      	ldrh	r1, [r4, #8]
 8018624:	fbb5 f3f1 	udiv	r3, r5, r1
 8018628:	fb01 5313 	mls	r3, r1, r3, r5
 801862c:	b29b      	uxth	r3, r3
 801862e:	6862      	ldr	r2, [r4, #4]
 8018630:	fbb2 f2f1 	udiv	r2, r2, r1
 8018634:	6821      	ldr	r1, [r4, #0]
 8018636:	fb03 f302 	mul.w	r3, r3, r2
 801863a:	2201      	movs	r2, #1
 801863c:	50cf      	str	r7, [r1, r3]
 801863e:	9b08      	ldr	r3, [sp, #32]
 8018640:	701a      	strb	r2, [r3, #0]
 8018642:	f1b9 0f00 	cmp.w	r9, #0
 8018646:	d0b8      	beq.n	80185ba <uxr_receive_reliable_message+0x22>
 8018648:	89a6      	ldrh	r6, [r4, #12]
 801864a:	e001      	b.n	8018650 <uxr_receive_reliable_message+0xb8>
 801864c:	2801      	cmp	r0, #1
 801864e:	d1b4      	bne.n	80185ba <uxr_receive_reliable_message+0x22>
 8018650:	4630      	mov	r0, r6
 8018652:	2101      	movs	r1, #1
 8018654:	f000 fc3a 	bl	8018ecc <uxr_seq_num_add>
 8018658:	8921      	ldrh	r1, [r4, #8]
 801865a:	fbb0 f3f1 	udiv	r3, r0, r1
 801865e:	fb01 0313 	mls	r3, r1, r3, r0
 8018662:	b29b      	uxth	r3, r3
 8018664:	6862      	ldr	r2, [r4, #4]
 8018666:	fbb2 f2f1 	udiv	r2, r2, r1
 801866a:	4606      	mov	r6, r0
 801866c:	fb03 f302 	mul.w	r3, r3, r2
 8018670:	6820      	ldr	r0, [r4, #0]
 8018672:	3304      	adds	r3, #4
 8018674:	4418      	add	r0, r3
 8018676:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801867a:	2b00      	cmp	r3, #0
 801867c:	d09d      	beq.n	80185ba <uxr_receive_reliable_message+0x22>
 801867e:	6923      	ldr	r3, [r4, #16]
 8018680:	4798      	blx	r3
 8018682:	2802      	cmp	r0, #2
 8018684:	d1e2      	bne.n	801864c <uxr_receive_reliable_message+0xb4>
 8018686:	2601      	movs	r6, #1
 8018688:	e798      	b.n	80185bc <uxr_receive_reliable_message+0x24>
 801868a:	9b08      	ldr	r3, [sp, #32]
 801868c:	81a5      	strh	r5, [r4, #12]
 801868e:	2601      	movs	r6, #1
 8018690:	f883 9000 	strb.w	r9, [r3]
 8018694:	e792      	b.n	80185bc <uxr_receive_reliable_message+0x24>
 8018696:	bf00      	nop

08018698 <uxr_next_input_reliable_buffer_available>:
 8018698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801869c:	4604      	mov	r4, r0
 801869e:	460e      	mov	r6, r1
 80186a0:	8980      	ldrh	r0, [r0, #12]
 80186a2:	2101      	movs	r1, #1
 80186a4:	4617      	mov	r7, r2
 80186a6:	f000 fc11 	bl	8018ecc <uxr_seq_num_add>
 80186aa:	8921      	ldrh	r1, [r4, #8]
 80186ac:	fbb0 f3f1 	udiv	r3, r0, r1
 80186b0:	fb01 0313 	mls	r3, r1, r3, r0
 80186b4:	b29b      	uxth	r3, r3
 80186b6:	6862      	ldr	r2, [r4, #4]
 80186b8:	fbb2 f2f1 	udiv	r2, r2, r1
 80186bc:	fb03 f302 	mul.w	r3, r3, r2
 80186c0:	6822      	ldr	r2, [r4, #0]
 80186c2:	3304      	adds	r3, #4
 80186c4:	eb02 0803 	add.w	r8, r2, r3
 80186c8:	f858 9c04 	ldr.w	r9, [r8, #-4]
 80186cc:	f1b9 0f00 	cmp.w	r9, #0
 80186d0:	d025      	beq.n	801871e <uxr_next_input_reliable_buffer_available+0x86>
 80186d2:	6923      	ldr	r3, [r4, #16]
 80186d4:	4605      	mov	r5, r0
 80186d6:	4640      	mov	r0, r8
 80186d8:	4798      	blx	r3
 80186da:	4682      	mov	sl, r0
 80186dc:	b310      	cbz	r0, 8018724 <uxr_next_input_reliable_buffer_available+0x8c>
 80186de:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80186e2:	e005      	b.n	80186f0 <uxr_next_input_reliable_buffer_available+0x58>
 80186e4:	6923      	ldr	r3, [r4, #16]
 80186e6:	4798      	blx	r3
 80186e8:	2802      	cmp	r0, #2
 80186ea:	d032      	beq.n	8018752 <uxr_next_input_reliable_buffer_available+0xba>
 80186ec:	2801      	cmp	r0, #1
 80186ee:	d116      	bne.n	801871e <uxr_next_input_reliable_buffer_available+0x86>
 80186f0:	4650      	mov	r0, sl
 80186f2:	2101      	movs	r1, #1
 80186f4:	f000 fbea 	bl	8018ecc <uxr_seq_num_add>
 80186f8:	8921      	ldrh	r1, [r4, #8]
 80186fa:	fbb0 f3f1 	udiv	r3, r0, r1
 80186fe:	fb01 0313 	mls	r3, r1, r3, r0
 8018702:	b29b      	uxth	r3, r3
 8018704:	6862      	ldr	r2, [r4, #4]
 8018706:	fbb2 f2f1 	udiv	r2, r2, r1
 801870a:	4682      	mov	sl, r0
 801870c:	fb03 f302 	mul.w	r3, r3, r2
 8018710:	6820      	ldr	r0, [r4, #0]
 8018712:	3304      	adds	r3, #4
 8018714:	4418      	add	r0, r3
 8018716:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801871a:	2b00      	cmp	r3, #0
 801871c:	d1e2      	bne.n	80186e4 <uxr_next_input_reliable_buffer_available+0x4c>
 801871e:	2000      	movs	r0, #0
 8018720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018724:	464a      	mov	r2, r9
 8018726:	4641      	mov	r1, r8
 8018728:	4630      	mov	r0, r6
 801872a:	f7f7 ff99 	bl	8010660 <ucdr_init_buffer>
 801872e:	8921      	ldrh	r1, [r4, #8]
 8018730:	fbb5 f3f1 	udiv	r3, r5, r1
 8018734:	fb01 5313 	mls	r3, r1, r3, r5
 8018738:	b29b      	uxth	r3, r3
 801873a:	6862      	ldr	r2, [r4, #4]
 801873c:	fbb2 f2f1 	udiv	r2, r2, r1
 8018740:	6821      	ldr	r1, [r4, #0]
 8018742:	fb03 f302 	mul.w	r3, r3, r2
 8018746:	2001      	movs	r0, #1
 8018748:	f841 a003 	str.w	sl, [r1, r3]
 801874c:	81a5      	strh	r5, [r4, #12]
 801874e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018752:	8922      	ldrh	r2, [r4, #8]
 8018754:	fbb5 f0f2 	udiv	r0, r5, r2
 8018758:	fb02 5510 	mls	r5, r2, r0, r5
 801875c:	b2ad      	uxth	r5, r5
 801875e:	6863      	ldr	r3, [r4, #4]
 8018760:	fbb3 f3f2 	udiv	r3, r3, r2
 8018764:	fb05 f503 	mul.w	r5, r5, r3
 8018768:	6823      	ldr	r3, [r4, #0]
 801876a:	2000      	movs	r0, #0
 801876c:	5158      	str	r0, [r3, r5]
 801876e:	eba9 0207 	sub.w	r2, r9, r7
 8018772:	eb08 0107 	add.w	r1, r8, r7
 8018776:	4630      	mov	r0, r6
 8018778:	f7f7 ff72 	bl	8010660 <ucdr_init_buffer>
 801877c:	4630      	mov	r0, r6
 801877e:	4904      	ldr	r1, [pc, #16]	@ (8018790 <uxr_next_input_reliable_buffer_available+0xf8>)
 8018780:	4622      	mov	r2, r4
 8018782:	f7f7 ff43 	bl	801060c <ucdr_set_on_full_buffer_callback>
 8018786:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801878a:	2001      	movs	r0, #1
 801878c:	e7c8      	b.n	8018720 <uxr_next_input_reliable_buffer_available+0x88>
 801878e:	bf00      	nop
 8018790:	080184ad 	.word	0x080184ad

08018794 <uxr_process_heartbeat>:
 8018794:	b538      	push	{r3, r4, r5, lr}
 8018796:	4611      	mov	r1, r2
 8018798:	4604      	mov	r4, r0
 801879a:	89c0      	ldrh	r0, [r0, #14]
 801879c:	4615      	mov	r5, r2
 801879e:	f000 fb9d 	bl	8018edc <uxr_seq_num_cmp>
 80187a2:	2800      	cmp	r0, #0
 80187a4:	bfb8      	it	lt
 80187a6:	81e5      	strhlt	r5, [r4, #14]
 80187a8:	bd38      	pop	{r3, r4, r5, pc}
 80187aa:	bf00      	nop

080187ac <uxr_compute_acknack>:
 80187ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187b0:	8903      	ldrh	r3, [r0, #8]
 80187b2:	8986      	ldrh	r6, [r0, #12]
 80187b4:	4604      	mov	r4, r0
 80187b6:	460d      	mov	r5, r1
 80187b8:	b1d3      	cbz	r3, 80187f0 <uxr_compute_acknack+0x44>
 80187ba:	4630      	mov	r0, r6
 80187bc:	2701      	movs	r7, #1
 80187be:	e003      	b.n	80187c8 <uxr_compute_acknack+0x1c>
 80187c0:	4567      	cmp	r7, ip
 80187c2:	d215      	bcs.n	80187f0 <uxr_compute_acknack+0x44>
 80187c4:	89a0      	ldrh	r0, [r4, #12]
 80187c6:	3701      	adds	r7, #1
 80187c8:	b2b9      	uxth	r1, r7
 80187ca:	f000 fb7f 	bl	8018ecc <uxr_seq_num_add>
 80187ce:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80187d2:	fbb0 f2fc 	udiv	r2, r0, ip
 80187d6:	e9d4 1300 	ldrd	r1, r3, [r4]
 80187da:	fb0c 0212 	mls	r2, ip, r2, r0
 80187de:	b292      	uxth	r2, r2
 80187e0:	fbb3 f3fc 	udiv	r3, r3, ip
 80187e4:	fb02 1303 	mla	r3, r2, r3, r1
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d1e8      	bne.n	80187c0 <uxr_compute_acknack+0x14>
 80187ee:	4606      	mov	r6, r0
 80187f0:	802e      	strh	r6, [r5, #0]
 80187f2:	4630      	mov	r0, r6
 80187f4:	2101      	movs	r1, #1
 80187f6:	89e6      	ldrh	r6, [r4, #14]
 80187f8:	f000 fb6c 	bl	8018ed4 <uxr_seq_num_sub>
 80187fc:	4601      	mov	r1, r0
 80187fe:	4630      	mov	r0, r6
 8018800:	f000 fb68 	bl	8018ed4 <uxr_seq_num_sub>
 8018804:	4606      	mov	r6, r0
 8018806:	b318      	cbz	r0, 8018850 <uxr_compute_acknack+0xa4>
 8018808:	f04f 0900 	mov.w	r9, #0
 801880c:	464f      	mov	r7, r9
 801880e:	f04f 0801 	mov.w	r8, #1
 8018812:	fa1f f189 	uxth.w	r1, r9
 8018816:	8828      	ldrh	r0, [r5, #0]
 8018818:	f000 fb58 	bl	8018ecc <uxr_seq_num_add>
 801881c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018820:	6822      	ldr	r2, [r4, #0]
 8018822:	fbb0 f1fc 	udiv	r1, r0, ip
 8018826:	fb01 011c 	mls	r1, r1, ip, r0
 801882a:	b289      	uxth	r1, r1
 801882c:	6863      	ldr	r3, [r4, #4]
 801882e:	fbb3 f3fc 	udiv	r3, r3, ip
 8018832:	fb01 2303 	mla	r3, r1, r3, r2
 8018836:	fa08 f209 	lsl.w	r2, r8, r9
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	f109 0901 	add.w	r9, r9, #1
 8018840:	b90b      	cbnz	r3, 8018846 <uxr_compute_acknack+0x9a>
 8018842:	4317      	orrs	r7, r2
 8018844:	b2bf      	uxth	r7, r7
 8018846:	454e      	cmp	r6, r9
 8018848:	d1e3      	bne.n	8018812 <uxr_compute_acknack+0x66>
 801884a:	4638      	mov	r0, r7
 801884c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018850:	4607      	mov	r7, r0
 8018852:	4638      	mov	r0, r7
 8018854:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018858 <uxr_init_output_best_effort_stream>:
 8018858:	b410      	push	{r4}
 801885a:	f64f 74ff 	movw	r4, #65535	@ 0xffff
 801885e:	81c4      	strh	r4, [r0, #14]
 8018860:	e9c0 1300 	strd	r1, r3, [r0]
 8018864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018868:	7303      	strb	r3, [r0, #12]
 801886a:	6082      	str	r2, [r0, #8]
 801886c:	4770      	bx	lr
 801886e:	bf00      	nop

08018870 <uxr_reset_output_best_effort_stream>:
 8018870:	7b02      	ldrb	r2, [r0, #12]
 8018872:	6042      	str	r2, [r0, #4]
 8018874:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018878:	81c3      	strh	r3, [r0, #14]
 801887a:	4770      	bx	lr

0801887c <uxr_prepare_best_effort_buffer_to_write>:
 801887c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801887e:	4604      	mov	r4, r0
 8018880:	b083      	sub	sp, #12
 8018882:	6840      	ldr	r0, [r0, #4]
 8018884:	460d      	mov	r5, r1
 8018886:	4616      	mov	r6, r2
 8018888:	f7fa fa66 	bl	8012d58 <uxr_submessage_padding>
 801888c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8018890:	4410      	add	r0, r2
 8018892:	1942      	adds	r2, r0, r5
 8018894:	4293      	cmp	r3, r2
 8018896:	bf2c      	ite	cs
 8018898:	2701      	movcs	r7, #1
 801889a:	2700      	movcc	r7, #0
 801889c:	d202      	bcs.n	80188a4 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801889e:	4638      	mov	r0, r7
 80188a0:	b003      	add	sp, #12
 80188a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188a4:	9000      	str	r0, [sp, #0]
 80188a6:	6821      	ldr	r1, [r4, #0]
 80188a8:	4630      	mov	r0, r6
 80188aa:	2300      	movs	r3, #0
 80188ac:	f7f7 fec6 	bl	801063c <ucdr_init_buffer_origin_offset>
 80188b0:	6861      	ldr	r1, [r4, #4]
 80188b2:	4638      	mov	r0, r7
 80188b4:	4429      	add	r1, r5
 80188b6:	6061      	str	r1, [r4, #4]
 80188b8:	b003      	add	sp, #12
 80188ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080188bc <uxr_prepare_best_effort_buffer_to_send>:
 80188bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188c0:	6845      	ldr	r5, [r0, #4]
 80188c2:	4604      	mov	r4, r0
 80188c4:	7b00      	ldrb	r0, [r0, #12]
 80188c6:	4285      	cmp	r5, r0
 80188c8:	bf8c      	ite	hi
 80188ca:	2701      	movhi	r7, #1
 80188cc:	2700      	movls	r7, #0
 80188ce:	d802      	bhi.n	80188d6 <uxr_prepare_best_effort_buffer_to_send+0x1a>
 80188d0:	4638      	mov	r0, r7
 80188d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188d6:	4688      	mov	r8, r1
 80188d8:	89e0      	ldrh	r0, [r4, #14]
 80188da:	2101      	movs	r1, #1
 80188dc:	4615      	mov	r5, r2
 80188de:	461e      	mov	r6, r3
 80188e0:	f000 faf4 	bl	8018ecc <uxr_seq_num_add>
 80188e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80188e8:	81e0      	strh	r0, [r4, #14]
 80188ea:	8030      	strh	r0, [r6, #0]
 80188ec:	f8c8 2000 	str.w	r2, [r8]
 80188f0:	602b      	str	r3, [r5, #0]
 80188f2:	7b23      	ldrb	r3, [r4, #12]
 80188f4:	6063      	str	r3, [r4, #4]
 80188f6:	4638      	mov	r0, r7
 80188f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080188fc <on_full_output_buffer>:
 80188fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188fe:	6802      	ldr	r2, [r0, #0]
 8018900:	460d      	mov	r5, r1
 8018902:	6809      	ldr	r1, [r1, #0]
 8018904:	892f      	ldrh	r7, [r5, #8]
 8018906:	686c      	ldr	r4, [r5, #4]
 8018908:	fbb4 f4f7 	udiv	r4, r4, r7
 801890c:	1a53      	subs	r3, r2, r1
 801890e:	fbb3 f3f4 	udiv	r3, r3, r4
 8018912:	3301      	adds	r3, #1
 8018914:	b29b      	uxth	r3, r3
 8018916:	fbb3 f2f7 	udiv	r2, r3, r7
 801891a:	fb07 3312 	mls	r3, r7, r2, r3
 801891e:	b29b      	uxth	r3, r3
 8018920:	fb04 f403 	mul.w	r4, r4, r3
 8018924:	7b2f      	ldrb	r7, [r5, #12]
 8018926:	590a      	ldr	r2, [r1, r4]
 8018928:	6903      	ldr	r3, [r0, #16]
 801892a:	443c      	add	r4, r7
 801892c:	3408      	adds	r4, #8
 801892e:	1bd2      	subs	r2, r2, r7
 8018930:	4606      	mov	r6, r0
 8018932:	4421      	add	r1, r4
 8018934:	3a04      	subs	r2, #4
 8018936:	f7f7 fe8b 	bl	8010650 <ucdr_init_buffer_origin>
 801893a:	4630      	mov	r0, r6
 801893c:	4902      	ldr	r1, [pc, #8]	@ (8018948 <on_full_output_buffer+0x4c>)
 801893e:	462a      	mov	r2, r5
 8018940:	f7f7 fe64 	bl	801060c <ucdr_set_on_full_buffer_callback>
 8018944:	2000      	movs	r0, #0
 8018946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018948:	080188fd 	.word	0x080188fd

0801894c <uxr_init_output_reliable_stream>:
 801894c:	b430      	push	{r4, r5}
 801894e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8018952:	6001      	str	r1, [r0, #0]
 8018954:	8103      	strh	r3, [r0, #8]
 8018956:	6042      	str	r2, [r0, #4]
 8018958:	7304      	strb	r4, [r0, #12]
 801895a:	b1b3      	cbz	r3, 801898a <uxr_init_output_reliable_stream+0x3e>
 801895c:	600c      	str	r4, [r1, #0]
 801895e:	8901      	ldrh	r1, [r0, #8]
 8018960:	2901      	cmp	r1, #1
 8018962:	d912      	bls.n	801898a <uxr_init_output_reliable_stream+0x3e>
 8018964:	2201      	movs	r2, #1
 8018966:	e9d0 5400 	ldrd	r5, r4, [r0]
 801896a:	fbb2 f3f1 	udiv	r3, r2, r1
 801896e:	fb01 2313 	mls	r3, r1, r3, r2
 8018972:	b29b      	uxth	r3, r3
 8018974:	fbb4 f1f1 	udiv	r1, r4, r1
 8018978:	fb03 f301 	mul.w	r3, r3, r1
 801897c:	7b01      	ldrb	r1, [r0, #12]
 801897e:	50e9      	str	r1, [r5, r3]
 8018980:	3201      	adds	r2, #1
 8018982:	8901      	ldrh	r1, [r0, #8]
 8018984:	b292      	uxth	r2, r2
 8018986:	4291      	cmp	r1, r2
 8018988:	d8ed      	bhi.n	8018966 <uxr_init_output_reliable_stream+0x1a>
 801898a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801898e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018992:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018996:	4b05      	ldr	r3, [pc, #20]	@ (80189ac <uxr_init_output_reliable_stream+0x60>)
 8018998:	f8c0 300e 	str.w	r3, [r0, #14]
 801899c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80189a0:	2300      	movs	r3, #0
 80189a2:	bc30      	pop	{r4, r5}
 80189a4:	8242      	strh	r2, [r0, #18]
 80189a6:	8403      	strh	r3, [r0, #32]
 80189a8:	4770      	bx	lr
 80189aa:	bf00      	nop
 80189ac:	ffff0000 	.word	0xffff0000

080189b0 <uxr_reset_output_reliable_stream>:
 80189b0:	8902      	ldrh	r2, [r0, #8]
 80189b2:	b430      	push	{r4, r5}
 80189b4:	b19a      	cbz	r2, 80189de <uxr_reset_output_reliable_stream+0x2e>
 80189b6:	2400      	movs	r4, #0
 80189b8:	4621      	mov	r1, r4
 80189ba:	fbb1 f3f2 	udiv	r3, r1, r2
 80189be:	fb02 1313 	mls	r3, r2, r3, r1
 80189c2:	e9d0 5100 	ldrd	r5, r1, [r0]
 80189c6:	b29b      	uxth	r3, r3
 80189c8:	fbb1 f2f2 	udiv	r2, r1, r2
 80189cc:	fb03 f302 	mul.w	r3, r3, r2
 80189d0:	7b02      	ldrb	r2, [r0, #12]
 80189d2:	50ea      	str	r2, [r5, r3]
 80189d4:	3401      	adds	r4, #1
 80189d6:	8902      	ldrh	r2, [r0, #8]
 80189d8:	b2a1      	uxth	r1, r4
 80189da:	428a      	cmp	r2, r1
 80189dc:	d8ed      	bhi.n	80189ba <uxr_reset_output_reliable_stream+0xa>
 80189de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80189e2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80189e6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80189ea:	4b05      	ldr	r3, [pc, #20]	@ (8018a00 <uxr_reset_output_reliable_stream+0x50>)
 80189ec:	f8c0 300e 	str.w	r3, [r0, #14]
 80189f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80189f4:	2300      	movs	r3, #0
 80189f6:	bc30      	pop	{r4, r5}
 80189f8:	8242      	strh	r2, [r0, #18]
 80189fa:	8403      	strh	r3, [r0, #32]
 80189fc:	4770      	bx	lr
 80189fe:	bf00      	nop
 8018a00:	ffff0000 	.word	0xffff0000

08018a04 <uxr_prepare_reliable_buffer_to_write>:
 8018a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a08:	89c5      	ldrh	r5, [r0, #14]
 8018a0a:	4604      	mov	r4, r0
 8018a0c:	8900      	ldrh	r0, [r0, #8]
 8018a0e:	fbb5 f3f0 	udiv	r3, r5, r0
 8018a12:	4688      	mov	r8, r1
 8018a14:	e9d4 1600 	ldrd	r1, r6, [r4]
 8018a18:	fb00 5313 	mls	r3, r0, r3, r5
 8018a1c:	b29b      	uxth	r3, r3
 8018a1e:	fbb6 f0f0 	udiv	r0, r6, r0
 8018a22:	fb00 f303 	mul.w	r3, r0, r3
 8018a26:	3304      	adds	r3, #4
 8018a28:	18cb      	adds	r3, r1, r3
 8018a2a:	b091      	sub	sp, #68	@ 0x44
 8018a2c:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8018a30:	9004      	str	r0, [sp, #16]
 8018a32:	2104      	movs	r1, #4
 8018a34:	4630      	mov	r0, r6
 8018a36:	9305      	str	r3, [sp, #20]
 8018a38:	9206      	str	r2, [sp, #24]
 8018a3a:	f7f7 fe15 	bl	8010668 <ucdr_alignment>
 8018a3e:	1833      	adds	r3, r6, r0
 8018a40:	9804      	ldr	r0, [sp, #16]
 8018a42:	9303      	str	r3, [sp, #12]
 8018a44:	eb03 0708 	add.w	r7, r3, r8
 8018a48:	1f06      	subs	r6, r0, #4
 8018a4a:	42b7      	cmp	r7, r6
 8018a4c:	f240 80dc 	bls.w	8018c08 <uxr_prepare_reliable_buffer_to_write+0x204>
 8018a50:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8018a54:	eb0e 0308 	add.w	r3, lr, r8
 8018a58:	42b3      	cmp	r3, r6
 8018a5a:	f240 80c2 	bls.w	8018be2 <uxr_prepare_reliable_buffer_to_write+0x1de>
 8018a5e:	9b03      	ldr	r3, [sp, #12]
 8018a60:	3304      	adds	r3, #4
 8018a62:	42b3      	cmp	r3, r6
 8018a64:	f080 8112 	bcs.w	8018c8c <uxr_prepare_reliable_buffer_to_write+0x288>
 8018a68:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018a6c:	f1bc 0f00 	cmp.w	ip, #0
 8018a70:	f000 8127 	beq.w	8018cc2 <uxr_prepare_reliable_buffer_to_write+0x2be>
 8018a74:	e9d4 7300 	ldrd	r7, r3, [r4]
 8018a78:	2100      	movs	r1, #0
 8018a7a:	4608      	mov	r0, r1
 8018a7c:	460a      	mov	r2, r1
 8018a7e:	fbb3 f9fc 	udiv	r9, r3, ip
 8018a82:	fbb2 f3fc 	udiv	r3, r2, ip
 8018a86:	fb0c 2313 	mls	r3, ip, r3, r2
 8018a8a:	b29b      	uxth	r3, r3
 8018a8c:	fb09 7303 	mla	r3, r9, r3, r7
 8018a90:	3101      	adds	r1, #1
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	459e      	cmp	lr, r3
 8018a96:	bf08      	it	eq
 8018a98:	3001      	addeq	r0, #1
 8018a9a:	b28a      	uxth	r2, r1
 8018a9c:	bf08      	it	eq
 8018a9e:	b280      	uxtheq	r0, r0
 8018aa0:	4562      	cmp	r2, ip
 8018aa2:	d3ee      	bcc.n	8018a82 <uxr_prepare_reliable_buffer_to_write+0x7e>
 8018aa4:	9b03      	ldr	r3, [sp, #12]
 8018aa6:	1f37      	subs	r7, r6, #4
 8018aa8:	b2bf      	uxth	r7, r7
 8018aaa:	eba7 0903 	sub.w	r9, r7, r3
 8018aae:	fa1f f989 	uxth.w	r9, r9
 8018ab2:	eba7 070e 	sub.w	r7, r7, lr
 8018ab6:	b2bf      	uxth	r7, r7
 8018ab8:	eba8 0809 	sub.w	r8, r8, r9
 8018abc:	fbb8 faf7 	udiv	sl, r8, r7
 8018ac0:	fb07 831a 	mls	r3, r7, sl, r8
 8018ac4:	9707      	str	r7, [sp, #28]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	f040 80bf 	bne.w	8018c4a <uxr_prepare_reliable_buffer_to_write+0x246>
 8018acc:	fa1f fa8a 	uxth.w	sl, sl
 8018ad0:	4582      	cmp	sl, r0
 8018ad2:	f200 8095 	bhi.w	8018c00 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8018ad6:	f10d 0b20 	add.w	fp, sp, #32
 8018ada:	f1ba 0f00 	cmp.w	sl, #0
 8018ade:	d03a      	beq.n	8018b56 <uxr_prepare_reliable_buffer_to_write+0x152>
 8018ae0:	f04f 0800 	mov.w	r8, #0
 8018ae4:	f10d 0b20 	add.w	fp, sp, #32
 8018ae8:	e000      	b.n	8018aec <uxr_prepare_reliable_buffer_to_write+0xe8>
 8018aea:	46b9      	mov	r9, r7
 8018aec:	e9d4 3200 	ldrd	r3, r2, [r4]
 8018af0:	fbb5 f1fc 	udiv	r1, r5, ip
 8018af4:	fb0c 5111 	mls	r1, ip, r1, r5
 8018af8:	b289      	uxth	r1, r1
 8018afa:	fbb2 f2fc 	udiv	r2, r2, ip
 8018afe:	fb01 f102 	mul.w	r1, r1, r2
 8018b02:	3104      	adds	r1, #4
 8018b04:	4419      	add	r1, r3
 8018b06:	4632      	mov	r2, r6
 8018b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b0c:	9300      	str	r3, [sp, #0]
 8018b0e:	4658      	mov	r0, fp
 8018b10:	2300      	movs	r3, #0
 8018b12:	f7f7 fd93 	bl	801063c <ucdr_init_buffer_origin_offset>
 8018b16:	464a      	mov	r2, r9
 8018b18:	2300      	movs	r3, #0
 8018b1a:	210d      	movs	r1, #13
 8018b1c:	4658      	mov	r0, fp
 8018b1e:	f7fa f8db 	bl	8012cd8 <uxr_buffer_submessage_header>
 8018b22:	8920      	ldrh	r0, [r4, #8]
 8018b24:	fbb5 f3f0 	udiv	r3, r5, r0
 8018b28:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018b2c:	fb00 5313 	mls	r3, r0, r3, r5
 8018b30:	b29b      	uxth	r3, r3
 8018b32:	fbb1 f1f0 	udiv	r1, r1, r0
 8018b36:	fb03 f301 	mul.w	r3, r3, r1
 8018b3a:	4628      	mov	r0, r5
 8018b3c:	50d6      	str	r6, [r2, r3]
 8018b3e:	2101      	movs	r1, #1
 8018b40:	f000 f9c4 	bl	8018ecc <uxr_seq_num_add>
 8018b44:	f108 0801 	add.w	r8, r8, #1
 8018b48:	fa1f f388 	uxth.w	r3, r8
 8018b4c:	459a      	cmp	sl, r3
 8018b4e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018b52:	4605      	mov	r5, r0
 8018b54:	d8c9      	bhi.n	8018aea <uxr_prepare_reliable_buffer_to_write+0xe6>
 8018b56:	fbb5 f1fc 	udiv	r1, r5, ip
 8018b5a:	fb0c 5111 	mls	r1, ip, r1, r5
 8018b5e:	b289      	uxth	r1, r1
 8018b60:	6863      	ldr	r3, [r4, #4]
 8018b62:	fbb3 fcfc 	udiv	ip, r3, ip
 8018b66:	6823      	ldr	r3, [r4, #0]
 8018b68:	fb01 f10c 	mul.w	r1, r1, ip
 8018b6c:	3104      	adds	r1, #4
 8018b6e:	4419      	add	r1, r3
 8018b70:	4632      	mov	r2, r6
 8018b72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b76:	9300      	str	r3, [sp, #0]
 8018b78:	4658      	mov	r0, fp
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	f7f7 fd5e 	bl	801063c <ucdr_init_buffer_origin_offset>
 8018b80:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018b84:	4658      	mov	r0, fp
 8018b86:	fa1f f288 	uxth.w	r2, r8
 8018b8a:	2302      	movs	r3, #2
 8018b8c:	210d      	movs	r1, #13
 8018b8e:	f7fa f8a3 	bl	8012cd8 <uxr_buffer_submessage_header>
 8018b92:	e9d4 3200 	ldrd	r3, r2, [r4]
 8018b96:	8921      	ldrh	r1, [r4, #8]
 8018b98:	9f03      	ldr	r7, [sp, #12]
 8018b9a:	9307      	str	r3, [sp, #28]
 8018b9c:	9b05      	ldr	r3, [sp, #20]
 8018b9e:	7b26      	ldrb	r6, [r4, #12]
 8018ba0:	fbb5 f0f1 	udiv	r0, r5, r1
 8018ba4:	fbb2 f2f1 	udiv	r2, r2, r1
 8018ba8:	fb01 5010 	mls	r0, r1, r0, r5
 8018bac:	1d39      	adds	r1, r7, #4
 8018bae:	440b      	add	r3, r1
 8018bb0:	b280      	uxth	r0, r0
 8018bb2:	fb00 f002 	mul.w	r0, r0, r2
 8018bb6:	4619      	mov	r1, r3
 8018bb8:	3604      	adds	r6, #4
 8018bba:	9b07      	ldr	r3, [sp, #28]
 8018bbc:	9a04      	ldr	r2, [sp, #16]
 8018bbe:	4446      	add	r6, r8
 8018bc0:	501e      	str	r6, [r3, r0]
 8018bc2:	9e06      	ldr	r6, [sp, #24]
 8018bc4:	3a08      	subs	r2, #8
 8018bc6:	1bd2      	subs	r2, r2, r7
 8018bc8:	4630      	mov	r0, r6
 8018bca:	f7f7 fd49 	bl	8010660 <ucdr_init_buffer>
 8018bce:	4630      	mov	r0, r6
 8018bd0:	493d      	ldr	r1, [pc, #244]	@ (8018cc8 <uxr_prepare_reliable_buffer_to_write+0x2c4>)
 8018bd2:	4622      	mov	r2, r4
 8018bd4:	f7f7 fd1a 	bl	801060c <ucdr_set_on_full_buffer_callback>
 8018bd8:	2001      	movs	r0, #1
 8018bda:	81e5      	strh	r5, [r4, #14]
 8018bdc:	b011      	add	sp, #68	@ 0x44
 8018bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018be2:	2101      	movs	r1, #1
 8018be4:	89e0      	ldrh	r0, [r4, #14]
 8018be6:	f000 f971 	bl	8018ecc <uxr_seq_num_add>
 8018bea:	8921      	ldrh	r1, [r4, #8]
 8018bec:	4605      	mov	r5, r0
 8018bee:	8a60      	ldrh	r0, [r4, #18]
 8018bf0:	f000 f96c 	bl	8018ecc <uxr_seq_num_add>
 8018bf4:	4601      	mov	r1, r0
 8018bf6:	4628      	mov	r0, r5
 8018bf8:	f000 f970 	bl	8018edc <uxr_seq_num_cmp>
 8018bfc:	2800      	cmp	r0, #0
 8018bfe:	dd2a      	ble.n	8018c56 <uxr_prepare_reliable_buffer_to_write+0x252>
 8018c00:	2000      	movs	r0, #0
 8018c02:	b011      	add	sp, #68	@ 0x44
 8018c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c08:	8921      	ldrh	r1, [r4, #8]
 8018c0a:	8a60      	ldrh	r0, [r4, #18]
 8018c0c:	f000 f95e 	bl	8018ecc <uxr_seq_num_add>
 8018c10:	4601      	mov	r1, r0
 8018c12:	4628      	mov	r0, r5
 8018c14:	f000 f962 	bl	8018edc <uxr_seq_num_cmp>
 8018c18:	2800      	cmp	r0, #0
 8018c1a:	dcf1      	bgt.n	8018c00 <uxr_prepare_reliable_buffer_to_write+0x1fc>
 8018c1c:	8921      	ldrh	r1, [r4, #8]
 8018c1e:	fbb5 f3f1 	udiv	r3, r5, r1
 8018c22:	e9d4 4200 	ldrd	r4, r2, [r4]
 8018c26:	fb01 5313 	mls	r3, r1, r3, r5
 8018c2a:	b29b      	uxth	r3, r3
 8018c2c:	fbb2 f2f1 	udiv	r2, r2, r1
 8018c30:	fb03 f302 	mul.w	r3, r3, r2
 8018c34:	e9dd 1005 	ldrd	r1, r0, [sp, #20]
 8018c38:	50e7      	str	r7, [r4, r3]
 8018c3a:	9b03      	ldr	r3, [sp, #12]
 8018c3c:	9300      	str	r3, [sp, #0]
 8018c3e:	463a      	mov	r2, r7
 8018c40:	2300      	movs	r3, #0
 8018c42:	f7f7 fcfb 	bl	801063c <ucdr_init_buffer_origin_offset>
 8018c46:	2001      	movs	r0, #1
 8018c48:	e7db      	b.n	8018c02 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8018c4a:	f10a 0a01 	add.w	sl, sl, #1
 8018c4e:	fa1f fa8a 	uxth.w	sl, sl
 8018c52:	9307      	str	r3, [sp, #28]
 8018c54:	e73c      	b.n	8018ad0 <uxr_prepare_reliable_buffer_to_write+0xcc>
 8018c56:	8920      	ldrh	r0, [r4, #8]
 8018c58:	fbb5 f3f0 	udiv	r3, r5, r0
 8018c5c:	fb00 5313 	mls	r3, r0, r3, r5
 8018c60:	b29b      	uxth	r3, r3
 8018c62:	6862      	ldr	r2, [r4, #4]
 8018c64:	6821      	ldr	r1, [r4, #0]
 8018c66:	fbb2 f0f0 	udiv	r0, r2, r0
 8018c6a:	fb03 f300 	mul.w	r3, r3, r0
 8018c6e:	7b22      	ldrb	r2, [r4, #12]
 8018c70:	9806      	ldr	r0, [sp, #24]
 8018c72:	3304      	adds	r3, #4
 8018c74:	4419      	add	r1, r3
 8018c76:	4442      	add	r2, r8
 8018c78:	f841 2c04 	str.w	r2, [r1, #-4]
 8018c7c:	7b23      	ldrb	r3, [r4, #12]
 8018c7e:	9300      	str	r3, [sp, #0]
 8018c80:	2300      	movs	r3, #0
 8018c82:	f7f7 fcdb 	bl	801063c <ucdr_init_buffer_origin_offset>
 8018c86:	81e5      	strh	r5, [r4, #14]
 8018c88:	2001      	movs	r0, #1
 8018c8a:	e7ba      	b.n	8018c02 <uxr_prepare_reliable_buffer_to_write+0x1fe>
 8018c8c:	4628      	mov	r0, r5
 8018c8e:	2101      	movs	r1, #1
 8018c90:	f000 f91c 	bl	8018ecc <uxr_seq_num_add>
 8018c94:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018c98:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018c9c:	fbb3 f1fc 	udiv	r1, r3, ip
 8018ca0:	fbb0 f3fc 	udiv	r3, r0, ip
 8018ca4:	fb0c 0313 	mls	r3, ip, r3, r0
 8018ca8:	b29b      	uxth	r3, r3
 8018caa:	fb03 f301 	mul.w	r3, r3, r1
 8018cae:	3304      	adds	r3, #4
 8018cb0:	18d3      	adds	r3, r2, r3
 8018cb2:	9305      	str	r3, [sp, #20]
 8018cb4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018cb8:	f894 e00c 	ldrb.w	lr, [r4, #12]
 8018cbc:	9303      	str	r3, [sp, #12]
 8018cbe:	4605      	mov	r5, r0
 8018cc0:	e6d4      	b.n	8018a6c <uxr_prepare_reliable_buffer_to_write+0x68>
 8018cc2:	4660      	mov	r0, ip
 8018cc4:	e6ee      	b.n	8018aa4 <uxr_prepare_reliable_buffer_to_write+0xa0>
 8018cc6:	bf00      	nop
 8018cc8:	080188fd 	.word	0x080188fd

08018ccc <uxr_prepare_next_reliable_buffer_to_send>:
 8018ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cd0:	4605      	mov	r5, r0
 8018cd2:	4688      	mov	r8, r1
 8018cd4:	8a00      	ldrh	r0, [r0, #16]
 8018cd6:	2101      	movs	r1, #1
 8018cd8:	4617      	mov	r7, r2
 8018cda:	461e      	mov	r6, r3
 8018cdc:	f000 f8f6 	bl	8018ecc <uxr_seq_num_add>
 8018ce0:	8030      	strh	r0, [r6, #0]
 8018ce2:	892a      	ldrh	r2, [r5, #8]
 8018ce4:	fbb0 f3f2 	udiv	r3, r0, r2
 8018ce8:	fb02 0413 	mls	r4, r2, r3, r0
 8018cec:	b2a4      	uxth	r4, r4
 8018cee:	686b      	ldr	r3, [r5, #4]
 8018cf0:	fbb3 f2f2 	udiv	r2, r3, r2
 8018cf4:	682b      	ldr	r3, [r5, #0]
 8018cf6:	89e9      	ldrh	r1, [r5, #14]
 8018cf8:	fb04 f402 	mul.w	r4, r4, r2
 8018cfc:	3404      	adds	r4, #4
 8018cfe:	4423      	add	r3, r4
 8018d00:	f8c8 3000 	str.w	r3, [r8]
 8018d04:	682b      	ldr	r3, [r5, #0]
 8018d06:	441c      	add	r4, r3
 8018d08:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018d0c:	603b      	str	r3, [r7, #0]
 8018d0e:	f000 f8e5 	bl	8018edc <uxr_seq_num_cmp>
 8018d12:	2800      	cmp	r0, #0
 8018d14:	dd02      	ble.n	8018d1c <uxr_prepare_next_reliable_buffer_to_send+0x50>
 8018d16:	2000      	movs	r0, #0
 8018d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d1c:	683a      	ldr	r2, [r7, #0]
 8018d1e:	7b2b      	ldrb	r3, [r5, #12]
 8018d20:	429a      	cmp	r2, r3
 8018d22:	d9f8      	bls.n	8018d16 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018d24:	8a69      	ldrh	r1, [r5, #18]
 8018d26:	8a28      	ldrh	r0, [r5, #16]
 8018d28:	f000 f8d4 	bl	8018ed4 <uxr_seq_num_sub>
 8018d2c:	892b      	ldrh	r3, [r5, #8]
 8018d2e:	4283      	cmp	r3, r0
 8018d30:	d0f1      	beq.n	8018d16 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018d32:	8830      	ldrh	r0, [r6, #0]
 8018d34:	89eb      	ldrh	r3, [r5, #14]
 8018d36:	8228      	strh	r0, [r5, #16]
 8018d38:	4298      	cmp	r0, r3
 8018d3a:	d002      	beq.n	8018d42 <uxr_prepare_next_reliable_buffer_to_send+0x76>
 8018d3c:	2001      	movs	r0, #1
 8018d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d42:	2101      	movs	r1, #1
 8018d44:	f000 f8c2 	bl	8018ecc <uxr_seq_num_add>
 8018d48:	81e8      	strh	r0, [r5, #14]
 8018d4a:	2001      	movs	r0, #1
 8018d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018d50 <uxr_update_output_stream_heartbeat_timestamp>:
 8018d50:	b5d0      	push	{r4, r6, r7, lr}
 8018d52:	8a01      	ldrh	r1, [r0, #16]
 8018d54:	4604      	mov	r4, r0
 8018d56:	8a40      	ldrh	r0, [r0, #18]
 8018d58:	4616      	mov	r6, r2
 8018d5a:	461f      	mov	r7, r3
 8018d5c:	f000 f8be 	bl	8018edc <uxr_seq_num_cmp>
 8018d60:	2800      	cmp	r0, #0
 8018d62:	db07      	blt.n	8018d74 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018d64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018d68:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018d6c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018d70:	2000      	movs	r0, #0
 8018d72:	bdd0      	pop	{r4, r6, r7, pc}
 8018d74:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018d78:	b948      	cbnz	r0, 8018d8e <uxr_update_output_stream_heartbeat_timestamp+0x3e>
 8018d7a:	2301      	movs	r3, #1
 8018d7c:	f884 3020 	strb.w	r3, [r4, #32]
 8018d80:	f116 0364 	adds.w	r3, r6, #100	@ 0x64
 8018d84:	f147 0200 	adc.w	r2, r7, #0
 8018d88:	e9c4 3206 	strd	r3, r2, [r4, #24]
 8018d8c:	bdd0      	pop	{r4, r6, r7, pc}
 8018d8e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018d92:	4296      	cmp	r6, r2
 8018d94:	eb77 0303 	sbcs.w	r3, r7, r3
 8018d98:	bfa5      	ittet	ge
 8018d9a:	3001      	addge	r0, #1
 8018d9c:	f884 0020 	strbge.w	r0, [r4, #32]
 8018da0:	2000      	movlt	r0, #0
 8018da2:	2001      	movge	r0, #1
 8018da4:	e7ec      	b.n	8018d80 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8018da6:	bf00      	nop

08018da8 <uxr_begin_output_nack_buffer_it>:
 8018da8:	8a40      	ldrh	r0, [r0, #18]
 8018daa:	4770      	bx	lr

08018dac <uxr_next_reliable_nack_buffer_to_send>:
 8018dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018db0:	f890 9021 	ldrb.w	r9, [r0, #33]	@ 0x21
 8018db4:	f1b9 0f00 	cmp.w	r9, #0
 8018db8:	d011      	beq.n	8018dde <uxr_next_reliable_nack_buffer_to_send+0x32>
 8018dba:	4605      	mov	r5, r0
 8018dbc:	8818      	ldrh	r0, [r3, #0]
 8018dbe:	460f      	mov	r7, r1
 8018dc0:	4690      	mov	r8, r2
 8018dc2:	461e      	mov	r6, r3
 8018dc4:	2101      	movs	r1, #1
 8018dc6:	f000 f881 	bl	8018ecc <uxr_seq_num_add>
 8018dca:	8030      	strh	r0, [r6, #0]
 8018dcc:	8a29      	ldrh	r1, [r5, #16]
 8018dce:	f000 f885 	bl	8018edc <uxr_seq_num_cmp>
 8018dd2:	2800      	cmp	r0, #0
 8018dd4:	dd06      	ble.n	8018de4 <uxr_next_reliable_nack_buffer_to_send+0x38>
 8018dd6:	f04f 0900 	mov.w	r9, #0
 8018dda:	f885 9021 	strb.w	r9, [r5, #33]	@ 0x21
 8018dde:	4648      	mov	r0, r9
 8018de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018de4:	892a      	ldrh	r2, [r5, #8]
 8018de6:	8830      	ldrh	r0, [r6, #0]
 8018de8:	fbb0 f4f2 	udiv	r4, r0, r2
 8018dec:	fb02 0414 	mls	r4, r2, r4, r0
 8018df0:	b2a4      	uxth	r4, r4
 8018df2:	686b      	ldr	r3, [r5, #4]
 8018df4:	fbb3 f2f2 	udiv	r2, r3, r2
 8018df8:	682b      	ldr	r3, [r5, #0]
 8018dfa:	fb04 f402 	mul.w	r4, r4, r2
 8018dfe:	3404      	adds	r4, #4
 8018e00:	4423      	add	r3, r4
 8018e02:	603b      	str	r3, [r7, #0]
 8018e04:	682b      	ldr	r3, [r5, #0]
 8018e06:	441c      	add	r4, r3
 8018e08:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8018e0c:	f8c8 3000 	str.w	r3, [r8]
 8018e10:	7b2a      	ldrb	r2, [r5, #12]
 8018e12:	429a      	cmp	r2, r3
 8018e14:	d0d6      	beq.n	8018dc4 <uxr_next_reliable_nack_buffer_to_send+0x18>
 8018e16:	4648      	mov	r0, r9
 8018e18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018e1c <uxr_process_acknack>:
 8018e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e1e:	4604      	mov	r4, r0
 8018e20:	460e      	mov	r6, r1
 8018e22:	4610      	mov	r0, r2
 8018e24:	2101      	movs	r1, #1
 8018e26:	f000 f855 	bl	8018ed4 <uxr_seq_num_sub>
 8018e2a:	8a61      	ldrh	r1, [r4, #18]
 8018e2c:	f000 f852 	bl	8018ed4 <uxr_seq_num_sub>
 8018e30:	b1c0      	cbz	r0, 8018e64 <uxr_process_acknack+0x48>
 8018e32:	4605      	mov	r5, r0
 8018e34:	2700      	movs	r7, #0
 8018e36:	2101      	movs	r1, #1
 8018e38:	8a60      	ldrh	r0, [r4, #18]
 8018e3a:	f000 f847 	bl	8018ecc <uxr_seq_num_add>
 8018e3e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018e42:	fbb0 f3fc 	udiv	r3, r0, ip
 8018e46:	e9d4 2100 	ldrd	r2, r1, [r4]
 8018e4a:	fb0c 0313 	mls	r3, ip, r3, r0
 8018e4e:	b29b      	uxth	r3, r3
 8018e50:	fbb1 f1fc 	udiv	r1, r1, ip
 8018e54:	3701      	adds	r7, #1
 8018e56:	fb03 f301 	mul.w	r3, r3, r1
 8018e5a:	42bd      	cmp	r5, r7
 8018e5c:	7b21      	ldrb	r1, [r4, #12]
 8018e5e:	8260      	strh	r0, [r4, #18]
 8018e60:	50d1      	str	r1, [r2, r3]
 8018e62:	d1e8      	bne.n	8018e36 <uxr_process_acknack+0x1a>
 8018e64:	3e00      	subs	r6, #0
 8018e66:	f04f 0300 	mov.w	r3, #0
 8018e6a:	bf18      	it	ne
 8018e6c:	2601      	movne	r6, #1
 8018e6e:	f884 3020 	strb.w	r3, [r4, #32]
 8018e72:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8018e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018e78 <uxr_is_output_up_to_date>:
 8018e78:	8a01      	ldrh	r1, [r0, #16]
 8018e7a:	8a40      	ldrh	r0, [r0, #18]
 8018e7c:	b508      	push	{r3, lr}
 8018e7e:	f000 f82d 	bl	8018edc <uxr_seq_num_cmp>
 8018e82:	fab0 f080 	clz	r0, r0
 8018e86:	0940      	lsrs	r0, r0, #5
 8018e88:	bd08      	pop	{r3, pc}
 8018e8a:	bf00      	nop

08018e8c <get_available_free_slots>:
 8018e8c:	8901      	ldrh	r1, [r0, #8]
 8018e8e:	b1d9      	cbz	r1, 8018ec8 <get_available_free_slots+0x3c>
 8018e90:	b4f0      	push	{r4, r5, r6, r7}
 8018e92:	2400      	movs	r4, #0
 8018e94:	6845      	ldr	r5, [r0, #4]
 8018e96:	6807      	ldr	r7, [r0, #0]
 8018e98:	7b06      	ldrb	r6, [r0, #12]
 8018e9a:	fbb5 f5f1 	udiv	r5, r5, r1
 8018e9e:	4620      	mov	r0, r4
 8018ea0:	4622      	mov	r2, r4
 8018ea2:	fbb2 f3f1 	udiv	r3, r2, r1
 8018ea6:	fb01 2313 	mls	r3, r1, r3, r2
 8018eaa:	b29b      	uxth	r3, r3
 8018eac:	fb05 7303 	mla	r3, r5, r3, r7
 8018eb0:	3401      	adds	r4, #1
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	429e      	cmp	r6, r3
 8018eb6:	bf08      	it	eq
 8018eb8:	3001      	addeq	r0, #1
 8018eba:	b2a2      	uxth	r2, r4
 8018ebc:	bf08      	it	eq
 8018ebe:	b280      	uxtheq	r0, r0
 8018ec0:	428a      	cmp	r2, r1
 8018ec2:	d3ee      	bcc.n	8018ea2 <get_available_free_slots+0x16>
 8018ec4:	bcf0      	pop	{r4, r5, r6, r7}
 8018ec6:	4770      	bx	lr
 8018ec8:	4608      	mov	r0, r1
 8018eca:	4770      	bx	lr

08018ecc <uxr_seq_num_add>:
 8018ecc:	4408      	add	r0, r1
 8018ece:	b280      	uxth	r0, r0
 8018ed0:	4770      	bx	lr
 8018ed2:	bf00      	nop

08018ed4 <uxr_seq_num_sub>:
 8018ed4:	1a40      	subs	r0, r0, r1
 8018ed6:	b280      	uxth	r0, r0
 8018ed8:	4770      	bx	lr
 8018eda:	bf00      	nop

08018edc <uxr_seq_num_cmp>:
 8018edc:	4288      	cmp	r0, r1
 8018ede:	d011      	beq.n	8018f04 <uxr_seq_num_cmp+0x28>
 8018ee0:	d309      	bcc.n	8018ef6 <uxr_seq_num_cmp+0x1a>
 8018ee2:	4288      	cmp	r0, r1
 8018ee4:	d910      	bls.n	8018f08 <uxr_seq_num_cmp+0x2c>
 8018ee6:	1a40      	subs	r0, r0, r1
 8018ee8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8018eec:	bfd4      	ite	le
 8018eee:	2001      	movle	r0, #1
 8018ef0:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8018ef4:	4770      	bx	lr
 8018ef6:	1a0b      	subs	r3, r1, r0
 8018ef8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018efc:	daf1      	bge.n	8018ee2 <uxr_seq_num_cmp+0x6>
 8018efe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018f02:	4770      	bx	lr
 8018f04:	2000      	movs	r0, #0
 8018f06:	4770      	bx	lr
 8018f08:	2001      	movs	r0, #1
 8018f0a:	4770      	bx	lr

08018f0c <rcl_get_default_domain_id>:
 8018f0c:	b530      	push	{r4, r5, lr}
 8018f0e:	b083      	sub	sp, #12
 8018f10:	2300      	movs	r3, #0
 8018f12:	9300      	str	r3, [sp, #0]
 8018f14:	b1d0      	cbz	r0, 8018f4c <rcl_get_default_domain_id+0x40>
 8018f16:	4604      	mov	r4, r0
 8018f18:	4669      	mov	r1, sp
 8018f1a:	4815      	ldr	r0, [pc, #84]	@ (8018f70 <rcl_get_default_domain_id+0x64>)
 8018f1c:	f7fd faf0 	bl	8016500 <rcutils_get_env>
 8018f20:	4602      	mov	r2, r0
 8018f22:	b110      	cbz	r0, 8018f2a <rcl_get_default_domain_id+0x1e>
 8018f24:	2001      	movs	r0, #1
 8018f26:	b003      	add	sp, #12
 8018f28:	bd30      	pop	{r4, r5, pc}
 8018f2a:	9b00      	ldr	r3, [sp, #0]
 8018f2c:	b18b      	cbz	r3, 8018f52 <rcl_get_default_domain_id+0x46>
 8018f2e:	7818      	ldrb	r0, [r3, #0]
 8018f30:	2800      	cmp	r0, #0
 8018f32:	d0f8      	beq.n	8018f26 <rcl_get_default_domain_id+0x1a>
 8018f34:	4618      	mov	r0, r3
 8018f36:	a901      	add	r1, sp, #4
 8018f38:	9201      	str	r2, [sp, #4]
 8018f3a:	f000 fb1d 	bl	8019578 <strtoul>
 8018f3e:	4605      	mov	r5, r0
 8018f40:	b150      	cbz	r0, 8018f58 <rcl_get_default_domain_id+0x4c>
 8018f42:	1c43      	adds	r3, r0, #1
 8018f44:	d00d      	beq.n	8018f62 <rcl_get_default_domain_id+0x56>
 8018f46:	6025      	str	r5, [r4, #0]
 8018f48:	2000      	movs	r0, #0
 8018f4a:	e7ec      	b.n	8018f26 <rcl_get_default_domain_id+0x1a>
 8018f4c:	200b      	movs	r0, #11
 8018f4e:	b003      	add	sp, #12
 8018f50:	bd30      	pop	{r4, r5, pc}
 8018f52:	4618      	mov	r0, r3
 8018f54:	b003      	add	sp, #12
 8018f56:	bd30      	pop	{r4, r5, pc}
 8018f58:	9b01      	ldr	r3, [sp, #4]
 8018f5a:	781b      	ldrb	r3, [r3, #0]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d0f2      	beq.n	8018f46 <rcl_get_default_domain_id+0x3a>
 8018f60:	e7e0      	b.n	8018f24 <rcl_get_default_domain_id+0x18>
 8018f62:	f001 fd1d 	bl	801a9a0 <__errno>
 8018f66:	6803      	ldr	r3, [r0, #0]
 8018f68:	2b22      	cmp	r3, #34	@ 0x22
 8018f6a:	d1ec      	bne.n	8018f46 <rcl_get_default_domain_id+0x3a>
 8018f6c:	e7da      	b.n	8018f24 <rcl_get_default_domain_id+0x18>
 8018f6e:	bf00      	nop
 8018f70:	0801e828 	.word	0x0801e828

08018f74 <rcl_get_zero_initialized_guard_condition>:
 8018f74:	4a03      	ldr	r2, [pc, #12]	@ (8018f84 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018f76:	4603      	mov	r3, r0
 8018f78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018f7c:	e883 0003 	stmia.w	r3, {r0, r1}
 8018f80:	4618      	mov	r0, r3
 8018f82:	4770      	bx	lr
 8018f84:	0801e838 	.word	0x0801e838

08018f88 <rcl_guard_condition_init_from_rmw>:
 8018f88:	b082      	sub	sp, #8
 8018f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f8e:	b086      	sub	sp, #24
 8018f90:	ac0c      	add	r4, sp, #48	@ 0x30
 8018f92:	4684      	mov	ip, r0
 8018f94:	f844 3f04 	str.w	r3, [r4, #4]!
 8018f98:	460f      	mov	r7, r1
 8018f9a:	4690      	mov	r8, r2
 8018f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018f9e:	ad01      	add	r5, sp, #4
 8018fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018fa2:	6823      	ldr	r3, [r4, #0]
 8018fa4:	602b      	str	r3, [r5, #0]
 8018fa6:	a801      	add	r0, sp, #4
 8018fa8:	4664      	mov	r4, ip
 8018faa:	f7f5 fe77 	bl	800ec9c <rcutils_allocator_is_valid>
 8018fae:	b328      	cbz	r0, 8018ffc <rcl_guard_condition_init_from_rmw+0x74>
 8018fb0:	b324      	cbz	r4, 8018ffc <rcl_guard_condition_init_from_rmw+0x74>
 8018fb2:	6866      	ldr	r6, [r4, #4]
 8018fb4:	b9e6      	cbnz	r6, 8018ff0 <rcl_guard_condition_init_from_rmw+0x68>
 8018fb6:	f1b8 0f00 	cmp.w	r8, #0
 8018fba:	d01f      	beq.n	8018ffc <rcl_guard_condition_init_from_rmw+0x74>
 8018fbc:	4640      	mov	r0, r8
 8018fbe:	f7fb f95b 	bl	8014278 <rcl_context_is_valid>
 8018fc2:	b308      	cbz	r0, 8019008 <rcl_guard_condition_init_from_rmw+0x80>
 8018fc4:	9b01      	ldr	r3, [sp, #4]
 8018fc6:	9905      	ldr	r1, [sp, #20]
 8018fc8:	201c      	movs	r0, #28
 8018fca:	4798      	blx	r3
 8018fcc:	4605      	mov	r5, r0
 8018fce:	6060      	str	r0, [r4, #4]
 8018fd0:	b340      	cbz	r0, 8019024 <rcl_guard_condition_init_from_rmw+0x9c>
 8018fd2:	b1df      	cbz	r7, 801900c <rcl_guard_condition_init_from_rmw+0x84>
 8018fd4:	6007      	str	r7, [r0, #0]
 8018fd6:	7106      	strb	r6, [r0, #4]
 8018fd8:	ac01      	add	r4, sp, #4
 8018fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018fdc:	3508      	adds	r5, #8
 8018fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018fe0:	6823      	ldr	r3, [r4, #0]
 8018fe2:	602b      	str	r3, [r5, #0]
 8018fe4:	2000      	movs	r0, #0
 8018fe6:	b006      	add	sp, #24
 8018fe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018fec:	b002      	add	sp, #8
 8018fee:	4770      	bx	lr
 8018ff0:	2064      	movs	r0, #100	@ 0x64
 8018ff2:	b006      	add	sp, #24
 8018ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018ff8:	b002      	add	sp, #8
 8018ffa:	4770      	bx	lr
 8018ffc:	200b      	movs	r0, #11
 8018ffe:	b006      	add	sp, #24
 8019000:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019004:	b002      	add	sp, #8
 8019006:	4770      	bx	lr
 8019008:	2065      	movs	r0, #101	@ 0x65
 801900a:	e7f2      	b.n	8018ff2 <rcl_guard_condition_init_from_rmw+0x6a>
 801900c:	f8d8 0000 	ldr.w	r0, [r8]
 8019010:	3028      	adds	r0, #40	@ 0x28
 8019012:	f000 f857 	bl	80190c4 <rmw_create_guard_condition>
 8019016:	6028      	str	r0, [r5, #0]
 8019018:	6865      	ldr	r5, [r4, #4]
 801901a:	682e      	ldr	r6, [r5, #0]
 801901c:	b126      	cbz	r6, 8019028 <rcl_guard_condition_init_from_rmw+0xa0>
 801901e:	2301      	movs	r3, #1
 8019020:	712b      	strb	r3, [r5, #4]
 8019022:	e7d9      	b.n	8018fd8 <rcl_guard_condition_init_from_rmw+0x50>
 8019024:	200a      	movs	r0, #10
 8019026:	e7e4      	b.n	8018ff2 <rcl_guard_condition_init_from_rmw+0x6a>
 8019028:	4628      	mov	r0, r5
 801902a:	9b02      	ldr	r3, [sp, #8]
 801902c:	9905      	ldr	r1, [sp, #20]
 801902e:	4798      	blx	r3
 8019030:	6066      	str	r6, [r4, #4]
 8019032:	2001      	movs	r0, #1
 8019034:	e7dd      	b.n	8018ff2 <rcl_guard_condition_init_from_rmw+0x6a>
 8019036:	bf00      	nop

08019038 <rcl_guard_condition_fini>:
 8019038:	b570      	push	{r4, r5, r6, lr}
 801903a:	b082      	sub	sp, #8
 801903c:	b1f0      	cbz	r0, 801907c <rcl_guard_condition_fini+0x44>
 801903e:	4604      	mov	r4, r0
 8019040:	6840      	ldr	r0, [r0, #4]
 8019042:	b158      	cbz	r0, 801905c <rcl_guard_condition_fini+0x24>
 8019044:	6803      	ldr	r3, [r0, #0]
 8019046:	68c6      	ldr	r6, [r0, #12]
 8019048:	6981      	ldr	r1, [r0, #24]
 801904a:	b15b      	cbz	r3, 8019064 <rcl_guard_condition_fini+0x2c>
 801904c:	7905      	ldrb	r5, [r0, #4]
 801904e:	b95d      	cbnz	r5, 8019068 <rcl_guard_condition_fini+0x30>
 8019050:	47b0      	blx	r6
 8019052:	2300      	movs	r3, #0
 8019054:	4628      	mov	r0, r5
 8019056:	6063      	str	r3, [r4, #4]
 8019058:	b002      	add	sp, #8
 801905a:	bd70      	pop	{r4, r5, r6, pc}
 801905c:	4605      	mov	r5, r0
 801905e:	4628      	mov	r0, r5
 8019060:	b002      	add	sp, #8
 8019062:	bd70      	pop	{r4, r5, r6, pc}
 8019064:	461d      	mov	r5, r3
 8019066:	e7f3      	b.n	8019050 <rcl_guard_condition_fini+0x18>
 8019068:	4618      	mov	r0, r3
 801906a:	9101      	str	r1, [sp, #4]
 801906c:	f000 f83e 	bl	80190ec <rmw_destroy_guard_condition>
 8019070:	1e05      	subs	r5, r0, #0
 8019072:	9901      	ldr	r1, [sp, #4]
 8019074:	6860      	ldr	r0, [r4, #4]
 8019076:	bf18      	it	ne
 8019078:	2501      	movne	r5, #1
 801907a:	e7e9      	b.n	8019050 <rcl_guard_condition_fini+0x18>
 801907c:	250b      	movs	r5, #11
 801907e:	4628      	mov	r0, r5
 8019080:	b002      	add	sp, #8
 8019082:	bd70      	pop	{r4, r5, r6, pc}

08019084 <rcl_guard_condition_get_default_options>:
 8019084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019086:	b087      	sub	sp, #28
 8019088:	4607      	mov	r7, r0
 801908a:	466c      	mov	r4, sp
 801908c:	4668      	mov	r0, sp
 801908e:	f7f5 fdf7 	bl	800ec80 <rcutils_get_default_allocator>
 8019092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019094:	4d07      	ldr	r5, [pc, #28]	@ (80190b4 <rcl_guard_condition_get_default_options+0x30>)
 8019096:	f8d4 c000 	ldr.w	ip, [r4]
 801909a:	462e      	mov	r6, r5
 801909c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801909e:	462c      	mov	r4, r5
 80190a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80190a2:	463c      	mov	r4, r7
 80190a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80190a6:	4638      	mov	r0, r7
 80190a8:	f8c6 c000 	str.w	ip, [r6]
 80190ac:	f8c4 c000 	str.w	ip, [r4]
 80190b0:	b007      	add	sp, #28
 80190b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190b4:	20009e98 	.word	0x20009e98

080190b8 <rcl_guard_condition_get_rmw_handle>:
 80190b8:	b110      	cbz	r0, 80190c0 <rcl_guard_condition_get_rmw_handle+0x8>
 80190ba:	6840      	ldr	r0, [r0, #4]
 80190bc:	b100      	cbz	r0, 80190c0 <rcl_guard_condition_get_rmw_handle+0x8>
 80190be:	6800      	ldr	r0, [r0, #0]
 80190c0:	4770      	bx	lr
 80190c2:	bf00      	nop

080190c4 <rmw_create_guard_condition>:
 80190c4:	b538      	push	{r3, r4, r5, lr}
 80190c6:	4605      	mov	r5, r0
 80190c8:	4807      	ldr	r0, [pc, #28]	@ (80190e8 <rmw_create_guard_condition+0x24>)
 80190ca:	f7fd fd13 	bl	8016af4 <get_memory>
 80190ce:	b148      	cbz	r0, 80190e4 <rmw_create_guard_condition+0x20>
 80190d0:	68c4      	ldr	r4, [r0, #12]
 80190d2:	2300      	movs	r3, #0
 80190d4:	61e5      	str	r5, [r4, #28]
 80190d6:	7423      	strb	r3, [r4, #16]
 80190d8:	f7fd fd74 	bl	8016bc4 <rmw_get_implementation_identifier>
 80190dc:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80190e0:	f104 0014 	add.w	r0, r4, #20
 80190e4:	bd38      	pop	{r3, r4, r5, pc}
 80190e6:	bf00      	nop
 80190e8:	2000d1b8 	.word	0x2000d1b8

080190ec <rmw_destroy_guard_condition>:
 80190ec:	b508      	push	{r3, lr}
 80190ee:	4b08      	ldr	r3, [pc, #32]	@ (8019110 <rmw_destroy_guard_condition+0x24>)
 80190f0:	6819      	ldr	r1, [r3, #0]
 80190f2:	b911      	cbnz	r1, 80190fa <rmw_destroy_guard_condition+0xe>
 80190f4:	e00a      	b.n	801910c <rmw_destroy_guard_condition+0x20>
 80190f6:	6889      	ldr	r1, [r1, #8]
 80190f8:	b141      	cbz	r1, 801910c <rmw_destroy_guard_condition+0x20>
 80190fa:	68cb      	ldr	r3, [r1, #12]
 80190fc:	3314      	adds	r3, #20
 80190fe:	4298      	cmp	r0, r3
 8019100:	d1f9      	bne.n	80190f6 <rmw_destroy_guard_condition+0xa>
 8019102:	4803      	ldr	r0, [pc, #12]	@ (8019110 <rmw_destroy_guard_condition+0x24>)
 8019104:	f7fd fd06 	bl	8016b14 <put_memory>
 8019108:	2000      	movs	r0, #0
 801910a:	bd08      	pop	{r3, pc}
 801910c:	2001      	movs	r0, #1
 801910e:	bd08      	pop	{r3, pc}
 8019110:	2000d1b8 	.word	0x2000d1b8

08019114 <calloc>:
 8019114:	4b02      	ldr	r3, [pc, #8]	@ (8019120 <calloc+0xc>)
 8019116:	460a      	mov	r2, r1
 8019118:	4601      	mov	r1, r0
 801911a:	6818      	ldr	r0, [r3, #0]
 801911c:	f000 b802 	b.w	8019124 <_calloc_r>
 8019120:	20000090 	.word	0x20000090

08019124 <_calloc_r>:
 8019124:	b570      	push	{r4, r5, r6, lr}
 8019126:	fba1 5402 	umull	r5, r4, r1, r2
 801912a:	b93c      	cbnz	r4, 801913c <_calloc_r+0x18>
 801912c:	4629      	mov	r1, r5
 801912e:	f000 f887 	bl	8019240 <_malloc_r>
 8019132:	4606      	mov	r6, r0
 8019134:	b928      	cbnz	r0, 8019142 <_calloc_r+0x1e>
 8019136:	2600      	movs	r6, #0
 8019138:	4630      	mov	r0, r6
 801913a:	bd70      	pop	{r4, r5, r6, pc}
 801913c:	220c      	movs	r2, #12
 801913e:	6002      	str	r2, [r0, #0]
 8019140:	e7f9      	b.n	8019136 <_calloc_r+0x12>
 8019142:	462a      	mov	r2, r5
 8019144:	4621      	mov	r1, r4
 8019146:	f001 fb3d 	bl	801a7c4 <memset>
 801914a:	e7f5      	b.n	8019138 <_calloc_r+0x14>

0801914c <getenv>:
 801914c:	b507      	push	{r0, r1, r2, lr}
 801914e:	4b04      	ldr	r3, [pc, #16]	@ (8019160 <getenv+0x14>)
 8019150:	4601      	mov	r1, r0
 8019152:	aa01      	add	r2, sp, #4
 8019154:	6818      	ldr	r0, [r3, #0]
 8019156:	f000 f805 	bl	8019164 <_findenv_r>
 801915a:	b003      	add	sp, #12
 801915c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019160:	20000090 	.word	0x20000090

08019164 <_findenv_r>:
 8019164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019168:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 80191d8 <_findenv_r+0x74>
 801916c:	4606      	mov	r6, r0
 801916e:	4689      	mov	r9, r1
 8019170:	4617      	mov	r7, r2
 8019172:	f002 fac9 	bl	801b708 <__env_lock>
 8019176:	f8da 4000 	ldr.w	r4, [sl]
 801917a:	b134      	cbz	r4, 801918a <_findenv_r+0x26>
 801917c:	464b      	mov	r3, r9
 801917e:	4698      	mov	r8, r3
 8019180:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019184:	b13a      	cbz	r2, 8019196 <_findenv_r+0x32>
 8019186:	2a3d      	cmp	r2, #61	@ 0x3d
 8019188:	d1f9      	bne.n	801917e <_findenv_r+0x1a>
 801918a:	4630      	mov	r0, r6
 801918c:	f002 fac2 	bl	801b714 <__env_unlock>
 8019190:	2000      	movs	r0, #0
 8019192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019196:	eba8 0809 	sub.w	r8, r8, r9
 801919a:	46a3      	mov	fp, r4
 801919c:	f854 0b04 	ldr.w	r0, [r4], #4
 80191a0:	2800      	cmp	r0, #0
 80191a2:	d0f2      	beq.n	801918a <_findenv_r+0x26>
 80191a4:	4642      	mov	r2, r8
 80191a6:	4649      	mov	r1, r9
 80191a8:	f001 fb21 	bl	801a7ee <strncmp>
 80191ac:	2800      	cmp	r0, #0
 80191ae:	d1f4      	bne.n	801919a <_findenv_r+0x36>
 80191b0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80191b4:	eb03 0508 	add.w	r5, r3, r8
 80191b8:	f813 3008 	ldrb.w	r3, [r3, r8]
 80191bc:	2b3d      	cmp	r3, #61	@ 0x3d
 80191be:	d1ec      	bne.n	801919a <_findenv_r+0x36>
 80191c0:	f8da 3000 	ldr.w	r3, [sl]
 80191c4:	ebab 0303 	sub.w	r3, fp, r3
 80191c8:	109b      	asrs	r3, r3, #2
 80191ca:	4630      	mov	r0, r6
 80191cc:	603b      	str	r3, [r7, #0]
 80191ce:	f002 faa1 	bl	801b714 <__env_unlock>
 80191d2:	1c68      	adds	r0, r5, #1
 80191d4:	e7dd      	b.n	8019192 <_findenv_r+0x2e>
 80191d6:	bf00      	nop
 80191d8:	20000004 	.word	0x20000004

080191dc <malloc>:
 80191dc:	4b02      	ldr	r3, [pc, #8]	@ (80191e8 <malloc+0xc>)
 80191de:	4601      	mov	r1, r0
 80191e0:	6818      	ldr	r0, [r3, #0]
 80191e2:	f000 b82d 	b.w	8019240 <_malloc_r>
 80191e6:	bf00      	nop
 80191e8:	20000090 	.word	0x20000090

080191ec <free>:
 80191ec:	4b02      	ldr	r3, [pc, #8]	@ (80191f8 <free+0xc>)
 80191ee:	4601      	mov	r1, r0
 80191f0:	6818      	ldr	r0, [r3, #0]
 80191f2:	f002 ba95 	b.w	801b720 <_free_r>
 80191f6:	bf00      	nop
 80191f8:	20000090 	.word	0x20000090

080191fc <sbrk_aligned>:
 80191fc:	b570      	push	{r4, r5, r6, lr}
 80191fe:	4e0f      	ldr	r6, [pc, #60]	@ (801923c <sbrk_aligned+0x40>)
 8019200:	460c      	mov	r4, r1
 8019202:	6831      	ldr	r1, [r6, #0]
 8019204:	4605      	mov	r5, r0
 8019206:	b911      	cbnz	r1, 801920e <sbrk_aligned+0x12>
 8019208:	f001 fba8 	bl	801a95c <_sbrk_r>
 801920c:	6030      	str	r0, [r6, #0]
 801920e:	4621      	mov	r1, r4
 8019210:	4628      	mov	r0, r5
 8019212:	f001 fba3 	bl	801a95c <_sbrk_r>
 8019216:	1c43      	adds	r3, r0, #1
 8019218:	d103      	bne.n	8019222 <sbrk_aligned+0x26>
 801921a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801921e:	4620      	mov	r0, r4
 8019220:	bd70      	pop	{r4, r5, r6, pc}
 8019222:	1cc4      	adds	r4, r0, #3
 8019224:	f024 0403 	bic.w	r4, r4, #3
 8019228:	42a0      	cmp	r0, r4
 801922a:	d0f8      	beq.n	801921e <sbrk_aligned+0x22>
 801922c:	1a21      	subs	r1, r4, r0
 801922e:	4628      	mov	r0, r5
 8019230:	f001 fb94 	bl	801a95c <_sbrk_r>
 8019234:	3001      	adds	r0, #1
 8019236:	d1f2      	bne.n	801921e <sbrk_aligned+0x22>
 8019238:	e7ef      	b.n	801921a <sbrk_aligned+0x1e>
 801923a:	bf00      	nop
 801923c:	20009eac 	.word	0x20009eac

08019240 <_malloc_r>:
 8019240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019244:	1ccd      	adds	r5, r1, #3
 8019246:	f025 0503 	bic.w	r5, r5, #3
 801924a:	3508      	adds	r5, #8
 801924c:	2d0c      	cmp	r5, #12
 801924e:	bf38      	it	cc
 8019250:	250c      	movcc	r5, #12
 8019252:	2d00      	cmp	r5, #0
 8019254:	4606      	mov	r6, r0
 8019256:	db01      	blt.n	801925c <_malloc_r+0x1c>
 8019258:	42a9      	cmp	r1, r5
 801925a:	d904      	bls.n	8019266 <_malloc_r+0x26>
 801925c:	230c      	movs	r3, #12
 801925e:	6033      	str	r3, [r6, #0]
 8019260:	2000      	movs	r0, #0
 8019262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019266:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801933c <_malloc_r+0xfc>
 801926a:	f000 f869 	bl	8019340 <__malloc_lock>
 801926e:	f8d8 3000 	ldr.w	r3, [r8]
 8019272:	461c      	mov	r4, r3
 8019274:	bb44      	cbnz	r4, 80192c8 <_malloc_r+0x88>
 8019276:	4629      	mov	r1, r5
 8019278:	4630      	mov	r0, r6
 801927a:	f7ff ffbf 	bl	80191fc <sbrk_aligned>
 801927e:	1c43      	adds	r3, r0, #1
 8019280:	4604      	mov	r4, r0
 8019282:	d158      	bne.n	8019336 <_malloc_r+0xf6>
 8019284:	f8d8 4000 	ldr.w	r4, [r8]
 8019288:	4627      	mov	r7, r4
 801928a:	2f00      	cmp	r7, #0
 801928c:	d143      	bne.n	8019316 <_malloc_r+0xd6>
 801928e:	2c00      	cmp	r4, #0
 8019290:	d04b      	beq.n	801932a <_malloc_r+0xea>
 8019292:	6823      	ldr	r3, [r4, #0]
 8019294:	4639      	mov	r1, r7
 8019296:	4630      	mov	r0, r6
 8019298:	eb04 0903 	add.w	r9, r4, r3
 801929c:	f001 fb5e 	bl	801a95c <_sbrk_r>
 80192a0:	4581      	cmp	r9, r0
 80192a2:	d142      	bne.n	801932a <_malloc_r+0xea>
 80192a4:	6821      	ldr	r1, [r4, #0]
 80192a6:	1a6d      	subs	r5, r5, r1
 80192a8:	4629      	mov	r1, r5
 80192aa:	4630      	mov	r0, r6
 80192ac:	f7ff ffa6 	bl	80191fc <sbrk_aligned>
 80192b0:	3001      	adds	r0, #1
 80192b2:	d03a      	beq.n	801932a <_malloc_r+0xea>
 80192b4:	6823      	ldr	r3, [r4, #0]
 80192b6:	442b      	add	r3, r5
 80192b8:	6023      	str	r3, [r4, #0]
 80192ba:	f8d8 3000 	ldr.w	r3, [r8]
 80192be:	685a      	ldr	r2, [r3, #4]
 80192c0:	bb62      	cbnz	r2, 801931c <_malloc_r+0xdc>
 80192c2:	f8c8 7000 	str.w	r7, [r8]
 80192c6:	e00f      	b.n	80192e8 <_malloc_r+0xa8>
 80192c8:	6822      	ldr	r2, [r4, #0]
 80192ca:	1b52      	subs	r2, r2, r5
 80192cc:	d420      	bmi.n	8019310 <_malloc_r+0xd0>
 80192ce:	2a0b      	cmp	r2, #11
 80192d0:	d917      	bls.n	8019302 <_malloc_r+0xc2>
 80192d2:	1961      	adds	r1, r4, r5
 80192d4:	42a3      	cmp	r3, r4
 80192d6:	6025      	str	r5, [r4, #0]
 80192d8:	bf18      	it	ne
 80192da:	6059      	strne	r1, [r3, #4]
 80192dc:	6863      	ldr	r3, [r4, #4]
 80192de:	bf08      	it	eq
 80192e0:	f8c8 1000 	streq.w	r1, [r8]
 80192e4:	5162      	str	r2, [r4, r5]
 80192e6:	604b      	str	r3, [r1, #4]
 80192e8:	4630      	mov	r0, r6
 80192ea:	f000 f82f 	bl	801934c <__malloc_unlock>
 80192ee:	f104 000b 	add.w	r0, r4, #11
 80192f2:	1d23      	adds	r3, r4, #4
 80192f4:	f020 0007 	bic.w	r0, r0, #7
 80192f8:	1ac2      	subs	r2, r0, r3
 80192fa:	bf1c      	itt	ne
 80192fc:	1a1b      	subne	r3, r3, r0
 80192fe:	50a3      	strne	r3, [r4, r2]
 8019300:	e7af      	b.n	8019262 <_malloc_r+0x22>
 8019302:	6862      	ldr	r2, [r4, #4]
 8019304:	42a3      	cmp	r3, r4
 8019306:	bf0c      	ite	eq
 8019308:	f8c8 2000 	streq.w	r2, [r8]
 801930c:	605a      	strne	r2, [r3, #4]
 801930e:	e7eb      	b.n	80192e8 <_malloc_r+0xa8>
 8019310:	4623      	mov	r3, r4
 8019312:	6864      	ldr	r4, [r4, #4]
 8019314:	e7ae      	b.n	8019274 <_malloc_r+0x34>
 8019316:	463c      	mov	r4, r7
 8019318:	687f      	ldr	r7, [r7, #4]
 801931a:	e7b6      	b.n	801928a <_malloc_r+0x4a>
 801931c:	461a      	mov	r2, r3
 801931e:	685b      	ldr	r3, [r3, #4]
 8019320:	42a3      	cmp	r3, r4
 8019322:	d1fb      	bne.n	801931c <_malloc_r+0xdc>
 8019324:	2300      	movs	r3, #0
 8019326:	6053      	str	r3, [r2, #4]
 8019328:	e7de      	b.n	80192e8 <_malloc_r+0xa8>
 801932a:	230c      	movs	r3, #12
 801932c:	6033      	str	r3, [r6, #0]
 801932e:	4630      	mov	r0, r6
 8019330:	f000 f80c 	bl	801934c <__malloc_unlock>
 8019334:	e794      	b.n	8019260 <_malloc_r+0x20>
 8019336:	6005      	str	r5, [r0, #0]
 8019338:	e7d6      	b.n	80192e8 <_malloc_r+0xa8>
 801933a:	bf00      	nop
 801933c:	20009eb0 	.word	0x20009eb0

08019340 <__malloc_lock>:
 8019340:	4801      	ldr	r0, [pc, #4]	@ (8019348 <__malloc_lock+0x8>)
 8019342:	f001 bb58 	b.w	801a9f6 <__retarget_lock_acquire_recursive>
 8019346:	bf00      	nop
 8019348:	20009ff5 	.word	0x20009ff5

0801934c <__malloc_unlock>:
 801934c:	4801      	ldr	r0, [pc, #4]	@ (8019354 <__malloc_unlock+0x8>)
 801934e:	f001 bb53 	b.w	801a9f8 <__retarget_lock_release_recursive>
 8019352:	bf00      	nop
 8019354:	20009ff5 	.word	0x20009ff5

08019358 <srand>:
 8019358:	b538      	push	{r3, r4, r5, lr}
 801935a:	4b10      	ldr	r3, [pc, #64]	@ (801939c <srand+0x44>)
 801935c:	681d      	ldr	r5, [r3, #0]
 801935e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019360:	4604      	mov	r4, r0
 8019362:	b9b3      	cbnz	r3, 8019392 <srand+0x3a>
 8019364:	2018      	movs	r0, #24
 8019366:	f7ff ff39 	bl	80191dc <malloc>
 801936a:	4602      	mov	r2, r0
 801936c:	6328      	str	r0, [r5, #48]	@ 0x30
 801936e:	b920      	cbnz	r0, 801937a <srand+0x22>
 8019370:	4b0b      	ldr	r3, [pc, #44]	@ (80193a0 <srand+0x48>)
 8019372:	480c      	ldr	r0, [pc, #48]	@ (80193a4 <srand+0x4c>)
 8019374:	2146      	movs	r1, #70	@ 0x46
 8019376:	f001 fb5d 	bl	801aa34 <__assert_func>
 801937a:	490b      	ldr	r1, [pc, #44]	@ (80193a8 <srand+0x50>)
 801937c:	4b0b      	ldr	r3, [pc, #44]	@ (80193ac <srand+0x54>)
 801937e:	e9c0 1300 	strd	r1, r3, [r0]
 8019382:	4b0b      	ldr	r3, [pc, #44]	@ (80193b0 <srand+0x58>)
 8019384:	6083      	str	r3, [r0, #8]
 8019386:	230b      	movs	r3, #11
 8019388:	8183      	strh	r3, [r0, #12]
 801938a:	2100      	movs	r1, #0
 801938c:	2001      	movs	r0, #1
 801938e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019392:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019394:	2200      	movs	r2, #0
 8019396:	611c      	str	r4, [r3, #16]
 8019398:	615a      	str	r2, [r3, #20]
 801939a:	bd38      	pop	{r3, r4, r5, pc}
 801939c:	20000090 	.word	0x20000090
 80193a0:	0801e840 	.word	0x0801e840
 80193a4:	0801e857 	.word	0x0801e857
 80193a8:	abcd330e 	.word	0xabcd330e
 80193ac:	e66d1234 	.word	0xe66d1234
 80193b0:	0005deec 	.word	0x0005deec

080193b4 <rand>:
 80193b4:	4b16      	ldr	r3, [pc, #88]	@ (8019410 <rand+0x5c>)
 80193b6:	b510      	push	{r4, lr}
 80193b8:	681c      	ldr	r4, [r3, #0]
 80193ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80193bc:	b9b3      	cbnz	r3, 80193ec <rand+0x38>
 80193be:	2018      	movs	r0, #24
 80193c0:	f7ff ff0c 	bl	80191dc <malloc>
 80193c4:	4602      	mov	r2, r0
 80193c6:	6320      	str	r0, [r4, #48]	@ 0x30
 80193c8:	b920      	cbnz	r0, 80193d4 <rand+0x20>
 80193ca:	4b12      	ldr	r3, [pc, #72]	@ (8019414 <rand+0x60>)
 80193cc:	4812      	ldr	r0, [pc, #72]	@ (8019418 <rand+0x64>)
 80193ce:	2152      	movs	r1, #82	@ 0x52
 80193d0:	f001 fb30 	bl	801aa34 <__assert_func>
 80193d4:	4911      	ldr	r1, [pc, #68]	@ (801941c <rand+0x68>)
 80193d6:	4b12      	ldr	r3, [pc, #72]	@ (8019420 <rand+0x6c>)
 80193d8:	e9c0 1300 	strd	r1, r3, [r0]
 80193dc:	4b11      	ldr	r3, [pc, #68]	@ (8019424 <rand+0x70>)
 80193de:	6083      	str	r3, [r0, #8]
 80193e0:	230b      	movs	r3, #11
 80193e2:	8183      	strh	r3, [r0, #12]
 80193e4:	2100      	movs	r1, #0
 80193e6:	2001      	movs	r0, #1
 80193e8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80193ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80193ee:	480e      	ldr	r0, [pc, #56]	@ (8019428 <rand+0x74>)
 80193f0:	690b      	ldr	r3, [r1, #16]
 80193f2:	694c      	ldr	r4, [r1, #20]
 80193f4:	4a0d      	ldr	r2, [pc, #52]	@ (801942c <rand+0x78>)
 80193f6:	4358      	muls	r0, r3
 80193f8:	fb02 0004 	mla	r0, r2, r4, r0
 80193fc:	fba3 3202 	umull	r3, r2, r3, r2
 8019400:	3301      	adds	r3, #1
 8019402:	eb40 0002 	adc.w	r0, r0, r2
 8019406:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801940a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801940e:	bd10      	pop	{r4, pc}
 8019410:	20000090 	.word	0x20000090
 8019414:	0801e840 	.word	0x0801e840
 8019418:	0801e857 	.word	0x0801e857
 801941c:	abcd330e 	.word	0xabcd330e
 8019420:	e66d1234 	.word	0xe66d1234
 8019424:	0005deec 	.word	0x0005deec
 8019428:	5851f42d 	.word	0x5851f42d
 801942c:	4c957f2d 	.word	0x4c957f2d

08019430 <realloc>:
 8019430:	4b02      	ldr	r3, [pc, #8]	@ (801943c <realloc+0xc>)
 8019432:	460a      	mov	r2, r1
 8019434:	4601      	mov	r1, r0
 8019436:	6818      	ldr	r0, [r3, #0]
 8019438:	f000 b802 	b.w	8019440 <_realloc_r>
 801943c:	20000090 	.word	0x20000090

08019440 <_realloc_r>:
 8019440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019444:	4680      	mov	r8, r0
 8019446:	4615      	mov	r5, r2
 8019448:	460c      	mov	r4, r1
 801944a:	b921      	cbnz	r1, 8019456 <_realloc_r+0x16>
 801944c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019450:	4611      	mov	r1, r2
 8019452:	f7ff bef5 	b.w	8019240 <_malloc_r>
 8019456:	b92a      	cbnz	r2, 8019464 <_realloc_r+0x24>
 8019458:	f002 f962 	bl	801b720 <_free_r>
 801945c:	2400      	movs	r4, #0
 801945e:	4620      	mov	r0, r4
 8019460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019464:	f002 fe58 	bl	801c118 <_malloc_usable_size_r>
 8019468:	4285      	cmp	r5, r0
 801946a:	4606      	mov	r6, r0
 801946c:	d802      	bhi.n	8019474 <_realloc_r+0x34>
 801946e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8019472:	d8f4      	bhi.n	801945e <_realloc_r+0x1e>
 8019474:	4629      	mov	r1, r5
 8019476:	4640      	mov	r0, r8
 8019478:	f7ff fee2 	bl	8019240 <_malloc_r>
 801947c:	4607      	mov	r7, r0
 801947e:	2800      	cmp	r0, #0
 8019480:	d0ec      	beq.n	801945c <_realloc_r+0x1c>
 8019482:	42b5      	cmp	r5, r6
 8019484:	462a      	mov	r2, r5
 8019486:	4621      	mov	r1, r4
 8019488:	bf28      	it	cs
 801948a:	4632      	movcs	r2, r6
 801948c:	f001 fabd 	bl	801aa0a <memcpy>
 8019490:	4621      	mov	r1, r4
 8019492:	4640      	mov	r0, r8
 8019494:	f002 f944 	bl	801b720 <_free_r>
 8019498:	463c      	mov	r4, r7
 801949a:	e7e0      	b.n	801945e <_realloc_r+0x1e>

0801949c <_strtoul_l.constprop.0>:
 801949c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80194a0:	4e34      	ldr	r6, [pc, #208]	@ (8019574 <_strtoul_l.constprop.0+0xd8>)
 80194a2:	4686      	mov	lr, r0
 80194a4:	460d      	mov	r5, r1
 80194a6:	4628      	mov	r0, r5
 80194a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80194ac:	5d37      	ldrb	r7, [r6, r4]
 80194ae:	f017 0708 	ands.w	r7, r7, #8
 80194b2:	d1f8      	bne.n	80194a6 <_strtoul_l.constprop.0+0xa>
 80194b4:	2c2d      	cmp	r4, #45	@ 0x2d
 80194b6:	d12f      	bne.n	8019518 <_strtoul_l.constprop.0+0x7c>
 80194b8:	782c      	ldrb	r4, [r5, #0]
 80194ba:	2701      	movs	r7, #1
 80194bc:	1c85      	adds	r5, r0, #2
 80194be:	f033 0010 	bics.w	r0, r3, #16
 80194c2:	d109      	bne.n	80194d8 <_strtoul_l.constprop.0+0x3c>
 80194c4:	2c30      	cmp	r4, #48	@ 0x30
 80194c6:	d12c      	bne.n	8019522 <_strtoul_l.constprop.0+0x86>
 80194c8:	7828      	ldrb	r0, [r5, #0]
 80194ca:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80194ce:	2858      	cmp	r0, #88	@ 0x58
 80194d0:	d127      	bne.n	8019522 <_strtoul_l.constprop.0+0x86>
 80194d2:	786c      	ldrb	r4, [r5, #1]
 80194d4:	2310      	movs	r3, #16
 80194d6:	3502      	adds	r5, #2
 80194d8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80194dc:	2600      	movs	r6, #0
 80194de:	fbb8 f8f3 	udiv	r8, r8, r3
 80194e2:	fb03 f908 	mul.w	r9, r3, r8
 80194e6:	ea6f 0909 	mvn.w	r9, r9
 80194ea:	4630      	mov	r0, r6
 80194ec:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80194f0:	f1bc 0f09 	cmp.w	ip, #9
 80194f4:	d81c      	bhi.n	8019530 <_strtoul_l.constprop.0+0x94>
 80194f6:	4664      	mov	r4, ip
 80194f8:	42a3      	cmp	r3, r4
 80194fa:	dd2a      	ble.n	8019552 <_strtoul_l.constprop.0+0xb6>
 80194fc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8019500:	d007      	beq.n	8019512 <_strtoul_l.constprop.0+0x76>
 8019502:	4580      	cmp	r8, r0
 8019504:	d322      	bcc.n	801954c <_strtoul_l.constprop.0+0xb0>
 8019506:	d101      	bne.n	801950c <_strtoul_l.constprop.0+0x70>
 8019508:	45a1      	cmp	r9, r4
 801950a:	db1f      	blt.n	801954c <_strtoul_l.constprop.0+0xb0>
 801950c:	fb00 4003 	mla	r0, r0, r3, r4
 8019510:	2601      	movs	r6, #1
 8019512:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019516:	e7e9      	b.n	80194ec <_strtoul_l.constprop.0+0x50>
 8019518:	2c2b      	cmp	r4, #43	@ 0x2b
 801951a:	bf04      	itt	eq
 801951c:	782c      	ldrbeq	r4, [r5, #0]
 801951e:	1c85      	addeq	r5, r0, #2
 8019520:	e7cd      	b.n	80194be <_strtoul_l.constprop.0+0x22>
 8019522:	2b00      	cmp	r3, #0
 8019524:	d1d8      	bne.n	80194d8 <_strtoul_l.constprop.0+0x3c>
 8019526:	2c30      	cmp	r4, #48	@ 0x30
 8019528:	bf0c      	ite	eq
 801952a:	2308      	moveq	r3, #8
 801952c:	230a      	movne	r3, #10
 801952e:	e7d3      	b.n	80194d8 <_strtoul_l.constprop.0+0x3c>
 8019530:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019534:	f1bc 0f19 	cmp.w	ip, #25
 8019538:	d801      	bhi.n	801953e <_strtoul_l.constprop.0+0xa2>
 801953a:	3c37      	subs	r4, #55	@ 0x37
 801953c:	e7dc      	b.n	80194f8 <_strtoul_l.constprop.0+0x5c>
 801953e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019542:	f1bc 0f19 	cmp.w	ip, #25
 8019546:	d804      	bhi.n	8019552 <_strtoul_l.constprop.0+0xb6>
 8019548:	3c57      	subs	r4, #87	@ 0x57
 801954a:	e7d5      	b.n	80194f8 <_strtoul_l.constprop.0+0x5c>
 801954c:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8019550:	e7df      	b.n	8019512 <_strtoul_l.constprop.0+0x76>
 8019552:	1c73      	adds	r3, r6, #1
 8019554:	d106      	bne.n	8019564 <_strtoul_l.constprop.0+0xc8>
 8019556:	2322      	movs	r3, #34	@ 0x22
 8019558:	f8ce 3000 	str.w	r3, [lr]
 801955c:	4630      	mov	r0, r6
 801955e:	b932      	cbnz	r2, 801956e <_strtoul_l.constprop.0+0xd2>
 8019560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019564:	b107      	cbz	r7, 8019568 <_strtoul_l.constprop.0+0xcc>
 8019566:	4240      	negs	r0, r0
 8019568:	2a00      	cmp	r2, #0
 801956a:	d0f9      	beq.n	8019560 <_strtoul_l.constprop.0+0xc4>
 801956c:	b106      	cbz	r6, 8019570 <_strtoul_l.constprop.0+0xd4>
 801956e:	1e69      	subs	r1, r5, #1
 8019570:	6011      	str	r1, [r2, #0]
 8019572:	e7f5      	b.n	8019560 <_strtoul_l.constprop.0+0xc4>
 8019574:	0801e8b0 	.word	0x0801e8b0

08019578 <strtoul>:
 8019578:	4613      	mov	r3, r2
 801957a:	460a      	mov	r2, r1
 801957c:	4601      	mov	r1, r0
 801957e:	4802      	ldr	r0, [pc, #8]	@ (8019588 <strtoul+0x10>)
 8019580:	6800      	ldr	r0, [r0, #0]
 8019582:	f7ff bf8b 	b.w	801949c <_strtoul_l.constprop.0>
 8019586:	bf00      	nop
 8019588:	20000090 	.word	0x20000090

0801958c <__cvt>:
 801958c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019590:	ec57 6b10 	vmov	r6, r7, d0
 8019594:	2f00      	cmp	r7, #0
 8019596:	460c      	mov	r4, r1
 8019598:	4619      	mov	r1, r3
 801959a:	463b      	mov	r3, r7
 801959c:	bfbb      	ittet	lt
 801959e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80195a2:	461f      	movlt	r7, r3
 80195a4:	2300      	movge	r3, #0
 80195a6:	232d      	movlt	r3, #45	@ 0x2d
 80195a8:	700b      	strb	r3, [r1, #0]
 80195aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80195ac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80195b0:	4691      	mov	r9, r2
 80195b2:	f023 0820 	bic.w	r8, r3, #32
 80195b6:	bfbc      	itt	lt
 80195b8:	4632      	movlt	r2, r6
 80195ba:	4616      	movlt	r6, r2
 80195bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80195c0:	d005      	beq.n	80195ce <__cvt+0x42>
 80195c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80195c6:	d100      	bne.n	80195ca <__cvt+0x3e>
 80195c8:	3401      	adds	r4, #1
 80195ca:	2102      	movs	r1, #2
 80195cc:	e000      	b.n	80195d0 <__cvt+0x44>
 80195ce:	2103      	movs	r1, #3
 80195d0:	ab03      	add	r3, sp, #12
 80195d2:	9301      	str	r3, [sp, #4]
 80195d4:	ab02      	add	r3, sp, #8
 80195d6:	9300      	str	r3, [sp, #0]
 80195d8:	ec47 6b10 	vmov	d0, r6, r7
 80195dc:	4653      	mov	r3, sl
 80195de:	4622      	mov	r2, r4
 80195e0:	f001 face 	bl	801ab80 <_dtoa_r>
 80195e4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80195e8:	4605      	mov	r5, r0
 80195ea:	d119      	bne.n	8019620 <__cvt+0x94>
 80195ec:	f019 0f01 	tst.w	r9, #1
 80195f0:	d00e      	beq.n	8019610 <__cvt+0x84>
 80195f2:	eb00 0904 	add.w	r9, r0, r4
 80195f6:	2200      	movs	r2, #0
 80195f8:	2300      	movs	r3, #0
 80195fa:	4630      	mov	r0, r6
 80195fc:	4639      	mov	r1, r7
 80195fe:	f7e7 fa7b 	bl	8000af8 <__aeabi_dcmpeq>
 8019602:	b108      	cbz	r0, 8019608 <__cvt+0x7c>
 8019604:	f8cd 900c 	str.w	r9, [sp, #12]
 8019608:	2230      	movs	r2, #48	@ 0x30
 801960a:	9b03      	ldr	r3, [sp, #12]
 801960c:	454b      	cmp	r3, r9
 801960e:	d31e      	bcc.n	801964e <__cvt+0xc2>
 8019610:	9b03      	ldr	r3, [sp, #12]
 8019612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019614:	1b5b      	subs	r3, r3, r5
 8019616:	4628      	mov	r0, r5
 8019618:	6013      	str	r3, [r2, #0]
 801961a:	b004      	add	sp, #16
 801961c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019620:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019624:	eb00 0904 	add.w	r9, r0, r4
 8019628:	d1e5      	bne.n	80195f6 <__cvt+0x6a>
 801962a:	7803      	ldrb	r3, [r0, #0]
 801962c:	2b30      	cmp	r3, #48	@ 0x30
 801962e:	d10a      	bne.n	8019646 <__cvt+0xba>
 8019630:	2200      	movs	r2, #0
 8019632:	2300      	movs	r3, #0
 8019634:	4630      	mov	r0, r6
 8019636:	4639      	mov	r1, r7
 8019638:	f7e7 fa5e 	bl	8000af8 <__aeabi_dcmpeq>
 801963c:	b918      	cbnz	r0, 8019646 <__cvt+0xba>
 801963e:	f1c4 0401 	rsb	r4, r4, #1
 8019642:	f8ca 4000 	str.w	r4, [sl]
 8019646:	f8da 3000 	ldr.w	r3, [sl]
 801964a:	4499      	add	r9, r3
 801964c:	e7d3      	b.n	80195f6 <__cvt+0x6a>
 801964e:	1c59      	adds	r1, r3, #1
 8019650:	9103      	str	r1, [sp, #12]
 8019652:	701a      	strb	r2, [r3, #0]
 8019654:	e7d9      	b.n	801960a <__cvt+0x7e>

08019656 <__exponent>:
 8019656:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019658:	2900      	cmp	r1, #0
 801965a:	bfba      	itte	lt
 801965c:	4249      	neglt	r1, r1
 801965e:	232d      	movlt	r3, #45	@ 0x2d
 8019660:	232b      	movge	r3, #43	@ 0x2b
 8019662:	2909      	cmp	r1, #9
 8019664:	7002      	strb	r2, [r0, #0]
 8019666:	7043      	strb	r3, [r0, #1]
 8019668:	dd29      	ble.n	80196be <__exponent+0x68>
 801966a:	f10d 0307 	add.w	r3, sp, #7
 801966e:	461d      	mov	r5, r3
 8019670:	270a      	movs	r7, #10
 8019672:	461a      	mov	r2, r3
 8019674:	fbb1 f6f7 	udiv	r6, r1, r7
 8019678:	fb07 1416 	mls	r4, r7, r6, r1
 801967c:	3430      	adds	r4, #48	@ 0x30
 801967e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8019682:	460c      	mov	r4, r1
 8019684:	2c63      	cmp	r4, #99	@ 0x63
 8019686:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801968a:	4631      	mov	r1, r6
 801968c:	dcf1      	bgt.n	8019672 <__exponent+0x1c>
 801968e:	3130      	adds	r1, #48	@ 0x30
 8019690:	1e94      	subs	r4, r2, #2
 8019692:	f803 1c01 	strb.w	r1, [r3, #-1]
 8019696:	1c41      	adds	r1, r0, #1
 8019698:	4623      	mov	r3, r4
 801969a:	42ab      	cmp	r3, r5
 801969c:	d30a      	bcc.n	80196b4 <__exponent+0x5e>
 801969e:	f10d 0309 	add.w	r3, sp, #9
 80196a2:	1a9b      	subs	r3, r3, r2
 80196a4:	42ac      	cmp	r4, r5
 80196a6:	bf88      	it	hi
 80196a8:	2300      	movhi	r3, #0
 80196aa:	3302      	adds	r3, #2
 80196ac:	4403      	add	r3, r0
 80196ae:	1a18      	subs	r0, r3, r0
 80196b0:	b003      	add	sp, #12
 80196b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196b4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80196b8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80196bc:	e7ed      	b.n	801969a <__exponent+0x44>
 80196be:	2330      	movs	r3, #48	@ 0x30
 80196c0:	3130      	adds	r1, #48	@ 0x30
 80196c2:	7083      	strb	r3, [r0, #2]
 80196c4:	70c1      	strb	r1, [r0, #3]
 80196c6:	1d03      	adds	r3, r0, #4
 80196c8:	e7f1      	b.n	80196ae <__exponent+0x58>
	...

080196cc <_printf_float>:
 80196cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196d0:	b08d      	sub	sp, #52	@ 0x34
 80196d2:	460c      	mov	r4, r1
 80196d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80196d8:	4616      	mov	r6, r2
 80196da:	461f      	mov	r7, r3
 80196dc:	4605      	mov	r5, r0
 80196de:	f001 f8af 	bl	801a840 <_localeconv_r>
 80196e2:	6803      	ldr	r3, [r0, #0]
 80196e4:	9304      	str	r3, [sp, #16]
 80196e6:	4618      	mov	r0, r3
 80196e8:	f7e6 fdda 	bl	80002a0 <strlen>
 80196ec:	2300      	movs	r3, #0
 80196ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80196f0:	f8d8 3000 	ldr.w	r3, [r8]
 80196f4:	9005      	str	r0, [sp, #20]
 80196f6:	3307      	adds	r3, #7
 80196f8:	f023 0307 	bic.w	r3, r3, #7
 80196fc:	f103 0208 	add.w	r2, r3, #8
 8019700:	f894 a018 	ldrb.w	sl, [r4, #24]
 8019704:	f8d4 b000 	ldr.w	fp, [r4]
 8019708:	f8c8 2000 	str.w	r2, [r8]
 801970c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019710:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8019714:	9307      	str	r3, [sp, #28]
 8019716:	f8cd 8018 	str.w	r8, [sp, #24]
 801971a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801971e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019722:	4b9c      	ldr	r3, [pc, #624]	@ (8019994 <_printf_float+0x2c8>)
 8019724:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019728:	f7e7 fa18 	bl	8000b5c <__aeabi_dcmpun>
 801972c:	bb70      	cbnz	r0, 801978c <_printf_float+0xc0>
 801972e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019732:	4b98      	ldr	r3, [pc, #608]	@ (8019994 <_printf_float+0x2c8>)
 8019734:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8019738:	f7e7 f9f2 	bl	8000b20 <__aeabi_dcmple>
 801973c:	bb30      	cbnz	r0, 801978c <_printf_float+0xc0>
 801973e:	2200      	movs	r2, #0
 8019740:	2300      	movs	r3, #0
 8019742:	4640      	mov	r0, r8
 8019744:	4649      	mov	r1, r9
 8019746:	f7e7 f9e1 	bl	8000b0c <__aeabi_dcmplt>
 801974a:	b110      	cbz	r0, 8019752 <_printf_float+0x86>
 801974c:	232d      	movs	r3, #45	@ 0x2d
 801974e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019752:	4a91      	ldr	r2, [pc, #580]	@ (8019998 <_printf_float+0x2cc>)
 8019754:	4b91      	ldr	r3, [pc, #580]	@ (801999c <_printf_float+0x2d0>)
 8019756:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801975a:	bf94      	ite	ls
 801975c:	4690      	movls	r8, r2
 801975e:	4698      	movhi	r8, r3
 8019760:	2303      	movs	r3, #3
 8019762:	6123      	str	r3, [r4, #16]
 8019764:	f02b 0304 	bic.w	r3, fp, #4
 8019768:	6023      	str	r3, [r4, #0]
 801976a:	f04f 0900 	mov.w	r9, #0
 801976e:	9700      	str	r7, [sp, #0]
 8019770:	4633      	mov	r3, r6
 8019772:	aa0b      	add	r2, sp, #44	@ 0x2c
 8019774:	4621      	mov	r1, r4
 8019776:	4628      	mov	r0, r5
 8019778:	f000 f9d2 	bl	8019b20 <_printf_common>
 801977c:	3001      	adds	r0, #1
 801977e:	f040 808d 	bne.w	801989c <_printf_float+0x1d0>
 8019782:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019786:	b00d      	add	sp, #52	@ 0x34
 8019788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801978c:	4642      	mov	r2, r8
 801978e:	464b      	mov	r3, r9
 8019790:	4640      	mov	r0, r8
 8019792:	4649      	mov	r1, r9
 8019794:	f7e7 f9e2 	bl	8000b5c <__aeabi_dcmpun>
 8019798:	b140      	cbz	r0, 80197ac <_printf_float+0xe0>
 801979a:	464b      	mov	r3, r9
 801979c:	2b00      	cmp	r3, #0
 801979e:	bfbc      	itt	lt
 80197a0:	232d      	movlt	r3, #45	@ 0x2d
 80197a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80197a6:	4a7e      	ldr	r2, [pc, #504]	@ (80199a0 <_printf_float+0x2d4>)
 80197a8:	4b7e      	ldr	r3, [pc, #504]	@ (80199a4 <_printf_float+0x2d8>)
 80197aa:	e7d4      	b.n	8019756 <_printf_float+0x8a>
 80197ac:	6863      	ldr	r3, [r4, #4]
 80197ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80197b2:	9206      	str	r2, [sp, #24]
 80197b4:	1c5a      	adds	r2, r3, #1
 80197b6:	d13b      	bne.n	8019830 <_printf_float+0x164>
 80197b8:	2306      	movs	r3, #6
 80197ba:	6063      	str	r3, [r4, #4]
 80197bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80197c0:	2300      	movs	r3, #0
 80197c2:	6022      	str	r2, [r4, #0]
 80197c4:	9303      	str	r3, [sp, #12]
 80197c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80197c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80197cc:	ab09      	add	r3, sp, #36	@ 0x24
 80197ce:	9300      	str	r3, [sp, #0]
 80197d0:	6861      	ldr	r1, [r4, #4]
 80197d2:	ec49 8b10 	vmov	d0, r8, r9
 80197d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80197da:	4628      	mov	r0, r5
 80197dc:	f7ff fed6 	bl	801958c <__cvt>
 80197e0:	9b06      	ldr	r3, [sp, #24]
 80197e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80197e4:	2b47      	cmp	r3, #71	@ 0x47
 80197e6:	4680      	mov	r8, r0
 80197e8:	d129      	bne.n	801983e <_printf_float+0x172>
 80197ea:	1cc8      	adds	r0, r1, #3
 80197ec:	db02      	blt.n	80197f4 <_printf_float+0x128>
 80197ee:	6863      	ldr	r3, [r4, #4]
 80197f0:	4299      	cmp	r1, r3
 80197f2:	dd41      	ble.n	8019878 <_printf_float+0x1ac>
 80197f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80197f8:	fa5f fa8a 	uxtb.w	sl, sl
 80197fc:	3901      	subs	r1, #1
 80197fe:	4652      	mov	r2, sl
 8019800:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8019804:	9109      	str	r1, [sp, #36]	@ 0x24
 8019806:	f7ff ff26 	bl	8019656 <__exponent>
 801980a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801980c:	1813      	adds	r3, r2, r0
 801980e:	2a01      	cmp	r2, #1
 8019810:	4681      	mov	r9, r0
 8019812:	6123      	str	r3, [r4, #16]
 8019814:	dc02      	bgt.n	801981c <_printf_float+0x150>
 8019816:	6822      	ldr	r2, [r4, #0]
 8019818:	07d2      	lsls	r2, r2, #31
 801981a:	d501      	bpl.n	8019820 <_printf_float+0x154>
 801981c:	3301      	adds	r3, #1
 801981e:	6123      	str	r3, [r4, #16]
 8019820:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8019824:	2b00      	cmp	r3, #0
 8019826:	d0a2      	beq.n	801976e <_printf_float+0xa2>
 8019828:	232d      	movs	r3, #45	@ 0x2d
 801982a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801982e:	e79e      	b.n	801976e <_printf_float+0xa2>
 8019830:	9a06      	ldr	r2, [sp, #24]
 8019832:	2a47      	cmp	r2, #71	@ 0x47
 8019834:	d1c2      	bne.n	80197bc <_printf_float+0xf0>
 8019836:	2b00      	cmp	r3, #0
 8019838:	d1c0      	bne.n	80197bc <_printf_float+0xf0>
 801983a:	2301      	movs	r3, #1
 801983c:	e7bd      	b.n	80197ba <_printf_float+0xee>
 801983e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8019842:	d9db      	bls.n	80197fc <_printf_float+0x130>
 8019844:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8019848:	d118      	bne.n	801987c <_printf_float+0x1b0>
 801984a:	2900      	cmp	r1, #0
 801984c:	6863      	ldr	r3, [r4, #4]
 801984e:	dd0b      	ble.n	8019868 <_printf_float+0x19c>
 8019850:	6121      	str	r1, [r4, #16]
 8019852:	b913      	cbnz	r3, 801985a <_printf_float+0x18e>
 8019854:	6822      	ldr	r2, [r4, #0]
 8019856:	07d0      	lsls	r0, r2, #31
 8019858:	d502      	bpl.n	8019860 <_printf_float+0x194>
 801985a:	3301      	adds	r3, #1
 801985c:	440b      	add	r3, r1
 801985e:	6123      	str	r3, [r4, #16]
 8019860:	65a1      	str	r1, [r4, #88]	@ 0x58
 8019862:	f04f 0900 	mov.w	r9, #0
 8019866:	e7db      	b.n	8019820 <_printf_float+0x154>
 8019868:	b913      	cbnz	r3, 8019870 <_printf_float+0x1a4>
 801986a:	6822      	ldr	r2, [r4, #0]
 801986c:	07d2      	lsls	r2, r2, #31
 801986e:	d501      	bpl.n	8019874 <_printf_float+0x1a8>
 8019870:	3302      	adds	r3, #2
 8019872:	e7f4      	b.n	801985e <_printf_float+0x192>
 8019874:	2301      	movs	r3, #1
 8019876:	e7f2      	b.n	801985e <_printf_float+0x192>
 8019878:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801987c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801987e:	4299      	cmp	r1, r3
 8019880:	db05      	blt.n	801988e <_printf_float+0x1c2>
 8019882:	6823      	ldr	r3, [r4, #0]
 8019884:	6121      	str	r1, [r4, #16]
 8019886:	07d8      	lsls	r0, r3, #31
 8019888:	d5ea      	bpl.n	8019860 <_printf_float+0x194>
 801988a:	1c4b      	adds	r3, r1, #1
 801988c:	e7e7      	b.n	801985e <_printf_float+0x192>
 801988e:	2900      	cmp	r1, #0
 8019890:	bfd4      	ite	le
 8019892:	f1c1 0202 	rsble	r2, r1, #2
 8019896:	2201      	movgt	r2, #1
 8019898:	4413      	add	r3, r2
 801989a:	e7e0      	b.n	801985e <_printf_float+0x192>
 801989c:	6823      	ldr	r3, [r4, #0]
 801989e:	055a      	lsls	r2, r3, #21
 80198a0:	d407      	bmi.n	80198b2 <_printf_float+0x1e6>
 80198a2:	6923      	ldr	r3, [r4, #16]
 80198a4:	4642      	mov	r2, r8
 80198a6:	4631      	mov	r1, r6
 80198a8:	4628      	mov	r0, r5
 80198aa:	47b8      	blx	r7
 80198ac:	3001      	adds	r0, #1
 80198ae:	d12b      	bne.n	8019908 <_printf_float+0x23c>
 80198b0:	e767      	b.n	8019782 <_printf_float+0xb6>
 80198b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80198b6:	f240 80dd 	bls.w	8019a74 <_printf_float+0x3a8>
 80198ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80198be:	2200      	movs	r2, #0
 80198c0:	2300      	movs	r3, #0
 80198c2:	f7e7 f919 	bl	8000af8 <__aeabi_dcmpeq>
 80198c6:	2800      	cmp	r0, #0
 80198c8:	d033      	beq.n	8019932 <_printf_float+0x266>
 80198ca:	4a37      	ldr	r2, [pc, #220]	@ (80199a8 <_printf_float+0x2dc>)
 80198cc:	2301      	movs	r3, #1
 80198ce:	4631      	mov	r1, r6
 80198d0:	4628      	mov	r0, r5
 80198d2:	47b8      	blx	r7
 80198d4:	3001      	adds	r0, #1
 80198d6:	f43f af54 	beq.w	8019782 <_printf_float+0xb6>
 80198da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80198de:	4543      	cmp	r3, r8
 80198e0:	db02      	blt.n	80198e8 <_printf_float+0x21c>
 80198e2:	6823      	ldr	r3, [r4, #0]
 80198e4:	07d8      	lsls	r0, r3, #31
 80198e6:	d50f      	bpl.n	8019908 <_printf_float+0x23c>
 80198e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80198ec:	4631      	mov	r1, r6
 80198ee:	4628      	mov	r0, r5
 80198f0:	47b8      	blx	r7
 80198f2:	3001      	adds	r0, #1
 80198f4:	f43f af45 	beq.w	8019782 <_printf_float+0xb6>
 80198f8:	f04f 0900 	mov.w	r9, #0
 80198fc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8019900:	f104 0a1a 	add.w	sl, r4, #26
 8019904:	45c8      	cmp	r8, r9
 8019906:	dc09      	bgt.n	801991c <_printf_float+0x250>
 8019908:	6823      	ldr	r3, [r4, #0]
 801990a:	079b      	lsls	r3, r3, #30
 801990c:	f100 8103 	bmi.w	8019b16 <_printf_float+0x44a>
 8019910:	68e0      	ldr	r0, [r4, #12]
 8019912:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019914:	4298      	cmp	r0, r3
 8019916:	bfb8      	it	lt
 8019918:	4618      	movlt	r0, r3
 801991a:	e734      	b.n	8019786 <_printf_float+0xba>
 801991c:	2301      	movs	r3, #1
 801991e:	4652      	mov	r2, sl
 8019920:	4631      	mov	r1, r6
 8019922:	4628      	mov	r0, r5
 8019924:	47b8      	blx	r7
 8019926:	3001      	adds	r0, #1
 8019928:	f43f af2b 	beq.w	8019782 <_printf_float+0xb6>
 801992c:	f109 0901 	add.w	r9, r9, #1
 8019930:	e7e8      	b.n	8019904 <_printf_float+0x238>
 8019932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019934:	2b00      	cmp	r3, #0
 8019936:	dc39      	bgt.n	80199ac <_printf_float+0x2e0>
 8019938:	4a1b      	ldr	r2, [pc, #108]	@ (80199a8 <_printf_float+0x2dc>)
 801993a:	2301      	movs	r3, #1
 801993c:	4631      	mov	r1, r6
 801993e:	4628      	mov	r0, r5
 8019940:	47b8      	blx	r7
 8019942:	3001      	adds	r0, #1
 8019944:	f43f af1d 	beq.w	8019782 <_printf_float+0xb6>
 8019948:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801994c:	ea59 0303 	orrs.w	r3, r9, r3
 8019950:	d102      	bne.n	8019958 <_printf_float+0x28c>
 8019952:	6823      	ldr	r3, [r4, #0]
 8019954:	07d9      	lsls	r1, r3, #31
 8019956:	d5d7      	bpl.n	8019908 <_printf_float+0x23c>
 8019958:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801995c:	4631      	mov	r1, r6
 801995e:	4628      	mov	r0, r5
 8019960:	47b8      	blx	r7
 8019962:	3001      	adds	r0, #1
 8019964:	f43f af0d 	beq.w	8019782 <_printf_float+0xb6>
 8019968:	f04f 0a00 	mov.w	sl, #0
 801996c:	f104 0b1a 	add.w	fp, r4, #26
 8019970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019972:	425b      	negs	r3, r3
 8019974:	4553      	cmp	r3, sl
 8019976:	dc01      	bgt.n	801997c <_printf_float+0x2b0>
 8019978:	464b      	mov	r3, r9
 801997a:	e793      	b.n	80198a4 <_printf_float+0x1d8>
 801997c:	2301      	movs	r3, #1
 801997e:	465a      	mov	r2, fp
 8019980:	4631      	mov	r1, r6
 8019982:	4628      	mov	r0, r5
 8019984:	47b8      	blx	r7
 8019986:	3001      	adds	r0, #1
 8019988:	f43f aefb 	beq.w	8019782 <_printf_float+0xb6>
 801998c:	f10a 0a01 	add.w	sl, sl, #1
 8019990:	e7ee      	b.n	8019970 <_printf_float+0x2a4>
 8019992:	bf00      	nop
 8019994:	7fefffff 	.word	0x7fefffff
 8019998:	0801e9b0 	.word	0x0801e9b0
 801999c:	0801e9b4 	.word	0x0801e9b4
 80199a0:	0801e9b8 	.word	0x0801e9b8
 80199a4:	0801e9bc 	.word	0x0801e9bc
 80199a8:	0801e9c0 	.word	0x0801e9c0
 80199ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80199ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80199b2:	4553      	cmp	r3, sl
 80199b4:	bfa8      	it	ge
 80199b6:	4653      	movge	r3, sl
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	4699      	mov	r9, r3
 80199bc:	dc36      	bgt.n	8019a2c <_printf_float+0x360>
 80199be:	f04f 0b00 	mov.w	fp, #0
 80199c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80199c6:	f104 021a 	add.w	r2, r4, #26
 80199ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80199cc:	9306      	str	r3, [sp, #24]
 80199ce:	eba3 0309 	sub.w	r3, r3, r9
 80199d2:	455b      	cmp	r3, fp
 80199d4:	dc31      	bgt.n	8019a3a <_printf_float+0x36e>
 80199d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199d8:	459a      	cmp	sl, r3
 80199da:	dc3a      	bgt.n	8019a52 <_printf_float+0x386>
 80199dc:	6823      	ldr	r3, [r4, #0]
 80199de:	07da      	lsls	r2, r3, #31
 80199e0:	d437      	bmi.n	8019a52 <_printf_float+0x386>
 80199e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80199e4:	ebaa 0903 	sub.w	r9, sl, r3
 80199e8:	9b06      	ldr	r3, [sp, #24]
 80199ea:	ebaa 0303 	sub.w	r3, sl, r3
 80199ee:	4599      	cmp	r9, r3
 80199f0:	bfa8      	it	ge
 80199f2:	4699      	movge	r9, r3
 80199f4:	f1b9 0f00 	cmp.w	r9, #0
 80199f8:	dc33      	bgt.n	8019a62 <_printf_float+0x396>
 80199fa:	f04f 0800 	mov.w	r8, #0
 80199fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019a02:	f104 0b1a 	add.w	fp, r4, #26
 8019a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a08:	ebaa 0303 	sub.w	r3, sl, r3
 8019a0c:	eba3 0309 	sub.w	r3, r3, r9
 8019a10:	4543      	cmp	r3, r8
 8019a12:	f77f af79 	ble.w	8019908 <_printf_float+0x23c>
 8019a16:	2301      	movs	r3, #1
 8019a18:	465a      	mov	r2, fp
 8019a1a:	4631      	mov	r1, r6
 8019a1c:	4628      	mov	r0, r5
 8019a1e:	47b8      	blx	r7
 8019a20:	3001      	adds	r0, #1
 8019a22:	f43f aeae 	beq.w	8019782 <_printf_float+0xb6>
 8019a26:	f108 0801 	add.w	r8, r8, #1
 8019a2a:	e7ec      	b.n	8019a06 <_printf_float+0x33a>
 8019a2c:	4642      	mov	r2, r8
 8019a2e:	4631      	mov	r1, r6
 8019a30:	4628      	mov	r0, r5
 8019a32:	47b8      	blx	r7
 8019a34:	3001      	adds	r0, #1
 8019a36:	d1c2      	bne.n	80199be <_printf_float+0x2f2>
 8019a38:	e6a3      	b.n	8019782 <_printf_float+0xb6>
 8019a3a:	2301      	movs	r3, #1
 8019a3c:	4631      	mov	r1, r6
 8019a3e:	4628      	mov	r0, r5
 8019a40:	9206      	str	r2, [sp, #24]
 8019a42:	47b8      	blx	r7
 8019a44:	3001      	adds	r0, #1
 8019a46:	f43f ae9c 	beq.w	8019782 <_printf_float+0xb6>
 8019a4a:	9a06      	ldr	r2, [sp, #24]
 8019a4c:	f10b 0b01 	add.w	fp, fp, #1
 8019a50:	e7bb      	b.n	80199ca <_printf_float+0x2fe>
 8019a52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019a56:	4631      	mov	r1, r6
 8019a58:	4628      	mov	r0, r5
 8019a5a:	47b8      	blx	r7
 8019a5c:	3001      	adds	r0, #1
 8019a5e:	d1c0      	bne.n	80199e2 <_printf_float+0x316>
 8019a60:	e68f      	b.n	8019782 <_printf_float+0xb6>
 8019a62:	9a06      	ldr	r2, [sp, #24]
 8019a64:	464b      	mov	r3, r9
 8019a66:	4442      	add	r2, r8
 8019a68:	4631      	mov	r1, r6
 8019a6a:	4628      	mov	r0, r5
 8019a6c:	47b8      	blx	r7
 8019a6e:	3001      	adds	r0, #1
 8019a70:	d1c3      	bne.n	80199fa <_printf_float+0x32e>
 8019a72:	e686      	b.n	8019782 <_printf_float+0xb6>
 8019a74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8019a78:	f1ba 0f01 	cmp.w	sl, #1
 8019a7c:	dc01      	bgt.n	8019a82 <_printf_float+0x3b6>
 8019a7e:	07db      	lsls	r3, r3, #31
 8019a80:	d536      	bpl.n	8019af0 <_printf_float+0x424>
 8019a82:	2301      	movs	r3, #1
 8019a84:	4642      	mov	r2, r8
 8019a86:	4631      	mov	r1, r6
 8019a88:	4628      	mov	r0, r5
 8019a8a:	47b8      	blx	r7
 8019a8c:	3001      	adds	r0, #1
 8019a8e:	f43f ae78 	beq.w	8019782 <_printf_float+0xb6>
 8019a92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019a96:	4631      	mov	r1, r6
 8019a98:	4628      	mov	r0, r5
 8019a9a:	47b8      	blx	r7
 8019a9c:	3001      	adds	r0, #1
 8019a9e:	f43f ae70 	beq.w	8019782 <_printf_float+0xb6>
 8019aa2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8019aa6:	2200      	movs	r2, #0
 8019aa8:	2300      	movs	r3, #0
 8019aaa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8019aae:	f7e7 f823 	bl	8000af8 <__aeabi_dcmpeq>
 8019ab2:	b9c0      	cbnz	r0, 8019ae6 <_printf_float+0x41a>
 8019ab4:	4653      	mov	r3, sl
 8019ab6:	f108 0201 	add.w	r2, r8, #1
 8019aba:	4631      	mov	r1, r6
 8019abc:	4628      	mov	r0, r5
 8019abe:	47b8      	blx	r7
 8019ac0:	3001      	adds	r0, #1
 8019ac2:	d10c      	bne.n	8019ade <_printf_float+0x412>
 8019ac4:	e65d      	b.n	8019782 <_printf_float+0xb6>
 8019ac6:	2301      	movs	r3, #1
 8019ac8:	465a      	mov	r2, fp
 8019aca:	4631      	mov	r1, r6
 8019acc:	4628      	mov	r0, r5
 8019ace:	47b8      	blx	r7
 8019ad0:	3001      	adds	r0, #1
 8019ad2:	f43f ae56 	beq.w	8019782 <_printf_float+0xb6>
 8019ad6:	f108 0801 	add.w	r8, r8, #1
 8019ada:	45d0      	cmp	r8, sl
 8019adc:	dbf3      	blt.n	8019ac6 <_printf_float+0x3fa>
 8019ade:	464b      	mov	r3, r9
 8019ae0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019ae4:	e6df      	b.n	80198a6 <_printf_float+0x1da>
 8019ae6:	f04f 0800 	mov.w	r8, #0
 8019aea:	f104 0b1a 	add.w	fp, r4, #26
 8019aee:	e7f4      	b.n	8019ada <_printf_float+0x40e>
 8019af0:	2301      	movs	r3, #1
 8019af2:	4642      	mov	r2, r8
 8019af4:	e7e1      	b.n	8019aba <_printf_float+0x3ee>
 8019af6:	2301      	movs	r3, #1
 8019af8:	464a      	mov	r2, r9
 8019afa:	4631      	mov	r1, r6
 8019afc:	4628      	mov	r0, r5
 8019afe:	47b8      	blx	r7
 8019b00:	3001      	adds	r0, #1
 8019b02:	f43f ae3e 	beq.w	8019782 <_printf_float+0xb6>
 8019b06:	f108 0801 	add.w	r8, r8, #1
 8019b0a:	68e3      	ldr	r3, [r4, #12]
 8019b0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019b0e:	1a5b      	subs	r3, r3, r1
 8019b10:	4543      	cmp	r3, r8
 8019b12:	dcf0      	bgt.n	8019af6 <_printf_float+0x42a>
 8019b14:	e6fc      	b.n	8019910 <_printf_float+0x244>
 8019b16:	f04f 0800 	mov.w	r8, #0
 8019b1a:	f104 0919 	add.w	r9, r4, #25
 8019b1e:	e7f4      	b.n	8019b0a <_printf_float+0x43e>

08019b20 <_printf_common>:
 8019b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019b24:	4616      	mov	r6, r2
 8019b26:	4698      	mov	r8, r3
 8019b28:	688a      	ldr	r2, [r1, #8]
 8019b2a:	690b      	ldr	r3, [r1, #16]
 8019b2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019b30:	4293      	cmp	r3, r2
 8019b32:	bfb8      	it	lt
 8019b34:	4613      	movlt	r3, r2
 8019b36:	6033      	str	r3, [r6, #0]
 8019b38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019b3c:	4607      	mov	r7, r0
 8019b3e:	460c      	mov	r4, r1
 8019b40:	b10a      	cbz	r2, 8019b46 <_printf_common+0x26>
 8019b42:	3301      	adds	r3, #1
 8019b44:	6033      	str	r3, [r6, #0]
 8019b46:	6823      	ldr	r3, [r4, #0]
 8019b48:	0699      	lsls	r1, r3, #26
 8019b4a:	bf42      	ittt	mi
 8019b4c:	6833      	ldrmi	r3, [r6, #0]
 8019b4e:	3302      	addmi	r3, #2
 8019b50:	6033      	strmi	r3, [r6, #0]
 8019b52:	6825      	ldr	r5, [r4, #0]
 8019b54:	f015 0506 	ands.w	r5, r5, #6
 8019b58:	d106      	bne.n	8019b68 <_printf_common+0x48>
 8019b5a:	f104 0a19 	add.w	sl, r4, #25
 8019b5e:	68e3      	ldr	r3, [r4, #12]
 8019b60:	6832      	ldr	r2, [r6, #0]
 8019b62:	1a9b      	subs	r3, r3, r2
 8019b64:	42ab      	cmp	r3, r5
 8019b66:	dc26      	bgt.n	8019bb6 <_printf_common+0x96>
 8019b68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019b6c:	6822      	ldr	r2, [r4, #0]
 8019b6e:	3b00      	subs	r3, #0
 8019b70:	bf18      	it	ne
 8019b72:	2301      	movne	r3, #1
 8019b74:	0692      	lsls	r2, r2, #26
 8019b76:	d42b      	bmi.n	8019bd0 <_printf_common+0xb0>
 8019b78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019b7c:	4641      	mov	r1, r8
 8019b7e:	4638      	mov	r0, r7
 8019b80:	47c8      	blx	r9
 8019b82:	3001      	adds	r0, #1
 8019b84:	d01e      	beq.n	8019bc4 <_printf_common+0xa4>
 8019b86:	6823      	ldr	r3, [r4, #0]
 8019b88:	6922      	ldr	r2, [r4, #16]
 8019b8a:	f003 0306 	and.w	r3, r3, #6
 8019b8e:	2b04      	cmp	r3, #4
 8019b90:	bf02      	ittt	eq
 8019b92:	68e5      	ldreq	r5, [r4, #12]
 8019b94:	6833      	ldreq	r3, [r6, #0]
 8019b96:	1aed      	subeq	r5, r5, r3
 8019b98:	68a3      	ldr	r3, [r4, #8]
 8019b9a:	bf0c      	ite	eq
 8019b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019ba0:	2500      	movne	r5, #0
 8019ba2:	4293      	cmp	r3, r2
 8019ba4:	bfc4      	itt	gt
 8019ba6:	1a9b      	subgt	r3, r3, r2
 8019ba8:	18ed      	addgt	r5, r5, r3
 8019baa:	2600      	movs	r6, #0
 8019bac:	341a      	adds	r4, #26
 8019bae:	42b5      	cmp	r5, r6
 8019bb0:	d11a      	bne.n	8019be8 <_printf_common+0xc8>
 8019bb2:	2000      	movs	r0, #0
 8019bb4:	e008      	b.n	8019bc8 <_printf_common+0xa8>
 8019bb6:	2301      	movs	r3, #1
 8019bb8:	4652      	mov	r2, sl
 8019bba:	4641      	mov	r1, r8
 8019bbc:	4638      	mov	r0, r7
 8019bbe:	47c8      	blx	r9
 8019bc0:	3001      	adds	r0, #1
 8019bc2:	d103      	bne.n	8019bcc <_printf_common+0xac>
 8019bc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019bcc:	3501      	adds	r5, #1
 8019bce:	e7c6      	b.n	8019b5e <_printf_common+0x3e>
 8019bd0:	18e1      	adds	r1, r4, r3
 8019bd2:	1c5a      	adds	r2, r3, #1
 8019bd4:	2030      	movs	r0, #48	@ 0x30
 8019bd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019bda:	4422      	add	r2, r4
 8019bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019be0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019be4:	3302      	adds	r3, #2
 8019be6:	e7c7      	b.n	8019b78 <_printf_common+0x58>
 8019be8:	2301      	movs	r3, #1
 8019bea:	4622      	mov	r2, r4
 8019bec:	4641      	mov	r1, r8
 8019bee:	4638      	mov	r0, r7
 8019bf0:	47c8      	blx	r9
 8019bf2:	3001      	adds	r0, #1
 8019bf4:	d0e6      	beq.n	8019bc4 <_printf_common+0xa4>
 8019bf6:	3601      	adds	r6, #1
 8019bf8:	e7d9      	b.n	8019bae <_printf_common+0x8e>
	...

08019bfc <_printf_i>:
 8019bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019c00:	7e0f      	ldrb	r7, [r1, #24]
 8019c02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019c04:	2f78      	cmp	r7, #120	@ 0x78
 8019c06:	4691      	mov	r9, r2
 8019c08:	4680      	mov	r8, r0
 8019c0a:	460c      	mov	r4, r1
 8019c0c:	469a      	mov	sl, r3
 8019c0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019c12:	d807      	bhi.n	8019c24 <_printf_i+0x28>
 8019c14:	2f62      	cmp	r7, #98	@ 0x62
 8019c16:	d80a      	bhi.n	8019c2e <_printf_i+0x32>
 8019c18:	2f00      	cmp	r7, #0
 8019c1a:	f000 80d2 	beq.w	8019dc2 <_printf_i+0x1c6>
 8019c1e:	2f58      	cmp	r7, #88	@ 0x58
 8019c20:	f000 80b9 	beq.w	8019d96 <_printf_i+0x19a>
 8019c24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019c28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019c2c:	e03a      	b.n	8019ca4 <_printf_i+0xa8>
 8019c2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019c32:	2b15      	cmp	r3, #21
 8019c34:	d8f6      	bhi.n	8019c24 <_printf_i+0x28>
 8019c36:	a101      	add	r1, pc, #4	@ (adr r1, 8019c3c <_printf_i+0x40>)
 8019c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019c3c:	08019c95 	.word	0x08019c95
 8019c40:	08019ca9 	.word	0x08019ca9
 8019c44:	08019c25 	.word	0x08019c25
 8019c48:	08019c25 	.word	0x08019c25
 8019c4c:	08019c25 	.word	0x08019c25
 8019c50:	08019c25 	.word	0x08019c25
 8019c54:	08019ca9 	.word	0x08019ca9
 8019c58:	08019c25 	.word	0x08019c25
 8019c5c:	08019c25 	.word	0x08019c25
 8019c60:	08019c25 	.word	0x08019c25
 8019c64:	08019c25 	.word	0x08019c25
 8019c68:	08019da9 	.word	0x08019da9
 8019c6c:	08019cd3 	.word	0x08019cd3
 8019c70:	08019d63 	.word	0x08019d63
 8019c74:	08019c25 	.word	0x08019c25
 8019c78:	08019c25 	.word	0x08019c25
 8019c7c:	08019dcb 	.word	0x08019dcb
 8019c80:	08019c25 	.word	0x08019c25
 8019c84:	08019cd3 	.word	0x08019cd3
 8019c88:	08019c25 	.word	0x08019c25
 8019c8c:	08019c25 	.word	0x08019c25
 8019c90:	08019d6b 	.word	0x08019d6b
 8019c94:	6833      	ldr	r3, [r6, #0]
 8019c96:	1d1a      	adds	r2, r3, #4
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	6032      	str	r2, [r6, #0]
 8019c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019ca0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019ca4:	2301      	movs	r3, #1
 8019ca6:	e09d      	b.n	8019de4 <_printf_i+0x1e8>
 8019ca8:	6833      	ldr	r3, [r6, #0]
 8019caa:	6820      	ldr	r0, [r4, #0]
 8019cac:	1d19      	adds	r1, r3, #4
 8019cae:	6031      	str	r1, [r6, #0]
 8019cb0:	0606      	lsls	r6, r0, #24
 8019cb2:	d501      	bpl.n	8019cb8 <_printf_i+0xbc>
 8019cb4:	681d      	ldr	r5, [r3, #0]
 8019cb6:	e003      	b.n	8019cc0 <_printf_i+0xc4>
 8019cb8:	0645      	lsls	r5, r0, #25
 8019cba:	d5fb      	bpl.n	8019cb4 <_printf_i+0xb8>
 8019cbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019cc0:	2d00      	cmp	r5, #0
 8019cc2:	da03      	bge.n	8019ccc <_printf_i+0xd0>
 8019cc4:	232d      	movs	r3, #45	@ 0x2d
 8019cc6:	426d      	negs	r5, r5
 8019cc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019ccc:	4859      	ldr	r0, [pc, #356]	@ (8019e34 <_printf_i+0x238>)
 8019cce:	230a      	movs	r3, #10
 8019cd0:	e011      	b.n	8019cf6 <_printf_i+0xfa>
 8019cd2:	6821      	ldr	r1, [r4, #0]
 8019cd4:	6833      	ldr	r3, [r6, #0]
 8019cd6:	0608      	lsls	r0, r1, #24
 8019cd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8019cdc:	d402      	bmi.n	8019ce4 <_printf_i+0xe8>
 8019cde:	0649      	lsls	r1, r1, #25
 8019ce0:	bf48      	it	mi
 8019ce2:	b2ad      	uxthmi	r5, r5
 8019ce4:	2f6f      	cmp	r7, #111	@ 0x6f
 8019ce6:	4853      	ldr	r0, [pc, #332]	@ (8019e34 <_printf_i+0x238>)
 8019ce8:	6033      	str	r3, [r6, #0]
 8019cea:	bf14      	ite	ne
 8019cec:	230a      	movne	r3, #10
 8019cee:	2308      	moveq	r3, #8
 8019cf0:	2100      	movs	r1, #0
 8019cf2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019cf6:	6866      	ldr	r6, [r4, #4]
 8019cf8:	60a6      	str	r6, [r4, #8]
 8019cfa:	2e00      	cmp	r6, #0
 8019cfc:	bfa2      	ittt	ge
 8019cfe:	6821      	ldrge	r1, [r4, #0]
 8019d00:	f021 0104 	bicge.w	r1, r1, #4
 8019d04:	6021      	strge	r1, [r4, #0]
 8019d06:	b90d      	cbnz	r5, 8019d0c <_printf_i+0x110>
 8019d08:	2e00      	cmp	r6, #0
 8019d0a:	d04b      	beq.n	8019da4 <_printf_i+0x1a8>
 8019d0c:	4616      	mov	r6, r2
 8019d0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8019d12:	fb03 5711 	mls	r7, r3, r1, r5
 8019d16:	5dc7      	ldrb	r7, [r0, r7]
 8019d18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019d1c:	462f      	mov	r7, r5
 8019d1e:	42bb      	cmp	r3, r7
 8019d20:	460d      	mov	r5, r1
 8019d22:	d9f4      	bls.n	8019d0e <_printf_i+0x112>
 8019d24:	2b08      	cmp	r3, #8
 8019d26:	d10b      	bne.n	8019d40 <_printf_i+0x144>
 8019d28:	6823      	ldr	r3, [r4, #0]
 8019d2a:	07df      	lsls	r7, r3, #31
 8019d2c:	d508      	bpl.n	8019d40 <_printf_i+0x144>
 8019d2e:	6923      	ldr	r3, [r4, #16]
 8019d30:	6861      	ldr	r1, [r4, #4]
 8019d32:	4299      	cmp	r1, r3
 8019d34:	bfde      	ittt	le
 8019d36:	2330      	movle	r3, #48	@ 0x30
 8019d38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019d3c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8019d40:	1b92      	subs	r2, r2, r6
 8019d42:	6122      	str	r2, [r4, #16]
 8019d44:	f8cd a000 	str.w	sl, [sp]
 8019d48:	464b      	mov	r3, r9
 8019d4a:	aa03      	add	r2, sp, #12
 8019d4c:	4621      	mov	r1, r4
 8019d4e:	4640      	mov	r0, r8
 8019d50:	f7ff fee6 	bl	8019b20 <_printf_common>
 8019d54:	3001      	adds	r0, #1
 8019d56:	d14a      	bne.n	8019dee <_printf_i+0x1f2>
 8019d58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019d5c:	b004      	add	sp, #16
 8019d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d62:	6823      	ldr	r3, [r4, #0]
 8019d64:	f043 0320 	orr.w	r3, r3, #32
 8019d68:	6023      	str	r3, [r4, #0]
 8019d6a:	4833      	ldr	r0, [pc, #204]	@ (8019e38 <_printf_i+0x23c>)
 8019d6c:	2778      	movs	r7, #120	@ 0x78
 8019d6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019d72:	6823      	ldr	r3, [r4, #0]
 8019d74:	6831      	ldr	r1, [r6, #0]
 8019d76:	061f      	lsls	r7, r3, #24
 8019d78:	f851 5b04 	ldr.w	r5, [r1], #4
 8019d7c:	d402      	bmi.n	8019d84 <_printf_i+0x188>
 8019d7e:	065f      	lsls	r7, r3, #25
 8019d80:	bf48      	it	mi
 8019d82:	b2ad      	uxthmi	r5, r5
 8019d84:	6031      	str	r1, [r6, #0]
 8019d86:	07d9      	lsls	r1, r3, #31
 8019d88:	bf44      	itt	mi
 8019d8a:	f043 0320 	orrmi.w	r3, r3, #32
 8019d8e:	6023      	strmi	r3, [r4, #0]
 8019d90:	b11d      	cbz	r5, 8019d9a <_printf_i+0x19e>
 8019d92:	2310      	movs	r3, #16
 8019d94:	e7ac      	b.n	8019cf0 <_printf_i+0xf4>
 8019d96:	4827      	ldr	r0, [pc, #156]	@ (8019e34 <_printf_i+0x238>)
 8019d98:	e7e9      	b.n	8019d6e <_printf_i+0x172>
 8019d9a:	6823      	ldr	r3, [r4, #0]
 8019d9c:	f023 0320 	bic.w	r3, r3, #32
 8019da0:	6023      	str	r3, [r4, #0]
 8019da2:	e7f6      	b.n	8019d92 <_printf_i+0x196>
 8019da4:	4616      	mov	r6, r2
 8019da6:	e7bd      	b.n	8019d24 <_printf_i+0x128>
 8019da8:	6833      	ldr	r3, [r6, #0]
 8019daa:	6825      	ldr	r5, [r4, #0]
 8019dac:	6961      	ldr	r1, [r4, #20]
 8019dae:	1d18      	adds	r0, r3, #4
 8019db0:	6030      	str	r0, [r6, #0]
 8019db2:	062e      	lsls	r6, r5, #24
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	d501      	bpl.n	8019dbc <_printf_i+0x1c0>
 8019db8:	6019      	str	r1, [r3, #0]
 8019dba:	e002      	b.n	8019dc2 <_printf_i+0x1c6>
 8019dbc:	0668      	lsls	r0, r5, #25
 8019dbe:	d5fb      	bpl.n	8019db8 <_printf_i+0x1bc>
 8019dc0:	8019      	strh	r1, [r3, #0]
 8019dc2:	2300      	movs	r3, #0
 8019dc4:	6123      	str	r3, [r4, #16]
 8019dc6:	4616      	mov	r6, r2
 8019dc8:	e7bc      	b.n	8019d44 <_printf_i+0x148>
 8019dca:	6833      	ldr	r3, [r6, #0]
 8019dcc:	1d1a      	adds	r2, r3, #4
 8019dce:	6032      	str	r2, [r6, #0]
 8019dd0:	681e      	ldr	r6, [r3, #0]
 8019dd2:	6862      	ldr	r2, [r4, #4]
 8019dd4:	2100      	movs	r1, #0
 8019dd6:	4630      	mov	r0, r6
 8019dd8:	f7e6 fa12 	bl	8000200 <memchr>
 8019ddc:	b108      	cbz	r0, 8019de2 <_printf_i+0x1e6>
 8019dde:	1b80      	subs	r0, r0, r6
 8019de0:	6060      	str	r0, [r4, #4]
 8019de2:	6863      	ldr	r3, [r4, #4]
 8019de4:	6123      	str	r3, [r4, #16]
 8019de6:	2300      	movs	r3, #0
 8019de8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019dec:	e7aa      	b.n	8019d44 <_printf_i+0x148>
 8019dee:	6923      	ldr	r3, [r4, #16]
 8019df0:	4632      	mov	r2, r6
 8019df2:	4649      	mov	r1, r9
 8019df4:	4640      	mov	r0, r8
 8019df6:	47d0      	blx	sl
 8019df8:	3001      	adds	r0, #1
 8019dfa:	d0ad      	beq.n	8019d58 <_printf_i+0x15c>
 8019dfc:	6823      	ldr	r3, [r4, #0]
 8019dfe:	079b      	lsls	r3, r3, #30
 8019e00:	d413      	bmi.n	8019e2a <_printf_i+0x22e>
 8019e02:	68e0      	ldr	r0, [r4, #12]
 8019e04:	9b03      	ldr	r3, [sp, #12]
 8019e06:	4298      	cmp	r0, r3
 8019e08:	bfb8      	it	lt
 8019e0a:	4618      	movlt	r0, r3
 8019e0c:	e7a6      	b.n	8019d5c <_printf_i+0x160>
 8019e0e:	2301      	movs	r3, #1
 8019e10:	4632      	mov	r2, r6
 8019e12:	4649      	mov	r1, r9
 8019e14:	4640      	mov	r0, r8
 8019e16:	47d0      	blx	sl
 8019e18:	3001      	adds	r0, #1
 8019e1a:	d09d      	beq.n	8019d58 <_printf_i+0x15c>
 8019e1c:	3501      	adds	r5, #1
 8019e1e:	68e3      	ldr	r3, [r4, #12]
 8019e20:	9903      	ldr	r1, [sp, #12]
 8019e22:	1a5b      	subs	r3, r3, r1
 8019e24:	42ab      	cmp	r3, r5
 8019e26:	dcf2      	bgt.n	8019e0e <_printf_i+0x212>
 8019e28:	e7eb      	b.n	8019e02 <_printf_i+0x206>
 8019e2a:	2500      	movs	r5, #0
 8019e2c:	f104 0619 	add.w	r6, r4, #25
 8019e30:	e7f5      	b.n	8019e1e <_printf_i+0x222>
 8019e32:	bf00      	nop
 8019e34:	0801e9c2 	.word	0x0801e9c2
 8019e38:	0801e9d3 	.word	0x0801e9d3

08019e3c <_scanf_float>:
 8019e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e40:	b087      	sub	sp, #28
 8019e42:	4617      	mov	r7, r2
 8019e44:	9303      	str	r3, [sp, #12]
 8019e46:	688b      	ldr	r3, [r1, #8]
 8019e48:	1e5a      	subs	r2, r3, #1
 8019e4a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8019e4e:	bf81      	itttt	hi
 8019e50:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8019e54:	eb03 0b05 	addhi.w	fp, r3, r5
 8019e58:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8019e5c:	608b      	strhi	r3, [r1, #8]
 8019e5e:	680b      	ldr	r3, [r1, #0]
 8019e60:	460a      	mov	r2, r1
 8019e62:	f04f 0500 	mov.w	r5, #0
 8019e66:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8019e6a:	f842 3b1c 	str.w	r3, [r2], #28
 8019e6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019e72:	4680      	mov	r8, r0
 8019e74:	460c      	mov	r4, r1
 8019e76:	bf98      	it	ls
 8019e78:	f04f 0b00 	movls.w	fp, #0
 8019e7c:	9201      	str	r2, [sp, #4]
 8019e7e:	4616      	mov	r6, r2
 8019e80:	46aa      	mov	sl, r5
 8019e82:	46a9      	mov	r9, r5
 8019e84:	9502      	str	r5, [sp, #8]
 8019e86:	68a2      	ldr	r2, [r4, #8]
 8019e88:	b152      	cbz	r2, 8019ea0 <_scanf_float+0x64>
 8019e8a:	683b      	ldr	r3, [r7, #0]
 8019e8c:	781b      	ldrb	r3, [r3, #0]
 8019e8e:	2b4e      	cmp	r3, #78	@ 0x4e
 8019e90:	d864      	bhi.n	8019f5c <_scanf_float+0x120>
 8019e92:	2b40      	cmp	r3, #64	@ 0x40
 8019e94:	d83c      	bhi.n	8019f10 <_scanf_float+0xd4>
 8019e96:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8019e9a:	b2c8      	uxtb	r0, r1
 8019e9c:	280e      	cmp	r0, #14
 8019e9e:	d93a      	bls.n	8019f16 <_scanf_float+0xda>
 8019ea0:	f1b9 0f00 	cmp.w	r9, #0
 8019ea4:	d003      	beq.n	8019eae <_scanf_float+0x72>
 8019ea6:	6823      	ldr	r3, [r4, #0]
 8019ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019eac:	6023      	str	r3, [r4, #0]
 8019eae:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8019eb2:	f1ba 0f01 	cmp.w	sl, #1
 8019eb6:	f200 8117 	bhi.w	801a0e8 <_scanf_float+0x2ac>
 8019eba:	9b01      	ldr	r3, [sp, #4]
 8019ebc:	429e      	cmp	r6, r3
 8019ebe:	f200 8108 	bhi.w	801a0d2 <_scanf_float+0x296>
 8019ec2:	2001      	movs	r0, #1
 8019ec4:	b007      	add	sp, #28
 8019ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019eca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8019ece:	2a0d      	cmp	r2, #13
 8019ed0:	d8e6      	bhi.n	8019ea0 <_scanf_float+0x64>
 8019ed2:	a101      	add	r1, pc, #4	@ (adr r1, 8019ed8 <_scanf_float+0x9c>)
 8019ed4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019ed8:	0801a01f 	.word	0x0801a01f
 8019edc:	08019ea1 	.word	0x08019ea1
 8019ee0:	08019ea1 	.word	0x08019ea1
 8019ee4:	08019ea1 	.word	0x08019ea1
 8019ee8:	0801a07f 	.word	0x0801a07f
 8019eec:	0801a057 	.word	0x0801a057
 8019ef0:	08019ea1 	.word	0x08019ea1
 8019ef4:	08019ea1 	.word	0x08019ea1
 8019ef8:	0801a02d 	.word	0x0801a02d
 8019efc:	08019ea1 	.word	0x08019ea1
 8019f00:	08019ea1 	.word	0x08019ea1
 8019f04:	08019ea1 	.word	0x08019ea1
 8019f08:	08019ea1 	.word	0x08019ea1
 8019f0c:	08019fe5 	.word	0x08019fe5
 8019f10:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8019f14:	e7db      	b.n	8019ece <_scanf_float+0x92>
 8019f16:	290e      	cmp	r1, #14
 8019f18:	d8c2      	bhi.n	8019ea0 <_scanf_float+0x64>
 8019f1a:	a001      	add	r0, pc, #4	@ (adr r0, 8019f20 <_scanf_float+0xe4>)
 8019f1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019f20:	08019fd5 	.word	0x08019fd5
 8019f24:	08019ea1 	.word	0x08019ea1
 8019f28:	08019fd5 	.word	0x08019fd5
 8019f2c:	0801a06b 	.word	0x0801a06b
 8019f30:	08019ea1 	.word	0x08019ea1
 8019f34:	08019f7d 	.word	0x08019f7d
 8019f38:	08019fbb 	.word	0x08019fbb
 8019f3c:	08019fbb 	.word	0x08019fbb
 8019f40:	08019fbb 	.word	0x08019fbb
 8019f44:	08019fbb 	.word	0x08019fbb
 8019f48:	08019fbb 	.word	0x08019fbb
 8019f4c:	08019fbb 	.word	0x08019fbb
 8019f50:	08019fbb 	.word	0x08019fbb
 8019f54:	08019fbb 	.word	0x08019fbb
 8019f58:	08019fbb 	.word	0x08019fbb
 8019f5c:	2b6e      	cmp	r3, #110	@ 0x6e
 8019f5e:	d809      	bhi.n	8019f74 <_scanf_float+0x138>
 8019f60:	2b60      	cmp	r3, #96	@ 0x60
 8019f62:	d8b2      	bhi.n	8019eca <_scanf_float+0x8e>
 8019f64:	2b54      	cmp	r3, #84	@ 0x54
 8019f66:	d07b      	beq.n	801a060 <_scanf_float+0x224>
 8019f68:	2b59      	cmp	r3, #89	@ 0x59
 8019f6a:	d199      	bne.n	8019ea0 <_scanf_float+0x64>
 8019f6c:	2d07      	cmp	r5, #7
 8019f6e:	d197      	bne.n	8019ea0 <_scanf_float+0x64>
 8019f70:	2508      	movs	r5, #8
 8019f72:	e02c      	b.n	8019fce <_scanf_float+0x192>
 8019f74:	2b74      	cmp	r3, #116	@ 0x74
 8019f76:	d073      	beq.n	801a060 <_scanf_float+0x224>
 8019f78:	2b79      	cmp	r3, #121	@ 0x79
 8019f7a:	e7f6      	b.n	8019f6a <_scanf_float+0x12e>
 8019f7c:	6821      	ldr	r1, [r4, #0]
 8019f7e:	05c8      	lsls	r0, r1, #23
 8019f80:	d51b      	bpl.n	8019fba <_scanf_float+0x17e>
 8019f82:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8019f86:	6021      	str	r1, [r4, #0]
 8019f88:	f109 0901 	add.w	r9, r9, #1
 8019f8c:	f1bb 0f00 	cmp.w	fp, #0
 8019f90:	d003      	beq.n	8019f9a <_scanf_float+0x15e>
 8019f92:	3201      	adds	r2, #1
 8019f94:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8019f98:	60a2      	str	r2, [r4, #8]
 8019f9a:	68a3      	ldr	r3, [r4, #8]
 8019f9c:	3b01      	subs	r3, #1
 8019f9e:	60a3      	str	r3, [r4, #8]
 8019fa0:	6923      	ldr	r3, [r4, #16]
 8019fa2:	3301      	adds	r3, #1
 8019fa4:	6123      	str	r3, [r4, #16]
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	3b01      	subs	r3, #1
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	607b      	str	r3, [r7, #4]
 8019fae:	f340 8087 	ble.w	801a0c0 <_scanf_float+0x284>
 8019fb2:	683b      	ldr	r3, [r7, #0]
 8019fb4:	3301      	adds	r3, #1
 8019fb6:	603b      	str	r3, [r7, #0]
 8019fb8:	e765      	b.n	8019e86 <_scanf_float+0x4a>
 8019fba:	eb1a 0105 	adds.w	r1, sl, r5
 8019fbe:	f47f af6f 	bne.w	8019ea0 <_scanf_float+0x64>
 8019fc2:	6822      	ldr	r2, [r4, #0]
 8019fc4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8019fc8:	6022      	str	r2, [r4, #0]
 8019fca:	460d      	mov	r5, r1
 8019fcc:	468a      	mov	sl, r1
 8019fce:	f806 3b01 	strb.w	r3, [r6], #1
 8019fd2:	e7e2      	b.n	8019f9a <_scanf_float+0x15e>
 8019fd4:	6822      	ldr	r2, [r4, #0]
 8019fd6:	0610      	lsls	r0, r2, #24
 8019fd8:	f57f af62 	bpl.w	8019ea0 <_scanf_float+0x64>
 8019fdc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8019fe0:	6022      	str	r2, [r4, #0]
 8019fe2:	e7f4      	b.n	8019fce <_scanf_float+0x192>
 8019fe4:	f1ba 0f00 	cmp.w	sl, #0
 8019fe8:	d10e      	bne.n	801a008 <_scanf_float+0x1cc>
 8019fea:	f1b9 0f00 	cmp.w	r9, #0
 8019fee:	d10e      	bne.n	801a00e <_scanf_float+0x1d2>
 8019ff0:	6822      	ldr	r2, [r4, #0]
 8019ff2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8019ff6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8019ffa:	d108      	bne.n	801a00e <_scanf_float+0x1d2>
 8019ffc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801a000:	6022      	str	r2, [r4, #0]
 801a002:	f04f 0a01 	mov.w	sl, #1
 801a006:	e7e2      	b.n	8019fce <_scanf_float+0x192>
 801a008:	f1ba 0f02 	cmp.w	sl, #2
 801a00c:	d055      	beq.n	801a0ba <_scanf_float+0x27e>
 801a00e:	2d01      	cmp	r5, #1
 801a010:	d002      	beq.n	801a018 <_scanf_float+0x1dc>
 801a012:	2d04      	cmp	r5, #4
 801a014:	f47f af44 	bne.w	8019ea0 <_scanf_float+0x64>
 801a018:	3501      	adds	r5, #1
 801a01a:	b2ed      	uxtb	r5, r5
 801a01c:	e7d7      	b.n	8019fce <_scanf_float+0x192>
 801a01e:	f1ba 0f01 	cmp.w	sl, #1
 801a022:	f47f af3d 	bne.w	8019ea0 <_scanf_float+0x64>
 801a026:	f04f 0a02 	mov.w	sl, #2
 801a02a:	e7d0      	b.n	8019fce <_scanf_float+0x192>
 801a02c:	b97d      	cbnz	r5, 801a04e <_scanf_float+0x212>
 801a02e:	f1b9 0f00 	cmp.w	r9, #0
 801a032:	f47f af38 	bne.w	8019ea6 <_scanf_float+0x6a>
 801a036:	6822      	ldr	r2, [r4, #0]
 801a038:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801a03c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801a040:	f040 8108 	bne.w	801a254 <_scanf_float+0x418>
 801a044:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801a048:	6022      	str	r2, [r4, #0]
 801a04a:	2501      	movs	r5, #1
 801a04c:	e7bf      	b.n	8019fce <_scanf_float+0x192>
 801a04e:	2d03      	cmp	r5, #3
 801a050:	d0e2      	beq.n	801a018 <_scanf_float+0x1dc>
 801a052:	2d05      	cmp	r5, #5
 801a054:	e7de      	b.n	801a014 <_scanf_float+0x1d8>
 801a056:	2d02      	cmp	r5, #2
 801a058:	f47f af22 	bne.w	8019ea0 <_scanf_float+0x64>
 801a05c:	2503      	movs	r5, #3
 801a05e:	e7b6      	b.n	8019fce <_scanf_float+0x192>
 801a060:	2d06      	cmp	r5, #6
 801a062:	f47f af1d 	bne.w	8019ea0 <_scanf_float+0x64>
 801a066:	2507      	movs	r5, #7
 801a068:	e7b1      	b.n	8019fce <_scanf_float+0x192>
 801a06a:	6822      	ldr	r2, [r4, #0]
 801a06c:	0591      	lsls	r1, r2, #22
 801a06e:	f57f af17 	bpl.w	8019ea0 <_scanf_float+0x64>
 801a072:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801a076:	6022      	str	r2, [r4, #0]
 801a078:	f8cd 9008 	str.w	r9, [sp, #8]
 801a07c:	e7a7      	b.n	8019fce <_scanf_float+0x192>
 801a07e:	6822      	ldr	r2, [r4, #0]
 801a080:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801a084:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801a088:	d006      	beq.n	801a098 <_scanf_float+0x25c>
 801a08a:	0550      	lsls	r0, r2, #21
 801a08c:	f57f af08 	bpl.w	8019ea0 <_scanf_float+0x64>
 801a090:	f1b9 0f00 	cmp.w	r9, #0
 801a094:	f000 80de 	beq.w	801a254 <_scanf_float+0x418>
 801a098:	0591      	lsls	r1, r2, #22
 801a09a:	bf58      	it	pl
 801a09c:	9902      	ldrpl	r1, [sp, #8]
 801a09e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801a0a2:	bf58      	it	pl
 801a0a4:	eba9 0101 	subpl.w	r1, r9, r1
 801a0a8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801a0ac:	bf58      	it	pl
 801a0ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a0b2:	6022      	str	r2, [r4, #0]
 801a0b4:	f04f 0900 	mov.w	r9, #0
 801a0b8:	e789      	b.n	8019fce <_scanf_float+0x192>
 801a0ba:	f04f 0a03 	mov.w	sl, #3
 801a0be:	e786      	b.n	8019fce <_scanf_float+0x192>
 801a0c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801a0c4:	4639      	mov	r1, r7
 801a0c6:	4640      	mov	r0, r8
 801a0c8:	4798      	blx	r3
 801a0ca:	2800      	cmp	r0, #0
 801a0cc:	f43f aedb 	beq.w	8019e86 <_scanf_float+0x4a>
 801a0d0:	e6e6      	b.n	8019ea0 <_scanf_float+0x64>
 801a0d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a0d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a0da:	463a      	mov	r2, r7
 801a0dc:	4640      	mov	r0, r8
 801a0de:	4798      	blx	r3
 801a0e0:	6923      	ldr	r3, [r4, #16]
 801a0e2:	3b01      	subs	r3, #1
 801a0e4:	6123      	str	r3, [r4, #16]
 801a0e6:	e6e8      	b.n	8019eba <_scanf_float+0x7e>
 801a0e8:	1e6b      	subs	r3, r5, #1
 801a0ea:	2b06      	cmp	r3, #6
 801a0ec:	d824      	bhi.n	801a138 <_scanf_float+0x2fc>
 801a0ee:	2d02      	cmp	r5, #2
 801a0f0:	d836      	bhi.n	801a160 <_scanf_float+0x324>
 801a0f2:	9b01      	ldr	r3, [sp, #4]
 801a0f4:	429e      	cmp	r6, r3
 801a0f6:	f67f aee4 	bls.w	8019ec2 <_scanf_float+0x86>
 801a0fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a0fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a102:	463a      	mov	r2, r7
 801a104:	4640      	mov	r0, r8
 801a106:	4798      	blx	r3
 801a108:	6923      	ldr	r3, [r4, #16]
 801a10a:	3b01      	subs	r3, #1
 801a10c:	6123      	str	r3, [r4, #16]
 801a10e:	e7f0      	b.n	801a0f2 <_scanf_float+0x2b6>
 801a110:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a114:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801a118:	463a      	mov	r2, r7
 801a11a:	4640      	mov	r0, r8
 801a11c:	4798      	blx	r3
 801a11e:	6923      	ldr	r3, [r4, #16]
 801a120:	3b01      	subs	r3, #1
 801a122:	6123      	str	r3, [r4, #16]
 801a124:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801a128:	fa5f fa8a 	uxtb.w	sl, sl
 801a12c:	f1ba 0f02 	cmp.w	sl, #2
 801a130:	d1ee      	bne.n	801a110 <_scanf_float+0x2d4>
 801a132:	3d03      	subs	r5, #3
 801a134:	b2ed      	uxtb	r5, r5
 801a136:	1b76      	subs	r6, r6, r5
 801a138:	6823      	ldr	r3, [r4, #0]
 801a13a:	05da      	lsls	r2, r3, #23
 801a13c:	d530      	bpl.n	801a1a0 <_scanf_float+0x364>
 801a13e:	055b      	lsls	r3, r3, #21
 801a140:	d511      	bpl.n	801a166 <_scanf_float+0x32a>
 801a142:	9b01      	ldr	r3, [sp, #4]
 801a144:	429e      	cmp	r6, r3
 801a146:	f67f aebc 	bls.w	8019ec2 <_scanf_float+0x86>
 801a14a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a14e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a152:	463a      	mov	r2, r7
 801a154:	4640      	mov	r0, r8
 801a156:	4798      	blx	r3
 801a158:	6923      	ldr	r3, [r4, #16]
 801a15a:	3b01      	subs	r3, #1
 801a15c:	6123      	str	r3, [r4, #16]
 801a15e:	e7f0      	b.n	801a142 <_scanf_float+0x306>
 801a160:	46aa      	mov	sl, r5
 801a162:	46b3      	mov	fp, r6
 801a164:	e7de      	b.n	801a124 <_scanf_float+0x2e8>
 801a166:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a16a:	6923      	ldr	r3, [r4, #16]
 801a16c:	2965      	cmp	r1, #101	@ 0x65
 801a16e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801a172:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 801a176:	6123      	str	r3, [r4, #16]
 801a178:	d00c      	beq.n	801a194 <_scanf_float+0x358>
 801a17a:	2945      	cmp	r1, #69	@ 0x45
 801a17c:	d00a      	beq.n	801a194 <_scanf_float+0x358>
 801a17e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a182:	463a      	mov	r2, r7
 801a184:	4640      	mov	r0, r8
 801a186:	4798      	blx	r3
 801a188:	6923      	ldr	r3, [r4, #16]
 801a18a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a18e:	3b01      	subs	r3, #1
 801a190:	1eb5      	subs	r5, r6, #2
 801a192:	6123      	str	r3, [r4, #16]
 801a194:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a198:	463a      	mov	r2, r7
 801a19a:	4640      	mov	r0, r8
 801a19c:	4798      	blx	r3
 801a19e:	462e      	mov	r6, r5
 801a1a0:	6822      	ldr	r2, [r4, #0]
 801a1a2:	f012 0210 	ands.w	r2, r2, #16
 801a1a6:	d001      	beq.n	801a1ac <_scanf_float+0x370>
 801a1a8:	2000      	movs	r0, #0
 801a1aa:	e68b      	b.n	8019ec4 <_scanf_float+0x88>
 801a1ac:	7032      	strb	r2, [r6, #0]
 801a1ae:	6823      	ldr	r3, [r4, #0]
 801a1b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801a1b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a1b8:	d11c      	bne.n	801a1f4 <_scanf_float+0x3b8>
 801a1ba:	9b02      	ldr	r3, [sp, #8]
 801a1bc:	454b      	cmp	r3, r9
 801a1be:	eba3 0209 	sub.w	r2, r3, r9
 801a1c2:	d123      	bne.n	801a20c <_scanf_float+0x3d0>
 801a1c4:	9901      	ldr	r1, [sp, #4]
 801a1c6:	2200      	movs	r2, #0
 801a1c8:	4640      	mov	r0, r8
 801a1ca:	f002 fdb1 	bl	801cd30 <_strtod_r>
 801a1ce:	9b03      	ldr	r3, [sp, #12]
 801a1d0:	6821      	ldr	r1, [r4, #0]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	f011 0f02 	tst.w	r1, #2
 801a1d8:	ec57 6b10 	vmov	r6, r7, d0
 801a1dc:	f103 0204 	add.w	r2, r3, #4
 801a1e0:	d01f      	beq.n	801a222 <_scanf_float+0x3e6>
 801a1e2:	9903      	ldr	r1, [sp, #12]
 801a1e4:	600a      	str	r2, [r1, #0]
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	e9c3 6700 	strd	r6, r7, [r3]
 801a1ec:	68e3      	ldr	r3, [r4, #12]
 801a1ee:	3301      	adds	r3, #1
 801a1f0:	60e3      	str	r3, [r4, #12]
 801a1f2:	e7d9      	b.n	801a1a8 <_scanf_float+0x36c>
 801a1f4:	9b04      	ldr	r3, [sp, #16]
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d0e4      	beq.n	801a1c4 <_scanf_float+0x388>
 801a1fa:	9905      	ldr	r1, [sp, #20]
 801a1fc:	230a      	movs	r3, #10
 801a1fe:	3101      	adds	r1, #1
 801a200:	4640      	mov	r0, r8
 801a202:	f002 fe15 	bl	801ce30 <_strtol_r>
 801a206:	9b04      	ldr	r3, [sp, #16]
 801a208:	9e05      	ldr	r6, [sp, #20]
 801a20a:	1ac2      	subs	r2, r0, r3
 801a20c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801a210:	429e      	cmp	r6, r3
 801a212:	bf28      	it	cs
 801a214:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801a218:	4910      	ldr	r1, [pc, #64]	@ (801a25c <_scanf_float+0x420>)
 801a21a:	4630      	mov	r0, r6
 801a21c:	f000 f988 	bl	801a530 <siprintf>
 801a220:	e7d0      	b.n	801a1c4 <_scanf_float+0x388>
 801a222:	f011 0f04 	tst.w	r1, #4
 801a226:	9903      	ldr	r1, [sp, #12]
 801a228:	600a      	str	r2, [r1, #0]
 801a22a:	d1dc      	bne.n	801a1e6 <_scanf_float+0x3aa>
 801a22c:	681d      	ldr	r5, [r3, #0]
 801a22e:	4632      	mov	r2, r6
 801a230:	463b      	mov	r3, r7
 801a232:	4630      	mov	r0, r6
 801a234:	4639      	mov	r1, r7
 801a236:	f7e6 fc91 	bl	8000b5c <__aeabi_dcmpun>
 801a23a:	b128      	cbz	r0, 801a248 <_scanf_float+0x40c>
 801a23c:	4808      	ldr	r0, [pc, #32]	@ (801a260 <_scanf_float+0x424>)
 801a23e:	f000 fbf3 	bl	801aa28 <nanf>
 801a242:	ed85 0a00 	vstr	s0, [r5]
 801a246:	e7d1      	b.n	801a1ec <_scanf_float+0x3b0>
 801a248:	4630      	mov	r0, r6
 801a24a:	4639      	mov	r1, r7
 801a24c:	f7e6 fce4 	bl	8000c18 <__aeabi_d2f>
 801a250:	6028      	str	r0, [r5, #0]
 801a252:	e7cb      	b.n	801a1ec <_scanf_float+0x3b0>
 801a254:	f04f 0900 	mov.w	r9, #0
 801a258:	e629      	b.n	8019eae <_scanf_float+0x72>
 801a25a:	bf00      	nop
 801a25c:	0801e9e4 	.word	0x0801e9e4
 801a260:	0801ea24 	.word	0x0801ea24

0801a264 <std>:
 801a264:	2300      	movs	r3, #0
 801a266:	b510      	push	{r4, lr}
 801a268:	4604      	mov	r4, r0
 801a26a:	e9c0 3300 	strd	r3, r3, [r0]
 801a26e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a272:	6083      	str	r3, [r0, #8]
 801a274:	8181      	strh	r1, [r0, #12]
 801a276:	6643      	str	r3, [r0, #100]	@ 0x64
 801a278:	81c2      	strh	r2, [r0, #14]
 801a27a:	6183      	str	r3, [r0, #24]
 801a27c:	4619      	mov	r1, r3
 801a27e:	2208      	movs	r2, #8
 801a280:	305c      	adds	r0, #92	@ 0x5c
 801a282:	f000 fa9f 	bl	801a7c4 <memset>
 801a286:	4b0d      	ldr	r3, [pc, #52]	@ (801a2bc <std+0x58>)
 801a288:	6263      	str	r3, [r4, #36]	@ 0x24
 801a28a:	4b0d      	ldr	r3, [pc, #52]	@ (801a2c0 <std+0x5c>)
 801a28c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a28e:	4b0d      	ldr	r3, [pc, #52]	@ (801a2c4 <std+0x60>)
 801a290:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a292:	4b0d      	ldr	r3, [pc, #52]	@ (801a2c8 <std+0x64>)
 801a294:	6323      	str	r3, [r4, #48]	@ 0x30
 801a296:	4b0d      	ldr	r3, [pc, #52]	@ (801a2cc <std+0x68>)
 801a298:	6224      	str	r4, [r4, #32]
 801a29a:	429c      	cmp	r4, r3
 801a29c:	d006      	beq.n	801a2ac <std+0x48>
 801a29e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a2a2:	4294      	cmp	r4, r2
 801a2a4:	d002      	beq.n	801a2ac <std+0x48>
 801a2a6:	33d0      	adds	r3, #208	@ 0xd0
 801a2a8:	429c      	cmp	r4, r3
 801a2aa:	d105      	bne.n	801a2b8 <std+0x54>
 801a2ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2b4:	f000 bb9e 	b.w	801a9f4 <__retarget_lock_init_recursive>
 801a2b8:	bd10      	pop	{r4, pc}
 801a2ba:	bf00      	nop
 801a2bc:	0801a571 	.word	0x0801a571
 801a2c0:	0801a593 	.word	0x0801a593
 801a2c4:	0801a5cb 	.word	0x0801a5cb
 801a2c8:	0801a5ef 	.word	0x0801a5ef
 801a2cc:	20009eb4 	.word	0x20009eb4

0801a2d0 <stdio_exit_handler>:
 801a2d0:	4a02      	ldr	r2, [pc, #8]	@ (801a2dc <stdio_exit_handler+0xc>)
 801a2d2:	4903      	ldr	r1, [pc, #12]	@ (801a2e0 <stdio_exit_handler+0x10>)
 801a2d4:	4803      	ldr	r0, [pc, #12]	@ (801a2e4 <stdio_exit_handler+0x14>)
 801a2d6:	f000 b869 	b.w	801a3ac <_fwalk_sglue>
 801a2da:	bf00      	nop
 801a2dc:	20000084 	.word	0x20000084
 801a2e0:	0801d471 	.word	0x0801d471
 801a2e4:	20000094 	.word	0x20000094

0801a2e8 <cleanup_stdio>:
 801a2e8:	6841      	ldr	r1, [r0, #4]
 801a2ea:	4b0c      	ldr	r3, [pc, #48]	@ (801a31c <cleanup_stdio+0x34>)
 801a2ec:	4299      	cmp	r1, r3
 801a2ee:	b510      	push	{r4, lr}
 801a2f0:	4604      	mov	r4, r0
 801a2f2:	d001      	beq.n	801a2f8 <cleanup_stdio+0x10>
 801a2f4:	f003 f8bc 	bl	801d470 <_fflush_r>
 801a2f8:	68a1      	ldr	r1, [r4, #8]
 801a2fa:	4b09      	ldr	r3, [pc, #36]	@ (801a320 <cleanup_stdio+0x38>)
 801a2fc:	4299      	cmp	r1, r3
 801a2fe:	d002      	beq.n	801a306 <cleanup_stdio+0x1e>
 801a300:	4620      	mov	r0, r4
 801a302:	f003 f8b5 	bl	801d470 <_fflush_r>
 801a306:	68e1      	ldr	r1, [r4, #12]
 801a308:	4b06      	ldr	r3, [pc, #24]	@ (801a324 <cleanup_stdio+0x3c>)
 801a30a:	4299      	cmp	r1, r3
 801a30c:	d004      	beq.n	801a318 <cleanup_stdio+0x30>
 801a30e:	4620      	mov	r0, r4
 801a310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a314:	f003 b8ac 	b.w	801d470 <_fflush_r>
 801a318:	bd10      	pop	{r4, pc}
 801a31a:	bf00      	nop
 801a31c:	20009eb4 	.word	0x20009eb4
 801a320:	20009f1c 	.word	0x20009f1c
 801a324:	20009f84 	.word	0x20009f84

0801a328 <global_stdio_init.part.0>:
 801a328:	b510      	push	{r4, lr}
 801a32a:	4b0b      	ldr	r3, [pc, #44]	@ (801a358 <global_stdio_init.part.0+0x30>)
 801a32c:	4c0b      	ldr	r4, [pc, #44]	@ (801a35c <global_stdio_init.part.0+0x34>)
 801a32e:	4a0c      	ldr	r2, [pc, #48]	@ (801a360 <global_stdio_init.part.0+0x38>)
 801a330:	601a      	str	r2, [r3, #0]
 801a332:	4620      	mov	r0, r4
 801a334:	2200      	movs	r2, #0
 801a336:	2104      	movs	r1, #4
 801a338:	f7ff ff94 	bl	801a264 <std>
 801a33c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a340:	2201      	movs	r2, #1
 801a342:	2109      	movs	r1, #9
 801a344:	f7ff ff8e 	bl	801a264 <std>
 801a348:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a34c:	2202      	movs	r2, #2
 801a34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a352:	2112      	movs	r1, #18
 801a354:	f7ff bf86 	b.w	801a264 <std>
 801a358:	20009fec 	.word	0x20009fec
 801a35c:	20009eb4 	.word	0x20009eb4
 801a360:	0801a2d1 	.word	0x0801a2d1

0801a364 <__sfp_lock_acquire>:
 801a364:	4801      	ldr	r0, [pc, #4]	@ (801a36c <__sfp_lock_acquire+0x8>)
 801a366:	f000 bb46 	b.w	801a9f6 <__retarget_lock_acquire_recursive>
 801a36a:	bf00      	nop
 801a36c:	20009ff6 	.word	0x20009ff6

0801a370 <__sfp_lock_release>:
 801a370:	4801      	ldr	r0, [pc, #4]	@ (801a378 <__sfp_lock_release+0x8>)
 801a372:	f000 bb41 	b.w	801a9f8 <__retarget_lock_release_recursive>
 801a376:	bf00      	nop
 801a378:	20009ff6 	.word	0x20009ff6

0801a37c <__sinit>:
 801a37c:	b510      	push	{r4, lr}
 801a37e:	4604      	mov	r4, r0
 801a380:	f7ff fff0 	bl	801a364 <__sfp_lock_acquire>
 801a384:	6a23      	ldr	r3, [r4, #32]
 801a386:	b11b      	cbz	r3, 801a390 <__sinit+0x14>
 801a388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a38c:	f7ff bff0 	b.w	801a370 <__sfp_lock_release>
 801a390:	4b04      	ldr	r3, [pc, #16]	@ (801a3a4 <__sinit+0x28>)
 801a392:	6223      	str	r3, [r4, #32]
 801a394:	4b04      	ldr	r3, [pc, #16]	@ (801a3a8 <__sinit+0x2c>)
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d1f5      	bne.n	801a388 <__sinit+0xc>
 801a39c:	f7ff ffc4 	bl	801a328 <global_stdio_init.part.0>
 801a3a0:	e7f2      	b.n	801a388 <__sinit+0xc>
 801a3a2:	bf00      	nop
 801a3a4:	0801a2e9 	.word	0x0801a2e9
 801a3a8:	20009fec 	.word	0x20009fec

0801a3ac <_fwalk_sglue>:
 801a3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3b0:	4607      	mov	r7, r0
 801a3b2:	4688      	mov	r8, r1
 801a3b4:	4614      	mov	r4, r2
 801a3b6:	2600      	movs	r6, #0
 801a3b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a3bc:	f1b9 0901 	subs.w	r9, r9, #1
 801a3c0:	d505      	bpl.n	801a3ce <_fwalk_sglue+0x22>
 801a3c2:	6824      	ldr	r4, [r4, #0]
 801a3c4:	2c00      	cmp	r4, #0
 801a3c6:	d1f7      	bne.n	801a3b8 <_fwalk_sglue+0xc>
 801a3c8:	4630      	mov	r0, r6
 801a3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a3ce:	89ab      	ldrh	r3, [r5, #12]
 801a3d0:	2b01      	cmp	r3, #1
 801a3d2:	d907      	bls.n	801a3e4 <_fwalk_sglue+0x38>
 801a3d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a3d8:	3301      	adds	r3, #1
 801a3da:	d003      	beq.n	801a3e4 <_fwalk_sglue+0x38>
 801a3dc:	4629      	mov	r1, r5
 801a3de:	4638      	mov	r0, r7
 801a3e0:	47c0      	blx	r8
 801a3e2:	4306      	orrs	r6, r0
 801a3e4:	3568      	adds	r5, #104	@ 0x68
 801a3e6:	e7e9      	b.n	801a3bc <_fwalk_sglue+0x10>

0801a3e8 <iprintf>:
 801a3e8:	b40f      	push	{r0, r1, r2, r3}
 801a3ea:	b507      	push	{r0, r1, r2, lr}
 801a3ec:	4906      	ldr	r1, [pc, #24]	@ (801a408 <iprintf+0x20>)
 801a3ee:	ab04      	add	r3, sp, #16
 801a3f0:	6808      	ldr	r0, [r1, #0]
 801a3f2:	f853 2b04 	ldr.w	r2, [r3], #4
 801a3f6:	6881      	ldr	r1, [r0, #8]
 801a3f8:	9301      	str	r3, [sp, #4]
 801a3fa:	f002 fe9d 	bl	801d138 <_vfiprintf_r>
 801a3fe:	b003      	add	sp, #12
 801a400:	f85d eb04 	ldr.w	lr, [sp], #4
 801a404:	b004      	add	sp, #16
 801a406:	4770      	bx	lr
 801a408:	20000090 	.word	0x20000090

0801a40c <_puts_r>:
 801a40c:	6a03      	ldr	r3, [r0, #32]
 801a40e:	b570      	push	{r4, r5, r6, lr}
 801a410:	6884      	ldr	r4, [r0, #8]
 801a412:	4605      	mov	r5, r0
 801a414:	460e      	mov	r6, r1
 801a416:	b90b      	cbnz	r3, 801a41c <_puts_r+0x10>
 801a418:	f7ff ffb0 	bl	801a37c <__sinit>
 801a41c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a41e:	07db      	lsls	r3, r3, #31
 801a420:	d405      	bmi.n	801a42e <_puts_r+0x22>
 801a422:	89a3      	ldrh	r3, [r4, #12]
 801a424:	0598      	lsls	r0, r3, #22
 801a426:	d402      	bmi.n	801a42e <_puts_r+0x22>
 801a428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a42a:	f000 fae4 	bl	801a9f6 <__retarget_lock_acquire_recursive>
 801a42e:	89a3      	ldrh	r3, [r4, #12]
 801a430:	0719      	lsls	r1, r3, #28
 801a432:	d502      	bpl.n	801a43a <_puts_r+0x2e>
 801a434:	6923      	ldr	r3, [r4, #16]
 801a436:	2b00      	cmp	r3, #0
 801a438:	d135      	bne.n	801a4a6 <_puts_r+0x9a>
 801a43a:	4621      	mov	r1, r4
 801a43c:	4628      	mov	r0, r5
 801a43e:	f000 f951 	bl	801a6e4 <__swsetup_r>
 801a442:	b380      	cbz	r0, 801a4a6 <_puts_r+0x9a>
 801a444:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801a448:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a44a:	07da      	lsls	r2, r3, #31
 801a44c:	d405      	bmi.n	801a45a <_puts_r+0x4e>
 801a44e:	89a3      	ldrh	r3, [r4, #12]
 801a450:	059b      	lsls	r3, r3, #22
 801a452:	d402      	bmi.n	801a45a <_puts_r+0x4e>
 801a454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a456:	f000 facf 	bl	801a9f8 <__retarget_lock_release_recursive>
 801a45a:	4628      	mov	r0, r5
 801a45c:	bd70      	pop	{r4, r5, r6, pc}
 801a45e:	2b00      	cmp	r3, #0
 801a460:	da04      	bge.n	801a46c <_puts_r+0x60>
 801a462:	69a2      	ldr	r2, [r4, #24]
 801a464:	429a      	cmp	r2, r3
 801a466:	dc17      	bgt.n	801a498 <_puts_r+0x8c>
 801a468:	290a      	cmp	r1, #10
 801a46a:	d015      	beq.n	801a498 <_puts_r+0x8c>
 801a46c:	6823      	ldr	r3, [r4, #0]
 801a46e:	1c5a      	adds	r2, r3, #1
 801a470:	6022      	str	r2, [r4, #0]
 801a472:	7019      	strb	r1, [r3, #0]
 801a474:	68a3      	ldr	r3, [r4, #8]
 801a476:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a47a:	3b01      	subs	r3, #1
 801a47c:	60a3      	str	r3, [r4, #8]
 801a47e:	2900      	cmp	r1, #0
 801a480:	d1ed      	bne.n	801a45e <_puts_r+0x52>
 801a482:	2b00      	cmp	r3, #0
 801a484:	da11      	bge.n	801a4aa <_puts_r+0x9e>
 801a486:	4622      	mov	r2, r4
 801a488:	210a      	movs	r1, #10
 801a48a:	4628      	mov	r0, r5
 801a48c:	f000 f8ec 	bl	801a668 <__swbuf_r>
 801a490:	3001      	adds	r0, #1
 801a492:	d0d7      	beq.n	801a444 <_puts_r+0x38>
 801a494:	250a      	movs	r5, #10
 801a496:	e7d7      	b.n	801a448 <_puts_r+0x3c>
 801a498:	4622      	mov	r2, r4
 801a49a:	4628      	mov	r0, r5
 801a49c:	f000 f8e4 	bl	801a668 <__swbuf_r>
 801a4a0:	3001      	adds	r0, #1
 801a4a2:	d1e7      	bne.n	801a474 <_puts_r+0x68>
 801a4a4:	e7ce      	b.n	801a444 <_puts_r+0x38>
 801a4a6:	3e01      	subs	r6, #1
 801a4a8:	e7e4      	b.n	801a474 <_puts_r+0x68>
 801a4aa:	6823      	ldr	r3, [r4, #0]
 801a4ac:	1c5a      	adds	r2, r3, #1
 801a4ae:	6022      	str	r2, [r4, #0]
 801a4b0:	220a      	movs	r2, #10
 801a4b2:	701a      	strb	r2, [r3, #0]
 801a4b4:	e7ee      	b.n	801a494 <_puts_r+0x88>
	...

0801a4b8 <puts>:
 801a4b8:	4b02      	ldr	r3, [pc, #8]	@ (801a4c4 <puts+0xc>)
 801a4ba:	4601      	mov	r1, r0
 801a4bc:	6818      	ldr	r0, [r3, #0]
 801a4be:	f7ff bfa5 	b.w	801a40c <_puts_r>
 801a4c2:	bf00      	nop
 801a4c4:	20000090 	.word	0x20000090

0801a4c8 <sniprintf>:
 801a4c8:	b40c      	push	{r2, r3}
 801a4ca:	b530      	push	{r4, r5, lr}
 801a4cc:	4b17      	ldr	r3, [pc, #92]	@ (801a52c <sniprintf+0x64>)
 801a4ce:	1e0c      	subs	r4, r1, #0
 801a4d0:	681d      	ldr	r5, [r3, #0]
 801a4d2:	b09d      	sub	sp, #116	@ 0x74
 801a4d4:	da08      	bge.n	801a4e8 <sniprintf+0x20>
 801a4d6:	238b      	movs	r3, #139	@ 0x8b
 801a4d8:	602b      	str	r3, [r5, #0]
 801a4da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a4de:	b01d      	add	sp, #116	@ 0x74
 801a4e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a4e4:	b002      	add	sp, #8
 801a4e6:	4770      	bx	lr
 801a4e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a4ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a4f0:	bf14      	ite	ne
 801a4f2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801a4f6:	4623      	moveq	r3, r4
 801a4f8:	9304      	str	r3, [sp, #16]
 801a4fa:	9307      	str	r3, [sp, #28]
 801a4fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a500:	9002      	str	r0, [sp, #8]
 801a502:	9006      	str	r0, [sp, #24]
 801a504:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a508:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a50a:	ab21      	add	r3, sp, #132	@ 0x84
 801a50c:	a902      	add	r1, sp, #8
 801a50e:	4628      	mov	r0, r5
 801a510:	9301      	str	r3, [sp, #4]
 801a512:	f002 fceb 	bl	801ceec <_svfiprintf_r>
 801a516:	1c43      	adds	r3, r0, #1
 801a518:	bfbc      	itt	lt
 801a51a:	238b      	movlt	r3, #139	@ 0x8b
 801a51c:	602b      	strlt	r3, [r5, #0]
 801a51e:	2c00      	cmp	r4, #0
 801a520:	d0dd      	beq.n	801a4de <sniprintf+0x16>
 801a522:	9b02      	ldr	r3, [sp, #8]
 801a524:	2200      	movs	r2, #0
 801a526:	701a      	strb	r2, [r3, #0]
 801a528:	e7d9      	b.n	801a4de <sniprintf+0x16>
 801a52a:	bf00      	nop
 801a52c:	20000090 	.word	0x20000090

0801a530 <siprintf>:
 801a530:	b40e      	push	{r1, r2, r3}
 801a532:	b500      	push	{lr}
 801a534:	b09c      	sub	sp, #112	@ 0x70
 801a536:	ab1d      	add	r3, sp, #116	@ 0x74
 801a538:	9002      	str	r0, [sp, #8]
 801a53a:	9006      	str	r0, [sp, #24]
 801a53c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a540:	4809      	ldr	r0, [pc, #36]	@ (801a568 <siprintf+0x38>)
 801a542:	9107      	str	r1, [sp, #28]
 801a544:	9104      	str	r1, [sp, #16]
 801a546:	4909      	ldr	r1, [pc, #36]	@ (801a56c <siprintf+0x3c>)
 801a548:	f853 2b04 	ldr.w	r2, [r3], #4
 801a54c:	9105      	str	r1, [sp, #20]
 801a54e:	6800      	ldr	r0, [r0, #0]
 801a550:	9301      	str	r3, [sp, #4]
 801a552:	a902      	add	r1, sp, #8
 801a554:	f002 fcca 	bl	801ceec <_svfiprintf_r>
 801a558:	9b02      	ldr	r3, [sp, #8]
 801a55a:	2200      	movs	r2, #0
 801a55c:	701a      	strb	r2, [r3, #0]
 801a55e:	b01c      	add	sp, #112	@ 0x70
 801a560:	f85d eb04 	ldr.w	lr, [sp], #4
 801a564:	b003      	add	sp, #12
 801a566:	4770      	bx	lr
 801a568:	20000090 	.word	0x20000090
 801a56c:	ffff0208 	.word	0xffff0208

0801a570 <__sread>:
 801a570:	b510      	push	{r4, lr}
 801a572:	460c      	mov	r4, r1
 801a574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a578:	f000 f9de 	bl	801a938 <_read_r>
 801a57c:	2800      	cmp	r0, #0
 801a57e:	bfab      	itete	ge
 801a580:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a582:	89a3      	ldrhlt	r3, [r4, #12]
 801a584:	181b      	addge	r3, r3, r0
 801a586:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a58a:	bfac      	ite	ge
 801a58c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a58e:	81a3      	strhlt	r3, [r4, #12]
 801a590:	bd10      	pop	{r4, pc}

0801a592 <__swrite>:
 801a592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a596:	461f      	mov	r7, r3
 801a598:	898b      	ldrh	r3, [r1, #12]
 801a59a:	05db      	lsls	r3, r3, #23
 801a59c:	4605      	mov	r5, r0
 801a59e:	460c      	mov	r4, r1
 801a5a0:	4616      	mov	r6, r2
 801a5a2:	d505      	bpl.n	801a5b0 <__swrite+0x1e>
 801a5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5a8:	2302      	movs	r3, #2
 801a5aa:	2200      	movs	r2, #0
 801a5ac:	f000 f9b2 	bl	801a914 <_lseek_r>
 801a5b0:	89a3      	ldrh	r3, [r4, #12]
 801a5b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a5b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a5ba:	81a3      	strh	r3, [r4, #12]
 801a5bc:	4632      	mov	r2, r6
 801a5be:	463b      	mov	r3, r7
 801a5c0:	4628      	mov	r0, r5
 801a5c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a5c6:	f000 b9d9 	b.w	801a97c <_write_r>

0801a5ca <__sseek>:
 801a5ca:	b510      	push	{r4, lr}
 801a5cc:	460c      	mov	r4, r1
 801a5ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5d2:	f000 f99f 	bl	801a914 <_lseek_r>
 801a5d6:	1c43      	adds	r3, r0, #1
 801a5d8:	89a3      	ldrh	r3, [r4, #12]
 801a5da:	bf15      	itete	ne
 801a5dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a5de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a5e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a5e6:	81a3      	strheq	r3, [r4, #12]
 801a5e8:	bf18      	it	ne
 801a5ea:	81a3      	strhne	r3, [r4, #12]
 801a5ec:	bd10      	pop	{r4, pc}

0801a5ee <__sclose>:
 801a5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5f2:	f000 b929 	b.w	801a848 <_close_r>

0801a5f6 <_vsniprintf_r>:
 801a5f6:	b530      	push	{r4, r5, lr}
 801a5f8:	4614      	mov	r4, r2
 801a5fa:	2c00      	cmp	r4, #0
 801a5fc:	b09b      	sub	sp, #108	@ 0x6c
 801a5fe:	4605      	mov	r5, r0
 801a600:	461a      	mov	r2, r3
 801a602:	da05      	bge.n	801a610 <_vsniprintf_r+0x1a>
 801a604:	238b      	movs	r3, #139	@ 0x8b
 801a606:	6003      	str	r3, [r0, #0]
 801a608:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a60c:	b01b      	add	sp, #108	@ 0x6c
 801a60e:	bd30      	pop	{r4, r5, pc}
 801a610:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a614:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a618:	bf14      	ite	ne
 801a61a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801a61e:	4623      	moveq	r3, r4
 801a620:	9302      	str	r3, [sp, #8]
 801a622:	9305      	str	r3, [sp, #20]
 801a624:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a628:	9100      	str	r1, [sp, #0]
 801a62a:	9104      	str	r1, [sp, #16]
 801a62c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a630:	4669      	mov	r1, sp
 801a632:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a634:	f002 fc5a 	bl	801ceec <_svfiprintf_r>
 801a638:	1c43      	adds	r3, r0, #1
 801a63a:	bfbc      	itt	lt
 801a63c:	238b      	movlt	r3, #139	@ 0x8b
 801a63e:	602b      	strlt	r3, [r5, #0]
 801a640:	2c00      	cmp	r4, #0
 801a642:	d0e3      	beq.n	801a60c <_vsniprintf_r+0x16>
 801a644:	9b00      	ldr	r3, [sp, #0]
 801a646:	2200      	movs	r2, #0
 801a648:	701a      	strb	r2, [r3, #0]
 801a64a:	e7df      	b.n	801a60c <_vsniprintf_r+0x16>

0801a64c <vsniprintf>:
 801a64c:	b507      	push	{r0, r1, r2, lr}
 801a64e:	9300      	str	r3, [sp, #0]
 801a650:	4613      	mov	r3, r2
 801a652:	460a      	mov	r2, r1
 801a654:	4601      	mov	r1, r0
 801a656:	4803      	ldr	r0, [pc, #12]	@ (801a664 <vsniprintf+0x18>)
 801a658:	6800      	ldr	r0, [r0, #0]
 801a65a:	f7ff ffcc 	bl	801a5f6 <_vsniprintf_r>
 801a65e:	b003      	add	sp, #12
 801a660:	f85d fb04 	ldr.w	pc, [sp], #4
 801a664:	20000090 	.word	0x20000090

0801a668 <__swbuf_r>:
 801a668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a66a:	460e      	mov	r6, r1
 801a66c:	4614      	mov	r4, r2
 801a66e:	4605      	mov	r5, r0
 801a670:	b118      	cbz	r0, 801a67a <__swbuf_r+0x12>
 801a672:	6a03      	ldr	r3, [r0, #32]
 801a674:	b90b      	cbnz	r3, 801a67a <__swbuf_r+0x12>
 801a676:	f7ff fe81 	bl	801a37c <__sinit>
 801a67a:	69a3      	ldr	r3, [r4, #24]
 801a67c:	60a3      	str	r3, [r4, #8]
 801a67e:	89a3      	ldrh	r3, [r4, #12]
 801a680:	071a      	lsls	r2, r3, #28
 801a682:	d501      	bpl.n	801a688 <__swbuf_r+0x20>
 801a684:	6923      	ldr	r3, [r4, #16]
 801a686:	b943      	cbnz	r3, 801a69a <__swbuf_r+0x32>
 801a688:	4621      	mov	r1, r4
 801a68a:	4628      	mov	r0, r5
 801a68c:	f000 f82a 	bl	801a6e4 <__swsetup_r>
 801a690:	b118      	cbz	r0, 801a69a <__swbuf_r+0x32>
 801a692:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801a696:	4638      	mov	r0, r7
 801a698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a69a:	6823      	ldr	r3, [r4, #0]
 801a69c:	6922      	ldr	r2, [r4, #16]
 801a69e:	1a98      	subs	r0, r3, r2
 801a6a0:	6963      	ldr	r3, [r4, #20]
 801a6a2:	b2f6      	uxtb	r6, r6
 801a6a4:	4283      	cmp	r3, r0
 801a6a6:	4637      	mov	r7, r6
 801a6a8:	dc05      	bgt.n	801a6b6 <__swbuf_r+0x4e>
 801a6aa:	4621      	mov	r1, r4
 801a6ac:	4628      	mov	r0, r5
 801a6ae:	f002 fedf 	bl	801d470 <_fflush_r>
 801a6b2:	2800      	cmp	r0, #0
 801a6b4:	d1ed      	bne.n	801a692 <__swbuf_r+0x2a>
 801a6b6:	68a3      	ldr	r3, [r4, #8]
 801a6b8:	3b01      	subs	r3, #1
 801a6ba:	60a3      	str	r3, [r4, #8]
 801a6bc:	6823      	ldr	r3, [r4, #0]
 801a6be:	1c5a      	adds	r2, r3, #1
 801a6c0:	6022      	str	r2, [r4, #0]
 801a6c2:	701e      	strb	r6, [r3, #0]
 801a6c4:	6962      	ldr	r2, [r4, #20]
 801a6c6:	1c43      	adds	r3, r0, #1
 801a6c8:	429a      	cmp	r2, r3
 801a6ca:	d004      	beq.n	801a6d6 <__swbuf_r+0x6e>
 801a6cc:	89a3      	ldrh	r3, [r4, #12]
 801a6ce:	07db      	lsls	r3, r3, #31
 801a6d0:	d5e1      	bpl.n	801a696 <__swbuf_r+0x2e>
 801a6d2:	2e0a      	cmp	r6, #10
 801a6d4:	d1df      	bne.n	801a696 <__swbuf_r+0x2e>
 801a6d6:	4621      	mov	r1, r4
 801a6d8:	4628      	mov	r0, r5
 801a6da:	f002 fec9 	bl	801d470 <_fflush_r>
 801a6de:	2800      	cmp	r0, #0
 801a6e0:	d0d9      	beq.n	801a696 <__swbuf_r+0x2e>
 801a6e2:	e7d6      	b.n	801a692 <__swbuf_r+0x2a>

0801a6e4 <__swsetup_r>:
 801a6e4:	b538      	push	{r3, r4, r5, lr}
 801a6e6:	4b29      	ldr	r3, [pc, #164]	@ (801a78c <__swsetup_r+0xa8>)
 801a6e8:	4605      	mov	r5, r0
 801a6ea:	6818      	ldr	r0, [r3, #0]
 801a6ec:	460c      	mov	r4, r1
 801a6ee:	b118      	cbz	r0, 801a6f8 <__swsetup_r+0x14>
 801a6f0:	6a03      	ldr	r3, [r0, #32]
 801a6f2:	b90b      	cbnz	r3, 801a6f8 <__swsetup_r+0x14>
 801a6f4:	f7ff fe42 	bl	801a37c <__sinit>
 801a6f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a6fc:	0719      	lsls	r1, r3, #28
 801a6fe:	d422      	bmi.n	801a746 <__swsetup_r+0x62>
 801a700:	06da      	lsls	r2, r3, #27
 801a702:	d407      	bmi.n	801a714 <__swsetup_r+0x30>
 801a704:	2209      	movs	r2, #9
 801a706:	602a      	str	r2, [r5, #0]
 801a708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a70c:	81a3      	strh	r3, [r4, #12]
 801a70e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a712:	e033      	b.n	801a77c <__swsetup_r+0x98>
 801a714:	0758      	lsls	r0, r3, #29
 801a716:	d512      	bpl.n	801a73e <__swsetup_r+0x5a>
 801a718:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a71a:	b141      	cbz	r1, 801a72e <__swsetup_r+0x4a>
 801a71c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a720:	4299      	cmp	r1, r3
 801a722:	d002      	beq.n	801a72a <__swsetup_r+0x46>
 801a724:	4628      	mov	r0, r5
 801a726:	f000 fffb 	bl	801b720 <_free_r>
 801a72a:	2300      	movs	r3, #0
 801a72c:	6363      	str	r3, [r4, #52]	@ 0x34
 801a72e:	89a3      	ldrh	r3, [r4, #12]
 801a730:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a734:	81a3      	strh	r3, [r4, #12]
 801a736:	2300      	movs	r3, #0
 801a738:	6063      	str	r3, [r4, #4]
 801a73a:	6923      	ldr	r3, [r4, #16]
 801a73c:	6023      	str	r3, [r4, #0]
 801a73e:	89a3      	ldrh	r3, [r4, #12]
 801a740:	f043 0308 	orr.w	r3, r3, #8
 801a744:	81a3      	strh	r3, [r4, #12]
 801a746:	6923      	ldr	r3, [r4, #16]
 801a748:	b94b      	cbnz	r3, 801a75e <__swsetup_r+0x7a>
 801a74a:	89a3      	ldrh	r3, [r4, #12]
 801a74c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a754:	d003      	beq.n	801a75e <__swsetup_r+0x7a>
 801a756:	4621      	mov	r1, r4
 801a758:	4628      	mov	r0, r5
 801a75a:	f002 fee9 	bl	801d530 <__smakebuf_r>
 801a75e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a762:	f013 0201 	ands.w	r2, r3, #1
 801a766:	d00a      	beq.n	801a77e <__swsetup_r+0x9a>
 801a768:	2200      	movs	r2, #0
 801a76a:	60a2      	str	r2, [r4, #8]
 801a76c:	6962      	ldr	r2, [r4, #20]
 801a76e:	4252      	negs	r2, r2
 801a770:	61a2      	str	r2, [r4, #24]
 801a772:	6922      	ldr	r2, [r4, #16]
 801a774:	b942      	cbnz	r2, 801a788 <__swsetup_r+0xa4>
 801a776:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a77a:	d1c5      	bne.n	801a708 <__swsetup_r+0x24>
 801a77c:	bd38      	pop	{r3, r4, r5, pc}
 801a77e:	0799      	lsls	r1, r3, #30
 801a780:	bf58      	it	pl
 801a782:	6962      	ldrpl	r2, [r4, #20]
 801a784:	60a2      	str	r2, [r4, #8]
 801a786:	e7f4      	b.n	801a772 <__swsetup_r+0x8e>
 801a788:	2000      	movs	r0, #0
 801a78a:	e7f7      	b.n	801a77c <__swsetup_r+0x98>
 801a78c:	20000090 	.word	0x20000090

0801a790 <memmove>:
 801a790:	4288      	cmp	r0, r1
 801a792:	b510      	push	{r4, lr}
 801a794:	eb01 0402 	add.w	r4, r1, r2
 801a798:	d902      	bls.n	801a7a0 <memmove+0x10>
 801a79a:	4284      	cmp	r4, r0
 801a79c:	4623      	mov	r3, r4
 801a79e:	d807      	bhi.n	801a7b0 <memmove+0x20>
 801a7a0:	1e43      	subs	r3, r0, #1
 801a7a2:	42a1      	cmp	r1, r4
 801a7a4:	d008      	beq.n	801a7b8 <memmove+0x28>
 801a7a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a7aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a7ae:	e7f8      	b.n	801a7a2 <memmove+0x12>
 801a7b0:	4402      	add	r2, r0
 801a7b2:	4601      	mov	r1, r0
 801a7b4:	428a      	cmp	r2, r1
 801a7b6:	d100      	bne.n	801a7ba <memmove+0x2a>
 801a7b8:	bd10      	pop	{r4, pc}
 801a7ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a7be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a7c2:	e7f7      	b.n	801a7b4 <memmove+0x24>

0801a7c4 <memset>:
 801a7c4:	4402      	add	r2, r0
 801a7c6:	4603      	mov	r3, r0
 801a7c8:	4293      	cmp	r3, r2
 801a7ca:	d100      	bne.n	801a7ce <memset+0xa>
 801a7cc:	4770      	bx	lr
 801a7ce:	f803 1b01 	strb.w	r1, [r3], #1
 801a7d2:	e7f9      	b.n	801a7c8 <memset+0x4>

0801a7d4 <strchr>:
 801a7d4:	b2c9      	uxtb	r1, r1
 801a7d6:	4603      	mov	r3, r0
 801a7d8:	4618      	mov	r0, r3
 801a7da:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a7de:	b112      	cbz	r2, 801a7e6 <strchr+0x12>
 801a7e0:	428a      	cmp	r2, r1
 801a7e2:	d1f9      	bne.n	801a7d8 <strchr+0x4>
 801a7e4:	4770      	bx	lr
 801a7e6:	2900      	cmp	r1, #0
 801a7e8:	bf18      	it	ne
 801a7ea:	2000      	movne	r0, #0
 801a7ec:	4770      	bx	lr

0801a7ee <strncmp>:
 801a7ee:	b510      	push	{r4, lr}
 801a7f0:	b16a      	cbz	r2, 801a80e <strncmp+0x20>
 801a7f2:	3901      	subs	r1, #1
 801a7f4:	1884      	adds	r4, r0, r2
 801a7f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a7fa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a7fe:	429a      	cmp	r2, r3
 801a800:	d103      	bne.n	801a80a <strncmp+0x1c>
 801a802:	42a0      	cmp	r0, r4
 801a804:	d001      	beq.n	801a80a <strncmp+0x1c>
 801a806:	2a00      	cmp	r2, #0
 801a808:	d1f5      	bne.n	801a7f6 <strncmp+0x8>
 801a80a:	1ad0      	subs	r0, r2, r3
 801a80c:	bd10      	pop	{r4, pc}
 801a80e:	4610      	mov	r0, r2
 801a810:	e7fc      	b.n	801a80c <strncmp+0x1e>

0801a812 <strstr>:
 801a812:	780a      	ldrb	r2, [r1, #0]
 801a814:	b570      	push	{r4, r5, r6, lr}
 801a816:	b96a      	cbnz	r2, 801a834 <strstr+0x22>
 801a818:	bd70      	pop	{r4, r5, r6, pc}
 801a81a:	429a      	cmp	r2, r3
 801a81c:	d109      	bne.n	801a832 <strstr+0x20>
 801a81e:	460c      	mov	r4, r1
 801a820:	4605      	mov	r5, r0
 801a822:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a826:	2b00      	cmp	r3, #0
 801a828:	d0f6      	beq.n	801a818 <strstr+0x6>
 801a82a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a82e:	429e      	cmp	r6, r3
 801a830:	d0f7      	beq.n	801a822 <strstr+0x10>
 801a832:	3001      	adds	r0, #1
 801a834:	7803      	ldrb	r3, [r0, #0]
 801a836:	2b00      	cmp	r3, #0
 801a838:	d1ef      	bne.n	801a81a <strstr+0x8>
 801a83a:	4618      	mov	r0, r3
 801a83c:	e7ec      	b.n	801a818 <strstr+0x6>
	...

0801a840 <_localeconv_r>:
 801a840:	4800      	ldr	r0, [pc, #0]	@ (801a844 <_localeconv_r+0x4>)
 801a842:	4770      	bx	lr
 801a844:	200001d0 	.word	0x200001d0

0801a848 <_close_r>:
 801a848:	b538      	push	{r3, r4, r5, lr}
 801a84a:	4d06      	ldr	r5, [pc, #24]	@ (801a864 <_close_r+0x1c>)
 801a84c:	2300      	movs	r3, #0
 801a84e:	4604      	mov	r4, r0
 801a850:	4608      	mov	r0, r1
 801a852:	602b      	str	r3, [r5, #0]
 801a854:	f7e9 fcac 	bl	80041b0 <_close>
 801a858:	1c43      	adds	r3, r0, #1
 801a85a:	d102      	bne.n	801a862 <_close_r+0x1a>
 801a85c:	682b      	ldr	r3, [r5, #0]
 801a85e:	b103      	cbz	r3, 801a862 <_close_r+0x1a>
 801a860:	6023      	str	r3, [r4, #0]
 801a862:	bd38      	pop	{r3, r4, r5, pc}
 801a864:	20009ff0 	.word	0x20009ff0

0801a868 <_reclaim_reent>:
 801a868:	4b29      	ldr	r3, [pc, #164]	@ (801a910 <_reclaim_reent+0xa8>)
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	4283      	cmp	r3, r0
 801a86e:	b570      	push	{r4, r5, r6, lr}
 801a870:	4604      	mov	r4, r0
 801a872:	d04b      	beq.n	801a90c <_reclaim_reent+0xa4>
 801a874:	69c3      	ldr	r3, [r0, #28]
 801a876:	b1ab      	cbz	r3, 801a8a4 <_reclaim_reent+0x3c>
 801a878:	68db      	ldr	r3, [r3, #12]
 801a87a:	b16b      	cbz	r3, 801a898 <_reclaim_reent+0x30>
 801a87c:	2500      	movs	r5, #0
 801a87e:	69e3      	ldr	r3, [r4, #28]
 801a880:	68db      	ldr	r3, [r3, #12]
 801a882:	5959      	ldr	r1, [r3, r5]
 801a884:	2900      	cmp	r1, #0
 801a886:	d13b      	bne.n	801a900 <_reclaim_reent+0x98>
 801a888:	3504      	adds	r5, #4
 801a88a:	2d80      	cmp	r5, #128	@ 0x80
 801a88c:	d1f7      	bne.n	801a87e <_reclaim_reent+0x16>
 801a88e:	69e3      	ldr	r3, [r4, #28]
 801a890:	4620      	mov	r0, r4
 801a892:	68d9      	ldr	r1, [r3, #12]
 801a894:	f000 ff44 	bl	801b720 <_free_r>
 801a898:	69e3      	ldr	r3, [r4, #28]
 801a89a:	6819      	ldr	r1, [r3, #0]
 801a89c:	b111      	cbz	r1, 801a8a4 <_reclaim_reent+0x3c>
 801a89e:	4620      	mov	r0, r4
 801a8a0:	f000 ff3e 	bl	801b720 <_free_r>
 801a8a4:	6961      	ldr	r1, [r4, #20]
 801a8a6:	b111      	cbz	r1, 801a8ae <_reclaim_reent+0x46>
 801a8a8:	4620      	mov	r0, r4
 801a8aa:	f000 ff39 	bl	801b720 <_free_r>
 801a8ae:	69e1      	ldr	r1, [r4, #28]
 801a8b0:	b111      	cbz	r1, 801a8b8 <_reclaim_reent+0x50>
 801a8b2:	4620      	mov	r0, r4
 801a8b4:	f000 ff34 	bl	801b720 <_free_r>
 801a8b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a8ba:	b111      	cbz	r1, 801a8c2 <_reclaim_reent+0x5a>
 801a8bc:	4620      	mov	r0, r4
 801a8be:	f000 ff2f 	bl	801b720 <_free_r>
 801a8c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a8c4:	b111      	cbz	r1, 801a8cc <_reclaim_reent+0x64>
 801a8c6:	4620      	mov	r0, r4
 801a8c8:	f000 ff2a 	bl	801b720 <_free_r>
 801a8cc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801a8ce:	b111      	cbz	r1, 801a8d6 <_reclaim_reent+0x6e>
 801a8d0:	4620      	mov	r0, r4
 801a8d2:	f000 ff25 	bl	801b720 <_free_r>
 801a8d6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801a8d8:	b111      	cbz	r1, 801a8e0 <_reclaim_reent+0x78>
 801a8da:	4620      	mov	r0, r4
 801a8dc:	f000 ff20 	bl	801b720 <_free_r>
 801a8e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801a8e2:	b111      	cbz	r1, 801a8ea <_reclaim_reent+0x82>
 801a8e4:	4620      	mov	r0, r4
 801a8e6:	f000 ff1b 	bl	801b720 <_free_r>
 801a8ea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801a8ec:	b111      	cbz	r1, 801a8f4 <_reclaim_reent+0x8c>
 801a8ee:	4620      	mov	r0, r4
 801a8f0:	f000 ff16 	bl	801b720 <_free_r>
 801a8f4:	6a23      	ldr	r3, [r4, #32]
 801a8f6:	b14b      	cbz	r3, 801a90c <_reclaim_reent+0xa4>
 801a8f8:	4620      	mov	r0, r4
 801a8fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a8fe:	4718      	bx	r3
 801a900:	680e      	ldr	r6, [r1, #0]
 801a902:	4620      	mov	r0, r4
 801a904:	f000 ff0c 	bl	801b720 <_free_r>
 801a908:	4631      	mov	r1, r6
 801a90a:	e7bb      	b.n	801a884 <_reclaim_reent+0x1c>
 801a90c:	bd70      	pop	{r4, r5, r6, pc}
 801a90e:	bf00      	nop
 801a910:	20000090 	.word	0x20000090

0801a914 <_lseek_r>:
 801a914:	b538      	push	{r3, r4, r5, lr}
 801a916:	4d07      	ldr	r5, [pc, #28]	@ (801a934 <_lseek_r+0x20>)
 801a918:	4604      	mov	r4, r0
 801a91a:	4608      	mov	r0, r1
 801a91c:	4611      	mov	r1, r2
 801a91e:	2200      	movs	r2, #0
 801a920:	602a      	str	r2, [r5, #0]
 801a922:	461a      	mov	r2, r3
 801a924:	f7e9 fc6b 	bl	80041fe <_lseek>
 801a928:	1c43      	adds	r3, r0, #1
 801a92a:	d102      	bne.n	801a932 <_lseek_r+0x1e>
 801a92c:	682b      	ldr	r3, [r5, #0]
 801a92e:	b103      	cbz	r3, 801a932 <_lseek_r+0x1e>
 801a930:	6023      	str	r3, [r4, #0]
 801a932:	bd38      	pop	{r3, r4, r5, pc}
 801a934:	20009ff0 	.word	0x20009ff0

0801a938 <_read_r>:
 801a938:	b538      	push	{r3, r4, r5, lr}
 801a93a:	4d07      	ldr	r5, [pc, #28]	@ (801a958 <_read_r+0x20>)
 801a93c:	4604      	mov	r4, r0
 801a93e:	4608      	mov	r0, r1
 801a940:	4611      	mov	r1, r2
 801a942:	2200      	movs	r2, #0
 801a944:	602a      	str	r2, [r5, #0]
 801a946:	461a      	mov	r2, r3
 801a948:	f7e9 fbf9 	bl	800413e <_read>
 801a94c:	1c43      	adds	r3, r0, #1
 801a94e:	d102      	bne.n	801a956 <_read_r+0x1e>
 801a950:	682b      	ldr	r3, [r5, #0]
 801a952:	b103      	cbz	r3, 801a956 <_read_r+0x1e>
 801a954:	6023      	str	r3, [r4, #0]
 801a956:	bd38      	pop	{r3, r4, r5, pc}
 801a958:	20009ff0 	.word	0x20009ff0

0801a95c <_sbrk_r>:
 801a95c:	b538      	push	{r3, r4, r5, lr}
 801a95e:	4d06      	ldr	r5, [pc, #24]	@ (801a978 <_sbrk_r+0x1c>)
 801a960:	2300      	movs	r3, #0
 801a962:	4604      	mov	r4, r0
 801a964:	4608      	mov	r0, r1
 801a966:	602b      	str	r3, [r5, #0]
 801a968:	f7e9 fc56 	bl	8004218 <_sbrk>
 801a96c:	1c43      	adds	r3, r0, #1
 801a96e:	d102      	bne.n	801a976 <_sbrk_r+0x1a>
 801a970:	682b      	ldr	r3, [r5, #0]
 801a972:	b103      	cbz	r3, 801a976 <_sbrk_r+0x1a>
 801a974:	6023      	str	r3, [r4, #0]
 801a976:	bd38      	pop	{r3, r4, r5, pc}
 801a978:	20009ff0 	.word	0x20009ff0

0801a97c <_write_r>:
 801a97c:	b538      	push	{r3, r4, r5, lr}
 801a97e:	4d07      	ldr	r5, [pc, #28]	@ (801a99c <_write_r+0x20>)
 801a980:	4604      	mov	r4, r0
 801a982:	4608      	mov	r0, r1
 801a984:	4611      	mov	r1, r2
 801a986:	2200      	movs	r2, #0
 801a988:	602a      	str	r2, [r5, #0]
 801a98a:	461a      	mov	r2, r3
 801a98c:	f7e9 fbf4 	bl	8004178 <_write>
 801a990:	1c43      	adds	r3, r0, #1
 801a992:	d102      	bne.n	801a99a <_write_r+0x1e>
 801a994:	682b      	ldr	r3, [r5, #0]
 801a996:	b103      	cbz	r3, 801a99a <_write_r+0x1e>
 801a998:	6023      	str	r3, [r4, #0]
 801a99a:	bd38      	pop	{r3, r4, r5, pc}
 801a99c:	20009ff0 	.word	0x20009ff0

0801a9a0 <__errno>:
 801a9a0:	4b01      	ldr	r3, [pc, #4]	@ (801a9a8 <__errno+0x8>)
 801a9a2:	6818      	ldr	r0, [r3, #0]
 801a9a4:	4770      	bx	lr
 801a9a6:	bf00      	nop
 801a9a8:	20000090 	.word	0x20000090

0801a9ac <__libc_init_array>:
 801a9ac:	b570      	push	{r4, r5, r6, lr}
 801a9ae:	4d0d      	ldr	r5, [pc, #52]	@ (801a9e4 <__libc_init_array+0x38>)
 801a9b0:	4c0d      	ldr	r4, [pc, #52]	@ (801a9e8 <__libc_init_array+0x3c>)
 801a9b2:	1b64      	subs	r4, r4, r5
 801a9b4:	10a4      	asrs	r4, r4, #2
 801a9b6:	2600      	movs	r6, #0
 801a9b8:	42a6      	cmp	r6, r4
 801a9ba:	d109      	bne.n	801a9d0 <__libc_init_array+0x24>
 801a9bc:	4d0b      	ldr	r5, [pc, #44]	@ (801a9ec <__libc_init_array+0x40>)
 801a9be:	4c0c      	ldr	r4, [pc, #48]	@ (801a9f0 <__libc_init_array+0x44>)
 801a9c0:	f003 f9c0 	bl	801dd44 <_init>
 801a9c4:	1b64      	subs	r4, r4, r5
 801a9c6:	10a4      	asrs	r4, r4, #2
 801a9c8:	2600      	movs	r6, #0
 801a9ca:	42a6      	cmp	r6, r4
 801a9cc:	d105      	bne.n	801a9da <__libc_init_array+0x2e>
 801a9ce:	bd70      	pop	{r4, r5, r6, pc}
 801a9d0:	f855 3b04 	ldr.w	r3, [r5], #4
 801a9d4:	4798      	blx	r3
 801a9d6:	3601      	adds	r6, #1
 801a9d8:	e7ee      	b.n	801a9b8 <__libc_init_array+0xc>
 801a9da:	f855 3b04 	ldr.w	r3, [r5], #4
 801a9de:	4798      	blx	r3
 801a9e0:	3601      	adds	r6, #1
 801a9e2:	e7f2      	b.n	801a9ca <__libc_init_array+0x1e>
 801a9e4:	0801eccc 	.word	0x0801eccc
 801a9e8:	0801eccc 	.word	0x0801eccc
 801a9ec:	0801eccc 	.word	0x0801eccc
 801a9f0:	0801ecd0 	.word	0x0801ecd0

0801a9f4 <__retarget_lock_init_recursive>:
 801a9f4:	4770      	bx	lr

0801a9f6 <__retarget_lock_acquire_recursive>:
 801a9f6:	4770      	bx	lr

0801a9f8 <__retarget_lock_release_recursive>:
 801a9f8:	4770      	bx	lr

0801a9fa <strcpy>:
 801a9fa:	4603      	mov	r3, r0
 801a9fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aa00:	f803 2b01 	strb.w	r2, [r3], #1
 801aa04:	2a00      	cmp	r2, #0
 801aa06:	d1f9      	bne.n	801a9fc <strcpy+0x2>
 801aa08:	4770      	bx	lr

0801aa0a <memcpy>:
 801aa0a:	440a      	add	r2, r1
 801aa0c:	4291      	cmp	r1, r2
 801aa0e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801aa12:	d100      	bne.n	801aa16 <memcpy+0xc>
 801aa14:	4770      	bx	lr
 801aa16:	b510      	push	{r4, lr}
 801aa18:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aa1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aa20:	4291      	cmp	r1, r2
 801aa22:	d1f9      	bne.n	801aa18 <memcpy+0xe>
 801aa24:	bd10      	pop	{r4, pc}
	...

0801aa28 <nanf>:
 801aa28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801aa30 <nanf+0x8>
 801aa2c:	4770      	bx	lr
 801aa2e:	bf00      	nop
 801aa30:	7fc00000 	.word	0x7fc00000

0801aa34 <__assert_func>:
 801aa34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801aa36:	4614      	mov	r4, r2
 801aa38:	461a      	mov	r2, r3
 801aa3a:	4b09      	ldr	r3, [pc, #36]	@ (801aa60 <__assert_func+0x2c>)
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	4605      	mov	r5, r0
 801aa40:	68d8      	ldr	r0, [r3, #12]
 801aa42:	b954      	cbnz	r4, 801aa5a <__assert_func+0x26>
 801aa44:	4b07      	ldr	r3, [pc, #28]	@ (801aa64 <__assert_func+0x30>)
 801aa46:	461c      	mov	r4, r3
 801aa48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801aa4c:	9100      	str	r1, [sp, #0]
 801aa4e:	462b      	mov	r3, r5
 801aa50:	4905      	ldr	r1, [pc, #20]	@ (801aa68 <__assert_func+0x34>)
 801aa52:	f002 fd35 	bl	801d4c0 <fiprintf>
 801aa56:	f002 fdd3 	bl	801d600 <abort>
 801aa5a:	4b04      	ldr	r3, [pc, #16]	@ (801aa6c <__assert_func+0x38>)
 801aa5c:	e7f4      	b.n	801aa48 <__assert_func+0x14>
 801aa5e:	bf00      	nop
 801aa60:	20000090 	.word	0x20000090
 801aa64:	0801ea24 	.word	0x0801ea24
 801aa68:	0801e9f6 	.word	0x0801e9f6
 801aa6c:	0801e9e9 	.word	0x0801e9e9

0801aa70 <quorem>:
 801aa70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa74:	6903      	ldr	r3, [r0, #16]
 801aa76:	690c      	ldr	r4, [r1, #16]
 801aa78:	42a3      	cmp	r3, r4
 801aa7a:	4607      	mov	r7, r0
 801aa7c:	db7e      	blt.n	801ab7c <quorem+0x10c>
 801aa7e:	3c01      	subs	r4, #1
 801aa80:	f101 0814 	add.w	r8, r1, #20
 801aa84:	00a3      	lsls	r3, r4, #2
 801aa86:	f100 0514 	add.w	r5, r0, #20
 801aa8a:	9300      	str	r3, [sp, #0]
 801aa8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801aa90:	9301      	str	r3, [sp, #4]
 801aa92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801aa96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801aa9a:	3301      	adds	r3, #1
 801aa9c:	429a      	cmp	r2, r3
 801aa9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801aaa2:	fbb2 f6f3 	udiv	r6, r2, r3
 801aaa6:	d32e      	bcc.n	801ab06 <quorem+0x96>
 801aaa8:	f04f 0a00 	mov.w	sl, #0
 801aaac:	46c4      	mov	ip, r8
 801aaae:	46ae      	mov	lr, r5
 801aab0:	46d3      	mov	fp, sl
 801aab2:	f85c 3b04 	ldr.w	r3, [ip], #4
 801aab6:	b298      	uxth	r0, r3
 801aab8:	fb06 a000 	mla	r0, r6, r0, sl
 801aabc:	0c02      	lsrs	r2, r0, #16
 801aabe:	0c1b      	lsrs	r3, r3, #16
 801aac0:	fb06 2303 	mla	r3, r6, r3, r2
 801aac4:	f8de 2000 	ldr.w	r2, [lr]
 801aac8:	b280      	uxth	r0, r0
 801aaca:	b292      	uxth	r2, r2
 801aacc:	1a12      	subs	r2, r2, r0
 801aace:	445a      	add	r2, fp
 801aad0:	f8de 0000 	ldr.w	r0, [lr]
 801aad4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801aad8:	b29b      	uxth	r3, r3
 801aada:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801aade:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801aae2:	b292      	uxth	r2, r2
 801aae4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801aae8:	45e1      	cmp	r9, ip
 801aaea:	f84e 2b04 	str.w	r2, [lr], #4
 801aaee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801aaf2:	d2de      	bcs.n	801aab2 <quorem+0x42>
 801aaf4:	9b00      	ldr	r3, [sp, #0]
 801aaf6:	58eb      	ldr	r3, [r5, r3]
 801aaf8:	b92b      	cbnz	r3, 801ab06 <quorem+0x96>
 801aafa:	9b01      	ldr	r3, [sp, #4]
 801aafc:	3b04      	subs	r3, #4
 801aafe:	429d      	cmp	r5, r3
 801ab00:	461a      	mov	r2, r3
 801ab02:	d32f      	bcc.n	801ab64 <quorem+0xf4>
 801ab04:	613c      	str	r4, [r7, #16]
 801ab06:	4638      	mov	r0, r7
 801ab08:	f001 f918 	bl	801bd3c <__mcmp>
 801ab0c:	2800      	cmp	r0, #0
 801ab0e:	db25      	blt.n	801ab5c <quorem+0xec>
 801ab10:	4629      	mov	r1, r5
 801ab12:	2000      	movs	r0, #0
 801ab14:	f858 2b04 	ldr.w	r2, [r8], #4
 801ab18:	f8d1 c000 	ldr.w	ip, [r1]
 801ab1c:	fa1f fe82 	uxth.w	lr, r2
 801ab20:	fa1f f38c 	uxth.w	r3, ip
 801ab24:	eba3 030e 	sub.w	r3, r3, lr
 801ab28:	4403      	add	r3, r0
 801ab2a:	0c12      	lsrs	r2, r2, #16
 801ab2c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801ab30:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801ab34:	b29b      	uxth	r3, r3
 801ab36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ab3a:	45c1      	cmp	r9, r8
 801ab3c:	f841 3b04 	str.w	r3, [r1], #4
 801ab40:	ea4f 4022 	mov.w	r0, r2, asr #16
 801ab44:	d2e6      	bcs.n	801ab14 <quorem+0xa4>
 801ab46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ab4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ab4e:	b922      	cbnz	r2, 801ab5a <quorem+0xea>
 801ab50:	3b04      	subs	r3, #4
 801ab52:	429d      	cmp	r5, r3
 801ab54:	461a      	mov	r2, r3
 801ab56:	d30b      	bcc.n	801ab70 <quorem+0x100>
 801ab58:	613c      	str	r4, [r7, #16]
 801ab5a:	3601      	adds	r6, #1
 801ab5c:	4630      	mov	r0, r6
 801ab5e:	b003      	add	sp, #12
 801ab60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab64:	6812      	ldr	r2, [r2, #0]
 801ab66:	3b04      	subs	r3, #4
 801ab68:	2a00      	cmp	r2, #0
 801ab6a:	d1cb      	bne.n	801ab04 <quorem+0x94>
 801ab6c:	3c01      	subs	r4, #1
 801ab6e:	e7c6      	b.n	801aafe <quorem+0x8e>
 801ab70:	6812      	ldr	r2, [r2, #0]
 801ab72:	3b04      	subs	r3, #4
 801ab74:	2a00      	cmp	r2, #0
 801ab76:	d1ef      	bne.n	801ab58 <quorem+0xe8>
 801ab78:	3c01      	subs	r4, #1
 801ab7a:	e7ea      	b.n	801ab52 <quorem+0xe2>
 801ab7c:	2000      	movs	r0, #0
 801ab7e:	e7ee      	b.n	801ab5e <quorem+0xee>

0801ab80 <_dtoa_r>:
 801ab80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab84:	69c7      	ldr	r7, [r0, #28]
 801ab86:	b099      	sub	sp, #100	@ 0x64
 801ab88:	ed8d 0b02 	vstr	d0, [sp, #8]
 801ab8c:	ec55 4b10 	vmov	r4, r5, d0
 801ab90:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801ab92:	9109      	str	r1, [sp, #36]	@ 0x24
 801ab94:	4683      	mov	fp, r0
 801ab96:	920e      	str	r2, [sp, #56]	@ 0x38
 801ab98:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ab9a:	b97f      	cbnz	r7, 801abbc <_dtoa_r+0x3c>
 801ab9c:	2010      	movs	r0, #16
 801ab9e:	f7fe fb1d 	bl	80191dc <malloc>
 801aba2:	4602      	mov	r2, r0
 801aba4:	f8cb 001c 	str.w	r0, [fp, #28]
 801aba8:	b920      	cbnz	r0, 801abb4 <_dtoa_r+0x34>
 801abaa:	4ba7      	ldr	r3, [pc, #668]	@ (801ae48 <_dtoa_r+0x2c8>)
 801abac:	21ef      	movs	r1, #239	@ 0xef
 801abae:	48a7      	ldr	r0, [pc, #668]	@ (801ae4c <_dtoa_r+0x2cc>)
 801abb0:	f7ff ff40 	bl	801aa34 <__assert_func>
 801abb4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801abb8:	6007      	str	r7, [r0, #0]
 801abba:	60c7      	str	r7, [r0, #12]
 801abbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801abc0:	6819      	ldr	r1, [r3, #0]
 801abc2:	b159      	cbz	r1, 801abdc <_dtoa_r+0x5c>
 801abc4:	685a      	ldr	r2, [r3, #4]
 801abc6:	604a      	str	r2, [r1, #4]
 801abc8:	2301      	movs	r3, #1
 801abca:	4093      	lsls	r3, r2
 801abcc:	608b      	str	r3, [r1, #8]
 801abce:	4658      	mov	r0, fp
 801abd0:	f000 fe30 	bl	801b834 <_Bfree>
 801abd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801abd8:	2200      	movs	r2, #0
 801abda:	601a      	str	r2, [r3, #0]
 801abdc:	1e2b      	subs	r3, r5, #0
 801abde:	bfb9      	ittee	lt
 801abe0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801abe4:	9303      	strlt	r3, [sp, #12]
 801abe6:	2300      	movge	r3, #0
 801abe8:	6033      	strge	r3, [r6, #0]
 801abea:	9f03      	ldr	r7, [sp, #12]
 801abec:	4b98      	ldr	r3, [pc, #608]	@ (801ae50 <_dtoa_r+0x2d0>)
 801abee:	bfbc      	itt	lt
 801abf0:	2201      	movlt	r2, #1
 801abf2:	6032      	strlt	r2, [r6, #0]
 801abf4:	43bb      	bics	r3, r7
 801abf6:	d112      	bne.n	801ac1e <_dtoa_r+0x9e>
 801abf8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801abfa:	f242 730f 	movw	r3, #9999	@ 0x270f
 801abfe:	6013      	str	r3, [r2, #0]
 801ac00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ac04:	4323      	orrs	r3, r4
 801ac06:	f000 854d 	beq.w	801b6a4 <_dtoa_r+0xb24>
 801ac0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ac0c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801ae64 <_dtoa_r+0x2e4>
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	f000 854f 	beq.w	801b6b4 <_dtoa_r+0xb34>
 801ac16:	f10a 0303 	add.w	r3, sl, #3
 801ac1a:	f000 bd49 	b.w	801b6b0 <_dtoa_r+0xb30>
 801ac1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ac22:	2200      	movs	r2, #0
 801ac24:	ec51 0b17 	vmov	r0, r1, d7
 801ac28:	2300      	movs	r3, #0
 801ac2a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801ac2e:	f7e5 ff63 	bl	8000af8 <__aeabi_dcmpeq>
 801ac32:	4680      	mov	r8, r0
 801ac34:	b158      	cbz	r0, 801ac4e <_dtoa_r+0xce>
 801ac36:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ac38:	2301      	movs	r3, #1
 801ac3a:	6013      	str	r3, [r2, #0]
 801ac3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ac3e:	b113      	cbz	r3, 801ac46 <_dtoa_r+0xc6>
 801ac40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ac42:	4b84      	ldr	r3, [pc, #528]	@ (801ae54 <_dtoa_r+0x2d4>)
 801ac44:	6013      	str	r3, [r2, #0]
 801ac46:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801ae68 <_dtoa_r+0x2e8>
 801ac4a:	f000 bd33 	b.w	801b6b4 <_dtoa_r+0xb34>
 801ac4e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801ac52:	aa16      	add	r2, sp, #88	@ 0x58
 801ac54:	a917      	add	r1, sp, #92	@ 0x5c
 801ac56:	4658      	mov	r0, fp
 801ac58:	f001 f990 	bl	801bf7c <__d2b>
 801ac5c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801ac60:	4681      	mov	r9, r0
 801ac62:	2e00      	cmp	r6, #0
 801ac64:	d077      	beq.n	801ad56 <_dtoa_r+0x1d6>
 801ac66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ac68:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801ac6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ac70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ac74:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801ac78:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801ac7c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801ac80:	4619      	mov	r1, r3
 801ac82:	2200      	movs	r2, #0
 801ac84:	4b74      	ldr	r3, [pc, #464]	@ (801ae58 <_dtoa_r+0x2d8>)
 801ac86:	f7e5 fb17 	bl	80002b8 <__aeabi_dsub>
 801ac8a:	a369      	add	r3, pc, #420	@ (adr r3, 801ae30 <_dtoa_r+0x2b0>)
 801ac8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac90:	f7e5 fcca 	bl	8000628 <__aeabi_dmul>
 801ac94:	a368      	add	r3, pc, #416	@ (adr r3, 801ae38 <_dtoa_r+0x2b8>)
 801ac96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac9a:	f7e5 fb0f 	bl	80002bc <__adddf3>
 801ac9e:	4604      	mov	r4, r0
 801aca0:	4630      	mov	r0, r6
 801aca2:	460d      	mov	r5, r1
 801aca4:	f7e5 fc56 	bl	8000554 <__aeabi_i2d>
 801aca8:	a365      	add	r3, pc, #404	@ (adr r3, 801ae40 <_dtoa_r+0x2c0>)
 801acaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acae:	f7e5 fcbb 	bl	8000628 <__aeabi_dmul>
 801acb2:	4602      	mov	r2, r0
 801acb4:	460b      	mov	r3, r1
 801acb6:	4620      	mov	r0, r4
 801acb8:	4629      	mov	r1, r5
 801acba:	f7e5 faff 	bl	80002bc <__adddf3>
 801acbe:	4604      	mov	r4, r0
 801acc0:	460d      	mov	r5, r1
 801acc2:	f7e5 ff61 	bl	8000b88 <__aeabi_d2iz>
 801acc6:	2200      	movs	r2, #0
 801acc8:	4607      	mov	r7, r0
 801acca:	2300      	movs	r3, #0
 801accc:	4620      	mov	r0, r4
 801acce:	4629      	mov	r1, r5
 801acd0:	f7e5 ff1c 	bl	8000b0c <__aeabi_dcmplt>
 801acd4:	b140      	cbz	r0, 801ace8 <_dtoa_r+0x168>
 801acd6:	4638      	mov	r0, r7
 801acd8:	f7e5 fc3c 	bl	8000554 <__aeabi_i2d>
 801acdc:	4622      	mov	r2, r4
 801acde:	462b      	mov	r3, r5
 801ace0:	f7e5 ff0a 	bl	8000af8 <__aeabi_dcmpeq>
 801ace4:	b900      	cbnz	r0, 801ace8 <_dtoa_r+0x168>
 801ace6:	3f01      	subs	r7, #1
 801ace8:	2f16      	cmp	r7, #22
 801acea:	d851      	bhi.n	801ad90 <_dtoa_r+0x210>
 801acec:	4b5b      	ldr	r3, [pc, #364]	@ (801ae5c <_dtoa_r+0x2dc>)
 801acee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801acf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acf6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801acfa:	f7e5 ff07 	bl	8000b0c <__aeabi_dcmplt>
 801acfe:	2800      	cmp	r0, #0
 801ad00:	d048      	beq.n	801ad94 <_dtoa_r+0x214>
 801ad02:	3f01      	subs	r7, #1
 801ad04:	2300      	movs	r3, #0
 801ad06:	9312      	str	r3, [sp, #72]	@ 0x48
 801ad08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ad0a:	1b9b      	subs	r3, r3, r6
 801ad0c:	1e5a      	subs	r2, r3, #1
 801ad0e:	bf44      	itt	mi
 801ad10:	f1c3 0801 	rsbmi	r8, r3, #1
 801ad14:	2300      	movmi	r3, #0
 801ad16:	9208      	str	r2, [sp, #32]
 801ad18:	bf54      	ite	pl
 801ad1a:	f04f 0800 	movpl.w	r8, #0
 801ad1e:	9308      	strmi	r3, [sp, #32]
 801ad20:	2f00      	cmp	r7, #0
 801ad22:	db39      	blt.n	801ad98 <_dtoa_r+0x218>
 801ad24:	9b08      	ldr	r3, [sp, #32]
 801ad26:	970f      	str	r7, [sp, #60]	@ 0x3c
 801ad28:	443b      	add	r3, r7
 801ad2a:	9308      	str	r3, [sp, #32]
 801ad2c:	2300      	movs	r3, #0
 801ad2e:	930a      	str	r3, [sp, #40]	@ 0x28
 801ad30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad32:	2b09      	cmp	r3, #9
 801ad34:	d864      	bhi.n	801ae00 <_dtoa_r+0x280>
 801ad36:	2b05      	cmp	r3, #5
 801ad38:	bfc4      	itt	gt
 801ad3a:	3b04      	subgt	r3, #4
 801ad3c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801ad3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad40:	f1a3 0302 	sub.w	r3, r3, #2
 801ad44:	bfcc      	ite	gt
 801ad46:	2400      	movgt	r4, #0
 801ad48:	2401      	movle	r4, #1
 801ad4a:	2b03      	cmp	r3, #3
 801ad4c:	d863      	bhi.n	801ae16 <_dtoa_r+0x296>
 801ad4e:	e8df f003 	tbb	[pc, r3]
 801ad52:	372a      	.short	0x372a
 801ad54:	5535      	.short	0x5535
 801ad56:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801ad5a:	441e      	add	r6, r3
 801ad5c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801ad60:	2b20      	cmp	r3, #32
 801ad62:	bfc1      	itttt	gt
 801ad64:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801ad68:	409f      	lslgt	r7, r3
 801ad6a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801ad6e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801ad72:	bfd6      	itet	le
 801ad74:	f1c3 0320 	rsble	r3, r3, #32
 801ad78:	ea47 0003 	orrgt.w	r0, r7, r3
 801ad7c:	fa04 f003 	lslle.w	r0, r4, r3
 801ad80:	f7e5 fbd8 	bl	8000534 <__aeabi_ui2d>
 801ad84:	2201      	movs	r2, #1
 801ad86:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801ad8a:	3e01      	subs	r6, #1
 801ad8c:	9214      	str	r2, [sp, #80]	@ 0x50
 801ad8e:	e777      	b.n	801ac80 <_dtoa_r+0x100>
 801ad90:	2301      	movs	r3, #1
 801ad92:	e7b8      	b.n	801ad06 <_dtoa_r+0x186>
 801ad94:	9012      	str	r0, [sp, #72]	@ 0x48
 801ad96:	e7b7      	b.n	801ad08 <_dtoa_r+0x188>
 801ad98:	427b      	negs	r3, r7
 801ad9a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ad9c:	2300      	movs	r3, #0
 801ad9e:	eba8 0807 	sub.w	r8, r8, r7
 801ada2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ada4:	e7c4      	b.n	801ad30 <_dtoa_r+0x1b0>
 801ada6:	2300      	movs	r3, #0
 801ada8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801adaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801adac:	2b00      	cmp	r3, #0
 801adae:	dc35      	bgt.n	801ae1c <_dtoa_r+0x29c>
 801adb0:	2301      	movs	r3, #1
 801adb2:	9300      	str	r3, [sp, #0]
 801adb4:	9307      	str	r3, [sp, #28]
 801adb6:	461a      	mov	r2, r3
 801adb8:	920e      	str	r2, [sp, #56]	@ 0x38
 801adba:	e00b      	b.n	801add4 <_dtoa_r+0x254>
 801adbc:	2301      	movs	r3, #1
 801adbe:	e7f3      	b.n	801ada8 <_dtoa_r+0x228>
 801adc0:	2300      	movs	r3, #0
 801adc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801adc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801adc6:	18fb      	adds	r3, r7, r3
 801adc8:	9300      	str	r3, [sp, #0]
 801adca:	3301      	adds	r3, #1
 801adcc:	2b01      	cmp	r3, #1
 801adce:	9307      	str	r3, [sp, #28]
 801add0:	bfb8      	it	lt
 801add2:	2301      	movlt	r3, #1
 801add4:	f8db 001c 	ldr.w	r0, [fp, #28]
 801add8:	2100      	movs	r1, #0
 801adda:	2204      	movs	r2, #4
 801addc:	f102 0514 	add.w	r5, r2, #20
 801ade0:	429d      	cmp	r5, r3
 801ade2:	d91f      	bls.n	801ae24 <_dtoa_r+0x2a4>
 801ade4:	6041      	str	r1, [r0, #4]
 801ade6:	4658      	mov	r0, fp
 801ade8:	f000 fce4 	bl	801b7b4 <_Balloc>
 801adec:	4682      	mov	sl, r0
 801adee:	2800      	cmp	r0, #0
 801adf0:	d13c      	bne.n	801ae6c <_dtoa_r+0x2ec>
 801adf2:	4b1b      	ldr	r3, [pc, #108]	@ (801ae60 <_dtoa_r+0x2e0>)
 801adf4:	4602      	mov	r2, r0
 801adf6:	f240 11af 	movw	r1, #431	@ 0x1af
 801adfa:	e6d8      	b.n	801abae <_dtoa_r+0x2e>
 801adfc:	2301      	movs	r3, #1
 801adfe:	e7e0      	b.n	801adc2 <_dtoa_r+0x242>
 801ae00:	2401      	movs	r4, #1
 801ae02:	2300      	movs	r3, #0
 801ae04:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae06:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ae08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ae0c:	9300      	str	r3, [sp, #0]
 801ae0e:	9307      	str	r3, [sp, #28]
 801ae10:	2200      	movs	r2, #0
 801ae12:	2312      	movs	r3, #18
 801ae14:	e7d0      	b.n	801adb8 <_dtoa_r+0x238>
 801ae16:	2301      	movs	r3, #1
 801ae18:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ae1a:	e7f5      	b.n	801ae08 <_dtoa_r+0x288>
 801ae1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ae1e:	9300      	str	r3, [sp, #0]
 801ae20:	9307      	str	r3, [sp, #28]
 801ae22:	e7d7      	b.n	801add4 <_dtoa_r+0x254>
 801ae24:	3101      	adds	r1, #1
 801ae26:	0052      	lsls	r2, r2, #1
 801ae28:	e7d8      	b.n	801addc <_dtoa_r+0x25c>
 801ae2a:	bf00      	nop
 801ae2c:	f3af 8000 	nop.w
 801ae30:	636f4361 	.word	0x636f4361
 801ae34:	3fd287a7 	.word	0x3fd287a7
 801ae38:	8b60c8b3 	.word	0x8b60c8b3
 801ae3c:	3fc68a28 	.word	0x3fc68a28
 801ae40:	509f79fb 	.word	0x509f79fb
 801ae44:	3fd34413 	.word	0x3fd34413
 801ae48:	0801e840 	.word	0x0801e840
 801ae4c:	0801ea32 	.word	0x0801ea32
 801ae50:	7ff00000 	.word	0x7ff00000
 801ae54:	0801e9c1 	.word	0x0801e9c1
 801ae58:	3ff80000 	.word	0x3ff80000
 801ae5c:	0801eb28 	.word	0x0801eb28
 801ae60:	0801ea8a 	.word	0x0801ea8a
 801ae64:	0801ea2e 	.word	0x0801ea2e
 801ae68:	0801e9c0 	.word	0x0801e9c0
 801ae6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ae70:	6018      	str	r0, [r3, #0]
 801ae72:	9b07      	ldr	r3, [sp, #28]
 801ae74:	2b0e      	cmp	r3, #14
 801ae76:	f200 80a4 	bhi.w	801afc2 <_dtoa_r+0x442>
 801ae7a:	2c00      	cmp	r4, #0
 801ae7c:	f000 80a1 	beq.w	801afc2 <_dtoa_r+0x442>
 801ae80:	2f00      	cmp	r7, #0
 801ae82:	dd33      	ble.n	801aeec <_dtoa_r+0x36c>
 801ae84:	4bad      	ldr	r3, [pc, #692]	@ (801b13c <_dtoa_r+0x5bc>)
 801ae86:	f007 020f 	and.w	r2, r7, #15
 801ae8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ae8e:	ed93 7b00 	vldr	d7, [r3]
 801ae92:	05f8      	lsls	r0, r7, #23
 801ae94:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ae98:	ea4f 1427 	mov.w	r4, r7, asr #4
 801ae9c:	d516      	bpl.n	801aecc <_dtoa_r+0x34c>
 801ae9e:	4ba8      	ldr	r3, [pc, #672]	@ (801b140 <_dtoa_r+0x5c0>)
 801aea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801aea4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801aea8:	f7e5 fce8 	bl	800087c <__aeabi_ddiv>
 801aeac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aeb0:	f004 040f 	and.w	r4, r4, #15
 801aeb4:	2603      	movs	r6, #3
 801aeb6:	4da2      	ldr	r5, [pc, #648]	@ (801b140 <_dtoa_r+0x5c0>)
 801aeb8:	b954      	cbnz	r4, 801aed0 <_dtoa_r+0x350>
 801aeba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801aec2:	f7e5 fcdb 	bl	800087c <__aeabi_ddiv>
 801aec6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801aeca:	e028      	b.n	801af1e <_dtoa_r+0x39e>
 801aecc:	2602      	movs	r6, #2
 801aece:	e7f2      	b.n	801aeb6 <_dtoa_r+0x336>
 801aed0:	07e1      	lsls	r1, r4, #31
 801aed2:	d508      	bpl.n	801aee6 <_dtoa_r+0x366>
 801aed4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801aed8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801aedc:	f7e5 fba4 	bl	8000628 <__aeabi_dmul>
 801aee0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801aee4:	3601      	adds	r6, #1
 801aee6:	1064      	asrs	r4, r4, #1
 801aee8:	3508      	adds	r5, #8
 801aeea:	e7e5      	b.n	801aeb8 <_dtoa_r+0x338>
 801aeec:	f000 80d2 	beq.w	801b094 <_dtoa_r+0x514>
 801aef0:	427c      	negs	r4, r7
 801aef2:	4b92      	ldr	r3, [pc, #584]	@ (801b13c <_dtoa_r+0x5bc>)
 801aef4:	4d92      	ldr	r5, [pc, #584]	@ (801b140 <_dtoa_r+0x5c0>)
 801aef6:	f004 020f 	and.w	r2, r4, #15
 801aefa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801aefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801af06:	f7e5 fb8f 	bl	8000628 <__aeabi_dmul>
 801af0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801af0e:	1124      	asrs	r4, r4, #4
 801af10:	2300      	movs	r3, #0
 801af12:	2602      	movs	r6, #2
 801af14:	2c00      	cmp	r4, #0
 801af16:	f040 80b2 	bne.w	801b07e <_dtoa_r+0x4fe>
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d1d3      	bne.n	801aec6 <_dtoa_r+0x346>
 801af1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801af20:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801af24:	2b00      	cmp	r3, #0
 801af26:	f000 80b7 	beq.w	801b098 <_dtoa_r+0x518>
 801af2a:	4b86      	ldr	r3, [pc, #536]	@ (801b144 <_dtoa_r+0x5c4>)
 801af2c:	2200      	movs	r2, #0
 801af2e:	4620      	mov	r0, r4
 801af30:	4629      	mov	r1, r5
 801af32:	f7e5 fdeb 	bl	8000b0c <__aeabi_dcmplt>
 801af36:	2800      	cmp	r0, #0
 801af38:	f000 80ae 	beq.w	801b098 <_dtoa_r+0x518>
 801af3c:	9b07      	ldr	r3, [sp, #28]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	f000 80aa 	beq.w	801b098 <_dtoa_r+0x518>
 801af44:	9b00      	ldr	r3, [sp, #0]
 801af46:	2b00      	cmp	r3, #0
 801af48:	dd37      	ble.n	801afba <_dtoa_r+0x43a>
 801af4a:	1e7b      	subs	r3, r7, #1
 801af4c:	9304      	str	r3, [sp, #16]
 801af4e:	4620      	mov	r0, r4
 801af50:	4b7d      	ldr	r3, [pc, #500]	@ (801b148 <_dtoa_r+0x5c8>)
 801af52:	2200      	movs	r2, #0
 801af54:	4629      	mov	r1, r5
 801af56:	f7e5 fb67 	bl	8000628 <__aeabi_dmul>
 801af5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801af5e:	9c00      	ldr	r4, [sp, #0]
 801af60:	3601      	adds	r6, #1
 801af62:	4630      	mov	r0, r6
 801af64:	f7e5 faf6 	bl	8000554 <__aeabi_i2d>
 801af68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801af6c:	f7e5 fb5c 	bl	8000628 <__aeabi_dmul>
 801af70:	4b76      	ldr	r3, [pc, #472]	@ (801b14c <_dtoa_r+0x5cc>)
 801af72:	2200      	movs	r2, #0
 801af74:	f7e5 f9a2 	bl	80002bc <__adddf3>
 801af78:	4605      	mov	r5, r0
 801af7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801af7e:	2c00      	cmp	r4, #0
 801af80:	f040 808d 	bne.w	801b09e <_dtoa_r+0x51e>
 801af84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801af88:	4b71      	ldr	r3, [pc, #452]	@ (801b150 <_dtoa_r+0x5d0>)
 801af8a:	2200      	movs	r2, #0
 801af8c:	f7e5 f994 	bl	80002b8 <__aeabi_dsub>
 801af90:	4602      	mov	r2, r0
 801af92:	460b      	mov	r3, r1
 801af94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801af98:	462a      	mov	r2, r5
 801af9a:	4633      	mov	r3, r6
 801af9c:	f7e5 fdd4 	bl	8000b48 <__aeabi_dcmpgt>
 801afa0:	2800      	cmp	r0, #0
 801afa2:	f040 828b 	bne.w	801b4bc <_dtoa_r+0x93c>
 801afa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801afaa:	462a      	mov	r2, r5
 801afac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801afb0:	f7e5 fdac 	bl	8000b0c <__aeabi_dcmplt>
 801afb4:	2800      	cmp	r0, #0
 801afb6:	f040 8128 	bne.w	801b20a <_dtoa_r+0x68a>
 801afba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801afbe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801afc2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	f2c0 815a 	blt.w	801b27e <_dtoa_r+0x6fe>
 801afca:	2f0e      	cmp	r7, #14
 801afcc:	f300 8157 	bgt.w	801b27e <_dtoa_r+0x6fe>
 801afd0:	4b5a      	ldr	r3, [pc, #360]	@ (801b13c <_dtoa_r+0x5bc>)
 801afd2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801afd6:	ed93 7b00 	vldr	d7, [r3]
 801afda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801afdc:	2b00      	cmp	r3, #0
 801afde:	ed8d 7b00 	vstr	d7, [sp]
 801afe2:	da03      	bge.n	801afec <_dtoa_r+0x46c>
 801afe4:	9b07      	ldr	r3, [sp, #28]
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	f340 8101 	ble.w	801b1ee <_dtoa_r+0x66e>
 801afec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801aff0:	4656      	mov	r6, sl
 801aff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aff6:	4620      	mov	r0, r4
 801aff8:	4629      	mov	r1, r5
 801affa:	f7e5 fc3f 	bl	800087c <__aeabi_ddiv>
 801affe:	f7e5 fdc3 	bl	8000b88 <__aeabi_d2iz>
 801b002:	4680      	mov	r8, r0
 801b004:	f7e5 faa6 	bl	8000554 <__aeabi_i2d>
 801b008:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b00c:	f7e5 fb0c 	bl	8000628 <__aeabi_dmul>
 801b010:	4602      	mov	r2, r0
 801b012:	460b      	mov	r3, r1
 801b014:	4620      	mov	r0, r4
 801b016:	4629      	mov	r1, r5
 801b018:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801b01c:	f7e5 f94c 	bl	80002b8 <__aeabi_dsub>
 801b020:	f806 4b01 	strb.w	r4, [r6], #1
 801b024:	9d07      	ldr	r5, [sp, #28]
 801b026:	eba6 040a 	sub.w	r4, r6, sl
 801b02a:	42a5      	cmp	r5, r4
 801b02c:	4602      	mov	r2, r0
 801b02e:	460b      	mov	r3, r1
 801b030:	f040 8117 	bne.w	801b262 <_dtoa_r+0x6e2>
 801b034:	f7e5 f942 	bl	80002bc <__adddf3>
 801b038:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b03c:	4604      	mov	r4, r0
 801b03e:	460d      	mov	r5, r1
 801b040:	f7e5 fd82 	bl	8000b48 <__aeabi_dcmpgt>
 801b044:	2800      	cmp	r0, #0
 801b046:	f040 80f9 	bne.w	801b23c <_dtoa_r+0x6bc>
 801b04a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b04e:	4620      	mov	r0, r4
 801b050:	4629      	mov	r1, r5
 801b052:	f7e5 fd51 	bl	8000af8 <__aeabi_dcmpeq>
 801b056:	b118      	cbz	r0, 801b060 <_dtoa_r+0x4e0>
 801b058:	f018 0f01 	tst.w	r8, #1
 801b05c:	f040 80ee 	bne.w	801b23c <_dtoa_r+0x6bc>
 801b060:	4649      	mov	r1, r9
 801b062:	4658      	mov	r0, fp
 801b064:	f000 fbe6 	bl	801b834 <_Bfree>
 801b068:	2300      	movs	r3, #0
 801b06a:	7033      	strb	r3, [r6, #0]
 801b06c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b06e:	3701      	adds	r7, #1
 801b070:	601f      	str	r7, [r3, #0]
 801b072:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b074:	2b00      	cmp	r3, #0
 801b076:	f000 831d 	beq.w	801b6b4 <_dtoa_r+0xb34>
 801b07a:	601e      	str	r6, [r3, #0]
 801b07c:	e31a      	b.n	801b6b4 <_dtoa_r+0xb34>
 801b07e:	07e2      	lsls	r2, r4, #31
 801b080:	d505      	bpl.n	801b08e <_dtoa_r+0x50e>
 801b082:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b086:	f7e5 facf 	bl	8000628 <__aeabi_dmul>
 801b08a:	3601      	adds	r6, #1
 801b08c:	2301      	movs	r3, #1
 801b08e:	1064      	asrs	r4, r4, #1
 801b090:	3508      	adds	r5, #8
 801b092:	e73f      	b.n	801af14 <_dtoa_r+0x394>
 801b094:	2602      	movs	r6, #2
 801b096:	e742      	b.n	801af1e <_dtoa_r+0x39e>
 801b098:	9c07      	ldr	r4, [sp, #28]
 801b09a:	9704      	str	r7, [sp, #16]
 801b09c:	e761      	b.n	801af62 <_dtoa_r+0x3e2>
 801b09e:	4b27      	ldr	r3, [pc, #156]	@ (801b13c <_dtoa_r+0x5bc>)
 801b0a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801b0a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b0a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b0aa:	4454      	add	r4, sl
 801b0ac:	2900      	cmp	r1, #0
 801b0ae:	d053      	beq.n	801b158 <_dtoa_r+0x5d8>
 801b0b0:	4928      	ldr	r1, [pc, #160]	@ (801b154 <_dtoa_r+0x5d4>)
 801b0b2:	2000      	movs	r0, #0
 801b0b4:	f7e5 fbe2 	bl	800087c <__aeabi_ddiv>
 801b0b8:	4633      	mov	r3, r6
 801b0ba:	462a      	mov	r2, r5
 801b0bc:	f7e5 f8fc 	bl	80002b8 <__aeabi_dsub>
 801b0c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b0c4:	4656      	mov	r6, sl
 801b0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b0ca:	f7e5 fd5d 	bl	8000b88 <__aeabi_d2iz>
 801b0ce:	4605      	mov	r5, r0
 801b0d0:	f7e5 fa40 	bl	8000554 <__aeabi_i2d>
 801b0d4:	4602      	mov	r2, r0
 801b0d6:	460b      	mov	r3, r1
 801b0d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b0dc:	f7e5 f8ec 	bl	80002b8 <__aeabi_dsub>
 801b0e0:	3530      	adds	r5, #48	@ 0x30
 801b0e2:	4602      	mov	r2, r0
 801b0e4:	460b      	mov	r3, r1
 801b0e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b0ea:	f806 5b01 	strb.w	r5, [r6], #1
 801b0ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b0f2:	f7e5 fd0b 	bl	8000b0c <__aeabi_dcmplt>
 801b0f6:	2800      	cmp	r0, #0
 801b0f8:	d171      	bne.n	801b1de <_dtoa_r+0x65e>
 801b0fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b0fe:	4911      	ldr	r1, [pc, #68]	@ (801b144 <_dtoa_r+0x5c4>)
 801b100:	2000      	movs	r0, #0
 801b102:	f7e5 f8d9 	bl	80002b8 <__aeabi_dsub>
 801b106:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b10a:	f7e5 fcff 	bl	8000b0c <__aeabi_dcmplt>
 801b10e:	2800      	cmp	r0, #0
 801b110:	f040 8095 	bne.w	801b23e <_dtoa_r+0x6be>
 801b114:	42a6      	cmp	r6, r4
 801b116:	f43f af50 	beq.w	801afba <_dtoa_r+0x43a>
 801b11a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801b11e:	4b0a      	ldr	r3, [pc, #40]	@ (801b148 <_dtoa_r+0x5c8>)
 801b120:	2200      	movs	r2, #0
 801b122:	f7e5 fa81 	bl	8000628 <__aeabi_dmul>
 801b126:	4b08      	ldr	r3, [pc, #32]	@ (801b148 <_dtoa_r+0x5c8>)
 801b128:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b12c:	2200      	movs	r2, #0
 801b12e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b132:	f7e5 fa79 	bl	8000628 <__aeabi_dmul>
 801b136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b13a:	e7c4      	b.n	801b0c6 <_dtoa_r+0x546>
 801b13c:	0801eb28 	.word	0x0801eb28
 801b140:	0801eb00 	.word	0x0801eb00
 801b144:	3ff00000 	.word	0x3ff00000
 801b148:	40240000 	.word	0x40240000
 801b14c:	401c0000 	.word	0x401c0000
 801b150:	40140000 	.word	0x40140000
 801b154:	3fe00000 	.word	0x3fe00000
 801b158:	4631      	mov	r1, r6
 801b15a:	4628      	mov	r0, r5
 801b15c:	f7e5 fa64 	bl	8000628 <__aeabi_dmul>
 801b160:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801b164:	9415      	str	r4, [sp, #84]	@ 0x54
 801b166:	4656      	mov	r6, sl
 801b168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b16c:	f7e5 fd0c 	bl	8000b88 <__aeabi_d2iz>
 801b170:	4605      	mov	r5, r0
 801b172:	f7e5 f9ef 	bl	8000554 <__aeabi_i2d>
 801b176:	4602      	mov	r2, r0
 801b178:	460b      	mov	r3, r1
 801b17a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b17e:	f7e5 f89b 	bl	80002b8 <__aeabi_dsub>
 801b182:	3530      	adds	r5, #48	@ 0x30
 801b184:	f806 5b01 	strb.w	r5, [r6], #1
 801b188:	4602      	mov	r2, r0
 801b18a:	460b      	mov	r3, r1
 801b18c:	42a6      	cmp	r6, r4
 801b18e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b192:	f04f 0200 	mov.w	r2, #0
 801b196:	d124      	bne.n	801b1e2 <_dtoa_r+0x662>
 801b198:	4bac      	ldr	r3, [pc, #688]	@ (801b44c <_dtoa_r+0x8cc>)
 801b19a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801b19e:	f7e5 f88d 	bl	80002bc <__adddf3>
 801b1a2:	4602      	mov	r2, r0
 801b1a4:	460b      	mov	r3, r1
 801b1a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b1aa:	f7e5 fccd 	bl	8000b48 <__aeabi_dcmpgt>
 801b1ae:	2800      	cmp	r0, #0
 801b1b0:	d145      	bne.n	801b23e <_dtoa_r+0x6be>
 801b1b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801b1b6:	49a5      	ldr	r1, [pc, #660]	@ (801b44c <_dtoa_r+0x8cc>)
 801b1b8:	2000      	movs	r0, #0
 801b1ba:	f7e5 f87d 	bl	80002b8 <__aeabi_dsub>
 801b1be:	4602      	mov	r2, r0
 801b1c0:	460b      	mov	r3, r1
 801b1c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b1c6:	f7e5 fca1 	bl	8000b0c <__aeabi_dcmplt>
 801b1ca:	2800      	cmp	r0, #0
 801b1cc:	f43f aef5 	beq.w	801afba <_dtoa_r+0x43a>
 801b1d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801b1d2:	1e73      	subs	r3, r6, #1
 801b1d4:	9315      	str	r3, [sp, #84]	@ 0x54
 801b1d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b1da:	2b30      	cmp	r3, #48	@ 0x30
 801b1dc:	d0f8      	beq.n	801b1d0 <_dtoa_r+0x650>
 801b1de:	9f04      	ldr	r7, [sp, #16]
 801b1e0:	e73e      	b.n	801b060 <_dtoa_r+0x4e0>
 801b1e2:	4b9b      	ldr	r3, [pc, #620]	@ (801b450 <_dtoa_r+0x8d0>)
 801b1e4:	f7e5 fa20 	bl	8000628 <__aeabi_dmul>
 801b1e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b1ec:	e7bc      	b.n	801b168 <_dtoa_r+0x5e8>
 801b1ee:	d10c      	bne.n	801b20a <_dtoa_r+0x68a>
 801b1f0:	4b98      	ldr	r3, [pc, #608]	@ (801b454 <_dtoa_r+0x8d4>)
 801b1f2:	2200      	movs	r2, #0
 801b1f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b1f8:	f7e5 fa16 	bl	8000628 <__aeabi_dmul>
 801b1fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b200:	f7e5 fc98 	bl	8000b34 <__aeabi_dcmpge>
 801b204:	2800      	cmp	r0, #0
 801b206:	f000 8157 	beq.w	801b4b8 <_dtoa_r+0x938>
 801b20a:	2400      	movs	r4, #0
 801b20c:	4625      	mov	r5, r4
 801b20e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b210:	43db      	mvns	r3, r3
 801b212:	9304      	str	r3, [sp, #16]
 801b214:	4656      	mov	r6, sl
 801b216:	2700      	movs	r7, #0
 801b218:	4621      	mov	r1, r4
 801b21a:	4658      	mov	r0, fp
 801b21c:	f000 fb0a 	bl	801b834 <_Bfree>
 801b220:	2d00      	cmp	r5, #0
 801b222:	d0dc      	beq.n	801b1de <_dtoa_r+0x65e>
 801b224:	b12f      	cbz	r7, 801b232 <_dtoa_r+0x6b2>
 801b226:	42af      	cmp	r7, r5
 801b228:	d003      	beq.n	801b232 <_dtoa_r+0x6b2>
 801b22a:	4639      	mov	r1, r7
 801b22c:	4658      	mov	r0, fp
 801b22e:	f000 fb01 	bl	801b834 <_Bfree>
 801b232:	4629      	mov	r1, r5
 801b234:	4658      	mov	r0, fp
 801b236:	f000 fafd 	bl	801b834 <_Bfree>
 801b23a:	e7d0      	b.n	801b1de <_dtoa_r+0x65e>
 801b23c:	9704      	str	r7, [sp, #16]
 801b23e:	4633      	mov	r3, r6
 801b240:	461e      	mov	r6, r3
 801b242:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b246:	2a39      	cmp	r2, #57	@ 0x39
 801b248:	d107      	bne.n	801b25a <_dtoa_r+0x6da>
 801b24a:	459a      	cmp	sl, r3
 801b24c:	d1f8      	bne.n	801b240 <_dtoa_r+0x6c0>
 801b24e:	9a04      	ldr	r2, [sp, #16]
 801b250:	3201      	adds	r2, #1
 801b252:	9204      	str	r2, [sp, #16]
 801b254:	2230      	movs	r2, #48	@ 0x30
 801b256:	f88a 2000 	strb.w	r2, [sl]
 801b25a:	781a      	ldrb	r2, [r3, #0]
 801b25c:	3201      	adds	r2, #1
 801b25e:	701a      	strb	r2, [r3, #0]
 801b260:	e7bd      	b.n	801b1de <_dtoa_r+0x65e>
 801b262:	4b7b      	ldr	r3, [pc, #492]	@ (801b450 <_dtoa_r+0x8d0>)
 801b264:	2200      	movs	r2, #0
 801b266:	f7e5 f9df 	bl	8000628 <__aeabi_dmul>
 801b26a:	2200      	movs	r2, #0
 801b26c:	2300      	movs	r3, #0
 801b26e:	4604      	mov	r4, r0
 801b270:	460d      	mov	r5, r1
 801b272:	f7e5 fc41 	bl	8000af8 <__aeabi_dcmpeq>
 801b276:	2800      	cmp	r0, #0
 801b278:	f43f aebb 	beq.w	801aff2 <_dtoa_r+0x472>
 801b27c:	e6f0      	b.n	801b060 <_dtoa_r+0x4e0>
 801b27e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801b280:	2a00      	cmp	r2, #0
 801b282:	f000 80db 	beq.w	801b43c <_dtoa_r+0x8bc>
 801b286:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b288:	2a01      	cmp	r2, #1
 801b28a:	f300 80bf 	bgt.w	801b40c <_dtoa_r+0x88c>
 801b28e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801b290:	2a00      	cmp	r2, #0
 801b292:	f000 80b7 	beq.w	801b404 <_dtoa_r+0x884>
 801b296:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801b29a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b29c:	4646      	mov	r6, r8
 801b29e:	9a08      	ldr	r2, [sp, #32]
 801b2a0:	2101      	movs	r1, #1
 801b2a2:	441a      	add	r2, r3
 801b2a4:	4658      	mov	r0, fp
 801b2a6:	4498      	add	r8, r3
 801b2a8:	9208      	str	r2, [sp, #32]
 801b2aa:	f000 fbc1 	bl	801ba30 <__i2b>
 801b2ae:	4605      	mov	r5, r0
 801b2b0:	b15e      	cbz	r6, 801b2ca <_dtoa_r+0x74a>
 801b2b2:	9b08      	ldr	r3, [sp, #32]
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	dd08      	ble.n	801b2ca <_dtoa_r+0x74a>
 801b2b8:	42b3      	cmp	r3, r6
 801b2ba:	9a08      	ldr	r2, [sp, #32]
 801b2bc:	bfa8      	it	ge
 801b2be:	4633      	movge	r3, r6
 801b2c0:	eba8 0803 	sub.w	r8, r8, r3
 801b2c4:	1af6      	subs	r6, r6, r3
 801b2c6:	1ad3      	subs	r3, r2, r3
 801b2c8:	9308      	str	r3, [sp, #32]
 801b2ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b2cc:	b1f3      	cbz	r3, 801b30c <_dtoa_r+0x78c>
 801b2ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b2d0:	2b00      	cmp	r3, #0
 801b2d2:	f000 80b7 	beq.w	801b444 <_dtoa_r+0x8c4>
 801b2d6:	b18c      	cbz	r4, 801b2fc <_dtoa_r+0x77c>
 801b2d8:	4629      	mov	r1, r5
 801b2da:	4622      	mov	r2, r4
 801b2dc:	4658      	mov	r0, fp
 801b2de:	f000 fc67 	bl	801bbb0 <__pow5mult>
 801b2e2:	464a      	mov	r2, r9
 801b2e4:	4601      	mov	r1, r0
 801b2e6:	4605      	mov	r5, r0
 801b2e8:	4658      	mov	r0, fp
 801b2ea:	f000 fbb7 	bl	801ba5c <__multiply>
 801b2ee:	4649      	mov	r1, r9
 801b2f0:	9004      	str	r0, [sp, #16]
 801b2f2:	4658      	mov	r0, fp
 801b2f4:	f000 fa9e 	bl	801b834 <_Bfree>
 801b2f8:	9b04      	ldr	r3, [sp, #16]
 801b2fa:	4699      	mov	r9, r3
 801b2fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b2fe:	1b1a      	subs	r2, r3, r4
 801b300:	d004      	beq.n	801b30c <_dtoa_r+0x78c>
 801b302:	4649      	mov	r1, r9
 801b304:	4658      	mov	r0, fp
 801b306:	f000 fc53 	bl	801bbb0 <__pow5mult>
 801b30a:	4681      	mov	r9, r0
 801b30c:	2101      	movs	r1, #1
 801b30e:	4658      	mov	r0, fp
 801b310:	f000 fb8e 	bl	801ba30 <__i2b>
 801b314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b316:	4604      	mov	r4, r0
 801b318:	2b00      	cmp	r3, #0
 801b31a:	f000 81cf 	beq.w	801b6bc <_dtoa_r+0xb3c>
 801b31e:	461a      	mov	r2, r3
 801b320:	4601      	mov	r1, r0
 801b322:	4658      	mov	r0, fp
 801b324:	f000 fc44 	bl	801bbb0 <__pow5mult>
 801b328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b32a:	2b01      	cmp	r3, #1
 801b32c:	4604      	mov	r4, r0
 801b32e:	f300 8095 	bgt.w	801b45c <_dtoa_r+0x8dc>
 801b332:	9b02      	ldr	r3, [sp, #8]
 801b334:	2b00      	cmp	r3, #0
 801b336:	f040 8087 	bne.w	801b448 <_dtoa_r+0x8c8>
 801b33a:	9b03      	ldr	r3, [sp, #12]
 801b33c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b340:	2b00      	cmp	r3, #0
 801b342:	f040 8089 	bne.w	801b458 <_dtoa_r+0x8d8>
 801b346:	9b03      	ldr	r3, [sp, #12]
 801b348:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b34c:	0d1b      	lsrs	r3, r3, #20
 801b34e:	051b      	lsls	r3, r3, #20
 801b350:	b12b      	cbz	r3, 801b35e <_dtoa_r+0x7de>
 801b352:	9b08      	ldr	r3, [sp, #32]
 801b354:	3301      	adds	r3, #1
 801b356:	9308      	str	r3, [sp, #32]
 801b358:	f108 0801 	add.w	r8, r8, #1
 801b35c:	2301      	movs	r3, #1
 801b35e:	930a      	str	r3, [sp, #40]	@ 0x28
 801b360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b362:	2b00      	cmp	r3, #0
 801b364:	f000 81b0 	beq.w	801b6c8 <_dtoa_r+0xb48>
 801b368:	6923      	ldr	r3, [r4, #16]
 801b36a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b36e:	6918      	ldr	r0, [r3, #16]
 801b370:	f000 fb12 	bl	801b998 <__hi0bits>
 801b374:	f1c0 0020 	rsb	r0, r0, #32
 801b378:	9b08      	ldr	r3, [sp, #32]
 801b37a:	4418      	add	r0, r3
 801b37c:	f010 001f 	ands.w	r0, r0, #31
 801b380:	d077      	beq.n	801b472 <_dtoa_r+0x8f2>
 801b382:	f1c0 0320 	rsb	r3, r0, #32
 801b386:	2b04      	cmp	r3, #4
 801b388:	dd6b      	ble.n	801b462 <_dtoa_r+0x8e2>
 801b38a:	9b08      	ldr	r3, [sp, #32]
 801b38c:	f1c0 001c 	rsb	r0, r0, #28
 801b390:	4403      	add	r3, r0
 801b392:	4480      	add	r8, r0
 801b394:	4406      	add	r6, r0
 801b396:	9308      	str	r3, [sp, #32]
 801b398:	f1b8 0f00 	cmp.w	r8, #0
 801b39c:	dd05      	ble.n	801b3aa <_dtoa_r+0x82a>
 801b39e:	4649      	mov	r1, r9
 801b3a0:	4642      	mov	r2, r8
 801b3a2:	4658      	mov	r0, fp
 801b3a4:	f000 fc5e 	bl	801bc64 <__lshift>
 801b3a8:	4681      	mov	r9, r0
 801b3aa:	9b08      	ldr	r3, [sp, #32]
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	dd05      	ble.n	801b3bc <_dtoa_r+0x83c>
 801b3b0:	4621      	mov	r1, r4
 801b3b2:	461a      	mov	r2, r3
 801b3b4:	4658      	mov	r0, fp
 801b3b6:	f000 fc55 	bl	801bc64 <__lshift>
 801b3ba:	4604      	mov	r4, r0
 801b3bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d059      	beq.n	801b476 <_dtoa_r+0x8f6>
 801b3c2:	4621      	mov	r1, r4
 801b3c4:	4648      	mov	r0, r9
 801b3c6:	f000 fcb9 	bl	801bd3c <__mcmp>
 801b3ca:	2800      	cmp	r0, #0
 801b3cc:	da53      	bge.n	801b476 <_dtoa_r+0x8f6>
 801b3ce:	1e7b      	subs	r3, r7, #1
 801b3d0:	9304      	str	r3, [sp, #16]
 801b3d2:	4649      	mov	r1, r9
 801b3d4:	2300      	movs	r3, #0
 801b3d6:	220a      	movs	r2, #10
 801b3d8:	4658      	mov	r0, fp
 801b3da:	f000 fa4d 	bl	801b878 <__multadd>
 801b3de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b3e0:	4681      	mov	r9, r0
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	f000 8172 	beq.w	801b6cc <_dtoa_r+0xb4c>
 801b3e8:	2300      	movs	r3, #0
 801b3ea:	4629      	mov	r1, r5
 801b3ec:	220a      	movs	r2, #10
 801b3ee:	4658      	mov	r0, fp
 801b3f0:	f000 fa42 	bl	801b878 <__multadd>
 801b3f4:	9b00      	ldr	r3, [sp, #0]
 801b3f6:	2b00      	cmp	r3, #0
 801b3f8:	4605      	mov	r5, r0
 801b3fa:	dc67      	bgt.n	801b4cc <_dtoa_r+0x94c>
 801b3fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b3fe:	2b02      	cmp	r3, #2
 801b400:	dc41      	bgt.n	801b486 <_dtoa_r+0x906>
 801b402:	e063      	b.n	801b4cc <_dtoa_r+0x94c>
 801b404:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b406:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801b40a:	e746      	b.n	801b29a <_dtoa_r+0x71a>
 801b40c:	9b07      	ldr	r3, [sp, #28]
 801b40e:	1e5c      	subs	r4, r3, #1
 801b410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b412:	42a3      	cmp	r3, r4
 801b414:	bfbf      	itttt	lt
 801b416:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801b418:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801b41a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801b41c:	1ae3      	sublt	r3, r4, r3
 801b41e:	bfb4      	ite	lt
 801b420:	18d2      	addlt	r2, r2, r3
 801b422:	1b1c      	subge	r4, r3, r4
 801b424:	9b07      	ldr	r3, [sp, #28]
 801b426:	bfbc      	itt	lt
 801b428:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801b42a:	2400      	movlt	r4, #0
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	bfb5      	itete	lt
 801b430:	eba8 0603 	sublt.w	r6, r8, r3
 801b434:	9b07      	ldrge	r3, [sp, #28]
 801b436:	2300      	movlt	r3, #0
 801b438:	4646      	movge	r6, r8
 801b43a:	e730      	b.n	801b29e <_dtoa_r+0x71e>
 801b43c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b43e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801b440:	4646      	mov	r6, r8
 801b442:	e735      	b.n	801b2b0 <_dtoa_r+0x730>
 801b444:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b446:	e75c      	b.n	801b302 <_dtoa_r+0x782>
 801b448:	2300      	movs	r3, #0
 801b44a:	e788      	b.n	801b35e <_dtoa_r+0x7de>
 801b44c:	3fe00000 	.word	0x3fe00000
 801b450:	40240000 	.word	0x40240000
 801b454:	40140000 	.word	0x40140000
 801b458:	9b02      	ldr	r3, [sp, #8]
 801b45a:	e780      	b.n	801b35e <_dtoa_r+0x7de>
 801b45c:	2300      	movs	r3, #0
 801b45e:	930a      	str	r3, [sp, #40]	@ 0x28
 801b460:	e782      	b.n	801b368 <_dtoa_r+0x7e8>
 801b462:	d099      	beq.n	801b398 <_dtoa_r+0x818>
 801b464:	9a08      	ldr	r2, [sp, #32]
 801b466:	331c      	adds	r3, #28
 801b468:	441a      	add	r2, r3
 801b46a:	4498      	add	r8, r3
 801b46c:	441e      	add	r6, r3
 801b46e:	9208      	str	r2, [sp, #32]
 801b470:	e792      	b.n	801b398 <_dtoa_r+0x818>
 801b472:	4603      	mov	r3, r0
 801b474:	e7f6      	b.n	801b464 <_dtoa_r+0x8e4>
 801b476:	9b07      	ldr	r3, [sp, #28]
 801b478:	9704      	str	r7, [sp, #16]
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	dc20      	bgt.n	801b4c0 <_dtoa_r+0x940>
 801b47e:	9300      	str	r3, [sp, #0]
 801b480:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b482:	2b02      	cmp	r3, #2
 801b484:	dd1e      	ble.n	801b4c4 <_dtoa_r+0x944>
 801b486:	9b00      	ldr	r3, [sp, #0]
 801b488:	2b00      	cmp	r3, #0
 801b48a:	f47f aec0 	bne.w	801b20e <_dtoa_r+0x68e>
 801b48e:	4621      	mov	r1, r4
 801b490:	2205      	movs	r2, #5
 801b492:	4658      	mov	r0, fp
 801b494:	f000 f9f0 	bl	801b878 <__multadd>
 801b498:	4601      	mov	r1, r0
 801b49a:	4604      	mov	r4, r0
 801b49c:	4648      	mov	r0, r9
 801b49e:	f000 fc4d 	bl	801bd3c <__mcmp>
 801b4a2:	2800      	cmp	r0, #0
 801b4a4:	f77f aeb3 	ble.w	801b20e <_dtoa_r+0x68e>
 801b4a8:	4656      	mov	r6, sl
 801b4aa:	2331      	movs	r3, #49	@ 0x31
 801b4ac:	f806 3b01 	strb.w	r3, [r6], #1
 801b4b0:	9b04      	ldr	r3, [sp, #16]
 801b4b2:	3301      	adds	r3, #1
 801b4b4:	9304      	str	r3, [sp, #16]
 801b4b6:	e6ae      	b.n	801b216 <_dtoa_r+0x696>
 801b4b8:	9c07      	ldr	r4, [sp, #28]
 801b4ba:	9704      	str	r7, [sp, #16]
 801b4bc:	4625      	mov	r5, r4
 801b4be:	e7f3      	b.n	801b4a8 <_dtoa_r+0x928>
 801b4c0:	9b07      	ldr	r3, [sp, #28]
 801b4c2:	9300      	str	r3, [sp, #0]
 801b4c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	f000 8104 	beq.w	801b6d4 <_dtoa_r+0xb54>
 801b4cc:	2e00      	cmp	r6, #0
 801b4ce:	dd05      	ble.n	801b4dc <_dtoa_r+0x95c>
 801b4d0:	4629      	mov	r1, r5
 801b4d2:	4632      	mov	r2, r6
 801b4d4:	4658      	mov	r0, fp
 801b4d6:	f000 fbc5 	bl	801bc64 <__lshift>
 801b4da:	4605      	mov	r5, r0
 801b4dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b4de:	2b00      	cmp	r3, #0
 801b4e0:	d05a      	beq.n	801b598 <_dtoa_r+0xa18>
 801b4e2:	6869      	ldr	r1, [r5, #4]
 801b4e4:	4658      	mov	r0, fp
 801b4e6:	f000 f965 	bl	801b7b4 <_Balloc>
 801b4ea:	4606      	mov	r6, r0
 801b4ec:	b928      	cbnz	r0, 801b4fa <_dtoa_r+0x97a>
 801b4ee:	4b84      	ldr	r3, [pc, #528]	@ (801b700 <_dtoa_r+0xb80>)
 801b4f0:	4602      	mov	r2, r0
 801b4f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801b4f6:	f7ff bb5a 	b.w	801abae <_dtoa_r+0x2e>
 801b4fa:	692a      	ldr	r2, [r5, #16]
 801b4fc:	3202      	adds	r2, #2
 801b4fe:	0092      	lsls	r2, r2, #2
 801b500:	f105 010c 	add.w	r1, r5, #12
 801b504:	300c      	adds	r0, #12
 801b506:	f7ff fa80 	bl	801aa0a <memcpy>
 801b50a:	2201      	movs	r2, #1
 801b50c:	4631      	mov	r1, r6
 801b50e:	4658      	mov	r0, fp
 801b510:	f000 fba8 	bl	801bc64 <__lshift>
 801b514:	f10a 0301 	add.w	r3, sl, #1
 801b518:	9307      	str	r3, [sp, #28]
 801b51a:	9b00      	ldr	r3, [sp, #0]
 801b51c:	4453      	add	r3, sl
 801b51e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b520:	9b02      	ldr	r3, [sp, #8]
 801b522:	f003 0301 	and.w	r3, r3, #1
 801b526:	462f      	mov	r7, r5
 801b528:	930a      	str	r3, [sp, #40]	@ 0x28
 801b52a:	4605      	mov	r5, r0
 801b52c:	9b07      	ldr	r3, [sp, #28]
 801b52e:	4621      	mov	r1, r4
 801b530:	3b01      	subs	r3, #1
 801b532:	4648      	mov	r0, r9
 801b534:	9300      	str	r3, [sp, #0]
 801b536:	f7ff fa9b 	bl	801aa70 <quorem>
 801b53a:	4639      	mov	r1, r7
 801b53c:	9002      	str	r0, [sp, #8]
 801b53e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801b542:	4648      	mov	r0, r9
 801b544:	f000 fbfa 	bl	801bd3c <__mcmp>
 801b548:	462a      	mov	r2, r5
 801b54a:	9008      	str	r0, [sp, #32]
 801b54c:	4621      	mov	r1, r4
 801b54e:	4658      	mov	r0, fp
 801b550:	f000 fc10 	bl	801bd74 <__mdiff>
 801b554:	68c2      	ldr	r2, [r0, #12]
 801b556:	4606      	mov	r6, r0
 801b558:	bb02      	cbnz	r2, 801b59c <_dtoa_r+0xa1c>
 801b55a:	4601      	mov	r1, r0
 801b55c:	4648      	mov	r0, r9
 801b55e:	f000 fbed 	bl	801bd3c <__mcmp>
 801b562:	4602      	mov	r2, r0
 801b564:	4631      	mov	r1, r6
 801b566:	4658      	mov	r0, fp
 801b568:	920e      	str	r2, [sp, #56]	@ 0x38
 801b56a:	f000 f963 	bl	801b834 <_Bfree>
 801b56e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b570:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b572:	9e07      	ldr	r6, [sp, #28]
 801b574:	ea43 0102 	orr.w	r1, r3, r2
 801b578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b57a:	4319      	orrs	r1, r3
 801b57c:	d110      	bne.n	801b5a0 <_dtoa_r+0xa20>
 801b57e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801b582:	d029      	beq.n	801b5d8 <_dtoa_r+0xa58>
 801b584:	9b08      	ldr	r3, [sp, #32]
 801b586:	2b00      	cmp	r3, #0
 801b588:	dd02      	ble.n	801b590 <_dtoa_r+0xa10>
 801b58a:	9b02      	ldr	r3, [sp, #8]
 801b58c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801b590:	9b00      	ldr	r3, [sp, #0]
 801b592:	f883 8000 	strb.w	r8, [r3]
 801b596:	e63f      	b.n	801b218 <_dtoa_r+0x698>
 801b598:	4628      	mov	r0, r5
 801b59a:	e7bb      	b.n	801b514 <_dtoa_r+0x994>
 801b59c:	2201      	movs	r2, #1
 801b59e:	e7e1      	b.n	801b564 <_dtoa_r+0x9e4>
 801b5a0:	9b08      	ldr	r3, [sp, #32]
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	db04      	blt.n	801b5b0 <_dtoa_r+0xa30>
 801b5a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b5a8:	430b      	orrs	r3, r1
 801b5aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801b5ac:	430b      	orrs	r3, r1
 801b5ae:	d120      	bne.n	801b5f2 <_dtoa_r+0xa72>
 801b5b0:	2a00      	cmp	r2, #0
 801b5b2:	dded      	ble.n	801b590 <_dtoa_r+0xa10>
 801b5b4:	4649      	mov	r1, r9
 801b5b6:	2201      	movs	r2, #1
 801b5b8:	4658      	mov	r0, fp
 801b5ba:	f000 fb53 	bl	801bc64 <__lshift>
 801b5be:	4621      	mov	r1, r4
 801b5c0:	4681      	mov	r9, r0
 801b5c2:	f000 fbbb 	bl	801bd3c <__mcmp>
 801b5c6:	2800      	cmp	r0, #0
 801b5c8:	dc03      	bgt.n	801b5d2 <_dtoa_r+0xa52>
 801b5ca:	d1e1      	bne.n	801b590 <_dtoa_r+0xa10>
 801b5cc:	f018 0f01 	tst.w	r8, #1
 801b5d0:	d0de      	beq.n	801b590 <_dtoa_r+0xa10>
 801b5d2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801b5d6:	d1d8      	bne.n	801b58a <_dtoa_r+0xa0a>
 801b5d8:	9a00      	ldr	r2, [sp, #0]
 801b5da:	2339      	movs	r3, #57	@ 0x39
 801b5dc:	7013      	strb	r3, [r2, #0]
 801b5de:	4633      	mov	r3, r6
 801b5e0:	461e      	mov	r6, r3
 801b5e2:	3b01      	subs	r3, #1
 801b5e4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801b5e8:	2a39      	cmp	r2, #57	@ 0x39
 801b5ea:	d052      	beq.n	801b692 <_dtoa_r+0xb12>
 801b5ec:	3201      	adds	r2, #1
 801b5ee:	701a      	strb	r2, [r3, #0]
 801b5f0:	e612      	b.n	801b218 <_dtoa_r+0x698>
 801b5f2:	2a00      	cmp	r2, #0
 801b5f4:	dd07      	ble.n	801b606 <_dtoa_r+0xa86>
 801b5f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801b5fa:	d0ed      	beq.n	801b5d8 <_dtoa_r+0xa58>
 801b5fc:	9a00      	ldr	r2, [sp, #0]
 801b5fe:	f108 0301 	add.w	r3, r8, #1
 801b602:	7013      	strb	r3, [r2, #0]
 801b604:	e608      	b.n	801b218 <_dtoa_r+0x698>
 801b606:	9b07      	ldr	r3, [sp, #28]
 801b608:	9a07      	ldr	r2, [sp, #28]
 801b60a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801b60e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b610:	4293      	cmp	r3, r2
 801b612:	d028      	beq.n	801b666 <_dtoa_r+0xae6>
 801b614:	4649      	mov	r1, r9
 801b616:	2300      	movs	r3, #0
 801b618:	220a      	movs	r2, #10
 801b61a:	4658      	mov	r0, fp
 801b61c:	f000 f92c 	bl	801b878 <__multadd>
 801b620:	42af      	cmp	r7, r5
 801b622:	4681      	mov	r9, r0
 801b624:	f04f 0300 	mov.w	r3, #0
 801b628:	f04f 020a 	mov.w	r2, #10
 801b62c:	4639      	mov	r1, r7
 801b62e:	4658      	mov	r0, fp
 801b630:	d107      	bne.n	801b642 <_dtoa_r+0xac2>
 801b632:	f000 f921 	bl	801b878 <__multadd>
 801b636:	4607      	mov	r7, r0
 801b638:	4605      	mov	r5, r0
 801b63a:	9b07      	ldr	r3, [sp, #28]
 801b63c:	3301      	adds	r3, #1
 801b63e:	9307      	str	r3, [sp, #28]
 801b640:	e774      	b.n	801b52c <_dtoa_r+0x9ac>
 801b642:	f000 f919 	bl	801b878 <__multadd>
 801b646:	4629      	mov	r1, r5
 801b648:	4607      	mov	r7, r0
 801b64a:	2300      	movs	r3, #0
 801b64c:	220a      	movs	r2, #10
 801b64e:	4658      	mov	r0, fp
 801b650:	f000 f912 	bl	801b878 <__multadd>
 801b654:	4605      	mov	r5, r0
 801b656:	e7f0      	b.n	801b63a <_dtoa_r+0xaba>
 801b658:	9b00      	ldr	r3, [sp, #0]
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	bfcc      	ite	gt
 801b65e:	461e      	movgt	r6, r3
 801b660:	2601      	movle	r6, #1
 801b662:	4456      	add	r6, sl
 801b664:	2700      	movs	r7, #0
 801b666:	4649      	mov	r1, r9
 801b668:	2201      	movs	r2, #1
 801b66a:	4658      	mov	r0, fp
 801b66c:	f000 fafa 	bl	801bc64 <__lshift>
 801b670:	4621      	mov	r1, r4
 801b672:	4681      	mov	r9, r0
 801b674:	f000 fb62 	bl	801bd3c <__mcmp>
 801b678:	2800      	cmp	r0, #0
 801b67a:	dcb0      	bgt.n	801b5de <_dtoa_r+0xa5e>
 801b67c:	d102      	bne.n	801b684 <_dtoa_r+0xb04>
 801b67e:	f018 0f01 	tst.w	r8, #1
 801b682:	d1ac      	bne.n	801b5de <_dtoa_r+0xa5e>
 801b684:	4633      	mov	r3, r6
 801b686:	461e      	mov	r6, r3
 801b688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b68c:	2a30      	cmp	r2, #48	@ 0x30
 801b68e:	d0fa      	beq.n	801b686 <_dtoa_r+0xb06>
 801b690:	e5c2      	b.n	801b218 <_dtoa_r+0x698>
 801b692:	459a      	cmp	sl, r3
 801b694:	d1a4      	bne.n	801b5e0 <_dtoa_r+0xa60>
 801b696:	9b04      	ldr	r3, [sp, #16]
 801b698:	3301      	adds	r3, #1
 801b69a:	9304      	str	r3, [sp, #16]
 801b69c:	2331      	movs	r3, #49	@ 0x31
 801b69e:	f88a 3000 	strb.w	r3, [sl]
 801b6a2:	e5b9      	b.n	801b218 <_dtoa_r+0x698>
 801b6a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b6a6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801b704 <_dtoa_r+0xb84>
 801b6aa:	b11b      	cbz	r3, 801b6b4 <_dtoa_r+0xb34>
 801b6ac:	f10a 0308 	add.w	r3, sl, #8
 801b6b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801b6b2:	6013      	str	r3, [r2, #0]
 801b6b4:	4650      	mov	r0, sl
 801b6b6:	b019      	add	sp, #100	@ 0x64
 801b6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6be:	2b01      	cmp	r3, #1
 801b6c0:	f77f ae37 	ble.w	801b332 <_dtoa_r+0x7b2>
 801b6c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b6c6:	930a      	str	r3, [sp, #40]	@ 0x28
 801b6c8:	2001      	movs	r0, #1
 801b6ca:	e655      	b.n	801b378 <_dtoa_r+0x7f8>
 801b6cc:	9b00      	ldr	r3, [sp, #0]
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	f77f aed6 	ble.w	801b480 <_dtoa_r+0x900>
 801b6d4:	4656      	mov	r6, sl
 801b6d6:	4621      	mov	r1, r4
 801b6d8:	4648      	mov	r0, r9
 801b6da:	f7ff f9c9 	bl	801aa70 <quorem>
 801b6de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801b6e2:	f806 8b01 	strb.w	r8, [r6], #1
 801b6e6:	9b00      	ldr	r3, [sp, #0]
 801b6e8:	eba6 020a 	sub.w	r2, r6, sl
 801b6ec:	4293      	cmp	r3, r2
 801b6ee:	ddb3      	ble.n	801b658 <_dtoa_r+0xad8>
 801b6f0:	4649      	mov	r1, r9
 801b6f2:	2300      	movs	r3, #0
 801b6f4:	220a      	movs	r2, #10
 801b6f6:	4658      	mov	r0, fp
 801b6f8:	f000 f8be 	bl	801b878 <__multadd>
 801b6fc:	4681      	mov	r9, r0
 801b6fe:	e7ea      	b.n	801b6d6 <_dtoa_r+0xb56>
 801b700:	0801ea8a 	.word	0x0801ea8a
 801b704:	0801ea25 	.word	0x0801ea25

0801b708 <__env_lock>:
 801b708:	4801      	ldr	r0, [pc, #4]	@ (801b710 <__env_lock+0x8>)
 801b70a:	f7ff b974 	b.w	801a9f6 <__retarget_lock_acquire_recursive>
 801b70e:	bf00      	nop
 801b710:	20009ff4 	.word	0x20009ff4

0801b714 <__env_unlock>:
 801b714:	4801      	ldr	r0, [pc, #4]	@ (801b71c <__env_unlock+0x8>)
 801b716:	f7ff b96f 	b.w	801a9f8 <__retarget_lock_release_recursive>
 801b71a:	bf00      	nop
 801b71c:	20009ff4 	.word	0x20009ff4

0801b720 <_free_r>:
 801b720:	b538      	push	{r3, r4, r5, lr}
 801b722:	4605      	mov	r5, r0
 801b724:	2900      	cmp	r1, #0
 801b726:	d041      	beq.n	801b7ac <_free_r+0x8c>
 801b728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b72c:	1f0c      	subs	r4, r1, #4
 801b72e:	2b00      	cmp	r3, #0
 801b730:	bfb8      	it	lt
 801b732:	18e4      	addlt	r4, r4, r3
 801b734:	f7fd fe04 	bl	8019340 <__malloc_lock>
 801b738:	4a1d      	ldr	r2, [pc, #116]	@ (801b7b0 <_free_r+0x90>)
 801b73a:	6813      	ldr	r3, [r2, #0]
 801b73c:	b933      	cbnz	r3, 801b74c <_free_r+0x2c>
 801b73e:	6063      	str	r3, [r4, #4]
 801b740:	6014      	str	r4, [r2, #0]
 801b742:	4628      	mov	r0, r5
 801b744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b748:	f7fd be00 	b.w	801934c <__malloc_unlock>
 801b74c:	42a3      	cmp	r3, r4
 801b74e:	d908      	bls.n	801b762 <_free_r+0x42>
 801b750:	6820      	ldr	r0, [r4, #0]
 801b752:	1821      	adds	r1, r4, r0
 801b754:	428b      	cmp	r3, r1
 801b756:	bf01      	itttt	eq
 801b758:	6819      	ldreq	r1, [r3, #0]
 801b75a:	685b      	ldreq	r3, [r3, #4]
 801b75c:	1809      	addeq	r1, r1, r0
 801b75e:	6021      	streq	r1, [r4, #0]
 801b760:	e7ed      	b.n	801b73e <_free_r+0x1e>
 801b762:	461a      	mov	r2, r3
 801b764:	685b      	ldr	r3, [r3, #4]
 801b766:	b10b      	cbz	r3, 801b76c <_free_r+0x4c>
 801b768:	42a3      	cmp	r3, r4
 801b76a:	d9fa      	bls.n	801b762 <_free_r+0x42>
 801b76c:	6811      	ldr	r1, [r2, #0]
 801b76e:	1850      	adds	r0, r2, r1
 801b770:	42a0      	cmp	r0, r4
 801b772:	d10b      	bne.n	801b78c <_free_r+0x6c>
 801b774:	6820      	ldr	r0, [r4, #0]
 801b776:	4401      	add	r1, r0
 801b778:	1850      	adds	r0, r2, r1
 801b77a:	4283      	cmp	r3, r0
 801b77c:	6011      	str	r1, [r2, #0]
 801b77e:	d1e0      	bne.n	801b742 <_free_r+0x22>
 801b780:	6818      	ldr	r0, [r3, #0]
 801b782:	685b      	ldr	r3, [r3, #4]
 801b784:	6053      	str	r3, [r2, #4]
 801b786:	4408      	add	r0, r1
 801b788:	6010      	str	r0, [r2, #0]
 801b78a:	e7da      	b.n	801b742 <_free_r+0x22>
 801b78c:	d902      	bls.n	801b794 <_free_r+0x74>
 801b78e:	230c      	movs	r3, #12
 801b790:	602b      	str	r3, [r5, #0]
 801b792:	e7d6      	b.n	801b742 <_free_r+0x22>
 801b794:	6820      	ldr	r0, [r4, #0]
 801b796:	1821      	adds	r1, r4, r0
 801b798:	428b      	cmp	r3, r1
 801b79a:	bf04      	itt	eq
 801b79c:	6819      	ldreq	r1, [r3, #0]
 801b79e:	685b      	ldreq	r3, [r3, #4]
 801b7a0:	6063      	str	r3, [r4, #4]
 801b7a2:	bf04      	itt	eq
 801b7a4:	1809      	addeq	r1, r1, r0
 801b7a6:	6021      	streq	r1, [r4, #0]
 801b7a8:	6054      	str	r4, [r2, #4]
 801b7aa:	e7ca      	b.n	801b742 <_free_r+0x22>
 801b7ac:	bd38      	pop	{r3, r4, r5, pc}
 801b7ae:	bf00      	nop
 801b7b0:	20009eb0 	.word	0x20009eb0

0801b7b4 <_Balloc>:
 801b7b4:	b570      	push	{r4, r5, r6, lr}
 801b7b6:	69c6      	ldr	r6, [r0, #28]
 801b7b8:	4604      	mov	r4, r0
 801b7ba:	460d      	mov	r5, r1
 801b7bc:	b976      	cbnz	r6, 801b7dc <_Balloc+0x28>
 801b7be:	2010      	movs	r0, #16
 801b7c0:	f7fd fd0c 	bl	80191dc <malloc>
 801b7c4:	4602      	mov	r2, r0
 801b7c6:	61e0      	str	r0, [r4, #28]
 801b7c8:	b920      	cbnz	r0, 801b7d4 <_Balloc+0x20>
 801b7ca:	4b18      	ldr	r3, [pc, #96]	@ (801b82c <_Balloc+0x78>)
 801b7cc:	4818      	ldr	r0, [pc, #96]	@ (801b830 <_Balloc+0x7c>)
 801b7ce:	216b      	movs	r1, #107	@ 0x6b
 801b7d0:	f7ff f930 	bl	801aa34 <__assert_func>
 801b7d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b7d8:	6006      	str	r6, [r0, #0]
 801b7da:	60c6      	str	r6, [r0, #12]
 801b7dc:	69e6      	ldr	r6, [r4, #28]
 801b7de:	68f3      	ldr	r3, [r6, #12]
 801b7e0:	b183      	cbz	r3, 801b804 <_Balloc+0x50>
 801b7e2:	69e3      	ldr	r3, [r4, #28]
 801b7e4:	68db      	ldr	r3, [r3, #12]
 801b7e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b7ea:	b9b8      	cbnz	r0, 801b81c <_Balloc+0x68>
 801b7ec:	2101      	movs	r1, #1
 801b7ee:	fa01 f605 	lsl.w	r6, r1, r5
 801b7f2:	1d72      	adds	r2, r6, #5
 801b7f4:	0092      	lsls	r2, r2, #2
 801b7f6:	4620      	mov	r0, r4
 801b7f8:	f7fd fc94 	bl	8019124 <_calloc_r>
 801b7fc:	b160      	cbz	r0, 801b818 <_Balloc+0x64>
 801b7fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b802:	e00e      	b.n	801b822 <_Balloc+0x6e>
 801b804:	2221      	movs	r2, #33	@ 0x21
 801b806:	2104      	movs	r1, #4
 801b808:	4620      	mov	r0, r4
 801b80a:	f7fd fc8b 	bl	8019124 <_calloc_r>
 801b80e:	69e3      	ldr	r3, [r4, #28]
 801b810:	60f0      	str	r0, [r6, #12]
 801b812:	68db      	ldr	r3, [r3, #12]
 801b814:	2b00      	cmp	r3, #0
 801b816:	d1e4      	bne.n	801b7e2 <_Balloc+0x2e>
 801b818:	2000      	movs	r0, #0
 801b81a:	bd70      	pop	{r4, r5, r6, pc}
 801b81c:	6802      	ldr	r2, [r0, #0]
 801b81e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b822:	2300      	movs	r3, #0
 801b824:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b828:	e7f7      	b.n	801b81a <_Balloc+0x66>
 801b82a:	bf00      	nop
 801b82c:	0801e840 	.word	0x0801e840
 801b830:	0801ea9b 	.word	0x0801ea9b

0801b834 <_Bfree>:
 801b834:	b570      	push	{r4, r5, r6, lr}
 801b836:	69c6      	ldr	r6, [r0, #28]
 801b838:	4605      	mov	r5, r0
 801b83a:	460c      	mov	r4, r1
 801b83c:	b976      	cbnz	r6, 801b85c <_Bfree+0x28>
 801b83e:	2010      	movs	r0, #16
 801b840:	f7fd fccc 	bl	80191dc <malloc>
 801b844:	4602      	mov	r2, r0
 801b846:	61e8      	str	r0, [r5, #28]
 801b848:	b920      	cbnz	r0, 801b854 <_Bfree+0x20>
 801b84a:	4b09      	ldr	r3, [pc, #36]	@ (801b870 <_Bfree+0x3c>)
 801b84c:	4809      	ldr	r0, [pc, #36]	@ (801b874 <_Bfree+0x40>)
 801b84e:	218f      	movs	r1, #143	@ 0x8f
 801b850:	f7ff f8f0 	bl	801aa34 <__assert_func>
 801b854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b858:	6006      	str	r6, [r0, #0]
 801b85a:	60c6      	str	r6, [r0, #12]
 801b85c:	b13c      	cbz	r4, 801b86e <_Bfree+0x3a>
 801b85e:	69eb      	ldr	r3, [r5, #28]
 801b860:	6862      	ldr	r2, [r4, #4]
 801b862:	68db      	ldr	r3, [r3, #12]
 801b864:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b868:	6021      	str	r1, [r4, #0]
 801b86a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b86e:	bd70      	pop	{r4, r5, r6, pc}
 801b870:	0801e840 	.word	0x0801e840
 801b874:	0801ea9b 	.word	0x0801ea9b

0801b878 <__multadd>:
 801b878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b87c:	690d      	ldr	r5, [r1, #16]
 801b87e:	4607      	mov	r7, r0
 801b880:	460c      	mov	r4, r1
 801b882:	461e      	mov	r6, r3
 801b884:	f101 0c14 	add.w	ip, r1, #20
 801b888:	2000      	movs	r0, #0
 801b88a:	f8dc 3000 	ldr.w	r3, [ip]
 801b88e:	b299      	uxth	r1, r3
 801b890:	fb02 6101 	mla	r1, r2, r1, r6
 801b894:	0c1e      	lsrs	r6, r3, #16
 801b896:	0c0b      	lsrs	r3, r1, #16
 801b898:	fb02 3306 	mla	r3, r2, r6, r3
 801b89c:	b289      	uxth	r1, r1
 801b89e:	3001      	adds	r0, #1
 801b8a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b8a4:	4285      	cmp	r5, r0
 801b8a6:	f84c 1b04 	str.w	r1, [ip], #4
 801b8aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b8ae:	dcec      	bgt.n	801b88a <__multadd+0x12>
 801b8b0:	b30e      	cbz	r6, 801b8f6 <__multadd+0x7e>
 801b8b2:	68a3      	ldr	r3, [r4, #8]
 801b8b4:	42ab      	cmp	r3, r5
 801b8b6:	dc19      	bgt.n	801b8ec <__multadd+0x74>
 801b8b8:	6861      	ldr	r1, [r4, #4]
 801b8ba:	4638      	mov	r0, r7
 801b8bc:	3101      	adds	r1, #1
 801b8be:	f7ff ff79 	bl	801b7b4 <_Balloc>
 801b8c2:	4680      	mov	r8, r0
 801b8c4:	b928      	cbnz	r0, 801b8d2 <__multadd+0x5a>
 801b8c6:	4602      	mov	r2, r0
 801b8c8:	4b0c      	ldr	r3, [pc, #48]	@ (801b8fc <__multadd+0x84>)
 801b8ca:	480d      	ldr	r0, [pc, #52]	@ (801b900 <__multadd+0x88>)
 801b8cc:	21ba      	movs	r1, #186	@ 0xba
 801b8ce:	f7ff f8b1 	bl	801aa34 <__assert_func>
 801b8d2:	6922      	ldr	r2, [r4, #16]
 801b8d4:	3202      	adds	r2, #2
 801b8d6:	f104 010c 	add.w	r1, r4, #12
 801b8da:	0092      	lsls	r2, r2, #2
 801b8dc:	300c      	adds	r0, #12
 801b8de:	f7ff f894 	bl	801aa0a <memcpy>
 801b8e2:	4621      	mov	r1, r4
 801b8e4:	4638      	mov	r0, r7
 801b8e6:	f7ff ffa5 	bl	801b834 <_Bfree>
 801b8ea:	4644      	mov	r4, r8
 801b8ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b8f0:	3501      	adds	r5, #1
 801b8f2:	615e      	str	r6, [r3, #20]
 801b8f4:	6125      	str	r5, [r4, #16]
 801b8f6:	4620      	mov	r0, r4
 801b8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b8fc:	0801ea8a 	.word	0x0801ea8a
 801b900:	0801ea9b 	.word	0x0801ea9b

0801b904 <__s2b>:
 801b904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b908:	460c      	mov	r4, r1
 801b90a:	4615      	mov	r5, r2
 801b90c:	461f      	mov	r7, r3
 801b90e:	2209      	movs	r2, #9
 801b910:	3308      	adds	r3, #8
 801b912:	4606      	mov	r6, r0
 801b914:	fb93 f3f2 	sdiv	r3, r3, r2
 801b918:	2100      	movs	r1, #0
 801b91a:	2201      	movs	r2, #1
 801b91c:	429a      	cmp	r2, r3
 801b91e:	db09      	blt.n	801b934 <__s2b+0x30>
 801b920:	4630      	mov	r0, r6
 801b922:	f7ff ff47 	bl	801b7b4 <_Balloc>
 801b926:	b940      	cbnz	r0, 801b93a <__s2b+0x36>
 801b928:	4602      	mov	r2, r0
 801b92a:	4b19      	ldr	r3, [pc, #100]	@ (801b990 <__s2b+0x8c>)
 801b92c:	4819      	ldr	r0, [pc, #100]	@ (801b994 <__s2b+0x90>)
 801b92e:	21d3      	movs	r1, #211	@ 0xd3
 801b930:	f7ff f880 	bl	801aa34 <__assert_func>
 801b934:	0052      	lsls	r2, r2, #1
 801b936:	3101      	adds	r1, #1
 801b938:	e7f0      	b.n	801b91c <__s2b+0x18>
 801b93a:	9b08      	ldr	r3, [sp, #32]
 801b93c:	6143      	str	r3, [r0, #20]
 801b93e:	2d09      	cmp	r5, #9
 801b940:	f04f 0301 	mov.w	r3, #1
 801b944:	6103      	str	r3, [r0, #16]
 801b946:	dd16      	ble.n	801b976 <__s2b+0x72>
 801b948:	f104 0909 	add.w	r9, r4, #9
 801b94c:	46c8      	mov	r8, r9
 801b94e:	442c      	add	r4, r5
 801b950:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b954:	4601      	mov	r1, r0
 801b956:	3b30      	subs	r3, #48	@ 0x30
 801b958:	220a      	movs	r2, #10
 801b95a:	4630      	mov	r0, r6
 801b95c:	f7ff ff8c 	bl	801b878 <__multadd>
 801b960:	45a0      	cmp	r8, r4
 801b962:	d1f5      	bne.n	801b950 <__s2b+0x4c>
 801b964:	f1a5 0408 	sub.w	r4, r5, #8
 801b968:	444c      	add	r4, r9
 801b96a:	1b2d      	subs	r5, r5, r4
 801b96c:	1963      	adds	r3, r4, r5
 801b96e:	42bb      	cmp	r3, r7
 801b970:	db04      	blt.n	801b97c <__s2b+0x78>
 801b972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b976:	340a      	adds	r4, #10
 801b978:	2509      	movs	r5, #9
 801b97a:	e7f6      	b.n	801b96a <__s2b+0x66>
 801b97c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b980:	4601      	mov	r1, r0
 801b982:	3b30      	subs	r3, #48	@ 0x30
 801b984:	220a      	movs	r2, #10
 801b986:	4630      	mov	r0, r6
 801b988:	f7ff ff76 	bl	801b878 <__multadd>
 801b98c:	e7ee      	b.n	801b96c <__s2b+0x68>
 801b98e:	bf00      	nop
 801b990:	0801ea8a 	.word	0x0801ea8a
 801b994:	0801ea9b 	.word	0x0801ea9b

0801b998 <__hi0bits>:
 801b998:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b99c:	4603      	mov	r3, r0
 801b99e:	bf36      	itet	cc
 801b9a0:	0403      	lslcc	r3, r0, #16
 801b9a2:	2000      	movcs	r0, #0
 801b9a4:	2010      	movcc	r0, #16
 801b9a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b9aa:	bf3c      	itt	cc
 801b9ac:	021b      	lslcc	r3, r3, #8
 801b9ae:	3008      	addcc	r0, #8
 801b9b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b9b4:	bf3c      	itt	cc
 801b9b6:	011b      	lslcc	r3, r3, #4
 801b9b8:	3004      	addcc	r0, #4
 801b9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b9be:	bf3c      	itt	cc
 801b9c0:	009b      	lslcc	r3, r3, #2
 801b9c2:	3002      	addcc	r0, #2
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	db05      	blt.n	801b9d4 <__hi0bits+0x3c>
 801b9c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b9cc:	f100 0001 	add.w	r0, r0, #1
 801b9d0:	bf08      	it	eq
 801b9d2:	2020      	moveq	r0, #32
 801b9d4:	4770      	bx	lr

0801b9d6 <__lo0bits>:
 801b9d6:	6803      	ldr	r3, [r0, #0]
 801b9d8:	4602      	mov	r2, r0
 801b9da:	f013 0007 	ands.w	r0, r3, #7
 801b9de:	d00b      	beq.n	801b9f8 <__lo0bits+0x22>
 801b9e0:	07d9      	lsls	r1, r3, #31
 801b9e2:	d421      	bmi.n	801ba28 <__lo0bits+0x52>
 801b9e4:	0798      	lsls	r0, r3, #30
 801b9e6:	bf49      	itett	mi
 801b9e8:	085b      	lsrmi	r3, r3, #1
 801b9ea:	089b      	lsrpl	r3, r3, #2
 801b9ec:	2001      	movmi	r0, #1
 801b9ee:	6013      	strmi	r3, [r2, #0]
 801b9f0:	bf5c      	itt	pl
 801b9f2:	6013      	strpl	r3, [r2, #0]
 801b9f4:	2002      	movpl	r0, #2
 801b9f6:	4770      	bx	lr
 801b9f8:	b299      	uxth	r1, r3
 801b9fa:	b909      	cbnz	r1, 801ba00 <__lo0bits+0x2a>
 801b9fc:	0c1b      	lsrs	r3, r3, #16
 801b9fe:	2010      	movs	r0, #16
 801ba00:	b2d9      	uxtb	r1, r3
 801ba02:	b909      	cbnz	r1, 801ba08 <__lo0bits+0x32>
 801ba04:	3008      	adds	r0, #8
 801ba06:	0a1b      	lsrs	r3, r3, #8
 801ba08:	0719      	lsls	r1, r3, #28
 801ba0a:	bf04      	itt	eq
 801ba0c:	091b      	lsreq	r3, r3, #4
 801ba0e:	3004      	addeq	r0, #4
 801ba10:	0799      	lsls	r1, r3, #30
 801ba12:	bf04      	itt	eq
 801ba14:	089b      	lsreq	r3, r3, #2
 801ba16:	3002      	addeq	r0, #2
 801ba18:	07d9      	lsls	r1, r3, #31
 801ba1a:	d403      	bmi.n	801ba24 <__lo0bits+0x4e>
 801ba1c:	085b      	lsrs	r3, r3, #1
 801ba1e:	f100 0001 	add.w	r0, r0, #1
 801ba22:	d003      	beq.n	801ba2c <__lo0bits+0x56>
 801ba24:	6013      	str	r3, [r2, #0]
 801ba26:	4770      	bx	lr
 801ba28:	2000      	movs	r0, #0
 801ba2a:	4770      	bx	lr
 801ba2c:	2020      	movs	r0, #32
 801ba2e:	4770      	bx	lr

0801ba30 <__i2b>:
 801ba30:	b510      	push	{r4, lr}
 801ba32:	460c      	mov	r4, r1
 801ba34:	2101      	movs	r1, #1
 801ba36:	f7ff febd 	bl	801b7b4 <_Balloc>
 801ba3a:	4602      	mov	r2, r0
 801ba3c:	b928      	cbnz	r0, 801ba4a <__i2b+0x1a>
 801ba3e:	4b05      	ldr	r3, [pc, #20]	@ (801ba54 <__i2b+0x24>)
 801ba40:	4805      	ldr	r0, [pc, #20]	@ (801ba58 <__i2b+0x28>)
 801ba42:	f240 1145 	movw	r1, #325	@ 0x145
 801ba46:	f7fe fff5 	bl	801aa34 <__assert_func>
 801ba4a:	2301      	movs	r3, #1
 801ba4c:	6144      	str	r4, [r0, #20]
 801ba4e:	6103      	str	r3, [r0, #16]
 801ba50:	bd10      	pop	{r4, pc}
 801ba52:	bf00      	nop
 801ba54:	0801ea8a 	.word	0x0801ea8a
 801ba58:	0801ea9b 	.word	0x0801ea9b

0801ba5c <__multiply>:
 801ba5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba60:	4614      	mov	r4, r2
 801ba62:	690a      	ldr	r2, [r1, #16]
 801ba64:	6923      	ldr	r3, [r4, #16]
 801ba66:	429a      	cmp	r2, r3
 801ba68:	bfa8      	it	ge
 801ba6a:	4623      	movge	r3, r4
 801ba6c:	460f      	mov	r7, r1
 801ba6e:	bfa4      	itt	ge
 801ba70:	460c      	movge	r4, r1
 801ba72:	461f      	movge	r7, r3
 801ba74:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801ba78:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801ba7c:	68a3      	ldr	r3, [r4, #8]
 801ba7e:	6861      	ldr	r1, [r4, #4]
 801ba80:	eb0a 0609 	add.w	r6, sl, r9
 801ba84:	42b3      	cmp	r3, r6
 801ba86:	b085      	sub	sp, #20
 801ba88:	bfb8      	it	lt
 801ba8a:	3101      	addlt	r1, #1
 801ba8c:	f7ff fe92 	bl	801b7b4 <_Balloc>
 801ba90:	b930      	cbnz	r0, 801baa0 <__multiply+0x44>
 801ba92:	4602      	mov	r2, r0
 801ba94:	4b44      	ldr	r3, [pc, #272]	@ (801bba8 <__multiply+0x14c>)
 801ba96:	4845      	ldr	r0, [pc, #276]	@ (801bbac <__multiply+0x150>)
 801ba98:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801ba9c:	f7fe ffca 	bl	801aa34 <__assert_func>
 801baa0:	f100 0514 	add.w	r5, r0, #20
 801baa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801baa8:	462b      	mov	r3, r5
 801baaa:	2200      	movs	r2, #0
 801baac:	4543      	cmp	r3, r8
 801baae:	d321      	bcc.n	801baf4 <__multiply+0x98>
 801bab0:	f107 0114 	add.w	r1, r7, #20
 801bab4:	f104 0214 	add.w	r2, r4, #20
 801bab8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801babc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801bac0:	9302      	str	r3, [sp, #8]
 801bac2:	1b13      	subs	r3, r2, r4
 801bac4:	3b15      	subs	r3, #21
 801bac6:	f023 0303 	bic.w	r3, r3, #3
 801baca:	3304      	adds	r3, #4
 801bacc:	f104 0715 	add.w	r7, r4, #21
 801bad0:	42ba      	cmp	r2, r7
 801bad2:	bf38      	it	cc
 801bad4:	2304      	movcc	r3, #4
 801bad6:	9301      	str	r3, [sp, #4]
 801bad8:	9b02      	ldr	r3, [sp, #8]
 801bada:	9103      	str	r1, [sp, #12]
 801badc:	428b      	cmp	r3, r1
 801bade:	d80c      	bhi.n	801bafa <__multiply+0x9e>
 801bae0:	2e00      	cmp	r6, #0
 801bae2:	dd03      	ble.n	801baec <__multiply+0x90>
 801bae4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d05b      	beq.n	801bba4 <__multiply+0x148>
 801baec:	6106      	str	r6, [r0, #16]
 801baee:	b005      	add	sp, #20
 801baf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801baf4:	f843 2b04 	str.w	r2, [r3], #4
 801baf8:	e7d8      	b.n	801baac <__multiply+0x50>
 801bafa:	f8b1 a000 	ldrh.w	sl, [r1]
 801bafe:	f1ba 0f00 	cmp.w	sl, #0
 801bb02:	d024      	beq.n	801bb4e <__multiply+0xf2>
 801bb04:	f104 0e14 	add.w	lr, r4, #20
 801bb08:	46a9      	mov	r9, r5
 801bb0a:	f04f 0c00 	mov.w	ip, #0
 801bb0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801bb12:	f8d9 3000 	ldr.w	r3, [r9]
 801bb16:	fa1f fb87 	uxth.w	fp, r7
 801bb1a:	b29b      	uxth	r3, r3
 801bb1c:	fb0a 330b 	mla	r3, sl, fp, r3
 801bb20:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801bb24:	f8d9 7000 	ldr.w	r7, [r9]
 801bb28:	4463      	add	r3, ip
 801bb2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801bb2e:	fb0a c70b 	mla	r7, sl, fp, ip
 801bb32:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801bb36:	b29b      	uxth	r3, r3
 801bb38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801bb3c:	4572      	cmp	r2, lr
 801bb3e:	f849 3b04 	str.w	r3, [r9], #4
 801bb42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801bb46:	d8e2      	bhi.n	801bb0e <__multiply+0xb2>
 801bb48:	9b01      	ldr	r3, [sp, #4]
 801bb4a:	f845 c003 	str.w	ip, [r5, r3]
 801bb4e:	9b03      	ldr	r3, [sp, #12]
 801bb50:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801bb54:	3104      	adds	r1, #4
 801bb56:	f1b9 0f00 	cmp.w	r9, #0
 801bb5a:	d021      	beq.n	801bba0 <__multiply+0x144>
 801bb5c:	682b      	ldr	r3, [r5, #0]
 801bb5e:	f104 0c14 	add.w	ip, r4, #20
 801bb62:	46ae      	mov	lr, r5
 801bb64:	f04f 0a00 	mov.w	sl, #0
 801bb68:	f8bc b000 	ldrh.w	fp, [ip]
 801bb6c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801bb70:	fb09 770b 	mla	r7, r9, fp, r7
 801bb74:	4457      	add	r7, sl
 801bb76:	b29b      	uxth	r3, r3
 801bb78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801bb7c:	f84e 3b04 	str.w	r3, [lr], #4
 801bb80:	f85c 3b04 	ldr.w	r3, [ip], #4
 801bb84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bb88:	f8be 3000 	ldrh.w	r3, [lr]
 801bb8c:	fb09 330a 	mla	r3, r9, sl, r3
 801bb90:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801bb94:	4562      	cmp	r2, ip
 801bb96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bb9a:	d8e5      	bhi.n	801bb68 <__multiply+0x10c>
 801bb9c:	9f01      	ldr	r7, [sp, #4]
 801bb9e:	51eb      	str	r3, [r5, r7]
 801bba0:	3504      	adds	r5, #4
 801bba2:	e799      	b.n	801bad8 <__multiply+0x7c>
 801bba4:	3e01      	subs	r6, #1
 801bba6:	e79b      	b.n	801bae0 <__multiply+0x84>
 801bba8:	0801ea8a 	.word	0x0801ea8a
 801bbac:	0801ea9b 	.word	0x0801ea9b

0801bbb0 <__pow5mult>:
 801bbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bbb4:	4615      	mov	r5, r2
 801bbb6:	f012 0203 	ands.w	r2, r2, #3
 801bbba:	4607      	mov	r7, r0
 801bbbc:	460e      	mov	r6, r1
 801bbbe:	d007      	beq.n	801bbd0 <__pow5mult+0x20>
 801bbc0:	4c25      	ldr	r4, [pc, #148]	@ (801bc58 <__pow5mult+0xa8>)
 801bbc2:	3a01      	subs	r2, #1
 801bbc4:	2300      	movs	r3, #0
 801bbc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bbca:	f7ff fe55 	bl	801b878 <__multadd>
 801bbce:	4606      	mov	r6, r0
 801bbd0:	10ad      	asrs	r5, r5, #2
 801bbd2:	d03d      	beq.n	801bc50 <__pow5mult+0xa0>
 801bbd4:	69fc      	ldr	r4, [r7, #28]
 801bbd6:	b97c      	cbnz	r4, 801bbf8 <__pow5mult+0x48>
 801bbd8:	2010      	movs	r0, #16
 801bbda:	f7fd faff 	bl	80191dc <malloc>
 801bbde:	4602      	mov	r2, r0
 801bbe0:	61f8      	str	r0, [r7, #28]
 801bbe2:	b928      	cbnz	r0, 801bbf0 <__pow5mult+0x40>
 801bbe4:	4b1d      	ldr	r3, [pc, #116]	@ (801bc5c <__pow5mult+0xac>)
 801bbe6:	481e      	ldr	r0, [pc, #120]	@ (801bc60 <__pow5mult+0xb0>)
 801bbe8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801bbec:	f7fe ff22 	bl	801aa34 <__assert_func>
 801bbf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bbf4:	6004      	str	r4, [r0, #0]
 801bbf6:	60c4      	str	r4, [r0, #12]
 801bbf8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801bbfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bc00:	b94c      	cbnz	r4, 801bc16 <__pow5mult+0x66>
 801bc02:	f240 2171 	movw	r1, #625	@ 0x271
 801bc06:	4638      	mov	r0, r7
 801bc08:	f7ff ff12 	bl	801ba30 <__i2b>
 801bc0c:	2300      	movs	r3, #0
 801bc0e:	f8c8 0008 	str.w	r0, [r8, #8]
 801bc12:	4604      	mov	r4, r0
 801bc14:	6003      	str	r3, [r0, #0]
 801bc16:	f04f 0900 	mov.w	r9, #0
 801bc1a:	07eb      	lsls	r3, r5, #31
 801bc1c:	d50a      	bpl.n	801bc34 <__pow5mult+0x84>
 801bc1e:	4631      	mov	r1, r6
 801bc20:	4622      	mov	r2, r4
 801bc22:	4638      	mov	r0, r7
 801bc24:	f7ff ff1a 	bl	801ba5c <__multiply>
 801bc28:	4631      	mov	r1, r6
 801bc2a:	4680      	mov	r8, r0
 801bc2c:	4638      	mov	r0, r7
 801bc2e:	f7ff fe01 	bl	801b834 <_Bfree>
 801bc32:	4646      	mov	r6, r8
 801bc34:	106d      	asrs	r5, r5, #1
 801bc36:	d00b      	beq.n	801bc50 <__pow5mult+0xa0>
 801bc38:	6820      	ldr	r0, [r4, #0]
 801bc3a:	b938      	cbnz	r0, 801bc4c <__pow5mult+0x9c>
 801bc3c:	4622      	mov	r2, r4
 801bc3e:	4621      	mov	r1, r4
 801bc40:	4638      	mov	r0, r7
 801bc42:	f7ff ff0b 	bl	801ba5c <__multiply>
 801bc46:	6020      	str	r0, [r4, #0]
 801bc48:	f8c0 9000 	str.w	r9, [r0]
 801bc4c:	4604      	mov	r4, r0
 801bc4e:	e7e4      	b.n	801bc1a <__pow5mult+0x6a>
 801bc50:	4630      	mov	r0, r6
 801bc52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc56:	bf00      	nop
 801bc58:	0801eaf4 	.word	0x0801eaf4
 801bc5c:	0801e840 	.word	0x0801e840
 801bc60:	0801ea9b 	.word	0x0801ea9b

0801bc64 <__lshift>:
 801bc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc68:	460c      	mov	r4, r1
 801bc6a:	6849      	ldr	r1, [r1, #4]
 801bc6c:	6923      	ldr	r3, [r4, #16]
 801bc6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bc72:	68a3      	ldr	r3, [r4, #8]
 801bc74:	4607      	mov	r7, r0
 801bc76:	4691      	mov	r9, r2
 801bc78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bc7c:	f108 0601 	add.w	r6, r8, #1
 801bc80:	42b3      	cmp	r3, r6
 801bc82:	db0b      	blt.n	801bc9c <__lshift+0x38>
 801bc84:	4638      	mov	r0, r7
 801bc86:	f7ff fd95 	bl	801b7b4 <_Balloc>
 801bc8a:	4605      	mov	r5, r0
 801bc8c:	b948      	cbnz	r0, 801bca2 <__lshift+0x3e>
 801bc8e:	4602      	mov	r2, r0
 801bc90:	4b28      	ldr	r3, [pc, #160]	@ (801bd34 <__lshift+0xd0>)
 801bc92:	4829      	ldr	r0, [pc, #164]	@ (801bd38 <__lshift+0xd4>)
 801bc94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801bc98:	f7fe fecc 	bl	801aa34 <__assert_func>
 801bc9c:	3101      	adds	r1, #1
 801bc9e:	005b      	lsls	r3, r3, #1
 801bca0:	e7ee      	b.n	801bc80 <__lshift+0x1c>
 801bca2:	2300      	movs	r3, #0
 801bca4:	f100 0114 	add.w	r1, r0, #20
 801bca8:	f100 0210 	add.w	r2, r0, #16
 801bcac:	4618      	mov	r0, r3
 801bcae:	4553      	cmp	r3, sl
 801bcb0:	db33      	blt.n	801bd1a <__lshift+0xb6>
 801bcb2:	6920      	ldr	r0, [r4, #16]
 801bcb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bcb8:	f104 0314 	add.w	r3, r4, #20
 801bcbc:	f019 091f 	ands.w	r9, r9, #31
 801bcc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bcc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bcc8:	d02b      	beq.n	801bd22 <__lshift+0xbe>
 801bcca:	f1c9 0e20 	rsb	lr, r9, #32
 801bcce:	468a      	mov	sl, r1
 801bcd0:	2200      	movs	r2, #0
 801bcd2:	6818      	ldr	r0, [r3, #0]
 801bcd4:	fa00 f009 	lsl.w	r0, r0, r9
 801bcd8:	4310      	orrs	r0, r2
 801bcda:	f84a 0b04 	str.w	r0, [sl], #4
 801bcde:	f853 2b04 	ldr.w	r2, [r3], #4
 801bce2:	459c      	cmp	ip, r3
 801bce4:	fa22 f20e 	lsr.w	r2, r2, lr
 801bce8:	d8f3      	bhi.n	801bcd2 <__lshift+0x6e>
 801bcea:	ebac 0304 	sub.w	r3, ip, r4
 801bcee:	3b15      	subs	r3, #21
 801bcf0:	f023 0303 	bic.w	r3, r3, #3
 801bcf4:	3304      	adds	r3, #4
 801bcf6:	f104 0015 	add.w	r0, r4, #21
 801bcfa:	4584      	cmp	ip, r0
 801bcfc:	bf38      	it	cc
 801bcfe:	2304      	movcc	r3, #4
 801bd00:	50ca      	str	r2, [r1, r3]
 801bd02:	b10a      	cbz	r2, 801bd08 <__lshift+0xa4>
 801bd04:	f108 0602 	add.w	r6, r8, #2
 801bd08:	3e01      	subs	r6, #1
 801bd0a:	4638      	mov	r0, r7
 801bd0c:	612e      	str	r6, [r5, #16]
 801bd0e:	4621      	mov	r1, r4
 801bd10:	f7ff fd90 	bl	801b834 <_Bfree>
 801bd14:	4628      	mov	r0, r5
 801bd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd1a:	f842 0f04 	str.w	r0, [r2, #4]!
 801bd1e:	3301      	adds	r3, #1
 801bd20:	e7c5      	b.n	801bcae <__lshift+0x4a>
 801bd22:	3904      	subs	r1, #4
 801bd24:	f853 2b04 	ldr.w	r2, [r3], #4
 801bd28:	f841 2f04 	str.w	r2, [r1, #4]!
 801bd2c:	459c      	cmp	ip, r3
 801bd2e:	d8f9      	bhi.n	801bd24 <__lshift+0xc0>
 801bd30:	e7ea      	b.n	801bd08 <__lshift+0xa4>
 801bd32:	bf00      	nop
 801bd34:	0801ea8a 	.word	0x0801ea8a
 801bd38:	0801ea9b 	.word	0x0801ea9b

0801bd3c <__mcmp>:
 801bd3c:	690a      	ldr	r2, [r1, #16]
 801bd3e:	4603      	mov	r3, r0
 801bd40:	6900      	ldr	r0, [r0, #16]
 801bd42:	1a80      	subs	r0, r0, r2
 801bd44:	b530      	push	{r4, r5, lr}
 801bd46:	d10e      	bne.n	801bd66 <__mcmp+0x2a>
 801bd48:	3314      	adds	r3, #20
 801bd4a:	3114      	adds	r1, #20
 801bd4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801bd50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801bd54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bd58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801bd5c:	4295      	cmp	r5, r2
 801bd5e:	d003      	beq.n	801bd68 <__mcmp+0x2c>
 801bd60:	d205      	bcs.n	801bd6e <__mcmp+0x32>
 801bd62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bd66:	bd30      	pop	{r4, r5, pc}
 801bd68:	42a3      	cmp	r3, r4
 801bd6a:	d3f3      	bcc.n	801bd54 <__mcmp+0x18>
 801bd6c:	e7fb      	b.n	801bd66 <__mcmp+0x2a>
 801bd6e:	2001      	movs	r0, #1
 801bd70:	e7f9      	b.n	801bd66 <__mcmp+0x2a>
	...

0801bd74 <__mdiff>:
 801bd74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd78:	4689      	mov	r9, r1
 801bd7a:	4606      	mov	r6, r0
 801bd7c:	4611      	mov	r1, r2
 801bd7e:	4648      	mov	r0, r9
 801bd80:	4614      	mov	r4, r2
 801bd82:	f7ff ffdb 	bl	801bd3c <__mcmp>
 801bd86:	1e05      	subs	r5, r0, #0
 801bd88:	d112      	bne.n	801bdb0 <__mdiff+0x3c>
 801bd8a:	4629      	mov	r1, r5
 801bd8c:	4630      	mov	r0, r6
 801bd8e:	f7ff fd11 	bl	801b7b4 <_Balloc>
 801bd92:	4602      	mov	r2, r0
 801bd94:	b928      	cbnz	r0, 801bda2 <__mdiff+0x2e>
 801bd96:	4b3f      	ldr	r3, [pc, #252]	@ (801be94 <__mdiff+0x120>)
 801bd98:	f240 2137 	movw	r1, #567	@ 0x237
 801bd9c:	483e      	ldr	r0, [pc, #248]	@ (801be98 <__mdiff+0x124>)
 801bd9e:	f7fe fe49 	bl	801aa34 <__assert_func>
 801bda2:	2301      	movs	r3, #1
 801bda4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bda8:	4610      	mov	r0, r2
 801bdaa:	b003      	add	sp, #12
 801bdac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdb0:	bfbc      	itt	lt
 801bdb2:	464b      	movlt	r3, r9
 801bdb4:	46a1      	movlt	r9, r4
 801bdb6:	4630      	mov	r0, r6
 801bdb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801bdbc:	bfba      	itte	lt
 801bdbe:	461c      	movlt	r4, r3
 801bdc0:	2501      	movlt	r5, #1
 801bdc2:	2500      	movge	r5, #0
 801bdc4:	f7ff fcf6 	bl	801b7b4 <_Balloc>
 801bdc8:	4602      	mov	r2, r0
 801bdca:	b918      	cbnz	r0, 801bdd4 <__mdiff+0x60>
 801bdcc:	4b31      	ldr	r3, [pc, #196]	@ (801be94 <__mdiff+0x120>)
 801bdce:	f240 2145 	movw	r1, #581	@ 0x245
 801bdd2:	e7e3      	b.n	801bd9c <__mdiff+0x28>
 801bdd4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801bdd8:	6926      	ldr	r6, [r4, #16]
 801bdda:	60c5      	str	r5, [r0, #12]
 801bddc:	f109 0310 	add.w	r3, r9, #16
 801bde0:	f109 0514 	add.w	r5, r9, #20
 801bde4:	f104 0e14 	add.w	lr, r4, #20
 801bde8:	f100 0b14 	add.w	fp, r0, #20
 801bdec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801bdf0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801bdf4:	9301      	str	r3, [sp, #4]
 801bdf6:	46d9      	mov	r9, fp
 801bdf8:	f04f 0c00 	mov.w	ip, #0
 801bdfc:	9b01      	ldr	r3, [sp, #4]
 801bdfe:	f85e 0b04 	ldr.w	r0, [lr], #4
 801be02:	f853 af04 	ldr.w	sl, [r3, #4]!
 801be06:	9301      	str	r3, [sp, #4]
 801be08:	fa1f f38a 	uxth.w	r3, sl
 801be0c:	4619      	mov	r1, r3
 801be0e:	b283      	uxth	r3, r0
 801be10:	1acb      	subs	r3, r1, r3
 801be12:	0c00      	lsrs	r0, r0, #16
 801be14:	4463      	add	r3, ip
 801be16:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801be1a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801be1e:	b29b      	uxth	r3, r3
 801be20:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801be24:	4576      	cmp	r6, lr
 801be26:	f849 3b04 	str.w	r3, [r9], #4
 801be2a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801be2e:	d8e5      	bhi.n	801bdfc <__mdiff+0x88>
 801be30:	1b33      	subs	r3, r6, r4
 801be32:	3b15      	subs	r3, #21
 801be34:	f023 0303 	bic.w	r3, r3, #3
 801be38:	3415      	adds	r4, #21
 801be3a:	3304      	adds	r3, #4
 801be3c:	42a6      	cmp	r6, r4
 801be3e:	bf38      	it	cc
 801be40:	2304      	movcc	r3, #4
 801be42:	441d      	add	r5, r3
 801be44:	445b      	add	r3, fp
 801be46:	461e      	mov	r6, r3
 801be48:	462c      	mov	r4, r5
 801be4a:	4544      	cmp	r4, r8
 801be4c:	d30e      	bcc.n	801be6c <__mdiff+0xf8>
 801be4e:	f108 0103 	add.w	r1, r8, #3
 801be52:	1b49      	subs	r1, r1, r5
 801be54:	f021 0103 	bic.w	r1, r1, #3
 801be58:	3d03      	subs	r5, #3
 801be5a:	45a8      	cmp	r8, r5
 801be5c:	bf38      	it	cc
 801be5e:	2100      	movcc	r1, #0
 801be60:	440b      	add	r3, r1
 801be62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801be66:	b191      	cbz	r1, 801be8e <__mdiff+0x11a>
 801be68:	6117      	str	r7, [r2, #16]
 801be6a:	e79d      	b.n	801bda8 <__mdiff+0x34>
 801be6c:	f854 1b04 	ldr.w	r1, [r4], #4
 801be70:	46e6      	mov	lr, ip
 801be72:	0c08      	lsrs	r0, r1, #16
 801be74:	fa1c fc81 	uxtah	ip, ip, r1
 801be78:	4471      	add	r1, lr
 801be7a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801be7e:	b289      	uxth	r1, r1
 801be80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801be84:	f846 1b04 	str.w	r1, [r6], #4
 801be88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801be8c:	e7dd      	b.n	801be4a <__mdiff+0xd6>
 801be8e:	3f01      	subs	r7, #1
 801be90:	e7e7      	b.n	801be62 <__mdiff+0xee>
 801be92:	bf00      	nop
 801be94:	0801ea8a 	.word	0x0801ea8a
 801be98:	0801ea9b 	.word	0x0801ea9b

0801be9c <__ulp>:
 801be9c:	b082      	sub	sp, #8
 801be9e:	ed8d 0b00 	vstr	d0, [sp]
 801bea2:	9a01      	ldr	r2, [sp, #4]
 801bea4:	4b0f      	ldr	r3, [pc, #60]	@ (801bee4 <__ulp+0x48>)
 801bea6:	4013      	ands	r3, r2
 801bea8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801beac:	2b00      	cmp	r3, #0
 801beae:	dc08      	bgt.n	801bec2 <__ulp+0x26>
 801beb0:	425b      	negs	r3, r3
 801beb2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801beb6:	ea4f 5223 	mov.w	r2, r3, asr #20
 801beba:	da04      	bge.n	801bec6 <__ulp+0x2a>
 801bebc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801bec0:	4113      	asrs	r3, r2
 801bec2:	2200      	movs	r2, #0
 801bec4:	e008      	b.n	801bed8 <__ulp+0x3c>
 801bec6:	f1a2 0314 	sub.w	r3, r2, #20
 801beca:	2b1e      	cmp	r3, #30
 801becc:	bfda      	itte	le
 801bece:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801bed2:	40da      	lsrle	r2, r3
 801bed4:	2201      	movgt	r2, #1
 801bed6:	2300      	movs	r3, #0
 801bed8:	4619      	mov	r1, r3
 801beda:	4610      	mov	r0, r2
 801bedc:	ec41 0b10 	vmov	d0, r0, r1
 801bee0:	b002      	add	sp, #8
 801bee2:	4770      	bx	lr
 801bee4:	7ff00000 	.word	0x7ff00000

0801bee8 <__b2d>:
 801bee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801beec:	6906      	ldr	r6, [r0, #16]
 801beee:	f100 0814 	add.w	r8, r0, #20
 801bef2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801bef6:	1f37      	subs	r7, r6, #4
 801bef8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801befc:	4610      	mov	r0, r2
 801befe:	f7ff fd4b 	bl	801b998 <__hi0bits>
 801bf02:	f1c0 0320 	rsb	r3, r0, #32
 801bf06:	280a      	cmp	r0, #10
 801bf08:	600b      	str	r3, [r1, #0]
 801bf0a:	491b      	ldr	r1, [pc, #108]	@ (801bf78 <__b2d+0x90>)
 801bf0c:	dc15      	bgt.n	801bf3a <__b2d+0x52>
 801bf0e:	f1c0 0c0b 	rsb	ip, r0, #11
 801bf12:	fa22 f30c 	lsr.w	r3, r2, ip
 801bf16:	45b8      	cmp	r8, r7
 801bf18:	ea43 0501 	orr.w	r5, r3, r1
 801bf1c:	bf34      	ite	cc
 801bf1e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bf22:	2300      	movcs	r3, #0
 801bf24:	3015      	adds	r0, #21
 801bf26:	fa02 f000 	lsl.w	r0, r2, r0
 801bf2a:	fa23 f30c 	lsr.w	r3, r3, ip
 801bf2e:	4303      	orrs	r3, r0
 801bf30:	461c      	mov	r4, r3
 801bf32:	ec45 4b10 	vmov	d0, r4, r5
 801bf36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf3a:	45b8      	cmp	r8, r7
 801bf3c:	bf3a      	itte	cc
 801bf3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bf42:	f1a6 0708 	subcc.w	r7, r6, #8
 801bf46:	2300      	movcs	r3, #0
 801bf48:	380b      	subs	r0, #11
 801bf4a:	d012      	beq.n	801bf72 <__b2d+0x8a>
 801bf4c:	f1c0 0120 	rsb	r1, r0, #32
 801bf50:	fa23 f401 	lsr.w	r4, r3, r1
 801bf54:	4082      	lsls	r2, r0
 801bf56:	4322      	orrs	r2, r4
 801bf58:	4547      	cmp	r7, r8
 801bf5a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801bf5e:	bf8c      	ite	hi
 801bf60:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801bf64:	2200      	movls	r2, #0
 801bf66:	4083      	lsls	r3, r0
 801bf68:	40ca      	lsrs	r2, r1
 801bf6a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801bf6e:	4313      	orrs	r3, r2
 801bf70:	e7de      	b.n	801bf30 <__b2d+0x48>
 801bf72:	ea42 0501 	orr.w	r5, r2, r1
 801bf76:	e7db      	b.n	801bf30 <__b2d+0x48>
 801bf78:	3ff00000 	.word	0x3ff00000

0801bf7c <__d2b>:
 801bf7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bf80:	460f      	mov	r7, r1
 801bf82:	2101      	movs	r1, #1
 801bf84:	ec59 8b10 	vmov	r8, r9, d0
 801bf88:	4616      	mov	r6, r2
 801bf8a:	f7ff fc13 	bl	801b7b4 <_Balloc>
 801bf8e:	4604      	mov	r4, r0
 801bf90:	b930      	cbnz	r0, 801bfa0 <__d2b+0x24>
 801bf92:	4602      	mov	r2, r0
 801bf94:	4b23      	ldr	r3, [pc, #140]	@ (801c024 <__d2b+0xa8>)
 801bf96:	4824      	ldr	r0, [pc, #144]	@ (801c028 <__d2b+0xac>)
 801bf98:	f240 310f 	movw	r1, #783	@ 0x30f
 801bf9c:	f7fe fd4a 	bl	801aa34 <__assert_func>
 801bfa0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801bfa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bfa8:	b10d      	cbz	r5, 801bfae <__d2b+0x32>
 801bfaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801bfae:	9301      	str	r3, [sp, #4]
 801bfb0:	f1b8 0300 	subs.w	r3, r8, #0
 801bfb4:	d023      	beq.n	801bffe <__d2b+0x82>
 801bfb6:	4668      	mov	r0, sp
 801bfb8:	9300      	str	r3, [sp, #0]
 801bfba:	f7ff fd0c 	bl	801b9d6 <__lo0bits>
 801bfbe:	e9dd 1200 	ldrd	r1, r2, [sp]
 801bfc2:	b1d0      	cbz	r0, 801bffa <__d2b+0x7e>
 801bfc4:	f1c0 0320 	rsb	r3, r0, #32
 801bfc8:	fa02 f303 	lsl.w	r3, r2, r3
 801bfcc:	430b      	orrs	r3, r1
 801bfce:	40c2      	lsrs	r2, r0
 801bfd0:	6163      	str	r3, [r4, #20]
 801bfd2:	9201      	str	r2, [sp, #4]
 801bfd4:	9b01      	ldr	r3, [sp, #4]
 801bfd6:	61a3      	str	r3, [r4, #24]
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	bf0c      	ite	eq
 801bfdc:	2201      	moveq	r2, #1
 801bfde:	2202      	movne	r2, #2
 801bfe0:	6122      	str	r2, [r4, #16]
 801bfe2:	b1a5      	cbz	r5, 801c00e <__d2b+0x92>
 801bfe4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801bfe8:	4405      	add	r5, r0
 801bfea:	603d      	str	r5, [r7, #0]
 801bfec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801bff0:	6030      	str	r0, [r6, #0]
 801bff2:	4620      	mov	r0, r4
 801bff4:	b003      	add	sp, #12
 801bff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bffa:	6161      	str	r1, [r4, #20]
 801bffc:	e7ea      	b.n	801bfd4 <__d2b+0x58>
 801bffe:	a801      	add	r0, sp, #4
 801c000:	f7ff fce9 	bl	801b9d6 <__lo0bits>
 801c004:	9b01      	ldr	r3, [sp, #4]
 801c006:	6163      	str	r3, [r4, #20]
 801c008:	3020      	adds	r0, #32
 801c00a:	2201      	movs	r2, #1
 801c00c:	e7e8      	b.n	801bfe0 <__d2b+0x64>
 801c00e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c012:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801c016:	6038      	str	r0, [r7, #0]
 801c018:	6918      	ldr	r0, [r3, #16]
 801c01a:	f7ff fcbd 	bl	801b998 <__hi0bits>
 801c01e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c022:	e7e5      	b.n	801bff0 <__d2b+0x74>
 801c024:	0801ea8a 	.word	0x0801ea8a
 801c028:	0801ea9b 	.word	0x0801ea9b

0801c02c <__ratio>:
 801c02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c030:	b085      	sub	sp, #20
 801c032:	e9cd 1000 	strd	r1, r0, [sp]
 801c036:	a902      	add	r1, sp, #8
 801c038:	f7ff ff56 	bl	801bee8 <__b2d>
 801c03c:	9800      	ldr	r0, [sp, #0]
 801c03e:	a903      	add	r1, sp, #12
 801c040:	ec55 4b10 	vmov	r4, r5, d0
 801c044:	f7ff ff50 	bl	801bee8 <__b2d>
 801c048:	9b01      	ldr	r3, [sp, #4]
 801c04a:	6919      	ldr	r1, [r3, #16]
 801c04c:	9b00      	ldr	r3, [sp, #0]
 801c04e:	691b      	ldr	r3, [r3, #16]
 801c050:	1ac9      	subs	r1, r1, r3
 801c052:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801c056:	1a9b      	subs	r3, r3, r2
 801c058:	ec5b ab10 	vmov	sl, fp, d0
 801c05c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801c060:	2b00      	cmp	r3, #0
 801c062:	bfce      	itee	gt
 801c064:	462a      	movgt	r2, r5
 801c066:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c06a:	465a      	movle	r2, fp
 801c06c:	462f      	mov	r7, r5
 801c06e:	46d9      	mov	r9, fp
 801c070:	bfcc      	ite	gt
 801c072:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801c076:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801c07a:	464b      	mov	r3, r9
 801c07c:	4652      	mov	r2, sl
 801c07e:	4620      	mov	r0, r4
 801c080:	4639      	mov	r1, r7
 801c082:	f7e4 fbfb 	bl	800087c <__aeabi_ddiv>
 801c086:	ec41 0b10 	vmov	d0, r0, r1
 801c08a:	b005      	add	sp, #20
 801c08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c090 <__copybits>:
 801c090:	3901      	subs	r1, #1
 801c092:	b570      	push	{r4, r5, r6, lr}
 801c094:	1149      	asrs	r1, r1, #5
 801c096:	6914      	ldr	r4, [r2, #16]
 801c098:	3101      	adds	r1, #1
 801c09a:	f102 0314 	add.w	r3, r2, #20
 801c09e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c0a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c0a6:	1f05      	subs	r5, r0, #4
 801c0a8:	42a3      	cmp	r3, r4
 801c0aa:	d30c      	bcc.n	801c0c6 <__copybits+0x36>
 801c0ac:	1aa3      	subs	r3, r4, r2
 801c0ae:	3b11      	subs	r3, #17
 801c0b0:	f023 0303 	bic.w	r3, r3, #3
 801c0b4:	3211      	adds	r2, #17
 801c0b6:	42a2      	cmp	r2, r4
 801c0b8:	bf88      	it	hi
 801c0ba:	2300      	movhi	r3, #0
 801c0bc:	4418      	add	r0, r3
 801c0be:	2300      	movs	r3, #0
 801c0c0:	4288      	cmp	r0, r1
 801c0c2:	d305      	bcc.n	801c0d0 <__copybits+0x40>
 801c0c4:	bd70      	pop	{r4, r5, r6, pc}
 801c0c6:	f853 6b04 	ldr.w	r6, [r3], #4
 801c0ca:	f845 6f04 	str.w	r6, [r5, #4]!
 801c0ce:	e7eb      	b.n	801c0a8 <__copybits+0x18>
 801c0d0:	f840 3b04 	str.w	r3, [r0], #4
 801c0d4:	e7f4      	b.n	801c0c0 <__copybits+0x30>

0801c0d6 <__any_on>:
 801c0d6:	f100 0214 	add.w	r2, r0, #20
 801c0da:	6900      	ldr	r0, [r0, #16]
 801c0dc:	114b      	asrs	r3, r1, #5
 801c0de:	4298      	cmp	r0, r3
 801c0e0:	b510      	push	{r4, lr}
 801c0e2:	db11      	blt.n	801c108 <__any_on+0x32>
 801c0e4:	dd0a      	ble.n	801c0fc <__any_on+0x26>
 801c0e6:	f011 011f 	ands.w	r1, r1, #31
 801c0ea:	d007      	beq.n	801c0fc <__any_on+0x26>
 801c0ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c0f0:	fa24 f001 	lsr.w	r0, r4, r1
 801c0f4:	fa00 f101 	lsl.w	r1, r0, r1
 801c0f8:	428c      	cmp	r4, r1
 801c0fa:	d10b      	bne.n	801c114 <__any_on+0x3e>
 801c0fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c100:	4293      	cmp	r3, r2
 801c102:	d803      	bhi.n	801c10c <__any_on+0x36>
 801c104:	2000      	movs	r0, #0
 801c106:	bd10      	pop	{r4, pc}
 801c108:	4603      	mov	r3, r0
 801c10a:	e7f7      	b.n	801c0fc <__any_on+0x26>
 801c10c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c110:	2900      	cmp	r1, #0
 801c112:	d0f5      	beq.n	801c100 <__any_on+0x2a>
 801c114:	2001      	movs	r0, #1
 801c116:	e7f6      	b.n	801c106 <__any_on+0x30>

0801c118 <_malloc_usable_size_r>:
 801c118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c11c:	1f18      	subs	r0, r3, #4
 801c11e:	2b00      	cmp	r3, #0
 801c120:	bfbc      	itt	lt
 801c122:	580b      	ldrlt	r3, [r1, r0]
 801c124:	18c0      	addlt	r0, r0, r3
 801c126:	4770      	bx	lr

0801c128 <sulp>:
 801c128:	b570      	push	{r4, r5, r6, lr}
 801c12a:	4604      	mov	r4, r0
 801c12c:	460d      	mov	r5, r1
 801c12e:	ec45 4b10 	vmov	d0, r4, r5
 801c132:	4616      	mov	r6, r2
 801c134:	f7ff feb2 	bl	801be9c <__ulp>
 801c138:	ec51 0b10 	vmov	r0, r1, d0
 801c13c:	b17e      	cbz	r6, 801c15e <sulp+0x36>
 801c13e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c142:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801c146:	2b00      	cmp	r3, #0
 801c148:	dd09      	ble.n	801c15e <sulp+0x36>
 801c14a:	051b      	lsls	r3, r3, #20
 801c14c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801c150:	2400      	movs	r4, #0
 801c152:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801c156:	4622      	mov	r2, r4
 801c158:	462b      	mov	r3, r5
 801c15a:	f7e4 fa65 	bl	8000628 <__aeabi_dmul>
 801c15e:	ec41 0b10 	vmov	d0, r0, r1
 801c162:	bd70      	pop	{r4, r5, r6, pc}
 801c164:	0000      	movs	r0, r0
	...

0801c168 <_strtod_l>:
 801c168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c16c:	b09f      	sub	sp, #124	@ 0x7c
 801c16e:	460c      	mov	r4, r1
 801c170:	9217      	str	r2, [sp, #92]	@ 0x5c
 801c172:	2200      	movs	r2, #0
 801c174:	921a      	str	r2, [sp, #104]	@ 0x68
 801c176:	9005      	str	r0, [sp, #20]
 801c178:	f04f 0a00 	mov.w	sl, #0
 801c17c:	f04f 0b00 	mov.w	fp, #0
 801c180:	460a      	mov	r2, r1
 801c182:	9219      	str	r2, [sp, #100]	@ 0x64
 801c184:	7811      	ldrb	r1, [r2, #0]
 801c186:	292b      	cmp	r1, #43	@ 0x2b
 801c188:	d04a      	beq.n	801c220 <_strtod_l+0xb8>
 801c18a:	d838      	bhi.n	801c1fe <_strtod_l+0x96>
 801c18c:	290d      	cmp	r1, #13
 801c18e:	d832      	bhi.n	801c1f6 <_strtod_l+0x8e>
 801c190:	2908      	cmp	r1, #8
 801c192:	d832      	bhi.n	801c1fa <_strtod_l+0x92>
 801c194:	2900      	cmp	r1, #0
 801c196:	d03b      	beq.n	801c210 <_strtod_l+0xa8>
 801c198:	2200      	movs	r2, #0
 801c19a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c19c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801c19e:	782a      	ldrb	r2, [r5, #0]
 801c1a0:	2a30      	cmp	r2, #48	@ 0x30
 801c1a2:	f040 80b3 	bne.w	801c30c <_strtod_l+0x1a4>
 801c1a6:	786a      	ldrb	r2, [r5, #1]
 801c1a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801c1ac:	2a58      	cmp	r2, #88	@ 0x58
 801c1ae:	d16e      	bne.n	801c28e <_strtod_l+0x126>
 801c1b0:	9302      	str	r3, [sp, #8]
 801c1b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c1b4:	9301      	str	r3, [sp, #4]
 801c1b6:	ab1a      	add	r3, sp, #104	@ 0x68
 801c1b8:	9300      	str	r3, [sp, #0]
 801c1ba:	4a8e      	ldr	r2, [pc, #568]	@ (801c3f4 <_strtod_l+0x28c>)
 801c1bc:	9805      	ldr	r0, [sp, #20]
 801c1be:	ab1b      	add	r3, sp, #108	@ 0x6c
 801c1c0:	a919      	add	r1, sp, #100	@ 0x64
 801c1c2:	f001 fa8b 	bl	801d6dc <__gethex>
 801c1c6:	f010 060f 	ands.w	r6, r0, #15
 801c1ca:	4604      	mov	r4, r0
 801c1cc:	d005      	beq.n	801c1da <_strtod_l+0x72>
 801c1ce:	2e06      	cmp	r6, #6
 801c1d0:	d128      	bne.n	801c224 <_strtod_l+0xbc>
 801c1d2:	3501      	adds	r5, #1
 801c1d4:	2300      	movs	r3, #0
 801c1d6:	9519      	str	r5, [sp, #100]	@ 0x64
 801c1d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c1da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	f040 858e 	bne.w	801ccfe <_strtod_l+0xb96>
 801c1e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c1e4:	b1cb      	cbz	r3, 801c21a <_strtod_l+0xb2>
 801c1e6:	4652      	mov	r2, sl
 801c1e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801c1ec:	ec43 2b10 	vmov	d0, r2, r3
 801c1f0:	b01f      	add	sp, #124	@ 0x7c
 801c1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1f6:	2920      	cmp	r1, #32
 801c1f8:	d1ce      	bne.n	801c198 <_strtod_l+0x30>
 801c1fa:	3201      	adds	r2, #1
 801c1fc:	e7c1      	b.n	801c182 <_strtod_l+0x1a>
 801c1fe:	292d      	cmp	r1, #45	@ 0x2d
 801c200:	d1ca      	bne.n	801c198 <_strtod_l+0x30>
 801c202:	2101      	movs	r1, #1
 801c204:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c206:	1c51      	adds	r1, r2, #1
 801c208:	9119      	str	r1, [sp, #100]	@ 0x64
 801c20a:	7852      	ldrb	r2, [r2, #1]
 801c20c:	2a00      	cmp	r2, #0
 801c20e:	d1c5      	bne.n	801c19c <_strtod_l+0x34>
 801c210:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c212:	9419      	str	r4, [sp, #100]	@ 0x64
 801c214:	2b00      	cmp	r3, #0
 801c216:	f040 8570 	bne.w	801ccfa <_strtod_l+0xb92>
 801c21a:	4652      	mov	r2, sl
 801c21c:	465b      	mov	r3, fp
 801c21e:	e7e5      	b.n	801c1ec <_strtod_l+0x84>
 801c220:	2100      	movs	r1, #0
 801c222:	e7ef      	b.n	801c204 <_strtod_l+0x9c>
 801c224:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c226:	b13a      	cbz	r2, 801c238 <_strtod_l+0xd0>
 801c228:	2135      	movs	r1, #53	@ 0x35
 801c22a:	a81c      	add	r0, sp, #112	@ 0x70
 801c22c:	f7ff ff30 	bl	801c090 <__copybits>
 801c230:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c232:	9805      	ldr	r0, [sp, #20]
 801c234:	f7ff fafe 	bl	801b834 <_Bfree>
 801c238:	3e01      	subs	r6, #1
 801c23a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c23c:	2e04      	cmp	r6, #4
 801c23e:	d806      	bhi.n	801c24e <_strtod_l+0xe6>
 801c240:	e8df f006 	tbb	[pc, r6]
 801c244:	201d0314 	.word	0x201d0314
 801c248:	14          	.byte	0x14
 801c249:	00          	.byte	0x00
 801c24a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801c24e:	05e1      	lsls	r1, r4, #23
 801c250:	bf48      	it	mi
 801c252:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801c256:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c25a:	0d1b      	lsrs	r3, r3, #20
 801c25c:	051b      	lsls	r3, r3, #20
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d1bb      	bne.n	801c1da <_strtod_l+0x72>
 801c262:	f7fe fb9d 	bl	801a9a0 <__errno>
 801c266:	2322      	movs	r3, #34	@ 0x22
 801c268:	6003      	str	r3, [r0, #0]
 801c26a:	e7b6      	b.n	801c1da <_strtod_l+0x72>
 801c26c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801c270:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801c274:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801c278:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c27c:	e7e7      	b.n	801c24e <_strtod_l+0xe6>
 801c27e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801c3fc <_strtod_l+0x294>
 801c282:	e7e4      	b.n	801c24e <_strtod_l+0xe6>
 801c284:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801c288:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801c28c:	e7df      	b.n	801c24e <_strtod_l+0xe6>
 801c28e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c290:	1c5a      	adds	r2, r3, #1
 801c292:	9219      	str	r2, [sp, #100]	@ 0x64
 801c294:	785b      	ldrb	r3, [r3, #1]
 801c296:	2b30      	cmp	r3, #48	@ 0x30
 801c298:	d0f9      	beq.n	801c28e <_strtod_l+0x126>
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	d09d      	beq.n	801c1da <_strtod_l+0x72>
 801c29e:	2301      	movs	r3, #1
 801c2a0:	9309      	str	r3, [sp, #36]	@ 0x24
 801c2a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c2a4:	930c      	str	r3, [sp, #48]	@ 0x30
 801c2a6:	2300      	movs	r3, #0
 801c2a8:	9308      	str	r3, [sp, #32]
 801c2aa:	930a      	str	r3, [sp, #40]	@ 0x28
 801c2ac:	461f      	mov	r7, r3
 801c2ae:	220a      	movs	r2, #10
 801c2b0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c2b2:	7805      	ldrb	r5, [r0, #0]
 801c2b4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801c2b8:	b2d9      	uxtb	r1, r3
 801c2ba:	2909      	cmp	r1, #9
 801c2bc:	d928      	bls.n	801c310 <_strtod_l+0x1a8>
 801c2be:	494e      	ldr	r1, [pc, #312]	@ (801c3f8 <_strtod_l+0x290>)
 801c2c0:	2201      	movs	r2, #1
 801c2c2:	f7fe fa94 	bl	801a7ee <strncmp>
 801c2c6:	2800      	cmp	r0, #0
 801c2c8:	d032      	beq.n	801c330 <_strtod_l+0x1c8>
 801c2ca:	2000      	movs	r0, #0
 801c2cc:	462a      	mov	r2, r5
 801c2ce:	4681      	mov	r9, r0
 801c2d0:	463d      	mov	r5, r7
 801c2d2:	4603      	mov	r3, r0
 801c2d4:	2a65      	cmp	r2, #101	@ 0x65
 801c2d6:	d001      	beq.n	801c2dc <_strtod_l+0x174>
 801c2d8:	2a45      	cmp	r2, #69	@ 0x45
 801c2da:	d114      	bne.n	801c306 <_strtod_l+0x19e>
 801c2dc:	b91d      	cbnz	r5, 801c2e6 <_strtod_l+0x17e>
 801c2de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c2e0:	4302      	orrs	r2, r0
 801c2e2:	d095      	beq.n	801c210 <_strtod_l+0xa8>
 801c2e4:	2500      	movs	r5, #0
 801c2e6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801c2e8:	1c62      	adds	r2, r4, #1
 801c2ea:	9219      	str	r2, [sp, #100]	@ 0x64
 801c2ec:	7862      	ldrb	r2, [r4, #1]
 801c2ee:	2a2b      	cmp	r2, #43	@ 0x2b
 801c2f0:	d077      	beq.n	801c3e2 <_strtod_l+0x27a>
 801c2f2:	2a2d      	cmp	r2, #45	@ 0x2d
 801c2f4:	d07b      	beq.n	801c3ee <_strtod_l+0x286>
 801c2f6:	f04f 0c00 	mov.w	ip, #0
 801c2fa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801c2fe:	2909      	cmp	r1, #9
 801c300:	f240 8082 	bls.w	801c408 <_strtod_l+0x2a0>
 801c304:	9419      	str	r4, [sp, #100]	@ 0x64
 801c306:	f04f 0800 	mov.w	r8, #0
 801c30a:	e0a2      	b.n	801c452 <_strtod_l+0x2ea>
 801c30c:	2300      	movs	r3, #0
 801c30e:	e7c7      	b.n	801c2a0 <_strtod_l+0x138>
 801c310:	2f08      	cmp	r7, #8
 801c312:	bfd5      	itete	le
 801c314:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801c316:	9908      	ldrgt	r1, [sp, #32]
 801c318:	fb02 3301 	mlale	r3, r2, r1, r3
 801c31c:	fb02 3301 	mlagt	r3, r2, r1, r3
 801c320:	f100 0001 	add.w	r0, r0, #1
 801c324:	bfd4      	ite	le
 801c326:	930a      	strle	r3, [sp, #40]	@ 0x28
 801c328:	9308      	strgt	r3, [sp, #32]
 801c32a:	3701      	adds	r7, #1
 801c32c:	9019      	str	r0, [sp, #100]	@ 0x64
 801c32e:	e7bf      	b.n	801c2b0 <_strtod_l+0x148>
 801c330:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c332:	1c5a      	adds	r2, r3, #1
 801c334:	9219      	str	r2, [sp, #100]	@ 0x64
 801c336:	785a      	ldrb	r2, [r3, #1]
 801c338:	b37f      	cbz	r7, 801c39a <_strtod_l+0x232>
 801c33a:	4681      	mov	r9, r0
 801c33c:	463d      	mov	r5, r7
 801c33e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801c342:	2b09      	cmp	r3, #9
 801c344:	d912      	bls.n	801c36c <_strtod_l+0x204>
 801c346:	2301      	movs	r3, #1
 801c348:	e7c4      	b.n	801c2d4 <_strtod_l+0x16c>
 801c34a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c34c:	1c5a      	adds	r2, r3, #1
 801c34e:	9219      	str	r2, [sp, #100]	@ 0x64
 801c350:	785a      	ldrb	r2, [r3, #1]
 801c352:	3001      	adds	r0, #1
 801c354:	2a30      	cmp	r2, #48	@ 0x30
 801c356:	d0f8      	beq.n	801c34a <_strtod_l+0x1e2>
 801c358:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801c35c:	2b08      	cmp	r3, #8
 801c35e:	f200 84d3 	bhi.w	801cd08 <_strtod_l+0xba0>
 801c362:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c364:	930c      	str	r3, [sp, #48]	@ 0x30
 801c366:	4681      	mov	r9, r0
 801c368:	2000      	movs	r0, #0
 801c36a:	4605      	mov	r5, r0
 801c36c:	3a30      	subs	r2, #48	@ 0x30
 801c36e:	f100 0301 	add.w	r3, r0, #1
 801c372:	d02a      	beq.n	801c3ca <_strtod_l+0x262>
 801c374:	4499      	add	r9, r3
 801c376:	eb00 0c05 	add.w	ip, r0, r5
 801c37a:	462b      	mov	r3, r5
 801c37c:	210a      	movs	r1, #10
 801c37e:	4563      	cmp	r3, ip
 801c380:	d10d      	bne.n	801c39e <_strtod_l+0x236>
 801c382:	1c69      	adds	r1, r5, #1
 801c384:	4401      	add	r1, r0
 801c386:	4428      	add	r0, r5
 801c388:	2808      	cmp	r0, #8
 801c38a:	dc16      	bgt.n	801c3ba <_strtod_l+0x252>
 801c38c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c38e:	230a      	movs	r3, #10
 801c390:	fb03 2300 	mla	r3, r3, r0, r2
 801c394:	930a      	str	r3, [sp, #40]	@ 0x28
 801c396:	2300      	movs	r3, #0
 801c398:	e018      	b.n	801c3cc <_strtod_l+0x264>
 801c39a:	4638      	mov	r0, r7
 801c39c:	e7da      	b.n	801c354 <_strtod_l+0x1ec>
 801c39e:	2b08      	cmp	r3, #8
 801c3a0:	f103 0301 	add.w	r3, r3, #1
 801c3a4:	dc03      	bgt.n	801c3ae <_strtod_l+0x246>
 801c3a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801c3a8:	434e      	muls	r6, r1
 801c3aa:	960a      	str	r6, [sp, #40]	@ 0x28
 801c3ac:	e7e7      	b.n	801c37e <_strtod_l+0x216>
 801c3ae:	2b10      	cmp	r3, #16
 801c3b0:	bfde      	ittt	le
 801c3b2:	9e08      	ldrle	r6, [sp, #32]
 801c3b4:	434e      	mulle	r6, r1
 801c3b6:	9608      	strle	r6, [sp, #32]
 801c3b8:	e7e1      	b.n	801c37e <_strtod_l+0x216>
 801c3ba:	280f      	cmp	r0, #15
 801c3bc:	dceb      	bgt.n	801c396 <_strtod_l+0x22e>
 801c3be:	9808      	ldr	r0, [sp, #32]
 801c3c0:	230a      	movs	r3, #10
 801c3c2:	fb03 2300 	mla	r3, r3, r0, r2
 801c3c6:	9308      	str	r3, [sp, #32]
 801c3c8:	e7e5      	b.n	801c396 <_strtod_l+0x22e>
 801c3ca:	4629      	mov	r1, r5
 801c3cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c3ce:	1c50      	adds	r0, r2, #1
 801c3d0:	9019      	str	r0, [sp, #100]	@ 0x64
 801c3d2:	7852      	ldrb	r2, [r2, #1]
 801c3d4:	4618      	mov	r0, r3
 801c3d6:	460d      	mov	r5, r1
 801c3d8:	e7b1      	b.n	801c33e <_strtod_l+0x1d6>
 801c3da:	f04f 0900 	mov.w	r9, #0
 801c3de:	2301      	movs	r3, #1
 801c3e0:	e77d      	b.n	801c2de <_strtod_l+0x176>
 801c3e2:	f04f 0c00 	mov.w	ip, #0
 801c3e6:	1ca2      	adds	r2, r4, #2
 801c3e8:	9219      	str	r2, [sp, #100]	@ 0x64
 801c3ea:	78a2      	ldrb	r2, [r4, #2]
 801c3ec:	e785      	b.n	801c2fa <_strtod_l+0x192>
 801c3ee:	f04f 0c01 	mov.w	ip, #1
 801c3f2:	e7f8      	b.n	801c3e6 <_strtod_l+0x27e>
 801c3f4:	0801ec08 	.word	0x0801ec08
 801c3f8:	0801ebf0 	.word	0x0801ebf0
 801c3fc:	7ff00000 	.word	0x7ff00000
 801c400:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c402:	1c51      	adds	r1, r2, #1
 801c404:	9119      	str	r1, [sp, #100]	@ 0x64
 801c406:	7852      	ldrb	r2, [r2, #1]
 801c408:	2a30      	cmp	r2, #48	@ 0x30
 801c40a:	d0f9      	beq.n	801c400 <_strtod_l+0x298>
 801c40c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801c410:	2908      	cmp	r1, #8
 801c412:	f63f af78 	bhi.w	801c306 <_strtod_l+0x19e>
 801c416:	3a30      	subs	r2, #48	@ 0x30
 801c418:	920e      	str	r2, [sp, #56]	@ 0x38
 801c41a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c41c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801c41e:	f04f 080a 	mov.w	r8, #10
 801c422:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c424:	1c56      	adds	r6, r2, #1
 801c426:	9619      	str	r6, [sp, #100]	@ 0x64
 801c428:	7852      	ldrb	r2, [r2, #1]
 801c42a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801c42e:	f1be 0f09 	cmp.w	lr, #9
 801c432:	d939      	bls.n	801c4a8 <_strtod_l+0x340>
 801c434:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c436:	1a76      	subs	r6, r6, r1
 801c438:	2e08      	cmp	r6, #8
 801c43a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801c43e:	dc03      	bgt.n	801c448 <_strtod_l+0x2e0>
 801c440:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c442:	4588      	cmp	r8, r1
 801c444:	bfa8      	it	ge
 801c446:	4688      	movge	r8, r1
 801c448:	f1bc 0f00 	cmp.w	ip, #0
 801c44c:	d001      	beq.n	801c452 <_strtod_l+0x2ea>
 801c44e:	f1c8 0800 	rsb	r8, r8, #0
 801c452:	2d00      	cmp	r5, #0
 801c454:	d14e      	bne.n	801c4f4 <_strtod_l+0x38c>
 801c456:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c458:	4308      	orrs	r0, r1
 801c45a:	f47f aebe 	bne.w	801c1da <_strtod_l+0x72>
 801c45e:	2b00      	cmp	r3, #0
 801c460:	f47f aed6 	bne.w	801c210 <_strtod_l+0xa8>
 801c464:	2a69      	cmp	r2, #105	@ 0x69
 801c466:	d028      	beq.n	801c4ba <_strtod_l+0x352>
 801c468:	dc25      	bgt.n	801c4b6 <_strtod_l+0x34e>
 801c46a:	2a49      	cmp	r2, #73	@ 0x49
 801c46c:	d025      	beq.n	801c4ba <_strtod_l+0x352>
 801c46e:	2a4e      	cmp	r2, #78	@ 0x4e
 801c470:	f47f aece 	bne.w	801c210 <_strtod_l+0xa8>
 801c474:	499b      	ldr	r1, [pc, #620]	@ (801c6e4 <_strtod_l+0x57c>)
 801c476:	a819      	add	r0, sp, #100	@ 0x64
 801c478:	f001 fb52 	bl	801db20 <__match>
 801c47c:	2800      	cmp	r0, #0
 801c47e:	f43f aec7 	beq.w	801c210 <_strtod_l+0xa8>
 801c482:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c484:	781b      	ldrb	r3, [r3, #0]
 801c486:	2b28      	cmp	r3, #40	@ 0x28
 801c488:	d12e      	bne.n	801c4e8 <_strtod_l+0x380>
 801c48a:	4997      	ldr	r1, [pc, #604]	@ (801c6e8 <_strtod_l+0x580>)
 801c48c:	aa1c      	add	r2, sp, #112	@ 0x70
 801c48e:	a819      	add	r0, sp, #100	@ 0x64
 801c490:	f001 fb5a 	bl	801db48 <__hexnan>
 801c494:	2805      	cmp	r0, #5
 801c496:	d127      	bne.n	801c4e8 <_strtod_l+0x380>
 801c498:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c49a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801c49e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801c4a2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801c4a6:	e698      	b.n	801c1da <_strtod_l+0x72>
 801c4a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c4aa:	fb08 2101 	mla	r1, r8, r1, r2
 801c4ae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801c4b2:	920e      	str	r2, [sp, #56]	@ 0x38
 801c4b4:	e7b5      	b.n	801c422 <_strtod_l+0x2ba>
 801c4b6:	2a6e      	cmp	r2, #110	@ 0x6e
 801c4b8:	e7da      	b.n	801c470 <_strtod_l+0x308>
 801c4ba:	498c      	ldr	r1, [pc, #560]	@ (801c6ec <_strtod_l+0x584>)
 801c4bc:	a819      	add	r0, sp, #100	@ 0x64
 801c4be:	f001 fb2f 	bl	801db20 <__match>
 801c4c2:	2800      	cmp	r0, #0
 801c4c4:	f43f aea4 	beq.w	801c210 <_strtod_l+0xa8>
 801c4c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c4ca:	4989      	ldr	r1, [pc, #548]	@ (801c6f0 <_strtod_l+0x588>)
 801c4cc:	3b01      	subs	r3, #1
 801c4ce:	a819      	add	r0, sp, #100	@ 0x64
 801c4d0:	9319      	str	r3, [sp, #100]	@ 0x64
 801c4d2:	f001 fb25 	bl	801db20 <__match>
 801c4d6:	b910      	cbnz	r0, 801c4de <_strtod_l+0x376>
 801c4d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c4da:	3301      	adds	r3, #1
 801c4dc:	9319      	str	r3, [sp, #100]	@ 0x64
 801c4de:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801c700 <_strtod_l+0x598>
 801c4e2:	f04f 0a00 	mov.w	sl, #0
 801c4e6:	e678      	b.n	801c1da <_strtod_l+0x72>
 801c4e8:	4882      	ldr	r0, [pc, #520]	@ (801c6f4 <_strtod_l+0x58c>)
 801c4ea:	f001 f881 	bl	801d5f0 <nan>
 801c4ee:	ec5b ab10 	vmov	sl, fp, d0
 801c4f2:	e672      	b.n	801c1da <_strtod_l+0x72>
 801c4f4:	eba8 0309 	sub.w	r3, r8, r9
 801c4f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c4fa:	9309      	str	r3, [sp, #36]	@ 0x24
 801c4fc:	2f00      	cmp	r7, #0
 801c4fe:	bf08      	it	eq
 801c500:	462f      	moveq	r7, r5
 801c502:	2d10      	cmp	r5, #16
 801c504:	462c      	mov	r4, r5
 801c506:	bfa8      	it	ge
 801c508:	2410      	movge	r4, #16
 801c50a:	f7e4 f813 	bl	8000534 <__aeabi_ui2d>
 801c50e:	2d09      	cmp	r5, #9
 801c510:	4682      	mov	sl, r0
 801c512:	468b      	mov	fp, r1
 801c514:	dc13      	bgt.n	801c53e <_strtod_l+0x3d6>
 801c516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c518:	2b00      	cmp	r3, #0
 801c51a:	f43f ae5e 	beq.w	801c1da <_strtod_l+0x72>
 801c51e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c520:	dd78      	ble.n	801c614 <_strtod_l+0x4ac>
 801c522:	2b16      	cmp	r3, #22
 801c524:	dc5f      	bgt.n	801c5e6 <_strtod_l+0x47e>
 801c526:	4974      	ldr	r1, [pc, #464]	@ (801c6f8 <_strtod_l+0x590>)
 801c528:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c52c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c530:	4652      	mov	r2, sl
 801c532:	465b      	mov	r3, fp
 801c534:	f7e4 f878 	bl	8000628 <__aeabi_dmul>
 801c538:	4682      	mov	sl, r0
 801c53a:	468b      	mov	fp, r1
 801c53c:	e64d      	b.n	801c1da <_strtod_l+0x72>
 801c53e:	4b6e      	ldr	r3, [pc, #440]	@ (801c6f8 <_strtod_l+0x590>)
 801c540:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c544:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801c548:	f7e4 f86e 	bl	8000628 <__aeabi_dmul>
 801c54c:	4682      	mov	sl, r0
 801c54e:	9808      	ldr	r0, [sp, #32]
 801c550:	468b      	mov	fp, r1
 801c552:	f7e3 ffef 	bl	8000534 <__aeabi_ui2d>
 801c556:	4602      	mov	r2, r0
 801c558:	460b      	mov	r3, r1
 801c55a:	4650      	mov	r0, sl
 801c55c:	4659      	mov	r1, fp
 801c55e:	f7e3 fead 	bl	80002bc <__adddf3>
 801c562:	2d0f      	cmp	r5, #15
 801c564:	4682      	mov	sl, r0
 801c566:	468b      	mov	fp, r1
 801c568:	ddd5      	ble.n	801c516 <_strtod_l+0x3ae>
 801c56a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c56c:	1b2c      	subs	r4, r5, r4
 801c56e:	441c      	add	r4, r3
 801c570:	2c00      	cmp	r4, #0
 801c572:	f340 8096 	ble.w	801c6a2 <_strtod_l+0x53a>
 801c576:	f014 030f 	ands.w	r3, r4, #15
 801c57a:	d00a      	beq.n	801c592 <_strtod_l+0x42a>
 801c57c:	495e      	ldr	r1, [pc, #376]	@ (801c6f8 <_strtod_l+0x590>)
 801c57e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c582:	4652      	mov	r2, sl
 801c584:	465b      	mov	r3, fp
 801c586:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c58a:	f7e4 f84d 	bl	8000628 <__aeabi_dmul>
 801c58e:	4682      	mov	sl, r0
 801c590:	468b      	mov	fp, r1
 801c592:	f034 040f 	bics.w	r4, r4, #15
 801c596:	d073      	beq.n	801c680 <_strtod_l+0x518>
 801c598:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801c59c:	dd48      	ble.n	801c630 <_strtod_l+0x4c8>
 801c59e:	2400      	movs	r4, #0
 801c5a0:	46a0      	mov	r8, r4
 801c5a2:	940a      	str	r4, [sp, #40]	@ 0x28
 801c5a4:	46a1      	mov	r9, r4
 801c5a6:	9a05      	ldr	r2, [sp, #20]
 801c5a8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801c700 <_strtod_l+0x598>
 801c5ac:	2322      	movs	r3, #34	@ 0x22
 801c5ae:	6013      	str	r3, [r2, #0]
 801c5b0:	f04f 0a00 	mov.w	sl, #0
 801c5b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	f43f ae0f 	beq.w	801c1da <_strtod_l+0x72>
 801c5bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c5be:	9805      	ldr	r0, [sp, #20]
 801c5c0:	f7ff f938 	bl	801b834 <_Bfree>
 801c5c4:	9805      	ldr	r0, [sp, #20]
 801c5c6:	4649      	mov	r1, r9
 801c5c8:	f7ff f934 	bl	801b834 <_Bfree>
 801c5cc:	9805      	ldr	r0, [sp, #20]
 801c5ce:	4641      	mov	r1, r8
 801c5d0:	f7ff f930 	bl	801b834 <_Bfree>
 801c5d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c5d6:	9805      	ldr	r0, [sp, #20]
 801c5d8:	f7ff f92c 	bl	801b834 <_Bfree>
 801c5dc:	9805      	ldr	r0, [sp, #20]
 801c5de:	4621      	mov	r1, r4
 801c5e0:	f7ff f928 	bl	801b834 <_Bfree>
 801c5e4:	e5f9      	b.n	801c1da <_strtod_l+0x72>
 801c5e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c5e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801c5ec:	4293      	cmp	r3, r2
 801c5ee:	dbbc      	blt.n	801c56a <_strtod_l+0x402>
 801c5f0:	4c41      	ldr	r4, [pc, #260]	@ (801c6f8 <_strtod_l+0x590>)
 801c5f2:	f1c5 050f 	rsb	r5, r5, #15
 801c5f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801c5fa:	4652      	mov	r2, sl
 801c5fc:	465b      	mov	r3, fp
 801c5fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c602:	f7e4 f811 	bl	8000628 <__aeabi_dmul>
 801c606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c608:	1b5d      	subs	r5, r3, r5
 801c60a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801c60e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c612:	e78f      	b.n	801c534 <_strtod_l+0x3cc>
 801c614:	3316      	adds	r3, #22
 801c616:	dba8      	blt.n	801c56a <_strtod_l+0x402>
 801c618:	4b37      	ldr	r3, [pc, #220]	@ (801c6f8 <_strtod_l+0x590>)
 801c61a:	eba9 0808 	sub.w	r8, r9, r8
 801c61e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801c622:	e9d8 2300 	ldrd	r2, r3, [r8]
 801c626:	4650      	mov	r0, sl
 801c628:	4659      	mov	r1, fp
 801c62a:	f7e4 f927 	bl	800087c <__aeabi_ddiv>
 801c62e:	e783      	b.n	801c538 <_strtod_l+0x3d0>
 801c630:	4b32      	ldr	r3, [pc, #200]	@ (801c6fc <_strtod_l+0x594>)
 801c632:	9308      	str	r3, [sp, #32]
 801c634:	2300      	movs	r3, #0
 801c636:	1124      	asrs	r4, r4, #4
 801c638:	4650      	mov	r0, sl
 801c63a:	4659      	mov	r1, fp
 801c63c:	461e      	mov	r6, r3
 801c63e:	2c01      	cmp	r4, #1
 801c640:	dc21      	bgt.n	801c686 <_strtod_l+0x51e>
 801c642:	b10b      	cbz	r3, 801c648 <_strtod_l+0x4e0>
 801c644:	4682      	mov	sl, r0
 801c646:	468b      	mov	fp, r1
 801c648:	492c      	ldr	r1, [pc, #176]	@ (801c6fc <_strtod_l+0x594>)
 801c64a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801c64e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801c652:	4652      	mov	r2, sl
 801c654:	465b      	mov	r3, fp
 801c656:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c65a:	f7e3 ffe5 	bl	8000628 <__aeabi_dmul>
 801c65e:	4b28      	ldr	r3, [pc, #160]	@ (801c700 <_strtod_l+0x598>)
 801c660:	460a      	mov	r2, r1
 801c662:	400b      	ands	r3, r1
 801c664:	4927      	ldr	r1, [pc, #156]	@ (801c704 <_strtod_l+0x59c>)
 801c666:	428b      	cmp	r3, r1
 801c668:	4682      	mov	sl, r0
 801c66a:	d898      	bhi.n	801c59e <_strtod_l+0x436>
 801c66c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801c670:	428b      	cmp	r3, r1
 801c672:	bf86      	itte	hi
 801c674:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801c708 <_strtod_l+0x5a0>
 801c678:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 801c67c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801c680:	2300      	movs	r3, #0
 801c682:	9308      	str	r3, [sp, #32]
 801c684:	e07a      	b.n	801c77c <_strtod_l+0x614>
 801c686:	07e2      	lsls	r2, r4, #31
 801c688:	d505      	bpl.n	801c696 <_strtod_l+0x52e>
 801c68a:	9b08      	ldr	r3, [sp, #32]
 801c68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c690:	f7e3 ffca 	bl	8000628 <__aeabi_dmul>
 801c694:	2301      	movs	r3, #1
 801c696:	9a08      	ldr	r2, [sp, #32]
 801c698:	3208      	adds	r2, #8
 801c69a:	3601      	adds	r6, #1
 801c69c:	1064      	asrs	r4, r4, #1
 801c69e:	9208      	str	r2, [sp, #32]
 801c6a0:	e7cd      	b.n	801c63e <_strtod_l+0x4d6>
 801c6a2:	d0ed      	beq.n	801c680 <_strtod_l+0x518>
 801c6a4:	4264      	negs	r4, r4
 801c6a6:	f014 020f 	ands.w	r2, r4, #15
 801c6aa:	d00a      	beq.n	801c6c2 <_strtod_l+0x55a>
 801c6ac:	4b12      	ldr	r3, [pc, #72]	@ (801c6f8 <_strtod_l+0x590>)
 801c6ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c6b2:	4650      	mov	r0, sl
 801c6b4:	4659      	mov	r1, fp
 801c6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6ba:	f7e4 f8df 	bl	800087c <__aeabi_ddiv>
 801c6be:	4682      	mov	sl, r0
 801c6c0:	468b      	mov	fp, r1
 801c6c2:	1124      	asrs	r4, r4, #4
 801c6c4:	d0dc      	beq.n	801c680 <_strtod_l+0x518>
 801c6c6:	2c1f      	cmp	r4, #31
 801c6c8:	dd20      	ble.n	801c70c <_strtod_l+0x5a4>
 801c6ca:	2400      	movs	r4, #0
 801c6cc:	46a0      	mov	r8, r4
 801c6ce:	940a      	str	r4, [sp, #40]	@ 0x28
 801c6d0:	46a1      	mov	r9, r4
 801c6d2:	9a05      	ldr	r2, [sp, #20]
 801c6d4:	2322      	movs	r3, #34	@ 0x22
 801c6d6:	f04f 0a00 	mov.w	sl, #0
 801c6da:	f04f 0b00 	mov.w	fp, #0
 801c6de:	6013      	str	r3, [r2, #0]
 801c6e0:	e768      	b.n	801c5b4 <_strtod_l+0x44c>
 801c6e2:	bf00      	nop
 801c6e4:	0801e9bd 	.word	0x0801e9bd
 801c6e8:	0801ebf4 	.word	0x0801ebf4
 801c6ec:	0801e9b5 	.word	0x0801e9b5
 801c6f0:	0801ea28 	.word	0x0801ea28
 801c6f4:	0801ea24 	.word	0x0801ea24
 801c6f8:	0801eb28 	.word	0x0801eb28
 801c6fc:	0801eb00 	.word	0x0801eb00
 801c700:	7ff00000 	.word	0x7ff00000
 801c704:	7ca00000 	.word	0x7ca00000
 801c708:	7fefffff 	.word	0x7fefffff
 801c70c:	f014 0310 	ands.w	r3, r4, #16
 801c710:	bf18      	it	ne
 801c712:	236a      	movne	r3, #106	@ 0x6a
 801c714:	4ea9      	ldr	r6, [pc, #676]	@ (801c9bc <_strtod_l+0x854>)
 801c716:	9308      	str	r3, [sp, #32]
 801c718:	4650      	mov	r0, sl
 801c71a:	4659      	mov	r1, fp
 801c71c:	2300      	movs	r3, #0
 801c71e:	07e2      	lsls	r2, r4, #31
 801c720:	d504      	bpl.n	801c72c <_strtod_l+0x5c4>
 801c722:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c726:	f7e3 ff7f 	bl	8000628 <__aeabi_dmul>
 801c72a:	2301      	movs	r3, #1
 801c72c:	1064      	asrs	r4, r4, #1
 801c72e:	f106 0608 	add.w	r6, r6, #8
 801c732:	d1f4      	bne.n	801c71e <_strtod_l+0x5b6>
 801c734:	b10b      	cbz	r3, 801c73a <_strtod_l+0x5d2>
 801c736:	4682      	mov	sl, r0
 801c738:	468b      	mov	fp, r1
 801c73a:	9b08      	ldr	r3, [sp, #32]
 801c73c:	b1b3      	cbz	r3, 801c76c <_strtod_l+0x604>
 801c73e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801c742:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801c746:	2b00      	cmp	r3, #0
 801c748:	4659      	mov	r1, fp
 801c74a:	dd0f      	ble.n	801c76c <_strtod_l+0x604>
 801c74c:	2b1f      	cmp	r3, #31
 801c74e:	dd55      	ble.n	801c7fc <_strtod_l+0x694>
 801c750:	2b34      	cmp	r3, #52	@ 0x34
 801c752:	bfde      	ittt	le
 801c754:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 801c758:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801c75c:	4093      	lslle	r3, r2
 801c75e:	f04f 0a00 	mov.w	sl, #0
 801c762:	bfcc      	ite	gt
 801c764:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801c768:	ea03 0b01 	andle.w	fp, r3, r1
 801c76c:	2200      	movs	r2, #0
 801c76e:	2300      	movs	r3, #0
 801c770:	4650      	mov	r0, sl
 801c772:	4659      	mov	r1, fp
 801c774:	f7e4 f9c0 	bl	8000af8 <__aeabi_dcmpeq>
 801c778:	2800      	cmp	r0, #0
 801c77a:	d1a6      	bne.n	801c6ca <_strtod_l+0x562>
 801c77c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c77e:	9300      	str	r3, [sp, #0]
 801c780:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c782:	9805      	ldr	r0, [sp, #20]
 801c784:	462b      	mov	r3, r5
 801c786:	463a      	mov	r2, r7
 801c788:	f7ff f8bc 	bl	801b904 <__s2b>
 801c78c:	900a      	str	r0, [sp, #40]	@ 0x28
 801c78e:	2800      	cmp	r0, #0
 801c790:	f43f af05 	beq.w	801c59e <_strtod_l+0x436>
 801c794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c796:	2a00      	cmp	r2, #0
 801c798:	eba9 0308 	sub.w	r3, r9, r8
 801c79c:	bfa8      	it	ge
 801c79e:	2300      	movge	r3, #0
 801c7a0:	9312      	str	r3, [sp, #72]	@ 0x48
 801c7a2:	2400      	movs	r4, #0
 801c7a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801c7a8:	9316      	str	r3, [sp, #88]	@ 0x58
 801c7aa:	46a0      	mov	r8, r4
 801c7ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c7ae:	9805      	ldr	r0, [sp, #20]
 801c7b0:	6859      	ldr	r1, [r3, #4]
 801c7b2:	f7fe ffff 	bl	801b7b4 <_Balloc>
 801c7b6:	4681      	mov	r9, r0
 801c7b8:	2800      	cmp	r0, #0
 801c7ba:	f43f aef4 	beq.w	801c5a6 <_strtod_l+0x43e>
 801c7be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c7c0:	691a      	ldr	r2, [r3, #16]
 801c7c2:	3202      	adds	r2, #2
 801c7c4:	f103 010c 	add.w	r1, r3, #12
 801c7c8:	0092      	lsls	r2, r2, #2
 801c7ca:	300c      	adds	r0, #12
 801c7cc:	f7fe f91d 	bl	801aa0a <memcpy>
 801c7d0:	ec4b ab10 	vmov	d0, sl, fp
 801c7d4:	9805      	ldr	r0, [sp, #20]
 801c7d6:	aa1c      	add	r2, sp, #112	@ 0x70
 801c7d8:	a91b      	add	r1, sp, #108	@ 0x6c
 801c7da:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801c7de:	f7ff fbcd 	bl	801bf7c <__d2b>
 801c7e2:	901a      	str	r0, [sp, #104]	@ 0x68
 801c7e4:	2800      	cmp	r0, #0
 801c7e6:	f43f aede 	beq.w	801c5a6 <_strtod_l+0x43e>
 801c7ea:	9805      	ldr	r0, [sp, #20]
 801c7ec:	2101      	movs	r1, #1
 801c7ee:	f7ff f91f 	bl	801ba30 <__i2b>
 801c7f2:	4680      	mov	r8, r0
 801c7f4:	b948      	cbnz	r0, 801c80a <_strtod_l+0x6a2>
 801c7f6:	f04f 0800 	mov.w	r8, #0
 801c7fa:	e6d4      	b.n	801c5a6 <_strtod_l+0x43e>
 801c7fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c800:	fa02 f303 	lsl.w	r3, r2, r3
 801c804:	ea03 0a0a 	and.w	sl, r3, sl
 801c808:	e7b0      	b.n	801c76c <_strtod_l+0x604>
 801c80a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801c80c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801c80e:	2d00      	cmp	r5, #0
 801c810:	bfab      	itete	ge
 801c812:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801c814:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801c816:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801c818:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801c81a:	bfac      	ite	ge
 801c81c:	18ef      	addge	r7, r5, r3
 801c81e:	1b5e      	sublt	r6, r3, r5
 801c820:	9b08      	ldr	r3, [sp, #32]
 801c822:	1aed      	subs	r5, r5, r3
 801c824:	4415      	add	r5, r2
 801c826:	4b66      	ldr	r3, [pc, #408]	@ (801c9c0 <_strtod_l+0x858>)
 801c828:	3d01      	subs	r5, #1
 801c82a:	429d      	cmp	r5, r3
 801c82c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801c830:	da50      	bge.n	801c8d4 <_strtod_l+0x76c>
 801c832:	1b5b      	subs	r3, r3, r5
 801c834:	2b1f      	cmp	r3, #31
 801c836:	eba2 0203 	sub.w	r2, r2, r3
 801c83a:	f04f 0101 	mov.w	r1, #1
 801c83e:	dc3d      	bgt.n	801c8bc <_strtod_l+0x754>
 801c840:	fa01 f303 	lsl.w	r3, r1, r3
 801c844:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c846:	2300      	movs	r3, #0
 801c848:	9310      	str	r3, [sp, #64]	@ 0x40
 801c84a:	18bd      	adds	r5, r7, r2
 801c84c:	9b08      	ldr	r3, [sp, #32]
 801c84e:	42af      	cmp	r7, r5
 801c850:	4416      	add	r6, r2
 801c852:	441e      	add	r6, r3
 801c854:	463b      	mov	r3, r7
 801c856:	bfa8      	it	ge
 801c858:	462b      	movge	r3, r5
 801c85a:	42b3      	cmp	r3, r6
 801c85c:	bfa8      	it	ge
 801c85e:	4633      	movge	r3, r6
 801c860:	2b00      	cmp	r3, #0
 801c862:	bfc2      	ittt	gt
 801c864:	1aed      	subgt	r5, r5, r3
 801c866:	1af6      	subgt	r6, r6, r3
 801c868:	1aff      	subgt	r7, r7, r3
 801c86a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	dd16      	ble.n	801c89e <_strtod_l+0x736>
 801c870:	4641      	mov	r1, r8
 801c872:	9805      	ldr	r0, [sp, #20]
 801c874:	461a      	mov	r2, r3
 801c876:	f7ff f99b 	bl	801bbb0 <__pow5mult>
 801c87a:	4680      	mov	r8, r0
 801c87c:	2800      	cmp	r0, #0
 801c87e:	d0ba      	beq.n	801c7f6 <_strtod_l+0x68e>
 801c880:	4601      	mov	r1, r0
 801c882:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c884:	9805      	ldr	r0, [sp, #20]
 801c886:	f7ff f8e9 	bl	801ba5c <__multiply>
 801c88a:	900e      	str	r0, [sp, #56]	@ 0x38
 801c88c:	2800      	cmp	r0, #0
 801c88e:	f43f ae8a 	beq.w	801c5a6 <_strtod_l+0x43e>
 801c892:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c894:	9805      	ldr	r0, [sp, #20]
 801c896:	f7fe ffcd 	bl	801b834 <_Bfree>
 801c89a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c89c:	931a      	str	r3, [sp, #104]	@ 0x68
 801c89e:	2d00      	cmp	r5, #0
 801c8a0:	dc1d      	bgt.n	801c8de <_strtod_l+0x776>
 801c8a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c8a4:	2b00      	cmp	r3, #0
 801c8a6:	dd23      	ble.n	801c8f0 <_strtod_l+0x788>
 801c8a8:	4649      	mov	r1, r9
 801c8aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c8ac:	9805      	ldr	r0, [sp, #20]
 801c8ae:	f7ff f97f 	bl	801bbb0 <__pow5mult>
 801c8b2:	4681      	mov	r9, r0
 801c8b4:	b9e0      	cbnz	r0, 801c8f0 <_strtod_l+0x788>
 801c8b6:	f04f 0900 	mov.w	r9, #0
 801c8ba:	e674      	b.n	801c5a6 <_strtod_l+0x43e>
 801c8bc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801c8c0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801c8c4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801c8c8:	35e2      	adds	r5, #226	@ 0xe2
 801c8ca:	fa01 f305 	lsl.w	r3, r1, r5
 801c8ce:	9310      	str	r3, [sp, #64]	@ 0x40
 801c8d0:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c8d2:	e7ba      	b.n	801c84a <_strtod_l+0x6e2>
 801c8d4:	2300      	movs	r3, #0
 801c8d6:	9310      	str	r3, [sp, #64]	@ 0x40
 801c8d8:	2301      	movs	r3, #1
 801c8da:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c8dc:	e7b5      	b.n	801c84a <_strtod_l+0x6e2>
 801c8de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c8e0:	9805      	ldr	r0, [sp, #20]
 801c8e2:	462a      	mov	r2, r5
 801c8e4:	f7ff f9be 	bl	801bc64 <__lshift>
 801c8e8:	901a      	str	r0, [sp, #104]	@ 0x68
 801c8ea:	2800      	cmp	r0, #0
 801c8ec:	d1d9      	bne.n	801c8a2 <_strtod_l+0x73a>
 801c8ee:	e65a      	b.n	801c5a6 <_strtod_l+0x43e>
 801c8f0:	2e00      	cmp	r6, #0
 801c8f2:	dd07      	ble.n	801c904 <_strtod_l+0x79c>
 801c8f4:	4649      	mov	r1, r9
 801c8f6:	9805      	ldr	r0, [sp, #20]
 801c8f8:	4632      	mov	r2, r6
 801c8fa:	f7ff f9b3 	bl	801bc64 <__lshift>
 801c8fe:	4681      	mov	r9, r0
 801c900:	2800      	cmp	r0, #0
 801c902:	d0d8      	beq.n	801c8b6 <_strtod_l+0x74e>
 801c904:	2f00      	cmp	r7, #0
 801c906:	dd08      	ble.n	801c91a <_strtod_l+0x7b2>
 801c908:	4641      	mov	r1, r8
 801c90a:	9805      	ldr	r0, [sp, #20]
 801c90c:	463a      	mov	r2, r7
 801c90e:	f7ff f9a9 	bl	801bc64 <__lshift>
 801c912:	4680      	mov	r8, r0
 801c914:	2800      	cmp	r0, #0
 801c916:	f43f ae46 	beq.w	801c5a6 <_strtod_l+0x43e>
 801c91a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c91c:	9805      	ldr	r0, [sp, #20]
 801c91e:	464a      	mov	r2, r9
 801c920:	f7ff fa28 	bl	801bd74 <__mdiff>
 801c924:	4604      	mov	r4, r0
 801c926:	2800      	cmp	r0, #0
 801c928:	f43f ae3d 	beq.w	801c5a6 <_strtod_l+0x43e>
 801c92c:	68c3      	ldr	r3, [r0, #12]
 801c92e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c930:	2300      	movs	r3, #0
 801c932:	60c3      	str	r3, [r0, #12]
 801c934:	4641      	mov	r1, r8
 801c936:	f7ff fa01 	bl	801bd3c <__mcmp>
 801c93a:	2800      	cmp	r0, #0
 801c93c:	da46      	bge.n	801c9cc <_strtod_l+0x864>
 801c93e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c940:	ea53 030a 	orrs.w	r3, r3, sl
 801c944:	d16c      	bne.n	801ca20 <_strtod_l+0x8b8>
 801c946:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	d168      	bne.n	801ca20 <_strtod_l+0x8b8>
 801c94e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c952:	0d1b      	lsrs	r3, r3, #20
 801c954:	051b      	lsls	r3, r3, #20
 801c956:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801c95a:	d961      	bls.n	801ca20 <_strtod_l+0x8b8>
 801c95c:	6963      	ldr	r3, [r4, #20]
 801c95e:	b913      	cbnz	r3, 801c966 <_strtod_l+0x7fe>
 801c960:	6923      	ldr	r3, [r4, #16]
 801c962:	2b01      	cmp	r3, #1
 801c964:	dd5c      	ble.n	801ca20 <_strtod_l+0x8b8>
 801c966:	4621      	mov	r1, r4
 801c968:	2201      	movs	r2, #1
 801c96a:	9805      	ldr	r0, [sp, #20]
 801c96c:	f7ff f97a 	bl	801bc64 <__lshift>
 801c970:	4641      	mov	r1, r8
 801c972:	4604      	mov	r4, r0
 801c974:	f7ff f9e2 	bl	801bd3c <__mcmp>
 801c978:	2800      	cmp	r0, #0
 801c97a:	dd51      	ble.n	801ca20 <_strtod_l+0x8b8>
 801c97c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c980:	9a08      	ldr	r2, [sp, #32]
 801c982:	0d1b      	lsrs	r3, r3, #20
 801c984:	051b      	lsls	r3, r3, #20
 801c986:	2a00      	cmp	r2, #0
 801c988:	d06b      	beq.n	801ca62 <_strtod_l+0x8fa>
 801c98a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801c98e:	d868      	bhi.n	801ca62 <_strtod_l+0x8fa>
 801c990:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801c994:	f67f ae9d 	bls.w	801c6d2 <_strtod_l+0x56a>
 801c998:	4b0a      	ldr	r3, [pc, #40]	@ (801c9c4 <_strtod_l+0x85c>)
 801c99a:	4650      	mov	r0, sl
 801c99c:	4659      	mov	r1, fp
 801c99e:	2200      	movs	r2, #0
 801c9a0:	f7e3 fe42 	bl	8000628 <__aeabi_dmul>
 801c9a4:	4b08      	ldr	r3, [pc, #32]	@ (801c9c8 <_strtod_l+0x860>)
 801c9a6:	400b      	ands	r3, r1
 801c9a8:	4682      	mov	sl, r0
 801c9aa:	468b      	mov	fp, r1
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	f47f ae05 	bne.w	801c5bc <_strtod_l+0x454>
 801c9b2:	9a05      	ldr	r2, [sp, #20]
 801c9b4:	2322      	movs	r3, #34	@ 0x22
 801c9b6:	6013      	str	r3, [r2, #0]
 801c9b8:	e600      	b.n	801c5bc <_strtod_l+0x454>
 801c9ba:	bf00      	nop
 801c9bc:	0801ec20 	.word	0x0801ec20
 801c9c0:	fffffc02 	.word	0xfffffc02
 801c9c4:	39500000 	.word	0x39500000
 801c9c8:	7ff00000 	.word	0x7ff00000
 801c9cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801c9d0:	d165      	bne.n	801ca9e <_strtod_l+0x936>
 801c9d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c9d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c9d8:	b35a      	cbz	r2, 801ca32 <_strtod_l+0x8ca>
 801c9da:	4a9f      	ldr	r2, [pc, #636]	@ (801cc58 <_strtod_l+0xaf0>)
 801c9dc:	4293      	cmp	r3, r2
 801c9de:	d12b      	bne.n	801ca38 <_strtod_l+0x8d0>
 801c9e0:	9b08      	ldr	r3, [sp, #32]
 801c9e2:	4651      	mov	r1, sl
 801c9e4:	b303      	cbz	r3, 801ca28 <_strtod_l+0x8c0>
 801c9e6:	4b9d      	ldr	r3, [pc, #628]	@ (801cc5c <_strtod_l+0xaf4>)
 801c9e8:	465a      	mov	r2, fp
 801c9ea:	4013      	ands	r3, r2
 801c9ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801c9f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c9f4:	d81b      	bhi.n	801ca2e <_strtod_l+0x8c6>
 801c9f6:	0d1b      	lsrs	r3, r3, #20
 801c9f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801c9fc:	fa02 f303 	lsl.w	r3, r2, r3
 801ca00:	4299      	cmp	r1, r3
 801ca02:	d119      	bne.n	801ca38 <_strtod_l+0x8d0>
 801ca04:	4b96      	ldr	r3, [pc, #600]	@ (801cc60 <_strtod_l+0xaf8>)
 801ca06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ca08:	429a      	cmp	r2, r3
 801ca0a:	d102      	bne.n	801ca12 <_strtod_l+0x8aa>
 801ca0c:	3101      	adds	r1, #1
 801ca0e:	f43f adca 	beq.w	801c5a6 <_strtod_l+0x43e>
 801ca12:	4b92      	ldr	r3, [pc, #584]	@ (801cc5c <_strtod_l+0xaf4>)
 801ca14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ca16:	401a      	ands	r2, r3
 801ca18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801ca1c:	f04f 0a00 	mov.w	sl, #0
 801ca20:	9b08      	ldr	r3, [sp, #32]
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d1b8      	bne.n	801c998 <_strtod_l+0x830>
 801ca26:	e5c9      	b.n	801c5bc <_strtod_l+0x454>
 801ca28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ca2c:	e7e8      	b.n	801ca00 <_strtod_l+0x898>
 801ca2e:	4613      	mov	r3, r2
 801ca30:	e7e6      	b.n	801ca00 <_strtod_l+0x898>
 801ca32:	ea53 030a 	orrs.w	r3, r3, sl
 801ca36:	d0a1      	beq.n	801c97c <_strtod_l+0x814>
 801ca38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ca3a:	b1db      	cbz	r3, 801ca74 <_strtod_l+0x90c>
 801ca3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ca3e:	4213      	tst	r3, r2
 801ca40:	d0ee      	beq.n	801ca20 <_strtod_l+0x8b8>
 801ca42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ca44:	9a08      	ldr	r2, [sp, #32]
 801ca46:	4650      	mov	r0, sl
 801ca48:	4659      	mov	r1, fp
 801ca4a:	b1bb      	cbz	r3, 801ca7c <_strtod_l+0x914>
 801ca4c:	f7ff fb6c 	bl	801c128 <sulp>
 801ca50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ca54:	ec53 2b10 	vmov	r2, r3, d0
 801ca58:	f7e3 fc30 	bl	80002bc <__adddf3>
 801ca5c:	4682      	mov	sl, r0
 801ca5e:	468b      	mov	fp, r1
 801ca60:	e7de      	b.n	801ca20 <_strtod_l+0x8b8>
 801ca62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801ca66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801ca6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801ca6e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801ca72:	e7d5      	b.n	801ca20 <_strtod_l+0x8b8>
 801ca74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ca76:	ea13 0f0a 	tst.w	r3, sl
 801ca7a:	e7e1      	b.n	801ca40 <_strtod_l+0x8d8>
 801ca7c:	f7ff fb54 	bl	801c128 <sulp>
 801ca80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ca84:	ec53 2b10 	vmov	r2, r3, d0
 801ca88:	f7e3 fc16 	bl	80002b8 <__aeabi_dsub>
 801ca8c:	2200      	movs	r2, #0
 801ca8e:	2300      	movs	r3, #0
 801ca90:	4682      	mov	sl, r0
 801ca92:	468b      	mov	fp, r1
 801ca94:	f7e4 f830 	bl	8000af8 <__aeabi_dcmpeq>
 801ca98:	2800      	cmp	r0, #0
 801ca9a:	d0c1      	beq.n	801ca20 <_strtod_l+0x8b8>
 801ca9c:	e619      	b.n	801c6d2 <_strtod_l+0x56a>
 801ca9e:	4641      	mov	r1, r8
 801caa0:	4620      	mov	r0, r4
 801caa2:	f7ff fac3 	bl	801c02c <__ratio>
 801caa6:	ec57 6b10 	vmov	r6, r7, d0
 801caaa:	2200      	movs	r2, #0
 801caac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801cab0:	4630      	mov	r0, r6
 801cab2:	4639      	mov	r1, r7
 801cab4:	f7e4 f834 	bl	8000b20 <__aeabi_dcmple>
 801cab8:	2800      	cmp	r0, #0
 801caba:	d06f      	beq.n	801cb9c <_strtod_l+0xa34>
 801cabc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cabe:	2b00      	cmp	r3, #0
 801cac0:	d17a      	bne.n	801cbb8 <_strtod_l+0xa50>
 801cac2:	f1ba 0f00 	cmp.w	sl, #0
 801cac6:	d158      	bne.n	801cb7a <_strtod_l+0xa12>
 801cac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801caca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d15a      	bne.n	801cb88 <_strtod_l+0xa20>
 801cad2:	4b64      	ldr	r3, [pc, #400]	@ (801cc64 <_strtod_l+0xafc>)
 801cad4:	2200      	movs	r2, #0
 801cad6:	4630      	mov	r0, r6
 801cad8:	4639      	mov	r1, r7
 801cada:	f7e4 f817 	bl	8000b0c <__aeabi_dcmplt>
 801cade:	2800      	cmp	r0, #0
 801cae0:	d159      	bne.n	801cb96 <_strtod_l+0xa2e>
 801cae2:	4630      	mov	r0, r6
 801cae4:	4639      	mov	r1, r7
 801cae6:	4b60      	ldr	r3, [pc, #384]	@ (801cc68 <_strtod_l+0xb00>)
 801cae8:	2200      	movs	r2, #0
 801caea:	f7e3 fd9d 	bl	8000628 <__aeabi_dmul>
 801caee:	4606      	mov	r6, r0
 801caf0:	460f      	mov	r7, r1
 801caf2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801caf6:	9606      	str	r6, [sp, #24]
 801caf8:	9307      	str	r3, [sp, #28]
 801cafa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cafe:	4d57      	ldr	r5, [pc, #348]	@ (801cc5c <_strtod_l+0xaf4>)
 801cb00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801cb04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb06:	401d      	ands	r5, r3
 801cb08:	4b58      	ldr	r3, [pc, #352]	@ (801cc6c <_strtod_l+0xb04>)
 801cb0a:	429d      	cmp	r5, r3
 801cb0c:	f040 80b2 	bne.w	801cc74 <_strtod_l+0xb0c>
 801cb10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801cb16:	ec4b ab10 	vmov	d0, sl, fp
 801cb1a:	f7ff f9bf 	bl	801be9c <__ulp>
 801cb1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cb22:	ec51 0b10 	vmov	r0, r1, d0
 801cb26:	f7e3 fd7f 	bl	8000628 <__aeabi_dmul>
 801cb2a:	4652      	mov	r2, sl
 801cb2c:	465b      	mov	r3, fp
 801cb2e:	f7e3 fbc5 	bl	80002bc <__adddf3>
 801cb32:	460b      	mov	r3, r1
 801cb34:	4949      	ldr	r1, [pc, #292]	@ (801cc5c <_strtod_l+0xaf4>)
 801cb36:	4a4e      	ldr	r2, [pc, #312]	@ (801cc70 <_strtod_l+0xb08>)
 801cb38:	4019      	ands	r1, r3
 801cb3a:	4291      	cmp	r1, r2
 801cb3c:	4682      	mov	sl, r0
 801cb3e:	d942      	bls.n	801cbc6 <_strtod_l+0xa5e>
 801cb40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cb42:	4b47      	ldr	r3, [pc, #284]	@ (801cc60 <_strtod_l+0xaf8>)
 801cb44:	429a      	cmp	r2, r3
 801cb46:	d103      	bne.n	801cb50 <_strtod_l+0x9e8>
 801cb48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cb4a:	3301      	adds	r3, #1
 801cb4c:	f43f ad2b 	beq.w	801c5a6 <_strtod_l+0x43e>
 801cb50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801cc60 <_strtod_l+0xaf8>
 801cb54:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 801cb58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801cb5a:	9805      	ldr	r0, [sp, #20]
 801cb5c:	f7fe fe6a 	bl	801b834 <_Bfree>
 801cb60:	9805      	ldr	r0, [sp, #20]
 801cb62:	4649      	mov	r1, r9
 801cb64:	f7fe fe66 	bl	801b834 <_Bfree>
 801cb68:	9805      	ldr	r0, [sp, #20]
 801cb6a:	4641      	mov	r1, r8
 801cb6c:	f7fe fe62 	bl	801b834 <_Bfree>
 801cb70:	9805      	ldr	r0, [sp, #20]
 801cb72:	4621      	mov	r1, r4
 801cb74:	f7fe fe5e 	bl	801b834 <_Bfree>
 801cb78:	e618      	b.n	801c7ac <_strtod_l+0x644>
 801cb7a:	f1ba 0f01 	cmp.w	sl, #1
 801cb7e:	d103      	bne.n	801cb88 <_strtod_l+0xa20>
 801cb80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	f43f ada5 	beq.w	801c6d2 <_strtod_l+0x56a>
 801cb88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801cc38 <_strtod_l+0xad0>
 801cb8c:	4f35      	ldr	r7, [pc, #212]	@ (801cc64 <_strtod_l+0xafc>)
 801cb8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 801cb92:	2600      	movs	r6, #0
 801cb94:	e7b1      	b.n	801cafa <_strtod_l+0x992>
 801cb96:	4f34      	ldr	r7, [pc, #208]	@ (801cc68 <_strtod_l+0xb00>)
 801cb98:	2600      	movs	r6, #0
 801cb9a:	e7aa      	b.n	801caf2 <_strtod_l+0x98a>
 801cb9c:	4b32      	ldr	r3, [pc, #200]	@ (801cc68 <_strtod_l+0xb00>)
 801cb9e:	4630      	mov	r0, r6
 801cba0:	4639      	mov	r1, r7
 801cba2:	2200      	movs	r2, #0
 801cba4:	f7e3 fd40 	bl	8000628 <__aeabi_dmul>
 801cba8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cbaa:	4606      	mov	r6, r0
 801cbac:	460f      	mov	r7, r1
 801cbae:	2b00      	cmp	r3, #0
 801cbb0:	d09f      	beq.n	801caf2 <_strtod_l+0x98a>
 801cbb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801cbb6:	e7a0      	b.n	801cafa <_strtod_l+0x992>
 801cbb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801cc40 <_strtod_l+0xad8>
 801cbbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 801cbc0:	ec57 6b17 	vmov	r6, r7, d7
 801cbc4:	e799      	b.n	801cafa <_strtod_l+0x992>
 801cbc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801cbca:	9b08      	ldr	r3, [sp, #32]
 801cbcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	d1c1      	bne.n	801cb58 <_strtod_l+0x9f0>
 801cbd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801cbd8:	0d1b      	lsrs	r3, r3, #20
 801cbda:	051b      	lsls	r3, r3, #20
 801cbdc:	429d      	cmp	r5, r3
 801cbde:	d1bb      	bne.n	801cb58 <_strtod_l+0x9f0>
 801cbe0:	4630      	mov	r0, r6
 801cbe2:	4639      	mov	r1, r7
 801cbe4:	f7e4 f8d0 	bl	8000d88 <__aeabi_d2lz>
 801cbe8:	f7e3 fcf0 	bl	80005cc <__aeabi_l2d>
 801cbec:	4602      	mov	r2, r0
 801cbee:	460b      	mov	r3, r1
 801cbf0:	4630      	mov	r0, r6
 801cbf2:	4639      	mov	r1, r7
 801cbf4:	f7e3 fb60 	bl	80002b8 <__aeabi_dsub>
 801cbf8:	460b      	mov	r3, r1
 801cbfa:	4602      	mov	r2, r0
 801cbfc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801cc00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801cc04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cc06:	ea46 060a 	orr.w	r6, r6, sl
 801cc0a:	431e      	orrs	r6, r3
 801cc0c:	d06f      	beq.n	801ccee <_strtod_l+0xb86>
 801cc0e:	a30e      	add	r3, pc, #56	@ (adr r3, 801cc48 <_strtod_l+0xae0>)
 801cc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc14:	f7e3 ff7a 	bl	8000b0c <__aeabi_dcmplt>
 801cc18:	2800      	cmp	r0, #0
 801cc1a:	f47f accf 	bne.w	801c5bc <_strtod_l+0x454>
 801cc1e:	a30c      	add	r3, pc, #48	@ (adr r3, 801cc50 <_strtod_l+0xae8>)
 801cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cc28:	f7e3 ff8e 	bl	8000b48 <__aeabi_dcmpgt>
 801cc2c:	2800      	cmp	r0, #0
 801cc2e:	d093      	beq.n	801cb58 <_strtod_l+0x9f0>
 801cc30:	e4c4      	b.n	801c5bc <_strtod_l+0x454>
 801cc32:	bf00      	nop
 801cc34:	f3af 8000 	nop.w
 801cc38:	00000000 	.word	0x00000000
 801cc3c:	bff00000 	.word	0xbff00000
 801cc40:	00000000 	.word	0x00000000
 801cc44:	3ff00000 	.word	0x3ff00000
 801cc48:	94a03595 	.word	0x94a03595
 801cc4c:	3fdfffff 	.word	0x3fdfffff
 801cc50:	35afe535 	.word	0x35afe535
 801cc54:	3fe00000 	.word	0x3fe00000
 801cc58:	000fffff 	.word	0x000fffff
 801cc5c:	7ff00000 	.word	0x7ff00000
 801cc60:	7fefffff 	.word	0x7fefffff
 801cc64:	3ff00000 	.word	0x3ff00000
 801cc68:	3fe00000 	.word	0x3fe00000
 801cc6c:	7fe00000 	.word	0x7fe00000
 801cc70:	7c9fffff 	.word	0x7c9fffff
 801cc74:	9b08      	ldr	r3, [sp, #32]
 801cc76:	b323      	cbz	r3, 801ccc2 <_strtod_l+0xb5a>
 801cc78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801cc7c:	d821      	bhi.n	801ccc2 <_strtod_l+0xb5a>
 801cc7e:	a328      	add	r3, pc, #160	@ (adr r3, 801cd20 <_strtod_l+0xbb8>)
 801cc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc84:	4630      	mov	r0, r6
 801cc86:	4639      	mov	r1, r7
 801cc88:	f7e3 ff4a 	bl	8000b20 <__aeabi_dcmple>
 801cc8c:	b1a0      	cbz	r0, 801ccb8 <_strtod_l+0xb50>
 801cc8e:	4639      	mov	r1, r7
 801cc90:	4630      	mov	r0, r6
 801cc92:	f7e3 ffa1 	bl	8000bd8 <__aeabi_d2uiz>
 801cc96:	2801      	cmp	r0, #1
 801cc98:	bf38      	it	cc
 801cc9a:	2001      	movcc	r0, #1
 801cc9c:	f7e3 fc4a 	bl	8000534 <__aeabi_ui2d>
 801cca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cca2:	4606      	mov	r6, r0
 801cca4:	460f      	mov	r7, r1
 801cca6:	b9fb      	cbnz	r3, 801cce8 <_strtod_l+0xb80>
 801cca8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ccac:	9014      	str	r0, [sp, #80]	@ 0x50
 801ccae:	9315      	str	r3, [sp, #84]	@ 0x54
 801ccb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801ccb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801ccb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ccba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801ccbe:	1b5b      	subs	r3, r3, r5
 801ccc0:	9311      	str	r3, [sp, #68]	@ 0x44
 801ccc2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801ccc6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801ccca:	f7ff f8e7 	bl	801be9c <__ulp>
 801ccce:	4650      	mov	r0, sl
 801ccd0:	ec53 2b10 	vmov	r2, r3, d0
 801ccd4:	4659      	mov	r1, fp
 801ccd6:	f7e3 fca7 	bl	8000628 <__aeabi_dmul>
 801ccda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801ccde:	f7e3 faed 	bl	80002bc <__adddf3>
 801cce2:	4682      	mov	sl, r0
 801cce4:	468b      	mov	fp, r1
 801cce6:	e770      	b.n	801cbca <_strtod_l+0xa62>
 801cce8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801ccec:	e7e0      	b.n	801ccb0 <_strtod_l+0xb48>
 801ccee:	a30e      	add	r3, pc, #56	@ (adr r3, 801cd28 <_strtod_l+0xbc0>)
 801ccf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccf4:	f7e3 ff0a 	bl	8000b0c <__aeabi_dcmplt>
 801ccf8:	e798      	b.n	801cc2c <_strtod_l+0xac4>
 801ccfa:	2300      	movs	r3, #0
 801ccfc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ccfe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801cd00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cd02:	6013      	str	r3, [r2, #0]
 801cd04:	f7ff ba6d 	b.w	801c1e2 <_strtod_l+0x7a>
 801cd08:	2a65      	cmp	r2, #101	@ 0x65
 801cd0a:	f43f ab66 	beq.w	801c3da <_strtod_l+0x272>
 801cd0e:	2a45      	cmp	r2, #69	@ 0x45
 801cd10:	f43f ab63 	beq.w	801c3da <_strtod_l+0x272>
 801cd14:	2301      	movs	r3, #1
 801cd16:	f7ff bb9e 	b.w	801c456 <_strtod_l+0x2ee>
 801cd1a:	bf00      	nop
 801cd1c:	f3af 8000 	nop.w
 801cd20:	ffc00000 	.word	0xffc00000
 801cd24:	41dfffff 	.word	0x41dfffff
 801cd28:	94a03595 	.word	0x94a03595
 801cd2c:	3fcfffff 	.word	0x3fcfffff

0801cd30 <_strtod_r>:
 801cd30:	4b01      	ldr	r3, [pc, #4]	@ (801cd38 <_strtod_r+0x8>)
 801cd32:	f7ff ba19 	b.w	801c168 <_strtod_l>
 801cd36:	bf00      	nop
 801cd38:	200000e0 	.word	0x200000e0

0801cd3c <_strtol_l.constprop.0>:
 801cd3c:	2b24      	cmp	r3, #36	@ 0x24
 801cd3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd42:	4686      	mov	lr, r0
 801cd44:	4690      	mov	r8, r2
 801cd46:	d801      	bhi.n	801cd4c <_strtol_l.constprop.0+0x10>
 801cd48:	2b01      	cmp	r3, #1
 801cd4a:	d106      	bne.n	801cd5a <_strtol_l.constprop.0+0x1e>
 801cd4c:	f7fd fe28 	bl	801a9a0 <__errno>
 801cd50:	2316      	movs	r3, #22
 801cd52:	6003      	str	r3, [r0, #0]
 801cd54:	2000      	movs	r0, #0
 801cd56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd5a:	4834      	ldr	r0, [pc, #208]	@ (801ce2c <_strtol_l.constprop.0+0xf0>)
 801cd5c:	460d      	mov	r5, r1
 801cd5e:	462a      	mov	r2, r5
 801cd60:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cd64:	5d06      	ldrb	r6, [r0, r4]
 801cd66:	f016 0608 	ands.w	r6, r6, #8
 801cd6a:	d1f8      	bne.n	801cd5e <_strtol_l.constprop.0+0x22>
 801cd6c:	2c2d      	cmp	r4, #45	@ 0x2d
 801cd6e:	d12d      	bne.n	801cdcc <_strtol_l.constprop.0+0x90>
 801cd70:	782c      	ldrb	r4, [r5, #0]
 801cd72:	2601      	movs	r6, #1
 801cd74:	1c95      	adds	r5, r2, #2
 801cd76:	f033 0210 	bics.w	r2, r3, #16
 801cd7a:	d109      	bne.n	801cd90 <_strtol_l.constprop.0+0x54>
 801cd7c:	2c30      	cmp	r4, #48	@ 0x30
 801cd7e:	d12a      	bne.n	801cdd6 <_strtol_l.constprop.0+0x9a>
 801cd80:	782a      	ldrb	r2, [r5, #0]
 801cd82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801cd86:	2a58      	cmp	r2, #88	@ 0x58
 801cd88:	d125      	bne.n	801cdd6 <_strtol_l.constprop.0+0x9a>
 801cd8a:	786c      	ldrb	r4, [r5, #1]
 801cd8c:	2310      	movs	r3, #16
 801cd8e:	3502      	adds	r5, #2
 801cd90:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801cd94:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 801cd98:	2200      	movs	r2, #0
 801cd9a:	fbbc f9f3 	udiv	r9, ip, r3
 801cd9e:	4610      	mov	r0, r2
 801cda0:	fb03 ca19 	mls	sl, r3, r9, ip
 801cda4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801cda8:	2f09      	cmp	r7, #9
 801cdaa:	d81b      	bhi.n	801cde4 <_strtol_l.constprop.0+0xa8>
 801cdac:	463c      	mov	r4, r7
 801cdae:	42a3      	cmp	r3, r4
 801cdb0:	dd27      	ble.n	801ce02 <_strtol_l.constprop.0+0xc6>
 801cdb2:	1c57      	adds	r7, r2, #1
 801cdb4:	d007      	beq.n	801cdc6 <_strtol_l.constprop.0+0x8a>
 801cdb6:	4581      	cmp	r9, r0
 801cdb8:	d320      	bcc.n	801cdfc <_strtol_l.constprop.0+0xc0>
 801cdba:	d101      	bne.n	801cdc0 <_strtol_l.constprop.0+0x84>
 801cdbc:	45a2      	cmp	sl, r4
 801cdbe:	db1d      	blt.n	801cdfc <_strtol_l.constprop.0+0xc0>
 801cdc0:	fb00 4003 	mla	r0, r0, r3, r4
 801cdc4:	2201      	movs	r2, #1
 801cdc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cdca:	e7eb      	b.n	801cda4 <_strtol_l.constprop.0+0x68>
 801cdcc:	2c2b      	cmp	r4, #43	@ 0x2b
 801cdce:	bf04      	itt	eq
 801cdd0:	782c      	ldrbeq	r4, [r5, #0]
 801cdd2:	1c95      	addeq	r5, r2, #2
 801cdd4:	e7cf      	b.n	801cd76 <_strtol_l.constprop.0+0x3a>
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	d1da      	bne.n	801cd90 <_strtol_l.constprop.0+0x54>
 801cdda:	2c30      	cmp	r4, #48	@ 0x30
 801cddc:	bf0c      	ite	eq
 801cdde:	2308      	moveq	r3, #8
 801cde0:	230a      	movne	r3, #10
 801cde2:	e7d5      	b.n	801cd90 <_strtol_l.constprop.0+0x54>
 801cde4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801cde8:	2f19      	cmp	r7, #25
 801cdea:	d801      	bhi.n	801cdf0 <_strtol_l.constprop.0+0xb4>
 801cdec:	3c37      	subs	r4, #55	@ 0x37
 801cdee:	e7de      	b.n	801cdae <_strtol_l.constprop.0+0x72>
 801cdf0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801cdf4:	2f19      	cmp	r7, #25
 801cdf6:	d804      	bhi.n	801ce02 <_strtol_l.constprop.0+0xc6>
 801cdf8:	3c57      	subs	r4, #87	@ 0x57
 801cdfa:	e7d8      	b.n	801cdae <_strtol_l.constprop.0+0x72>
 801cdfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801ce00:	e7e1      	b.n	801cdc6 <_strtol_l.constprop.0+0x8a>
 801ce02:	1c53      	adds	r3, r2, #1
 801ce04:	d108      	bne.n	801ce18 <_strtol_l.constprop.0+0xdc>
 801ce06:	2322      	movs	r3, #34	@ 0x22
 801ce08:	f8ce 3000 	str.w	r3, [lr]
 801ce0c:	4660      	mov	r0, ip
 801ce0e:	f1b8 0f00 	cmp.w	r8, #0
 801ce12:	d0a0      	beq.n	801cd56 <_strtol_l.constprop.0+0x1a>
 801ce14:	1e69      	subs	r1, r5, #1
 801ce16:	e006      	b.n	801ce26 <_strtol_l.constprop.0+0xea>
 801ce18:	b106      	cbz	r6, 801ce1c <_strtol_l.constprop.0+0xe0>
 801ce1a:	4240      	negs	r0, r0
 801ce1c:	f1b8 0f00 	cmp.w	r8, #0
 801ce20:	d099      	beq.n	801cd56 <_strtol_l.constprop.0+0x1a>
 801ce22:	2a00      	cmp	r2, #0
 801ce24:	d1f6      	bne.n	801ce14 <_strtol_l.constprop.0+0xd8>
 801ce26:	f8c8 1000 	str.w	r1, [r8]
 801ce2a:	e794      	b.n	801cd56 <_strtol_l.constprop.0+0x1a>
 801ce2c:	0801e8b0 	.word	0x0801e8b0

0801ce30 <_strtol_r>:
 801ce30:	f7ff bf84 	b.w	801cd3c <_strtol_l.constprop.0>

0801ce34 <__ssputs_r>:
 801ce34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce38:	688e      	ldr	r6, [r1, #8]
 801ce3a:	461f      	mov	r7, r3
 801ce3c:	42be      	cmp	r6, r7
 801ce3e:	680b      	ldr	r3, [r1, #0]
 801ce40:	4682      	mov	sl, r0
 801ce42:	460c      	mov	r4, r1
 801ce44:	4690      	mov	r8, r2
 801ce46:	d82d      	bhi.n	801cea4 <__ssputs_r+0x70>
 801ce48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ce4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801ce50:	d026      	beq.n	801cea0 <__ssputs_r+0x6c>
 801ce52:	6965      	ldr	r5, [r4, #20]
 801ce54:	6909      	ldr	r1, [r1, #16]
 801ce56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ce5a:	eba3 0901 	sub.w	r9, r3, r1
 801ce5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ce62:	1c7b      	adds	r3, r7, #1
 801ce64:	444b      	add	r3, r9
 801ce66:	106d      	asrs	r5, r5, #1
 801ce68:	429d      	cmp	r5, r3
 801ce6a:	bf38      	it	cc
 801ce6c:	461d      	movcc	r5, r3
 801ce6e:	0553      	lsls	r3, r2, #21
 801ce70:	d527      	bpl.n	801cec2 <__ssputs_r+0x8e>
 801ce72:	4629      	mov	r1, r5
 801ce74:	f7fc f9e4 	bl	8019240 <_malloc_r>
 801ce78:	4606      	mov	r6, r0
 801ce7a:	b360      	cbz	r0, 801ced6 <__ssputs_r+0xa2>
 801ce7c:	6921      	ldr	r1, [r4, #16]
 801ce7e:	464a      	mov	r2, r9
 801ce80:	f7fd fdc3 	bl	801aa0a <memcpy>
 801ce84:	89a3      	ldrh	r3, [r4, #12]
 801ce86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ce8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ce8e:	81a3      	strh	r3, [r4, #12]
 801ce90:	6126      	str	r6, [r4, #16]
 801ce92:	6165      	str	r5, [r4, #20]
 801ce94:	444e      	add	r6, r9
 801ce96:	eba5 0509 	sub.w	r5, r5, r9
 801ce9a:	6026      	str	r6, [r4, #0]
 801ce9c:	60a5      	str	r5, [r4, #8]
 801ce9e:	463e      	mov	r6, r7
 801cea0:	42be      	cmp	r6, r7
 801cea2:	d900      	bls.n	801cea6 <__ssputs_r+0x72>
 801cea4:	463e      	mov	r6, r7
 801cea6:	6820      	ldr	r0, [r4, #0]
 801cea8:	4632      	mov	r2, r6
 801ceaa:	4641      	mov	r1, r8
 801ceac:	f7fd fc70 	bl	801a790 <memmove>
 801ceb0:	68a3      	ldr	r3, [r4, #8]
 801ceb2:	1b9b      	subs	r3, r3, r6
 801ceb4:	60a3      	str	r3, [r4, #8]
 801ceb6:	6823      	ldr	r3, [r4, #0]
 801ceb8:	4433      	add	r3, r6
 801ceba:	6023      	str	r3, [r4, #0]
 801cebc:	2000      	movs	r0, #0
 801cebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cec2:	462a      	mov	r2, r5
 801cec4:	f7fc fabc 	bl	8019440 <_realloc_r>
 801cec8:	4606      	mov	r6, r0
 801ceca:	2800      	cmp	r0, #0
 801cecc:	d1e0      	bne.n	801ce90 <__ssputs_r+0x5c>
 801cece:	6921      	ldr	r1, [r4, #16]
 801ced0:	4650      	mov	r0, sl
 801ced2:	f7fe fc25 	bl	801b720 <_free_r>
 801ced6:	230c      	movs	r3, #12
 801ced8:	f8ca 3000 	str.w	r3, [sl]
 801cedc:	89a3      	ldrh	r3, [r4, #12]
 801cede:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cee2:	81a3      	strh	r3, [r4, #12]
 801cee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cee8:	e7e9      	b.n	801cebe <__ssputs_r+0x8a>
	...

0801ceec <_svfiprintf_r>:
 801ceec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cef0:	4698      	mov	r8, r3
 801cef2:	898b      	ldrh	r3, [r1, #12]
 801cef4:	061b      	lsls	r3, r3, #24
 801cef6:	b09d      	sub	sp, #116	@ 0x74
 801cef8:	4607      	mov	r7, r0
 801cefa:	460d      	mov	r5, r1
 801cefc:	4614      	mov	r4, r2
 801cefe:	d510      	bpl.n	801cf22 <_svfiprintf_r+0x36>
 801cf00:	690b      	ldr	r3, [r1, #16]
 801cf02:	b973      	cbnz	r3, 801cf22 <_svfiprintf_r+0x36>
 801cf04:	2140      	movs	r1, #64	@ 0x40
 801cf06:	f7fc f99b 	bl	8019240 <_malloc_r>
 801cf0a:	6028      	str	r0, [r5, #0]
 801cf0c:	6128      	str	r0, [r5, #16]
 801cf0e:	b930      	cbnz	r0, 801cf1e <_svfiprintf_r+0x32>
 801cf10:	230c      	movs	r3, #12
 801cf12:	603b      	str	r3, [r7, #0]
 801cf14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cf18:	b01d      	add	sp, #116	@ 0x74
 801cf1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf1e:	2340      	movs	r3, #64	@ 0x40
 801cf20:	616b      	str	r3, [r5, #20]
 801cf22:	2300      	movs	r3, #0
 801cf24:	9309      	str	r3, [sp, #36]	@ 0x24
 801cf26:	2320      	movs	r3, #32
 801cf28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cf2c:	f8cd 800c 	str.w	r8, [sp, #12]
 801cf30:	2330      	movs	r3, #48	@ 0x30
 801cf32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d0d0 <_svfiprintf_r+0x1e4>
 801cf36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cf3a:	f04f 0901 	mov.w	r9, #1
 801cf3e:	4623      	mov	r3, r4
 801cf40:	469a      	mov	sl, r3
 801cf42:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cf46:	b10a      	cbz	r2, 801cf4c <_svfiprintf_r+0x60>
 801cf48:	2a25      	cmp	r2, #37	@ 0x25
 801cf4a:	d1f9      	bne.n	801cf40 <_svfiprintf_r+0x54>
 801cf4c:	ebba 0b04 	subs.w	fp, sl, r4
 801cf50:	d00b      	beq.n	801cf6a <_svfiprintf_r+0x7e>
 801cf52:	465b      	mov	r3, fp
 801cf54:	4622      	mov	r2, r4
 801cf56:	4629      	mov	r1, r5
 801cf58:	4638      	mov	r0, r7
 801cf5a:	f7ff ff6b 	bl	801ce34 <__ssputs_r>
 801cf5e:	3001      	adds	r0, #1
 801cf60:	f000 80a7 	beq.w	801d0b2 <_svfiprintf_r+0x1c6>
 801cf64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cf66:	445a      	add	r2, fp
 801cf68:	9209      	str	r2, [sp, #36]	@ 0x24
 801cf6a:	f89a 3000 	ldrb.w	r3, [sl]
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	f000 809f 	beq.w	801d0b2 <_svfiprintf_r+0x1c6>
 801cf74:	2300      	movs	r3, #0
 801cf76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801cf7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cf7e:	f10a 0a01 	add.w	sl, sl, #1
 801cf82:	9304      	str	r3, [sp, #16]
 801cf84:	9307      	str	r3, [sp, #28]
 801cf86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cf8a:	931a      	str	r3, [sp, #104]	@ 0x68
 801cf8c:	4654      	mov	r4, sl
 801cf8e:	2205      	movs	r2, #5
 801cf90:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf94:	484e      	ldr	r0, [pc, #312]	@ (801d0d0 <_svfiprintf_r+0x1e4>)
 801cf96:	f7e3 f933 	bl	8000200 <memchr>
 801cf9a:	9a04      	ldr	r2, [sp, #16]
 801cf9c:	b9d8      	cbnz	r0, 801cfd6 <_svfiprintf_r+0xea>
 801cf9e:	06d0      	lsls	r0, r2, #27
 801cfa0:	bf44      	itt	mi
 801cfa2:	2320      	movmi	r3, #32
 801cfa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cfa8:	0711      	lsls	r1, r2, #28
 801cfaa:	bf44      	itt	mi
 801cfac:	232b      	movmi	r3, #43	@ 0x2b
 801cfae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cfb2:	f89a 3000 	ldrb.w	r3, [sl]
 801cfb6:	2b2a      	cmp	r3, #42	@ 0x2a
 801cfb8:	d015      	beq.n	801cfe6 <_svfiprintf_r+0xfa>
 801cfba:	9a07      	ldr	r2, [sp, #28]
 801cfbc:	4654      	mov	r4, sl
 801cfbe:	2000      	movs	r0, #0
 801cfc0:	f04f 0c0a 	mov.w	ip, #10
 801cfc4:	4621      	mov	r1, r4
 801cfc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cfca:	3b30      	subs	r3, #48	@ 0x30
 801cfcc:	2b09      	cmp	r3, #9
 801cfce:	d94b      	bls.n	801d068 <_svfiprintf_r+0x17c>
 801cfd0:	b1b0      	cbz	r0, 801d000 <_svfiprintf_r+0x114>
 801cfd2:	9207      	str	r2, [sp, #28]
 801cfd4:	e014      	b.n	801d000 <_svfiprintf_r+0x114>
 801cfd6:	eba0 0308 	sub.w	r3, r0, r8
 801cfda:	fa09 f303 	lsl.w	r3, r9, r3
 801cfde:	4313      	orrs	r3, r2
 801cfe0:	9304      	str	r3, [sp, #16]
 801cfe2:	46a2      	mov	sl, r4
 801cfe4:	e7d2      	b.n	801cf8c <_svfiprintf_r+0xa0>
 801cfe6:	9b03      	ldr	r3, [sp, #12]
 801cfe8:	1d19      	adds	r1, r3, #4
 801cfea:	681b      	ldr	r3, [r3, #0]
 801cfec:	9103      	str	r1, [sp, #12]
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	bfbb      	ittet	lt
 801cff2:	425b      	neglt	r3, r3
 801cff4:	f042 0202 	orrlt.w	r2, r2, #2
 801cff8:	9307      	strge	r3, [sp, #28]
 801cffa:	9307      	strlt	r3, [sp, #28]
 801cffc:	bfb8      	it	lt
 801cffe:	9204      	strlt	r2, [sp, #16]
 801d000:	7823      	ldrb	r3, [r4, #0]
 801d002:	2b2e      	cmp	r3, #46	@ 0x2e
 801d004:	d10a      	bne.n	801d01c <_svfiprintf_r+0x130>
 801d006:	7863      	ldrb	r3, [r4, #1]
 801d008:	2b2a      	cmp	r3, #42	@ 0x2a
 801d00a:	d132      	bne.n	801d072 <_svfiprintf_r+0x186>
 801d00c:	9b03      	ldr	r3, [sp, #12]
 801d00e:	1d1a      	adds	r2, r3, #4
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	9203      	str	r2, [sp, #12]
 801d014:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d018:	3402      	adds	r4, #2
 801d01a:	9305      	str	r3, [sp, #20]
 801d01c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d0e0 <_svfiprintf_r+0x1f4>
 801d020:	7821      	ldrb	r1, [r4, #0]
 801d022:	2203      	movs	r2, #3
 801d024:	4650      	mov	r0, sl
 801d026:	f7e3 f8eb 	bl	8000200 <memchr>
 801d02a:	b138      	cbz	r0, 801d03c <_svfiprintf_r+0x150>
 801d02c:	9b04      	ldr	r3, [sp, #16]
 801d02e:	eba0 000a 	sub.w	r0, r0, sl
 801d032:	2240      	movs	r2, #64	@ 0x40
 801d034:	4082      	lsls	r2, r0
 801d036:	4313      	orrs	r3, r2
 801d038:	3401      	adds	r4, #1
 801d03a:	9304      	str	r3, [sp, #16]
 801d03c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d040:	4824      	ldr	r0, [pc, #144]	@ (801d0d4 <_svfiprintf_r+0x1e8>)
 801d042:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d046:	2206      	movs	r2, #6
 801d048:	f7e3 f8da 	bl	8000200 <memchr>
 801d04c:	2800      	cmp	r0, #0
 801d04e:	d036      	beq.n	801d0be <_svfiprintf_r+0x1d2>
 801d050:	4b21      	ldr	r3, [pc, #132]	@ (801d0d8 <_svfiprintf_r+0x1ec>)
 801d052:	bb1b      	cbnz	r3, 801d09c <_svfiprintf_r+0x1b0>
 801d054:	9b03      	ldr	r3, [sp, #12]
 801d056:	3307      	adds	r3, #7
 801d058:	f023 0307 	bic.w	r3, r3, #7
 801d05c:	3308      	adds	r3, #8
 801d05e:	9303      	str	r3, [sp, #12]
 801d060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d062:	4433      	add	r3, r6
 801d064:	9309      	str	r3, [sp, #36]	@ 0x24
 801d066:	e76a      	b.n	801cf3e <_svfiprintf_r+0x52>
 801d068:	fb0c 3202 	mla	r2, ip, r2, r3
 801d06c:	460c      	mov	r4, r1
 801d06e:	2001      	movs	r0, #1
 801d070:	e7a8      	b.n	801cfc4 <_svfiprintf_r+0xd8>
 801d072:	2300      	movs	r3, #0
 801d074:	3401      	adds	r4, #1
 801d076:	9305      	str	r3, [sp, #20]
 801d078:	4619      	mov	r1, r3
 801d07a:	f04f 0c0a 	mov.w	ip, #10
 801d07e:	4620      	mov	r0, r4
 801d080:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d084:	3a30      	subs	r2, #48	@ 0x30
 801d086:	2a09      	cmp	r2, #9
 801d088:	d903      	bls.n	801d092 <_svfiprintf_r+0x1a6>
 801d08a:	2b00      	cmp	r3, #0
 801d08c:	d0c6      	beq.n	801d01c <_svfiprintf_r+0x130>
 801d08e:	9105      	str	r1, [sp, #20]
 801d090:	e7c4      	b.n	801d01c <_svfiprintf_r+0x130>
 801d092:	fb0c 2101 	mla	r1, ip, r1, r2
 801d096:	4604      	mov	r4, r0
 801d098:	2301      	movs	r3, #1
 801d09a:	e7f0      	b.n	801d07e <_svfiprintf_r+0x192>
 801d09c:	ab03      	add	r3, sp, #12
 801d09e:	9300      	str	r3, [sp, #0]
 801d0a0:	462a      	mov	r2, r5
 801d0a2:	4b0e      	ldr	r3, [pc, #56]	@ (801d0dc <_svfiprintf_r+0x1f0>)
 801d0a4:	a904      	add	r1, sp, #16
 801d0a6:	4638      	mov	r0, r7
 801d0a8:	f7fc fb10 	bl	80196cc <_printf_float>
 801d0ac:	1c42      	adds	r2, r0, #1
 801d0ae:	4606      	mov	r6, r0
 801d0b0:	d1d6      	bne.n	801d060 <_svfiprintf_r+0x174>
 801d0b2:	89ab      	ldrh	r3, [r5, #12]
 801d0b4:	065b      	lsls	r3, r3, #25
 801d0b6:	f53f af2d 	bmi.w	801cf14 <_svfiprintf_r+0x28>
 801d0ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d0bc:	e72c      	b.n	801cf18 <_svfiprintf_r+0x2c>
 801d0be:	ab03      	add	r3, sp, #12
 801d0c0:	9300      	str	r3, [sp, #0]
 801d0c2:	462a      	mov	r2, r5
 801d0c4:	4b05      	ldr	r3, [pc, #20]	@ (801d0dc <_svfiprintf_r+0x1f0>)
 801d0c6:	a904      	add	r1, sp, #16
 801d0c8:	4638      	mov	r0, r7
 801d0ca:	f7fc fd97 	bl	8019bfc <_printf_i>
 801d0ce:	e7ed      	b.n	801d0ac <_svfiprintf_r+0x1c0>
 801d0d0:	0801ec48 	.word	0x0801ec48
 801d0d4:	0801ec52 	.word	0x0801ec52
 801d0d8:	080196cd 	.word	0x080196cd
 801d0dc:	0801ce35 	.word	0x0801ce35
 801d0e0:	0801ec4e 	.word	0x0801ec4e

0801d0e4 <__sfputc_r>:
 801d0e4:	6893      	ldr	r3, [r2, #8]
 801d0e6:	3b01      	subs	r3, #1
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	b410      	push	{r4}
 801d0ec:	6093      	str	r3, [r2, #8]
 801d0ee:	da08      	bge.n	801d102 <__sfputc_r+0x1e>
 801d0f0:	6994      	ldr	r4, [r2, #24]
 801d0f2:	42a3      	cmp	r3, r4
 801d0f4:	db01      	blt.n	801d0fa <__sfputc_r+0x16>
 801d0f6:	290a      	cmp	r1, #10
 801d0f8:	d103      	bne.n	801d102 <__sfputc_r+0x1e>
 801d0fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d0fe:	f7fd bab3 	b.w	801a668 <__swbuf_r>
 801d102:	6813      	ldr	r3, [r2, #0]
 801d104:	1c58      	adds	r0, r3, #1
 801d106:	6010      	str	r0, [r2, #0]
 801d108:	7019      	strb	r1, [r3, #0]
 801d10a:	4608      	mov	r0, r1
 801d10c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d110:	4770      	bx	lr

0801d112 <__sfputs_r>:
 801d112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d114:	4606      	mov	r6, r0
 801d116:	460f      	mov	r7, r1
 801d118:	4614      	mov	r4, r2
 801d11a:	18d5      	adds	r5, r2, r3
 801d11c:	42ac      	cmp	r4, r5
 801d11e:	d101      	bne.n	801d124 <__sfputs_r+0x12>
 801d120:	2000      	movs	r0, #0
 801d122:	e007      	b.n	801d134 <__sfputs_r+0x22>
 801d124:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d128:	463a      	mov	r2, r7
 801d12a:	4630      	mov	r0, r6
 801d12c:	f7ff ffda 	bl	801d0e4 <__sfputc_r>
 801d130:	1c43      	adds	r3, r0, #1
 801d132:	d1f3      	bne.n	801d11c <__sfputs_r+0xa>
 801d134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d138 <_vfiprintf_r>:
 801d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d13c:	460d      	mov	r5, r1
 801d13e:	b09d      	sub	sp, #116	@ 0x74
 801d140:	4614      	mov	r4, r2
 801d142:	4698      	mov	r8, r3
 801d144:	4606      	mov	r6, r0
 801d146:	b118      	cbz	r0, 801d150 <_vfiprintf_r+0x18>
 801d148:	6a03      	ldr	r3, [r0, #32]
 801d14a:	b90b      	cbnz	r3, 801d150 <_vfiprintf_r+0x18>
 801d14c:	f7fd f916 	bl	801a37c <__sinit>
 801d150:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d152:	07d9      	lsls	r1, r3, #31
 801d154:	d405      	bmi.n	801d162 <_vfiprintf_r+0x2a>
 801d156:	89ab      	ldrh	r3, [r5, #12]
 801d158:	059a      	lsls	r2, r3, #22
 801d15a:	d402      	bmi.n	801d162 <_vfiprintf_r+0x2a>
 801d15c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d15e:	f7fd fc4a 	bl	801a9f6 <__retarget_lock_acquire_recursive>
 801d162:	89ab      	ldrh	r3, [r5, #12]
 801d164:	071b      	lsls	r3, r3, #28
 801d166:	d501      	bpl.n	801d16c <_vfiprintf_r+0x34>
 801d168:	692b      	ldr	r3, [r5, #16]
 801d16a:	b99b      	cbnz	r3, 801d194 <_vfiprintf_r+0x5c>
 801d16c:	4629      	mov	r1, r5
 801d16e:	4630      	mov	r0, r6
 801d170:	f7fd fab8 	bl	801a6e4 <__swsetup_r>
 801d174:	b170      	cbz	r0, 801d194 <_vfiprintf_r+0x5c>
 801d176:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d178:	07dc      	lsls	r4, r3, #31
 801d17a:	d504      	bpl.n	801d186 <_vfiprintf_r+0x4e>
 801d17c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d180:	b01d      	add	sp, #116	@ 0x74
 801d182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d186:	89ab      	ldrh	r3, [r5, #12]
 801d188:	0598      	lsls	r0, r3, #22
 801d18a:	d4f7      	bmi.n	801d17c <_vfiprintf_r+0x44>
 801d18c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d18e:	f7fd fc33 	bl	801a9f8 <__retarget_lock_release_recursive>
 801d192:	e7f3      	b.n	801d17c <_vfiprintf_r+0x44>
 801d194:	2300      	movs	r3, #0
 801d196:	9309      	str	r3, [sp, #36]	@ 0x24
 801d198:	2320      	movs	r3, #32
 801d19a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d19e:	f8cd 800c 	str.w	r8, [sp, #12]
 801d1a2:	2330      	movs	r3, #48	@ 0x30
 801d1a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d354 <_vfiprintf_r+0x21c>
 801d1a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d1ac:	f04f 0901 	mov.w	r9, #1
 801d1b0:	4623      	mov	r3, r4
 801d1b2:	469a      	mov	sl, r3
 801d1b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d1b8:	b10a      	cbz	r2, 801d1be <_vfiprintf_r+0x86>
 801d1ba:	2a25      	cmp	r2, #37	@ 0x25
 801d1bc:	d1f9      	bne.n	801d1b2 <_vfiprintf_r+0x7a>
 801d1be:	ebba 0b04 	subs.w	fp, sl, r4
 801d1c2:	d00b      	beq.n	801d1dc <_vfiprintf_r+0xa4>
 801d1c4:	465b      	mov	r3, fp
 801d1c6:	4622      	mov	r2, r4
 801d1c8:	4629      	mov	r1, r5
 801d1ca:	4630      	mov	r0, r6
 801d1cc:	f7ff ffa1 	bl	801d112 <__sfputs_r>
 801d1d0:	3001      	adds	r0, #1
 801d1d2:	f000 80a7 	beq.w	801d324 <_vfiprintf_r+0x1ec>
 801d1d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d1d8:	445a      	add	r2, fp
 801d1da:	9209      	str	r2, [sp, #36]	@ 0x24
 801d1dc:	f89a 3000 	ldrb.w	r3, [sl]
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	f000 809f 	beq.w	801d324 <_vfiprintf_r+0x1ec>
 801d1e6:	2300      	movs	r3, #0
 801d1e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d1ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d1f0:	f10a 0a01 	add.w	sl, sl, #1
 801d1f4:	9304      	str	r3, [sp, #16]
 801d1f6:	9307      	str	r3, [sp, #28]
 801d1f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d1fc:	931a      	str	r3, [sp, #104]	@ 0x68
 801d1fe:	4654      	mov	r4, sl
 801d200:	2205      	movs	r2, #5
 801d202:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d206:	4853      	ldr	r0, [pc, #332]	@ (801d354 <_vfiprintf_r+0x21c>)
 801d208:	f7e2 fffa 	bl	8000200 <memchr>
 801d20c:	9a04      	ldr	r2, [sp, #16]
 801d20e:	b9d8      	cbnz	r0, 801d248 <_vfiprintf_r+0x110>
 801d210:	06d1      	lsls	r1, r2, #27
 801d212:	bf44      	itt	mi
 801d214:	2320      	movmi	r3, #32
 801d216:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d21a:	0713      	lsls	r3, r2, #28
 801d21c:	bf44      	itt	mi
 801d21e:	232b      	movmi	r3, #43	@ 0x2b
 801d220:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d224:	f89a 3000 	ldrb.w	r3, [sl]
 801d228:	2b2a      	cmp	r3, #42	@ 0x2a
 801d22a:	d015      	beq.n	801d258 <_vfiprintf_r+0x120>
 801d22c:	9a07      	ldr	r2, [sp, #28]
 801d22e:	4654      	mov	r4, sl
 801d230:	2000      	movs	r0, #0
 801d232:	f04f 0c0a 	mov.w	ip, #10
 801d236:	4621      	mov	r1, r4
 801d238:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d23c:	3b30      	subs	r3, #48	@ 0x30
 801d23e:	2b09      	cmp	r3, #9
 801d240:	d94b      	bls.n	801d2da <_vfiprintf_r+0x1a2>
 801d242:	b1b0      	cbz	r0, 801d272 <_vfiprintf_r+0x13a>
 801d244:	9207      	str	r2, [sp, #28]
 801d246:	e014      	b.n	801d272 <_vfiprintf_r+0x13a>
 801d248:	eba0 0308 	sub.w	r3, r0, r8
 801d24c:	fa09 f303 	lsl.w	r3, r9, r3
 801d250:	4313      	orrs	r3, r2
 801d252:	9304      	str	r3, [sp, #16]
 801d254:	46a2      	mov	sl, r4
 801d256:	e7d2      	b.n	801d1fe <_vfiprintf_r+0xc6>
 801d258:	9b03      	ldr	r3, [sp, #12]
 801d25a:	1d19      	adds	r1, r3, #4
 801d25c:	681b      	ldr	r3, [r3, #0]
 801d25e:	9103      	str	r1, [sp, #12]
 801d260:	2b00      	cmp	r3, #0
 801d262:	bfbb      	ittet	lt
 801d264:	425b      	neglt	r3, r3
 801d266:	f042 0202 	orrlt.w	r2, r2, #2
 801d26a:	9307      	strge	r3, [sp, #28]
 801d26c:	9307      	strlt	r3, [sp, #28]
 801d26e:	bfb8      	it	lt
 801d270:	9204      	strlt	r2, [sp, #16]
 801d272:	7823      	ldrb	r3, [r4, #0]
 801d274:	2b2e      	cmp	r3, #46	@ 0x2e
 801d276:	d10a      	bne.n	801d28e <_vfiprintf_r+0x156>
 801d278:	7863      	ldrb	r3, [r4, #1]
 801d27a:	2b2a      	cmp	r3, #42	@ 0x2a
 801d27c:	d132      	bne.n	801d2e4 <_vfiprintf_r+0x1ac>
 801d27e:	9b03      	ldr	r3, [sp, #12]
 801d280:	1d1a      	adds	r2, r3, #4
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	9203      	str	r2, [sp, #12]
 801d286:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d28a:	3402      	adds	r4, #2
 801d28c:	9305      	str	r3, [sp, #20]
 801d28e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d364 <_vfiprintf_r+0x22c>
 801d292:	7821      	ldrb	r1, [r4, #0]
 801d294:	2203      	movs	r2, #3
 801d296:	4650      	mov	r0, sl
 801d298:	f7e2 ffb2 	bl	8000200 <memchr>
 801d29c:	b138      	cbz	r0, 801d2ae <_vfiprintf_r+0x176>
 801d29e:	9b04      	ldr	r3, [sp, #16]
 801d2a0:	eba0 000a 	sub.w	r0, r0, sl
 801d2a4:	2240      	movs	r2, #64	@ 0x40
 801d2a6:	4082      	lsls	r2, r0
 801d2a8:	4313      	orrs	r3, r2
 801d2aa:	3401      	adds	r4, #1
 801d2ac:	9304      	str	r3, [sp, #16]
 801d2ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d2b2:	4829      	ldr	r0, [pc, #164]	@ (801d358 <_vfiprintf_r+0x220>)
 801d2b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d2b8:	2206      	movs	r2, #6
 801d2ba:	f7e2 ffa1 	bl	8000200 <memchr>
 801d2be:	2800      	cmp	r0, #0
 801d2c0:	d03f      	beq.n	801d342 <_vfiprintf_r+0x20a>
 801d2c2:	4b26      	ldr	r3, [pc, #152]	@ (801d35c <_vfiprintf_r+0x224>)
 801d2c4:	bb1b      	cbnz	r3, 801d30e <_vfiprintf_r+0x1d6>
 801d2c6:	9b03      	ldr	r3, [sp, #12]
 801d2c8:	3307      	adds	r3, #7
 801d2ca:	f023 0307 	bic.w	r3, r3, #7
 801d2ce:	3308      	adds	r3, #8
 801d2d0:	9303      	str	r3, [sp, #12]
 801d2d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d2d4:	443b      	add	r3, r7
 801d2d6:	9309      	str	r3, [sp, #36]	@ 0x24
 801d2d8:	e76a      	b.n	801d1b0 <_vfiprintf_r+0x78>
 801d2da:	fb0c 3202 	mla	r2, ip, r2, r3
 801d2de:	460c      	mov	r4, r1
 801d2e0:	2001      	movs	r0, #1
 801d2e2:	e7a8      	b.n	801d236 <_vfiprintf_r+0xfe>
 801d2e4:	2300      	movs	r3, #0
 801d2e6:	3401      	adds	r4, #1
 801d2e8:	9305      	str	r3, [sp, #20]
 801d2ea:	4619      	mov	r1, r3
 801d2ec:	f04f 0c0a 	mov.w	ip, #10
 801d2f0:	4620      	mov	r0, r4
 801d2f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d2f6:	3a30      	subs	r2, #48	@ 0x30
 801d2f8:	2a09      	cmp	r2, #9
 801d2fa:	d903      	bls.n	801d304 <_vfiprintf_r+0x1cc>
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	d0c6      	beq.n	801d28e <_vfiprintf_r+0x156>
 801d300:	9105      	str	r1, [sp, #20]
 801d302:	e7c4      	b.n	801d28e <_vfiprintf_r+0x156>
 801d304:	fb0c 2101 	mla	r1, ip, r1, r2
 801d308:	4604      	mov	r4, r0
 801d30a:	2301      	movs	r3, #1
 801d30c:	e7f0      	b.n	801d2f0 <_vfiprintf_r+0x1b8>
 801d30e:	ab03      	add	r3, sp, #12
 801d310:	9300      	str	r3, [sp, #0]
 801d312:	462a      	mov	r2, r5
 801d314:	4b12      	ldr	r3, [pc, #72]	@ (801d360 <_vfiprintf_r+0x228>)
 801d316:	a904      	add	r1, sp, #16
 801d318:	4630      	mov	r0, r6
 801d31a:	f7fc f9d7 	bl	80196cc <_printf_float>
 801d31e:	4607      	mov	r7, r0
 801d320:	1c78      	adds	r0, r7, #1
 801d322:	d1d6      	bne.n	801d2d2 <_vfiprintf_r+0x19a>
 801d324:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d326:	07d9      	lsls	r1, r3, #31
 801d328:	d405      	bmi.n	801d336 <_vfiprintf_r+0x1fe>
 801d32a:	89ab      	ldrh	r3, [r5, #12]
 801d32c:	059a      	lsls	r2, r3, #22
 801d32e:	d402      	bmi.n	801d336 <_vfiprintf_r+0x1fe>
 801d330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d332:	f7fd fb61 	bl	801a9f8 <__retarget_lock_release_recursive>
 801d336:	89ab      	ldrh	r3, [r5, #12]
 801d338:	065b      	lsls	r3, r3, #25
 801d33a:	f53f af1f 	bmi.w	801d17c <_vfiprintf_r+0x44>
 801d33e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d340:	e71e      	b.n	801d180 <_vfiprintf_r+0x48>
 801d342:	ab03      	add	r3, sp, #12
 801d344:	9300      	str	r3, [sp, #0]
 801d346:	462a      	mov	r2, r5
 801d348:	4b05      	ldr	r3, [pc, #20]	@ (801d360 <_vfiprintf_r+0x228>)
 801d34a:	a904      	add	r1, sp, #16
 801d34c:	4630      	mov	r0, r6
 801d34e:	f7fc fc55 	bl	8019bfc <_printf_i>
 801d352:	e7e4      	b.n	801d31e <_vfiprintf_r+0x1e6>
 801d354:	0801ec48 	.word	0x0801ec48
 801d358:	0801ec52 	.word	0x0801ec52
 801d35c:	080196cd 	.word	0x080196cd
 801d360:	0801d113 	.word	0x0801d113
 801d364:	0801ec4e 	.word	0x0801ec4e

0801d368 <__sflush_r>:
 801d368:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d370:	0716      	lsls	r6, r2, #28
 801d372:	4605      	mov	r5, r0
 801d374:	460c      	mov	r4, r1
 801d376:	d454      	bmi.n	801d422 <__sflush_r+0xba>
 801d378:	684b      	ldr	r3, [r1, #4]
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	dc02      	bgt.n	801d384 <__sflush_r+0x1c>
 801d37e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d380:	2b00      	cmp	r3, #0
 801d382:	dd48      	ble.n	801d416 <__sflush_r+0xae>
 801d384:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d386:	2e00      	cmp	r6, #0
 801d388:	d045      	beq.n	801d416 <__sflush_r+0xae>
 801d38a:	2300      	movs	r3, #0
 801d38c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d390:	682f      	ldr	r7, [r5, #0]
 801d392:	6a21      	ldr	r1, [r4, #32]
 801d394:	602b      	str	r3, [r5, #0]
 801d396:	d030      	beq.n	801d3fa <__sflush_r+0x92>
 801d398:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d39a:	89a3      	ldrh	r3, [r4, #12]
 801d39c:	0759      	lsls	r1, r3, #29
 801d39e:	d505      	bpl.n	801d3ac <__sflush_r+0x44>
 801d3a0:	6863      	ldr	r3, [r4, #4]
 801d3a2:	1ad2      	subs	r2, r2, r3
 801d3a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d3a6:	b10b      	cbz	r3, 801d3ac <__sflush_r+0x44>
 801d3a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d3aa:	1ad2      	subs	r2, r2, r3
 801d3ac:	2300      	movs	r3, #0
 801d3ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d3b0:	6a21      	ldr	r1, [r4, #32]
 801d3b2:	4628      	mov	r0, r5
 801d3b4:	47b0      	blx	r6
 801d3b6:	1c43      	adds	r3, r0, #1
 801d3b8:	89a3      	ldrh	r3, [r4, #12]
 801d3ba:	d106      	bne.n	801d3ca <__sflush_r+0x62>
 801d3bc:	6829      	ldr	r1, [r5, #0]
 801d3be:	291d      	cmp	r1, #29
 801d3c0:	d82b      	bhi.n	801d41a <__sflush_r+0xb2>
 801d3c2:	4a2a      	ldr	r2, [pc, #168]	@ (801d46c <__sflush_r+0x104>)
 801d3c4:	410a      	asrs	r2, r1
 801d3c6:	07d6      	lsls	r6, r2, #31
 801d3c8:	d427      	bmi.n	801d41a <__sflush_r+0xb2>
 801d3ca:	2200      	movs	r2, #0
 801d3cc:	6062      	str	r2, [r4, #4]
 801d3ce:	04d9      	lsls	r1, r3, #19
 801d3d0:	6922      	ldr	r2, [r4, #16]
 801d3d2:	6022      	str	r2, [r4, #0]
 801d3d4:	d504      	bpl.n	801d3e0 <__sflush_r+0x78>
 801d3d6:	1c42      	adds	r2, r0, #1
 801d3d8:	d101      	bne.n	801d3de <__sflush_r+0x76>
 801d3da:	682b      	ldr	r3, [r5, #0]
 801d3dc:	b903      	cbnz	r3, 801d3e0 <__sflush_r+0x78>
 801d3de:	6560      	str	r0, [r4, #84]	@ 0x54
 801d3e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d3e2:	602f      	str	r7, [r5, #0]
 801d3e4:	b1b9      	cbz	r1, 801d416 <__sflush_r+0xae>
 801d3e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d3ea:	4299      	cmp	r1, r3
 801d3ec:	d002      	beq.n	801d3f4 <__sflush_r+0x8c>
 801d3ee:	4628      	mov	r0, r5
 801d3f0:	f7fe f996 	bl	801b720 <_free_r>
 801d3f4:	2300      	movs	r3, #0
 801d3f6:	6363      	str	r3, [r4, #52]	@ 0x34
 801d3f8:	e00d      	b.n	801d416 <__sflush_r+0xae>
 801d3fa:	2301      	movs	r3, #1
 801d3fc:	4628      	mov	r0, r5
 801d3fe:	47b0      	blx	r6
 801d400:	4602      	mov	r2, r0
 801d402:	1c50      	adds	r0, r2, #1
 801d404:	d1c9      	bne.n	801d39a <__sflush_r+0x32>
 801d406:	682b      	ldr	r3, [r5, #0]
 801d408:	2b00      	cmp	r3, #0
 801d40a:	d0c6      	beq.n	801d39a <__sflush_r+0x32>
 801d40c:	2b1d      	cmp	r3, #29
 801d40e:	d001      	beq.n	801d414 <__sflush_r+0xac>
 801d410:	2b16      	cmp	r3, #22
 801d412:	d11e      	bne.n	801d452 <__sflush_r+0xea>
 801d414:	602f      	str	r7, [r5, #0]
 801d416:	2000      	movs	r0, #0
 801d418:	e022      	b.n	801d460 <__sflush_r+0xf8>
 801d41a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d41e:	b21b      	sxth	r3, r3
 801d420:	e01b      	b.n	801d45a <__sflush_r+0xf2>
 801d422:	690f      	ldr	r7, [r1, #16]
 801d424:	2f00      	cmp	r7, #0
 801d426:	d0f6      	beq.n	801d416 <__sflush_r+0xae>
 801d428:	0793      	lsls	r3, r2, #30
 801d42a:	680e      	ldr	r6, [r1, #0]
 801d42c:	bf08      	it	eq
 801d42e:	694b      	ldreq	r3, [r1, #20]
 801d430:	600f      	str	r7, [r1, #0]
 801d432:	bf18      	it	ne
 801d434:	2300      	movne	r3, #0
 801d436:	eba6 0807 	sub.w	r8, r6, r7
 801d43a:	608b      	str	r3, [r1, #8]
 801d43c:	f1b8 0f00 	cmp.w	r8, #0
 801d440:	dde9      	ble.n	801d416 <__sflush_r+0xae>
 801d442:	6a21      	ldr	r1, [r4, #32]
 801d444:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d446:	4643      	mov	r3, r8
 801d448:	463a      	mov	r2, r7
 801d44a:	4628      	mov	r0, r5
 801d44c:	47b0      	blx	r6
 801d44e:	2800      	cmp	r0, #0
 801d450:	dc08      	bgt.n	801d464 <__sflush_r+0xfc>
 801d452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d45a:	81a3      	strh	r3, [r4, #12]
 801d45c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d464:	4407      	add	r7, r0
 801d466:	eba8 0800 	sub.w	r8, r8, r0
 801d46a:	e7e7      	b.n	801d43c <__sflush_r+0xd4>
 801d46c:	dfbffffe 	.word	0xdfbffffe

0801d470 <_fflush_r>:
 801d470:	b538      	push	{r3, r4, r5, lr}
 801d472:	690b      	ldr	r3, [r1, #16]
 801d474:	4605      	mov	r5, r0
 801d476:	460c      	mov	r4, r1
 801d478:	b913      	cbnz	r3, 801d480 <_fflush_r+0x10>
 801d47a:	2500      	movs	r5, #0
 801d47c:	4628      	mov	r0, r5
 801d47e:	bd38      	pop	{r3, r4, r5, pc}
 801d480:	b118      	cbz	r0, 801d48a <_fflush_r+0x1a>
 801d482:	6a03      	ldr	r3, [r0, #32]
 801d484:	b90b      	cbnz	r3, 801d48a <_fflush_r+0x1a>
 801d486:	f7fc ff79 	bl	801a37c <__sinit>
 801d48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d48e:	2b00      	cmp	r3, #0
 801d490:	d0f3      	beq.n	801d47a <_fflush_r+0xa>
 801d492:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d494:	07d0      	lsls	r0, r2, #31
 801d496:	d404      	bmi.n	801d4a2 <_fflush_r+0x32>
 801d498:	0599      	lsls	r1, r3, #22
 801d49a:	d402      	bmi.n	801d4a2 <_fflush_r+0x32>
 801d49c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d49e:	f7fd faaa 	bl	801a9f6 <__retarget_lock_acquire_recursive>
 801d4a2:	4628      	mov	r0, r5
 801d4a4:	4621      	mov	r1, r4
 801d4a6:	f7ff ff5f 	bl	801d368 <__sflush_r>
 801d4aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d4ac:	07da      	lsls	r2, r3, #31
 801d4ae:	4605      	mov	r5, r0
 801d4b0:	d4e4      	bmi.n	801d47c <_fflush_r+0xc>
 801d4b2:	89a3      	ldrh	r3, [r4, #12]
 801d4b4:	059b      	lsls	r3, r3, #22
 801d4b6:	d4e1      	bmi.n	801d47c <_fflush_r+0xc>
 801d4b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d4ba:	f7fd fa9d 	bl	801a9f8 <__retarget_lock_release_recursive>
 801d4be:	e7dd      	b.n	801d47c <_fflush_r+0xc>

0801d4c0 <fiprintf>:
 801d4c0:	b40e      	push	{r1, r2, r3}
 801d4c2:	b503      	push	{r0, r1, lr}
 801d4c4:	4601      	mov	r1, r0
 801d4c6:	ab03      	add	r3, sp, #12
 801d4c8:	4805      	ldr	r0, [pc, #20]	@ (801d4e0 <fiprintf+0x20>)
 801d4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 801d4ce:	6800      	ldr	r0, [r0, #0]
 801d4d0:	9301      	str	r3, [sp, #4]
 801d4d2:	f7ff fe31 	bl	801d138 <_vfiprintf_r>
 801d4d6:	b002      	add	sp, #8
 801d4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 801d4dc:	b003      	add	sp, #12
 801d4de:	4770      	bx	lr
 801d4e0:	20000090 	.word	0x20000090

0801d4e4 <__swhatbuf_r>:
 801d4e4:	b570      	push	{r4, r5, r6, lr}
 801d4e6:	460c      	mov	r4, r1
 801d4e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4ec:	2900      	cmp	r1, #0
 801d4ee:	b096      	sub	sp, #88	@ 0x58
 801d4f0:	4615      	mov	r5, r2
 801d4f2:	461e      	mov	r6, r3
 801d4f4:	da0d      	bge.n	801d512 <__swhatbuf_r+0x2e>
 801d4f6:	89a3      	ldrh	r3, [r4, #12]
 801d4f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d4fc:	f04f 0100 	mov.w	r1, #0
 801d500:	bf14      	ite	ne
 801d502:	2340      	movne	r3, #64	@ 0x40
 801d504:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d508:	2000      	movs	r0, #0
 801d50a:	6031      	str	r1, [r6, #0]
 801d50c:	602b      	str	r3, [r5, #0]
 801d50e:	b016      	add	sp, #88	@ 0x58
 801d510:	bd70      	pop	{r4, r5, r6, pc}
 801d512:	466a      	mov	r2, sp
 801d514:	f000 f848 	bl	801d5a8 <_fstat_r>
 801d518:	2800      	cmp	r0, #0
 801d51a:	dbec      	blt.n	801d4f6 <__swhatbuf_r+0x12>
 801d51c:	9901      	ldr	r1, [sp, #4]
 801d51e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d522:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d526:	4259      	negs	r1, r3
 801d528:	4159      	adcs	r1, r3
 801d52a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d52e:	e7eb      	b.n	801d508 <__swhatbuf_r+0x24>

0801d530 <__smakebuf_r>:
 801d530:	898b      	ldrh	r3, [r1, #12]
 801d532:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d534:	079d      	lsls	r5, r3, #30
 801d536:	4606      	mov	r6, r0
 801d538:	460c      	mov	r4, r1
 801d53a:	d507      	bpl.n	801d54c <__smakebuf_r+0x1c>
 801d53c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d540:	6023      	str	r3, [r4, #0]
 801d542:	6123      	str	r3, [r4, #16]
 801d544:	2301      	movs	r3, #1
 801d546:	6163      	str	r3, [r4, #20]
 801d548:	b003      	add	sp, #12
 801d54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d54c:	ab01      	add	r3, sp, #4
 801d54e:	466a      	mov	r2, sp
 801d550:	f7ff ffc8 	bl	801d4e4 <__swhatbuf_r>
 801d554:	9f00      	ldr	r7, [sp, #0]
 801d556:	4605      	mov	r5, r0
 801d558:	4639      	mov	r1, r7
 801d55a:	4630      	mov	r0, r6
 801d55c:	f7fb fe70 	bl	8019240 <_malloc_r>
 801d560:	b948      	cbnz	r0, 801d576 <__smakebuf_r+0x46>
 801d562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d566:	059a      	lsls	r2, r3, #22
 801d568:	d4ee      	bmi.n	801d548 <__smakebuf_r+0x18>
 801d56a:	f023 0303 	bic.w	r3, r3, #3
 801d56e:	f043 0302 	orr.w	r3, r3, #2
 801d572:	81a3      	strh	r3, [r4, #12]
 801d574:	e7e2      	b.n	801d53c <__smakebuf_r+0xc>
 801d576:	89a3      	ldrh	r3, [r4, #12]
 801d578:	6020      	str	r0, [r4, #0]
 801d57a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d57e:	81a3      	strh	r3, [r4, #12]
 801d580:	9b01      	ldr	r3, [sp, #4]
 801d582:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d586:	b15b      	cbz	r3, 801d5a0 <__smakebuf_r+0x70>
 801d588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d58c:	4630      	mov	r0, r6
 801d58e:	f000 f81d 	bl	801d5cc <_isatty_r>
 801d592:	b128      	cbz	r0, 801d5a0 <__smakebuf_r+0x70>
 801d594:	89a3      	ldrh	r3, [r4, #12]
 801d596:	f023 0303 	bic.w	r3, r3, #3
 801d59a:	f043 0301 	orr.w	r3, r3, #1
 801d59e:	81a3      	strh	r3, [r4, #12]
 801d5a0:	89a3      	ldrh	r3, [r4, #12]
 801d5a2:	431d      	orrs	r5, r3
 801d5a4:	81a5      	strh	r5, [r4, #12]
 801d5a6:	e7cf      	b.n	801d548 <__smakebuf_r+0x18>

0801d5a8 <_fstat_r>:
 801d5a8:	b538      	push	{r3, r4, r5, lr}
 801d5aa:	4d07      	ldr	r5, [pc, #28]	@ (801d5c8 <_fstat_r+0x20>)
 801d5ac:	2300      	movs	r3, #0
 801d5ae:	4604      	mov	r4, r0
 801d5b0:	4608      	mov	r0, r1
 801d5b2:	4611      	mov	r1, r2
 801d5b4:	602b      	str	r3, [r5, #0]
 801d5b6:	f7e6 fe07 	bl	80041c8 <_fstat>
 801d5ba:	1c43      	adds	r3, r0, #1
 801d5bc:	d102      	bne.n	801d5c4 <_fstat_r+0x1c>
 801d5be:	682b      	ldr	r3, [r5, #0]
 801d5c0:	b103      	cbz	r3, 801d5c4 <_fstat_r+0x1c>
 801d5c2:	6023      	str	r3, [r4, #0]
 801d5c4:	bd38      	pop	{r3, r4, r5, pc}
 801d5c6:	bf00      	nop
 801d5c8:	20009ff0 	.word	0x20009ff0

0801d5cc <_isatty_r>:
 801d5cc:	b538      	push	{r3, r4, r5, lr}
 801d5ce:	4d06      	ldr	r5, [pc, #24]	@ (801d5e8 <_isatty_r+0x1c>)
 801d5d0:	2300      	movs	r3, #0
 801d5d2:	4604      	mov	r4, r0
 801d5d4:	4608      	mov	r0, r1
 801d5d6:	602b      	str	r3, [r5, #0]
 801d5d8:	f7e6 fe06 	bl	80041e8 <_isatty>
 801d5dc:	1c43      	adds	r3, r0, #1
 801d5de:	d102      	bne.n	801d5e6 <_isatty_r+0x1a>
 801d5e0:	682b      	ldr	r3, [r5, #0]
 801d5e2:	b103      	cbz	r3, 801d5e6 <_isatty_r+0x1a>
 801d5e4:	6023      	str	r3, [r4, #0]
 801d5e6:	bd38      	pop	{r3, r4, r5, pc}
 801d5e8:	20009ff0 	.word	0x20009ff0
 801d5ec:	00000000 	.word	0x00000000

0801d5f0 <nan>:
 801d5f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801d5f8 <nan+0x8>
 801d5f4:	4770      	bx	lr
 801d5f6:	bf00      	nop
 801d5f8:	00000000 	.word	0x00000000
 801d5fc:	7ff80000 	.word	0x7ff80000

0801d600 <abort>:
 801d600:	b508      	push	{r3, lr}
 801d602:	2006      	movs	r0, #6
 801d604:	f000 fb82 	bl	801dd0c <raise>
 801d608:	2001      	movs	r0, #1
 801d60a:	f7e6 fd8d 	bl	8004128 <_exit>

0801d60e <rshift>:
 801d60e:	6903      	ldr	r3, [r0, #16]
 801d610:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d618:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d61c:	f100 0414 	add.w	r4, r0, #20
 801d620:	dd45      	ble.n	801d6ae <rshift+0xa0>
 801d622:	f011 011f 	ands.w	r1, r1, #31
 801d626:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d62a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d62e:	d10c      	bne.n	801d64a <rshift+0x3c>
 801d630:	f100 0710 	add.w	r7, r0, #16
 801d634:	4629      	mov	r1, r5
 801d636:	42b1      	cmp	r1, r6
 801d638:	d334      	bcc.n	801d6a4 <rshift+0x96>
 801d63a:	1a9b      	subs	r3, r3, r2
 801d63c:	009b      	lsls	r3, r3, #2
 801d63e:	1eea      	subs	r2, r5, #3
 801d640:	4296      	cmp	r6, r2
 801d642:	bf38      	it	cc
 801d644:	2300      	movcc	r3, #0
 801d646:	4423      	add	r3, r4
 801d648:	e015      	b.n	801d676 <rshift+0x68>
 801d64a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d64e:	f1c1 0820 	rsb	r8, r1, #32
 801d652:	40cf      	lsrs	r7, r1
 801d654:	f105 0e04 	add.w	lr, r5, #4
 801d658:	46a1      	mov	r9, r4
 801d65a:	4576      	cmp	r6, lr
 801d65c:	46f4      	mov	ip, lr
 801d65e:	d815      	bhi.n	801d68c <rshift+0x7e>
 801d660:	1a9a      	subs	r2, r3, r2
 801d662:	0092      	lsls	r2, r2, #2
 801d664:	3a04      	subs	r2, #4
 801d666:	3501      	adds	r5, #1
 801d668:	42ae      	cmp	r6, r5
 801d66a:	bf38      	it	cc
 801d66c:	2200      	movcc	r2, #0
 801d66e:	18a3      	adds	r3, r4, r2
 801d670:	50a7      	str	r7, [r4, r2]
 801d672:	b107      	cbz	r7, 801d676 <rshift+0x68>
 801d674:	3304      	adds	r3, #4
 801d676:	1b1a      	subs	r2, r3, r4
 801d678:	42a3      	cmp	r3, r4
 801d67a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d67e:	bf08      	it	eq
 801d680:	2300      	moveq	r3, #0
 801d682:	6102      	str	r2, [r0, #16]
 801d684:	bf08      	it	eq
 801d686:	6143      	streq	r3, [r0, #20]
 801d688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d68c:	f8dc c000 	ldr.w	ip, [ip]
 801d690:	fa0c fc08 	lsl.w	ip, ip, r8
 801d694:	ea4c 0707 	orr.w	r7, ip, r7
 801d698:	f849 7b04 	str.w	r7, [r9], #4
 801d69c:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d6a0:	40cf      	lsrs	r7, r1
 801d6a2:	e7da      	b.n	801d65a <rshift+0x4c>
 801d6a4:	f851 cb04 	ldr.w	ip, [r1], #4
 801d6a8:	f847 cf04 	str.w	ip, [r7, #4]!
 801d6ac:	e7c3      	b.n	801d636 <rshift+0x28>
 801d6ae:	4623      	mov	r3, r4
 801d6b0:	e7e1      	b.n	801d676 <rshift+0x68>

0801d6b2 <__hexdig_fun>:
 801d6b2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801d6b6:	2b09      	cmp	r3, #9
 801d6b8:	d802      	bhi.n	801d6c0 <__hexdig_fun+0xe>
 801d6ba:	3820      	subs	r0, #32
 801d6bc:	b2c0      	uxtb	r0, r0
 801d6be:	4770      	bx	lr
 801d6c0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801d6c4:	2b05      	cmp	r3, #5
 801d6c6:	d801      	bhi.n	801d6cc <__hexdig_fun+0x1a>
 801d6c8:	3847      	subs	r0, #71	@ 0x47
 801d6ca:	e7f7      	b.n	801d6bc <__hexdig_fun+0xa>
 801d6cc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801d6d0:	2b05      	cmp	r3, #5
 801d6d2:	d801      	bhi.n	801d6d8 <__hexdig_fun+0x26>
 801d6d4:	3827      	subs	r0, #39	@ 0x27
 801d6d6:	e7f1      	b.n	801d6bc <__hexdig_fun+0xa>
 801d6d8:	2000      	movs	r0, #0
 801d6da:	4770      	bx	lr

0801d6dc <__gethex>:
 801d6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6e0:	b085      	sub	sp, #20
 801d6e2:	468a      	mov	sl, r1
 801d6e4:	9302      	str	r3, [sp, #8]
 801d6e6:	680b      	ldr	r3, [r1, #0]
 801d6e8:	9001      	str	r0, [sp, #4]
 801d6ea:	4690      	mov	r8, r2
 801d6ec:	1c9c      	adds	r4, r3, #2
 801d6ee:	46a1      	mov	r9, r4
 801d6f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 801d6f4:	2830      	cmp	r0, #48	@ 0x30
 801d6f6:	d0fa      	beq.n	801d6ee <__gethex+0x12>
 801d6f8:	eba9 0303 	sub.w	r3, r9, r3
 801d6fc:	f1a3 0b02 	sub.w	fp, r3, #2
 801d700:	f7ff ffd7 	bl	801d6b2 <__hexdig_fun>
 801d704:	4605      	mov	r5, r0
 801d706:	2800      	cmp	r0, #0
 801d708:	d168      	bne.n	801d7dc <__gethex+0x100>
 801d70a:	49a0      	ldr	r1, [pc, #640]	@ (801d98c <__gethex+0x2b0>)
 801d70c:	2201      	movs	r2, #1
 801d70e:	4648      	mov	r0, r9
 801d710:	f7fd f86d 	bl	801a7ee <strncmp>
 801d714:	4607      	mov	r7, r0
 801d716:	2800      	cmp	r0, #0
 801d718:	d167      	bne.n	801d7ea <__gethex+0x10e>
 801d71a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801d71e:	4626      	mov	r6, r4
 801d720:	f7ff ffc7 	bl	801d6b2 <__hexdig_fun>
 801d724:	2800      	cmp	r0, #0
 801d726:	d062      	beq.n	801d7ee <__gethex+0x112>
 801d728:	4623      	mov	r3, r4
 801d72a:	7818      	ldrb	r0, [r3, #0]
 801d72c:	2830      	cmp	r0, #48	@ 0x30
 801d72e:	4699      	mov	r9, r3
 801d730:	f103 0301 	add.w	r3, r3, #1
 801d734:	d0f9      	beq.n	801d72a <__gethex+0x4e>
 801d736:	f7ff ffbc 	bl	801d6b2 <__hexdig_fun>
 801d73a:	fab0 f580 	clz	r5, r0
 801d73e:	096d      	lsrs	r5, r5, #5
 801d740:	f04f 0b01 	mov.w	fp, #1
 801d744:	464a      	mov	r2, r9
 801d746:	4616      	mov	r6, r2
 801d748:	3201      	adds	r2, #1
 801d74a:	7830      	ldrb	r0, [r6, #0]
 801d74c:	f7ff ffb1 	bl	801d6b2 <__hexdig_fun>
 801d750:	2800      	cmp	r0, #0
 801d752:	d1f8      	bne.n	801d746 <__gethex+0x6a>
 801d754:	498d      	ldr	r1, [pc, #564]	@ (801d98c <__gethex+0x2b0>)
 801d756:	2201      	movs	r2, #1
 801d758:	4630      	mov	r0, r6
 801d75a:	f7fd f848 	bl	801a7ee <strncmp>
 801d75e:	2800      	cmp	r0, #0
 801d760:	d13f      	bne.n	801d7e2 <__gethex+0x106>
 801d762:	b944      	cbnz	r4, 801d776 <__gethex+0x9a>
 801d764:	1c74      	adds	r4, r6, #1
 801d766:	4622      	mov	r2, r4
 801d768:	4616      	mov	r6, r2
 801d76a:	3201      	adds	r2, #1
 801d76c:	7830      	ldrb	r0, [r6, #0]
 801d76e:	f7ff ffa0 	bl	801d6b2 <__hexdig_fun>
 801d772:	2800      	cmp	r0, #0
 801d774:	d1f8      	bne.n	801d768 <__gethex+0x8c>
 801d776:	1ba4      	subs	r4, r4, r6
 801d778:	00a7      	lsls	r7, r4, #2
 801d77a:	7833      	ldrb	r3, [r6, #0]
 801d77c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801d780:	2b50      	cmp	r3, #80	@ 0x50
 801d782:	d13e      	bne.n	801d802 <__gethex+0x126>
 801d784:	7873      	ldrb	r3, [r6, #1]
 801d786:	2b2b      	cmp	r3, #43	@ 0x2b
 801d788:	d033      	beq.n	801d7f2 <__gethex+0x116>
 801d78a:	2b2d      	cmp	r3, #45	@ 0x2d
 801d78c:	d034      	beq.n	801d7f8 <__gethex+0x11c>
 801d78e:	1c71      	adds	r1, r6, #1
 801d790:	2400      	movs	r4, #0
 801d792:	7808      	ldrb	r0, [r1, #0]
 801d794:	f7ff ff8d 	bl	801d6b2 <__hexdig_fun>
 801d798:	1e43      	subs	r3, r0, #1
 801d79a:	b2db      	uxtb	r3, r3
 801d79c:	2b18      	cmp	r3, #24
 801d79e:	d830      	bhi.n	801d802 <__gethex+0x126>
 801d7a0:	f1a0 0210 	sub.w	r2, r0, #16
 801d7a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d7a8:	f7ff ff83 	bl	801d6b2 <__hexdig_fun>
 801d7ac:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 801d7b0:	fa5f fc8c 	uxtb.w	ip, ip
 801d7b4:	f1bc 0f18 	cmp.w	ip, #24
 801d7b8:	f04f 030a 	mov.w	r3, #10
 801d7bc:	d91e      	bls.n	801d7fc <__gethex+0x120>
 801d7be:	b104      	cbz	r4, 801d7c2 <__gethex+0xe6>
 801d7c0:	4252      	negs	r2, r2
 801d7c2:	4417      	add	r7, r2
 801d7c4:	f8ca 1000 	str.w	r1, [sl]
 801d7c8:	b1ed      	cbz	r5, 801d806 <__gethex+0x12a>
 801d7ca:	f1bb 0f00 	cmp.w	fp, #0
 801d7ce:	bf0c      	ite	eq
 801d7d0:	2506      	moveq	r5, #6
 801d7d2:	2500      	movne	r5, #0
 801d7d4:	4628      	mov	r0, r5
 801d7d6:	b005      	add	sp, #20
 801d7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d7dc:	2500      	movs	r5, #0
 801d7de:	462c      	mov	r4, r5
 801d7e0:	e7b0      	b.n	801d744 <__gethex+0x68>
 801d7e2:	2c00      	cmp	r4, #0
 801d7e4:	d1c7      	bne.n	801d776 <__gethex+0x9a>
 801d7e6:	4627      	mov	r7, r4
 801d7e8:	e7c7      	b.n	801d77a <__gethex+0x9e>
 801d7ea:	464e      	mov	r6, r9
 801d7ec:	462f      	mov	r7, r5
 801d7ee:	2501      	movs	r5, #1
 801d7f0:	e7c3      	b.n	801d77a <__gethex+0x9e>
 801d7f2:	2400      	movs	r4, #0
 801d7f4:	1cb1      	adds	r1, r6, #2
 801d7f6:	e7cc      	b.n	801d792 <__gethex+0xb6>
 801d7f8:	2401      	movs	r4, #1
 801d7fa:	e7fb      	b.n	801d7f4 <__gethex+0x118>
 801d7fc:	fb03 0002 	mla	r0, r3, r2, r0
 801d800:	e7ce      	b.n	801d7a0 <__gethex+0xc4>
 801d802:	4631      	mov	r1, r6
 801d804:	e7de      	b.n	801d7c4 <__gethex+0xe8>
 801d806:	eba6 0309 	sub.w	r3, r6, r9
 801d80a:	3b01      	subs	r3, #1
 801d80c:	4629      	mov	r1, r5
 801d80e:	2b07      	cmp	r3, #7
 801d810:	dc0a      	bgt.n	801d828 <__gethex+0x14c>
 801d812:	9801      	ldr	r0, [sp, #4]
 801d814:	f7fd ffce 	bl	801b7b4 <_Balloc>
 801d818:	4604      	mov	r4, r0
 801d81a:	b940      	cbnz	r0, 801d82e <__gethex+0x152>
 801d81c:	4b5c      	ldr	r3, [pc, #368]	@ (801d990 <__gethex+0x2b4>)
 801d81e:	4602      	mov	r2, r0
 801d820:	21e4      	movs	r1, #228	@ 0xe4
 801d822:	485c      	ldr	r0, [pc, #368]	@ (801d994 <__gethex+0x2b8>)
 801d824:	f7fd f906 	bl	801aa34 <__assert_func>
 801d828:	3101      	adds	r1, #1
 801d82a:	105b      	asrs	r3, r3, #1
 801d82c:	e7ef      	b.n	801d80e <__gethex+0x132>
 801d82e:	f100 0a14 	add.w	sl, r0, #20
 801d832:	2300      	movs	r3, #0
 801d834:	4655      	mov	r5, sl
 801d836:	469b      	mov	fp, r3
 801d838:	45b1      	cmp	r9, r6
 801d83a:	d337      	bcc.n	801d8ac <__gethex+0x1d0>
 801d83c:	f845 bb04 	str.w	fp, [r5], #4
 801d840:	eba5 050a 	sub.w	r5, r5, sl
 801d844:	10ad      	asrs	r5, r5, #2
 801d846:	6125      	str	r5, [r4, #16]
 801d848:	4658      	mov	r0, fp
 801d84a:	f7fe f8a5 	bl	801b998 <__hi0bits>
 801d84e:	016d      	lsls	r5, r5, #5
 801d850:	f8d8 6000 	ldr.w	r6, [r8]
 801d854:	1a2d      	subs	r5, r5, r0
 801d856:	42b5      	cmp	r5, r6
 801d858:	dd54      	ble.n	801d904 <__gethex+0x228>
 801d85a:	1bad      	subs	r5, r5, r6
 801d85c:	4629      	mov	r1, r5
 801d85e:	4620      	mov	r0, r4
 801d860:	f7fe fc39 	bl	801c0d6 <__any_on>
 801d864:	4681      	mov	r9, r0
 801d866:	b178      	cbz	r0, 801d888 <__gethex+0x1ac>
 801d868:	1e6b      	subs	r3, r5, #1
 801d86a:	1159      	asrs	r1, r3, #5
 801d86c:	f003 021f 	and.w	r2, r3, #31
 801d870:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801d874:	f04f 0901 	mov.w	r9, #1
 801d878:	fa09 f202 	lsl.w	r2, r9, r2
 801d87c:	420a      	tst	r2, r1
 801d87e:	d003      	beq.n	801d888 <__gethex+0x1ac>
 801d880:	454b      	cmp	r3, r9
 801d882:	dc36      	bgt.n	801d8f2 <__gethex+0x216>
 801d884:	f04f 0902 	mov.w	r9, #2
 801d888:	4629      	mov	r1, r5
 801d88a:	4620      	mov	r0, r4
 801d88c:	f7ff febf 	bl	801d60e <rshift>
 801d890:	442f      	add	r7, r5
 801d892:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d896:	42bb      	cmp	r3, r7
 801d898:	da42      	bge.n	801d920 <__gethex+0x244>
 801d89a:	9801      	ldr	r0, [sp, #4]
 801d89c:	4621      	mov	r1, r4
 801d89e:	f7fd ffc9 	bl	801b834 <_Bfree>
 801d8a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d8a4:	2300      	movs	r3, #0
 801d8a6:	6013      	str	r3, [r2, #0]
 801d8a8:	25a3      	movs	r5, #163	@ 0xa3
 801d8aa:	e793      	b.n	801d7d4 <__gethex+0xf8>
 801d8ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801d8b0:	2a2e      	cmp	r2, #46	@ 0x2e
 801d8b2:	d012      	beq.n	801d8da <__gethex+0x1fe>
 801d8b4:	2b20      	cmp	r3, #32
 801d8b6:	d104      	bne.n	801d8c2 <__gethex+0x1e6>
 801d8b8:	f845 bb04 	str.w	fp, [r5], #4
 801d8bc:	f04f 0b00 	mov.w	fp, #0
 801d8c0:	465b      	mov	r3, fp
 801d8c2:	7830      	ldrb	r0, [r6, #0]
 801d8c4:	9303      	str	r3, [sp, #12]
 801d8c6:	f7ff fef4 	bl	801d6b2 <__hexdig_fun>
 801d8ca:	9b03      	ldr	r3, [sp, #12]
 801d8cc:	f000 000f 	and.w	r0, r0, #15
 801d8d0:	4098      	lsls	r0, r3
 801d8d2:	ea4b 0b00 	orr.w	fp, fp, r0
 801d8d6:	3304      	adds	r3, #4
 801d8d8:	e7ae      	b.n	801d838 <__gethex+0x15c>
 801d8da:	45b1      	cmp	r9, r6
 801d8dc:	d8ea      	bhi.n	801d8b4 <__gethex+0x1d8>
 801d8de:	492b      	ldr	r1, [pc, #172]	@ (801d98c <__gethex+0x2b0>)
 801d8e0:	9303      	str	r3, [sp, #12]
 801d8e2:	2201      	movs	r2, #1
 801d8e4:	4630      	mov	r0, r6
 801d8e6:	f7fc ff82 	bl	801a7ee <strncmp>
 801d8ea:	9b03      	ldr	r3, [sp, #12]
 801d8ec:	2800      	cmp	r0, #0
 801d8ee:	d1e1      	bne.n	801d8b4 <__gethex+0x1d8>
 801d8f0:	e7a2      	b.n	801d838 <__gethex+0x15c>
 801d8f2:	1ea9      	subs	r1, r5, #2
 801d8f4:	4620      	mov	r0, r4
 801d8f6:	f7fe fbee 	bl	801c0d6 <__any_on>
 801d8fa:	2800      	cmp	r0, #0
 801d8fc:	d0c2      	beq.n	801d884 <__gethex+0x1a8>
 801d8fe:	f04f 0903 	mov.w	r9, #3
 801d902:	e7c1      	b.n	801d888 <__gethex+0x1ac>
 801d904:	da09      	bge.n	801d91a <__gethex+0x23e>
 801d906:	1b75      	subs	r5, r6, r5
 801d908:	4621      	mov	r1, r4
 801d90a:	9801      	ldr	r0, [sp, #4]
 801d90c:	462a      	mov	r2, r5
 801d90e:	f7fe f9a9 	bl	801bc64 <__lshift>
 801d912:	1b7f      	subs	r7, r7, r5
 801d914:	4604      	mov	r4, r0
 801d916:	f100 0a14 	add.w	sl, r0, #20
 801d91a:	f04f 0900 	mov.w	r9, #0
 801d91e:	e7b8      	b.n	801d892 <__gethex+0x1b6>
 801d920:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d924:	42bd      	cmp	r5, r7
 801d926:	dd6f      	ble.n	801da08 <__gethex+0x32c>
 801d928:	1bed      	subs	r5, r5, r7
 801d92a:	42ae      	cmp	r6, r5
 801d92c:	dc34      	bgt.n	801d998 <__gethex+0x2bc>
 801d92e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d932:	2b02      	cmp	r3, #2
 801d934:	d022      	beq.n	801d97c <__gethex+0x2a0>
 801d936:	2b03      	cmp	r3, #3
 801d938:	d024      	beq.n	801d984 <__gethex+0x2a8>
 801d93a:	2b01      	cmp	r3, #1
 801d93c:	d115      	bne.n	801d96a <__gethex+0x28e>
 801d93e:	42ae      	cmp	r6, r5
 801d940:	d113      	bne.n	801d96a <__gethex+0x28e>
 801d942:	2e01      	cmp	r6, #1
 801d944:	d10b      	bne.n	801d95e <__gethex+0x282>
 801d946:	9a02      	ldr	r2, [sp, #8]
 801d948:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d94c:	6013      	str	r3, [r2, #0]
 801d94e:	2301      	movs	r3, #1
 801d950:	6123      	str	r3, [r4, #16]
 801d952:	f8ca 3000 	str.w	r3, [sl]
 801d956:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d958:	2562      	movs	r5, #98	@ 0x62
 801d95a:	601c      	str	r4, [r3, #0]
 801d95c:	e73a      	b.n	801d7d4 <__gethex+0xf8>
 801d95e:	1e71      	subs	r1, r6, #1
 801d960:	4620      	mov	r0, r4
 801d962:	f7fe fbb8 	bl	801c0d6 <__any_on>
 801d966:	2800      	cmp	r0, #0
 801d968:	d1ed      	bne.n	801d946 <__gethex+0x26a>
 801d96a:	9801      	ldr	r0, [sp, #4]
 801d96c:	4621      	mov	r1, r4
 801d96e:	f7fd ff61 	bl	801b834 <_Bfree>
 801d972:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d974:	2300      	movs	r3, #0
 801d976:	6013      	str	r3, [r2, #0]
 801d978:	2550      	movs	r5, #80	@ 0x50
 801d97a:	e72b      	b.n	801d7d4 <__gethex+0xf8>
 801d97c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d1f3      	bne.n	801d96a <__gethex+0x28e>
 801d982:	e7e0      	b.n	801d946 <__gethex+0x26a>
 801d984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d986:	2b00      	cmp	r3, #0
 801d988:	d1dd      	bne.n	801d946 <__gethex+0x26a>
 801d98a:	e7ee      	b.n	801d96a <__gethex+0x28e>
 801d98c:	0801ebf0 	.word	0x0801ebf0
 801d990:	0801ea8a 	.word	0x0801ea8a
 801d994:	0801ec61 	.word	0x0801ec61
 801d998:	1e6f      	subs	r7, r5, #1
 801d99a:	f1b9 0f00 	cmp.w	r9, #0
 801d99e:	d130      	bne.n	801da02 <__gethex+0x326>
 801d9a0:	b127      	cbz	r7, 801d9ac <__gethex+0x2d0>
 801d9a2:	4639      	mov	r1, r7
 801d9a4:	4620      	mov	r0, r4
 801d9a6:	f7fe fb96 	bl	801c0d6 <__any_on>
 801d9aa:	4681      	mov	r9, r0
 801d9ac:	117a      	asrs	r2, r7, #5
 801d9ae:	2301      	movs	r3, #1
 801d9b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801d9b4:	f007 071f 	and.w	r7, r7, #31
 801d9b8:	40bb      	lsls	r3, r7
 801d9ba:	4213      	tst	r3, r2
 801d9bc:	4629      	mov	r1, r5
 801d9be:	4620      	mov	r0, r4
 801d9c0:	bf18      	it	ne
 801d9c2:	f049 0902 	orrne.w	r9, r9, #2
 801d9c6:	f7ff fe22 	bl	801d60e <rshift>
 801d9ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801d9ce:	1b76      	subs	r6, r6, r5
 801d9d0:	2502      	movs	r5, #2
 801d9d2:	f1b9 0f00 	cmp.w	r9, #0
 801d9d6:	d047      	beq.n	801da68 <__gethex+0x38c>
 801d9d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d9dc:	2b02      	cmp	r3, #2
 801d9de:	d015      	beq.n	801da0c <__gethex+0x330>
 801d9e0:	2b03      	cmp	r3, #3
 801d9e2:	d017      	beq.n	801da14 <__gethex+0x338>
 801d9e4:	2b01      	cmp	r3, #1
 801d9e6:	d109      	bne.n	801d9fc <__gethex+0x320>
 801d9e8:	f019 0f02 	tst.w	r9, #2
 801d9ec:	d006      	beq.n	801d9fc <__gethex+0x320>
 801d9ee:	f8da 3000 	ldr.w	r3, [sl]
 801d9f2:	ea49 0903 	orr.w	r9, r9, r3
 801d9f6:	f019 0f01 	tst.w	r9, #1
 801d9fa:	d10e      	bne.n	801da1a <__gethex+0x33e>
 801d9fc:	f045 0510 	orr.w	r5, r5, #16
 801da00:	e032      	b.n	801da68 <__gethex+0x38c>
 801da02:	f04f 0901 	mov.w	r9, #1
 801da06:	e7d1      	b.n	801d9ac <__gethex+0x2d0>
 801da08:	2501      	movs	r5, #1
 801da0a:	e7e2      	b.n	801d9d2 <__gethex+0x2f6>
 801da0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da0e:	f1c3 0301 	rsb	r3, r3, #1
 801da12:	930f      	str	r3, [sp, #60]	@ 0x3c
 801da14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da16:	2b00      	cmp	r3, #0
 801da18:	d0f0      	beq.n	801d9fc <__gethex+0x320>
 801da1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801da1e:	f104 0314 	add.w	r3, r4, #20
 801da22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801da26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801da2a:	f04f 0c00 	mov.w	ip, #0
 801da2e:	4618      	mov	r0, r3
 801da30:	f853 2b04 	ldr.w	r2, [r3], #4
 801da34:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 801da38:	d01b      	beq.n	801da72 <__gethex+0x396>
 801da3a:	3201      	adds	r2, #1
 801da3c:	6002      	str	r2, [r0, #0]
 801da3e:	2d02      	cmp	r5, #2
 801da40:	f104 0314 	add.w	r3, r4, #20
 801da44:	d13c      	bne.n	801dac0 <__gethex+0x3e4>
 801da46:	f8d8 2000 	ldr.w	r2, [r8]
 801da4a:	3a01      	subs	r2, #1
 801da4c:	42b2      	cmp	r2, r6
 801da4e:	d109      	bne.n	801da64 <__gethex+0x388>
 801da50:	1171      	asrs	r1, r6, #5
 801da52:	2201      	movs	r2, #1
 801da54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801da58:	f006 061f 	and.w	r6, r6, #31
 801da5c:	fa02 f606 	lsl.w	r6, r2, r6
 801da60:	421e      	tst	r6, r3
 801da62:	d13a      	bne.n	801dada <__gethex+0x3fe>
 801da64:	f045 0520 	orr.w	r5, r5, #32
 801da68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801da6a:	601c      	str	r4, [r3, #0]
 801da6c:	9b02      	ldr	r3, [sp, #8]
 801da6e:	601f      	str	r7, [r3, #0]
 801da70:	e6b0      	b.n	801d7d4 <__gethex+0xf8>
 801da72:	4299      	cmp	r1, r3
 801da74:	f843 cc04 	str.w	ip, [r3, #-4]
 801da78:	d8d9      	bhi.n	801da2e <__gethex+0x352>
 801da7a:	68a3      	ldr	r3, [r4, #8]
 801da7c:	459b      	cmp	fp, r3
 801da7e:	db17      	blt.n	801dab0 <__gethex+0x3d4>
 801da80:	6861      	ldr	r1, [r4, #4]
 801da82:	9801      	ldr	r0, [sp, #4]
 801da84:	3101      	adds	r1, #1
 801da86:	f7fd fe95 	bl	801b7b4 <_Balloc>
 801da8a:	4681      	mov	r9, r0
 801da8c:	b918      	cbnz	r0, 801da96 <__gethex+0x3ba>
 801da8e:	4b1a      	ldr	r3, [pc, #104]	@ (801daf8 <__gethex+0x41c>)
 801da90:	4602      	mov	r2, r0
 801da92:	2184      	movs	r1, #132	@ 0x84
 801da94:	e6c5      	b.n	801d822 <__gethex+0x146>
 801da96:	6922      	ldr	r2, [r4, #16]
 801da98:	3202      	adds	r2, #2
 801da9a:	f104 010c 	add.w	r1, r4, #12
 801da9e:	0092      	lsls	r2, r2, #2
 801daa0:	300c      	adds	r0, #12
 801daa2:	f7fc ffb2 	bl	801aa0a <memcpy>
 801daa6:	4621      	mov	r1, r4
 801daa8:	9801      	ldr	r0, [sp, #4]
 801daaa:	f7fd fec3 	bl	801b834 <_Bfree>
 801daae:	464c      	mov	r4, r9
 801dab0:	6923      	ldr	r3, [r4, #16]
 801dab2:	1c5a      	adds	r2, r3, #1
 801dab4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801dab8:	6122      	str	r2, [r4, #16]
 801daba:	2201      	movs	r2, #1
 801dabc:	615a      	str	r2, [r3, #20]
 801dabe:	e7be      	b.n	801da3e <__gethex+0x362>
 801dac0:	6922      	ldr	r2, [r4, #16]
 801dac2:	455a      	cmp	r2, fp
 801dac4:	dd0b      	ble.n	801dade <__gethex+0x402>
 801dac6:	2101      	movs	r1, #1
 801dac8:	4620      	mov	r0, r4
 801daca:	f7ff fda0 	bl	801d60e <rshift>
 801dace:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801dad2:	3701      	adds	r7, #1
 801dad4:	42bb      	cmp	r3, r7
 801dad6:	f6ff aee0 	blt.w	801d89a <__gethex+0x1be>
 801dada:	2501      	movs	r5, #1
 801dadc:	e7c2      	b.n	801da64 <__gethex+0x388>
 801dade:	f016 061f 	ands.w	r6, r6, #31
 801dae2:	d0fa      	beq.n	801dada <__gethex+0x3fe>
 801dae4:	4453      	add	r3, sl
 801dae6:	f1c6 0620 	rsb	r6, r6, #32
 801daea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801daee:	f7fd ff53 	bl	801b998 <__hi0bits>
 801daf2:	42b0      	cmp	r0, r6
 801daf4:	dbe7      	blt.n	801dac6 <__gethex+0x3ea>
 801daf6:	e7f0      	b.n	801dada <__gethex+0x3fe>
 801daf8:	0801ea8a 	.word	0x0801ea8a

0801dafc <L_shift>:
 801dafc:	f1c2 0208 	rsb	r2, r2, #8
 801db00:	0092      	lsls	r2, r2, #2
 801db02:	b570      	push	{r4, r5, r6, lr}
 801db04:	f1c2 0620 	rsb	r6, r2, #32
 801db08:	6843      	ldr	r3, [r0, #4]
 801db0a:	6804      	ldr	r4, [r0, #0]
 801db0c:	fa03 f506 	lsl.w	r5, r3, r6
 801db10:	432c      	orrs	r4, r5
 801db12:	40d3      	lsrs	r3, r2
 801db14:	6004      	str	r4, [r0, #0]
 801db16:	f840 3f04 	str.w	r3, [r0, #4]!
 801db1a:	4288      	cmp	r0, r1
 801db1c:	d3f4      	bcc.n	801db08 <L_shift+0xc>
 801db1e:	bd70      	pop	{r4, r5, r6, pc}

0801db20 <__match>:
 801db20:	b530      	push	{r4, r5, lr}
 801db22:	6803      	ldr	r3, [r0, #0]
 801db24:	3301      	adds	r3, #1
 801db26:	f811 4b01 	ldrb.w	r4, [r1], #1
 801db2a:	b914      	cbnz	r4, 801db32 <__match+0x12>
 801db2c:	6003      	str	r3, [r0, #0]
 801db2e:	2001      	movs	r0, #1
 801db30:	bd30      	pop	{r4, r5, pc}
 801db32:	f813 2b01 	ldrb.w	r2, [r3], #1
 801db36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801db3a:	2d19      	cmp	r5, #25
 801db3c:	bf98      	it	ls
 801db3e:	3220      	addls	r2, #32
 801db40:	42a2      	cmp	r2, r4
 801db42:	d0f0      	beq.n	801db26 <__match+0x6>
 801db44:	2000      	movs	r0, #0
 801db46:	e7f3      	b.n	801db30 <__match+0x10>

0801db48 <__hexnan>:
 801db48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db4c:	680b      	ldr	r3, [r1, #0]
 801db4e:	6801      	ldr	r1, [r0, #0]
 801db50:	115e      	asrs	r6, r3, #5
 801db52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801db56:	f013 031f 	ands.w	r3, r3, #31
 801db5a:	b087      	sub	sp, #28
 801db5c:	bf18      	it	ne
 801db5e:	3604      	addne	r6, #4
 801db60:	2500      	movs	r5, #0
 801db62:	1f37      	subs	r7, r6, #4
 801db64:	4682      	mov	sl, r0
 801db66:	4690      	mov	r8, r2
 801db68:	9301      	str	r3, [sp, #4]
 801db6a:	f846 5c04 	str.w	r5, [r6, #-4]
 801db6e:	46b9      	mov	r9, r7
 801db70:	463c      	mov	r4, r7
 801db72:	9502      	str	r5, [sp, #8]
 801db74:	46ab      	mov	fp, r5
 801db76:	784a      	ldrb	r2, [r1, #1]
 801db78:	1c4b      	adds	r3, r1, #1
 801db7a:	9303      	str	r3, [sp, #12]
 801db7c:	b342      	cbz	r2, 801dbd0 <__hexnan+0x88>
 801db7e:	4610      	mov	r0, r2
 801db80:	9105      	str	r1, [sp, #20]
 801db82:	9204      	str	r2, [sp, #16]
 801db84:	f7ff fd95 	bl	801d6b2 <__hexdig_fun>
 801db88:	2800      	cmp	r0, #0
 801db8a:	d151      	bne.n	801dc30 <__hexnan+0xe8>
 801db8c:	9a04      	ldr	r2, [sp, #16]
 801db8e:	9905      	ldr	r1, [sp, #20]
 801db90:	2a20      	cmp	r2, #32
 801db92:	d818      	bhi.n	801dbc6 <__hexnan+0x7e>
 801db94:	9b02      	ldr	r3, [sp, #8]
 801db96:	459b      	cmp	fp, r3
 801db98:	dd13      	ble.n	801dbc2 <__hexnan+0x7a>
 801db9a:	454c      	cmp	r4, r9
 801db9c:	d206      	bcs.n	801dbac <__hexnan+0x64>
 801db9e:	2d07      	cmp	r5, #7
 801dba0:	dc04      	bgt.n	801dbac <__hexnan+0x64>
 801dba2:	462a      	mov	r2, r5
 801dba4:	4649      	mov	r1, r9
 801dba6:	4620      	mov	r0, r4
 801dba8:	f7ff ffa8 	bl	801dafc <L_shift>
 801dbac:	4544      	cmp	r4, r8
 801dbae:	d952      	bls.n	801dc56 <__hexnan+0x10e>
 801dbb0:	2300      	movs	r3, #0
 801dbb2:	f1a4 0904 	sub.w	r9, r4, #4
 801dbb6:	f844 3c04 	str.w	r3, [r4, #-4]
 801dbba:	f8cd b008 	str.w	fp, [sp, #8]
 801dbbe:	464c      	mov	r4, r9
 801dbc0:	461d      	mov	r5, r3
 801dbc2:	9903      	ldr	r1, [sp, #12]
 801dbc4:	e7d7      	b.n	801db76 <__hexnan+0x2e>
 801dbc6:	2a29      	cmp	r2, #41	@ 0x29
 801dbc8:	d157      	bne.n	801dc7a <__hexnan+0x132>
 801dbca:	3102      	adds	r1, #2
 801dbcc:	f8ca 1000 	str.w	r1, [sl]
 801dbd0:	f1bb 0f00 	cmp.w	fp, #0
 801dbd4:	d051      	beq.n	801dc7a <__hexnan+0x132>
 801dbd6:	454c      	cmp	r4, r9
 801dbd8:	d206      	bcs.n	801dbe8 <__hexnan+0xa0>
 801dbda:	2d07      	cmp	r5, #7
 801dbdc:	dc04      	bgt.n	801dbe8 <__hexnan+0xa0>
 801dbde:	462a      	mov	r2, r5
 801dbe0:	4649      	mov	r1, r9
 801dbe2:	4620      	mov	r0, r4
 801dbe4:	f7ff ff8a 	bl	801dafc <L_shift>
 801dbe8:	4544      	cmp	r4, r8
 801dbea:	d936      	bls.n	801dc5a <__hexnan+0x112>
 801dbec:	f1a8 0204 	sub.w	r2, r8, #4
 801dbf0:	4623      	mov	r3, r4
 801dbf2:	f853 1b04 	ldr.w	r1, [r3], #4
 801dbf6:	f842 1f04 	str.w	r1, [r2, #4]!
 801dbfa:	429f      	cmp	r7, r3
 801dbfc:	d2f9      	bcs.n	801dbf2 <__hexnan+0xaa>
 801dbfe:	1b3b      	subs	r3, r7, r4
 801dc00:	f023 0303 	bic.w	r3, r3, #3
 801dc04:	3304      	adds	r3, #4
 801dc06:	3401      	adds	r4, #1
 801dc08:	3e03      	subs	r6, #3
 801dc0a:	42b4      	cmp	r4, r6
 801dc0c:	bf88      	it	hi
 801dc0e:	2304      	movhi	r3, #4
 801dc10:	4443      	add	r3, r8
 801dc12:	2200      	movs	r2, #0
 801dc14:	f843 2b04 	str.w	r2, [r3], #4
 801dc18:	429f      	cmp	r7, r3
 801dc1a:	d2fb      	bcs.n	801dc14 <__hexnan+0xcc>
 801dc1c:	683b      	ldr	r3, [r7, #0]
 801dc1e:	b91b      	cbnz	r3, 801dc28 <__hexnan+0xe0>
 801dc20:	4547      	cmp	r7, r8
 801dc22:	d128      	bne.n	801dc76 <__hexnan+0x12e>
 801dc24:	2301      	movs	r3, #1
 801dc26:	603b      	str	r3, [r7, #0]
 801dc28:	2005      	movs	r0, #5
 801dc2a:	b007      	add	sp, #28
 801dc2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc30:	3501      	adds	r5, #1
 801dc32:	2d08      	cmp	r5, #8
 801dc34:	f10b 0b01 	add.w	fp, fp, #1
 801dc38:	dd06      	ble.n	801dc48 <__hexnan+0x100>
 801dc3a:	4544      	cmp	r4, r8
 801dc3c:	d9c1      	bls.n	801dbc2 <__hexnan+0x7a>
 801dc3e:	2300      	movs	r3, #0
 801dc40:	f844 3c04 	str.w	r3, [r4, #-4]
 801dc44:	2501      	movs	r5, #1
 801dc46:	3c04      	subs	r4, #4
 801dc48:	6822      	ldr	r2, [r4, #0]
 801dc4a:	f000 000f 	and.w	r0, r0, #15
 801dc4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801dc52:	6020      	str	r0, [r4, #0]
 801dc54:	e7b5      	b.n	801dbc2 <__hexnan+0x7a>
 801dc56:	2508      	movs	r5, #8
 801dc58:	e7b3      	b.n	801dbc2 <__hexnan+0x7a>
 801dc5a:	9b01      	ldr	r3, [sp, #4]
 801dc5c:	2b00      	cmp	r3, #0
 801dc5e:	d0dd      	beq.n	801dc1c <__hexnan+0xd4>
 801dc60:	f1c3 0320 	rsb	r3, r3, #32
 801dc64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801dc68:	40da      	lsrs	r2, r3
 801dc6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801dc6e:	4013      	ands	r3, r2
 801dc70:	f846 3c04 	str.w	r3, [r6, #-4]
 801dc74:	e7d2      	b.n	801dc1c <__hexnan+0xd4>
 801dc76:	3f04      	subs	r7, #4
 801dc78:	e7d0      	b.n	801dc1c <__hexnan+0xd4>
 801dc7a:	2004      	movs	r0, #4
 801dc7c:	e7d5      	b.n	801dc2a <__hexnan+0xe2>

0801dc7e <__ascii_mbtowc>:
 801dc7e:	b082      	sub	sp, #8
 801dc80:	b901      	cbnz	r1, 801dc84 <__ascii_mbtowc+0x6>
 801dc82:	a901      	add	r1, sp, #4
 801dc84:	b142      	cbz	r2, 801dc98 <__ascii_mbtowc+0x1a>
 801dc86:	b14b      	cbz	r3, 801dc9c <__ascii_mbtowc+0x1e>
 801dc88:	7813      	ldrb	r3, [r2, #0]
 801dc8a:	600b      	str	r3, [r1, #0]
 801dc8c:	7812      	ldrb	r2, [r2, #0]
 801dc8e:	1e10      	subs	r0, r2, #0
 801dc90:	bf18      	it	ne
 801dc92:	2001      	movne	r0, #1
 801dc94:	b002      	add	sp, #8
 801dc96:	4770      	bx	lr
 801dc98:	4610      	mov	r0, r2
 801dc9a:	e7fb      	b.n	801dc94 <__ascii_mbtowc+0x16>
 801dc9c:	f06f 0001 	mvn.w	r0, #1
 801dca0:	e7f8      	b.n	801dc94 <__ascii_mbtowc+0x16>

0801dca2 <__ascii_wctomb>:
 801dca2:	4603      	mov	r3, r0
 801dca4:	4608      	mov	r0, r1
 801dca6:	b141      	cbz	r1, 801dcba <__ascii_wctomb+0x18>
 801dca8:	2aff      	cmp	r2, #255	@ 0xff
 801dcaa:	d904      	bls.n	801dcb6 <__ascii_wctomb+0x14>
 801dcac:	228a      	movs	r2, #138	@ 0x8a
 801dcae:	601a      	str	r2, [r3, #0]
 801dcb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dcb4:	4770      	bx	lr
 801dcb6:	700a      	strb	r2, [r1, #0]
 801dcb8:	2001      	movs	r0, #1
 801dcba:	4770      	bx	lr

0801dcbc <_raise_r>:
 801dcbc:	291f      	cmp	r1, #31
 801dcbe:	b538      	push	{r3, r4, r5, lr}
 801dcc0:	4605      	mov	r5, r0
 801dcc2:	460c      	mov	r4, r1
 801dcc4:	d904      	bls.n	801dcd0 <_raise_r+0x14>
 801dcc6:	2316      	movs	r3, #22
 801dcc8:	6003      	str	r3, [r0, #0]
 801dcca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801dcce:	bd38      	pop	{r3, r4, r5, pc}
 801dcd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801dcd2:	b112      	cbz	r2, 801dcda <_raise_r+0x1e>
 801dcd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dcd8:	b94b      	cbnz	r3, 801dcee <_raise_r+0x32>
 801dcda:	4628      	mov	r0, r5
 801dcdc:	f000 f830 	bl	801dd40 <_getpid_r>
 801dce0:	4622      	mov	r2, r4
 801dce2:	4601      	mov	r1, r0
 801dce4:	4628      	mov	r0, r5
 801dce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dcea:	f000 b817 	b.w	801dd1c <_kill_r>
 801dcee:	2b01      	cmp	r3, #1
 801dcf0:	d00a      	beq.n	801dd08 <_raise_r+0x4c>
 801dcf2:	1c59      	adds	r1, r3, #1
 801dcf4:	d103      	bne.n	801dcfe <_raise_r+0x42>
 801dcf6:	2316      	movs	r3, #22
 801dcf8:	6003      	str	r3, [r0, #0]
 801dcfa:	2001      	movs	r0, #1
 801dcfc:	e7e7      	b.n	801dcce <_raise_r+0x12>
 801dcfe:	2100      	movs	r1, #0
 801dd00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801dd04:	4620      	mov	r0, r4
 801dd06:	4798      	blx	r3
 801dd08:	2000      	movs	r0, #0
 801dd0a:	e7e0      	b.n	801dcce <_raise_r+0x12>

0801dd0c <raise>:
 801dd0c:	4b02      	ldr	r3, [pc, #8]	@ (801dd18 <raise+0xc>)
 801dd0e:	4601      	mov	r1, r0
 801dd10:	6818      	ldr	r0, [r3, #0]
 801dd12:	f7ff bfd3 	b.w	801dcbc <_raise_r>
 801dd16:	bf00      	nop
 801dd18:	20000090 	.word	0x20000090

0801dd1c <_kill_r>:
 801dd1c:	b538      	push	{r3, r4, r5, lr}
 801dd1e:	4d07      	ldr	r5, [pc, #28]	@ (801dd3c <_kill_r+0x20>)
 801dd20:	2300      	movs	r3, #0
 801dd22:	4604      	mov	r4, r0
 801dd24:	4608      	mov	r0, r1
 801dd26:	4611      	mov	r1, r2
 801dd28:	602b      	str	r3, [r5, #0]
 801dd2a:	f7e6 f9ed 	bl	8004108 <_kill>
 801dd2e:	1c43      	adds	r3, r0, #1
 801dd30:	d102      	bne.n	801dd38 <_kill_r+0x1c>
 801dd32:	682b      	ldr	r3, [r5, #0]
 801dd34:	b103      	cbz	r3, 801dd38 <_kill_r+0x1c>
 801dd36:	6023      	str	r3, [r4, #0]
 801dd38:	bd38      	pop	{r3, r4, r5, pc}
 801dd3a:	bf00      	nop
 801dd3c:	20009ff0 	.word	0x20009ff0

0801dd40 <_getpid_r>:
 801dd40:	f7e6 b9da 	b.w	80040f8 <_getpid>

0801dd44 <_init>:
 801dd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd46:	bf00      	nop
 801dd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dd4a:	bc08      	pop	{r3}
 801dd4c:	469e      	mov	lr, r3
 801dd4e:	4770      	bx	lr

0801dd50 <_fini>:
 801dd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dd52:	bf00      	nop
 801dd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dd56:	bc08      	pop	{r3}
 801dd58:	469e      	mov	lr, r3
 801dd5a:	4770      	bx	lr
