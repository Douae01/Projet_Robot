
base_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08011190  08011190  00012190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801170c  0801170c  000131ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801170c  0801170c  0001270c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011714  08011714  000131ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011714  08011714  00012714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011718  08011718  00012718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0801171c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005384  200001ec  08011908  000131ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005570  08011908  00013570  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023f9e  00000000  00000000  0001321c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000538c  00000000  00000000  000371ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  0003c548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000167a  00000000  00000000  0003e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229e7  00000000  00000000  0003f8ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033a60  00000000  00000000  000622b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aba29  00000000  00000000  00095d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014173a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008dd4  00000000  00000000  00141780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0014a554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011174 	.word	0x08011174

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	08011174 	.word	0x08011174

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <millis>:
// Locally used functions (private)
//---------------------------------------------------------
uint8_t VL53L0X_performSingleRefCalibration(uint8_t vhv_init_byte);

uint8_t millis()
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

return 0;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <writeReg>:

//---------------------------------------------------------
// I2C communication Functions
//---------------------------------------------------------
// Write an 8-bit register
void writeReg(uint8_t reg, uint8_t value) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	460a      	mov	r2, r1
 800100e:	71fb      	strb	r3, [r7, #7]
 8001010:	4613      	mov	r3, r2
 8001012:	71bb      	strb	r3, [r7, #6]
	i2c1_WriteRegBuffer(0x53,reg,&value,1);
 8001014:	1dba      	adds	r2, r7, #6
 8001016:	79f9      	ldrb	r1, [r7, #7]
 8001018:	2301      	movs	r3, #1
 800101a:	2053      	movs	r0, #83	@ 0x53
 800101c:	f000 fd0e 	bl	8001a3c <i2c1_WriteRegBuffer>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <writeReg16Bit>:
// Write a 16-bit register
void writeReg16Bit(uint8_t reg, uint16_t value){
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	460a      	mov	r2, r1
 8001032:	71fb      	strb	r3, [r7, #7]
 8001034:	4613      	mov	r3, r2
 8001036:	80bb      	strh	r3, [r7, #4]
	uint8_t tab[2];
	tab[0]= ((value >> 8));
 8001038:	88bb      	ldrh	r3, [r7, #4]
 800103a:	0a1b      	lsrs	r3, r3, #8
 800103c:	b29b      	uxth	r3, r3
 800103e:	b2db      	uxtb	r3, r3
 8001040:	733b      	strb	r3, [r7, #12]
	tab[1] = ((value ) & 0xFF);
 8001042:	88bb      	ldrh	r3, [r7, #4]
 8001044:	b2db      	uxtb	r3, r3
 8001046:	737b      	strb	r3, [r7, #13]
	i2c1_WriteRegBuffer(0x53,reg,tab,2);
 8001048:	f107 020c 	add.w	r2, r7, #12
 800104c:	79f9      	ldrb	r1, [r7, #7]
 800104e:	2302      	movs	r3, #2
 8001050:	2053      	movs	r0, #83	@ 0x53
 8001052:	f000 fcf3 	bl	8001a3c <i2c1_WriteRegBuffer>
}
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <writeReg32Bit>:
// Write a 32-bit register
void writeReg32Bit(uint8_t reg, uint32_t value){
 800105e:	b580      	push	{r7, lr}
 8001060:	b084      	sub	sp, #16
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	6039      	str	r1, [r7, #0]
 8001068:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[4];
		tab[3]= ((value >> 24) & 0xFF);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	0e1b      	lsrs	r3, r3, #24
 800106e:	b2db      	uxtb	r3, r3
 8001070:	73fb      	strb	r3, [r7, #15]
		tab[2]= ((value >> 16) & 0xFF);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	0c1b      	lsrs	r3, r3, #16
 8001076:	b2db      	uxtb	r3, r3
 8001078:	73bb      	strb	r3, [r7, #14]
		tab[1]= ((value >> 8) & 0xFF);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	b2db      	uxtb	r3, r3
 8001080:	737b      	strb	r3, [r7, #13]
		tab[0] = ((value ) & 0xFF);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	733b      	strb	r3, [r7, #12]
		i2c1_WriteRegBuffer(0x53,reg,tab,4);
 8001088:	f107 020c 	add.w	r2, r7, #12
 800108c:	79f9      	ldrb	r1, [r7, #7]
 800108e:	2304      	movs	r3, #4
 8001090:	2053      	movs	r0, #83	@ 0x53
 8001092:	f000 fcd3 	bl	8001a3c <i2c1_WriteRegBuffer>
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <readReg>:
// Read an 8-bit register
uint8_t readReg(uint8_t reg) {
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	71fb      	strb	r3, [r7, #7]
  	uint8_t value=0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
  	i2c1_ReadRegBuffer(0x53,reg,&value,1);
 80010ac:	f107 020f 	add.w	r2, r7, #15
 80010b0:	79f9      	ldrb	r1, [r7, #7]
 80010b2:	2301      	movs	r3, #1
 80010b4:	2053      	movs	r0, #83	@ 0x53
 80010b6:	f000 fc8f 	bl	80019d8 <i2c1_ReadRegBuffer>
  	return value;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <readReg16Bit>:
// Read a 16-bit register
uint16_t readReg16Bit(uint8_t reg) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
	uint8_t tab[2];
	i2c1_ReadRegBuffer(0x53,reg,tab,2);
 80010ce:	f107 020c 	add.w	r2, r7, #12
 80010d2:	79f9      	ldrb	r1, [r7, #7]
 80010d4:	2302      	movs	r3, #2
 80010d6:	2053      	movs	r0, #83	@ 0x53
 80010d8:	f000 fc7e 	bl	80019d8 <i2c1_ReadRegBuffer>
  	uint16_t value= ((uint16_t)tab[0] << 8) | (uint16_t)tab[1];
 80010dc:	7b3b      	ldrb	r3, [r7, #12]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	7b7b      	ldrb	r3, [r7, #13]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	81fb      	strh	r3, [r7, #14]
  	return value;
 80010ec:	89fb      	ldrh	r3, [r7, #14]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <readMulti>:


// Read an arbitrary number of bytes from the sensor, starting at the given
// register, into the given array
void readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	6039      	str	r1, [r7, #0]
 8001100:	71fb      	strb	r3, [r7, #7]
 8001102:	4613      	mov	r3, r2
 8001104:	71bb      	strb	r3, [r7, #6]
	uint8_t value=0;
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]

  while (count-- > 0)
 800110a:	e00b      	b.n	8001124 <readMulti+0x2e>
  {
	  i2c1_ReadRegBuffer(0x53,reg,&value,1);
 800110c:	f107 020f 	add.w	r2, r7, #15
 8001110:	79f9      	ldrb	r1, [r7, #7]
 8001112:	2301      	movs	r3, #1
 8001114:	2053      	movs	r0, #83	@ 0x53
 8001116:	f000 fc5f 	bl	80019d8 <i2c1_ReadRegBuffer>
    *(dst++) = value;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	1c5a      	adds	r2, r3, #1
 800111e:	603a      	str	r2, [r7, #0]
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	701a      	strb	r2, [r3, #0]
  while (count-- > 0)
 8001124:	79bb      	ldrb	r3, [r7, #6]
 8001126:	1e5a      	subs	r2, r3, #1
 8001128:	71ba      	strb	r2, [r7, #6]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1ee      	bne.n	800110c <readMulti+0x16>
  }
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <VL53L0X_validateInterface>:
uint8_t VL53L0X_getAddress() {
  return g_i2cAddr;
}
//===========================================================================
uint8_t VL53L0X_validateInterface()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
	uint16_t var=0;
 800113e:	2300      	movs	r3, #0
 8001140:	80fb      	strh	r3, [r7, #6]
	var = readReg(0xC0);
 8001142:	20c0      	movs	r0, #192	@ 0xc0
 8001144:	f7ff ffab 	bl	800109e <readReg>
 8001148:	4603      	mov	r3, r0
 800114a:	80fb      	strh	r3, [r7, #6]
	if ( var == 0xEE)
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	2bee      	cmp	r3, #238	@ 0xee
 8001150:	d121      	bne.n	8001196 <VL53L0X_validateInterface+0x5e>
	{
		var =readReg(0xC1);
 8001152:	20c1      	movs	r0, #193	@ 0xc1
 8001154:	f7ff ffa3 	bl	800109e <readReg>
 8001158:	4603      	mov	r3, r0
 800115a:	80fb      	strh	r3, [r7, #6]
		if ( var == 0xAA)
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	2baa      	cmp	r3, #170	@ 0xaa
 8001160:	d119      	bne.n	8001196 <VL53L0X_validateInterface+0x5e>
		{
			var =readReg(0xC2);
 8001162:	20c2      	movs	r0, #194	@ 0xc2
 8001164:	f7ff ff9b 	bl	800109e <readReg>
 8001168:	4603      	mov	r3, r0
 800116a:	80fb      	strh	r3, [r7, #6]
			if ( var == 0x10)
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	2b10      	cmp	r3, #16
 8001170:	d111      	bne.n	8001196 <VL53L0X_validateInterface+0x5e>
			{
				var =readReg16Bit(0x51);
 8001172:	2051      	movs	r0, #81	@ 0x51
 8001174:	f7ff ffa6 	bl	80010c4 <readReg16Bit>
 8001178:	4603      	mov	r3, r0
 800117a:	80fb      	strh	r3, [r7, #6]
				if ( var == 0x0096) // doc 0x0099 ??
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	2b96      	cmp	r3, #150	@ 0x96
 8001180:	d109      	bne.n	8001196 <VL53L0X_validateInterface+0x5e>
				{
					var =readReg16Bit(0x61);
 8001182:	2061      	movs	r0, #97	@ 0x61
 8001184:	f7ff ff9e 	bl	80010c4 <readReg16Bit>
 8001188:	4603      	mov	r3, r0
 800118a:	80fb      	strh	r3, [r7, #6]
					if ( var == 0x0000)
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <VL53L0X_validateInterface+0x5e>
					{
						return 0;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <VL53L0X_validateInterface+0x60>
					}
				}
			}
		}
	}
	return -1;
 8001196:	23ff      	movs	r3, #255	@ 0xff
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <VL53L0X_init>:
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
uint8_t VL53L0X_init( ){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  //****************************************************************************
  // DATA INIT
  // "Set I2C standard mode"
  writeReg(I2C_MODE, 0x00);
 80011a6:	2100      	movs	r1, #0
 80011a8:	2088      	movs	r0, #136	@ 0x88
 80011aa:	f7ff ff2b 	bl	8001004 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 80011ae:	2101      	movs	r1, #1
 80011b0:	2080      	movs	r0, #128	@ 0x80
 80011b2:	f7ff ff27 	bl	8001004 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x01);
 80011b6:	2101      	movs	r1, #1
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	f7ff ff23 	bl	8001004 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 80011be:	2100      	movs	r1, #0
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff ff1f 	bl	8001004 <writeReg>
  g_stopVariable = readReg(0x91);
 80011c6:	2091      	movs	r0, #145	@ 0x91
 80011c8:	f7ff ff69 	bl	800109e <readReg>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4bde      	ldr	r3, [pc, #888]	@ (800154c <VL53L0X_init+0x3ac>)
 80011d2:	701a      	strb	r2, [r3, #0]
  writeReg(SYSRANGE_START, 0x01);
 80011d4:	2101      	movs	r1, #1
 80011d6:	2000      	movs	r0, #0
 80011d8:	f7ff ff14 	bl	8001004 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 80011dc:	2100      	movs	r1, #0
 80011de:	20ff      	movs	r0, #255	@ 0xff
 80011e0:	f7ff ff10 	bl	8001004 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 80011e4:	2100      	movs	r1, #0
 80011e6:	2080      	movs	r0, #128	@ 0x80
 80011e8:	f7ff ff0c 	bl	8001004 <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
 80011ec:	2060      	movs	r0, #96	@ 0x60
 80011ee:	f7ff ff56 	bl	800109e <readReg>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f043 0312 	orr.w	r3, r3, #18
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4619      	mov	r1, r3
 80011fc:	2060      	movs	r0, #96	@ 0x60
 80011fe:	f7ff ff01 	bl	8001004 <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  VL53L0X_setSignalRateLimit(0.25);
 8001202:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8001206:	f000 f9a3 	bl	8001550 <VL53L0X_setSignalRateLimit>

  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 800120a:	21ff      	movs	r1, #255	@ 0xff
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff fef9 	bl	8001004 <writeReg>
  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!VL53L0X_getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 8001212:	1dba      	adds	r2, r7, #6
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f9e9 	bl	80015f0 <VL53L0X_getSpadInfo>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <VL53L0X_init+0x88>
 8001224:	2300      	movs	r3, #0
 8001226:	e18d      	b.n	8001544 <VL53L0X_init+0x3a4>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8001228:	463b      	mov	r3, r7
 800122a:	2206      	movs	r2, #6
 800122c:	4619      	mov	r1, r3
 800122e:	20b0      	movs	r0, #176	@ 0xb0
 8001230:	f7ff ff61 	bl	80010f6 <readMulti>
  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)
  writeReg(INTERNAL_TUNING_2, 0x01);
 8001234:	2101      	movs	r1, #1
 8001236:	20ff      	movs	r0, #255	@ 0xff
 8001238:	f7ff fee4 	bl	8001004 <writeReg>
  writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 800123c:	2100      	movs	r1, #0
 800123e:	204f      	movs	r0, #79	@ 0x4f
 8001240:	f7ff fee0 	bl	8001004 <writeReg>
  writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8001244:	212c      	movs	r1, #44	@ 0x2c
 8001246:	204e      	movs	r0, #78	@ 0x4e
 8001248:	f7ff fedc 	bl	8001004 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 800124c:	2100      	movs	r1, #0
 800124e:	20ff      	movs	r0, #255	@ 0xff
 8001250:	f7ff fed8 	bl	8001004 <writeReg>
  writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001254:	21b4      	movs	r1, #180	@ 0xb4
 8001256:	20b6      	movs	r0, #182	@ 0xb6
 8001258:	f7ff fed4 	bl	8001004 <writeReg>
  // -- VL53L0X_set_reference_spads() end
  //****************************************************************************
  // LOAD TUNING SETTINGS
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(INTERNAL_TUNING_2, 0x01);
 800125c:	2101      	movs	r1, #1
 800125e:	20ff      	movs	r0, #255	@ 0xff
 8001260:	f7ff fed0 	bl	8001004 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 8001264:	2100      	movs	r1, #0
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff fecc 	bl	8001004 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 800126c:	2100      	movs	r1, #0
 800126e:	20ff      	movs	r0, #255	@ 0xff
 8001270:	f7ff fec8 	bl	8001004 <writeReg>
  writeReg(SYSTEM_RANGE_CONFIG, 0x00);
 8001274:	2100      	movs	r1, #0
 8001276:	2009      	movs	r0, #9
 8001278:	f7ff fec4 	bl	8001004 <writeReg>
  writeReg(0x10, 0x00);
 800127c:	2100      	movs	r1, #0
 800127e:	2010      	movs	r0, #16
 8001280:	f7ff fec0 	bl	8001004 <writeReg>
  writeReg(0x11, 0x00);
 8001284:	2100      	movs	r1, #0
 8001286:	2011      	movs	r0, #17
 8001288:	f7ff febc 	bl	8001004 <writeReg>

  writeReg(0x24, 0x01);
 800128c:	2101      	movs	r1, #1
 800128e:	2024      	movs	r0, #36	@ 0x24
 8001290:	f7ff feb8 	bl	8001004 <writeReg>
  writeReg(0x25, 0xFF);
 8001294:	21ff      	movs	r1, #255	@ 0xff
 8001296:	2025      	movs	r0, #37	@ 0x25
 8001298:	f7ff feb4 	bl	8001004 <writeReg>
  writeReg(0x75, 0x00);
 800129c:	2100      	movs	r1, #0
 800129e:	2075      	movs	r0, #117	@ 0x75
 80012a0:	f7ff feb0 	bl	8001004 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 80012a4:	2101      	movs	r1, #1
 80012a6:	20ff      	movs	r0, #255	@ 0xff
 80012a8:	f7ff feac 	bl	8001004 <writeReg>
  writeReg(0x4E, 0x2C);
 80012ac:	212c      	movs	r1, #44	@ 0x2c
 80012ae:	204e      	movs	r0, #78	@ 0x4e
 80012b0:	f7ff fea8 	bl	8001004 <writeReg>
  writeReg(0x48, 0x00);
 80012b4:	2100      	movs	r1, #0
 80012b6:	2048      	movs	r0, #72	@ 0x48
 80012b8:	f7ff fea4 	bl	8001004 <writeReg>
  writeReg(0x30, 0x20);
 80012bc:	2120      	movs	r1, #32
 80012be:	2030      	movs	r0, #48	@ 0x30
 80012c0:	f7ff fea0 	bl	8001004 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 80012c4:	2100      	movs	r1, #0
 80012c6:	20ff      	movs	r0, #255	@ 0xff
 80012c8:	f7ff fe9c 	bl	8001004 <writeReg>
  writeReg(0x30, 0x09);
 80012cc:	2109      	movs	r1, #9
 80012ce:	2030      	movs	r0, #48	@ 0x30
 80012d0:	f7ff fe98 	bl	8001004 <writeReg>
  writeReg(0x54, 0x00);
 80012d4:	2100      	movs	r1, #0
 80012d6:	2054      	movs	r0, #84	@ 0x54
 80012d8:	f7ff fe94 	bl	8001004 <writeReg>
  writeReg(0x31, 0x04);
 80012dc:	2104      	movs	r1, #4
 80012de:	2031      	movs	r0, #49	@ 0x31
 80012e0:	f7ff fe90 	bl	8001004 <writeReg>
  writeReg(0x32, 0x03);
 80012e4:	2103      	movs	r1, #3
 80012e6:	2032      	movs	r0, #50	@ 0x32
 80012e8:	f7ff fe8c 	bl	8001004 <writeReg>
  writeReg(0x40, 0x83);
 80012ec:	2183      	movs	r1, #131	@ 0x83
 80012ee:	2040      	movs	r0, #64	@ 0x40
 80012f0:	f7ff fe88 	bl	8001004 <writeReg>
  writeReg(0x46, 0x25);
 80012f4:	2125      	movs	r1, #37	@ 0x25
 80012f6:	2046      	movs	r0, #70	@ 0x46
 80012f8:	f7ff fe84 	bl	8001004 <writeReg>
  writeReg(0x60, 0x00);
 80012fc:	2100      	movs	r1, #0
 80012fe:	2060      	movs	r0, #96	@ 0x60
 8001300:	f7ff fe80 	bl	8001004 <writeReg>
  writeReg(0x27, 0x00);
 8001304:	2100      	movs	r1, #0
 8001306:	2027      	movs	r0, #39	@ 0x27
 8001308:	f7ff fe7c 	bl	8001004 <writeReg>
  writeReg(0x50, 0x06);
 800130c:	2106      	movs	r1, #6
 800130e:	2050      	movs	r0, #80	@ 0x50
 8001310:	f7ff fe78 	bl	8001004 <writeReg>
  writeReg(0x51, 0x00);
 8001314:	2100      	movs	r1, #0
 8001316:	2051      	movs	r0, #81	@ 0x51
 8001318:	f7ff fe74 	bl	8001004 <writeReg>
  writeReg(0x52, 0x96);
 800131c:	2196      	movs	r1, #150	@ 0x96
 800131e:	2052      	movs	r0, #82	@ 0x52
 8001320:	f7ff fe70 	bl	8001004 <writeReg>
  writeReg(0x56, 0x08);
 8001324:	2108      	movs	r1, #8
 8001326:	2056      	movs	r0, #86	@ 0x56
 8001328:	f7ff fe6c 	bl	8001004 <writeReg>
  writeReg(0x57, 0x30);
 800132c:	2130      	movs	r1, #48	@ 0x30
 800132e:	2057      	movs	r0, #87	@ 0x57
 8001330:	f7ff fe68 	bl	8001004 <writeReg>
  writeReg(0x61, 0x00);
 8001334:	2100      	movs	r1, #0
 8001336:	2061      	movs	r0, #97	@ 0x61
 8001338:	f7ff fe64 	bl	8001004 <writeReg>
  writeReg(0x62, 0x00);
 800133c:	2100      	movs	r1, #0
 800133e:	2062      	movs	r0, #98	@ 0x62
 8001340:	f7ff fe60 	bl	8001004 <writeReg>
  writeReg(0x64, 0x00);
 8001344:	2100      	movs	r1, #0
 8001346:	2064      	movs	r0, #100	@ 0x64
 8001348:	f7ff fe5c 	bl	8001004 <writeReg>
  writeReg(0x65, 0x00);
 800134c:	2100      	movs	r1, #0
 800134e:	2065      	movs	r0, #101	@ 0x65
 8001350:	f7ff fe58 	bl	8001004 <writeReg>
  writeReg(0x66, 0xA0);
 8001354:	21a0      	movs	r1, #160	@ 0xa0
 8001356:	2066      	movs	r0, #102	@ 0x66
 8001358:	f7ff fe54 	bl	8001004 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 800135c:	2101      	movs	r1, #1
 800135e:	20ff      	movs	r0, #255	@ 0xff
 8001360:	f7ff fe50 	bl	8001004 <writeReg>
  writeReg(0x22, 0x32);
 8001364:	2132      	movs	r1, #50	@ 0x32
 8001366:	2022      	movs	r0, #34	@ 0x22
 8001368:	f7ff fe4c 	bl	8001004 <writeReg>
  writeReg(0x47, 0x14);
 800136c:	2114      	movs	r1, #20
 800136e:	2047      	movs	r0, #71	@ 0x47
 8001370:	f7ff fe48 	bl	8001004 <writeReg>
  writeReg(0x49, 0xFF);
 8001374:	21ff      	movs	r1, #255	@ 0xff
 8001376:	2049      	movs	r0, #73	@ 0x49
 8001378:	f7ff fe44 	bl	8001004 <writeReg>
  writeReg(0x4A, 0x00);
 800137c:	2100      	movs	r1, #0
 800137e:	204a      	movs	r0, #74	@ 0x4a
 8001380:	f7ff fe40 	bl	8001004 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001384:	2100      	movs	r1, #0
 8001386:	20ff      	movs	r0, #255	@ 0xff
 8001388:	f7ff fe3c 	bl	8001004 <writeReg>
  writeReg(0x7A, 0x0A);
 800138c:	210a      	movs	r1, #10
 800138e:	207a      	movs	r0, #122	@ 0x7a
 8001390:	f7ff fe38 	bl	8001004 <writeReg>
  writeReg(0x7B, 0x00);
 8001394:	2100      	movs	r1, #0
 8001396:	207b      	movs	r0, #123	@ 0x7b
 8001398:	f7ff fe34 	bl	8001004 <writeReg>
  writeReg(0x78, 0x21);
 800139c:	2121      	movs	r1, #33	@ 0x21
 800139e:	2078      	movs	r0, #120	@ 0x78
 80013a0:	f7ff fe30 	bl	8001004 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 80013a4:	2101      	movs	r1, #1
 80013a6:	20ff      	movs	r0, #255	@ 0xff
 80013a8:	f7ff fe2c 	bl	8001004 <writeReg>
  writeReg(0x23, 0x34);
 80013ac:	2134      	movs	r1, #52	@ 0x34
 80013ae:	2023      	movs	r0, #35	@ 0x23
 80013b0:	f7ff fe28 	bl	8001004 <writeReg>
  writeReg(0x42, 0x00);
 80013b4:	2100      	movs	r1, #0
 80013b6:	2042      	movs	r0, #66	@ 0x42
 80013b8:	f7ff fe24 	bl	8001004 <writeReg>
  writeReg(0x44, 0xFF);
 80013bc:	21ff      	movs	r1, #255	@ 0xff
 80013be:	2044      	movs	r0, #68	@ 0x44
 80013c0:	f7ff fe20 	bl	8001004 <writeReg>
  writeReg(0x45, 0x26);
 80013c4:	2126      	movs	r1, #38	@ 0x26
 80013c6:	2045      	movs	r0, #69	@ 0x45
 80013c8:	f7ff fe1c 	bl	8001004 <writeReg>
  writeReg(0x46, 0x05);
 80013cc:	2105      	movs	r1, #5
 80013ce:	2046      	movs	r0, #70	@ 0x46
 80013d0:	f7ff fe18 	bl	8001004 <writeReg>
  writeReg(0x40, 0x40);
 80013d4:	2140      	movs	r1, #64	@ 0x40
 80013d6:	2040      	movs	r0, #64	@ 0x40
 80013d8:	f7ff fe14 	bl	8001004 <writeReg>
  writeReg(0x0E, 0x06);
 80013dc:	2106      	movs	r1, #6
 80013de:	200e      	movs	r0, #14
 80013e0:	f7ff fe10 	bl	8001004 <writeReg>
  writeReg(0x20, 0x1A);
 80013e4:	211a      	movs	r1, #26
 80013e6:	2020      	movs	r0, #32
 80013e8:	f7ff fe0c 	bl	8001004 <writeReg>
  writeReg(0x43, 0x40);
 80013ec:	2140      	movs	r1, #64	@ 0x40
 80013ee:	2043      	movs	r0, #67	@ 0x43
 80013f0:	f7ff fe08 	bl	8001004 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 80013f4:	2100      	movs	r1, #0
 80013f6:	20ff      	movs	r0, #255	@ 0xff
 80013f8:	f7ff fe04 	bl	8001004 <writeReg>
  writeReg(0x34, 0x03);
 80013fc:	2103      	movs	r1, #3
 80013fe:	2034      	movs	r0, #52	@ 0x34
 8001400:	f7ff fe00 	bl	8001004 <writeReg>
  writeReg(0x35, 0x44);
 8001404:	2144      	movs	r1, #68	@ 0x44
 8001406:	2035      	movs	r0, #53	@ 0x35
 8001408:	f7ff fdfc 	bl	8001004 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 800140c:	2101      	movs	r1, #1
 800140e:	20ff      	movs	r0, #255	@ 0xff
 8001410:	f7ff fdf8 	bl	8001004 <writeReg>
  writeReg(0x31, 0x04);
 8001414:	2104      	movs	r1, #4
 8001416:	2031      	movs	r0, #49	@ 0x31
 8001418:	f7ff fdf4 	bl	8001004 <writeReg>
  writeReg(0x4B, 0x09);
 800141c:	2109      	movs	r1, #9
 800141e:	204b      	movs	r0, #75	@ 0x4b
 8001420:	f7ff fdf0 	bl	8001004 <writeReg>
  writeReg(0x4C, 0x05);
 8001424:	2105      	movs	r1, #5
 8001426:	204c      	movs	r0, #76	@ 0x4c
 8001428:	f7ff fdec 	bl	8001004 <writeReg>
  writeReg(0x4D, 0x04);
 800142c:	2104      	movs	r1, #4
 800142e:	204d      	movs	r0, #77	@ 0x4d
 8001430:	f7ff fde8 	bl	8001004 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 8001434:	2100      	movs	r1, #0
 8001436:	20ff      	movs	r0, #255	@ 0xff
 8001438:	f7ff fde4 	bl	8001004 <writeReg>
  writeReg(0x44, 0x00);
 800143c:	2100      	movs	r1, #0
 800143e:	2044      	movs	r0, #68	@ 0x44
 8001440:	f7ff fde0 	bl	8001004 <writeReg>
  writeReg(0x45, 0x20);
 8001444:	2120      	movs	r1, #32
 8001446:	2045      	movs	r0, #69	@ 0x45
 8001448:	f7ff fddc 	bl	8001004 <writeReg>
  writeReg(0x47, 0x08);
 800144c:	2108      	movs	r1, #8
 800144e:	2047      	movs	r0, #71	@ 0x47
 8001450:	f7ff fdd8 	bl	8001004 <writeReg>
  writeReg(0x48, 0x28);
 8001454:	2128      	movs	r1, #40	@ 0x28
 8001456:	2048      	movs	r0, #72	@ 0x48
 8001458:	f7ff fdd4 	bl	8001004 <writeReg>
  writeReg(0x67, 0x00);
 800145c:	2100      	movs	r1, #0
 800145e:	2067      	movs	r0, #103	@ 0x67
 8001460:	f7ff fdd0 	bl	8001004 <writeReg>
  writeReg(0x70, 0x04);
 8001464:	2104      	movs	r1, #4
 8001466:	2070      	movs	r0, #112	@ 0x70
 8001468:	f7ff fdcc 	bl	8001004 <writeReg>
  writeReg(0x71, 0x01);
 800146c:	2101      	movs	r1, #1
 800146e:	2071      	movs	r0, #113	@ 0x71
 8001470:	f7ff fdc8 	bl	8001004 <writeReg>
  writeReg(0x72, 0xFE);
 8001474:	21fe      	movs	r1, #254	@ 0xfe
 8001476:	2072      	movs	r0, #114	@ 0x72
 8001478:	f7ff fdc4 	bl	8001004 <writeReg>
  writeReg(0x76, 0x00);
 800147c:	2100      	movs	r1, #0
 800147e:	2076      	movs	r0, #118	@ 0x76
 8001480:	f7ff fdc0 	bl	8001004 <writeReg>
  writeReg(0x77, 0x00);
 8001484:	2100      	movs	r1, #0
 8001486:	2077      	movs	r0, #119	@ 0x77
 8001488:	f7ff fdbc 	bl	8001004 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 800148c:	2101      	movs	r1, #1
 800148e:	20ff      	movs	r0, #255	@ 0xff
 8001490:	f7ff fdb8 	bl	8001004 <writeReg>
  writeReg(0x0D, 0x01);
 8001494:	2101      	movs	r1, #1
 8001496:	200d      	movs	r0, #13
 8001498:	f7ff fdb4 	bl	8001004 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x00);
 800149c:	2100      	movs	r1, #0
 800149e:	20ff      	movs	r0, #255	@ 0xff
 80014a0:	f7ff fdb0 	bl	8001004 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x01);
 80014a4:	2101      	movs	r1, #1
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	f7ff fdac 	bl	8001004 <writeReg>
  writeReg(0x01, 0xF8);
 80014ac:	21f8      	movs	r1, #248	@ 0xf8
 80014ae:	2001      	movs	r0, #1
 80014b0:	f7ff fda8 	bl	8001004 <writeReg>

  writeReg(INTERNAL_TUNING_2, 0x01);
 80014b4:	2101      	movs	r1, #1
 80014b6:	20ff      	movs	r0, #255	@ 0xff
 80014b8:	f7ff fda4 	bl	8001004 <writeReg>
  writeReg(0x8E, 0x01);
 80014bc:	2101      	movs	r1, #1
 80014be:	208e      	movs	r0, #142	@ 0x8e
 80014c0:	f7ff fda0 	bl	8001004 <writeReg>
  writeReg(SYSRANGE_START, 0x01);
 80014c4:	2101      	movs	r1, #1
 80014c6:	2000      	movs	r0, #0
 80014c8:	f7ff fd9c 	bl	8001004 <writeReg>
  writeReg(INTERNAL_TUNING_2, 0x00);
 80014cc:	2100      	movs	r1, #0
 80014ce:	20ff      	movs	r0, #255	@ 0xff
 80014d0:	f7ff fd98 	bl	8001004 <writeReg>
  writeReg(POWER_MANAGEMENT_GO1_POWER_FORCE, 0x00);
 80014d4:	2100      	movs	r1, #0
 80014d6:	2080      	movs	r0, #128	@ 0x80
 80014d8:	f7ff fd94 	bl	8001004 <writeReg>
  //***************************************************************************
  // "Set interrupt config to new sample ready"
  // -- VL53L0X_SetGpioConfig() begin
  writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 80014dc:	2104      	movs	r1, #4
 80014de:	200a      	movs	r0, #10
 80014e0:	f7ff fd90 	bl	8001004 <writeReg>
  writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 80014e4:	2084      	movs	r0, #132	@ 0x84
 80014e6:	f7ff fdda 	bl	800109e <readReg>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f023 0310 	bic.w	r3, r3, #16
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	4619      	mov	r1, r3
 80014f4:	2084      	movs	r0, #132	@ 0x84
 80014f6:	f7ff fd85 	bl	8001004 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80014fa:	2101      	movs	r1, #1
 80014fc:	200b      	movs	r0, #11
 80014fe:	f7ff fd81 	bl	8001004 <writeReg>
  //***************************************************************************
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001502:	21e8      	movs	r1, #232	@ 0xe8
 8001504:	2001      	movs	r0, #1
 8001506:	f7ff fd7d 	bl	8001004 <writeReg>
  //***************************************************************************
  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())
  // -- VL53L0X_perform_vhv_calibration() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
 800150a:	2101      	movs	r1, #1
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff fd79 	bl	8001004 <writeReg>
  if (!VL53L0X_performSingleRefCalibration(0x40)) { return false; }
 8001512:	2040      	movs	r0, #64	@ 0x40
 8001514:	f000 f852 	bl	80015bc <VL53L0X_performSingleRefCalibration>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <VL53L0X_init+0x382>
 800151e:	2300      	movs	r3, #0
 8001520:	e010      	b.n	8001544 <VL53L0X_init+0x3a4>
  //***************************************************************************
  // -- VL53L0X_perform_phase_calibration() begin
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001522:	2102      	movs	r1, #2
 8001524:	2001      	movs	r0, #1
 8001526:	f7ff fd6d 	bl	8001004 <writeReg>
  if (!VL53L0X_performSingleRefCalibration(0x00)) { return false; }
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f846 	bl	80015bc <VL53L0X_performSingleRefCalibration>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <VL53L0X_init+0x39a>
 8001536:	2300      	movs	r3, #0
 8001538:	e004      	b.n	8001544 <VL53L0X_init+0x3a4>
  //***************************************************************************
  // "restore the previous Sequence Config"
  writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 800153a:	21e8      	movs	r1, #232	@ 0xe8
 800153c:	2001      	movs	r0, #1
 800153e:	f7ff fd61 	bl	8001004 <writeReg>
  //***************************************************************************
  return true;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000208 	.word	0x20000208

08001550 <VL53L0X_setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
uint8_t VL53L0X_setSignalRateLimit(float limit_Mcps)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	ed87 0a01 	vstr	s0, [r7, #4]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 800155a:	edd7 7a01 	vldr	s15, [r7, #4]
 800155e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001566:	d40a      	bmi.n	800157e <VL53L0X_setSignalRateLimit+0x2e>
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7fe fff5 	bl	8000558 <__aeabi_f2d>
 800156e:	a311      	add	r3, pc, #68	@ (adr r3, 80015b4 <VL53L0X_setSignalRateLimit+0x64>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff fad8 	bl	8000b28 <__aeabi_dcmpgt>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <VL53L0X_setSignalRateLimit+0x32>
 800157e:	2300      	movs	r3, #0
 8001580:	e00f      	b.n	80015a2 <VL53L0X_setSignalRateLimit+0x52>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8001582:	edd7 7a01 	vldr	s15, [r7, #4]
 8001586:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80015b0 <VL53L0X_setSignalRateLimit+0x60>
 800158a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800158e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001592:	ee17 3a90 	vmov	r3, s15
 8001596:	b29b      	uxth	r3, r3
 8001598:	4619      	mov	r1, r3
 800159a:	2044      	movs	r0, #68	@ 0x44
 800159c:	f7ff fd44 	bl	8001028 <writeReg16Bit>
  return true;
 80015a0:	2301      	movs	r3, #1
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	f3af 8000 	nop.w
 80015b0:	43000000 	.word	0x43000000
 80015b4:	0a3d70a4 	.word	0x0a3d70a4
 80015b8:	407fffd7 	.word	0x407fffd7

080015bc <VL53L0X_performSingleRefCalibration>:
  return temp;
}
//=============================================================================
// based on VL53L0X_perform_single_ref_calibration()
uint8_t VL53L0X_performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
  writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	4619      	mov	r1, r3
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff fd17 	bl	8001004 <writeReg>
  writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
 80015d6:	2101      	movs	r1, #1
 80015d8:	200b      	movs	r0, #11
 80015da:	f7ff fd13 	bl	8001004 <writeReg>
  writeReg(SYSRANGE_START, 0x00);
 80015de:	2100      	movs	r1, #0
 80015e0:	2000      	movs	r0, #0
 80015e2:	f7ff fd0f 	bl	8001004 <writeReg>
  return true;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <VL53L0X_getSpadInfo>:
//=============================================================================
// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
uint8_t VL53L0X_getSpadInfo(uint8_t * count, bool * type_is_aperture)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint8_t tmp;

  writeReg(0x80, 0x01);
 80015fa:	2101      	movs	r1, #1
 80015fc:	2080      	movs	r0, #128	@ 0x80
 80015fe:	f7ff fd01 	bl	8001004 <writeReg>
  writeReg(0xFF, 0x01);
 8001602:	2101      	movs	r1, #1
 8001604:	20ff      	movs	r0, #255	@ 0xff
 8001606:	f7ff fcfd 	bl	8001004 <writeReg>
  writeReg(0x00, 0x00);
 800160a:	2100      	movs	r1, #0
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff fcf9 	bl	8001004 <writeReg>

  writeReg(0xFF, 0x06);
 8001612:	2106      	movs	r1, #6
 8001614:	20ff      	movs	r0, #255	@ 0xff
 8001616:	f7ff fcf5 	bl	8001004 <writeReg>
  writeReg(0x83, readReg(0x83) | 0x04);
 800161a:	2083      	movs	r0, #131	@ 0x83
 800161c:	f7ff fd3f 	bl	800109e <readReg>
 8001620:	4603      	mov	r3, r0
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	b2db      	uxtb	r3, r3
 8001628:	4619      	mov	r1, r3
 800162a:	2083      	movs	r0, #131	@ 0x83
 800162c:	f7ff fcea 	bl	8001004 <writeReg>
  writeReg(0xFF, 0x07);
 8001630:	2107      	movs	r1, #7
 8001632:	20ff      	movs	r0, #255	@ 0xff
 8001634:	f7ff fce6 	bl	8001004 <writeReg>
  writeReg(0x81, 0x01);
 8001638:	2101      	movs	r1, #1
 800163a:	2081      	movs	r0, #129	@ 0x81
 800163c:	f7ff fce2 	bl	8001004 <writeReg>

  writeReg(0x80, 0x01);
 8001640:	2101      	movs	r1, #1
 8001642:	2080      	movs	r0, #128	@ 0x80
 8001644:	f7ff fcde 	bl	8001004 <writeReg>

  writeReg(0x94, 0x6b);
 8001648:	216b      	movs	r1, #107	@ 0x6b
 800164a:	2094      	movs	r0, #148	@ 0x94
 800164c:	f7ff fcda 	bl	8001004 <writeReg>
  writeReg(0x83, 0x00);
 8001650:	2100      	movs	r1, #0
 8001652:	2083      	movs	r0, #131	@ 0x83
 8001654:	f7ff fcd6 	bl	8001004 <writeReg>
  startTimeout();
 8001658:	f7ff fccc 	bl	8000ff4 <millis>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	4b2e      	ldr	r3, [pc, #184]	@ (800171c <VL53L0X_getSpadInfo+0x12c>)
 8001662:	801a      	strh	r2, [r3, #0]
  while (readReg(0x83) == 0x00)
 8001664:	e010      	b.n	8001688 <VL53L0X_getSpadInfo+0x98>
  {
    if (checkTimeoutExpired()) { return false; }
 8001666:	4b2e      	ldr	r3, [pc, #184]	@ (8001720 <VL53L0X_getSpadInfo+0x130>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00c      	beq.n	8001688 <VL53L0X_getSpadInfo+0x98>
 800166e:	f7ff fcc1 	bl	8000ff4 <millis>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	4b29      	ldr	r3, [pc, #164]	@ (800171c <VL53L0X_getSpadInfo+0x12c>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	4a28      	ldr	r2, [pc, #160]	@ (8001720 <VL53L0X_getSpadInfo+0x130>)
 800167e:	8812      	ldrh	r2, [r2, #0]
 8001680:	4293      	cmp	r3, r2
 8001682:	dd01      	ble.n	8001688 <VL53L0X_getSpadInfo+0x98>
 8001684:	2300      	movs	r3, #0
 8001686:	e044      	b.n	8001712 <VL53L0X_getSpadInfo+0x122>
  while (readReg(0x83) == 0x00)
 8001688:	2083      	movs	r0, #131	@ 0x83
 800168a:	f7ff fd08 	bl	800109e <readReg>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0e8      	beq.n	8001666 <VL53L0X_getSpadInfo+0x76>
  }
  writeReg(0x83, 0x01);
 8001694:	2101      	movs	r1, #1
 8001696:	2083      	movs	r0, #131	@ 0x83
 8001698:	f7ff fcb4 	bl	8001004 <writeReg>
  tmp = readReg(0x92);
 800169c:	2092      	movs	r0, #146	@ 0x92
 800169e:	f7ff fcfe 	bl	800109e <readReg>
 80016a2:	4603      	mov	r3, r0
 80016a4:	73fb      	strb	r3, [r7, #15]

  *count = tmp & 0x7f;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	09db      	lsrs	r3, r3, #7
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf14      	ite	ne
 80016c0:	2301      	movne	r3, #1
 80016c2:	2300      	moveq	r3, #0
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	701a      	strb	r2, [r3, #0]

  writeReg(0x81, 0x00);
 80016ca:	2100      	movs	r1, #0
 80016cc:	2081      	movs	r0, #129	@ 0x81
 80016ce:	f7ff fc99 	bl	8001004 <writeReg>
  writeReg(0xFF, 0x06);
 80016d2:	2106      	movs	r1, #6
 80016d4:	20ff      	movs	r0, #255	@ 0xff
 80016d6:	f7ff fc95 	bl	8001004 <writeReg>
  writeReg(0x83, readReg(0x83)  & ~0x04);
 80016da:	2083      	movs	r0, #131	@ 0x83
 80016dc:	f7ff fcdf 	bl	800109e <readReg>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f023 0304 	bic.w	r3, r3, #4
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	4619      	mov	r1, r3
 80016ea:	2083      	movs	r0, #131	@ 0x83
 80016ec:	f7ff fc8a 	bl	8001004 <writeReg>
  writeReg(0xFF, 0x01);
 80016f0:	2101      	movs	r1, #1
 80016f2:	20ff      	movs	r0, #255	@ 0xff
 80016f4:	f7ff fc86 	bl	8001004 <writeReg>
  writeReg(0x00, 0x01);
 80016f8:	2101      	movs	r1, #1
 80016fa:	2000      	movs	r0, #0
 80016fc:	f7ff fc82 	bl	8001004 <writeReg>

  writeReg(0xFF, 0x00);
 8001700:	2100      	movs	r1, #0
 8001702:	20ff      	movs	r0, #255	@ 0xff
 8001704:	f7ff fc7e 	bl	8001004 <writeReg>
  writeReg(0x80, 0x00);
 8001708:	2100      	movs	r1, #0
 800170a:	2080      	movs	r0, #128	@ 0x80
 800170c:	f7ff fc7a 	bl	8001004 <writeReg>

  return true;
 8001710:	2301      	movs	r3, #1
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000020a 	.word	0x2000020a
 8001720:	2000020c 	.word	0x2000020c

08001724 <VL53L0X_startContinuous>:
// often as possible); otherwise, continuous timed mode is used, with the given
// inter-measurement period in milliseconds determining how often the sensor
// takes a measurement.
// based on VL53L0X_StartMeasurement()
void VL53L0X_startContinuous(uint32_t period_ms)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  writeReg(0x80, 0x01);
 800172c:	2101      	movs	r1, #1
 800172e:	2080      	movs	r0, #128	@ 0x80
 8001730:	f7ff fc68 	bl	8001004 <writeReg>
  writeReg(0xFF, 0x01);
 8001734:	2101      	movs	r1, #1
 8001736:	20ff      	movs	r0, #255	@ 0xff
 8001738:	f7ff fc64 	bl	8001004 <writeReg>
  writeReg(0x00, 0x00);
 800173c:	2100      	movs	r1, #0
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff fc60 	bl	8001004 <writeReg>
  writeReg(0x91, g_stopVariable);
 8001744:	4b19      	ldr	r3, [pc, #100]	@ (80017ac <VL53L0X_startContinuous+0x88>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	2091      	movs	r0, #145	@ 0x91
 800174c:	f7ff fc5a 	bl	8001004 <writeReg>
  writeReg(0x00, 0x01);
 8001750:	2101      	movs	r1, #1
 8001752:	2000      	movs	r0, #0
 8001754:	f7ff fc56 	bl	8001004 <writeReg>
  writeReg(0xFF, 0x00);
 8001758:	2100      	movs	r1, #0
 800175a:	20ff      	movs	r0, #255	@ 0xff
 800175c:	f7ff fc52 	bl	8001004 <writeReg>
  writeReg(0x80, 0x00);
 8001760:	2100      	movs	r1, #0
 8001762:	2080      	movs	r0, #128	@ 0x80
 8001764:	f7ff fc4e 	bl	8001004 <writeReg>

  if (period_ms != 0)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d015      	beq.n	800179a <VL53L0X_startContinuous+0x76>
  {
    // continuous timed mode
    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() begin

    uint16_t osc_calibrate_val = readReg16Bit(OSC_CALIBRATE_VAL);
 800176e:	20f8      	movs	r0, #248	@ 0xf8
 8001770:	f7ff fca8 	bl	80010c4 <readReg16Bit>
 8001774:	4603      	mov	r3, r0
 8001776:	81fb      	strh	r3, [r7, #14]

    if (osc_calibrate_val != 0)
 8001778:	89fb      	ldrh	r3, [r7, #14]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d004      	beq.n	8001788 <VL53L0X_startContinuous+0x64>
    {
      period_ms *= osc_calibrate_val;
 800177e:	89fa      	ldrh	r2, [r7, #14]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	fb02 f303 	mul.w	r3, r2, r3
 8001786:	607b      	str	r3, [r7, #4]
    }
    writeReg32Bit(SYSTEM_INTERMEASUREMENT_PERIOD, period_ms);
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	2004      	movs	r0, #4
 800178c:	f7ff fc67 	bl	800105e <writeReg32Bit>
    // VL53L0X_SetInterMeasurementPeriodMilliSeconds() end
    writeReg(SYSRANGE_START, 0x04); // VL53L0X_REG_SYSRANGE_MODE_TIMED
 8001790:	2104      	movs	r1, #4
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff fc36 	bl	8001004 <writeReg>
  else
  {
    // continuous back-to-back mode
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
  }
}
 8001798:	e003      	b.n	80017a2 <VL53L0X_startContinuous+0x7e>
    writeReg(SYSRANGE_START, 0x02); // VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK
 800179a:	2102      	movs	r1, #2
 800179c:	2000      	movs	r0, #0
 800179e:	f7ff fc31 	bl	8001004 <writeReg>
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000208 	.word	0x20000208

080017b0 <captDistIR_Init>:
//=================================================================
//			ADC INIT FOR IR SENSOR SHARP GP2D12
//=================================================================

void  captDistIR_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	adcHandle.Instance		= ADC1;
 80017b4:	4b15      	ldr	r3, [pc, #84]	@ (800180c <captDistIR_Init+0x5c>)
 80017b6:	4a16      	ldr	r2, [pc, #88]	@ (8001810 <captDistIR_Init+0x60>)
 80017b8:	601a      	str	r2, [r3, #0]

	adcHandle.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
 80017ba:	4b14      	ldr	r3, [pc, #80]	@ (800180c <captDistIR_Init+0x5c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	605a      	str	r2, [r3, #4]
	adcHandle.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <captDistIR_Init+0x5c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
	adcHandle.Init.Resolution = ADC_RESOLUTION12b;
 80017c6:	4b11      	ldr	r3, [pc, #68]	@ (800180c <captDistIR_Init+0x5c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
	// Don't do continuous conversions - do them on demand
	adcHandle.Init.ContinuousConvMode    = DISABLE;  // Continuous mode disabled to have only 1 conversion at each conversion trig
 80017cc:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <captDistIR_Init+0x5c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
	// Disable the scan conversion so we do one at a time */
	adcHandle.Init.ScanConvMode = DISABLE;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <captDistIR_Init+0x5c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
	//Say how many channels would be used by the sequencer
	adcHandle.Init.NbrOfConversion = 2;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <captDistIR_Init+0x5c>)
 80017da:	2202      	movs	r2, #2
 80017dc:	621a      	str	r2, [r3, #32]
	adcHandle.Init.DiscontinuousConvMode = DISABLE;  // Parameter discarded because sequencer is disabled
 80017de:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <captDistIR_Init+0x5c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24
	adcHandle.Init.NbrOfDiscConversion = 2;
 80017e4:	4b09      	ldr	r3, [pc, #36]	@ (800180c <captDistIR_Init+0x5c>)
 80017e6:	2202      	movs	r2, #2
 80017e8:	629a      	str	r2, [r3, #40]	@ 0x28
	adcHandle.Init.ExternalTrigConvEdge =  ADC_EXTERNALTRIGCONVEDGE_NONE ;
 80017ea:	4b08      	ldr	r3, [pc, #32]	@ (800180c <captDistIR_Init+0x5c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	//Start conversion by software, not an external trigger
	adcHandle.Init.ExternalTrigConv = 0;
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <captDistIR_Init+0x5c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	631a      	str	r2, [r3, #48]	@ 0x30
	adcHandle.Init.DMAContinuousRequests = DISABLE;
 80017f6:	4b05      	ldr	r3, [pc, #20]	@ (800180c <captDistIR_Init+0x5c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	61da      	str	r2, [r3, #28]
	adcHandle.Init.EOCSelection = DISABLE;
 80017fc:	4b03      	ldr	r3, [pc, #12]	@ (800180c <captDistIR_Init+0x5c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	615a      	str	r2, [r3, #20]

	HAL_ADC_Init(&adcHandle);
 8001802:	4802      	ldr	r0, [pc, #8]	@ (800180c <captDistIR_Init+0x5c>)
 8001804:	f002 f9b2 	bl	8003b6c <HAL_ADC_Init>
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000210 	.word	0x20000210
 8001810:	40012000 	.word	0x40012000

08001814 <MX_GPIO_Init>:
#include "main.h"
#include "drv_gpio.h"

void MX_GPIO_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	@ 0x28
 8001818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	4b2d      	ldr	r3, [pc, #180]	@ (80018e4 <MX_GPIO_Init+0xd0>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a2c      	ldr	r2, [pc, #176]	@ (80018e4 <MX_GPIO_Init+0xd0>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b2a      	ldr	r3, [pc, #168]	@ (80018e4 <MX_GPIO_Init+0xd0>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <MX_GPIO_Init+0xd0>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	4a25      	ldr	r2, [pc, #148]	@ (80018e4 <MX_GPIO_Init+0xd0>)
 8001850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001854:	6313      	str	r3, [r2, #48]	@ 0x30
 8001856:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <MX_GPIO_Init+0xd0>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <MX_GPIO_Init+0xd0>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4a1e      	ldr	r2, [pc, #120]	@ (80018e4 <MX_GPIO_Init+0xd0>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6313      	str	r3, [r2, #48]	@ 0x30
 8001872:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <MX_GPIO_Init+0xd0>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <MX_GPIO_Init+0xd0>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a17      	ldr	r2, [pc, #92]	@ (80018e4 <MX_GPIO_Init+0xd0>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <MX_GPIO_Init+0xd0>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	2120      	movs	r1, #32
 800189e:	4812      	ldr	r0, [pc, #72]	@ (80018e8 <MX_GPIO_Init+0xd4>)
 80018a0:	f003 f868 	bl	8004974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	480c      	ldr	r0, [pc, #48]	@ (80018ec <MX_GPIO_Init+0xd8>)
 80018bc:	f002 fed6 	bl	800466c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018c0:	2320      	movs	r3, #32
 80018c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	4804      	ldr	r0, [pc, #16]	@ (80018e8 <MX_GPIO_Init+0xd4>)
 80018d8:	f002 fec8 	bl	800466c <HAL_GPIO_Init>

}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	@ 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020000 	.word	0x40020000
 80018ec:	40020800 	.word	0x40020800

080018f0 <HAL_GPIO_EXTI_Callback>:

extern void quadEncoder_CallbackIndexL(void);
extern void quadEncoder_CallbackIndexR(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001900:	d017      	beq.n	8001932 <HAL_GPIO_EXTI_Callback+0x42>
 8001902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001906:	dc16      	bgt.n	8001936 <HAL_GPIO_EXTI_Callback+0x46>
 8001908:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800190c:	d00e      	beq.n	800192c <HAL_GPIO_EXTI_Callback+0x3c>
 800190e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001912:	dc10      	bgt.n	8001936 <HAL_GPIO_EXTI_Callback+0x46>
 8001914:	2b08      	cmp	r3, #8
 8001916:	d010      	beq.n	800193a <HAL_GPIO_EXTI_Callback+0x4a>
 8001918:	2b08      	cmp	r3, #8
 800191a:	dc0c      	bgt.n	8001936 <HAL_GPIO_EXTI_Callback+0x46>
 800191c:	2b01      	cmp	r3, #1
 800191e:	d002      	beq.n	8001926 <HAL_GPIO_EXTI_Callback+0x36>
 8001920:	2b02      	cmp	r3, #2
 8001922:	d00c      	beq.n	800193e <HAL_GPIO_EXTI_Callback+0x4e>
					break;

	case GPIO_PIN_13 :		// USER BUTTON
					break;

	default : 		break;
 8001924:	e007      	b.n	8001936 <HAL_GPIO_EXTI_Callback+0x46>
		quadEncoder_CallbackIndexR();
 8001926:	f001 f8ef 	bl	8002b08 <quadEncoder_CallbackIndexR>
					break;
 800192a:	e009      	b.n	8001940 <HAL_GPIO_EXTI_Callback+0x50>
		quadEncoder_CallbackIndexL();
 800192c:	f001 f8c0 	bl	8002ab0 <quadEncoder_CallbackIndexL>
					break;
 8001930:	e006      	b.n	8001940 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 8001932:	bf00      	nop
 8001934:	e004      	b.n	8001940 <HAL_GPIO_EXTI_Callback+0x50>
	default : 		break;
 8001936:	bf00      	nop
 8001938:	e002      	b.n	8001940 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 800193a:	bf00      	nop
 800193c:	e000      	b.n	8001940 <HAL_GPIO_EXTI_Callback+0x50>
					break;
 800193e:	bf00      	nop


	}
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <MX_I2C1_Init>:


I2C_HandleTypeDef hi2c1;

void MX_I2C1_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800194c:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <MX_I2C1_Init+0x50>)
 800194e:	4a13      	ldr	r2, [pc, #76]	@ (800199c <MX_I2C1_Init+0x54>)
 8001950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001952:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <MX_I2C1_Init+0x50>)
 8001954:	4a12      	ldr	r2, [pc, #72]	@ (80019a0 <MX_I2C1_Init+0x58>)
 8001956:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001958:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800195e:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001964:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <MX_I2C1_Init+0x50>)
 8001966:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800196a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800196c:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <MX_I2C1_Init+0x50>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001972:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <MX_I2C1_Init+0x50>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001978:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <MX_I2C1_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <MX_I2C1_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001984:	4804      	ldr	r0, [pc, #16]	@ (8001998 <MX_I2C1_Init+0x50>)
 8001986:	f003 f827 	bl	80049d8 <HAL_I2C_Init>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001990:	f000 feac 	bl	80026ec <Error_Handler>
  }

}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000254 	.word	0x20000254
 800199c:	40005400 	.word	0x40005400
 80019a0:	00061a80 	.word	0x00061a80

080019a4 <i2c1_WriteBuffer>:

//======================================================================
// Transmit n_data bytes to i2c slave
//======================================================================
int i2c1_WriteBuffer(uint16_t addrSlave, uint8_t *data, int n_data)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	4603      	mov	r3, r0
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	81fb      	strh	r3, [r7, #14]
	int status;
	status = HAL_I2C_Master_Transmit(&hi2c1, addrSlave, data, n_data , 100);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	89f9      	ldrh	r1, [r7, #14]
 80019b8:	2264      	movs	r2, #100	@ 0x64
 80019ba:	9200      	str	r2, [sp, #0]
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <i2c1_WriteBuffer+0x30>)
 80019c0:	f003 f94e 	bl	8004c60 <HAL_I2C_Master_Transmit>
 80019c4:	4603      	mov	r3, r0
 80019c6:	617b      	str	r3, [r7, #20]
	return status;
 80019c8:	697b      	ldr	r3, [r7, #20]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000254 	.word	0x20000254

080019d8 <i2c1_ReadRegBuffer>:
}
//======================================================================
// Receive n_data bytes - located at regAddr - from i2c slave
//======================================================================
int i2c1_ReadRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af02      	add	r7, sp, #8
 80019de:	60ba      	str	r2, [r7, #8]
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	4603      	mov	r3, r0
 80019e4:	81fb      	strh	r3, [r7, #14]
 80019e6:	460b      	mov	r3, r1
 80019e8:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr;
    RegAddr=regAddr;
 80019ea:	7b7b      	ldrb	r3, [r7, #13]
 80019ec:	74fb      	strb	r3, [r7, #19]
    do{
        status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, &RegAddr, 1, 100);
 80019ee:	f107 0213 	add.w	r2, r7, #19
 80019f2:	89f9      	ldrh	r1, [r7, #14]
 80019f4:	2364      	movs	r3, #100	@ 0x64
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2301      	movs	r3, #1
 80019fa:	480f      	ldr	r0, [pc, #60]	@ (8001a38 <i2c1_ReadRegBuffer+0x60>)
 80019fc:	f003 f930 	bl	8004c60 <HAL_I2C_Master_Transmit>
 8001a00:	4603      	mov	r3, r0
 8001a02:	617b      	str	r3, [r7, #20]
        if( status )
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10f      	bne.n	8001a2a <i2c1_ReadRegBuffer+0x52>
            break;
        status =HAL_I2C_Master_Receive(&hi2c1, addrSlave, data, n_data, n_data*100);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2164      	movs	r1, #100	@ 0x64
 8001a12:	fb01 f303 	mul.w	r3, r1, r3
 8001a16:	89f9      	ldrh	r1, [r7, #14]
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	4806      	ldr	r0, [pc, #24]	@ (8001a38 <i2c1_ReadRegBuffer+0x60>)
 8001a20:	f003 fa1c 	bl	8004e5c <HAL_I2C_Master_Receive>
 8001a24:	4603      	mov	r3, r0
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	e000      	b.n	8001a2c <i2c1_ReadRegBuffer+0x54>
            break;
 8001a2a:	bf00      	nop
    }while(0);
    return status;
 8001a2c:	697b      	ldr	r3, [r7, #20]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000254 	.word	0x20000254

08001a3c <i2c1_WriteRegBuffer>:

//======================================================================
// Write n_data bytes - have to be written at regAddr - to i2c slave
//======================================================================
int i2c1_WriteRegBuffer(uint16_t addrSlave, uint8_t  regAddr,  uint8_t *data, int n_data)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08c      	sub	sp, #48	@ 0x30
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	60ba      	str	r2, [r7, #8]
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4603      	mov	r3, r0
 8001a48:	81fb      	strh	r3, [r7, #14]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	737b      	strb	r3, [r7, #13]
    int status;
    uint8_t RegAddr[0x10];
    RegAddr[0]=regAddr;
 8001a4e:	7b7b      	ldrb	r3, [r7, #13]
 8001a50:	753b      	strb	r3, [r7, #20]
    memcpy(RegAddr+1, data, n_data);
 8001a52:	f107 0314 	add.w	r3, r7, #20
 8001a56:	3301      	adds	r3, #1
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f00c f9f8 	bl	800de52 <memcpy>
   status=HAL_I2C_Master_Transmit(&hi2c1, addrSlave, RegAddr, n_data+1, 100);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	f107 0214 	add.w	r2, r7, #20
 8001a6e:	89f9      	ldrh	r1, [r7, #14]
 8001a70:	2064      	movs	r0, #100	@ 0x64
 8001a72:	9000      	str	r0, [sp, #0]
 8001a74:	4804      	ldr	r0, [pc, #16]	@ (8001a88 <i2c1_WriteRegBuffer+0x4c>)
 8001a76:	f003 f8f3 	bl	8004c60 <HAL_I2C_Master_Transmit>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
     return status;
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3728      	adds	r7, #40	@ 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000254 	.word	0x20000254

08001a8c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif


PUTCHAR_PROTOTYPE
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001a94:	1d39      	adds	r1, r7, #4
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4803      	ldr	r0, [pc, #12]	@ (8001aac <__io_putchar+0x20>)
 8001a9e:	f006 ffdb 	bl	8008a58 <HAL_UART_Transmit>
  return ch;
 8001aa2:	687b      	ldr	r3, [r7, #4]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200002ec 	.word	0x200002ec

08001ab0 <MX_USART1_UART_Init>:


void MX_USART1_UART_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	@ (8001b00 <MX_USART1_UART_Init+0x50>)
 8001ab8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001abc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ac0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ad6:	220c      	movs	r2, #12
 8001ad8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ae6:	4805      	ldr	r0, [pc, #20]	@ (8001afc <MX_USART1_UART_Init+0x4c>)
 8001ae8:	f006 ff69 	bl	80089be <HAL_UART_Init>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001af2:	f000 fdfb 	bl	80026ec <Error_Handler>
  }
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200002a8 	.word	0x200002a8
 8001b00:	40011000 	.word	0x40011000

08001b04 <MX_USART2_UART_Init>:


void MX_USART2_UART_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	@ (8001b54 <MX_USART2_UART_Init+0x50>)
 8001b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b22:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b28:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2e:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b34:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b3a:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <MX_USART2_UART_Init+0x4c>)
 8001b3c:	f006 ff3f 	bl	80089be <HAL_UART_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b46:	f000 fdd1 	bl	80026ec <Error_Handler>
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200002ec 	.word	0x200002ec
 8001b54:	40004400 	.word	0x40004400

08001b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	4b1f      	ldr	r3, [pc, #124]	@ (8001be0 <MX_DMA_Init+0x88>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	4a1e      	ldr	r2, [pc, #120]	@ (8001be0 <MX_DMA_Init+0x88>)
 8001b68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <MX_DMA_Init+0x88>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	4b18      	ldr	r3, [pc, #96]	@ (8001be0 <MX_DMA_Init+0x88>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	4a17      	ldr	r2, [pc, #92]	@ (8001be0 <MX_DMA_Init+0x88>)
 8001b84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8a:	4b15      	ldr	r3, [pc, #84]	@ (8001be0 <MX_DMA_Init+0x88>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2105      	movs	r1, #5
 8001b9a:	2010      	movs	r0, #16
 8001b9c:	f002 f9b2 	bl	8003f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ba0:	2010      	movs	r0, #16
 8001ba2:	f002 f9cb 	bl	8003f3c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2105      	movs	r1, #5
 8001baa:	2011      	movs	r0, #17
 8001bac:	f002 f9aa 	bl	8003f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001bb0:	2011      	movs	r0, #17
 8001bb2:	f002 f9c3 	bl	8003f3c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2105      	movs	r1, #5
 8001bba:	203a      	movs	r0, #58	@ 0x3a
 8001bbc:	f002 f9a2 	bl	8003f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001bc0:	203a      	movs	r0, #58	@ 0x3a
 8001bc2:	f002 f9bb 	bl	8003f3c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	2105      	movs	r1, #5
 8001bca:	2046      	movs	r0, #70	@ 0x46
 8001bcc:	f002 f99a 	bl	8003f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001bd0:	2046      	movs	r0, #70	@ 0x46
 8001bd2:	f002 f9b3 	bl	8003f3c <HAL_NVIC_EnableIRQ>

}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <i2c_send_byteS>:
{
	i2c1_WriteBuffer(LCD_ADDRESS, &dta, 1);
}
//=================================================================
void i2c_send_byteS(unsigned char *dta, unsigned char len)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	70fb      	strb	r3, [r7, #3]
	i2c1_WriteBuffer(LCD_ADDRESS, dta, len);
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	207c      	movs	r0, #124	@ 0x7c
 8001bf8:	f7ff fed4 	bl	80019a4 <i2c1_WriteBuffer>
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <groveLCD_begin>:
//=================================================================
void groveLCD_begin(uint8_t cols, uint8_t lines, uint8_t dotsize)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	71bb      	strb	r3, [r7, #6]
 8001c12:	4613      	mov	r3, r2
 8001c14:	717b      	strb	r3, [r7, #5]
    if (lines > 1) {
 8001c16:	79bb      	ldrb	r3, [r7, #6]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d906      	bls.n	8001c2a <groveLCD_begin+0x26>
        _displayfunction |= LCD_2LINE;
 8001c1c:	4b33      	ldr	r3, [pc, #204]	@ (8001cec <groveLCD_begin+0xe8>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	f043 0308 	orr.w	r3, r3, #8
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4b31      	ldr	r3, [pc, #196]	@ (8001cec <groveLCD_begin+0xe8>)
 8001c28:	701a      	strb	r2, [r3, #0]
    }
    _numlines = lines;
 8001c2a:	4a31      	ldr	r2, [pc, #196]	@ (8001cf0 <groveLCD_begin+0xec>)
 8001c2c:	79bb      	ldrb	r3, [r7, #6]
 8001c2e:	7013      	strb	r3, [r2, #0]
    _currline = 0;
 8001c30:	4b30      	ldr	r3, [pc, #192]	@ (8001cf4 <groveLCD_begin+0xf0>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 8001c36:	797b      	ldrb	r3, [r7, #5]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d009      	beq.n	8001c50 <groveLCD_begin+0x4c>
 8001c3c:	79bb      	ldrb	r3, [r7, #6]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d106      	bne.n	8001c50 <groveLCD_begin+0x4c>
        _displayfunction |= LCD_5x10DOTS;
 8001c42:	4b2a      	ldr	r3, [pc, #168]	@ (8001cec <groveLCD_begin+0xe8>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	f043 0304 	orr.w	r3, r3, #4
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	4b27      	ldr	r3, [pc, #156]	@ (8001cec <groveLCD_begin+0xe8>)
 8001c4e:	701a      	strb	r2, [r3, #0]
    }

    // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
    HAL_Delay(50);
 8001c50:	2032      	movs	r0, #50	@ 0x32
 8001c52:	f001 ff67 	bl	8003b24 <HAL_Delay>

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8001c56:	4b25      	ldr	r3, [pc, #148]	@ (8001cec <groveLCD_begin+0xe8>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	f043 0320 	orr.w	r3, r3, #32
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f000 f89b 	bl	8001d9c <groveLCD_command>
    HAL_Delay(5);  // wait more than 4.1ms
 8001c66:	2005      	movs	r0, #5
 8001c68:	f001 ff5c 	bl	8003b24 <HAL_Delay>

    // second try
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <groveLCD_begin+0xe8>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	f043 0320 	orr.w	r3, r3, #32
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f890 	bl	8001d9c <groveLCD_command>
    HAL_Delay(5);
 8001c7c:	2005      	movs	r0, #5
 8001c7e:	f001 ff51 	bl	8003b24 <HAL_Delay>

    // third go
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8001c82:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <groveLCD_begin+0xe8>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	f043 0320 	orr.w	r3, r3, #32
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 f885 	bl	8001d9c <groveLCD_command>


    // finally, set # lines, font size, etc.
    groveLCD_command(LCD_FUNCTIONSET | _displayfunction);
 8001c92:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <groveLCD_begin+0xe8>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	f043 0320 	orr.w	r3, r3, #32
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 f87d 	bl	8001d9c <groveLCD_command>

    // turn the display on with no cursor or blinking default
    _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001ca2:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <groveLCD_begin+0xf4>)
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	701a      	strb	r2, [r3, #0]
    groveLCD_display();
 8001ca8:	f000 f862 	bl	8001d70 <groveLCD_display>

    // clear it off
    groveLCD_clear();
 8001cac:	f000 f831 	bl	8001d12 <groveLCD_clear>

    // Initialize to default text direction (for romance languages)
    _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001cb0:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <groveLCD_begin+0xf8>)
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	701a      	strb	r2, [r3, #0]
    // set the entry mode
    groveLCD_command(LCD_ENTRYMODESET | _displaymode);
 8001cb6:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <groveLCD_begin+0xf8>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	f043 0304 	orr.w	r3, r3, #4
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f86b 	bl	8001d9c <groveLCD_command>


    // backlight init
    groveLCD_setReg(REG_MODE1, 0);
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f000 f8a4 	bl	8001e16 <groveLCD_setReg>
    // set LEDs controllable by both PWM and GRPPWM registers
    groveLCD_setReg(REG_OUTPUT, 0xFF);
 8001cce:	21ff      	movs	r1, #255	@ 0xff
 8001cd0:	2008      	movs	r0, #8
 8001cd2:	f000 f8a0 	bl	8001e16 <groveLCD_setReg>
    // set MODE2 values
    // 0010 0000 -> 0x20  (DMBLNK to 1, ie blinky mode)
    groveLCD_setReg(REG_MODE2, 0x20);
 8001cd6:	2120      	movs	r1, #32
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f000 f89c 	bl	8001e16 <groveLCD_setReg>

    groveLCD_setColorWhite();
 8001cde:	f000 f80f 	bl	8001d00 <groveLCD_setColorWhite>

}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200004b0 	.word	0x200004b0
 8001cf0:	200004b3 	.word	0x200004b3
 8001cf4:	200004b4 	.word	0x200004b4
 8001cf8:	200004b1 	.word	0x200004b1
 8001cfc:	200004b2 	.word	0x200004b2

08001d00 <groveLCD_setColorWhite>:
//=================================================================
void groveLCD_setColorAll(){groveLCD_setRGB(0, 0, 0);}
void groveLCD_setColorWhite(){groveLCD_setRGB(255, 255, 255);}
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	22ff      	movs	r2, #255	@ 0xff
 8001d06:	21ff      	movs	r1, #255	@ 0xff
 8001d08:	20ff      	movs	r0, #255	@ 0xff
 8001d0a:	f000 f896 	bl	8001e3a <groveLCD_setRGB>
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <groveLCD_clear>:
//=================================================================

/********** high level commands, for the user! */
void groveLCD_clear()
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0
	groveLCD_command(LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 8001d16:	2001      	movs	r0, #1
 8001d18:	f000 f840 	bl	8001d9c <groveLCD_command>
    HAL_Delay(2000);          // this command takes a long time!
 8001d1c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d20:	f001 ff00 	bl	8003b24 <HAL_Delay>
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <groveLCD_setCursor>:
	groveLCD_command(LCD_RETURNHOME);        // set cursor position to zero
    HAL_Delay(2000);        // this command takes a long time!
}
//=================================================================
void groveLCD_setCursor(uint8_t col, uint8_t row)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	460a      	mov	r2, r1
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	4613      	mov	r3, r2
 8001d36:	71bb      	strb	r3, [r7, #6]
    col = (row == 0 ? col|0x80 : col|0xc0);
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d104      	bne.n	8001d48 <groveLCD_setCursor+0x20>
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	e003      	b.n	8001d50 <groveLCD_setCursor+0x28>
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, col};
 8001d52:	2380      	movs	r3, #128	@ 0x80
 8001d54:	733b      	strb	r3, [r7, #12]
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	2102      	movs	r1, #2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff3f 	bl	8001be4 <i2c_send_byteS>
}
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <groveLCD_display>:
{
    _displaycontrol &= ~LCD_DISPLAYON;
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
}
//=================================================================
void groveLCD_display() {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
    _displaycontrol |= LCD_DISPLAYON;
 8001d74:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <groveLCD_display+0x28>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <groveLCD_display+0x28>)
 8001d80:	701a      	strb	r2, [r3, #0]
    groveLCD_command(LCD_DISPLAYCONTROL | _displaycontrol);
 8001d82:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <groveLCD_display+0x28>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	f043 0308 	orr.w	r3, r3, #8
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 f805 	bl	8001d9c <groveLCD_command>
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200004b1 	.word	0x200004b1

08001d9c <groveLCD_command>:
//=================================================================
/*********** mid level commands, for sending data/cmds */

// send command
void groveLCD_command(uint8_t value)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x80, value};
 8001da6:	2380      	movs	r3, #128	@ 0x80
 8001da8:	733b      	strb	r3, [r7, #12]
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	2102      	movs	r1, #2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff15 	bl	8001be4 <i2c_send_byteS>
}
 8001dba:	bf00      	nop
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <groveLCD_write>:
//=================================================================
// send data
int groveLCD_write(uint8_t value)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
    unsigned char dta[2] = {0x40, value};
 8001dcc:	2340      	movs	r3, #64	@ 0x40
 8001dce:	733b      	strb	r3, [r7, #12]
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	737b      	strb	r3, [r7, #13]
    i2c_send_byteS(dta, 2);
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	2102      	movs	r1, #2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff02 	bl	8001be4 <i2c_send_byteS>
    return 1; // assume sucess
 8001de0:	2301      	movs	r3, #1
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <groveLCD_putString>:
//=================================================================
void groveLCD_putString(char* s)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 8001df2:	e007      	b.n	8001e04 <groveLCD_putString+0x1a>
	{
		groveLCD_write(*s);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ffe2 	bl	8001dc2 <groveLCD_write>
		s++;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	3301      	adds	r3, #1
 8001e02:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f3      	bne.n	8001df4 <groveLCD_putString+0xa>
	}
}
 8001e0c:	bf00      	nop
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <groveLCD_setReg>:
//=================================================================
void groveLCD_setReg(unsigned char addr, unsigned char dta)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	460a      	mov	r2, r1
 8001e20:	71fb      	strb	r3, [r7, #7]
 8001e22:	4613      	mov	r3, r2
 8001e24:	71bb      	strb	r3, [r7, #6]
    i2c1_WriteRegBuffer(RGB_ADDRESS, addr,  &dta, 1);
 8001e26:	1dba      	adds	r2, r7, #6
 8001e28:	79f9      	ldrb	r1, [r7, #7]
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	20c4      	movs	r0, #196	@ 0xc4
 8001e2e:	f7ff fe05 	bl	8001a3c <i2c1_WriteRegBuffer>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <groveLCD_setRGB>:
//=================================================================
void groveLCD_setRGB(unsigned char r, unsigned char g, unsigned char b)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	71fb      	strb	r3, [r7, #7]
 8001e44:	460b      	mov	r3, r1
 8001e46:	71bb      	strb	r3, [r7, #6]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	717b      	strb	r3, [r7, #5]
	groveLCD_setReg(REG_RED, r);
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	4619      	mov	r1, r3
 8001e50:	2004      	movs	r0, #4
 8001e52:	f7ff ffe0 	bl	8001e16 <groveLCD_setReg>
	groveLCD_setReg(REG_GREEN, g);
 8001e56:	79bb      	ldrb	r3, [r7, #6]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	2003      	movs	r0, #3
 8001e5c:	f7ff ffdb 	bl	8001e16 <groveLCD_setReg>
	groveLCD_setReg(REG_BLUE, b);
 8001e60:	797b      	ldrb	r3, [r7, #5]
 8001e62:	4619      	mov	r1, r3
 8001e64:	2002      	movs	r0, #2
 8001e66:	f7ff ffd6 	bl	8001e16 <groveLCD_setReg>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	0000      	movs	r0, r0
 8001e74:	0000      	movs	r0, r0
	...

08001e78 <groveLCD_term_printf>:
    if(color > 3)return ;
    groveLCD_setRGB(color_define[color][0], color_define[color][1], color_define[color][2]);
}
//============================================================
void groveLCD_term_printf(const char* fmt, ...)
{
 8001e78:	b40f      	push	{r0, r1, r2, r3}
 8001e7a:	b5b0      	push	{r4, r5, r7, lr}
 8001e7c:	b0a4      	sub	sp, #144	@ 0x90
 8001e7e:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[60];
	int first=0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	677b      	str	r3, [r7, #116]	@ 0x74

	va_start(ap, fmt);
 8001e84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e88:	64bb      	str	r3, [r7, #72]	@ 0x48

	while (*fmt != '\0') {
 8001e8a:	e1cd      	b.n	8002228 <groveLCD_term_printf+0x3b0>
		if (*fmt =='%') {
 8001e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b25      	cmp	r3, #37	@ 0x25
 8001e94:	f040 81bd 	bne.w	8002212 <groveLCD_term_printf+0x39a>
			size=0; sp=1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	67bb      	str	r3, [r7, #120]	@ 0x78
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 8001ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001eaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b30      	cmp	r3, #48	@ 0x30
 8001eb2:	d106      	bne.n	8001ec2 <groveLCD_term_printf+0x4a>
 8001eb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	67bb      	str	r3, [r7, #120]	@ 0x78
			ch=*fmt;
 8001ec2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 8001ecc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001ed0:	2b30      	cmp	r3, #48	@ 0x30
 8001ed2:	d92c      	bls.n	8001f2e <groveLCD_term_printf+0xb6>
 8001ed4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001ed8:	2b39      	cmp	r3, #57	@ 0x39
 8001eda:	d828      	bhi.n	8001f2e <groveLCD_term_printf+0xb6>
				char tmp[10];
				int i=0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	673b      	str	r3, [r7, #112]	@ 0x70
				while ((ch>='0') && (ch<='9')) {
 8001ee0:	e012      	b.n	8001f08 <groveLCD_term_printf+0x90>
					tmp[i++]=ch;
 8001ee2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	673a      	str	r2, [r7, #112]	@ 0x70
 8001ee8:	3388      	adds	r3, #136	@ 0x88
 8001eea:	443b      	add	r3, r7
 8001eec:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 8001ef0:	f803 2c88 	strb.w	r2, [r3, #-136]
					ch=*++fmt;
 8001ef4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001efe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
				while ((ch>='0') && (ch<='9')) {
 8001f08:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001f0c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001f0e:	d903      	bls.n	8001f18 <groveLCD_term_printf+0xa0>
 8001f10:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001f14:	2b39      	cmp	r3, #57	@ 0x39
 8001f16:	d9e4      	bls.n	8001ee2 <groveLCD_term_printf+0x6a>
				}
				tmp[i]='\0';
 8001f18:	463a      	mov	r2, r7
 8001f1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f1c:	4413      	add	r3, r2
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 8001f22:	463b      	mov	r3, r7
 8001f24:	210a      	movs	r1, #10
 8001f26:	4618      	mov	r0, r3
 8001f28:	f001 fc36 	bl	8003798 <str2num>
 8001f2c:	67f8      	str	r0, [r7, #124]	@ 0x7c
			}
			switch (ch) {
 8001f2e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001f32:	2b25      	cmp	r3, #37	@ 0x25
 8001f34:	d03c      	beq.n	8001fb0 <groveLCD_term_printf+0x138>
 8001f36:	2b25      	cmp	r3, #37	@ 0x25
 8001f38:	f2c0 8164 	blt.w	8002204 <groveLCD_term_printf+0x38c>
 8001f3c:	2b78      	cmp	r3, #120	@ 0x78
 8001f3e:	f300 8161 	bgt.w	8002204 <groveLCD_term_printf+0x38c>
 8001f42:	2b63      	cmp	r3, #99	@ 0x63
 8001f44:	f2c0 815e 	blt.w	8002204 <groveLCD_term_printf+0x38c>
 8001f48:	3b63      	subs	r3, #99	@ 0x63
 8001f4a:	2b15      	cmp	r3, #21
 8001f4c:	f200 815a 	bhi.w	8002204 <groveLCD_term_printf+0x38c>
 8001f50:	a201      	add	r2, pc, #4	@ (adr r2, 8001f58 <groveLCD_term_printf+0xe0>)
 8001f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f56:	bf00      	nop
 8001f58:	08001fb9 	.word	0x08001fb9
 8001f5c:	08001fe3 	.word	0x08001fe3
 8001f60:	08002205 	.word	0x08002205
 8001f64:	080020e3 	.word	0x080020e3
 8001f68:	08002205 	.word	0x08002205
 8001f6c:	08002205 	.word	0x08002205
 8001f70:	08002205 	.word	0x08002205
 8001f74:	08002205 	.word	0x08002205
 8001f78:	08002205 	.word	0x08002205
 8001f7c:	08002205 	.word	0x08002205
 8001f80:	08002205 	.word	0x08002205
 8001f84:	08002205 	.word	0x08002205
 8001f88:	08002053 	.word	0x08002053
 8001f8c:	0800207f 	.word	0x0800207f
 8001f90:	08002205 	.word	0x08002205
 8001f94:	08002205 	.word	0x08002205
 8001f98:	08001fd1 	.word	0x08001fd1
 8001f9c:	08002205 	.word	0x08002205
 8001fa0:	08002027 	.word	0x08002027
 8001fa4:	08002205 	.word	0x08002205
 8001fa8:	08002205 	.word	0x08002205
 8001fac:	080020b7 	.word	0x080020b7
				case '%':
					groveLCD_write('%');
 8001fb0:	2025      	movs	r0, #37	@ 0x25
 8001fb2:	f7ff ff06 	bl	8001dc2 <groveLCD_write>
					break;
 8001fb6:	e132      	b.n	800221e <groveLCD_term_printf+0x3a6>
				case 'c':
					ch = va_arg(ap, int);
 8001fb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fba:	1d1a      	adds	r2, r3, #4
 8001fbc:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
					groveLCD_write(ch);
 8001fc4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fefa 	bl	8001dc2 <groveLCD_write>
					break;
 8001fce:	e126      	b.n	800221e <groveLCD_term_printf+0x3a6>
				case 's':
					p = va_arg(ap, char *);
 8001fd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fd2:	1d1a      	adds	r2, r3, #4
 8001fd4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
					groveLCD_putString(p);
 8001fda:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001fdc:	f7ff ff05 	bl	8001dea <groveLCD_putString>
					break;
 8001fe0:	e11d      	b.n	800221e <groveLCD_term_printf+0x3a6>
				case 'd':
					ul = va_arg(ap, long);
 8001fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001fe4:	1d1a      	adds	r2, r3, #4
 8001fe6:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					if ((long)ul < 0) {
 8001fee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	da07      	bge.n	8002006 <groveLCD_term_printf+0x18e>
						groveLCD_write('-');
 8001ff6:	202d      	movs	r0, #45	@ 0x2d
 8001ff8:	f7ff fee3 	bl	8001dc2 <groveLCD_write>
						ul = -(long)ul;
 8001ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002000:	425b      	negs	r3, r3
 8002002:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 8002006:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002008:	f107 000c 	add.w	r0, r7, #12
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002010:	220a      	movs	r2, #10
 8002012:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8002016:	f001 fb3b 	bl	8003690 <num2str>
					groveLCD_putString(s);
 800201a:	f107 030c 	add.w	r3, r7, #12
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fee3 	bl	8001dea <groveLCD_putString>
					break;
 8002024:	e0fb      	b.n	800221e <groveLCD_term_printf+0x3a6>
				case 'u':
					ul = va_arg(ap, unsigned int);
 8002026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002028:	1d1a      	adds	r2, r3, #4
 800202a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					num2str(s, ul, 10, size, sp);
 8002032:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002034:	f107 000c 	add.w	r0, r7, #12
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800203c:	220a      	movs	r2, #10
 800203e:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8002042:	f001 fb25 	bl	8003690 <num2str>
					groveLCD_putString(s);
 8002046:	f107 030c 	add.w	r3, r7, #12
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fecd 	bl	8001dea <groveLCD_putString>
					break;
 8002050:	e0e5      	b.n	800221e <groveLCD_term_printf+0x3a6>
				case 'o':
					ul = va_arg(ap, unsigned int);
 8002052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002054:	1d1a      	adds	r2, r3, #4
 8002056:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					num2str(s, ul, 8, size, sp);
 800205e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002060:	f107 000c 	add.w	r0, r7, #12
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002068:	2208      	movs	r2, #8
 800206a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800206e:	f001 fb0f 	bl	8003690 <num2str>
					groveLCD_putString(s);
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff feb7 	bl	8001dea <groveLCD_putString>
					break;
 800207c:	e0cf      	b.n	800221e <groveLCD_term_printf+0x3a6>
				case 'p':
					groveLCD_write('0');
 800207e:	2030      	movs	r0, #48	@ 0x30
 8002080:	f7ff fe9f 	bl	8001dc2 <groveLCD_write>
					groveLCD_write('x');
 8002084:	2078      	movs	r0, #120	@ 0x78
 8002086:	f7ff fe9c 	bl	8001dc2 <groveLCD_write>
					ul = va_arg(ap, unsigned int);
 800208a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800208c:	1d1a      	adds	r2, r3, #4
 800208e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					num2str(s, ul, 16, size, sp);
 8002096:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002098:	f107 000c 	add.w	r0, r7, #12
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020a0:	2210      	movs	r2, #16
 80020a2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80020a6:	f001 faf3 	bl	8003690 <num2str>
					groveLCD_putString(s);
 80020aa:	f107 030c 	add.w	r3, r7, #12
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fe9b 	bl	8001dea <groveLCD_putString>
					break;
 80020b4:	e0b3      	b.n	800221e <groveLCD_term_printf+0x3a6>
				case 'x':
					ul = va_arg(ap, unsigned int);
 80020b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020b8:	1d1a      	adds	r2, r3, #4
 80020ba:	64ba      	str	r2, [r7, #72]	@ 0x48
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
					num2str(s, ul, 16, size, sp);
 80020c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020c4:	f107 000c 	add.w	r0, r7, #12
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020cc:	2210      	movs	r2, #16
 80020ce:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80020d2:	f001 fadd 	bl	8003690 <num2str>
					groveLCD_putString(s);
 80020d6:	f107 030c 	add.w	r3, r7, #12
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fe85 	bl	8001dea <groveLCD_putString>
					break;
 80020e0:	e09d      	b.n	800221e <groveLCD_term_printf+0x3a6>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 80020e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10c      	bne.n	8002102 <groveLCD_term_printf+0x28a>
 80020e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020ea:	3307      	adds	r3, #7
 80020ec:	f023 0307 	bic.w	r3, r3, #7
 80020f0:	f103 0208 	add.w	r2, r3, #8
 80020f4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80020f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fa:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 80020fe:	2301      	movs	r3, #1
 8002100:	677b      	str	r3, [r7, #116]	@ 0x74
					ull = va_arg(ap, long long unsigned int);
 8002102:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002104:	3307      	adds	r3, #7
 8002106:	f023 0307 	bic.w	r3, r3, #7
 800210a:	f103 0208 	add.w	r2, r3, #8
 800210e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002114:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
					int sign = ( ull & 0x80000000 ) >> 31;
 8002118:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	0fc2      	lsrs	r2, r0, #31
 8002126:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800212a:	0fcb      	lsrs	r3, r1, #31
 800212c:	4613      	mov	r3, r2
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	65fb      	str	r3, [r7, #92]	@ 0x5c
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 8002134:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002136:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800213a:	65bb      	str	r3, [r7, #88]	@ 0x58
					float mf = (float)m ;
 800213c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002146:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
					mf = mf / pow(2.0,20.0);
 800214a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800214e:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8002250 <groveLCD_term_printf+0x3d8>
 8002152:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002156:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
					mf = mf + 1.0;
 800215a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800215e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002162:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002166:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 800216a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	f04f 0300 	mov.w	r3, #0
 8002176:	0dc2      	lsrs	r2, r0, #23
 8002178:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800217c:	0dcb      	lsrs	r3, r1, #23
 800217e:	4613      	mov	r3, r2
 8002180:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002184:	653b      	str	r3, [r7, #80]	@ 0x50
					e = e | (( ull & 0x000F00000 ) >> 20);
 8002186:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	0d02      	lsrs	r2, r0, #20
 8002194:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002198:	0d0b      	lsrs	r3, r1, #20
 800219a:	4613      	mov	r3, r2
 800219c:	f003 020f 	and.w	r2, r3, #15
 80021a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021a2:	4313      	orrs	r3, r2
 80021a4:	653b      	str	r3, [r7, #80]	@ 0x50
					e = e - 127;
 80021a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021a8:	3b7f      	subs	r3, #127	@ 0x7f
 80021aa:	653b      	str	r3, [r7, #80]	@ 0x50
					float f = mf*myPow(2.0,e);
 80021ac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80021ae:	f7fe f9d3 	bl	8000558 <__aeabi_f2d>
 80021b2:	4604      	mov	r4, r0
 80021b4:	460d      	mov	r5, r1
 80021b6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80021b8:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 8002248 <groveLCD_term_printf+0x3d0>
 80021bc:	f001 fbfc 	bl	80039b8 <myPow>
 80021c0:	ec53 2b10 	vmov	r2, r3, d0
 80021c4:	4620      	mov	r0, r4
 80021c6:	4629      	mov	r1, r5
 80021c8:	f7fe fa1e 	bl	8000608 <__aeabi_dmul>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	f7fe fd10 	bl	8000bf8 <__aeabi_d2f>
 80021d8:	4603      	mov	r3, r0
 80021da:	64fb      	str	r3, [r7, #76]	@ 0x4c
					if(sign==1){ groveLCD_write('-'); }
 80021dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d102      	bne.n	80021e8 <groveLCD_term_printf+0x370>
 80021e2:	202d      	movs	r0, #45	@ 0x2d
 80021e4:	f7ff fded 	bl	8001dc2 <groveLCD_write>
					float2str((char*)s, f, 5);
 80021e8:	f107 030c 	add.w	r3, r7, #12
 80021ec:	2105      	movs	r1, #5
 80021ee:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 80021f2:	4618      	mov	r0, r3
 80021f4:	f001 fb90 	bl	8003918 <float2str>
					groveLCD_putString((char*)s);
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fdf4 	bl	8001dea <groveLCD_putString>
					break;
 8002202:	e00c      	b.n	800221e <groveLCD_term_printf+0x3a6>

				default:
					groveLCD_write(*fmt);
 8002204:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fdd9 	bl	8001dc2 <groveLCD_write>
 8002210:	e005      	b.n	800221e <groveLCD_term_printf+0x3a6>
			}
		} else groveLCD_write(*fmt);
 8002212:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fdd2 	bl	8001dc2 <groveLCD_write>
		fmt++;
 800221e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002222:	3301      	adds	r3, #1
 8002224:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	while (*fmt != '\0') {
 8002228:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f47f ae2c 	bne.w	8001e8c <groveLCD_term_printf+0x14>
	}
	va_end(ap);
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3788      	adds	r7, #136	@ 0x88
 800223a:	46bd      	mov	sp, r7
 800223c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002240:	b004      	add	sp, #16
 8002242:	4770      	bx	lr
 8002244:	f3af 8000 	nop.w
 8002248:	00000000 	.word	0x00000000
 800224c:	40000000 	.word	0x40000000
 8002250:	49800000 	.word	0x49800000
 8002254:	00000000 	.word	0x00000000

08002258 <task_A>:
int tab_speed[100];
int speed;

// Fonction de contrôle pour la roue gauche
static void task_A(void *pvParameters)
{
 8002258:	b5b0      	push	{r4, r5, r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	struct AMessage pxLMessage;
	int consigne = 0; // La vitesse à laquelle je souhaite rouler
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
	int speed_L=0; // vitesse roue gauche
 8002264:	2300      	movs	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]


	for (;;)
	{
		// Synchronisation de l’asservissement
		xQueueReceive( qhL,  &( pxLMessage ) , portMAX_DELAY );
 8002268:	4b37      	ldr	r3, [pc, #220]	@ (8002348 <task_A+0xf0>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f107 0108 	add.w	r1, r7, #8
 8002270:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002274:	4618      	mov	r0, r3
 8002276:	f008 f811 	bl	800a29c <xQueueReceive>
		//printf("TASK A \r\n");
		// Vitesse moteur gauche
		speed_L = quadEncoder_GetSpeedL();
 800227a:	f000 fb75 	bl	8002968 <quadEncoder_GetSpeedL>
 800227e:	4603      	mov	r3, r0
 8002280:	61bb      	str	r3, [r7, #24]
		err_L=300-speed_L;
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8002288:	617b      	str	r3, [r7, #20]
		proportionalComponent_L=Kp_L*(float)err_L;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	ee07 3a90 	vmov	s15, r3
 8002290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002294:	ee17 0a90 	vmov	r0, s15
 8002298:	f7fe f95e 	bl	8000558 <__aeabi_f2d>
 800229c:	a326      	add	r3, pc, #152	@ (adr r3, 8002338 <task_A+0xe0>)
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	f7fe f9b1 	bl	8000608 <__aeabi_dmul>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7fe fca3 	bl	8000bf8 <__aeabi_d2f>
 80022b2:	4603      	mov	r3, r0
 80022b4:	613b      	str	r3, [r7, #16]
		integralComponent_L=integralComponent_L+Kp_L*Ki_L*(float)err_L;
 80022b6:	4b25      	ldr	r3, [pc, #148]	@ (800234c <task_A+0xf4>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe f94c 	bl	8000558 <__aeabi_f2d>
 80022c0:	4604      	mov	r4, r0
 80022c2:	460d      	mov	r5, r1
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ce:	ee17 0a90 	vmov	r0, s15
 80022d2:	f7fe f941 	bl	8000558 <__aeabi_f2d>
 80022d6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002340 <task_A+0xe8>)
 80022d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022dc:	f7fe f994 	bl	8000608 <__aeabi_dmul>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4620      	mov	r0, r4
 80022e6:	4629      	mov	r1, r5
 80022e8:	f7fd ffd8 	bl	800029c <__adddf3>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7fe fc80 	bl	8000bf8 <__aeabi_d2f>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4a14      	ldr	r2, [pc, #80]	@ (800234c <task_A+0xf4>)
 80022fc:	6013      	str	r3, [r2, #0]
		consigne = (int)(proportionalComponent_L+integralComponent_L);
 80022fe:	4b13      	ldr	r3, [pc, #76]	@ (800234c <task_A+0xf4>)
 8002300:	ed93 7a00 	vldr	s14, [r3]
 8002304:	edd7 7a04 	vldr	s15, [r7, #16]
 8002308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800230c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002310:	ee17 3a90 	vmov	r3, s15
 8002314:	61fb      	str	r3, [r7, #28]
		motorLeft_SetDuty(consigne+100); //centrer le rapport cyclique, ce qui place les moteurs au repos si duty = 100
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3364      	adds	r3, #100	@ 0x64
 800231a:	4618      	mov	r0, r3
 800231c:	f000 fa48 	bl	80027b0 <motorLeft_SetDuty>
		// Libère un sémaphore
		xSemaphoreGive( xSemaphore );
 8002320:	4b0b      	ldr	r3, [pc, #44]	@ (8002350 <task_A+0xf8>)
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	2300      	movs	r3, #0
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	f007 fe17 	bl	8009f5c <xQueueGenericSend>
		vTaskDelay(5);
 800232e:	2005      	movs	r0, #5
 8002330:	f008 fcea 	bl	800ad08 <vTaskDelay>
		xQueueReceive( qhL,  &( pxLMessage ) , portMAX_DELAY );
 8002334:	bf00      	nop
 8002336:	e797      	b.n	8002268 <task_A+0x10>
 8002338:	47ae147b 	.word	0x47ae147b
 800233c:	3f847ae1 	.word	0x3f847ae1
 8002340:	ada2811d 	.word	0xada2811d
 8002344:	3f61cf06 	.word	0x3f61cf06
 8002348:	200004c0 	.word	0x200004c0
 800234c:	200004d0 	.word	0x200004d0
 8002350:	200004b8 	.word	0x200004b8
 8002354:	00000000 	.word	0x00000000

08002358 <task_B>:
	}
}

// Fonction de contrôle pour la roue droite
static void task_B(void *pvParameters)
{
 8002358:	b5b0      	push	{r4, r5, r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	struct AMessage pxRMessage;
	int consigne = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
	int speed_R=0; // vitesse roue droite
 8002364:	2300      	movs	r3, #0
 8002366:	61bb      	str	r3, [r7, #24]
	static float integralComponent_R=0.0;
	int i;

	for (;;)
	{
		xQueueReceive( qhR,  &( pxRMessage ) , portMAX_DELAY );
 8002368:	4b37      	ldr	r3, [pc, #220]	@ (8002448 <task_B+0xf0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f107 0108 	add.w	r1, r7, #8
 8002370:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002374:	4618      	mov	r0, r3
 8002376:	f007 ff91 	bl	800a29c <xQueueReceive>
		//printf("TASK B \r\n");

		speed_R = quadEncoder_GetSpeedR();
 800237a:	f000 fb47 	bl	8002a0c <quadEncoder_GetSpeedR>
 800237e:	4603      	mov	r3, r0
 8002380:	61bb      	str	r3, [r7, #24]
		err_R=300-speed_R;
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	f5c3 7396 	rsb	r3, r3, #300	@ 0x12c
 8002388:	617b      	str	r3, [r7, #20]
		proportionalComponent_R=Kp_R*(float)err_R;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	ee07 3a90 	vmov	s15, r3
 8002390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002394:	ee17 0a90 	vmov	r0, s15
 8002398:	f7fe f8de 	bl	8000558 <__aeabi_f2d>
 800239c:	a326      	add	r3, pc, #152	@ (adr r3, 8002438 <task_B+0xe0>)
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	f7fe f931 	bl	8000608 <__aeabi_dmul>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7fe fc23 	bl	8000bf8 <__aeabi_d2f>
 80023b2:	4603      	mov	r3, r0
 80023b4:	613b      	str	r3, [r7, #16]
		integralComponent_R=integralComponent_R+Kp_R*Ki_R*(float)err_R;
 80023b6:	4b25      	ldr	r3, [pc, #148]	@ (800244c <task_B+0xf4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f8cc 	bl	8000558 <__aeabi_f2d>
 80023c0:	4604      	mov	r4, r0
 80023c2:	460d      	mov	r5, r1
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	ee07 3a90 	vmov	s15, r3
 80023ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ce:	ee17 0a90 	vmov	r0, s15
 80023d2:	f7fe f8c1 	bl	8000558 <__aeabi_f2d>
 80023d6:	a31a      	add	r3, pc, #104	@ (adr r3, 8002440 <task_B+0xe8>)
 80023d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023dc:	f7fe f914 	bl	8000608 <__aeabi_dmul>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4620      	mov	r0, r4
 80023e6:	4629      	mov	r1, r5
 80023e8:	f7fd ff58 	bl	800029c <__adddf3>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	f7fe fc00 	bl	8000bf8 <__aeabi_d2f>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4a14      	ldr	r2, [pc, #80]	@ (800244c <task_B+0xf4>)
 80023fc:	6013      	str	r3, [r2, #0]
		consigne = (int)(proportionalComponent_R+integralComponent_R);
 80023fe:	4b13      	ldr	r3, [pc, #76]	@ (800244c <task_B+0xf4>)
 8002400:	ed93 7a00 	vldr	s14, [r3]
 8002404:	edd7 7a04 	vldr	s15, [r7, #16]
 8002408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002410:	ee17 3a90 	vmov	r3, s15
 8002414:	61fb      	str	r3, [r7, #28]
		motorRight_SetDuty(consigne+100);
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3364      	adds	r3, #100	@ 0x64
 800241a:	4618      	mov	r0, r3
 800241c:	f000 f9d8 	bl	80027d0 <motorRight_SetDuty>

		xSemaphoreGive( xSemaphore );
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <task_B+0xf8>)
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	2300      	movs	r3, #0
 8002426:	2200      	movs	r2, #0
 8002428:	2100      	movs	r1, #0
 800242a:	f007 fd97 	bl	8009f5c <xQueueGenericSend>
		vTaskDelay(5);
 800242e:	2005      	movs	r0, #5
 8002430:	f008 fc6a 	bl	800ad08 <vTaskDelay>
		xQueueReceive( qhR,  &( pxRMessage ) , portMAX_DELAY );
 8002434:	bf00      	nop
 8002436:	e797      	b.n	8002368 <task_B+0x10>
 8002438:	47ae147b 	.word	0x47ae147b
 800243c:	3f847ae1 	.word	0x3f847ae1
 8002440:	13813813 	.word	0x13813813
 8002444:	3f638138 	.word	0x3f638138
 8002448:	200004c4 	.word	0x200004c4
 800244c:	200004d4 	.word	0x200004d4
 8002450:	200004b8 	.word	0x200004b8

08002454 <task_C>:
	}
}

// Générateur d'ordres pour le contrôle des moteurs du robot
static void task_C( void *pvParameters )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	struct AMessage pxMessage;
	pxMessage.command='f';
 800245c:	2366      	movs	r3, #102	@ 0x66
 800245e:	723b      	strb	r3, [r7, #8]
	pxMessage.data=1000;
 8002460:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002464:	60fb      	str	r3, [r7, #12]
	vTaskDelay(1000); // attendre 1s
 8002466:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800246a:	f008 fc4d 	bl	800ad08 <vTaskDelay>

	// envoi régulier des ordres de mise à jour
	for (;;)
	{
	    //printf("TASK C \r\n");
	    xQueueSend( qhL, ( void * ) &pxMessage,  portMAX_DELAY ); // envoi queue gauche
 800246e:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <task_C+0x64>)
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	f107 0108 	add.w	r1, r7, #8
 8002476:	2300      	movs	r3, #0
 8002478:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800247c:	f007 fd6e 	bl	8009f5c <xQueueGenericSend>
	    xSemaphoreTake( xSemaphore, portMAX_DELAY );
 8002480:	4b0e      	ldr	r3, [pc, #56]	@ (80024bc <task_C+0x68>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002488:	4618      	mov	r0, r3
 800248a:	f007 ffe9 	bl	800a460 <xQueueSemaphoreTake>


	    xQueueSend( qhR, ( void * ) &pxMessage,  portMAX_DELAY ); // envoi queue droite
 800248e:	4b0c      	ldr	r3, [pc, #48]	@ (80024c0 <task_C+0x6c>)
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	f107 0108 	add.w	r1, r7, #8
 8002496:	2300      	movs	r3, #0
 8002498:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800249c:	f007 fd5e 	bl	8009f5c <xQueueGenericSend>
	    xSemaphoreTake( xSemaphore, portMAX_DELAY );
 80024a0:	4b06      	ldr	r3, [pc, #24]	@ (80024bc <task_C+0x68>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024a8:	4618      	mov	r0, r3
 80024aa:	f007 ffd9 	bl	800a460 <xQueueSemaphoreTake>

	    vTaskDelay(SAMPLING_PERIOD_ms);
 80024ae:	2005      	movs	r0, #5
 80024b0:	f008 fc2a 	bl	800ad08 <vTaskDelay>
	    xQueueSend( qhL, ( void * ) &pxMessage,  portMAX_DELAY ); // envoi queue gauche
 80024b4:	bf00      	nop
 80024b6:	e7da      	b.n	800246e <task_C+0x1a>
 80024b8:	200004c0 	.word	0x200004c0
 80024bc:	200004b8 	.word	0x200004b8
 80024c0:	200004c4 	.word	0x200004c4

080024c4 <main>:
#endif


//=========================================================================
int main(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af02      	add	r7, sp, #8
  int ret=0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  int tab_dist[2];

  HAL_Init();
 80024ce:	f001 fae7 	bl	8003aa0 <HAL_Init>
  SystemClock_Config();
 80024d2:	f001 f873 	bl	80035bc <SystemClock_Config>
  MX_GPIO_Init();
 80024d6:	f7ff f99d 	bl	8001814 <MX_GPIO_Init>
  MX_DMA_Init();
 80024da:	f7ff fb3d 	bl	8001b58 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80024de:	f7ff fae7 	bl	8001ab0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80024e2:	f7ff fb0f 	bl	8001b04 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80024e6:	f7ff fa2f 	bl	8001948 <MX_I2C1_Init>

  motorCommand_Init();
 80024ea:	f000 f905 	bl	80026f8 <motorCommand_Init>
  quadEncoder_Init();
 80024ee:	f000 f97f 	bl	80027f0 <quadEncoder_Init>
  captDistIR_Init();
 80024f2:	f7ff f95d 	bl	80017b0 <captDistIR_Init>

  HAL_Delay(500);
 80024f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80024fa:	f001 fb13 	bl	8003b24 <HAL_Delay>

  // Affichage via UART2 sur Terminal série $ minicom -D /dev/ttyACM0
  printf("hello\r\n"); // REM : ne pas oublier le \n
 80024fe:	4861      	ldr	r0, [pc, #388]	@ (8002684 <main+0x1c0>)
 8002500:	f00b fa96 	bl	800da30 <puts>

  VL53L0X_init();
 8002504:	f7fe fe4c 	bl	80011a0 <VL53L0X_init>

  ret = VL53L0X_validateInterface();
 8002508:	f7fe fe16 	bl	8001138 <VL53L0X_validateInterface>
 800250c:	4603      	mov	r3, r0
 800250e:	617b      	str	r3, [r7, #20]
  if(ret ==0)
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d103      	bne.n	800251e <main+0x5a>
  {
	  printf("VL53L0X OK\r\n");
 8002516:	485c      	ldr	r0, [pc, #368]	@ (8002688 <main+0x1c4>)
 8002518:	f00b fa8a 	bl	800da30 <puts>
 800251c:	e002      	b.n	8002524 <main+0x60>
  }
  else
  {
	  printf("!! PROBLEME VL53L0X !!\r\n");
 800251e:	485b      	ldr	r0, [pc, #364]	@ (800268c <main+0x1c8>)
 8002520:	f00b fa86 	bl	800da30 <puts>
  }
  VL53L0X_startContinuous(0);
 8002524:	2000      	movs	r0, #0
 8002526:	f7ff f8fd 	bl	8001724 <VL53L0X_startContinuous>

  int a, b;
  groveLCD_begin(16,2,0); // !! cette fonction prend du temps
 800252a:	2200      	movs	r2, #0
 800252c:	2102      	movs	r1, #2
 800252e:	2010      	movs	r0, #16
 8002530:	f7ff fb68 	bl	8001c04 <groveLCD_begin>
  HAL_Delay(100);
 8002534:	2064      	movs	r0, #100	@ 0x64
 8002536:	f001 faf5 	bl	8003b24 <HAL_Delay>
  groveLCD_display();
 800253a:	f7ff fc19 	bl	8001d70 <groveLCD_display>
  a=5; b=2;
 800253e:	2305      	movs	r3, #5
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	2302      	movs	r3, #2
 8002544:	60fb      	str	r3, [r7, #12]
  groveLCD_term_printf("%d+%d=%d",a,b,a+b);
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	6939      	ldr	r1, [r7, #16]
 8002550:	484f      	ldr	r0, [pc, #316]	@ (8002690 <main+0x1cc>)
 8002552:	f7ff fc91 	bl	8001e78 <groveLCD_term_printf>
  groveLCD_setCursor(0,0);
 8002556:	2100      	movs	r1, #0
 8002558:	2000      	movs	r0, #0
 800255a:	f7ff fbe5 	bl	8001d28 <groveLCD_setCursor>
  groveLCD_term_printf("hello");
 800255e:	484d      	ldr	r0, [pc, #308]	@ (8002694 <main+0x1d0>)
 8002560:	f7ff fc8a 	bl	8001e78 <groveLCD_term_printf>


  HAL_Delay(50);
 8002564:	2032      	movs	r0, #50	@ 0x32
 8002566:	f001 fadd 	bl	8003b24 <HAL_Delay>

#if FIND_MOTOR_INIT_POS

  int16_t speed=0;
 800256a:	2300      	movs	r3, #0
 800256c:	817b      	strh	r3, [r7, #10]
// RECHERCHE DE LA POSITION INITIALE ( 1er signal 'index' du capteur )
// Evite une erreur pour une mesure de vitesse 
	Left_first_index_reached = 0;
 800256e:	4b4a      	ldr	r3, [pc, #296]	@ (8002698 <main+0x1d4>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
	 while( Left_first_index_reached != 1 )
 8002574:	e009      	b.n	800258a <main+0xc6>
	 {
		motorLeft_SetDuty(130);
 8002576:	2082      	movs	r0, #130	@ 0x82
 8002578:	f000 f91a 	bl	80027b0 <motorLeft_SetDuty>
		HAL_Delay(SAMPLING_PERIOD_ms);
 800257c:	2005      	movs	r0, #5
 800257e:	f001 fad1 	bl	8003b24 <HAL_Delay>
		speed = quadEncoder_GetSpeedL();
 8002582:	f000 f9f1 	bl	8002968 <quadEncoder_GetSpeedL>
 8002586:	4603      	mov	r3, r0
 8002588:	817b      	strh	r3, [r7, #10]
	 while( Left_first_index_reached != 1 )
 800258a:	4b43      	ldr	r3, [pc, #268]	@ (8002698 <main+0x1d4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d1f1      	bne.n	8002576 <main+0xb2>
	 }

	Right_first_index_reached = 0;
 8002592:	4b42      	ldr	r3, [pc, #264]	@ (800269c <main+0x1d8>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
	 while( Right_first_index_reached != 1 )
 8002598:	e009      	b.n	80025ae <main+0xea>
	 {
		motorRight_SetDuty(130);
 800259a:	2082      	movs	r0, #130	@ 0x82
 800259c:	f000 f918 	bl	80027d0 <motorRight_SetDuty>
		HAL_Delay(SAMPLING_PERIOD_ms);
 80025a0:	2005      	movs	r0, #5
 80025a2:	f001 fabf 	bl	8003b24 <HAL_Delay>
		speed = quadEncoder_GetSpeedR();
 80025a6:	f000 fa31 	bl	8002a0c <quadEncoder_GetSpeedR>
 80025aa:	4603      	mov	r3, r0
 80025ac:	817b      	strh	r3, [r7, #10]
	 while( Right_first_index_reached != 1 )
 80025ae:	4b3b      	ldr	r3, [pc, #236]	@ (800269c <main+0x1d8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d1f1      	bne.n	800259a <main+0xd6>
	 }

	 motorLeft_SetDuty(50);
 80025b6:	2032      	movs	r0, #50	@ 0x32
 80025b8:	f000 f8fa 	bl	80027b0 <motorLeft_SetDuty>
	 motorRight_SetDuty(50);
 80025bc:	2032      	movs	r0, #50	@ 0x32
 80025be:	f000 f907 	bl	80027d0 <motorRight_SetDuty>
	 HAL_Delay(200);
 80025c2:	20c8      	movs	r0, #200	@ 0xc8
 80025c4:	f001 faae 	bl	8003b24 <HAL_Delay>

	 speed = quadEncoder_GetSpeedL();
 80025c8:	f000 f9ce 	bl	8002968 <quadEncoder_GetSpeedL>
 80025cc:	4603      	mov	r3, r0
 80025ce:	817b      	strh	r3, [r7, #10]
	 speed = quadEncoder_GetSpeedR();
 80025d0:	f000 fa1c 	bl	8002a0c <quadEncoder_GetSpeedR>
 80025d4:	4603      	mov	r3, r0
 80025d6:	817b      	strh	r3, [r7, #10]
#endif

  osKernelInitialize();
 80025d8:	f007 fa48 	bl	8009a6c <osKernelInitialize>

  //xTaskCreate( microros_task, ( const portCHAR * ) "microros_task", 3000 /* stack size */, NULL,  24, NULL );
#if SYNCHRO_EX == EX1
	xTaskCreate( task_A, ( const portCHAR * ) "task A", 128 /* stack size */, NULL, 26, NULL );
 80025dc:	2300      	movs	r3, #0
 80025de:	9301      	str	r3, [sp, #4]
 80025e0:	231a      	movs	r3, #26
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	2300      	movs	r3, #0
 80025e6:	2280      	movs	r2, #128	@ 0x80
 80025e8:	492d      	ldr	r1, [pc, #180]	@ (80026a0 <main+0x1dc>)
 80025ea:	482e      	ldr	r0, [pc, #184]	@ (80026a4 <main+0x1e0>)
 80025ec:	f008 fa2e 	bl	800aa4c <xTaskCreate>
	xTaskCreate( task_B, ( const portCHAR * ) "task B", 128 /* stack size */, NULL, 25, NULL );
 80025f0:	2300      	movs	r3, #0
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	2319      	movs	r3, #25
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	2300      	movs	r3, #0
 80025fa:	2280      	movs	r2, #128	@ 0x80
 80025fc:	492a      	ldr	r1, [pc, #168]	@ (80026a8 <main+0x1e4>)
 80025fe:	482b      	ldr	r0, [pc, #172]	@ (80026ac <main+0x1e8>)
 8002600:	f008 fa24 	bl	800aa4c <xTaskCreate>
	xTaskCreate( task_C, ( signed portCHAR * ) "task C", 128 /* stack size */, NULL, 28, NULL );
 8002604:	2300      	movs	r3, #0
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	231c      	movs	r3, #28
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2300      	movs	r3, #0
 800260e:	2280      	movs	r2, #128	@ 0x80
 8002610:	4927      	ldr	r1, [pc, #156]	@ (80026b0 <main+0x1ec>)
 8002612:	4828      	ldr	r0, [pc, #160]	@ (80026b4 <main+0x1f0>)
 8002614:	f008 fa1a 	bl	800aa4c <xTaskCreate>
#elif SYNCHRO_EX == EX3
	xTaskCreate( task_E, ( signed portCHAR * ) "task E", 128 /* stack size */, NULL, 30, NULL );
	xTaskCreate( task_F, ( signed portCHAR * ) "task F", 128 /* stack size */, NULL, 29, NULL );
#endif

	vSemaphoreCreateBinary(xSemaphore);
 8002618:	2203      	movs	r2, #3
 800261a:	2100      	movs	r1, #0
 800261c:	2001      	movs	r0, #1
 800261e:	f007 fc3e 	bl	8009e9e <xQueueGenericCreate>
 8002622:	4603      	mov	r3, r0
 8002624:	4a24      	ldr	r2, [pc, #144]	@ (80026b8 <main+0x1f4>)
 8002626:	6013      	str	r3, [r2, #0]
 8002628:	4b23      	ldr	r3, [pc, #140]	@ (80026b8 <main+0x1f4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d006      	beq.n	800263e <main+0x17a>
 8002630:	4b21      	ldr	r3, [pc, #132]	@ (80026b8 <main+0x1f4>)
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	2300      	movs	r3, #0
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	f007 fc8f 	bl	8009f5c <xQueueGenericSend>
	xSemaphoreTake( xSemaphore, portMAX_DELAY );
 800263e:	4b1e      	ldr	r3, [pc, #120]	@ (80026b8 <main+0x1f4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002646:	4618      	mov	r0, r3
 8002648:	f007 ff0a 	bl	800a460 <xQueueSemaphoreTake>

	qh = xQueueCreate( 1, sizeof(struct AMessage ) );
 800264c:	2200      	movs	r2, #0
 800264e:	2108      	movs	r1, #8
 8002650:	2001      	movs	r0, #1
 8002652:	f007 fc24 	bl	8009e9e <xQueueGenericCreate>
 8002656:	4603      	mov	r3, r0
 8002658:	4a18      	ldr	r2, [pc, #96]	@ (80026bc <main+0x1f8>)
 800265a:	6013      	str	r3, [r2, #0]

#if SYNCHRO_EX == EX1
	qhL = xQueueCreate( 1, sizeof(struct AMessage ) ); //queue gauche
 800265c:	2200      	movs	r2, #0
 800265e:	2108      	movs	r1, #8
 8002660:	2001      	movs	r0, #1
 8002662:	f007 fc1c 	bl	8009e9e <xQueueGenericCreate>
 8002666:	4603      	mov	r3, r0
 8002668:	4a15      	ldr	r2, [pc, #84]	@ (80026c0 <main+0x1fc>)
 800266a:	6013      	str	r3, [r2, #0]
	qhR = xQueueCreate( 1, sizeof(struct AMessage ) ); //queue droite
 800266c:	2200      	movs	r2, #0
 800266e:	2108      	movs	r1, #8
 8002670:	2001      	movs	r0, #1
 8002672:	f007 fc14 	bl	8009e9e <xQueueGenericCreate>
 8002676:	4603      	mov	r3, r0
 8002678:	4a12      	ldr	r2, [pc, #72]	@ (80026c4 <main+0x200>)
 800267a:	6013      	str	r3, [r2, #0]
#endif

  osKernelStart();
 800267c:	f007 fa1a 	bl	8009ab4 <osKernelStart>

  while (1)
 8002680:	bf00      	nop
 8002682:	e7fd      	b.n	8002680 <main+0x1bc>
 8002684:	0801119c 	.word	0x0801119c
 8002688:	080111a4 	.word	0x080111a4
 800268c:	080111b0 	.word	0x080111b0
 8002690:	080111c8 	.word	0x080111c8
 8002694:	080111d4 	.word	0x080111d4
 8002698:	200004c8 	.word	0x200004c8
 800269c:	200004cc 	.word	0x200004cc
 80026a0:	080111dc 	.word	0x080111dc
 80026a4:	08002259 	.word	0x08002259
 80026a8:	080111e4 	.word	0x080111e4
 80026ac:	08002359 	.word	0x08002359
 80026b0:	080111ec 	.word	0x080111ec
 80026b4:	08002455 	.word	0x08002455
 80026b8:	200004b8 	.word	0x200004b8
 80026bc:	200004bc 	.word	0x200004bc
 80026c0:	200004c0 	.word	0x200004c0
 80026c4:	200004c4 	.word	0x200004c4

080026c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM4)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80026da:	f001 fa03 	bl	8003ae4 <HAL_IncTick>
  }
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40000800 	.word	0x40000800

080026ec <Error_Handler>:

//=========================================================================
void Error_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026f0:	b672      	cpsid	i
}
 80026f2:	bf00      	nop
  __disable_irq();
  while (1)
 80026f4:	bf00      	nop
 80026f6:	e7fd      	b.n	80026f4 <Error_Handler+0x8>

080026f8 <motorCommand_Init>:
// TIMER 3 (PWM)  : CH1 et CH2
// ENABLE : Sortie Logique (GPIO) PA7
//=================================================================

void motorCommand_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
	unsigned int uwPrescalerValue = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]

	/* Compute the prescaler value to have TIM4 counter clock equal to 10MHz */
	  uwPrescalerValue = (unsigned int) ((SystemCoreClock / 10000000) - 1);
 8002702:	4b25      	ldr	r3, [pc, #148]	@ (8002798 <motorCommand_Init+0xa0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a25      	ldr	r2, [pc, #148]	@ (800279c <motorCommand_Init+0xa4>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	0d9b      	lsrs	r3, r3, #22
 800270e:	3b01      	subs	r3, #1
 8002710:	607b      	str	r3, [r7, #4]
	  TimHandle.Instance = TIM3;
 8002712:	4b23      	ldr	r3, [pc, #140]	@ (80027a0 <motorCommand_Init+0xa8>)
 8002714:	4a23      	ldr	r2, [pc, #140]	@ (80027a4 <motorCommand_Init+0xac>)
 8002716:	601a      	str	r2, [r3, #0]
	  TimHandle.Init.Period = 200 - 1; // 100MHz/200=50kHz
 8002718:	4b21      	ldr	r3, [pc, #132]	@ (80027a0 <motorCommand_Init+0xa8>)
 800271a:	22c7      	movs	r2, #199	@ 0xc7
 800271c:	60da      	str	r2, [r3, #12]
	  TimHandle.Init.Prescaler = uwPrescalerValue;
 800271e:	4a20      	ldr	r2, [pc, #128]	@ (80027a0 <motorCommand_Init+0xa8>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6053      	str	r3, [r2, #4]
	  TimHandle.Init.ClockDivision = 0;
 8002724:	4b1e      	ldr	r3, [pc, #120]	@ (80027a0 <motorCommand_Init+0xa8>)
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
	  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272a:	4b1d      	ldr	r3, [pc, #116]	@ (80027a0 <motorCommand_Init+0xa8>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]

	  HAL_TIM_Base_Init(&TimHandle);
 8002730:	481b      	ldr	r0, [pc, #108]	@ (80027a0 <motorCommand_Init+0xa8>)
 8002732:	f005 fa63 	bl	8007bfc <HAL_TIM_Base_Init>

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002736:	4b1c      	ldr	r3, [pc, #112]	@ (80027a8 <motorCommand_Init+0xb0>)
 8002738:	2260      	movs	r2, #96	@ 0x60
 800273a:	601a      	str	r2, [r3, #0]
	  sConfigOC.Pulse = 0x5;// Specifies the pulse value to be loaded into the Capture Compare Register. This parameter can be a number between Min_Data = 0x0000 and Max_Data = 0xFFFF */
 800273c:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <motorCommand_Init+0xb0>)
 800273e:	2205      	movs	r2, #5
 8002740:	605a      	str	r2, [r3, #4]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002742:	4b19      	ldr	r3, [pc, #100]	@ (80027a8 <motorCommand_Init+0xb0>)
 8002744:	2200      	movs	r2, #0
 8002746:	609a      	str	r2, [r3, #8]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002748:	4b17      	ldr	r3, [pc, #92]	@ (80027a8 <motorCommand_Init+0xb0>)
 800274a:	2200      	movs	r2, #0
 800274c:	611a      	str	r2, [r3, #16]

	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_1);
 800274e:	2200      	movs	r2, #0
 8002750:	4915      	ldr	r1, [pc, #84]	@ (80027a8 <motorCommand_Init+0xb0>)
 8002752:	4813      	ldr	r0, [pc, #76]	@ (80027a0 <motorCommand_Init+0xa8>)
 8002754:	f005 fe04 	bl	8008360 <HAL_TIM_PWM_ConfigChannel>
	 HAL_TIM_PWM_ConfigChannel(&TimHandle, &sConfigOC, TIM_CHANNEL_2);
 8002758:	2204      	movs	r2, #4
 800275a:	4913      	ldr	r1, [pc, #76]	@ (80027a8 <motorCommand_Init+0xb0>)
 800275c:	4810      	ldr	r0, [pc, #64]	@ (80027a0 <motorCommand_Init+0xa8>)
 800275e:	f005 fdff 	bl	8008360 <HAL_TIM_PWM_ConfigChannel>

	 // CHANGEMENT DU RAPPORT CYCLIQUE
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, 100);	// 100 : moteurs au repos
 8002762:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <motorCommand_Init+0xa8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2264      	movs	r2, #100	@ 0x64
 8002768:	635a      	str	r2, [r3, #52]	@ 0x34
	 __HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, 100);
 800276a:	4b0d      	ldr	r3, [pc, #52]	@ (80027a0 <motorCommand_Init+0xa8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2264      	movs	r2, #100	@ 0x64
 8002770:	639a      	str	r2, [r3, #56]	@ 0x38

	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_1);	// MOTOR RIGHT
 8002772:	2100      	movs	r1, #0
 8002774:	480a      	ldr	r0, [pc, #40]	@ (80027a0 <motorCommand_Init+0xa8>)
 8002776:	f005 fafd 	bl	8007d74 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&TimHandle, TIM_CHANNEL_2); // MOTOR LEFT
 800277a:	2104      	movs	r1, #4
 800277c:	4808      	ldr	r0, [pc, #32]	@ (80027a0 <motorCommand_Init+0xa8>)
 800277e:	f005 faf9 	bl	8007d74 <HAL_TIM_PWM_Start>

	  // ENABLE MOTEUR (SI INVERSEUR)
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002788:	4808      	ldr	r0, [pc, #32]	@ (80027ac <motorCommand_Init+0xb4>)
 800278a:	f002 f8f3 	bl	8004974 <HAL_GPIO_WritePin>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000000 	.word	0x20000000
 800279c:	6b5fca6b 	.word	0x6b5fca6b
 80027a0:	200004d8 	.word	0x200004d8
 80027a4:	40000400 	.word	0x40000400
 80027a8:	20000520 	.word	0x20000520
 80027ac:	40020000 	.word	0x40020000

080027b0 <motorLeft_SetDuty>:

//=================================================================
//			SET DUTY CYCLE LEFT
//=================================================================
void motorLeft_SetDuty(int duty)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_1, duty);
 80027b8:	4b04      	ldr	r3, [pc, #16]	@ (80027cc <motorLeft_SetDuty+0x1c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	200004d8 	.word	0x200004d8

080027d0 <motorRight_SetDuty>:
//=================================================================
//			SET DUTY CYCLE RIGHT
//=================================================================
void motorRight_SetDuty(int duty)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SetCompare(&TimHandle, TIM_CHANNEL_2, duty);
 80027d8:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <motorRight_SetDuty+0x1c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	200004d8 	.word	0x200004d8

080027f0 <quadEncoder_Init>:
//================================================================
//		TIMER INIT
//================================================================

void quadEncoder_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	@ 0x28
 80027f4:	af00      	add	r7, sp, #0
	TIM_Encoder_InitTypeDef sConfig;
	//--------------------------------------------------
	// TIMER 1
	//--------------------------------------------------
	TimEncoderHandleLeft.Instance = TIM1;
 80027f6:	4b35      	ldr	r3, [pc, #212]	@ (80028cc <quadEncoder_Init+0xdc>)
 80027f8:	4a35      	ldr	r2, [pc, #212]	@ (80028d0 <quadEncoder_Init+0xe0>)
 80027fa:	601a      	str	r2, [r3, #0]
	TimEncoderHandleLeft.Init.Prescaler = 0;
 80027fc:	4b33      	ldr	r3, [pc, #204]	@ (80028cc <quadEncoder_Init+0xdc>)
 80027fe:	2200      	movs	r2, #0
 8002800:	605a      	str	r2, [r3, #4]
	TimEncoderHandleLeft.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002802:	4b32      	ldr	r3, [pc, #200]	@ (80028cc <quadEncoder_Init+0xdc>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
	TimEncoderHandleLeft.Init.Period = COUNT_PER_ROUND*4;
 8002808:	4b30      	ldr	r3, [pc, #192]	@ (80028cc <quadEncoder_Init+0xdc>)
 800280a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280e:	60da      	str	r2, [r3, #12]
	TimEncoderHandleLeft.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002810:	4b2e      	ldr	r3, [pc, #184]	@ (80028cc <quadEncoder_Init+0xdc>)
 8002812:	2200      	movs	r2, #0
 8002814:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002816:	2303      	movs	r3, #3
 8002818:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800281e:	2301      	movs	r3, #1
 8002820:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 8002822:	2308      	movs	r3, #8
 8002824:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 8002826:	230f      	movs	r3, #15
 8002828:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 800282e:	2301      	movs	r3, #1
 8002830:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 8002832:	2308      	movs	r3, #8
 8002834:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 8002836:	230f      	movs	r3, #15
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleLeft, &sConfig);
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	4619      	mov	r1, r3
 800283e:	4823      	ldr	r0, [pc, #140]	@ (80028cc <quadEncoder_Init+0xdc>)
 8002840:	f005 fb48 	bl	8007ed4 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);
 8002844:	4b21      	ldr	r3, [pc, #132]	@ (80028cc <quadEncoder_Init+0xdc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 800284c:	2100      	movs	r1, #0
 800284e:	481f      	ldr	r0, [pc, #124]	@ (80028cc <quadEncoder_Init+0xdc>)
 8002850:	f005 fbf0 	bl	8008034 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8002854:	2104      	movs	r1, #4
 8002856:	481d      	ldr	r0, [pc, #116]	@ (80028cc <quadEncoder_Init+0xdc>)
 8002858:	f005 fbec 	bl	8008034 <HAL_TIM_Encoder_Start>

	//--------------------------------------------------
	// TIMER 2
	//--------------------------------------------------
	TimEncoderHandleRight.Instance = TIM2;
 800285c:	4b1d      	ldr	r3, [pc, #116]	@ (80028d4 <quadEncoder_Init+0xe4>)
 800285e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002862:	601a      	str	r2, [r3, #0]
	TimEncoderHandleRight.Init.Prescaler = 0;
 8002864:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <quadEncoder_Init+0xe4>)
 8002866:	2200      	movs	r2, #0
 8002868:	605a      	str	r2, [r3, #4]
	TimEncoderHandleRight.Init.CounterMode = TIM_COUNTERMODE_UP;
 800286a:	4b1a      	ldr	r3, [pc, #104]	@ (80028d4 <quadEncoder_Init+0xe4>)
 800286c:	2200      	movs	r2, #0
 800286e:	609a      	str	r2, [r3, #8]
	TimEncoderHandleRight.Init.Period = COUNT_PER_ROUND*4;
 8002870:	4b18      	ldr	r3, [pc, #96]	@ (80028d4 <quadEncoder_Init+0xe4>)
 8002872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002876:	60da      	str	r2, [r3, #12]
	TimEncoderHandleRight.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002878:	4b16      	ldr	r3, [pc, #88]	@ (80028d4 <quadEncoder_Init+0xe4>)
 800287a:	2200      	movs	r2, #0
 800287c:	611a      	str	r2, [r3, #16]

	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800287e:	2303      	movs	r3, #3
 8002880:	607b      	str	r3, [r7, #4]
	sConfig.IC1Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002886:	2301      	movs	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV4;
 800288a:	2308      	movs	r3, #8
 800288c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Filter = 0x0F;
 800288e:	230f      	movs	r3, #15
 8002890:	617b      	str	r3, [r7, #20]
	sConfig.IC2Polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;//TIM_ICSELECTION_DIRECTTI; //TIM_TI1SELECTION_XORCOMBINATION
 8002896:	2301      	movs	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Prescaler = TIM_ICPSC_DIV4;
 800289a:	2308      	movs	r3, #8
 800289c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Filter = 0x0F;
 800289e:	230f      	movs	r3, #15
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_TIM_Encoder_Init(&TimEncoderHandleRight, &sConfig);
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	4619      	mov	r1, r3
 80028a6:	480b      	ldr	r0, [pc, #44]	@ (80028d4 <quadEncoder_Init+0xe4>)
 80028a8:	f005 fb14 	bl	8007ed4 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);
 80028ac:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <quadEncoder_Init+0xe4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2200      	movs	r2, #0
 80028b2:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 80028b4:	2100      	movs	r1, #0
 80028b6:	4807      	ldr	r0, [pc, #28]	@ (80028d4 <quadEncoder_Init+0xe4>)
 80028b8:	f005 fbbc 	bl	8008034 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 80028bc:	2104      	movs	r1, #4
 80028be:	4805      	ldr	r0, [pc, #20]	@ (80028d4 <quadEncoder_Init+0xe4>)
 80028c0:	f005 fbb8 	bl	8008034 <HAL_TIM_Encoder_Start>
}
 80028c4:	bf00      	nop
 80028c6:	3728      	adds	r7, #40	@ 0x28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	2000053c 	.word	0x2000053c
 80028d0:	40010000 	.word	0x40010000
 80028d4:	20000584 	.word	0x20000584

080028d8 <quadEncoder_PosCalcL>:
//================================================================
//		POSITION LEFT CALC
//================================================================

void quadEncoder_PosCalcL(int* AngPos)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM1->CNT;
 80028e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <quadEncoder_PosCalcL+0x40>)
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3304      	adds	r3, #4
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f641 129b 	movw	r2, #6555	@ 0x199b
 80028fa:	fb02 f303 	mul.w	r3, r2, r3
 80028fe:	4a07      	ldr	r2, [pc, #28]	@ (800291c <quadEncoder_PosCalcL+0x44>)
 8002900:	fba2 2303 	umull	r2, r3, r2, r3
 8002904:	099b      	lsrs	r3, r3, #6
 8002906:	461a      	mov	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	601a      	str	r2, [r3, #0]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	40010000 	.word	0x40010000
 800291c:	10624dd3 	.word	0x10624dd3

08002920 <quadEncoder_PosCalcR>:
//================================================================
//		POSITION RIGHT CALC
//================================================================

void quadEncoder_PosCalcR(int* AngPos)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

int POSCNTcopy = 0;
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
POSCNTcopy = (int)TIM2->CNT;
 800292c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	60fb      	str	r3, [r7, #12]
AngPos[1] = AngPos[0];
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3304      	adds	r3, #4
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	601a      	str	r2, [r3, #0]
AngPos[0] = (unsigned int)(((unsigned long)POSCNTcopy * COEFF)/1000); // 0 <= POSCNT <= 4999 to 0 <= AngPos <= 32767
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f641 129b 	movw	r2, #6555	@ 0x199b
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	4a06      	ldr	r2, [pc, #24]	@ (8002964 <quadEncoder_PosCalcR+0x44>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	099b      	lsrs	r3, r3, #6
 8002950:	461a      	mov	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	601a      	str	r2, [r3, #0]
}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	10624dd3 	.word	0x10624dd3

08002968 <quadEncoder_GetSpeedL>:
//		SPEED LEFT
//--> must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedL(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedL=0;

	quadEncoder_PosCalcL(AngPos);
 800296c:	4824      	ldr	r0, [pc, #144]	@ (8002a00 <quadEncoder_GetSpeedL+0x98>)
 800296e:	f7ff ffb3 	bl	80028d8 <quadEncoder_PosCalcL>
	SpeedL = AngPos[0] - AngPos[1];
 8002972:	4b23      	ldr	r3, [pc, #140]	@ (8002a00 <quadEncoder_GetSpeedL+0x98>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	b29a      	uxth	r2, r3
 8002978:	4b21      	ldr	r3, [pc, #132]	@ (8002a00 <quadEncoder_GetSpeedL+0x98>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	b29b      	uxth	r3, r3
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	b29b      	uxth	r3, r3
 8002982:	b21a      	sxth	r2, r3
 8002984:	4b1f      	ldr	r3, [pc, #124]	@ (8002a04 <quadEncoder_GetSpeedL+0x9c>)
 8002986:	801a      	strh	r2, [r3, #0]
	if (SpeedL >= 0)
 8002988:	4b1e      	ldr	r3, [pc, #120]	@ (8002a04 <quadEncoder_GetSpeedL+0x9c>)
 800298a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db10      	blt.n	80029b4 <quadEncoder_GetSpeedL+0x4c>
	{
		if (SpeedL >= HALF_MAX_COUNT)
 8002992:	4b1c      	ldr	r3, [pc, #112]	@ (8002a04 <quadEncoder_GetSpeedL+0x9c>)
 8002994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002998:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800299c:	db1a      	blt.n	80029d4 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL - MAX_COUNT;
 800299e:	4b19      	ldr	r3, [pc, #100]	@ (8002a04 <quadEncoder_GetSpeedL+0x9c>)
 80029a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	b21a      	sxth	r2, r3
 80029ae:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <quadEncoder_GetSpeedL+0x9c>)
 80029b0:	801a      	strh	r2, [r3, #0]
 80029b2:	e00f      	b.n	80029d4 <quadEncoder_GetSpeedL+0x6c>
			}
	}
	else
	{
		if (SpeedL < -HALF_MAX_COUNT)
 80029b4:	4b13      	ldr	r3, [pc, #76]	@ (8002a04 <quadEncoder_GetSpeedL+0x9c>)
 80029b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ba:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 80029be:	da09      	bge.n	80029d4 <quadEncoder_GetSpeedL+0x6c>
			{
			SpeedL = SpeedL + MAX_COUNT;
 80029c0:	4b10      	ldr	r3, [pc, #64]	@ (8002a04 <quadEncoder_GetSpeedL+0x9c>)
 80029c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	b21a      	sxth	r2, r3
 80029d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a04 <quadEncoder_GetSpeedL+0x9c>)
 80029d2:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedL=(SpeedL*60*1000)/(32767*TE_ms);
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <quadEncoder_GetSpeedL+0x9c>)
 80029d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029da:	461a      	mov	r2, r3
 80029dc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80029e0:	fb02 f303 	mul.w	r3, r2, r3
 80029e4:	4a08      	ldr	r2, [pc, #32]	@ (8002a08 <quadEncoder_GetSpeedL+0xa0>)
 80029e6:	fb82 1203 	smull	r1, r2, r2, r3
 80029ea:	1412      	asrs	r2, r2, #16
 80029ec:	17db      	asrs	r3, r3, #31
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	b21a      	sxth	r2, r3
 80029f2:	4b04      	ldr	r3, [pc, #16]	@ (8002a04 <quadEncoder_GetSpeedL+0x9c>)
 80029f4:	801a      	strh	r2, [r3, #0]
	return SpeedL;
 80029f6:	4b03      	ldr	r3, [pc, #12]	@ (8002a04 <quadEncoder_GetSpeedL+0x9c>)
 80029f8:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200005d4 	.word	0x200005d4
 8002a04:	200005dc 	.word	0x200005dc
 8002a08:	66673335 	.word	0x66673335

08002a0c <quadEncoder_GetSpeedR>:
//		SPEED RIGHT
//-->  must be called every Te
//================================================================

int16_t quadEncoder_GetSpeedR(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
	static int AngPos[2] = {0,0};
	static int16_t SpeedR=0;


	quadEncoder_PosCalcR(AngPos);
 8002a10:	4824      	ldr	r0, [pc, #144]	@ (8002aa4 <quadEncoder_GetSpeedR+0x98>)
 8002a12:	f7ff ff85 	bl	8002920 <quadEncoder_PosCalcR>
	SpeedR = AngPos[0] - AngPos[1];
 8002a16:	4b23      	ldr	r3, [pc, #140]	@ (8002aa4 <quadEncoder_GetSpeedR+0x98>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	4b21      	ldr	r3, [pc, #132]	@ (8002aa4 <quadEncoder_GetSpeedR+0x98>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	b21a      	sxth	r2, r3
 8002a28:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa8 <quadEncoder_GetSpeedR+0x9c>)
 8002a2a:	801a      	strh	r2, [r3, #0]
	if (SpeedR >= 0)
 8002a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa8 <quadEncoder_GetSpeedR+0x9c>)
 8002a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	db10      	blt.n	8002a58 <quadEncoder_GetSpeedR+0x4c>
	{
		if (SpeedR >= HALF_MAX_COUNT)
 8002a36:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa8 <quadEncoder_GetSpeedR+0x9c>)
 8002a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a40:	db1a      	blt.n	8002a78 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR - MAX_COUNT;
 8002a42:	4b19      	ldr	r3, [pc, #100]	@ (8002aa8 <quadEncoder_GetSpeedR+0x9c>)
 8002a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	b21a      	sxth	r2, r3
 8002a52:	4b15      	ldr	r3, [pc, #84]	@ (8002aa8 <quadEncoder_GetSpeedR+0x9c>)
 8002a54:	801a      	strh	r2, [r3, #0]
 8002a56:	e00f      	b.n	8002a78 <quadEncoder_GetSpeedR+0x6c>
			}
	}
	else
	{
		if (SpeedR < -HALF_MAX_COUNT)
 8002a58:	4b13      	ldr	r3, [pc, #76]	@ (8002aa8 <quadEncoder_GetSpeedR+0x9c>)
 8002a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a5e:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8002a62:	da09      	bge.n	8002a78 <quadEncoder_GetSpeedR+0x6c>
			{
			SpeedR = SpeedR + MAX_COUNT;
 8002a64:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <quadEncoder_GetSpeedR+0x9c>)
 8002a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	b21a      	sxth	r2, r3
 8002a74:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa8 <quadEncoder_GetSpeedR+0x9c>)
 8002a76:	801a      	strh	r2, [r3, #0]
	// 1 tour = 32767
	// Nbre de Tours pendant Te: DELTA_pos/32767
	// Nbre de Tours pendant 1s (Te en ms) : (DELTA_pos/32767)*(1000/Te)
	// Nbre de Tours par minute : : (DELTA_pos/32767)*((60*1000)/Te)

	SpeedR=(SpeedR*60*1000)/(32767*TE_ms);
 8002a78:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <quadEncoder_GetSpeedR+0x9c>)
 8002a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002a84:	fb02 f303 	mul.w	r3, r2, r3
 8002a88:	4a08      	ldr	r2, [pc, #32]	@ (8002aac <quadEncoder_GetSpeedR+0xa0>)
 8002a8a:	fb82 1203 	smull	r1, r2, r2, r3
 8002a8e:	1412      	asrs	r2, r2, #16
 8002a90:	17db      	asrs	r3, r3, #31
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	b21a      	sxth	r2, r3
 8002a96:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <quadEncoder_GetSpeedR+0x9c>)
 8002a98:	801a      	strh	r2, [r3, #0]
	return SpeedR;
 8002a9a:	4b03      	ldr	r3, [pc, #12]	@ (8002aa8 <quadEncoder_GetSpeedR+0x9c>)
 8002a9c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	200005e0 	.word	0x200005e0
 8002aa8:	200005e8 	.word	0x200005e8
 8002aac:	66673335 	.word	0x66673335

08002ab0 <quadEncoder_CallbackIndexL>:
//================================================================
//		MAJ index Left
//================================================================

void quadEncoder_CallbackIndexL()
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleLeft)==1)
 8002ab4:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <quadEncoder_CallbackIndexL+0x4c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	2b10      	cmp	r3, #16
 8002ac0:	d105      	bne.n	8002ace <quadEncoder_CallbackIndexL+0x1e>
				{
					indexL--;
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b00 <quadEncoder_CallbackIndexL+0x50>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b00 <quadEncoder_CallbackIndexL+0x50>)
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	e004      	b.n	8002ad8 <quadEncoder_CallbackIndexL+0x28>
				}
				else
				{
					indexL++;
 8002ace:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <quadEncoder_CallbackIndexL+0x50>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8002b00 <quadEncoder_CallbackIndexL+0x50>)
 8002ad6:	6013      	str	r3, [r2, #0]
				}


				__HAL_TIM_SetCounter(&TimEncoderHandleLeft, 0);		// RAZ Counter
 8002ad8:	4b08      	ldr	r3, [pc, #32]	@ (8002afc <quadEncoder_CallbackIndexL+0x4c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2200      	movs	r2, #0
 8002ade:	625a      	str	r2, [r3, #36]	@ 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_1);
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4806      	ldr	r0, [pc, #24]	@ (8002afc <quadEncoder_CallbackIndexL+0x4c>)
 8002ae4:	f005 faa6 	bl	8008034 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleLeft,TIM_CHANNEL_2);
 8002ae8:	2104      	movs	r1, #4
 8002aea:	4804      	ldr	r0, [pc, #16]	@ (8002afc <quadEncoder_CallbackIndexL+0x4c>)
 8002aec:	f005 faa2 	bl	8008034 <HAL_TIM_Encoder_Start>

				Left_first_index_reached = 1;
 8002af0:	4b04      	ldr	r3, [pc, #16]	@ (8002b04 <quadEncoder_CallbackIndexL+0x54>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	2000053c 	.word	0x2000053c
 8002b00:	200005cc 	.word	0x200005cc
 8002b04:	200004c8 	.word	0x200004c8

08002b08 <quadEncoder_CallbackIndexR>:
//================================================================
//		MAJ index Right
//================================================================

void quadEncoder_CallbackIndexR()
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
				if (__HAL_TIM_DIRECTION_STATUS(&TimEncoderHandleRight)==1)
 8002b0c:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <quadEncoder_CallbackIndexR+0x4c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d105      	bne.n	8002b26 <quadEncoder_CallbackIndexR+0x1e>
				{
					indexR--;
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b58 <quadEncoder_CallbackIndexR+0x50>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	4a0d      	ldr	r2, [pc, #52]	@ (8002b58 <quadEncoder_CallbackIndexR+0x50>)
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	e004      	b.n	8002b30 <quadEncoder_CallbackIndexR+0x28>

				}
				else
				{
					indexR++;
 8002b26:	4b0c      	ldr	r3, [pc, #48]	@ (8002b58 <quadEncoder_CallbackIndexR+0x50>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b58 <quadEncoder_CallbackIndexR+0x50>)
 8002b2e:	6013      	str	r3, [r2, #0]
				}

				__HAL_TIM_SetCounter(&TimEncoderHandleRight, 0);			// RAZ Counter
 8002b30:	4b08      	ldr	r3, [pc, #32]	@ (8002b54 <quadEncoder_CallbackIndexR+0x4c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2200      	movs	r2, #0
 8002b36:	625a      	str	r2, [r3, #36]	@ 0x24
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_1);
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4806      	ldr	r0, [pc, #24]	@ (8002b54 <quadEncoder_CallbackIndexR+0x4c>)
 8002b3c:	f005 fa7a 	bl	8008034 <HAL_TIM_Encoder_Start>
				HAL_TIM_Encoder_Start(&TimEncoderHandleRight,TIM_CHANNEL_2);
 8002b40:	2104      	movs	r1, #4
 8002b42:	4804      	ldr	r0, [pc, #16]	@ (8002b54 <quadEncoder_CallbackIndexR+0x4c>)
 8002b44:	f005 fa76 	bl	8008034 <HAL_TIM_Encoder_Start>

				Right_first_index_reached = 1;
 8002b48:	4b04      	ldr	r3, [pc, #16]	@ (8002b5c <quadEncoder_CallbackIndexR+0x54>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000584 	.word	0x20000584
 8002b58:	200005d0 	.word	0x200005d0
 8002b5c:	200004cc 	.word	0x200004cc

08002b60 <HAL_MspInit>:
void HAL_Encoder_Timer2_MspInit(void);
void HAL_adcir_MspInit(void);
void HAL_GPIO_MspInit(void);

void HAL_MspInit(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	4b33      	ldr	r3, [pc, #204]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6e:	4a32      	ldr	r2, [pc, #200]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b76:	4b30      	ldr	r3, [pc, #192]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	4b2c      	ldr	r3, [pc, #176]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b92:	4b29      	ldr	r3, [pc, #164]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	693b      	ldr	r3, [r7, #16]

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b25      	ldr	r3, [pc, #148]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	4a24      	ldr	r2, [pc, #144]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002ba8:	f043 0304 	orr.w	r3, r3, #4
 8002bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bae:	4b22      	ldr	r3, [pc, #136]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bca:	4b1b      	ldr	r3, [pc, #108]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	607b      	str	r3, [r7, #4]
 8002bda:	4b17      	ldr	r3, [pc, #92]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	4a16      	ldr	r2, [pc, #88]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002be0:	f043 0301 	orr.w	r3, r3, #1
 8002be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002be6:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	607b      	str	r3, [r7, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	603b      	str	r3, [r7, #0]
 8002bf6:	4b10      	ldr	r3, [pc, #64]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002bfc:	f043 0302 	orr.w	r3, r3, #2
 8002c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c02:	4b0d      	ldr	r3, [pc, #52]	@ (8002c38 <HAL_MspInit+0xd8>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c0e:	2200      	movs	r2, #0
 8002c10:	210f      	movs	r1, #15
 8002c12:	f06f 0001 	mvn.w	r0, #1
 8002c16:	f001 f975 	bl	8003f04 <HAL_NVIC_SetPriority>

  HAL_PWM_Timer3_MspInit();
 8002c1a:	f000 f8a3 	bl	8002d64 <HAL_PWM_Timer3_MspInit>
  HAL_Encoder_Timer1_MspInit();
 8002c1e:	f000 f823 	bl	8002c68 <HAL_Encoder_Timer1_MspInit>
  HAL_Encoder_Timer2_MspInit();
 8002c22:	f000 f861 	bl	8002ce8 <HAL_Encoder_Timer2_MspInit>
  HAL_adcir_MspInit();
 8002c26:	f000 f8ff 	bl	8002e28 <HAL_adcir_MspInit>
  HAL_GPIO_MspInit();
 8002c2a:	f000 f807 	bl	8002c3c <HAL_GPIO_MspInit>

}
 8002c2e:	bf00      	nop
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40023800 	.word	0x40023800

08002c3c <HAL_GPIO_MspInit>:
/******************************************************************
			GPIO : contrôle période d'échantillonage
GPIO OUTPUT	-->	PB4
******************************************************************/
void HAL_GPIO_MspInit(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c42:	2310      	movs	r3, #16
 8002c44:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // hal_gpio.h
 8002c46:	2301      	movs	r3, #1
 8002c48:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4803      	ldr	r0, [pc, #12]	@ (8002c64 <HAL_GPIO_MspInit+0x28>)
 8002c58:	f001 fd08 	bl	800466c <HAL_GPIO_Init>

}
 8002c5c:	bf00      	nop
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40020400 	.word	0x40020400

08002c68 <HAL_Encoder_Timer1_MspInit>:
PWM1/1	-->	PA8		-- Encodeur Voie A
PWM1/2	--> PA9		-- Encodeur Voie B
EXTI1	--> PB10		-- Index encodeur
******************************************************************/
void HAL_Encoder_Timer1_MspInit(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM1_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	4b1a      	ldr	r3, [pc, #104]	@ (8002cdc <HAL_Encoder_Timer1_MspInit+0x74>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c76:	4a19      	ldr	r2, [pc, #100]	@ (8002cdc <HAL_Encoder_Timer1_MspInit+0x74>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c7e:	4b17      	ldr	r3, [pc, #92]	@ (8002cdc <HAL_Encoder_Timer1_MspInit+0x74>)
 8002c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8002c8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c8e:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8002c90:	2302      	movs	r3, #2
 8002c92:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c94:	2301      	movs	r3, #1
 8002c96:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM1 ; // hal_gpio_ex.h
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca0:	1d3b      	adds	r3, r7, #4
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	480e      	ldr	r0, [pc, #56]	@ (8002ce0 <HAL_Encoder_Timer1_MspInit+0x78>)
 8002ca6:	f001 fce1 	bl	800466c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002caa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cae:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cb0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002cb4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cba:	1d3b      	adds	r3, r7, #4
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4809      	ldr	r0, [pc, #36]	@ (8002ce4 <HAL_Encoder_Timer1_MspInit+0x7c>)
 8002cc0:	f001 fcd4 	bl	800466c <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI15_10_IRQn, EXTI15_10_IRQ_PRIO, 0);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2107      	movs	r1, #7
 8002cc8:	2028      	movs	r0, #40	@ 0x28
 8002cca:	f001 f91b 	bl	8003f04 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cce:	2028      	movs	r0, #40	@ 0x28
 8002cd0:	f001 f934 	bl	8003f3c <HAL_NVIC_EnableIRQ>
}
 8002cd4:	bf00      	nop
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40020000 	.word	0x40020000
 8002ce4:	40020400 	.word	0x40020400

08002ce8 <HAL_Encoder_Timer2_MspInit>:
PWM2/1	-->	PA0		-- Encodeur Voie A
PWM2/2	--> PA1		-- Encodeur Voie B
EXTI 	--> PC0		-- Index Moteur
******************************************************************/
void HAL_Encoder_Timer2_MspInit(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM2_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	603b      	str	r3, [r7, #0]
 8002cf2:	4b19      	ldr	r3, [pc, #100]	@ (8002d58 <HAL_Encoder_Timer2_MspInit+0x70>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	4a18      	ldr	r2, [pc, #96]	@ (8002d58 <HAL_Encoder_Timer2_MspInit+0x70>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cfe:	4b16      	ldr	r3, [pc, #88]	@ (8002d58 <HAL_Encoder_Timer2_MspInit+0x70>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP; // hal_gpio.h
 8002d0e:	2302      	movs	r3, #2
 8002d10:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d12:	2301      	movs	r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002d16:	2301      	movs	r3, #1
 8002d18:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF1_TIM2 ; // hal_gpio_ex.h
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	480e      	ldr	r0, [pc, #56]	@ (8002d5c <HAL_Encoder_Timer2_MspInit+0x74>)
 8002d24:	f001 fca2 	bl	800466c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002d2c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002d30:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4809      	ldr	r0, [pc, #36]	@ (8002d60 <HAL_Encoder_Timer2_MspInit+0x78>)
 8002d3c:	f001 fc96 	bl	800466c <HAL_GPIO_Init>

	  /* Enable and set EXTI Line0 Interrupt to the lowest priority */
	  HAL_NVIC_SetPriority(EXTI0_IRQn, EXTI0_IRQ_PRIO, 0);
 8002d40:	2200      	movs	r2, #0
 8002d42:	2106      	movs	r1, #6
 8002d44:	2006      	movs	r0, #6
 8002d46:	f001 f8dd 	bl	8003f04 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002d4a:	2006      	movs	r0, #6
 8002d4c:	f001 f8f6 	bl	8003f3c <HAL_NVIC_EnableIRQ>
}
 8002d50:	bf00      	nop
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40020000 	.word	0x40020000
 8002d60:	40020800 	.word	0x40020800

08002d64 <HAL_PWM_Timer3_MspInit>:
PA6 --> PWM3/1
PC7 --> PWM3/2
PB3 --> ENABLE MOTEUR (actif état Bas)
******************************************************************/
void HAL_PWM_Timer3_MspInit(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  __TIM3_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e18 <HAL_PWM_Timer3_MspInit+0xb4>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	4a29      	ldr	r2, [pc, #164]	@ (8002e18 <HAL_PWM_Timer3_MspInit+0xb4>)
 8002d74:	f043 0302 	orr.w	r3, r3, #2
 8002d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d7a:	4b27      	ldr	r3, [pc, #156]	@ (8002e18 <HAL_PWM_Timer3_MspInit+0xb4>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	603b      	str	r3, [r7, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d86:	2340      	movs	r3, #64	@ 0x40
 8002d88:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002d92:	2301      	movs	r3, #1
 8002d94:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 8002d96:	2302      	movs	r3, #2
 8002d98:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	481f      	ldr	r0, [pc, #124]	@ (8002e1c <HAL_PWM_Timer3_MspInit+0xb8>)
 8002da0:	f001 fc64 	bl	800466c <HAL_GPIO_Init>

	  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002da4:	2380      	movs	r3, #128	@ 0x80
 8002da6:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da8:	2302      	movs	r3, #2
 8002daa:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dac:	2301      	movs	r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8002db0:	2301      	movs	r3, #1
 8002db2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Alternate =  GPIO_AF2_TIM3 ; // hal_gpio_ex.h
 8002db4:	2302      	movs	r3, #2
 8002db6:	617b      	str	r3, [r7, #20]

	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db8:	1d3b      	adds	r3, r7, #4
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4818      	ldr	r0, [pc, #96]	@ (8002e20 <HAL_PWM_Timer3_MspInit+0xbc>)
 8002dbe:	f001 fc55 	bl	800466c <HAL_GPIO_Init>
	  GPIO_InitStruct.Pull = GPIO_NOPULL;

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);*/

	  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd2:	1d3b      	adds	r3, r7, #4
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4813      	ldr	r0, [pc, #76]	@ (8002e24 <HAL_PWM_Timer3_MspInit+0xc0>)
 8002dd8:	f001 fc48 	bl	800466c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8002ddc:	2201      	movs	r2, #1
 8002dde:	2108      	movs	r1, #8
 8002de0:	4810      	ldr	r0, [pc, #64]	@ (8002e24 <HAL_PWM_Timer3_MspInit+0xc0>)
 8002de2:	f001 fdc7 	bl	8004974 <HAL_GPIO_WritePin>

	  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dea:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dec:	2301      	movs	r3, #1
 8002dee:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002df4:	2302      	movs	r3, #2
 8002df6:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	4807      	ldr	r0, [pc, #28]	@ (8002e1c <HAL_PWM_Timer3_MspInit+0xb8>)
 8002dfe:	f001 fc35 	bl	800466c <HAL_GPIO_Init>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8002e02:	2201      	movs	r2, #1
 8002e04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e08:	4804      	ldr	r0, [pc, #16]	@ (8002e1c <HAL_PWM_Timer3_MspInit+0xb8>)
 8002e0a:	f001 fdb3 	bl	8004974 <HAL_GPIO_WritePin>




}
 8002e0e:	bf00      	nop
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40020000 	.word	0x40020000
 8002e20:	40020800 	.word	0x40020800
 8002e24:	40020400 	.word	0x40020400

08002e28 <HAL_adcir_MspInit>:
ADC1_4	--> PA4
ADC1_8	--> PB0
http://stm32f4-discovery.com/2014/04/library-06-ad-converter-on-stm32f4xx/
******************************************************************/
void HAL_adcir_MspInit(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;
	  /* Peripheral clock enable */
	  __ADC1_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	603b      	str	r3, [r7, #0]
 8002e32:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <HAL_adcir_MspInit+0x58>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	4a12      	ldr	r2, [pc, #72]	@ (8002e80 <HAL_adcir_MspInit+0x58>)
 8002e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e3e:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <HAL_adcir_MspInit+0x58>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]

	  GPIO_InitStruct.Pin = GPIO_PIN_4 ;
 8002e4a:	2310      	movs	r3, #16
 8002e4c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	480a      	ldr	r0, [pc, #40]	@ (8002e84 <HAL_adcir_MspInit+0x5c>)
 8002e5c:	f001 fc06 	bl	800466c <HAL_GPIO_Init>


	  GPIO_InitStruct.Pin = GPIO_PIN_0 ;
 8002e60:	2301      	movs	r3, #1
 8002e62:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e64:	2303      	movs	r3, #3
 8002e66:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4805      	ldr	r0, [pc, #20]	@ (8002e88 <HAL_adcir_MspInit+0x60>)
 8002e72:	f001 fbfb 	bl	800466c <HAL_GPIO_Init>

}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020000 	.word	0x40020000
 8002e88:	40020400 	.word	0x40020400

08002e8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
******************************************************************/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	@ 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a21      	ldr	r2, [pc, #132]	@ (8002f30 <HAL_I2C_MspInit+0xa4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d13c      	bne.n	8002f28 <HAL_I2C_MspInit+0x9c>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	4b20      	ldr	r3, [pc, #128]	@ (8002f34 <HAL_I2C_MspInit+0xa8>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f34 <HAL_I2C_MspInit+0xa8>)
 8002eb8:	f043 0302 	orr.w	r3, r3, #2
 8002ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8002f34 <HAL_I2C_MspInit+0xa8>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002eca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ed0:	2312      	movs	r3, #18
 8002ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002edc:	2304      	movs	r3, #4
 8002ede:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4814      	ldr	r0, [pc, #80]	@ (8002f38 <HAL_I2C_MspInit+0xac>)
 8002ee8:	f001 fbc0 	bl	800466c <HAL_GPIO_Init>

    __HAL_RCC_I2C1_CLK_ENABLE();
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	4b10      	ldr	r3, [pc, #64]	@ (8002f34 <HAL_I2C_MspInit+0xa8>)
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	4a0f      	ldr	r2, [pc, #60]	@ (8002f34 <HAL_I2C_MspInit+0xa8>)
 8002ef6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002efa:	6413      	str	r3, [r2, #64]	@ 0x40
 8002efc:	4b0d      	ldr	r3, [pc, #52]	@ (8002f34 <HAL_I2C_MspInit+0xa8>)
 8002efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]

	  HAL_NVIC_SetPriority(I2C1_ER_IRQn, I2C1_ER_IRQ_PRIO, 0);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	2020      	movs	r0, #32
 8002f0e:	f000 fff9 	bl	8003f04 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002f12:	2020      	movs	r0, #32
 8002f14:	f001 f812 	bl	8003f3c <HAL_NVIC_EnableIRQ>
	  HAL_NVIC_SetPriority(I2C1_EV_IRQn, I2C1_EV_IRQ_PRIO, 0);
 8002f18:	2200      	movs	r2, #0
 8002f1a:	210b      	movs	r1, #11
 8002f1c:	201f      	movs	r0, #31
 8002f1e:	f000 fff1 	bl	8003f04 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002f22:	201f      	movs	r0, #31
 8002f24:	f001 f80a 	bl	8003f3c <HAL_NVIC_EnableIRQ>
  }

}
 8002f28:	bf00      	nop
 8002f2a:	3728      	adds	r7, #40	@ 0x28
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40005400 	.word	0x40005400
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40020400 	.word	0x40020400

08002f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
******************************************************************/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08c      	sub	sp, #48	@ 0x30
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f44:	f107 031c 	add.w	r3, r7, #28
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4aa2      	ldr	r2, [pc, #648]	@ (80031e4 <HAL_UART_MspInit+0x2a8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	f040 80a5 	bne.w	80030aa <HAL_UART_MspInit+0x16e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f60:	2300      	movs	r3, #0
 8002f62:	61bb      	str	r3, [r7, #24]
 8002f64:	4ba0      	ldr	r3, [pc, #640]	@ (80031e8 <HAL_UART_MspInit+0x2ac>)
 8002f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f68:	4a9f      	ldr	r2, [pc, #636]	@ (80031e8 <HAL_UART_MspInit+0x2ac>)
 8002f6a:	f043 0310 	orr.w	r3, r3, #16
 8002f6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f70:	4b9d      	ldr	r3, [pc, #628]	@ (80031e8 <HAL_UART_MspInit+0x2ac>)
 8002f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	4b99      	ldr	r3, [pc, #612]	@ (80031e8 <HAL_UART_MspInit+0x2ac>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f84:	4a98      	ldr	r2, [pc, #608]	@ (80031e8 <HAL_UART_MspInit+0x2ac>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f8c:	4b96      	ldr	r3, [pc, #600]	@ (80031e8 <HAL_UART_MspInit+0x2ac>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002faa:	2307      	movs	r3, #7
 8002fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fae:	f107 031c 	add.w	r3, r7, #28
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	488d      	ldr	r0, [pc, #564]	@ (80031ec <HAL_UART_MspInit+0x2b0>)
 8002fb6:	f001 fb59 	bl	800466c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fba:	2340      	movs	r3, #64	@ 0x40
 8002fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fca:	2307      	movs	r3, #7
 8002fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fce:	f107 031c 	add.w	r3, r7, #28
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4886      	ldr	r0, [pc, #536]	@ (80031f0 <HAL_UART_MspInit+0x2b4>)
 8002fd6:	f001 fb49 	bl	800466c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002fda:	4b86      	ldr	r3, [pc, #536]	@ (80031f4 <HAL_UART_MspInit+0x2b8>)
 8002fdc:	4a86      	ldr	r2, [pc, #536]	@ (80031f8 <HAL_UART_MspInit+0x2bc>)
 8002fde:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002fe0:	4b84      	ldr	r3, [pc, #528]	@ (80031f4 <HAL_UART_MspInit+0x2b8>)
 8002fe2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002fe6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fe8:	4b82      	ldr	r3, [pc, #520]	@ (80031f4 <HAL_UART_MspInit+0x2b8>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fee:	4b81      	ldr	r3, [pc, #516]	@ (80031f4 <HAL_UART_MspInit+0x2b8>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ff4:	4b7f      	ldr	r3, [pc, #508]	@ (80031f4 <HAL_UART_MspInit+0x2b8>)
 8002ff6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ffa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ffc:	4b7d      	ldr	r3, [pc, #500]	@ (80031f4 <HAL_UART_MspInit+0x2b8>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003002:	4b7c      	ldr	r3, [pc, #496]	@ (80031f4 <HAL_UART_MspInit+0x2b8>)
 8003004:	2200      	movs	r2, #0
 8003006:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003008:	4b7a      	ldr	r3, [pc, #488]	@ (80031f4 <HAL_UART_MspInit+0x2b8>)
 800300a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800300e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003010:	4b78      	ldr	r3, [pc, #480]	@ (80031f4 <HAL_UART_MspInit+0x2b8>)
 8003012:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003016:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003018:	4b76      	ldr	r3, [pc, #472]	@ (80031f4 <HAL_UART_MspInit+0x2b8>)
 800301a:	2200      	movs	r2, #0
 800301c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800301e:	4875      	ldr	r0, [pc, #468]	@ (80031f4 <HAL_UART_MspInit+0x2b8>)
 8003020:	f000 ff9a 	bl	8003f58 <HAL_DMA_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 800302a:	f7ff fb5f 	bl	80026ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a70      	ldr	r2, [pc, #448]	@ (80031f4 <HAL_UART_MspInit+0x2b8>)
 8003032:	639a      	str	r2, [r3, #56]	@ 0x38
 8003034:	4a6f      	ldr	r2, [pc, #444]	@ (80031f4 <HAL_UART_MspInit+0x2b8>)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800303a:	4b70      	ldr	r3, [pc, #448]	@ (80031fc <HAL_UART_MspInit+0x2c0>)
 800303c:	4a70      	ldr	r2, [pc, #448]	@ (8003200 <HAL_UART_MspInit+0x2c4>)
 800303e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003040:	4b6e      	ldr	r3, [pc, #440]	@ (80031fc <HAL_UART_MspInit+0x2c0>)
 8003042:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003046:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003048:	4b6c      	ldr	r3, [pc, #432]	@ (80031fc <HAL_UART_MspInit+0x2c0>)
 800304a:	2240      	movs	r2, #64	@ 0x40
 800304c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800304e:	4b6b      	ldr	r3, [pc, #428]	@ (80031fc <HAL_UART_MspInit+0x2c0>)
 8003050:	2200      	movs	r2, #0
 8003052:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003054:	4b69      	ldr	r3, [pc, #420]	@ (80031fc <HAL_UART_MspInit+0x2c0>)
 8003056:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800305a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800305c:	4b67      	ldr	r3, [pc, #412]	@ (80031fc <HAL_UART_MspInit+0x2c0>)
 800305e:	2200      	movs	r2, #0
 8003060:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003062:	4b66      	ldr	r3, [pc, #408]	@ (80031fc <HAL_UART_MspInit+0x2c0>)
 8003064:	2200      	movs	r2, #0
 8003066:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003068:	4b64      	ldr	r3, [pc, #400]	@ (80031fc <HAL_UART_MspInit+0x2c0>)
 800306a:	2200      	movs	r2, #0
 800306c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800306e:	4b63      	ldr	r3, [pc, #396]	@ (80031fc <HAL_UART_MspInit+0x2c0>)
 8003070:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003074:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003076:	4b61      	ldr	r3, [pc, #388]	@ (80031fc <HAL_UART_MspInit+0x2c0>)
 8003078:	2200      	movs	r2, #0
 800307a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800307c:	485f      	ldr	r0, [pc, #380]	@ (80031fc <HAL_UART_MspInit+0x2c0>)
 800307e:	f000 ff6b 	bl	8003f58 <HAL_DMA_Init>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <HAL_UART_MspInit+0x150>
    {
      Error_Handler();
 8003088:	f7ff fb30 	bl	80026ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a5b      	ldr	r2, [pc, #364]	@ (80031fc <HAL_UART_MspInit+0x2c0>)
 8003090:	635a      	str	r2, [r3, #52]	@ 0x34
 8003092:	4a5a      	ldr	r2, [pc, #360]	@ (80031fc <HAL_UART_MspInit+0x2c0>)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003098:	2200      	movs	r2, #0
 800309a:	2105      	movs	r1, #5
 800309c:	2025      	movs	r0, #37	@ 0x25
 800309e:	f000 ff31 	bl	8003f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030a2:	2025      	movs	r0, #37	@ 0x25
 80030a4:	f000 ff4a 	bl	8003f3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030a8:	e098      	b.n	80031dc <HAL_UART_MspInit+0x2a0>
  else if(huart->Instance==USART2)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a55      	ldr	r2, [pc, #340]	@ (8003204 <HAL_UART_MspInit+0x2c8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	f040 8093 	bne.w	80031dc <HAL_UART_MspInit+0x2a0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	4b4b      	ldr	r3, [pc, #300]	@ (80031e8 <HAL_UART_MspInit+0x2ac>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	4a4a      	ldr	r2, [pc, #296]	@ (80031e8 <HAL_UART_MspInit+0x2ac>)
 80030c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030c6:	4b48      	ldr	r3, [pc, #288]	@ (80031e8 <HAL_UART_MspInit+0x2ac>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	4b44      	ldr	r3, [pc, #272]	@ (80031e8 <HAL_UART_MspInit+0x2ac>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	4a43      	ldr	r2, [pc, #268]	@ (80031e8 <HAL_UART_MspInit+0x2ac>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80030e2:	4b41      	ldr	r3, [pc, #260]	@ (80031e8 <HAL_UART_MspInit+0x2ac>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80030ee:	230c      	movs	r3, #12
 80030f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f2:	2302      	movs	r3, #2
 80030f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030fa:	2303      	movs	r3, #3
 80030fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030fe:	2307      	movs	r3, #7
 8003100:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003102:	f107 031c 	add.w	r3, r7, #28
 8003106:	4619      	mov	r1, r3
 8003108:	4838      	ldr	r0, [pc, #224]	@ (80031ec <HAL_UART_MspInit+0x2b0>)
 800310a:	f001 faaf 	bl	800466c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800310e:	4b3e      	ldr	r3, [pc, #248]	@ (8003208 <HAL_UART_MspInit+0x2cc>)
 8003110:	4a3e      	ldr	r2, [pc, #248]	@ (800320c <HAL_UART_MspInit+0x2d0>)
 8003112:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003114:	4b3c      	ldr	r3, [pc, #240]	@ (8003208 <HAL_UART_MspInit+0x2cc>)
 8003116:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800311a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800311c:	4b3a      	ldr	r3, [pc, #232]	@ (8003208 <HAL_UART_MspInit+0x2cc>)
 800311e:	2200      	movs	r2, #0
 8003120:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003122:	4b39      	ldr	r3, [pc, #228]	@ (8003208 <HAL_UART_MspInit+0x2cc>)
 8003124:	2200      	movs	r2, #0
 8003126:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003128:	4b37      	ldr	r3, [pc, #220]	@ (8003208 <HAL_UART_MspInit+0x2cc>)
 800312a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800312e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003130:	4b35      	ldr	r3, [pc, #212]	@ (8003208 <HAL_UART_MspInit+0x2cc>)
 8003132:	2200      	movs	r2, #0
 8003134:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003136:	4b34      	ldr	r3, [pc, #208]	@ (8003208 <HAL_UART_MspInit+0x2cc>)
 8003138:	2200      	movs	r2, #0
 800313a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800313c:	4b32      	ldr	r3, [pc, #200]	@ (8003208 <HAL_UART_MspInit+0x2cc>)
 800313e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003142:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003144:	4b30      	ldr	r3, [pc, #192]	@ (8003208 <HAL_UART_MspInit+0x2cc>)
 8003146:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800314a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800314c:	4b2e      	ldr	r3, [pc, #184]	@ (8003208 <HAL_UART_MspInit+0x2cc>)
 800314e:	2200      	movs	r2, #0
 8003150:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003152:	482d      	ldr	r0, [pc, #180]	@ (8003208 <HAL_UART_MspInit+0x2cc>)
 8003154:	f000 ff00 	bl	8003f58 <HAL_DMA_Init>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_UART_MspInit+0x226>
      Error_Handler();
 800315e:	f7ff fac5 	bl	80026ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a28      	ldr	r2, [pc, #160]	@ (8003208 <HAL_UART_MspInit+0x2cc>)
 8003166:	639a      	str	r2, [r3, #56]	@ 0x38
 8003168:	4a27      	ldr	r2, [pc, #156]	@ (8003208 <HAL_UART_MspInit+0x2cc>)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800316e:	4b28      	ldr	r3, [pc, #160]	@ (8003210 <HAL_UART_MspInit+0x2d4>)
 8003170:	4a28      	ldr	r2, [pc, #160]	@ (8003214 <HAL_UART_MspInit+0x2d8>)
 8003172:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003174:	4b26      	ldr	r3, [pc, #152]	@ (8003210 <HAL_UART_MspInit+0x2d4>)
 8003176:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800317a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800317c:	4b24      	ldr	r3, [pc, #144]	@ (8003210 <HAL_UART_MspInit+0x2d4>)
 800317e:	2240      	movs	r2, #64	@ 0x40
 8003180:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003182:	4b23      	ldr	r3, [pc, #140]	@ (8003210 <HAL_UART_MspInit+0x2d4>)
 8003184:	2200      	movs	r2, #0
 8003186:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003188:	4b21      	ldr	r3, [pc, #132]	@ (8003210 <HAL_UART_MspInit+0x2d4>)
 800318a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800318e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003190:	4b1f      	ldr	r3, [pc, #124]	@ (8003210 <HAL_UART_MspInit+0x2d4>)
 8003192:	2200      	movs	r2, #0
 8003194:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003196:	4b1e      	ldr	r3, [pc, #120]	@ (8003210 <HAL_UART_MspInit+0x2d4>)
 8003198:	2200      	movs	r2, #0
 800319a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800319c:	4b1c      	ldr	r3, [pc, #112]	@ (8003210 <HAL_UART_MspInit+0x2d4>)
 800319e:	2200      	movs	r2, #0
 80031a0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80031a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003210 <HAL_UART_MspInit+0x2d4>)
 80031a4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80031a8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031aa:	4b19      	ldr	r3, [pc, #100]	@ (8003210 <HAL_UART_MspInit+0x2d4>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80031b0:	4817      	ldr	r0, [pc, #92]	@ (8003210 <HAL_UART_MspInit+0x2d4>)
 80031b2:	f000 fed1 	bl	8003f58 <HAL_DMA_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_UART_MspInit+0x284>
      Error_Handler();
 80031bc:	f7ff fa96 	bl	80026ec <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a13      	ldr	r2, [pc, #76]	@ (8003210 <HAL_UART_MspInit+0x2d4>)
 80031c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80031c6:	4a12      	ldr	r2, [pc, #72]	@ (8003210 <HAL_UART_MspInit+0x2d4>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80031cc:	2200      	movs	r2, #0
 80031ce:	2105      	movs	r1, #5
 80031d0:	2026      	movs	r0, #38	@ 0x26
 80031d2:	f000 fe97 	bl	8003f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031d6:	2026      	movs	r0, #38	@ 0x26
 80031d8:	f000 feb0 	bl	8003f3c <HAL_NVIC_EnableIRQ>
}
 80031dc:	bf00      	nop
 80031de:	3730      	adds	r7, #48	@ 0x30
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40011000 	.word	0x40011000
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40020000 	.word	0x40020000
 80031f0:	40020400 	.word	0x40020400
 80031f4:	20000330 	.word	0x20000330
 80031f8:	40026440 	.word	0x40026440
 80031fc:	20000390 	.word	0x20000390
 8003200:	400264b8 	.word	0x400264b8
 8003204:	40004400 	.word	0x40004400
 8003208:	200003f0 	.word	0x200003f0
 800320c:	40026088 	.word	0x40026088
 8003210:	20000450 	.word	0x20000450
 8003214:	400260a0 	.word	0x400260a0

08003218 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08c      	sub	sp, #48	@ 0x30
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003228:	2300      	movs	r3, #0
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	4b2f      	ldr	r3, [pc, #188]	@ (80032ec <HAL_InitTick+0xd4>)
 800322e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003230:	4a2e      	ldr	r2, [pc, #184]	@ (80032ec <HAL_InitTick+0xd4>)
 8003232:	f043 0304 	orr.w	r3, r3, #4
 8003236:	6413      	str	r3, [r2, #64]	@ 0x40
 8003238:	4b2c      	ldr	r3, [pc, #176]	@ (80032ec <HAL_InitTick+0xd4>)
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003244:	f107 020c 	add.w	r2, r7, #12
 8003248:	f107 0310 	add.w	r3, r7, #16
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f004 fca2 	bl	8007b98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003254:	f004 fc8c 	bl	8007b70 <HAL_RCC_GetPCLK2Freq>
 8003258:	4603      	mov	r3, r0
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800325e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003260:	4a23      	ldr	r2, [pc, #140]	@ (80032f0 <HAL_InitTick+0xd8>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	0c9b      	lsrs	r3, r3, #18
 8003268:	3b01      	subs	r3, #1
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim4.Instance = TIM4;
 800326c:	4b21      	ldr	r3, [pc, #132]	@ (80032f4 <HAL_InitTick+0xdc>)
 800326e:	4a22      	ldr	r2, [pc, #136]	@ (80032f8 <HAL_InitTick+0xe0>)
 8003270:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003272:	4b20      	ldr	r3, [pc, #128]	@ (80032f4 <HAL_InitTick+0xdc>)
 8003274:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003278:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800327a:	4a1e      	ldr	r2, [pc, #120]	@ (80032f4 <HAL_InitTick+0xdc>)
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003280:	4b1c      	ldr	r3, [pc, #112]	@ (80032f4 <HAL_InitTick+0xdc>)
 8003282:	2200      	movs	r2, #0
 8003284:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003286:	4b1b      	ldr	r3, [pc, #108]	@ (80032f4 <HAL_InitTick+0xdc>)
 8003288:	2200      	movs	r2, #0
 800328a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800328c:	4b19      	ldr	r3, [pc, #100]	@ (80032f4 <HAL_InitTick+0xdc>)
 800328e:	2200      	movs	r2, #0
 8003290:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003292:	4818      	ldr	r0, [pc, #96]	@ (80032f4 <HAL_InitTick+0xdc>)
 8003294:	f004 fcb2 	bl	8007bfc <HAL_TIM_Base_Init>
 8003298:	4603      	mov	r3, r0
 800329a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800329e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d11b      	bne.n	80032de <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80032a6:	4813      	ldr	r0, [pc, #76]	@ (80032f4 <HAL_InitTick+0xdc>)
 80032a8:	f004 fd02 	bl	8007cb0 <HAL_TIM_Base_Start_IT>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80032b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d111      	bne.n	80032de <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80032ba:	201e      	movs	r0, #30
 80032bc:	f000 fe3e 	bl	8003f3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b0f      	cmp	r3, #15
 80032c4:	d808      	bhi.n	80032d8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80032c6:	2200      	movs	r2, #0
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	201e      	movs	r0, #30
 80032cc:	f000 fe1a 	bl	8003f04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032d0:	4a0a      	ldr	r2, [pc, #40]	@ (80032fc <HAL_InitTick+0xe4>)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e002      	b.n	80032de <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80032de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3730      	adds	r7, #48	@ 0x30
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800
 80032f0:	431bde83 	.word	0x431bde83
 80032f4:	200005ec 	.word	0x200005ec
 80032f8:	40000800 	.word	0x40000800
 80032fc:	20000018 	.word	0x20000018

08003300 <NMI_Handler>:
extern TIM_HandleTypeDef htim4;
extern I2C_HandleTypeDef hi2c1;


void NMI_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  while (1)
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <NMI_Handler+0x4>

08003308 <HardFault_Handler>:
  {
  }
}

void HardFault_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0

  while (1)
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <HardFault_Handler+0x4>

08003310 <MemManage_Handler>:
  {
  }
}

void MemManage_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  while (1)
 8003314:	bf00      	nop
 8003316:	e7fd      	b.n	8003314 <MemManage_Handler+0x4>

08003318 <BusFault_Handler>:
  }
}


void BusFault_Handler(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  while (1)
 800331c:	bf00      	nop
 800331e:	e7fd      	b.n	800331c <BusFault_Handler+0x4>

08003320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  while (1)
 8003324:	bf00      	nop
 8003326:	e7fd      	b.n	8003324 <UsageFault_Handler+0x4>

08003328 <DebugMon_Handler>:
  {
  }
}

void DebugMon_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <DMA1_Stream5_IRQHandler>:
/* For the available peripheral interrupt handler names,                      */
/* please refer to the startup file (startup_stm32f4xx.s).                    */
/******************************************************************************/

void DMA1_Stream5_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800333c:	4802      	ldr	r0, [pc, #8]	@ (8003348 <DMA1_Stream5_IRQHandler+0x10>)
 800333e:	f000 ff4b 	bl	80041d8 <HAL_DMA_IRQHandler>
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	200003f0 	.word	0x200003f0

0800334c <DMA1_Stream6_IRQHandler>:


void DMA1_Stream6_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003350:	4802      	ldr	r0, [pc, #8]	@ (800335c <DMA1_Stream6_IRQHandler+0x10>)
 8003352:	f000 ff41 	bl	80041d8 <HAL_DMA_IRQHandler>
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20000450 	.word	0x20000450

08003360 <TIM4_IRQHandler>:
{
  HAL_TIM_IRQHandler(&htim1);
}*/

void TIM4_IRQHandler(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 8003364:	4802      	ldr	r0, [pc, #8]	@ (8003370 <TIM4_IRQHandler+0x10>)
 8003366:	f004 fef3 	bl	8008150 <HAL_TIM_IRQHandler>
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	200005ec 	.word	0x200005ec

08003374 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8003378:	4802      	ldr	r0, [pc, #8]	@ (8003384 <USART1_IRQHandler+0x10>)
 800337a:	f005 fbff 	bl	8008b7c <HAL_UART_IRQHandler>
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	200002a8 	.word	0x200002a8

08003388 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart2);
 800338c:	4802      	ldr	r0, [pc, #8]	@ (8003398 <USART2_IRQHandler+0x10>)
 800338e:	f005 fbf5 	bl	8008b7c <HAL_UART_IRQHandler>
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	200002ec 	.word	0x200002ec

0800339c <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80033a0:	4802      	ldr	r0, [pc, #8]	@ (80033ac <DMA2_Stream2_IRQHandler+0x10>)
 80033a2:	f000 ff19 	bl	80041d8 <HAL_DMA_IRQHandler>
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	20000330 	.word	0x20000330

080033b0 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80033b4:	4802      	ldr	r0, [pc, #8]	@ (80033c0 <DMA2_Stream7_IRQHandler+0x10>)
 80033b6:	f000 ff0f 	bl	80041d8 <HAL_DMA_IRQHandler>
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000390 	.word	0x20000390

080033c4 <EXTI15_10_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80033c8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80033cc:	f001 faec 	bl	80049a8 <HAL_GPIO_EXTI_IRQHandler>
}
 80033d0:	bf00      	nop
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <EXTI0_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI0_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80033d8:	2001      	movs	r0, #1
 80033da:	f001 fae5 	bl	80049a8 <HAL_GPIO_EXTI_IRQHandler>
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <I2C1_EV_IRQHandler>:


void I2C1_EV_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 80033e8:	4802      	ldr	r0, [pc, #8]	@ (80033f4 <I2C1_EV_IRQHandler+0x10>)
 80033ea:	f001 ff5d 	bl	80052a8 <HAL_I2C_EV_IRQHandler>
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000254 	.word	0x20000254

080033f8 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 80033fc:	4802      	ldr	r0, [pc, #8]	@ (8003408 <I2C1_ER_IRQHandler+0x10>)
 80033fe:	f002 f8a6 	bl	800554e <HAL_I2C_ER_IRQHandler>
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000254 	.word	0x20000254

0800340c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
	return 1;
 8003410:	2301      	movs	r3, #1
}
 8003412:	4618      	mov	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <_kill>:

int _kill(int pid, int sig)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003426:	f00a fce7 	bl	800ddf8 <__errno>
 800342a:	4603      	mov	r3, r0
 800342c:	2216      	movs	r2, #22
 800342e:	601a      	str	r2, [r3, #0]
	return -1;
 8003430:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <_exit>:

void _exit (int status)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003444:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff ffe7 	bl	800341c <_kill>
	while (1) {}		/* Make sure we hang here */
 800344e:	bf00      	nop
 8003450:	e7fd      	b.n	800344e <_exit+0x12>

08003452 <_read>:
}

//__attribute__((weak)) int _read(int file, char *ptr, int len)
int _read(int file, char *ptr, int len)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b086      	sub	sp, #24
 8003456:	af00      	add	r7, sp, #0
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	60b9      	str	r1, [r7, #8]
 800345c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	e00a      	b.n	800347a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003464:	f3af 8000 	nop.w
 8003468:	4601      	mov	r1, r0
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	60ba      	str	r2, [r7, #8]
 8003470:	b2ca      	uxtb	r2, r1
 8003472:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	3301      	adds	r3, #1
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	429a      	cmp	r2, r3
 8003480:	dbf0      	blt.n	8003464 <_read+0x12>
	}

return len;
 8003482:	687b      	ldr	r3, [r7, #4]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <_write>:

//__attribute__((weak)) int _write(int file, char *ptr, int len)
int _write(int file, char *ptr, int len)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
 800349c:	e009      	b.n	80034b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	60ba      	str	r2, [r7, #8]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe faf0 	bl	8001a8c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	3301      	adds	r3, #1
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	dbf1      	blt.n	800349e <_write+0x12>
	}
	return len;
 80034ba:	687b      	ldr	r3, [r7, #4]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <_close>:

int _close(int file)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	return -1;
 80034cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034ec:	605a      	str	r2, [r3, #4]
	return 0;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <_isatty>:

int _isatty(int file)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
	return 1;
 8003504:	2301      	movs	r3, #1
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
	return 0;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003534:	4a14      	ldr	r2, [pc, #80]	@ (8003588 <_sbrk+0x5c>)
 8003536:	4b15      	ldr	r3, [pc, #84]	@ (800358c <_sbrk+0x60>)
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003540:	4b13      	ldr	r3, [pc, #76]	@ (8003590 <_sbrk+0x64>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d102      	bne.n	800354e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003548:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <_sbrk+0x64>)
 800354a:	4a12      	ldr	r2, [pc, #72]	@ (8003594 <_sbrk+0x68>)
 800354c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800354e:	4b10      	ldr	r3, [pc, #64]	@ (8003590 <_sbrk+0x64>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	429a      	cmp	r2, r3
 800355a:	d207      	bcs.n	800356c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800355c:	f00a fc4c 	bl	800ddf8 <__errno>
 8003560:	4603      	mov	r3, r0
 8003562:	220c      	movs	r2, #12
 8003564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003566:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800356a:	e009      	b.n	8003580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800356c:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <_sbrk+0x64>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003572:	4b07      	ldr	r3, [pc, #28]	@ (8003590 <_sbrk+0x64>)
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4413      	add	r3, r2
 800357a:	4a05      	ldr	r2, [pc, #20]	@ (8003590 <_sbrk+0x64>)
 800357c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800357e:	68fb      	ldr	r3, [r7, #12]
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	20020000 	.word	0x20020000
 800358c:	00000400 	.word	0x00000400
 8003590:	20000634 	.word	0x20000634
 8003594:	20005570 	.word	0x20005570

08003598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800359c:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <SystemInit+0x20>)
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a2:	4a05      	ldr	r2, [pc, #20]	@ (80035b8 <SystemInit+0x20>)
 80035a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035ac:	bf00      	nop
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	e000ed00 	.word	0xe000ed00

080035bc <SystemClock_Config>:


#include "main.h"

void SystemClock_Config(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b094      	sub	sp, #80	@ 0x50
 80035c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035c2:	f107 0320 	add.w	r3, r7, #32
 80035c6:	2230      	movs	r2, #48	@ 0x30
 80035c8:	2100      	movs	r1, #0
 80035ca:	4618      	mov	r0, r3
 80035cc:	f00a fb4a 	bl	800dc64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035d0:	f107 030c 	add.w	r3, r7, #12
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80035e0:	2300      	movs	r3, #0
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	4b28      	ldr	r3, [pc, #160]	@ (8003688 <SystemClock_Config+0xcc>)
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	4a27      	ldr	r2, [pc, #156]	@ (8003688 <SystemClock_Config+0xcc>)
 80035ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80035f0:	4b25      	ldr	r3, [pc, #148]	@ (8003688 <SystemClock_Config+0xcc>)
 80035f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035fc:	2300      	movs	r3, #0
 80035fe:	607b      	str	r3, [r7, #4]
 8003600:	4b22      	ldr	r3, [pc, #136]	@ (800368c <SystemClock_Config+0xd0>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a21      	ldr	r2, [pc, #132]	@ (800368c <SystemClock_Config+0xd0>)
 8003606:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b1f      	ldr	r3, [pc, #124]	@ (800368c <SystemClock_Config+0xd0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003614:	607b      	str	r3, [r7, #4]
 8003616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003618:	2301      	movs	r3, #1
 800361a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800361c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8003620:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003622:	2302      	movs	r3, #2
 8003624:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003626:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800362a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800362c:	2308      	movs	r3, #8
 800362e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8003630:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8003634:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8003636:	2306      	movs	r3, #6
 8003638:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800363a:	2304      	movs	r3, #4
 800363c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800363e:	f107 0320 	add.w	r3, r7, #32
 8003642:	4618      	mov	r0, r3
 8003644:	f003 fe10 	bl	8007268 <HAL_RCC_OscConfig>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800364e:	f7ff f84d 	bl	80026ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003652:	230f      	movs	r3, #15
 8003654:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003656:	2302      	movs	r3, #2
 8003658:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800365e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003664:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003668:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800366a:	f107 030c 	add.w	r3, r7, #12
 800366e:	2102      	movs	r1, #2
 8003670:	4618      	mov	r0, r3
 8003672:	f004 f871 	bl	8007758 <HAL_RCC_ClockConfig>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800367c:	f7ff f836 	bl	80026ec <Error_Handler>
  }
}
 8003680:	bf00      	nop
 8003682:	3750      	adds	r7, #80	@ 0x50
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40023800 	.word	0x40023800
 800368c:	40007000 	.word	0x40007000

08003690 <num2str>:
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 8003690:	b480      	push	{r7}
 8003692:	b089      	sub	sp, #36	@ 0x24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	fb01 f202 	mul.w	r2, r1, r2
 80036b0:	1a9a      	subs	r2, r3, r2
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1c59      	adds	r1, r3, #1
 80036b6:	60f9      	str	r1, [r7, #12]
 80036b8:	4936      	ldr	r1, [pc, #216]	@ (8003794 <num2str+0x104>)
 80036ba:	5c8a      	ldrb	r2, [r1, r2]
 80036bc:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1e9      	bne.n	80036a2 <num2str+0x12>
        *s='\0';
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 80036dc:	2300      	movs	r3, #0
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	e01a      	b.n	8003718 <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	4413      	add	r3, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	76fb      	strb	r3, [r7, #27]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	441a      	add	r2, r3
 80036f8:	6979      	ldr	r1, [r7, #20]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	440b      	add	r3, r1
 80036fe:	7812      	ldrb	r2, [r2, #0]
 8003700:	701a      	strb	r2, [r3, #0]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4413      	add	r3, r2
 800370e:	7efa      	ldrb	r2, [r7, #27]
 8003710:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3301      	adds	r3, #1
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	429a      	cmp	r2, r3
 8003720:	d3df      	bcc.n	80036e2 <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d22d      	bcs.n	8003786 <num2str+0xf6>
                for (i=cnt;i==0;i--)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	e00e      	b.n	800374e <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	441a      	add	r2, r3
 8003736:	69f9      	ldr	r1, [r7, #28]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	4419      	add	r1, r3
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1acb      	subs	r3, r1, r3
 8003740:	6979      	ldr	r1, [r7, #20]
 8003742:	440b      	add	r3, r1
 8003744:	7812      	ldrb	r2, [r2, #0]
 8003746:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	3b01      	subs	r3, #1
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ed      	beq.n	8003730 <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 8003754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <num2str+0xd0>
 800375a:	2320      	movs	r3, #32
 800375c:	76fb      	strb	r3, [r7, #27]
 800375e:	e001      	b.n	8003764 <num2str+0xd4>
 8003760:	2330      	movs	r3, #48	@ 0x30
 8003762:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
 8003768:	e007      	b.n	800377a <num2str+0xea>
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	4413      	add	r3, r2
 8003770:	7efa      	ldrb	r2, [r7, #27]
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	3301      	adds	r3, #1
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	429a      	cmp	r2, r3
 8003784:	d3f1      	bcc.n	800376a <num2str+0xda>
        }
}
 8003786:	bf00      	nop
 8003788:	3724      	adds	r7, #36	@ 0x24
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000004 	.word	0x20000004

08003798 <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	1c5a      	adds	r2, r3, #1
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 80037b0:	e02e      	b.n	8003810 <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80037b6:	d906      	bls.n	80037c6 <str2num+0x2e>
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	2b39      	cmp	r3, #57	@ 0x39
 80037bc:	d803      	bhi.n	80037c6 <str2num+0x2e>
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	3b30      	subs	r3, #48	@ 0x30
 80037c2:	613b      	str	r3, [r7, #16]
 80037c4:	e018      	b.n	80037f8 <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b10      	cmp	r3, #16
 80037ca:	d109      	bne.n	80037e0 <str2num+0x48>
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
 80037ce:	2b40      	cmp	r3, #64	@ 0x40
 80037d0:	d906      	bls.n	80037e0 <str2num+0x48>
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	2b46      	cmp	r3, #70	@ 0x46
 80037d6:	d803      	bhi.n	80037e0 <str2num+0x48>
 80037d8:	7bfb      	ldrb	r3, [r7, #15]
 80037da:	3b37      	subs	r3, #55	@ 0x37
 80037dc:	613b      	str	r3, [r7, #16]
 80037de:	e00b      	b.n	80037f8 <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b10      	cmp	r3, #16
 80037e4:	d117      	bne.n	8003816 <str2num+0x7e>
 80037e6:	7bfb      	ldrb	r3, [r7, #15]
 80037e8:	2b60      	cmp	r3, #96	@ 0x60
 80037ea:	d914      	bls.n	8003816 <str2num+0x7e>
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b66      	cmp	r3, #102	@ 0x66
 80037f0:	d811      	bhi.n	8003816 <str2num+0x7e>
 80037f2:	7bfb      	ldrb	r3, [r7, #15]
 80037f4:	3b57      	subs	r3, #87	@ 0x57
 80037f6:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	fb02 f303 	mul.w	r3, r2, r3
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4413      	add	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
		ch=*s++;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	607a      	str	r2, [r7, #4]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8003810:	7bfb      	ldrb	r3, [r7, #15]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1cd      	bne.n	80037b2 <str2num+0x1a>
	}
	return u;
 8003816:	697b      	ldr	r3, [r7, #20]
}
 8003818:	4618      	mov	r0, r3
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	3b01      	subs	r3, #1
 8003836:	613b      	str	r3, [r7, #16]
    while (i<j)
 8003838:	e018      	b.n	800386c <reverse+0x48>
    {
        temp = str[i];
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4413      	add	r3, r2
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	441a      	add	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	440b      	add	r3, r1
 8003850:	7812      	ldrb	r2, [r2, #0]
 8003852:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	3301      	adds	r3, #1
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	3b01      	subs	r3, #1
 800386a:	613b      	str	r3, [r7, #16]
    while (i<j)
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	429a      	cmp	r2, r3
 8003872:	dbe2      	blt.n	800383a <reverse+0x16>
    }
}
 8003874:	bf00      	nop
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
    int i = 0;
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
    while (x)
 8003894:	e01d      	b.n	80038d2 <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4b1d      	ldr	r3, [pc, #116]	@ (8003910 <intToStr+0x8c>)
 800389a:	fb83 1302 	smull	r1, r3, r3, r2
 800389e:	1099      	asrs	r1, r3, #2
 80038a0:	17d3      	asrs	r3, r2, #31
 80038a2:	1ac9      	subs	r1, r1, r3
 80038a4:	460b      	mov	r3, r1
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	1ad1      	subs	r1, r2, r3
 80038ae:	b2ca      	uxtb	r2, r1
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	1c59      	adds	r1, r3, #1
 80038b4:	6179      	str	r1, [r7, #20]
 80038b6:	4619      	mov	r1, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	440b      	add	r3, r1
 80038bc:	3230      	adds	r2, #48	@ 0x30
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]
        x = x/10;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	4a12      	ldr	r2, [pc, #72]	@ (8003910 <intToStr+0x8c>)
 80038c6:	fb82 1203 	smull	r1, r2, r2, r3
 80038ca:	1092      	asrs	r2, r2, #2
 80038cc:	17db      	asrs	r3, r3, #31
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	60fb      	str	r3, [r7, #12]
    while (x)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1de      	bne.n	8003896 <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 80038d8:	e007      	b.n	80038ea <intToStr+0x66>
        str[i++] = '0';
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	617a      	str	r2, [r7, #20]
 80038e0:	461a      	mov	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	4413      	add	r3, r2
 80038e6:	2230      	movs	r2, #48	@ 0x30
 80038e8:	701a      	strb	r2, [r3, #0]
    while (i < d)
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	dbf3      	blt.n	80038da <intToStr+0x56>

    reverse(str, i);
 80038f2:	6979      	ldr	r1, [r7, #20]
 80038f4:	68b8      	ldr	r0, [r7, #8]
 80038f6:	f7ff ff95 	bl	8003824 <reverse>
    str[i] = '\0';
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	4413      	add	r3, r2
 8003900:	2200      	movs	r2, #0
 8003902:	701a      	strb	r2, [r3, #0]
    return i;
 8003904:	697b      	ldr	r3, [r7, #20]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	66666667 	.word	0x66666667
 8003914:	00000000 	.word	0x00000000

08003918 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	ed87 0a02 	vstr	s0, [r7, #8]
 8003924:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8003926:	edd7 7a02 	vldr	s15, [r7, #8]
 800392a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800392e:	ee17 3a90 	vmov	r3, s15
 8003932:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800393e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003946:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 800394a:	2200      	movs	r2, #0
 800394c:	68f9      	ldr	r1, [r7, #12]
 800394e:	69f8      	ldr	r0, [r7, #28]
 8003950:	f7ff ff98 	bl	8003884 <intToStr>
 8003954:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d025      	beq.n	80039a8 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4413      	add	r3, r2
 8003962:	222e      	movs	r2, #46	@ 0x2e
 8003964:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 80039b0 <float2str+0x98>
 800396c:	f000 f824 	bl	80039b8 <myPow>
 8003970:	ec53 2b10 	vmov	r2, r3, d0
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	f7fd f93e 	bl	8000bf8 <__aeabi_d2f>
 800397c:	ee07 0a10 	vmov	s14, r0
 8003980:	edd7 7a06 	vldr	s15, [r7, #24]
 8003984:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003988:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 800398c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	3301      	adds	r3, #1
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4413      	add	r3, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	4619      	mov	r1, r3
 80039a0:	ee17 0a90 	vmov	r0, s15
 80039a4:	f7ff ff6e 	bl	8003884 <intToStr>
    }
}
 80039a8:	bf00      	nop
 80039aa:	3720      	adds	r7, #32
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	00000000 	.word	0x00000000
 80039b4:	40240000 	.word	0x40240000

080039b8 <myPow>:
//=================================================================
double myPow(double x, int n) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	ed87 0b02 	vstr	d0, [r7, #8]
 80039c2:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bfb8      	it	lt
 80039ca:	425b      	neglt	r3, r3
 80039cc:	61fb      	str	r3, [r7, #28]
    double result = 1;
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a48 <myPow+0x90>)
 80039d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 80039d8:	e01b      	b.n	8003a12 <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d009      	beq.n	80039f8 <myPow+0x40>
        {
            result = result * x;
 80039e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80039ec:	f7fc fe0c 	bl	8000608 <__aeabi_dmul>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
        x = x * x;
 80039fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a06:	f7fc fdff 	bl	8000608 <__aeabi_dmul>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1e0      	bne.n	80039da <myPow+0x22>
    }

    if(n < 0)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	da09      	bge.n	8003a32 <myPow+0x7a>
    {
        return 1/result;
 8003a1e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a22:	f04f 0000 	mov.w	r0, #0
 8003a26:	4908      	ldr	r1, [pc, #32]	@ (8003a48 <myPow+0x90>)
 8003a28:	f7fc ff18 	bl	800085c <__aeabi_ddiv>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	e001      	b.n	8003a36 <myPow+0x7e>
    }
    return result;
 8003a32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8003a36:	ec43 2b17 	vmov	d7, r2, r3
 8003a3a:	eeb0 0a47 	vmov.f32	s0, s14
 8003a3e:	eef0 0a67 	vmov.f32	s1, s15
 8003a42:	3720      	adds	r7, #32
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	3ff00000 	.word	0x3ff00000

08003a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a50:	480d      	ldr	r0, [pc, #52]	@ (8003a88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a52:	490e      	ldr	r1, [pc, #56]	@ (8003a8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a54:	4a0e      	ldr	r2, [pc, #56]	@ (8003a90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a58:	e002      	b.n	8003a60 <LoopCopyDataInit>

08003a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a5e:	3304      	adds	r3, #4

08003a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a64:	d3f9      	bcc.n	8003a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a66:	4a0b      	ldr	r2, [pc, #44]	@ (8003a94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a68:	4c0b      	ldr	r4, [pc, #44]	@ (8003a98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a6c:	e001      	b.n	8003a72 <LoopFillZerobss>

08003a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a70:	3204      	adds	r2, #4

08003a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a74:	d3fb      	bcc.n	8003a6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a76:	f7ff fd8f 	bl	8003598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a7a:	f00a f9c3 	bl	800de04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a7e:	f7fe fd21 	bl	80024c4 <main>
  bx  lr    
 8003a82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003a84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a8c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8003a90:	0801171c 	.word	0x0801171c
  ldr r2, =_sbss
 8003a94:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8003a98:	20005570 	.word	0x20005570

08003a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a9c:	e7fe      	b.n	8003a9c <ADC_IRQHandler>
	...

08003aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae0 <HAL_Init+0x40>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ae0 <HAL_Init+0x40>)
 8003aaa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae0 <HAL_Init+0x40>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae0 <HAL_Init+0x40>)
 8003ab6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003abc:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <HAL_Init+0x40>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a07      	ldr	r2, [pc, #28]	@ (8003ae0 <HAL_Init+0x40>)
 8003ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ac8:	2003      	movs	r0, #3
 8003aca:	f000 fa10 	bl	8003eee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ace:	200f      	movs	r0, #15
 8003ad0:	f7ff fba2 	bl	8003218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ad4:	f7ff f844 	bl	8002b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40023c00 	.word	0x40023c00

08003ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ae8:	4b06      	ldr	r3, [pc, #24]	@ (8003b04 <HAL_IncTick+0x20>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <HAL_IncTick+0x24>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4413      	add	r3, r2
 8003af4:	4a04      	ldr	r2, [pc, #16]	@ (8003b08 <HAL_IncTick+0x24>)
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	2000001c 	.word	0x2000001c
 8003b08:	20000638 	.word	0x20000638

08003b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b10:	4b03      	ldr	r3, [pc, #12]	@ (8003b20 <HAL_GetTick+0x14>)
 8003b12:	681b      	ldr	r3, [r3, #0]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000638 	.word	0x20000638

08003b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b2c:	f7ff ffee 	bl	8003b0c <HAL_GetTick>
 8003b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b3c:	d005      	beq.n	8003b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b68 <HAL_Delay+0x44>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b4a:	bf00      	nop
 8003b4c:	f7ff ffde 	bl	8003b0c <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d8f7      	bhi.n	8003b4c <HAL_Delay+0x28>
  {
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	2000001c 	.word	0x2000001c

08003b6c <HAL_ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check ADC handle */
  if(hadc == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_Init+0x12>
  {
     return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e01b      	b.n	8003bb6 <HAL_ADC_Init+0x4a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d102      	bne.n	8003b90 <HAL_ADC_Init+0x24>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f817 	bl	8003bbe <HAL_ADC_MspInit>
  }
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  
  /* Set ADC parameters */
  ADC_Init(hadc);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f81b 	bl	8003bd4 <ADC_Init>
  
  /* Set ADC error code to none */
  hadc->ErrorCode = HAL_ADC_ERROR_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Initialize the ADC state */
  hadc->State = HAL_ADC_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_ADC_MspInit>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <ADC_Init>:
  * @param  hadc: pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003bdc:	4b6c      	ldr	r3, [pc, #432]	@ (8003d90 <ADC_Init+0x1bc>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4a6b      	ldr	r2, [pc, #428]	@ (8003d90 <ADC_Init+0x1bc>)
 8003be2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003be6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003be8:	4b69      	ldr	r3, [pc, #420]	@ (8003d90 <ADC_Init+0x1bc>)
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4967      	ldr	r1, [pc, #412]	@ (8003d90 <ADC_Init+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6859      	ldr	r1, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	021a      	lsls	r2, r3, #8
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003c28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6859      	ldr	r1, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6899      	ldr	r1, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	609a      	str	r2, [r3, #8]
  
  /* Select external trigger to start conversion */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6899      	ldr	r1, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	609a      	str	r2, [r3, #8]

  /* Select external trigger polarity */
  hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6899      	ldr	r1, [r3, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0202 	bic.w	r2, r2, #2
 8003cb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6899      	ldr	r1, [r3, #8]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	005a      	lsls	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	609a      	str	r2, [r3, #8]
  
  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d01b      	beq.n	8003d06 <ADC_Init+0x132>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cdc:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003cec:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	035a      	lsls	r2, r3, #13
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	605a      	str	r2, [r3, #4]
 8003d04:	e007      	b.n	8003d16 <ADC_Init+0x142>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d14:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003d24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	051a      	lsls	r2, r3, #20
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6899      	ldr	r1, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	025a      	lsls	r2, r3, #9
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6899      	ldr	r1, [r3, #8]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	029a      	lsls	r2, r3, #10
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	609a      	str	r2, [r3, #8]
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	40012300 	.word	0x40012300

08003d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003da4:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003db0:	4013      	ands	r3, r2
 8003db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dc6:	4a04      	ldr	r2, [pc, #16]	@ (8003dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	60d3      	str	r3, [r2, #12]
}
 8003dcc:	bf00      	nop
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	e000ed00 	.word	0xe000ed00

08003ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003de0:	4b04      	ldr	r3, [pc, #16]	@ (8003df4 <__NVIC_GetPriorityGrouping+0x18>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	0a1b      	lsrs	r3, r3, #8
 8003de6:	f003 0307 	and.w	r3, r3, #7
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	e000ed00 	.word	0xe000ed00

08003df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	db0b      	blt.n	8003e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	f003 021f 	and.w	r2, r3, #31
 8003e10:	4907      	ldr	r1, [pc, #28]	@ (8003e30 <__NVIC_EnableIRQ+0x38>)
 8003e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	2001      	movs	r0, #1
 8003e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	e000e100 	.word	0xe000e100

08003e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	6039      	str	r1, [r7, #0]
 8003e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	db0a      	blt.n	8003e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	490c      	ldr	r1, [pc, #48]	@ (8003e80 <__NVIC_SetPriority+0x4c>)
 8003e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e52:	0112      	lsls	r2, r2, #4
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	440b      	add	r3, r1
 8003e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e5c:	e00a      	b.n	8003e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	4908      	ldr	r1, [pc, #32]	@ (8003e84 <__NVIC_SetPriority+0x50>)
 8003e64:	79fb      	ldrb	r3, [r7, #7]
 8003e66:	f003 030f 	and.w	r3, r3, #15
 8003e6a:	3b04      	subs	r3, #4
 8003e6c:	0112      	lsls	r2, r2, #4
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	440b      	add	r3, r1
 8003e72:	761a      	strb	r2, [r3, #24]
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	e000e100 	.word	0xe000e100
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b089      	sub	sp, #36	@ 0x24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	bf28      	it	cs
 8003ea6:	2304      	movcs	r3, #4
 8003ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	3304      	adds	r3, #4
 8003eae:	2b06      	cmp	r3, #6
 8003eb0:	d902      	bls.n	8003eb8 <NVIC_EncodePriority+0x30>
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	3b03      	subs	r3, #3
 8003eb6:	e000      	b.n	8003eba <NVIC_EncodePriority+0x32>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ebc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	401a      	ands	r2, r3
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ed0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eda:	43d9      	mvns	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee0:	4313      	orrs	r3, r2
         );
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3724      	adds	r7, #36	@ 0x24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b082      	sub	sp, #8
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff ff4c 	bl	8003d94 <__NVIC_SetPriorityGrouping>
}
 8003efc:	bf00      	nop
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f16:	f7ff ff61 	bl	8003ddc <__NVIC_GetPriorityGrouping>
 8003f1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	68b9      	ldr	r1, [r7, #8]
 8003f20:	6978      	ldr	r0, [r7, #20]
 8003f22:	f7ff ffb1 	bl	8003e88 <NVIC_EncodePriority>
 8003f26:	4602      	mov	r2, r0
 8003f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff ff80 	bl	8003e34 <__NVIC_SetPriority>
}
 8003f34:	bf00      	nop
 8003f36:	3718      	adds	r7, #24
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	4603      	mov	r3, r0
 8003f44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff ff54 	bl	8003df8 <__NVIC_EnableIRQ>
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f64:	f7ff fdd2 	bl	8003b0c <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e099      	b.n	80040a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0201 	bic.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f94:	e00f      	b.n	8003fb6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f96:	f7ff fdb9 	bl	8003b0c <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b05      	cmp	r3, #5
 8003fa2:	d908      	bls.n	8003fb6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2203      	movs	r2, #3
 8003fae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e078      	b.n	80040a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e8      	bne.n	8003f96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	4b38      	ldr	r3, [pc, #224]	@ (80040b0 <HAL_DMA_Init+0x158>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fe2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	4313      	orrs	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400c:	2b04      	cmp	r3, #4
 800400e:	d107      	bne.n	8004020 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	4313      	orrs	r3, r2
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f023 0307 	bic.w	r3, r3, #7
 8004036:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4313      	orrs	r3, r2
 8004040:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	2b04      	cmp	r3, #4
 8004048:	d117      	bne.n	800407a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00e      	beq.n	800407a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 fa89 	bl	8004574 <DMA_CheckFifoParam>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2240      	movs	r2, #64	@ 0x40
 800406c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004076:	2301      	movs	r3, #1
 8004078:	e016      	b.n	80040a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 fa40 	bl	8004508 <DMA_CalcBaseAndBitshift>
 8004088:	4603      	mov	r3, r0
 800408a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004090:	223f      	movs	r2, #63	@ 0x3f
 8004092:	409a      	lsls	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	f010803f 	.word	0xf010803f

080040b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040c2:	f7ff fd23 	bl	8003b0c <HAL_GetTick>
 80040c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d008      	beq.n	80040e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2280      	movs	r2, #128	@ 0x80
 80040d8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e052      	b.n	800418c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0216 	bic.w	r2, r2, #22
 80040f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004104:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d103      	bne.n	8004116 <HAL_DMA_Abort+0x62>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004112:	2b00      	cmp	r3, #0
 8004114:	d007      	beq.n	8004126 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0208 	bic.w	r2, r2, #8
 8004124:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004136:	e013      	b.n	8004160 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004138:	f7ff fce8 	bl	8003b0c <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b05      	cmp	r3, #5
 8004144:	d90c      	bls.n	8004160 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2203      	movs	r2, #3
 8004150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e015      	b.n	800418c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e4      	bne.n	8004138 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004172:	223f      	movs	r2, #63	@ 0x3f
 8004174:	409a      	lsls	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d004      	beq.n	80041b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2280      	movs	r2, #128	@ 0x80
 80041ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e00c      	b.n	80041cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2205      	movs	r2, #5
 80041b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041e4:	4b8e      	ldr	r3, [pc, #568]	@ (8004420 <HAL_DMA_IRQHandler+0x248>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a8e      	ldr	r2, [pc, #568]	@ (8004424 <HAL_DMA_IRQHandler+0x24c>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	0a9b      	lsrs	r3, r3, #10
 80041f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004202:	2208      	movs	r2, #8
 8004204:	409a      	lsls	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01a      	beq.n	8004244 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d013      	beq.n	8004244 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0204 	bic.w	r2, r2, #4
 800422a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004230:	2208      	movs	r2, #8
 8004232:	409a      	lsls	r2, r3
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423c:	f043 0201 	orr.w	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004248:	2201      	movs	r2, #1
 800424a:	409a      	lsls	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d012      	beq.n	800427a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00b      	beq.n	800427a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004266:	2201      	movs	r2, #1
 8004268:	409a      	lsls	r2, r3
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004272:	f043 0202 	orr.w	r2, r3, #2
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800427e:	2204      	movs	r2, #4
 8004280:	409a      	lsls	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4013      	ands	r3, r2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d012      	beq.n	80042b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00b      	beq.n	80042b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800429c:	2204      	movs	r2, #4
 800429e:	409a      	lsls	r2, r3
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a8:	f043 0204 	orr.w	r2, r3, #4
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b4:	2210      	movs	r2, #16
 80042b6:	409a      	lsls	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d043      	beq.n	8004348 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d03c      	beq.n	8004348 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d2:	2210      	movs	r2, #16
 80042d4:	409a      	lsls	r2, r3
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d018      	beq.n	800431a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d108      	bne.n	8004308 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d024      	beq.n	8004348 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4798      	blx	r3
 8004306:	e01f      	b.n	8004348 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01b      	beq.n	8004348 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
 8004318:	e016      	b.n	8004348 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0208 	bic.w	r2, r2, #8
 8004336:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434c:	2220      	movs	r2, #32
 800434e:	409a      	lsls	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 808f 	beq.w	8004478 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8087 	beq.w	8004478 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436e:	2220      	movs	r2, #32
 8004370:	409a      	lsls	r2, r3
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b05      	cmp	r3, #5
 8004380:	d136      	bne.n	80043f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0216 	bic.w	r2, r2, #22
 8004390:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695a      	ldr	r2, [r3, #20]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d103      	bne.n	80043b2 <HAL_DMA_IRQHandler+0x1da>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0208 	bic.w	r2, r2, #8
 80043c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c6:	223f      	movs	r2, #63	@ 0x3f
 80043c8:	409a      	lsls	r2, r3
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d07e      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	4798      	blx	r3
        }
        return;
 80043ee:	e079      	b.n	80044e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d01d      	beq.n	800443a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10d      	bne.n	8004428 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004410:	2b00      	cmp	r3, #0
 8004412:	d031      	beq.n	8004478 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
 800441c:	e02c      	b.n	8004478 <HAL_DMA_IRQHandler+0x2a0>
 800441e:	bf00      	nop
 8004420:	20000000 	.word	0x20000000
 8004424:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d023      	beq.n	8004478 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	4798      	blx	r3
 8004438:	e01e      	b.n	8004478 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10f      	bne.n	8004468 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0210 	bic.w	r2, r2, #16
 8004456:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800447c:	2b00      	cmp	r3, #0
 800447e:	d032      	beq.n	80044e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d022      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2205      	movs	r2, #5
 8004490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0201 	bic.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	3301      	adds	r3, #1
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d307      	bcc.n	80044c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f2      	bne.n	80044a4 <HAL_DMA_IRQHandler+0x2cc>
 80044be:	e000      	b.n	80044c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	4798      	blx	r3
 80044e2:	e000      	b.n	80044e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80044e4:	bf00      	nop
    }
  }
}
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044fa:	b2db      	uxtb	r3, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	3b10      	subs	r3, #16
 8004518:	4a14      	ldr	r2, [pc, #80]	@ (800456c <DMA_CalcBaseAndBitshift+0x64>)
 800451a:	fba2 2303 	umull	r2, r3, r2, r3
 800451e:	091b      	lsrs	r3, r3, #4
 8004520:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004522:	4a13      	ldr	r2, [pc, #76]	@ (8004570 <DMA_CalcBaseAndBitshift+0x68>)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4413      	add	r3, r2
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b03      	cmp	r3, #3
 8004534:	d909      	bls.n	800454a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800453e:	f023 0303 	bic.w	r3, r3, #3
 8004542:	1d1a      	adds	r2, r3, #4
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	659a      	str	r2, [r3, #88]	@ 0x58
 8004548:	e007      	b.n	800455a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004552:	f023 0303 	bic.w	r3, r3, #3
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	aaaaaaab 	.word	0xaaaaaaab
 8004570:	080112d8 	.word	0x080112d8

08004574 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004584:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d11f      	bne.n	80045ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b03      	cmp	r3, #3
 8004592:	d856      	bhi.n	8004642 <DMA_CheckFifoParam+0xce>
 8004594:	a201      	add	r2, pc, #4	@ (adr r2, 800459c <DMA_CheckFifoParam+0x28>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045ad 	.word	0x080045ad
 80045a0:	080045bf 	.word	0x080045bf
 80045a4:	080045ad 	.word	0x080045ad
 80045a8:	08004643 	.word	0x08004643
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d046      	beq.n	8004646 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045bc:	e043      	b.n	8004646 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80045c6:	d140      	bne.n	800464a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045cc:	e03d      	b.n	800464a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045d6:	d121      	bne.n	800461c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b03      	cmp	r3, #3
 80045dc:	d837      	bhi.n	800464e <DMA_CheckFifoParam+0xda>
 80045de:	a201      	add	r2, pc, #4	@ (adr r2, 80045e4 <DMA_CheckFifoParam+0x70>)
 80045e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e4:	080045f5 	.word	0x080045f5
 80045e8:	080045fb 	.word	0x080045fb
 80045ec:	080045f5 	.word	0x080045f5
 80045f0:	0800460d 	.word	0x0800460d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
      break;
 80045f8:	e030      	b.n	800465c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d025      	beq.n	8004652 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800460a:	e022      	b.n	8004652 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004610:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004614:	d11f      	bne.n	8004656 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800461a:	e01c      	b.n	8004656 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d903      	bls.n	800462a <DMA_CheckFifoParam+0xb6>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2b03      	cmp	r3, #3
 8004626:	d003      	beq.n	8004630 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004628:	e018      	b.n	800465c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
      break;
 800462e:	e015      	b.n	800465c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004634:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00e      	beq.n	800465a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
      break;
 8004640:	e00b      	b.n	800465a <DMA_CheckFifoParam+0xe6>
      break;
 8004642:	bf00      	nop
 8004644:	e00a      	b.n	800465c <DMA_CheckFifoParam+0xe8>
      break;
 8004646:	bf00      	nop
 8004648:	e008      	b.n	800465c <DMA_CheckFifoParam+0xe8>
      break;
 800464a:	bf00      	nop
 800464c:	e006      	b.n	800465c <DMA_CheckFifoParam+0xe8>
      break;
 800464e:	bf00      	nop
 8004650:	e004      	b.n	800465c <DMA_CheckFifoParam+0xe8>
      break;
 8004652:	bf00      	nop
 8004654:	e002      	b.n	800465c <DMA_CheckFifoParam+0xe8>
      break;   
 8004656:	bf00      	nop
 8004658:	e000      	b.n	800465c <DMA_CheckFifoParam+0xe8>
      break;
 800465a:	bf00      	nop
    }
  } 
  
  return status; 
 800465c:	7bfb      	ldrb	r3, [r7, #15]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop

0800466c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800466c:	b480      	push	{r7}
 800466e:	b089      	sub	sp, #36	@ 0x24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800467a:	2300      	movs	r3, #0
 800467c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800467e:	2300      	movs	r3, #0
 8004680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004682:	2300      	movs	r3, #0
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	e159      	b.n	800493c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004688:	2201      	movs	r2, #1
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4013      	ands	r3, r2
 800469a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	f040 8148 	bne.w	8004936 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d005      	beq.n	80046be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d130      	bne.n	8004720 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	2203      	movs	r2, #3
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4013      	ands	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	69ba      	ldr	r2, [r7, #24]
 80046ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046f4:	2201      	movs	r2, #1
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4013      	ands	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	091b      	lsrs	r3, r3, #4
 800470a:	f003 0201 	and.w	r2, r3, #1
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4313      	orrs	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	2b03      	cmp	r3, #3
 800472a:	d017      	beq.n	800475c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	2203      	movs	r2, #3
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4013      	ands	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	689a      	ldr	r2, [r3, #8]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4313      	orrs	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d123      	bne.n	80047b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	08da      	lsrs	r2, r3, #3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	3208      	adds	r2, #8
 8004770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f003 0307 	and.w	r3, r3, #7
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	220f      	movs	r2, #15
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	43db      	mvns	r3, r3
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4013      	ands	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4313      	orrs	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	08da      	lsrs	r2, r3, #3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	3208      	adds	r2, #8
 80047aa:	69b9      	ldr	r1, [r7, #24]
 80047ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	2203      	movs	r2, #3
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4013      	ands	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f003 0203 	and.w	r2, r3, #3
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 80a2 	beq.w	8004936 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	4b57      	ldr	r3, [pc, #348]	@ (8004954 <HAL_GPIO_Init+0x2e8>)
 80047f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fa:	4a56      	ldr	r2, [pc, #344]	@ (8004954 <HAL_GPIO_Init+0x2e8>)
 80047fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004800:	6453      	str	r3, [r2, #68]	@ 0x44
 8004802:	4b54      	ldr	r3, [pc, #336]	@ (8004954 <HAL_GPIO_Init+0x2e8>)
 8004804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004806:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800480e:	4a52      	ldr	r2, [pc, #328]	@ (8004958 <HAL_GPIO_Init+0x2ec>)
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	089b      	lsrs	r3, r3, #2
 8004814:	3302      	adds	r3, #2
 8004816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800481a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	220f      	movs	r2, #15
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43db      	mvns	r3, r3
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	4013      	ands	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a49      	ldr	r2, [pc, #292]	@ (800495c <HAL_GPIO_Init+0x2f0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d019      	beq.n	800486e <HAL_GPIO_Init+0x202>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a48      	ldr	r2, [pc, #288]	@ (8004960 <HAL_GPIO_Init+0x2f4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <HAL_GPIO_Init+0x1fe>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a47      	ldr	r2, [pc, #284]	@ (8004964 <HAL_GPIO_Init+0x2f8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00d      	beq.n	8004866 <HAL_GPIO_Init+0x1fa>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a46      	ldr	r2, [pc, #280]	@ (8004968 <HAL_GPIO_Init+0x2fc>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d007      	beq.n	8004862 <HAL_GPIO_Init+0x1f6>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a45      	ldr	r2, [pc, #276]	@ (800496c <HAL_GPIO_Init+0x300>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d101      	bne.n	800485e <HAL_GPIO_Init+0x1f2>
 800485a:	2304      	movs	r3, #4
 800485c:	e008      	b.n	8004870 <HAL_GPIO_Init+0x204>
 800485e:	2307      	movs	r3, #7
 8004860:	e006      	b.n	8004870 <HAL_GPIO_Init+0x204>
 8004862:	2303      	movs	r3, #3
 8004864:	e004      	b.n	8004870 <HAL_GPIO_Init+0x204>
 8004866:	2302      	movs	r3, #2
 8004868:	e002      	b.n	8004870 <HAL_GPIO_Init+0x204>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <HAL_GPIO_Init+0x204>
 800486e:	2300      	movs	r3, #0
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	f002 0203 	and.w	r2, r2, #3
 8004876:	0092      	lsls	r2, r2, #2
 8004878:	4093      	lsls	r3, r2
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4313      	orrs	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004880:	4935      	ldr	r1, [pc, #212]	@ (8004958 <HAL_GPIO_Init+0x2ec>)
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	089b      	lsrs	r3, r3, #2
 8004886:	3302      	adds	r3, #2
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800488e:	4b38      	ldr	r3, [pc, #224]	@ (8004970 <HAL_GPIO_Init+0x304>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004970 <HAL_GPIO_Init+0x304>)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004970 <HAL_GPIO_Init+0x304>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	43db      	mvns	r3, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048dc:	4a24      	ldr	r2, [pc, #144]	@ (8004970 <HAL_GPIO_Init+0x304>)
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048e2:	4b23      	ldr	r3, [pc, #140]	@ (8004970 <HAL_GPIO_Init+0x304>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	43db      	mvns	r3, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4013      	ands	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004906:	4a1a      	ldr	r2, [pc, #104]	@ (8004970 <HAL_GPIO_Init+0x304>)
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800490c:	4b18      	ldr	r3, [pc, #96]	@ (8004970 <HAL_GPIO_Init+0x304>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004930:	4a0f      	ldr	r2, [pc, #60]	@ (8004970 <HAL_GPIO_Init+0x304>)
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	3301      	adds	r3, #1
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	2b0f      	cmp	r3, #15
 8004940:	f67f aea2 	bls.w	8004688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	3724      	adds	r7, #36	@ 0x24
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800
 8004958:	40013800 	.word	0x40013800
 800495c:	40020000 	.word	0x40020000
 8004960:	40020400 	.word	0x40020400
 8004964:	40020800 	.word	0x40020800
 8004968:	40020c00 	.word	0x40020c00
 800496c:	40021000 	.word	0x40021000
 8004970:	40013c00 	.word	0x40013c00

08004974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	807b      	strh	r3, [r7, #2]
 8004980:	4613      	mov	r3, r2
 8004982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004984:	787b      	ldrb	r3, [r7, #1]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800498a:	887a      	ldrh	r2, [r7, #2]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004990:	e003      	b.n	800499a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004992:	887b      	ldrh	r3, [r7, #2]
 8004994:	041a      	lsls	r2, r3, #16
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	619a      	str	r2, [r3, #24]
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
	...

080049a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80049b2:	4b08      	ldr	r3, [pc, #32]	@ (80049d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d006      	beq.n	80049cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049be:	4a05      	ldr	r2, [pc, #20]	@ (80049d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fc ff92 	bl	80018f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40013c00 	.word	0x40013c00

080049d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e12b      	b.n	8004c42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fe fa44 	bl	8002e8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2224      	movs	r2, #36	@ 0x24
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0201 	bic.w	r2, r2, #1
 8004a1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a3c:	f003 f884 	bl	8007b48 <HAL_RCC_GetPCLK1Freq>
 8004a40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4a81      	ldr	r2, [pc, #516]	@ (8004c4c <HAL_I2C_Init+0x274>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d807      	bhi.n	8004a5c <HAL_I2C_Init+0x84>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4a80      	ldr	r2, [pc, #512]	@ (8004c50 <HAL_I2C_Init+0x278>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	bf94      	ite	ls
 8004a54:	2301      	movls	r3, #1
 8004a56:	2300      	movhi	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	e006      	b.n	8004a6a <HAL_I2C_Init+0x92>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4a7d      	ldr	r2, [pc, #500]	@ (8004c54 <HAL_I2C_Init+0x27c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	bf94      	ite	ls
 8004a64:	2301      	movls	r3, #1
 8004a66:	2300      	movhi	r3, #0
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e0e7      	b.n	8004c42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4a78      	ldr	r2, [pc, #480]	@ (8004c58 <HAL_I2C_Init+0x280>)
 8004a76:	fba2 2303 	umull	r2, r3, r2, r3
 8004a7a:	0c9b      	lsrs	r3, r3, #18
 8004a7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4a6a      	ldr	r2, [pc, #424]	@ (8004c4c <HAL_I2C_Init+0x274>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d802      	bhi.n	8004aac <HAL_I2C_Init+0xd4>
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	e009      	b.n	8004ac0 <HAL_I2C_Init+0xe8>
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	4a69      	ldr	r2, [pc, #420]	@ (8004c5c <HAL_I2C_Init+0x284>)
 8004ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8004abc:	099b      	lsrs	r3, r3, #6
 8004abe:	3301      	adds	r3, #1
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004ad2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	495c      	ldr	r1, [pc, #368]	@ (8004c4c <HAL_I2C_Init+0x274>)
 8004adc:	428b      	cmp	r3, r1
 8004ade:	d819      	bhi.n	8004b14 <HAL_I2C_Init+0x13c>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	1e59      	subs	r1, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aee:	1c59      	adds	r1, r3, #1
 8004af0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004af4:	400b      	ands	r3, r1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <HAL_I2C_Init+0x138>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	1e59      	subs	r1, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b08:	3301      	adds	r3, #1
 8004b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b0e:	e051      	b.n	8004bb4 <HAL_I2C_Init+0x1dc>
 8004b10:	2304      	movs	r3, #4
 8004b12:	e04f      	b.n	8004bb4 <HAL_I2C_Init+0x1dc>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d111      	bne.n	8004b40 <HAL_I2C_Init+0x168>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	1e58      	subs	r0, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	440b      	add	r3, r1
 8004b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b2e:	3301      	adds	r3, #1
 8004b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bf0c      	ite	eq
 8004b38:	2301      	moveq	r3, #1
 8004b3a:	2300      	movne	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	e012      	b.n	8004b66 <HAL_I2C_Init+0x18e>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	1e58      	subs	r0, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6859      	ldr	r1, [r3, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	0099      	lsls	r1, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b56:	3301      	adds	r3, #1
 8004b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf0c      	ite	eq
 8004b60:	2301      	moveq	r3, #1
 8004b62:	2300      	movne	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Init+0x196>
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e022      	b.n	8004bb4 <HAL_I2C_Init+0x1dc>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10e      	bne.n	8004b94 <HAL_I2C_Init+0x1bc>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1e58      	subs	r0, r3, #1
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6859      	ldr	r1, [r3, #4]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	005b      	lsls	r3, r3, #1
 8004b82:	440b      	add	r3, r1
 8004b84:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b88:	3301      	adds	r3, #1
 8004b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b92:	e00f      	b.n	8004bb4 <HAL_I2C_Init+0x1dc>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	1e58      	subs	r0, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6859      	ldr	r1, [r3, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	0099      	lsls	r1, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004baa:	3301      	adds	r3, #1
 8004bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	6809      	ldr	r1, [r1, #0]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	69da      	ldr	r2, [r3, #28]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004be2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6911      	ldr	r1, [r2, #16]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	68d2      	ldr	r2, [r2, #12]
 8004bee:	4311      	orrs	r1, r2
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	430b      	orrs	r3, r1
 8004bf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695a      	ldr	r2, [r3, #20]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	000186a0 	.word	0x000186a0
 8004c50:	001e847f 	.word	0x001e847f
 8004c54:	003d08ff 	.word	0x003d08ff
 8004c58:	431bde83 	.word	0x431bde83
 8004c5c:	10624dd3 	.word	0x10624dd3

08004c60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af02      	add	r7, sp, #8
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	607a      	str	r2, [r7, #4]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	817b      	strh	r3, [r7, #10]
 8004c70:	4613      	mov	r3, r2
 8004c72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c74:	f7fe ff4a 	bl	8003b0c <HAL_GetTick>
 8004c78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	f040 80e0 	bne.w	8004e48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	2319      	movs	r3, #25
 8004c8e:	2201      	movs	r2, #1
 8004c90:	4970      	ldr	r1, [pc, #448]	@ (8004e54 <HAL_I2C_Master_Transmit+0x1f4>)
 8004c92:	68f8      	ldr	r0, [r7, #12]
 8004c94:	f002 f8be 	bl	8006e14 <I2C_WaitOnFlagUntilTimeout>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e0d3      	b.n	8004e4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d101      	bne.n	8004cb0 <HAL_I2C_Master_Transmit+0x50>
 8004cac:	2302      	movs	r3, #2
 8004cae:	e0cc      	b.n	8004e4a <HAL_I2C_Master_Transmit+0x1ea>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d007      	beq.n	8004cd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f042 0201 	orr.w	r2, r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ce4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2221      	movs	r2, #33	@ 0x21
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2210      	movs	r2, #16
 8004cf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	893a      	ldrh	r2, [r7, #8]
 8004d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4a50      	ldr	r2, [pc, #320]	@ (8004e58 <HAL_I2C_Master_Transmit+0x1f8>)
 8004d16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d18:	8979      	ldrh	r1, [r7, #10]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	6a3a      	ldr	r2, [r7, #32]
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f001 fe80 	bl	8006a24 <I2C_MasterRequestWrite>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e08d      	b.n	8004e4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699b      	ldr	r3, [r3, #24]
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d44:	e066      	b.n	8004e14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	6a39      	ldr	r1, [r7, #32]
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f002 f938 	bl	8006fc0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00d      	beq.n	8004d72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d107      	bne.n	8004d6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e06b      	b.n	8004e4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	781a      	ldrb	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d11b      	bne.n	8004de8 <HAL_I2C_Master_Transmit+0x188>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d017      	beq.n	8004de8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	781a      	ldrb	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	6a39      	ldr	r1, [r7, #32]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f002 f928 	bl	8007042 <I2C_WaitOnBTFFlagUntilTimeout>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00d      	beq.n	8004e14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d107      	bne.n	8004e10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e01a      	b.n	8004e4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d194      	bne.n	8004d46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	e000      	b.n	8004e4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e48:	2302      	movs	r3, #2
  }
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	00100002 	.word	0x00100002
 8004e58:	ffff0000 	.word	0xffff0000

08004e5c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08c      	sub	sp, #48	@ 0x30
 8004e60:	af02      	add	r7, sp, #8
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	607a      	str	r2, [r7, #4]
 8004e66:	461a      	mov	r2, r3
 8004e68:	460b      	mov	r3, r1
 8004e6a:	817b      	strh	r3, [r7, #10]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e70:	f7fe fe4c 	bl	8003b0c <HAL_GetTick>
 8004e74:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	f040 820b 	bne.w	800529a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	2319      	movs	r3, #25
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	497c      	ldr	r1, [pc, #496]	@ (8005080 <HAL_I2C_Master_Receive+0x224>)
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f001 ffc0 	bl	8006e14 <I2C_WaitOnFlagUntilTimeout>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e1fe      	b.n	800529c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_I2C_Master_Receive+0x50>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e1f7      	b.n	800529c <HAL_I2C_Master_Receive+0x440>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d007      	beq.n	8004ed2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0201 	orr.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ee0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2222      	movs	r2, #34	@ 0x22
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2210      	movs	r2, #16
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	893a      	ldrh	r2, [r7, #8]
 8004f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4a5c      	ldr	r2, [pc, #368]	@ (8005084 <HAL_I2C_Master_Receive+0x228>)
 8004f12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f14:	8979      	ldrh	r1, [r7, #10]
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f001 fe04 	bl	8006b28 <I2C_MasterRequestRead>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e1b8      	b.n	800529c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d113      	bne.n	8004f5a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f32:	2300      	movs	r3, #0
 8004f34:	623b      	str	r3, [r7, #32]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	623b      	str	r3, [r7, #32]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	623b      	str	r3, [r7, #32]
 8004f46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	e18c      	b.n	8005274 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d11b      	bne.n	8004f9a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f72:	2300      	movs	r3, #0
 8004f74:	61fb      	str	r3, [r7, #28]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	61fb      	str	r3, [r7, #28]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	61fb      	str	r3, [r7, #28]
 8004f86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	e16c      	b.n	8005274 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d11b      	bne.n	8004fda <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fc0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61bb      	str	r3, [r7, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	61bb      	str	r3, [r7, #24]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	61bb      	str	r3, [r7, #24]
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	e14c      	b.n	8005274 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fe8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	617b      	str	r3, [r7, #20]
 8004ffe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005000:	e138      	b.n	8005274 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005006:	2b03      	cmp	r3, #3
 8005008:	f200 80f1 	bhi.w	80051ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005010:	2b01      	cmp	r3, #1
 8005012:	d123      	bne.n	800505c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005016:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f002 f885 	bl	8007128 <I2C_WaitOnRXNEFlagUntilTimeout>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d001      	beq.n	8005028 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e139      	b.n	800529c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005050:	b29b      	uxth	r3, r3
 8005052:	3b01      	subs	r3, #1
 8005054:	b29a      	uxth	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800505a:	e10b      	b.n	8005274 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005060:	2b02      	cmp	r3, #2
 8005062:	d14e      	bne.n	8005102 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506a:	2200      	movs	r2, #0
 800506c:	4906      	ldr	r1, [pc, #24]	@ (8005088 <HAL_I2C_Master_Receive+0x22c>)
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f001 fed0 	bl	8006e14 <I2C_WaitOnFlagUntilTimeout>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d008      	beq.n	800508c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e10e      	b.n	800529c <HAL_I2C_Master_Receive+0x440>
 800507e:	bf00      	nop
 8005080:	00100002 	.word	0x00100002
 8005084:	ffff0000 	.word	0xffff0000
 8005088:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800509a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005100:	e0b8      	b.n	8005274 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005108:	2200      	movs	r2, #0
 800510a:	4966      	ldr	r1, [pc, #408]	@ (80052a4 <HAL_I2C_Master_Receive+0x448>)
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f001 fe81 	bl	8006e14 <I2C_WaitOnFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e0bf      	b.n	800529c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800512a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005164:	2200      	movs	r2, #0
 8005166:	494f      	ldr	r1, [pc, #316]	@ (80052a4 <HAL_I2C_Master_Receive+0x448>)
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f001 fe53 	bl	8006e14 <I2C_WaitOnFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e091      	b.n	800529c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691a      	ldr	r2, [r3, #16]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005192:	b2d2      	uxtb	r2, r2
 8005194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691a      	ldr	r2, [r3, #16]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80051ec:	e042      	b.n	8005274 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f001 ff98 	bl	8007128 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e04c      	b.n	800529c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b04      	cmp	r3, #4
 8005240:	d118      	bne.n	8005274 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800525e:	3b01      	subs	r3, #1
 8005260:	b29a      	uxth	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005278:	2b00      	cmp	r3, #0
 800527a:	f47f aec2 	bne.w	8005002 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	e000      	b.n	800529c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800529a:	2302      	movs	r3, #2
  }
}
 800529c:	4618      	mov	r0, r3
 800529e:	3728      	adds	r7, #40	@ 0x28
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	00010004 	.word	0x00010004

080052a8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052c8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	2b10      	cmp	r3, #16
 80052d6:	d003      	beq.n	80052e0 <HAL_I2C_EV_IRQHandler+0x38>
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	2b40      	cmp	r3, #64	@ 0x40
 80052dc:	f040 80b1 	bne.w	8005442 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10d      	bne.n	8005316 <HAL_I2C_EV_IRQHandler+0x6e>
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005300:	d003      	beq.n	800530a <HAL_I2C_EV_IRQHandler+0x62>
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005308:	d101      	bne.n	800530e <HAL_I2C_EV_IRQHandler+0x66>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <HAL_I2C_EV_IRQHandler+0x68>
 800530e:	2300      	movs	r3, #0
 8005310:	2b01      	cmp	r3, #1
 8005312:	f000 8114 	beq.w	800553e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00b      	beq.n	8005338 <HAL_I2C_EV_IRQHandler+0x90>
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005326:	2b00      	cmp	r3, #0
 8005328:	d006      	beq.n	8005338 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f001 ff81 	bl	8007232 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fd5e 	bl	8005df2 <I2C_Master_SB>
 8005336:	e083      	b.n	8005440 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d008      	beq.n	8005354 <HAL_I2C_EV_IRQHandler+0xac>
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fdd6 	bl	8005efe <I2C_Master_ADD10>
 8005352:	e075      	b.n	8005440 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d008      	beq.n	8005370 <HAL_I2C_EV_IRQHandler+0xc8>
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 fdf2 	bl	8005f52 <I2C_Master_ADDR>
 800536e:	e067      	b.n	8005440 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f003 0304 	and.w	r3, r3, #4
 8005376:	2b00      	cmp	r3, #0
 8005378:	d036      	beq.n	80053e8 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005384:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005388:	f000 80db 	beq.w	8005542 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00d      	beq.n	80053b2 <HAL_I2C_EV_IRQHandler+0x10a>
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800539c:	2b00      	cmp	r3, #0
 800539e:	d008      	beq.n	80053b2 <HAL_I2C_EV_IRQHandler+0x10a>
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d103      	bne.n	80053b2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f9d6 	bl	800575c <I2C_MasterTransmit_TXE>
 80053b0:	e046      	b.n	8005440 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 80c2 	beq.w	8005542 <HAL_I2C_EV_IRQHandler+0x29a>
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80bc 	beq.w	8005542 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80053ca:	7bbb      	ldrb	r3, [r7, #14]
 80053cc:	2b21      	cmp	r3, #33	@ 0x21
 80053ce:	d103      	bne.n	80053d8 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fa5f 	bl	8005894 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053d6:	e0b4      	b.n	8005542 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
 80053da:	2b40      	cmp	r3, #64	@ 0x40
 80053dc:	f040 80b1 	bne.w	8005542 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 facd 	bl	8005980 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053e6:	e0ac      	b.n	8005542 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053f6:	f000 80a4 	beq.w	8005542 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00d      	beq.n	8005420 <HAL_I2C_EV_IRQHandler+0x178>
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800540a:	2b00      	cmp	r3, #0
 800540c:	d008      	beq.n	8005420 <HAL_I2C_EV_IRQHandler+0x178>
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d103      	bne.n	8005420 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fb45 	bl	8005aa8 <I2C_MasterReceive_RXNE>
 800541e:	e00f      	b.n	8005440 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 808b 	beq.w	8005542 <HAL_I2C_EV_IRQHandler+0x29a>
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 8085 	beq.w	8005542 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 fbf0 	bl	8005c1e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800543e:	e080      	b.n	8005542 <HAL_I2C_EV_IRQHandler+0x29a>
 8005440:	e07f      	b.n	8005542 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	d004      	beq.n	8005454 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	61fb      	str	r3, [r7, #28]
 8005452:	e007      	b.n	8005464 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d011      	beq.n	8005492 <HAL_I2C_EV_IRQHandler+0x1ea>
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00c      	beq.n	8005492 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005488:	69b9      	ldr	r1, [r7, #24]
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 ffb0 	bl	80063f0 <I2C_Slave_ADDR>
 8005490:	e05a      	b.n	8005548 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <HAL_I2C_EV_IRQHandler+0x206>
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 ffea 	bl	8006480 <I2C_Slave_STOPF>
 80054ac:	e04c      	b.n	8005548 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054ae:	7bbb      	ldrb	r3, [r7, #14]
 80054b0:	2b21      	cmp	r3, #33	@ 0x21
 80054b2:	d002      	beq.n	80054ba <HAL_I2C_EV_IRQHandler+0x212>
 80054b4:	7bbb      	ldrb	r3, [r7, #14]
 80054b6:	2b29      	cmp	r3, #41	@ 0x29
 80054b8:	d120      	bne.n	80054fc <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00d      	beq.n	80054e0 <HAL_I2C_EV_IRQHandler+0x238>
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d008      	beq.n	80054e0 <HAL_I2C_EV_IRQHandler+0x238>
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d103      	bne.n	80054e0 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fecb 	bl	8006274 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054de:	e032      	b.n	8005546 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d02d      	beq.n	8005546 <HAL_I2C_EV_IRQHandler+0x29e>
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d028      	beq.n	8005546 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fefa 	bl	80062ee <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054fa:	e024      	b.n	8005546 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00d      	beq.n	8005522 <HAL_I2C_EV_IRQHandler+0x27a>
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800550c:	2b00      	cmp	r3, #0
 800550e:	d008      	beq.n	8005522 <HAL_I2C_EV_IRQHandler+0x27a>
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	d103      	bne.n	8005522 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 ff08 	bl	8006330 <I2C_SlaveReceive_RXNE>
 8005520:	e012      	b.n	8005548 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00d      	beq.n	8005548 <HAL_I2C_EV_IRQHandler+0x2a0>
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005532:	2b00      	cmp	r3, #0
 8005534:	d008      	beq.n	8005548 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 ff38 	bl	80063ac <I2C_SlaveReceive_BTF>
 800553c:	e004      	b.n	8005548 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800553e:	bf00      	nop
 8005540:	e002      	b.n	8005548 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005542:	bf00      	nop
 8005544:	e000      	b.n	8005548 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005546:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005548:	3720      	adds	r7, #32
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b08a      	sub	sp, #40	@ 0x28
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005566:	2300      	movs	r3, #0
 8005568:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005570:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00d      	beq.n	8005598 <HAL_I2C_ER_IRQHandler+0x4a>
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005582:	2b00      	cmp	r3, #0
 8005584:	d008      	beq.n	8005598 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005596:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00d      	beq.n	80055be <HAL_I2C_ER_IRQHandler+0x70>
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d008      	beq.n	80055be <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	f043 0302 	orr.w	r3, r3, #2
 80055b2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80055bc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d03e      	beq.n	8005646 <HAL_I2C_ER_IRQHandler+0xf8>
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d039      	beq.n	8005646 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80055d2:	7efb      	ldrb	r3, [r7, #27]
 80055d4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055da:	b29b      	uxth	r3, r3
 80055dc:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055e4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ea:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80055ec:	7ebb      	ldrb	r3, [r7, #26]
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d112      	bne.n	8005618 <HAL_I2C_ER_IRQHandler+0xca>
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10f      	bne.n	8005618 <HAL_I2C_ER_IRQHandler+0xca>
 80055f8:	7cfb      	ldrb	r3, [r7, #19]
 80055fa:	2b21      	cmp	r3, #33	@ 0x21
 80055fc:	d008      	beq.n	8005610 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80055fe:	7cfb      	ldrb	r3, [r7, #19]
 8005600:	2b29      	cmp	r3, #41	@ 0x29
 8005602:	d005      	beq.n	8005610 <HAL_I2C_ER_IRQHandler+0xc2>
 8005604:	7cfb      	ldrb	r3, [r7, #19]
 8005606:	2b28      	cmp	r3, #40	@ 0x28
 8005608:	d106      	bne.n	8005618 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b21      	cmp	r3, #33	@ 0x21
 800560e:	d103      	bne.n	8005618 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f001 f865 	bl	80066e0 <I2C_Slave_AF>
 8005616:	e016      	b.n	8005646 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005620:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005624:	f043 0304 	orr.w	r3, r3, #4
 8005628:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800562a:	7efb      	ldrb	r3, [r7, #27]
 800562c:	2b10      	cmp	r3, #16
 800562e:	d002      	beq.n	8005636 <HAL_I2C_ER_IRQHandler+0xe8>
 8005630:	7efb      	ldrb	r3, [r7, #27]
 8005632:	2b40      	cmp	r3, #64	@ 0x40
 8005634:	d107      	bne.n	8005646 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005644:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00d      	beq.n	800566c <HAL_I2C_ER_IRQHandler+0x11e>
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	f043 0308 	orr.w	r3, r3, #8
 8005660:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800566a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800566c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566e:	2b00      	cmp	r3, #0
 8005670:	d008      	beq.n	8005684 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f001 f89e 	bl	80067c0 <I2C_ITError>
  }
}
 8005684:	bf00      	nop
 8005686:	3728      	adds	r7, #40	@ 0x28
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	460b      	mov	r3, r1
 80056e6:	70fb      	strb	r3, [r7, #3]
 80056e8:	4613      	mov	r3, r2
 80056ea:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800576a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005772:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005778:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800577e:	2b00      	cmp	r3, #0
 8005780:	d150      	bne.n	8005824 <I2C_MasterTransmit_TXE+0xc8>
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	2b21      	cmp	r3, #33	@ 0x21
 8005786:	d14d      	bne.n	8005824 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b08      	cmp	r3, #8
 800578c:	d01d      	beq.n	80057ca <I2C_MasterTransmit_TXE+0x6e>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b20      	cmp	r3, #32
 8005792:	d01a      	beq.n	80057ca <I2C_MasterTransmit_TXE+0x6e>
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800579a:	d016      	beq.n	80057ca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80057aa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2211      	movs	r2, #17
 80057b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff ff62 	bl	800568c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80057c8:	e060      	b.n	800588c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80057d8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057e8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b40      	cmp	r3, #64	@ 0x40
 8005802:	d107      	bne.n	8005814 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff ff7d 	bl	800570c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005812:	e03b      	b.n	800588c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff ff35 	bl	800568c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005822:	e033      	b.n	800588c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	2b21      	cmp	r3, #33	@ 0x21
 8005828:	d005      	beq.n	8005836 <I2C_MasterTransmit_TXE+0xda>
 800582a:	7bbb      	ldrb	r3, [r7, #14]
 800582c:	2b40      	cmp	r3, #64	@ 0x40
 800582e:	d12d      	bne.n	800588c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	2b22      	cmp	r3, #34	@ 0x22
 8005834:	d12a      	bne.n	800588c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d108      	bne.n	8005852 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800584e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005850:	e01c      	b.n	800588c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b40      	cmp	r3, #64	@ 0x40
 800585c:	d103      	bne.n	8005866 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f88e 	bl	8005980 <I2C_MemoryTransmit_TXE_BTF>
}
 8005864:	e012      	b.n	800588c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586a:	781a      	ldrb	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005880:	b29b      	uxth	r3, r3
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800588a:	e7ff      	b.n	800588c <I2C_MasterTransmit_TXE+0x130>
 800588c:	bf00      	nop
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b21      	cmp	r3, #33	@ 0x21
 80058ac:	d164      	bne.n	8005978 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d012      	beq.n	80058de <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058bc:	781a      	ldrb	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80058dc:	e04c      	b.n	8005978 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	d01d      	beq.n	8005920 <I2C_MasterTransmit_BTF+0x8c>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b20      	cmp	r3, #32
 80058e8:	d01a      	beq.n	8005920 <I2C_MasterTransmit_BTF+0x8c>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058f0:	d016      	beq.n	8005920 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005900:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2211      	movs	r2, #17
 8005906:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff feb7 	bl	800568c <HAL_I2C_MasterTxCpltCallback>
}
 800591e:	e02b      	b.n	8005978 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800592e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800593e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b40      	cmp	r3, #64	@ 0x40
 8005958:	d107      	bne.n	800596a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff fed2 	bl	800570c <HAL_I2C_MemTxCpltCallback>
}
 8005968:	e006      	b.n	8005978 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7ff fe8a 	bl	800568c <HAL_I2C_MasterTxCpltCallback>
}
 8005978:	bf00      	nop
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800598e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005994:	2b00      	cmp	r3, #0
 8005996:	d11d      	bne.n	80059d4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800599c:	2b01      	cmp	r3, #1
 800599e:	d10b      	bne.n	80059b8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b0:	1c9a      	adds	r2, r3, #2
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80059b6:	e073      	b.n	8005aa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059bc:	b29b      	uxth	r3, r3
 80059be:	121b      	asrs	r3, r3, #8
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80059d2:	e065      	b.n	8005aa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d10b      	bne.n	80059f4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80059f2:	e055      	b.n	8005aa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d151      	bne.n	8005aa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	2b22      	cmp	r3, #34	@ 0x22
 8005a00:	d10d      	bne.n	8005a1e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a10:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005a1c:	e040      	b.n	8005aa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d015      	beq.n	8005a54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
 8005a2a:	2b21      	cmp	r3, #33	@ 0x21
 8005a2c:	d112      	bne.n	8005a54 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a32:	781a      	ldrb	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005a52:	e025      	b.n	8005aa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d120      	bne.n	8005aa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
 8005a60:	2b21      	cmp	r3, #33	@ 0x21
 8005a62:	d11d      	bne.n	8005aa0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a72:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a82:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff fe36 	bl	800570c <HAL_I2C_MemTxCpltCallback>
}
 8005aa0:	bf00      	nop
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b22      	cmp	r3, #34	@ 0x22
 8005aba:	f040 80ac 	bne.w	8005c16 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d921      	bls.n	8005b10 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691a      	ldr	r2, [r3, #16]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	f040 808c 	bne.w	8005c16 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b0c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005b0e:	e082      	b.n	8005c16 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d075      	beq.n	8005c04 <I2C_MasterReceive_RXNE+0x15c>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d002      	beq.n	8005b24 <I2C_MasterReceive_RXNE+0x7c>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d16f      	bne.n	8005c04 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f001 facd 	bl	80070c4 <I2C_WaitOnSTOPRequestThroughIT>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d142      	bne.n	8005bb6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b3e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b4e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691a      	ldr	r2, [r3, #16]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b62:	1c5a      	adds	r2, r3, #1
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b40      	cmp	r3, #64	@ 0x40
 8005b88:	d10a      	bne.n	8005ba0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff fdc1 	bl	8005720 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005b9e:	e03a      	b.n	8005c16 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2212      	movs	r2, #18
 8005bac:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff fd76 	bl	80056a0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005bb4:	e02f      	b.n	8005c16 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005bc4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7ff fd99 	bl	8005734 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005c02:	e008      	b.n	8005c16 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c12:	605a      	str	r2, [r3, #4]
}
 8005c14:	e7ff      	b.n	8005c16 <I2C_MasterReceive_RXNE+0x16e>
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d11b      	bne.n	8005c6e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c44:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	691a      	ldr	r2, [r3, #16]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005c6c:	e0bd      	b.n	8005dea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d129      	bne.n	8005ccc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c86:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d00a      	beq.n	8005ca4 <I2C_MasterReceive_BTF+0x86>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d007      	beq.n	8005ca4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ca2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691a      	ldr	r2, [r3, #16]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005cca:	e08e      	b.n	8005dea <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d176      	bne.n	8005dc4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d002      	beq.n	8005ce2 <I2C_MasterReceive_BTF+0xc4>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b10      	cmp	r3, #16
 8005ce0:	d108      	bne.n	8005cf4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	e019      	b.n	8005d28 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d002      	beq.n	8005d00 <I2C_MasterReceive_BTF+0xe2>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d108      	bne.n	8005d12 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	e00a      	b.n	8005d28 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b10      	cmp	r3, #16
 8005d16:	d007      	beq.n	8005d28 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d26:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d3a:	1c5a      	adds	r2, r3, #1
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005d82:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b40      	cmp	r3, #64	@ 0x40
 8005d96:	d10a      	bne.n	8005dae <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7ff fcba 	bl	8005720 <HAL_I2C_MemRxCpltCallback>
}
 8005dac:	e01d      	b.n	8005dea <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2212      	movs	r2, #18
 8005dba:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff fc6f 	bl	80056a0 <HAL_I2C_MasterRxCpltCallback>
}
 8005dc2:	e012      	b.n	8005dea <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691a      	ldr	r2, [r3, #16]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	3b01      	subs	r3, #1
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b40      	cmp	r3, #64	@ 0x40
 8005e04:	d117      	bne.n	8005e36 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d109      	bne.n	8005e22 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e1e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005e20:	e067      	b.n	8005ef2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	611a      	str	r2, [r3, #16]
}
 8005e34:	e05d      	b.n	8005ef2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e3e:	d133      	bne.n	8005ea8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b21      	cmp	r3, #33	@ 0x21
 8005e4a:	d109      	bne.n	8005e60 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e5c:	611a      	str	r2, [r3, #16]
 8005e5e:	e008      	b.n	8005e72 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	f043 0301 	orr.w	r3, r3, #1
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d004      	beq.n	8005e84 <I2C_Master_SB+0x92>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d108      	bne.n	8005e96 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d032      	beq.n	8005ef2 <I2C_Master_SB+0x100>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d02d      	beq.n	8005ef2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ea4:	605a      	str	r2, [r3, #4]
}
 8005ea6:	e024      	b.n	8005ef2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10e      	bne.n	8005ece <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	11db      	asrs	r3, r3, #7
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	f003 0306 	and.w	r3, r3, #6
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	f063 030f 	orn	r3, r3, #15
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	611a      	str	r2, [r3, #16]
}
 8005ecc:	e011      	b.n	8005ef2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d10d      	bne.n	8005ef2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	11db      	asrs	r3, r3, #7
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	f003 0306 	and.w	r3, r3, #6
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	f063 030e 	orn	r3, r3, #14
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	611a      	str	r2, [r3, #16]
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d004      	beq.n	8005f24 <I2C_Master_ADD10+0x26>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d108      	bne.n	8005f36 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00c      	beq.n	8005f46 <I2C_Master_ADD10+0x48>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f44:	605a      	str	r2, [r3, #4]
  }
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b091      	sub	sp, #68	@ 0x44
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f60:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f68:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b22      	cmp	r3, #34	@ 0x22
 8005f7a:	f040 8169 	bne.w	8006250 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10f      	bne.n	8005fa6 <I2C_Master_ADDR+0x54>
 8005f86:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005f8a:	2b40      	cmp	r3, #64	@ 0x40
 8005f8c:	d10b      	bne.n	8005fa6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f8e:	2300      	movs	r3, #0
 8005f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa4:	e160      	b.n	8006268 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d11d      	bne.n	8005fea <I2C_Master_ADDR+0x98>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005fb6:	d118      	bne.n	8005fea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fb8:	2300      	movs	r3, #0
 8005fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fdc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	651a      	str	r2, [r3, #80]	@ 0x50
 8005fe8:	e13e      	b.n	8006268 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d113      	bne.n	800601c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006008:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e115      	b.n	8006248 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b01      	cmp	r3, #1
 8006024:	f040 808a 	bne.w	800613c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800602a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800602e:	d137      	bne.n	80060a0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800603e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800604a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800604e:	d113      	bne.n	8006078 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800605e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006060:	2300      	movs	r3, #0
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	627b      	str	r3, [r7, #36]	@ 0x24
 8006074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006076:	e0e7      	b.n	8006248 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006078:	2300      	movs	r3, #0
 800607a:	623b      	str	r3, [r7, #32]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	623b      	str	r3, [r7, #32]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	623b      	str	r3, [r7, #32]
 800608c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	e0d3      	b.n	8006248 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80060a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d02e      	beq.n	8006104 <I2C_Master_ADDR+0x1b2>
 80060a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a8:	2b20      	cmp	r3, #32
 80060aa:	d02b      	beq.n	8006104 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80060ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ae:	2b12      	cmp	r3, #18
 80060b0:	d102      	bne.n	80060b8 <I2C_Master_ADDR+0x166>
 80060b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d125      	bne.n	8006104 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80060b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d00e      	beq.n	80060dc <I2C_Master_ADDR+0x18a>
 80060be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d00b      	beq.n	80060dc <I2C_Master_ADDR+0x18a>
 80060c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c6:	2b10      	cmp	r3, #16
 80060c8:	d008      	beq.n	80060dc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	e007      	b.n	80060ec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060ea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ec:	2300      	movs	r3, #0
 80060ee:	61fb      	str	r3, [r7, #28]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	e0a1      	b.n	8006248 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006112:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006114:	2300      	movs	r3, #0
 8006116:	61bb      	str	r3, [r7, #24]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	61bb      	str	r3, [r7, #24]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	61bb      	str	r3, [r7, #24]
 8006128:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	e085      	b.n	8006248 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d14d      	bne.n	80061e2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006148:	2b04      	cmp	r3, #4
 800614a:	d016      	beq.n	800617a <I2C_Master_ADDR+0x228>
 800614c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614e:	2b02      	cmp	r3, #2
 8006150:	d013      	beq.n	800617a <I2C_Master_ADDR+0x228>
 8006152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006154:	2b10      	cmp	r3, #16
 8006156:	d010      	beq.n	800617a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006166:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	e007      	b.n	800618a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006188:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006194:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006198:	d117      	bne.n	80061ca <I2C_Master_ADDR+0x278>
 800619a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800619c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061a0:	d00b      	beq.n	80061ba <I2C_Master_ADDR+0x268>
 80061a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d008      	beq.n	80061ba <I2C_Master_ADDR+0x268>
 80061a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061aa:	2b08      	cmp	r3, #8
 80061ac:	d005      	beq.n	80061ba <I2C_Master_ADDR+0x268>
 80061ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b0:	2b10      	cmp	r3, #16
 80061b2:	d002      	beq.n	80061ba <I2C_Master_ADDR+0x268>
 80061b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	d107      	bne.n	80061ca <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80061c8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061ca:	2300      	movs	r3, #0
 80061cc:	617b      	str	r3, [r7, #20]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	617b      	str	r3, [r7, #20]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	e032      	b.n	8006248 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061f0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006200:	d117      	bne.n	8006232 <I2C_Master_ADDR+0x2e0>
 8006202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006204:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006208:	d00b      	beq.n	8006222 <I2C_Master_ADDR+0x2d0>
 800620a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620c:	2b01      	cmp	r3, #1
 800620e:	d008      	beq.n	8006222 <I2C_Master_ADDR+0x2d0>
 8006210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006212:	2b08      	cmp	r3, #8
 8006214:	d005      	beq.n	8006222 <I2C_Master_ADDR+0x2d0>
 8006216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006218:	2b10      	cmp	r3, #16
 800621a:	d002      	beq.n	8006222 <I2C_Master_ADDR+0x2d0>
 800621c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621e:	2b20      	cmp	r3, #32
 8006220:	d107      	bne.n	8006232 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006230:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006232:	2300      	movs	r3, #0
 8006234:	613b      	str	r3, [r7, #16]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	613b      	str	r3, [r7, #16]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	613b      	str	r3, [r7, #16]
 8006246:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800624e:	e00b      	b.n	8006268 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006250:	2300      	movs	r3, #0
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]
}
 8006266:	e7ff      	b.n	8006268 <I2C_Master_ADDR+0x316>
 8006268:	bf00      	nop
 800626a:	3744      	adds	r7, #68	@ 0x44
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006282:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d02b      	beq.n	80062e6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006292:	781a      	ldrb	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d114      	bne.n	80062e6 <I2C_SlaveTransmit_TXE+0x72>
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	2b29      	cmp	r3, #41	@ 0x29
 80062c0:	d111      	bne.n	80062e6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062d0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2221      	movs	r2, #33	@ 0x21
 80062d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2228      	movs	r2, #40	@ 0x28
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff f9e7 	bl	80056b4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80062e6:	bf00      	nop
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d011      	beq.n	8006324 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006304:	781a      	ldrb	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800633e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d02c      	beq.n	80063a4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	691a      	ldr	r2, [r3, #16]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006374:	b29b      	uxth	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d114      	bne.n	80063a4 <I2C_SlaveReceive_RXNE+0x74>
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	2b2a      	cmp	r3, #42	@ 0x2a
 800637e:	d111      	bne.n	80063a4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800638e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2222      	movs	r2, #34	@ 0x22
 8006394:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2228      	movs	r2, #40	@ 0x28
 800639a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff f992 	bl	80056c8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80063a4:	bf00      	nop
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d012      	beq.n	80063e4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063da:	b29b      	uxth	r3, r3
 80063dc:	3b01      	subs	r3, #1
 80063de:	b29a      	uxth	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006404:	b2db      	uxtb	r3, r3
 8006406:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800640a:	2b28      	cmp	r3, #40	@ 0x28
 800640c:	d125      	bne.n	800645a <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800641c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006428:	2301      	movs	r3, #1
 800642a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	81bb      	strh	r3, [r7, #12]
 800643c:	e002      	b.n	8006444 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800644c:	89ba      	ldrh	r2, [r7, #12]
 800644e:	7bfb      	ldrb	r3, [r7, #15]
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7ff f942 	bl	80056dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006458:	e00e      	b.n	8006478 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800645a:	2300      	movs	r3, #0
 800645c:	60bb      	str	r3, [r7, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	60bb      	str	r3, [r7, #8]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	60bb      	str	r3, [r7, #8]
 800646e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006478:	bf00      	nop
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800648e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800649e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80064a0:	2300      	movs	r3, #0
 80064a2:	60bb      	str	r3, [r7, #8]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	60bb      	str	r3, [r7, #8]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f042 0201 	orr.w	r2, r2, #1
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064cc:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064dc:	d172      	bne.n	80065c4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	2b22      	cmp	r3, #34	@ 0x22
 80064e2:	d002      	beq.n	80064ea <I2C_Slave_STOPF+0x6a>
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80064e8:	d135      	bne.n	8006556 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006506:	f043 0204 	orr.w	r2, r3, #4
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800651c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006522:	4618      	mov	r0, r3
 8006524:	f7fd ffe2 	bl	80044ec <HAL_DMA_GetState>
 8006528:	4603      	mov	r3, r0
 800652a:	2b01      	cmp	r3, #1
 800652c:	d049      	beq.n	80065c2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006532:	4a69      	ldr	r2, [pc, #420]	@ (80066d8 <I2C_Slave_STOPF+0x258>)
 8006534:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653a:	4618      	mov	r0, r3
 800653c:	f7fd fe2a 	bl	8004194 <HAL_DMA_Abort_IT>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d03d      	beq.n	80065c2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800654a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006550:	4610      	mov	r0, r2
 8006552:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006554:	e035      	b.n	80065c2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	b29a      	uxth	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d005      	beq.n	800657a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006572:	f043 0204 	orr.w	r2, r3, #4
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006588:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800658e:	4618      	mov	r0, r3
 8006590:	f7fd ffac 	bl	80044ec <HAL_DMA_GetState>
 8006594:	4603      	mov	r3, r0
 8006596:	2b01      	cmp	r3, #1
 8006598:	d014      	beq.n	80065c4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800659e:	4a4e      	ldr	r2, [pc, #312]	@ (80066d8 <I2C_Slave_STOPF+0x258>)
 80065a0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fd fdf4 	bl	8004194 <HAL_DMA_Abort_IT>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d008      	beq.n	80065c4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80065bc:	4610      	mov	r0, r2
 80065be:	4798      	blx	r3
 80065c0:	e000      	b.n	80065c4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80065c2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d03e      	beq.n	800664c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695b      	ldr	r3, [r3, #20]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d112      	bne.n	8006602 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691a      	ldr	r2, [r3, #16]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800660c:	2b40      	cmp	r3, #64	@ 0x40
 800660e:	d112      	bne.n	8006636 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691a      	ldr	r2, [r3, #16]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006622:	1c5a      	adds	r2, r3, #1
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800662c:	b29b      	uxth	r3, r3
 800662e:	3b01      	subs	r3, #1
 8006630:	b29a      	uxth	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800663a:	b29b      	uxth	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	d005      	beq.n	800664c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006644:	f043 0204 	orr.w	r2, r3, #4
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006650:	2b00      	cmp	r3, #0
 8006652:	d003      	beq.n	800665c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f8b3 	bl	80067c0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800665a:	e039      	b.n	80066d0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800665c:	7bfb      	ldrb	r3, [r7, #15]
 800665e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006660:	d109      	bne.n	8006676 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2228      	movs	r2, #40	@ 0x28
 800666c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff f829 	bl	80056c8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b28      	cmp	r3, #40	@ 0x28
 8006680:	d111      	bne.n	80066a6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a15      	ldr	r2, [pc, #84]	@ (80066dc <I2C_Slave_STOPF+0x25c>)
 8006686:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2220      	movs	r2, #32
 8006692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f7ff f82a 	bl	80056f8 <HAL_I2C_ListenCpltCallback>
}
 80066a4:	e014      	b.n	80066d0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066aa:	2b22      	cmp	r3, #34	@ 0x22
 80066ac:	d002      	beq.n	80066b4 <I2C_Slave_STOPF+0x234>
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
 80066b0:	2b22      	cmp	r3, #34	@ 0x22
 80066b2:	d10d      	bne.n	80066d0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2220      	movs	r2, #32
 80066be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fe fffc 	bl	80056c8 <HAL_I2C_SlaveRxCpltCallback>
}
 80066d0:	bf00      	nop
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	08006cc5 	.word	0x08006cc5
 80066dc:	ffff0000 	.word	0xffff0000

080066e0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066ee:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d002      	beq.n	8006702 <I2C_Slave_AF+0x22>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d129      	bne.n	8006756 <I2C_Slave_AF+0x76>
 8006702:	7bfb      	ldrb	r3, [r7, #15]
 8006704:	2b28      	cmp	r3, #40	@ 0x28
 8006706:	d126      	bne.n	8006756 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a2c      	ldr	r2, [pc, #176]	@ (80067bc <I2C_Slave_AF+0xdc>)
 800670c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800671c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006726:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006736:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2220      	movs	r2, #32
 8006742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fe ffd2 	bl	80056f8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006754:	e02e      	b.n	80067b4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006756:	7bfb      	ldrb	r3, [r7, #15]
 8006758:	2b21      	cmp	r3, #33	@ 0x21
 800675a:	d126      	bne.n	80067aa <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a17      	ldr	r2, [pc, #92]	@ (80067bc <I2C_Slave_AF+0xdc>)
 8006760:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2221      	movs	r2, #33	@ 0x21
 8006766:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006786:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006790:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067a0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7fe ff86 	bl	80056b4 <HAL_I2C_SlaveTxCpltCallback>
}
 80067a8:	e004      	b.n	80067b4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80067b2:	615a      	str	r2, [r3, #20]
}
 80067b4:	bf00      	nop
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	ffff0000 	.word	0xffff0000

080067c0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80067d8:	7bbb      	ldrb	r3, [r7, #14]
 80067da:	2b10      	cmp	r3, #16
 80067dc:	d002      	beq.n	80067e4 <I2C_ITError+0x24>
 80067de:	7bbb      	ldrb	r3, [r7, #14]
 80067e0:	2b40      	cmp	r3, #64	@ 0x40
 80067e2:	d10a      	bne.n	80067fa <I2C_ITError+0x3a>
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	2b22      	cmp	r3, #34	@ 0x22
 80067e8:	d107      	bne.n	80067fa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067f8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
 80067fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006800:	2b28      	cmp	r3, #40	@ 0x28
 8006802:	d107      	bne.n	8006814 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2228      	movs	r2, #40	@ 0x28
 800680e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006812:	e015      	b.n	8006840 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800681e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006822:	d00a      	beq.n	800683a <I2C_ITError+0x7a>
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	2b60      	cmp	r3, #96	@ 0x60
 8006828:	d007      	beq.n	800683a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2220      	movs	r2, #32
 800682e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800684a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800684e:	d162      	bne.n	8006916 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800685e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006864:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b01      	cmp	r3, #1
 800686c:	d020      	beq.n	80068b0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006872:	4a6a      	ldr	r2, [pc, #424]	@ (8006a1c <I2C_ITError+0x25c>)
 8006874:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800687a:	4618      	mov	r0, r3
 800687c:	f7fd fc8a 	bl	8004194 <HAL_DMA_Abort_IT>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 8089 	beq.w	800699a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0201 	bic.w	r2, r2, #1
 8006896:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80068aa:	4610      	mov	r0, r2
 80068ac:	4798      	blx	r3
 80068ae:	e074      	b.n	800699a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068b4:	4a59      	ldr	r2, [pc, #356]	@ (8006a1c <I2C_ITError+0x25c>)
 80068b6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068bc:	4618      	mov	r0, r3
 80068be:	f7fd fc69 	bl	8004194 <HAL_DMA_Abort_IT>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d068      	beq.n	800699a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d2:	2b40      	cmp	r3, #64	@ 0x40
 80068d4:	d10b      	bne.n	80068ee <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	691a      	ldr	r2, [r3, #16]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0201 	bic.w	r2, r2, #1
 80068fc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2220      	movs	r2, #32
 8006902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800690a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006910:	4610      	mov	r0, r2
 8006912:	4798      	blx	r3
 8006914:	e041      	b.n	800699a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b60      	cmp	r3, #96	@ 0x60
 8006920:	d125      	bne.n	800696e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800693a:	2b40      	cmp	r3, #64	@ 0x40
 800693c:	d10b      	bne.n	8006956 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	691a      	ldr	r2, [r3, #16]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006948:	b2d2      	uxtb	r2, r2
 800694a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006950:	1c5a      	adds	r2, r3, #1
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0201 	bic.w	r2, r2, #1
 8006964:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7fe feee 	bl	8005748 <HAL_I2C_AbortCpltCallback>
 800696c:	e015      	b.n	800699a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006978:	2b40      	cmp	r3, #64	@ 0x40
 800697a:	d10b      	bne.n	8006994 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691a      	ldr	r2, [r3, #16]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7fe fecd 	bl	8005734 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10e      	bne.n	80069c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d109      	bne.n	80069c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d104      	bne.n	80069c8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d007      	beq.n	80069d8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80069d6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069de:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d113      	bne.n	8006a14 <I2C_ITError+0x254>
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
 80069ee:	2b28      	cmp	r3, #40	@ 0x28
 80069f0:	d110      	bne.n	8006a14 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a0a      	ldr	r2, [pc, #40]	@ (8006a20 <I2C_ITError+0x260>)
 80069f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7fe fe72 	bl	80056f8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a14:	bf00      	nop
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	08006cc5 	.word	0x08006cc5
 8006a20:	ffff0000 	.word	0xffff0000

08006a24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	607a      	str	r2, [r7, #4]
 8006a2e:	603b      	str	r3, [r7, #0]
 8006a30:	460b      	mov	r3, r1
 8006a32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b08      	cmp	r3, #8
 8006a3e:	d006      	beq.n	8006a4e <I2C_MasterRequestWrite+0x2a>
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d003      	beq.n	8006a4e <I2C_MasterRequestWrite+0x2a>
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a4c:	d108      	bne.n	8006a60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	e00b      	b.n	8006a78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a64:	2b12      	cmp	r3, #18
 8006a66:	d107      	bne.n	8006a78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 f9c5 	bl	8006e14 <I2C_WaitOnFlagUntilTimeout>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00d      	beq.n	8006aac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a9e:	d103      	bne.n	8006aa8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006aa6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e035      	b.n	8006b18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ab4:	d108      	bne.n	8006ac8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ab6:	897b      	ldrh	r3, [r7, #10]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	461a      	mov	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ac4:	611a      	str	r2, [r3, #16]
 8006ac6:	e01b      	b.n	8006b00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ac8:	897b      	ldrh	r3, [r7, #10]
 8006aca:	11db      	asrs	r3, r3, #7
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	f003 0306 	and.w	r3, r3, #6
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	f063 030f 	orn	r3, r3, #15
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	490e      	ldr	r1, [pc, #56]	@ (8006b20 <I2C_MasterRequestWrite+0xfc>)
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 f9eb 	bl	8006ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e010      	b.n	8006b18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006af6:	897b      	ldrh	r3, [r7, #10]
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	4907      	ldr	r1, [pc, #28]	@ (8006b24 <I2C_MasterRequestWrite+0x100>)
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 f9db 	bl	8006ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e000      	b.n	8006b18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	00010008 	.word	0x00010008
 8006b24:	00010002 	.word	0x00010002

08006b28 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af02      	add	r7, sp, #8
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	607a      	str	r2, [r7, #4]
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	460b      	mov	r3, r1
 8006b36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b3c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b4c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d006      	beq.n	8006b62 <I2C_MasterRequestRead+0x3a>
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d003      	beq.n	8006b62 <I2C_MasterRequestRead+0x3a>
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b60:	d108      	bne.n	8006b74 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	e00b      	b.n	8006b8c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b78:	2b11      	cmp	r3, #17
 8006b7a:	d107      	bne.n	8006b8c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f93b 	bl	8006e14 <I2C_WaitOnFlagUntilTimeout>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00d      	beq.n	8006bc0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bb2:	d103      	bne.n	8006bbc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e079      	b.n	8006cb4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006bc8:	d108      	bne.n	8006bdc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006bca:	897b      	ldrh	r3, [r7, #10]
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	f043 0301 	orr.w	r3, r3, #1
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	611a      	str	r2, [r3, #16]
 8006bda:	e05f      	b.n	8006c9c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006bdc:	897b      	ldrh	r3, [r7, #10]
 8006bde:	11db      	asrs	r3, r3, #7
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	f003 0306 	and.w	r3, r3, #6
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	f063 030f 	orn	r3, r3, #15
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	4930      	ldr	r1, [pc, #192]	@ (8006cbc <I2C_MasterRequestRead+0x194>)
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 f961 	bl	8006ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e054      	b.n	8006cb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c0a:	897b      	ldrh	r3, [r7, #10]
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	4929      	ldr	r1, [pc, #164]	@ (8006cc0 <I2C_MasterRequestRead+0x198>)
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f000 f951 	bl	8006ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e044      	b.n	8006cb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	613b      	str	r3, [r7, #16]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c4e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 f8d9 	bl	8006e14 <I2C_WaitOnFlagUntilTimeout>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00d      	beq.n	8006c84 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c76:	d103      	bne.n	8006c80 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c7e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e017      	b.n	8006cb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006c84:	897b      	ldrh	r3, [r7, #10]
 8006c86:	11db      	asrs	r3, r3, #7
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	f003 0306 	and.w	r3, r3, #6
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	f063 030e 	orn	r3, r3, #14
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	4907      	ldr	r1, [pc, #28]	@ (8006cc0 <I2C_MasterRequestRead+0x198>)
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 f90d 	bl	8006ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d001      	beq.n	8006cb2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e000      	b.n	8006cb4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	00010008 	.word	0x00010008
 8006cc0:	00010002 	.word	0x00010002

08006cc4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cdc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006cde:	4b4b      	ldr	r3, [pc, #300]	@ (8006e0c <I2C_DMAAbort+0x148>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	08db      	lsrs	r3, r3, #3
 8006ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8006e10 <I2C_DMAAbort+0x14c>)
 8006ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cea:	0a1a      	lsrs	r2, r3, #8
 8006cec:	4613      	mov	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	00da      	lsls	r2, r3, #3
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d02:	f043 0220 	orr.w	r2, r3, #32
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006d0a:	e00a      	b.n	8006d22 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d20:	d0ea      	beq.n	8006cf8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d2e:	2200      	movs	r2, #0
 8006d30:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3e:	2200      	movs	r2, #0
 8006d40:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d50:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	2200      	movs	r2, #0
 8006d56:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d64:	2200      	movs	r2, #0
 8006d66:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d003      	beq.n	8006d78 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d74:	2200      	movs	r2, #0
 8006d76:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0201 	bic.w	r2, r2, #1
 8006d86:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b60      	cmp	r3, #96	@ 0x60
 8006d92:	d10e      	bne.n	8006db2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	2200      	movs	r2, #0
 8006da8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006daa:	6978      	ldr	r0, [r7, #20]
 8006dac:	f7fe fccc 	bl	8005748 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006db0:	e027      	b.n	8006e02 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006db2:	7cfb      	ldrb	r3, [r7, #19]
 8006db4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006db8:	2b28      	cmp	r3, #40	@ 0x28
 8006dba:	d117      	bne.n	8006dec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0201 	orr.w	r2, r2, #1
 8006dca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006dda:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	2200      	movs	r2, #0
 8006de0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2228      	movs	r2, #40	@ 0x28
 8006de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006dea:	e007      	b.n	8006dfc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006dfc:	6978      	ldr	r0, [r7, #20]
 8006dfe:	f7fe fc99 	bl	8005734 <HAL_I2C_ErrorCallback>
}
 8006e02:	bf00      	nop
 8006e04:	3718      	adds	r7, #24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000000 	.word	0x20000000
 8006e10:	14f8b589 	.word	0x14f8b589

08006e14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	603b      	str	r3, [r7, #0]
 8006e20:	4613      	mov	r3, r2
 8006e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e24:	e025      	b.n	8006e72 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e2c:	d021      	beq.n	8006e72 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e2e:	f7fc fe6d 	bl	8003b0c <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d302      	bcc.n	8006e44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d116      	bne.n	8006e72 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5e:	f043 0220 	orr.w	r2, r3, #32
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e023      	b.n	8006eba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	0c1b      	lsrs	r3, r3, #16
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d10d      	bne.n	8006e98 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	43da      	mvns	r2, r3
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	4013      	ands	r3, r2
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	bf0c      	ite	eq
 8006e8e:	2301      	moveq	r3, #1
 8006e90:	2300      	movne	r3, #0
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	e00c      	b.n	8006eb2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	43da      	mvns	r2, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	bf0c      	ite	eq
 8006eaa:	2301      	moveq	r3, #1
 8006eac:	2300      	movne	r3, #0
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d0b6      	beq.n	8006e26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	60f8      	str	r0, [r7, #12]
 8006eca:	60b9      	str	r1, [r7, #8]
 8006ecc:	607a      	str	r2, [r7, #4]
 8006ece:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ed0:	e051      	b.n	8006f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ee0:	d123      	bne.n	8006f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ef0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006efa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f16:	f043 0204 	orr.w	r2, r3, #4
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e046      	b.n	8006fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f30:	d021      	beq.n	8006f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f32:	f7fc fdeb 	bl	8003b0c <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d302      	bcc.n	8006f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d116      	bne.n	8006f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f62:	f043 0220 	orr.w	r2, r3, #32
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e020      	b.n	8006fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	0c1b      	lsrs	r3, r3, #16
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d10c      	bne.n	8006f9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	43da      	mvns	r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	bf14      	ite	ne
 8006f92:	2301      	movne	r3, #1
 8006f94:	2300      	moveq	r3, #0
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	e00b      	b.n	8006fb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	43da      	mvns	r2, r3
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bf14      	ite	ne
 8006fac:	2301      	movne	r3, #1
 8006fae:	2300      	moveq	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d18d      	bne.n	8006ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fcc:	e02d      	b.n	800702a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 f900 	bl	80071d4 <I2C_IsAcknowledgeFailed>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e02d      	b.n	800703a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fe4:	d021      	beq.n	800702a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe6:	f7fc fd91 	bl	8003b0c <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	68ba      	ldr	r2, [r7, #8]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d302      	bcc.n	8006ffc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d116      	bne.n	800702a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2220      	movs	r2, #32
 8007006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007016:	f043 0220 	orr.w	r2, r3, #32
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e007      	b.n	800703a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007034:	2b80      	cmp	r3, #128	@ 0x80
 8007036:	d1ca      	bne.n	8006fce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800704e:	e02d      	b.n	80070ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 f8bf 	bl	80071d4 <I2C_IsAcknowledgeFailed>
 8007056:	4603      	mov	r3, r0
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e02d      	b.n	80070bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007066:	d021      	beq.n	80070ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007068:	f7fc fd50 	bl	8003b0c <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	429a      	cmp	r2, r3
 8007076:	d302      	bcc.n	800707e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d116      	bne.n	80070ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007098:	f043 0220 	orr.w	r2, r3, #32
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e007      	b.n	80070bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	f003 0304 	and.w	r3, r3, #4
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d1ca      	bne.n	8007050 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80070d0:	4b13      	ldr	r3, [pc, #76]	@ (8007120 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	08db      	lsrs	r3, r3, #3
 80070d6:	4a13      	ldr	r2, [pc, #76]	@ (8007124 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80070d8:	fba2 2303 	umull	r2, r3, r2, r3
 80070dc:	0a1a      	lsrs	r2, r3, #8
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d107      	bne.n	8007102 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f6:	f043 0220 	orr.w	r2, r3, #32
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e008      	b.n	8007114 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800710c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007110:	d0e9      	beq.n	80070e6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	20000000 	.word	0x20000000
 8007124:	14f8b589 	.word	0x14f8b589

08007128 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007134:	e042      	b.n	80071bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	f003 0310 	and.w	r3, r3, #16
 8007140:	2b10      	cmp	r3, #16
 8007142:	d119      	bne.n	8007178 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f06f 0210 	mvn.w	r2, #16
 800714c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2220      	movs	r2, #32
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e029      	b.n	80071cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007178:	f7fc fcc8 	bl	8003b0c <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	429a      	cmp	r2, r3
 8007186:	d302      	bcc.n	800718e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d116      	bne.n	80071bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2220      	movs	r2, #32
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071a8:	f043 0220 	orr.w	r2, r3, #32
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e007      	b.n	80071cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071c6:	2b40      	cmp	r3, #64	@ 0x40
 80071c8:	d1b5      	bne.n	8007136 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071ea:	d11b      	bne.n	8007224 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80071f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007210:	f043 0204 	orr.w	r2, r3, #4
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e000      	b.n	8007226 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007232:	b480      	push	{r7}
 8007234:	b083      	sub	sp, #12
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007242:	d103      	bne.n	800724c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800724a:	e007      	b.n	800725c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007250:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007254:	d102      	bne.n	800725c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2208      	movs	r2, #8
 800725a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e267      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d075      	beq.n	8007372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007286:	4b88      	ldr	r3, [pc, #544]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f003 030c 	and.w	r3, r3, #12
 800728e:	2b04      	cmp	r3, #4
 8007290:	d00c      	beq.n	80072ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007292:	4b85      	ldr	r3, [pc, #532]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800729a:	2b08      	cmp	r3, #8
 800729c:	d112      	bne.n	80072c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800729e:	4b82      	ldr	r3, [pc, #520]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80072aa:	d10b      	bne.n	80072c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072ac:	4b7e      	ldr	r3, [pc, #504]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d05b      	beq.n	8007370 <HAL_RCC_OscConfig+0x108>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d157      	bne.n	8007370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e242      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072cc:	d106      	bne.n	80072dc <HAL_RCC_OscConfig+0x74>
 80072ce:	4b76      	ldr	r3, [pc, #472]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a75      	ldr	r2, [pc, #468]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 80072d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072d8:	6013      	str	r3, [r2, #0]
 80072da:	e01d      	b.n	8007318 <HAL_RCC_OscConfig+0xb0>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072e4:	d10c      	bne.n	8007300 <HAL_RCC_OscConfig+0x98>
 80072e6:	4b70      	ldr	r3, [pc, #448]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a6f      	ldr	r2, [pc, #444]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 80072ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072f0:	6013      	str	r3, [r2, #0]
 80072f2:	4b6d      	ldr	r3, [pc, #436]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a6c      	ldr	r2, [pc, #432]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 80072f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	e00b      	b.n	8007318 <HAL_RCC_OscConfig+0xb0>
 8007300:	4b69      	ldr	r3, [pc, #420]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a68      	ldr	r2, [pc, #416]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 8007306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	4b66      	ldr	r3, [pc, #408]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a65      	ldr	r2, [pc, #404]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 8007312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d013      	beq.n	8007348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007320:	f7fc fbf4 	bl	8003b0c <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007328:	f7fc fbf0 	bl	8003b0c <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b64      	cmp	r3, #100	@ 0x64
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e207      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800733a:	4b5b      	ldr	r3, [pc, #364]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0f0      	beq.n	8007328 <HAL_RCC_OscConfig+0xc0>
 8007346:	e014      	b.n	8007372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007348:	f7fc fbe0 	bl	8003b0c <HAL_GetTick>
 800734c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800734e:	e008      	b.n	8007362 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007350:	f7fc fbdc 	bl	8003b0c <HAL_GetTick>
 8007354:	4602      	mov	r2, r0
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	2b64      	cmp	r3, #100	@ 0x64
 800735c:	d901      	bls.n	8007362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e1f3      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007362:	4b51      	ldr	r3, [pc, #324]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1f0      	bne.n	8007350 <HAL_RCC_OscConfig+0xe8>
 800736e:	e000      	b.n	8007372 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d063      	beq.n	8007446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800737e:	4b4a      	ldr	r3, [pc, #296]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f003 030c 	and.w	r3, r3, #12
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00b      	beq.n	80073a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800738a:	4b47      	ldr	r3, [pc, #284]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007392:	2b08      	cmp	r3, #8
 8007394:	d11c      	bne.n	80073d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007396:	4b44      	ldr	r3, [pc, #272]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d116      	bne.n	80073d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073a2:	4b41      	ldr	r3, [pc, #260]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d005      	beq.n	80073ba <HAL_RCC_OscConfig+0x152>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d001      	beq.n	80073ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e1c7      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073ba:	4b3b      	ldr	r3, [pc, #236]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	4937      	ldr	r1, [pc, #220]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073ce:	e03a      	b.n	8007446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d020      	beq.n	800741a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073d8:	4b34      	ldr	r3, [pc, #208]	@ (80074ac <HAL_RCC_OscConfig+0x244>)
 80073da:	2201      	movs	r2, #1
 80073dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073de:	f7fc fb95 	bl	8003b0c <HAL_GetTick>
 80073e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073e4:	e008      	b.n	80073f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073e6:	f7fc fb91 	bl	8003b0c <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d901      	bls.n	80073f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e1a8      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073f8:	4b2b      	ldr	r3, [pc, #172]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	2b00      	cmp	r3, #0
 8007402:	d0f0      	beq.n	80073e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007404:	4b28      	ldr	r3, [pc, #160]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	00db      	lsls	r3, r3, #3
 8007412:	4925      	ldr	r1, [pc, #148]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 8007414:	4313      	orrs	r3, r2
 8007416:	600b      	str	r3, [r1, #0]
 8007418:	e015      	b.n	8007446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800741a:	4b24      	ldr	r3, [pc, #144]	@ (80074ac <HAL_RCC_OscConfig+0x244>)
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007420:	f7fc fb74 	bl	8003b0c <HAL_GetTick>
 8007424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007426:	e008      	b.n	800743a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007428:	f7fc fb70 	bl	8003b0c <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d901      	bls.n	800743a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	e187      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800743a:	4b1b      	ldr	r3, [pc, #108]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0302 	and.w	r3, r3, #2
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1f0      	bne.n	8007428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0308 	and.w	r3, r3, #8
 800744e:	2b00      	cmp	r3, #0
 8007450:	d036      	beq.n	80074c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d016      	beq.n	8007488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800745a:	4b15      	ldr	r3, [pc, #84]	@ (80074b0 <HAL_RCC_OscConfig+0x248>)
 800745c:	2201      	movs	r2, #1
 800745e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007460:	f7fc fb54 	bl	8003b0c <HAL_GetTick>
 8007464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007466:	e008      	b.n	800747a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007468:	f7fc fb50 	bl	8003b0c <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d901      	bls.n	800747a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e167      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800747a:	4b0b      	ldr	r3, [pc, #44]	@ (80074a8 <HAL_RCC_OscConfig+0x240>)
 800747c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0f0      	beq.n	8007468 <HAL_RCC_OscConfig+0x200>
 8007486:	e01b      	b.n	80074c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007488:	4b09      	ldr	r3, [pc, #36]	@ (80074b0 <HAL_RCC_OscConfig+0x248>)
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800748e:	f7fc fb3d 	bl	8003b0c <HAL_GetTick>
 8007492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007494:	e00e      	b.n	80074b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007496:	f7fc fb39 	bl	8003b0c <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d907      	bls.n	80074b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e150      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
 80074a8:	40023800 	.word	0x40023800
 80074ac:	42470000 	.word	0x42470000
 80074b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80074b4:	4b88      	ldr	r3, [pc, #544]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 80074b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1ea      	bne.n	8007496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 8097 	beq.w	80075fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074ce:	2300      	movs	r3, #0
 80074d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074d2:	4b81      	ldr	r3, [pc, #516]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 80074d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10f      	bne.n	80074fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074de:	2300      	movs	r3, #0
 80074e0:	60bb      	str	r3, [r7, #8]
 80074e2:	4b7d      	ldr	r3, [pc, #500]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 80074e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e6:	4a7c      	ldr	r2, [pc, #496]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 80074e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80074ee:	4b7a      	ldr	r3, [pc, #488]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 80074f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074f6:	60bb      	str	r3, [r7, #8]
 80074f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074fa:	2301      	movs	r3, #1
 80074fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074fe:	4b77      	ldr	r3, [pc, #476]	@ (80076dc <HAL_RCC_OscConfig+0x474>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007506:	2b00      	cmp	r3, #0
 8007508:	d118      	bne.n	800753c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800750a:	4b74      	ldr	r3, [pc, #464]	@ (80076dc <HAL_RCC_OscConfig+0x474>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a73      	ldr	r2, [pc, #460]	@ (80076dc <HAL_RCC_OscConfig+0x474>)
 8007510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007516:	f7fc faf9 	bl	8003b0c <HAL_GetTick>
 800751a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800751c:	e008      	b.n	8007530 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800751e:	f7fc faf5 	bl	8003b0c <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	2b02      	cmp	r3, #2
 800752a:	d901      	bls.n	8007530 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e10c      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007530:	4b6a      	ldr	r3, [pc, #424]	@ (80076dc <HAL_RCC_OscConfig+0x474>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007538:	2b00      	cmp	r3, #0
 800753a:	d0f0      	beq.n	800751e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d106      	bne.n	8007552 <HAL_RCC_OscConfig+0x2ea>
 8007544:	4b64      	ldr	r3, [pc, #400]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 8007546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007548:	4a63      	ldr	r2, [pc, #396]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 800754a:	f043 0301 	orr.w	r3, r3, #1
 800754e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007550:	e01c      	b.n	800758c <HAL_RCC_OscConfig+0x324>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	2b05      	cmp	r3, #5
 8007558:	d10c      	bne.n	8007574 <HAL_RCC_OscConfig+0x30c>
 800755a:	4b5f      	ldr	r3, [pc, #380]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 800755c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800755e:	4a5e      	ldr	r2, [pc, #376]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 8007560:	f043 0304 	orr.w	r3, r3, #4
 8007564:	6713      	str	r3, [r2, #112]	@ 0x70
 8007566:	4b5c      	ldr	r3, [pc, #368]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 8007568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800756a:	4a5b      	ldr	r2, [pc, #364]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 800756c:	f043 0301 	orr.w	r3, r3, #1
 8007570:	6713      	str	r3, [r2, #112]	@ 0x70
 8007572:	e00b      	b.n	800758c <HAL_RCC_OscConfig+0x324>
 8007574:	4b58      	ldr	r3, [pc, #352]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 8007576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007578:	4a57      	ldr	r2, [pc, #348]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 800757a:	f023 0301 	bic.w	r3, r3, #1
 800757e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007580:	4b55      	ldr	r3, [pc, #340]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 8007582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007584:	4a54      	ldr	r2, [pc, #336]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 8007586:	f023 0304 	bic.w	r3, r3, #4
 800758a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d015      	beq.n	80075c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007594:	f7fc faba 	bl	8003b0c <HAL_GetTick>
 8007598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800759a:	e00a      	b.n	80075b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800759c:	f7fc fab6 	bl	8003b0c <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d901      	bls.n	80075b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e0cb      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075b2:	4b49      	ldr	r3, [pc, #292]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 80075b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0ee      	beq.n	800759c <HAL_RCC_OscConfig+0x334>
 80075be:	e014      	b.n	80075ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075c0:	f7fc faa4 	bl	8003b0c <HAL_GetTick>
 80075c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075c6:	e00a      	b.n	80075de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075c8:	f7fc faa0 	bl	8003b0c <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d901      	bls.n	80075de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e0b5      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075de:	4b3e      	ldr	r3, [pc, #248]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 80075e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075e2:	f003 0302 	and.w	r3, r3, #2
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1ee      	bne.n	80075c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075ea:	7dfb      	ldrb	r3, [r7, #23]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d105      	bne.n	80075fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075f0:	4b39      	ldr	r3, [pc, #228]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 80075f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f4:	4a38      	ldr	r2, [pc, #224]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 80075f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 80a1 	beq.w	8007748 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007606:	4b34      	ldr	r3, [pc, #208]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f003 030c 	and.w	r3, r3, #12
 800760e:	2b08      	cmp	r3, #8
 8007610:	d05c      	beq.n	80076cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	2b02      	cmp	r3, #2
 8007618:	d141      	bne.n	800769e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800761a:	4b31      	ldr	r3, [pc, #196]	@ (80076e0 <HAL_RCC_OscConfig+0x478>)
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007620:	f7fc fa74 	bl	8003b0c <HAL_GetTick>
 8007624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007626:	e008      	b.n	800763a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007628:	f7fc fa70 	bl	8003b0c <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d901      	bls.n	800763a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007636:	2303      	movs	r3, #3
 8007638:	e087      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800763a:	4b27      	ldr	r3, [pc, #156]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f0      	bne.n	8007628 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	69da      	ldr	r2, [r3, #28]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	431a      	orrs	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007654:	019b      	lsls	r3, r3, #6
 8007656:	431a      	orrs	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800765c:	085b      	lsrs	r3, r3, #1
 800765e:	3b01      	subs	r3, #1
 8007660:	041b      	lsls	r3, r3, #16
 8007662:	431a      	orrs	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007668:	061b      	lsls	r3, r3, #24
 800766a:	491b      	ldr	r1, [pc, #108]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 800766c:	4313      	orrs	r3, r2
 800766e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007670:	4b1b      	ldr	r3, [pc, #108]	@ (80076e0 <HAL_RCC_OscConfig+0x478>)
 8007672:	2201      	movs	r2, #1
 8007674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007676:	f7fc fa49 	bl	8003b0c <HAL_GetTick>
 800767a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800767c:	e008      	b.n	8007690 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800767e:	f7fc fa45 	bl	8003b0c <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d901      	bls.n	8007690 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e05c      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007690:	4b11      	ldr	r3, [pc, #68]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d0f0      	beq.n	800767e <HAL_RCC_OscConfig+0x416>
 800769c:	e054      	b.n	8007748 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800769e:	4b10      	ldr	r3, [pc, #64]	@ (80076e0 <HAL_RCC_OscConfig+0x478>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076a4:	f7fc fa32 	bl	8003b0c <HAL_GetTick>
 80076a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076aa:	e008      	b.n	80076be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076ac:	f7fc fa2e 	bl	8003b0c <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e045      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076be:	4b06      	ldr	r3, [pc, #24]	@ (80076d8 <HAL_RCC_OscConfig+0x470>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1f0      	bne.n	80076ac <HAL_RCC_OscConfig+0x444>
 80076ca:	e03d      	b.n	8007748 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d107      	bne.n	80076e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	e038      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
 80076d8:	40023800 	.word	0x40023800
 80076dc:	40007000 	.word	0x40007000
 80076e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80076e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007754 <HAL_RCC_OscConfig+0x4ec>)
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d028      	beq.n	8007744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d121      	bne.n	8007744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800770a:	429a      	cmp	r2, r3
 800770c:	d11a      	bne.n	8007744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007714:	4013      	ands	r3, r2
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800771a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800771c:	4293      	cmp	r3, r2
 800771e:	d111      	bne.n	8007744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800772a:	085b      	lsrs	r3, r3, #1
 800772c:	3b01      	subs	r3, #1
 800772e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007730:	429a      	cmp	r2, r3
 8007732:	d107      	bne.n	8007744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007740:	429a      	cmp	r2, r3
 8007742:	d001      	beq.n	8007748 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e000      	b.n	800774a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	40023800 	.word	0x40023800

08007758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e0cc      	b.n	8007906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800776c:	4b68      	ldr	r3, [pc, #416]	@ (8007910 <HAL_RCC_ClockConfig+0x1b8>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	683a      	ldr	r2, [r7, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d90c      	bls.n	8007794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800777a:	4b65      	ldr	r3, [pc, #404]	@ (8007910 <HAL_RCC_ClockConfig+0x1b8>)
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007782:	4b63      	ldr	r3, [pc, #396]	@ (8007910 <HAL_RCC_ClockConfig+0x1b8>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	429a      	cmp	r2, r3
 800778e:	d001      	beq.n	8007794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e0b8      	b.n	8007906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d020      	beq.n	80077e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d005      	beq.n	80077b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80077ac:	4b59      	ldr	r3, [pc, #356]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	4a58      	ldr	r2, [pc, #352]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80077b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80077b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 0308 	and.w	r3, r3, #8
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d005      	beq.n	80077d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80077c4:	4b53      	ldr	r3, [pc, #332]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	4a52      	ldr	r2, [pc, #328]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80077ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80077ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077d0:	4b50      	ldr	r3, [pc, #320]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	494d      	ldr	r1, [pc, #308]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d044      	beq.n	8007878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d107      	bne.n	8007806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077f6:	4b47      	ldr	r3, [pc, #284]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d119      	bne.n	8007836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e07f      	b.n	8007906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b02      	cmp	r3, #2
 800780c:	d003      	beq.n	8007816 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007812:	2b03      	cmp	r3, #3
 8007814:	d107      	bne.n	8007826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007816:	4b3f      	ldr	r3, [pc, #252]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d109      	bne.n	8007836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	e06f      	b.n	8007906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007826:	4b3b      	ldr	r3, [pc, #236]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e067      	b.n	8007906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007836:	4b37      	ldr	r3, [pc, #220]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f023 0203 	bic.w	r2, r3, #3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	4934      	ldr	r1, [pc, #208]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 8007844:	4313      	orrs	r3, r2
 8007846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007848:	f7fc f960 	bl	8003b0c <HAL_GetTick>
 800784c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800784e:	e00a      	b.n	8007866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007850:	f7fc f95c 	bl	8003b0c <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800785e:	4293      	cmp	r3, r2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e04f      	b.n	8007906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007866:	4b2b      	ldr	r3, [pc, #172]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 020c 	and.w	r2, r3, #12
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	429a      	cmp	r2, r3
 8007876:	d1eb      	bne.n	8007850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007878:	4b25      	ldr	r3, [pc, #148]	@ (8007910 <HAL_RCC_ClockConfig+0x1b8>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0307 	and.w	r3, r3, #7
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	429a      	cmp	r2, r3
 8007884:	d20c      	bcs.n	80078a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007886:	4b22      	ldr	r3, [pc, #136]	@ (8007910 <HAL_RCC_ClockConfig+0x1b8>)
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800788e:	4b20      	ldr	r3, [pc, #128]	@ (8007910 <HAL_RCC_ClockConfig+0x1b8>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	429a      	cmp	r2, r3
 800789a:	d001      	beq.n	80078a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e032      	b.n	8007906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d008      	beq.n	80078be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80078ac:	4b19      	ldr	r3, [pc, #100]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	4916      	ldr	r1, [pc, #88]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0308 	and.w	r3, r3, #8
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d009      	beq.n	80078de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80078ca:	4b12      	ldr	r3, [pc, #72]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	490e      	ldr	r1, [pc, #56]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80078de:	f000 f821 	bl	8007924 <HAL_RCC_GetSysClockFreq>
 80078e2:	4602      	mov	r2, r0
 80078e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007914 <HAL_RCC_ClockConfig+0x1bc>)
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	091b      	lsrs	r3, r3, #4
 80078ea:	f003 030f 	and.w	r3, r3, #15
 80078ee:	490a      	ldr	r1, [pc, #40]	@ (8007918 <HAL_RCC_ClockConfig+0x1c0>)
 80078f0:	5ccb      	ldrb	r3, [r1, r3]
 80078f2:	fa22 f303 	lsr.w	r3, r2, r3
 80078f6:	4a09      	ldr	r2, [pc, #36]	@ (800791c <HAL_RCC_ClockConfig+0x1c4>)
 80078f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80078fa:	4b09      	ldr	r3, [pc, #36]	@ (8007920 <HAL_RCC_ClockConfig+0x1c8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4618      	mov	r0, r3
 8007900:	f7fb fc8a 	bl	8003218 <HAL_InitTick>

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	40023c00 	.word	0x40023c00
 8007914:	40023800 	.word	0x40023800
 8007918:	080112c0 	.word	0x080112c0
 800791c:	20000000 	.word	0x20000000
 8007920:	20000018 	.word	0x20000018

08007924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007928:	b094      	sub	sp, #80	@ 0x50
 800792a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007930:	2300      	movs	r3, #0
 8007932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007934:	2300      	movs	r3, #0
 8007936:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007938:	2300      	movs	r3, #0
 800793a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800793c:	4b79      	ldr	r3, [pc, #484]	@ (8007b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f003 030c 	and.w	r3, r3, #12
 8007944:	2b08      	cmp	r3, #8
 8007946:	d00d      	beq.n	8007964 <HAL_RCC_GetSysClockFreq+0x40>
 8007948:	2b08      	cmp	r3, #8
 800794a:	f200 80e1 	bhi.w	8007b10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800794e:	2b00      	cmp	r3, #0
 8007950:	d002      	beq.n	8007958 <HAL_RCC_GetSysClockFreq+0x34>
 8007952:	2b04      	cmp	r3, #4
 8007954:	d003      	beq.n	800795e <HAL_RCC_GetSysClockFreq+0x3a>
 8007956:	e0db      	b.n	8007b10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007958:	4b73      	ldr	r3, [pc, #460]	@ (8007b28 <HAL_RCC_GetSysClockFreq+0x204>)
 800795a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800795c:	e0db      	b.n	8007b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800795e:	4b73      	ldr	r3, [pc, #460]	@ (8007b2c <HAL_RCC_GetSysClockFreq+0x208>)
 8007960:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007962:	e0d8      	b.n	8007b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007964:	4b6f      	ldr	r3, [pc, #444]	@ (8007b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800796c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800796e:	4b6d      	ldr	r3, [pc, #436]	@ (8007b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d063      	beq.n	8007a42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800797a:	4b6a      	ldr	r3, [pc, #424]	@ (8007b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	099b      	lsrs	r3, r3, #6
 8007980:	2200      	movs	r2, #0
 8007982:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007984:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800798c:	633b      	str	r3, [r7, #48]	@ 0x30
 800798e:	2300      	movs	r3, #0
 8007990:	637b      	str	r3, [r7, #52]	@ 0x34
 8007992:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007996:	4622      	mov	r2, r4
 8007998:	462b      	mov	r3, r5
 800799a:	f04f 0000 	mov.w	r0, #0
 800799e:	f04f 0100 	mov.w	r1, #0
 80079a2:	0159      	lsls	r1, r3, #5
 80079a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079a8:	0150      	lsls	r0, r2, #5
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4621      	mov	r1, r4
 80079b0:	1a51      	subs	r1, r2, r1
 80079b2:	6139      	str	r1, [r7, #16]
 80079b4:	4629      	mov	r1, r5
 80079b6:	eb63 0301 	sbc.w	r3, r3, r1
 80079ba:	617b      	str	r3, [r7, #20]
 80079bc:	f04f 0200 	mov.w	r2, #0
 80079c0:	f04f 0300 	mov.w	r3, #0
 80079c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80079c8:	4659      	mov	r1, fp
 80079ca:	018b      	lsls	r3, r1, #6
 80079cc:	4651      	mov	r1, sl
 80079ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80079d2:	4651      	mov	r1, sl
 80079d4:	018a      	lsls	r2, r1, #6
 80079d6:	4651      	mov	r1, sl
 80079d8:	ebb2 0801 	subs.w	r8, r2, r1
 80079dc:	4659      	mov	r1, fp
 80079de:	eb63 0901 	sbc.w	r9, r3, r1
 80079e2:	f04f 0200 	mov.w	r2, #0
 80079e6:	f04f 0300 	mov.w	r3, #0
 80079ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80079ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80079f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80079f6:	4690      	mov	r8, r2
 80079f8:	4699      	mov	r9, r3
 80079fa:	4623      	mov	r3, r4
 80079fc:	eb18 0303 	adds.w	r3, r8, r3
 8007a00:	60bb      	str	r3, [r7, #8]
 8007a02:	462b      	mov	r3, r5
 8007a04:	eb49 0303 	adc.w	r3, r9, r3
 8007a08:	60fb      	str	r3, [r7, #12]
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	f04f 0300 	mov.w	r3, #0
 8007a12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a16:	4629      	mov	r1, r5
 8007a18:	024b      	lsls	r3, r1, #9
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a20:	4621      	mov	r1, r4
 8007a22:	024a      	lsls	r2, r1, #9
 8007a24:	4610      	mov	r0, r2
 8007a26:	4619      	mov	r1, r3
 8007a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a34:	f7f9 f930 	bl	8000c98 <__aeabi_uldivmod>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a40:	e058      	b.n	8007af4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a42:	4b38      	ldr	r3, [pc, #224]	@ (8007b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	099b      	lsrs	r3, r3, #6
 8007a48:	2200      	movs	r2, #0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007a52:	623b      	str	r3, [r7, #32]
 8007a54:	2300      	movs	r3, #0
 8007a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007a5c:	4642      	mov	r2, r8
 8007a5e:	464b      	mov	r3, r9
 8007a60:	f04f 0000 	mov.w	r0, #0
 8007a64:	f04f 0100 	mov.w	r1, #0
 8007a68:	0159      	lsls	r1, r3, #5
 8007a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a6e:	0150      	lsls	r0, r2, #5
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4641      	mov	r1, r8
 8007a76:	ebb2 0a01 	subs.w	sl, r2, r1
 8007a7a:	4649      	mov	r1, r9
 8007a7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007a80:	f04f 0200 	mov.w	r2, #0
 8007a84:	f04f 0300 	mov.w	r3, #0
 8007a88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007a8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007a90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007a94:	ebb2 040a 	subs.w	r4, r2, sl
 8007a98:	eb63 050b 	sbc.w	r5, r3, fp
 8007a9c:	f04f 0200 	mov.w	r2, #0
 8007aa0:	f04f 0300 	mov.w	r3, #0
 8007aa4:	00eb      	lsls	r3, r5, #3
 8007aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007aaa:	00e2      	lsls	r2, r4, #3
 8007aac:	4614      	mov	r4, r2
 8007aae:	461d      	mov	r5, r3
 8007ab0:	4643      	mov	r3, r8
 8007ab2:	18e3      	adds	r3, r4, r3
 8007ab4:	603b      	str	r3, [r7, #0]
 8007ab6:	464b      	mov	r3, r9
 8007ab8:	eb45 0303 	adc.w	r3, r5, r3
 8007abc:	607b      	str	r3, [r7, #4]
 8007abe:	f04f 0200 	mov.w	r2, #0
 8007ac2:	f04f 0300 	mov.w	r3, #0
 8007ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007aca:	4629      	mov	r1, r5
 8007acc:	028b      	lsls	r3, r1, #10
 8007ace:	4621      	mov	r1, r4
 8007ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	028a      	lsls	r2, r1, #10
 8007ad8:	4610      	mov	r0, r2
 8007ada:	4619      	mov	r1, r3
 8007adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ade:	2200      	movs	r2, #0
 8007ae0:	61bb      	str	r3, [r7, #24]
 8007ae2:	61fa      	str	r2, [r7, #28]
 8007ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ae8:	f7f9 f8d6 	bl	8000c98 <__aeabi_uldivmod>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	4613      	mov	r3, r2
 8007af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007af4:	4b0b      	ldr	r3, [pc, #44]	@ (8007b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	0c1b      	lsrs	r3, r3, #16
 8007afa:	f003 0303 	and.w	r3, r3, #3
 8007afe:	3301      	adds	r3, #1
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007b04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b0e:	e002      	b.n	8007b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b10:	4b05      	ldr	r3, [pc, #20]	@ (8007b28 <HAL_RCC_GetSysClockFreq+0x204>)
 8007b12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3750      	adds	r7, #80	@ 0x50
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b22:	bf00      	nop
 8007b24:	40023800 	.word	0x40023800
 8007b28:	00f42400 	.word	0x00f42400
 8007b2c:	007a1200 	.word	0x007a1200

08007b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b34:	4b03      	ldr	r3, [pc, #12]	@ (8007b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b36:	681b      	ldr	r3, [r3, #0]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr
 8007b42:	bf00      	nop
 8007b44:	20000000 	.word	0x20000000

08007b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007b4c:	f7ff fff0 	bl	8007b30 <HAL_RCC_GetHCLKFreq>
 8007b50:	4602      	mov	r2, r0
 8007b52:	4b05      	ldr	r3, [pc, #20]	@ (8007b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	0a9b      	lsrs	r3, r3, #10
 8007b58:	f003 0307 	and.w	r3, r3, #7
 8007b5c:	4903      	ldr	r1, [pc, #12]	@ (8007b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007b5e:	5ccb      	ldrb	r3, [r1, r3]
 8007b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	40023800 	.word	0x40023800
 8007b6c:	080112d0 	.word	0x080112d0

08007b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007b74:	f7ff ffdc 	bl	8007b30 <HAL_RCC_GetHCLKFreq>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	4b05      	ldr	r3, [pc, #20]	@ (8007b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	0b5b      	lsrs	r3, r3, #13
 8007b80:	f003 0307 	and.w	r3, r3, #7
 8007b84:	4903      	ldr	r1, [pc, #12]	@ (8007b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007b86:	5ccb      	ldrb	r3, [r1, r3]
 8007b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	40023800 	.word	0x40023800
 8007b94:	080112d0 	.word	0x080112d0

08007b98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	220f      	movs	r2, #15
 8007ba6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ba8:	4b12      	ldr	r3, [pc, #72]	@ (8007bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f003 0203 	and.w	r2, r3, #3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8007bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007bcc:	4b09      	ldr	r3, [pc, #36]	@ (8007bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	08db      	lsrs	r3, r3, #3
 8007bd2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007bda:	4b07      	ldr	r3, [pc, #28]	@ (8007bf8 <HAL_RCC_GetClockConfig+0x60>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0207 	and.w	r2, r3, #7
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	601a      	str	r2, [r3, #0]
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	40023800 	.word	0x40023800
 8007bf8:	40023c00 	.word	0x40023c00

08007bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e041      	b.n	8007c92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d106      	bne.n	8007c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f839 	bl	8007c9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3304      	adds	r3, #4
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4610      	mov	r0, r2
 8007c3c:	f000 fc7a 	bl	8008534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2201      	movs	r2, #1
 8007c44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007ca2:	bf00      	nop
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
	...

08007cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d001      	beq.n	8007cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e044      	b.n	8007d52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68da      	ldr	r2, [r3, #12]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0201 	orr.w	r2, r2, #1
 8007cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8007d60 <HAL_TIM_Base_Start_IT+0xb0>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d018      	beq.n	8007d1c <HAL_TIM_Base_Start_IT+0x6c>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cf2:	d013      	beq.n	8007d1c <HAL_TIM_Base_Start_IT+0x6c>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8007d64 <HAL_TIM_Base_Start_IT+0xb4>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d00e      	beq.n	8007d1c <HAL_TIM_Base_Start_IT+0x6c>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a19      	ldr	r2, [pc, #100]	@ (8007d68 <HAL_TIM_Base_Start_IT+0xb8>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d009      	beq.n	8007d1c <HAL_TIM_Base_Start_IT+0x6c>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a17      	ldr	r2, [pc, #92]	@ (8007d6c <HAL_TIM_Base_Start_IT+0xbc>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d004      	beq.n	8007d1c <HAL_TIM_Base_Start_IT+0x6c>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a16      	ldr	r2, [pc, #88]	@ (8007d70 <HAL_TIM_Base_Start_IT+0xc0>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d111      	bne.n	8007d40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f003 0307 	and.w	r3, r3, #7
 8007d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b06      	cmp	r3, #6
 8007d2c:	d010      	beq.n	8007d50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f042 0201 	orr.w	r2, r2, #1
 8007d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d3e:	e007      	b.n	8007d50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f042 0201 	orr.w	r2, r2, #1
 8007d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	40010000 	.word	0x40010000
 8007d64:	40000400 	.word	0x40000400
 8007d68:	40000800 	.word	0x40000800
 8007d6c:	40000c00 	.word	0x40000c00
 8007d70:	40014000 	.word	0x40014000

08007d74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d109      	bne.n	8007d98 <HAL_TIM_PWM_Start+0x24>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	bf14      	ite	ne
 8007d90:	2301      	movne	r3, #1
 8007d92:	2300      	moveq	r3, #0
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	e022      	b.n	8007dde <HAL_TIM_PWM_Start+0x6a>
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	2b04      	cmp	r3, #4
 8007d9c:	d109      	bne.n	8007db2 <HAL_TIM_PWM_Start+0x3e>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	bf14      	ite	ne
 8007daa:	2301      	movne	r3, #1
 8007dac:	2300      	moveq	r3, #0
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	e015      	b.n	8007dde <HAL_TIM_PWM_Start+0x6a>
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2b08      	cmp	r3, #8
 8007db6:	d109      	bne.n	8007dcc <HAL_TIM_PWM_Start+0x58>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	bf14      	ite	ne
 8007dc4:	2301      	movne	r3, #1
 8007dc6:	2300      	moveq	r3, #0
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	e008      	b.n	8007dde <HAL_TIM_PWM_Start+0x6a>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	bf14      	ite	ne
 8007dd8:	2301      	movne	r3, #1
 8007dda:	2300      	moveq	r3, #0
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e068      	b.n	8007eb8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d104      	bne.n	8007df6 <HAL_TIM_PWM_Start+0x82>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007df4:	e013      	b.n	8007e1e <HAL_TIM_PWM_Start+0xaa>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d104      	bne.n	8007e06 <HAL_TIM_PWM_Start+0x92>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e04:	e00b      	b.n	8007e1e <HAL_TIM_PWM_Start+0xaa>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	d104      	bne.n	8007e16 <HAL_TIM_PWM_Start+0xa2>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e14:	e003      	b.n	8007e1e <HAL_TIM_PWM_Start+0xaa>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2202      	movs	r2, #2
 8007e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2201      	movs	r2, #1
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 fd90 	bl	800894c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a23      	ldr	r2, [pc, #140]	@ (8007ec0 <HAL_TIM_PWM_Start+0x14c>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d107      	bne.n	8007e46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8007ec0 <HAL_TIM_PWM_Start+0x14c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d018      	beq.n	8007e82 <HAL_TIM_PWM_Start+0x10e>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e58:	d013      	beq.n	8007e82 <HAL_TIM_PWM_Start+0x10e>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a19      	ldr	r2, [pc, #100]	@ (8007ec4 <HAL_TIM_PWM_Start+0x150>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00e      	beq.n	8007e82 <HAL_TIM_PWM_Start+0x10e>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a17      	ldr	r2, [pc, #92]	@ (8007ec8 <HAL_TIM_PWM_Start+0x154>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d009      	beq.n	8007e82 <HAL_TIM_PWM_Start+0x10e>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a16      	ldr	r2, [pc, #88]	@ (8007ecc <HAL_TIM_PWM_Start+0x158>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d004      	beq.n	8007e82 <HAL_TIM_PWM_Start+0x10e>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a14      	ldr	r2, [pc, #80]	@ (8007ed0 <HAL_TIM_PWM_Start+0x15c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d111      	bne.n	8007ea6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f003 0307 	and.w	r3, r3, #7
 8007e8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2b06      	cmp	r3, #6
 8007e92:	d010      	beq.n	8007eb6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f042 0201 	orr.w	r2, r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea4:	e007      	b.n	8007eb6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f042 0201 	orr.w	r2, r2, #1
 8007eb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	40010000 	.word	0x40010000
 8007ec4:	40000400 	.word	0x40000400
 8007ec8:	40000800 	.word	0x40000800
 8007ecc:	40000c00 	.word	0x40000c00
 8007ed0:	40014000 	.word	0x40014000

08007ed4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e097      	b.n	8008018 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d106      	bne.n	8007f02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f88f 	bl	8008020 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2202      	movs	r2, #2
 8007f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	6812      	ldr	r2, [r2, #0]
 8007f14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f18:	f023 0307 	bic.w	r3, r3, #7
 8007f1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	3304      	adds	r3, #4
 8007f26:	4619      	mov	r1, r3
 8007f28:	4610      	mov	r0, r2
 8007f2a:	f000 fb03 	bl	8008534 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f56:	f023 0303 	bic.w	r3, r3, #3
 8007f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	689a      	ldr	r2, [r3, #8]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	4313      	orrs	r3, r2
 8007f68:	693a      	ldr	r2, [r7, #16]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007f74:	f023 030c 	bic.w	r3, r3, #12
 8007f78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	021b      	lsls	r3, r3, #8
 8007f90:	4313      	orrs	r3, r2
 8007f92:	693a      	ldr	r2, [r7, #16]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	011a      	lsls	r2, r3, #4
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	031b      	lsls	r3, r3, #12
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007fb2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007fba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	695b      	ldr	r3, [r3, #20]
 8007fc4:	011b      	lsls	r3, r3, #4
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008044:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800804c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008054:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800805c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d110      	bne.n	8008086 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d102      	bne.n	8008070 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800806a:	7b7b      	ldrb	r3, [r7, #13]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d001      	beq.n	8008074 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e069      	b.n	8008148 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008084:	e031      	b.n	80080ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b04      	cmp	r3, #4
 800808a:	d110      	bne.n	80080ae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800808c:	7bbb      	ldrb	r3, [r7, #14]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d102      	bne.n	8008098 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008092:	7b3b      	ldrb	r3, [r7, #12]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d001      	beq.n	800809c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e055      	b.n	8008148 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080ac:	e01d      	b.n	80080ea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080ae:	7bfb      	ldrb	r3, [r7, #15]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d108      	bne.n	80080c6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80080b4:	7bbb      	ldrb	r3, [r7, #14]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d105      	bne.n	80080c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080ba:	7b7b      	ldrb	r3, [r7, #13]
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d102      	bne.n	80080c6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80080c0:	7b3b      	ldrb	r3, [r7, #12]
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d001      	beq.n	80080ca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e03e      	b.n	8008148 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2202      	movs	r2, #2
 80080ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2202      	movs	r2, #2
 80080d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2202      	movs	r2, #2
 80080de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2202      	movs	r2, #2
 80080e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d003      	beq.n	80080f8 <HAL_TIM_Encoder_Start+0xc4>
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d008      	beq.n	8008108 <HAL_TIM_Encoder_Start+0xd4>
 80080f6:	e00f      	b.n	8008118 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2201      	movs	r2, #1
 80080fe:	2100      	movs	r1, #0
 8008100:	4618      	mov	r0, r3
 8008102:	f000 fc23 	bl	800894c <TIM_CCxChannelCmd>
      break;
 8008106:	e016      	b.n	8008136 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2201      	movs	r2, #1
 800810e:	2104      	movs	r1, #4
 8008110:	4618      	mov	r0, r3
 8008112:	f000 fc1b 	bl	800894c <TIM_CCxChannelCmd>
      break;
 8008116:	e00e      	b.n	8008136 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2201      	movs	r2, #1
 800811e:	2100      	movs	r1, #0
 8008120:	4618      	mov	r0, r3
 8008122:	f000 fc13 	bl	800894c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2201      	movs	r2, #1
 800812c:	2104      	movs	r1, #4
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fc0c 	bl	800894c <TIM_CCxChannelCmd>
      break;
 8008134:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f042 0201 	orr.w	r2, r2, #1
 8008144:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	f003 0302 	and.w	r3, r3, #2
 8008162:	2b02      	cmp	r3, #2
 8008164:	d122      	bne.n	80081ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b02      	cmp	r3, #2
 8008172:	d11b      	bne.n	80081ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f06f 0202 	mvn.w	r2, #2
 800817c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	f003 0303 	and.w	r3, r3, #3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f9b0 	bl	80084f8 <HAL_TIM_IC_CaptureCallback>
 8008198:	e005      	b.n	80081a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f9a2 	bl	80084e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f9b3 	bl	800850c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	f003 0304 	and.w	r3, r3, #4
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	d122      	bne.n	8008200 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	f003 0304 	and.w	r3, r3, #4
 80081c4:	2b04      	cmp	r3, #4
 80081c6:	d11b      	bne.n	8008200 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f06f 0204 	mvn.w	r2, #4
 80081d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2202      	movs	r2, #2
 80081d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f986 	bl	80084f8 <HAL_TIM_IC_CaptureCallback>
 80081ec:	e005      	b.n	80081fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f978 	bl	80084e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f989 	bl	800850c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	f003 0308 	and.w	r3, r3, #8
 800820a:	2b08      	cmp	r3, #8
 800820c:	d122      	bne.n	8008254 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f003 0308 	and.w	r3, r3, #8
 8008218:	2b08      	cmp	r3, #8
 800821a:	d11b      	bne.n	8008254 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f06f 0208 	mvn.w	r2, #8
 8008224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2204      	movs	r2, #4
 800822a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	f003 0303 	and.w	r3, r3, #3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f95c 	bl	80084f8 <HAL_TIM_IC_CaptureCallback>
 8008240:	e005      	b.n	800824e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f94e 	bl	80084e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f95f 	bl	800850c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	f003 0310 	and.w	r3, r3, #16
 800825e:	2b10      	cmp	r3, #16
 8008260:	d122      	bne.n	80082a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f003 0310 	and.w	r3, r3, #16
 800826c:	2b10      	cmp	r3, #16
 800826e:	d11b      	bne.n	80082a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f06f 0210 	mvn.w	r2, #16
 8008278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2208      	movs	r2, #8
 800827e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f932 	bl	80084f8 <HAL_TIM_IC_CaptureCallback>
 8008294:	e005      	b.n	80082a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f924 	bl	80084e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f935 	bl	800850c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d10e      	bne.n	80082d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d107      	bne.n	80082d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f06f 0201 	mvn.w	r2, #1
 80082cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f7fa f9fa 	bl	80026c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082de:	2b80      	cmp	r3, #128	@ 0x80
 80082e0:	d10e      	bne.n	8008300 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ec:	2b80      	cmp	r3, #128	@ 0x80
 80082ee:	d107      	bne.n	8008300 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80082f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fb55 	bl	80089aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800830a:	2b40      	cmp	r3, #64	@ 0x40
 800830c:	d10e      	bne.n	800832c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008318:	2b40      	cmp	r3, #64	@ 0x40
 800831a:	d107      	bne.n	800832c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f8fa 	bl	8008520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	f003 0320 	and.w	r3, r3, #32
 8008336:	2b20      	cmp	r3, #32
 8008338:	d10e      	bne.n	8008358 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f003 0320 	and.w	r3, r3, #32
 8008344:	2b20      	cmp	r3, #32
 8008346:	d107      	bne.n	8008358 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f06f 0220 	mvn.w	r2, #32
 8008350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fb1f 	bl	8008996 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008358:	bf00      	nop
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008376:	2b01      	cmp	r3, #1
 8008378:	d101      	bne.n	800837e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800837a:	2302      	movs	r3, #2
 800837c:	e0ae      	b.n	80084dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b0c      	cmp	r3, #12
 800838a:	f200 809f 	bhi.w	80084cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800838e:	a201      	add	r2, pc, #4	@ (adr r2, 8008394 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008394:	080083c9 	.word	0x080083c9
 8008398:	080084cd 	.word	0x080084cd
 800839c:	080084cd 	.word	0x080084cd
 80083a0:	080084cd 	.word	0x080084cd
 80083a4:	08008409 	.word	0x08008409
 80083a8:	080084cd 	.word	0x080084cd
 80083ac:	080084cd 	.word	0x080084cd
 80083b0:	080084cd 	.word	0x080084cd
 80083b4:	0800844b 	.word	0x0800844b
 80083b8:	080084cd 	.word	0x080084cd
 80083bc:	080084cd 	.word	0x080084cd
 80083c0:	080084cd 	.word	0x080084cd
 80083c4:	0800848b 	.word	0x0800848b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68b9      	ldr	r1, [r7, #8]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 f930 	bl	8008634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	699a      	ldr	r2, [r3, #24]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f042 0208 	orr.w	r2, r2, #8
 80083e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	699a      	ldr	r2, [r3, #24]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 0204 	bic.w	r2, r2, #4
 80083f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6999      	ldr	r1, [r3, #24]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	691a      	ldr	r2, [r3, #16]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	430a      	orrs	r2, r1
 8008404:	619a      	str	r2, [r3, #24]
      break;
 8008406:	e064      	b.n	80084d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68b9      	ldr	r1, [r7, #8]
 800840e:	4618      	mov	r0, r3
 8008410:	f000 f976 	bl	8008700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	699a      	ldr	r2, [r3, #24]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	699a      	ldr	r2, [r3, #24]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6999      	ldr	r1, [r3, #24]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	021a      	lsls	r2, r3, #8
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	430a      	orrs	r2, r1
 8008446:	619a      	str	r2, [r3, #24]
      break;
 8008448:	e043      	b.n	80084d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68b9      	ldr	r1, [r7, #8]
 8008450:	4618      	mov	r0, r3
 8008452:	f000 f9c1 	bl	80087d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69da      	ldr	r2, [r3, #28]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f042 0208 	orr.w	r2, r2, #8
 8008464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69da      	ldr	r2, [r3, #28]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f022 0204 	bic.w	r2, r2, #4
 8008474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	69d9      	ldr	r1, [r3, #28]
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	691a      	ldr	r2, [r3, #16]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	61da      	str	r2, [r3, #28]
      break;
 8008488:	e023      	b.n	80084d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68b9      	ldr	r1, [r7, #8]
 8008490:	4618      	mov	r0, r3
 8008492:	f000 fa0b 	bl	80088ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	69da      	ldr	r2, [r3, #28]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	69da      	ldr	r2, [r3, #28]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	69d9      	ldr	r1, [r3, #28]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	691b      	ldr	r3, [r3, #16]
 80084c0:	021a      	lsls	r2, r3, #8
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	61da      	str	r2, [r3, #28]
      break;
 80084ca:	e002      	b.n	80084d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	75fb      	strb	r3, [r7, #23]
      break;
 80084d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084da:	7dfb      	ldrb	r3, [r7, #23]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a34      	ldr	r2, [pc, #208]	@ (8008618 <TIM_Base_SetConfig+0xe4>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d00f      	beq.n	800856c <TIM_Base_SetConfig+0x38>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008552:	d00b      	beq.n	800856c <TIM_Base_SetConfig+0x38>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a31      	ldr	r2, [pc, #196]	@ (800861c <TIM_Base_SetConfig+0xe8>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d007      	beq.n	800856c <TIM_Base_SetConfig+0x38>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a30      	ldr	r2, [pc, #192]	@ (8008620 <TIM_Base_SetConfig+0xec>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d003      	beq.n	800856c <TIM_Base_SetConfig+0x38>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a2f      	ldr	r2, [pc, #188]	@ (8008624 <TIM_Base_SetConfig+0xf0>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d108      	bne.n	800857e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	4313      	orrs	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a25      	ldr	r2, [pc, #148]	@ (8008618 <TIM_Base_SetConfig+0xe4>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d01b      	beq.n	80085be <TIM_Base_SetConfig+0x8a>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800858c:	d017      	beq.n	80085be <TIM_Base_SetConfig+0x8a>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a22      	ldr	r2, [pc, #136]	@ (800861c <TIM_Base_SetConfig+0xe8>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d013      	beq.n	80085be <TIM_Base_SetConfig+0x8a>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a21      	ldr	r2, [pc, #132]	@ (8008620 <TIM_Base_SetConfig+0xec>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d00f      	beq.n	80085be <TIM_Base_SetConfig+0x8a>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a20      	ldr	r2, [pc, #128]	@ (8008624 <TIM_Base_SetConfig+0xf0>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d00b      	beq.n	80085be <TIM_Base_SetConfig+0x8a>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a1f      	ldr	r2, [pc, #124]	@ (8008628 <TIM_Base_SetConfig+0xf4>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d007      	beq.n	80085be <TIM_Base_SetConfig+0x8a>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a1e      	ldr	r2, [pc, #120]	@ (800862c <TIM_Base_SetConfig+0xf8>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d003      	beq.n	80085be <TIM_Base_SetConfig+0x8a>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008630 <TIM_Base_SetConfig+0xfc>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d108      	bne.n	80085d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	4313      	orrs	r3, r2
 80085dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	689a      	ldr	r2, [r3, #8]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a08      	ldr	r2, [pc, #32]	@ (8008618 <TIM_Base_SetConfig+0xe4>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d103      	bne.n	8008604 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	691a      	ldr	r2, [r3, #16]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	615a      	str	r2, [r3, #20]
}
 800860a:	bf00      	nop
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	40010000 	.word	0x40010000
 800861c:	40000400 	.word	0x40000400
 8008620:	40000800 	.word	0x40000800
 8008624:	40000c00 	.word	0x40000c00
 8008628:	40014000 	.word	0x40014000
 800862c:	40014400 	.word	0x40014400
 8008630:	40014800 	.word	0x40014800

08008634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	f023 0201 	bic.w	r2, r3, #1
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f023 0303 	bic.w	r3, r3, #3
 800866a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	4313      	orrs	r3, r2
 8008674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f023 0302 	bic.w	r3, r3, #2
 800867c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	4313      	orrs	r3, r2
 8008686:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a1c      	ldr	r2, [pc, #112]	@ (80086fc <TIM_OC1_SetConfig+0xc8>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d10c      	bne.n	80086aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	f023 0308 	bic.w	r3, r3, #8
 8008696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	697a      	ldr	r2, [r7, #20]
 800869e:	4313      	orrs	r3, r2
 80086a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f023 0304 	bic.w	r3, r3, #4
 80086a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a13      	ldr	r2, [pc, #76]	@ (80086fc <TIM_OC1_SetConfig+0xc8>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d111      	bne.n	80086d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	621a      	str	r2, [r3, #32]
}
 80086f0:	bf00      	nop
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	40010000 	.word	0x40010000

08008700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	f023 0210 	bic.w	r2, r3, #16
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800872e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	021b      	lsls	r3, r3, #8
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	4313      	orrs	r3, r2
 8008742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	f023 0320 	bic.w	r3, r3, #32
 800874a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	011b      	lsls	r3, r3, #4
 8008752:	697a      	ldr	r2, [r7, #20]
 8008754:	4313      	orrs	r3, r2
 8008756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a1e      	ldr	r2, [pc, #120]	@ (80087d4 <TIM_OC2_SetConfig+0xd4>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d10d      	bne.n	800877c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	011b      	lsls	r3, r3, #4
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	4313      	orrs	r3, r2
 8008772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800877a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a15      	ldr	r2, [pc, #84]	@ (80087d4 <TIM_OC2_SetConfig+0xd4>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d113      	bne.n	80087ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800878a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008792:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	695b      	ldr	r3, [r3, #20]
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	4313      	orrs	r3, r2
 800879e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	621a      	str	r2, [r3, #32]
}
 80087c6:	bf00      	nop
 80087c8:	371c      	adds	r7, #28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	40010000 	.word	0x40010000

080087d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a1b      	ldr	r3, [r3, #32]
 80087e6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f023 0303 	bic.w	r3, r3, #3
 800880e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	4313      	orrs	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	021b      	lsls	r3, r3, #8
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	4313      	orrs	r3, r2
 800882c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a1d      	ldr	r2, [pc, #116]	@ (80088a8 <TIM_OC3_SetConfig+0xd0>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d10d      	bne.n	8008852 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800883c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	021b      	lsls	r3, r3, #8
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	4313      	orrs	r3, r2
 8008848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a14      	ldr	r2, [pc, #80]	@ (80088a8 <TIM_OC3_SetConfig+0xd0>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d113      	bne.n	8008882 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	011b      	lsls	r3, r3, #4
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	4313      	orrs	r3, r2
 8008874:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	011b      	lsls	r3, r3, #4
 800887c:	693a      	ldr	r2, [r7, #16]
 800887e:	4313      	orrs	r3, r2
 8008880:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	685a      	ldr	r2, [r3, #4]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	621a      	str	r2, [r3, #32]
}
 800889c:	bf00      	nop
 800889e:	371c      	adds	r7, #28
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr
 80088a8:	40010000 	.word	0x40010000

080088ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	021b      	lsls	r3, r3, #8
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80088f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	031b      	lsls	r3, r3, #12
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	4313      	orrs	r3, r2
 8008902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a10      	ldr	r2, [pc, #64]	@ (8008948 <TIM_OC4_SetConfig+0x9c>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d109      	bne.n	8008920 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	019b      	lsls	r3, r3, #6
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	4313      	orrs	r3, r2
 800891e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	621a      	str	r2, [r3, #32]
}
 800893a:	bf00      	nop
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	40010000 	.word	0x40010000

0800894c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800894c:	b480      	push	{r7}
 800894e:	b087      	sub	sp, #28
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f003 031f 	and.w	r3, r3, #31
 800895e:	2201      	movs	r2, #1
 8008960:	fa02 f303 	lsl.w	r3, r2, r3
 8008964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6a1a      	ldr	r2, [r3, #32]
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	43db      	mvns	r3, r3
 800896e:	401a      	ands	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6a1a      	ldr	r2, [r3, #32]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f003 031f 	and.w	r3, r3, #31
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	fa01 f303 	lsl.w	r3, r1, r3
 8008984:	431a      	orrs	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	621a      	str	r2, [r3, #32]
}
 800898a:	bf00      	nop
 800898c:	371c      	adds	r7, #28
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008996:	b480      	push	{r7}
 8008998:	b083      	sub	sp, #12
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800899e:	bf00      	nop
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089b2:	bf00      	nop
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr

080089be <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b082      	sub	sp, #8
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e03f      	b.n	8008a50 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d106      	bne.n	80089ea <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7fa faa9 	bl	8002f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2224      	movs	r2, #36	@ 0x24
 80089ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68da      	ldr	r2, [r3, #12]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a00:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fd7a 	bl	80094fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	691a      	ldr	r2, [r3, #16]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	695a      	ldr	r2, [r3, #20]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a26:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68da      	ldr	r2, [r3, #12]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a36:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2220      	movs	r2, #32
 8008a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b08a      	sub	sp, #40	@ 0x28
 8008a5c:	af02      	add	r7, sp, #8
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	4613      	mov	r3, r2
 8008a66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b20      	cmp	r3, #32
 8008a76:	d17c      	bne.n	8008b72 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d002      	beq.n	8008a84 <HAL_UART_Transmit+0x2c>
 8008a7e:	88fb      	ldrh	r3, [r7, #6]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e075      	b.n	8008b74 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d101      	bne.n	8008a96 <HAL_UART_Transmit+0x3e>
 8008a92:	2302      	movs	r3, #2
 8008a94:	e06e      	b.n	8008b74 <HAL_UART_Transmit+0x11c>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2221      	movs	r2, #33	@ 0x21
 8008aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008aac:	f7fb f82e 	bl	8003b0c <HAL_GetTick>
 8008ab0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	88fa      	ldrh	r2, [r7, #6]
 8008ab6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	88fa      	ldrh	r2, [r7, #6]
 8008abc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ac6:	d108      	bne.n	8008ada <HAL_UART_Transmit+0x82>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d104      	bne.n	8008ada <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	e003      	b.n	8008ae2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    while (huart->TxXferCount > 0U)
 8008aea:	e02a      	b.n	8008b42 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	2200      	movs	r2, #0
 8008af4:	2180      	movs	r1, #128	@ 0x80
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 faf8 	bl	80090ec <UART_WaitOnFlagUntilTimeout>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008b02:	2303      	movs	r3, #3
 8008b04:	e036      	b.n	8008b74 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10b      	bne.n	8008b24 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	881b      	ldrh	r3, [r3, #0]
 8008b10:	461a      	mov	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b1a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	3302      	adds	r3, #2
 8008b20:	61bb      	str	r3, [r7, #24]
 8008b22:	e007      	b.n	8008b34 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	781a      	ldrb	r2, [r3, #0]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	3301      	adds	r3, #1
 8008b32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1cf      	bne.n	8008aec <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	2200      	movs	r2, #0
 8008b54:	2140      	movs	r1, #64	@ 0x40
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f000 fac8 	bl	80090ec <UART_WaitOnFlagUntilTimeout>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e006      	b.n	8008b74 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e000      	b.n	8008b74 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008b72:	2302      	movs	r3, #2
  }
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3720      	adds	r7, #32
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b0ba      	sub	sp, #232	@ 0xe8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bb2:	f003 030f 	and.w	r3, r3, #15
 8008bb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10f      	bne.n	8008be2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bc6:	f003 0320 	and.w	r3, r3, #32
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d009      	beq.n	8008be2 <HAL_UART_IRQHandler+0x66>
 8008bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bd2:	f003 0320 	and.w	r3, r3, #32
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fbd3 	bl	8009386 <UART_Receive_IT>
      return;
 8008be0:	e256      	b.n	8009090 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 80de 	beq.w	8008da8 <HAL_UART_IRQHandler+0x22c>
 8008bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d106      	bne.n	8008c06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bfc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 80d1 	beq.w	8008da8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00b      	beq.n	8008c2a <HAL_UART_IRQHandler+0xae>
 8008c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d005      	beq.n	8008c2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c22:	f043 0201 	orr.w	r2, r3, #1
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c2e:	f003 0304 	and.w	r3, r3, #4
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00b      	beq.n	8008c4e <HAL_UART_IRQHandler+0xd2>
 8008c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d005      	beq.n	8008c4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c46:	f043 0202 	orr.w	r2, r3, #2
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00b      	beq.n	8008c72 <HAL_UART_IRQHandler+0xf6>
 8008c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d005      	beq.n	8008c72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c6a:	f043 0204 	orr.w	r2, r3, #4
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c76:	f003 0308 	and.w	r3, r3, #8
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d011      	beq.n	8008ca2 <HAL_UART_IRQHandler+0x126>
 8008c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c82:	f003 0320 	and.w	r3, r3, #32
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d105      	bne.n	8008c96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d005      	beq.n	8008ca2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c9a:	f043 0208 	orr.w	r2, r3, #8
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 81ed 	beq.w	8009086 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cb0:	f003 0320 	and.w	r3, r3, #32
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d008      	beq.n	8008cca <HAL_UART_IRQHandler+0x14e>
 8008cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cbc:	f003 0320 	and.w	r3, r3, #32
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fb5e 	bl	8009386 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd4:	2b40      	cmp	r3, #64	@ 0x40
 8008cd6:	bf0c      	ite	eq
 8008cd8:	2301      	moveq	r3, #1
 8008cda:	2300      	movne	r3, #0
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce6:	f003 0308 	and.w	r3, r3, #8
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d103      	bne.n	8008cf6 <HAL_UART_IRQHandler+0x17a>
 8008cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d04f      	beq.n	8008d96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fa66 	bl	80091c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d06:	2b40      	cmp	r3, #64	@ 0x40
 8008d08:	d141      	bne.n	8008d8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3314      	adds	r3, #20
 8008d10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3314      	adds	r3, #20
 8008d32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008d36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008d42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008d46:	e841 2300 	strex	r3, r2, [r1]
 8008d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008d4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1d9      	bne.n	8008d0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d013      	beq.n	8008d86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d62:	4a7d      	ldr	r2, [pc, #500]	@ (8008f58 <HAL_UART_IRQHandler+0x3dc>)
 8008d64:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fb fa12 	bl	8004194 <HAL_DMA_Abort_IT>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d016      	beq.n	8008da4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008d80:	4610      	mov	r0, r2
 8008d82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d84:	e00e      	b.n	8008da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f99a 	bl	80090c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d8c:	e00a      	b.n	8008da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f996 	bl	80090c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d94:	e006      	b.n	8008da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f992 	bl	80090c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008da2:	e170      	b.n	8009086 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008da4:	bf00      	nop
    return;
 8008da6:	e16e      	b.n	8009086 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	f040 814a 	bne.w	8009046 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008db6:	f003 0310 	and.w	r3, r3, #16
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 8143 	beq.w	8009046 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dc4:	f003 0310 	and.w	r3, r3, #16
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 813c 	beq.w	8009046 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60bb      	str	r3, [r7, #8]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	60bb      	str	r3, [r7, #8]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	60bb      	str	r3, [r7, #8]
 8008de2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dee:	2b40      	cmp	r3, #64	@ 0x40
 8008df0:	f040 80b4 	bne.w	8008f5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 8140 	beq.w	800908a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e12:	429a      	cmp	r2, r3
 8008e14:	f080 8139 	bcs.w	800908a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e2a:	f000 8088 	beq.w	8008f3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	330c      	adds	r3, #12
 8008e34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e38:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e3c:	e853 3f00 	ldrex	r3, [r3]
 8008e40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	330c      	adds	r3, #12
 8008e56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008e5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008e5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e62:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e6a:	e841 2300 	strex	r3, r2, [r1]
 8008e6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d1d9      	bne.n	8008e2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	3314      	adds	r3, #20
 8008e80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e84:	e853 3f00 	ldrex	r3, [r3]
 8008e88:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e8c:	f023 0301 	bic.w	r3, r3, #1
 8008e90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3314      	adds	r3, #20
 8008e9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e9e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ea2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008ea6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008eb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1e1      	bne.n	8008e7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3314      	adds	r3, #20
 8008ebc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ec0:	e853 3f00 	ldrex	r3, [r3]
 8008ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ec8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3314      	adds	r3, #20
 8008ed6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008eda:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008edc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ede:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ee0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ee2:	e841 2300 	strex	r3, r2, [r1]
 8008ee6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008ee8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1e3      	bne.n	8008eb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2220      	movs	r2, #32
 8008ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	330c      	adds	r3, #12
 8008f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f06:	e853 3f00 	ldrex	r3, [r3]
 8008f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f0e:	f023 0310 	bic.w	r3, r3, #16
 8008f12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	330c      	adds	r3, #12
 8008f1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008f20:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008f22:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f28:	e841 2300 	strex	r3, r2, [r1]
 8008f2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1e3      	bne.n	8008efc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fb f8bb 	bl	80040b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f8c0 	bl	80090d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f54:	e099      	b.n	800908a <HAL_UART_IRQHandler+0x50e>
 8008f56:	bf00      	nop
 8008f58:	0800928f 	.word	0x0800928f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 808b 	beq.w	800908e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008f78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 8086 	beq.w	800908e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	330c      	adds	r3, #12
 8008f88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f8c:	e853 3f00 	ldrex	r3, [r3]
 8008f90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	330c      	adds	r3, #12
 8008fa2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008fa6:	647a      	str	r2, [r7, #68]	@ 0x44
 8008fa8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008faa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fae:	e841 2300 	strex	r3, r2, [r1]
 8008fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1e3      	bne.n	8008f82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3314      	adds	r3, #20
 8008fc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	f023 0301 	bic.w	r3, r3, #1
 8008fd0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3314      	adds	r3, #20
 8008fda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008fde:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1e3      	bne.n	8008fba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2220      	movs	r2, #32
 8008ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	330c      	adds	r3, #12
 8009006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	e853 3f00 	ldrex	r3, [r3]
 800900e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f023 0310 	bic.w	r3, r3, #16
 8009016:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	330c      	adds	r3, #12
 8009020:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009024:	61fa      	str	r2, [r7, #28]
 8009026:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009028:	69b9      	ldr	r1, [r7, #24]
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	e841 2300 	strex	r3, r2, [r1]
 8009030:	617b      	str	r3, [r7, #20]
   return(result);
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e3      	bne.n	8009000 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009038:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f848 	bl	80090d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009044:	e023      	b.n	800908e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800904a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800904e:	2b00      	cmp	r3, #0
 8009050:	d009      	beq.n	8009066 <HAL_UART_IRQHandler+0x4ea>
 8009052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f929 	bl	80092b6 <UART_Transmit_IT>
    return;
 8009064:	e014      	b.n	8009090 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800906a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00e      	beq.n	8009090 <HAL_UART_IRQHandler+0x514>
 8009072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800907a:	2b00      	cmp	r3, #0
 800907c:	d008      	beq.n	8009090 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f969 	bl	8009356 <UART_EndTransmit_IT>
    return;
 8009084:	e004      	b.n	8009090 <HAL_UART_IRQHandler+0x514>
    return;
 8009086:	bf00      	nop
 8009088:	e002      	b.n	8009090 <HAL_UART_IRQHandler+0x514>
      return;
 800908a:	bf00      	nop
 800908c:	e000      	b.n	8009090 <HAL_UART_IRQHandler+0x514>
      return;
 800908e:	bf00      	nop
  }
}
 8009090:	37e8      	adds	r7, #232	@ 0xe8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop

08009098 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b090      	sub	sp, #64	@ 0x40
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	603b      	str	r3, [r7, #0]
 80090f8:	4613      	mov	r3, r2
 80090fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090fc:	e050      	b.n	80091a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009100:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009104:	d04c      	beq.n	80091a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009108:	2b00      	cmp	r3, #0
 800910a:	d007      	beq.n	800911c <UART_WaitOnFlagUntilTimeout+0x30>
 800910c:	f7fa fcfe 	bl	8003b0c <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009118:	429a      	cmp	r2, r3
 800911a:	d241      	bcs.n	80091a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	330c      	adds	r3, #12
 8009122:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009126:	e853 3f00 	ldrex	r3, [r3]
 800912a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800912c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009132:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	330c      	adds	r3, #12
 800913a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800913c:	637a      	str	r2, [r7, #52]	@ 0x34
 800913e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009140:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009142:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009144:	e841 2300 	strex	r3, r2, [r1]
 8009148:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800914a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1e5      	bne.n	800911c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	3314      	adds	r3, #20
 8009156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	e853 3f00 	ldrex	r3, [r3]
 800915e:	613b      	str	r3, [r7, #16]
   return(result);
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	f023 0301 	bic.w	r3, r3, #1
 8009166:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3314      	adds	r3, #20
 800916e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009170:	623a      	str	r2, [r7, #32]
 8009172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009174:	69f9      	ldr	r1, [r7, #28]
 8009176:	6a3a      	ldr	r2, [r7, #32]
 8009178:	e841 2300 	strex	r3, r2, [r1]
 800917c:	61bb      	str	r3, [r7, #24]
   return(result);
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1e5      	bne.n	8009150 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2220      	movs	r2, #32
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2220      	movs	r2, #32
 8009190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e00f      	b.n	80091c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	4013      	ands	r3, r2
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	bf0c      	ite	eq
 80091b0:	2301      	moveq	r3, #1
 80091b2:	2300      	movne	r3, #0
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	461a      	mov	r2, r3
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d09f      	beq.n	80090fe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3740      	adds	r7, #64	@ 0x40
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b095      	sub	sp, #84	@ 0x54
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	330c      	adds	r3, #12
 80091d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091da:	e853 3f00 	ldrex	r3, [r3]
 80091de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80091e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	330c      	adds	r3, #12
 80091ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80091f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80091f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091f8:	e841 2300 	strex	r3, r2, [r1]
 80091fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1e5      	bne.n	80091d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3314      	adds	r3, #20
 800920a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920c:	6a3b      	ldr	r3, [r7, #32]
 800920e:	e853 3f00 	ldrex	r3, [r3]
 8009212:	61fb      	str	r3, [r7, #28]
   return(result);
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	f023 0301 	bic.w	r3, r3, #1
 800921a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3314      	adds	r3, #20
 8009222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009224:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009226:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800922a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800922c:	e841 2300 	strex	r3, r2, [r1]
 8009230:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1e5      	bne.n	8009204 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800923c:	2b01      	cmp	r3, #1
 800923e:	d119      	bne.n	8009274 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	330c      	adds	r3, #12
 8009246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	e853 3f00 	ldrex	r3, [r3]
 800924e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f023 0310 	bic.w	r3, r3, #16
 8009256:	647b      	str	r3, [r7, #68]	@ 0x44
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	330c      	adds	r3, #12
 800925e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009260:	61ba      	str	r2, [r7, #24]
 8009262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009264:	6979      	ldr	r1, [r7, #20]
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	613b      	str	r3, [r7, #16]
   return(result);
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e5      	bne.n	8009240 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2220      	movs	r2, #32
 8009278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009282:	bf00      	nop
 8009284:	3754      	adds	r7, #84	@ 0x54
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr

0800928e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800929a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f7ff ff09 	bl	80090c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092ae:	bf00      	nop
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b085      	sub	sp, #20
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b21      	cmp	r3, #33	@ 0x21
 80092c8:	d13e      	bne.n	8009348 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092d2:	d114      	bne.n	80092fe <UART_Transmit_IT+0x48>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d110      	bne.n	80092fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a1b      	ldr	r3, [r3, #32]
 80092e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	881b      	ldrh	r3, [r3, #0]
 80092e6:	461a      	mov	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80092f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	1c9a      	adds	r2, r3, #2
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	621a      	str	r2, [r3, #32]
 80092fc:	e008      	b.n	8009310 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	1c59      	adds	r1, r3, #1
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	6211      	str	r1, [r2, #32]
 8009308:	781a      	ldrb	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009314:	b29b      	uxth	r3, r3
 8009316:	3b01      	subs	r3, #1
 8009318:	b29b      	uxth	r3, r3
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	4619      	mov	r1, r3
 800931e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10f      	bne.n	8009344 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68da      	ldr	r2, [r3, #12]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009332:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68da      	ldr	r2, [r3, #12]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009342:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	e000      	b.n	800934a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009348:	2302      	movs	r3, #2
  }
}
 800934a:	4618      	mov	r0, r3
 800934c:	3714      	adds	r7, #20
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b082      	sub	sp, #8
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68da      	ldr	r2, [r3, #12]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800936c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2220      	movs	r2, #32
 8009372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7ff fe8e 	bl	8009098 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800937c:	2300      	movs	r3, #0
}
 800937e:	4618      	mov	r0, r3
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b08c      	sub	sp, #48	@ 0x30
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2b22      	cmp	r3, #34	@ 0x22
 8009398:	f040 80ab 	bne.w	80094f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093a4:	d117      	bne.n	80093d6 <UART_Receive_IT+0x50>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d113      	bne.n	80093d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	b29b      	uxth	r3, r3
 80093c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ce:	1c9a      	adds	r2, r3, #2
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80093d4:	e026      	b.n	8009424 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80093dc:	2300      	movs	r3, #0
 80093de:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093e8:	d007      	beq.n	80093fa <UART_Receive_IT+0x74>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10a      	bne.n	8009408 <UART_Receive_IT+0x82>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d106      	bne.n	8009408 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	b2da      	uxtb	r2, r3
 8009402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009404:	701a      	strb	r2, [r3, #0]
 8009406:	e008      	b.n	800941a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009414:	b2da      	uxtb	r2, r3
 8009416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009418:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800941e:	1c5a      	adds	r2, r3, #1
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009428:	b29b      	uxth	r3, r3
 800942a:	3b01      	subs	r3, #1
 800942c:	b29b      	uxth	r3, r3
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	4619      	mov	r1, r3
 8009432:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009434:	2b00      	cmp	r3, #0
 8009436:	d15a      	bne.n	80094ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	68da      	ldr	r2, [r3, #12]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f022 0220 	bic.w	r2, r2, #32
 8009446:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68da      	ldr	r2, [r3, #12]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009456:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	695a      	ldr	r2, [r3, #20]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f022 0201 	bic.w	r2, r2, #1
 8009466:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2220      	movs	r2, #32
 800946c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009474:	2b01      	cmp	r3, #1
 8009476:	d135      	bne.n	80094e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	330c      	adds	r3, #12
 8009484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	613b      	str	r3, [r7, #16]
   return(result);
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	f023 0310 	bic.w	r3, r3, #16
 8009494:	627b      	str	r3, [r7, #36]	@ 0x24
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	330c      	adds	r3, #12
 800949c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800949e:	623a      	str	r2, [r7, #32]
 80094a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a2:	69f9      	ldr	r1, [r7, #28]
 80094a4:	6a3a      	ldr	r2, [r7, #32]
 80094a6:	e841 2300 	strex	r3, r2, [r1]
 80094aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1e5      	bne.n	800947e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f003 0310 	and.w	r3, r3, #16
 80094bc:	2b10      	cmp	r3, #16
 80094be:	d10a      	bne.n	80094d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80094c0:	2300      	movs	r3, #0
 80094c2:	60fb      	str	r3, [r7, #12]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7ff fdf9 	bl	80090d4 <HAL_UARTEx_RxEventCallback>
 80094e2:	e002      	b.n	80094ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7ff fde1 	bl	80090ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	e002      	b.n	80094f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80094ee:	2300      	movs	r3, #0
 80094f0:	e000      	b.n	80094f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80094f2:	2302      	movs	r3, #2
  }
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3730      	adds	r7, #48	@ 0x30
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009500:	b0c0      	sub	sp, #256	@ 0x100
 8009502:	af00      	add	r7, sp, #0
 8009504:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	691b      	ldr	r3, [r3, #16]
 8009510:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009518:	68d9      	ldr	r1, [r3, #12]
 800951a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	ea40 0301 	orr.w	r3, r0, r1
 8009524:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800952a:	689a      	ldr	r2, [r3, #8]
 800952c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	431a      	orrs	r2, r3
 8009534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	431a      	orrs	r2, r3
 800953c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009540:	69db      	ldr	r3, [r3, #28]
 8009542:	4313      	orrs	r3, r2
 8009544:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009554:	f021 010c 	bic.w	r1, r1, #12
 8009558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009562:	430b      	orrs	r3, r1
 8009564:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009576:	6999      	ldr	r1, [r3, #24]
 8009578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	ea40 0301 	orr.w	r3, r0, r1
 8009582:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	4b8f      	ldr	r3, [pc, #572]	@ (80097c8 <UART_SetConfig+0x2cc>)
 800958c:	429a      	cmp	r2, r3
 800958e:	d005      	beq.n	800959c <UART_SetConfig+0xa0>
 8009590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	4b8d      	ldr	r3, [pc, #564]	@ (80097cc <UART_SetConfig+0x2d0>)
 8009598:	429a      	cmp	r2, r3
 800959a:	d104      	bne.n	80095a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800959c:	f7fe fae8 	bl	8007b70 <HAL_RCC_GetPCLK2Freq>
 80095a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80095a4:	e003      	b.n	80095ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095a6:	f7fe facf 	bl	8007b48 <HAL_RCC_GetPCLK1Freq>
 80095aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095b8:	f040 810c 	bne.w	80097d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095c0:	2200      	movs	r2, #0
 80095c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80095c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80095ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80095ce:	4622      	mov	r2, r4
 80095d0:	462b      	mov	r3, r5
 80095d2:	1891      	adds	r1, r2, r2
 80095d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80095d6:	415b      	adcs	r3, r3
 80095d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80095de:	4621      	mov	r1, r4
 80095e0:	eb12 0801 	adds.w	r8, r2, r1
 80095e4:	4629      	mov	r1, r5
 80095e6:	eb43 0901 	adc.w	r9, r3, r1
 80095ea:	f04f 0200 	mov.w	r2, #0
 80095ee:	f04f 0300 	mov.w	r3, #0
 80095f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095fe:	4690      	mov	r8, r2
 8009600:	4699      	mov	r9, r3
 8009602:	4623      	mov	r3, r4
 8009604:	eb18 0303 	adds.w	r3, r8, r3
 8009608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800960c:	462b      	mov	r3, r5
 800960e:	eb49 0303 	adc.w	r3, r9, r3
 8009612:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009622:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009626:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800962a:	460b      	mov	r3, r1
 800962c:	18db      	adds	r3, r3, r3
 800962e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009630:	4613      	mov	r3, r2
 8009632:	eb42 0303 	adc.w	r3, r2, r3
 8009636:	657b      	str	r3, [r7, #84]	@ 0x54
 8009638:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800963c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009640:	f7f7 fb2a 	bl	8000c98 <__aeabi_uldivmod>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	4b61      	ldr	r3, [pc, #388]	@ (80097d0 <UART_SetConfig+0x2d4>)
 800964a:	fba3 2302 	umull	r2, r3, r3, r2
 800964e:	095b      	lsrs	r3, r3, #5
 8009650:	011c      	lsls	r4, r3, #4
 8009652:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009656:	2200      	movs	r2, #0
 8009658:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800965c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009660:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009664:	4642      	mov	r2, r8
 8009666:	464b      	mov	r3, r9
 8009668:	1891      	adds	r1, r2, r2
 800966a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800966c:	415b      	adcs	r3, r3
 800966e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009670:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009674:	4641      	mov	r1, r8
 8009676:	eb12 0a01 	adds.w	sl, r2, r1
 800967a:	4649      	mov	r1, r9
 800967c:	eb43 0b01 	adc.w	fp, r3, r1
 8009680:	f04f 0200 	mov.w	r2, #0
 8009684:	f04f 0300 	mov.w	r3, #0
 8009688:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800968c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009694:	4692      	mov	sl, r2
 8009696:	469b      	mov	fp, r3
 8009698:	4643      	mov	r3, r8
 800969a:	eb1a 0303 	adds.w	r3, sl, r3
 800969e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096a2:	464b      	mov	r3, r9
 80096a4:	eb4b 0303 	adc.w	r3, fp, r3
 80096a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80096ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80096b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80096bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80096c0:	460b      	mov	r3, r1
 80096c2:	18db      	adds	r3, r3, r3
 80096c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80096c6:	4613      	mov	r3, r2
 80096c8:	eb42 0303 	adc.w	r3, r2, r3
 80096cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80096ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80096d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80096d6:	f7f7 fadf 	bl	8000c98 <__aeabi_uldivmod>
 80096da:	4602      	mov	r2, r0
 80096dc:	460b      	mov	r3, r1
 80096de:	4611      	mov	r1, r2
 80096e0:	4b3b      	ldr	r3, [pc, #236]	@ (80097d0 <UART_SetConfig+0x2d4>)
 80096e2:	fba3 2301 	umull	r2, r3, r3, r1
 80096e6:	095b      	lsrs	r3, r3, #5
 80096e8:	2264      	movs	r2, #100	@ 0x64
 80096ea:	fb02 f303 	mul.w	r3, r2, r3
 80096ee:	1acb      	subs	r3, r1, r3
 80096f0:	00db      	lsls	r3, r3, #3
 80096f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80096f6:	4b36      	ldr	r3, [pc, #216]	@ (80097d0 <UART_SetConfig+0x2d4>)
 80096f8:	fba3 2302 	umull	r2, r3, r3, r2
 80096fc:	095b      	lsrs	r3, r3, #5
 80096fe:	005b      	lsls	r3, r3, #1
 8009700:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009704:	441c      	add	r4, r3
 8009706:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800970a:	2200      	movs	r2, #0
 800970c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009710:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009714:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009718:	4642      	mov	r2, r8
 800971a:	464b      	mov	r3, r9
 800971c:	1891      	adds	r1, r2, r2
 800971e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009720:	415b      	adcs	r3, r3
 8009722:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009724:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009728:	4641      	mov	r1, r8
 800972a:	1851      	adds	r1, r2, r1
 800972c:	6339      	str	r1, [r7, #48]	@ 0x30
 800972e:	4649      	mov	r1, r9
 8009730:	414b      	adcs	r3, r1
 8009732:	637b      	str	r3, [r7, #52]	@ 0x34
 8009734:	f04f 0200 	mov.w	r2, #0
 8009738:	f04f 0300 	mov.w	r3, #0
 800973c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009740:	4659      	mov	r1, fp
 8009742:	00cb      	lsls	r3, r1, #3
 8009744:	4651      	mov	r1, sl
 8009746:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800974a:	4651      	mov	r1, sl
 800974c:	00ca      	lsls	r2, r1, #3
 800974e:	4610      	mov	r0, r2
 8009750:	4619      	mov	r1, r3
 8009752:	4603      	mov	r3, r0
 8009754:	4642      	mov	r2, r8
 8009756:	189b      	adds	r3, r3, r2
 8009758:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800975c:	464b      	mov	r3, r9
 800975e:	460a      	mov	r2, r1
 8009760:	eb42 0303 	adc.w	r3, r2, r3
 8009764:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009774:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009778:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800977c:	460b      	mov	r3, r1
 800977e:	18db      	adds	r3, r3, r3
 8009780:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009782:	4613      	mov	r3, r2
 8009784:	eb42 0303 	adc.w	r3, r2, r3
 8009788:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800978a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800978e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009792:	f7f7 fa81 	bl	8000c98 <__aeabi_uldivmod>
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	4b0d      	ldr	r3, [pc, #52]	@ (80097d0 <UART_SetConfig+0x2d4>)
 800979c:	fba3 1302 	umull	r1, r3, r3, r2
 80097a0:	095b      	lsrs	r3, r3, #5
 80097a2:	2164      	movs	r1, #100	@ 0x64
 80097a4:	fb01 f303 	mul.w	r3, r1, r3
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	00db      	lsls	r3, r3, #3
 80097ac:	3332      	adds	r3, #50	@ 0x32
 80097ae:	4a08      	ldr	r2, [pc, #32]	@ (80097d0 <UART_SetConfig+0x2d4>)
 80097b0:	fba2 2303 	umull	r2, r3, r2, r3
 80097b4:	095b      	lsrs	r3, r3, #5
 80097b6:	f003 0207 	and.w	r2, r3, #7
 80097ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4422      	add	r2, r4
 80097c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097c4:	e106      	b.n	80099d4 <UART_SetConfig+0x4d8>
 80097c6:	bf00      	nop
 80097c8:	40011000 	.word	0x40011000
 80097cc:	40011400 	.word	0x40011400
 80097d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097d8:	2200      	movs	r2, #0
 80097da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80097de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80097e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80097e6:	4642      	mov	r2, r8
 80097e8:	464b      	mov	r3, r9
 80097ea:	1891      	adds	r1, r2, r2
 80097ec:	6239      	str	r1, [r7, #32]
 80097ee:	415b      	adcs	r3, r3
 80097f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80097f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097f6:	4641      	mov	r1, r8
 80097f8:	1854      	adds	r4, r2, r1
 80097fa:	4649      	mov	r1, r9
 80097fc:	eb43 0501 	adc.w	r5, r3, r1
 8009800:	f04f 0200 	mov.w	r2, #0
 8009804:	f04f 0300 	mov.w	r3, #0
 8009808:	00eb      	lsls	r3, r5, #3
 800980a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800980e:	00e2      	lsls	r2, r4, #3
 8009810:	4614      	mov	r4, r2
 8009812:	461d      	mov	r5, r3
 8009814:	4643      	mov	r3, r8
 8009816:	18e3      	adds	r3, r4, r3
 8009818:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800981c:	464b      	mov	r3, r9
 800981e:	eb45 0303 	adc.w	r3, r5, r3
 8009822:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009832:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009836:	f04f 0200 	mov.w	r2, #0
 800983a:	f04f 0300 	mov.w	r3, #0
 800983e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009842:	4629      	mov	r1, r5
 8009844:	008b      	lsls	r3, r1, #2
 8009846:	4621      	mov	r1, r4
 8009848:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800984c:	4621      	mov	r1, r4
 800984e:	008a      	lsls	r2, r1, #2
 8009850:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009854:	f7f7 fa20 	bl	8000c98 <__aeabi_uldivmod>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	4b60      	ldr	r3, [pc, #384]	@ (80099e0 <UART_SetConfig+0x4e4>)
 800985e:	fba3 2302 	umull	r2, r3, r3, r2
 8009862:	095b      	lsrs	r3, r3, #5
 8009864:	011c      	lsls	r4, r3, #4
 8009866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800986a:	2200      	movs	r2, #0
 800986c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009870:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009874:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009878:	4642      	mov	r2, r8
 800987a:	464b      	mov	r3, r9
 800987c:	1891      	adds	r1, r2, r2
 800987e:	61b9      	str	r1, [r7, #24]
 8009880:	415b      	adcs	r3, r3
 8009882:	61fb      	str	r3, [r7, #28]
 8009884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009888:	4641      	mov	r1, r8
 800988a:	1851      	adds	r1, r2, r1
 800988c:	6139      	str	r1, [r7, #16]
 800988e:	4649      	mov	r1, r9
 8009890:	414b      	adcs	r3, r1
 8009892:	617b      	str	r3, [r7, #20]
 8009894:	f04f 0200 	mov.w	r2, #0
 8009898:	f04f 0300 	mov.w	r3, #0
 800989c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098a0:	4659      	mov	r1, fp
 80098a2:	00cb      	lsls	r3, r1, #3
 80098a4:	4651      	mov	r1, sl
 80098a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098aa:	4651      	mov	r1, sl
 80098ac:	00ca      	lsls	r2, r1, #3
 80098ae:	4610      	mov	r0, r2
 80098b0:	4619      	mov	r1, r3
 80098b2:	4603      	mov	r3, r0
 80098b4:	4642      	mov	r2, r8
 80098b6:	189b      	adds	r3, r3, r2
 80098b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80098bc:	464b      	mov	r3, r9
 80098be:	460a      	mov	r2, r1
 80098c0:	eb42 0303 	adc.w	r3, r2, r3
 80098c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80098d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80098d4:	f04f 0200 	mov.w	r2, #0
 80098d8:	f04f 0300 	mov.w	r3, #0
 80098dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80098e0:	4649      	mov	r1, r9
 80098e2:	008b      	lsls	r3, r1, #2
 80098e4:	4641      	mov	r1, r8
 80098e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098ea:	4641      	mov	r1, r8
 80098ec:	008a      	lsls	r2, r1, #2
 80098ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80098f2:	f7f7 f9d1 	bl	8000c98 <__aeabi_uldivmod>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	4611      	mov	r1, r2
 80098fc:	4b38      	ldr	r3, [pc, #224]	@ (80099e0 <UART_SetConfig+0x4e4>)
 80098fe:	fba3 2301 	umull	r2, r3, r3, r1
 8009902:	095b      	lsrs	r3, r3, #5
 8009904:	2264      	movs	r2, #100	@ 0x64
 8009906:	fb02 f303 	mul.w	r3, r2, r3
 800990a:	1acb      	subs	r3, r1, r3
 800990c:	011b      	lsls	r3, r3, #4
 800990e:	3332      	adds	r3, #50	@ 0x32
 8009910:	4a33      	ldr	r2, [pc, #204]	@ (80099e0 <UART_SetConfig+0x4e4>)
 8009912:	fba2 2303 	umull	r2, r3, r2, r3
 8009916:	095b      	lsrs	r3, r3, #5
 8009918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800991c:	441c      	add	r4, r3
 800991e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009922:	2200      	movs	r2, #0
 8009924:	673b      	str	r3, [r7, #112]	@ 0x70
 8009926:	677a      	str	r2, [r7, #116]	@ 0x74
 8009928:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800992c:	4642      	mov	r2, r8
 800992e:	464b      	mov	r3, r9
 8009930:	1891      	adds	r1, r2, r2
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	415b      	adcs	r3, r3
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800993c:	4641      	mov	r1, r8
 800993e:	1851      	adds	r1, r2, r1
 8009940:	6039      	str	r1, [r7, #0]
 8009942:	4649      	mov	r1, r9
 8009944:	414b      	adcs	r3, r1
 8009946:	607b      	str	r3, [r7, #4]
 8009948:	f04f 0200 	mov.w	r2, #0
 800994c:	f04f 0300 	mov.w	r3, #0
 8009950:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009954:	4659      	mov	r1, fp
 8009956:	00cb      	lsls	r3, r1, #3
 8009958:	4651      	mov	r1, sl
 800995a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800995e:	4651      	mov	r1, sl
 8009960:	00ca      	lsls	r2, r1, #3
 8009962:	4610      	mov	r0, r2
 8009964:	4619      	mov	r1, r3
 8009966:	4603      	mov	r3, r0
 8009968:	4642      	mov	r2, r8
 800996a:	189b      	adds	r3, r3, r2
 800996c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800996e:	464b      	mov	r3, r9
 8009970:	460a      	mov	r2, r1
 8009972:	eb42 0303 	adc.w	r3, r2, r3
 8009976:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	2200      	movs	r2, #0
 8009980:	663b      	str	r3, [r7, #96]	@ 0x60
 8009982:	667a      	str	r2, [r7, #100]	@ 0x64
 8009984:	f04f 0200 	mov.w	r2, #0
 8009988:	f04f 0300 	mov.w	r3, #0
 800998c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009990:	4649      	mov	r1, r9
 8009992:	008b      	lsls	r3, r1, #2
 8009994:	4641      	mov	r1, r8
 8009996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800999a:	4641      	mov	r1, r8
 800999c:	008a      	lsls	r2, r1, #2
 800999e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80099a2:	f7f7 f979 	bl	8000c98 <__aeabi_uldivmod>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	4b0d      	ldr	r3, [pc, #52]	@ (80099e0 <UART_SetConfig+0x4e4>)
 80099ac:	fba3 1302 	umull	r1, r3, r3, r2
 80099b0:	095b      	lsrs	r3, r3, #5
 80099b2:	2164      	movs	r1, #100	@ 0x64
 80099b4:	fb01 f303 	mul.w	r3, r1, r3
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	011b      	lsls	r3, r3, #4
 80099bc:	3332      	adds	r3, #50	@ 0x32
 80099be:	4a08      	ldr	r2, [pc, #32]	@ (80099e0 <UART_SetConfig+0x4e4>)
 80099c0:	fba2 2303 	umull	r2, r3, r2, r3
 80099c4:	095b      	lsrs	r3, r3, #5
 80099c6:	f003 020f 	and.w	r2, r3, #15
 80099ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4422      	add	r2, r4
 80099d2:	609a      	str	r2, [r3, #8]
}
 80099d4:	bf00      	nop
 80099d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80099da:	46bd      	mov	sp, r7
 80099dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099e0:	51eb851f 	.word	0x51eb851f

080099e4 <__NVIC_SetPriority>:
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	6039      	str	r1, [r7, #0]
 80099ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	db0a      	blt.n	8009a0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	490c      	ldr	r1, [pc, #48]	@ (8009a30 <__NVIC_SetPriority+0x4c>)
 80099fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a02:	0112      	lsls	r2, r2, #4
 8009a04:	b2d2      	uxtb	r2, r2
 8009a06:	440b      	add	r3, r1
 8009a08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009a0c:	e00a      	b.n	8009a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	b2da      	uxtb	r2, r3
 8009a12:	4908      	ldr	r1, [pc, #32]	@ (8009a34 <__NVIC_SetPriority+0x50>)
 8009a14:	79fb      	ldrb	r3, [r7, #7]
 8009a16:	f003 030f 	and.w	r3, r3, #15
 8009a1a:	3b04      	subs	r3, #4
 8009a1c:	0112      	lsls	r2, r2, #4
 8009a1e:	b2d2      	uxtb	r2, r2
 8009a20:	440b      	add	r3, r1
 8009a22:	761a      	strb	r2, [r3, #24]
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr
 8009a30:	e000e100 	.word	0xe000e100
 8009a34:	e000ed00 	.word	0xe000ed00

08009a38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a3c:	4b05      	ldr	r3, [pc, #20]	@ (8009a54 <SysTick_Handler+0x1c>)
 8009a3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a40:	f001 fdfc 	bl	800b63c <xTaskGetSchedulerState>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d001      	beq.n	8009a4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a4a:	f002 fcf5 	bl	800c438 <xPortSysTickHandler>
  }
}
 8009a4e:	bf00      	nop
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	e000e010 	.word	0xe000e010

08009a58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	f06f 0004 	mvn.w	r0, #4
 8009a62:	f7ff ffbf 	bl	80099e4 <__NVIC_SetPriority>
#endif
}
 8009a66:	bf00      	nop
 8009a68:	bd80      	pop	{r7, pc}
	...

08009a6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a72:	f3ef 8305 	mrs	r3, IPSR
 8009a76:	603b      	str	r3, [r7, #0]
  return(result);
 8009a78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d003      	beq.n	8009a86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009a7e:	f06f 0305 	mvn.w	r3, #5
 8009a82:	607b      	str	r3, [r7, #4]
 8009a84:	e00c      	b.n	8009aa0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a86:	4b0a      	ldr	r3, [pc, #40]	@ (8009ab0 <osKernelInitialize+0x44>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d105      	bne.n	8009a9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009a8e:	4b08      	ldr	r3, [pc, #32]	@ (8009ab0 <osKernelInitialize+0x44>)
 8009a90:	2201      	movs	r2, #1
 8009a92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	607b      	str	r3, [r7, #4]
 8009a98:	e002      	b.n	8009aa0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009a9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009aa0:	687b      	ldr	r3, [r7, #4]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr
 8009aae:	bf00      	nop
 8009ab0:	2000063c 	.word	0x2000063c

08009ab4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aba:	f3ef 8305 	mrs	r3, IPSR
 8009abe:	603b      	str	r3, [r7, #0]
  return(result);
 8009ac0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d003      	beq.n	8009ace <osKernelStart+0x1a>
    stat = osErrorISR;
 8009ac6:	f06f 0305 	mvn.w	r3, #5
 8009aca:	607b      	str	r3, [r7, #4]
 8009acc:	e010      	b.n	8009af0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009ace:	4b0b      	ldr	r3, [pc, #44]	@ (8009afc <osKernelStart+0x48>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d109      	bne.n	8009aea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009ad6:	f7ff ffbf 	bl	8009a58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009ada:	4b08      	ldr	r3, [pc, #32]	@ (8009afc <osKernelStart+0x48>)
 8009adc:	2202      	movs	r2, #2
 8009ade:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ae0:	f001 f948 	bl	800ad74 <vTaskStartScheduler>
      stat = osOK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	607b      	str	r3, [r7, #4]
 8009ae8:	e002      	b.n	8009af0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009aea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009aee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009af0:	687b      	ldr	r3, [r7, #4]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	2000063c 	.word	0x2000063c

08009b00 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4a07      	ldr	r2, [pc, #28]	@ (8009b2c <vApplicationGetIdleTaskMemory+0x2c>)
 8009b10:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	4a06      	ldr	r2, [pc, #24]	@ (8009b30 <vApplicationGetIdleTaskMemory+0x30>)
 8009b16:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2280      	movs	r2, #128	@ 0x80
 8009b1c:	601a      	str	r2, [r3, #0]
}
 8009b1e:	bf00      	nop
 8009b20:	3714      	adds	r7, #20
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	20000640 	.word	0x20000640
 8009b30:	200006e8 	.word	0x200006e8

08009b34 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4a07      	ldr	r2, [pc, #28]	@ (8009b60 <vApplicationGetTimerTaskMemory+0x2c>)
 8009b44:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	4a06      	ldr	r2, [pc, #24]	@ (8009b64 <vApplicationGetTimerTaskMemory+0x30>)
 8009b4a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b52:	601a      	str	r2, [r3, #0]
}
 8009b54:	bf00      	nop
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	200008e8 	.word	0x200008e8
 8009b64:	20000990 	.word	0x20000990

08009b68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f103 0208 	add.w	r2, r3, #8
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f103 0208 	add.w	r2, r3, #8
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f103 0208 	add.w	r2, r3, #8
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009bb6:	bf00      	nop
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr

08009bc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bc2:	b480      	push	{r7}
 8009bc4:	b085      	sub	sp, #20
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	689a      	ldr	r2, [r3, #8]
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	683a      	ldr	r2, [r7, #0]
 8009be6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	1c5a      	adds	r2, r3, #1
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	601a      	str	r2, [r3, #0]
}
 8009bfe:	bf00      	nop
 8009c00:	3714      	adds	r7, #20
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b085      	sub	sp, #20
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c20:	d103      	bne.n	8009c2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	60fb      	str	r3, [r7, #12]
 8009c28:	e00c      	b.n	8009c44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	3308      	adds	r3, #8
 8009c2e:	60fb      	str	r3, [r7, #12]
 8009c30:	e002      	b.n	8009c38 <vListInsert+0x2e>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	60fb      	str	r3, [r7, #12]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d2f6      	bcs.n	8009c32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	683a      	ldr	r2, [r7, #0]
 8009c52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	683a      	ldr	r2, [r7, #0]
 8009c5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	1c5a      	adds	r2, r3, #1
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	601a      	str	r2, [r3, #0]
}
 8009c70:	bf00      	nop
 8009c72:	3714      	adds	r7, #20
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	6892      	ldr	r2, [r2, #8]
 8009c92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	6852      	ldr	r2, [r2, #4]
 8009c9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d103      	bne.n	8009cb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	689a      	ldr	r2, [r3, #8]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	1e5a      	subs	r2, r3, #1
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10b      	bne.n	8009cfc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009cf6:	bf00      	nop
 8009cf8:	bf00      	nop
 8009cfa:	e7fd      	b.n	8009cf8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009cfc:	f002 fb0c 	bl	800c318 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d08:	68f9      	ldr	r1, [r7, #12]
 8009d0a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009d0c:	fb01 f303 	mul.w	r3, r1, r3
 8009d10:	441a      	add	r2, r3
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d2c:	3b01      	subs	r3, #1
 8009d2e:	68f9      	ldr	r1, [r7, #12]
 8009d30:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009d32:	fb01 f303 	mul.w	r3, r1, r3
 8009d36:	441a      	add	r2, r3
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	22ff      	movs	r2, #255	@ 0xff
 8009d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	22ff      	movs	r2, #255	@ 0xff
 8009d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d114      	bne.n	8009d7c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d01a      	beq.n	8009d90 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	3310      	adds	r3, #16
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f001 faa6 	bl	800b2b0 <xTaskRemoveFromEventList>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d012      	beq.n	8009d90 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009da0 <xQueueGenericReset+0xd0>)
 8009d6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d70:	601a      	str	r2, [r3, #0]
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	e009      	b.n	8009d90 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3310      	adds	r3, #16
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff fef1 	bl	8009b68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	3324      	adds	r3, #36	@ 0x24
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7ff feec 	bl	8009b68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009d90:	f002 faf4 	bl	800c37c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009d94:	2301      	movs	r3, #1
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	e000ed04 	.word	0xe000ed04

08009da4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b08e      	sub	sp, #56	@ 0x38
 8009da8:	af02      	add	r7, sp, #8
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
 8009db0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10b      	bne.n	8009dd0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dbc:	f383 8811 	msr	BASEPRI, r3
 8009dc0:	f3bf 8f6f 	isb	sy
 8009dc4:	f3bf 8f4f 	dsb	sy
 8009dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009dca:	bf00      	nop
 8009dcc:	bf00      	nop
 8009dce:	e7fd      	b.n	8009dcc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d10b      	bne.n	8009dee <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009de8:	bf00      	nop
 8009dea:	bf00      	nop
 8009dec:	e7fd      	b.n	8009dea <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d002      	beq.n	8009dfa <xQueueGenericCreateStatic+0x56>
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <xQueueGenericCreateStatic+0x5a>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e000      	b.n	8009e00 <xQueueGenericCreateStatic+0x5c>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10b      	bne.n	8009e1c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e08:	f383 8811 	msr	BASEPRI, r3
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	f3bf 8f4f 	dsb	sy
 8009e14:	623b      	str	r3, [r7, #32]
}
 8009e16:	bf00      	nop
 8009e18:	bf00      	nop
 8009e1a:	e7fd      	b.n	8009e18 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d102      	bne.n	8009e28 <xQueueGenericCreateStatic+0x84>
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d101      	bne.n	8009e2c <xQueueGenericCreateStatic+0x88>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e000      	b.n	8009e2e <xQueueGenericCreateStatic+0x8a>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10b      	bne.n	8009e4a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	61fb      	str	r3, [r7, #28]
}
 8009e44:	bf00      	nop
 8009e46:	bf00      	nop
 8009e48:	e7fd      	b.n	8009e46 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009e4a:	2350      	movs	r3, #80	@ 0x50
 8009e4c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	2b50      	cmp	r3, #80	@ 0x50
 8009e52:	d00b      	beq.n	8009e6c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	61bb      	str	r3, [r7, #24]
}
 8009e66:	bf00      	nop
 8009e68:	bf00      	nop
 8009e6a:	e7fd      	b.n	8009e68 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009e6c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00d      	beq.n	8009e94 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e80:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e86:	9300      	str	r3, [sp, #0]
 8009e88:	4613      	mov	r3, r2
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	68b9      	ldr	r1, [r7, #8]
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 f840 	bl	8009f14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3730      	adds	r7, #48	@ 0x30
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b08a      	sub	sp, #40	@ 0x28
 8009ea2:	af02      	add	r7, sp, #8
 8009ea4:	60f8      	str	r0, [r7, #12]
 8009ea6:	60b9      	str	r1, [r7, #8]
 8009ea8:	4613      	mov	r3, r2
 8009eaa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10b      	bne.n	8009eca <xQueueGenericCreate+0x2c>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	613b      	str	r3, [r7, #16]
}
 8009ec4:	bf00      	nop
 8009ec6:	bf00      	nop
 8009ec8:	e7fd      	b.n	8009ec6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	fb02 f303 	mul.w	r3, r2, r3
 8009ed2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	3350      	adds	r3, #80	@ 0x50
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f002 fb3f 	bl	800c55c <pvPortMalloc>
 8009ede:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d011      	beq.n	8009f0a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	3350      	adds	r3, #80	@ 0x50
 8009eee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ef8:	79fa      	ldrb	r2, [r7, #7]
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	9300      	str	r3, [sp, #0]
 8009efe:	4613      	mov	r3, r2
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	68b9      	ldr	r1, [r7, #8]
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f000 f805 	bl	8009f14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009f0a:	69bb      	ldr	r3, [r7, #24]
	}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3720      	adds	r7, #32
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
 8009f20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d103      	bne.n	8009f30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	69ba      	ldr	r2, [r7, #24]
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	e002      	b.n	8009f36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009f42:	2101      	movs	r1, #1
 8009f44:	69b8      	ldr	r0, [r7, #24]
 8009f46:	f7ff fec3 	bl	8009cd0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	78fa      	ldrb	r2, [r7, #3]
 8009f4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009f52:	bf00      	nop
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
	...

08009f5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b08e      	sub	sp, #56	@ 0x38
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10b      	bne.n	8009f90 <xQueueGenericSend+0x34>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f8a:	bf00      	nop
 8009f8c:	bf00      	nop
 8009f8e:	e7fd      	b.n	8009f8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d103      	bne.n	8009f9e <xQueueGenericSend+0x42>
 8009f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <xQueueGenericSend+0x46>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e000      	b.n	8009fa4 <xQueueGenericSend+0x48>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10b      	bne.n	8009fc0 <xQueueGenericSend+0x64>
	__asm volatile
 8009fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fac:	f383 8811 	msr	BASEPRI, r3
 8009fb0:	f3bf 8f6f 	isb	sy
 8009fb4:	f3bf 8f4f 	dsb	sy
 8009fb8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009fba:	bf00      	nop
 8009fbc:	bf00      	nop
 8009fbe:	e7fd      	b.n	8009fbc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d103      	bne.n	8009fce <xQueueGenericSend+0x72>
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d101      	bne.n	8009fd2 <xQueueGenericSend+0x76>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e000      	b.n	8009fd4 <xQueueGenericSend+0x78>
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10b      	bne.n	8009ff0 <xQueueGenericSend+0x94>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	623b      	str	r3, [r7, #32]
}
 8009fea:	bf00      	nop
 8009fec:	bf00      	nop
 8009fee:	e7fd      	b.n	8009fec <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ff0:	f001 fb24 	bl	800b63c <xTaskGetSchedulerState>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d102      	bne.n	800a000 <xQueueGenericSend+0xa4>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d101      	bne.n	800a004 <xQueueGenericSend+0xa8>
 800a000:	2301      	movs	r3, #1
 800a002:	e000      	b.n	800a006 <xQueueGenericSend+0xaa>
 800a004:	2300      	movs	r3, #0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d10b      	bne.n	800a022 <xQueueGenericSend+0xc6>
	__asm volatile
 800a00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00e:	f383 8811 	msr	BASEPRI, r3
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	f3bf 8f4f 	dsb	sy
 800a01a:	61fb      	str	r3, [r7, #28]
}
 800a01c:	bf00      	nop
 800a01e:	bf00      	nop
 800a020:	e7fd      	b.n	800a01e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a022:	f002 f979 	bl	800c318 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a02e:	429a      	cmp	r2, r3
 800a030:	d302      	bcc.n	800a038 <xQueueGenericSend+0xdc>
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	2b02      	cmp	r3, #2
 800a036:	d129      	bne.n	800a08c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	68b9      	ldr	r1, [r7, #8]
 800a03c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a03e:	f000 fb37 	bl	800a6b0 <prvCopyDataToQueue>
 800a042:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d010      	beq.n	800a06e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04e:	3324      	adds	r3, #36	@ 0x24
 800a050:	4618      	mov	r0, r3
 800a052:	f001 f92d 	bl	800b2b0 <xTaskRemoveFromEventList>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d013      	beq.n	800a084 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a05c:	4b3f      	ldr	r3, [pc, #252]	@ (800a15c <xQueueGenericSend+0x200>)
 800a05e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a062:	601a      	str	r2, [r3, #0]
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	e00a      	b.n	800a084 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a070:	2b00      	cmp	r3, #0
 800a072:	d007      	beq.n	800a084 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a074:	4b39      	ldr	r3, [pc, #228]	@ (800a15c <xQueueGenericSend+0x200>)
 800a076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a084:	f002 f97a 	bl	800c37c <vPortExitCritical>
				return pdPASS;
 800a088:	2301      	movs	r3, #1
 800a08a:	e063      	b.n	800a154 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d103      	bne.n	800a09a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a092:	f002 f973 	bl	800c37c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a096:	2300      	movs	r3, #0
 800a098:	e05c      	b.n	800a154 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a09a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d106      	bne.n	800a0ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0a0:	f107 0314 	add.w	r3, r7, #20
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f001 f967 	bl	800b378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0ae:	f002 f965 	bl	800c37c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0b2:	f000 fecf 	bl	800ae54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0b6:	f002 f92f 	bl	800c318 <vPortEnterCritical>
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0c0:	b25b      	sxtb	r3, r3
 800a0c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0c6:	d103      	bne.n	800a0d0 <xQueueGenericSend+0x174>
 800a0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0d6:	b25b      	sxtb	r3, r3
 800a0d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0dc:	d103      	bne.n	800a0e6 <xQueueGenericSend+0x18a>
 800a0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0e6:	f002 f949 	bl	800c37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0ea:	1d3a      	adds	r2, r7, #4
 800a0ec:	f107 0314 	add.w	r3, r7, #20
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f001 f956 	bl	800b3a4 <xTaskCheckForTimeOut>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d124      	bne.n	800a148 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a0fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a100:	f000 fbce 	bl	800a8a0 <prvIsQueueFull>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d018      	beq.n	800a13c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10c:	3310      	adds	r3, #16
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	4611      	mov	r1, r2
 800a112:	4618      	mov	r0, r3
 800a114:	f001 f87a 	bl	800b20c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a118:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a11a:	f000 fb59 	bl	800a7d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a11e:	f000 fea7 	bl	800ae70 <xTaskResumeAll>
 800a122:	4603      	mov	r3, r0
 800a124:	2b00      	cmp	r3, #0
 800a126:	f47f af7c 	bne.w	800a022 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a12a:	4b0c      	ldr	r3, [pc, #48]	@ (800a15c <xQueueGenericSend+0x200>)
 800a12c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a130:	601a      	str	r2, [r3, #0]
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	e772      	b.n	800a022 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a13c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a13e:	f000 fb47 	bl	800a7d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a142:	f000 fe95 	bl	800ae70 <xTaskResumeAll>
 800a146:	e76c      	b.n	800a022 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a148:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a14a:	f000 fb41 	bl	800a7d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a14e:	f000 fe8f 	bl	800ae70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a152:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a154:	4618      	mov	r0, r3
 800a156:	3738      	adds	r7, #56	@ 0x38
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	e000ed04 	.word	0xe000ed04

0800a160 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b090      	sub	sp, #64	@ 0x40
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
 800a16c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10b      	bne.n	800a190 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a17c:	f383 8811 	msr	BASEPRI, r3
 800a180:	f3bf 8f6f 	isb	sy
 800a184:	f3bf 8f4f 	dsb	sy
 800a188:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a18a:	bf00      	nop
 800a18c:	bf00      	nop
 800a18e:	e7fd      	b.n	800a18c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d103      	bne.n	800a19e <xQueueGenericSendFromISR+0x3e>
 800a196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d101      	bne.n	800a1a2 <xQueueGenericSendFromISR+0x42>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e000      	b.n	800a1a4 <xQueueGenericSendFromISR+0x44>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10b      	bne.n	800a1c0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a1a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a1ba:	bf00      	nop
 800a1bc:	bf00      	nop
 800a1be:	e7fd      	b.n	800a1bc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d103      	bne.n	800a1ce <xQueueGenericSendFromISR+0x6e>
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d101      	bne.n	800a1d2 <xQueueGenericSendFromISR+0x72>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e000      	b.n	800a1d4 <xQueueGenericSendFromISR+0x74>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10b      	bne.n	800a1f0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	623b      	str	r3, [r7, #32]
}
 800a1ea:	bf00      	nop
 800a1ec:	bf00      	nop
 800a1ee:	e7fd      	b.n	800a1ec <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1f0:	f002 f972 	bl	800c4d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a1f4:	f3ef 8211 	mrs	r2, BASEPRI
 800a1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1fc:	f383 8811 	msr	BASEPRI, r3
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	f3bf 8f4f 	dsb	sy
 800a208:	61fa      	str	r2, [r7, #28]
 800a20a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a20c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a20e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a212:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a218:	429a      	cmp	r2, r3
 800a21a:	d302      	bcc.n	800a222 <xQueueGenericSendFromISR+0xc2>
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	2b02      	cmp	r3, #2
 800a220:	d12f      	bne.n	800a282 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a224:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a228:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a22e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a230:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	68b9      	ldr	r1, [r7, #8]
 800a236:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a238:	f000 fa3a 	bl	800a6b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a23c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a240:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a244:	d112      	bne.n	800a26c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d016      	beq.n	800a27c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a250:	3324      	adds	r3, #36	@ 0x24
 800a252:	4618      	mov	r0, r3
 800a254:	f001 f82c 	bl	800b2b0 <xTaskRemoveFromEventList>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00e      	beq.n	800a27c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00b      	beq.n	800a27c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	601a      	str	r2, [r3, #0]
 800a26a:	e007      	b.n	800a27c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a26c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a270:	3301      	adds	r3, #1
 800a272:	b2db      	uxtb	r3, r3
 800a274:	b25a      	sxtb	r2, r3
 800a276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a278:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a27c:	2301      	movs	r3, #1
 800a27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a280:	e001      	b.n	800a286 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a282:	2300      	movs	r3, #0
 800a284:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a288:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a290:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a294:	4618      	mov	r0, r3
 800a296:	3740      	adds	r7, #64	@ 0x40
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b08c      	sub	sp, #48	@ 0x30
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10b      	bne.n	800a2ce <xQueueReceive+0x32>
	__asm volatile
 800a2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ba:	f383 8811 	msr	BASEPRI, r3
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f3bf 8f4f 	dsb	sy
 800a2c6:	623b      	str	r3, [r7, #32]
}
 800a2c8:	bf00      	nop
 800a2ca:	bf00      	nop
 800a2cc:	e7fd      	b.n	800a2ca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d103      	bne.n	800a2dc <xQueueReceive+0x40>
 800a2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d101      	bne.n	800a2e0 <xQueueReceive+0x44>
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e000      	b.n	800a2e2 <xQueueReceive+0x46>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10b      	bne.n	800a2fe <xQueueReceive+0x62>
	__asm volatile
 800a2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ea:	f383 8811 	msr	BASEPRI, r3
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	f3bf 8f4f 	dsb	sy
 800a2f6:	61fb      	str	r3, [r7, #28]
}
 800a2f8:	bf00      	nop
 800a2fa:	bf00      	nop
 800a2fc:	e7fd      	b.n	800a2fa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2fe:	f001 f99d 	bl	800b63c <xTaskGetSchedulerState>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d102      	bne.n	800a30e <xQueueReceive+0x72>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d101      	bne.n	800a312 <xQueueReceive+0x76>
 800a30e:	2301      	movs	r3, #1
 800a310:	e000      	b.n	800a314 <xQueueReceive+0x78>
 800a312:	2300      	movs	r3, #0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10b      	bne.n	800a330 <xQueueReceive+0x94>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	61bb      	str	r3, [r7, #24]
}
 800a32a:	bf00      	nop
 800a32c:	bf00      	nop
 800a32e:	e7fd      	b.n	800a32c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a330:	f001 fff2 	bl	800c318 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a338:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d01f      	beq.n	800a380 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a340:	68b9      	ldr	r1, [r7, #8]
 800a342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a344:	f000 fa1e 	bl	800a784 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a34a:	1e5a      	subs	r2, r3, #1
 800a34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d00f      	beq.n	800a378 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35a:	3310      	adds	r3, #16
 800a35c:	4618      	mov	r0, r3
 800a35e:	f000 ffa7 	bl	800b2b0 <xTaskRemoveFromEventList>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d007      	beq.n	800a378 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a368:	4b3c      	ldr	r3, [pc, #240]	@ (800a45c <xQueueReceive+0x1c0>)
 800a36a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a36e:	601a      	str	r2, [r3, #0]
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a378:	f002 f800 	bl	800c37c <vPortExitCritical>
				return pdPASS;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e069      	b.n	800a454 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d103      	bne.n	800a38e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a386:	f001 fff9 	bl	800c37c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a38a:	2300      	movs	r3, #0
 800a38c:	e062      	b.n	800a454 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a390:	2b00      	cmp	r3, #0
 800a392:	d106      	bne.n	800a3a2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a394:	f107 0310 	add.w	r3, r7, #16
 800a398:	4618      	mov	r0, r3
 800a39a:	f000 ffed 	bl	800b378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3a2:	f001 ffeb 	bl	800c37c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3a6:	f000 fd55 	bl	800ae54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3aa:	f001 ffb5 	bl	800c318 <vPortEnterCritical>
 800a3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3b4:	b25b      	sxtb	r3, r3
 800a3b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3ba:	d103      	bne.n	800a3c4 <xQueueReceive+0x128>
 800a3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3ca:	b25b      	sxtb	r3, r3
 800a3cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3d0:	d103      	bne.n	800a3da <xQueueReceive+0x13e>
 800a3d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3da:	f001 ffcf 	bl	800c37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3de:	1d3a      	adds	r2, r7, #4
 800a3e0:	f107 0310 	add.w	r3, r7, #16
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f000 ffdc 	bl	800b3a4 <xTaskCheckForTimeOut>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d123      	bne.n	800a43a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3f4:	f000 fa3e 	bl	800a874 <prvIsQueueEmpty>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d017      	beq.n	800a42e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a400:	3324      	adds	r3, #36	@ 0x24
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	4611      	mov	r1, r2
 800a406:	4618      	mov	r0, r3
 800a408:	f000 ff00 	bl	800b20c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a40c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a40e:	f000 f9df 	bl	800a7d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a412:	f000 fd2d 	bl	800ae70 <xTaskResumeAll>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d189      	bne.n	800a330 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a41c:	4b0f      	ldr	r3, [pc, #60]	@ (800a45c <xQueueReceive+0x1c0>)
 800a41e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	e780      	b.n	800a330 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a42e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a430:	f000 f9ce 	bl	800a7d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a434:	f000 fd1c 	bl	800ae70 <xTaskResumeAll>
 800a438:	e77a      	b.n	800a330 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a43a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a43c:	f000 f9c8 	bl	800a7d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a440:	f000 fd16 	bl	800ae70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a446:	f000 fa15 	bl	800a874 <prvIsQueueEmpty>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f43f af6f 	beq.w	800a330 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a452:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a454:	4618      	mov	r0, r3
 800a456:	3730      	adds	r7, #48	@ 0x30
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	e000ed04 	.word	0xe000ed04

0800a460 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08e      	sub	sp, #56	@ 0x38
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a46a:	2300      	movs	r3, #0
 800a46c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a472:	2300      	movs	r3, #0
 800a474:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10b      	bne.n	800a494 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a480:	f383 8811 	msr	BASEPRI, r3
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	623b      	str	r3, [r7, #32]
}
 800a48e:	bf00      	nop
 800a490:	bf00      	nop
 800a492:	e7fd      	b.n	800a490 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00b      	beq.n	800a4b4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a49c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a0:	f383 8811 	msr	BASEPRI, r3
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	61fb      	str	r3, [r7, #28]
}
 800a4ae:	bf00      	nop
 800a4b0:	bf00      	nop
 800a4b2:	e7fd      	b.n	800a4b0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4b4:	f001 f8c2 	bl	800b63c <xTaskGetSchedulerState>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d102      	bne.n	800a4c4 <xQueueSemaphoreTake+0x64>
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d101      	bne.n	800a4c8 <xQueueSemaphoreTake+0x68>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	e000      	b.n	800a4ca <xQueueSemaphoreTake+0x6a>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10b      	bne.n	800a4e6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	61bb      	str	r3, [r7, #24]
}
 800a4e0:	bf00      	nop
 800a4e2:	bf00      	nop
 800a4e4:	e7fd      	b.n	800a4e2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4e6:	f001 ff17 	bl	800c318 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4ee:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d024      	beq.n	800a540 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f8:	1e5a      	subs	r2, r3, #1
 800a4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4fc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d104      	bne.n	800a510 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a506:	f001 fa13 	bl	800b930 <pvTaskIncrementMutexHeldCount>
 800a50a:	4602      	mov	r2, r0
 800a50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a50e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00f      	beq.n	800a538 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a51a:	3310      	adds	r3, #16
 800a51c:	4618      	mov	r0, r3
 800a51e:	f000 fec7 	bl	800b2b0 <xTaskRemoveFromEventList>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d007      	beq.n	800a538 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a528:	4b54      	ldr	r3, [pc, #336]	@ (800a67c <xQueueSemaphoreTake+0x21c>)
 800a52a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a52e:	601a      	str	r2, [r3, #0]
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a538:	f001 ff20 	bl	800c37c <vPortExitCritical>
				return pdPASS;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e098      	b.n	800a672 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d112      	bne.n	800a56c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d00b      	beq.n	800a564 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a550:	f383 8811 	msr	BASEPRI, r3
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	617b      	str	r3, [r7, #20]
}
 800a55e:	bf00      	nop
 800a560:	bf00      	nop
 800a562:	e7fd      	b.n	800a560 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a564:	f001 ff0a 	bl	800c37c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a568:	2300      	movs	r3, #0
 800a56a:	e082      	b.n	800a672 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d106      	bne.n	800a580 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a572:	f107 030c 	add.w	r3, r7, #12
 800a576:	4618      	mov	r0, r3
 800a578:	f000 fefe 	bl	800b378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a57c:	2301      	movs	r3, #1
 800a57e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a580:	f001 fefc 	bl	800c37c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a584:	f000 fc66 	bl	800ae54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a588:	f001 fec6 	bl	800c318 <vPortEnterCritical>
 800a58c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a58e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a592:	b25b      	sxtb	r3, r3
 800a594:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a598:	d103      	bne.n	800a5a2 <xQueueSemaphoreTake+0x142>
 800a59a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5a8:	b25b      	sxtb	r3, r3
 800a5aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a5ae:	d103      	bne.n	800a5b8 <xQueueSemaphoreTake+0x158>
 800a5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a5b8:	f001 fee0 	bl	800c37c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5bc:	463a      	mov	r2, r7
 800a5be:	f107 030c 	add.w	r3, r7, #12
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f000 feed 	bl	800b3a4 <xTaskCheckForTimeOut>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d132      	bne.n	800a636 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a5d2:	f000 f94f 	bl	800a874 <prvIsQueueEmpty>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d026      	beq.n	800a62a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d109      	bne.n	800a5f8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a5e4:	f001 fe98 	bl	800c318 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f001 f843 	bl	800b678 <xTaskPriorityInherit>
 800a5f2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a5f4:	f001 fec2 	bl	800c37c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5fa:	3324      	adds	r3, #36	@ 0x24
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	4611      	mov	r1, r2
 800a600:	4618      	mov	r0, r3
 800a602:	f000 fe03 	bl	800b20c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a606:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a608:	f000 f8e2 	bl	800a7d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a60c:	f000 fc30 	bl	800ae70 <xTaskResumeAll>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	f47f af67 	bne.w	800a4e6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a618:	4b18      	ldr	r3, [pc, #96]	@ (800a67c <xQueueSemaphoreTake+0x21c>)
 800a61a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a61e:	601a      	str	r2, [r3, #0]
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	e75d      	b.n	800a4e6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a62a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a62c:	f000 f8d0 	bl	800a7d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a630:	f000 fc1e 	bl	800ae70 <xTaskResumeAll>
 800a634:	e757      	b.n	800a4e6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a636:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a638:	f000 f8ca 	bl	800a7d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a63c:	f000 fc18 	bl	800ae70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a640:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a642:	f000 f917 	bl	800a874 <prvIsQueueEmpty>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f43f af4c 	beq.w	800a4e6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00d      	beq.n	800a670 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a654:	f001 fe60 	bl	800c318 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a658:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a65a:	f000 f811 	bl	800a680 <prvGetDisinheritPriorityAfterTimeout>
 800a65e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a666:	4618      	mov	r0, r3
 800a668:	f001 f8de 	bl	800b828 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a66c:	f001 fe86 	bl	800c37c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a670:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a672:	4618      	mov	r0, r3
 800a674:	3738      	adds	r7, #56	@ 0x38
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	e000ed04 	.word	0xe000ed04

0800a680 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d006      	beq.n	800a69e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a69a:	60fb      	str	r3, [r7, #12]
 800a69c:	e001      	b.n	800a6a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
	}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10d      	bne.n	800a6ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d14d      	bne.n	800a772 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f001 f834 	bl	800b748 <xTaskPriorityDisinherit>
 800a6e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	609a      	str	r2, [r3, #8]
 800a6e8:	e043      	b.n	800a772 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d119      	bne.n	800a724 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6858      	ldr	r0, [r3, #4]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	68b9      	ldr	r1, [r7, #8]
 800a6fc:	f003 fba9 	bl	800de52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	685a      	ldr	r2, [r3, #4]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a708:	441a      	add	r2, r3
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	429a      	cmp	r2, r3
 800a718:	d32b      	bcc.n	800a772 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	605a      	str	r2, [r3, #4]
 800a722:	e026      	b.n	800a772 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	68d8      	ldr	r0, [r3, #12]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a72c:	461a      	mov	r2, r3
 800a72e:	68b9      	ldr	r1, [r7, #8]
 800a730:	f003 fb8f 	bl	800de52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	68da      	ldr	r2, [r3, #12]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a73c:	425b      	negs	r3, r3
 800a73e:	441a      	add	r2, r3
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	68da      	ldr	r2, [r3, #12]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d207      	bcs.n	800a760 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	689a      	ldr	r2, [r3, #8]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a758:	425b      	negs	r3, r3
 800a75a:	441a      	add	r2, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b02      	cmp	r3, #2
 800a764:	d105      	bne.n	800a772 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	3b01      	subs	r3, #1
 800a770:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	1c5a      	adds	r2, r3, #1
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a77a:	697b      	ldr	r3, [r7, #20]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3718      	adds	r7, #24
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a792:	2b00      	cmp	r3, #0
 800a794:	d018      	beq.n	800a7c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68da      	ldr	r2, [r3, #12]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a79e:	441a      	add	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	68da      	ldr	r2, [r3, #12]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d303      	bcc.n	800a7b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	68d9      	ldr	r1, [r3, #12]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	6838      	ldr	r0, [r7, #0]
 800a7c4:	f003 fb45 	bl	800de52 <memcpy>
	}
}
 800a7c8:	bf00      	nop
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a7d8:	f001 fd9e 	bl	800c318 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7e4:	e011      	b.n	800a80a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d012      	beq.n	800a814 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	3324      	adds	r3, #36	@ 0x24
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 fd5c 	bl	800b2b0 <xTaskRemoveFromEventList>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a7fe:	f000 fe35 	bl	800b46c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a802:	7bfb      	ldrb	r3, [r7, #15]
 800a804:	3b01      	subs	r3, #1
 800a806:	b2db      	uxtb	r3, r3
 800a808:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a80a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	dce9      	bgt.n	800a7e6 <prvUnlockQueue+0x16>
 800a812:	e000      	b.n	800a816 <prvUnlockQueue+0x46>
					break;
 800a814:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	22ff      	movs	r2, #255	@ 0xff
 800a81a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a81e:	f001 fdad 	bl	800c37c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a822:	f001 fd79 	bl	800c318 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a82c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a82e:	e011      	b.n	800a854 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d012      	beq.n	800a85e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	3310      	adds	r3, #16
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 fd37 	bl	800b2b0 <xTaskRemoveFromEventList>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d001      	beq.n	800a84c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a848:	f000 fe10 	bl	800b46c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a84c:	7bbb      	ldrb	r3, [r7, #14]
 800a84e:	3b01      	subs	r3, #1
 800a850:	b2db      	uxtb	r3, r3
 800a852:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a854:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	dce9      	bgt.n	800a830 <prvUnlockQueue+0x60>
 800a85c:	e000      	b.n	800a860 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a85e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	22ff      	movs	r2, #255	@ 0xff
 800a864:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a868:	f001 fd88 	bl	800c37c <vPortExitCritical>
}
 800a86c:	bf00      	nop
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a87c:	f001 fd4c 	bl	800c318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a884:	2b00      	cmp	r3, #0
 800a886:	d102      	bne.n	800a88e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a888:	2301      	movs	r3, #1
 800a88a:	60fb      	str	r3, [r7, #12]
 800a88c:	e001      	b.n	800a892 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a88e:	2300      	movs	r3, #0
 800a890:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a892:	f001 fd73 	bl	800c37c <vPortExitCritical>

	return xReturn;
 800a896:	68fb      	ldr	r3, [r7, #12]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8a8:	f001 fd36 	bl	800c318 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d102      	bne.n	800a8be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	60fb      	str	r3, [r7, #12]
 800a8bc:	e001      	b.n	800a8c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8c2:	f001 fd5b 	bl	800c37c <vPortExitCritical>

	return xReturn;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8da:	2300      	movs	r3, #0
 800a8dc:	60fb      	str	r3, [r7, #12]
 800a8de:	e014      	b.n	800a90a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a8e0:	4a0f      	ldr	r2, [pc, #60]	@ (800a920 <vQueueAddToRegistry+0x50>)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10b      	bne.n	800a904 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a8ec:	490c      	ldr	r1, [pc, #48]	@ (800a920 <vQueueAddToRegistry+0x50>)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	683a      	ldr	r2, [r7, #0]
 800a8f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a8f6:	4a0a      	ldr	r2, [pc, #40]	@ (800a920 <vQueueAddToRegistry+0x50>)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	00db      	lsls	r3, r3, #3
 800a8fc:	4413      	add	r3, r2
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a902:	e006      	b.n	800a912 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	3301      	adds	r3, #1
 800a908:	60fb      	str	r3, [r7, #12]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	2b07      	cmp	r3, #7
 800a90e:	d9e7      	bls.n	800a8e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a910:	bf00      	nop
 800a912:	bf00      	nop
 800a914:	3714      	adds	r7, #20
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	20000d90 	.word	0x20000d90

0800a924 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a934:	f001 fcf0 	bl	800c318 <vPortEnterCritical>
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a93e:	b25b      	sxtb	r3, r3
 800a940:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a944:	d103      	bne.n	800a94e <vQueueWaitForMessageRestricted+0x2a>
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a954:	b25b      	sxtb	r3, r3
 800a956:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a95a:	d103      	bne.n	800a964 <vQueueWaitForMessageRestricted+0x40>
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a964:	f001 fd0a 	bl	800c37c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d106      	bne.n	800a97e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	3324      	adds	r3, #36	@ 0x24
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	68b9      	ldr	r1, [r7, #8]
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 fc6d 	bl	800b258 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a97e:	6978      	ldr	r0, [r7, #20]
 800a980:	f7ff ff26 	bl	800a7d0 <prvUnlockQueue>
	}
 800a984:	bf00      	nop
 800a986:	3718      	adds	r7, #24
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08e      	sub	sp, #56	@ 0x38
 800a990:	af04      	add	r7, sp, #16
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
 800a998:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a99a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10b      	bne.n	800a9b8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	623b      	str	r3, [r7, #32]
}
 800a9b2:	bf00      	nop
 800a9b4:	bf00      	nop
 800a9b6:	e7fd      	b.n	800a9b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10b      	bne.n	800a9d6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	61fb      	str	r3, [r7, #28]
}
 800a9d0:	bf00      	nop
 800a9d2:	bf00      	nop
 800a9d4:	e7fd      	b.n	800a9d2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a9d6:	23a8      	movs	r3, #168	@ 0xa8
 800a9d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	2ba8      	cmp	r3, #168	@ 0xa8
 800a9de:	d00b      	beq.n	800a9f8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e4:	f383 8811 	msr	BASEPRI, r3
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	61bb      	str	r3, [r7, #24]
}
 800a9f2:	bf00      	nop
 800a9f4:	bf00      	nop
 800a9f6:	e7fd      	b.n	800a9f4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a9f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d01e      	beq.n	800aa3e <xTaskCreateStatic+0xb2>
 800aa00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d01b      	beq.n	800aa3e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa12:	2202      	movs	r2, #2
 800aa14:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa18:	2300      	movs	r3, #0
 800aa1a:	9303      	str	r3, [sp, #12]
 800aa1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1e:	9302      	str	r3, [sp, #8]
 800aa20:	f107 0314 	add.w	r3, r7, #20
 800aa24:	9301      	str	r3, [sp, #4]
 800aa26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	68b9      	ldr	r1, [r7, #8]
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f000 f851 	bl	800aad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aa38:	f000 f8f6 	bl	800ac28 <prvAddNewTaskToReadyList>
 800aa3c:	e001      	b.n	800aa42 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa42:	697b      	ldr	r3, [r7, #20]
	}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3728      	adds	r7, #40	@ 0x28
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b08c      	sub	sp, #48	@ 0x30
 800aa50:	af04      	add	r7, sp, #16
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	603b      	str	r3, [r7, #0]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa5c:	88fb      	ldrh	r3, [r7, #6]
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4618      	mov	r0, r3
 800aa62:	f001 fd7b 	bl	800c55c <pvPortMalloc>
 800aa66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00e      	beq.n	800aa8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa6e:	20a8      	movs	r0, #168	@ 0xa8
 800aa70:	f001 fd74 	bl	800c55c <pvPortMalloc>
 800aa74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d003      	beq.n	800aa84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	697a      	ldr	r2, [r7, #20]
 800aa80:	631a      	str	r2, [r3, #48]	@ 0x30
 800aa82:	e005      	b.n	800aa90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa84:	6978      	ldr	r0, [r7, #20]
 800aa86:	f001 fe37 	bl	800c6f8 <vPortFree>
 800aa8a:	e001      	b.n	800aa90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d017      	beq.n	800aac6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa96:	69fb      	ldr	r3, [r7, #28]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa9e:	88fa      	ldrh	r2, [r7, #6]
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	9303      	str	r3, [sp, #12]
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	9302      	str	r3, [sp, #8]
 800aaa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaaa:	9301      	str	r3, [sp, #4]
 800aaac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	68b9      	ldr	r1, [r7, #8]
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f000 f80f 	bl	800aad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aaba:	69f8      	ldr	r0, [r7, #28]
 800aabc:	f000 f8b4 	bl	800ac28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aac0:	2301      	movs	r3, #1
 800aac2:	61bb      	str	r3, [r7, #24]
 800aac4:	e002      	b.n	800aacc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aac6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aaca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aacc:	69bb      	ldr	r3, [r7, #24]
	}
 800aace:	4618      	mov	r0, r3
 800aad0:	3720      	adds	r7, #32
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
	...

0800aad8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b088      	sub	sp, #32
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
 800aae4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	009b      	lsls	r3, r3, #2
 800aaee:	461a      	mov	r2, r3
 800aaf0:	21a5      	movs	r1, #165	@ 0xa5
 800aaf2:	f003 f8b7 	bl	800dc64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ab00:	3b01      	subs	r3, #1
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	f023 0307 	bic.w	r3, r3, #7
 800ab0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	f003 0307 	and.w	r3, r3, #7
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00b      	beq.n	800ab32 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ab1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	617b      	str	r3, [r7, #20]
}
 800ab2c:	bf00      	nop
 800ab2e:	bf00      	nop
 800ab30:	e7fd      	b.n	800ab2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d01f      	beq.n	800ab78 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab38:	2300      	movs	r3, #0
 800ab3a:	61fb      	str	r3, [r7, #28]
 800ab3c:	e012      	b.n	800ab64 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	4413      	add	r3, r2
 800ab44:	7819      	ldrb	r1, [r3, #0]
 800ab46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	4413      	add	r3, r2
 800ab4c:	3334      	adds	r3, #52	@ 0x34
 800ab4e:	460a      	mov	r2, r1
 800ab50:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab52:	68ba      	ldr	r2, [r7, #8]
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	4413      	add	r3, r2
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d006      	beq.n	800ab6c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	3301      	adds	r3, #1
 800ab62:	61fb      	str	r3, [r7, #28]
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	2b0f      	cmp	r3, #15
 800ab68:	d9e9      	bls.n	800ab3e <prvInitialiseNewTask+0x66>
 800ab6a:	e000      	b.n	800ab6e <prvInitialiseNewTask+0x96>
			{
				break;
 800ab6c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ab76:	e003      	b.n	800ab80 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab82:	2b37      	cmp	r3, #55	@ 0x37
 800ab84:	d901      	bls.n	800ab8a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab86:	2337      	movs	r3, #55	@ 0x37
 800ab88:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab8e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab94:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab98:	2200      	movs	r2, #0
 800ab9a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9e:	3304      	adds	r3, #4
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7ff f801 	bl	8009ba8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba8:	3318      	adds	r3, #24
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fe fffc 	bl	8009ba8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800abb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800abbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800abc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abc4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800abc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc8:	2200      	movs	r2, #0
 800abca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800abce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd0:	2200      	movs	r2, #0
 800abd2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800abd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd8:	3354      	adds	r3, #84	@ 0x54
 800abda:	224c      	movs	r2, #76	@ 0x4c
 800abdc:	2100      	movs	r1, #0
 800abde:	4618      	mov	r0, r3
 800abe0:	f003 f840 	bl	800dc64 <memset>
 800abe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe6:	4a0d      	ldr	r2, [pc, #52]	@ (800ac1c <prvInitialiseNewTask+0x144>)
 800abe8:	659a      	str	r2, [r3, #88]	@ 0x58
 800abea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abec:	4a0c      	ldr	r2, [pc, #48]	@ (800ac20 <prvInitialiseNewTask+0x148>)
 800abee:	65da      	str	r2, [r3, #92]	@ 0x5c
 800abf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf2:	4a0c      	ldr	r2, [pc, #48]	@ (800ac24 <prvInitialiseNewTask+0x14c>)
 800abf4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	68f9      	ldr	r1, [r7, #12]
 800abfa:	69b8      	ldr	r0, [r7, #24]
 800abfc:	f001 fa5a 	bl	800c0b4 <pxPortInitialiseStack>
 800ac00:	4602      	mov	r2, r0
 800ac02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac12:	bf00      	nop
 800ac14:	3720      	adds	r7, #32
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	2000542c 	.word	0x2000542c
 800ac20:	20005494 	.word	0x20005494
 800ac24:	200054fc 	.word	0x200054fc

0800ac28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac30:	f001 fb72 	bl	800c318 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac34:	4b2d      	ldr	r3, [pc, #180]	@ (800acec <prvAddNewTaskToReadyList+0xc4>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	4a2c      	ldr	r2, [pc, #176]	@ (800acec <prvAddNewTaskToReadyList+0xc4>)
 800ac3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac3e:	4b2c      	ldr	r3, [pc, #176]	@ (800acf0 <prvAddNewTaskToReadyList+0xc8>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d109      	bne.n	800ac5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac46:	4a2a      	ldr	r2, [pc, #168]	@ (800acf0 <prvAddNewTaskToReadyList+0xc8>)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac4c:	4b27      	ldr	r3, [pc, #156]	@ (800acec <prvAddNewTaskToReadyList+0xc4>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	2b01      	cmp	r3, #1
 800ac52:	d110      	bne.n	800ac76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac54:	f000 fc2e 	bl	800b4b4 <prvInitialiseTaskLists>
 800ac58:	e00d      	b.n	800ac76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac5a:	4b26      	ldr	r3, [pc, #152]	@ (800acf4 <prvAddNewTaskToReadyList+0xcc>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d109      	bne.n	800ac76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac62:	4b23      	ldr	r3, [pc, #140]	@ (800acf0 <prvAddNewTaskToReadyList+0xc8>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	d802      	bhi.n	800ac76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac70:	4a1f      	ldr	r2, [pc, #124]	@ (800acf0 <prvAddNewTaskToReadyList+0xc8>)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac76:	4b20      	ldr	r3, [pc, #128]	@ (800acf8 <prvAddNewTaskToReadyList+0xd0>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	4a1e      	ldr	r2, [pc, #120]	@ (800acf8 <prvAddNewTaskToReadyList+0xd0>)
 800ac7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac80:	4b1d      	ldr	r3, [pc, #116]	@ (800acf8 <prvAddNewTaskToReadyList+0xd0>)
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac8c:	4b1b      	ldr	r3, [pc, #108]	@ (800acfc <prvAddNewTaskToReadyList+0xd4>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d903      	bls.n	800ac9c <prvAddNewTaskToReadyList+0x74>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac98:	4a18      	ldr	r2, [pc, #96]	@ (800acfc <prvAddNewTaskToReadyList+0xd4>)
 800ac9a:	6013      	str	r3, [r2, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aca0:	4613      	mov	r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4a15      	ldr	r2, [pc, #84]	@ (800ad00 <prvAddNewTaskToReadyList+0xd8>)
 800acaa:	441a      	add	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	3304      	adds	r3, #4
 800acb0:	4619      	mov	r1, r3
 800acb2:	4610      	mov	r0, r2
 800acb4:	f7fe ff85 	bl	8009bc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800acb8:	f001 fb60 	bl	800c37c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800acbc:	4b0d      	ldr	r3, [pc, #52]	@ (800acf4 <prvAddNewTaskToReadyList+0xcc>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00e      	beq.n	800ace2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800acc4:	4b0a      	ldr	r3, [pc, #40]	@ (800acf0 <prvAddNewTaskToReadyList+0xc8>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acce:	429a      	cmp	r2, r3
 800acd0:	d207      	bcs.n	800ace2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800acd2:	4b0c      	ldr	r3, [pc, #48]	@ (800ad04 <prvAddNewTaskToReadyList+0xdc>)
 800acd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ace2:	bf00      	nop
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	200012a4 	.word	0x200012a4
 800acf0:	20000dd0 	.word	0x20000dd0
 800acf4:	200012b0 	.word	0x200012b0
 800acf8:	200012c0 	.word	0x200012c0
 800acfc:	200012ac 	.word	0x200012ac
 800ad00:	20000dd4 	.word	0x20000dd4
 800ad04:	e000ed04 	.word	0xe000ed04

0800ad08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad10:	2300      	movs	r3, #0
 800ad12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d018      	beq.n	800ad4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad1a:	4b14      	ldr	r3, [pc, #80]	@ (800ad6c <vTaskDelay+0x64>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00b      	beq.n	800ad3a <vTaskDelay+0x32>
	__asm volatile
 800ad22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad26:	f383 8811 	msr	BASEPRI, r3
 800ad2a:	f3bf 8f6f 	isb	sy
 800ad2e:	f3bf 8f4f 	dsb	sy
 800ad32:	60bb      	str	r3, [r7, #8]
}
 800ad34:	bf00      	nop
 800ad36:	bf00      	nop
 800ad38:	e7fd      	b.n	800ad36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad3a:	f000 f88b 	bl	800ae54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ad3e:	2100      	movs	r1, #0
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 fe09 	bl	800b958 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ad46:	f000 f893 	bl	800ae70 <xTaskResumeAll>
 800ad4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d107      	bne.n	800ad62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ad52:	4b07      	ldr	r3, [pc, #28]	@ (800ad70 <vTaskDelay+0x68>)
 800ad54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad58:	601a      	str	r2, [r3, #0]
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad62:	bf00      	nop
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	200012cc 	.word	0x200012cc
 800ad70:	e000ed04 	.word	0xe000ed04

0800ad74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b08a      	sub	sp, #40	@ 0x28
 800ad78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad82:	463a      	mov	r2, r7
 800ad84:	1d39      	adds	r1, r7, #4
 800ad86:	f107 0308 	add.w	r3, r7, #8
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f7fe feb8 	bl	8009b00 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	9202      	str	r2, [sp, #8]
 800ad98:	9301      	str	r3, [sp, #4]
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	2300      	movs	r3, #0
 800ada0:	460a      	mov	r2, r1
 800ada2:	4924      	ldr	r1, [pc, #144]	@ (800ae34 <vTaskStartScheduler+0xc0>)
 800ada4:	4824      	ldr	r0, [pc, #144]	@ (800ae38 <vTaskStartScheduler+0xc4>)
 800ada6:	f7ff fdf1 	bl	800a98c <xTaskCreateStatic>
 800adaa:	4603      	mov	r3, r0
 800adac:	4a23      	ldr	r2, [pc, #140]	@ (800ae3c <vTaskStartScheduler+0xc8>)
 800adae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800adb0:	4b22      	ldr	r3, [pc, #136]	@ (800ae3c <vTaskStartScheduler+0xc8>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d002      	beq.n	800adbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800adb8:	2301      	movs	r3, #1
 800adba:	617b      	str	r3, [r7, #20]
 800adbc:	e001      	b.n	800adc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800adbe:	2300      	movs	r3, #0
 800adc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d102      	bne.n	800adce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800adc8:	f000 fe1a 	bl	800ba00 <xTimerCreateTimerTask>
 800adcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d11b      	bne.n	800ae0c <vTaskStartScheduler+0x98>
	__asm volatile
 800add4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add8:	f383 8811 	msr	BASEPRI, r3
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	f3bf 8f4f 	dsb	sy
 800ade4:	613b      	str	r3, [r7, #16]
}
 800ade6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ade8:	4b15      	ldr	r3, [pc, #84]	@ (800ae40 <vTaskStartScheduler+0xcc>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	3354      	adds	r3, #84	@ 0x54
 800adee:	4a15      	ldr	r2, [pc, #84]	@ (800ae44 <vTaskStartScheduler+0xd0>)
 800adf0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800adf2:	4b15      	ldr	r3, [pc, #84]	@ (800ae48 <vTaskStartScheduler+0xd4>)
 800adf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800adf8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800adfa:	4b14      	ldr	r3, [pc, #80]	@ (800ae4c <vTaskStartScheduler+0xd8>)
 800adfc:	2201      	movs	r2, #1
 800adfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae00:	4b13      	ldr	r3, [pc, #76]	@ (800ae50 <vTaskStartScheduler+0xdc>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae06:	f001 f9e3 	bl	800c1d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae0a:	e00f      	b.n	800ae2c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae12:	d10b      	bne.n	800ae2c <vTaskStartScheduler+0xb8>
	__asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	60fb      	str	r3, [r7, #12]
}
 800ae26:	bf00      	nop
 800ae28:	bf00      	nop
 800ae2a:	e7fd      	b.n	800ae28 <vTaskStartScheduler+0xb4>
}
 800ae2c:	bf00      	nop
 800ae2e:	3718      	adds	r7, #24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	080112a8 	.word	0x080112a8
 800ae38:	0800b485 	.word	0x0800b485
 800ae3c:	200012c8 	.word	0x200012c8
 800ae40:	20000dd0 	.word	0x20000dd0
 800ae44:	20000030 	.word	0x20000030
 800ae48:	200012c4 	.word	0x200012c4
 800ae4c:	200012b0 	.word	0x200012b0
 800ae50:	200012a8 	.word	0x200012a8

0800ae54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae54:	b480      	push	{r7}
 800ae56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae58:	4b04      	ldr	r3, [pc, #16]	@ (800ae6c <vTaskSuspendAll+0x18>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	3301      	adds	r3, #1
 800ae5e:	4a03      	ldr	r2, [pc, #12]	@ (800ae6c <vTaskSuspendAll+0x18>)
 800ae60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae62:	bf00      	nop
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	200012cc 	.word	0x200012cc

0800ae70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae76:	2300      	movs	r3, #0
 800ae78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae7e:	4b42      	ldr	r3, [pc, #264]	@ (800af88 <xTaskResumeAll+0x118>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d10b      	bne.n	800ae9e <xTaskResumeAll+0x2e>
	__asm volatile
 800ae86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae8a:	f383 8811 	msr	BASEPRI, r3
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	f3bf 8f4f 	dsb	sy
 800ae96:	603b      	str	r3, [r7, #0]
}
 800ae98:	bf00      	nop
 800ae9a:	bf00      	nop
 800ae9c:	e7fd      	b.n	800ae9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae9e:	f001 fa3b 	bl	800c318 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aea2:	4b39      	ldr	r3, [pc, #228]	@ (800af88 <xTaskResumeAll+0x118>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3b01      	subs	r3, #1
 800aea8:	4a37      	ldr	r2, [pc, #220]	@ (800af88 <xTaskResumeAll+0x118>)
 800aeaa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeac:	4b36      	ldr	r3, [pc, #216]	@ (800af88 <xTaskResumeAll+0x118>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d162      	bne.n	800af7a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aeb4:	4b35      	ldr	r3, [pc, #212]	@ (800af8c <xTaskResumeAll+0x11c>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d05e      	beq.n	800af7a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aebc:	e02f      	b.n	800af1e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aebe:	4b34      	ldr	r3, [pc, #208]	@ (800af90 <xTaskResumeAll+0x120>)
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	3318      	adds	r3, #24
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7fe fed6 	bl	8009c7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	3304      	adds	r3, #4
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7fe fed1 	bl	8009c7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aede:	4b2d      	ldr	r3, [pc, #180]	@ (800af94 <xTaskResumeAll+0x124>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d903      	bls.n	800aeee <xTaskResumeAll+0x7e>
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeea:	4a2a      	ldr	r2, [pc, #168]	@ (800af94 <xTaskResumeAll+0x124>)
 800aeec:	6013      	str	r3, [r2, #0]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aef2:	4613      	mov	r3, r2
 800aef4:	009b      	lsls	r3, r3, #2
 800aef6:	4413      	add	r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	4a27      	ldr	r2, [pc, #156]	@ (800af98 <xTaskResumeAll+0x128>)
 800aefc:	441a      	add	r2, r3
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	3304      	adds	r3, #4
 800af02:	4619      	mov	r1, r3
 800af04:	4610      	mov	r0, r2
 800af06:	f7fe fe5c 	bl	8009bc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af0e:	4b23      	ldr	r3, [pc, #140]	@ (800af9c <xTaskResumeAll+0x12c>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af14:	429a      	cmp	r2, r3
 800af16:	d302      	bcc.n	800af1e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800af18:	4b21      	ldr	r3, [pc, #132]	@ (800afa0 <xTaskResumeAll+0x130>)
 800af1a:	2201      	movs	r2, #1
 800af1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af1e:	4b1c      	ldr	r3, [pc, #112]	@ (800af90 <xTaskResumeAll+0x120>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1cb      	bne.n	800aebe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af2c:	f000 fb66 	bl	800b5fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af30:	4b1c      	ldr	r3, [pc, #112]	@ (800afa4 <xTaskResumeAll+0x134>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d010      	beq.n	800af5e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af3c:	f000 f846 	bl	800afcc <xTaskIncrementTick>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d002      	beq.n	800af4c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800af46:	4b16      	ldr	r3, [pc, #88]	@ (800afa0 <xTaskResumeAll+0x130>)
 800af48:	2201      	movs	r2, #1
 800af4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	3b01      	subs	r3, #1
 800af50:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d1f1      	bne.n	800af3c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800af58:	4b12      	ldr	r3, [pc, #72]	@ (800afa4 <xTaskResumeAll+0x134>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af5e:	4b10      	ldr	r3, [pc, #64]	@ (800afa0 <xTaskResumeAll+0x130>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d009      	beq.n	800af7a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af66:	2301      	movs	r3, #1
 800af68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af6a:	4b0f      	ldr	r3, [pc, #60]	@ (800afa8 <xTaskResumeAll+0x138>)
 800af6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af70:	601a      	str	r2, [r3, #0]
 800af72:	f3bf 8f4f 	dsb	sy
 800af76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af7a:	f001 f9ff 	bl	800c37c <vPortExitCritical>

	return xAlreadyYielded;
 800af7e:	68bb      	ldr	r3, [r7, #8]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	200012cc 	.word	0x200012cc
 800af8c:	200012a4 	.word	0x200012a4
 800af90:	20001264 	.word	0x20001264
 800af94:	200012ac 	.word	0x200012ac
 800af98:	20000dd4 	.word	0x20000dd4
 800af9c:	20000dd0 	.word	0x20000dd0
 800afa0:	200012b8 	.word	0x200012b8
 800afa4:	200012b4 	.word	0x200012b4
 800afa8:	e000ed04 	.word	0xe000ed04

0800afac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800afb2:	4b05      	ldr	r3, [pc, #20]	@ (800afc8 <xTaskGetTickCount+0x1c>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800afb8:	687b      	ldr	r3, [r7, #4]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	370c      	adds	r7, #12
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	200012a8 	.word	0x200012a8

0800afcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b086      	sub	sp, #24
 800afd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800afd2:	2300      	movs	r3, #0
 800afd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afd6:	4b4f      	ldr	r3, [pc, #316]	@ (800b114 <xTaskIncrementTick+0x148>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	f040 8090 	bne.w	800b100 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800afe0:	4b4d      	ldr	r3, [pc, #308]	@ (800b118 <xTaskIncrementTick+0x14c>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	3301      	adds	r3, #1
 800afe6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800afe8:	4a4b      	ldr	r2, [pc, #300]	@ (800b118 <xTaskIncrementTick+0x14c>)
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d121      	bne.n	800b038 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800aff4:	4b49      	ldr	r3, [pc, #292]	@ (800b11c <xTaskIncrementTick+0x150>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00b      	beq.n	800b016 <xTaskIncrementTick+0x4a>
	__asm volatile
 800affe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b002:	f383 8811 	msr	BASEPRI, r3
 800b006:	f3bf 8f6f 	isb	sy
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	603b      	str	r3, [r7, #0]
}
 800b010:	bf00      	nop
 800b012:	bf00      	nop
 800b014:	e7fd      	b.n	800b012 <xTaskIncrementTick+0x46>
 800b016:	4b41      	ldr	r3, [pc, #260]	@ (800b11c <xTaskIncrementTick+0x150>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	60fb      	str	r3, [r7, #12]
 800b01c:	4b40      	ldr	r3, [pc, #256]	@ (800b120 <xTaskIncrementTick+0x154>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a3e      	ldr	r2, [pc, #248]	@ (800b11c <xTaskIncrementTick+0x150>)
 800b022:	6013      	str	r3, [r2, #0]
 800b024:	4a3e      	ldr	r2, [pc, #248]	@ (800b120 <xTaskIncrementTick+0x154>)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6013      	str	r3, [r2, #0]
 800b02a:	4b3e      	ldr	r3, [pc, #248]	@ (800b124 <xTaskIncrementTick+0x158>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	3301      	adds	r3, #1
 800b030:	4a3c      	ldr	r2, [pc, #240]	@ (800b124 <xTaskIncrementTick+0x158>)
 800b032:	6013      	str	r3, [r2, #0]
 800b034:	f000 fae2 	bl	800b5fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b038:	4b3b      	ldr	r3, [pc, #236]	@ (800b128 <xTaskIncrementTick+0x15c>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d349      	bcc.n	800b0d6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b042:	4b36      	ldr	r3, [pc, #216]	@ (800b11c <xTaskIncrementTick+0x150>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d104      	bne.n	800b056 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b04c:	4b36      	ldr	r3, [pc, #216]	@ (800b128 <xTaskIncrementTick+0x15c>)
 800b04e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b052:	601a      	str	r2, [r3, #0]
					break;
 800b054:	e03f      	b.n	800b0d6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b056:	4b31      	ldr	r3, [pc, #196]	@ (800b11c <xTaskIncrementTick+0x150>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b066:	693a      	ldr	r2, [r7, #16]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d203      	bcs.n	800b076 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b06e:	4a2e      	ldr	r2, [pc, #184]	@ (800b128 <xTaskIncrementTick+0x15c>)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b074:	e02f      	b.n	800b0d6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	3304      	adds	r3, #4
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fe fdfe 	bl	8009c7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b084:	2b00      	cmp	r3, #0
 800b086:	d004      	beq.n	800b092 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	3318      	adds	r3, #24
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7fe fdf5 	bl	8009c7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b096:	4b25      	ldr	r3, [pc, #148]	@ (800b12c <xTaskIncrementTick+0x160>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d903      	bls.n	800b0a6 <xTaskIncrementTick+0xda>
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a2:	4a22      	ldr	r2, [pc, #136]	@ (800b12c <xTaskIncrementTick+0x160>)
 800b0a4:	6013      	str	r3, [r2, #0]
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	4413      	add	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4a1f      	ldr	r2, [pc, #124]	@ (800b130 <xTaskIncrementTick+0x164>)
 800b0b4:	441a      	add	r2, r3
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	3304      	adds	r3, #4
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4610      	mov	r0, r2
 800b0be:	f7fe fd80 	bl	8009bc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0c6:	4b1b      	ldr	r3, [pc, #108]	@ (800b134 <xTaskIncrementTick+0x168>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d3b8      	bcc.n	800b042 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0d4:	e7b5      	b.n	800b042 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b0d6:	4b17      	ldr	r3, [pc, #92]	@ (800b134 <xTaskIncrementTick+0x168>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0dc:	4914      	ldr	r1, [pc, #80]	@ (800b130 <xTaskIncrementTick+0x164>)
 800b0de:	4613      	mov	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	4413      	add	r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	440b      	add	r3, r1
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d901      	bls.n	800b0f2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b0f2:	4b11      	ldr	r3, [pc, #68]	@ (800b138 <xTaskIncrementTick+0x16c>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d007      	beq.n	800b10a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	617b      	str	r3, [r7, #20]
 800b0fe:	e004      	b.n	800b10a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b100:	4b0e      	ldr	r3, [pc, #56]	@ (800b13c <xTaskIncrementTick+0x170>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	3301      	adds	r3, #1
 800b106:	4a0d      	ldr	r2, [pc, #52]	@ (800b13c <xTaskIncrementTick+0x170>)
 800b108:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b10a:	697b      	ldr	r3, [r7, #20]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3718      	adds	r7, #24
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	200012cc 	.word	0x200012cc
 800b118:	200012a8 	.word	0x200012a8
 800b11c:	2000125c 	.word	0x2000125c
 800b120:	20001260 	.word	0x20001260
 800b124:	200012bc 	.word	0x200012bc
 800b128:	200012c4 	.word	0x200012c4
 800b12c:	200012ac 	.word	0x200012ac
 800b130:	20000dd4 	.word	0x20000dd4
 800b134:	20000dd0 	.word	0x20000dd0
 800b138:	200012b8 	.word	0x200012b8
 800b13c:	200012b4 	.word	0x200012b4

0800b140 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b146:	4b2b      	ldr	r3, [pc, #172]	@ (800b1f4 <vTaskSwitchContext+0xb4>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d003      	beq.n	800b156 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b14e:	4b2a      	ldr	r3, [pc, #168]	@ (800b1f8 <vTaskSwitchContext+0xb8>)
 800b150:	2201      	movs	r2, #1
 800b152:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b154:	e047      	b.n	800b1e6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b156:	4b28      	ldr	r3, [pc, #160]	@ (800b1f8 <vTaskSwitchContext+0xb8>)
 800b158:	2200      	movs	r2, #0
 800b15a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b15c:	4b27      	ldr	r3, [pc, #156]	@ (800b1fc <vTaskSwitchContext+0xbc>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	60fb      	str	r3, [r7, #12]
 800b162:	e011      	b.n	800b188 <vTaskSwitchContext+0x48>
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10b      	bne.n	800b182 <vTaskSwitchContext+0x42>
	__asm volatile
 800b16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b16e:	f383 8811 	msr	BASEPRI, r3
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	607b      	str	r3, [r7, #4]
}
 800b17c:	bf00      	nop
 800b17e:	bf00      	nop
 800b180:	e7fd      	b.n	800b17e <vTaskSwitchContext+0x3e>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	3b01      	subs	r3, #1
 800b186:	60fb      	str	r3, [r7, #12]
 800b188:	491d      	ldr	r1, [pc, #116]	@ (800b200 <vTaskSwitchContext+0xc0>)
 800b18a:	68fa      	ldr	r2, [r7, #12]
 800b18c:	4613      	mov	r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	440b      	add	r3, r1
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d0e3      	beq.n	800b164 <vTaskSwitchContext+0x24>
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	4613      	mov	r3, r2
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	4413      	add	r3, r2
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	4a16      	ldr	r2, [pc, #88]	@ (800b200 <vTaskSwitchContext+0xc0>)
 800b1a8:	4413      	add	r3, r2
 800b1aa:	60bb      	str	r3, [r7, #8]
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	685a      	ldr	r2, [r3, #4]
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	605a      	str	r2, [r3, #4]
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	685a      	ldr	r2, [r3, #4]
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	3308      	adds	r3, #8
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d104      	bne.n	800b1cc <vTaskSwitchContext+0x8c>
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	685a      	ldr	r2, [r3, #4]
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	605a      	str	r2, [r3, #4]
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	4a0c      	ldr	r2, [pc, #48]	@ (800b204 <vTaskSwitchContext+0xc4>)
 800b1d4:	6013      	str	r3, [r2, #0]
 800b1d6:	4a09      	ldr	r2, [pc, #36]	@ (800b1fc <vTaskSwitchContext+0xbc>)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b1dc:	4b09      	ldr	r3, [pc, #36]	@ (800b204 <vTaskSwitchContext+0xc4>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3354      	adds	r3, #84	@ 0x54
 800b1e2:	4a09      	ldr	r2, [pc, #36]	@ (800b208 <vTaskSwitchContext+0xc8>)
 800b1e4:	6013      	str	r3, [r2, #0]
}
 800b1e6:	bf00      	nop
 800b1e8:	3714      	adds	r7, #20
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	200012cc 	.word	0x200012cc
 800b1f8:	200012b8 	.word	0x200012b8
 800b1fc:	200012ac 	.word	0x200012ac
 800b200:	20000dd4 	.word	0x20000dd4
 800b204:	20000dd0 	.word	0x20000dd0
 800b208:	20000030 	.word	0x20000030

0800b20c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d10b      	bne.n	800b234 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	60fb      	str	r3, [r7, #12]
}
 800b22e:	bf00      	nop
 800b230:	bf00      	nop
 800b232:	e7fd      	b.n	800b230 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b234:	4b07      	ldr	r3, [pc, #28]	@ (800b254 <vTaskPlaceOnEventList+0x48>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	3318      	adds	r3, #24
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f7fe fce4 	bl	8009c0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b242:	2101      	movs	r1, #1
 800b244:	6838      	ldr	r0, [r7, #0]
 800b246:	f000 fb87 	bl	800b958 <prvAddCurrentTaskToDelayedList>
}
 800b24a:	bf00      	nop
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	20000dd0 	.word	0x20000dd0

0800b258 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10b      	bne.n	800b282 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b26e:	f383 8811 	msr	BASEPRI, r3
 800b272:	f3bf 8f6f 	isb	sy
 800b276:	f3bf 8f4f 	dsb	sy
 800b27a:	617b      	str	r3, [r7, #20]
}
 800b27c:	bf00      	nop
 800b27e:	bf00      	nop
 800b280:	e7fd      	b.n	800b27e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b282:	4b0a      	ldr	r3, [pc, #40]	@ (800b2ac <vTaskPlaceOnEventListRestricted+0x54>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3318      	adds	r3, #24
 800b288:	4619      	mov	r1, r3
 800b28a:	68f8      	ldr	r0, [r7, #12]
 800b28c:	f7fe fc99 	bl	8009bc2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d002      	beq.n	800b29c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b296:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b29a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b29c:	6879      	ldr	r1, [r7, #4]
 800b29e:	68b8      	ldr	r0, [r7, #8]
 800b2a0:	f000 fb5a 	bl	800b958 <prvAddCurrentTaskToDelayedList>
	}
 800b2a4:	bf00      	nop
 800b2a6:	3718      	adds	r7, #24
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	20000dd0 	.word	0x20000dd0

0800b2b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	68db      	ldr	r3, [r3, #12]
 800b2be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d10b      	bne.n	800b2de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ca:	f383 8811 	msr	BASEPRI, r3
 800b2ce:	f3bf 8f6f 	isb	sy
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	60fb      	str	r3, [r7, #12]
}
 800b2d8:	bf00      	nop
 800b2da:	bf00      	nop
 800b2dc:	e7fd      	b.n	800b2da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	3318      	adds	r3, #24
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fe fcca 	bl	8009c7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2e8:	4b1d      	ldr	r3, [pc, #116]	@ (800b360 <xTaskRemoveFromEventList+0xb0>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d11d      	bne.n	800b32c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7fe fcc1 	bl	8009c7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2fe:	4b19      	ldr	r3, [pc, #100]	@ (800b364 <xTaskRemoveFromEventList+0xb4>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	429a      	cmp	r2, r3
 800b304:	d903      	bls.n	800b30e <xTaskRemoveFromEventList+0x5e>
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b30a:	4a16      	ldr	r2, [pc, #88]	@ (800b364 <xTaskRemoveFromEventList+0xb4>)
 800b30c:	6013      	str	r3, [r2, #0]
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b312:	4613      	mov	r3, r2
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4413      	add	r3, r2
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	4a13      	ldr	r2, [pc, #76]	@ (800b368 <xTaskRemoveFromEventList+0xb8>)
 800b31c:	441a      	add	r2, r3
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	3304      	adds	r3, #4
 800b322:	4619      	mov	r1, r3
 800b324:	4610      	mov	r0, r2
 800b326:	f7fe fc4c 	bl	8009bc2 <vListInsertEnd>
 800b32a:	e005      	b.n	800b338 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	3318      	adds	r3, #24
 800b330:	4619      	mov	r1, r3
 800b332:	480e      	ldr	r0, [pc, #56]	@ (800b36c <xTaskRemoveFromEventList+0xbc>)
 800b334:	f7fe fc45 	bl	8009bc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b33c:	4b0c      	ldr	r3, [pc, #48]	@ (800b370 <xTaskRemoveFromEventList+0xc0>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b342:	429a      	cmp	r2, r3
 800b344:	d905      	bls.n	800b352 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b346:	2301      	movs	r3, #1
 800b348:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b34a:	4b0a      	ldr	r3, [pc, #40]	@ (800b374 <xTaskRemoveFromEventList+0xc4>)
 800b34c:	2201      	movs	r2, #1
 800b34e:	601a      	str	r2, [r3, #0]
 800b350:	e001      	b.n	800b356 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b352:	2300      	movs	r3, #0
 800b354:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b356:	697b      	ldr	r3, [r7, #20]
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3718      	adds	r7, #24
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	200012cc 	.word	0x200012cc
 800b364:	200012ac 	.word	0x200012ac
 800b368:	20000dd4 	.word	0x20000dd4
 800b36c:	20001264 	.word	0x20001264
 800b370:	20000dd0 	.word	0x20000dd0
 800b374:	200012b8 	.word	0x200012b8

0800b378 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b380:	4b06      	ldr	r3, [pc, #24]	@ (800b39c <vTaskInternalSetTimeOutState+0x24>)
 800b382:	681a      	ldr	r2, [r3, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b388:	4b05      	ldr	r3, [pc, #20]	@ (800b3a0 <vTaskInternalSetTimeOutState+0x28>)
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	605a      	str	r2, [r3, #4]
}
 800b390:	bf00      	nop
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	200012bc 	.word	0x200012bc
 800b3a0:	200012a8 	.word	0x200012a8

0800b3a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b088      	sub	sp, #32
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d10b      	bne.n	800b3cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b8:	f383 8811 	msr	BASEPRI, r3
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	f3bf 8f4f 	dsb	sy
 800b3c4:	613b      	str	r3, [r7, #16]
}
 800b3c6:	bf00      	nop
 800b3c8:	bf00      	nop
 800b3ca:	e7fd      	b.n	800b3c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d10b      	bne.n	800b3ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	60fb      	str	r3, [r7, #12]
}
 800b3e4:	bf00      	nop
 800b3e6:	bf00      	nop
 800b3e8:	e7fd      	b.n	800b3e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b3ea:	f000 ff95 	bl	800c318 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b3ee:	4b1d      	ldr	r3, [pc, #116]	@ (800b464 <xTaskCheckForTimeOut+0xc0>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	685b      	ldr	r3, [r3, #4]
 800b3f8:	69ba      	ldr	r2, [r7, #24]
 800b3fa:	1ad3      	subs	r3, r2, r3
 800b3fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b406:	d102      	bne.n	800b40e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b408:	2300      	movs	r3, #0
 800b40a:	61fb      	str	r3, [r7, #28]
 800b40c:	e023      	b.n	800b456 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	4b15      	ldr	r3, [pc, #84]	@ (800b468 <xTaskCheckForTimeOut+0xc4>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	429a      	cmp	r2, r3
 800b418:	d007      	beq.n	800b42a <xTaskCheckForTimeOut+0x86>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	69ba      	ldr	r2, [r7, #24]
 800b420:	429a      	cmp	r2, r3
 800b422:	d302      	bcc.n	800b42a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b424:	2301      	movs	r3, #1
 800b426:	61fb      	str	r3, [r7, #28]
 800b428:	e015      	b.n	800b456 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	429a      	cmp	r2, r3
 800b432:	d20b      	bcs.n	800b44c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	1ad2      	subs	r2, r2, r3
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f7ff ff99 	bl	800b378 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b446:	2300      	movs	r3, #0
 800b448:	61fb      	str	r3, [r7, #28]
 800b44a:	e004      	b.n	800b456 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	2200      	movs	r2, #0
 800b450:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b452:	2301      	movs	r3, #1
 800b454:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b456:	f000 ff91 	bl	800c37c <vPortExitCritical>

	return xReturn;
 800b45a:	69fb      	ldr	r3, [r7, #28]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3720      	adds	r7, #32
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	200012a8 	.word	0x200012a8
 800b468:	200012bc 	.word	0x200012bc

0800b46c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b46c:	b480      	push	{r7}
 800b46e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b470:	4b03      	ldr	r3, [pc, #12]	@ (800b480 <vTaskMissedYield+0x14>)
 800b472:	2201      	movs	r2, #1
 800b474:	601a      	str	r2, [r3, #0]
}
 800b476:	bf00      	nop
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr
 800b480:	200012b8 	.word	0x200012b8

0800b484 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b48c:	f000 f852 	bl	800b534 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b490:	4b06      	ldr	r3, [pc, #24]	@ (800b4ac <prvIdleTask+0x28>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b01      	cmp	r3, #1
 800b496:	d9f9      	bls.n	800b48c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b498:	4b05      	ldr	r3, [pc, #20]	@ (800b4b0 <prvIdleTask+0x2c>)
 800b49a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b49e:	601a      	str	r2, [r3, #0]
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b4a8:	e7f0      	b.n	800b48c <prvIdleTask+0x8>
 800b4aa:	bf00      	nop
 800b4ac:	20000dd4 	.word	0x20000dd4
 800b4b0:	e000ed04 	.word	0xe000ed04

0800b4b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b082      	sub	sp, #8
 800b4b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	607b      	str	r3, [r7, #4]
 800b4be:	e00c      	b.n	800b4da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4413      	add	r3, r2
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4a12      	ldr	r2, [pc, #72]	@ (800b514 <prvInitialiseTaskLists+0x60>)
 800b4cc:	4413      	add	r3, r2
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7fe fb4a 	bl	8009b68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	607b      	str	r3, [r7, #4]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2b37      	cmp	r3, #55	@ 0x37
 800b4de:	d9ef      	bls.n	800b4c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b4e0:	480d      	ldr	r0, [pc, #52]	@ (800b518 <prvInitialiseTaskLists+0x64>)
 800b4e2:	f7fe fb41 	bl	8009b68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b4e6:	480d      	ldr	r0, [pc, #52]	@ (800b51c <prvInitialiseTaskLists+0x68>)
 800b4e8:	f7fe fb3e 	bl	8009b68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b4ec:	480c      	ldr	r0, [pc, #48]	@ (800b520 <prvInitialiseTaskLists+0x6c>)
 800b4ee:	f7fe fb3b 	bl	8009b68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b4f2:	480c      	ldr	r0, [pc, #48]	@ (800b524 <prvInitialiseTaskLists+0x70>)
 800b4f4:	f7fe fb38 	bl	8009b68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b4f8:	480b      	ldr	r0, [pc, #44]	@ (800b528 <prvInitialiseTaskLists+0x74>)
 800b4fa:	f7fe fb35 	bl	8009b68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b4fe:	4b0b      	ldr	r3, [pc, #44]	@ (800b52c <prvInitialiseTaskLists+0x78>)
 800b500:	4a05      	ldr	r2, [pc, #20]	@ (800b518 <prvInitialiseTaskLists+0x64>)
 800b502:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b504:	4b0a      	ldr	r3, [pc, #40]	@ (800b530 <prvInitialiseTaskLists+0x7c>)
 800b506:	4a05      	ldr	r2, [pc, #20]	@ (800b51c <prvInitialiseTaskLists+0x68>)
 800b508:	601a      	str	r2, [r3, #0]
}
 800b50a:	bf00      	nop
 800b50c:	3708      	adds	r7, #8
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	20000dd4 	.word	0x20000dd4
 800b518:	20001234 	.word	0x20001234
 800b51c:	20001248 	.word	0x20001248
 800b520:	20001264 	.word	0x20001264
 800b524:	20001278 	.word	0x20001278
 800b528:	20001290 	.word	0x20001290
 800b52c:	2000125c 	.word	0x2000125c
 800b530:	20001260 	.word	0x20001260

0800b534 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b53a:	e019      	b.n	800b570 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b53c:	f000 feec 	bl	800c318 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b540:	4b10      	ldr	r3, [pc, #64]	@ (800b584 <prvCheckTasksWaitingTermination+0x50>)
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	3304      	adds	r3, #4
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7fe fb95 	bl	8009c7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b552:	4b0d      	ldr	r3, [pc, #52]	@ (800b588 <prvCheckTasksWaitingTermination+0x54>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	3b01      	subs	r3, #1
 800b558:	4a0b      	ldr	r2, [pc, #44]	@ (800b588 <prvCheckTasksWaitingTermination+0x54>)
 800b55a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b55c:	4b0b      	ldr	r3, [pc, #44]	@ (800b58c <prvCheckTasksWaitingTermination+0x58>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	3b01      	subs	r3, #1
 800b562:	4a0a      	ldr	r2, [pc, #40]	@ (800b58c <prvCheckTasksWaitingTermination+0x58>)
 800b564:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b566:	f000 ff09 	bl	800c37c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f810 	bl	800b590 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b570:	4b06      	ldr	r3, [pc, #24]	@ (800b58c <prvCheckTasksWaitingTermination+0x58>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1e1      	bne.n	800b53c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b578:	bf00      	nop
 800b57a:	bf00      	nop
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	20001278 	.word	0x20001278
 800b588:	200012a4 	.word	0x200012a4
 800b58c:	2000128c 	.word	0x2000128c

0800b590 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	3354      	adds	r3, #84	@ 0x54
 800b59c:	4618      	mov	r0, r3
 800b59e:	f002 fb8f 	bl	800dcc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d108      	bne.n	800b5be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f001 f8a1 	bl	800c6f8 <vPortFree>
				vPortFree( pxTCB );
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f001 f89e 	bl	800c6f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b5bc:	e019      	b.n	800b5f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d103      	bne.n	800b5d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f001 f895 	bl	800c6f8 <vPortFree>
	}
 800b5ce:	e010      	b.n	800b5f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d00b      	beq.n	800b5f2 <prvDeleteTCB+0x62>
	__asm volatile
 800b5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5de:	f383 8811 	msr	BASEPRI, r3
 800b5e2:	f3bf 8f6f 	isb	sy
 800b5e6:	f3bf 8f4f 	dsb	sy
 800b5ea:	60fb      	str	r3, [r7, #12]
}
 800b5ec:	bf00      	nop
 800b5ee:	bf00      	nop
 800b5f0:	e7fd      	b.n	800b5ee <prvDeleteTCB+0x5e>
	}
 800b5f2:	bf00      	nop
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
	...

0800b5fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b602:	4b0c      	ldr	r3, [pc, #48]	@ (800b634 <prvResetNextTaskUnblockTime+0x38>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d104      	bne.n	800b616 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b60c:	4b0a      	ldr	r3, [pc, #40]	@ (800b638 <prvResetNextTaskUnblockTime+0x3c>)
 800b60e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b612:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b614:	e008      	b.n	800b628 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b616:	4b07      	ldr	r3, [pc, #28]	@ (800b634 <prvResetNextTaskUnblockTime+0x38>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	4a04      	ldr	r2, [pc, #16]	@ (800b638 <prvResetNextTaskUnblockTime+0x3c>)
 800b626:	6013      	str	r3, [r2, #0]
}
 800b628:	bf00      	nop
 800b62a:	370c      	adds	r7, #12
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr
 800b634:	2000125c 	.word	0x2000125c
 800b638:	200012c4 	.word	0x200012c4

0800b63c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b642:	4b0b      	ldr	r3, [pc, #44]	@ (800b670 <xTaskGetSchedulerState+0x34>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d102      	bne.n	800b650 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b64a:	2301      	movs	r3, #1
 800b64c:	607b      	str	r3, [r7, #4]
 800b64e:	e008      	b.n	800b662 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b650:	4b08      	ldr	r3, [pc, #32]	@ (800b674 <xTaskGetSchedulerState+0x38>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d102      	bne.n	800b65e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b658:	2302      	movs	r3, #2
 800b65a:	607b      	str	r3, [r7, #4]
 800b65c:	e001      	b.n	800b662 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b65e:	2300      	movs	r3, #0
 800b660:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b662:	687b      	ldr	r3, [r7, #4]
	}
 800b664:	4618      	mov	r0, r3
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr
 800b670:	200012b0 	.word	0x200012b0
 800b674:	200012cc 	.word	0x200012cc

0800b678 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b684:	2300      	movs	r3, #0
 800b686:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d051      	beq.n	800b732 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b692:	4b2a      	ldr	r3, [pc, #168]	@ (800b73c <xTaskPriorityInherit+0xc4>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b698:	429a      	cmp	r2, r3
 800b69a:	d241      	bcs.n	800b720 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	db06      	blt.n	800b6b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6a4:	4b25      	ldr	r3, [pc, #148]	@ (800b73c <xTaskPriorityInherit+0xc4>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6aa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	6959      	ldr	r1, [r3, #20]
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	4413      	add	r3, r2
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	4a1f      	ldr	r2, [pc, #124]	@ (800b740 <xTaskPriorityInherit+0xc8>)
 800b6c4:	4413      	add	r3, r2
 800b6c6:	4299      	cmp	r1, r3
 800b6c8:	d122      	bne.n	800b710 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	3304      	adds	r3, #4
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7fe fad4 	bl	8009c7c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b6d4:	4b19      	ldr	r3, [pc, #100]	@ (800b73c <xTaskPriorityInherit+0xc4>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6e2:	4b18      	ldr	r3, [pc, #96]	@ (800b744 <xTaskPriorityInherit+0xcc>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d903      	bls.n	800b6f2 <xTaskPriorityInherit+0x7a>
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6ee:	4a15      	ldr	r2, [pc, #84]	@ (800b744 <xTaskPriorityInherit+0xcc>)
 800b6f0:	6013      	str	r3, [r2, #0]
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	4413      	add	r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	4a10      	ldr	r2, [pc, #64]	@ (800b740 <xTaskPriorityInherit+0xc8>)
 800b700:	441a      	add	r2, r3
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	3304      	adds	r3, #4
 800b706:	4619      	mov	r1, r3
 800b708:	4610      	mov	r0, r2
 800b70a:	f7fe fa5a 	bl	8009bc2 <vListInsertEnd>
 800b70e:	e004      	b.n	800b71a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b710:	4b0a      	ldr	r3, [pc, #40]	@ (800b73c <xTaskPriorityInherit+0xc4>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b71a:	2301      	movs	r3, #1
 800b71c:	60fb      	str	r3, [r7, #12]
 800b71e:	e008      	b.n	800b732 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b724:	4b05      	ldr	r3, [pc, #20]	@ (800b73c <xTaskPriorityInherit+0xc4>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d201      	bcs.n	800b732 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b72e:	2301      	movs	r3, #1
 800b730:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b732:	68fb      	ldr	r3, [r7, #12]
	}
 800b734:	4618      	mov	r0, r3
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	20000dd0 	.word	0x20000dd0
 800b740:	20000dd4 	.word	0x20000dd4
 800b744:	200012ac 	.word	0x200012ac

0800b748 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b086      	sub	sp, #24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b754:	2300      	movs	r3, #0
 800b756:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d058      	beq.n	800b810 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b75e:	4b2f      	ldr	r3, [pc, #188]	@ (800b81c <xTaskPriorityDisinherit+0xd4>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	693a      	ldr	r2, [r7, #16]
 800b764:	429a      	cmp	r2, r3
 800b766:	d00b      	beq.n	800b780 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b76c:	f383 8811 	msr	BASEPRI, r3
 800b770:	f3bf 8f6f 	isb	sy
 800b774:	f3bf 8f4f 	dsb	sy
 800b778:	60fb      	str	r3, [r7, #12]
}
 800b77a:	bf00      	nop
 800b77c:	bf00      	nop
 800b77e:	e7fd      	b.n	800b77c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b784:	2b00      	cmp	r3, #0
 800b786:	d10b      	bne.n	800b7a0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b78c:	f383 8811 	msr	BASEPRI, r3
 800b790:	f3bf 8f6f 	isb	sy
 800b794:	f3bf 8f4f 	dsb	sy
 800b798:	60bb      	str	r3, [r7, #8]
}
 800b79a:	bf00      	nop
 800b79c:	bf00      	nop
 800b79e:	e7fd      	b.n	800b79c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7a4:	1e5a      	subs	r2, r3, #1
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d02c      	beq.n	800b810 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d128      	bne.n	800b810 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fe fa5a 	bl	8009c7c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7e0:	4b0f      	ldr	r3, [pc, #60]	@ (800b820 <xTaskPriorityDisinherit+0xd8>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d903      	bls.n	800b7f0 <xTaskPriorityDisinherit+0xa8>
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ec:	4a0c      	ldr	r2, [pc, #48]	@ (800b820 <xTaskPriorityDisinherit+0xd8>)
 800b7ee:	6013      	str	r3, [r2, #0]
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7f4:	4613      	mov	r3, r2
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	4413      	add	r3, r2
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	4a09      	ldr	r2, [pc, #36]	@ (800b824 <xTaskPriorityDisinherit+0xdc>)
 800b7fe:	441a      	add	r2, r3
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	3304      	adds	r3, #4
 800b804:	4619      	mov	r1, r3
 800b806:	4610      	mov	r0, r2
 800b808:	f7fe f9db 	bl	8009bc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b80c:	2301      	movs	r3, #1
 800b80e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b810:	697b      	ldr	r3, [r7, #20]
	}
 800b812:	4618      	mov	r0, r3
 800b814:	3718      	adds	r7, #24
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	20000dd0 	.word	0x20000dd0
 800b820:	200012ac 	.word	0x200012ac
 800b824:	20000dd4 	.word	0x20000dd4

0800b828 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b088      	sub	sp, #32
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b836:	2301      	movs	r3, #1
 800b838:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d06c      	beq.n	800b91a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b844:	2b00      	cmp	r3, #0
 800b846:	d10b      	bne.n	800b860 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800b848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b84c:	f383 8811 	msr	BASEPRI, r3
 800b850:	f3bf 8f6f 	isb	sy
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	60fb      	str	r3, [r7, #12]
}
 800b85a:	bf00      	nop
 800b85c:	bf00      	nop
 800b85e:	e7fd      	b.n	800b85c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b864:	683a      	ldr	r2, [r7, #0]
 800b866:	429a      	cmp	r2, r3
 800b868:	d902      	bls.n	800b870 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	61fb      	str	r3, [r7, #28]
 800b86e:	e002      	b.n	800b876 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b874:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b87a:	69fa      	ldr	r2, [r7, #28]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d04c      	beq.n	800b91a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b880:	69bb      	ldr	r3, [r7, #24]
 800b882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b884:	697a      	ldr	r2, [r7, #20]
 800b886:	429a      	cmp	r2, r3
 800b888:	d147      	bne.n	800b91a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b88a:	4b26      	ldr	r3, [pc, #152]	@ (800b924 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	69ba      	ldr	r2, [r7, #24]
 800b890:	429a      	cmp	r2, r3
 800b892:	d10b      	bne.n	800b8ac <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	60bb      	str	r3, [r7, #8]
}
 800b8a6:	bf00      	nop
 800b8a8:	bf00      	nop
 800b8aa:	e7fd      	b.n	800b8a8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	69fa      	ldr	r2, [r7, #28]
 800b8b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	db04      	blt.n	800b8ca <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	6959      	ldr	r1, [r3, #20]
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	4413      	add	r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	4a13      	ldr	r2, [pc, #76]	@ (800b928 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b8da:	4413      	add	r3, r2
 800b8dc:	4299      	cmp	r1, r3
 800b8de:	d11c      	bne.n	800b91a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	3304      	adds	r3, #4
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fe f9c9 	bl	8009c7c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8ee:	4b0f      	ldr	r3, [pc, #60]	@ (800b92c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d903      	bls.n	800b8fe <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8fa:	4a0c      	ldr	r2, [pc, #48]	@ (800b92c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b8fc:	6013      	str	r3, [r2, #0]
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b902:	4613      	mov	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4a07      	ldr	r2, [pc, #28]	@ (800b928 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b90c:	441a      	add	r2, r3
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	3304      	adds	r3, #4
 800b912:	4619      	mov	r1, r3
 800b914:	4610      	mov	r0, r2
 800b916:	f7fe f954 	bl	8009bc2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b91a:	bf00      	nop
 800b91c:	3720      	adds	r7, #32
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	20000dd0 	.word	0x20000dd0
 800b928:	20000dd4 	.word	0x20000dd4
 800b92c:	200012ac 	.word	0x200012ac

0800b930 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b930:	b480      	push	{r7}
 800b932:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b934:	4b07      	ldr	r3, [pc, #28]	@ (800b954 <pvTaskIncrementMutexHeldCount+0x24>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d004      	beq.n	800b946 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b93c:	4b05      	ldr	r3, [pc, #20]	@ (800b954 <pvTaskIncrementMutexHeldCount+0x24>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b942:	3201      	adds	r2, #1
 800b944:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800b946:	4b03      	ldr	r3, [pc, #12]	@ (800b954 <pvTaskIncrementMutexHeldCount+0x24>)
 800b948:	681b      	ldr	r3, [r3, #0]
	}
 800b94a:	4618      	mov	r0, r3
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr
 800b954:	20000dd0 	.word	0x20000dd0

0800b958 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b962:	4b21      	ldr	r3, [pc, #132]	@ (800b9e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b968:	4b20      	ldr	r3, [pc, #128]	@ (800b9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	3304      	adds	r3, #4
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe f984 	bl	8009c7c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b97a:	d10a      	bne.n	800b992 <prvAddCurrentTaskToDelayedList+0x3a>
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d007      	beq.n	800b992 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b982:	4b1a      	ldr	r3, [pc, #104]	@ (800b9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	3304      	adds	r3, #4
 800b988:	4619      	mov	r1, r3
 800b98a:	4819      	ldr	r0, [pc, #100]	@ (800b9f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b98c:	f7fe f919 	bl	8009bc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b990:	e026      	b.n	800b9e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4413      	add	r3, r2
 800b998:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b99a:	4b14      	ldr	r3, [pc, #80]	@ (800b9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b9a2:	68ba      	ldr	r2, [r7, #8]
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d209      	bcs.n	800b9be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9aa:	4b12      	ldr	r3, [pc, #72]	@ (800b9f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	4b0f      	ldr	r3, [pc, #60]	@ (800b9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3304      	adds	r3, #4
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	4610      	mov	r0, r2
 800b9b8:	f7fe f927 	bl	8009c0a <vListInsert>
}
 800b9bc:	e010      	b.n	800b9e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9be:	4b0e      	ldr	r3, [pc, #56]	@ (800b9f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	4b0a      	ldr	r3, [pc, #40]	@ (800b9ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	4610      	mov	r0, r2
 800b9cc:	f7fe f91d 	bl	8009c0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b9d0:	4b0a      	ldr	r3, [pc, #40]	@ (800b9fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d202      	bcs.n	800b9e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b9da:	4a08      	ldr	r2, [pc, #32]	@ (800b9fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	6013      	str	r3, [r2, #0]
}
 800b9e0:	bf00      	nop
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	200012a8 	.word	0x200012a8
 800b9ec:	20000dd0 	.word	0x20000dd0
 800b9f0:	20001290 	.word	0x20001290
 800b9f4:	20001260 	.word	0x20001260
 800b9f8:	2000125c 	.word	0x2000125c
 800b9fc:	200012c4 	.word	0x200012c4

0800ba00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b08a      	sub	sp, #40	@ 0x28
 800ba04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ba06:	2300      	movs	r3, #0
 800ba08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba0a:	f000 fb13 	bl	800c034 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ba0e:	4b1d      	ldr	r3, [pc, #116]	@ (800ba84 <xTimerCreateTimerTask+0x84>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d021      	beq.n	800ba5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ba16:	2300      	movs	r3, #0
 800ba18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ba1e:	1d3a      	adds	r2, r7, #4
 800ba20:	f107 0108 	add.w	r1, r7, #8
 800ba24:	f107 030c 	add.w	r3, r7, #12
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7fe f883 	bl	8009b34 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba2e:	6879      	ldr	r1, [r7, #4]
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	9202      	str	r2, [sp, #8]
 800ba36:	9301      	str	r3, [sp, #4]
 800ba38:	2302      	movs	r3, #2
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	460a      	mov	r2, r1
 800ba40:	4911      	ldr	r1, [pc, #68]	@ (800ba88 <xTimerCreateTimerTask+0x88>)
 800ba42:	4812      	ldr	r0, [pc, #72]	@ (800ba8c <xTimerCreateTimerTask+0x8c>)
 800ba44:	f7fe ffa2 	bl	800a98c <xTaskCreateStatic>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	4a11      	ldr	r2, [pc, #68]	@ (800ba90 <xTimerCreateTimerTask+0x90>)
 800ba4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ba4e:	4b10      	ldr	r3, [pc, #64]	@ (800ba90 <xTimerCreateTimerTask+0x90>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba56:	2301      	movs	r3, #1
 800ba58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d10b      	bne.n	800ba78 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	613b      	str	r3, [r7, #16]
}
 800ba72:	bf00      	nop
 800ba74:	bf00      	nop
 800ba76:	e7fd      	b.n	800ba74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba78:	697b      	ldr	r3, [r7, #20]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3718      	adds	r7, #24
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
 800ba82:	bf00      	nop
 800ba84:	20001300 	.word	0x20001300
 800ba88:	080112b0 	.word	0x080112b0
 800ba8c:	0800bbcd 	.word	0x0800bbcd
 800ba90:	20001304 	.word	0x20001304

0800ba94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b08a      	sub	sp, #40	@ 0x28
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	607a      	str	r2, [r7, #4]
 800baa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800baa2:	2300      	movs	r3, #0
 800baa4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10b      	bne.n	800bac4 <xTimerGenericCommand+0x30>
	__asm volatile
 800baac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab0:	f383 8811 	msr	BASEPRI, r3
 800bab4:	f3bf 8f6f 	isb	sy
 800bab8:	f3bf 8f4f 	dsb	sy
 800babc:	623b      	str	r3, [r7, #32]
}
 800babe:	bf00      	nop
 800bac0:	bf00      	nop
 800bac2:	e7fd      	b.n	800bac0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bac4:	4b19      	ldr	r3, [pc, #100]	@ (800bb2c <xTimerGenericCommand+0x98>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d02a      	beq.n	800bb22 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	2b05      	cmp	r3, #5
 800badc:	dc18      	bgt.n	800bb10 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bade:	f7ff fdad 	bl	800b63c <xTaskGetSchedulerState>
 800bae2:	4603      	mov	r3, r0
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d109      	bne.n	800bafc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bae8:	4b10      	ldr	r3, [pc, #64]	@ (800bb2c <xTimerGenericCommand+0x98>)
 800baea:	6818      	ldr	r0, [r3, #0]
 800baec:	f107 0110 	add.w	r1, r7, #16
 800baf0:	2300      	movs	r3, #0
 800baf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800baf4:	f7fe fa32 	bl	8009f5c <xQueueGenericSend>
 800baf8:	6278      	str	r0, [r7, #36]	@ 0x24
 800bafa:	e012      	b.n	800bb22 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bafc:	4b0b      	ldr	r3, [pc, #44]	@ (800bb2c <xTimerGenericCommand+0x98>)
 800bafe:	6818      	ldr	r0, [r3, #0]
 800bb00:	f107 0110 	add.w	r1, r7, #16
 800bb04:	2300      	movs	r3, #0
 800bb06:	2200      	movs	r2, #0
 800bb08:	f7fe fa28 	bl	8009f5c <xQueueGenericSend>
 800bb0c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bb0e:	e008      	b.n	800bb22 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb10:	4b06      	ldr	r3, [pc, #24]	@ (800bb2c <xTimerGenericCommand+0x98>)
 800bb12:	6818      	ldr	r0, [r3, #0]
 800bb14:	f107 0110 	add.w	r1, r7, #16
 800bb18:	2300      	movs	r3, #0
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	f7fe fb20 	bl	800a160 <xQueueGenericSendFromISR>
 800bb20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3728      	adds	r7, #40	@ 0x28
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}
 800bb2c:	20001300 	.word	0x20001300

0800bb30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b088      	sub	sp, #32
 800bb34:	af02      	add	r7, sp, #8
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb3a:	4b23      	ldr	r3, [pc, #140]	@ (800bbc8 <prvProcessExpiredTimer+0x98>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	3304      	adds	r3, #4
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7fe f897 	bl	8009c7c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb54:	f003 0304 	and.w	r3, r3, #4
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d023      	beq.n	800bba4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	699a      	ldr	r2, [r3, #24]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	18d1      	adds	r1, r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	683a      	ldr	r2, [r7, #0]
 800bb68:	6978      	ldr	r0, [r7, #20]
 800bb6a:	f000 f8d5 	bl	800bd18 <prvInsertTimerInActiveList>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d020      	beq.n	800bbb6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb74:	2300      	movs	r3, #0
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	2300      	movs	r3, #0
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	2100      	movs	r1, #0
 800bb7e:	6978      	ldr	r0, [r7, #20]
 800bb80:	f7ff ff88 	bl	800ba94 <xTimerGenericCommand>
 800bb84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d114      	bne.n	800bbb6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bb8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	60fb      	str	r3, [r7, #12]
}
 800bb9e:	bf00      	nop
 800bba0:	bf00      	nop
 800bba2:	e7fd      	b.n	800bba0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbaa:	f023 0301 	bic.w	r3, r3, #1
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	697b      	ldr	r3, [r7, #20]
 800bbb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	6a1b      	ldr	r3, [r3, #32]
 800bbba:	6978      	ldr	r0, [r7, #20]
 800bbbc:	4798      	blx	r3
}
 800bbbe:	bf00      	nop
 800bbc0:	3718      	adds	r7, #24
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	200012f8 	.word	0x200012f8

0800bbcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbd4:	f107 0308 	add.w	r3, r7, #8
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f000 f859 	bl	800bc90 <prvGetNextExpireTime>
 800bbde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f000 f805 	bl	800bbf4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bbea:	f000 f8d7 	bl	800bd9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbee:	bf00      	nop
 800bbf0:	e7f0      	b.n	800bbd4 <prvTimerTask+0x8>
	...

0800bbf4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bbfe:	f7ff f929 	bl	800ae54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc02:	f107 0308 	add.w	r3, r7, #8
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 f866 	bl	800bcd8 <prvSampleTimeNow>
 800bc0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d130      	bne.n	800bc76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d10a      	bne.n	800bc30 <prvProcessTimerOrBlockTask+0x3c>
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d806      	bhi.n	800bc30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc22:	f7ff f925 	bl	800ae70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc26:	68f9      	ldr	r1, [r7, #12]
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f7ff ff81 	bl	800bb30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc2e:	e024      	b.n	800bc7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d008      	beq.n	800bc48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc36:	4b13      	ldr	r3, [pc, #76]	@ (800bc84 <prvProcessTimerOrBlockTask+0x90>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d101      	bne.n	800bc44 <prvProcessTimerOrBlockTask+0x50>
 800bc40:	2301      	movs	r3, #1
 800bc42:	e000      	b.n	800bc46 <prvProcessTimerOrBlockTask+0x52>
 800bc44:	2300      	movs	r3, #0
 800bc46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc48:	4b0f      	ldr	r3, [pc, #60]	@ (800bc88 <prvProcessTimerOrBlockTask+0x94>)
 800bc4a:	6818      	ldr	r0, [r3, #0]
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	683a      	ldr	r2, [r7, #0]
 800bc54:	4619      	mov	r1, r3
 800bc56:	f7fe fe65 	bl	800a924 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc5a:	f7ff f909 	bl	800ae70 <xTaskResumeAll>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d10a      	bne.n	800bc7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc64:	4b09      	ldr	r3, [pc, #36]	@ (800bc8c <prvProcessTimerOrBlockTask+0x98>)
 800bc66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc6a:	601a      	str	r2, [r3, #0]
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	f3bf 8f6f 	isb	sy
}
 800bc74:	e001      	b.n	800bc7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc76:	f7ff f8fb 	bl	800ae70 <xTaskResumeAll>
}
 800bc7a:	bf00      	nop
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	200012fc 	.word	0x200012fc
 800bc88:	20001300 	.word	0x20001300
 800bc8c:	e000ed04 	.word	0xe000ed04

0800bc90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc98:	4b0e      	ldr	r3, [pc, #56]	@ (800bcd4 <prvGetNextExpireTime+0x44>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d101      	bne.n	800bca6 <prvGetNextExpireTime+0x16>
 800bca2:	2201      	movs	r2, #1
 800bca4:	e000      	b.n	800bca8 <prvGetNextExpireTime+0x18>
 800bca6:	2200      	movs	r2, #0
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d105      	bne.n	800bcc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcb4:	4b07      	ldr	r3, [pc, #28]	@ (800bcd4 <prvGetNextExpireTime+0x44>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	60fb      	str	r3, [r7, #12]
 800bcbe:	e001      	b.n	800bcc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3714      	adds	r7, #20
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr
 800bcd2:	bf00      	nop
 800bcd4:	200012f8 	.word	0x200012f8

0800bcd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bce0:	f7ff f964 	bl	800afac <xTaskGetTickCount>
 800bce4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bce6:	4b0b      	ldr	r3, [pc, #44]	@ (800bd14 <prvSampleTimeNow+0x3c>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d205      	bcs.n	800bcfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bcf0:	f000 f93a 	bl	800bf68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	601a      	str	r2, [r3, #0]
 800bcfa:	e002      	b.n	800bd02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bd02:	4a04      	ldr	r2, [pc, #16]	@ (800bd14 <prvSampleTimeNow+0x3c>)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd08:	68fb      	ldr	r3, [r7, #12]
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	20001308 	.word	0x20001308

0800bd18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b086      	sub	sp, #24
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
 800bd24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd26:	2300      	movs	r3, #0
 800bd28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd36:	68ba      	ldr	r2, [r7, #8]
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	d812      	bhi.n	800bd64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	1ad2      	subs	r2, r2, r3
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	699b      	ldr	r3, [r3, #24]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d302      	bcc.n	800bd52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	617b      	str	r3, [r7, #20]
 800bd50:	e01b      	b.n	800bd8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd52:	4b10      	ldr	r3, [pc, #64]	@ (800bd94 <prvInsertTimerInActiveList+0x7c>)
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	3304      	adds	r3, #4
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	4610      	mov	r0, r2
 800bd5e:	f7fd ff54 	bl	8009c0a <vListInsert>
 800bd62:	e012      	b.n	800bd8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d206      	bcs.n	800bd7a <prvInsertTimerInActiveList+0x62>
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d302      	bcc.n	800bd7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd74:	2301      	movs	r3, #1
 800bd76:	617b      	str	r3, [r7, #20]
 800bd78:	e007      	b.n	800bd8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd7a:	4b07      	ldr	r3, [pc, #28]	@ (800bd98 <prvInsertTimerInActiveList+0x80>)
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	3304      	adds	r3, #4
 800bd82:	4619      	mov	r1, r3
 800bd84:	4610      	mov	r0, r2
 800bd86:	f7fd ff40 	bl	8009c0a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd8a:	697b      	ldr	r3, [r7, #20]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3718      	adds	r7, #24
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	200012fc 	.word	0x200012fc
 800bd98:	200012f8 	.word	0x200012f8

0800bd9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b08e      	sub	sp, #56	@ 0x38
 800bda0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bda2:	e0ce      	b.n	800bf42 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	da19      	bge.n	800bdde <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bdaa:	1d3b      	adds	r3, r7, #4
 800bdac:	3304      	adds	r3, #4
 800bdae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bdb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d10b      	bne.n	800bdce <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bdb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdba:	f383 8811 	msr	BASEPRI, r3
 800bdbe:	f3bf 8f6f 	isb	sy
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	61fb      	str	r3, [r7, #28]
}
 800bdc8:	bf00      	nop
 800bdca:	bf00      	nop
 800bdcc:	e7fd      	b.n	800bdca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bdce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdd4:	6850      	ldr	r0, [r2, #4]
 800bdd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdd8:	6892      	ldr	r2, [r2, #8]
 800bdda:	4611      	mov	r1, r2
 800bddc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	f2c0 80ae 	blt.w	800bf42 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bdea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdec:	695b      	ldr	r3, [r3, #20]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d004      	beq.n	800bdfc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fd ff40 	bl	8009c7c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdfc:	463b      	mov	r3, r7
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7ff ff6a 	bl	800bcd8 <prvSampleTimeNow>
 800be04:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2b09      	cmp	r3, #9
 800be0a:	f200 8097 	bhi.w	800bf3c <prvProcessReceivedCommands+0x1a0>
 800be0e:	a201      	add	r2, pc, #4	@ (adr r2, 800be14 <prvProcessReceivedCommands+0x78>)
 800be10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be14:	0800be3d 	.word	0x0800be3d
 800be18:	0800be3d 	.word	0x0800be3d
 800be1c:	0800be3d 	.word	0x0800be3d
 800be20:	0800beb3 	.word	0x0800beb3
 800be24:	0800bec7 	.word	0x0800bec7
 800be28:	0800bf13 	.word	0x0800bf13
 800be2c:	0800be3d 	.word	0x0800be3d
 800be30:	0800be3d 	.word	0x0800be3d
 800be34:	0800beb3 	.word	0x0800beb3
 800be38:	0800bec7 	.word	0x0800bec7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be42:	f043 0301 	orr.w	r3, r3, #1
 800be46:	b2da      	uxtb	r2, r3
 800be48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be4e:	68ba      	ldr	r2, [r7, #8]
 800be50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	18d1      	adds	r1, r2, r3
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be5c:	f7ff ff5c 	bl	800bd18 <prvInsertTimerInActiveList>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d06c      	beq.n	800bf40 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be68:	6a1b      	ldr	r3, [r3, #32]
 800be6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be74:	f003 0304 	and.w	r3, r3, #4
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d061      	beq.n	800bf40 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be80:	699b      	ldr	r3, [r3, #24]
 800be82:	441a      	add	r2, r3
 800be84:	2300      	movs	r3, #0
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	2300      	movs	r3, #0
 800be8a:	2100      	movs	r1, #0
 800be8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800be8e:	f7ff fe01 	bl	800ba94 <xTimerGenericCommand>
 800be92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be94:	6a3b      	ldr	r3, [r7, #32]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d152      	bne.n	800bf40 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800be9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	61bb      	str	r3, [r7, #24]
}
 800beac:	bf00      	nop
 800beae:	bf00      	nop
 800beb0:	e7fd      	b.n	800beae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800beb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800beb8:	f023 0301 	bic.w	r3, r3, #1
 800bebc:	b2da      	uxtb	r2, r3
 800bebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bec4:	e03d      	b.n	800bf42 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800becc:	f043 0301 	orr.w	r3, r3, #1
 800bed0:	b2da      	uxtb	r2, r3
 800bed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bed4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bedc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee0:	699b      	ldr	r3, [r3, #24]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10b      	bne.n	800befe <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beea:	f383 8811 	msr	BASEPRI, r3
 800beee:	f3bf 8f6f 	isb	sy
 800bef2:	f3bf 8f4f 	dsb	sy
 800bef6:	617b      	str	r3, [r7, #20]
}
 800bef8:	bf00      	nop
 800befa:	bf00      	nop
 800befc:	e7fd      	b.n	800befa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800befe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf00:	699a      	ldr	r2, [r3, #24]
 800bf02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf04:	18d1      	adds	r1, r2, r3
 800bf06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf0c:	f7ff ff04 	bl	800bd18 <prvInsertTimerInActiveList>
					break;
 800bf10:	e017      	b.n	800bf42 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bf12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf18:	f003 0302 	and.w	r3, r3, #2
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d103      	bne.n	800bf28 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bf20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf22:	f000 fbe9 	bl	800c6f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf26:	e00c      	b.n	800bf42 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf2e:	f023 0301 	bic.w	r3, r3, #1
 800bf32:	b2da      	uxtb	r2, r3
 800bf34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bf3a:	e002      	b.n	800bf42 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bf3c:	bf00      	nop
 800bf3e:	e000      	b.n	800bf42 <prvProcessReceivedCommands+0x1a6>
					break;
 800bf40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf42:	4b08      	ldr	r3, [pc, #32]	@ (800bf64 <prvProcessReceivedCommands+0x1c8>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	1d39      	adds	r1, r7, #4
 800bf48:	2200      	movs	r2, #0
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7fe f9a6 	bl	800a29c <xQueueReceive>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f47f af26 	bne.w	800bda4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bf58:	bf00      	nop
 800bf5a:	bf00      	nop
 800bf5c:	3730      	adds	r7, #48	@ 0x30
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
 800bf62:	bf00      	nop
 800bf64:	20001300 	.word	0x20001300

0800bf68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b088      	sub	sp, #32
 800bf6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf6e:	e049      	b.n	800c004 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf70:	4b2e      	ldr	r3, [pc, #184]	@ (800c02c <prvSwitchTimerLists+0xc4>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf7a:	4b2c      	ldr	r3, [pc, #176]	@ (800c02c <prvSwitchTimerLists+0xc4>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	3304      	adds	r3, #4
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f7fd fe77 	bl	8009c7c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6a1b      	ldr	r3, [r3, #32]
 800bf92:	68f8      	ldr	r0, [r7, #12]
 800bf94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf9c:	f003 0304 	and.w	r3, r3, #4
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d02f      	beq.n	800c004 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	699b      	ldr	r3, [r3, #24]
 800bfa8:	693a      	ldr	r2, [r7, #16]
 800bfaa:	4413      	add	r3, r2
 800bfac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bfae:	68ba      	ldr	r2, [r7, #8]
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d90e      	bls.n	800bfd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	68ba      	ldr	r2, [r7, #8]
 800bfba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfc2:	4b1a      	ldr	r3, [pc, #104]	@ (800c02c <prvSwitchTimerLists+0xc4>)
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	3304      	adds	r3, #4
 800bfca:	4619      	mov	r1, r3
 800bfcc:	4610      	mov	r0, r2
 800bfce:	f7fd fe1c 	bl	8009c0a <vListInsert>
 800bfd2:	e017      	b.n	800c004 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	9300      	str	r3, [sp, #0]
 800bfd8:	2300      	movs	r3, #0
 800bfda:	693a      	ldr	r2, [r7, #16]
 800bfdc:	2100      	movs	r1, #0
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f7ff fd58 	bl	800ba94 <xTimerGenericCommand>
 800bfe4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d10b      	bne.n	800c004 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	603b      	str	r3, [r7, #0]
}
 800bffe:	bf00      	nop
 800c000:	bf00      	nop
 800c002:	e7fd      	b.n	800c000 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c004:	4b09      	ldr	r3, [pc, #36]	@ (800c02c <prvSwitchTimerLists+0xc4>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d1b0      	bne.n	800bf70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c00e:	4b07      	ldr	r3, [pc, #28]	@ (800c02c <prvSwitchTimerLists+0xc4>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c014:	4b06      	ldr	r3, [pc, #24]	@ (800c030 <prvSwitchTimerLists+0xc8>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	4a04      	ldr	r2, [pc, #16]	@ (800c02c <prvSwitchTimerLists+0xc4>)
 800c01a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c01c:	4a04      	ldr	r2, [pc, #16]	@ (800c030 <prvSwitchTimerLists+0xc8>)
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	6013      	str	r3, [r2, #0]
}
 800c022:	bf00      	nop
 800c024:	3718      	adds	r7, #24
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	200012f8 	.word	0x200012f8
 800c030:	200012fc 	.word	0x200012fc

0800c034 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c03a:	f000 f96d 	bl	800c318 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c03e:	4b15      	ldr	r3, [pc, #84]	@ (800c094 <prvCheckForValidListAndQueue+0x60>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d120      	bne.n	800c088 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c046:	4814      	ldr	r0, [pc, #80]	@ (800c098 <prvCheckForValidListAndQueue+0x64>)
 800c048:	f7fd fd8e 	bl	8009b68 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c04c:	4813      	ldr	r0, [pc, #76]	@ (800c09c <prvCheckForValidListAndQueue+0x68>)
 800c04e:	f7fd fd8b 	bl	8009b68 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c052:	4b13      	ldr	r3, [pc, #76]	@ (800c0a0 <prvCheckForValidListAndQueue+0x6c>)
 800c054:	4a10      	ldr	r2, [pc, #64]	@ (800c098 <prvCheckForValidListAndQueue+0x64>)
 800c056:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c058:	4b12      	ldr	r3, [pc, #72]	@ (800c0a4 <prvCheckForValidListAndQueue+0x70>)
 800c05a:	4a10      	ldr	r2, [pc, #64]	@ (800c09c <prvCheckForValidListAndQueue+0x68>)
 800c05c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c05e:	2300      	movs	r3, #0
 800c060:	9300      	str	r3, [sp, #0]
 800c062:	4b11      	ldr	r3, [pc, #68]	@ (800c0a8 <prvCheckForValidListAndQueue+0x74>)
 800c064:	4a11      	ldr	r2, [pc, #68]	@ (800c0ac <prvCheckForValidListAndQueue+0x78>)
 800c066:	2110      	movs	r1, #16
 800c068:	200a      	movs	r0, #10
 800c06a:	f7fd fe9b 	bl	8009da4 <xQueueGenericCreateStatic>
 800c06e:	4603      	mov	r3, r0
 800c070:	4a08      	ldr	r2, [pc, #32]	@ (800c094 <prvCheckForValidListAndQueue+0x60>)
 800c072:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c074:	4b07      	ldr	r3, [pc, #28]	@ (800c094 <prvCheckForValidListAndQueue+0x60>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d005      	beq.n	800c088 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c07c:	4b05      	ldr	r3, [pc, #20]	@ (800c094 <prvCheckForValidListAndQueue+0x60>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	490b      	ldr	r1, [pc, #44]	@ (800c0b0 <prvCheckForValidListAndQueue+0x7c>)
 800c082:	4618      	mov	r0, r3
 800c084:	f7fe fc24 	bl	800a8d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c088:	f000 f978 	bl	800c37c <vPortExitCritical>
}
 800c08c:	bf00      	nop
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	20001300 	.word	0x20001300
 800c098:	200012d0 	.word	0x200012d0
 800c09c:	200012e4 	.word	0x200012e4
 800c0a0:	200012f8 	.word	0x200012f8
 800c0a4:	200012fc 	.word	0x200012fc
 800c0a8:	200013ac 	.word	0x200013ac
 800c0ac:	2000130c 	.word	0x2000130c
 800c0b0:	080112b8 	.word	0x080112b8

0800c0b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	3b04      	subs	r3, #4
 800c0c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c0cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3b04      	subs	r3, #4
 800c0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	f023 0201 	bic.w	r2, r3, #1
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3b04      	subs	r3, #4
 800c0e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0e4:	4a0c      	ldr	r2, [pc, #48]	@ (800c118 <pxPortInitialiseStack+0x64>)
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	3b14      	subs	r3, #20
 800c0ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	3b04      	subs	r3, #4
 800c0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f06f 0202 	mvn.w	r2, #2
 800c102:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	3b20      	subs	r3, #32
 800c108:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c10a:	68fb      	ldr	r3, [r7, #12]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3714      	adds	r7, #20
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	0800c11d 	.word	0x0800c11d

0800c11c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c126:	4b13      	ldr	r3, [pc, #76]	@ (800c174 <prvTaskExitError+0x58>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c12e:	d00b      	beq.n	800c148 <prvTaskExitError+0x2c>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	60fb      	str	r3, [r7, #12]
}
 800c142:	bf00      	nop
 800c144:	bf00      	nop
 800c146:	e7fd      	b.n	800c144 <prvTaskExitError+0x28>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	60bb      	str	r3, [r7, #8]
}
 800c15a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c15c:	bf00      	nop
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d0fc      	beq.n	800c15e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c164:	bf00      	nop
 800c166:	bf00      	nop
 800c168:	3714      	adds	r7, #20
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	20000020 	.word	0x20000020
	...

0800c180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c180:	4b07      	ldr	r3, [pc, #28]	@ (800c1a0 <pxCurrentTCBConst2>)
 800c182:	6819      	ldr	r1, [r3, #0]
 800c184:	6808      	ldr	r0, [r1, #0]
 800c186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18a:	f380 8809 	msr	PSP, r0
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	f04f 0000 	mov.w	r0, #0
 800c196:	f380 8811 	msr	BASEPRI, r0
 800c19a:	4770      	bx	lr
 800c19c:	f3af 8000 	nop.w

0800c1a0 <pxCurrentTCBConst2>:
 800c1a0:	20000dd0 	.word	0x20000dd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c1a4:	bf00      	nop
 800c1a6:	bf00      	nop

0800c1a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c1a8:	4808      	ldr	r0, [pc, #32]	@ (800c1cc <prvPortStartFirstTask+0x24>)
 800c1aa:	6800      	ldr	r0, [r0, #0]
 800c1ac:	6800      	ldr	r0, [r0, #0]
 800c1ae:	f380 8808 	msr	MSP, r0
 800c1b2:	f04f 0000 	mov.w	r0, #0
 800c1b6:	f380 8814 	msr	CONTROL, r0
 800c1ba:	b662      	cpsie	i
 800c1bc:	b661      	cpsie	f
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	df00      	svc	0
 800c1c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1ca:	bf00      	nop
 800c1cc:	e000ed08 	.word	0xe000ed08

0800c1d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c1d6:	4b47      	ldr	r3, [pc, #284]	@ (800c2f4 <xPortStartScheduler+0x124>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a47      	ldr	r2, [pc, #284]	@ (800c2f8 <xPortStartScheduler+0x128>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d10b      	bne.n	800c1f8 <xPortStartScheduler+0x28>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	613b      	str	r3, [r7, #16]
}
 800c1f2:	bf00      	nop
 800c1f4:	bf00      	nop
 800c1f6:	e7fd      	b.n	800c1f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1f8:	4b3e      	ldr	r3, [pc, #248]	@ (800c2f4 <xPortStartScheduler+0x124>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a3f      	ldr	r2, [pc, #252]	@ (800c2fc <xPortStartScheduler+0x12c>)
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d10b      	bne.n	800c21a <xPortStartScheduler+0x4a>
	__asm volatile
 800c202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c206:	f383 8811 	msr	BASEPRI, r3
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	60fb      	str	r3, [r7, #12]
}
 800c214:	bf00      	nop
 800c216:	bf00      	nop
 800c218:	e7fd      	b.n	800c216 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c21a:	4b39      	ldr	r3, [pc, #228]	@ (800c300 <xPortStartScheduler+0x130>)
 800c21c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	781b      	ldrb	r3, [r3, #0]
 800c222:	b2db      	uxtb	r3, r3
 800c224:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	22ff      	movs	r2, #255	@ 0xff
 800c22a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	b2db      	uxtb	r3, r3
 800c232:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c234:	78fb      	ldrb	r3, [r7, #3]
 800c236:	b2db      	uxtb	r3, r3
 800c238:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	4b31      	ldr	r3, [pc, #196]	@ (800c304 <xPortStartScheduler+0x134>)
 800c240:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c242:	4b31      	ldr	r3, [pc, #196]	@ (800c308 <xPortStartScheduler+0x138>)
 800c244:	2207      	movs	r2, #7
 800c246:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c248:	e009      	b.n	800c25e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c24a:	4b2f      	ldr	r3, [pc, #188]	@ (800c308 <xPortStartScheduler+0x138>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	3b01      	subs	r3, #1
 800c250:	4a2d      	ldr	r2, [pc, #180]	@ (800c308 <xPortStartScheduler+0x138>)
 800c252:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c254:	78fb      	ldrb	r3, [r7, #3]
 800c256:	b2db      	uxtb	r3, r3
 800c258:	005b      	lsls	r3, r3, #1
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c25e:	78fb      	ldrb	r3, [r7, #3]
 800c260:	b2db      	uxtb	r3, r3
 800c262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c266:	2b80      	cmp	r3, #128	@ 0x80
 800c268:	d0ef      	beq.n	800c24a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c26a:	4b27      	ldr	r3, [pc, #156]	@ (800c308 <xPortStartScheduler+0x138>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f1c3 0307 	rsb	r3, r3, #7
 800c272:	2b04      	cmp	r3, #4
 800c274:	d00b      	beq.n	800c28e <xPortStartScheduler+0xbe>
	__asm volatile
 800c276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c27a:	f383 8811 	msr	BASEPRI, r3
 800c27e:	f3bf 8f6f 	isb	sy
 800c282:	f3bf 8f4f 	dsb	sy
 800c286:	60bb      	str	r3, [r7, #8]
}
 800c288:	bf00      	nop
 800c28a:	bf00      	nop
 800c28c:	e7fd      	b.n	800c28a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c28e:	4b1e      	ldr	r3, [pc, #120]	@ (800c308 <xPortStartScheduler+0x138>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	021b      	lsls	r3, r3, #8
 800c294:	4a1c      	ldr	r2, [pc, #112]	@ (800c308 <xPortStartScheduler+0x138>)
 800c296:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c298:	4b1b      	ldr	r3, [pc, #108]	@ (800c308 <xPortStartScheduler+0x138>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c2a0:	4a19      	ldr	r2, [pc, #100]	@ (800c308 <xPortStartScheduler+0x138>)
 800c2a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	b2da      	uxtb	r2, r3
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c2ac:	4b17      	ldr	r3, [pc, #92]	@ (800c30c <xPortStartScheduler+0x13c>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a16      	ldr	r2, [pc, #88]	@ (800c30c <xPortStartScheduler+0x13c>)
 800c2b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c2b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c2b8:	4b14      	ldr	r3, [pc, #80]	@ (800c30c <xPortStartScheduler+0x13c>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a13      	ldr	r2, [pc, #76]	@ (800c30c <xPortStartScheduler+0x13c>)
 800c2be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c2c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c2c4:	f000 f8da 	bl	800c47c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c2c8:	4b11      	ldr	r3, [pc, #68]	@ (800c310 <xPortStartScheduler+0x140>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c2ce:	f000 f8f9 	bl	800c4c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c2d2:	4b10      	ldr	r3, [pc, #64]	@ (800c314 <xPortStartScheduler+0x144>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a0f      	ldr	r2, [pc, #60]	@ (800c314 <xPortStartScheduler+0x144>)
 800c2d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c2dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c2de:	f7ff ff63 	bl	800c1a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c2e2:	f7fe ff2d 	bl	800b140 <vTaskSwitchContext>
	prvTaskExitError();
 800c2e6:	f7ff ff19 	bl	800c11c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3718      	adds	r7, #24
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	e000ed00 	.word	0xe000ed00
 800c2f8:	410fc271 	.word	0x410fc271
 800c2fc:	410fc270 	.word	0x410fc270
 800c300:	e000e400 	.word	0xe000e400
 800c304:	200013fc 	.word	0x200013fc
 800c308:	20001400 	.word	0x20001400
 800c30c:	e000ed20 	.word	0xe000ed20
 800c310:	20000020 	.word	0x20000020
 800c314:	e000ef34 	.word	0xe000ef34

0800c318 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	607b      	str	r3, [r7, #4]
}
 800c330:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c332:	4b10      	ldr	r3, [pc, #64]	@ (800c374 <vPortEnterCritical+0x5c>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3301      	adds	r3, #1
 800c338:	4a0e      	ldr	r2, [pc, #56]	@ (800c374 <vPortEnterCritical+0x5c>)
 800c33a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c33c:	4b0d      	ldr	r3, [pc, #52]	@ (800c374 <vPortEnterCritical+0x5c>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2b01      	cmp	r3, #1
 800c342:	d110      	bne.n	800c366 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c344:	4b0c      	ldr	r3, [pc, #48]	@ (800c378 <vPortEnterCritical+0x60>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d00b      	beq.n	800c366 <vPortEnterCritical+0x4e>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	603b      	str	r3, [r7, #0]
}
 800c360:	bf00      	nop
 800c362:	bf00      	nop
 800c364:	e7fd      	b.n	800c362 <vPortEnterCritical+0x4a>
	}
}
 800c366:	bf00      	nop
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	20000020 	.word	0x20000020
 800c378:	e000ed04 	.word	0xe000ed04

0800c37c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c382:	4b12      	ldr	r3, [pc, #72]	@ (800c3cc <vPortExitCritical+0x50>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d10b      	bne.n	800c3a2 <vPortExitCritical+0x26>
	__asm volatile
 800c38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c38e:	f383 8811 	msr	BASEPRI, r3
 800c392:	f3bf 8f6f 	isb	sy
 800c396:	f3bf 8f4f 	dsb	sy
 800c39a:	607b      	str	r3, [r7, #4]
}
 800c39c:	bf00      	nop
 800c39e:	bf00      	nop
 800c3a0:	e7fd      	b.n	800c39e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c3a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c3cc <vPortExitCritical+0x50>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	4a08      	ldr	r2, [pc, #32]	@ (800c3cc <vPortExitCritical+0x50>)
 800c3aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c3ac:	4b07      	ldr	r3, [pc, #28]	@ (800c3cc <vPortExitCritical+0x50>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d105      	bne.n	800c3c0 <vPortExitCritical+0x44>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	f383 8811 	msr	BASEPRI, r3
}
 800c3be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c3c0:	bf00      	nop
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	20000020 	.word	0x20000020

0800c3d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c3d0:	f3ef 8009 	mrs	r0, PSP
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	4b15      	ldr	r3, [pc, #84]	@ (800c430 <pxCurrentTCBConst>)
 800c3da:	681a      	ldr	r2, [r3, #0]
 800c3dc:	f01e 0f10 	tst.w	lr, #16
 800c3e0:	bf08      	it	eq
 800c3e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ea:	6010      	str	r0, [r2, #0]
 800c3ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c3f4:	f380 8811 	msr	BASEPRI, r0
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	f3bf 8f6f 	isb	sy
 800c400:	f7fe fe9e 	bl	800b140 <vTaskSwitchContext>
 800c404:	f04f 0000 	mov.w	r0, #0
 800c408:	f380 8811 	msr	BASEPRI, r0
 800c40c:	bc09      	pop	{r0, r3}
 800c40e:	6819      	ldr	r1, [r3, #0]
 800c410:	6808      	ldr	r0, [r1, #0]
 800c412:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c416:	f01e 0f10 	tst.w	lr, #16
 800c41a:	bf08      	it	eq
 800c41c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c420:	f380 8809 	msr	PSP, r0
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	f3af 8000 	nop.w

0800c430 <pxCurrentTCBConst>:
 800c430:	20000dd0 	.word	0x20000dd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop

0800c438 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	607b      	str	r3, [r7, #4]
}
 800c450:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c452:	f7fe fdbb 	bl	800afcc <xTaskIncrementTick>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d003      	beq.n	800c464 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c45c:	4b06      	ldr	r3, [pc, #24]	@ (800c478 <xPortSysTickHandler+0x40>)
 800c45e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c462:	601a      	str	r2, [r3, #0]
 800c464:	2300      	movs	r3, #0
 800c466:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	f383 8811 	msr	BASEPRI, r3
}
 800c46e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c470:	bf00      	nop
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	e000ed04 	.word	0xe000ed04

0800c47c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c47c:	b480      	push	{r7}
 800c47e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c480:	4b0b      	ldr	r3, [pc, #44]	@ (800c4b0 <vPortSetupTimerInterrupt+0x34>)
 800c482:	2200      	movs	r2, #0
 800c484:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c486:	4b0b      	ldr	r3, [pc, #44]	@ (800c4b4 <vPortSetupTimerInterrupt+0x38>)
 800c488:	2200      	movs	r2, #0
 800c48a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c48c:	4b0a      	ldr	r3, [pc, #40]	@ (800c4b8 <vPortSetupTimerInterrupt+0x3c>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a0a      	ldr	r2, [pc, #40]	@ (800c4bc <vPortSetupTimerInterrupt+0x40>)
 800c492:	fba2 2303 	umull	r2, r3, r2, r3
 800c496:	099b      	lsrs	r3, r3, #6
 800c498:	4a09      	ldr	r2, [pc, #36]	@ (800c4c0 <vPortSetupTimerInterrupt+0x44>)
 800c49a:	3b01      	subs	r3, #1
 800c49c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c49e:	4b04      	ldr	r3, [pc, #16]	@ (800c4b0 <vPortSetupTimerInterrupt+0x34>)
 800c4a0:	2207      	movs	r2, #7
 800c4a2:	601a      	str	r2, [r3, #0]
}
 800c4a4:	bf00      	nop
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop
 800c4b0:	e000e010 	.word	0xe000e010
 800c4b4:	e000e018 	.word	0xe000e018
 800c4b8:	20000000 	.word	0x20000000
 800c4bc:	10624dd3 	.word	0x10624dd3
 800c4c0:	e000e014 	.word	0xe000e014

0800c4c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c4c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c4d4 <vPortEnableVFP+0x10>
 800c4c8:	6801      	ldr	r1, [r0, #0]
 800c4ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c4ce:	6001      	str	r1, [r0, #0]
 800c4d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4d2:	bf00      	nop
 800c4d4:	e000ed88 	.word	0xe000ed88

0800c4d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4de:	f3ef 8305 	mrs	r3, IPSR
 800c4e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2b0f      	cmp	r3, #15
 800c4e8:	d915      	bls.n	800c516 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4ea:	4a18      	ldr	r2, [pc, #96]	@ (800c54c <vPortValidateInterruptPriority+0x74>)
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	4413      	add	r3, r2
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4f4:	4b16      	ldr	r3, [pc, #88]	@ (800c550 <vPortValidateInterruptPriority+0x78>)
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	7afa      	ldrb	r2, [r7, #11]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d20b      	bcs.n	800c516 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	607b      	str	r3, [r7, #4]
}
 800c510:	bf00      	nop
 800c512:	bf00      	nop
 800c514:	e7fd      	b.n	800c512 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c516:	4b0f      	ldr	r3, [pc, #60]	@ (800c554 <vPortValidateInterruptPriority+0x7c>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c51e:	4b0e      	ldr	r3, [pc, #56]	@ (800c558 <vPortValidateInterruptPriority+0x80>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	429a      	cmp	r2, r3
 800c524:	d90b      	bls.n	800c53e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52a:	f383 8811 	msr	BASEPRI, r3
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	603b      	str	r3, [r7, #0]
}
 800c538:	bf00      	nop
 800c53a:	bf00      	nop
 800c53c:	e7fd      	b.n	800c53a <vPortValidateInterruptPriority+0x62>
	}
 800c53e:	bf00      	nop
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	e000e3f0 	.word	0xe000e3f0
 800c550:	200013fc 	.word	0x200013fc
 800c554:	e000ed0c 	.word	0xe000ed0c
 800c558:	20001400 	.word	0x20001400

0800c55c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b08a      	sub	sp, #40	@ 0x28
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c564:	2300      	movs	r3, #0
 800c566:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c568:	f7fe fc74 	bl	800ae54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c56c:	4b5c      	ldr	r3, [pc, #368]	@ (800c6e0 <pvPortMalloc+0x184>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d101      	bne.n	800c578 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c574:	f000 f924 	bl	800c7c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c578:	4b5a      	ldr	r3, [pc, #360]	@ (800c6e4 <pvPortMalloc+0x188>)
 800c57a:	681a      	ldr	r2, [r3, #0]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4013      	ands	r3, r2
 800c580:	2b00      	cmp	r3, #0
 800c582:	f040 8095 	bne.w	800c6b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d01e      	beq.n	800c5ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c58c:	2208      	movs	r2, #8
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4413      	add	r3, r2
 800c592:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f003 0307 	and.w	r3, r3, #7
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d015      	beq.n	800c5ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f023 0307 	bic.w	r3, r3, #7
 800c5a4:	3308      	adds	r3, #8
 800c5a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f003 0307 	and.w	r3, r3, #7
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d00b      	beq.n	800c5ca <pvPortMalloc+0x6e>
	__asm volatile
 800c5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b6:	f383 8811 	msr	BASEPRI, r3
 800c5ba:	f3bf 8f6f 	isb	sy
 800c5be:	f3bf 8f4f 	dsb	sy
 800c5c2:	617b      	str	r3, [r7, #20]
}
 800c5c4:	bf00      	nop
 800c5c6:	bf00      	nop
 800c5c8:	e7fd      	b.n	800c5c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d06f      	beq.n	800c6b0 <pvPortMalloc+0x154>
 800c5d0:	4b45      	ldr	r3, [pc, #276]	@ (800c6e8 <pvPortMalloc+0x18c>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d86a      	bhi.n	800c6b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5da:	4b44      	ldr	r3, [pc, #272]	@ (800c6ec <pvPortMalloc+0x190>)
 800c5dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5de:	4b43      	ldr	r3, [pc, #268]	@ (800c6ec <pvPortMalloc+0x190>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5e4:	e004      	b.n	800c5f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d903      	bls.n	800c602 <pvPortMalloc+0xa6>
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1f1      	bne.n	800c5e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c602:	4b37      	ldr	r3, [pc, #220]	@ (800c6e0 <pvPortMalloc+0x184>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c608:	429a      	cmp	r2, r3
 800c60a:	d051      	beq.n	800c6b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c60c:	6a3b      	ldr	r3, [r7, #32]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2208      	movs	r2, #8
 800c612:	4413      	add	r3, r2
 800c614:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	6a3b      	ldr	r3, [r7, #32]
 800c61c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c620:	685a      	ldr	r2, [r3, #4]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	1ad2      	subs	r2, r2, r3
 800c626:	2308      	movs	r3, #8
 800c628:	005b      	lsls	r3, r3, #1
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d920      	bls.n	800c670 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c62e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	4413      	add	r3, r2
 800c634:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	f003 0307 	and.w	r3, r3, #7
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d00b      	beq.n	800c658 <pvPortMalloc+0xfc>
	__asm volatile
 800c640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c644:	f383 8811 	msr	BASEPRI, r3
 800c648:	f3bf 8f6f 	isb	sy
 800c64c:	f3bf 8f4f 	dsb	sy
 800c650:	613b      	str	r3, [r7, #16]
}
 800c652:	bf00      	nop
 800c654:	bf00      	nop
 800c656:	e7fd      	b.n	800c654 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	1ad2      	subs	r2, r2, r3
 800c660:	69bb      	ldr	r3, [r7, #24]
 800c662:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c666:	687a      	ldr	r2, [r7, #4]
 800c668:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c66a:	69b8      	ldr	r0, [r7, #24]
 800c66c:	f000 f90a 	bl	800c884 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c670:	4b1d      	ldr	r3, [pc, #116]	@ (800c6e8 <pvPortMalloc+0x18c>)
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	4a1b      	ldr	r2, [pc, #108]	@ (800c6e8 <pvPortMalloc+0x18c>)
 800c67c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c67e:	4b1a      	ldr	r3, [pc, #104]	@ (800c6e8 <pvPortMalloc+0x18c>)
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	4b1b      	ldr	r3, [pc, #108]	@ (800c6f0 <pvPortMalloc+0x194>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	429a      	cmp	r2, r3
 800c688:	d203      	bcs.n	800c692 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c68a:	4b17      	ldr	r3, [pc, #92]	@ (800c6e8 <pvPortMalloc+0x18c>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a18      	ldr	r2, [pc, #96]	@ (800c6f0 <pvPortMalloc+0x194>)
 800c690:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c694:	685a      	ldr	r2, [r3, #4]
 800c696:	4b13      	ldr	r3, [pc, #76]	@ (800c6e4 <pvPortMalloc+0x188>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	431a      	orrs	r2, r3
 800c69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c6a6:	4b13      	ldr	r3, [pc, #76]	@ (800c6f4 <pvPortMalloc+0x198>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	4a11      	ldr	r2, [pc, #68]	@ (800c6f4 <pvPortMalloc+0x198>)
 800c6ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6b0:	f7fe fbde 	bl	800ae70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	f003 0307 	and.w	r3, r3, #7
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00b      	beq.n	800c6d6 <pvPortMalloc+0x17a>
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	60fb      	str	r3, [r7, #12]
}
 800c6d0:	bf00      	nop
 800c6d2:	bf00      	nop
 800c6d4:	e7fd      	b.n	800c6d2 <pvPortMalloc+0x176>
	return pvReturn;
 800c6d6:	69fb      	ldr	r3, [r7, #28]
}
 800c6d8:	4618      	mov	r0, r3
 800c6da:	3728      	adds	r7, #40	@ 0x28
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	2000540c 	.word	0x2000540c
 800c6e4:	20005420 	.word	0x20005420
 800c6e8:	20005410 	.word	0x20005410
 800c6ec:	20005404 	.word	0x20005404
 800c6f0:	20005414 	.word	0x20005414
 800c6f4:	20005418 	.word	0x20005418

0800c6f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b086      	sub	sp, #24
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d04f      	beq.n	800c7aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c70a:	2308      	movs	r3, #8
 800c70c:	425b      	negs	r3, r3
 800c70e:	697a      	ldr	r2, [r7, #20]
 800c710:	4413      	add	r3, r2
 800c712:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	685a      	ldr	r2, [r3, #4]
 800c71c:	4b25      	ldr	r3, [pc, #148]	@ (800c7b4 <vPortFree+0xbc>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4013      	ands	r3, r2
 800c722:	2b00      	cmp	r3, #0
 800c724:	d10b      	bne.n	800c73e <vPortFree+0x46>
	__asm volatile
 800c726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c72a:	f383 8811 	msr	BASEPRI, r3
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	60fb      	str	r3, [r7, #12]
}
 800c738:	bf00      	nop
 800c73a:	bf00      	nop
 800c73c:	e7fd      	b.n	800c73a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00b      	beq.n	800c75e <vPortFree+0x66>
	__asm volatile
 800c746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	60bb      	str	r3, [r7, #8]
}
 800c758:	bf00      	nop
 800c75a:	bf00      	nop
 800c75c:	e7fd      	b.n	800c75a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	685a      	ldr	r2, [r3, #4]
 800c762:	4b14      	ldr	r3, [pc, #80]	@ (800c7b4 <vPortFree+0xbc>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4013      	ands	r3, r2
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d01e      	beq.n	800c7aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d11a      	bne.n	800c7aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	685a      	ldr	r2, [r3, #4]
 800c778:	4b0e      	ldr	r3, [pc, #56]	@ (800c7b4 <vPortFree+0xbc>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	43db      	mvns	r3, r3
 800c77e:	401a      	ands	r2, r3
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c784:	f7fe fb66 	bl	800ae54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	685a      	ldr	r2, [r3, #4]
 800c78c:	4b0a      	ldr	r3, [pc, #40]	@ (800c7b8 <vPortFree+0xc0>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4413      	add	r3, r2
 800c792:	4a09      	ldr	r2, [pc, #36]	@ (800c7b8 <vPortFree+0xc0>)
 800c794:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c796:	6938      	ldr	r0, [r7, #16]
 800c798:	f000 f874 	bl	800c884 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c79c:	4b07      	ldr	r3, [pc, #28]	@ (800c7bc <vPortFree+0xc4>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	4a06      	ldr	r2, [pc, #24]	@ (800c7bc <vPortFree+0xc4>)
 800c7a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c7a6:	f7fe fb63 	bl	800ae70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c7aa:	bf00      	nop
 800c7ac:	3718      	adds	r7, #24
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	20005420 	.word	0x20005420
 800c7b8:	20005410 	.word	0x20005410
 800c7bc:	2000541c 	.word	0x2000541c

0800c7c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c7ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7cc:	4b27      	ldr	r3, [pc, #156]	@ (800c86c <prvHeapInit+0xac>)
 800c7ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f003 0307 	and.w	r3, r3, #7
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00c      	beq.n	800c7f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	3307      	adds	r3, #7
 800c7de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	f023 0307 	bic.w	r3, r3, #7
 800c7e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	4a1f      	ldr	r2, [pc, #124]	@ (800c86c <prvHeapInit+0xac>)
 800c7f0:	4413      	add	r3, r2
 800c7f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c870 <prvHeapInit+0xb0>)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7fe:	4b1c      	ldr	r3, [pc, #112]	@ (800c870 <prvHeapInit+0xb0>)
 800c800:	2200      	movs	r2, #0
 800c802:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	68ba      	ldr	r2, [r7, #8]
 800c808:	4413      	add	r3, r2
 800c80a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c80c:	2208      	movs	r2, #8
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	1a9b      	subs	r3, r3, r2
 800c812:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f023 0307 	bic.w	r3, r3, #7
 800c81a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	4a15      	ldr	r2, [pc, #84]	@ (800c874 <prvHeapInit+0xb4>)
 800c820:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c822:	4b14      	ldr	r3, [pc, #80]	@ (800c874 <prvHeapInit+0xb4>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2200      	movs	r2, #0
 800c828:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c82a:	4b12      	ldr	r3, [pc, #72]	@ (800c874 <prvHeapInit+0xb4>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2200      	movs	r2, #0
 800c830:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	1ad2      	subs	r2, r2, r3
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c840:	4b0c      	ldr	r3, [pc, #48]	@ (800c874 <prvHeapInit+0xb4>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	4a0a      	ldr	r2, [pc, #40]	@ (800c878 <prvHeapInit+0xb8>)
 800c84e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	4a09      	ldr	r2, [pc, #36]	@ (800c87c <prvHeapInit+0xbc>)
 800c856:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c858:	4b09      	ldr	r3, [pc, #36]	@ (800c880 <prvHeapInit+0xc0>)
 800c85a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c85e:	601a      	str	r2, [r3, #0]
}
 800c860:	bf00      	nop
 800c862:	3714      	adds	r7, #20
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr
 800c86c:	20001404 	.word	0x20001404
 800c870:	20005404 	.word	0x20005404
 800c874:	2000540c 	.word	0x2000540c
 800c878:	20005414 	.word	0x20005414
 800c87c:	20005410 	.word	0x20005410
 800c880:	20005420 	.word	0x20005420

0800c884 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c88c:	4b28      	ldr	r3, [pc, #160]	@ (800c930 <prvInsertBlockIntoFreeList+0xac>)
 800c88e:	60fb      	str	r3, [r7, #12]
 800c890:	e002      	b.n	800c898 <prvInsertBlockIntoFreeList+0x14>
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	60fb      	str	r3, [r7, #12]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d8f7      	bhi.n	800c892 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	68ba      	ldr	r2, [r7, #8]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d108      	bne.n	800c8c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	685a      	ldr	r2, [r3, #4]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	441a      	add	r2, r3
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	441a      	add	r2, r3
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d118      	bne.n	800c90c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	4b15      	ldr	r3, [pc, #84]	@ (800c934 <prvInsertBlockIntoFreeList+0xb0>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d00d      	beq.n	800c902 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	685a      	ldr	r2, [r3, #4]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	441a      	add	r2, r3
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	601a      	str	r2, [r3, #0]
 800c900:	e008      	b.n	800c914 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c902:	4b0c      	ldr	r3, [pc, #48]	@ (800c934 <prvInsertBlockIntoFreeList+0xb0>)
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	601a      	str	r2, [r3, #0]
 800c90a:	e003      	b.n	800c914 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	681a      	ldr	r2, [r3, #0]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	429a      	cmp	r2, r3
 800c91a:	d002      	beq.n	800c922 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c922:	bf00      	nop
 800c924:	3714      	adds	r7, #20
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	20005404 	.word	0x20005404
 800c934:	2000540c 	.word	0x2000540c

0800c938 <_calloc_r>:
 800c938:	b570      	push	{r4, r5, r6, lr}
 800c93a:	fba1 5402 	umull	r5, r4, r1, r2
 800c93e:	b93c      	cbnz	r4, 800c950 <_calloc_r+0x18>
 800c940:	4629      	mov	r1, r5
 800c942:	f000 f837 	bl	800c9b4 <_malloc_r>
 800c946:	4606      	mov	r6, r0
 800c948:	b928      	cbnz	r0, 800c956 <_calloc_r+0x1e>
 800c94a:	2600      	movs	r6, #0
 800c94c:	4630      	mov	r0, r6
 800c94e:	bd70      	pop	{r4, r5, r6, pc}
 800c950:	220c      	movs	r2, #12
 800c952:	6002      	str	r2, [r0, #0]
 800c954:	e7f9      	b.n	800c94a <_calloc_r+0x12>
 800c956:	462a      	mov	r2, r5
 800c958:	4621      	mov	r1, r4
 800c95a:	f001 f983 	bl	800dc64 <memset>
 800c95e:	e7f5      	b.n	800c94c <_calloc_r+0x14>

0800c960 <malloc>:
 800c960:	4b02      	ldr	r3, [pc, #8]	@ (800c96c <malloc+0xc>)
 800c962:	4601      	mov	r1, r0
 800c964:	6818      	ldr	r0, [r3, #0]
 800c966:	f000 b825 	b.w	800c9b4 <_malloc_r>
 800c96a:	bf00      	nop
 800c96c:	20000030 	.word	0x20000030

0800c970 <sbrk_aligned>:
 800c970:	b570      	push	{r4, r5, r6, lr}
 800c972:	4e0f      	ldr	r6, [pc, #60]	@ (800c9b0 <sbrk_aligned+0x40>)
 800c974:	460c      	mov	r4, r1
 800c976:	6831      	ldr	r1, [r6, #0]
 800c978:	4605      	mov	r5, r0
 800c97a:	b911      	cbnz	r1, 800c982 <sbrk_aligned+0x12>
 800c97c:	f001 fa1a 	bl	800ddb4 <_sbrk_r>
 800c980:	6030      	str	r0, [r6, #0]
 800c982:	4621      	mov	r1, r4
 800c984:	4628      	mov	r0, r5
 800c986:	f001 fa15 	bl	800ddb4 <_sbrk_r>
 800c98a:	1c43      	adds	r3, r0, #1
 800c98c:	d103      	bne.n	800c996 <sbrk_aligned+0x26>
 800c98e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c992:	4620      	mov	r0, r4
 800c994:	bd70      	pop	{r4, r5, r6, pc}
 800c996:	1cc4      	adds	r4, r0, #3
 800c998:	f024 0403 	bic.w	r4, r4, #3
 800c99c:	42a0      	cmp	r0, r4
 800c99e:	d0f8      	beq.n	800c992 <sbrk_aligned+0x22>
 800c9a0:	1a21      	subs	r1, r4, r0
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	f001 fa06 	bl	800ddb4 <_sbrk_r>
 800c9a8:	3001      	adds	r0, #1
 800c9aa:	d1f2      	bne.n	800c992 <sbrk_aligned+0x22>
 800c9ac:	e7ef      	b.n	800c98e <sbrk_aligned+0x1e>
 800c9ae:	bf00      	nop
 800c9b0:	20005424 	.word	0x20005424

0800c9b4 <_malloc_r>:
 800c9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9b8:	1ccd      	adds	r5, r1, #3
 800c9ba:	f025 0503 	bic.w	r5, r5, #3
 800c9be:	3508      	adds	r5, #8
 800c9c0:	2d0c      	cmp	r5, #12
 800c9c2:	bf38      	it	cc
 800c9c4:	250c      	movcc	r5, #12
 800c9c6:	2d00      	cmp	r5, #0
 800c9c8:	4606      	mov	r6, r0
 800c9ca:	db01      	blt.n	800c9d0 <_malloc_r+0x1c>
 800c9cc:	42a9      	cmp	r1, r5
 800c9ce:	d904      	bls.n	800c9da <_malloc_r+0x26>
 800c9d0:	230c      	movs	r3, #12
 800c9d2:	6033      	str	r3, [r6, #0]
 800c9d4:	2000      	movs	r0, #0
 800c9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cab0 <_malloc_r+0xfc>
 800c9de:	f000 f869 	bl	800cab4 <__malloc_lock>
 800c9e2:	f8d8 3000 	ldr.w	r3, [r8]
 800c9e6:	461c      	mov	r4, r3
 800c9e8:	bb44      	cbnz	r4, 800ca3c <_malloc_r+0x88>
 800c9ea:	4629      	mov	r1, r5
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	f7ff ffbf 	bl	800c970 <sbrk_aligned>
 800c9f2:	1c43      	adds	r3, r0, #1
 800c9f4:	4604      	mov	r4, r0
 800c9f6:	d158      	bne.n	800caaa <_malloc_r+0xf6>
 800c9f8:	f8d8 4000 	ldr.w	r4, [r8]
 800c9fc:	4627      	mov	r7, r4
 800c9fe:	2f00      	cmp	r7, #0
 800ca00:	d143      	bne.n	800ca8a <_malloc_r+0xd6>
 800ca02:	2c00      	cmp	r4, #0
 800ca04:	d04b      	beq.n	800ca9e <_malloc_r+0xea>
 800ca06:	6823      	ldr	r3, [r4, #0]
 800ca08:	4639      	mov	r1, r7
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	eb04 0903 	add.w	r9, r4, r3
 800ca10:	f001 f9d0 	bl	800ddb4 <_sbrk_r>
 800ca14:	4581      	cmp	r9, r0
 800ca16:	d142      	bne.n	800ca9e <_malloc_r+0xea>
 800ca18:	6821      	ldr	r1, [r4, #0]
 800ca1a:	1a6d      	subs	r5, r5, r1
 800ca1c:	4629      	mov	r1, r5
 800ca1e:	4630      	mov	r0, r6
 800ca20:	f7ff ffa6 	bl	800c970 <sbrk_aligned>
 800ca24:	3001      	adds	r0, #1
 800ca26:	d03a      	beq.n	800ca9e <_malloc_r+0xea>
 800ca28:	6823      	ldr	r3, [r4, #0]
 800ca2a:	442b      	add	r3, r5
 800ca2c:	6023      	str	r3, [r4, #0]
 800ca2e:	f8d8 3000 	ldr.w	r3, [r8]
 800ca32:	685a      	ldr	r2, [r3, #4]
 800ca34:	bb62      	cbnz	r2, 800ca90 <_malloc_r+0xdc>
 800ca36:	f8c8 7000 	str.w	r7, [r8]
 800ca3a:	e00f      	b.n	800ca5c <_malloc_r+0xa8>
 800ca3c:	6822      	ldr	r2, [r4, #0]
 800ca3e:	1b52      	subs	r2, r2, r5
 800ca40:	d420      	bmi.n	800ca84 <_malloc_r+0xd0>
 800ca42:	2a0b      	cmp	r2, #11
 800ca44:	d917      	bls.n	800ca76 <_malloc_r+0xc2>
 800ca46:	1961      	adds	r1, r4, r5
 800ca48:	42a3      	cmp	r3, r4
 800ca4a:	6025      	str	r5, [r4, #0]
 800ca4c:	bf18      	it	ne
 800ca4e:	6059      	strne	r1, [r3, #4]
 800ca50:	6863      	ldr	r3, [r4, #4]
 800ca52:	bf08      	it	eq
 800ca54:	f8c8 1000 	streq.w	r1, [r8]
 800ca58:	5162      	str	r2, [r4, r5]
 800ca5a:	604b      	str	r3, [r1, #4]
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	f000 f82f 	bl	800cac0 <__malloc_unlock>
 800ca62:	f104 000b 	add.w	r0, r4, #11
 800ca66:	1d23      	adds	r3, r4, #4
 800ca68:	f020 0007 	bic.w	r0, r0, #7
 800ca6c:	1ac2      	subs	r2, r0, r3
 800ca6e:	bf1c      	itt	ne
 800ca70:	1a1b      	subne	r3, r3, r0
 800ca72:	50a3      	strne	r3, [r4, r2]
 800ca74:	e7af      	b.n	800c9d6 <_malloc_r+0x22>
 800ca76:	6862      	ldr	r2, [r4, #4]
 800ca78:	42a3      	cmp	r3, r4
 800ca7a:	bf0c      	ite	eq
 800ca7c:	f8c8 2000 	streq.w	r2, [r8]
 800ca80:	605a      	strne	r2, [r3, #4]
 800ca82:	e7eb      	b.n	800ca5c <_malloc_r+0xa8>
 800ca84:	4623      	mov	r3, r4
 800ca86:	6864      	ldr	r4, [r4, #4]
 800ca88:	e7ae      	b.n	800c9e8 <_malloc_r+0x34>
 800ca8a:	463c      	mov	r4, r7
 800ca8c:	687f      	ldr	r7, [r7, #4]
 800ca8e:	e7b6      	b.n	800c9fe <_malloc_r+0x4a>
 800ca90:	461a      	mov	r2, r3
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	42a3      	cmp	r3, r4
 800ca96:	d1fb      	bne.n	800ca90 <_malloc_r+0xdc>
 800ca98:	2300      	movs	r3, #0
 800ca9a:	6053      	str	r3, [r2, #4]
 800ca9c:	e7de      	b.n	800ca5c <_malloc_r+0xa8>
 800ca9e:	230c      	movs	r3, #12
 800caa0:	6033      	str	r3, [r6, #0]
 800caa2:	4630      	mov	r0, r6
 800caa4:	f000 f80c 	bl	800cac0 <__malloc_unlock>
 800caa8:	e794      	b.n	800c9d4 <_malloc_r+0x20>
 800caaa:	6005      	str	r5, [r0, #0]
 800caac:	e7d6      	b.n	800ca5c <_malloc_r+0xa8>
 800caae:	bf00      	nop
 800cab0:	20005428 	.word	0x20005428

0800cab4 <__malloc_lock>:
 800cab4:	4801      	ldr	r0, [pc, #4]	@ (800cabc <__malloc_lock+0x8>)
 800cab6:	f001 b9ca 	b.w	800de4e <__retarget_lock_acquire_recursive>
 800caba:	bf00      	nop
 800cabc:	2000556c 	.word	0x2000556c

0800cac0 <__malloc_unlock>:
 800cac0:	4801      	ldr	r0, [pc, #4]	@ (800cac8 <__malloc_unlock+0x8>)
 800cac2:	f001 b9c5 	b.w	800de50 <__retarget_lock_release_recursive>
 800cac6:	bf00      	nop
 800cac8:	2000556c 	.word	0x2000556c

0800cacc <_realloc_r>:
 800cacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad0:	4680      	mov	r8, r0
 800cad2:	4615      	mov	r5, r2
 800cad4:	460c      	mov	r4, r1
 800cad6:	b921      	cbnz	r1, 800cae2 <_realloc_r+0x16>
 800cad8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cadc:	4611      	mov	r1, r2
 800cade:	f7ff bf69 	b.w	800c9b4 <_malloc_r>
 800cae2:	b92a      	cbnz	r2, 800caf0 <_realloc_r+0x24>
 800cae4:	f002 f834 	bl	800eb50 <_free_r>
 800cae8:	2400      	movs	r4, #0
 800caea:	4620      	mov	r0, r4
 800caec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caf0:	f002 fd2a 	bl	800f548 <_malloc_usable_size_r>
 800caf4:	4285      	cmp	r5, r0
 800caf6:	4606      	mov	r6, r0
 800caf8:	d802      	bhi.n	800cb00 <_realloc_r+0x34>
 800cafa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cafe:	d8f4      	bhi.n	800caea <_realloc_r+0x1e>
 800cb00:	4629      	mov	r1, r5
 800cb02:	4640      	mov	r0, r8
 800cb04:	f7ff ff56 	bl	800c9b4 <_malloc_r>
 800cb08:	4607      	mov	r7, r0
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	d0ec      	beq.n	800cae8 <_realloc_r+0x1c>
 800cb0e:	42b5      	cmp	r5, r6
 800cb10:	462a      	mov	r2, r5
 800cb12:	4621      	mov	r1, r4
 800cb14:	bf28      	it	cs
 800cb16:	4632      	movcs	r2, r6
 800cb18:	f001 f99b 	bl	800de52 <memcpy>
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	4640      	mov	r0, r8
 800cb20:	f002 f816 	bl	800eb50 <_free_r>
 800cb24:	463c      	mov	r4, r7
 800cb26:	e7e0      	b.n	800caea <_realloc_r+0x1e>

0800cb28 <__cvt>:
 800cb28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb2c:	ec57 6b10 	vmov	r6, r7, d0
 800cb30:	2f00      	cmp	r7, #0
 800cb32:	460c      	mov	r4, r1
 800cb34:	4619      	mov	r1, r3
 800cb36:	463b      	mov	r3, r7
 800cb38:	bfbb      	ittet	lt
 800cb3a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cb3e:	461f      	movlt	r7, r3
 800cb40:	2300      	movge	r3, #0
 800cb42:	232d      	movlt	r3, #45	@ 0x2d
 800cb44:	700b      	strb	r3, [r1, #0]
 800cb46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb48:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cb4c:	4691      	mov	r9, r2
 800cb4e:	f023 0820 	bic.w	r8, r3, #32
 800cb52:	bfbc      	itt	lt
 800cb54:	4632      	movlt	r2, r6
 800cb56:	4616      	movlt	r6, r2
 800cb58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cb5c:	d005      	beq.n	800cb6a <__cvt+0x42>
 800cb5e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cb62:	d100      	bne.n	800cb66 <__cvt+0x3e>
 800cb64:	3401      	adds	r4, #1
 800cb66:	2102      	movs	r1, #2
 800cb68:	e000      	b.n	800cb6c <__cvt+0x44>
 800cb6a:	2103      	movs	r1, #3
 800cb6c:	ab03      	add	r3, sp, #12
 800cb6e:	9301      	str	r3, [sp, #4]
 800cb70:	ab02      	add	r3, sp, #8
 800cb72:	9300      	str	r3, [sp, #0]
 800cb74:	ec47 6b10 	vmov	d0, r6, r7
 800cb78:	4653      	mov	r3, sl
 800cb7a:	4622      	mov	r2, r4
 800cb7c:	f001 fa24 	bl	800dfc8 <_dtoa_r>
 800cb80:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cb84:	4605      	mov	r5, r0
 800cb86:	d119      	bne.n	800cbbc <__cvt+0x94>
 800cb88:	f019 0f01 	tst.w	r9, #1
 800cb8c:	d00e      	beq.n	800cbac <__cvt+0x84>
 800cb8e:	eb00 0904 	add.w	r9, r0, r4
 800cb92:	2200      	movs	r2, #0
 800cb94:	2300      	movs	r3, #0
 800cb96:	4630      	mov	r0, r6
 800cb98:	4639      	mov	r1, r7
 800cb9a:	f7f3 ff9d 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb9e:	b108      	cbz	r0, 800cba4 <__cvt+0x7c>
 800cba0:	f8cd 900c 	str.w	r9, [sp, #12]
 800cba4:	2230      	movs	r2, #48	@ 0x30
 800cba6:	9b03      	ldr	r3, [sp, #12]
 800cba8:	454b      	cmp	r3, r9
 800cbaa:	d31e      	bcc.n	800cbea <__cvt+0xc2>
 800cbac:	9b03      	ldr	r3, [sp, #12]
 800cbae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cbb0:	1b5b      	subs	r3, r3, r5
 800cbb2:	4628      	mov	r0, r5
 800cbb4:	6013      	str	r3, [r2, #0]
 800cbb6:	b004      	add	sp, #16
 800cbb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cbc0:	eb00 0904 	add.w	r9, r0, r4
 800cbc4:	d1e5      	bne.n	800cb92 <__cvt+0x6a>
 800cbc6:	7803      	ldrb	r3, [r0, #0]
 800cbc8:	2b30      	cmp	r3, #48	@ 0x30
 800cbca:	d10a      	bne.n	800cbe2 <__cvt+0xba>
 800cbcc:	2200      	movs	r2, #0
 800cbce:	2300      	movs	r3, #0
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	4639      	mov	r1, r7
 800cbd4:	f7f3 ff80 	bl	8000ad8 <__aeabi_dcmpeq>
 800cbd8:	b918      	cbnz	r0, 800cbe2 <__cvt+0xba>
 800cbda:	f1c4 0401 	rsb	r4, r4, #1
 800cbde:	f8ca 4000 	str.w	r4, [sl]
 800cbe2:	f8da 3000 	ldr.w	r3, [sl]
 800cbe6:	4499      	add	r9, r3
 800cbe8:	e7d3      	b.n	800cb92 <__cvt+0x6a>
 800cbea:	1c59      	adds	r1, r3, #1
 800cbec:	9103      	str	r1, [sp, #12]
 800cbee:	701a      	strb	r2, [r3, #0]
 800cbf0:	e7d9      	b.n	800cba6 <__cvt+0x7e>

0800cbf2 <__exponent>:
 800cbf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbf4:	2900      	cmp	r1, #0
 800cbf6:	bfba      	itte	lt
 800cbf8:	4249      	neglt	r1, r1
 800cbfa:	232d      	movlt	r3, #45	@ 0x2d
 800cbfc:	232b      	movge	r3, #43	@ 0x2b
 800cbfe:	2909      	cmp	r1, #9
 800cc00:	7002      	strb	r2, [r0, #0]
 800cc02:	7043      	strb	r3, [r0, #1]
 800cc04:	dd29      	ble.n	800cc5a <__exponent+0x68>
 800cc06:	f10d 0307 	add.w	r3, sp, #7
 800cc0a:	461d      	mov	r5, r3
 800cc0c:	270a      	movs	r7, #10
 800cc0e:	461a      	mov	r2, r3
 800cc10:	fbb1 f6f7 	udiv	r6, r1, r7
 800cc14:	fb07 1416 	mls	r4, r7, r6, r1
 800cc18:	3430      	adds	r4, #48	@ 0x30
 800cc1a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cc1e:	460c      	mov	r4, r1
 800cc20:	2c63      	cmp	r4, #99	@ 0x63
 800cc22:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cc26:	4631      	mov	r1, r6
 800cc28:	dcf1      	bgt.n	800cc0e <__exponent+0x1c>
 800cc2a:	3130      	adds	r1, #48	@ 0x30
 800cc2c:	1e94      	subs	r4, r2, #2
 800cc2e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cc32:	1c41      	adds	r1, r0, #1
 800cc34:	4623      	mov	r3, r4
 800cc36:	42ab      	cmp	r3, r5
 800cc38:	d30a      	bcc.n	800cc50 <__exponent+0x5e>
 800cc3a:	f10d 0309 	add.w	r3, sp, #9
 800cc3e:	1a9b      	subs	r3, r3, r2
 800cc40:	42ac      	cmp	r4, r5
 800cc42:	bf88      	it	hi
 800cc44:	2300      	movhi	r3, #0
 800cc46:	3302      	adds	r3, #2
 800cc48:	4403      	add	r3, r0
 800cc4a:	1a18      	subs	r0, r3, r0
 800cc4c:	b003      	add	sp, #12
 800cc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc50:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cc54:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cc58:	e7ed      	b.n	800cc36 <__exponent+0x44>
 800cc5a:	2330      	movs	r3, #48	@ 0x30
 800cc5c:	3130      	adds	r1, #48	@ 0x30
 800cc5e:	7083      	strb	r3, [r0, #2]
 800cc60:	70c1      	strb	r1, [r0, #3]
 800cc62:	1d03      	adds	r3, r0, #4
 800cc64:	e7f1      	b.n	800cc4a <__exponent+0x58>
	...

0800cc68 <_printf_float>:
 800cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	b08d      	sub	sp, #52	@ 0x34
 800cc6e:	460c      	mov	r4, r1
 800cc70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cc74:	4616      	mov	r6, r2
 800cc76:	461f      	mov	r7, r3
 800cc78:	4605      	mov	r5, r0
 800cc7a:	f001 f80d 	bl	800dc98 <_localeconv_r>
 800cc7e:	6803      	ldr	r3, [r0, #0]
 800cc80:	9304      	str	r3, [sp, #16]
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7f3 fafc 	bl	8000280 <strlen>
 800cc88:	2300      	movs	r3, #0
 800cc8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc8c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc90:	9005      	str	r0, [sp, #20]
 800cc92:	3307      	adds	r3, #7
 800cc94:	f023 0307 	bic.w	r3, r3, #7
 800cc98:	f103 0208 	add.w	r2, r3, #8
 800cc9c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cca0:	f8d4 b000 	ldr.w	fp, [r4]
 800cca4:	f8c8 2000 	str.w	r2, [r8]
 800cca8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ccac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ccb0:	9307      	str	r3, [sp, #28]
 800ccb2:	f8cd 8018 	str.w	r8, [sp, #24]
 800ccb6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ccba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccbe:	4b9c      	ldr	r3, [pc, #624]	@ (800cf30 <_printf_float+0x2c8>)
 800ccc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ccc4:	f7f3 ff3a 	bl	8000b3c <__aeabi_dcmpun>
 800ccc8:	bb70      	cbnz	r0, 800cd28 <_printf_float+0xc0>
 800ccca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccce:	4b98      	ldr	r3, [pc, #608]	@ (800cf30 <_printf_float+0x2c8>)
 800ccd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ccd4:	f7f3 ff14 	bl	8000b00 <__aeabi_dcmple>
 800ccd8:	bb30      	cbnz	r0, 800cd28 <_printf_float+0xc0>
 800ccda:	2200      	movs	r2, #0
 800ccdc:	2300      	movs	r3, #0
 800ccde:	4640      	mov	r0, r8
 800cce0:	4649      	mov	r1, r9
 800cce2:	f7f3 ff03 	bl	8000aec <__aeabi_dcmplt>
 800cce6:	b110      	cbz	r0, 800ccee <_printf_float+0x86>
 800cce8:	232d      	movs	r3, #45	@ 0x2d
 800ccea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ccee:	4a91      	ldr	r2, [pc, #580]	@ (800cf34 <_printf_float+0x2cc>)
 800ccf0:	4b91      	ldr	r3, [pc, #580]	@ (800cf38 <_printf_float+0x2d0>)
 800ccf2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ccf6:	bf94      	ite	ls
 800ccf8:	4690      	movls	r8, r2
 800ccfa:	4698      	movhi	r8, r3
 800ccfc:	2303      	movs	r3, #3
 800ccfe:	6123      	str	r3, [r4, #16]
 800cd00:	f02b 0304 	bic.w	r3, fp, #4
 800cd04:	6023      	str	r3, [r4, #0]
 800cd06:	f04f 0900 	mov.w	r9, #0
 800cd0a:	9700      	str	r7, [sp, #0]
 800cd0c:	4633      	mov	r3, r6
 800cd0e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cd10:	4621      	mov	r1, r4
 800cd12:	4628      	mov	r0, r5
 800cd14:	f000 f9d2 	bl	800d0bc <_printf_common>
 800cd18:	3001      	adds	r0, #1
 800cd1a:	f040 808d 	bne.w	800ce38 <_printf_float+0x1d0>
 800cd1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd22:	b00d      	add	sp, #52	@ 0x34
 800cd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd28:	4642      	mov	r2, r8
 800cd2a:	464b      	mov	r3, r9
 800cd2c:	4640      	mov	r0, r8
 800cd2e:	4649      	mov	r1, r9
 800cd30:	f7f3 ff04 	bl	8000b3c <__aeabi_dcmpun>
 800cd34:	b140      	cbz	r0, 800cd48 <_printf_float+0xe0>
 800cd36:	464b      	mov	r3, r9
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	bfbc      	itt	lt
 800cd3c:	232d      	movlt	r3, #45	@ 0x2d
 800cd3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cd42:	4a7e      	ldr	r2, [pc, #504]	@ (800cf3c <_printf_float+0x2d4>)
 800cd44:	4b7e      	ldr	r3, [pc, #504]	@ (800cf40 <_printf_float+0x2d8>)
 800cd46:	e7d4      	b.n	800ccf2 <_printf_float+0x8a>
 800cd48:	6863      	ldr	r3, [r4, #4]
 800cd4a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cd4e:	9206      	str	r2, [sp, #24]
 800cd50:	1c5a      	adds	r2, r3, #1
 800cd52:	d13b      	bne.n	800cdcc <_printf_float+0x164>
 800cd54:	2306      	movs	r3, #6
 800cd56:	6063      	str	r3, [r4, #4]
 800cd58:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	6022      	str	r2, [r4, #0]
 800cd60:	9303      	str	r3, [sp, #12]
 800cd62:	ab0a      	add	r3, sp, #40	@ 0x28
 800cd64:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cd68:	ab09      	add	r3, sp, #36	@ 0x24
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	6861      	ldr	r1, [r4, #4]
 800cd6e:	ec49 8b10 	vmov	d0, r8, r9
 800cd72:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cd76:	4628      	mov	r0, r5
 800cd78:	f7ff fed6 	bl	800cb28 <__cvt>
 800cd7c:	9b06      	ldr	r3, [sp, #24]
 800cd7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd80:	2b47      	cmp	r3, #71	@ 0x47
 800cd82:	4680      	mov	r8, r0
 800cd84:	d129      	bne.n	800cdda <_printf_float+0x172>
 800cd86:	1cc8      	adds	r0, r1, #3
 800cd88:	db02      	blt.n	800cd90 <_printf_float+0x128>
 800cd8a:	6863      	ldr	r3, [r4, #4]
 800cd8c:	4299      	cmp	r1, r3
 800cd8e:	dd41      	ble.n	800ce14 <_printf_float+0x1ac>
 800cd90:	f1aa 0a02 	sub.w	sl, sl, #2
 800cd94:	fa5f fa8a 	uxtb.w	sl, sl
 800cd98:	3901      	subs	r1, #1
 800cd9a:	4652      	mov	r2, sl
 800cd9c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cda0:	9109      	str	r1, [sp, #36]	@ 0x24
 800cda2:	f7ff ff26 	bl	800cbf2 <__exponent>
 800cda6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cda8:	1813      	adds	r3, r2, r0
 800cdaa:	2a01      	cmp	r2, #1
 800cdac:	4681      	mov	r9, r0
 800cdae:	6123      	str	r3, [r4, #16]
 800cdb0:	dc02      	bgt.n	800cdb8 <_printf_float+0x150>
 800cdb2:	6822      	ldr	r2, [r4, #0]
 800cdb4:	07d2      	lsls	r2, r2, #31
 800cdb6:	d501      	bpl.n	800cdbc <_printf_float+0x154>
 800cdb8:	3301      	adds	r3, #1
 800cdba:	6123      	str	r3, [r4, #16]
 800cdbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d0a2      	beq.n	800cd0a <_printf_float+0xa2>
 800cdc4:	232d      	movs	r3, #45	@ 0x2d
 800cdc6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdca:	e79e      	b.n	800cd0a <_printf_float+0xa2>
 800cdcc:	9a06      	ldr	r2, [sp, #24]
 800cdce:	2a47      	cmp	r2, #71	@ 0x47
 800cdd0:	d1c2      	bne.n	800cd58 <_printf_float+0xf0>
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d1c0      	bne.n	800cd58 <_printf_float+0xf0>
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e7bd      	b.n	800cd56 <_printf_float+0xee>
 800cdda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cdde:	d9db      	bls.n	800cd98 <_printf_float+0x130>
 800cde0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cde4:	d118      	bne.n	800ce18 <_printf_float+0x1b0>
 800cde6:	2900      	cmp	r1, #0
 800cde8:	6863      	ldr	r3, [r4, #4]
 800cdea:	dd0b      	ble.n	800ce04 <_printf_float+0x19c>
 800cdec:	6121      	str	r1, [r4, #16]
 800cdee:	b913      	cbnz	r3, 800cdf6 <_printf_float+0x18e>
 800cdf0:	6822      	ldr	r2, [r4, #0]
 800cdf2:	07d0      	lsls	r0, r2, #31
 800cdf4:	d502      	bpl.n	800cdfc <_printf_float+0x194>
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	440b      	add	r3, r1
 800cdfa:	6123      	str	r3, [r4, #16]
 800cdfc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cdfe:	f04f 0900 	mov.w	r9, #0
 800ce02:	e7db      	b.n	800cdbc <_printf_float+0x154>
 800ce04:	b913      	cbnz	r3, 800ce0c <_printf_float+0x1a4>
 800ce06:	6822      	ldr	r2, [r4, #0]
 800ce08:	07d2      	lsls	r2, r2, #31
 800ce0a:	d501      	bpl.n	800ce10 <_printf_float+0x1a8>
 800ce0c:	3302      	adds	r3, #2
 800ce0e:	e7f4      	b.n	800cdfa <_printf_float+0x192>
 800ce10:	2301      	movs	r3, #1
 800ce12:	e7f2      	b.n	800cdfa <_printf_float+0x192>
 800ce14:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ce18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce1a:	4299      	cmp	r1, r3
 800ce1c:	db05      	blt.n	800ce2a <_printf_float+0x1c2>
 800ce1e:	6823      	ldr	r3, [r4, #0]
 800ce20:	6121      	str	r1, [r4, #16]
 800ce22:	07d8      	lsls	r0, r3, #31
 800ce24:	d5ea      	bpl.n	800cdfc <_printf_float+0x194>
 800ce26:	1c4b      	adds	r3, r1, #1
 800ce28:	e7e7      	b.n	800cdfa <_printf_float+0x192>
 800ce2a:	2900      	cmp	r1, #0
 800ce2c:	bfd4      	ite	le
 800ce2e:	f1c1 0202 	rsble	r2, r1, #2
 800ce32:	2201      	movgt	r2, #1
 800ce34:	4413      	add	r3, r2
 800ce36:	e7e0      	b.n	800cdfa <_printf_float+0x192>
 800ce38:	6823      	ldr	r3, [r4, #0]
 800ce3a:	055a      	lsls	r2, r3, #21
 800ce3c:	d407      	bmi.n	800ce4e <_printf_float+0x1e6>
 800ce3e:	6923      	ldr	r3, [r4, #16]
 800ce40:	4642      	mov	r2, r8
 800ce42:	4631      	mov	r1, r6
 800ce44:	4628      	mov	r0, r5
 800ce46:	47b8      	blx	r7
 800ce48:	3001      	adds	r0, #1
 800ce4a:	d12b      	bne.n	800cea4 <_printf_float+0x23c>
 800ce4c:	e767      	b.n	800cd1e <_printf_float+0xb6>
 800ce4e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ce52:	f240 80dd 	bls.w	800d010 <_printf_float+0x3a8>
 800ce56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	f7f3 fe3b 	bl	8000ad8 <__aeabi_dcmpeq>
 800ce62:	2800      	cmp	r0, #0
 800ce64:	d033      	beq.n	800cece <_printf_float+0x266>
 800ce66:	4a37      	ldr	r2, [pc, #220]	@ (800cf44 <_printf_float+0x2dc>)
 800ce68:	2301      	movs	r3, #1
 800ce6a:	4631      	mov	r1, r6
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	47b8      	blx	r7
 800ce70:	3001      	adds	r0, #1
 800ce72:	f43f af54 	beq.w	800cd1e <_printf_float+0xb6>
 800ce76:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ce7a:	4543      	cmp	r3, r8
 800ce7c:	db02      	blt.n	800ce84 <_printf_float+0x21c>
 800ce7e:	6823      	ldr	r3, [r4, #0]
 800ce80:	07d8      	lsls	r0, r3, #31
 800ce82:	d50f      	bpl.n	800cea4 <_printf_float+0x23c>
 800ce84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce88:	4631      	mov	r1, r6
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	47b8      	blx	r7
 800ce8e:	3001      	adds	r0, #1
 800ce90:	f43f af45 	beq.w	800cd1e <_printf_float+0xb6>
 800ce94:	f04f 0900 	mov.w	r9, #0
 800ce98:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800ce9c:	f104 0a1a 	add.w	sl, r4, #26
 800cea0:	45c8      	cmp	r8, r9
 800cea2:	dc09      	bgt.n	800ceb8 <_printf_float+0x250>
 800cea4:	6823      	ldr	r3, [r4, #0]
 800cea6:	079b      	lsls	r3, r3, #30
 800cea8:	f100 8103 	bmi.w	800d0b2 <_printf_float+0x44a>
 800ceac:	68e0      	ldr	r0, [r4, #12]
 800ceae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ceb0:	4298      	cmp	r0, r3
 800ceb2:	bfb8      	it	lt
 800ceb4:	4618      	movlt	r0, r3
 800ceb6:	e734      	b.n	800cd22 <_printf_float+0xba>
 800ceb8:	2301      	movs	r3, #1
 800ceba:	4652      	mov	r2, sl
 800cebc:	4631      	mov	r1, r6
 800cebe:	4628      	mov	r0, r5
 800cec0:	47b8      	blx	r7
 800cec2:	3001      	adds	r0, #1
 800cec4:	f43f af2b 	beq.w	800cd1e <_printf_float+0xb6>
 800cec8:	f109 0901 	add.w	r9, r9, #1
 800cecc:	e7e8      	b.n	800cea0 <_printf_float+0x238>
 800cece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	dc39      	bgt.n	800cf48 <_printf_float+0x2e0>
 800ced4:	4a1b      	ldr	r2, [pc, #108]	@ (800cf44 <_printf_float+0x2dc>)
 800ced6:	2301      	movs	r3, #1
 800ced8:	4631      	mov	r1, r6
 800ceda:	4628      	mov	r0, r5
 800cedc:	47b8      	blx	r7
 800cede:	3001      	adds	r0, #1
 800cee0:	f43f af1d 	beq.w	800cd1e <_printf_float+0xb6>
 800cee4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cee8:	ea59 0303 	orrs.w	r3, r9, r3
 800ceec:	d102      	bne.n	800cef4 <_printf_float+0x28c>
 800ceee:	6823      	ldr	r3, [r4, #0]
 800cef0:	07d9      	lsls	r1, r3, #31
 800cef2:	d5d7      	bpl.n	800cea4 <_printf_float+0x23c>
 800cef4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cef8:	4631      	mov	r1, r6
 800cefa:	4628      	mov	r0, r5
 800cefc:	47b8      	blx	r7
 800cefe:	3001      	adds	r0, #1
 800cf00:	f43f af0d 	beq.w	800cd1e <_printf_float+0xb6>
 800cf04:	f04f 0a00 	mov.w	sl, #0
 800cf08:	f104 0b1a 	add.w	fp, r4, #26
 800cf0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf0e:	425b      	negs	r3, r3
 800cf10:	4553      	cmp	r3, sl
 800cf12:	dc01      	bgt.n	800cf18 <_printf_float+0x2b0>
 800cf14:	464b      	mov	r3, r9
 800cf16:	e793      	b.n	800ce40 <_printf_float+0x1d8>
 800cf18:	2301      	movs	r3, #1
 800cf1a:	465a      	mov	r2, fp
 800cf1c:	4631      	mov	r1, r6
 800cf1e:	4628      	mov	r0, r5
 800cf20:	47b8      	blx	r7
 800cf22:	3001      	adds	r0, #1
 800cf24:	f43f aefb 	beq.w	800cd1e <_printf_float+0xb6>
 800cf28:	f10a 0a01 	add.w	sl, sl, #1
 800cf2c:	e7ee      	b.n	800cf0c <_printf_float+0x2a4>
 800cf2e:	bf00      	nop
 800cf30:	7fefffff 	.word	0x7fefffff
 800cf34:	080113e1 	.word	0x080113e1
 800cf38:	080113e5 	.word	0x080113e5
 800cf3c:	080113e9 	.word	0x080113e9
 800cf40:	080113ed 	.word	0x080113ed
 800cf44:	080113f1 	.word	0x080113f1
 800cf48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf4a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cf4e:	4553      	cmp	r3, sl
 800cf50:	bfa8      	it	ge
 800cf52:	4653      	movge	r3, sl
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	4699      	mov	r9, r3
 800cf58:	dc36      	bgt.n	800cfc8 <_printf_float+0x360>
 800cf5a:	f04f 0b00 	mov.w	fp, #0
 800cf5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf62:	f104 021a 	add.w	r2, r4, #26
 800cf66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cf68:	9306      	str	r3, [sp, #24]
 800cf6a:	eba3 0309 	sub.w	r3, r3, r9
 800cf6e:	455b      	cmp	r3, fp
 800cf70:	dc31      	bgt.n	800cfd6 <_printf_float+0x36e>
 800cf72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf74:	459a      	cmp	sl, r3
 800cf76:	dc3a      	bgt.n	800cfee <_printf_float+0x386>
 800cf78:	6823      	ldr	r3, [r4, #0]
 800cf7a:	07da      	lsls	r2, r3, #31
 800cf7c:	d437      	bmi.n	800cfee <_printf_float+0x386>
 800cf7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf80:	ebaa 0903 	sub.w	r9, sl, r3
 800cf84:	9b06      	ldr	r3, [sp, #24]
 800cf86:	ebaa 0303 	sub.w	r3, sl, r3
 800cf8a:	4599      	cmp	r9, r3
 800cf8c:	bfa8      	it	ge
 800cf8e:	4699      	movge	r9, r3
 800cf90:	f1b9 0f00 	cmp.w	r9, #0
 800cf94:	dc33      	bgt.n	800cffe <_printf_float+0x396>
 800cf96:	f04f 0800 	mov.w	r8, #0
 800cf9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf9e:	f104 0b1a 	add.w	fp, r4, #26
 800cfa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfa4:	ebaa 0303 	sub.w	r3, sl, r3
 800cfa8:	eba3 0309 	sub.w	r3, r3, r9
 800cfac:	4543      	cmp	r3, r8
 800cfae:	f77f af79 	ble.w	800cea4 <_printf_float+0x23c>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	465a      	mov	r2, fp
 800cfb6:	4631      	mov	r1, r6
 800cfb8:	4628      	mov	r0, r5
 800cfba:	47b8      	blx	r7
 800cfbc:	3001      	adds	r0, #1
 800cfbe:	f43f aeae 	beq.w	800cd1e <_printf_float+0xb6>
 800cfc2:	f108 0801 	add.w	r8, r8, #1
 800cfc6:	e7ec      	b.n	800cfa2 <_printf_float+0x33a>
 800cfc8:	4642      	mov	r2, r8
 800cfca:	4631      	mov	r1, r6
 800cfcc:	4628      	mov	r0, r5
 800cfce:	47b8      	blx	r7
 800cfd0:	3001      	adds	r0, #1
 800cfd2:	d1c2      	bne.n	800cf5a <_printf_float+0x2f2>
 800cfd4:	e6a3      	b.n	800cd1e <_printf_float+0xb6>
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	4631      	mov	r1, r6
 800cfda:	4628      	mov	r0, r5
 800cfdc:	9206      	str	r2, [sp, #24]
 800cfde:	47b8      	blx	r7
 800cfe0:	3001      	adds	r0, #1
 800cfe2:	f43f ae9c 	beq.w	800cd1e <_printf_float+0xb6>
 800cfe6:	9a06      	ldr	r2, [sp, #24]
 800cfe8:	f10b 0b01 	add.w	fp, fp, #1
 800cfec:	e7bb      	b.n	800cf66 <_printf_float+0x2fe>
 800cfee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cff2:	4631      	mov	r1, r6
 800cff4:	4628      	mov	r0, r5
 800cff6:	47b8      	blx	r7
 800cff8:	3001      	adds	r0, #1
 800cffa:	d1c0      	bne.n	800cf7e <_printf_float+0x316>
 800cffc:	e68f      	b.n	800cd1e <_printf_float+0xb6>
 800cffe:	9a06      	ldr	r2, [sp, #24]
 800d000:	464b      	mov	r3, r9
 800d002:	4442      	add	r2, r8
 800d004:	4631      	mov	r1, r6
 800d006:	4628      	mov	r0, r5
 800d008:	47b8      	blx	r7
 800d00a:	3001      	adds	r0, #1
 800d00c:	d1c3      	bne.n	800cf96 <_printf_float+0x32e>
 800d00e:	e686      	b.n	800cd1e <_printf_float+0xb6>
 800d010:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d014:	f1ba 0f01 	cmp.w	sl, #1
 800d018:	dc01      	bgt.n	800d01e <_printf_float+0x3b6>
 800d01a:	07db      	lsls	r3, r3, #31
 800d01c:	d536      	bpl.n	800d08c <_printf_float+0x424>
 800d01e:	2301      	movs	r3, #1
 800d020:	4642      	mov	r2, r8
 800d022:	4631      	mov	r1, r6
 800d024:	4628      	mov	r0, r5
 800d026:	47b8      	blx	r7
 800d028:	3001      	adds	r0, #1
 800d02a:	f43f ae78 	beq.w	800cd1e <_printf_float+0xb6>
 800d02e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d032:	4631      	mov	r1, r6
 800d034:	4628      	mov	r0, r5
 800d036:	47b8      	blx	r7
 800d038:	3001      	adds	r0, #1
 800d03a:	f43f ae70 	beq.w	800cd1e <_printf_float+0xb6>
 800d03e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d042:	2200      	movs	r2, #0
 800d044:	2300      	movs	r3, #0
 800d046:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d04a:	f7f3 fd45 	bl	8000ad8 <__aeabi_dcmpeq>
 800d04e:	b9c0      	cbnz	r0, 800d082 <_printf_float+0x41a>
 800d050:	4653      	mov	r3, sl
 800d052:	f108 0201 	add.w	r2, r8, #1
 800d056:	4631      	mov	r1, r6
 800d058:	4628      	mov	r0, r5
 800d05a:	47b8      	blx	r7
 800d05c:	3001      	adds	r0, #1
 800d05e:	d10c      	bne.n	800d07a <_printf_float+0x412>
 800d060:	e65d      	b.n	800cd1e <_printf_float+0xb6>
 800d062:	2301      	movs	r3, #1
 800d064:	465a      	mov	r2, fp
 800d066:	4631      	mov	r1, r6
 800d068:	4628      	mov	r0, r5
 800d06a:	47b8      	blx	r7
 800d06c:	3001      	adds	r0, #1
 800d06e:	f43f ae56 	beq.w	800cd1e <_printf_float+0xb6>
 800d072:	f108 0801 	add.w	r8, r8, #1
 800d076:	45d0      	cmp	r8, sl
 800d078:	dbf3      	blt.n	800d062 <_printf_float+0x3fa>
 800d07a:	464b      	mov	r3, r9
 800d07c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d080:	e6df      	b.n	800ce42 <_printf_float+0x1da>
 800d082:	f04f 0800 	mov.w	r8, #0
 800d086:	f104 0b1a 	add.w	fp, r4, #26
 800d08a:	e7f4      	b.n	800d076 <_printf_float+0x40e>
 800d08c:	2301      	movs	r3, #1
 800d08e:	4642      	mov	r2, r8
 800d090:	e7e1      	b.n	800d056 <_printf_float+0x3ee>
 800d092:	2301      	movs	r3, #1
 800d094:	464a      	mov	r2, r9
 800d096:	4631      	mov	r1, r6
 800d098:	4628      	mov	r0, r5
 800d09a:	47b8      	blx	r7
 800d09c:	3001      	adds	r0, #1
 800d09e:	f43f ae3e 	beq.w	800cd1e <_printf_float+0xb6>
 800d0a2:	f108 0801 	add.w	r8, r8, #1
 800d0a6:	68e3      	ldr	r3, [r4, #12]
 800d0a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d0aa:	1a5b      	subs	r3, r3, r1
 800d0ac:	4543      	cmp	r3, r8
 800d0ae:	dcf0      	bgt.n	800d092 <_printf_float+0x42a>
 800d0b0:	e6fc      	b.n	800ceac <_printf_float+0x244>
 800d0b2:	f04f 0800 	mov.w	r8, #0
 800d0b6:	f104 0919 	add.w	r9, r4, #25
 800d0ba:	e7f4      	b.n	800d0a6 <_printf_float+0x43e>

0800d0bc <_printf_common>:
 800d0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c0:	4616      	mov	r6, r2
 800d0c2:	4698      	mov	r8, r3
 800d0c4:	688a      	ldr	r2, [r1, #8]
 800d0c6:	690b      	ldr	r3, [r1, #16]
 800d0c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	bfb8      	it	lt
 800d0d0:	4613      	movlt	r3, r2
 800d0d2:	6033      	str	r3, [r6, #0]
 800d0d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d0d8:	4607      	mov	r7, r0
 800d0da:	460c      	mov	r4, r1
 800d0dc:	b10a      	cbz	r2, 800d0e2 <_printf_common+0x26>
 800d0de:	3301      	adds	r3, #1
 800d0e0:	6033      	str	r3, [r6, #0]
 800d0e2:	6823      	ldr	r3, [r4, #0]
 800d0e4:	0699      	lsls	r1, r3, #26
 800d0e6:	bf42      	ittt	mi
 800d0e8:	6833      	ldrmi	r3, [r6, #0]
 800d0ea:	3302      	addmi	r3, #2
 800d0ec:	6033      	strmi	r3, [r6, #0]
 800d0ee:	6825      	ldr	r5, [r4, #0]
 800d0f0:	f015 0506 	ands.w	r5, r5, #6
 800d0f4:	d106      	bne.n	800d104 <_printf_common+0x48>
 800d0f6:	f104 0a19 	add.w	sl, r4, #25
 800d0fa:	68e3      	ldr	r3, [r4, #12]
 800d0fc:	6832      	ldr	r2, [r6, #0]
 800d0fe:	1a9b      	subs	r3, r3, r2
 800d100:	42ab      	cmp	r3, r5
 800d102:	dc26      	bgt.n	800d152 <_printf_common+0x96>
 800d104:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d108:	6822      	ldr	r2, [r4, #0]
 800d10a:	3b00      	subs	r3, #0
 800d10c:	bf18      	it	ne
 800d10e:	2301      	movne	r3, #1
 800d110:	0692      	lsls	r2, r2, #26
 800d112:	d42b      	bmi.n	800d16c <_printf_common+0xb0>
 800d114:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d118:	4641      	mov	r1, r8
 800d11a:	4638      	mov	r0, r7
 800d11c:	47c8      	blx	r9
 800d11e:	3001      	adds	r0, #1
 800d120:	d01e      	beq.n	800d160 <_printf_common+0xa4>
 800d122:	6823      	ldr	r3, [r4, #0]
 800d124:	6922      	ldr	r2, [r4, #16]
 800d126:	f003 0306 	and.w	r3, r3, #6
 800d12a:	2b04      	cmp	r3, #4
 800d12c:	bf02      	ittt	eq
 800d12e:	68e5      	ldreq	r5, [r4, #12]
 800d130:	6833      	ldreq	r3, [r6, #0]
 800d132:	1aed      	subeq	r5, r5, r3
 800d134:	68a3      	ldr	r3, [r4, #8]
 800d136:	bf0c      	ite	eq
 800d138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d13c:	2500      	movne	r5, #0
 800d13e:	4293      	cmp	r3, r2
 800d140:	bfc4      	itt	gt
 800d142:	1a9b      	subgt	r3, r3, r2
 800d144:	18ed      	addgt	r5, r5, r3
 800d146:	2600      	movs	r6, #0
 800d148:	341a      	adds	r4, #26
 800d14a:	42b5      	cmp	r5, r6
 800d14c:	d11a      	bne.n	800d184 <_printf_common+0xc8>
 800d14e:	2000      	movs	r0, #0
 800d150:	e008      	b.n	800d164 <_printf_common+0xa8>
 800d152:	2301      	movs	r3, #1
 800d154:	4652      	mov	r2, sl
 800d156:	4641      	mov	r1, r8
 800d158:	4638      	mov	r0, r7
 800d15a:	47c8      	blx	r9
 800d15c:	3001      	adds	r0, #1
 800d15e:	d103      	bne.n	800d168 <_printf_common+0xac>
 800d160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d168:	3501      	adds	r5, #1
 800d16a:	e7c6      	b.n	800d0fa <_printf_common+0x3e>
 800d16c:	18e1      	adds	r1, r4, r3
 800d16e:	1c5a      	adds	r2, r3, #1
 800d170:	2030      	movs	r0, #48	@ 0x30
 800d172:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d176:	4422      	add	r2, r4
 800d178:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d17c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d180:	3302      	adds	r3, #2
 800d182:	e7c7      	b.n	800d114 <_printf_common+0x58>
 800d184:	2301      	movs	r3, #1
 800d186:	4622      	mov	r2, r4
 800d188:	4641      	mov	r1, r8
 800d18a:	4638      	mov	r0, r7
 800d18c:	47c8      	blx	r9
 800d18e:	3001      	adds	r0, #1
 800d190:	d0e6      	beq.n	800d160 <_printf_common+0xa4>
 800d192:	3601      	adds	r6, #1
 800d194:	e7d9      	b.n	800d14a <_printf_common+0x8e>
	...

0800d198 <_printf_i>:
 800d198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d19c:	7e0f      	ldrb	r7, [r1, #24]
 800d19e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d1a0:	2f78      	cmp	r7, #120	@ 0x78
 800d1a2:	4691      	mov	r9, r2
 800d1a4:	4680      	mov	r8, r0
 800d1a6:	460c      	mov	r4, r1
 800d1a8:	469a      	mov	sl, r3
 800d1aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d1ae:	d807      	bhi.n	800d1c0 <_printf_i+0x28>
 800d1b0:	2f62      	cmp	r7, #98	@ 0x62
 800d1b2:	d80a      	bhi.n	800d1ca <_printf_i+0x32>
 800d1b4:	2f00      	cmp	r7, #0
 800d1b6:	f000 80d2 	beq.w	800d35e <_printf_i+0x1c6>
 800d1ba:	2f58      	cmp	r7, #88	@ 0x58
 800d1bc:	f000 80b9 	beq.w	800d332 <_printf_i+0x19a>
 800d1c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d1c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d1c8:	e03a      	b.n	800d240 <_printf_i+0xa8>
 800d1ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d1ce:	2b15      	cmp	r3, #21
 800d1d0:	d8f6      	bhi.n	800d1c0 <_printf_i+0x28>
 800d1d2:	a101      	add	r1, pc, #4	@ (adr r1, 800d1d8 <_printf_i+0x40>)
 800d1d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1d8:	0800d231 	.word	0x0800d231
 800d1dc:	0800d245 	.word	0x0800d245
 800d1e0:	0800d1c1 	.word	0x0800d1c1
 800d1e4:	0800d1c1 	.word	0x0800d1c1
 800d1e8:	0800d1c1 	.word	0x0800d1c1
 800d1ec:	0800d1c1 	.word	0x0800d1c1
 800d1f0:	0800d245 	.word	0x0800d245
 800d1f4:	0800d1c1 	.word	0x0800d1c1
 800d1f8:	0800d1c1 	.word	0x0800d1c1
 800d1fc:	0800d1c1 	.word	0x0800d1c1
 800d200:	0800d1c1 	.word	0x0800d1c1
 800d204:	0800d345 	.word	0x0800d345
 800d208:	0800d26f 	.word	0x0800d26f
 800d20c:	0800d2ff 	.word	0x0800d2ff
 800d210:	0800d1c1 	.word	0x0800d1c1
 800d214:	0800d1c1 	.word	0x0800d1c1
 800d218:	0800d367 	.word	0x0800d367
 800d21c:	0800d1c1 	.word	0x0800d1c1
 800d220:	0800d26f 	.word	0x0800d26f
 800d224:	0800d1c1 	.word	0x0800d1c1
 800d228:	0800d1c1 	.word	0x0800d1c1
 800d22c:	0800d307 	.word	0x0800d307
 800d230:	6833      	ldr	r3, [r6, #0]
 800d232:	1d1a      	adds	r2, r3, #4
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	6032      	str	r2, [r6, #0]
 800d238:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d23c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d240:	2301      	movs	r3, #1
 800d242:	e09d      	b.n	800d380 <_printf_i+0x1e8>
 800d244:	6833      	ldr	r3, [r6, #0]
 800d246:	6820      	ldr	r0, [r4, #0]
 800d248:	1d19      	adds	r1, r3, #4
 800d24a:	6031      	str	r1, [r6, #0]
 800d24c:	0606      	lsls	r6, r0, #24
 800d24e:	d501      	bpl.n	800d254 <_printf_i+0xbc>
 800d250:	681d      	ldr	r5, [r3, #0]
 800d252:	e003      	b.n	800d25c <_printf_i+0xc4>
 800d254:	0645      	lsls	r5, r0, #25
 800d256:	d5fb      	bpl.n	800d250 <_printf_i+0xb8>
 800d258:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d25c:	2d00      	cmp	r5, #0
 800d25e:	da03      	bge.n	800d268 <_printf_i+0xd0>
 800d260:	232d      	movs	r3, #45	@ 0x2d
 800d262:	426d      	negs	r5, r5
 800d264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d268:	4859      	ldr	r0, [pc, #356]	@ (800d3d0 <_printf_i+0x238>)
 800d26a:	230a      	movs	r3, #10
 800d26c:	e011      	b.n	800d292 <_printf_i+0xfa>
 800d26e:	6821      	ldr	r1, [r4, #0]
 800d270:	6833      	ldr	r3, [r6, #0]
 800d272:	0608      	lsls	r0, r1, #24
 800d274:	f853 5b04 	ldr.w	r5, [r3], #4
 800d278:	d402      	bmi.n	800d280 <_printf_i+0xe8>
 800d27a:	0649      	lsls	r1, r1, #25
 800d27c:	bf48      	it	mi
 800d27e:	b2ad      	uxthmi	r5, r5
 800d280:	2f6f      	cmp	r7, #111	@ 0x6f
 800d282:	4853      	ldr	r0, [pc, #332]	@ (800d3d0 <_printf_i+0x238>)
 800d284:	6033      	str	r3, [r6, #0]
 800d286:	bf14      	ite	ne
 800d288:	230a      	movne	r3, #10
 800d28a:	2308      	moveq	r3, #8
 800d28c:	2100      	movs	r1, #0
 800d28e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d292:	6866      	ldr	r6, [r4, #4]
 800d294:	60a6      	str	r6, [r4, #8]
 800d296:	2e00      	cmp	r6, #0
 800d298:	bfa2      	ittt	ge
 800d29a:	6821      	ldrge	r1, [r4, #0]
 800d29c:	f021 0104 	bicge.w	r1, r1, #4
 800d2a0:	6021      	strge	r1, [r4, #0]
 800d2a2:	b90d      	cbnz	r5, 800d2a8 <_printf_i+0x110>
 800d2a4:	2e00      	cmp	r6, #0
 800d2a6:	d04b      	beq.n	800d340 <_printf_i+0x1a8>
 800d2a8:	4616      	mov	r6, r2
 800d2aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800d2ae:	fb03 5711 	mls	r7, r3, r1, r5
 800d2b2:	5dc7      	ldrb	r7, [r0, r7]
 800d2b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d2b8:	462f      	mov	r7, r5
 800d2ba:	42bb      	cmp	r3, r7
 800d2bc:	460d      	mov	r5, r1
 800d2be:	d9f4      	bls.n	800d2aa <_printf_i+0x112>
 800d2c0:	2b08      	cmp	r3, #8
 800d2c2:	d10b      	bne.n	800d2dc <_printf_i+0x144>
 800d2c4:	6823      	ldr	r3, [r4, #0]
 800d2c6:	07df      	lsls	r7, r3, #31
 800d2c8:	d508      	bpl.n	800d2dc <_printf_i+0x144>
 800d2ca:	6923      	ldr	r3, [r4, #16]
 800d2cc:	6861      	ldr	r1, [r4, #4]
 800d2ce:	4299      	cmp	r1, r3
 800d2d0:	bfde      	ittt	le
 800d2d2:	2330      	movle	r3, #48	@ 0x30
 800d2d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2d8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d2dc:	1b92      	subs	r2, r2, r6
 800d2de:	6122      	str	r2, [r4, #16]
 800d2e0:	f8cd a000 	str.w	sl, [sp]
 800d2e4:	464b      	mov	r3, r9
 800d2e6:	aa03      	add	r2, sp, #12
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	4640      	mov	r0, r8
 800d2ec:	f7ff fee6 	bl	800d0bc <_printf_common>
 800d2f0:	3001      	adds	r0, #1
 800d2f2:	d14a      	bne.n	800d38a <_printf_i+0x1f2>
 800d2f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d2f8:	b004      	add	sp, #16
 800d2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	f043 0320 	orr.w	r3, r3, #32
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	4833      	ldr	r0, [pc, #204]	@ (800d3d4 <_printf_i+0x23c>)
 800d308:	2778      	movs	r7, #120	@ 0x78
 800d30a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d30e:	6823      	ldr	r3, [r4, #0]
 800d310:	6831      	ldr	r1, [r6, #0]
 800d312:	061f      	lsls	r7, r3, #24
 800d314:	f851 5b04 	ldr.w	r5, [r1], #4
 800d318:	d402      	bmi.n	800d320 <_printf_i+0x188>
 800d31a:	065f      	lsls	r7, r3, #25
 800d31c:	bf48      	it	mi
 800d31e:	b2ad      	uxthmi	r5, r5
 800d320:	6031      	str	r1, [r6, #0]
 800d322:	07d9      	lsls	r1, r3, #31
 800d324:	bf44      	itt	mi
 800d326:	f043 0320 	orrmi.w	r3, r3, #32
 800d32a:	6023      	strmi	r3, [r4, #0]
 800d32c:	b11d      	cbz	r5, 800d336 <_printf_i+0x19e>
 800d32e:	2310      	movs	r3, #16
 800d330:	e7ac      	b.n	800d28c <_printf_i+0xf4>
 800d332:	4827      	ldr	r0, [pc, #156]	@ (800d3d0 <_printf_i+0x238>)
 800d334:	e7e9      	b.n	800d30a <_printf_i+0x172>
 800d336:	6823      	ldr	r3, [r4, #0]
 800d338:	f023 0320 	bic.w	r3, r3, #32
 800d33c:	6023      	str	r3, [r4, #0]
 800d33e:	e7f6      	b.n	800d32e <_printf_i+0x196>
 800d340:	4616      	mov	r6, r2
 800d342:	e7bd      	b.n	800d2c0 <_printf_i+0x128>
 800d344:	6833      	ldr	r3, [r6, #0]
 800d346:	6825      	ldr	r5, [r4, #0]
 800d348:	6961      	ldr	r1, [r4, #20]
 800d34a:	1d18      	adds	r0, r3, #4
 800d34c:	6030      	str	r0, [r6, #0]
 800d34e:	062e      	lsls	r6, r5, #24
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	d501      	bpl.n	800d358 <_printf_i+0x1c0>
 800d354:	6019      	str	r1, [r3, #0]
 800d356:	e002      	b.n	800d35e <_printf_i+0x1c6>
 800d358:	0668      	lsls	r0, r5, #25
 800d35a:	d5fb      	bpl.n	800d354 <_printf_i+0x1bc>
 800d35c:	8019      	strh	r1, [r3, #0]
 800d35e:	2300      	movs	r3, #0
 800d360:	6123      	str	r3, [r4, #16]
 800d362:	4616      	mov	r6, r2
 800d364:	e7bc      	b.n	800d2e0 <_printf_i+0x148>
 800d366:	6833      	ldr	r3, [r6, #0]
 800d368:	1d1a      	adds	r2, r3, #4
 800d36a:	6032      	str	r2, [r6, #0]
 800d36c:	681e      	ldr	r6, [r3, #0]
 800d36e:	6862      	ldr	r2, [r4, #4]
 800d370:	2100      	movs	r1, #0
 800d372:	4630      	mov	r0, r6
 800d374:	f7f2 ff34 	bl	80001e0 <memchr>
 800d378:	b108      	cbz	r0, 800d37e <_printf_i+0x1e6>
 800d37a:	1b80      	subs	r0, r0, r6
 800d37c:	6060      	str	r0, [r4, #4]
 800d37e:	6863      	ldr	r3, [r4, #4]
 800d380:	6123      	str	r3, [r4, #16]
 800d382:	2300      	movs	r3, #0
 800d384:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d388:	e7aa      	b.n	800d2e0 <_printf_i+0x148>
 800d38a:	6923      	ldr	r3, [r4, #16]
 800d38c:	4632      	mov	r2, r6
 800d38e:	4649      	mov	r1, r9
 800d390:	4640      	mov	r0, r8
 800d392:	47d0      	blx	sl
 800d394:	3001      	adds	r0, #1
 800d396:	d0ad      	beq.n	800d2f4 <_printf_i+0x15c>
 800d398:	6823      	ldr	r3, [r4, #0]
 800d39a:	079b      	lsls	r3, r3, #30
 800d39c:	d413      	bmi.n	800d3c6 <_printf_i+0x22e>
 800d39e:	68e0      	ldr	r0, [r4, #12]
 800d3a0:	9b03      	ldr	r3, [sp, #12]
 800d3a2:	4298      	cmp	r0, r3
 800d3a4:	bfb8      	it	lt
 800d3a6:	4618      	movlt	r0, r3
 800d3a8:	e7a6      	b.n	800d2f8 <_printf_i+0x160>
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	4632      	mov	r2, r6
 800d3ae:	4649      	mov	r1, r9
 800d3b0:	4640      	mov	r0, r8
 800d3b2:	47d0      	blx	sl
 800d3b4:	3001      	adds	r0, #1
 800d3b6:	d09d      	beq.n	800d2f4 <_printf_i+0x15c>
 800d3b8:	3501      	adds	r5, #1
 800d3ba:	68e3      	ldr	r3, [r4, #12]
 800d3bc:	9903      	ldr	r1, [sp, #12]
 800d3be:	1a5b      	subs	r3, r3, r1
 800d3c0:	42ab      	cmp	r3, r5
 800d3c2:	dcf2      	bgt.n	800d3aa <_printf_i+0x212>
 800d3c4:	e7eb      	b.n	800d39e <_printf_i+0x206>
 800d3c6:	2500      	movs	r5, #0
 800d3c8:	f104 0619 	add.w	r6, r4, #25
 800d3cc:	e7f5      	b.n	800d3ba <_printf_i+0x222>
 800d3ce:	bf00      	nop
 800d3d0:	080113f3 	.word	0x080113f3
 800d3d4:	08011404 	.word	0x08011404

0800d3d8 <_scanf_float>:
 800d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3dc:	b087      	sub	sp, #28
 800d3de:	4617      	mov	r7, r2
 800d3e0:	9303      	str	r3, [sp, #12]
 800d3e2:	688b      	ldr	r3, [r1, #8]
 800d3e4:	1e5a      	subs	r2, r3, #1
 800d3e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d3ea:	bf81      	itttt	hi
 800d3ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d3f0:	eb03 0b05 	addhi.w	fp, r3, r5
 800d3f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d3f8:	608b      	strhi	r3, [r1, #8]
 800d3fa:	680b      	ldr	r3, [r1, #0]
 800d3fc:	460a      	mov	r2, r1
 800d3fe:	f04f 0500 	mov.w	r5, #0
 800d402:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800d406:	f842 3b1c 	str.w	r3, [r2], #28
 800d40a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d40e:	4680      	mov	r8, r0
 800d410:	460c      	mov	r4, r1
 800d412:	bf98      	it	ls
 800d414:	f04f 0b00 	movls.w	fp, #0
 800d418:	9201      	str	r2, [sp, #4]
 800d41a:	4616      	mov	r6, r2
 800d41c:	46aa      	mov	sl, r5
 800d41e:	46a9      	mov	r9, r5
 800d420:	9502      	str	r5, [sp, #8]
 800d422:	68a2      	ldr	r2, [r4, #8]
 800d424:	b152      	cbz	r2, 800d43c <_scanf_float+0x64>
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	2b4e      	cmp	r3, #78	@ 0x4e
 800d42c:	d864      	bhi.n	800d4f8 <_scanf_float+0x120>
 800d42e:	2b40      	cmp	r3, #64	@ 0x40
 800d430:	d83c      	bhi.n	800d4ac <_scanf_float+0xd4>
 800d432:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800d436:	b2c8      	uxtb	r0, r1
 800d438:	280e      	cmp	r0, #14
 800d43a:	d93a      	bls.n	800d4b2 <_scanf_float+0xda>
 800d43c:	f1b9 0f00 	cmp.w	r9, #0
 800d440:	d003      	beq.n	800d44a <_scanf_float+0x72>
 800d442:	6823      	ldr	r3, [r4, #0]
 800d444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d448:	6023      	str	r3, [r4, #0]
 800d44a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d44e:	f1ba 0f01 	cmp.w	sl, #1
 800d452:	f200 8117 	bhi.w	800d684 <_scanf_float+0x2ac>
 800d456:	9b01      	ldr	r3, [sp, #4]
 800d458:	429e      	cmp	r6, r3
 800d45a:	f200 8108 	bhi.w	800d66e <_scanf_float+0x296>
 800d45e:	2001      	movs	r0, #1
 800d460:	b007      	add	sp, #28
 800d462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d466:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800d46a:	2a0d      	cmp	r2, #13
 800d46c:	d8e6      	bhi.n	800d43c <_scanf_float+0x64>
 800d46e:	a101      	add	r1, pc, #4	@ (adr r1, 800d474 <_scanf_float+0x9c>)
 800d470:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d474:	0800d5bb 	.word	0x0800d5bb
 800d478:	0800d43d 	.word	0x0800d43d
 800d47c:	0800d43d 	.word	0x0800d43d
 800d480:	0800d43d 	.word	0x0800d43d
 800d484:	0800d61b 	.word	0x0800d61b
 800d488:	0800d5f3 	.word	0x0800d5f3
 800d48c:	0800d43d 	.word	0x0800d43d
 800d490:	0800d43d 	.word	0x0800d43d
 800d494:	0800d5c9 	.word	0x0800d5c9
 800d498:	0800d43d 	.word	0x0800d43d
 800d49c:	0800d43d 	.word	0x0800d43d
 800d4a0:	0800d43d 	.word	0x0800d43d
 800d4a4:	0800d43d 	.word	0x0800d43d
 800d4a8:	0800d581 	.word	0x0800d581
 800d4ac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800d4b0:	e7db      	b.n	800d46a <_scanf_float+0x92>
 800d4b2:	290e      	cmp	r1, #14
 800d4b4:	d8c2      	bhi.n	800d43c <_scanf_float+0x64>
 800d4b6:	a001      	add	r0, pc, #4	@ (adr r0, 800d4bc <_scanf_float+0xe4>)
 800d4b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d4bc:	0800d571 	.word	0x0800d571
 800d4c0:	0800d43d 	.word	0x0800d43d
 800d4c4:	0800d571 	.word	0x0800d571
 800d4c8:	0800d607 	.word	0x0800d607
 800d4cc:	0800d43d 	.word	0x0800d43d
 800d4d0:	0800d519 	.word	0x0800d519
 800d4d4:	0800d557 	.word	0x0800d557
 800d4d8:	0800d557 	.word	0x0800d557
 800d4dc:	0800d557 	.word	0x0800d557
 800d4e0:	0800d557 	.word	0x0800d557
 800d4e4:	0800d557 	.word	0x0800d557
 800d4e8:	0800d557 	.word	0x0800d557
 800d4ec:	0800d557 	.word	0x0800d557
 800d4f0:	0800d557 	.word	0x0800d557
 800d4f4:	0800d557 	.word	0x0800d557
 800d4f8:	2b6e      	cmp	r3, #110	@ 0x6e
 800d4fa:	d809      	bhi.n	800d510 <_scanf_float+0x138>
 800d4fc:	2b60      	cmp	r3, #96	@ 0x60
 800d4fe:	d8b2      	bhi.n	800d466 <_scanf_float+0x8e>
 800d500:	2b54      	cmp	r3, #84	@ 0x54
 800d502:	d07b      	beq.n	800d5fc <_scanf_float+0x224>
 800d504:	2b59      	cmp	r3, #89	@ 0x59
 800d506:	d199      	bne.n	800d43c <_scanf_float+0x64>
 800d508:	2d07      	cmp	r5, #7
 800d50a:	d197      	bne.n	800d43c <_scanf_float+0x64>
 800d50c:	2508      	movs	r5, #8
 800d50e:	e02c      	b.n	800d56a <_scanf_float+0x192>
 800d510:	2b74      	cmp	r3, #116	@ 0x74
 800d512:	d073      	beq.n	800d5fc <_scanf_float+0x224>
 800d514:	2b79      	cmp	r3, #121	@ 0x79
 800d516:	e7f6      	b.n	800d506 <_scanf_float+0x12e>
 800d518:	6821      	ldr	r1, [r4, #0]
 800d51a:	05c8      	lsls	r0, r1, #23
 800d51c:	d51b      	bpl.n	800d556 <_scanf_float+0x17e>
 800d51e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800d522:	6021      	str	r1, [r4, #0]
 800d524:	f109 0901 	add.w	r9, r9, #1
 800d528:	f1bb 0f00 	cmp.w	fp, #0
 800d52c:	d003      	beq.n	800d536 <_scanf_float+0x15e>
 800d52e:	3201      	adds	r2, #1
 800d530:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800d534:	60a2      	str	r2, [r4, #8]
 800d536:	68a3      	ldr	r3, [r4, #8]
 800d538:	3b01      	subs	r3, #1
 800d53a:	60a3      	str	r3, [r4, #8]
 800d53c:	6923      	ldr	r3, [r4, #16]
 800d53e:	3301      	adds	r3, #1
 800d540:	6123      	str	r3, [r4, #16]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	3b01      	subs	r3, #1
 800d546:	2b00      	cmp	r3, #0
 800d548:	607b      	str	r3, [r7, #4]
 800d54a:	f340 8087 	ble.w	800d65c <_scanf_float+0x284>
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	3301      	adds	r3, #1
 800d552:	603b      	str	r3, [r7, #0]
 800d554:	e765      	b.n	800d422 <_scanf_float+0x4a>
 800d556:	eb1a 0105 	adds.w	r1, sl, r5
 800d55a:	f47f af6f 	bne.w	800d43c <_scanf_float+0x64>
 800d55e:	6822      	ldr	r2, [r4, #0]
 800d560:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800d564:	6022      	str	r2, [r4, #0]
 800d566:	460d      	mov	r5, r1
 800d568:	468a      	mov	sl, r1
 800d56a:	f806 3b01 	strb.w	r3, [r6], #1
 800d56e:	e7e2      	b.n	800d536 <_scanf_float+0x15e>
 800d570:	6822      	ldr	r2, [r4, #0]
 800d572:	0610      	lsls	r0, r2, #24
 800d574:	f57f af62 	bpl.w	800d43c <_scanf_float+0x64>
 800d578:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d57c:	6022      	str	r2, [r4, #0]
 800d57e:	e7f4      	b.n	800d56a <_scanf_float+0x192>
 800d580:	f1ba 0f00 	cmp.w	sl, #0
 800d584:	d10e      	bne.n	800d5a4 <_scanf_float+0x1cc>
 800d586:	f1b9 0f00 	cmp.w	r9, #0
 800d58a:	d10e      	bne.n	800d5aa <_scanf_float+0x1d2>
 800d58c:	6822      	ldr	r2, [r4, #0]
 800d58e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d592:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d596:	d108      	bne.n	800d5aa <_scanf_float+0x1d2>
 800d598:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d59c:	6022      	str	r2, [r4, #0]
 800d59e:	f04f 0a01 	mov.w	sl, #1
 800d5a2:	e7e2      	b.n	800d56a <_scanf_float+0x192>
 800d5a4:	f1ba 0f02 	cmp.w	sl, #2
 800d5a8:	d055      	beq.n	800d656 <_scanf_float+0x27e>
 800d5aa:	2d01      	cmp	r5, #1
 800d5ac:	d002      	beq.n	800d5b4 <_scanf_float+0x1dc>
 800d5ae:	2d04      	cmp	r5, #4
 800d5b0:	f47f af44 	bne.w	800d43c <_scanf_float+0x64>
 800d5b4:	3501      	adds	r5, #1
 800d5b6:	b2ed      	uxtb	r5, r5
 800d5b8:	e7d7      	b.n	800d56a <_scanf_float+0x192>
 800d5ba:	f1ba 0f01 	cmp.w	sl, #1
 800d5be:	f47f af3d 	bne.w	800d43c <_scanf_float+0x64>
 800d5c2:	f04f 0a02 	mov.w	sl, #2
 800d5c6:	e7d0      	b.n	800d56a <_scanf_float+0x192>
 800d5c8:	b97d      	cbnz	r5, 800d5ea <_scanf_float+0x212>
 800d5ca:	f1b9 0f00 	cmp.w	r9, #0
 800d5ce:	f47f af38 	bne.w	800d442 <_scanf_float+0x6a>
 800d5d2:	6822      	ldr	r2, [r4, #0]
 800d5d4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800d5d8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800d5dc:	f040 8108 	bne.w	800d7f0 <_scanf_float+0x418>
 800d5e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d5e4:	6022      	str	r2, [r4, #0]
 800d5e6:	2501      	movs	r5, #1
 800d5e8:	e7bf      	b.n	800d56a <_scanf_float+0x192>
 800d5ea:	2d03      	cmp	r5, #3
 800d5ec:	d0e2      	beq.n	800d5b4 <_scanf_float+0x1dc>
 800d5ee:	2d05      	cmp	r5, #5
 800d5f0:	e7de      	b.n	800d5b0 <_scanf_float+0x1d8>
 800d5f2:	2d02      	cmp	r5, #2
 800d5f4:	f47f af22 	bne.w	800d43c <_scanf_float+0x64>
 800d5f8:	2503      	movs	r5, #3
 800d5fa:	e7b6      	b.n	800d56a <_scanf_float+0x192>
 800d5fc:	2d06      	cmp	r5, #6
 800d5fe:	f47f af1d 	bne.w	800d43c <_scanf_float+0x64>
 800d602:	2507      	movs	r5, #7
 800d604:	e7b1      	b.n	800d56a <_scanf_float+0x192>
 800d606:	6822      	ldr	r2, [r4, #0]
 800d608:	0591      	lsls	r1, r2, #22
 800d60a:	f57f af17 	bpl.w	800d43c <_scanf_float+0x64>
 800d60e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800d612:	6022      	str	r2, [r4, #0]
 800d614:	f8cd 9008 	str.w	r9, [sp, #8]
 800d618:	e7a7      	b.n	800d56a <_scanf_float+0x192>
 800d61a:	6822      	ldr	r2, [r4, #0]
 800d61c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800d620:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800d624:	d006      	beq.n	800d634 <_scanf_float+0x25c>
 800d626:	0550      	lsls	r0, r2, #21
 800d628:	f57f af08 	bpl.w	800d43c <_scanf_float+0x64>
 800d62c:	f1b9 0f00 	cmp.w	r9, #0
 800d630:	f000 80de 	beq.w	800d7f0 <_scanf_float+0x418>
 800d634:	0591      	lsls	r1, r2, #22
 800d636:	bf58      	it	pl
 800d638:	9902      	ldrpl	r1, [sp, #8]
 800d63a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800d63e:	bf58      	it	pl
 800d640:	eba9 0101 	subpl.w	r1, r9, r1
 800d644:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800d648:	bf58      	it	pl
 800d64a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d64e:	6022      	str	r2, [r4, #0]
 800d650:	f04f 0900 	mov.w	r9, #0
 800d654:	e789      	b.n	800d56a <_scanf_float+0x192>
 800d656:	f04f 0a03 	mov.w	sl, #3
 800d65a:	e786      	b.n	800d56a <_scanf_float+0x192>
 800d65c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d660:	4639      	mov	r1, r7
 800d662:	4640      	mov	r0, r8
 800d664:	4798      	blx	r3
 800d666:	2800      	cmp	r0, #0
 800d668:	f43f aedb 	beq.w	800d422 <_scanf_float+0x4a>
 800d66c:	e6e6      	b.n	800d43c <_scanf_float+0x64>
 800d66e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d672:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d676:	463a      	mov	r2, r7
 800d678:	4640      	mov	r0, r8
 800d67a:	4798      	blx	r3
 800d67c:	6923      	ldr	r3, [r4, #16]
 800d67e:	3b01      	subs	r3, #1
 800d680:	6123      	str	r3, [r4, #16]
 800d682:	e6e8      	b.n	800d456 <_scanf_float+0x7e>
 800d684:	1e6b      	subs	r3, r5, #1
 800d686:	2b06      	cmp	r3, #6
 800d688:	d824      	bhi.n	800d6d4 <_scanf_float+0x2fc>
 800d68a:	2d02      	cmp	r5, #2
 800d68c:	d836      	bhi.n	800d6fc <_scanf_float+0x324>
 800d68e:	9b01      	ldr	r3, [sp, #4]
 800d690:	429e      	cmp	r6, r3
 800d692:	f67f aee4 	bls.w	800d45e <_scanf_float+0x86>
 800d696:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d69a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d69e:	463a      	mov	r2, r7
 800d6a0:	4640      	mov	r0, r8
 800d6a2:	4798      	blx	r3
 800d6a4:	6923      	ldr	r3, [r4, #16]
 800d6a6:	3b01      	subs	r3, #1
 800d6a8:	6123      	str	r3, [r4, #16]
 800d6aa:	e7f0      	b.n	800d68e <_scanf_float+0x2b6>
 800d6ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d6b0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800d6b4:	463a      	mov	r2, r7
 800d6b6:	4640      	mov	r0, r8
 800d6b8:	4798      	blx	r3
 800d6ba:	6923      	ldr	r3, [r4, #16]
 800d6bc:	3b01      	subs	r3, #1
 800d6be:	6123      	str	r3, [r4, #16]
 800d6c0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d6c4:	fa5f fa8a 	uxtb.w	sl, sl
 800d6c8:	f1ba 0f02 	cmp.w	sl, #2
 800d6cc:	d1ee      	bne.n	800d6ac <_scanf_float+0x2d4>
 800d6ce:	3d03      	subs	r5, #3
 800d6d0:	b2ed      	uxtb	r5, r5
 800d6d2:	1b76      	subs	r6, r6, r5
 800d6d4:	6823      	ldr	r3, [r4, #0]
 800d6d6:	05da      	lsls	r2, r3, #23
 800d6d8:	d530      	bpl.n	800d73c <_scanf_float+0x364>
 800d6da:	055b      	lsls	r3, r3, #21
 800d6dc:	d511      	bpl.n	800d702 <_scanf_float+0x32a>
 800d6de:	9b01      	ldr	r3, [sp, #4]
 800d6e0:	429e      	cmp	r6, r3
 800d6e2:	f67f aebc 	bls.w	800d45e <_scanf_float+0x86>
 800d6e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d6ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d6ee:	463a      	mov	r2, r7
 800d6f0:	4640      	mov	r0, r8
 800d6f2:	4798      	blx	r3
 800d6f4:	6923      	ldr	r3, [r4, #16]
 800d6f6:	3b01      	subs	r3, #1
 800d6f8:	6123      	str	r3, [r4, #16]
 800d6fa:	e7f0      	b.n	800d6de <_scanf_float+0x306>
 800d6fc:	46aa      	mov	sl, r5
 800d6fe:	46b3      	mov	fp, r6
 800d700:	e7de      	b.n	800d6c0 <_scanf_float+0x2e8>
 800d702:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d706:	6923      	ldr	r3, [r4, #16]
 800d708:	2965      	cmp	r1, #101	@ 0x65
 800d70a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d70e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800d712:	6123      	str	r3, [r4, #16]
 800d714:	d00c      	beq.n	800d730 <_scanf_float+0x358>
 800d716:	2945      	cmp	r1, #69	@ 0x45
 800d718:	d00a      	beq.n	800d730 <_scanf_float+0x358>
 800d71a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d71e:	463a      	mov	r2, r7
 800d720:	4640      	mov	r0, r8
 800d722:	4798      	blx	r3
 800d724:	6923      	ldr	r3, [r4, #16]
 800d726:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d72a:	3b01      	subs	r3, #1
 800d72c:	1eb5      	subs	r5, r6, #2
 800d72e:	6123      	str	r3, [r4, #16]
 800d730:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d734:	463a      	mov	r2, r7
 800d736:	4640      	mov	r0, r8
 800d738:	4798      	blx	r3
 800d73a:	462e      	mov	r6, r5
 800d73c:	6822      	ldr	r2, [r4, #0]
 800d73e:	f012 0210 	ands.w	r2, r2, #16
 800d742:	d001      	beq.n	800d748 <_scanf_float+0x370>
 800d744:	2000      	movs	r0, #0
 800d746:	e68b      	b.n	800d460 <_scanf_float+0x88>
 800d748:	7032      	strb	r2, [r6, #0]
 800d74a:	6823      	ldr	r3, [r4, #0]
 800d74c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d750:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d754:	d11c      	bne.n	800d790 <_scanf_float+0x3b8>
 800d756:	9b02      	ldr	r3, [sp, #8]
 800d758:	454b      	cmp	r3, r9
 800d75a:	eba3 0209 	sub.w	r2, r3, r9
 800d75e:	d123      	bne.n	800d7a8 <_scanf_float+0x3d0>
 800d760:	9901      	ldr	r1, [sp, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	4640      	mov	r0, r8
 800d766:	f002 fcfb 	bl	8010160 <_strtod_r>
 800d76a:	9b03      	ldr	r3, [sp, #12]
 800d76c:	6821      	ldr	r1, [r4, #0]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f011 0f02 	tst.w	r1, #2
 800d774:	ec57 6b10 	vmov	r6, r7, d0
 800d778:	f103 0204 	add.w	r2, r3, #4
 800d77c:	d01f      	beq.n	800d7be <_scanf_float+0x3e6>
 800d77e:	9903      	ldr	r1, [sp, #12]
 800d780:	600a      	str	r2, [r1, #0]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	e9c3 6700 	strd	r6, r7, [r3]
 800d788:	68e3      	ldr	r3, [r4, #12]
 800d78a:	3301      	adds	r3, #1
 800d78c:	60e3      	str	r3, [r4, #12]
 800d78e:	e7d9      	b.n	800d744 <_scanf_float+0x36c>
 800d790:	9b04      	ldr	r3, [sp, #16]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d0e4      	beq.n	800d760 <_scanf_float+0x388>
 800d796:	9905      	ldr	r1, [sp, #20]
 800d798:	230a      	movs	r3, #10
 800d79a:	3101      	adds	r1, #1
 800d79c:	4640      	mov	r0, r8
 800d79e:	f002 fd5f 	bl	8010260 <_strtol_r>
 800d7a2:	9b04      	ldr	r3, [sp, #16]
 800d7a4:	9e05      	ldr	r6, [sp, #20]
 800d7a6:	1ac2      	subs	r2, r0, r3
 800d7a8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d7ac:	429e      	cmp	r6, r3
 800d7ae:	bf28      	it	cs
 800d7b0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d7b4:	4910      	ldr	r1, [pc, #64]	@ (800d7f8 <_scanf_float+0x420>)
 800d7b6:	4630      	mov	r0, r6
 800d7b8:	f000 f942 	bl	800da40 <siprintf>
 800d7bc:	e7d0      	b.n	800d760 <_scanf_float+0x388>
 800d7be:	f011 0f04 	tst.w	r1, #4
 800d7c2:	9903      	ldr	r1, [sp, #12]
 800d7c4:	600a      	str	r2, [r1, #0]
 800d7c6:	d1dc      	bne.n	800d782 <_scanf_float+0x3aa>
 800d7c8:	681d      	ldr	r5, [r3, #0]
 800d7ca:	4632      	mov	r2, r6
 800d7cc:	463b      	mov	r3, r7
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	4639      	mov	r1, r7
 800d7d2:	f7f3 f9b3 	bl	8000b3c <__aeabi_dcmpun>
 800d7d6:	b128      	cbz	r0, 800d7e4 <_scanf_float+0x40c>
 800d7d8:	4808      	ldr	r0, [pc, #32]	@ (800d7fc <_scanf_float+0x424>)
 800d7da:	f000 fb49 	bl	800de70 <nanf>
 800d7de:	ed85 0a00 	vstr	s0, [r5]
 800d7e2:	e7d1      	b.n	800d788 <_scanf_float+0x3b0>
 800d7e4:	4630      	mov	r0, r6
 800d7e6:	4639      	mov	r1, r7
 800d7e8:	f7f3 fa06 	bl	8000bf8 <__aeabi_d2f>
 800d7ec:	6028      	str	r0, [r5, #0]
 800d7ee:	e7cb      	b.n	800d788 <_scanf_float+0x3b0>
 800d7f0:	f04f 0900 	mov.w	r9, #0
 800d7f4:	e629      	b.n	800d44a <_scanf_float+0x72>
 800d7f6:	bf00      	nop
 800d7f8:	08011415 	.word	0x08011415
 800d7fc:	08011455 	.word	0x08011455

0800d800 <std>:
 800d800:	2300      	movs	r3, #0
 800d802:	b510      	push	{r4, lr}
 800d804:	4604      	mov	r4, r0
 800d806:	e9c0 3300 	strd	r3, r3, [r0]
 800d80a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d80e:	6083      	str	r3, [r0, #8]
 800d810:	8181      	strh	r1, [r0, #12]
 800d812:	6643      	str	r3, [r0, #100]	@ 0x64
 800d814:	81c2      	strh	r2, [r0, #14]
 800d816:	6183      	str	r3, [r0, #24]
 800d818:	4619      	mov	r1, r3
 800d81a:	2208      	movs	r2, #8
 800d81c:	305c      	adds	r0, #92	@ 0x5c
 800d81e:	f000 fa21 	bl	800dc64 <memset>
 800d822:	4b0d      	ldr	r3, [pc, #52]	@ (800d858 <std+0x58>)
 800d824:	6263      	str	r3, [r4, #36]	@ 0x24
 800d826:	4b0d      	ldr	r3, [pc, #52]	@ (800d85c <std+0x5c>)
 800d828:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d82a:	4b0d      	ldr	r3, [pc, #52]	@ (800d860 <std+0x60>)
 800d82c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d82e:	4b0d      	ldr	r3, [pc, #52]	@ (800d864 <std+0x64>)
 800d830:	6323      	str	r3, [r4, #48]	@ 0x30
 800d832:	4b0d      	ldr	r3, [pc, #52]	@ (800d868 <std+0x68>)
 800d834:	6224      	str	r4, [r4, #32]
 800d836:	429c      	cmp	r4, r3
 800d838:	d006      	beq.n	800d848 <std+0x48>
 800d83a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d83e:	4294      	cmp	r4, r2
 800d840:	d002      	beq.n	800d848 <std+0x48>
 800d842:	33d0      	adds	r3, #208	@ 0xd0
 800d844:	429c      	cmp	r4, r3
 800d846:	d105      	bne.n	800d854 <std+0x54>
 800d848:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d84c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d850:	f000 bafc 	b.w	800de4c <__retarget_lock_init_recursive>
 800d854:	bd10      	pop	{r4, pc}
 800d856:	bf00      	nop
 800d858:	0800da81 	.word	0x0800da81
 800d85c:	0800daa3 	.word	0x0800daa3
 800d860:	0800dadb 	.word	0x0800dadb
 800d864:	0800daff 	.word	0x0800daff
 800d868:	2000542c 	.word	0x2000542c

0800d86c <stdio_exit_handler>:
 800d86c:	4a02      	ldr	r2, [pc, #8]	@ (800d878 <stdio_exit_handler+0xc>)
 800d86e:	4903      	ldr	r1, [pc, #12]	@ (800d87c <stdio_exit_handler+0x10>)
 800d870:	4803      	ldr	r0, [pc, #12]	@ (800d880 <stdio_exit_handler+0x14>)
 800d872:	f000 b869 	b.w	800d948 <_fwalk_sglue>
 800d876:	bf00      	nop
 800d878:	20000024 	.word	0x20000024
 800d87c:	080108a1 	.word	0x080108a1
 800d880:	20000034 	.word	0x20000034

0800d884 <cleanup_stdio>:
 800d884:	6841      	ldr	r1, [r0, #4]
 800d886:	4b0c      	ldr	r3, [pc, #48]	@ (800d8b8 <cleanup_stdio+0x34>)
 800d888:	4299      	cmp	r1, r3
 800d88a:	b510      	push	{r4, lr}
 800d88c:	4604      	mov	r4, r0
 800d88e:	d001      	beq.n	800d894 <cleanup_stdio+0x10>
 800d890:	f003 f806 	bl	80108a0 <_fflush_r>
 800d894:	68a1      	ldr	r1, [r4, #8]
 800d896:	4b09      	ldr	r3, [pc, #36]	@ (800d8bc <cleanup_stdio+0x38>)
 800d898:	4299      	cmp	r1, r3
 800d89a:	d002      	beq.n	800d8a2 <cleanup_stdio+0x1e>
 800d89c:	4620      	mov	r0, r4
 800d89e:	f002 ffff 	bl	80108a0 <_fflush_r>
 800d8a2:	68e1      	ldr	r1, [r4, #12]
 800d8a4:	4b06      	ldr	r3, [pc, #24]	@ (800d8c0 <cleanup_stdio+0x3c>)
 800d8a6:	4299      	cmp	r1, r3
 800d8a8:	d004      	beq.n	800d8b4 <cleanup_stdio+0x30>
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8b0:	f002 bff6 	b.w	80108a0 <_fflush_r>
 800d8b4:	bd10      	pop	{r4, pc}
 800d8b6:	bf00      	nop
 800d8b8:	2000542c 	.word	0x2000542c
 800d8bc:	20005494 	.word	0x20005494
 800d8c0:	200054fc 	.word	0x200054fc

0800d8c4 <global_stdio_init.part.0>:
 800d8c4:	b510      	push	{r4, lr}
 800d8c6:	4b0b      	ldr	r3, [pc, #44]	@ (800d8f4 <global_stdio_init.part.0+0x30>)
 800d8c8:	4c0b      	ldr	r4, [pc, #44]	@ (800d8f8 <global_stdio_init.part.0+0x34>)
 800d8ca:	4a0c      	ldr	r2, [pc, #48]	@ (800d8fc <global_stdio_init.part.0+0x38>)
 800d8cc:	601a      	str	r2, [r3, #0]
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	2104      	movs	r1, #4
 800d8d4:	f7ff ff94 	bl	800d800 <std>
 800d8d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d8dc:	2201      	movs	r2, #1
 800d8de:	2109      	movs	r1, #9
 800d8e0:	f7ff ff8e 	bl	800d800 <std>
 800d8e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d8e8:	2202      	movs	r2, #2
 800d8ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8ee:	2112      	movs	r1, #18
 800d8f0:	f7ff bf86 	b.w	800d800 <std>
 800d8f4:	20005564 	.word	0x20005564
 800d8f8:	2000542c 	.word	0x2000542c
 800d8fc:	0800d86d 	.word	0x0800d86d

0800d900 <__sfp_lock_acquire>:
 800d900:	4801      	ldr	r0, [pc, #4]	@ (800d908 <__sfp_lock_acquire+0x8>)
 800d902:	f000 baa4 	b.w	800de4e <__retarget_lock_acquire_recursive>
 800d906:	bf00      	nop
 800d908:	2000556d 	.word	0x2000556d

0800d90c <__sfp_lock_release>:
 800d90c:	4801      	ldr	r0, [pc, #4]	@ (800d914 <__sfp_lock_release+0x8>)
 800d90e:	f000 ba9f 	b.w	800de50 <__retarget_lock_release_recursive>
 800d912:	bf00      	nop
 800d914:	2000556d 	.word	0x2000556d

0800d918 <__sinit>:
 800d918:	b510      	push	{r4, lr}
 800d91a:	4604      	mov	r4, r0
 800d91c:	f7ff fff0 	bl	800d900 <__sfp_lock_acquire>
 800d920:	6a23      	ldr	r3, [r4, #32]
 800d922:	b11b      	cbz	r3, 800d92c <__sinit+0x14>
 800d924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d928:	f7ff bff0 	b.w	800d90c <__sfp_lock_release>
 800d92c:	4b04      	ldr	r3, [pc, #16]	@ (800d940 <__sinit+0x28>)
 800d92e:	6223      	str	r3, [r4, #32]
 800d930:	4b04      	ldr	r3, [pc, #16]	@ (800d944 <__sinit+0x2c>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d1f5      	bne.n	800d924 <__sinit+0xc>
 800d938:	f7ff ffc4 	bl	800d8c4 <global_stdio_init.part.0>
 800d93c:	e7f2      	b.n	800d924 <__sinit+0xc>
 800d93e:	bf00      	nop
 800d940:	0800d885 	.word	0x0800d885
 800d944:	20005564 	.word	0x20005564

0800d948 <_fwalk_sglue>:
 800d948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d94c:	4607      	mov	r7, r0
 800d94e:	4688      	mov	r8, r1
 800d950:	4614      	mov	r4, r2
 800d952:	2600      	movs	r6, #0
 800d954:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d958:	f1b9 0901 	subs.w	r9, r9, #1
 800d95c:	d505      	bpl.n	800d96a <_fwalk_sglue+0x22>
 800d95e:	6824      	ldr	r4, [r4, #0]
 800d960:	2c00      	cmp	r4, #0
 800d962:	d1f7      	bne.n	800d954 <_fwalk_sglue+0xc>
 800d964:	4630      	mov	r0, r6
 800d966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d96a:	89ab      	ldrh	r3, [r5, #12]
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d907      	bls.n	800d980 <_fwalk_sglue+0x38>
 800d970:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d974:	3301      	adds	r3, #1
 800d976:	d003      	beq.n	800d980 <_fwalk_sglue+0x38>
 800d978:	4629      	mov	r1, r5
 800d97a:	4638      	mov	r0, r7
 800d97c:	47c0      	blx	r8
 800d97e:	4306      	orrs	r6, r0
 800d980:	3568      	adds	r5, #104	@ 0x68
 800d982:	e7e9      	b.n	800d958 <_fwalk_sglue+0x10>

0800d984 <_puts_r>:
 800d984:	6a03      	ldr	r3, [r0, #32]
 800d986:	b570      	push	{r4, r5, r6, lr}
 800d988:	6884      	ldr	r4, [r0, #8]
 800d98a:	4605      	mov	r5, r0
 800d98c:	460e      	mov	r6, r1
 800d98e:	b90b      	cbnz	r3, 800d994 <_puts_r+0x10>
 800d990:	f7ff ffc2 	bl	800d918 <__sinit>
 800d994:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d996:	07db      	lsls	r3, r3, #31
 800d998:	d405      	bmi.n	800d9a6 <_puts_r+0x22>
 800d99a:	89a3      	ldrh	r3, [r4, #12]
 800d99c:	0598      	lsls	r0, r3, #22
 800d99e:	d402      	bmi.n	800d9a6 <_puts_r+0x22>
 800d9a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9a2:	f000 fa54 	bl	800de4e <__retarget_lock_acquire_recursive>
 800d9a6:	89a3      	ldrh	r3, [r4, #12]
 800d9a8:	0719      	lsls	r1, r3, #28
 800d9aa:	d502      	bpl.n	800d9b2 <_puts_r+0x2e>
 800d9ac:	6923      	ldr	r3, [r4, #16]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d135      	bne.n	800da1e <_puts_r+0x9a>
 800d9b2:	4621      	mov	r1, r4
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	f000 f8e5 	bl	800db84 <__swsetup_r>
 800d9ba:	b380      	cbz	r0, 800da1e <_puts_r+0x9a>
 800d9bc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d9c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9c2:	07da      	lsls	r2, r3, #31
 800d9c4:	d405      	bmi.n	800d9d2 <_puts_r+0x4e>
 800d9c6:	89a3      	ldrh	r3, [r4, #12]
 800d9c8:	059b      	lsls	r3, r3, #22
 800d9ca:	d402      	bmi.n	800d9d2 <_puts_r+0x4e>
 800d9cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9ce:	f000 fa3f 	bl	800de50 <__retarget_lock_release_recursive>
 800d9d2:	4628      	mov	r0, r5
 800d9d4:	bd70      	pop	{r4, r5, r6, pc}
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	da04      	bge.n	800d9e4 <_puts_r+0x60>
 800d9da:	69a2      	ldr	r2, [r4, #24]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	dc17      	bgt.n	800da10 <_puts_r+0x8c>
 800d9e0:	290a      	cmp	r1, #10
 800d9e2:	d015      	beq.n	800da10 <_puts_r+0x8c>
 800d9e4:	6823      	ldr	r3, [r4, #0]
 800d9e6:	1c5a      	adds	r2, r3, #1
 800d9e8:	6022      	str	r2, [r4, #0]
 800d9ea:	7019      	strb	r1, [r3, #0]
 800d9ec:	68a3      	ldr	r3, [r4, #8]
 800d9ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d9f2:	3b01      	subs	r3, #1
 800d9f4:	60a3      	str	r3, [r4, #8]
 800d9f6:	2900      	cmp	r1, #0
 800d9f8:	d1ed      	bne.n	800d9d6 <_puts_r+0x52>
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	da11      	bge.n	800da22 <_puts_r+0x9e>
 800d9fe:	4622      	mov	r2, r4
 800da00:	210a      	movs	r1, #10
 800da02:	4628      	mov	r0, r5
 800da04:	f000 f87f 	bl	800db06 <__swbuf_r>
 800da08:	3001      	adds	r0, #1
 800da0a:	d0d7      	beq.n	800d9bc <_puts_r+0x38>
 800da0c:	250a      	movs	r5, #10
 800da0e:	e7d7      	b.n	800d9c0 <_puts_r+0x3c>
 800da10:	4622      	mov	r2, r4
 800da12:	4628      	mov	r0, r5
 800da14:	f000 f877 	bl	800db06 <__swbuf_r>
 800da18:	3001      	adds	r0, #1
 800da1a:	d1e7      	bne.n	800d9ec <_puts_r+0x68>
 800da1c:	e7ce      	b.n	800d9bc <_puts_r+0x38>
 800da1e:	3e01      	subs	r6, #1
 800da20:	e7e4      	b.n	800d9ec <_puts_r+0x68>
 800da22:	6823      	ldr	r3, [r4, #0]
 800da24:	1c5a      	adds	r2, r3, #1
 800da26:	6022      	str	r2, [r4, #0]
 800da28:	220a      	movs	r2, #10
 800da2a:	701a      	strb	r2, [r3, #0]
 800da2c:	e7ee      	b.n	800da0c <_puts_r+0x88>
	...

0800da30 <puts>:
 800da30:	4b02      	ldr	r3, [pc, #8]	@ (800da3c <puts+0xc>)
 800da32:	4601      	mov	r1, r0
 800da34:	6818      	ldr	r0, [r3, #0]
 800da36:	f7ff bfa5 	b.w	800d984 <_puts_r>
 800da3a:	bf00      	nop
 800da3c:	20000030 	.word	0x20000030

0800da40 <siprintf>:
 800da40:	b40e      	push	{r1, r2, r3}
 800da42:	b500      	push	{lr}
 800da44:	b09c      	sub	sp, #112	@ 0x70
 800da46:	ab1d      	add	r3, sp, #116	@ 0x74
 800da48:	9002      	str	r0, [sp, #8]
 800da4a:	9006      	str	r0, [sp, #24]
 800da4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800da50:	4809      	ldr	r0, [pc, #36]	@ (800da78 <siprintf+0x38>)
 800da52:	9107      	str	r1, [sp, #28]
 800da54:	9104      	str	r1, [sp, #16]
 800da56:	4909      	ldr	r1, [pc, #36]	@ (800da7c <siprintf+0x3c>)
 800da58:	f853 2b04 	ldr.w	r2, [r3], #4
 800da5c:	9105      	str	r1, [sp, #20]
 800da5e:	6800      	ldr	r0, [r0, #0]
 800da60:	9301      	str	r3, [sp, #4]
 800da62:	a902      	add	r1, sp, #8
 800da64:	f002 fc5a 	bl	801031c <_svfiprintf_r>
 800da68:	9b02      	ldr	r3, [sp, #8]
 800da6a:	2200      	movs	r2, #0
 800da6c:	701a      	strb	r2, [r3, #0]
 800da6e:	b01c      	add	sp, #112	@ 0x70
 800da70:	f85d eb04 	ldr.w	lr, [sp], #4
 800da74:	b003      	add	sp, #12
 800da76:	4770      	bx	lr
 800da78:	20000030 	.word	0x20000030
 800da7c:	ffff0208 	.word	0xffff0208

0800da80 <__sread>:
 800da80:	b510      	push	{r4, lr}
 800da82:	460c      	mov	r4, r1
 800da84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da88:	f000 f982 	bl	800dd90 <_read_r>
 800da8c:	2800      	cmp	r0, #0
 800da8e:	bfab      	itete	ge
 800da90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800da92:	89a3      	ldrhlt	r3, [r4, #12]
 800da94:	181b      	addge	r3, r3, r0
 800da96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800da9a:	bfac      	ite	ge
 800da9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800da9e:	81a3      	strhlt	r3, [r4, #12]
 800daa0:	bd10      	pop	{r4, pc}

0800daa2 <__swrite>:
 800daa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa6:	461f      	mov	r7, r3
 800daa8:	898b      	ldrh	r3, [r1, #12]
 800daaa:	05db      	lsls	r3, r3, #23
 800daac:	4605      	mov	r5, r0
 800daae:	460c      	mov	r4, r1
 800dab0:	4616      	mov	r6, r2
 800dab2:	d505      	bpl.n	800dac0 <__swrite+0x1e>
 800dab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dab8:	2302      	movs	r3, #2
 800daba:	2200      	movs	r2, #0
 800dabc:	f000 f956 	bl	800dd6c <_lseek_r>
 800dac0:	89a3      	ldrh	r3, [r4, #12]
 800dac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dac6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800daca:	81a3      	strh	r3, [r4, #12]
 800dacc:	4632      	mov	r2, r6
 800dace:	463b      	mov	r3, r7
 800dad0:	4628      	mov	r0, r5
 800dad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dad6:	f000 b97d 	b.w	800ddd4 <_write_r>

0800dada <__sseek>:
 800dada:	b510      	push	{r4, lr}
 800dadc:	460c      	mov	r4, r1
 800dade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dae2:	f000 f943 	bl	800dd6c <_lseek_r>
 800dae6:	1c43      	adds	r3, r0, #1
 800dae8:	89a3      	ldrh	r3, [r4, #12]
 800daea:	bf15      	itete	ne
 800daec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800daee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800daf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800daf6:	81a3      	strheq	r3, [r4, #12]
 800daf8:	bf18      	it	ne
 800dafa:	81a3      	strhne	r3, [r4, #12]
 800dafc:	bd10      	pop	{r4, pc}

0800dafe <__sclose>:
 800dafe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db02:	f000 b8cd 	b.w	800dca0 <_close_r>

0800db06 <__swbuf_r>:
 800db06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db08:	460e      	mov	r6, r1
 800db0a:	4614      	mov	r4, r2
 800db0c:	4605      	mov	r5, r0
 800db0e:	b118      	cbz	r0, 800db18 <__swbuf_r+0x12>
 800db10:	6a03      	ldr	r3, [r0, #32]
 800db12:	b90b      	cbnz	r3, 800db18 <__swbuf_r+0x12>
 800db14:	f7ff ff00 	bl	800d918 <__sinit>
 800db18:	69a3      	ldr	r3, [r4, #24]
 800db1a:	60a3      	str	r3, [r4, #8]
 800db1c:	89a3      	ldrh	r3, [r4, #12]
 800db1e:	071a      	lsls	r2, r3, #28
 800db20:	d501      	bpl.n	800db26 <__swbuf_r+0x20>
 800db22:	6923      	ldr	r3, [r4, #16]
 800db24:	b943      	cbnz	r3, 800db38 <__swbuf_r+0x32>
 800db26:	4621      	mov	r1, r4
 800db28:	4628      	mov	r0, r5
 800db2a:	f000 f82b 	bl	800db84 <__swsetup_r>
 800db2e:	b118      	cbz	r0, 800db38 <__swbuf_r+0x32>
 800db30:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800db34:	4638      	mov	r0, r7
 800db36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db38:	6823      	ldr	r3, [r4, #0]
 800db3a:	6922      	ldr	r2, [r4, #16]
 800db3c:	1a98      	subs	r0, r3, r2
 800db3e:	6963      	ldr	r3, [r4, #20]
 800db40:	b2f6      	uxtb	r6, r6
 800db42:	4283      	cmp	r3, r0
 800db44:	4637      	mov	r7, r6
 800db46:	dc05      	bgt.n	800db54 <__swbuf_r+0x4e>
 800db48:	4621      	mov	r1, r4
 800db4a:	4628      	mov	r0, r5
 800db4c:	f002 fea8 	bl	80108a0 <_fflush_r>
 800db50:	2800      	cmp	r0, #0
 800db52:	d1ed      	bne.n	800db30 <__swbuf_r+0x2a>
 800db54:	68a3      	ldr	r3, [r4, #8]
 800db56:	3b01      	subs	r3, #1
 800db58:	60a3      	str	r3, [r4, #8]
 800db5a:	6823      	ldr	r3, [r4, #0]
 800db5c:	1c5a      	adds	r2, r3, #1
 800db5e:	6022      	str	r2, [r4, #0]
 800db60:	701e      	strb	r6, [r3, #0]
 800db62:	6962      	ldr	r2, [r4, #20]
 800db64:	1c43      	adds	r3, r0, #1
 800db66:	429a      	cmp	r2, r3
 800db68:	d004      	beq.n	800db74 <__swbuf_r+0x6e>
 800db6a:	89a3      	ldrh	r3, [r4, #12]
 800db6c:	07db      	lsls	r3, r3, #31
 800db6e:	d5e1      	bpl.n	800db34 <__swbuf_r+0x2e>
 800db70:	2e0a      	cmp	r6, #10
 800db72:	d1df      	bne.n	800db34 <__swbuf_r+0x2e>
 800db74:	4621      	mov	r1, r4
 800db76:	4628      	mov	r0, r5
 800db78:	f002 fe92 	bl	80108a0 <_fflush_r>
 800db7c:	2800      	cmp	r0, #0
 800db7e:	d0d9      	beq.n	800db34 <__swbuf_r+0x2e>
 800db80:	e7d6      	b.n	800db30 <__swbuf_r+0x2a>
	...

0800db84 <__swsetup_r>:
 800db84:	b538      	push	{r3, r4, r5, lr}
 800db86:	4b29      	ldr	r3, [pc, #164]	@ (800dc2c <__swsetup_r+0xa8>)
 800db88:	4605      	mov	r5, r0
 800db8a:	6818      	ldr	r0, [r3, #0]
 800db8c:	460c      	mov	r4, r1
 800db8e:	b118      	cbz	r0, 800db98 <__swsetup_r+0x14>
 800db90:	6a03      	ldr	r3, [r0, #32]
 800db92:	b90b      	cbnz	r3, 800db98 <__swsetup_r+0x14>
 800db94:	f7ff fec0 	bl	800d918 <__sinit>
 800db98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db9c:	0719      	lsls	r1, r3, #28
 800db9e:	d422      	bmi.n	800dbe6 <__swsetup_r+0x62>
 800dba0:	06da      	lsls	r2, r3, #27
 800dba2:	d407      	bmi.n	800dbb4 <__swsetup_r+0x30>
 800dba4:	2209      	movs	r2, #9
 800dba6:	602a      	str	r2, [r5, #0]
 800dba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dbac:	81a3      	strh	r3, [r4, #12]
 800dbae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbb2:	e033      	b.n	800dc1c <__swsetup_r+0x98>
 800dbb4:	0758      	lsls	r0, r3, #29
 800dbb6:	d512      	bpl.n	800dbde <__swsetup_r+0x5a>
 800dbb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dbba:	b141      	cbz	r1, 800dbce <__swsetup_r+0x4a>
 800dbbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dbc0:	4299      	cmp	r1, r3
 800dbc2:	d002      	beq.n	800dbca <__swsetup_r+0x46>
 800dbc4:	4628      	mov	r0, r5
 800dbc6:	f000 ffc3 	bl	800eb50 <_free_r>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	6363      	str	r3, [r4, #52]	@ 0x34
 800dbce:	89a3      	ldrh	r3, [r4, #12]
 800dbd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dbd4:	81a3      	strh	r3, [r4, #12]
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	6063      	str	r3, [r4, #4]
 800dbda:	6923      	ldr	r3, [r4, #16]
 800dbdc:	6023      	str	r3, [r4, #0]
 800dbde:	89a3      	ldrh	r3, [r4, #12]
 800dbe0:	f043 0308 	orr.w	r3, r3, #8
 800dbe4:	81a3      	strh	r3, [r4, #12]
 800dbe6:	6923      	ldr	r3, [r4, #16]
 800dbe8:	b94b      	cbnz	r3, 800dbfe <__swsetup_r+0x7a>
 800dbea:	89a3      	ldrh	r3, [r4, #12]
 800dbec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dbf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dbf4:	d003      	beq.n	800dbfe <__swsetup_r+0x7a>
 800dbf6:	4621      	mov	r1, r4
 800dbf8:	4628      	mov	r0, r5
 800dbfa:	f002 feb1 	bl	8010960 <__smakebuf_r>
 800dbfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc02:	f013 0201 	ands.w	r2, r3, #1
 800dc06:	d00a      	beq.n	800dc1e <__swsetup_r+0x9a>
 800dc08:	2200      	movs	r2, #0
 800dc0a:	60a2      	str	r2, [r4, #8]
 800dc0c:	6962      	ldr	r2, [r4, #20]
 800dc0e:	4252      	negs	r2, r2
 800dc10:	61a2      	str	r2, [r4, #24]
 800dc12:	6922      	ldr	r2, [r4, #16]
 800dc14:	b942      	cbnz	r2, 800dc28 <__swsetup_r+0xa4>
 800dc16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dc1a:	d1c5      	bne.n	800dba8 <__swsetup_r+0x24>
 800dc1c:	bd38      	pop	{r3, r4, r5, pc}
 800dc1e:	0799      	lsls	r1, r3, #30
 800dc20:	bf58      	it	pl
 800dc22:	6962      	ldrpl	r2, [r4, #20]
 800dc24:	60a2      	str	r2, [r4, #8]
 800dc26:	e7f4      	b.n	800dc12 <__swsetup_r+0x8e>
 800dc28:	2000      	movs	r0, #0
 800dc2a:	e7f7      	b.n	800dc1c <__swsetup_r+0x98>
 800dc2c:	20000030 	.word	0x20000030

0800dc30 <memmove>:
 800dc30:	4288      	cmp	r0, r1
 800dc32:	b510      	push	{r4, lr}
 800dc34:	eb01 0402 	add.w	r4, r1, r2
 800dc38:	d902      	bls.n	800dc40 <memmove+0x10>
 800dc3a:	4284      	cmp	r4, r0
 800dc3c:	4623      	mov	r3, r4
 800dc3e:	d807      	bhi.n	800dc50 <memmove+0x20>
 800dc40:	1e43      	subs	r3, r0, #1
 800dc42:	42a1      	cmp	r1, r4
 800dc44:	d008      	beq.n	800dc58 <memmove+0x28>
 800dc46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc4e:	e7f8      	b.n	800dc42 <memmove+0x12>
 800dc50:	4402      	add	r2, r0
 800dc52:	4601      	mov	r1, r0
 800dc54:	428a      	cmp	r2, r1
 800dc56:	d100      	bne.n	800dc5a <memmove+0x2a>
 800dc58:	bd10      	pop	{r4, pc}
 800dc5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc62:	e7f7      	b.n	800dc54 <memmove+0x24>

0800dc64 <memset>:
 800dc64:	4402      	add	r2, r0
 800dc66:	4603      	mov	r3, r0
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d100      	bne.n	800dc6e <memset+0xa>
 800dc6c:	4770      	bx	lr
 800dc6e:	f803 1b01 	strb.w	r1, [r3], #1
 800dc72:	e7f9      	b.n	800dc68 <memset+0x4>

0800dc74 <strncmp>:
 800dc74:	b510      	push	{r4, lr}
 800dc76:	b16a      	cbz	r2, 800dc94 <strncmp+0x20>
 800dc78:	3901      	subs	r1, #1
 800dc7a:	1884      	adds	r4, r0, r2
 800dc7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc80:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d103      	bne.n	800dc90 <strncmp+0x1c>
 800dc88:	42a0      	cmp	r0, r4
 800dc8a:	d001      	beq.n	800dc90 <strncmp+0x1c>
 800dc8c:	2a00      	cmp	r2, #0
 800dc8e:	d1f5      	bne.n	800dc7c <strncmp+0x8>
 800dc90:	1ad0      	subs	r0, r2, r3
 800dc92:	bd10      	pop	{r4, pc}
 800dc94:	4610      	mov	r0, r2
 800dc96:	e7fc      	b.n	800dc92 <strncmp+0x1e>

0800dc98 <_localeconv_r>:
 800dc98:	4800      	ldr	r0, [pc, #0]	@ (800dc9c <_localeconv_r+0x4>)
 800dc9a:	4770      	bx	lr
 800dc9c:	20000170 	.word	0x20000170

0800dca0 <_close_r>:
 800dca0:	b538      	push	{r3, r4, r5, lr}
 800dca2:	4d06      	ldr	r5, [pc, #24]	@ (800dcbc <_close_r+0x1c>)
 800dca4:	2300      	movs	r3, #0
 800dca6:	4604      	mov	r4, r0
 800dca8:	4608      	mov	r0, r1
 800dcaa:	602b      	str	r3, [r5, #0]
 800dcac:	f7f5 fc0a 	bl	80034c4 <_close>
 800dcb0:	1c43      	adds	r3, r0, #1
 800dcb2:	d102      	bne.n	800dcba <_close_r+0x1a>
 800dcb4:	682b      	ldr	r3, [r5, #0]
 800dcb6:	b103      	cbz	r3, 800dcba <_close_r+0x1a>
 800dcb8:	6023      	str	r3, [r4, #0]
 800dcba:	bd38      	pop	{r3, r4, r5, pc}
 800dcbc:	20005568 	.word	0x20005568

0800dcc0 <_reclaim_reent>:
 800dcc0:	4b29      	ldr	r3, [pc, #164]	@ (800dd68 <_reclaim_reent+0xa8>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	4283      	cmp	r3, r0
 800dcc6:	b570      	push	{r4, r5, r6, lr}
 800dcc8:	4604      	mov	r4, r0
 800dcca:	d04b      	beq.n	800dd64 <_reclaim_reent+0xa4>
 800dccc:	69c3      	ldr	r3, [r0, #28]
 800dcce:	b1ab      	cbz	r3, 800dcfc <_reclaim_reent+0x3c>
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	b16b      	cbz	r3, 800dcf0 <_reclaim_reent+0x30>
 800dcd4:	2500      	movs	r5, #0
 800dcd6:	69e3      	ldr	r3, [r4, #28]
 800dcd8:	68db      	ldr	r3, [r3, #12]
 800dcda:	5959      	ldr	r1, [r3, r5]
 800dcdc:	2900      	cmp	r1, #0
 800dcde:	d13b      	bne.n	800dd58 <_reclaim_reent+0x98>
 800dce0:	3504      	adds	r5, #4
 800dce2:	2d80      	cmp	r5, #128	@ 0x80
 800dce4:	d1f7      	bne.n	800dcd6 <_reclaim_reent+0x16>
 800dce6:	69e3      	ldr	r3, [r4, #28]
 800dce8:	4620      	mov	r0, r4
 800dcea:	68d9      	ldr	r1, [r3, #12]
 800dcec:	f000 ff30 	bl	800eb50 <_free_r>
 800dcf0:	69e3      	ldr	r3, [r4, #28]
 800dcf2:	6819      	ldr	r1, [r3, #0]
 800dcf4:	b111      	cbz	r1, 800dcfc <_reclaim_reent+0x3c>
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	f000 ff2a 	bl	800eb50 <_free_r>
 800dcfc:	6961      	ldr	r1, [r4, #20]
 800dcfe:	b111      	cbz	r1, 800dd06 <_reclaim_reent+0x46>
 800dd00:	4620      	mov	r0, r4
 800dd02:	f000 ff25 	bl	800eb50 <_free_r>
 800dd06:	69e1      	ldr	r1, [r4, #28]
 800dd08:	b111      	cbz	r1, 800dd10 <_reclaim_reent+0x50>
 800dd0a:	4620      	mov	r0, r4
 800dd0c:	f000 ff20 	bl	800eb50 <_free_r>
 800dd10:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800dd12:	b111      	cbz	r1, 800dd1a <_reclaim_reent+0x5a>
 800dd14:	4620      	mov	r0, r4
 800dd16:	f000 ff1b 	bl	800eb50 <_free_r>
 800dd1a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd1c:	b111      	cbz	r1, 800dd24 <_reclaim_reent+0x64>
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f000 ff16 	bl	800eb50 <_free_r>
 800dd24:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800dd26:	b111      	cbz	r1, 800dd2e <_reclaim_reent+0x6e>
 800dd28:	4620      	mov	r0, r4
 800dd2a:	f000 ff11 	bl	800eb50 <_free_r>
 800dd2e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800dd30:	b111      	cbz	r1, 800dd38 <_reclaim_reent+0x78>
 800dd32:	4620      	mov	r0, r4
 800dd34:	f000 ff0c 	bl	800eb50 <_free_r>
 800dd38:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800dd3a:	b111      	cbz	r1, 800dd42 <_reclaim_reent+0x82>
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	f000 ff07 	bl	800eb50 <_free_r>
 800dd42:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800dd44:	b111      	cbz	r1, 800dd4c <_reclaim_reent+0x8c>
 800dd46:	4620      	mov	r0, r4
 800dd48:	f000 ff02 	bl	800eb50 <_free_r>
 800dd4c:	6a23      	ldr	r3, [r4, #32]
 800dd4e:	b14b      	cbz	r3, 800dd64 <_reclaim_reent+0xa4>
 800dd50:	4620      	mov	r0, r4
 800dd52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd56:	4718      	bx	r3
 800dd58:	680e      	ldr	r6, [r1, #0]
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	f000 fef8 	bl	800eb50 <_free_r>
 800dd60:	4631      	mov	r1, r6
 800dd62:	e7bb      	b.n	800dcdc <_reclaim_reent+0x1c>
 800dd64:	bd70      	pop	{r4, r5, r6, pc}
 800dd66:	bf00      	nop
 800dd68:	20000030 	.word	0x20000030

0800dd6c <_lseek_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	4d07      	ldr	r5, [pc, #28]	@ (800dd8c <_lseek_r+0x20>)
 800dd70:	4604      	mov	r4, r0
 800dd72:	4608      	mov	r0, r1
 800dd74:	4611      	mov	r1, r2
 800dd76:	2200      	movs	r2, #0
 800dd78:	602a      	str	r2, [r5, #0]
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	f7f5 fbc9 	bl	8003512 <_lseek>
 800dd80:	1c43      	adds	r3, r0, #1
 800dd82:	d102      	bne.n	800dd8a <_lseek_r+0x1e>
 800dd84:	682b      	ldr	r3, [r5, #0]
 800dd86:	b103      	cbz	r3, 800dd8a <_lseek_r+0x1e>
 800dd88:	6023      	str	r3, [r4, #0]
 800dd8a:	bd38      	pop	{r3, r4, r5, pc}
 800dd8c:	20005568 	.word	0x20005568

0800dd90 <_read_r>:
 800dd90:	b538      	push	{r3, r4, r5, lr}
 800dd92:	4d07      	ldr	r5, [pc, #28]	@ (800ddb0 <_read_r+0x20>)
 800dd94:	4604      	mov	r4, r0
 800dd96:	4608      	mov	r0, r1
 800dd98:	4611      	mov	r1, r2
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	602a      	str	r2, [r5, #0]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	f7f5 fb57 	bl	8003452 <_read>
 800dda4:	1c43      	adds	r3, r0, #1
 800dda6:	d102      	bne.n	800ddae <_read_r+0x1e>
 800dda8:	682b      	ldr	r3, [r5, #0]
 800ddaa:	b103      	cbz	r3, 800ddae <_read_r+0x1e>
 800ddac:	6023      	str	r3, [r4, #0]
 800ddae:	bd38      	pop	{r3, r4, r5, pc}
 800ddb0:	20005568 	.word	0x20005568

0800ddb4 <_sbrk_r>:
 800ddb4:	b538      	push	{r3, r4, r5, lr}
 800ddb6:	4d06      	ldr	r5, [pc, #24]	@ (800ddd0 <_sbrk_r+0x1c>)
 800ddb8:	2300      	movs	r3, #0
 800ddba:	4604      	mov	r4, r0
 800ddbc:	4608      	mov	r0, r1
 800ddbe:	602b      	str	r3, [r5, #0]
 800ddc0:	f7f5 fbb4 	bl	800352c <_sbrk>
 800ddc4:	1c43      	adds	r3, r0, #1
 800ddc6:	d102      	bne.n	800ddce <_sbrk_r+0x1a>
 800ddc8:	682b      	ldr	r3, [r5, #0]
 800ddca:	b103      	cbz	r3, 800ddce <_sbrk_r+0x1a>
 800ddcc:	6023      	str	r3, [r4, #0]
 800ddce:	bd38      	pop	{r3, r4, r5, pc}
 800ddd0:	20005568 	.word	0x20005568

0800ddd4 <_write_r>:
 800ddd4:	b538      	push	{r3, r4, r5, lr}
 800ddd6:	4d07      	ldr	r5, [pc, #28]	@ (800ddf4 <_write_r+0x20>)
 800ddd8:	4604      	mov	r4, r0
 800ddda:	4608      	mov	r0, r1
 800dddc:	4611      	mov	r1, r2
 800ddde:	2200      	movs	r2, #0
 800dde0:	602a      	str	r2, [r5, #0]
 800dde2:	461a      	mov	r2, r3
 800dde4:	f7f5 fb52 	bl	800348c <_write>
 800dde8:	1c43      	adds	r3, r0, #1
 800ddea:	d102      	bne.n	800ddf2 <_write_r+0x1e>
 800ddec:	682b      	ldr	r3, [r5, #0]
 800ddee:	b103      	cbz	r3, 800ddf2 <_write_r+0x1e>
 800ddf0:	6023      	str	r3, [r4, #0]
 800ddf2:	bd38      	pop	{r3, r4, r5, pc}
 800ddf4:	20005568 	.word	0x20005568

0800ddf8 <__errno>:
 800ddf8:	4b01      	ldr	r3, [pc, #4]	@ (800de00 <__errno+0x8>)
 800ddfa:	6818      	ldr	r0, [r3, #0]
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop
 800de00:	20000030 	.word	0x20000030

0800de04 <__libc_init_array>:
 800de04:	b570      	push	{r4, r5, r6, lr}
 800de06:	4d0d      	ldr	r5, [pc, #52]	@ (800de3c <__libc_init_array+0x38>)
 800de08:	4c0d      	ldr	r4, [pc, #52]	@ (800de40 <__libc_init_array+0x3c>)
 800de0a:	1b64      	subs	r4, r4, r5
 800de0c:	10a4      	asrs	r4, r4, #2
 800de0e:	2600      	movs	r6, #0
 800de10:	42a6      	cmp	r6, r4
 800de12:	d109      	bne.n	800de28 <__libc_init_array+0x24>
 800de14:	4d0b      	ldr	r5, [pc, #44]	@ (800de44 <__libc_init_array+0x40>)
 800de16:	4c0c      	ldr	r4, [pc, #48]	@ (800de48 <__libc_init_array+0x44>)
 800de18:	f003 f9ac 	bl	8011174 <_init>
 800de1c:	1b64      	subs	r4, r4, r5
 800de1e:	10a4      	asrs	r4, r4, #2
 800de20:	2600      	movs	r6, #0
 800de22:	42a6      	cmp	r6, r4
 800de24:	d105      	bne.n	800de32 <__libc_init_array+0x2e>
 800de26:	bd70      	pop	{r4, r5, r6, pc}
 800de28:	f855 3b04 	ldr.w	r3, [r5], #4
 800de2c:	4798      	blx	r3
 800de2e:	3601      	adds	r6, #1
 800de30:	e7ee      	b.n	800de10 <__libc_init_array+0xc>
 800de32:	f855 3b04 	ldr.w	r3, [r5], #4
 800de36:	4798      	blx	r3
 800de38:	3601      	adds	r6, #1
 800de3a:	e7f2      	b.n	800de22 <__libc_init_array+0x1e>
 800de3c:	08011714 	.word	0x08011714
 800de40:	08011714 	.word	0x08011714
 800de44:	08011714 	.word	0x08011714
 800de48:	08011718 	.word	0x08011718

0800de4c <__retarget_lock_init_recursive>:
 800de4c:	4770      	bx	lr

0800de4e <__retarget_lock_acquire_recursive>:
 800de4e:	4770      	bx	lr

0800de50 <__retarget_lock_release_recursive>:
 800de50:	4770      	bx	lr

0800de52 <memcpy>:
 800de52:	440a      	add	r2, r1
 800de54:	4291      	cmp	r1, r2
 800de56:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800de5a:	d100      	bne.n	800de5e <memcpy+0xc>
 800de5c:	4770      	bx	lr
 800de5e:	b510      	push	{r4, lr}
 800de60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de68:	4291      	cmp	r1, r2
 800de6a:	d1f9      	bne.n	800de60 <memcpy+0xe>
 800de6c:	bd10      	pop	{r4, pc}
	...

0800de70 <nanf>:
 800de70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800de78 <nanf+0x8>
 800de74:	4770      	bx	lr
 800de76:	bf00      	nop
 800de78:	7fc00000 	.word	0x7fc00000

0800de7c <__assert_func>:
 800de7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de7e:	4614      	mov	r4, r2
 800de80:	461a      	mov	r2, r3
 800de82:	4b09      	ldr	r3, [pc, #36]	@ (800dea8 <__assert_func+0x2c>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	4605      	mov	r5, r0
 800de88:	68d8      	ldr	r0, [r3, #12]
 800de8a:	b954      	cbnz	r4, 800dea2 <__assert_func+0x26>
 800de8c:	4b07      	ldr	r3, [pc, #28]	@ (800deac <__assert_func+0x30>)
 800de8e:	461c      	mov	r4, r3
 800de90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de94:	9100      	str	r1, [sp, #0]
 800de96:	462b      	mov	r3, r5
 800de98:	4905      	ldr	r1, [pc, #20]	@ (800deb0 <__assert_func+0x34>)
 800de9a:	f002 fd29 	bl	80108f0 <fiprintf>
 800de9e:	f002 fdc7 	bl	8010a30 <abort>
 800dea2:	4b04      	ldr	r3, [pc, #16]	@ (800deb4 <__assert_func+0x38>)
 800dea4:	e7f4      	b.n	800de90 <__assert_func+0x14>
 800dea6:	bf00      	nop
 800dea8:	20000030 	.word	0x20000030
 800deac:	08011455 	.word	0x08011455
 800deb0:	08011427 	.word	0x08011427
 800deb4:	0801141a 	.word	0x0801141a

0800deb8 <quorem>:
 800deb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800debc:	6903      	ldr	r3, [r0, #16]
 800debe:	690c      	ldr	r4, [r1, #16]
 800dec0:	42a3      	cmp	r3, r4
 800dec2:	4607      	mov	r7, r0
 800dec4:	db7e      	blt.n	800dfc4 <quorem+0x10c>
 800dec6:	3c01      	subs	r4, #1
 800dec8:	f101 0814 	add.w	r8, r1, #20
 800decc:	00a3      	lsls	r3, r4, #2
 800dece:	f100 0514 	add.w	r5, r0, #20
 800ded2:	9300      	str	r3, [sp, #0]
 800ded4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ded8:	9301      	str	r3, [sp, #4]
 800deda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dede:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dee2:	3301      	adds	r3, #1
 800dee4:	429a      	cmp	r2, r3
 800dee6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800deea:	fbb2 f6f3 	udiv	r6, r2, r3
 800deee:	d32e      	bcc.n	800df4e <quorem+0x96>
 800def0:	f04f 0a00 	mov.w	sl, #0
 800def4:	46c4      	mov	ip, r8
 800def6:	46ae      	mov	lr, r5
 800def8:	46d3      	mov	fp, sl
 800defa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800defe:	b298      	uxth	r0, r3
 800df00:	fb06 a000 	mla	r0, r6, r0, sl
 800df04:	0c02      	lsrs	r2, r0, #16
 800df06:	0c1b      	lsrs	r3, r3, #16
 800df08:	fb06 2303 	mla	r3, r6, r3, r2
 800df0c:	f8de 2000 	ldr.w	r2, [lr]
 800df10:	b280      	uxth	r0, r0
 800df12:	b292      	uxth	r2, r2
 800df14:	1a12      	subs	r2, r2, r0
 800df16:	445a      	add	r2, fp
 800df18:	f8de 0000 	ldr.w	r0, [lr]
 800df1c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df20:	b29b      	uxth	r3, r3
 800df22:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800df26:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800df2a:	b292      	uxth	r2, r2
 800df2c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800df30:	45e1      	cmp	r9, ip
 800df32:	f84e 2b04 	str.w	r2, [lr], #4
 800df36:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800df3a:	d2de      	bcs.n	800defa <quorem+0x42>
 800df3c:	9b00      	ldr	r3, [sp, #0]
 800df3e:	58eb      	ldr	r3, [r5, r3]
 800df40:	b92b      	cbnz	r3, 800df4e <quorem+0x96>
 800df42:	9b01      	ldr	r3, [sp, #4]
 800df44:	3b04      	subs	r3, #4
 800df46:	429d      	cmp	r5, r3
 800df48:	461a      	mov	r2, r3
 800df4a:	d32f      	bcc.n	800dfac <quorem+0xf4>
 800df4c:	613c      	str	r4, [r7, #16]
 800df4e:	4638      	mov	r0, r7
 800df50:	f001 f90c 	bl	800f16c <__mcmp>
 800df54:	2800      	cmp	r0, #0
 800df56:	db25      	blt.n	800dfa4 <quorem+0xec>
 800df58:	4629      	mov	r1, r5
 800df5a:	2000      	movs	r0, #0
 800df5c:	f858 2b04 	ldr.w	r2, [r8], #4
 800df60:	f8d1 c000 	ldr.w	ip, [r1]
 800df64:	fa1f fe82 	uxth.w	lr, r2
 800df68:	fa1f f38c 	uxth.w	r3, ip
 800df6c:	eba3 030e 	sub.w	r3, r3, lr
 800df70:	4403      	add	r3, r0
 800df72:	0c12      	lsrs	r2, r2, #16
 800df74:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800df78:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df82:	45c1      	cmp	r9, r8
 800df84:	f841 3b04 	str.w	r3, [r1], #4
 800df88:	ea4f 4022 	mov.w	r0, r2, asr #16
 800df8c:	d2e6      	bcs.n	800df5c <quorem+0xa4>
 800df8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df96:	b922      	cbnz	r2, 800dfa2 <quorem+0xea>
 800df98:	3b04      	subs	r3, #4
 800df9a:	429d      	cmp	r5, r3
 800df9c:	461a      	mov	r2, r3
 800df9e:	d30b      	bcc.n	800dfb8 <quorem+0x100>
 800dfa0:	613c      	str	r4, [r7, #16]
 800dfa2:	3601      	adds	r6, #1
 800dfa4:	4630      	mov	r0, r6
 800dfa6:	b003      	add	sp, #12
 800dfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfac:	6812      	ldr	r2, [r2, #0]
 800dfae:	3b04      	subs	r3, #4
 800dfb0:	2a00      	cmp	r2, #0
 800dfb2:	d1cb      	bne.n	800df4c <quorem+0x94>
 800dfb4:	3c01      	subs	r4, #1
 800dfb6:	e7c6      	b.n	800df46 <quorem+0x8e>
 800dfb8:	6812      	ldr	r2, [r2, #0]
 800dfba:	3b04      	subs	r3, #4
 800dfbc:	2a00      	cmp	r2, #0
 800dfbe:	d1ef      	bne.n	800dfa0 <quorem+0xe8>
 800dfc0:	3c01      	subs	r4, #1
 800dfc2:	e7ea      	b.n	800df9a <quorem+0xe2>
 800dfc4:	2000      	movs	r0, #0
 800dfc6:	e7ee      	b.n	800dfa6 <quorem+0xee>

0800dfc8 <_dtoa_r>:
 800dfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfcc:	69c7      	ldr	r7, [r0, #28]
 800dfce:	b099      	sub	sp, #100	@ 0x64
 800dfd0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dfd4:	ec55 4b10 	vmov	r4, r5, d0
 800dfd8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dfda:	9109      	str	r1, [sp, #36]	@ 0x24
 800dfdc:	4683      	mov	fp, r0
 800dfde:	920e      	str	r2, [sp, #56]	@ 0x38
 800dfe0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dfe2:	b97f      	cbnz	r7, 800e004 <_dtoa_r+0x3c>
 800dfe4:	2010      	movs	r0, #16
 800dfe6:	f7fe fcbb 	bl	800c960 <malloc>
 800dfea:	4602      	mov	r2, r0
 800dfec:	f8cb 001c 	str.w	r0, [fp, #28]
 800dff0:	b920      	cbnz	r0, 800dffc <_dtoa_r+0x34>
 800dff2:	4ba7      	ldr	r3, [pc, #668]	@ (800e290 <_dtoa_r+0x2c8>)
 800dff4:	21ef      	movs	r1, #239	@ 0xef
 800dff6:	48a7      	ldr	r0, [pc, #668]	@ (800e294 <_dtoa_r+0x2cc>)
 800dff8:	f7ff ff40 	bl	800de7c <__assert_func>
 800dffc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e000:	6007      	str	r7, [r0, #0]
 800e002:	60c7      	str	r7, [r0, #12]
 800e004:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e008:	6819      	ldr	r1, [r3, #0]
 800e00a:	b159      	cbz	r1, 800e024 <_dtoa_r+0x5c>
 800e00c:	685a      	ldr	r2, [r3, #4]
 800e00e:	604a      	str	r2, [r1, #4]
 800e010:	2301      	movs	r3, #1
 800e012:	4093      	lsls	r3, r2
 800e014:	608b      	str	r3, [r1, #8]
 800e016:	4658      	mov	r0, fp
 800e018:	f000 fe24 	bl	800ec64 <_Bfree>
 800e01c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e020:	2200      	movs	r2, #0
 800e022:	601a      	str	r2, [r3, #0]
 800e024:	1e2b      	subs	r3, r5, #0
 800e026:	bfb9      	ittee	lt
 800e028:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e02c:	9303      	strlt	r3, [sp, #12]
 800e02e:	2300      	movge	r3, #0
 800e030:	6033      	strge	r3, [r6, #0]
 800e032:	9f03      	ldr	r7, [sp, #12]
 800e034:	4b98      	ldr	r3, [pc, #608]	@ (800e298 <_dtoa_r+0x2d0>)
 800e036:	bfbc      	itt	lt
 800e038:	2201      	movlt	r2, #1
 800e03a:	6032      	strlt	r2, [r6, #0]
 800e03c:	43bb      	bics	r3, r7
 800e03e:	d112      	bne.n	800e066 <_dtoa_r+0x9e>
 800e040:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e042:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e046:	6013      	str	r3, [r2, #0]
 800e048:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e04c:	4323      	orrs	r3, r4
 800e04e:	f000 854d 	beq.w	800eaec <_dtoa_r+0xb24>
 800e052:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e054:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e2ac <_dtoa_r+0x2e4>
 800e058:	2b00      	cmp	r3, #0
 800e05a:	f000 854f 	beq.w	800eafc <_dtoa_r+0xb34>
 800e05e:	f10a 0303 	add.w	r3, sl, #3
 800e062:	f000 bd49 	b.w	800eaf8 <_dtoa_r+0xb30>
 800e066:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e06a:	2200      	movs	r2, #0
 800e06c:	ec51 0b17 	vmov	r0, r1, d7
 800e070:	2300      	movs	r3, #0
 800e072:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e076:	f7f2 fd2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800e07a:	4680      	mov	r8, r0
 800e07c:	b158      	cbz	r0, 800e096 <_dtoa_r+0xce>
 800e07e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e080:	2301      	movs	r3, #1
 800e082:	6013      	str	r3, [r2, #0]
 800e084:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e086:	b113      	cbz	r3, 800e08e <_dtoa_r+0xc6>
 800e088:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e08a:	4b84      	ldr	r3, [pc, #528]	@ (800e29c <_dtoa_r+0x2d4>)
 800e08c:	6013      	str	r3, [r2, #0]
 800e08e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e2b0 <_dtoa_r+0x2e8>
 800e092:	f000 bd33 	b.w	800eafc <_dtoa_r+0xb34>
 800e096:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e09a:	aa16      	add	r2, sp, #88	@ 0x58
 800e09c:	a917      	add	r1, sp, #92	@ 0x5c
 800e09e:	4658      	mov	r0, fp
 800e0a0:	f001 f984 	bl	800f3ac <__d2b>
 800e0a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e0a8:	4681      	mov	r9, r0
 800e0aa:	2e00      	cmp	r6, #0
 800e0ac:	d077      	beq.n	800e19e <_dtoa_r+0x1d6>
 800e0ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e0b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e0b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e0c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e0c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	4b74      	ldr	r3, [pc, #464]	@ (800e2a0 <_dtoa_r+0x2d8>)
 800e0ce:	f7f2 f8e3 	bl	8000298 <__aeabi_dsub>
 800e0d2:	a369      	add	r3, pc, #420	@ (adr r3, 800e278 <_dtoa_r+0x2b0>)
 800e0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d8:	f7f2 fa96 	bl	8000608 <__aeabi_dmul>
 800e0dc:	a368      	add	r3, pc, #416	@ (adr r3, 800e280 <_dtoa_r+0x2b8>)
 800e0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e2:	f7f2 f8db 	bl	800029c <__adddf3>
 800e0e6:	4604      	mov	r4, r0
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	460d      	mov	r5, r1
 800e0ec:	f7f2 fa22 	bl	8000534 <__aeabi_i2d>
 800e0f0:	a365      	add	r3, pc, #404	@ (adr r3, 800e288 <_dtoa_r+0x2c0>)
 800e0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f6:	f7f2 fa87 	bl	8000608 <__aeabi_dmul>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	4620      	mov	r0, r4
 800e100:	4629      	mov	r1, r5
 800e102:	f7f2 f8cb 	bl	800029c <__adddf3>
 800e106:	4604      	mov	r4, r0
 800e108:	460d      	mov	r5, r1
 800e10a:	f7f2 fd2d 	bl	8000b68 <__aeabi_d2iz>
 800e10e:	2200      	movs	r2, #0
 800e110:	4607      	mov	r7, r0
 800e112:	2300      	movs	r3, #0
 800e114:	4620      	mov	r0, r4
 800e116:	4629      	mov	r1, r5
 800e118:	f7f2 fce8 	bl	8000aec <__aeabi_dcmplt>
 800e11c:	b140      	cbz	r0, 800e130 <_dtoa_r+0x168>
 800e11e:	4638      	mov	r0, r7
 800e120:	f7f2 fa08 	bl	8000534 <__aeabi_i2d>
 800e124:	4622      	mov	r2, r4
 800e126:	462b      	mov	r3, r5
 800e128:	f7f2 fcd6 	bl	8000ad8 <__aeabi_dcmpeq>
 800e12c:	b900      	cbnz	r0, 800e130 <_dtoa_r+0x168>
 800e12e:	3f01      	subs	r7, #1
 800e130:	2f16      	cmp	r7, #22
 800e132:	d851      	bhi.n	800e1d8 <_dtoa_r+0x210>
 800e134:	4b5b      	ldr	r3, [pc, #364]	@ (800e2a4 <_dtoa_r+0x2dc>)
 800e136:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e142:	f7f2 fcd3 	bl	8000aec <__aeabi_dcmplt>
 800e146:	2800      	cmp	r0, #0
 800e148:	d048      	beq.n	800e1dc <_dtoa_r+0x214>
 800e14a:	3f01      	subs	r7, #1
 800e14c:	2300      	movs	r3, #0
 800e14e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e150:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e152:	1b9b      	subs	r3, r3, r6
 800e154:	1e5a      	subs	r2, r3, #1
 800e156:	bf44      	itt	mi
 800e158:	f1c3 0801 	rsbmi	r8, r3, #1
 800e15c:	2300      	movmi	r3, #0
 800e15e:	9208      	str	r2, [sp, #32]
 800e160:	bf54      	ite	pl
 800e162:	f04f 0800 	movpl.w	r8, #0
 800e166:	9308      	strmi	r3, [sp, #32]
 800e168:	2f00      	cmp	r7, #0
 800e16a:	db39      	blt.n	800e1e0 <_dtoa_r+0x218>
 800e16c:	9b08      	ldr	r3, [sp, #32]
 800e16e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e170:	443b      	add	r3, r7
 800e172:	9308      	str	r3, [sp, #32]
 800e174:	2300      	movs	r3, #0
 800e176:	930a      	str	r3, [sp, #40]	@ 0x28
 800e178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e17a:	2b09      	cmp	r3, #9
 800e17c:	d864      	bhi.n	800e248 <_dtoa_r+0x280>
 800e17e:	2b05      	cmp	r3, #5
 800e180:	bfc4      	itt	gt
 800e182:	3b04      	subgt	r3, #4
 800e184:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e188:	f1a3 0302 	sub.w	r3, r3, #2
 800e18c:	bfcc      	ite	gt
 800e18e:	2400      	movgt	r4, #0
 800e190:	2401      	movle	r4, #1
 800e192:	2b03      	cmp	r3, #3
 800e194:	d863      	bhi.n	800e25e <_dtoa_r+0x296>
 800e196:	e8df f003 	tbb	[pc, r3]
 800e19a:	372a      	.short	0x372a
 800e19c:	5535      	.short	0x5535
 800e19e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e1a2:	441e      	add	r6, r3
 800e1a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e1a8:	2b20      	cmp	r3, #32
 800e1aa:	bfc1      	itttt	gt
 800e1ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e1b0:	409f      	lslgt	r7, r3
 800e1b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e1b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e1ba:	bfd6      	itet	le
 800e1bc:	f1c3 0320 	rsble	r3, r3, #32
 800e1c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800e1c4:	fa04 f003 	lslle.w	r0, r4, r3
 800e1c8:	f7f2 f9a4 	bl	8000514 <__aeabi_ui2d>
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e1d2:	3e01      	subs	r6, #1
 800e1d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800e1d6:	e777      	b.n	800e0c8 <_dtoa_r+0x100>
 800e1d8:	2301      	movs	r3, #1
 800e1da:	e7b8      	b.n	800e14e <_dtoa_r+0x186>
 800e1dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800e1de:	e7b7      	b.n	800e150 <_dtoa_r+0x188>
 800e1e0:	427b      	negs	r3, r7
 800e1e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	eba8 0807 	sub.w	r8, r8, r7
 800e1ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e1ec:	e7c4      	b.n	800e178 <_dtoa_r+0x1b0>
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	dc35      	bgt.n	800e264 <_dtoa_r+0x29c>
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	9300      	str	r3, [sp, #0]
 800e1fc:	9307      	str	r3, [sp, #28]
 800e1fe:	461a      	mov	r2, r3
 800e200:	920e      	str	r2, [sp, #56]	@ 0x38
 800e202:	e00b      	b.n	800e21c <_dtoa_r+0x254>
 800e204:	2301      	movs	r3, #1
 800e206:	e7f3      	b.n	800e1f0 <_dtoa_r+0x228>
 800e208:	2300      	movs	r3, #0
 800e20a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e20c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e20e:	18fb      	adds	r3, r7, r3
 800e210:	9300      	str	r3, [sp, #0]
 800e212:	3301      	adds	r3, #1
 800e214:	2b01      	cmp	r3, #1
 800e216:	9307      	str	r3, [sp, #28]
 800e218:	bfb8      	it	lt
 800e21a:	2301      	movlt	r3, #1
 800e21c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e220:	2100      	movs	r1, #0
 800e222:	2204      	movs	r2, #4
 800e224:	f102 0514 	add.w	r5, r2, #20
 800e228:	429d      	cmp	r5, r3
 800e22a:	d91f      	bls.n	800e26c <_dtoa_r+0x2a4>
 800e22c:	6041      	str	r1, [r0, #4]
 800e22e:	4658      	mov	r0, fp
 800e230:	f000 fcd8 	bl	800ebe4 <_Balloc>
 800e234:	4682      	mov	sl, r0
 800e236:	2800      	cmp	r0, #0
 800e238:	d13c      	bne.n	800e2b4 <_dtoa_r+0x2ec>
 800e23a:	4b1b      	ldr	r3, [pc, #108]	@ (800e2a8 <_dtoa_r+0x2e0>)
 800e23c:	4602      	mov	r2, r0
 800e23e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e242:	e6d8      	b.n	800dff6 <_dtoa_r+0x2e>
 800e244:	2301      	movs	r3, #1
 800e246:	e7e0      	b.n	800e20a <_dtoa_r+0x242>
 800e248:	2401      	movs	r4, #1
 800e24a:	2300      	movs	r3, #0
 800e24c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e24e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e250:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e254:	9300      	str	r3, [sp, #0]
 800e256:	9307      	str	r3, [sp, #28]
 800e258:	2200      	movs	r2, #0
 800e25a:	2312      	movs	r3, #18
 800e25c:	e7d0      	b.n	800e200 <_dtoa_r+0x238>
 800e25e:	2301      	movs	r3, #1
 800e260:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e262:	e7f5      	b.n	800e250 <_dtoa_r+0x288>
 800e264:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	9307      	str	r3, [sp, #28]
 800e26a:	e7d7      	b.n	800e21c <_dtoa_r+0x254>
 800e26c:	3101      	adds	r1, #1
 800e26e:	0052      	lsls	r2, r2, #1
 800e270:	e7d8      	b.n	800e224 <_dtoa_r+0x25c>
 800e272:	bf00      	nop
 800e274:	f3af 8000 	nop.w
 800e278:	636f4361 	.word	0x636f4361
 800e27c:	3fd287a7 	.word	0x3fd287a7
 800e280:	8b60c8b3 	.word	0x8b60c8b3
 800e284:	3fc68a28 	.word	0x3fc68a28
 800e288:	509f79fb 	.word	0x509f79fb
 800e28c:	3fd34413 	.word	0x3fd34413
 800e290:	08011463 	.word	0x08011463
 800e294:	0801147a 	.word	0x0801147a
 800e298:	7ff00000 	.word	0x7ff00000
 800e29c:	080113f2 	.word	0x080113f2
 800e2a0:	3ff80000 	.word	0x3ff80000
 800e2a4:	08011570 	.word	0x08011570
 800e2a8:	080114d2 	.word	0x080114d2
 800e2ac:	0801145f 	.word	0x0801145f
 800e2b0:	080113f1 	.word	0x080113f1
 800e2b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e2b8:	6018      	str	r0, [r3, #0]
 800e2ba:	9b07      	ldr	r3, [sp, #28]
 800e2bc:	2b0e      	cmp	r3, #14
 800e2be:	f200 80a4 	bhi.w	800e40a <_dtoa_r+0x442>
 800e2c2:	2c00      	cmp	r4, #0
 800e2c4:	f000 80a1 	beq.w	800e40a <_dtoa_r+0x442>
 800e2c8:	2f00      	cmp	r7, #0
 800e2ca:	dd33      	ble.n	800e334 <_dtoa_r+0x36c>
 800e2cc:	4bad      	ldr	r3, [pc, #692]	@ (800e584 <_dtoa_r+0x5bc>)
 800e2ce:	f007 020f 	and.w	r2, r7, #15
 800e2d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2d6:	ed93 7b00 	vldr	d7, [r3]
 800e2da:	05f8      	lsls	r0, r7, #23
 800e2dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e2e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e2e4:	d516      	bpl.n	800e314 <_dtoa_r+0x34c>
 800e2e6:	4ba8      	ldr	r3, [pc, #672]	@ (800e588 <_dtoa_r+0x5c0>)
 800e2e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e2f0:	f7f2 fab4 	bl	800085c <__aeabi_ddiv>
 800e2f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2f8:	f004 040f 	and.w	r4, r4, #15
 800e2fc:	2603      	movs	r6, #3
 800e2fe:	4da2      	ldr	r5, [pc, #648]	@ (800e588 <_dtoa_r+0x5c0>)
 800e300:	b954      	cbnz	r4, 800e318 <_dtoa_r+0x350>
 800e302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e30a:	f7f2 faa7 	bl	800085c <__aeabi_ddiv>
 800e30e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e312:	e028      	b.n	800e366 <_dtoa_r+0x39e>
 800e314:	2602      	movs	r6, #2
 800e316:	e7f2      	b.n	800e2fe <_dtoa_r+0x336>
 800e318:	07e1      	lsls	r1, r4, #31
 800e31a:	d508      	bpl.n	800e32e <_dtoa_r+0x366>
 800e31c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e320:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e324:	f7f2 f970 	bl	8000608 <__aeabi_dmul>
 800e328:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e32c:	3601      	adds	r6, #1
 800e32e:	1064      	asrs	r4, r4, #1
 800e330:	3508      	adds	r5, #8
 800e332:	e7e5      	b.n	800e300 <_dtoa_r+0x338>
 800e334:	f000 80d2 	beq.w	800e4dc <_dtoa_r+0x514>
 800e338:	427c      	negs	r4, r7
 800e33a:	4b92      	ldr	r3, [pc, #584]	@ (800e584 <_dtoa_r+0x5bc>)
 800e33c:	4d92      	ldr	r5, [pc, #584]	@ (800e588 <_dtoa_r+0x5c0>)
 800e33e:	f004 020f 	and.w	r2, r4, #15
 800e342:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e34a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e34e:	f7f2 f95b 	bl	8000608 <__aeabi_dmul>
 800e352:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e356:	1124      	asrs	r4, r4, #4
 800e358:	2300      	movs	r3, #0
 800e35a:	2602      	movs	r6, #2
 800e35c:	2c00      	cmp	r4, #0
 800e35e:	f040 80b2 	bne.w	800e4c6 <_dtoa_r+0x4fe>
 800e362:	2b00      	cmp	r3, #0
 800e364:	d1d3      	bne.n	800e30e <_dtoa_r+0x346>
 800e366:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e368:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	f000 80b7 	beq.w	800e4e0 <_dtoa_r+0x518>
 800e372:	4b86      	ldr	r3, [pc, #536]	@ (800e58c <_dtoa_r+0x5c4>)
 800e374:	2200      	movs	r2, #0
 800e376:	4620      	mov	r0, r4
 800e378:	4629      	mov	r1, r5
 800e37a:	f7f2 fbb7 	bl	8000aec <__aeabi_dcmplt>
 800e37e:	2800      	cmp	r0, #0
 800e380:	f000 80ae 	beq.w	800e4e0 <_dtoa_r+0x518>
 800e384:	9b07      	ldr	r3, [sp, #28]
 800e386:	2b00      	cmp	r3, #0
 800e388:	f000 80aa 	beq.w	800e4e0 <_dtoa_r+0x518>
 800e38c:	9b00      	ldr	r3, [sp, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	dd37      	ble.n	800e402 <_dtoa_r+0x43a>
 800e392:	1e7b      	subs	r3, r7, #1
 800e394:	9304      	str	r3, [sp, #16]
 800e396:	4620      	mov	r0, r4
 800e398:	4b7d      	ldr	r3, [pc, #500]	@ (800e590 <_dtoa_r+0x5c8>)
 800e39a:	2200      	movs	r2, #0
 800e39c:	4629      	mov	r1, r5
 800e39e:	f7f2 f933 	bl	8000608 <__aeabi_dmul>
 800e3a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3a6:	9c00      	ldr	r4, [sp, #0]
 800e3a8:	3601      	adds	r6, #1
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	f7f2 f8c2 	bl	8000534 <__aeabi_i2d>
 800e3b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3b4:	f7f2 f928 	bl	8000608 <__aeabi_dmul>
 800e3b8:	4b76      	ldr	r3, [pc, #472]	@ (800e594 <_dtoa_r+0x5cc>)
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	f7f1 ff6e 	bl	800029c <__adddf3>
 800e3c0:	4605      	mov	r5, r0
 800e3c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e3c6:	2c00      	cmp	r4, #0
 800e3c8:	f040 808d 	bne.w	800e4e6 <_dtoa_r+0x51e>
 800e3cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3d0:	4b71      	ldr	r3, [pc, #452]	@ (800e598 <_dtoa_r+0x5d0>)
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f7f1 ff60 	bl	8000298 <__aeabi_dsub>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	460b      	mov	r3, r1
 800e3dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e3e0:	462a      	mov	r2, r5
 800e3e2:	4633      	mov	r3, r6
 800e3e4:	f7f2 fba0 	bl	8000b28 <__aeabi_dcmpgt>
 800e3e8:	2800      	cmp	r0, #0
 800e3ea:	f040 828b 	bne.w	800e904 <_dtoa_r+0x93c>
 800e3ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3f2:	462a      	mov	r2, r5
 800e3f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e3f8:	f7f2 fb78 	bl	8000aec <__aeabi_dcmplt>
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	f040 8128 	bne.w	800e652 <_dtoa_r+0x68a>
 800e402:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e406:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e40a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	f2c0 815a 	blt.w	800e6c6 <_dtoa_r+0x6fe>
 800e412:	2f0e      	cmp	r7, #14
 800e414:	f300 8157 	bgt.w	800e6c6 <_dtoa_r+0x6fe>
 800e418:	4b5a      	ldr	r3, [pc, #360]	@ (800e584 <_dtoa_r+0x5bc>)
 800e41a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e41e:	ed93 7b00 	vldr	d7, [r3]
 800e422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e424:	2b00      	cmp	r3, #0
 800e426:	ed8d 7b00 	vstr	d7, [sp]
 800e42a:	da03      	bge.n	800e434 <_dtoa_r+0x46c>
 800e42c:	9b07      	ldr	r3, [sp, #28]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	f340 8101 	ble.w	800e636 <_dtoa_r+0x66e>
 800e434:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e438:	4656      	mov	r6, sl
 800e43a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e43e:	4620      	mov	r0, r4
 800e440:	4629      	mov	r1, r5
 800e442:	f7f2 fa0b 	bl	800085c <__aeabi_ddiv>
 800e446:	f7f2 fb8f 	bl	8000b68 <__aeabi_d2iz>
 800e44a:	4680      	mov	r8, r0
 800e44c:	f7f2 f872 	bl	8000534 <__aeabi_i2d>
 800e450:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e454:	f7f2 f8d8 	bl	8000608 <__aeabi_dmul>
 800e458:	4602      	mov	r2, r0
 800e45a:	460b      	mov	r3, r1
 800e45c:	4620      	mov	r0, r4
 800e45e:	4629      	mov	r1, r5
 800e460:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e464:	f7f1 ff18 	bl	8000298 <__aeabi_dsub>
 800e468:	f806 4b01 	strb.w	r4, [r6], #1
 800e46c:	9d07      	ldr	r5, [sp, #28]
 800e46e:	eba6 040a 	sub.w	r4, r6, sl
 800e472:	42a5      	cmp	r5, r4
 800e474:	4602      	mov	r2, r0
 800e476:	460b      	mov	r3, r1
 800e478:	f040 8117 	bne.w	800e6aa <_dtoa_r+0x6e2>
 800e47c:	f7f1 ff0e 	bl	800029c <__adddf3>
 800e480:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e484:	4604      	mov	r4, r0
 800e486:	460d      	mov	r5, r1
 800e488:	f7f2 fb4e 	bl	8000b28 <__aeabi_dcmpgt>
 800e48c:	2800      	cmp	r0, #0
 800e48e:	f040 80f9 	bne.w	800e684 <_dtoa_r+0x6bc>
 800e492:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e496:	4620      	mov	r0, r4
 800e498:	4629      	mov	r1, r5
 800e49a:	f7f2 fb1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e49e:	b118      	cbz	r0, 800e4a8 <_dtoa_r+0x4e0>
 800e4a0:	f018 0f01 	tst.w	r8, #1
 800e4a4:	f040 80ee 	bne.w	800e684 <_dtoa_r+0x6bc>
 800e4a8:	4649      	mov	r1, r9
 800e4aa:	4658      	mov	r0, fp
 800e4ac:	f000 fbda 	bl	800ec64 <_Bfree>
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	7033      	strb	r3, [r6, #0]
 800e4b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e4b6:	3701      	adds	r7, #1
 800e4b8:	601f      	str	r7, [r3, #0]
 800e4ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	f000 831d 	beq.w	800eafc <_dtoa_r+0xb34>
 800e4c2:	601e      	str	r6, [r3, #0]
 800e4c4:	e31a      	b.n	800eafc <_dtoa_r+0xb34>
 800e4c6:	07e2      	lsls	r2, r4, #31
 800e4c8:	d505      	bpl.n	800e4d6 <_dtoa_r+0x50e>
 800e4ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e4ce:	f7f2 f89b 	bl	8000608 <__aeabi_dmul>
 800e4d2:	3601      	adds	r6, #1
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	1064      	asrs	r4, r4, #1
 800e4d8:	3508      	adds	r5, #8
 800e4da:	e73f      	b.n	800e35c <_dtoa_r+0x394>
 800e4dc:	2602      	movs	r6, #2
 800e4de:	e742      	b.n	800e366 <_dtoa_r+0x39e>
 800e4e0:	9c07      	ldr	r4, [sp, #28]
 800e4e2:	9704      	str	r7, [sp, #16]
 800e4e4:	e761      	b.n	800e3aa <_dtoa_r+0x3e2>
 800e4e6:	4b27      	ldr	r3, [pc, #156]	@ (800e584 <_dtoa_r+0x5bc>)
 800e4e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e4ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e4f2:	4454      	add	r4, sl
 800e4f4:	2900      	cmp	r1, #0
 800e4f6:	d053      	beq.n	800e5a0 <_dtoa_r+0x5d8>
 800e4f8:	4928      	ldr	r1, [pc, #160]	@ (800e59c <_dtoa_r+0x5d4>)
 800e4fa:	2000      	movs	r0, #0
 800e4fc:	f7f2 f9ae 	bl	800085c <__aeabi_ddiv>
 800e500:	4633      	mov	r3, r6
 800e502:	462a      	mov	r2, r5
 800e504:	f7f1 fec8 	bl	8000298 <__aeabi_dsub>
 800e508:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e50c:	4656      	mov	r6, sl
 800e50e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e512:	f7f2 fb29 	bl	8000b68 <__aeabi_d2iz>
 800e516:	4605      	mov	r5, r0
 800e518:	f7f2 f80c 	bl	8000534 <__aeabi_i2d>
 800e51c:	4602      	mov	r2, r0
 800e51e:	460b      	mov	r3, r1
 800e520:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e524:	f7f1 feb8 	bl	8000298 <__aeabi_dsub>
 800e528:	3530      	adds	r5, #48	@ 0x30
 800e52a:	4602      	mov	r2, r0
 800e52c:	460b      	mov	r3, r1
 800e52e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e532:	f806 5b01 	strb.w	r5, [r6], #1
 800e536:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e53a:	f7f2 fad7 	bl	8000aec <__aeabi_dcmplt>
 800e53e:	2800      	cmp	r0, #0
 800e540:	d171      	bne.n	800e626 <_dtoa_r+0x65e>
 800e542:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e546:	4911      	ldr	r1, [pc, #68]	@ (800e58c <_dtoa_r+0x5c4>)
 800e548:	2000      	movs	r0, #0
 800e54a:	f7f1 fea5 	bl	8000298 <__aeabi_dsub>
 800e54e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e552:	f7f2 facb 	bl	8000aec <__aeabi_dcmplt>
 800e556:	2800      	cmp	r0, #0
 800e558:	f040 8095 	bne.w	800e686 <_dtoa_r+0x6be>
 800e55c:	42a6      	cmp	r6, r4
 800e55e:	f43f af50 	beq.w	800e402 <_dtoa_r+0x43a>
 800e562:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e566:	4b0a      	ldr	r3, [pc, #40]	@ (800e590 <_dtoa_r+0x5c8>)
 800e568:	2200      	movs	r2, #0
 800e56a:	f7f2 f84d 	bl	8000608 <__aeabi_dmul>
 800e56e:	4b08      	ldr	r3, [pc, #32]	@ (800e590 <_dtoa_r+0x5c8>)
 800e570:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e574:	2200      	movs	r2, #0
 800e576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e57a:	f7f2 f845 	bl	8000608 <__aeabi_dmul>
 800e57e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e582:	e7c4      	b.n	800e50e <_dtoa_r+0x546>
 800e584:	08011570 	.word	0x08011570
 800e588:	08011548 	.word	0x08011548
 800e58c:	3ff00000 	.word	0x3ff00000
 800e590:	40240000 	.word	0x40240000
 800e594:	401c0000 	.word	0x401c0000
 800e598:	40140000 	.word	0x40140000
 800e59c:	3fe00000 	.word	0x3fe00000
 800e5a0:	4631      	mov	r1, r6
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	f7f2 f830 	bl	8000608 <__aeabi_dmul>
 800e5a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e5ac:	9415      	str	r4, [sp, #84]	@ 0x54
 800e5ae:	4656      	mov	r6, sl
 800e5b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5b4:	f7f2 fad8 	bl	8000b68 <__aeabi_d2iz>
 800e5b8:	4605      	mov	r5, r0
 800e5ba:	f7f1 ffbb 	bl	8000534 <__aeabi_i2d>
 800e5be:	4602      	mov	r2, r0
 800e5c0:	460b      	mov	r3, r1
 800e5c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5c6:	f7f1 fe67 	bl	8000298 <__aeabi_dsub>
 800e5ca:	3530      	adds	r5, #48	@ 0x30
 800e5cc:	f806 5b01 	strb.w	r5, [r6], #1
 800e5d0:	4602      	mov	r2, r0
 800e5d2:	460b      	mov	r3, r1
 800e5d4:	42a6      	cmp	r6, r4
 800e5d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5da:	f04f 0200 	mov.w	r2, #0
 800e5de:	d124      	bne.n	800e62a <_dtoa_r+0x662>
 800e5e0:	4bac      	ldr	r3, [pc, #688]	@ (800e894 <_dtoa_r+0x8cc>)
 800e5e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e5e6:	f7f1 fe59 	bl	800029c <__adddf3>
 800e5ea:	4602      	mov	r2, r0
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5f2:	f7f2 fa99 	bl	8000b28 <__aeabi_dcmpgt>
 800e5f6:	2800      	cmp	r0, #0
 800e5f8:	d145      	bne.n	800e686 <_dtoa_r+0x6be>
 800e5fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e5fe:	49a5      	ldr	r1, [pc, #660]	@ (800e894 <_dtoa_r+0x8cc>)
 800e600:	2000      	movs	r0, #0
 800e602:	f7f1 fe49 	bl	8000298 <__aeabi_dsub>
 800e606:	4602      	mov	r2, r0
 800e608:	460b      	mov	r3, r1
 800e60a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e60e:	f7f2 fa6d 	bl	8000aec <__aeabi_dcmplt>
 800e612:	2800      	cmp	r0, #0
 800e614:	f43f aef5 	beq.w	800e402 <_dtoa_r+0x43a>
 800e618:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e61a:	1e73      	subs	r3, r6, #1
 800e61c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e61e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e622:	2b30      	cmp	r3, #48	@ 0x30
 800e624:	d0f8      	beq.n	800e618 <_dtoa_r+0x650>
 800e626:	9f04      	ldr	r7, [sp, #16]
 800e628:	e73e      	b.n	800e4a8 <_dtoa_r+0x4e0>
 800e62a:	4b9b      	ldr	r3, [pc, #620]	@ (800e898 <_dtoa_r+0x8d0>)
 800e62c:	f7f1 ffec 	bl	8000608 <__aeabi_dmul>
 800e630:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e634:	e7bc      	b.n	800e5b0 <_dtoa_r+0x5e8>
 800e636:	d10c      	bne.n	800e652 <_dtoa_r+0x68a>
 800e638:	4b98      	ldr	r3, [pc, #608]	@ (800e89c <_dtoa_r+0x8d4>)
 800e63a:	2200      	movs	r2, #0
 800e63c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e640:	f7f1 ffe2 	bl	8000608 <__aeabi_dmul>
 800e644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e648:	f7f2 fa64 	bl	8000b14 <__aeabi_dcmpge>
 800e64c:	2800      	cmp	r0, #0
 800e64e:	f000 8157 	beq.w	800e900 <_dtoa_r+0x938>
 800e652:	2400      	movs	r4, #0
 800e654:	4625      	mov	r5, r4
 800e656:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e658:	43db      	mvns	r3, r3
 800e65a:	9304      	str	r3, [sp, #16]
 800e65c:	4656      	mov	r6, sl
 800e65e:	2700      	movs	r7, #0
 800e660:	4621      	mov	r1, r4
 800e662:	4658      	mov	r0, fp
 800e664:	f000 fafe 	bl	800ec64 <_Bfree>
 800e668:	2d00      	cmp	r5, #0
 800e66a:	d0dc      	beq.n	800e626 <_dtoa_r+0x65e>
 800e66c:	b12f      	cbz	r7, 800e67a <_dtoa_r+0x6b2>
 800e66e:	42af      	cmp	r7, r5
 800e670:	d003      	beq.n	800e67a <_dtoa_r+0x6b2>
 800e672:	4639      	mov	r1, r7
 800e674:	4658      	mov	r0, fp
 800e676:	f000 faf5 	bl	800ec64 <_Bfree>
 800e67a:	4629      	mov	r1, r5
 800e67c:	4658      	mov	r0, fp
 800e67e:	f000 faf1 	bl	800ec64 <_Bfree>
 800e682:	e7d0      	b.n	800e626 <_dtoa_r+0x65e>
 800e684:	9704      	str	r7, [sp, #16]
 800e686:	4633      	mov	r3, r6
 800e688:	461e      	mov	r6, r3
 800e68a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e68e:	2a39      	cmp	r2, #57	@ 0x39
 800e690:	d107      	bne.n	800e6a2 <_dtoa_r+0x6da>
 800e692:	459a      	cmp	sl, r3
 800e694:	d1f8      	bne.n	800e688 <_dtoa_r+0x6c0>
 800e696:	9a04      	ldr	r2, [sp, #16]
 800e698:	3201      	adds	r2, #1
 800e69a:	9204      	str	r2, [sp, #16]
 800e69c:	2230      	movs	r2, #48	@ 0x30
 800e69e:	f88a 2000 	strb.w	r2, [sl]
 800e6a2:	781a      	ldrb	r2, [r3, #0]
 800e6a4:	3201      	adds	r2, #1
 800e6a6:	701a      	strb	r2, [r3, #0]
 800e6a8:	e7bd      	b.n	800e626 <_dtoa_r+0x65e>
 800e6aa:	4b7b      	ldr	r3, [pc, #492]	@ (800e898 <_dtoa_r+0x8d0>)
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	f7f1 ffab 	bl	8000608 <__aeabi_dmul>
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	4604      	mov	r4, r0
 800e6b8:	460d      	mov	r5, r1
 800e6ba:	f7f2 fa0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	f43f aebb 	beq.w	800e43a <_dtoa_r+0x472>
 800e6c4:	e6f0      	b.n	800e4a8 <_dtoa_r+0x4e0>
 800e6c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e6c8:	2a00      	cmp	r2, #0
 800e6ca:	f000 80db 	beq.w	800e884 <_dtoa_r+0x8bc>
 800e6ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6d0:	2a01      	cmp	r2, #1
 800e6d2:	f300 80bf 	bgt.w	800e854 <_dtoa_r+0x88c>
 800e6d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e6d8:	2a00      	cmp	r2, #0
 800e6da:	f000 80b7 	beq.w	800e84c <_dtoa_r+0x884>
 800e6de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e6e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e6e4:	4646      	mov	r6, r8
 800e6e6:	9a08      	ldr	r2, [sp, #32]
 800e6e8:	2101      	movs	r1, #1
 800e6ea:	441a      	add	r2, r3
 800e6ec:	4658      	mov	r0, fp
 800e6ee:	4498      	add	r8, r3
 800e6f0:	9208      	str	r2, [sp, #32]
 800e6f2:	f000 fbb5 	bl	800ee60 <__i2b>
 800e6f6:	4605      	mov	r5, r0
 800e6f8:	b15e      	cbz	r6, 800e712 <_dtoa_r+0x74a>
 800e6fa:	9b08      	ldr	r3, [sp, #32]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	dd08      	ble.n	800e712 <_dtoa_r+0x74a>
 800e700:	42b3      	cmp	r3, r6
 800e702:	9a08      	ldr	r2, [sp, #32]
 800e704:	bfa8      	it	ge
 800e706:	4633      	movge	r3, r6
 800e708:	eba8 0803 	sub.w	r8, r8, r3
 800e70c:	1af6      	subs	r6, r6, r3
 800e70e:	1ad3      	subs	r3, r2, r3
 800e710:	9308      	str	r3, [sp, #32]
 800e712:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e714:	b1f3      	cbz	r3, 800e754 <_dtoa_r+0x78c>
 800e716:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e718:	2b00      	cmp	r3, #0
 800e71a:	f000 80b7 	beq.w	800e88c <_dtoa_r+0x8c4>
 800e71e:	b18c      	cbz	r4, 800e744 <_dtoa_r+0x77c>
 800e720:	4629      	mov	r1, r5
 800e722:	4622      	mov	r2, r4
 800e724:	4658      	mov	r0, fp
 800e726:	f000 fc5b 	bl	800efe0 <__pow5mult>
 800e72a:	464a      	mov	r2, r9
 800e72c:	4601      	mov	r1, r0
 800e72e:	4605      	mov	r5, r0
 800e730:	4658      	mov	r0, fp
 800e732:	f000 fbab 	bl	800ee8c <__multiply>
 800e736:	4649      	mov	r1, r9
 800e738:	9004      	str	r0, [sp, #16]
 800e73a:	4658      	mov	r0, fp
 800e73c:	f000 fa92 	bl	800ec64 <_Bfree>
 800e740:	9b04      	ldr	r3, [sp, #16]
 800e742:	4699      	mov	r9, r3
 800e744:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e746:	1b1a      	subs	r2, r3, r4
 800e748:	d004      	beq.n	800e754 <_dtoa_r+0x78c>
 800e74a:	4649      	mov	r1, r9
 800e74c:	4658      	mov	r0, fp
 800e74e:	f000 fc47 	bl	800efe0 <__pow5mult>
 800e752:	4681      	mov	r9, r0
 800e754:	2101      	movs	r1, #1
 800e756:	4658      	mov	r0, fp
 800e758:	f000 fb82 	bl	800ee60 <__i2b>
 800e75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e75e:	4604      	mov	r4, r0
 800e760:	2b00      	cmp	r3, #0
 800e762:	f000 81cf 	beq.w	800eb04 <_dtoa_r+0xb3c>
 800e766:	461a      	mov	r2, r3
 800e768:	4601      	mov	r1, r0
 800e76a:	4658      	mov	r0, fp
 800e76c:	f000 fc38 	bl	800efe0 <__pow5mult>
 800e770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e772:	2b01      	cmp	r3, #1
 800e774:	4604      	mov	r4, r0
 800e776:	f300 8095 	bgt.w	800e8a4 <_dtoa_r+0x8dc>
 800e77a:	9b02      	ldr	r3, [sp, #8]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	f040 8087 	bne.w	800e890 <_dtoa_r+0x8c8>
 800e782:	9b03      	ldr	r3, [sp, #12]
 800e784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f040 8089 	bne.w	800e8a0 <_dtoa_r+0x8d8>
 800e78e:	9b03      	ldr	r3, [sp, #12]
 800e790:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e794:	0d1b      	lsrs	r3, r3, #20
 800e796:	051b      	lsls	r3, r3, #20
 800e798:	b12b      	cbz	r3, 800e7a6 <_dtoa_r+0x7de>
 800e79a:	9b08      	ldr	r3, [sp, #32]
 800e79c:	3301      	adds	r3, #1
 800e79e:	9308      	str	r3, [sp, #32]
 800e7a0:	f108 0801 	add.w	r8, r8, #1
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	f000 81b0 	beq.w	800eb10 <_dtoa_r+0xb48>
 800e7b0:	6923      	ldr	r3, [r4, #16]
 800e7b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e7b6:	6918      	ldr	r0, [r3, #16]
 800e7b8:	f000 fb06 	bl	800edc8 <__hi0bits>
 800e7bc:	f1c0 0020 	rsb	r0, r0, #32
 800e7c0:	9b08      	ldr	r3, [sp, #32]
 800e7c2:	4418      	add	r0, r3
 800e7c4:	f010 001f 	ands.w	r0, r0, #31
 800e7c8:	d077      	beq.n	800e8ba <_dtoa_r+0x8f2>
 800e7ca:	f1c0 0320 	rsb	r3, r0, #32
 800e7ce:	2b04      	cmp	r3, #4
 800e7d0:	dd6b      	ble.n	800e8aa <_dtoa_r+0x8e2>
 800e7d2:	9b08      	ldr	r3, [sp, #32]
 800e7d4:	f1c0 001c 	rsb	r0, r0, #28
 800e7d8:	4403      	add	r3, r0
 800e7da:	4480      	add	r8, r0
 800e7dc:	4406      	add	r6, r0
 800e7de:	9308      	str	r3, [sp, #32]
 800e7e0:	f1b8 0f00 	cmp.w	r8, #0
 800e7e4:	dd05      	ble.n	800e7f2 <_dtoa_r+0x82a>
 800e7e6:	4649      	mov	r1, r9
 800e7e8:	4642      	mov	r2, r8
 800e7ea:	4658      	mov	r0, fp
 800e7ec:	f000 fc52 	bl	800f094 <__lshift>
 800e7f0:	4681      	mov	r9, r0
 800e7f2:	9b08      	ldr	r3, [sp, #32]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	dd05      	ble.n	800e804 <_dtoa_r+0x83c>
 800e7f8:	4621      	mov	r1, r4
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	4658      	mov	r0, fp
 800e7fe:	f000 fc49 	bl	800f094 <__lshift>
 800e802:	4604      	mov	r4, r0
 800e804:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e806:	2b00      	cmp	r3, #0
 800e808:	d059      	beq.n	800e8be <_dtoa_r+0x8f6>
 800e80a:	4621      	mov	r1, r4
 800e80c:	4648      	mov	r0, r9
 800e80e:	f000 fcad 	bl	800f16c <__mcmp>
 800e812:	2800      	cmp	r0, #0
 800e814:	da53      	bge.n	800e8be <_dtoa_r+0x8f6>
 800e816:	1e7b      	subs	r3, r7, #1
 800e818:	9304      	str	r3, [sp, #16]
 800e81a:	4649      	mov	r1, r9
 800e81c:	2300      	movs	r3, #0
 800e81e:	220a      	movs	r2, #10
 800e820:	4658      	mov	r0, fp
 800e822:	f000 fa41 	bl	800eca8 <__multadd>
 800e826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e828:	4681      	mov	r9, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	f000 8172 	beq.w	800eb14 <_dtoa_r+0xb4c>
 800e830:	2300      	movs	r3, #0
 800e832:	4629      	mov	r1, r5
 800e834:	220a      	movs	r2, #10
 800e836:	4658      	mov	r0, fp
 800e838:	f000 fa36 	bl	800eca8 <__multadd>
 800e83c:	9b00      	ldr	r3, [sp, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	4605      	mov	r5, r0
 800e842:	dc67      	bgt.n	800e914 <_dtoa_r+0x94c>
 800e844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e846:	2b02      	cmp	r3, #2
 800e848:	dc41      	bgt.n	800e8ce <_dtoa_r+0x906>
 800e84a:	e063      	b.n	800e914 <_dtoa_r+0x94c>
 800e84c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e84e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e852:	e746      	b.n	800e6e2 <_dtoa_r+0x71a>
 800e854:	9b07      	ldr	r3, [sp, #28]
 800e856:	1e5c      	subs	r4, r3, #1
 800e858:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e85a:	42a3      	cmp	r3, r4
 800e85c:	bfbf      	itttt	lt
 800e85e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e860:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e862:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e864:	1ae3      	sublt	r3, r4, r3
 800e866:	bfb4      	ite	lt
 800e868:	18d2      	addlt	r2, r2, r3
 800e86a:	1b1c      	subge	r4, r3, r4
 800e86c:	9b07      	ldr	r3, [sp, #28]
 800e86e:	bfbc      	itt	lt
 800e870:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e872:	2400      	movlt	r4, #0
 800e874:	2b00      	cmp	r3, #0
 800e876:	bfb5      	itete	lt
 800e878:	eba8 0603 	sublt.w	r6, r8, r3
 800e87c:	9b07      	ldrge	r3, [sp, #28]
 800e87e:	2300      	movlt	r3, #0
 800e880:	4646      	movge	r6, r8
 800e882:	e730      	b.n	800e6e6 <_dtoa_r+0x71e>
 800e884:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e886:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e888:	4646      	mov	r6, r8
 800e88a:	e735      	b.n	800e6f8 <_dtoa_r+0x730>
 800e88c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e88e:	e75c      	b.n	800e74a <_dtoa_r+0x782>
 800e890:	2300      	movs	r3, #0
 800e892:	e788      	b.n	800e7a6 <_dtoa_r+0x7de>
 800e894:	3fe00000 	.word	0x3fe00000
 800e898:	40240000 	.word	0x40240000
 800e89c:	40140000 	.word	0x40140000
 800e8a0:	9b02      	ldr	r3, [sp, #8]
 800e8a2:	e780      	b.n	800e7a6 <_dtoa_r+0x7de>
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8a8:	e782      	b.n	800e7b0 <_dtoa_r+0x7e8>
 800e8aa:	d099      	beq.n	800e7e0 <_dtoa_r+0x818>
 800e8ac:	9a08      	ldr	r2, [sp, #32]
 800e8ae:	331c      	adds	r3, #28
 800e8b0:	441a      	add	r2, r3
 800e8b2:	4498      	add	r8, r3
 800e8b4:	441e      	add	r6, r3
 800e8b6:	9208      	str	r2, [sp, #32]
 800e8b8:	e792      	b.n	800e7e0 <_dtoa_r+0x818>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	e7f6      	b.n	800e8ac <_dtoa_r+0x8e4>
 800e8be:	9b07      	ldr	r3, [sp, #28]
 800e8c0:	9704      	str	r7, [sp, #16]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	dc20      	bgt.n	800e908 <_dtoa_r+0x940>
 800e8c6:	9300      	str	r3, [sp, #0]
 800e8c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8ca:	2b02      	cmp	r3, #2
 800e8cc:	dd1e      	ble.n	800e90c <_dtoa_r+0x944>
 800e8ce:	9b00      	ldr	r3, [sp, #0]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	f47f aec0 	bne.w	800e656 <_dtoa_r+0x68e>
 800e8d6:	4621      	mov	r1, r4
 800e8d8:	2205      	movs	r2, #5
 800e8da:	4658      	mov	r0, fp
 800e8dc:	f000 f9e4 	bl	800eca8 <__multadd>
 800e8e0:	4601      	mov	r1, r0
 800e8e2:	4604      	mov	r4, r0
 800e8e4:	4648      	mov	r0, r9
 800e8e6:	f000 fc41 	bl	800f16c <__mcmp>
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	f77f aeb3 	ble.w	800e656 <_dtoa_r+0x68e>
 800e8f0:	4656      	mov	r6, sl
 800e8f2:	2331      	movs	r3, #49	@ 0x31
 800e8f4:	f806 3b01 	strb.w	r3, [r6], #1
 800e8f8:	9b04      	ldr	r3, [sp, #16]
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	9304      	str	r3, [sp, #16]
 800e8fe:	e6ae      	b.n	800e65e <_dtoa_r+0x696>
 800e900:	9c07      	ldr	r4, [sp, #28]
 800e902:	9704      	str	r7, [sp, #16]
 800e904:	4625      	mov	r5, r4
 800e906:	e7f3      	b.n	800e8f0 <_dtoa_r+0x928>
 800e908:	9b07      	ldr	r3, [sp, #28]
 800e90a:	9300      	str	r3, [sp, #0]
 800e90c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e90e:	2b00      	cmp	r3, #0
 800e910:	f000 8104 	beq.w	800eb1c <_dtoa_r+0xb54>
 800e914:	2e00      	cmp	r6, #0
 800e916:	dd05      	ble.n	800e924 <_dtoa_r+0x95c>
 800e918:	4629      	mov	r1, r5
 800e91a:	4632      	mov	r2, r6
 800e91c:	4658      	mov	r0, fp
 800e91e:	f000 fbb9 	bl	800f094 <__lshift>
 800e922:	4605      	mov	r5, r0
 800e924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e926:	2b00      	cmp	r3, #0
 800e928:	d05a      	beq.n	800e9e0 <_dtoa_r+0xa18>
 800e92a:	6869      	ldr	r1, [r5, #4]
 800e92c:	4658      	mov	r0, fp
 800e92e:	f000 f959 	bl	800ebe4 <_Balloc>
 800e932:	4606      	mov	r6, r0
 800e934:	b928      	cbnz	r0, 800e942 <_dtoa_r+0x97a>
 800e936:	4b84      	ldr	r3, [pc, #528]	@ (800eb48 <_dtoa_r+0xb80>)
 800e938:	4602      	mov	r2, r0
 800e93a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e93e:	f7ff bb5a 	b.w	800dff6 <_dtoa_r+0x2e>
 800e942:	692a      	ldr	r2, [r5, #16]
 800e944:	3202      	adds	r2, #2
 800e946:	0092      	lsls	r2, r2, #2
 800e948:	f105 010c 	add.w	r1, r5, #12
 800e94c:	300c      	adds	r0, #12
 800e94e:	f7ff fa80 	bl	800de52 <memcpy>
 800e952:	2201      	movs	r2, #1
 800e954:	4631      	mov	r1, r6
 800e956:	4658      	mov	r0, fp
 800e958:	f000 fb9c 	bl	800f094 <__lshift>
 800e95c:	f10a 0301 	add.w	r3, sl, #1
 800e960:	9307      	str	r3, [sp, #28]
 800e962:	9b00      	ldr	r3, [sp, #0]
 800e964:	4453      	add	r3, sl
 800e966:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e968:	9b02      	ldr	r3, [sp, #8]
 800e96a:	f003 0301 	and.w	r3, r3, #1
 800e96e:	462f      	mov	r7, r5
 800e970:	930a      	str	r3, [sp, #40]	@ 0x28
 800e972:	4605      	mov	r5, r0
 800e974:	9b07      	ldr	r3, [sp, #28]
 800e976:	4621      	mov	r1, r4
 800e978:	3b01      	subs	r3, #1
 800e97a:	4648      	mov	r0, r9
 800e97c:	9300      	str	r3, [sp, #0]
 800e97e:	f7ff fa9b 	bl	800deb8 <quorem>
 800e982:	4639      	mov	r1, r7
 800e984:	9002      	str	r0, [sp, #8]
 800e986:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e98a:	4648      	mov	r0, r9
 800e98c:	f000 fbee 	bl	800f16c <__mcmp>
 800e990:	462a      	mov	r2, r5
 800e992:	9008      	str	r0, [sp, #32]
 800e994:	4621      	mov	r1, r4
 800e996:	4658      	mov	r0, fp
 800e998:	f000 fc04 	bl	800f1a4 <__mdiff>
 800e99c:	68c2      	ldr	r2, [r0, #12]
 800e99e:	4606      	mov	r6, r0
 800e9a0:	bb02      	cbnz	r2, 800e9e4 <_dtoa_r+0xa1c>
 800e9a2:	4601      	mov	r1, r0
 800e9a4:	4648      	mov	r0, r9
 800e9a6:	f000 fbe1 	bl	800f16c <__mcmp>
 800e9aa:	4602      	mov	r2, r0
 800e9ac:	4631      	mov	r1, r6
 800e9ae:	4658      	mov	r0, fp
 800e9b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e9b2:	f000 f957 	bl	800ec64 <_Bfree>
 800e9b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9ba:	9e07      	ldr	r6, [sp, #28]
 800e9bc:	ea43 0102 	orr.w	r1, r3, r2
 800e9c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9c2:	4319      	orrs	r1, r3
 800e9c4:	d110      	bne.n	800e9e8 <_dtoa_r+0xa20>
 800e9c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e9ca:	d029      	beq.n	800ea20 <_dtoa_r+0xa58>
 800e9cc:	9b08      	ldr	r3, [sp, #32]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	dd02      	ble.n	800e9d8 <_dtoa_r+0xa10>
 800e9d2:	9b02      	ldr	r3, [sp, #8]
 800e9d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e9d8:	9b00      	ldr	r3, [sp, #0]
 800e9da:	f883 8000 	strb.w	r8, [r3]
 800e9de:	e63f      	b.n	800e660 <_dtoa_r+0x698>
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	e7bb      	b.n	800e95c <_dtoa_r+0x994>
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	e7e1      	b.n	800e9ac <_dtoa_r+0x9e4>
 800e9e8:	9b08      	ldr	r3, [sp, #32]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	db04      	blt.n	800e9f8 <_dtoa_r+0xa30>
 800e9ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e9f0:	430b      	orrs	r3, r1
 800e9f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e9f4:	430b      	orrs	r3, r1
 800e9f6:	d120      	bne.n	800ea3a <_dtoa_r+0xa72>
 800e9f8:	2a00      	cmp	r2, #0
 800e9fa:	dded      	ble.n	800e9d8 <_dtoa_r+0xa10>
 800e9fc:	4649      	mov	r1, r9
 800e9fe:	2201      	movs	r2, #1
 800ea00:	4658      	mov	r0, fp
 800ea02:	f000 fb47 	bl	800f094 <__lshift>
 800ea06:	4621      	mov	r1, r4
 800ea08:	4681      	mov	r9, r0
 800ea0a:	f000 fbaf 	bl	800f16c <__mcmp>
 800ea0e:	2800      	cmp	r0, #0
 800ea10:	dc03      	bgt.n	800ea1a <_dtoa_r+0xa52>
 800ea12:	d1e1      	bne.n	800e9d8 <_dtoa_r+0xa10>
 800ea14:	f018 0f01 	tst.w	r8, #1
 800ea18:	d0de      	beq.n	800e9d8 <_dtoa_r+0xa10>
 800ea1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ea1e:	d1d8      	bne.n	800e9d2 <_dtoa_r+0xa0a>
 800ea20:	9a00      	ldr	r2, [sp, #0]
 800ea22:	2339      	movs	r3, #57	@ 0x39
 800ea24:	7013      	strb	r3, [r2, #0]
 800ea26:	4633      	mov	r3, r6
 800ea28:	461e      	mov	r6, r3
 800ea2a:	3b01      	subs	r3, #1
 800ea2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ea30:	2a39      	cmp	r2, #57	@ 0x39
 800ea32:	d052      	beq.n	800eada <_dtoa_r+0xb12>
 800ea34:	3201      	adds	r2, #1
 800ea36:	701a      	strb	r2, [r3, #0]
 800ea38:	e612      	b.n	800e660 <_dtoa_r+0x698>
 800ea3a:	2a00      	cmp	r2, #0
 800ea3c:	dd07      	ble.n	800ea4e <_dtoa_r+0xa86>
 800ea3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ea42:	d0ed      	beq.n	800ea20 <_dtoa_r+0xa58>
 800ea44:	9a00      	ldr	r2, [sp, #0]
 800ea46:	f108 0301 	add.w	r3, r8, #1
 800ea4a:	7013      	strb	r3, [r2, #0]
 800ea4c:	e608      	b.n	800e660 <_dtoa_r+0x698>
 800ea4e:	9b07      	ldr	r3, [sp, #28]
 800ea50:	9a07      	ldr	r2, [sp, #28]
 800ea52:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ea56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d028      	beq.n	800eaae <_dtoa_r+0xae6>
 800ea5c:	4649      	mov	r1, r9
 800ea5e:	2300      	movs	r3, #0
 800ea60:	220a      	movs	r2, #10
 800ea62:	4658      	mov	r0, fp
 800ea64:	f000 f920 	bl	800eca8 <__multadd>
 800ea68:	42af      	cmp	r7, r5
 800ea6a:	4681      	mov	r9, r0
 800ea6c:	f04f 0300 	mov.w	r3, #0
 800ea70:	f04f 020a 	mov.w	r2, #10
 800ea74:	4639      	mov	r1, r7
 800ea76:	4658      	mov	r0, fp
 800ea78:	d107      	bne.n	800ea8a <_dtoa_r+0xac2>
 800ea7a:	f000 f915 	bl	800eca8 <__multadd>
 800ea7e:	4607      	mov	r7, r0
 800ea80:	4605      	mov	r5, r0
 800ea82:	9b07      	ldr	r3, [sp, #28]
 800ea84:	3301      	adds	r3, #1
 800ea86:	9307      	str	r3, [sp, #28]
 800ea88:	e774      	b.n	800e974 <_dtoa_r+0x9ac>
 800ea8a:	f000 f90d 	bl	800eca8 <__multadd>
 800ea8e:	4629      	mov	r1, r5
 800ea90:	4607      	mov	r7, r0
 800ea92:	2300      	movs	r3, #0
 800ea94:	220a      	movs	r2, #10
 800ea96:	4658      	mov	r0, fp
 800ea98:	f000 f906 	bl	800eca8 <__multadd>
 800ea9c:	4605      	mov	r5, r0
 800ea9e:	e7f0      	b.n	800ea82 <_dtoa_r+0xaba>
 800eaa0:	9b00      	ldr	r3, [sp, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	bfcc      	ite	gt
 800eaa6:	461e      	movgt	r6, r3
 800eaa8:	2601      	movle	r6, #1
 800eaaa:	4456      	add	r6, sl
 800eaac:	2700      	movs	r7, #0
 800eaae:	4649      	mov	r1, r9
 800eab0:	2201      	movs	r2, #1
 800eab2:	4658      	mov	r0, fp
 800eab4:	f000 faee 	bl	800f094 <__lshift>
 800eab8:	4621      	mov	r1, r4
 800eaba:	4681      	mov	r9, r0
 800eabc:	f000 fb56 	bl	800f16c <__mcmp>
 800eac0:	2800      	cmp	r0, #0
 800eac2:	dcb0      	bgt.n	800ea26 <_dtoa_r+0xa5e>
 800eac4:	d102      	bne.n	800eacc <_dtoa_r+0xb04>
 800eac6:	f018 0f01 	tst.w	r8, #1
 800eaca:	d1ac      	bne.n	800ea26 <_dtoa_r+0xa5e>
 800eacc:	4633      	mov	r3, r6
 800eace:	461e      	mov	r6, r3
 800ead0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ead4:	2a30      	cmp	r2, #48	@ 0x30
 800ead6:	d0fa      	beq.n	800eace <_dtoa_r+0xb06>
 800ead8:	e5c2      	b.n	800e660 <_dtoa_r+0x698>
 800eada:	459a      	cmp	sl, r3
 800eadc:	d1a4      	bne.n	800ea28 <_dtoa_r+0xa60>
 800eade:	9b04      	ldr	r3, [sp, #16]
 800eae0:	3301      	adds	r3, #1
 800eae2:	9304      	str	r3, [sp, #16]
 800eae4:	2331      	movs	r3, #49	@ 0x31
 800eae6:	f88a 3000 	strb.w	r3, [sl]
 800eaea:	e5b9      	b.n	800e660 <_dtoa_r+0x698>
 800eaec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eaee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800eb4c <_dtoa_r+0xb84>
 800eaf2:	b11b      	cbz	r3, 800eafc <_dtoa_r+0xb34>
 800eaf4:	f10a 0308 	add.w	r3, sl, #8
 800eaf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800eafa:	6013      	str	r3, [r2, #0]
 800eafc:	4650      	mov	r0, sl
 800eafe:	b019      	add	sp, #100	@ 0x64
 800eb00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb06:	2b01      	cmp	r3, #1
 800eb08:	f77f ae37 	ble.w	800e77a <_dtoa_r+0x7b2>
 800eb0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb10:	2001      	movs	r0, #1
 800eb12:	e655      	b.n	800e7c0 <_dtoa_r+0x7f8>
 800eb14:	9b00      	ldr	r3, [sp, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	f77f aed6 	ble.w	800e8c8 <_dtoa_r+0x900>
 800eb1c:	4656      	mov	r6, sl
 800eb1e:	4621      	mov	r1, r4
 800eb20:	4648      	mov	r0, r9
 800eb22:	f7ff f9c9 	bl	800deb8 <quorem>
 800eb26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eb2a:	f806 8b01 	strb.w	r8, [r6], #1
 800eb2e:	9b00      	ldr	r3, [sp, #0]
 800eb30:	eba6 020a 	sub.w	r2, r6, sl
 800eb34:	4293      	cmp	r3, r2
 800eb36:	ddb3      	ble.n	800eaa0 <_dtoa_r+0xad8>
 800eb38:	4649      	mov	r1, r9
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	220a      	movs	r2, #10
 800eb3e:	4658      	mov	r0, fp
 800eb40:	f000 f8b2 	bl	800eca8 <__multadd>
 800eb44:	4681      	mov	r9, r0
 800eb46:	e7ea      	b.n	800eb1e <_dtoa_r+0xb56>
 800eb48:	080114d2 	.word	0x080114d2
 800eb4c:	08011456 	.word	0x08011456

0800eb50 <_free_r>:
 800eb50:	b538      	push	{r3, r4, r5, lr}
 800eb52:	4605      	mov	r5, r0
 800eb54:	2900      	cmp	r1, #0
 800eb56:	d041      	beq.n	800ebdc <_free_r+0x8c>
 800eb58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb5c:	1f0c      	subs	r4, r1, #4
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	bfb8      	it	lt
 800eb62:	18e4      	addlt	r4, r4, r3
 800eb64:	f7fd ffa6 	bl	800cab4 <__malloc_lock>
 800eb68:	4a1d      	ldr	r2, [pc, #116]	@ (800ebe0 <_free_r+0x90>)
 800eb6a:	6813      	ldr	r3, [r2, #0]
 800eb6c:	b933      	cbnz	r3, 800eb7c <_free_r+0x2c>
 800eb6e:	6063      	str	r3, [r4, #4]
 800eb70:	6014      	str	r4, [r2, #0]
 800eb72:	4628      	mov	r0, r5
 800eb74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb78:	f7fd bfa2 	b.w	800cac0 <__malloc_unlock>
 800eb7c:	42a3      	cmp	r3, r4
 800eb7e:	d908      	bls.n	800eb92 <_free_r+0x42>
 800eb80:	6820      	ldr	r0, [r4, #0]
 800eb82:	1821      	adds	r1, r4, r0
 800eb84:	428b      	cmp	r3, r1
 800eb86:	bf01      	itttt	eq
 800eb88:	6819      	ldreq	r1, [r3, #0]
 800eb8a:	685b      	ldreq	r3, [r3, #4]
 800eb8c:	1809      	addeq	r1, r1, r0
 800eb8e:	6021      	streq	r1, [r4, #0]
 800eb90:	e7ed      	b.n	800eb6e <_free_r+0x1e>
 800eb92:	461a      	mov	r2, r3
 800eb94:	685b      	ldr	r3, [r3, #4]
 800eb96:	b10b      	cbz	r3, 800eb9c <_free_r+0x4c>
 800eb98:	42a3      	cmp	r3, r4
 800eb9a:	d9fa      	bls.n	800eb92 <_free_r+0x42>
 800eb9c:	6811      	ldr	r1, [r2, #0]
 800eb9e:	1850      	adds	r0, r2, r1
 800eba0:	42a0      	cmp	r0, r4
 800eba2:	d10b      	bne.n	800ebbc <_free_r+0x6c>
 800eba4:	6820      	ldr	r0, [r4, #0]
 800eba6:	4401      	add	r1, r0
 800eba8:	1850      	adds	r0, r2, r1
 800ebaa:	4283      	cmp	r3, r0
 800ebac:	6011      	str	r1, [r2, #0]
 800ebae:	d1e0      	bne.n	800eb72 <_free_r+0x22>
 800ebb0:	6818      	ldr	r0, [r3, #0]
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	6053      	str	r3, [r2, #4]
 800ebb6:	4408      	add	r0, r1
 800ebb8:	6010      	str	r0, [r2, #0]
 800ebba:	e7da      	b.n	800eb72 <_free_r+0x22>
 800ebbc:	d902      	bls.n	800ebc4 <_free_r+0x74>
 800ebbe:	230c      	movs	r3, #12
 800ebc0:	602b      	str	r3, [r5, #0]
 800ebc2:	e7d6      	b.n	800eb72 <_free_r+0x22>
 800ebc4:	6820      	ldr	r0, [r4, #0]
 800ebc6:	1821      	adds	r1, r4, r0
 800ebc8:	428b      	cmp	r3, r1
 800ebca:	bf04      	itt	eq
 800ebcc:	6819      	ldreq	r1, [r3, #0]
 800ebce:	685b      	ldreq	r3, [r3, #4]
 800ebd0:	6063      	str	r3, [r4, #4]
 800ebd2:	bf04      	itt	eq
 800ebd4:	1809      	addeq	r1, r1, r0
 800ebd6:	6021      	streq	r1, [r4, #0]
 800ebd8:	6054      	str	r4, [r2, #4]
 800ebda:	e7ca      	b.n	800eb72 <_free_r+0x22>
 800ebdc:	bd38      	pop	{r3, r4, r5, pc}
 800ebde:	bf00      	nop
 800ebe0:	20005428 	.word	0x20005428

0800ebe4 <_Balloc>:
 800ebe4:	b570      	push	{r4, r5, r6, lr}
 800ebe6:	69c6      	ldr	r6, [r0, #28]
 800ebe8:	4604      	mov	r4, r0
 800ebea:	460d      	mov	r5, r1
 800ebec:	b976      	cbnz	r6, 800ec0c <_Balloc+0x28>
 800ebee:	2010      	movs	r0, #16
 800ebf0:	f7fd feb6 	bl	800c960 <malloc>
 800ebf4:	4602      	mov	r2, r0
 800ebf6:	61e0      	str	r0, [r4, #28]
 800ebf8:	b920      	cbnz	r0, 800ec04 <_Balloc+0x20>
 800ebfa:	4b18      	ldr	r3, [pc, #96]	@ (800ec5c <_Balloc+0x78>)
 800ebfc:	4818      	ldr	r0, [pc, #96]	@ (800ec60 <_Balloc+0x7c>)
 800ebfe:	216b      	movs	r1, #107	@ 0x6b
 800ec00:	f7ff f93c 	bl	800de7c <__assert_func>
 800ec04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec08:	6006      	str	r6, [r0, #0]
 800ec0a:	60c6      	str	r6, [r0, #12]
 800ec0c:	69e6      	ldr	r6, [r4, #28]
 800ec0e:	68f3      	ldr	r3, [r6, #12]
 800ec10:	b183      	cbz	r3, 800ec34 <_Balloc+0x50>
 800ec12:	69e3      	ldr	r3, [r4, #28]
 800ec14:	68db      	ldr	r3, [r3, #12]
 800ec16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec1a:	b9b8      	cbnz	r0, 800ec4c <_Balloc+0x68>
 800ec1c:	2101      	movs	r1, #1
 800ec1e:	fa01 f605 	lsl.w	r6, r1, r5
 800ec22:	1d72      	adds	r2, r6, #5
 800ec24:	0092      	lsls	r2, r2, #2
 800ec26:	4620      	mov	r0, r4
 800ec28:	f7fd fe86 	bl	800c938 <_calloc_r>
 800ec2c:	b160      	cbz	r0, 800ec48 <_Balloc+0x64>
 800ec2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec32:	e00e      	b.n	800ec52 <_Balloc+0x6e>
 800ec34:	2221      	movs	r2, #33	@ 0x21
 800ec36:	2104      	movs	r1, #4
 800ec38:	4620      	mov	r0, r4
 800ec3a:	f7fd fe7d 	bl	800c938 <_calloc_r>
 800ec3e:	69e3      	ldr	r3, [r4, #28]
 800ec40:	60f0      	str	r0, [r6, #12]
 800ec42:	68db      	ldr	r3, [r3, #12]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d1e4      	bne.n	800ec12 <_Balloc+0x2e>
 800ec48:	2000      	movs	r0, #0
 800ec4a:	bd70      	pop	{r4, r5, r6, pc}
 800ec4c:	6802      	ldr	r2, [r0, #0]
 800ec4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec52:	2300      	movs	r3, #0
 800ec54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec58:	e7f7      	b.n	800ec4a <_Balloc+0x66>
 800ec5a:	bf00      	nop
 800ec5c:	08011463 	.word	0x08011463
 800ec60:	080114e3 	.word	0x080114e3

0800ec64 <_Bfree>:
 800ec64:	b570      	push	{r4, r5, r6, lr}
 800ec66:	69c6      	ldr	r6, [r0, #28]
 800ec68:	4605      	mov	r5, r0
 800ec6a:	460c      	mov	r4, r1
 800ec6c:	b976      	cbnz	r6, 800ec8c <_Bfree+0x28>
 800ec6e:	2010      	movs	r0, #16
 800ec70:	f7fd fe76 	bl	800c960 <malloc>
 800ec74:	4602      	mov	r2, r0
 800ec76:	61e8      	str	r0, [r5, #28]
 800ec78:	b920      	cbnz	r0, 800ec84 <_Bfree+0x20>
 800ec7a:	4b09      	ldr	r3, [pc, #36]	@ (800eca0 <_Bfree+0x3c>)
 800ec7c:	4809      	ldr	r0, [pc, #36]	@ (800eca4 <_Bfree+0x40>)
 800ec7e:	218f      	movs	r1, #143	@ 0x8f
 800ec80:	f7ff f8fc 	bl	800de7c <__assert_func>
 800ec84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec88:	6006      	str	r6, [r0, #0]
 800ec8a:	60c6      	str	r6, [r0, #12]
 800ec8c:	b13c      	cbz	r4, 800ec9e <_Bfree+0x3a>
 800ec8e:	69eb      	ldr	r3, [r5, #28]
 800ec90:	6862      	ldr	r2, [r4, #4]
 800ec92:	68db      	ldr	r3, [r3, #12]
 800ec94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec98:	6021      	str	r1, [r4, #0]
 800ec9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ec9e:	bd70      	pop	{r4, r5, r6, pc}
 800eca0:	08011463 	.word	0x08011463
 800eca4:	080114e3 	.word	0x080114e3

0800eca8 <__multadd>:
 800eca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecac:	690d      	ldr	r5, [r1, #16]
 800ecae:	4607      	mov	r7, r0
 800ecb0:	460c      	mov	r4, r1
 800ecb2:	461e      	mov	r6, r3
 800ecb4:	f101 0c14 	add.w	ip, r1, #20
 800ecb8:	2000      	movs	r0, #0
 800ecba:	f8dc 3000 	ldr.w	r3, [ip]
 800ecbe:	b299      	uxth	r1, r3
 800ecc0:	fb02 6101 	mla	r1, r2, r1, r6
 800ecc4:	0c1e      	lsrs	r6, r3, #16
 800ecc6:	0c0b      	lsrs	r3, r1, #16
 800ecc8:	fb02 3306 	mla	r3, r2, r6, r3
 800eccc:	b289      	uxth	r1, r1
 800ecce:	3001      	adds	r0, #1
 800ecd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ecd4:	4285      	cmp	r5, r0
 800ecd6:	f84c 1b04 	str.w	r1, [ip], #4
 800ecda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ecde:	dcec      	bgt.n	800ecba <__multadd+0x12>
 800ece0:	b30e      	cbz	r6, 800ed26 <__multadd+0x7e>
 800ece2:	68a3      	ldr	r3, [r4, #8]
 800ece4:	42ab      	cmp	r3, r5
 800ece6:	dc19      	bgt.n	800ed1c <__multadd+0x74>
 800ece8:	6861      	ldr	r1, [r4, #4]
 800ecea:	4638      	mov	r0, r7
 800ecec:	3101      	adds	r1, #1
 800ecee:	f7ff ff79 	bl	800ebe4 <_Balloc>
 800ecf2:	4680      	mov	r8, r0
 800ecf4:	b928      	cbnz	r0, 800ed02 <__multadd+0x5a>
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	4b0c      	ldr	r3, [pc, #48]	@ (800ed2c <__multadd+0x84>)
 800ecfa:	480d      	ldr	r0, [pc, #52]	@ (800ed30 <__multadd+0x88>)
 800ecfc:	21ba      	movs	r1, #186	@ 0xba
 800ecfe:	f7ff f8bd 	bl	800de7c <__assert_func>
 800ed02:	6922      	ldr	r2, [r4, #16]
 800ed04:	3202      	adds	r2, #2
 800ed06:	f104 010c 	add.w	r1, r4, #12
 800ed0a:	0092      	lsls	r2, r2, #2
 800ed0c:	300c      	adds	r0, #12
 800ed0e:	f7ff f8a0 	bl	800de52 <memcpy>
 800ed12:	4621      	mov	r1, r4
 800ed14:	4638      	mov	r0, r7
 800ed16:	f7ff ffa5 	bl	800ec64 <_Bfree>
 800ed1a:	4644      	mov	r4, r8
 800ed1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed20:	3501      	adds	r5, #1
 800ed22:	615e      	str	r6, [r3, #20]
 800ed24:	6125      	str	r5, [r4, #16]
 800ed26:	4620      	mov	r0, r4
 800ed28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed2c:	080114d2 	.word	0x080114d2
 800ed30:	080114e3 	.word	0x080114e3

0800ed34 <__s2b>:
 800ed34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed38:	460c      	mov	r4, r1
 800ed3a:	4615      	mov	r5, r2
 800ed3c:	461f      	mov	r7, r3
 800ed3e:	2209      	movs	r2, #9
 800ed40:	3308      	adds	r3, #8
 800ed42:	4606      	mov	r6, r0
 800ed44:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed48:	2100      	movs	r1, #0
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	db09      	blt.n	800ed64 <__s2b+0x30>
 800ed50:	4630      	mov	r0, r6
 800ed52:	f7ff ff47 	bl	800ebe4 <_Balloc>
 800ed56:	b940      	cbnz	r0, 800ed6a <__s2b+0x36>
 800ed58:	4602      	mov	r2, r0
 800ed5a:	4b19      	ldr	r3, [pc, #100]	@ (800edc0 <__s2b+0x8c>)
 800ed5c:	4819      	ldr	r0, [pc, #100]	@ (800edc4 <__s2b+0x90>)
 800ed5e:	21d3      	movs	r1, #211	@ 0xd3
 800ed60:	f7ff f88c 	bl	800de7c <__assert_func>
 800ed64:	0052      	lsls	r2, r2, #1
 800ed66:	3101      	adds	r1, #1
 800ed68:	e7f0      	b.n	800ed4c <__s2b+0x18>
 800ed6a:	9b08      	ldr	r3, [sp, #32]
 800ed6c:	6143      	str	r3, [r0, #20]
 800ed6e:	2d09      	cmp	r5, #9
 800ed70:	f04f 0301 	mov.w	r3, #1
 800ed74:	6103      	str	r3, [r0, #16]
 800ed76:	dd16      	ble.n	800eda6 <__s2b+0x72>
 800ed78:	f104 0909 	add.w	r9, r4, #9
 800ed7c:	46c8      	mov	r8, r9
 800ed7e:	442c      	add	r4, r5
 800ed80:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ed84:	4601      	mov	r1, r0
 800ed86:	3b30      	subs	r3, #48	@ 0x30
 800ed88:	220a      	movs	r2, #10
 800ed8a:	4630      	mov	r0, r6
 800ed8c:	f7ff ff8c 	bl	800eca8 <__multadd>
 800ed90:	45a0      	cmp	r8, r4
 800ed92:	d1f5      	bne.n	800ed80 <__s2b+0x4c>
 800ed94:	f1a5 0408 	sub.w	r4, r5, #8
 800ed98:	444c      	add	r4, r9
 800ed9a:	1b2d      	subs	r5, r5, r4
 800ed9c:	1963      	adds	r3, r4, r5
 800ed9e:	42bb      	cmp	r3, r7
 800eda0:	db04      	blt.n	800edac <__s2b+0x78>
 800eda2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eda6:	340a      	adds	r4, #10
 800eda8:	2509      	movs	r5, #9
 800edaa:	e7f6      	b.n	800ed9a <__s2b+0x66>
 800edac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800edb0:	4601      	mov	r1, r0
 800edb2:	3b30      	subs	r3, #48	@ 0x30
 800edb4:	220a      	movs	r2, #10
 800edb6:	4630      	mov	r0, r6
 800edb8:	f7ff ff76 	bl	800eca8 <__multadd>
 800edbc:	e7ee      	b.n	800ed9c <__s2b+0x68>
 800edbe:	bf00      	nop
 800edc0:	080114d2 	.word	0x080114d2
 800edc4:	080114e3 	.word	0x080114e3

0800edc8 <__hi0bits>:
 800edc8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800edcc:	4603      	mov	r3, r0
 800edce:	bf36      	itet	cc
 800edd0:	0403      	lslcc	r3, r0, #16
 800edd2:	2000      	movcs	r0, #0
 800edd4:	2010      	movcc	r0, #16
 800edd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800edda:	bf3c      	itt	cc
 800eddc:	021b      	lslcc	r3, r3, #8
 800edde:	3008      	addcc	r0, #8
 800ede0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ede4:	bf3c      	itt	cc
 800ede6:	011b      	lslcc	r3, r3, #4
 800ede8:	3004      	addcc	r0, #4
 800edea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800edee:	bf3c      	itt	cc
 800edf0:	009b      	lslcc	r3, r3, #2
 800edf2:	3002      	addcc	r0, #2
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	db05      	blt.n	800ee04 <__hi0bits+0x3c>
 800edf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800edfc:	f100 0001 	add.w	r0, r0, #1
 800ee00:	bf08      	it	eq
 800ee02:	2020      	moveq	r0, #32
 800ee04:	4770      	bx	lr

0800ee06 <__lo0bits>:
 800ee06:	6803      	ldr	r3, [r0, #0]
 800ee08:	4602      	mov	r2, r0
 800ee0a:	f013 0007 	ands.w	r0, r3, #7
 800ee0e:	d00b      	beq.n	800ee28 <__lo0bits+0x22>
 800ee10:	07d9      	lsls	r1, r3, #31
 800ee12:	d421      	bmi.n	800ee58 <__lo0bits+0x52>
 800ee14:	0798      	lsls	r0, r3, #30
 800ee16:	bf49      	itett	mi
 800ee18:	085b      	lsrmi	r3, r3, #1
 800ee1a:	089b      	lsrpl	r3, r3, #2
 800ee1c:	2001      	movmi	r0, #1
 800ee1e:	6013      	strmi	r3, [r2, #0]
 800ee20:	bf5c      	itt	pl
 800ee22:	6013      	strpl	r3, [r2, #0]
 800ee24:	2002      	movpl	r0, #2
 800ee26:	4770      	bx	lr
 800ee28:	b299      	uxth	r1, r3
 800ee2a:	b909      	cbnz	r1, 800ee30 <__lo0bits+0x2a>
 800ee2c:	0c1b      	lsrs	r3, r3, #16
 800ee2e:	2010      	movs	r0, #16
 800ee30:	b2d9      	uxtb	r1, r3
 800ee32:	b909      	cbnz	r1, 800ee38 <__lo0bits+0x32>
 800ee34:	3008      	adds	r0, #8
 800ee36:	0a1b      	lsrs	r3, r3, #8
 800ee38:	0719      	lsls	r1, r3, #28
 800ee3a:	bf04      	itt	eq
 800ee3c:	091b      	lsreq	r3, r3, #4
 800ee3e:	3004      	addeq	r0, #4
 800ee40:	0799      	lsls	r1, r3, #30
 800ee42:	bf04      	itt	eq
 800ee44:	089b      	lsreq	r3, r3, #2
 800ee46:	3002      	addeq	r0, #2
 800ee48:	07d9      	lsls	r1, r3, #31
 800ee4a:	d403      	bmi.n	800ee54 <__lo0bits+0x4e>
 800ee4c:	085b      	lsrs	r3, r3, #1
 800ee4e:	f100 0001 	add.w	r0, r0, #1
 800ee52:	d003      	beq.n	800ee5c <__lo0bits+0x56>
 800ee54:	6013      	str	r3, [r2, #0]
 800ee56:	4770      	bx	lr
 800ee58:	2000      	movs	r0, #0
 800ee5a:	4770      	bx	lr
 800ee5c:	2020      	movs	r0, #32
 800ee5e:	4770      	bx	lr

0800ee60 <__i2b>:
 800ee60:	b510      	push	{r4, lr}
 800ee62:	460c      	mov	r4, r1
 800ee64:	2101      	movs	r1, #1
 800ee66:	f7ff febd 	bl	800ebe4 <_Balloc>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	b928      	cbnz	r0, 800ee7a <__i2b+0x1a>
 800ee6e:	4b05      	ldr	r3, [pc, #20]	@ (800ee84 <__i2b+0x24>)
 800ee70:	4805      	ldr	r0, [pc, #20]	@ (800ee88 <__i2b+0x28>)
 800ee72:	f240 1145 	movw	r1, #325	@ 0x145
 800ee76:	f7ff f801 	bl	800de7c <__assert_func>
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	6144      	str	r4, [r0, #20]
 800ee7e:	6103      	str	r3, [r0, #16]
 800ee80:	bd10      	pop	{r4, pc}
 800ee82:	bf00      	nop
 800ee84:	080114d2 	.word	0x080114d2
 800ee88:	080114e3 	.word	0x080114e3

0800ee8c <__multiply>:
 800ee8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee90:	4614      	mov	r4, r2
 800ee92:	690a      	ldr	r2, [r1, #16]
 800ee94:	6923      	ldr	r3, [r4, #16]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	bfa8      	it	ge
 800ee9a:	4623      	movge	r3, r4
 800ee9c:	460f      	mov	r7, r1
 800ee9e:	bfa4      	itt	ge
 800eea0:	460c      	movge	r4, r1
 800eea2:	461f      	movge	r7, r3
 800eea4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800eea8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800eeac:	68a3      	ldr	r3, [r4, #8]
 800eeae:	6861      	ldr	r1, [r4, #4]
 800eeb0:	eb0a 0609 	add.w	r6, sl, r9
 800eeb4:	42b3      	cmp	r3, r6
 800eeb6:	b085      	sub	sp, #20
 800eeb8:	bfb8      	it	lt
 800eeba:	3101      	addlt	r1, #1
 800eebc:	f7ff fe92 	bl	800ebe4 <_Balloc>
 800eec0:	b930      	cbnz	r0, 800eed0 <__multiply+0x44>
 800eec2:	4602      	mov	r2, r0
 800eec4:	4b44      	ldr	r3, [pc, #272]	@ (800efd8 <__multiply+0x14c>)
 800eec6:	4845      	ldr	r0, [pc, #276]	@ (800efdc <__multiply+0x150>)
 800eec8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eecc:	f7fe ffd6 	bl	800de7c <__assert_func>
 800eed0:	f100 0514 	add.w	r5, r0, #20
 800eed4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eed8:	462b      	mov	r3, r5
 800eeda:	2200      	movs	r2, #0
 800eedc:	4543      	cmp	r3, r8
 800eede:	d321      	bcc.n	800ef24 <__multiply+0x98>
 800eee0:	f107 0114 	add.w	r1, r7, #20
 800eee4:	f104 0214 	add.w	r2, r4, #20
 800eee8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800eeec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800eef0:	9302      	str	r3, [sp, #8]
 800eef2:	1b13      	subs	r3, r2, r4
 800eef4:	3b15      	subs	r3, #21
 800eef6:	f023 0303 	bic.w	r3, r3, #3
 800eefa:	3304      	adds	r3, #4
 800eefc:	f104 0715 	add.w	r7, r4, #21
 800ef00:	42ba      	cmp	r2, r7
 800ef02:	bf38      	it	cc
 800ef04:	2304      	movcc	r3, #4
 800ef06:	9301      	str	r3, [sp, #4]
 800ef08:	9b02      	ldr	r3, [sp, #8]
 800ef0a:	9103      	str	r1, [sp, #12]
 800ef0c:	428b      	cmp	r3, r1
 800ef0e:	d80c      	bhi.n	800ef2a <__multiply+0x9e>
 800ef10:	2e00      	cmp	r6, #0
 800ef12:	dd03      	ble.n	800ef1c <__multiply+0x90>
 800ef14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d05b      	beq.n	800efd4 <__multiply+0x148>
 800ef1c:	6106      	str	r6, [r0, #16]
 800ef1e:	b005      	add	sp, #20
 800ef20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef24:	f843 2b04 	str.w	r2, [r3], #4
 800ef28:	e7d8      	b.n	800eedc <__multiply+0x50>
 800ef2a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ef2e:	f1ba 0f00 	cmp.w	sl, #0
 800ef32:	d024      	beq.n	800ef7e <__multiply+0xf2>
 800ef34:	f104 0e14 	add.w	lr, r4, #20
 800ef38:	46a9      	mov	r9, r5
 800ef3a:	f04f 0c00 	mov.w	ip, #0
 800ef3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ef42:	f8d9 3000 	ldr.w	r3, [r9]
 800ef46:	fa1f fb87 	uxth.w	fp, r7
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ef50:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ef54:	f8d9 7000 	ldr.w	r7, [r9]
 800ef58:	4463      	add	r3, ip
 800ef5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ef5e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ef62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ef66:	b29b      	uxth	r3, r3
 800ef68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ef6c:	4572      	cmp	r2, lr
 800ef6e:	f849 3b04 	str.w	r3, [r9], #4
 800ef72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ef76:	d8e2      	bhi.n	800ef3e <__multiply+0xb2>
 800ef78:	9b01      	ldr	r3, [sp, #4]
 800ef7a:	f845 c003 	str.w	ip, [r5, r3]
 800ef7e:	9b03      	ldr	r3, [sp, #12]
 800ef80:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ef84:	3104      	adds	r1, #4
 800ef86:	f1b9 0f00 	cmp.w	r9, #0
 800ef8a:	d021      	beq.n	800efd0 <__multiply+0x144>
 800ef8c:	682b      	ldr	r3, [r5, #0]
 800ef8e:	f104 0c14 	add.w	ip, r4, #20
 800ef92:	46ae      	mov	lr, r5
 800ef94:	f04f 0a00 	mov.w	sl, #0
 800ef98:	f8bc b000 	ldrh.w	fp, [ip]
 800ef9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800efa0:	fb09 770b 	mla	r7, r9, fp, r7
 800efa4:	4457      	add	r7, sl
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800efac:	f84e 3b04 	str.w	r3, [lr], #4
 800efb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800efb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800efb8:	f8be 3000 	ldrh.w	r3, [lr]
 800efbc:	fb09 330a 	mla	r3, r9, sl, r3
 800efc0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800efc4:	4562      	cmp	r2, ip
 800efc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800efca:	d8e5      	bhi.n	800ef98 <__multiply+0x10c>
 800efcc:	9f01      	ldr	r7, [sp, #4]
 800efce:	51eb      	str	r3, [r5, r7]
 800efd0:	3504      	adds	r5, #4
 800efd2:	e799      	b.n	800ef08 <__multiply+0x7c>
 800efd4:	3e01      	subs	r6, #1
 800efd6:	e79b      	b.n	800ef10 <__multiply+0x84>
 800efd8:	080114d2 	.word	0x080114d2
 800efdc:	080114e3 	.word	0x080114e3

0800efe0 <__pow5mult>:
 800efe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efe4:	4615      	mov	r5, r2
 800efe6:	f012 0203 	ands.w	r2, r2, #3
 800efea:	4607      	mov	r7, r0
 800efec:	460e      	mov	r6, r1
 800efee:	d007      	beq.n	800f000 <__pow5mult+0x20>
 800eff0:	4c25      	ldr	r4, [pc, #148]	@ (800f088 <__pow5mult+0xa8>)
 800eff2:	3a01      	subs	r2, #1
 800eff4:	2300      	movs	r3, #0
 800eff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800effa:	f7ff fe55 	bl	800eca8 <__multadd>
 800effe:	4606      	mov	r6, r0
 800f000:	10ad      	asrs	r5, r5, #2
 800f002:	d03d      	beq.n	800f080 <__pow5mult+0xa0>
 800f004:	69fc      	ldr	r4, [r7, #28]
 800f006:	b97c      	cbnz	r4, 800f028 <__pow5mult+0x48>
 800f008:	2010      	movs	r0, #16
 800f00a:	f7fd fca9 	bl	800c960 <malloc>
 800f00e:	4602      	mov	r2, r0
 800f010:	61f8      	str	r0, [r7, #28]
 800f012:	b928      	cbnz	r0, 800f020 <__pow5mult+0x40>
 800f014:	4b1d      	ldr	r3, [pc, #116]	@ (800f08c <__pow5mult+0xac>)
 800f016:	481e      	ldr	r0, [pc, #120]	@ (800f090 <__pow5mult+0xb0>)
 800f018:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f01c:	f7fe ff2e 	bl	800de7c <__assert_func>
 800f020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f024:	6004      	str	r4, [r0, #0]
 800f026:	60c4      	str	r4, [r0, #12]
 800f028:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f02c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f030:	b94c      	cbnz	r4, 800f046 <__pow5mult+0x66>
 800f032:	f240 2171 	movw	r1, #625	@ 0x271
 800f036:	4638      	mov	r0, r7
 800f038:	f7ff ff12 	bl	800ee60 <__i2b>
 800f03c:	2300      	movs	r3, #0
 800f03e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f042:	4604      	mov	r4, r0
 800f044:	6003      	str	r3, [r0, #0]
 800f046:	f04f 0900 	mov.w	r9, #0
 800f04a:	07eb      	lsls	r3, r5, #31
 800f04c:	d50a      	bpl.n	800f064 <__pow5mult+0x84>
 800f04e:	4631      	mov	r1, r6
 800f050:	4622      	mov	r2, r4
 800f052:	4638      	mov	r0, r7
 800f054:	f7ff ff1a 	bl	800ee8c <__multiply>
 800f058:	4631      	mov	r1, r6
 800f05a:	4680      	mov	r8, r0
 800f05c:	4638      	mov	r0, r7
 800f05e:	f7ff fe01 	bl	800ec64 <_Bfree>
 800f062:	4646      	mov	r6, r8
 800f064:	106d      	asrs	r5, r5, #1
 800f066:	d00b      	beq.n	800f080 <__pow5mult+0xa0>
 800f068:	6820      	ldr	r0, [r4, #0]
 800f06a:	b938      	cbnz	r0, 800f07c <__pow5mult+0x9c>
 800f06c:	4622      	mov	r2, r4
 800f06e:	4621      	mov	r1, r4
 800f070:	4638      	mov	r0, r7
 800f072:	f7ff ff0b 	bl	800ee8c <__multiply>
 800f076:	6020      	str	r0, [r4, #0]
 800f078:	f8c0 9000 	str.w	r9, [r0]
 800f07c:	4604      	mov	r4, r0
 800f07e:	e7e4      	b.n	800f04a <__pow5mult+0x6a>
 800f080:	4630      	mov	r0, r6
 800f082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f086:	bf00      	nop
 800f088:	0801153c 	.word	0x0801153c
 800f08c:	08011463 	.word	0x08011463
 800f090:	080114e3 	.word	0x080114e3

0800f094 <__lshift>:
 800f094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f098:	460c      	mov	r4, r1
 800f09a:	6849      	ldr	r1, [r1, #4]
 800f09c:	6923      	ldr	r3, [r4, #16]
 800f09e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f0a2:	68a3      	ldr	r3, [r4, #8]
 800f0a4:	4607      	mov	r7, r0
 800f0a6:	4691      	mov	r9, r2
 800f0a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f0ac:	f108 0601 	add.w	r6, r8, #1
 800f0b0:	42b3      	cmp	r3, r6
 800f0b2:	db0b      	blt.n	800f0cc <__lshift+0x38>
 800f0b4:	4638      	mov	r0, r7
 800f0b6:	f7ff fd95 	bl	800ebe4 <_Balloc>
 800f0ba:	4605      	mov	r5, r0
 800f0bc:	b948      	cbnz	r0, 800f0d2 <__lshift+0x3e>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	4b28      	ldr	r3, [pc, #160]	@ (800f164 <__lshift+0xd0>)
 800f0c2:	4829      	ldr	r0, [pc, #164]	@ (800f168 <__lshift+0xd4>)
 800f0c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f0c8:	f7fe fed8 	bl	800de7c <__assert_func>
 800f0cc:	3101      	adds	r1, #1
 800f0ce:	005b      	lsls	r3, r3, #1
 800f0d0:	e7ee      	b.n	800f0b0 <__lshift+0x1c>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	f100 0114 	add.w	r1, r0, #20
 800f0d8:	f100 0210 	add.w	r2, r0, #16
 800f0dc:	4618      	mov	r0, r3
 800f0de:	4553      	cmp	r3, sl
 800f0e0:	db33      	blt.n	800f14a <__lshift+0xb6>
 800f0e2:	6920      	ldr	r0, [r4, #16]
 800f0e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f0e8:	f104 0314 	add.w	r3, r4, #20
 800f0ec:	f019 091f 	ands.w	r9, r9, #31
 800f0f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f0f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f0f8:	d02b      	beq.n	800f152 <__lshift+0xbe>
 800f0fa:	f1c9 0e20 	rsb	lr, r9, #32
 800f0fe:	468a      	mov	sl, r1
 800f100:	2200      	movs	r2, #0
 800f102:	6818      	ldr	r0, [r3, #0]
 800f104:	fa00 f009 	lsl.w	r0, r0, r9
 800f108:	4310      	orrs	r0, r2
 800f10a:	f84a 0b04 	str.w	r0, [sl], #4
 800f10e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f112:	459c      	cmp	ip, r3
 800f114:	fa22 f20e 	lsr.w	r2, r2, lr
 800f118:	d8f3      	bhi.n	800f102 <__lshift+0x6e>
 800f11a:	ebac 0304 	sub.w	r3, ip, r4
 800f11e:	3b15      	subs	r3, #21
 800f120:	f023 0303 	bic.w	r3, r3, #3
 800f124:	3304      	adds	r3, #4
 800f126:	f104 0015 	add.w	r0, r4, #21
 800f12a:	4584      	cmp	ip, r0
 800f12c:	bf38      	it	cc
 800f12e:	2304      	movcc	r3, #4
 800f130:	50ca      	str	r2, [r1, r3]
 800f132:	b10a      	cbz	r2, 800f138 <__lshift+0xa4>
 800f134:	f108 0602 	add.w	r6, r8, #2
 800f138:	3e01      	subs	r6, #1
 800f13a:	4638      	mov	r0, r7
 800f13c:	612e      	str	r6, [r5, #16]
 800f13e:	4621      	mov	r1, r4
 800f140:	f7ff fd90 	bl	800ec64 <_Bfree>
 800f144:	4628      	mov	r0, r5
 800f146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f14a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f14e:	3301      	adds	r3, #1
 800f150:	e7c5      	b.n	800f0de <__lshift+0x4a>
 800f152:	3904      	subs	r1, #4
 800f154:	f853 2b04 	ldr.w	r2, [r3], #4
 800f158:	f841 2f04 	str.w	r2, [r1, #4]!
 800f15c:	459c      	cmp	ip, r3
 800f15e:	d8f9      	bhi.n	800f154 <__lshift+0xc0>
 800f160:	e7ea      	b.n	800f138 <__lshift+0xa4>
 800f162:	bf00      	nop
 800f164:	080114d2 	.word	0x080114d2
 800f168:	080114e3 	.word	0x080114e3

0800f16c <__mcmp>:
 800f16c:	690a      	ldr	r2, [r1, #16]
 800f16e:	4603      	mov	r3, r0
 800f170:	6900      	ldr	r0, [r0, #16]
 800f172:	1a80      	subs	r0, r0, r2
 800f174:	b530      	push	{r4, r5, lr}
 800f176:	d10e      	bne.n	800f196 <__mcmp+0x2a>
 800f178:	3314      	adds	r3, #20
 800f17a:	3114      	adds	r1, #20
 800f17c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f180:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f184:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f188:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f18c:	4295      	cmp	r5, r2
 800f18e:	d003      	beq.n	800f198 <__mcmp+0x2c>
 800f190:	d205      	bcs.n	800f19e <__mcmp+0x32>
 800f192:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f196:	bd30      	pop	{r4, r5, pc}
 800f198:	42a3      	cmp	r3, r4
 800f19a:	d3f3      	bcc.n	800f184 <__mcmp+0x18>
 800f19c:	e7fb      	b.n	800f196 <__mcmp+0x2a>
 800f19e:	2001      	movs	r0, #1
 800f1a0:	e7f9      	b.n	800f196 <__mcmp+0x2a>
	...

0800f1a4 <__mdiff>:
 800f1a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a8:	4689      	mov	r9, r1
 800f1aa:	4606      	mov	r6, r0
 800f1ac:	4611      	mov	r1, r2
 800f1ae:	4648      	mov	r0, r9
 800f1b0:	4614      	mov	r4, r2
 800f1b2:	f7ff ffdb 	bl	800f16c <__mcmp>
 800f1b6:	1e05      	subs	r5, r0, #0
 800f1b8:	d112      	bne.n	800f1e0 <__mdiff+0x3c>
 800f1ba:	4629      	mov	r1, r5
 800f1bc:	4630      	mov	r0, r6
 800f1be:	f7ff fd11 	bl	800ebe4 <_Balloc>
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	b928      	cbnz	r0, 800f1d2 <__mdiff+0x2e>
 800f1c6:	4b3f      	ldr	r3, [pc, #252]	@ (800f2c4 <__mdiff+0x120>)
 800f1c8:	f240 2137 	movw	r1, #567	@ 0x237
 800f1cc:	483e      	ldr	r0, [pc, #248]	@ (800f2c8 <__mdiff+0x124>)
 800f1ce:	f7fe fe55 	bl	800de7c <__assert_func>
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f1d8:	4610      	mov	r0, r2
 800f1da:	b003      	add	sp, #12
 800f1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1e0:	bfbc      	itt	lt
 800f1e2:	464b      	movlt	r3, r9
 800f1e4:	46a1      	movlt	r9, r4
 800f1e6:	4630      	mov	r0, r6
 800f1e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f1ec:	bfba      	itte	lt
 800f1ee:	461c      	movlt	r4, r3
 800f1f0:	2501      	movlt	r5, #1
 800f1f2:	2500      	movge	r5, #0
 800f1f4:	f7ff fcf6 	bl	800ebe4 <_Balloc>
 800f1f8:	4602      	mov	r2, r0
 800f1fa:	b918      	cbnz	r0, 800f204 <__mdiff+0x60>
 800f1fc:	4b31      	ldr	r3, [pc, #196]	@ (800f2c4 <__mdiff+0x120>)
 800f1fe:	f240 2145 	movw	r1, #581	@ 0x245
 800f202:	e7e3      	b.n	800f1cc <__mdiff+0x28>
 800f204:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f208:	6926      	ldr	r6, [r4, #16]
 800f20a:	60c5      	str	r5, [r0, #12]
 800f20c:	f109 0310 	add.w	r3, r9, #16
 800f210:	f109 0514 	add.w	r5, r9, #20
 800f214:	f104 0e14 	add.w	lr, r4, #20
 800f218:	f100 0b14 	add.w	fp, r0, #20
 800f21c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f220:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f224:	9301      	str	r3, [sp, #4]
 800f226:	46d9      	mov	r9, fp
 800f228:	f04f 0c00 	mov.w	ip, #0
 800f22c:	9b01      	ldr	r3, [sp, #4]
 800f22e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f232:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f236:	9301      	str	r3, [sp, #4]
 800f238:	fa1f f38a 	uxth.w	r3, sl
 800f23c:	4619      	mov	r1, r3
 800f23e:	b283      	uxth	r3, r0
 800f240:	1acb      	subs	r3, r1, r3
 800f242:	0c00      	lsrs	r0, r0, #16
 800f244:	4463      	add	r3, ip
 800f246:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f24a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f24e:	b29b      	uxth	r3, r3
 800f250:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f254:	4576      	cmp	r6, lr
 800f256:	f849 3b04 	str.w	r3, [r9], #4
 800f25a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f25e:	d8e5      	bhi.n	800f22c <__mdiff+0x88>
 800f260:	1b33      	subs	r3, r6, r4
 800f262:	3b15      	subs	r3, #21
 800f264:	f023 0303 	bic.w	r3, r3, #3
 800f268:	3415      	adds	r4, #21
 800f26a:	3304      	adds	r3, #4
 800f26c:	42a6      	cmp	r6, r4
 800f26e:	bf38      	it	cc
 800f270:	2304      	movcc	r3, #4
 800f272:	441d      	add	r5, r3
 800f274:	445b      	add	r3, fp
 800f276:	461e      	mov	r6, r3
 800f278:	462c      	mov	r4, r5
 800f27a:	4544      	cmp	r4, r8
 800f27c:	d30e      	bcc.n	800f29c <__mdiff+0xf8>
 800f27e:	f108 0103 	add.w	r1, r8, #3
 800f282:	1b49      	subs	r1, r1, r5
 800f284:	f021 0103 	bic.w	r1, r1, #3
 800f288:	3d03      	subs	r5, #3
 800f28a:	45a8      	cmp	r8, r5
 800f28c:	bf38      	it	cc
 800f28e:	2100      	movcc	r1, #0
 800f290:	440b      	add	r3, r1
 800f292:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f296:	b191      	cbz	r1, 800f2be <__mdiff+0x11a>
 800f298:	6117      	str	r7, [r2, #16]
 800f29a:	e79d      	b.n	800f1d8 <__mdiff+0x34>
 800f29c:	f854 1b04 	ldr.w	r1, [r4], #4
 800f2a0:	46e6      	mov	lr, ip
 800f2a2:	0c08      	lsrs	r0, r1, #16
 800f2a4:	fa1c fc81 	uxtah	ip, ip, r1
 800f2a8:	4471      	add	r1, lr
 800f2aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f2ae:	b289      	uxth	r1, r1
 800f2b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f2b4:	f846 1b04 	str.w	r1, [r6], #4
 800f2b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f2bc:	e7dd      	b.n	800f27a <__mdiff+0xd6>
 800f2be:	3f01      	subs	r7, #1
 800f2c0:	e7e7      	b.n	800f292 <__mdiff+0xee>
 800f2c2:	bf00      	nop
 800f2c4:	080114d2 	.word	0x080114d2
 800f2c8:	080114e3 	.word	0x080114e3

0800f2cc <__ulp>:
 800f2cc:	b082      	sub	sp, #8
 800f2ce:	ed8d 0b00 	vstr	d0, [sp]
 800f2d2:	9a01      	ldr	r2, [sp, #4]
 800f2d4:	4b0f      	ldr	r3, [pc, #60]	@ (800f314 <__ulp+0x48>)
 800f2d6:	4013      	ands	r3, r2
 800f2d8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	dc08      	bgt.n	800f2f2 <__ulp+0x26>
 800f2e0:	425b      	negs	r3, r3
 800f2e2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f2e6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f2ea:	da04      	bge.n	800f2f6 <__ulp+0x2a>
 800f2ec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f2f0:	4113      	asrs	r3, r2
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	e008      	b.n	800f308 <__ulp+0x3c>
 800f2f6:	f1a2 0314 	sub.w	r3, r2, #20
 800f2fa:	2b1e      	cmp	r3, #30
 800f2fc:	bfda      	itte	le
 800f2fe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f302:	40da      	lsrle	r2, r3
 800f304:	2201      	movgt	r2, #1
 800f306:	2300      	movs	r3, #0
 800f308:	4619      	mov	r1, r3
 800f30a:	4610      	mov	r0, r2
 800f30c:	ec41 0b10 	vmov	d0, r0, r1
 800f310:	b002      	add	sp, #8
 800f312:	4770      	bx	lr
 800f314:	7ff00000 	.word	0x7ff00000

0800f318 <__b2d>:
 800f318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f31c:	6906      	ldr	r6, [r0, #16]
 800f31e:	f100 0814 	add.w	r8, r0, #20
 800f322:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f326:	1f37      	subs	r7, r6, #4
 800f328:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f32c:	4610      	mov	r0, r2
 800f32e:	f7ff fd4b 	bl	800edc8 <__hi0bits>
 800f332:	f1c0 0320 	rsb	r3, r0, #32
 800f336:	280a      	cmp	r0, #10
 800f338:	600b      	str	r3, [r1, #0]
 800f33a:	491b      	ldr	r1, [pc, #108]	@ (800f3a8 <__b2d+0x90>)
 800f33c:	dc15      	bgt.n	800f36a <__b2d+0x52>
 800f33e:	f1c0 0c0b 	rsb	ip, r0, #11
 800f342:	fa22 f30c 	lsr.w	r3, r2, ip
 800f346:	45b8      	cmp	r8, r7
 800f348:	ea43 0501 	orr.w	r5, r3, r1
 800f34c:	bf34      	ite	cc
 800f34e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f352:	2300      	movcs	r3, #0
 800f354:	3015      	adds	r0, #21
 800f356:	fa02 f000 	lsl.w	r0, r2, r0
 800f35a:	fa23 f30c 	lsr.w	r3, r3, ip
 800f35e:	4303      	orrs	r3, r0
 800f360:	461c      	mov	r4, r3
 800f362:	ec45 4b10 	vmov	d0, r4, r5
 800f366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f36a:	45b8      	cmp	r8, r7
 800f36c:	bf3a      	itte	cc
 800f36e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f372:	f1a6 0708 	subcc.w	r7, r6, #8
 800f376:	2300      	movcs	r3, #0
 800f378:	380b      	subs	r0, #11
 800f37a:	d012      	beq.n	800f3a2 <__b2d+0x8a>
 800f37c:	f1c0 0120 	rsb	r1, r0, #32
 800f380:	fa23 f401 	lsr.w	r4, r3, r1
 800f384:	4082      	lsls	r2, r0
 800f386:	4322      	orrs	r2, r4
 800f388:	4547      	cmp	r7, r8
 800f38a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f38e:	bf8c      	ite	hi
 800f390:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f394:	2200      	movls	r2, #0
 800f396:	4083      	lsls	r3, r0
 800f398:	40ca      	lsrs	r2, r1
 800f39a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f39e:	4313      	orrs	r3, r2
 800f3a0:	e7de      	b.n	800f360 <__b2d+0x48>
 800f3a2:	ea42 0501 	orr.w	r5, r2, r1
 800f3a6:	e7db      	b.n	800f360 <__b2d+0x48>
 800f3a8:	3ff00000 	.word	0x3ff00000

0800f3ac <__d2b>:
 800f3ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3b0:	460f      	mov	r7, r1
 800f3b2:	2101      	movs	r1, #1
 800f3b4:	ec59 8b10 	vmov	r8, r9, d0
 800f3b8:	4616      	mov	r6, r2
 800f3ba:	f7ff fc13 	bl	800ebe4 <_Balloc>
 800f3be:	4604      	mov	r4, r0
 800f3c0:	b930      	cbnz	r0, 800f3d0 <__d2b+0x24>
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	4b23      	ldr	r3, [pc, #140]	@ (800f454 <__d2b+0xa8>)
 800f3c6:	4824      	ldr	r0, [pc, #144]	@ (800f458 <__d2b+0xac>)
 800f3c8:	f240 310f 	movw	r1, #783	@ 0x30f
 800f3cc:	f7fe fd56 	bl	800de7c <__assert_func>
 800f3d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f3d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f3d8:	b10d      	cbz	r5, 800f3de <__d2b+0x32>
 800f3da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f3de:	9301      	str	r3, [sp, #4]
 800f3e0:	f1b8 0300 	subs.w	r3, r8, #0
 800f3e4:	d023      	beq.n	800f42e <__d2b+0x82>
 800f3e6:	4668      	mov	r0, sp
 800f3e8:	9300      	str	r3, [sp, #0]
 800f3ea:	f7ff fd0c 	bl	800ee06 <__lo0bits>
 800f3ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f3f2:	b1d0      	cbz	r0, 800f42a <__d2b+0x7e>
 800f3f4:	f1c0 0320 	rsb	r3, r0, #32
 800f3f8:	fa02 f303 	lsl.w	r3, r2, r3
 800f3fc:	430b      	orrs	r3, r1
 800f3fe:	40c2      	lsrs	r2, r0
 800f400:	6163      	str	r3, [r4, #20]
 800f402:	9201      	str	r2, [sp, #4]
 800f404:	9b01      	ldr	r3, [sp, #4]
 800f406:	61a3      	str	r3, [r4, #24]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	bf0c      	ite	eq
 800f40c:	2201      	moveq	r2, #1
 800f40e:	2202      	movne	r2, #2
 800f410:	6122      	str	r2, [r4, #16]
 800f412:	b1a5      	cbz	r5, 800f43e <__d2b+0x92>
 800f414:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f418:	4405      	add	r5, r0
 800f41a:	603d      	str	r5, [r7, #0]
 800f41c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f420:	6030      	str	r0, [r6, #0]
 800f422:	4620      	mov	r0, r4
 800f424:	b003      	add	sp, #12
 800f426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f42a:	6161      	str	r1, [r4, #20]
 800f42c:	e7ea      	b.n	800f404 <__d2b+0x58>
 800f42e:	a801      	add	r0, sp, #4
 800f430:	f7ff fce9 	bl	800ee06 <__lo0bits>
 800f434:	9b01      	ldr	r3, [sp, #4]
 800f436:	6163      	str	r3, [r4, #20]
 800f438:	3020      	adds	r0, #32
 800f43a:	2201      	movs	r2, #1
 800f43c:	e7e8      	b.n	800f410 <__d2b+0x64>
 800f43e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f442:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f446:	6038      	str	r0, [r7, #0]
 800f448:	6918      	ldr	r0, [r3, #16]
 800f44a:	f7ff fcbd 	bl	800edc8 <__hi0bits>
 800f44e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f452:	e7e5      	b.n	800f420 <__d2b+0x74>
 800f454:	080114d2 	.word	0x080114d2
 800f458:	080114e3 	.word	0x080114e3

0800f45c <__ratio>:
 800f45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f460:	b085      	sub	sp, #20
 800f462:	e9cd 1000 	strd	r1, r0, [sp]
 800f466:	a902      	add	r1, sp, #8
 800f468:	f7ff ff56 	bl	800f318 <__b2d>
 800f46c:	9800      	ldr	r0, [sp, #0]
 800f46e:	a903      	add	r1, sp, #12
 800f470:	ec55 4b10 	vmov	r4, r5, d0
 800f474:	f7ff ff50 	bl	800f318 <__b2d>
 800f478:	9b01      	ldr	r3, [sp, #4]
 800f47a:	6919      	ldr	r1, [r3, #16]
 800f47c:	9b00      	ldr	r3, [sp, #0]
 800f47e:	691b      	ldr	r3, [r3, #16]
 800f480:	1ac9      	subs	r1, r1, r3
 800f482:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f486:	1a9b      	subs	r3, r3, r2
 800f488:	ec5b ab10 	vmov	sl, fp, d0
 800f48c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f490:	2b00      	cmp	r3, #0
 800f492:	bfce      	itee	gt
 800f494:	462a      	movgt	r2, r5
 800f496:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f49a:	465a      	movle	r2, fp
 800f49c:	462f      	mov	r7, r5
 800f49e:	46d9      	mov	r9, fp
 800f4a0:	bfcc      	ite	gt
 800f4a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f4a6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f4aa:	464b      	mov	r3, r9
 800f4ac:	4652      	mov	r2, sl
 800f4ae:	4620      	mov	r0, r4
 800f4b0:	4639      	mov	r1, r7
 800f4b2:	f7f1 f9d3 	bl	800085c <__aeabi_ddiv>
 800f4b6:	ec41 0b10 	vmov	d0, r0, r1
 800f4ba:	b005      	add	sp, #20
 800f4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f4c0 <__copybits>:
 800f4c0:	3901      	subs	r1, #1
 800f4c2:	b570      	push	{r4, r5, r6, lr}
 800f4c4:	1149      	asrs	r1, r1, #5
 800f4c6:	6914      	ldr	r4, [r2, #16]
 800f4c8:	3101      	adds	r1, #1
 800f4ca:	f102 0314 	add.w	r3, r2, #20
 800f4ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f4d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f4d6:	1f05      	subs	r5, r0, #4
 800f4d8:	42a3      	cmp	r3, r4
 800f4da:	d30c      	bcc.n	800f4f6 <__copybits+0x36>
 800f4dc:	1aa3      	subs	r3, r4, r2
 800f4de:	3b11      	subs	r3, #17
 800f4e0:	f023 0303 	bic.w	r3, r3, #3
 800f4e4:	3211      	adds	r2, #17
 800f4e6:	42a2      	cmp	r2, r4
 800f4e8:	bf88      	it	hi
 800f4ea:	2300      	movhi	r3, #0
 800f4ec:	4418      	add	r0, r3
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	4288      	cmp	r0, r1
 800f4f2:	d305      	bcc.n	800f500 <__copybits+0x40>
 800f4f4:	bd70      	pop	{r4, r5, r6, pc}
 800f4f6:	f853 6b04 	ldr.w	r6, [r3], #4
 800f4fa:	f845 6f04 	str.w	r6, [r5, #4]!
 800f4fe:	e7eb      	b.n	800f4d8 <__copybits+0x18>
 800f500:	f840 3b04 	str.w	r3, [r0], #4
 800f504:	e7f4      	b.n	800f4f0 <__copybits+0x30>

0800f506 <__any_on>:
 800f506:	f100 0214 	add.w	r2, r0, #20
 800f50a:	6900      	ldr	r0, [r0, #16]
 800f50c:	114b      	asrs	r3, r1, #5
 800f50e:	4298      	cmp	r0, r3
 800f510:	b510      	push	{r4, lr}
 800f512:	db11      	blt.n	800f538 <__any_on+0x32>
 800f514:	dd0a      	ble.n	800f52c <__any_on+0x26>
 800f516:	f011 011f 	ands.w	r1, r1, #31
 800f51a:	d007      	beq.n	800f52c <__any_on+0x26>
 800f51c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f520:	fa24 f001 	lsr.w	r0, r4, r1
 800f524:	fa00 f101 	lsl.w	r1, r0, r1
 800f528:	428c      	cmp	r4, r1
 800f52a:	d10b      	bne.n	800f544 <__any_on+0x3e>
 800f52c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f530:	4293      	cmp	r3, r2
 800f532:	d803      	bhi.n	800f53c <__any_on+0x36>
 800f534:	2000      	movs	r0, #0
 800f536:	bd10      	pop	{r4, pc}
 800f538:	4603      	mov	r3, r0
 800f53a:	e7f7      	b.n	800f52c <__any_on+0x26>
 800f53c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f540:	2900      	cmp	r1, #0
 800f542:	d0f5      	beq.n	800f530 <__any_on+0x2a>
 800f544:	2001      	movs	r0, #1
 800f546:	e7f6      	b.n	800f536 <__any_on+0x30>

0800f548 <_malloc_usable_size_r>:
 800f548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f54c:	1f18      	subs	r0, r3, #4
 800f54e:	2b00      	cmp	r3, #0
 800f550:	bfbc      	itt	lt
 800f552:	580b      	ldrlt	r3, [r1, r0]
 800f554:	18c0      	addlt	r0, r0, r3
 800f556:	4770      	bx	lr

0800f558 <sulp>:
 800f558:	b570      	push	{r4, r5, r6, lr}
 800f55a:	4604      	mov	r4, r0
 800f55c:	460d      	mov	r5, r1
 800f55e:	ec45 4b10 	vmov	d0, r4, r5
 800f562:	4616      	mov	r6, r2
 800f564:	f7ff feb2 	bl	800f2cc <__ulp>
 800f568:	ec51 0b10 	vmov	r0, r1, d0
 800f56c:	b17e      	cbz	r6, 800f58e <sulp+0x36>
 800f56e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f572:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f576:	2b00      	cmp	r3, #0
 800f578:	dd09      	ble.n	800f58e <sulp+0x36>
 800f57a:	051b      	lsls	r3, r3, #20
 800f57c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800f580:	2400      	movs	r4, #0
 800f582:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800f586:	4622      	mov	r2, r4
 800f588:	462b      	mov	r3, r5
 800f58a:	f7f1 f83d 	bl	8000608 <__aeabi_dmul>
 800f58e:	ec41 0b10 	vmov	d0, r0, r1
 800f592:	bd70      	pop	{r4, r5, r6, pc}
 800f594:	0000      	movs	r0, r0
	...

0800f598 <_strtod_l>:
 800f598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f59c:	b09f      	sub	sp, #124	@ 0x7c
 800f59e:	460c      	mov	r4, r1
 800f5a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	921a      	str	r2, [sp, #104]	@ 0x68
 800f5a6:	9005      	str	r0, [sp, #20]
 800f5a8:	f04f 0a00 	mov.w	sl, #0
 800f5ac:	f04f 0b00 	mov.w	fp, #0
 800f5b0:	460a      	mov	r2, r1
 800f5b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f5b4:	7811      	ldrb	r1, [r2, #0]
 800f5b6:	292b      	cmp	r1, #43	@ 0x2b
 800f5b8:	d04a      	beq.n	800f650 <_strtod_l+0xb8>
 800f5ba:	d838      	bhi.n	800f62e <_strtod_l+0x96>
 800f5bc:	290d      	cmp	r1, #13
 800f5be:	d832      	bhi.n	800f626 <_strtod_l+0x8e>
 800f5c0:	2908      	cmp	r1, #8
 800f5c2:	d832      	bhi.n	800f62a <_strtod_l+0x92>
 800f5c4:	2900      	cmp	r1, #0
 800f5c6:	d03b      	beq.n	800f640 <_strtod_l+0xa8>
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 800f5cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800f5ce:	782a      	ldrb	r2, [r5, #0]
 800f5d0:	2a30      	cmp	r2, #48	@ 0x30
 800f5d2:	f040 80b3 	bne.w	800f73c <_strtod_l+0x1a4>
 800f5d6:	786a      	ldrb	r2, [r5, #1]
 800f5d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f5dc:	2a58      	cmp	r2, #88	@ 0x58
 800f5de:	d16e      	bne.n	800f6be <_strtod_l+0x126>
 800f5e0:	9302      	str	r3, [sp, #8]
 800f5e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5e4:	9301      	str	r3, [sp, #4]
 800f5e6:	ab1a      	add	r3, sp, #104	@ 0x68
 800f5e8:	9300      	str	r3, [sp, #0]
 800f5ea:	4a8e      	ldr	r2, [pc, #568]	@ (800f824 <_strtod_l+0x28c>)
 800f5ec:	9805      	ldr	r0, [sp, #20]
 800f5ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f5f0:	a919      	add	r1, sp, #100	@ 0x64
 800f5f2:	f001 fa8b 	bl	8010b0c <__gethex>
 800f5f6:	f010 060f 	ands.w	r6, r0, #15
 800f5fa:	4604      	mov	r4, r0
 800f5fc:	d005      	beq.n	800f60a <_strtod_l+0x72>
 800f5fe:	2e06      	cmp	r6, #6
 800f600:	d128      	bne.n	800f654 <_strtod_l+0xbc>
 800f602:	3501      	adds	r5, #1
 800f604:	2300      	movs	r3, #0
 800f606:	9519      	str	r5, [sp, #100]	@ 0x64
 800f608:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f60a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	f040 858e 	bne.w	801012e <_strtod_l+0xb96>
 800f612:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f614:	b1cb      	cbz	r3, 800f64a <_strtod_l+0xb2>
 800f616:	4652      	mov	r2, sl
 800f618:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800f61c:	ec43 2b10 	vmov	d0, r2, r3
 800f620:	b01f      	add	sp, #124	@ 0x7c
 800f622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f626:	2920      	cmp	r1, #32
 800f628:	d1ce      	bne.n	800f5c8 <_strtod_l+0x30>
 800f62a:	3201      	adds	r2, #1
 800f62c:	e7c1      	b.n	800f5b2 <_strtod_l+0x1a>
 800f62e:	292d      	cmp	r1, #45	@ 0x2d
 800f630:	d1ca      	bne.n	800f5c8 <_strtod_l+0x30>
 800f632:	2101      	movs	r1, #1
 800f634:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f636:	1c51      	adds	r1, r2, #1
 800f638:	9119      	str	r1, [sp, #100]	@ 0x64
 800f63a:	7852      	ldrb	r2, [r2, #1]
 800f63c:	2a00      	cmp	r2, #0
 800f63e:	d1c5      	bne.n	800f5cc <_strtod_l+0x34>
 800f640:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f642:	9419      	str	r4, [sp, #100]	@ 0x64
 800f644:	2b00      	cmp	r3, #0
 800f646:	f040 8570 	bne.w	801012a <_strtod_l+0xb92>
 800f64a:	4652      	mov	r2, sl
 800f64c:	465b      	mov	r3, fp
 800f64e:	e7e5      	b.n	800f61c <_strtod_l+0x84>
 800f650:	2100      	movs	r1, #0
 800f652:	e7ef      	b.n	800f634 <_strtod_l+0x9c>
 800f654:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f656:	b13a      	cbz	r2, 800f668 <_strtod_l+0xd0>
 800f658:	2135      	movs	r1, #53	@ 0x35
 800f65a:	a81c      	add	r0, sp, #112	@ 0x70
 800f65c:	f7ff ff30 	bl	800f4c0 <__copybits>
 800f660:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f662:	9805      	ldr	r0, [sp, #20]
 800f664:	f7ff fafe 	bl	800ec64 <_Bfree>
 800f668:	3e01      	subs	r6, #1
 800f66a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800f66c:	2e04      	cmp	r6, #4
 800f66e:	d806      	bhi.n	800f67e <_strtod_l+0xe6>
 800f670:	e8df f006 	tbb	[pc, r6]
 800f674:	201d0314 	.word	0x201d0314
 800f678:	14          	.byte	0x14
 800f679:	00          	.byte	0x00
 800f67a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800f67e:	05e1      	lsls	r1, r4, #23
 800f680:	bf48      	it	mi
 800f682:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800f686:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f68a:	0d1b      	lsrs	r3, r3, #20
 800f68c:	051b      	lsls	r3, r3, #20
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d1bb      	bne.n	800f60a <_strtod_l+0x72>
 800f692:	f7fe fbb1 	bl	800ddf8 <__errno>
 800f696:	2322      	movs	r3, #34	@ 0x22
 800f698:	6003      	str	r3, [r0, #0]
 800f69a:	e7b6      	b.n	800f60a <_strtod_l+0x72>
 800f69c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800f6a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800f6a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800f6a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f6ac:	e7e7      	b.n	800f67e <_strtod_l+0xe6>
 800f6ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800f82c <_strtod_l+0x294>
 800f6b2:	e7e4      	b.n	800f67e <_strtod_l+0xe6>
 800f6b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800f6b8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f6bc:	e7df      	b.n	800f67e <_strtod_l+0xe6>
 800f6be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f6c0:	1c5a      	adds	r2, r3, #1
 800f6c2:	9219      	str	r2, [sp, #100]	@ 0x64
 800f6c4:	785b      	ldrb	r3, [r3, #1]
 800f6c6:	2b30      	cmp	r3, #48	@ 0x30
 800f6c8:	d0f9      	beq.n	800f6be <_strtod_l+0x126>
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d09d      	beq.n	800f60a <_strtod_l+0x72>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f6d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	9308      	str	r3, [sp, #32]
 800f6da:	930a      	str	r3, [sp, #40]	@ 0x28
 800f6dc:	461f      	mov	r7, r3
 800f6de:	220a      	movs	r2, #10
 800f6e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800f6e2:	7805      	ldrb	r5, [r0, #0]
 800f6e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800f6e8:	b2d9      	uxtb	r1, r3
 800f6ea:	2909      	cmp	r1, #9
 800f6ec:	d928      	bls.n	800f740 <_strtod_l+0x1a8>
 800f6ee:	494e      	ldr	r1, [pc, #312]	@ (800f828 <_strtod_l+0x290>)
 800f6f0:	2201      	movs	r2, #1
 800f6f2:	f7fe fabf 	bl	800dc74 <strncmp>
 800f6f6:	2800      	cmp	r0, #0
 800f6f8:	d032      	beq.n	800f760 <_strtod_l+0x1c8>
 800f6fa:	2000      	movs	r0, #0
 800f6fc:	462a      	mov	r2, r5
 800f6fe:	4681      	mov	r9, r0
 800f700:	463d      	mov	r5, r7
 800f702:	4603      	mov	r3, r0
 800f704:	2a65      	cmp	r2, #101	@ 0x65
 800f706:	d001      	beq.n	800f70c <_strtod_l+0x174>
 800f708:	2a45      	cmp	r2, #69	@ 0x45
 800f70a:	d114      	bne.n	800f736 <_strtod_l+0x19e>
 800f70c:	b91d      	cbnz	r5, 800f716 <_strtod_l+0x17e>
 800f70e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f710:	4302      	orrs	r2, r0
 800f712:	d095      	beq.n	800f640 <_strtod_l+0xa8>
 800f714:	2500      	movs	r5, #0
 800f716:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800f718:	1c62      	adds	r2, r4, #1
 800f71a:	9219      	str	r2, [sp, #100]	@ 0x64
 800f71c:	7862      	ldrb	r2, [r4, #1]
 800f71e:	2a2b      	cmp	r2, #43	@ 0x2b
 800f720:	d077      	beq.n	800f812 <_strtod_l+0x27a>
 800f722:	2a2d      	cmp	r2, #45	@ 0x2d
 800f724:	d07b      	beq.n	800f81e <_strtod_l+0x286>
 800f726:	f04f 0c00 	mov.w	ip, #0
 800f72a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800f72e:	2909      	cmp	r1, #9
 800f730:	f240 8082 	bls.w	800f838 <_strtod_l+0x2a0>
 800f734:	9419      	str	r4, [sp, #100]	@ 0x64
 800f736:	f04f 0800 	mov.w	r8, #0
 800f73a:	e0a2      	b.n	800f882 <_strtod_l+0x2ea>
 800f73c:	2300      	movs	r3, #0
 800f73e:	e7c7      	b.n	800f6d0 <_strtod_l+0x138>
 800f740:	2f08      	cmp	r7, #8
 800f742:	bfd5      	itete	le
 800f744:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800f746:	9908      	ldrgt	r1, [sp, #32]
 800f748:	fb02 3301 	mlale	r3, r2, r1, r3
 800f74c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800f750:	f100 0001 	add.w	r0, r0, #1
 800f754:	bfd4      	ite	le
 800f756:	930a      	strle	r3, [sp, #40]	@ 0x28
 800f758:	9308      	strgt	r3, [sp, #32]
 800f75a:	3701      	adds	r7, #1
 800f75c:	9019      	str	r0, [sp, #100]	@ 0x64
 800f75e:	e7bf      	b.n	800f6e0 <_strtod_l+0x148>
 800f760:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f762:	1c5a      	adds	r2, r3, #1
 800f764:	9219      	str	r2, [sp, #100]	@ 0x64
 800f766:	785a      	ldrb	r2, [r3, #1]
 800f768:	b37f      	cbz	r7, 800f7ca <_strtod_l+0x232>
 800f76a:	4681      	mov	r9, r0
 800f76c:	463d      	mov	r5, r7
 800f76e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800f772:	2b09      	cmp	r3, #9
 800f774:	d912      	bls.n	800f79c <_strtod_l+0x204>
 800f776:	2301      	movs	r3, #1
 800f778:	e7c4      	b.n	800f704 <_strtod_l+0x16c>
 800f77a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f77c:	1c5a      	adds	r2, r3, #1
 800f77e:	9219      	str	r2, [sp, #100]	@ 0x64
 800f780:	785a      	ldrb	r2, [r3, #1]
 800f782:	3001      	adds	r0, #1
 800f784:	2a30      	cmp	r2, #48	@ 0x30
 800f786:	d0f8      	beq.n	800f77a <_strtod_l+0x1e2>
 800f788:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800f78c:	2b08      	cmp	r3, #8
 800f78e:	f200 84d3 	bhi.w	8010138 <_strtod_l+0xba0>
 800f792:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f794:	930c      	str	r3, [sp, #48]	@ 0x30
 800f796:	4681      	mov	r9, r0
 800f798:	2000      	movs	r0, #0
 800f79a:	4605      	mov	r5, r0
 800f79c:	3a30      	subs	r2, #48	@ 0x30
 800f79e:	f100 0301 	add.w	r3, r0, #1
 800f7a2:	d02a      	beq.n	800f7fa <_strtod_l+0x262>
 800f7a4:	4499      	add	r9, r3
 800f7a6:	eb00 0c05 	add.w	ip, r0, r5
 800f7aa:	462b      	mov	r3, r5
 800f7ac:	210a      	movs	r1, #10
 800f7ae:	4563      	cmp	r3, ip
 800f7b0:	d10d      	bne.n	800f7ce <_strtod_l+0x236>
 800f7b2:	1c69      	adds	r1, r5, #1
 800f7b4:	4401      	add	r1, r0
 800f7b6:	4428      	add	r0, r5
 800f7b8:	2808      	cmp	r0, #8
 800f7ba:	dc16      	bgt.n	800f7ea <_strtod_l+0x252>
 800f7bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f7be:	230a      	movs	r3, #10
 800f7c0:	fb03 2300 	mla	r3, r3, r0, r2
 800f7c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	e018      	b.n	800f7fc <_strtod_l+0x264>
 800f7ca:	4638      	mov	r0, r7
 800f7cc:	e7da      	b.n	800f784 <_strtod_l+0x1ec>
 800f7ce:	2b08      	cmp	r3, #8
 800f7d0:	f103 0301 	add.w	r3, r3, #1
 800f7d4:	dc03      	bgt.n	800f7de <_strtod_l+0x246>
 800f7d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800f7d8:	434e      	muls	r6, r1
 800f7da:	960a      	str	r6, [sp, #40]	@ 0x28
 800f7dc:	e7e7      	b.n	800f7ae <_strtod_l+0x216>
 800f7de:	2b10      	cmp	r3, #16
 800f7e0:	bfde      	ittt	le
 800f7e2:	9e08      	ldrle	r6, [sp, #32]
 800f7e4:	434e      	mulle	r6, r1
 800f7e6:	9608      	strle	r6, [sp, #32]
 800f7e8:	e7e1      	b.n	800f7ae <_strtod_l+0x216>
 800f7ea:	280f      	cmp	r0, #15
 800f7ec:	dceb      	bgt.n	800f7c6 <_strtod_l+0x22e>
 800f7ee:	9808      	ldr	r0, [sp, #32]
 800f7f0:	230a      	movs	r3, #10
 800f7f2:	fb03 2300 	mla	r3, r3, r0, r2
 800f7f6:	9308      	str	r3, [sp, #32]
 800f7f8:	e7e5      	b.n	800f7c6 <_strtod_l+0x22e>
 800f7fa:	4629      	mov	r1, r5
 800f7fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f7fe:	1c50      	adds	r0, r2, #1
 800f800:	9019      	str	r0, [sp, #100]	@ 0x64
 800f802:	7852      	ldrb	r2, [r2, #1]
 800f804:	4618      	mov	r0, r3
 800f806:	460d      	mov	r5, r1
 800f808:	e7b1      	b.n	800f76e <_strtod_l+0x1d6>
 800f80a:	f04f 0900 	mov.w	r9, #0
 800f80e:	2301      	movs	r3, #1
 800f810:	e77d      	b.n	800f70e <_strtod_l+0x176>
 800f812:	f04f 0c00 	mov.w	ip, #0
 800f816:	1ca2      	adds	r2, r4, #2
 800f818:	9219      	str	r2, [sp, #100]	@ 0x64
 800f81a:	78a2      	ldrb	r2, [r4, #2]
 800f81c:	e785      	b.n	800f72a <_strtod_l+0x192>
 800f81e:	f04f 0c01 	mov.w	ip, #1
 800f822:	e7f8      	b.n	800f816 <_strtod_l+0x27e>
 800f824:	08011650 	.word	0x08011650
 800f828:	08011638 	.word	0x08011638
 800f82c:	7ff00000 	.word	0x7ff00000
 800f830:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f832:	1c51      	adds	r1, r2, #1
 800f834:	9119      	str	r1, [sp, #100]	@ 0x64
 800f836:	7852      	ldrb	r2, [r2, #1]
 800f838:	2a30      	cmp	r2, #48	@ 0x30
 800f83a:	d0f9      	beq.n	800f830 <_strtod_l+0x298>
 800f83c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800f840:	2908      	cmp	r1, #8
 800f842:	f63f af78 	bhi.w	800f736 <_strtod_l+0x19e>
 800f846:	3a30      	subs	r2, #48	@ 0x30
 800f848:	920e      	str	r2, [sp, #56]	@ 0x38
 800f84a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f84c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800f84e:	f04f 080a 	mov.w	r8, #10
 800f852:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800f854:	1c56      	adds	r6, r2, #1
 800f856:	9619      	str	r6, [sp, #100]	@ 0x64
 800f858:	7852      	ldrb	r2, [r2, #1]
 800f85a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800f85e:	f1be 0f09 	cmp.w	lr, #9
 800f862:	d939      	bls.n	800f8d8 <_strtod_l+0x340>
 800f864:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f866:	1a76      	subs	r6, r6, r1
 800f868:	2e08      	cmp	r6, #8
 800f86a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800f86e:	dc03      	bgt.n	800f878 <_strtod_l+0x2e0>
 800f870:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f872:	4588      	cmp	r8, r1
 800f874:	bfa8      	it	ge
 800f876:	4688      	movge	r8, r1
 800f878:	f1bc 0f00 	cmp.w	ip, #0
 800f87c:	d001      	beq.n	800f882 <_strtod_l+0x2ea>
 800f87e:	f1c8 0800 	rsb	r8, r8, #0
 800f882:	2d00      	cmp	r5, #0
 800f884:	d14e      	bne.n	800f924 <_strtod_l+0x38c>
 800f886:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f888:	4308      	orrs	r0, r1
 800f88a:	f47f aebe 	bne.w	800f60a <_strtod_l+0x72>
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f47f aed6 	bne.w	800f640 <_strtod_l+0xa8>
 800f894:	2a69      	cmp	r2, #105	@ 0x69
 800f896:	d028      	beq.n	800f8ea <_strtod_l+0x352>
 800f898:	dc25      	bgt.n	800f8e6 <_strtod_l+0x34e>
 800f89a:	2a49      	cmp	r2, #73	@ 0x49
 800f89c:	d025      	beq.n	800f8ea <_strtod_l+0x352>
 800f89e:	2a4e      	cmp	r2, #78	@ 0x4e
 800f8a0:	f47f aece 	bne.w	800f640 <_strtod_l+0xa8>
 800f8a4:	499b      	ldr	r1, [pc, #620]	@ (800fb14 <_strtod_l+0x57c>)
 800f8a6:	a819      	add	r0, sp, #100	@ 0x64
 800f8a8:	f001 fb52 	bl	8010f50 <__match>
 800f8ac:	2800      	cmp	r0, #0
 800f8ae:	f43f aec7 	beq.w	800f640 <_strtod_l+0xa8>
 800f8b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	2b28      	cmp	r3, #40	@ 0x28
 800f8b8:	d12e      	bne.n	800f918 <_strtod_l+0x380>
 800f8ba:	4997      	ldr	r1, [pc, #604]	@ (800fb18 <_strtod_l+0x580>)
 800f8bc:	aa1c      	add	r2, sp, #112	@ 0x70
 800f8be:	a819      	add	r0, sp, #100	@ 0x64
 800f8c0:	f001 fb5a 	bl	8010f78 <__hexnan>
 800f8c4:	2805      	cmp	r0, #5
 800f8c6:	d127      	bne.n	800f918 <_strtod_l+0x380>
 800f8c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800f8ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800f8ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800f8d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800f8d6:	e698      	b.n	800f60a <_strtod_l+0x72>
 800f8d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f8da:	fb08 2101 	mla	r1, r8, r1, r2
 800f8de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800f8e2:	920e      	str	r2, [sp, #56]	@ 0x38
 800f8e4:	e7b5      	b.n	800f852 <_strtod_l+0x2ba>
 800f8e6:	2a6e      	cmp	r2, #110	@ 0x6e
 800f8e8:	e7da      	b.n	800f8a0 <_strtod_l+0x308>
 800f8ea:	498c      	ldr	r1, [pc, #560]	@ (800fb1c <_strtod_l+0x584>)
 800f8ec:	a819      	add	r0, sp, #100	@ 0x64
 800f8ee:	f001 fb2f 	bl	8010f50 <__match>
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	f43f aea4 	beq.w	800f640 <_strtod_l+0xa8>
 800f8f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f8fa:	4989      	ldr	r1, [pc, #548]	@ (800fb20 <_strtod_l+0x588>)
 800f8fc:	3b01      	subs	r3, #1
 800f8fe:	a819      	add	r0, sp, #100	@ 0x64
 800f900:	9319      	str	r3, [sp, #100]	@ 0x64
 800f902:	f001 fb25 	bl	8010f50 <__match>
 800f906:	b910      	cbnz	r0, 800f90e <_strtod_l+0x376>
 800f908:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f90a:	3301      	adds	r3, #1
 800f90c:	9319      	str	r3, [sp, #100]	@ 0x64
 800f90e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800fb30 <_strtod_l+0x598>
 800f912:	f04f 0a00 	mov.w	sl, #0
 800f916:	e678      	b.n	800f60a <_strtod_l+0x72>
 800f918:	4882      	ldr	r0, [pc, #520]	@ (800fb24 <_strtod_l+0x58c>)
 800f91a:	f001 f881 	bl	8010a20 <nan>
 800f91e:	ec5b ab10 	vmov	sl, fp, d0
 800f922:	e672      	b.n	800f60a <_strtod_l+0x72>
 800f924:	eba8 0309 	sub.w	r3, r8, r9
 800f928:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f92a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f92c:	2f00      	cmp	r7, #0
 800f92e:	bf08      	it	eq
 800f930:	462f      	moveq	r7, r5
 800f932:	2d10      	cmp	r5, #16
 800f934:	462c      	mov	r4, r5
 800f936:	bfa8      	it	ge
 800f938:	2410      	movge	r4, #16
 800f93a:	f7f0 fdeb 	bl	8000514 <__aeabi_ui2d>
 800f93e:	2d09      	cmp	r5, #9
 800f940:	4682      	mov	sl, r0
 800f942:	468b      	mov	fp, r1
 800f944:	dc13      	bgt.n	800f96e <_strtod_l+0x3d6>
 800f946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f43f ae5e 	beq.w	800f60a <_strtod_l+0x72>
 800f94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f950:	dd78      	ble.n	800fa44 <_strtod_l+0x4ac>
 800f952:	2b16      	cmp	r3, #22
 800f954:	dc5f      	bgt.n	800fa16 <_strtod_l+0x47e>
 800f956:	4974      	ldr	r1, [pc, #464]	@ (800fb28 <_strtod_l+0x590>)
 800f958:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f95c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f960:	4652      	mov	r2, sl
 800f962:	465b      	mov	r3, fp
 800f964:	f7f0 fe50 	bl	8000608 <__aeabi_dmul>
 800f968:	4682      	mov	sl, r0
 800f96a:	468b      	mov	fp, r1
 800f96c:	e64d      	b.n	800f60a <_strtod_l+0x72>
 800f96e:	4b6e      	ldr	r3, [pc, #440]	@ (800fb28 <_strtod_l+0x590>)
 800f970:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f974:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800f978:	f7f0 fe46 	bl	8000608 <__aeabi_dmul>
 800f97c:	4682      	mov	sl, r0
 800f97e:	9808      	ldr	r0, [sp, #32]
 800f980:	468b      	mov	fp, r1
 800f982:	f7f0 fdc7 	bl	8000514 <__aeabi_ui2d>
 800f986:	4602      	mov	r2, r0
 800f988:	460b      	mov	r3, r1
 800f98a:	4650      	mov	r0, sl
 800f98c:	4659      	mov	r1, fp
 800f98e:	f7f0 fc85 	bl	800029c <__adddf3>
 800f992:	2d0f      	cmp	r5, #15
 800f994:	4682      	mov	sl, r0
 800f996:	468b      	mov	fp, r1
 800f998:	ddd5      	ble.n	800f946 <_strtod_l+0x3ae>
 800f99a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f99c:	1b2c      	subs	r4, r5, r4
 800f99e:	441c      	add	r4, r3
 800f9a0:	2c00      	cmp	r4, #0
 800f9a2:	f340 8096 	ble.w	800fad2 <_strtod_l+0x53a>
 800f9a6:	f014 030f 	ands.w	r3, r4, #15
 800f9aa:	d00a      	beq.n	800f9c2 <_strtod_l+0x42a>
 800f9ac:	495e      	ldr	r1, [pc, #376]	@ (800fb28 <_strtod_l+0x590>)
 800f9ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f9b2:	4652      	mov	r2, sl
 800f9b4:	465b      	mov	r3, fp
 800f9b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9ba:	f7f0 fe25 	bl	8000608 <__aeabi_dmul>
 800f9be:	4682      	mov	sl, r0
 800f9c0:	468b      	mov	fp, r1
 800f9c2:	f034 040f 	bics.w	r4, r4, #15
 800f9c6:	d073      	beq.n	800fab0 <_strtod_l+0x518>
 800f9c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800f9cc:	dd48      	ble.n	800fa60 <_strtod_l+0x4c8>
 800f9ce:	2400      	movs	r4, #0
 800f9d0:	46a0      	mov	r8, r4
 800f9d2:	940a      	str	r4, [sp, #40]	@ 0x28
 800f9d4:	46a1      	mov	r9, r4
 800f9d6:	9a05      	ldr	r2, [sp, #20]
 800f9d8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800fb30 <_strtod_l+0x598>
 800f9dc:	2322      	movs	r3, #34	@ 0x22
 800f9de:	6013      	str	r3, [r2, #0]
 800f9e0:	f04f 0a00 	mov.w	sl, #0
 800f9e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	f43f ae0f 	beq.w	800f60a <_strtod_l+0x72>
 800f9ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f9ee:	9805      	ldr	r0, [sp, #20]
 800f9f0:	f7ff f938 	bl	800ec64 <_Bfree>
 800f9f4:	9805      	ldr	r0, [sp, #20]
 800f9f6:	4649      	mov	r1, r9
 800f9f8:	f7ff f934 	bl	800ec64 <_Bfree>
 800f9fc:	9805      	ldr	r0, [sp, #20]
 800f9fe:	4641      	mov	r1, r8
 800fa00:	f7ff f930 	bl	800ec64 <_Bfree>
 800fa04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fa06:	9805      	ldr	r0, [sp, #20]
 800fa08:	f7ff f92c 	bl	800ec64 <_Bfree>
 800fa0c:	9805      	ldr	r0, [sp, #20]
 800fa0e:	4621      	mov	r1, r4
 800fa10:	f7ff f928 	bl	800ec64 <_Bfree>
 800fa14:	e5f9      	b.n	800f60a <_strtod_l+0x72>
 800fa16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	dbbc      	blt.n	800f99a <_strtod_l+0x402>
 800fa20:	4c41      	ldr	r4, [pc, #260]	@ (800fb28 <_strtod_l+0x590>)
 800fa22:	f1c5 050f 	rsb	r5, r5, #15
 800fa26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fa2a:	4652      	mov	r2, sl
 800fa2c:	465b      	mov	r3, fp
 800fa2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa32:	f7f0 fde9 	bl	8000608 <__aeabi_dmul>
 800fa36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa38:	1b5d      	subs	r5, r3, r5
 800fa3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fa3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fa42:	e78f      	b.n	800f964 <_strtod_l+0x3cc>
 800fa44:	3316      	adds	r3, #22
 800fa46:	dba8      	blt.n	800f99a <_strtod_l+0x402>
 800fa48:	4b37      	ldr	r3, [pc, #220]	@ (800fb28 <_strtod_l+0x590>)
 800fa4a:	eba9 0808 	sub.w	r8, r9, r8
 800fa4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800fa52:	e9d8 2300 	ldrd	r2, r3, [r8]
 800fa56:	4650      	mov	r0, sl
 800fa58:	4659      	mov	r1, fp
 800fa5a:	f7f0 feff 	bl	800085c <__aeabi_ddiv>
 800fa5e:	e783      	b.n	800f968 <_strtod_l+0x3d0>
 800fa60:	4b32      	ldr	r3, [pc, #200]	@ (800fb2c <_strtod_l+0x594>)
 800fa62:	9308      	str	r3, [sp, #32]
 800fa64:	2300      	movs	r3, #0
 800fa66:	1124      	asrs	r4, r4, #4
 800fa68:	4650      	mov	r0, sl
 800fa6a:	4659      	mov	r1, fp
 800fa6c:	461e      	mov	r6, r3
 800fa6e:	2c01      	cmp	r4, #1
 800fa70:	dc21      	bgt.n	800fab6 <_strtod_l+0x51e>
 800fa72:	b10b      	cbz	r3, 800fa78 <_strtod_l+0x4e0>
 800fa74:	4682      	mov	sl, r0
 800fa76:	468b      	mov	fp, r1
 800fa78:	492c      	ldr	r1, [pc, #176]	@ (800fb2c <_strtod_l+0x594>)
 800fa7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800fa7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800fa82:	4652      	mov	r2, sl
 800fa84:	465b      	mov	r3, fp
 800fa86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa8a:	f7f0 fdbd 	bl	8000608 <__aeabi_dmul>
 800fa8e:	4b28      	ldr	r3, [pc, #160]	@ (800fb30 <_strtod_l+0x598>)
 800fa90:	460a      	mov	r2, r1
 800fa92:	400b      	ands	r3, r1
 800fa94:	4927      	ldr	r1, [pc, #156]	@ (800fb34 <_strtod_l+0x59c>)
 800fa96:	428b      	cmp	r3, r1
 800fa98:	4682      	mov	sl, r0
 800fa9a:	d898      	bhi.n	800f9ce <_strtod_l+0x436>
 800fa9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800faa0:	428b      	cmp	r3, r1
 800faa2:	bf86      	itte	hi
 800faa4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800fb38 <_strtod_l+0x5a0>
 800faa8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800faac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800fab0:	2300      	movs	r3, #0
 800fab2:	9308      	str	r3, [sp, #32]
 800fab4:	e07a      	b.n	800fbac <_strtod_l+0x614>
 800fab6:	07e2      	lsls	r2, r4, #31
 800fab8:	d505      	bpl.n	800fac6 <_strtod_l+0x52e>
 800faba:	9b08      	ldr	r3, [sp, #32]
 800fabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac0:	f7f0 fda2 	bl	8000608 <__aeabi_dmul>
 800fac4:	2301      	movs	r3, #1
 800fac6:	9a08      	ldr	r2, [sp, #32]
 800fac8:	3208      	adds	r2, #8
 800faca:	3601      	adds	r6, #1
 800facc:	1064      	asrs	r4, r4, #1
 800face:	9208      	str	r2, [sp, #32]
 800fad0:	e7cd      	b.n	800fa6e <_strtod_l+0x4d6>
 800fad2:	d0ed      	beq.n	800fab0 <_strtod_l+0x518>
 800fad4:	4264      	negs	r4, r4
 800fad6:	f014 020f 	ands.w	r2, r4, #15
 800fada:	d00a      	beq.n	800faf2 <_strtod_l+0x55a>
 800fadc:	4b12      	ldr	r3, [pc, #72]	@ (800fb28 <_strtod_l+0x590>)
 800fade:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fae2:	4650      	mov	r0, sl
 800fae4:	4659      	mov	r1, fp
 800fae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faea:	f7f0 feb7 	bl	800085c <__aeabi_ddiv>
 800faee:	4682      	mov	sl, r0
 800faf0:	468b      	mov	fp, r1
 800faf2:	1124      	asrs	r4, r4, #4
 800faf4:	d0dc      	beq.n	800fab0 <_strtod_l+0x518>
 800faf6:	2c1f      	cmp	r4, #31
 800faf8:	dd20      	ble.n	800fb3c <_strtod_l+0x5a4>
 800fafa:	2400      	movs	r4, #0
 800fafc:	46a0      	mov	r8, r4
 800fafe:	940a      	str	r4, [sp, #40]	@ 0x28
 800fb00:	46a1      	mov	r9, r4
 800fb02:	9a05      	ldr	r2, [sp, #20]
 800fb04:	2322      	movs	r3, #34	@ 0x22
 800fb06:	f04f 0a00 	mov.w	sl, #0
 800fb0a:	f04f 0b00 	mov.w	fp, #0
 800fb0e:	6013      	str	r3, [r2, #0]
 800fb10:	e768      	b.n	800f9e4 <_strtod_l+0x44c>
 800fb12:	bf00      	nop
 800fb14:	080113ee 	.word	0x080113ee
 800fb18:	0801163c 	.word	0x0801163c
 800fb1c:	080113e6 	.word	0x080113e6
 800fb20:	08011459 	.word	0x08011459
 800fb24:	08011455 	.word	0x08011455
 800fb28:	08011570 	.word	0x08011570
 800fb2c:	08011548 	.word	0x08011548
 800fb30:	7ff00000 	.word	0x7ff00000
 800fb34:	7ca00000 	.word	0x7ca00000
 800fb38:	7fefffff 	.word	0x7fefffff
 800fb3c:	f014 0310 	ands.w	r3, r4, #16
 800fb40:	bf18      	it	ne
 800fb42:	236a      	movne	r3, #106	@ 0x6a
 800fb44:	4ea9      	ldr	r6, [pc, #676]	@ (800fdec <_strtod_l+0x854>)
 800fb46:	9308      	str	r3, [sp, #32]
 800fb48:	4650      	mov	r0, sl
 800fb4a:	4659      	mov	r1, fp
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	07e2      	lsls	r2, r4, #31
 800fb50:	d504      	bpl.n	800fb5c <_strtod_l+0x5c4>
 800fb52:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fb56:	f7f0 fd57 	bl	8000608 <__aeabi_dmul>
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	1064      	asrs	r4, r4, #1
 800fb5e:	f106 0608 	add.w	r6, r6, #8
 800fb62:	d1f4      	bne.n	800fb4e <_strtod_l+0x5b6>
 800fb64:	b10b      	cbz	r3, 800fb6a <_strtod_l+0x5d2>
 800fb66:	4682      	mov	sl, r0
 800fb68:	468b      	mov	fp, r1
 800fb6a:	9b08      	ldr	r3, [sp, #32]
 800fb6c:	b1b3      	cbz	r3, 800fb9c <_strtod_l+0x604>
 800fb6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800fb72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	4659      	mov	r1, fp
 800fb7a:	dd0f      	ble.n	800fb9c <_strtod_l+0x604>
 800fb7c:	2b1f      	cmp	r3, #31
 800fb7e:	dd55      	ble.n	800fc2c <_strtod_l+0x694>
 800fb80:	2b34      	cmp	r3, #52	@ 0x34
 800fb82:	bfde      	ittt	le
 800fb84:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800fb88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800fb8c:	4093      	lslle	r3, r2
 800fb8e:	f04f 0a00 	mov.w	sl, #0
 800fb92:	bfcc      	ite	gt
 800fb94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800fb98:	ea03 0b01 	andle.w	fp, r3, r1
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	2300      	movs	r3, #0
 800fba0:	4650      	mov	r0, sl
 800fba2:	4659      	mov	r1, fp
 800fba4:	f7f0 ff98 	bl	8000ad8 <__aeabi_dcmpeq>
 800fba8:	2800      	cmp	r0, #0
 800fbaa:	d1a6      	bne.n	800fafa <_strtod_l+0x562>
 800fbac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbae:	9300      	str	r3, [sp, #0]
 800fbb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fbb2:	9805      	ldr	r0, [sp, #20]
 800fbb4:	462b      	mov	r3, r5
 800fbb6:	463a      	mov	r2, r7
 800fbb8:	f7ff f8bc 	bl	800ed34 <__s2b>
 800fbbc:	900a      	str	r0, [sp, #40]	@ 0x28
 800fbbe:	2800      	cmp	r0, #0
 800fbc0:	f43f af05 	beq.w	800f9ce <_strtod_l+0x436>
 800fbc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fbc6:	2a00      	cmp	r2, #0
 800fbc8:	eba9 0308 	sub.w	r3, r9, r8
 800fbcc:	bfa8      	it	ge
 800fbce:	2300      	movge	r3, #0
 800fbd0:	9312      	str	r3, [sp, #72]	@ 0x48
 800fbd2:	2400      	movs	r4, #0
 800fbd4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800fbd8:	9316      	str	r3, [sp, #88]	@ 0x58
 800fbda:	46a0      	mov	r8, r4
 800fbdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbde:	9805      	ldr	r0, [sp, #20]
 800fbe0:	6859      	ldr	r1, [r3, #4]
 800fbe2:	f7fe ffff 	bl	800ebe4 <_Balloc>
 800fbe6:	4681      	mov	r9, r0
 800fbe8:	2800      	cmp	r0, #0
 800fbea:	f43f aef4 	beq.w	800f9d6 <_strtod_l+0x43e>
 800fbee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbf0:	691a      	ldr	r2, [r3, #16]
 800fbf2:	3202      	adds	r2, #2
 800fbf4:	f103 010c 	add.w	r1, r3, #12
 800fbf8:	0092      	lsls	r2, r2, #2
 800fbfa:	300c      	adds	r0, #12
 800fbfc:	f7fe f929 	bl	800de52 <memcpy>
 800fc00:	ec4b ab10 	vmov	d0, sl, fp
 800fc04:	9805      	ldr	r0, [sp, #20]
 800fc06:	aa1c      	add	r2, sp, #112	@ 0x70
 800fc08:	a91b      	add	r1, sp, #108	@ 0x6c
 800fc0a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800fc0e:	f7ff fbcd 	bl	800f3ac <__d2b>
 800fc12:	901a      	str	r0, [sp, #104]	@ 0x68
 800fc14:	2800      	cmp	r0, #0
 800fc16:	f43f aede 	beq.w	800f9d6 <_strtod_l+0x43e>
 800fc1a:	9805      	ldr	r0, [sp, #20]
 800fc1c:	2101      	movs	r1, #1
 800fc1e:	f7ff f91f 	bl	800ee60 <__i2b>
 800fc22:	4680      	mov	r8, r0
 800fc24:	b948      	cbnz	r0, 800fc3a <_strtod_l+0x6a2>
 800fc26:	f04f 0800 	mov.w	r8, #0
 800fc2a:	e6d4      	b.n	800f9d6 <_strtod_l+0x43e>
 800fc2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fc30:	fa02 f303 	lsl.w	r3, r2, r3
 800fc34:	ea03 0a0a 	and.w	sl, r3, sl
 800fc38:	e7b0      	b.n	800fb9c <_strtod_l+0x604>
 800fc3a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800fc3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fc3e:	2d00      	cmp	r5, #0
 800fc40:	bfab      	itete	ge
 800fc42:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800fc44:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800fc46:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800fc48:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800fc4a:	bfac      	ite	ge
 800fc4c:	18ef      	addge	r7, r5, r3
 800fc4e:	1b5e      	sublt	r6, r3, r5
 800fc50:	9b08      	ldr	r3, [sp, #32]
 800fc52:	1aed      	subs	r5, r5, r3
 800fc54:	4415      	add	r5, r2
 800fc56:	4b66      	ldr	r3, [pc, #408]	@ (800fdf0 <_strtod_l+0x858>)
 800fc58:	3d01      	subs	r5, #1
 800fc5a:	429d      	cmp	r5, r3
 800fc5c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800fc60:	da50      	bge.n	800fd04 <_strtod_l+0x76c>
 800fc62:	1b5b      	subs	r3, r3, r5
 800fc64:	2b1f      	cmp	r3, #31
 800fc66:	eba2 0203 	sub.w	r2, r2, r3
 800fc6a:	f04f 0101 	mov.w	r1, #1
 800fc6e:	dc3d      	bgt.n	800fcec <_strtod_l+0x754>
 800fc70:	fa01 f303 	lsl.w	r3, r1, r3
 800fc74:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fc76:	2300      	movs	r3, #0
 800fc78:	9310      	str	r3, [sp, #64]	@ 0x40
 800fc7a:	18bd      	adds	r5, r7, r2
 800fc7c:	9b08      	ldr	r3, [sp, #32]
 800fc7e:	42af      	cmp	r7, r5
 800fc80:	4416      	add	r6, r2
 800fc82:	441e      	add	r6, r3
 800fc84:	463b      	mov	r3, r7
 800fc86:	bfa8      	it	ge
 800fc88:	462b      	movge	r3, r5
 800fc8a:	42b3      	cmp	r3, r6
 800fc8c:	bfa8      	it	ge
 800fc8e:	4633      	movge	r3, r6
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	bfc2      	ittt	gt
 800fc94:	1aed      	subgt	r5, r5, r3
 800fc96:	1af6      	subgt	r6, r6, r3
 800fc98:	1aff      	subgt	r7, r7, r3
 800fc9a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	dd16      	ble.n	800fcce <_strtod_l+0x736>
 800fca0:	4641      	mov	r1, r8
 800fca2:	9805      	ldr	r0, [sp, #20]
 800fca4:	461a      	mov	r2, r3
 800fca6:	f7ff f99b 	bl	800efe0 <__pow5mult>
 800fcaa:	4680      	mov	r8, r0
 800fcac:	2800      	cmp	r0, #0
 800fcae:	d0ba      	beq.n	800fc26 <_strtod_l+0x68e>
 800fcb0:	4601      	mov	r1, r0
 800fcb2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800fcb4:	9805      	ldr	r0, [sp, #20]
 800fcb6:	f7ff f8e9 	bl	800ee8c <__multiply>
 800fcba:	900e      	str	r0, [sp, #56]	@ 0x38
 800fcbc:	2800      	cmp	r0, #0
 800fcbe:	f43f ae8a 	beq.w	800f9d6 <_strtod_l+0x43e>
 800fcc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fcc4:	9805      	ldr	r0, [sp, #20]
 800fcc6:	f7fe ffcd 	bl	800ec64 <_Bfree>
 800fcca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fccc:	931a      	str	r3, [sp, #104]	@ 0x68
 800fcce:	2d00      	cmp	r5, #0
 800fcd0:	dc1d      	bgt.n	800fd0e <_strtod_l+0x776>
 800fcd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	dd23      	ble.n	800fd20 <_strtod_l+0x788>
 800fcd8:	4649      	mov	r1, r9
 800fcda:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800fcdc:	9805      	ldr	r0, [sp, #20]
 800fcde:	f7ff f97f 	bl	800efe0 <__pow5mult>
 800fce2:	4681      	mov	r9, r0
 800fce4:	b9e0      	cbnz	r0, 800fd20 <_strtod_l+0x788>
 800fce6:	f04f 0900 	mov.w	r9, #0
 800fcea:	e674      	b.n	800f9d6 <_strtod_l+0x43e>
 800fcec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800fcf0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800fcf4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800fcf8:	35e2      	adds	r5, #226	@ 0xe2
 800fcfa:	fa01 f305 	lsl.w	r3, r1, r5
 800fcfe:	9310      	str	r3, [sp, #64]	@ 0x40
 800fd00:	9113      	str	r1, [sp, #76]	@ 0x4c
 800fd02:	e7ba      	b.n	800fc7a <_strtod_l+0x6e2>
 800fd04:	2300      	movs	r3, #0
 800fd06:	9310      	str	r3, [sp, #64]	@ 0x40
 800fd08:	2301      	movs	r3, #1
 800fd0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fd0c:	e7b5      	b.n	800fc7a <_strtod_l+0x6e2>
 800fd0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd10:	9805      	ldr	r0, [sp, #20]
 800fd12:	462a      	mov	r2, r5
 800fd14:	f7ff f9be 	bl	800f094 <__lshift>
 800fd18:	901a      	str	r0, [sp, #104]	@ 0x68
 800fd1a:	2800      	cmp	r0, #0
 800fd1c:	d1d9      	bne.n	800fcd2 <_strtod_l+0x73a>
 800fd1e:	e65a      	b.n	800f9d6 <_strtod_l+0x43e>
 800fd20:	2e00      	cmp	r6, #0
 800fd22:	dd07      	ble.n	800fd34 <_strtod_l+0x79c>
 800fd24:	4649      	mov	r1, r9
 800fd26:	9805      	ldr	r0, [sp, #20]
 800fd28:	4632      	mov	r2, r6
 800fd2a:	f7ff f9b3 	bl	800f094 <__lshift>
 800fd2e:	4681      	mov	r9, r0
 800fd30:	2800      	cmp	r0, #0
 800fd32:	d0d8      	beq.n	800fce6 <_strtod_l+0x74e>
 800fd34:	2f00      	cmp	r7, #0
 800fd36:	dd08      	ble.n	800fd4a <_strtod_l+0x7b2>
 800fd38:	4641      	mov	r1, r8
 800fd3a:	9805      	ldr	r0, [sp, #20]
 800fd3c:	463a      	mov	r2, r7
 800fd3e:	f7ff f9a9 	bl	800f094 <__lshift>
 800fd42:	4680      	mov	r8, r0
 800fd44:	2800      	cmp	r0, #0
 800fd46:	f43f ae46 	beq.w	800f9d6 <_strtod_l+0x43e>
 800fd4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800fd4c:	9805      	ldr	r0, [sp, #20]
 800fd4e:	464a      	mov	r2, r9
 800fd50:	f7ff fa28 	bl	800f1a4 <__mdiff>
 800fd54:	4604      	mov	r4, r0
 800fd56:	2800      	cmp	r0, #0
 800fd58:	f43f ae3d 	beq.w	800f9d6 <_strtod_l+0x43e>
 800fd5c:	68c3      	ldr	r3, [r0, #12]
 800fd5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd60:	2300      	movs	r3, #0
 800fd62:	60c3      	str	r3, [r0, #12]
 800fd64:	4641      	mov	r1, r8
 800fd66:	f7ff fa01 	bl	800f16c <__mcmp>
 800fd6a:	2800      	cmp	r0, #0
 800fd6c:	da46      	bge.n	800fdfc <_strtod_l+0x864>
 800fd6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd70:	ea53 030a 	orrs.w	r3, r3, sl
 800fd74:	d16c      	bne.n	800fe50 <_strtod_l+0x8b8>
 800fd76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d168      	bne.n	800fe50 <_strtod_l+0x8b8>
 800fd7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fd82:	0d1b      	lsrs	r3, r3, #20
 800fd84:	051b      	lsls	r3, r3, #20
 800fd86:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fd8a:	d961      	bls.n	800fe50 <_strtod_l+0x8b8>
 800fd8c:	6963      	ldr	r3, [r4, #20]
 800fd8e:	b913      	cbnz	r3, 800fd96 <_strtod_l+0x7fe>
 800fd90:	6923      	ldr	r3, [r4, #16]
 800fd92:	2b01      	cmp	r3, #1
 800fd94:	dd5c      	ble.n	800fe50 <_strtod_l+0x8b8>
 800fd96:	4621      	mov	r1, r4
 800fd98:	2201      	movs	r2, #1
 800fd9a:	9805      	ldr	r0, [sp, #20]
 800fd9c:	f7ff f97a 	bl	800f094 <__lshift>
 800fda0:	4641      	mov	r1, r8
 800fda2:	4604      	mov	r4, r0
 800fda4:	f7ff f9e2 	bl	800f16c <__mcmp>
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	dd51      	ble.n	800fe50 <_strtod_l+0x8b8>
 800fdac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800fdb0:	9a08      	ldr	r2, [sp, #32]
 800fdb2:	0d1b      	lsrs	r3, r3, #20
 800fdb4:	051b      	lsls	r3, r3, #20
 800fdb6:	2a00      	cmp	r2, #0
 800fdb8:	d06b      	beq.n	800fe92 <_strtod_l+0x8fa>
 800fdba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800fdbe:	d868      	bhi.n	800fe92 <_strtod_l+0x8fa>
 800fdc0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800fdc4:	f67f ae9d 	bls.w	800fb02 <_strtod_l+0x56a>
 800fdc8:	4b0a      	ldr	r3, [pc, #40]	@ (800fdf4 <_strtod_l+0x85c>)
 800fdca:	4650      	mov	r0, sl
 800fdcc:	4659      	mov	r1, fp
 800fdce:	2200      	movs	r2, #0
 800fdd0:	f7f0 fc1a 	bl	8000608 <__aeabi_dmul>
 800fdd4:	4b08      	ldr	r3, [pc, #32]	@ (800fdf8 <_strtod_l+0x860>)
 800fdd6:	400b      	ands	r3, r1
 800fdd8:	4682      	mov	sl, r0
 800fdda:	468b      	mov	fp, r1
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	f47f ae05 	bne.w	800f9ec <_strtod_l+0x454>
 800fde2:	9a05      	ldr	r2, [sp, #20]
 800fde4:	2322      	movs	r3, #34	@ 0x22
 800fde6:	6013      	str	r3, [r2, #0]
 800fde8:	e600      	b.n	800f9ec <_strtod_l+0x454>
 800fdea:	bf00      	nop
 800fdec:	08011668 	.word	0x08011668
 800fdf0:	fffffc02 	.word	0xfffffc02
 800fdf4:	39500000 	.word	0x39500000
 800fdf8:	7ff00000 	.word	0x7ff00000
 800fdfc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800fe00:	d165      	bne.n	800fece <_strtod_l+0x936>
 800fe02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800fe04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fe08:	b35a      	cbz	r2, 800fe62 <_strtod_l+0x8ca>
 800fe0a:	4a9f      	ldr	r2, [pc, #636]	@ (8010088 <_strtod_l+0xaf0>)
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	d12b      	bne.n	800fe68 <_strtod_l+0x8d0>
 800fe10:	9b08      	ldr	r3, [sp, #32]
 800fe12:	4651      	mov	r1, sl
 800fe14:	b303      	cbz	r3, 800fe58 <_strtod_l+0x8c0>
 800fe16:	4b9d      	ldr	r3, [pc, #628]	@ (801008c <_strtod_l+0xaf4>)
 800fe18:	465a      	mov	r2, fp
 800fe1a:	4013      	ands	r3, r2
 800fe1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800fe20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fe24:	d81b      	bhi.n	800fe5e <_strtod_l+0x8c6>
 800fe26:	0d1b      	lsrs	r3, r3, #20
 800fe28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800fe2c:	fa02 f303 	lsl.w	r3, r2, r3
 800fe30:	4299      	cmp	r1, r3
 800fe32:	d119      	bne.n	800fe68 <_strtod_l+0x8d0>
 800fe34:	4b96      	ldr	r3, [pc, #600]	@ (8010090 <_strtod_l+0xaf8>)
 800fe36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d102      	bne.n	800fe42 <_strtod_l+0x8aa>
 800fe3c:	3101      	adds	r1, #1
 800fe3e:	f43f adca 	beq.w	800f9d6 <_strtod_l+0x43e>
 800fe42:	4b92      	ldr	r3, [pc, #584]	@ (801008c <_strtod_l+0xaf4>)
 800fe44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe46:	401a      	ands	r2, r3
 800fe48:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800fe4c:	f04f 0a00 	mov.w	sl, #0
 800fe50:	9b08      	ldr	r3, [sp, #32]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d1b8      	bne.n	800fdc8 <_strtod_l+0x830>
 800fe56:	e5c9      	b.n	800f9ec <_strtod_l+0x454>
 800fe58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fe5c:	e7e8      	b.n	800fe30 <_strtod_l+0x898>
 800fe5e:	4613      	mov	r3, r2
 800fe60:	e7e6      	b.n	800fe30 <_strtod_l+0x898>
 800fe62:	ea53 030a 	orrs.w	r3, r3, sl
 800fe66:	d0a1      	beq.n	800fdac <_strtod_l+0x814>
 800fe68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fe6a:	b1db      	cbz	r3, 800fea4 <_strtod_l+0x90c>
 800fe6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe6e:	4213      	tst	r3, r2
 800fe70:	d0ee      	beq.n	800fe50 <_strtod_l+0x8b8>
 800fe72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe74:	9a08      	ldr	r2, [sp, #32]
 800fe76:	4650      	mov	r0, sl
 800fe78:	4659      	mov	r1, fp
 800fe7a:	b1bb      	cbz	r3, 800feac <_strtod_l+0x914>
 800fe7c:	f7ff fb6c 	bl	800f558 <sulp>
 800fe80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fe84:	ec53 2b10 	vmov	r2, r3, d0
 800fe88:	f7f0 fa08 	bl	800029c <__adddf3>
 800fe8c:	4682      	mov	sl, r0
 800fe8e:	468b      	mov	fp, r1
 800fe90:	e7de      	b.n	800fe50 <_strtod_l+0x8b8>
 800fe92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800fe96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fe9a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fe9e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800fea2:	e7d5      	b.n	800fe50 <_strtod_l+0x8b8>
 800fea4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fea6:	ea13 0f0a 	tst.w	r3, sl
 800feaa:	e7e1      	b.n	800fe70 <_strtod_l+0x8d8>
 800feac:	f7ff fb54 	bl	800f558 <sulp>
 800feb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800feb4:	ec53 2b10 	vmov	r2, r3, d0
 800feb8:	f7f0 f9ee 	bl	8000298 <__aeabi_dsub>
 800febc:	2200      	movs	r2, #0
 800febe:	2300      	movs	r3, #0
 800fec0:	4682      	mov	sl, r0
 800fec2:	468b      	mov	fp, r1
 800fec4:	f7f0 fe08 	bl	8000ad8 <__aeabi_dcmpeq>
 800fec8:	2800      	cmp	r0, #0
 800feca:	d0c1      	beq.n	800fe50 <_strtod_l+0x8b8>
 800fecc:	e619      	b.n	800fb02 <_strtod_l+0x56a>
 800fece:	4641      	mov	r1, r8
 800fed0:	4620      	mov	r0, r4
 800fed2:	f7ff fac3 	bl	800f45c <__ratio>
 800fed6:	ec57 6b10 	vmov	r6, r7, d0
 800feda:	2200      	movs	r2, #0
 800fedc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fee0:	4630      	mov	r0, r6
 800fee2:	4639      	mov	r1, r7
 800fee4:	f7f0 fe0c 	bl	8000b00 <__aeabi_dcmple>
 800fee8:	2800      	cmp	r0, #0
 800feea:	d06f      	beq.n	800ffcc <_strtod_l+0xa34>
 800feec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d17a      	bne.n	800ffe8 <_strtod_l+0xa50>
 800fef2:	f1ba 0f00 	cmp.w	sl, #0
 800fef6:	d158      	bne.n	800ffaa <_strtod_l+0xa12>
 800fef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fefa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d15a      	bne.n	800ffb8 <_strtod_l+0xa20>
 800ff02:	4b64      	ldr	r3, [pc, #400]	@ (8010094 <_strtod_l+0xafc>)
 800ff04:	2200      	movs	r2, #0
 800ff06:	4630      	mov	r0, r6
 800ff08:	4639      	mov	r1, r7
 800ff0a:	f7f0 fdef 	bl	8000aec <__aeabi_dcmplt>
 800ff0e:	2800      	cmp	r0, #0
 800ff10:	d159      	bne.n	800ffc6 <_strtod_l+0xa2e>
 800ff12:	4630      	mov	r0, r6
 800ff14:	4639      	mov	r1, r7
 800ff16:	4b60      	ldr	r3, [pc, #384]	@ (8010098 <_strtod_l+0xb00>)
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f7f0 fb75 	bl	8000608 <__aeabi_dmul>
 800ff1e:	4606      	mov	r6, r0
 800ff20:	460f      	mov	r7, r1
 800ff22:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ff26:	9606      	str	r6, [sp, #24]
 800ff28:	9307      	str	r3, [sp, #28]
 800ff2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ff2e:	4d57      	ldr	r5, [pc, #348]	@ (801008c <_strtod_l+0xaf4>)
 800ff30:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ff34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff36:	401d      	ands	r5, r3
 800ff38:	4b58      	ldr	r3, [pc, #352]	@ (801009c <_strtod_l+0xb04>)
 800ff3a:	429d      	cmp	r5, r3
 800ff3c:	f040 80b2 	bne.w	80100a4 <_strtod_l+0xb0c>
 800ff40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff42:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ff46:	ec4b ab10 	vmov	d0, sl, fp
 800ff4a:	f7ff f9bf 	bl	800f2cc <__ulp>
 800ff4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ff52:	ec51 0b10 	vmov	r0, r1, d0
 800ff56:	f7f0 fb57 	bl	8000608 <__aeabi_dmul>
 800ff5a:	4652      	mov	r2, sl
 800ff5c:	465b      	mov	r3, fp
 800ff5e:	f7f0 f99d 	bl	800029c <__adddf3>
 800ff62:	460b      	mov	r3, r1
 800ff64:	4949      	ldr	r1, [pc, #292]	@ (801008c <_strtod_l+0xaf4>)
 800ff66:	4a4e      	ldr	r2, [pc, #312]	@ (80100a0 <_strtod_l+0xb08>)
 800ff68:	4019      	ands	r1, r3
 800ff6a:	4291      	cmp	r1, r2
 800ff6c:	4682      	mov	sl, r0
 800ff6e:	d942      	bls.n	800fff6 <_strtod_l+0xa5e>
 800ff70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ff72:	4b47      	ldr	r3, [pc, #284]	@ (8010090 <_strtod_l+0xaf8>)
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d103      	bne.n	800ff80 <_strtod_l+0x9e8>
 800ff78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	f43f ad2b 	beq.w	800f9d6 <_strtod_l+0x43e>
 800ff80:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8010090 <_strtod_l+0xaf8>
 800ff84:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800ff88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ff8a:	9805      	ldr	r0, [sp, #20]
 800ff8c:	f7fe fe6a 	bl	800ec64 <_Bfree>
 800ff90:	9805      	ldr	r0, [sp, #20]
 800ff92:	4649      	mov	r1, r9
 800ff94:	f7fe fe66 	bl	800ec64 <_Bfree>
 800ff98:	9805      	ldr	r0, [sp, #20]
 800ff9a:	4641      	mov	r1, r8
 800ff9c:	f7fe fe62 	bl	800ec64 <_Bfree>
 800ffa0:	9805      	ldr	r0, [sp, #20]
 800ffa2:	4621      	mov	r1, r4
 800ffa4:	f7fe fe5e 	bl	800ec64 <_Bfree>
 800ffa8:	e618      	b.n	800fbdc <_strtod_l+0x644>
 800ffaa:	f1ba 0f01 	cmp.w	sl, #1
 800ffae:	d103      	bne.n	800ffb8 <_strtod_l+0xa20>
 800ffb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	f43f ada5 	beq.w	800fb02 <_strtod_l+0x56a>
 800ffb8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8010068 <_strtod_l+0xad0>
 800ffbc:	4f35      	ldr	r7, [pc, #212]	@ (8010094 <_strtod_l+0xafc>)
 800ffbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ffc2:	2600      	movs	r6, #0
 800ffc4:	e7b1      	b.n	800ff2a <_strtod_l+0x992>
 800ffc6:	4f34      	ldr	r7, [pc, #208]	@ (8010098 <_strtod_l+0xb00>)
 800ffc8:	2600      	movs	r6, #0
 800ffca:	e7aa      	b.n	800ff22 <_strtod_l+0x98a>
 800ffcc:	4b32      	ldr	r3, [pc, #200]	@ (8010098 <_strtod_l+0xb00>)
 800ffce:	4630      	mov	r0, r6
 800ffd0:	4639      	mov	r1, r7
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	f7f0 fb18 	bl	8000608 <__aeabi_dmul>
 800ffd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffda:	4606      	mov	r6, r0
 800ffdc:	460f      	mov	r7, r1
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d09f      	beq.n	800ff22 <_strtod_l+0x98a>
 800ffe2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ffe6:	e7a0      	b.n	800ff2a <_strtod_l+0x992>
 800ffe8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8010070 <_strtod_l+0xad8>
 800ffec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fff0:	ec57 6b17 	vmov	r6, r7, d7
 800fff4:	e799      	b.n	800ff2a <_strtod_l+0x992>
 800fff6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800fffa:	9b08      	ldr	r3, [sp, #32]
 800fffc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8010000:	2b00      	cmp	r3, #0
 8010002:	d1c1      	bne.n	800ff88 <_strtod_l+0x9f0>
 8010004:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010008:	0d1b      	lsrs	r3, r3, #20
 801000a:	051b      	lsls	r3, r3, #20
 801000c:	429d      	cmp	r5, r3
 801000e:	d1bb      	bne.n	800ff88 <_strtod_l+0x9f0>
 8010010:	4630      	mov	r0, r6
 8010012:	4639      	mov	r1, r7
 8010014:	f7f0 fe58 	bl	8000cc8 <__aeabi_d2lz>
 8010018:	f7f0 fac8 	bl	80005ac <__aeabi_l2d>
 801001c:	4602      	mov	r2, r0
 801001e:	460b      	mov	r3, r1
 8010020:	4630      	mov	r0, r6
 8010022:	4639      	mov	r1, r7
 8010024:	f7f0 f938 	bl	8000298 <__aeabi_dsub>
 8010028:	460b      	mov	r3, r1
 801002a:	4602      	mov	r2, r0
 801002c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8010030:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8010034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010036:	ea46 060a 	orr.w	r6, r6, sl
 801003a:	431e      	orrs	r6, r3
 801003c:	d06f      	beq.n	801011e <_strtod_l+0xb86>
 801003e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010078 <_strtod_l+0xae0>)
 8010040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010044:	f7f0 fd52 	bl	8000aec <__aeabi_dcmplt>
 8010048:	2800      	cmp	r0, #0
 801004a:	f47f accf 	bne.w	800f9ec <_strtod_l+0x454>
 801004e:	a30c      	add	r3, pc, #48	@ (adr r3, 8010080 <_strtod_l+0xae8>)
 8010050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010054:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010058:	f7f0 fd66 	bl	8000b28 <__aeabi_dcmpgt>
 801005c:	2800      	cmp	r0, #0
 801005e:	d093      	beq.n	800ff88 <_strtod_l+0x9f0>
 8010060:	e4c4      	b.n	800f9ec <_strtod_l+0x454>
 8010062:	bf00      	nop
 8010064:	f3af 8000 	nop.w
 8010068:	00000000 	.word	0x00000000
 801006c:	bff00000 	.word	0xbff00000
 8010070:	00000000 	.word	0x00000000
 8010074:	3ff00000 	.word	0x3ff00000
 8010078:	94a03595 	.word	0x94a03595
 801007c:	3fdfffff 	.word	0x3fdfffff
 8010080:	35afe535 	.word	0x35afe535
 8010084:	3fe00000 	.word	0x3fe00000
 8010088:	000fffff 	.word	0x000fffff
 801008c:	7ff00000 	.word	0x7ff00000
 8010090:	7fefffff 	.word	0x7fefffff
 8010094:	3ff00000 	.word	0x3ff00000
 8010098:	3fe00000 	.word	0x3fe00000
 801009c:	7fe00000 	.word	0x7fe00000
 80100a0:	7c9fffff 	.word	0x7c9fffff
 80100a4:	9b08      	ldr	r3, [sp, #32]
 80100a6:	b323      	cbz	r3, 80100f2 <_strtod_l+0xb5a>
 80100a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80100ac:	d821      	bhi.n	80100f2 <_strtod_l+0xb5a>
 80100ae:	a328      	add	r3, pc, #160	@ (adr r3, 8010150 <_strtod_l+0xbb8>)
 80100b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b4:	4630      	mov	r0, r6
 80100b6:	4639      	mov	r1, r7
 80100b8:	f7f0 fd22 	bl	8000b00 <__aeabi_dcmple>
 80100bc:	b1a0      	cbz	r0, 80100e8 <_strtod_l+0xb50>
 80100be:	4639      	mov	r1, r7
 80100c0:	4630      	mov	r0, r6
 80100c2:	f7f0 fd79 	bl	8000bb8 <__aeabi_d2uiz>
 80100c6:	2801      	cmp	r0, #1
 80100c8:	bf38      	it	cc
 80100ca:	2001      	movcc	r0, #1
 80100cc:	f7f0 fa22 	bl	8000514 <__aeabi_ui2d>
 80100d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100d2:	4606      	mov	r6, r0
 80100d4:	460f      	mov	r7, r1
 80100d6:	b9fb      	cbnz	r3, 8010118 <_strtod_l+0xb80>
 80100d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80100dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80100de:	9315      	str	r3, [sp, #84]	@ 0x54
 80100e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80100e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80100e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80100ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80100ee:	1b5b      	subs	r3, r3, r5
 80100f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80100f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80100f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80100fa:	f7ff f8e7 	bl	800f2cc <__ulp>
 80100fe:	4650      	mov	r0, sl
 8010100:	ec53 2b10 	vmov	r2, r3, d0
 8010104:	4659      	mov	r1, fp
 8010106:	f7f0 fa7f 	bl	8000608 <__aeabi_dmul>
 801010a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801010e:	f7f0 f8c5 	bl	800029c <__adddf3>
 8010112:	4682      	mov	sl, r0
 8010114:	468b      	mov	fp, r1
 8010116:	e770      	b.n	800fffa <_strtod_l+0xa62>
 8010118:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801011c:	e7e0      	b.n	80100e0 <_strtod_l+0xb48>
 801011e:	a30e      	add	r3, pc, #56	@ (adr r3, 8010158 <_strtod_l+0xbc0>)
 8010120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010124:	f7f0 fce2 	bl	8000aec <__aeabi_dcmplt>
 8010128:	e798      	b.n	801005c <_strtod_l+0xac4>
 801012a:	2300      	movs	r3, #0
 801012c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801012e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8010130:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8010132:	6013      	str	r3, [r2, #0]
 8010134:	f7ff ba6d 	b.w	800f612 <_strtod_l+0x7a>
 8010138:	2a65      	cmp	r2, #101	@ 0x65
 801013a:	f43f ab66 	beq.w	800f80a <_strtod_l+0x272>
 801013e:	2a45      	cmp	r2, #69	@ 0x45
 8010140:	f43f ab63 	beq.w	800f80a <_strtod_l+0x272>
 8010144:	2301      	movs	r3, #1
 8010146:	f7ff bb9e 	b.w	800f886 <_strtod_l+0x2ee>
 801014a:	bf00      	nop
 801014c:	f3af 8000 	nop.w
 8010150:	ffc00000 	.word	0xffc00000
 8010154:	41dfffff 	.word	0x41dfffff
 8010158:	94a03595 	.word	0x94a03595
 801015c:	3fcfffff 	.word	0x3fcfffff

08010160 <_strtod_r>:
 8010160:	4b01      	ldr	r3, [pc, #4]	@ (8010168 <_strtod_r+0x8>)
 8010162:	f7ff ba19 	b.w	800f598 <_strtod_l>
 8010166:	bf00      	nop
 8010168:	20000080 	.word	0x20000080

0801016c <_strtol_l.constprop.0>:
 801016c:	2b24      	cmp	r3, #36	@ 0x24
 801016e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010172:	4686      	mov	lr, r0
 8010174:	4690      	mov	r8, r2
 8010176:	d801      	bhi.n	801017c <_strtol_l.constprop.0+0x10>
 8010178:	2b01      	cmp	r3, #1
 801017a:	d106      	bne.n	801018a <_strtol_l.constprop.0+0x1e>
 801017c:	f7fd fe3c 	bl	800ddf8 <__errno>
 8010180:	2316      	movs	r3, #22
 8010182:	6003      	str	r3, [r0, #0]
 8010184:	2000      	movs	r0, #0
 8010186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801018a:	4834      	ldr	r0, [pc, #208]	@ (801025c <_strtol_l.constprop.0+0xf0>)
 801018c:	460d      	mov	r5, r1
 801018e:	462a      	mov	r2, r5
 8010190:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010194:	5d06      	ldrb	r6, [r0, r4]
 8010196:	f016 0608 	ands.w	r6, r6, #8
 801019a:	d1f8      	bne.n	801018e <_strtol_l.constprop.0+0x22>
 801019c:	2c2d      	cmp	r4, #45	@ 0x2d
 801019e:	d12d      	bne.n	80101fc <_strtol_l.constprop.0+0x90>
 80101a0:	782c      	ldrb	r4, [r5, #0]
 80101a2:	2601      	movs	r6, #1
 80101a4:	1c95      	adds	r5, r2, #2
 80101a6:	f033 0210 	bics.w	r2, r3, #16
 80101aa:	d109      	bne.n	80101c0 <_strtol_l.constprop.0+0x54>
 80101ac:	2c30      	cmp	r4, #48	@ 0x30
 80101ae:	d12a      	bne.n	8010206 <_strtol_l.constprop.0+0x9a>
 80101b0:	782a      	ldrb	r2, [r5, #0]
 80101b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80101b6:	2a58      	cmp	r2, #88	@ 0x58
 80101b8:	d125      	bne.n	8010206 <_strtol_l.constprop.0+0x9a>
 80101ba:	786c      	ldrb	r4, [r5, #1]
 80101bc:	2310      	movs	r3, #16
 80101be:	3502      	adds	r5, #2
 80101c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80101c4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80101c8:	2200      	movs	r2, #0
 80101ca:	fbbc f9f3 	udiv	r9, ip, r3
 80101ce:	4610      	mov	r0, r2
 80101d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80101d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80101d8:	2f09      	cmp	r7, #9
 80101da:	d81b      	bhi.n	8010214 <_strtol_l.constprop.0+0xa8>
 80101dc:	463c      	mov	r4, r7
 80101de:	42a3      	cmp	r3, r4
 80101e0:	dd27      	ble.n	8010232 <_strtol_l.constprop.0+0xc6>
 80101e2:	1c57      	adds	r7, r2, #1
 80101e4:	d007      	beq.n	80101f6 <_strtol_l.constprop.0+0x8a>
 80101e6:	4581      	cmp	r9, r0
 80101e8:	d320      	bcc.n	801022c <_strtol_l.constprop.0+0xc0>
 80101ea:	d101      	bne.n	80101f0 <_strtol_l.constprop.0+0x84>
 80101ec:	45a2      	cmp	sl, r4
 80101ee:	db1d      	blt.n	801022c <_strtol_l.constprop.0+0xc0>
 80101f0:	fb00 4003 	mla	r0, r0, r3, r4
 80101f4:	2201      	movs	r2, #1
 80101f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80101fa:	e7eb      	b.n	80101d4 <_strtol_l.constprop.0+0x68>
 80101fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80101fe:	bf04      	itt	eq
 8010200:	782c      	ldrbeq	r4, [r5, #0]
 8010202:	1c95      	addeq	r5, r2, #2
 8010204:	e7cf      	b.n	80101a6 <_strtol_l.constprop.0+0x3a>
 8010206:	2b00      	cmp	r3, #0
 8010208:	d1da      	bne.n	80101c0 <_strtol_l.constprop.0+0x54>
 801020a:	2c30      	cmp	r4, #48	@ 0x30
 801020c:	bf0c      	ite	eq
 801020e:	2308      	moveq	r3, #8
 8010210:	230a      	movne	r3, #10
 8010212:	e7d5      	b.n	80101c0 <_strtol_l.constprop.0+0x54>
 8010214:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010218:	2f19      	cmp	r7, #25
 801021a:	d801      	bhi.n	8010220 <_strtol_l.constprop.0+0xb4>
 801021c:	3c37      	subs	r4, #55	@ 0x37
 801021e:	e7de      	b.n	80101de <_strtol_l.constprop.0+0x72>
 8010220:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010224:	2f19      	cmp	r7, #25
 8010226:	d804      	bhi.n	8010232 <_strtol_l.constprop.0+0xc6>
 8010228:	3c57      	subs	r4, #87	@ 0x57
 801022a:	e7d8      	b.n	80101de <_strtol_l.constprop.0+0x72>
 801022c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010230:	e7e1      	b.n	80101f6 <_strtol_l.constprop.0+0x8a>
 8010232:	1c53      	adds	r3, r2, #1
 8010234:	d108      	bne.n	8010248 <_strtol_l.constprop.0+0xdc>
 8010236:	2322      	movs	r3, #34	@ 0x22
 8010238:	f8ce 3000 	str.w	r3, [lr]
 801023c:	4660      	mov	r0, ip
 801023e:	f1b8 0f00 	cmp.w	r8, #0
 8010242:	d0a0      	beq.n	8010186 <_strtol_l.constprop.0+0x1a>
 8010244:	1e69      	subs	r1, r5, #1
 8010246:	e006      	b.n	8010256 <_strtol_l.constprop.0+0xea>
 8010248:	b106      	cbz	r6, 801024c <_strtol_l.constprop.0+0xe0>
 801024a:	4240      	negs	r0, r0
 801024c:	f1b8 0f00 	cmp.w	r8, #0
 8010250:	d099      	beq.n	8010186 <_strtol_l.constprop.0+0x1a>
 8010252:	2a00      	cmp	r2, #0
 8010254:	d1f6      	bne.n	8010244 <_strtol_l.constprop.0+0xd8>
 8010256:	f8c8 1000 	str.w	r1, [r8]
 801025a:	e794      	b.n	8010186 <_strtol_l.constprop.0+0x1a>
 801025c:	080112e1 	.word	0x080112e1

08010260 <_strtol_r>:
 8010260:	f7ff bf84 	b.w	801016c <_strtol_l.constprop.0>

08010264 <__ssputs_r>:
 8010264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010268:	688e      	ldr	r6, [r1, #8]
 801026a:	461f      	mov	r7, r3
 801026c:	42be      	cmp	r6, r7
 801026e:	680b      	ldr	r3, [r1, #0]
 8010270:	4682      	mov	sl, r0
 8010272:	460c      	mov	r4, r1
 8010274:	4690      	mov	r8, r2
 8010276:	d82d      	bhi.n	80102d4 <__ssputs_r+0x70>
 8010278:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801027c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010280:	d026      	beq.n	80102d0 <__ssputs_r+0x6c>
 8010282:	6965      	ldr	r5, [r4, #20]
 8010284:	6909      	ldr	r1, [r1, #16]
 8010286:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801028a:	eba3 0901 	sub.w	r9, r3, r1
 801028e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010292:	1c7b      	adds	r3, r7, #1
 8010294:	444b      	add	r3, r9
 8010296:	106d      	asrs	r5, r5, #1
 8010298:	429d      	cmp	r5, r3
 801029a:	bf38      	it	cc
 801029c:	461d      	movcc	r5, r3
 801029e:	0553      	lsls	r3, r2, #21
 80102a0:	d527      	bpl.n	80102f2 <__ssputs_r+0x8e>
 80102a2:	4629      	mov	r1, r5
 80102a4:	f7fc fb86 	bl	800c9b4 <_malloc_r>
 80102a8:	4606      	mov	r6, r0
 80102aa:	b360      	cbz	r0, 8010306 <__ssputs_r+0xa2>
 80102ac:	6921      	ldr	r1, [r4, #16]
 80102ae:	464a      	mov	r2, r9
 80102b0:	f7fd fdcf 	bl	800de52 <memcpy>
 80102b4:	89a3      	ldrh	r3, [r4, #12]
 80102b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80102ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102be:	81a3      	strh	r3, [r4, #12]
 80102c0:	6126      	str	r6, [r4, #16]
 80102c2:	6165      	str	r5, [r4, #20]
 80102c4:	444e      	add	r6, r9
 80102c6:	eba5 0509 	sub.w	r5, r5, r9
 80102ca:	6026      	str	r6, [r4, #0]
 80102cc:	60a5      	str	r5, [r4, #8]
 80102ce:	463e      	mov	r6, r7
 80102d0:	42be      	cmp	r6, r7
 80102d2:	d900      	bls.n	80102d6 <__ssputs_r+0x72>
 80102d4:	463e      	mov	r6, r7
 80102d6:	6820      	ldr	r0, [r4, #0]
 80102d8:	4632      	mov	r2, r6
 80102da:	4641      	mov	r1, r8
 80102dc:	f7fd fca8 	bl	800dc30 <memmove>
 80102e0:	68a3      	ldr	r3, [r4, #8]
 80102e2:	1b9b      	subs	r3, r3, r6
 80102e4:	60a3      	str	r3, [r4, #8]
 80102e6:	6823      	ldr	r3, [r4, #0]
 80102e8:	4433      	add	r3, r6
 80102ea:	6023      	str	r3, [r4, #0]
 80102ec:	2000      	movs	r0, #0
 80102ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102f2:	462a      	mov	r2, r5
 80102f4:	f7fc fbea 	bl	800cacc <_realloc_r>
 80102f8:	4606      	mov	r6, r0
 80102fa:	2800      	cmp	r0, #0
 80102fc:	d1e0      	bne.n	80102c0 <__ssputs_r+0x5c>
 80102fe:	6921      	ldr	r1, [r4, #16]
 8010300:	4650      	mov	r0, sl
 8010302:	f7fe fc25 	bl	800eb50 <_free_r>
 8010306:	230c      	movs	r3, #12
 8010308:	f8ca 3000 	str.w	r3, [sl]
 801030c:	89a3      	ldrh	r3, [r4, #12]
 801030e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010312:	81a3      	strh	r3, [r4, #12]
 8010314:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010318:	e7e9      	b.n	80102ee <__ssputs_r+0x8a>
	...

0801031c <_svfiprintf_r>:
 801031c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010320:	4698      	mov	r8, r3
 8010322:	898b      	ldrh	r3, [r1, #12]
 8010324:	061b      	lsls	r3, r3, #24
 8010326:	b09d      	sub	sp, #116	@ 0x74
 8010328:	4607      	mov	r7, r0
 801032a:	460d      	mov	r5, r1
 801032c:	4614      	mov	r4, r2
 801032e:	d510      	bpl.n	8010352 <_svfiprintf_r+0x36>
 8010330:	690b      	ldr	r3, [r1, #16]
 8010332:	b973      	cbnz	r3, 8010352 <_svfiprintf_r+0x36>
 8010334:	2140      	movs	r1, #64	@ 0x40
 8010336:	f7fc fb3d 	bl	800c9b4 <_malloc_r>
 801033a:	6028      	str	r0, [r5, #0]
 801033c:	6128      	str	r0, [r5, #16]
 801033e:	b930      	cbnz	r0, 801034e <_svfiprintf_r+0x32>
 8010340:	230c      	movs	r3, #12
 8010342:	603b      	str	r3, [r7, #0]
 8010344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010348:	b01d      	add	sp, #116	@ 0x74
 801034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801034e:	2340      	movs	r3, #64	@ 0x40
 8010350:	616b      	str	r3, [r5, #20]
 8010352:	2300      	movs	r3, #0
 8010354:	9309      	str	r3, [sp, #36]	@ 0x24
 8010356:	2320      	movs	r3, #32
 8010358:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801035c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010360:	2330      	movs	r3, #48	@ 0x30
 8010362:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010500 <_svfiprintf_r+0x1e4>
 8010366:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801036a:	f04f 0901 	mov.w	r9, #1
 801036e:	4623      	mov	r3, r4
 8010370:	469a      	mov	sl, r3
 8010372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010376:	b10a      	cbz	r2, 801037c <_svfiprintf_r+0x60>
 8010378:	2a25      	cmp	r2, #37	@ 0x25
 801037a:	d1f9      	bne.n	8010370 <_svfiprintf_r+0x54>
 801037c:	ebba 0b04 	subs.w	fp, sl, r4
 8010380:	d00b      	beq.n	801039a <_svfiprintf_r+0x7e>
 8010382:	465b      	mov	r3, fp
 8010384:	4622      	mov	r2, r4
 8010386:	4629      	mov	r1, r5
 8010388:	4638      	mov	r0, r7
 801038a:	f7ff ff6b 	bl	8010264 <__ssputs_r>
 801038e:	3001      	adds	r0, #1
 8010390:	f000 80a7 	beq.w	80104e2 <_svfiprintf_r+0x1c6>
 8010394:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010396:	445a      	add	r2, fp
 8010398:	9209      	str	r2, [sp, #36]	@ 0x24
 801039a:	f89a 3000 	ldrb.w	r3, [sl]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	f000 809f 	beq.w	80104e2 <_svfiprintf_r+0x1c6>
 80103a4:	2300      	movs	r3, #0
 80103a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80103aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103ae:	f10a 0a01 	add.w	sl, sl, #1
 80103b2:	9304      	str	r3, [sp, #16]
 80103b4:	9307      	str	r3, [sp, #28]
 80103b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80103ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80103bc:	4654      	mov	r4, sl
 80103be:	2205      	movs	r2, #5
 80103c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103c4:	484e      	ldr	r0, [pc, #312]	@ (8010500 <_svfiprintf_r+0x1e4>)
 80103c6:	f7ef ff0b 	bl	80001e0 <memchr>
 80103ca:	9a04      	ldr	r2, [sp, #16]
 80103cc:	b9d8      	cbnz	r0, 8010406 <_svfiprintf_r+0xea>
 80103ce:	06d0      	lsls	r0, r2, #27
 80103d0:	bf44      	itt	mi
 80103d2:	2320      	movmi	r3, #32
 80103d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80103d8:	0711      	lsls	r1, r2, #28
 80103da:	bf44      	itt	mi
 80103dc:	232b      	movmi	r3, #43	@ 0x2b
 80103de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80103e2:	f89a 3000 	ldrb.w	r3, [sl]
 80103e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80103e8:	d015      	beq.n	8010416 <_svfiprintf_r+0xfa>
 80103ea:	9a07      	ldr	r2, [sp, #28]
 80103ec:	4654      	mov	r4, sl
 80103ee:	2000      	movs	r0, #0
 80103f0:	f04f 0c0a 	mov.w	ip, #10
 80103f4:	4621      	mov	r1, r4
 80103f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80103fa:	3b30      	subs	r3, #48	@ 0x30
 80103fc:	2b09      	cmp	r3, #9
 80103fe:	d94b      	bls.n	8010498 <_svfiprintf_r+0x17c>
 8010400:	b1b0      	cbz	r0, 8010430 <_svfiprintf_r+0x114>
 8010402:	9207      	str	r2, [sp, #28]
 8010404:	e014      	b.n	8010430 <_svfiprintf_r+0x114>
 8010406:	eba0 0308 	sub.w	r3, r0, r8
 801040a:	fa09 f303 	lsl.w	r3, r9, r3
 801040e:	4313      	orrs	r3, r2
 8010410:	9304      	str	r3, [sp, #16]
 8010412:	46a2      	mov	sl, r4
 8010414:	e7d2      	b.n	80103bc <_svfiprintf_r+0xa0>
 8010416:	9b03      	ldr	r3, [sp, #12]
 8010418:	1d19      	adds	r1, r3, #4
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	9103      	str	r1, [sp, #12]
 801041e:	2b00      	cmp	r3, #0
 8010420:	bfbb      	ittet	lt
 8010422:	425b      	neglt	r3, r3
 8010424:	f042 0202 	orrlt.w	r2, r2, #2
 8010428:	9307      	strge	r3, [sp, #28]
 801042a:	9307      	strlt	r3, [sp, #28]
 801042c:	bfb8      	it	lt
 801042e:	9204      	strlt	r2, [sp, #16]
 8010430:	7823      	ldrb	r3, [r4, #0]
 8010432:	2b2e      	cmp	r3, #46	@ 0x2e
 8010434:	d10a      	bne.n	801044c <_svfiprintf_r+0x130>
 8010436:	7863      	ldrb	r3, [r4, #1]
 8010438:	2b2a      	cmp	r3, #42	@ 0x2a
 801043a:	d132      	bne.n	80104a2 <_svfiprintf_r+0x186>
 801043c:	9b03      	ldr	r3, [sp, #12]
 801043e:	1d1a      	adds	r2, r3, #4
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	9203      	str	r2, [sp, #12]
 8010444:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010448:	3402      	adds	r4, #2
 801044a:	9305      	str	r3, [sp, #20]
 801044c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010510 <_svfiprintf_r+0x1f4>
 8010450:	7821      	ldrb	r1, [r4, #0]
 8010452:	2203      	movs	r2, #3
 8010454:	4650      	mov	r0, sl
 8010456:	f7ef fec3 	bl	80001e0 <memchr>
 801045a:	b138      	cbz	r0, 801046c <_svfiprintf_r+0x150>
 801045c:	9b04      	ldr	r3, [sp, #16]
 801045e:	eba0 000a 	sub.w	r0, r0, sl
 8010462:	2240      	movs	r2, #64	@ 0x40
 8010464:	4082      	lsls	r2, r0
 8010466:	4313      	orrs	r3, r2
 8010468:	3401      	adds	r4, #1
 801046a:	9304      	str	r3, [sp, #16]
 801046c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010470:	4824      	ldr	r0, [pc, #144]	@ (8010504 <_svfiprintf_r+0x1e8>)
 8010472:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010476:	2206      	movs	r2, #6
 8010478:	f7ef feb2 	bl	80001e0 <memchr>
 801047c:	2800      	cmp	r0, #0
 801047e:	d036      	beq.n	80104ee <_svfiprintf_r+0x1d2>
 8010480:	4b21      	ldr	r3, [pc, #132]	@ (8010508 <_svfiprintf_r+0x1ec>)
 8010482:	bb1b      	cbnz	r3, 80104cc <_svfiprintf_r+0x1b0>
 8010484:	9b03      	ldr	r3, [sp, #12]
 8010486:	3307      	adds	r3, #7
 8010488:	f023 0307 	bic.w	r3, r3, #7
 801048c:	3308      	adds	r3, #8
 801048e:	9303      	str	r3, [sp, #12]
 8010490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010492:	4433      	add	r3, r6
 8010494:	9309      	str	r3, [sp, #36]	@ 0x24
 8010496:	e76a      	b.n	801036e <_svfiprintf_r+0x52>
 8010498:	fb0c 3202 	mla	r2, ip, r2, r3
 801049c:	460c      	mov	r4, r1
 801049e:	2001      	movs	r0, #1
 80104a0:	e7a8      	b.n	80103f4 <_svfiprintf_r+0xd8>
 80104a2:	2300      	movs	r3, #0
 80104a4:	3401      	adds	r4, #1
 80104a6:	9305      	str	r3, [sp, #20]
 80104a8:	4619      	mov	r1, r3
 80104aa:	f04f 0c0a 	mov.w	ip, #10
 80104ae:	4620      	mov	r0, r4
 80104b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104b4:	3a30      	subs	r2, #48	@ 0x30
 80104b6:	2a09      	cmp	r2, #9
 80104b8:	d903      	bls.n	80104c2 <_svfiprintf_r+0x1a6>
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d0c6      	beq.n	801044c <_svfiprintf_r+0x130>
 80104be:	9105      	str	r1, [sp, #20]
 80104c0:	e7c4      	b.n	801044c <_svfiprintf_r+0x130>
 80104c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80104c6:	4604      	mov	r4, r0
 80104c8:	2301      	movs	r3, #1
 80104ca:	e7f0      	b.n	80104ae <_svfiprintf_r+0x192>
 80104cc:	ab03      	add	r3, sp, #12
 80104ce:	9300      	str	r3, [sp, #0]
 80104d0:	462a      	mov	r2, r5
 80104d2:	4b0e      	ldr	r3, [pc, #56]	@ (801050c <_svfiprintf_r+0x1f0>)
 80104d4:	a904      	add	r1, sp, #16
 80104d6:	4638      	mov	r0, r7
 80104d8:	f7fc fbc6 	bl	800cc68 <_printf_float>
 80104dc:	1c42      	adds	r2, r0, #1
 80104de:	4606      	mov	r6, r0
 80104e0:	d1d6      	bne.n	8010490 <_svfiprintf_r+0x174>
 80104e2:	89ab      	ldrh	r3, [r5, #12]
 80104e4:	065b      	lsls	r3, r3, #25
 80104e6:	f53f af2d 	bmi.w	8010344 <_svfiprintf_r+0x28>
 80104ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80104ec:	e72c      	b.n	8010348 <_svfiprintf_r+0x2c>
 80104ee:	ab03      	add	r3, sp, #12
 80104f0:	9300      	str	r3, [sp, #0]
 80104f2:	462a      	mov	r2, r5
 80104f4:	4b05      	ldr	r3, [pc, #20]	@ (801050c <_svfiprintf_r+0x1f0>)
 80104f6:	a904      	add	r1, sp, #16
 80104f8:	4638      	mov	r0, r7
 80104fa:	f7fc fe4d 	bl	800d198 <_printf_i>
 80104fe:	e7ed      	b.n	80104dc <_svfiprintf_r+0x1c0>
 8010500:	08011690 	.word	0x08011690
 8010504:	0801169a 	.word	0x0801169a
 8010508:	0800cc69 	.word	0x0800cc69
 801050c:	08010265 	.word	0x08010265
 8010510:	08011696 	.word	0x08011696

08010514 <__sfputc_r>:
 8010514:	6893      	ldr	r3, [r2, #8]
 8010516:	3b01      	subs	r3, #1
 8010518:	2b00      	cmp	r3, #0
 801051a:	b410      	push	{r4}
 801051c:	6093      	str	r3, [r2, #8]
 801051e:	da08      	bge.n	8010532 <__sfputc_r+0x1e>
 8010520:	6994      	ldr	r4, [r2, #24]
 8010522:	42a3      	cmp	r3, r4
 8010524:	db01      	blt.n	801052a <__sfputc_r+0x16>
 8010526:	290a      	cmp	r1, #10
 8010528:	d103      	bne.n	8010532 <__sfputc_r+0x1e>
 801052a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801052e:	f7fd baea 	b.w	800db06 <__swbuf_r>
 8010532:	6813      	ldr	r3, [r2, #0]
 8010534:	1c58      	adds	r0, r3, #1
 8010536:	6010      	str	r0, [r2, #0]
 8010538:	7019      	strb	r1, [r3, #0]
 801053a:	4608      	mov	r0, r1
 801053c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010540:	4770      	bx	lr

08010542 <__sfputs_r>:
 8010542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010544:	4606      	mov	r6, r0
 8010546:	460f      	mov	r7, r1
 8010548:	4614      	mov	r4, r2
 801054a:	18d5      	adds	r5, r2, r3
 801054c:	42ac      	cmp	r4, r5
 801054e:	d101      	bne.n	8010554 <__sfputs_r+0x12>
 8010550:	2000      	movs	r0, #0
 8010552:	e007      	b.n	8010564 <__sfputs_r+0x22>
 8010554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010558:	463a      	mov	r2, r7
 801055a:	4630      	mov	r0, r6
 801055c:	f7ff ffda 	bl	8010514 <__sfputc_r>
 8010560:	1c43      	adds	r3, r0, #1
 8010562:	d1f3      	bne.n	801054c <__sfputs_r+0xa>
 8010564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010568 <_vfiprintf_r>:
 8010568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801056c:	460d      	mov	r5, r1
 801056e:	b09d      	sub	sp, #116	@ 0x74
 8010570:	4614      	mov	r4, r2
 8010572:	4698      	mov	r8, r3
 8010574:	4606      	mov	r6, r0
 8010576:	b118      	cbz	r0, 8010580 <_vfiprintf_r+0x18>
 8010578:	6a03      	ldr	r3, [r0, #32]
 801057a:	b90b      	cbnz	r3, 8010580 <_vfiprintf_r+0x18>
 801057c:	f7fd f9cc 	bl	800d918 <__sinit>
 8010580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010582:	07d9      	lsls	r1, r3, #31
 8010584:	d405      	bmi.n	8010592 <_vfiprintf_r+0x2a>
 8010586:	89ab      	ldrh	r3, [r5, #12]
 8010588:	059a      	lsls	r2, r3, #22
 801058a:	d402      	bmi.n	8010592 <_vfiprintf_r+0x2a>
 801058c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801058e:	f7fd fc5e 	bl	800de4e <__retarget_lock_acquire_recursive>
 8010592:	89ab      	ldrh	r3, [r5, #12]
 8010594:	071b      	lsls	r3, r3, #28
 8010596:	d501      	bpl.n	801059c <_vfiprintf_r+0x34>
 8010598:	692b      	ldr	r3, [r5, #16]
 801059a:	b99b      	cbnz	r3, 80105c4 <_vfiprintf_r+0x5c>
 801059c:	4629      	mov	r1, r5
 801059e:	4630      	mov	r0, r6
 80105a0:	f7fd faf0 	bl	800db84 <__swsetup_r>
 80105a4:	b170      	cbz	r0, 80105c4 <_vfiprintf_r+0x5c>
 80105a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80105a8:	07dc      	lsls	r4, r3, #31
 80105aa:	d504      	bpl.n	80105b6 <_vfiprintf_r+0x4e>
 80105ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80105b0:	b01d      	add	sp, #116	@ 0x74
 80105b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105b6:	89ab      	ldrh	r3, [r5, #12]
 80105b8:	0598      	lsls	r0, r3, #22
 80105ba:	d4f7      	bmi.n	80105ac <_vfiprintf_r+0x44>
 80105bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80105be:	f7fd fc47 	bl	800de50 <__retarget_lock_release_recursive>
 80105c2:	e7f3      	b.n	80105ac <_vfiprintf_r+0x44>
 80105c4:	2300      	movs	r3, #0
 80105c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80105c8:	2320      	movs	r3, #32
 80105ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80105ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80105d2:	2330      	movs	r3, #48	@ 0x30
 80105d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010784 <_vfiprintf_r+0x21c>
 80105d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80105dc:	f04f 0901 	mov.w	r9, #1
 80105e0:	4623      	mov	r3, r4
 80105e2:	469a      	mov	sl, r3
 80105e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105e8:	b10a      	cbz	r2, 80105ee <_vfiprintf_r+0x86>
 80105ea:	2a25      	cmp	r2, #37	@ 0x25
 80105ec:	d1f9      	bne.n	80105e2 <_vfiprintf_r+0x7a>
 80105ee:	ebba 0b04 	subs.w	fp, sl, r4
 80105f2:	d00b      	beq.n	801060c <_vfiprintf_r+0xa4>
 80105f4:	465b      	mov	r3, fp
 80105f6:	4622      	mov	r2, r4
 80105f8:	4629      	mov	r1, r5
 80105fa:	4630      	mov	r0, r6
 80105fc:	f7ff ffa1 	bl	8010542 <__sfputs_r>
 8010600:	3001      	adds	r0, #1
 8010602:	f000 80a7 	beq.w	8010754 <_vfiprintf_r+0x1ec>
 8010606:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010608:	445a      	add	r2, fp
 801060a:	9209      	str	r2, [sp, #36]	@ 0x24
 801060c:	f89a 3000 	ldrb.w	r3, [sl]
 8010610:	2b00      	cmp	r3, #0
 8010612:	f000 809f 	beq.w	8010754 <_vfiprintf_r+0x1ec>
 8010616:	2300      	movs	r3, #0
 8010618:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801061c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010620:	f10a 0a01 	add.w	sl, sl, #1
 8010624:	9304      	str	r3, [sp, #16]
 8010626:	9307      	str	r3, [sp, #28]
 8010628:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801062c:	931a      	str	r3, [sp, #104]	@ 0x68
 801062e:	4654      	mov	r4, sl
 8010630:	2205      	movs	r2, #5
 8010632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010636:	4853      	ldr	r0, [pc, #332]	@ (8010784 <_vfiprintf_r+0x21c>)
 8010638:	f7ef fdd2 	bl	80001e0 <memchr>
 801063c:	9a04      	ldr	r2, [sp, #16]
 801063e:	b9d8      	cbnz	r0, 8010678 <_vfiprintf_r+0x110>
 8010640:	06d1      	lsls	r1, r2, #27
 8010642:	bf44      	itt	mi
 8010644:	2320      	movmi	r3, #32
 8010646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801064a:	0713      	lsls	r3, r2, #28
 801064c:	bf44      	itt	mi
 801064e:	232b      	movmi	r3, #43	@ 0x2b
 8010650:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010654:	f89a 3000 	ldrb.w	r3, [sl]
 8010658:	2b2a      	cmp	r3, #42	@ 0x2a
 801065a:	d015      	beq.n	8010688 <_vfiprintf_r+0x120>
 801065c:	9a07      	ldr	r2, [sp, #28]
 801065e:	4654      	mov	r4, sl
 8010660:	2000      	movs	r0, #0
 8010662:	f04f 0c0a 	mov.w	ip, #10
 8010666:	4621      	mov	r1, r4
 8010668:	f811 3b01 	ldrb.w	r3, [r1], #1
 801066c:	3b30      	subs	r3, #48	@ 0x30
 801066e:	2b09      	cmp	r3, #9
 8010670:	d94b      	bls.n	801070a <_vfiprintf_r+0x1a2>
 8010672:	b1b0      	cbz	r0, 80106a2 <_vfiprintf_r+0x13a>
 8010674:	9207      	str	r2, [sp, #28]
 8010676:	e014      	b.n	80106a2 <_vfiprintf_r+0x13a>
 8010678:	eba0 0308 	sub.w	r3, r0, r8
 801067c:	fa09 f303 	lsl.w	r3, r9, r3
 8010680:	4313      	orrs	r3, r2
 8010682:	9304      	str	r3, [sp, #16]
 8010684:	46a2      	mov	sl, r4
 8010686:	e7d2      	b.n	801062e <_vfiprintf_r+0xc6>
 8010688:	9b03      	ldr	r3, [sp, #12]
 801068a:	1d19      	adds	r1, r3, #4
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	9103      	str	r1, [sp, #12]
 8010690:	2b00      	cmp	r3, #0
 8010692:	bfbb      	ittet	lt
 8010694:	425b      	neglt	r3, r3
 8010696:	f042 0202 	orrlt.w	r2, r2, #2
 801069a:	9307      	strge	r3, [sp, #28]
 801069c:	9307      	strlt	r3, [sp, #28]
 801069e:	bfb8      	it	lt
 80106a0:	9204      	strlt	r2, [sp, #16]
 80106a2:	7823      	ldrb	r3, [r4, #0]
 80106a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80106a6:	d10a      	bne.n	80106be <_vfiprintf_r+0x156>
 80106a8:	7863      	ldrb	r3, [r4, #1]
 80106aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80106ac:	d132      	bne.n	8010714 <_vfiprintf_r+0x1ac>
 80106ae:	9b03      	ldr	r3, [sp, #12]
 80106b0:	1d1a      	adds	r2, r3, #4
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	9203      	str	r2, [sp, #12]
 80106b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80106ba:	3402      	adds	r4, #2
 80106bc:	9305      	str	r3, [sp, #20]
 80106be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010794 <_vfiprintf_r+0x22c>
 80106c2:	7821      	ldrb	r1, [r4, #0]
 80106c4:	2203      	movs	r2, #3
 80106c6:	4650      	mov	r0, sl
 80106c8:	f7ef fd8a 	bl	80001e0 <memchr>
 80106cc:	b138      	cbz	r0, 80106de <_vfiprintf_r+0x176>
 80106ce:	9b04      	ldr	r3, [sp, #16]
 80106d0:	eba0 000a 	sub.w	r0, r0, sl
 80106d4:	2240      	movs	r2, #64	@ 0x40
 80106d6:	4082      	lsls	r2, r0
 80106d8:	4313      	orrs	r3, r2
 80106da:	3401      	adds	r4, #1
 80106dc:	9304      	str	r3, [sp, #16]
 80106de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106e2:	4829      	ldr	r0, [pc, #164]	@ (8010788 <_vfiprintf_r+0x220>)
 80106e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80106e8:	2206      	movs	r2, #6
 80106ea:	f7ef fd79 	bl	80001e0 <memchr>
 80106ee:	2800      	cmp	r0, #0
 80106f0:	d03f      	beq.n	8010772 <_vfiprintf_r+0x20a>
 80106f2:	4b26      	ldr	r3, [pc, #152]	@ (801078c <_vfiprintf_r+0x224>)
 80106f4:	bb1b      	cbnz	r3, 801073e <_vfiprintf_r+0x1d6>
 80106f6:	9b03      	ldr	r3, [sp, #12]
 80106f8:	3307      	adds	r3, #7
 80106fa:	f023 0307 	bic.w	r3, r3, #7
 80106fe:	3308      	adds	r3, #8
 8010700:	9303      	str	r3, [sp, #12]
 8010702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010704:	443b      	add	r3, r7
 8010706:	9309      	str	r3, [sp, #36]	@ 0x24
 8010708:	e76a      	b.n	80105e0 <_vfiprintf_r+0x78>
 801070a:	fb0c 3202 	mla	r2, ip, r2, r3
 801070e:	460c      	mov	r4, r1
 8010710:	2001      	movs	r0, #1
 8010712:	e7a8      	b.n	8010666 <_vfiprintf_r+0xfe>
 8010714:	2300      	movs	r3, #0
 8010716:	3401      	adds	r4, #1
 8010718:	9305      	str	r3, [sp, #20]
 801071a:	4619      	mov	r1, r3
 801071c:	f04f 0c0a 	mov.w	ip, #10
 8010720:	4620      	mov	r0, r4
 8010722:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010726:	3a30      	subs	r2, #48	@ 0x30
 8010728:	2a09      	cmp	r2, #9
 801072a:	d903      	bls.n	8010734 <_vfiprintf_r+0x1cc>
 801072c:	2b00      	cmp	r3, #0
 801072e:	d0c6      	beq.n	80106be <_vfiprintf_r+0x156>
 8010730:	9105      	str	r1, [sp, #20]
 8010732:	e7c4      	b.n	80106be <_vfiprintf_r+0x156>
 8010734:	fb0c 2101 	mla	r1, ip, r1, r2
 8010738:	4604      	mov	r4, r0
 801073a:	2301      	movs	r3, #1
 801073c:	e7f0      	b.n	8010720 <_vfiprintf_r+0x1b8>
 801073e:	ab03      	add	r3, sp, #12
 8010740:	9300      	str	r3, [sp, #0]
 8010742:	462a      	mov	r2, r5
 8010744:	4b12      	ldr	r3, [pc, #72]	@ (8010790 <_vfiprintf_r+0x228>)
 8010746:	a904      	add	r1, sp, #16
 8010748:	4630      	mov	r0, r6
 801074a:	f7fc fa8d 	bl	800cc68 <_printf_float>
 801074e:	4607      	mov	r7, r0
 8010750:	1c78      	adds	r0, r7, #1
 8010752:	d1d6      	bne.n	8010702 <_vfiprintf_r+0x19a>
 8010754:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010756:	07d9      	lsls	r1, r3, #31
 8010758:	d405      	bmi.n	8010766 <_vfiprintf_r+0x1fe>
 801075a:	89ab      	ldrh	r3, [r5, #12]
 801075c:	059a      	lsls	r2, r3, #22
 801075e:	d402      	bmi.n	8010766 <_vfiprintf_r+0x1fe>
 8010760:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010762:	f7fd fb75 	bl	800de50 <__retarget_lock_release_recursive>
 8010766:	89ab      	ldrh	r3, [r5, #12]
 8010768:	065b      	lsls	r3, r3, #25
 801076a:	f53f af1f 	bmi.w	80105ac <_vfiprintf_r+0x44>
 801076e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010770:	e71e      	b.n	80105b0 <_vfiprintf_r+0x48>
 8010772:	ab03      	add	r3, sp, #12
 8010774:	9300      	str	r3, [sp, #0]
 8010776:	462a      	mov	r2, r5
 8010778:	4b05      	ldr	r3, [pc, #20]	@ (8010790 <_vfiprintf_r+0x228>)
 801077a:	a904      	add	r1, sp, #16
 801077c:	4630      	mov	r0, r6
 801077e:	f7fc fd0b 	bl	800d198 <_printf_i>
 8010782:	e7e4      	b.n	801074e <_vfiprintf_r+0x1e6>
 8010784:	08011690 	.word	0x08011690
 8010788:	0801169a 	.word	0x0801169a
 801078c:	0800cc69 	.word	0x0800cc69
 8010790:	08010543 	.word	0x08010543
 8010794:	08011696 	.word	0x08011696

08010798 <__sflush_r>:
 8010798:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801079c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107a0:	0716      	lsls	r6, r2, #28
 80107a2:	4605      	mov	r5, r0
 80107a4:	460c      	mov	r4, r1
 80107a6:	d454      	bmi.n	8010852 <__sflush_r+0xba>
 80107a8:	684b      	ldr	r3, [r1, #4]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	dc02      	bgt.n	80107b4 <__sflush_r+0x1c>
 80107ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	dd48      	ble.n	8010846 <__sflush_r+0xae>
 80107b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80107b6:	2e00      	cmp	r6, #0
 80107b8:	d045      	beq.n	8010846 <__sflush_r+0xae>
 80107ba:	2300      	movs	r3, #0
 80107bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80107c0:	682f      	ldr	r7, [r5, #0]
 80107c2:	6a21      	ldr	r1, [r4, #32]
 80107c4:	602b      	str	r3, [r5, #0]
 80107c6:	d030      	beq.n	801082a <__sflush_r+0x92>
 80107c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80107ca:	89a3      	ldrh	r3, [r4, #12]
 80107cc:	0759      	lsls	r1, r3, #29
 80107ce:	d505      	bpl.n	80107dc <__sflush_r+0x44>
 80107d0:	6863      	ldr	r3, [r4, #4]
 80107d2:	1ad2      	subs	r2, r2, r3
 80107d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80107d6:	b10b      	cbz	r3, 80107dc <__sflush_r+0x44>
 80107d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80107da:	1ad2      	subs	r2, r2, r3
 80107dc:	2300      	movs	r3, #0
 80107de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80107e0:	6a21      	ldr	r1, [r4, #32]
 80107e2:	4628      	mov	r0, r5
 80107e4:	47b0      	blx	r6
 80107e6:	1c43      	adds	r3, r0, #1
 80107e8:	89a3      	ldrh	r3, [r4, #12]
 80107ea:	d106      	bne.n	80107fa <__sflush_r+0x62>
 80107ec:	6829      	ldr	r1, [r5, #0]
 80107ee:	291d      	cmp	r1, #29
 80107f0:	d82b      	bhi.n	801084a <__sflush_r+0xb2>
 80107f2:	4a2a      	ldr	r2, [pc, #168]	@ (801089c <__sflush_r+0x104>)
 80107f4:	410a      	asrs	r2, r1
 80107f6:	07d6      	lsls	r6, r2, #31
 80107f8:	d427      	bmi.n	801084a <__sflush_r+0xb2>
 80107fa:	2200      	movs	r2, #0
 80107fc:	6062      	str	r2, [r4, #4]
 80107fe:	04d9      	lsls	r1, r3, #19
 8010800:	6922      	ldr	r2, [r4, #16]
 8010802:	6022      	str	r2, [r4, #0]
 8010804:	d504      	bpl.n	8010810 <__sflush_r+0x78>
 8010806:	1c42      	adds	r2, r0, #1
 8010808:	d101      	bne.n	801080e <__sflush_r+0x76>
 801080a:	682b      	ldr	r3, [r5, #0]
 801080c:	b903      	cbnz	r3, 8010810 <__sflush_r+0x78>
 801080e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010810:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010812:	602f      	str	r7, [r5, #0]
 8010814:	b1b9      	cbz	r1, 8010846 <__sflush_r+0xae>
 8010816:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801081a:	4299      	cmp	r1, r3
 801081c:	d002      	beq.n	8010824 <__sflush_r+0x8c>
 801081e:	4628      	mov	r0, r5
 8010820:	f7fe f996 	bl	800eb50 <_free_r>
 8010824:	2300      	movs	r3, #0
 8010826:	6363      	str	r3, [r4, #52]	@ 0x34
 8010828:	e00d      	b.n	8010846 <__sflush_r+0xae>
 801082a:	2301      	movs	r3, #1
 801082c:	4628      	mov	r0, r5
 801082e:	47b0      	blx	r6
 8010830:	4602      	mov	r2, r0
 8010832:	1c50      	adds	r0, r2, #1
 8010834:	d1c9      	bne.n	80107ca <__sflush_r+0x32>
 8010836:	682b      	ldr	r3, [r5, #0]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d0c6      	beq.n	80107ca <__sflush_r+0x32>
 801083c:	2b1d      	cmp	r3, #29
 801083e:	d001      	beq.n	8010844 <__sflush_r+0xac>
 8010840:	2b16      	cmp	r3, #22
 8010842:	d11e      	bne.n	8010882 <__sflush_r+0xea>
 8010844:	602f      	str	r7, [r5, #0]
 8010846:	2000      	movs	r0, #0
 8010848:	e022      	b.n	8010890 <__sflush_r+0xf8>
 801084a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801084e:	b21b      	sxth	r3, r3
 8010850:	e01b      	b.n	801088a <__sflush_r+0xf2>
 8010852:	690f      	ldr	r7, [r1, #16]
 8010854:	2f00      	cmp	r7, #0
 8010856:	d0f6      	beq.n	8010846 <__sflush_r+0xae>
 8010858:	0793      	lsls	r3, r2, #30
 801085a:	680e      	ldr	r6, [r1, #0]
 801085c:	bf08      	it	eq
 801085e:	694b      	ldreq	r3, [r1, #20]
 8010860:	600f      	str	r7, [r1, #0]
 8010862:	bf18      	it	ne
 8010864:	2300      	movne	r3, #0
 8010866:	eba6 0807 	sub.w	r8, r6, r7
 801086a:	608b      	str	r3, [r1, #8]
 801086c:	f1b8 0f00 	cmp.w	r8, #0
 8010870:	dde9      	ble.n	8010846 <__sflush_r+0xae>
 8010872:	6a21      	ldr	r1, [r4, #32]
 8010874:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010876:	4643      	mov	r3, r8
 8010878:	463a      	mov	r2, r7
 801087a:	4628      	mov	r0, r5
 801087c:	47b0      	blx	r6
 801087e:	2800      	cmp	r0, #0
 8010880:	dc08      	bgt.n	8010894 <__sflush_r+0xfc>
 8010882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801088a:	81a3      	strh	r3, [r4, #12]
 801088c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010894:	4407      	add	r7, r0
 8010896:	eba8 0800 	sub.w	r8, r8, r0
 801089a:	e7e7      	b.n	801086c <__sflush_r+0xd4>
 801089c:	dfbffffe 	.word	0xdfbffffe

080108a0 <_fflush_r>:
 80108a0:	b538      	push	{r3, r4, r5, lr}
 80108a2:	690b      	ldr	r3, [r1, #16]
 80108a4:	4605      	mov	r5, r0
 80108a6:	460c      	mov	r4, r1
 80108a8:	b913      	cbnz	r3, 80108b0 <_fflush_r+0x10>
 80108aa:	2500      	movs	r5, #0
 80108ac:	4628      	mov	r0, r5
 80108ae:	bd38      	pop	{r3, r4, r5, pc}
 80108b0:	b118      	cbz	r0, 80108ba <_fflush_r+0x1a>
 80108b2:	6a03      	ldr	r3, [r0, #32]
 80108b4:	b90b      	cbnz	r3, 80108ba <_fflush_r+0x1a>
 80108b6:	f7fd f82f 	bl	800d918 <__sinit>
 80108ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d0f3      	beq.n	80108aa <_fflush_r+0xa>
 80108c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80108c4:	07d0      	lsls	r0, r2, #31
 80108c6:	d404      	bmi.n	80108d2 <_fflush_r+0x32>
 80108c8:	0599      	lsls	r1, r3, #22
 80108ca:	d402      	bmi.n	80108d2 <_fflush_r+0x32>
 80108cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80108ce:	f7fd fabe 	bl	800de4e <__retarget_lock_acquire_recursive>
 80108d2:	4628      	mov	r0, r5
 80108d4:	4621      	mov	r1, r4
 80108d6:	f7ff ff5f 	bl	8010798 <__sflush_r>
 80108da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80108dc:	07da      	lsls	r2, r3, #31
 80108de:	4605      	mov	r5, r0
 80108e0:	d4e4      	bmi.n	80108ac <_fflush_r+0xc>
 80108e2:	89a3      	ldrh	r3, [r4, #12]
 80108e4:	059b      	lsls	r3, r3, #22
 80108e6:	d4e1      	bmi.n	80108ac <_fflush_r+0xc>
 80108e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80108ea:	f7fd fab1 	bl	800de50 <__retarget_lock_release_recursive>
 80108ee:	e7dd      	b.n	80108ac <_fflush_r+0xc>

080108f0 <fiprintf>:
 80108f0:	b40e      	push	{r1, r2, r3}
 80108f2:	b503      	push	{r0, r1, lr}
 80108f4:	4601      	mov	r1, r0
 80108f6:	ab03      	add	r3, sp, #12
 80108f8:	4805      	ldr	r0, [pc, #20]	@ (8010910 <fiprintf+0x20>)
 80108fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80108fe:	6800      	ldr	r0, [r0, #0]
 8010900:	9301      	str	r3, [sp, #4]
 8010902:	f7ff fe31 	bl	8010568 <_vfiprintf_r>
 8010906:	b002      	add	sp, #8
 8010908:	f85d eb04 	ldr.w	lr, [sp], #4
 801090c:	b003      	add	sp, #12
 801090e:	4770      	bx	lr
 8010910:	20000030 	.word	0x20000030

08010914 <__swhatbuf_r>:
 8010914:	b570      	push	{r4, r5, r6, lr}
 8010916:	460c      	mov	r4, r1
 8010918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801091c:	2900      	cmp	r1, #0
 801091e:	b096      	sub	sp, #88	@ 0x58
 8010920:	4615      	mov	r5, r2
 8010922:	461e      	mov	r6, r3
 8010924:	da0d      	bge.n	8010942 <__swhatbuf_r+0x2e>
 8010926:	89a3      	ldrh	r3, [r4, #12]
 8010928:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801092c:	f04f 0100 	mov.w	r1, #0
 8010930:	bf14      	ite	ne
 8010932:	2340      	movne	r3, #64	@ 0x40
 8010934:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010938:	2000      	movs	r0, #0
 801093a:	6031      	str	r1, [r6, #0]
 801093c:	602b      	str	r3, [r5, #0]
 801093e:	b016      	add	sp, #88	@ 0x58
 8010940:	bd70      	pop	{r4, r5, r6, pc}
 8010942:	466a      	mov	r2, sp
 8010944:	f000 f848 	bl	80109d8 <_fstat_r>
 8010948:	2800      	cmp	r0, #0
 801094a:	dbec      	blt.n	8010926 <__swhatbuf_r+0x12>
 801094c:	9901      	ldr	r1, [sp, #4]
 801094e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010952:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010956:	4259      	negs	r1, r3
 8010958:	4159      	adcs	r1, r3
 801095a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801095e:	e7eb      	b.n	8010938 <__swhatbuf_r+0x24>

08010960 <__smakebuf_r>:
 8010960:	898b      	ldrh	r3, [r1, #12]
 8010962:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010964:	079d      	lsls	r5, r3, #30
 8010966:	4606      	mov	r6, r0
 8010968:	460c      	mov	r4, r1
 801096a:	d507      	bpl.n	801097c <__smakebuf_r+0x1c>
 801096c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010970:	6023      	str	r3, [r4, #0]
 8010972:	6123      	str	r3, [r4, #16]
 8010974:	2301      	movs	r3, #1
 8010976:	6163      	str	r3, [r4, #20]
 8010978:	b003      	add	sp, #12
 801097a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801097c:	ab01      	add	r3, sp, #4
 801097e:	466a      	mov	r2, sp
 8010980:	f7ff ffc8 	bl	8010914 <__swhatbuf_r>
 8010984:	9f00      	ldr	r7, [sp, #0]
 8010986:	4605      	mov	r5, r0
 8010988:	4639      	mov	r1, r7
 801098a:	4630      	mov	r0, r6
 801098c:	f7fc f812 	bl	800c9b4 <_malloc_r>
 8010990:	b948      	cbnz	r0, 80109a6 <__smakebuf_r+0x46>
 8010992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010996:	059a      	lsls	r2, r3, #22
 8010998:	d4ee      	bmi.n	8010978 <__smakebuf_r+0x18>
 801099a:	f023 0303 	bic.w	r3, r3, #3
 801099e:	f043 0302 	orr.w	r3, r3, #2
 80109a2:	81a3      	strh	r3, [r4, #12]
 80109a4:	e7e2      	b.n	801096c <__smakebuf_r+0xc>
 80109a6:	89a3      	ldrh	r3, [r4, #12]
 80109a8:	6020      	str	r0, [r4, #0]
 80109aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109ae:	81a3      	strh	r3, [r4, #12]
 80109b0:	9b01      	ldr	r3, [sp, #4]
 80109b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80109b6:	b15b      	cbz	r3, 80109d0 <__smakebuf_r+0x70>
 80109b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109bc:	4630      	mov	r0, r6
 80109be:	f000 f81d 	bl	80109fc <_isatty_r>
 80109c2:	b128      	cbz	r0, 80109d0 <__smakebuf_r+0x70>
 80109c4:	89a3      	ldrh	r3, [r4, #12]
 80109c6:	f023 0303 	bic.w	r3, r3, #3
 80109ca:	f043 0301 	orr.w	r3, r3, #1
 80109ce:	81a3      	strh	r3, [r4, #12]
 80109d0:	89a3      	ldrh	r3, [r4, #12]
 80109d2:	431d      	orrs	r5, r3
 80109d4:	81a5      	strh	r5, [r4, #12]
 80109d6:	e7cf      	b.n	8010978 <__smakebuf_r+0x18>

080109d8 <_fstat_r>:
 80109d8:	b538      	push	{r3, r4, r5, lr}
 80109da:	4d07      	ldr	r5, [pc, #28]	@ (80109f8 <_fstat_r+0x20>)
 80109dc:	2300      	movs	r3, #0
 80109de:	4604      	mov	r4, r0
 80109e0:	4608      	mov	r0, r1
 80109e2:	4611      	mov	r1, r2
 80109e4:	602b      	str	r3, [r5, #0]
 80109e6:	f7f2 fd79 	bl	80034dc <_fstat>
 80109ea:	1c43      	adds	r3, r0, #1
 80109ec:	d102      	bne.n	80109f4 <_fstat_r+0x1c>
 80109ee:	682b      	ldr	r3, [r5, #0]
 80109f0:	b103      	cbz	r3, 80109f4 <_fstat_r+0x1c>
 80109f2:	6023      	str	r3, [r4, #0]
 80109f4:	bd38      	pop	{r3, r4, r5, pc}
 80109f6:	bf00      	nop
 80109f8:	20005568 	.word	0x20005568

080109fc <_isatty_r>:
 80109fc:	b538      	push	{r3, r4, r5, lr}
 80109fe:	4d06      	ldr	r5, [pc, #24]	@ (8010a18 <_isatty_r+0x1c>)
 8010a00:	2300      	movs	r3, #0
 8010a02:	4604      	mov	r4, r0
 8010a04:	4608      	mov	r0, r1
 8010a06:	602b      	str	r3, [r5, #0]
 8010a08:	f7f2 fd78 	bl	80034fc <_isatty>
 8010a0c:	1c43      	adds	r3, r0, #1
 8010a0e:	d102      	bne.n	8010a16 <_isatty_r+0x1a>
 8010a10:	682b      	ldr	r3, [r5, #0]
 8010a12:	b103      	cbz	r3, 8010a16 <_isatty_r+0x1a>
 8010a14:	6023      	str	r3, [r4, #0]
 8010a16:	bd38      	pop	{r3, r4, r5, pc}
 8010a18:	20005568 	.word	0x20005568
 8010a1c:	00000000 	.word	0x00000000

08010a20 <nan>:
 8010a20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010a28 <nan+0x8>
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop
 8010a28:	00000000 	.word	0x00000000
 8010a2c:	7ff80000 	.word	0x7ff80000

08010a30 <abort>:
 8010a30:	b508      	push	{r3, lr}
 8010a32:	2006      	movs	r0, #6
 8010a34:	f000 fb82 	bl	801113c <raise>
 8010a38:	2001      	movs	r0, #1
 8010a3a:	f7f2 fcff 	bl	800343c <_exit>

08010a3e <rshift>:
 8010a3e:	6903      	ldr	r3, [r0, #16]
 8010a40:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010a44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010a48:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010a4c:	f100 0414 	add.w	r4, r0, #20
 8010a50:	dd45      	ble.n	8010ade <rshift+0xa0>
 8010a52:	f011 011f 	ands.w	r1, r1, #31
 8010a56:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010a5a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010a5e:	d10c      	bne.n	8010a7a <rshift+0x3c>
 8010a60:	f100 0710 	add.w	r7, r0, #16
 8010a64:	4629      	mov	r1, r5
 8010a66:	42b1      	cmp	r1, r6
 8010a68:	d334      	bcc.n	8010ad4 <rshift+0x96>
 8010a6a:	1a9b      	subs	r3, r3, r2
 8010a6c:	009b      	lsls	r3, r3, #2
 8010a6e:	1eea      	subs	r2, r5, #3
 8010a70:	4296      	cmp	r6, r2
 8010a72:	bf38      	it	cc
 8010a74:	2300      	movcc	r3, #0
 8010a76:	4423      	add	r3, r4
 8010a78:	e015      	b.n	8010aa6 <rshift+0x68>
 8010a7a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010a7e:	f1c1 0820 	rsb	r8, r1, #32
 8010a82:	40cf      	lsrs	r7, r1
 8010a84:	f105 0e04 	add.w	lr, r5, #4
 8010a88:	46a1      	mov	r9, r4
 8010a8a:	4576      	cmp	r6, lr
 8010a8c:	46f4      	mov	ip, lr
 8010a8e:	d815      	bhi.n	8010abc <rshift+0x7e>
 8010a90:	1a9a      	subs	r2, r3, r2
 8010a92:	0092      	lsls	r2, r2, #2
 8010a94:	3a04      	subs	r2, #4
 8010a96:	3501      	adds	r5, #1
 8010a98:	42ae      	cmp	r6, r5
 8010a9a:	bf38      	it	cc
 8010a9c:	2200      	movcc	r2, #0
 8010a9e:	18a3      	adds	r3, r4, r2
 8010aa0:	50a7      	str	r7, [r4, r2]
 8010aa2:	b107      	cbz	r7, 8010aa6 <rshift+0x68>
 8010aa4:	3304      	adds	r3, #4
 8010aa6:	1b1a      	subs	r2, r3, r4
 8010aa8:	42a3      	cmp	r3, r4
 8010aaa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010aae:	bf08      	it	eq
 8010ab0:	2300      	moveq	r3, #0
 8010ab2:	6102      	str	r2, [r0, #16]
 8010ab4:	bf08      	it	eq
 8010ab6:	6143      	streq	r3, [r0, #20]
 8010ab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010abc:	f8dc c000 	ldr.w	ip, [ip]
 8010ac0:	fa0c fc08 	lsl.w	ip, ip, r8
 8010ac4:	ea4c 0707 	orr.w	r7, ip, r7
 8010ac8:	f849 7b04 	str.w	r7, [r9], #4
 8010acc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010ad0:	40cf      	lsrs	r7, r1
 8010ad2:	e7da      	b.n	8010a8a <rshift+0x4c>
 8010ad4:	f851 cb04 	ldr.w	ip, [r1], #4
 8010ad8:	f847 cf04 	str.w	ip, [r7, #4]!
 8010adc:	e7c3      	b.n	8010a66 <rshift+0x28>
 8010ade:	4623      	mov	r3, r4
 8010ae0:	e7e1      	b.n	8010aa6 <rshift+0x68>

08010ae2 <__hexdig_fun>:
 8010ae2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010ae6:	2b09      	cmp	r3, #9
 8010ae8:	d802      	bhi.n	8010af0 <__hexdig_fun+0xe>
 8010aea:	3820      	subs	r0, #32
 8010aec:	b2c0      	uxtb	r0, r0
 8010aee:	4770      	bx	lr
 8010af0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010af4:	2b05      	cmp	r3, #5
 8010af6:	d801      	bhi.n	8010afc <__hexdig_fun+0x1a>
 8010af8:	3847      	subs	r0, #71	@ 0x47
 8010afa:	e7f7      	b.n	8010aec <__hexdig_fun+0xa>
 8010afc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010b00:	2b05      	cmp	r3, #5
 8010b02:	d801      	bhi.n	8010b08 <__hexdig_fun+0x26>
 8010b04:	3827      	subs	r0, #39	@ 0x27
 8010b06:	e7f1      	b.n	8010aec <__hexdig_fun+0xa>
 8010b08:	2000      	movs	r0, #0
 8010b0a:	4770      	bx	lr

08010b0c <__gethex>:
 8010b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b10:	b085      	sub	sp, #20
 8010b12:	468a      	mov	sl, r1
 8010b14:	9302      	str	r3, [sp, #8]
 8010b16:	680b      	ldr	r3, [r1, #0]
 8010b18:	9001      	str	r0, [sp, #4]
 8010b1a:	4690      	mov	r8, r2
 8010b1c:	1c9c      	adds	r4, r3, #2
 8010b1e:	46a1      	mov	r9, r4
 8010b20:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010b24:	2830      	cmp	r0, #48	@ 0x30
 8010b26:	d0fa      	beq.n	8010b1e <__gethex+0x12>
 8010b28:	eba9 0303 	sub.w	r3, r9, r3
 8010b2c:	f1a3 0b02 	sub.w	fp, r3, #2
 8010b30:	f7ff ffd7 	bl	8010ae2 <__hexdig_fun>
 8010b34:	4605      	mov	r5, r0
 8010b36:	2800      	cmp	r0, #0
 8010b38:	d168      	bne.n	8010c0c <__gethex+0x100>
 8010b3a:	49a0      	ldr	r1, [pc, #640]	@ (8010dbc <__gethex+0x2b0>)
 8010b3c:	2201      	movs	r2, #1
 8010b3e:	4648      	mov	r0, r9
 8010b40:	f7fd f898 	bl	800dc74 <strncmp>
 8010b44:	4607      	mov	r7, r0
 8010b46:	2800      	cmp	r0, #0
 8010b48:	d167      	bne.n	8010c1a <__gethex+0x10e>
 8010b4a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010b4e:	4626      	mov	r6, r4
 8010b50:	f7ff ffc7 	bl	8010ae2 <__hexdig_fun>
 8010b54:	2800      	cmp	r0, #0
 8010b56:	d062      	beq.n	8010c1e <__gethex+0x112>
 8010b58:	4623      	mov	r3, r4
 8010b5a:	7818      	ldrb	r0, [r3, #0]
 8010b5c:	2830      	cmp	r0, #48	@ 0x30
 8010b5e:	4699      	mov	r9, r3
 8010b60:	f103 0301 	add.w	r3, r3, #1
 8010b64:	d0f9      	beq.n	8010b5a <__gethex+0x4e>
 8010b66:	f7ff ffbc 	bl	8010ae2 <__hexdig_fun>
 8010b6a:	fab0 f580 	clz	r5, r0
 8010b6e:	096d      	lsrs	r5, r5, #5
 8010b70:	f04f 0b01 	mov.w	fp, #1
 8010b74:	464a      	mov	r2, r9
 8010b76:	4616      	mov	r6, r2
 8010b78:	3201      	adds	r2, #1
 8010b7a:	7830      	ldrb	r0, [r6, #0]
 8010b7c:	f7ff ffb1 	bl	8010ae2 <__hexdig_fun>
 8010b80:	2800      	cmp	r0, #0
 8010b82:	d1f8      	bne.n	8010b76 <__gethex+0x6a>
 8010b84:	498d      	ldr	r1, [pc, #564]	@ (8010dbc <__gethex+0x2b0>)
 8010b86:	2201      	movs	r2, #1
 8010b88:	4630      	mov	r0, r6
 8010b8a:	f7fd f873 	bl	800dc74 <strncmp>
 8010b8e:	2800      	cmp	r0, #0
 8010b90:	d13f      	bne.n	8010c12 <__gethex+0x106>
 8010b92:	b944      	cbnz	r4, 8010ba6 <__gethex+0x9a>
 8010b94:	1c74      	adds	r4, r6, #1
 8010b96:	4622      	mov	r2, r4
 8010b98:	4616      	mov	r6, r2
 8010b9a:	3201      	adds	r2, #1
 8010b9c:	7830      	ldrb	r0, [r6, #0]
 8010b9e:	f7ff ffa0 	bl	8010ae2 <__hexdig_fun>
 8010ba2:	2800      	cmp	r0, #0
 8010ba4:	d1f8      	bne.n	8010b98 <__gethex+0x8c>
 8010ba6:	1ba4      	subs	r4, r4, r6
 8010ba8:	00a7      	lsls	r7, r4, #2
 8010baa:	7833      	ldrb	r3, [r6, #0]
 8010bac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010bb0:	2b50      	cmp	r3, #80	@ 0x50
 8010bb2:	d13e      	bne.n	8010c32 <__gethex+0x126>
 8010bb4:	7873      	ldrb	r3, [r6, #1]
 8010bb6:	2b2b      	cmp	r3, #43	@ 0x2b
 8010bb8:	d033      	beq.n	8010c22 <__gethex+0x116>
 8010bba:	2b2d      	cmp	r3, #45	@ 0x2d
 8010bbc:	d034      	beq.n	8010c28 <__gethex+0x11c>
 8010bbe:	1c71      	adds	r1, r6, #1
 8010bc0:	2400      	movs	r4, #0
 8010bc2:	7808      	ldrb	r0, [r1, #0]
 8010bc4:	f7ff ff8d 	bl	8010ae2 <__hexdig_fun>
 8010bc8:	1e43      	subs	r3, r0, #1
 8010bca:	b2db      	uxtb	r3, r3
 8010bcc:	2b18      	cmp	r3, #24
 8010bce:	d830      	bhi.n	8010c32 <__gethex+0x126>
 8010bd0:	f1a0 0210 	sub.w	r2, r0, #16
 8010bd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010bd8:	f7ff ff83 	bl	8010ae2 <__hexdig_fun>
 8010bdc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8010be0:	fa5f fc8c 	uxtb.w	ip, ip
 8010be4:	f1bc 0f18 	cmp.w	ip, #24
 8010be8:	f04f 030a 	mov.w	r3, #10
 8010bec:	d91e      	bls.n	8010c2c <__gethex+0x120>
 8010bee:	b104      	cbz	r4, 8010bf2 <__gethex+0xe6>
 8010bf0:	4252      	negs	r2, r2
 8010bf2:	4417      	add	r7, r2
 8010bf4:	f8ca 1000 	str.w	r1, [sl]
 8010bf8:	b1ed      	cbz	r5, 8010c36 <__gethex+0x12a>
 8010bfa:	f1bb 0f00 	cmp.w	fp, #0
 8010bfe:	bf0c      	ite	eq
 8010c00:	2506      	moveq	r5, #6
 8010c02:	2500      	movne	r5, #0
 8010c04:	4628      	mov	r0, r5
 8010c06:	b005      	add	sp, #20
 8010c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c0c:	2500      	movs	r5, #0
 8010c0e:	462c      	mov	r4, r5
 8010c10:	e7b0      	b.n	8010b74 <__gethex+0x68>
 8010c12:	2c00      	cmp	r4, #0
 8010c14:	d1c7      	bne.n	8010ba6 <__gethex+0x9a>
 8010c16:	4627      	mov	r7, r4
 8010c18:	e7c7      	b.n	8010baa <__gethex+0x9e>
 8010c1a:	464e      	mov	r6, r9
 8010c1c:	462f      	mov	r7, r5
 8010c1e:	2501      	movs	r5, #1
 8010c20:	e7c3      	b.n	8010baa <__gethex+0x9e>
 8010c22:	2400      	movs	r4, #0
 8010c24:	1cb1      	adds	r1, r6, #2
 8010c26:	e7cc      	b.n	8010bc2 <__gethex+0xb6>
 8010c28:	2401      	movs	r4, #1
 8010c2a:	e7fb      	b.n	8010c24 <__gethex+0x118>
 8010c2c:	fb03 0002 	mla	r0, r3, r2, r0
 8010c30:	e7ce      	b.n	8010bd0 <__gethex+0xc4>
 8010c32:	4631      	mov	r1, r6
 8010c34:	e7de      	b.n	8010bf4 <__gethex+0xe8>
 8010c36:	eba6 0309 	sub.w	r3, r6, r9
 8010c3a:	3b01      	subs	r3, #1
 8010c3c:	4629      	mov	r1, r5
 8010c3e:	2b07      	cmp	r3, #7
 8010c40:	dc0a      	bgt.n	8010c58 <__gethex+0x14c>
 8010c42:	9801      	ldr	r0, [sp, #4]
 8010c44:	f7fd ffce 	bl	800ebe4 <_Balloc>
 8010c48:	4604      	mov	r4, r0
 8010c4a:	b940      	cbnz	r0, 8010c5e <__gethex+0x152>
 8010c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8010dc0 <__gethex+0x2b4>)
 8010c4e:	4602      	mov	r2, r0
 8010c50:	21e4      	movs	r1, #228	@ 0xe4
 8010c52:	485c      	ldr	r0, [pc, #368]	@ (8010dc4 <__gethex+0x2b8>)
 8010c54:	f7fd f912 	bl	800de7c <__assert_func>
 8010c58:	3101      	adds	r1, #1
 8010c5a:	105b      	asrs	r3, r3, #1
 8010c5c:	e7ef      	b.n	8010c3e <__gethex+0x132>
 8010c5e:	f100 0a14 	add.w	sl, r0, #20
 8010c62:	2300      	movs	r3, #0
 8010c64:	4655      	mov	r5, sl
 8010c66:	469b      	mov	fp, r3
 8010c68:	45b1      	cmp	r9, r6
 8010c6a:	d337      	bcc.n	8010cdc <__gethex+0x1d0>
 8010c6c:	f845 bb04 	str.w	fp, [r5], #4
 8010c70:	eba5 050a 	sub.w	r5, r5, sl
 8010c74:	10ad      	asrs	r5, r5, #2
 8010c76:	6125      	str	r5, [r4, #16]
 8010c78:	4658      	mov	r0, fp
 8010c7a:	f7fe f8a5 	bl	800edc8 <__hi0bits>
 8010c7e:	016d      	lsls	r5, r5, #5
 8010c80:	f8d8 6000 	ldr.w	r6, [r8]
 8010c84:	1a2d      	subs	r5, r5, r0
 8010c86:	42b5      	cmp	r5, r6
 8010c88:	dd54      	ble.n	8010d34 <__gethex+0x228>
 8010c8a:	1bad      	subs	r5, r5, r6
 8010c8c:	4629      	mov	r1, r5
 8010c8e:	4620      	mov	r0, r4
 8010c90:	f7fe fc39 	bl	800f506 <__any_on>
 8010c94:	4681      	mov	r9, r0
 8010c96:	b178      	cbz	r0, 8010cb8 <__gethex+0x1ac>
 8010c98:	1e6b      	subs	r3, r5, #1
 8010c9a:	1159      	asrs	r1, r3, #5
 8010c9c:	f003 021f 	and.w	r2, r3, #31
 8010ca0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010ca4:	f04f 0901 	mov.w	r9, #1
 8010ca8:	fa09 f202 	lsl.w	r2, r9, r2
 8010cac:	420a      	tst	r2, r1
 8010cae:	d003      	beq.n	8010cb8 <__gethex+0x1ac>
 8010cb0:	454b      	cmp	r3, r9
 8010cb2:	dc36      	bgt.n	8010d22 <__gethex+0x216>
 8010cb4:	f04f 0902 	mov.w	r9, #2
 8010cb8:	4629      	mov	r1, r5
 8010cba:	4620      	mov	r0, r4
 8010cbc:	f7ff febf 	bl	8010a3e <rshift>
 8010cc0:	442f      	add	r7, r5
 8010cc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010cc6:	42bb      	cmp	r3, r7
 8010cc8:	da42      	bge.n	8010d50 <__gethex+0x244>
 8010cca:	9801      	ldr	r0, [sp, #4]
 8010ccc:	4621      	mov	r1, r4
 8010cce:	f7fd ffc9 	bl	800ec64 <_Bfree>
 8010cd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	6013      	str	r3, [r2, #0]
 8010cd8:	25a3      	movs	r5, #163	@ 0xa3
 8010cda:	e793      	b.n	8010c04 <__gethex+0xf8>
 8010cdc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010ce0:	2a2e      	cmp	r2, #46	@ 0x2e
 8010ce2:	d012      	beq.n	8010d0a <__gethex+0x1fe>
 8010ce4:	2b20      	cmp	r3, #32
 8010ce6:	d104      	bne.n	8010cf2 <__gethex+0x1e6>
 8010ce8:	f845 bb04 	str.w	fp, [r5], #4
 8010cec:	f04f 0b00 	mov.w	fp, #0
 8010cf0:	465b      	mov	r3, fp
 8010cf2:	7830      	ldrb	r0, [r6, #0]
 8010cf4:	9303      	str	r3, [sp, #12]
 8010cf6:	f7ff fef4 	bl	8010ae2 <__hexdig_fun>
 8010cfa:	9b03      	ldr	r3, [sp, #12]
 8010cfc:	f000 000f 	and.w	r0, r0, #15
 8010d00:	4098      	lsls	r0, r3
 8010d02:	ea4b 0b00 	orr.w	fp, fp, r0
 8010d06:	3304      	adds	r3, #4
 8010d08:	e7ae      	b.n	8010c68 <__gethex+0x15c>
 8010d0a:	45b1      	cmp	r9, r6
 8010d0c:	d8ea      	bhi.n	8010ce4 <__gethex+0x1d8>
 8010d0e:	492b      	ldr	r1, [pc, #172]	@ (8010dbc <__gethex+0x2b0>)
 8010d10:	9303      	str	r3, [sp, #12]
 8010d12:	2201      	movs	r2, #1
 8010d14:	4630      	mov	r0, r6
 8010d16:	f7fc ffad 	bl	800dc74 <strncmp>
 8010d1a:	9b03      	ldr	r3, [sp, #12]
 8010d1c:	2800      	cmp	r0, #0
 8010d1e:	d1e1      	bne.n	8010ce4 <__gethex+0x1d8>
 8010d20:	e7a2      	b.n	8010c68 <__gethex+0x15c>
 8010d22:	1ea9      	subs	r1, r5, #2
 8010d24:	4620      	mov	r0, r4
 8010d26:	f7fe fbee 	bl	800f506 <__any_on>
 8010d2a:	2800      	cmp	r0, #0
 8010d2c:	d0c2      	beq.n	8010cb4 <__gethex+0x1a8>
 8010d2e:	f04f 0903 	mov.w	r9, #3
 8010d32:	e7c1      	b.n	8010cb8 <__gethex+0x1ac>
 8010d34:	da09      	bge.n	8010d4a <__gethex+0x23e>
 8010d36:	1b75      	subs	r5, r6, r5
 8010d38:	4621      	mov	r1, r4
 8010d3a:	9801      	ldr	r0, [sp, #4]
 8010d3c:	462a      	mov	r2, r5
 8010d3e:	f7fe f9a9 	bl	800f094 <__lshift>
 8010d42:	1b7f      	subs	r7, r7, r5
 8010d44:	4604      	mov	r4, r0
 8010d46:	f100 0a14 	add.w	sl, r0, #20
 8010d4a:	f04f 0900 	mov.w	r9, #0
 8010d4e:	e7b8      	b.n	8010cc2 <__gethex+0x1b6>
 8010d50:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010d54:	42bd      	cmp	r5, r7
 8010d56:	dd6f      	ble.n	8010e38 <__gethex+0x32c>
 8010d58:	1bed      	subs	r5, r5, r7
 8010d5a:	42ae      	cmp	r6, r5
 8010d5c:	dc34      	bgt.n	8010dc8 <__gethex+0x2bc>
 8010d5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d62:	2b02      	cmp	r3, #2
 8010d64:	d022      	beq.n	8010dac <__gethex+0x2a0>
 8010d66:	2b03      	cmp	r3, #3
 8010d68:	d024      	beq.n	8010db4 <__gethex+0x2a8>
 8010d6a:	2b01      	cmp	r3, #1
 8010d6c:	d115      	bne.n	8010d9a <__gethex+0x28e>
 8010d6e:	42ae      	cmp	r6, r5
 8010d70:	d113      	bne.n	8010d9a <__gethex+0x28e>
 8010d72:	2e01      	cmp	r6, #1
 8010d74:	d10b      	bne.n	8010d8e <__gethex+0x282>
 8010d76:	9a02      	ldr	r2, [sp, #8]
 8010d78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010d7c:	6013      	str	r3, [r2, #0]
 8010d7e:	2301      	movs	r3, #1
 8010d80:	6123      	str	r3, [r4, #16]
 8010d82:	f8ca 3000 	str.w	r3, [sl]
 8010d86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010d88:	2562      	movs	r5, #98	@ 0x62
 8010d8a:	601c      	str	r4, [r3, #0]
 8010d8c:	e73a      	b.n	8010c04 <__gethex+0xf8>
 8010d8e:	1e71      	subs	r1, r6, #1
 8010d90:	4620      	mov	r0, r4
 8010d92:	f7fe fbb8 	bl	800f506 <__any_on>
 8010d96:	2800      	cmp	r0, #0
 8010d98:	d1ed      	bne.n	8010d76 <__gethex+0x26a>
 8010d9a:	9801      	ldr	r0, [sp, #4]
 8010d9c:	4621      	mov	r1, r4
 8010d9e:	f7fd ff61 	bl	800ec64 <_Bfree>
 8010da2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010da4:	2300      	movs	r3, #0
 8010da6:	6013      	str	r3, [r2, #0]
 8010da8:	2550      	movs	r5, #80	@ 0x50
 8010daa:	e72b      	b.n	8010c04 <__gethex+0xf8>
 8010dac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d1f3      	bne.n	8010d9a <__gethex+0x28e>
 8010db2:	e7e0      	b.n	8010d76 <__gethex+0x26a>
 8010db4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d1dd      	bne.n	8010d76 <__gethex+0x26a>
 8010dba:	e7ee      	b.n	8010d9a <__gethex+0x28e>
 8010dbc:	08011638 	.word	0x08011638
 8010dc0:	080114d2 	.word	0x080114d2
 8010dc4:	080116a9 	.word	0x080116a9
 8010dc8:	1e6f      	subs	r7, r5, #1
 8010dca:	f1b9 0f00 	cmp.w	r9, #0
 8010dce:	d130      	bne.n	8010e32 <__gethex+0x326>
 8010dd0:	b127      	cbz	r7, 8010ddc <__gethex+0x2d0>
 8010dd2:	4639      	mov	r1, r7
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	f7fe fb96 	bl	800f506 <__any_on>
 8010dda:	4681      	mov	r9, r0
 8010ddc:	117a      	asrs	r2, r7, #5
 8010dde:	2301      	movs	r3, #1
 8010de0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010de4:	f007 071f 	and.w	r7, r7, #31
 8010de8:	40bb      	lsls	r3, r7
 8010dea:	4213      	tst	r3, r2
 8010dec:	4629      	mov	r1, r5
 8010dee:	4620      	mov	r0, r4
 8010df0:	bf18      	it	ne
 8010df2:	f049 0902 	orrne.w	r9, r9, #2
 8010df6:	f7ff fe22 	bl	8010a3e <rshift>
 8010dfa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010dfe:	1b76      	subs	r6, r6, r5
 8010e00:	2502      	movs	r5, #2
 8010e02:	f1b9 0f00 	cmp.w	r9, #0
 8010e06:	d047      	beq.n	8010e98 <__gethex+0x38c>
 8010e08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e0c:	2b02      	cmp	r3, #2
 8010e0e:	d015      	beq.n	8010e3c <__gethex+0x330>
 8010e10:	2b03      	cmp	r3, #3
 8010e12:	d017      	beq.n	8010e44 <__gethex+0x338>
 8010e14:	2b01      	cmp	r3, #1
 8010e16:	d109      	bne.n	8010e2c <__gethex+0x320>
 8010e18:	f019 0f02 	tst.w	r9, #2
 8010e1c:	d006      	beq.n	8010e2c <__gethex+0x320>
 8010e1e:	f8da 3000 	ldr.w	r3, [sl]
 8010e22:	ea49 0903 	orr.w	r9, r9, r3
 8010e26:	f019 0f01 	tst.w	r9, #1
 8010e2a:	d10e      	bne.n	8010e4a <__gethex+0x33e>
 8010e2c:	f045 0510 	orr.w	r5, r5, #16
 8010e30:	e032      	b.n	8010e98 <__gethex+0x38c>
 8010e32:	f04f 0901 	mov.w	r9, #1
 8010e36:	e7d1      	b.n	8010ddc <__gethex+0x2d0>
 8010e38:	2501      	movs	r5, #1
 8010e3a:	e7e2      	b.n	8010e02 <__gethex+0x2f6>
 8010e3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e3e:	f1c3 0301 	rsb	r3, r3, #1
 8010e42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010e44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d0f0      	beq.n	8010e2c <__gethex+0x320>
 8010e4a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010e4e:	f104 0314 	add.w	r3, r4, #20
 8010e52:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010e56:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010e5a:	f04f 0c00 	mov.w	ip, #0
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e64:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8010e68:	d01b      	beq.n	8010ea2 <__gethex+0x396>
 8010e6a:	3201      	adds	r2, #1
 8010e6c:	6002      	str	r2, [r0, #0]
 8010e6e:	2d02      	cmp	r5, #2
 8010e70:	f104 0314 	add.w	r3, r4, #20
 8010e74:	d13c      	bne.n	8010ef0 <__gethex+0x3e4>
 8010e76:	f8d8 2000 	ldr.w	r2, [r8]
 8010e7a:	3a01      	subs	r2, #1
 8010e7c:	42b2      	cmp	r2, r6
 8010e7e:	d109      	bne.n	8010e94 <__gethex+0x388>
 8010e80:	1171      	asrs	r1, r6, #5
 8010e82:	2201      	movs	r2, #1
 8010e84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010e88:	f006 061f 	and.w	r6, r6, #31
 8010e8c:	fa02 f606 	lsl.w	r6, r2, r6
 8010e90:	421e      	tst	r6, r3
 8010e92:	d13a      	bne.n	8010f0a <__gethex+0x3fe>
 8010e94:	f045 0520 	orr.w	r5, r5, #32
 8010e98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010e9a:	601c      	str	r4, [r3, #0]
 8010e9c:	9b02      	ldr	r3, [sp, #8]
 8010e9e:	601f      	str	r7, [r3, #0]
 8010ea0:	e6b0      	b.n	8010c04 <__gethex+0xf8>
 8010ea2:	4299      	cmp	r1, r3
 8010ea4:	f843 cc04 	str.w	ip, [r3, #-4]
 8010ea8:	d8d9      	bhi.n	8010e5e <__gethex+0x352>
 8010eaa:	68a3      	ldr	r3, [r4, #8]
 8010eac:	459b      	cmp	fp, r3
 8010eae:	db17      	blt.n	8010ee0 <__gethex+0x3d4>
 8010eb0:	6861      	ldr	r1, [r4, #4]
 8010eb2:	9801      	ldr	r0, [sp, #4]
 8010eb4:	3101      	adds	r1, #1
 8010eb6:	f7fd fe95 	bl	800ebe4 <_Balloc>
 8010eba:	4681      	mov	r9, r0
 8010ebc:	b918      	cbnz	r0, 8010ec6 <__gethex+0x3ba>
 8010ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8010f28 <__gethex+0x41c>)
 8010ec0:	4602      	mov	r2, r0
 8010ec2:	2184      	movs	r1, #132	@ 0x84
 8010ec4:	e6c5      	b.n	8010c52 <__gethex+0x146>
 8010ec6:	6922      	ldr	r2, [r4, #16]
 8010ec8:	3202      	adds	r2, #2
 8010eca:	f104 010c 	add.w	r1, r4, #12
 8010ece:	0092      	lsls	r2, r2, #2
 8010ed0:	300c      	adds	r0, #12
 8010ed2:	f7fc ffbe 	bl	800de52 <memcpy>
 8010ed6:	4621      	mov	r1, r4
 8010ed8:	9801      	ldr	r0, [sp, #4]
 8010eda:	f7fd fec3 	bl	800ec64 <_Bfree>
 8010ede:	464c      	mov	r4, r9
 8010ee0:	6923      	ldr	r3, [r4, #16]
 8010ee2:	1c5a      	adds	r2, r3, #1
 8010ee4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010ee8:	6122      	str	r2, [r4, #16]
 8010eea:	2201      	movs	r2, #1
 8010eec:	615a      	str	r2, [r3, #20]
 8010eee:	e7be      	b.n	8010e6e <__gethex+0x362>
 8010ef0:	6922      	ldr	r2, [r4, #16]
 8010ef2:	455a      	cmp	r2, fp
 8010ef4:	dd0b      	ble.n	8010f0e <__gethex+0x402>
 8010ef6:	2101      	movs	r1, #1
 8010ef8:	4620      	mov	r0, r4
 8010efa:	f7ff fda0 	bl	8010a3e <rshift>
 8010efe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f02:	3701      	adds	r7, #1
 8010f04:	42bb      	cmp	r3, r7
 8010f06:	f6ff aee0 	blt.w	8010cca <__gethex+0x1be>
 8010f0a:	2501      	movs	r5, #1
 8010f0c:	e7c2      	b.n	8010e94 <__gethex+0x388>
 8010f0e:	f016 061f 	ands.w	r6, r6, #31
 8010f12:	d0fa      	beq.n	8010f0a <__gethex+0x3fe>
 8010f14:	4453      	add	r3, sl
 8010f16:	f1c6 0620 	rsb	r6, r6, #32
 8010f1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8010f1e:	f7fd ff53 	bl	800edc8 <__hi0bits>
 8010f22:	42b0      	cmp	r0, r6
 8010f24:	dbe7      	blt.n	8010ef6 <__gethex+0x3ea>
 8010f26:	e7f0      	b.n	8010f0a <__gethex+0x3fe>
 8010f28:	080114d2 	.word	0x080114d2

08010f2c <L_shift>:
 8010f2c:	f1c2 0208 	rsb	r2, r2, #8
 8010f30:	0092      	lsls	r2, r2, #2
 8010f32:	b570      	push	{r4, r5, r6, lr}
 8010f34:	f1c2 0620 	rsb	r6, r2, #32
 8010f38:	6843      	ldr	r3, [r0, #4]
 8010f3a:	6804      	ldr	r4, [r0, #0]
 8010f3c:	fa03 f506 	lsl.w	r5, r3, r6
 8010f40:	432c      	orrs	r4, r5
 8010f42:	40d3      	lsrs	r3, r2
 8010f44:	6004      	str	r4, [r0, #0]
 8010f46:	f840 3f04 	str.w	r3, [r0, #4]!
 8010f4a:	4288      	cmp	r0, r1
 8010f4c:	d3f4      	bcc.n	8010f38 <L_shift+0xc>
 8010f4e:	bd70      	pop	{r4, r5, r6, pc}

08010f50 <__match>:
 8010f50:	b530      	push	{r4, r5, lr}
 8010f52:	6803      	ldr	r3, [r0, #0]
 8010f54:	3301      	adds	r3, #1
 8010f56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f5a:	b914      	cbnz	r4, 8010f62 <__match+0x12>
 8010f5c:	6003      	str	r3, [r0, #0]
 8010f5e:	2001      	movs	r0, #1
 8010f60:	bd30      	pop	{r4, r5, pc}
 8010f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f66:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010f6a:	2d19      	cmp	r5, #25
 8010f6c:	bf98      	it	ls
 8010f6e:	3220      	addls	r2, #32
 8010f70:	42a2      	cmp	r2, r4
 8010f72:	d0f0      	beq.n	8010f56 <__match+0x6>
 8010f74:	2000      	movs	r0, #0
 8010f76:	e7f3      	b.n	8010f60 <__match+0x10>

08010f78 <__hexnan>:
 8010f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f7c:	680b      	ldr	r3, [r1, #0]
 8010f7e:	6801      	ldr	r1, [r0, #0]
 8010f80:	115e      	asrs	r6, r3, #5
 8010f82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010f86:	f013 031f 	ands.w	r3, r3, #31
 8010f8a:	b087      	sub	sp, #28
 8010f8c:	bf18      	it	ne
 8010f8e:	3604      	addne	r6, #4
 8010f90:	2500      	movs	r5, #0
 8010f92:	1f37      	subs	r7, r6, #4
 8010f94:	4682      	mov	sl, r0
 8010f96:	4690      	mov	r8, r2
 8010f98:	9301      	str	r3, [sp, #4]
 8010f9a:	f846 5c04 	str.w	r5, [r6, #-4]
 8010f9e:	46b9      	mov	r9, r7
 8010fa0:	463c      	mov	r4, r7
 8010fa2:	9502      	str	r5, [sp, #8]
 8010fa4:	46ab      	mov	fp, r5
 8010fa6:	784a      	ldrb	r2, [r1, #1]
 8010fa8:	1c4b      	adds	r3, r1, #1
 8010faa:	9303      	str	r3, [sp, #12]
 8010fac:	b342      	cbz	r2, 8011000 <__hexnan+0x88>
 8010fae:	4610      	mov	r0, r2
 8010fb0:	9105      	str	r1, [sp, #20]
 8010fb2:	9204      	str	r2, [sp, #16]
 8010fb4:	f7ff fd95 	bl	8010ae2 <__hexdig_fun>
 8010fb8:	2800      	cmp	r0, #0
 8010fba:	d151      	bne.n	8011060 <__hexnan+0xe8>
 8010fbc:	9a04      	ldr	r2, [sp, #16]
 8010fbe:	9905      	ldr	r1, [sp, #20]
 8010fc0:	2a20      	cmp	r2, #32
 8010fc2:	d818      	bhi.n	8010ff6 <__hexnan+0x7e>
 8010fc4:	9b02      	ldr	r3, [sp, #8]
 8010fc6:	459b      	cmp	fp, r3
 8010fc8:	dd13      	ble.n	8010ff2 <__hexnan+0x7a>
 8010fca:	454c      	cmp	r4, r9
 8010fcc:	d206      	bcs.n	8010fdc <__hexnan+0x64>
 8010fce:	2d07      	cmp	r5, #7
 8010fd0:	dc04      	bgt.n	8010fdc <__hexnan+0x64>
 8010fd2:	462a      	mov	r2, r5
 8010fd4:	4649      	mov	r1, r9
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	f7ff ffa8 	bl	8010f2c <L_shift>
 8010fdc:	4544      	cmp	r4, r8
 8010fde:	d952      	bls.n	8011086 <__hexnan+0x10e>
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	f1a4 0904 	sub.w	r9, r4, #4
 8010fe6:	f844 3c04 	str.w	r3, [r4, #-4]
 8010fea:	f8cd b008 	str.w	fp, [sp, #8]
 8010fee:	464c      	mov	r4, r9
 8010ff0:	461d      	mov	r5, r3
 8010ff2:	9903      	ldr	r1, [sp, #12]
 8010ff4:	e7d7      	b.n	8010fa6 <__hexnan+0x2e>
 8010ff6:	2a29      	cmp	r2, #41	@ 0x29
 8010ff8:	d157      	bne.n	80110aa <__hexnan+0x132>
 8010ffa:	3102      	adds	r1, #2
 8010ffc:	f8ca 1000 	str.w	r1, [sl]
 8011000:	f1bb 0f00 	cmp.w	fp, #0
 8011004:	d051      	beq.n	80110aa <__hexnan+0x132>
 8011006:	454c      	cmp	r4, r9
 8011008:	d206      	bcs.n	8011018 <__hexnan+0xa0>
 801100a:	2d07      	cmp	r5, #7
 801100c:	dc04      	bgt.n	8011018 <__hexnan+0xa0>
 801100e:	462a      	mov	r2, r5
 8011010:	4649      	mov	r1, r9
 8011012:	4620      	mov	r0, r4
 8011014:	f7ff ff8a 	bl	8010f2c <L_shift>
 8011018:	4544      	cmp	r4, r8
 801101a:	d936      	bls.n	801108a <__hexnan+0x112>
 801101c:	f1a8 0204 	sub.w	r2, r8, #4
 8011020:	4623      	mov	r3, r4
 8011022:	f853 1b04 	ldr.w	r1, [r3], #4
 8011026:	f842 1f04 	str.w	r1, [r2, #4]!
 801102a:	429f      	cmp	r7, r3
 801102c:	d2f9      	bcs.n	8011022 <__hexnan+0xaa>
 801102e:	1b3b      	subs	r3, r7, r4
 8011030:	f023 0303 	bic.w	r3, r3, #3
 8011034:	3304      	adds	r3, #4
 8011036:	3401      	adds	r4, #1
 8011038:	3e03      	subs	r6, #3
 801103a:	42b4      	cmp	r4, r6
 801103c:	bf88      	it	hi
 801103e:	2304      	movhi	r3, #4
 8011040:	4443      	add	r3, r8
 8011042:	2200      	movs	r2, #0
 8011044:	f843 2b04 	str.w	r2, [r3], #4
 8011048:	429f      	cmp	r7, r3
 801104a:	d2fb      	bcs.n	8011044 <__hexnan+0xcc>
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	b91b      	cbnz	r3, 8011058 <__hexnan+0xe0>
 8011050:	4547      	cmp	r7, r8
 8011052:	d128      	bne.n	80110a6 <__hexnan+0x12e>
 8011054:	2301      	movs	r3, #1
 8011056:	603b      	str	r3, [r7, #0]
 8011058:	2005      	movs	r0, #5
 801105a:	b007      	add	sp, #28
 801105c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011060:	3501      	adds	r5, #1
 8011062:	2d08      	cmp	r5, #8
 8011064:	f10b 0b01 	add.w	fp, fp, #1
 8011068:	dd06      	ble.n	8011078 <__hexnan+0x100>
 801106a:	4544      	cmp	r4, r8
 801106c:	d9c1      	bls.n	8010ff2 <__hexnan+0x7a>
 801106e:	2300      	movs	r3, #0
 8011070:	f844 3c04 	str.w	r3, [r4, #-4]
 8011074:	2501      	movs	r5, #1
 8011076:	3c04      	subs	r4, #4
 8011078:	6822      	ldr	r2, [r4, #0]
 801107a:	f000 000f 	and.w	r0, r0, #15
 801107e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011082:	6020      	str	r0, [r4, #0]
 8011084:	e7b5      	b.n	8010ff2 <__hexnan+0x7a>
 8011086:	2508      	movs	r5, #8
 8011088:	e7b3      	b.n	8010ff2 <__hexnan+0x7a>
 801108a:	9b01      	ldr	r3, [sp, #4]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d0dd      	beq.n	801104c <__hexnan+0xd4>
 8011090:	f1c3 0320 	rsb	r3, r3, #32
 8011094:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011098:	40da      	lsrs	r2, r3
 801109a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801109e:	4013      	ands	r3, r2
 80110a0:	f846 3c04 	str.w	r3, [r6, #-4]
 80110a4:	e7d2      	b.n	801104c <__hexnan+0xd4>
 80110a6:	3f04      	subs	r7, #4
 80110a8:	e7d0      	b.n	801104c <__hexnan+0xd4>
 80110aa:	2004      	movs	r0, #4
 80110ac:	e7d5      	b.n	801105a <__hexnan+0xe2>

080110ae <__ascii_mbtowc>:
 80110ae:	b082      	sub	sp, #8
 80110b0:	b901      	cbnz	r1, 80110b4 <__ascii_mbtowc+0x6>
 80110b2:	a901      	add	r1, sp, #4
 80110b4:	b142      	cbz	r2, 80110c8 <__ascii_mbtowc+0x1a>
 80110b6:	b14b      	cbz	r3, 80110cc <__ascii_mbtowc+0x1e>
 80110b8:	7813      	ldrb	r3, [r2, #0]
 80110ba:	600b      	str	r3, [r1, #0]
 80110bc:	7812      	ldrb	r2, [r2, #0]
 80110be:	1e10      	subs	r0, r2, #0
 80110c0:	bf18      	it	ne
 80110c2:	2001      	movne	r0, #1
 80110c4:	b002      	add	sp, #8
 80110c6:	4770      	bx	lr
 80110c8:	4610      	mov	r0, r2
 80110ca:	e7fb      	b.n	80110c4 <__ascii_mbtowc+0x16>
 80110cc:	f06f 0001 	mvn.w	r0, #1
 80110d0:	e7f8      	b.n	80110c4 <__ascii_mbtowc+0x16>

080110d2 <__ascii_wctomb>:
 80110d2:	4603      	mov	r3, r0
 80110d4:	4608      	mov	r0, r1
 80110d6:	b141      	cbz	r1, 80110ea <__ascii_wctomb+0x18>
 80110d8:	2aff      	cmp	r2, #255	@ 0xff
 80110da:	d904      	bls.n	80110e6 <__ascii_wctomb+0x14>
 80110dc:	228a      	movs	r2, #138	@ 0x8a
 80110de:	601a      	str	r2, [r3, #0]
 80110e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110e4:	4770      	bx	lr
 80110e6:	700a      	strb	r2, [r1, #0]
 80110e8:	2001      	movs	r0, #1
 80110ea:	4770      	bx	lr

080110ec <_raise_r>:
 80110ec:	291f      	cmp	r1, #31
 80110ee:	b538      	push	{r3, r4, r5, lr}
 80110f0:	4605      	mov	r5, r0
 80110f2:	460c      	mov	r4, r1
 80110f4:	d904      	bls.n	8011100 <_raise_r+0x14>
 80110f6:	2316      	movs	r3, #22
 80110f8:	6003      	str	r3, [r0, #0]
 80110fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80110fe:	bd38      	pop	{r3, r4, r5, pc}
 8011100:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011102:	b112      	cbz	r2, 801110a <_raise_r+0x1e>
 8011104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011108:	b94b      	cbnz	r3, 801111e <_raise_r+0x32>
 801110a:	4628      	mov	r0, r5
 801110c:	f000 f830 	bl	8011170 <_getpid_r>
 8011110:	4622      	mov	r2, r4
 8011112:	4601      	mov	r1, r0
 8011114:	4628      	mov	r0, r5
 8011116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801111a:	f000 b817 	b.w	801114c <_kill_r>
 801111e:	2b01      	cmp	r3, #1
 8011120:	d00a      	beq.n	8011138 <_raise_r+0x4c>
 8011122:	1c59      	adds	r1, r3, #1
 8011124:	d103      	bne.n	801112e <_raise_r+0x42>
 8011126:	2316      	movs	r3, #22
 8011128:	6003      	str	r3, [r0, #0]
 801112a:	2001      	movs	r0, #1
 801112c:	e7e7      	b.n	80110fe <_raise_r+0x12>
 801112e:	2100      	movs	r1, #0
 8011130:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011134:	4620      	mov	r0, r4
 8011136:	4798      	blx	r3
 8011138:	2000      	movs	r0, #0
 801113a:	e7e0      	b.n	80110fe <_raise_r+0x12>

0801113c <raise>:
 801113c:	4b02      	ldr	r3, [pc, #8]	@ (8011148 <raise+0xc>)
 801113e:	4601      	mov	r1, r0
 8011140:	6818      	ldr	r0, [r3, #0]
 8011142:	f7ff bfd3 	b.w	80110ec <_raise_r>
 8011146:	bf00      	nop
 8011148:	20000030 	.word	0x20000030

0801114c <_kill_r>:
 801114c:	b538      	push	{r3, r4, r5, lr}
 801114e:	4d07      	ldr	r5, [pc, #28]	@ (801116c <_kill_r+0x20>)
 8011150:	2300      	movs	r3, #0
 8011152:	4604      	mov	r4, r0
 8011154:	4608      	mov	r0, r1
 8011156:	4611      	mov	r1, r2
 8011158:	602b      	str	r3, [r5, #0]
 801115a:	f7f2 f95f 	bl	800341c <_kill>
 801115e:	1c43      	adds	r3, r0, #1
 8011160:	d102      	bne.n	8011168 <_kill_r+0x1c>
 8011162:	682b      	ldr	r3, [r5, #0]
 8011164:	b103      	cbz	r3, 8011168 <_kill_r+0x1c>
 8011166:	6023      	str	r3, [r4, #0]
 8011168:	bd38      	pop	{r3, r4, r5, pc}
 801116a:	bf00      	nop
 801116c:	20005568 	.word	0x20005568

08011170 <_getpid_r>:
 8011170:	f7f2 b94c 	b.w	800340c <_getpid>

08011174 <_init>:
 8011174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011176:	bf00      	nop
 8011178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801117a:	bc08      	pop	{r3}
 801117c:	469e      	mov	lr, r3
 801117e:	4770      	bx	lr

08011180 <_fini>:
 8011180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011182:	bf00      	nop
 8011184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011186:	bc08      	pop	{r3}
 8011188:	469e      	mov	lr, r3
 801118a:	4770      	bx	lr
